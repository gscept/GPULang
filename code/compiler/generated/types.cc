//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "types.h"
namespace GPULang
{
struct Namer
{
    Namer()
    {
        Float32Type.name = "f32"_c;
        UInt32Type.name = "u32"_c;
        Int32Type.name = "i32"_c;
        Bool8Type.name = "b8"_c;
        Float16Type.name = "f16"_c;
        UInt16Type.name = "u16"_c;
        Int16Type.name = "i16"_c;
        Float32x2Type.name = "f32x2"_c;
        UInt32x2Type.name = "u32x2"_c;
        Int32x2Type.name = "i32x2"_c;
        Bool8x2Type.name = "b8x2"_c;
        Float16x2Type.name = "f16x2"_c;
        UInt16x2Type.name = "u16x2"_c;
        Int16x2Type.name = "i16x2"_c;
        Float32x3Type.name = "f32x3"_c;
        UInt32x3Type.name = "u32x3"_c;
        Int32x3Type.name = "i32x3"_c;
        Bool8x3Type.name = "b8x3"_c;
        Float16x3Type.name = "f16x3"_c;
        UInt16x3Type.name = "u16x3"_c;
        Int16x3Type.name = "i16x3"_c;
        Float32x4Type.name = "f32x4"_c;
        UInt32x4Type.name = "u32x4"_c;
        Int32x4Type.name = "i32x4"_c;
        Bool8x4Type.name = "b8x4"_c;
        Float16x4Type.name = "f16x4"_c;
        UInt16x4Type.name = "u16x4"_c;
        Int16x4Type.name = "i16x4"_c;
        Float32x2x2Type.name = "f32x2x2"_c;
        Float32x3x2Type.name = "f32x3x2"_c;
        Float32x4x2Type.name = "f32x4x2"_c;
        Float32x2x3Type.name = "f32x2x3"_c;
        Float32x3x3Type.name = "f32x3x3"_c;
        Float32x4x3Type.name = "f32x4x3"_c;
        Float32x2x4Type.name = "f32x2x4"_c;
        Float32x3x4Type.name = "f32x3x4"_c;
        Float32x4x4Type.name = "f32x4x4"_c;
        Float16x2x2Type.name = "f16x2x2"_c;
        Float16x3x2Type.name = "f16x3x2"_c;
        Float16x4x2Type.name = "f16x4x2"_c;
        Float16x2x3Type.name = "f16x2x3"_c;
        Float16x3x3Type.name = "f16x3x3"_c;
        Float16x4x3Type.name = "f16x4x3"_c;
        Float16x2x4Type.name = "f16x2x4"_c;
        Float16x3x4Type.name = "f16x3x4"_c;
        Float16x4x4Type.name = "f16x4x4"_c;
    }
};
Namer namer;

} // namespace GPULang

#include "compiler.h"
namespace GPULang 
{
Compiler::Timer StaticTypeTimer;
struct StaticTypeTimerStart
{
    StaticTypeTimerStart()
    {
        StaticTypeTimer.Start();
    }
};
StaticTypeTimerStart StaticTypeTimerStartInstance;

/// operator[] with Int32
Variable Float32_operator_index_Int32_arg;
Function Float32_operator_index_Int32;
inline constexpr std::array Float32_operator_index_Int32_args = { &Float32_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32_operator_index_UInt32_arg;
Function Float32_operator_index_UInt32;
inline constexpr std::array Float32_operator_index_UInt32_args = { &Float32_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32_operator_index_Int16_arg;
Function Float32_operator_index_Int16;
inline constexpr std::array Float32_operator_index_Int16_args = { &Float32_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32_operator_index_UInt16_arg;
Function Float32_operator_index_UInt16;
inline constexpr std::array Float32_operator_index_UInt16_args = { &Float32_operator_index_UInt16_arg };

/// operator+ with Float32
Variable Float32_operator_add_Float32_arg;
Function Float32_operator_add_Float32;
inline constexpr std::array Float32_operator_add_Float32_args = { &Float32_operator_add_Float32_arg };

/// operator- with Float32
Variable Float32_operator_sub_Float32_arg;
Function Float32_operator_sub_Float32;
inline constexpr std::array Float32_operator_sub_Float32_args = { &Float32_operator_sub_Float32_arg };

/// operator* with Float32
Variable Float32_operator_mul_Float32_arg;
Function Float32_operator_mul_Float32;
inline constexpr std::array Float32_operator_mul_Float32_args = { &Float32_operator_mul_Float32_arg };

/// operator/ with Float32
Variable Float32_operator_div_Float32_arg;
Function Float32_operator_div_Float32;
inline constexpr std::array Float32_operator_div_Float32_args = { &Float32_operator_div_Float32_arg };

/// operator% with Float32
Variable Float32_operator_mod_Float32_arg;
Function Float32_operator_mod_Float32;
inline constexpr std::array Float32_operator_mod_Float32_args = { &Float32_operator_mod_Float32_arg };

/// operator+= with Float32
Variable Float32_operator_addasg_Float32_arg;
Function Float32_operator_addasg_Float32;
inline constexpr std::array Float32_operator_addasg_Float32_args = { &Float32_operator_addasg_Float32_arg };

/// operator-= with Float32
Variable Float32_operator_subasg_Float32_arg;
Function Float32_operator_subasg_Float32;
inline constexpr std::array Float32_operator_subasg_Float32_args = { &Float32_operator_subasg_Float32_arg };

/// operator*= with Float32
Variable Float32_operator_mulasg_Float32_arg;
Function Float32_operator_mulasg_Float32;
inline constexpr std::array Float32_operator_mulasg_Float32_args = { &Float32_operator_mulasg_Float32_arg };

/// operator/= with Float32
Variable Float32_operator_divasg_Float32_arg;
Function Float32_operator_divasg_Float32;
inline constexpr std::array Float32_operator_divasg_Float32_args = { &Float32_operator_divasg_Float32_arg };

/// operator< with Float32
Variable Float32_operator_lt_Float32_arg;
Function Float32_operator_lt_Float32;
inline constexpr std::array Float32_operator_lt_Float32_args = { &Float32_operator_lt_Float32_arg };

/// operator<= with Float32
Variable Float32_operator_lte_Float32_arg;
Function Float32_operator_lte_Float32;
inline constexpr std::array Float32_operator_lte_Float32_args = { &Float32_operator_lte_Float32_arg };

/// operator> with Float32
Variable Float32_operator_gt_Float32_arg;
Function Float32_operator_gt_Float32;
inline constexpr std::array Float32_operator_gt_Float32_args = { &Float32_operator_gt_Float32_arg };

/// operator>= with Float32
Variable Float32_operator_gte_Float32_arg;
Function Float32_operator_gte_Float32;
inline constexpr std::array Float32_operator_gte_Float32_args = { &Float32_operator_gte_Float32_arg };

/// operator== with Float32
Variable Float32_operator_eq_Float32_arg;
Function Float32_operator_eq_Float32;
inline constexpr std::array Float32_operator_eq_Float32_args = { &Float32_operator_eq_Float32_arg };

/// operator!= with Float32
Variable Float32_operator_neq_Float32_arg;
Function Float32_operator_neq_Float32;
inline constexpr std::array Float32_operator_neq_Float32_args = { &Float32_operator_neq_Float32_arg };

Float32::Float32()
{
    this->name = "f32"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32_operator_index_Int32_arg.name = "arg"_c;
    Float32_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32_operator_index_Int32.name = "operator[]"_c;
    Float32_operator_index_Int32.backendIndex = 7;
    Float32_operator_index_Int32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_index_Int32.parameters = Float32_operator_index_Int32_args;
    Symbol::Resolved(&Float32_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32_operator_index_Int32)->signature = "f32 operator[](i32)"_c;
    Symbol::Resolved(&Float32_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float32_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt32
    Float32_operator_index_UInt32_arg.name = "arg"_c;
    Float32_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32_operator_index_UInt32.name = "operator[]"_c;
    Float32_operator_index_UInt32.backendIndex = 8;
    Float32_operator_index_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_index_UInt32.parameters = Float32_operator_index_UInt32_args;
    Symbol::Resolved(&Float32_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32_operator_index_UInt32)->signature = "f32 operator[](u32)"_c;
    Symbol::Resolved(&Float32_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float32_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int16
    Float32_operator_index_Int16_arg.name = "arg"_c;
    Float32_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32_operator_index_Int16.name = "operator[]"_c;
    Float32_operator_index_Int16.backendIndex = 9;
    Float32_operator_index_Int16.returnType = Type::FullType { Float32Type.name };
    Float32_operator_index_Int16.parameters = Float32_operator_index_Int16_args;
    Symbol::Resolved(&Float32_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32_operator_index_Int16)->signature = "f32 operator[](i16)"_c;
    Symbol::Resolved(&Float32_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float32_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt16
    Float32_operator_index_UInt16_arg.name = "arg"_c;
    Float32_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32_operator_index_UInt16.name = "operator[]"_c;
    Float32_operator_index_UInt16.backendIndex = 10;
    Float32_operator_index_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32_operator_index_UInt16.parameters = Float32_operator_index_UInt16_args;
    Symbol::Resolved(&Float32_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32_operator_index_UInt16)->signature = "f32 operator[](u16)"_c;
    Symbol::Resolved(&Float32_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float32_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    /// operator+ with Float32
    Float32_operator_add_Float32_arg.name = "arg"_c;
    Float32_operator_add_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_add_Float32.name = "operator+"_c;
    Float32_operator_add_Float32.backendIndex = 11;
    Float32_operator_add_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_add_Float32.parameters = Float32_operator_add_Float32_args;
    Symbol::Resolved(&Float32_operator_add_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_add_Float32)->signature = "f32 operator+(f32)"_c;
    Symbol::Resolved(&Float32_operator_add_Float32)->name = "operator+(f32)"_c;
    Symbol::Resolved(&Float32_operator_add_Float32)->nameWithVarNames = "operator+(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_add_Float32)->returnTypeSymbol = &Float32Type;

    /// operator- with Float32
    Float32_operator_sub_Float32_arg.name = "arg"_c;
    Float32_operator_sub_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_sub_Float32.name = "operator-"_c;
    Float32_operator_sub_Float32.backendIndex = 12;
    Float32_operator_sub_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_sub_Float32.parameters = Float32_operator_sub_Float32_args;
    Symbol::Resolved(&Float32_operator_sub_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_sub_Float32)->signature = "f32 operator-(f32)"_c;
    Symbol::Resolved(&Float32_operator_sub_Float32)->name = "operator-(f32)"_c;
    Symbol::Resolved(&Float32_operator_sub_Float32)->nameWithVarNames = "operator-(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_sub_Float32)->returnTypeSymbol = &Float32Type;

    /// operator* with Float32
    Float32_operator_mul_Float32_arg.name = "arg"_c;
    Float32_operator_mul_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_mul_Float32.name = "operator*"_c;
    Float32_operator_mul_Float32.backendIndex = 13;
    Float32_operator_mul_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_mul_Float32.parameters = Float32_operator_mul_Float32_args;
    Symbol::Resolved(&Float32_operator_mul_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_mul_Float32)->signature = "f32 operator*(f32)"_c;
    Symbol::Resolved(&Float32_operator_mul_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32_operator_mul_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_mul_Float32)->returnTypeSymbol = &Float32Type;

    /// operator/ with Float32
    Float32_operator_div_Float32_arg.name = "arg"_c;
    Float32_operator_div_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_div_Float32.name = "operator/"_c;
    Float32_operator_div_Float32.backendIndex = 14;
    Float32_operator_div_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_div_Float32.parameters = Float32_operator_div_Float32_args;
    Symbol::Resolved(&Float32_operator_div_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_div_Float32)->signature = "f32 operator/(f32)"_c;
    Symbol::Resolved(&Float32_operator_div_Float32)->name = "operator/(f32)"_c;
    Symbol::Resolved(&Float32_operator_div_Float32)->nameWithVarNames = "operator/(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_div_Float32)->returnTypeSymbol = &Float32Type;

    /// operator% with Float32
    Float32_operator_mod_Float32_arg.name = "arg"_c;
    Float32_operator_mod_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_mod_Float32.name = "operator%"_c;
    Float32_operator_mod_Float32.backendIndex = 15;
    Float32_operator_mod_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_mod_Float32.parameters = Float32_operator_mod_Float32_args;
    Symbol::Resolved(&Float32_operator_mod_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_mod_Float32)->signature = "f32 operator%(f32)"_c;
    Symbol::Resolved(&Float32_operator_mod_Float32)->name = "operator%(f32)"_c;
    Symbol::Resolved(&Float32_operator_mod_Float32)->nameWithVarNames = "operator%(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_mod_Float32)->returnTypeSymbol = &Float32Type;

    /// operator+= with Float32
    Float32_operator_addasg_Float32_arg.name = "arg"_c;
    Float32_operator_addasg_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_addasg_Float32.name = "operator+="_c;
    Float32_operator_addasg_Float32.backendIndex = 16;
    Float32_operator_addasg_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_addasg_Float32.parameters = Float32_operator_addasg_Float32_args;
    Symbol::Resolved(&Float32_operator_addasg_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_addasg_Float32)->signature = "f32 operator+=(f32)"_c;
    Symbol::Resolved(&Float32_operator_addasg_Float32)->name = "operator+=(f32)"_c;
    Symbol::Resolved(&Float32_operator_addasg_Float32)->nameWithVarNames = "operator+=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_addasg_Float32)->returnTypeSymbol = &Float32Type;

    /// operator-= with Float32
    Float32_operator_subasg_Float32_arg.name = "arg"_c;
    Float32_operator_subasg_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_subasg_Float32.name = "operator-="_c;
    Float32_operator_subasg_Float32.backendIndex = 17;
    Float32_operator_subasg_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_subasg_Float32.parameters = Float32_operator_subasg_Float32_args;
    Symbol::Resolved(&Float32_operator_subasg_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_subasg_Float32)->signature = "f32 operator-=(f32)"_c;
    Symbol::Resolved(&Float32_operator_subasg_Float32)->name = "operator-=(f32)"_c;
    Symbol::Resolved(&Float32_operator_subasg_Float32)->nameWithVarNames = "operator-=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_subasg_Float32)->returnTypeSymbol = &Float32Type;

    /// operator*= with Float32
    Float32_operator_mulasg_Float32_arg.name = "arg"_c;
    Float32_operator_mulasg_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_mulasg_Float32.name = "operator*="_c;
    Float32_operator_mulasg_Float32.backendIndex = 18;
    Float32_operator_mulasg_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_mulasg_Float32.parameters = Float32_operator_mulasg_Float32_args;
    Symbol::Resolved(&Float32_operator_mulasg_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_mulasg_Float32)->signature = "f32 operator*=(f32)"_c;
    Symbol::Resolved(&Float32_operator_mulasg_Float32)->name = "operator*=(f32)"_c;
    Symbol::Resolved(&Float32_operator_mulasg_Float32)->nameWithVarNames = "operator*=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_mulasg_Float32)->returnTypeSymbol = &Float32Type;

    /// operator/= with Float32
    Float32_operator_divasg_Float32_arg.name = "arg"_c;
    Float32_operator_divasg_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_divasg_Float32.name = "operator/="_c;
    Float32_operator_divasg_Float32.backendIndex = 19;
    Float32_operator_divasg_Float32.returnType = Type::FullType { Float32Type.name };
    Float32_operator_divasg_Float32.parameters = Float32_operator_divasg_Float32_args;
    Symbol::Resolved(&Float32_operator_divasg_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_divasg_Float32)->signature = "f32 operator/=(f32)"_c;
    Symbol::Resolved(&Float32_operator_divasg_Float32)->name = "operator/=(f32)"_c;
    Symbol::Resolved(&Float32_operator_divasg_Float32)->nameWithVarNames = "operator/=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_divasg_Float32)->returnTypeSymbol = &Float32Type;

    /// operator< with Float32
    Float32_operator_lt_Float32_arg.name = "arg"_c;
    Float32_operator_lt_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_lt_Float32.name = "operator<"_c;
    Float32_operator_lt_Float32.backendIndex = 20;
    Float32_operator_lt_Float32.returnType = Type::FullType { Bool8Type.name };
    Float32_operator_lt_Float32.parameters = Float32_operator_lt_Float32_args;
    Symbol::Resolved(&Float32_operator_lt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_lt_Float32)->signature = "b8 operator<(f32)"_c;
    Symbol::Resolved(&Float32_operator_lt_Float32)->name = "operator<(f32)"_c;
    Symbol::Resolved(&Float32_operator_lt_Float32)->nameWithVarNames = "operator<(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_lt_Float32)->returnTypeSymbol = &Bool8Type;

    /// operator<= with Float32
    Float32_operator_lte_Float32_arg.name = "arg"_c;
    Float32_operator_lte_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_lte_Float32.name = "operator<="_c;
    Float32_operator_lte_Float32.backendIndex = 21;
    Float32_operator_lte_Float32.returnType = Type::FullType { Bool8Type.name };
    Float32_operator_lte_Float32.parameters = Float32_operator_lte_Float32_args;
    Symbol::Resolved(&Float32_operator_lte_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_lte_Float32)->signature = "b8 operator<=(f32)"_c;
    Symbol::Resolved(&Float32_operator_lte_Float32)->name = "operator<=(f32)"_c;
    Symbol::Resolved(&Float32_operator_lte_Float32)->nameWithVarNames = "operator<=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_lte_Float32)->returnTypeSymbol = &Bool8Type;

    /// operator> with Float32
    Float32_operator_gt_Float32_arg.name = "arg"_c;
    Float32_operator_gt_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_gt_Float32.name = "operator>"_c;
    Float32_operator_gt_Float32.backendIndex = 22;
    Float32_operator_gt_Float32.returnType = Type::FullType { Bool8Type.name };
    Float32_operator_gt_Float32.parameters = Float32_operator_gt_Float32_args;
    Symbol::Resolved(&Float32_operator_gt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_gt_Float32)->signature = "b8 operator>(f32)"_c;
    Symbol::Resolved(&Float32_operator_gt_Float32)->name = "operator>(f32)"_c;
    Symbol::Resolved(&Float32_operator_gt_Float32)->nameWithVarNames = "operator>(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_gt_Float32)->returnTypeSymbol = &Bool8Type;

    /// operator>= with Float32
    Float32_operator_gte_Float32_arg.name = "arg"_c;
    Float32_operator_gte_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_gte_Float32.name = "operator>="_c;
    Float32_operator_gte_Float32.backendIndex = 23;
    Float32_operator_gte_Float32.returnType = Type::FullType { Bool8Type.name };
    Float32_operator_gte_Float32.parameters = Float32_operator_gte_Float32_args;
    Symbol::Resolved(&Float32_operator_gte_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_gte_Float32)->signature = "b8 operator>=(f32)"_c;
    Symbol::Resolved(&Float32_operator_gte_Float32)->name = "operator>=(f32)"_c;
    Symbol::Resolved(&Float32_operator_gte_Float32)->nameWithVarNames = "operator>=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_gte_Float32)->returnTypeSymbol = &Bool8Type;

    /// operator== with Float32
    Float32_operator_eq_Float32_arg.name = "arg"_c;
    Float32_operator_eq_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_eq_Float32.name = "operator=="_c;
    Float32_operator_eq_Float32.backendIndex = 24;
    Float32_operator_eq_Float32.returnType = Type::FullType { Bool8Type.name };
    Float32_operator_eq_Float32.parameters = Float32_operator_eq_Float32_args;
    Symbol::Resolved(&Float32_operator_eq_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_eq_Float32)->signature = "b8 operator==(f32)"_c;
    Symbol::Resolved(&Float32_operator_eq_Float32)->name = "operator==(f32)"_c;
    Symbol::Resolved(&Float32_operator_eq_Float32)->nameWithVarNames = "operator==(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_eq_Float32)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Float32
    Float32_operator_neq_Float32_arg.name = "arg"_c;
    Float32_operator_neq_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32_operator_neq_Float32.name = "operator!="_c;
    Float32_operator_neq_Float32.backendIndex = 25;
    Float32_operator_neq_Float32.returnType = Type::FullType { Bool8Type.name };
    Float32_operator_neq_Float32.parameters = Float32_operator_neq_Float32_args;
    Symbol::Resolved(&Float32_operator_neq_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_operator_neq_Float32)->signature = "b8 operator!=(f32)"_c;
    Symbol::Resolved(&Float32_operator_neq_Float32)->name = "operator!=(f32)"_c;
    Symbol::Resolved(&Float32_operator_neq_Float32)->nameWithVarNames = "operator!=(arg : f32)"_c;
    Symbol::Resolved(&Float32_operator_neq_Float32)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 38> { 
        std::pair{ "operator!="_c, &Float32_operator_neq_Float32 },
        std::pair{ "operator!=(f32)"_c, &Float32_operator_neq_Float32 },
        std::pair{ "operator%"_c, &Float32_operator_mod_Float32 },
        std::pair{ "operator%(f32)"_c, &Float32_operator_mod_Float32 },
        std::pair{ "operator*"_c, &Float32_operator_mul_Float32 },
        std::pair{ "operator*(f32)"_c, &Float32_operator_mul_Float32 },
        std::pair{ "operator*="_c, &Float32_operator_mulasg_Float32 },
        std::pair{ "operator*=(f32)"_c, &Float32_operator_mulasg_Float32 },
        std::pair{ "operator+"_c, &Float32_operator_add_Float32 },
        std::pair{ "operator+(f32)"_c, &Float32_operator_add_Float32 },
        std::pair{ "operator+="_c, &Float32_operator_addasg_Float32 },
        std::pair{ "operator+=(f32)"_c, &Float32_operator_addasg_Float32 },
        std::pair{ "operator-"_c, &Float32_operator_sub_Float32 },
        std::pair{ "operator-(f32)"_c, &Float32_operator_sub_Float32 },
        std::pair{ "operator-="_c, &Float32_operator_subasg_Float32 },
        std::pair{ "operator-=(f32)"_c, &Float32_operator_subasg_Float32 },
        std::pair{ "operator/"_c, &Float32_operator_div_Float32 },
        std::pair{ "operator/(f32)"_c, &Float32_operator_div_Float32 },
        std::pair{ "operator/="_c, &Float32_operator_divasg_Float32 },
        std::pair{ "operator/=(f32)"_c, &Float32_operator_divasg_Float32 },
        std::pair{ "operator<"_c, &Float32_operator_lt_Float32 },
        std::pair{ "operator<(f32)"_c, &Float32_operator_lt_Float32 },
        std::pair{ "operator<="_c, &Float32_operator_lte_Float32 },
        std::pair{ "operator<=(f32)"_c, &Float32_operator_lte_Float32 },
        std::pair{ "operator=="_c, &Float32_operator_eq_Float32 },
        std::pair{ "operator==(f32)"_c, &Float32_operator_eq_Float32 },
        std::pair{ "operator>"_c, &Float32_operator_gt_Float32 },
        std::pair{ "operator>(f32)"_c, &Float32_operator_gt_Float32 },
        std::pair{ "operator>="_c, &Float32_operator_gte_Float32 },
        std::pair{ "operator>=(f32)"_c, &Float32_operator_gte_Float32 },
        std::pair{ "operator[]"_c, &Float32_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32_operator_index_UInt32 }
    };
}
Float32 Float32Type;

/// operator[] with Int32
Variable UInt32_operator_index_Int32_arg;
Function UInt32_operator_index_Int32;
inline constexpr std::array UInt32_operator_index_Int32_args = { &UInt32_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt32_operator_index_UInt32_arg;
Function UInt32_operator_index_UInt32;
inline constexpr std::array UInt32_operator_index_UInt32_args = { &UInt32_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt32_operator_index_Int16_arg;
Function UInt32_operator_index_Int16;
inline constexpr std::array UInt32_operator_index_Int16_args = { &UInt32_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt32_operator_index_UInt16_arg;
Function UInt32_operator_index_UInt16;
inline constexpr std::array UInt32_operator_index_UInt16_args = { &UInt32_operator_index_UInt16_arg };

/// operator+ with UInt32
Variable UInt32_operator_add_UInt32_arg;
Function UInt32_operator_add_UInt32;
inline constexpr std::array UInt32_operator_add_UInt32_args = { &UInt32_operator_add_UInt32_arg };

/// operator- with UInt32
Variable UInt32_operator_sub_UInt32_arg;
Function UInt32_operator_sub_UInt32;
inline constexpr std::array UInt32_operator_sub_UInt32_args = { &UInt32_operator_sub_UInt32_arg };

/// operator* with UInt32
Variable UInt32_operator_mul_UInt32_arg;
Function UInt32_operator_mul_UInt32;
inline constexpr std::array UInt32_operator_mul_UInt32_args = { &UInt32_operator_mul_UInt32_arg };

/// operator/ with UInt32
Variable UInt32_operator_div_UInt32_arg;
Function UInt32_operator_div_UInt32;
inline constexpr std::array UInt32_operator_div_UInt32_args = { &UInt32_operator_div_UInt32_arg };

/// operator% with UInt32
Variable UInt32_operator_mod_UInt32_arg;
Function UInt32_operator_mod_UInt32;
inline constexpr std::array UInt32_operator_mod_UInt32_args = { &UInt32_operator_mod_UInt32_arg };

/// operator+= with UInt32
Variable UInt32_operator_addasg_UInt32_arg;
Function UInt32_operator_addasg_UInt32;
inline constexpr std::array UInt32_operator_addasg_UInt32_args = { &UInt32_operator_addasg_UInt32_arg };

/// operator-= with UInt32
Variable UInt32_operator_subasg_UInt32_arg;
Function UInt32_operator_subasg_UInt32;
inline constexpr std::array UInt32_operator_subasg_UInt32_args = { &UInt32_operator_subasg_UInt32_arg };

/// operator*= with UInt32
Variable UInt32_operator_mulasg_UInt32_arg;
Function UInt32_operator_mulasg_UInt32;
inline constexpr std::array UInt32_operator_mulasg_UInt32_args = { &UInt32_operator_mulasg_UInt32_arg };

/// operator/= with UInt32
Variable UInt32_operator_divasg_UInt32_arg;
Function UInt32_operator_divasg_UInt32;
inline constexpr std::array UInt32_operator_divasg_UInt32_args = { &UInt32_operator_divasg_UInt32_arg };

/// operator< with UInt32
Variable UInt32_operator_lt_UInt32_arg;
Function UInt32_operator_lt_UInt32;
inline constexpr std::array UInt32_operator_lt_UInt32_args = { &UInt32_operator_lt_UInt32_arg };

/// operator<= with UInt32
Variable UInt32_operator_lte_UInt32_arg;
Function UInt32_operator_lte_UInt32;
inline constexpr std::array UInt32_operator_lte_UInt32_args = { &UInt32_operator_lte_UInt32_arg };

/// operator> with UInt32
Variable UInt32_operator_gt_UInt32_arg;
Function UInt32_operator_gt_UInt32;
inline constexpr std::array UInt32_operator_gt_UInt32_args = { &UInt32_operator_gt_UInt32_arg };

/// operator>= with UInt32
Variable UInt32_operator_gte_UInt32_arg;
Function UInt32_operator_gte_UInt32;
inline constexpr std::array UInt32_operator_gte_UInt32_args = { &UInt32_operator_gte_UInt32_arg };

/// operator== with UInt32
Variable UInt32_operator_eq_UInt32_arg;
Function UInt32_operator_eq_UInt32;
inline constexpr std::array UInt32_operator_eq_UInt32_args = { &UInt32_operator_eq_UInt32_arg };

/// operator!= with UInt32
Variable UInt32_operator_neq_UInt32_arg;
Function UInt32_operator_neq_UInt32;
inline constexpr std::array UInt32_operator_neq_UInt32_args = { &UInt32_operator_neq_UInt32_arg };

/// operator| with UInt32
Variable UInt32_operator_or_UInt32_arg;
Function UInt32_operator_or_UInt32;
inline constexpr std::array UInt32_operator_or_UInt32_args = { &UInt32_operator_or_UInt32_arg };

/// operator& with UInt32
Variable UInt32_operator_and_UInt32_arg;
Function UInt32_operator_and_UInt32;
inline constexpr std::array UInt32_operator_and_UInt32_args = { &UInt32_operator_and_UInt32_arg };

/// operator^ with UInt32
Variable UInt32_operator_xor_UInt32_arg;
Function UInt32_operator_xor_UInt32;
inline constexpr std::array UInt32_operator_xor_UInt32_args = { &UInt32_operator_xor_UInt32_arg };

/// operator<< with UInt32
Variable UInt32_operator_lsh_UInt32_arg;
Function UInt32_operator_lsh_UInt32;
inline constexpr std::array UInt32_operator_lsh_UInt32_args = { &UInt32_operator_lsh_UInt32_arg };

/// operator>> with UInt32
Variable UInt32_operator_rsh_UInt32_arg;
Function UInt32_operator_rsh_UInt32;
inline constexpr std::array UInt32_operator_rsh_UInt32_args = { &UInt32_operator_rsh_UInt32_arg };

/// operator|= with UInt32
Variable UInt32_operator_orasg_UInt32_arg;
Function UInt32_operator_orasg_UInt32;
inline constexpr std::array UInt32_operator_orasg_UInt32_args = { &UInt32_operator_orasg_UInt32_arg };

/// operator&= with UInt32
Variable UInt32_operator_andasg_UInt32_arg;
Function UInt32_operator_andasg_UInt32;
inline constexpr std::array UInt32_operator_andasg_UInt32_args = { &UInt32_operator_andasg_UInt32_arg };

/// operator^= with UInt32
Variable UInt32_operator_xorasg_UInt32_arg;
Function UInt32_operator_xorasg_UInt32;
inline constexpr std::array UInt32_operator_xorasg_UInt32_args = { &UInt32_operator_xorasg_UInt32_arg };

/// operator<<= with UInt32
Variable UInt32_operator_lshasg_UInt32_arg;
Function UInt32_operator_lshasg_UInt32;
inline constexpr std::array UInt32_operator_lshasg_UInt32_args = { &UInt32_operator_lshasg_UInt32_arg };

/// operator>>= with UInt32
Variable UInt32_operator_rhsasg_UInt32_arg;
Function UInt32_operator_rhsasg_UInt32;
inline constexpr std::array UInt32_operator_rhsasg_UInt32_args = { &UInt32_operator_rhsasg_UInt32_arg };

UInt32::UInt32()
{
    this->name = "u32"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    /// operator[] with Int32
    UInt32_operator_index_Int32_arg.name = "arg"_c;
    UInt32_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32_operator_index_Int32.name = "operator[]"_c;
    UInt32_operator_index_Int32.backendIndex = 33;
    UInt32_operator_index_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_index_Int32.parameters = UInt32_operator_index_Int32_args;
    Symbol::Resolved(&UInt32_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32_operator_index_Int32)->signature = "u32 operator[](i32)"_c;
    Symbol::Resolved(&UInt32_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt32_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt32_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt32
    UInt32_operator_index_UInt32_arg.name = "arg"_c;
    UInt32_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_index_UInt32.name = "operator[]"_c;
    UInt32_operator_index_UInt32.backendIndex = 34;
    UInt32_operator_index_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_index_UInt32.parameters = UInt32_operator_index_UInt32_args;
    Symbol::Resolved(&UInt32_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_index_UInt32)->signature = "u32 operator[](u32)"_c;
    Symbol::Resolved(&UInt32_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt32_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int16
    UInt32_operator_index_Int16_arg.name = "arg"_c;
    UInt32_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32_operator_index_Int16.name = "operator[]"_c;
    UInt32_operator_index_Int16.backendIndex = 35;
    UInt32_operator_index_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_index_Int16.parameters = UInt32_operator_index_Int16_args;
    Symbol::Resolved(&UInt32_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32_operator_index_Int16)->signature = "u32 operator[](i16)"_c;
    Symbol::Resolved(&UInt32_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt32_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt32_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt16
    UInt32_operator_index_UInt16_arg.name = "arg"_c;
    UInt32_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32_operator_index_UInt16.name = "operator[]"_c;
    UInt32_operator_index_UInt16.backendIndex = 36;
    UInt32_operator_index_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_index_UInt16.parameters = UInt32_operator_index_UInt16_args;
    Symbol::Resolved(&UInt32_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32_operator_index_UInt16)->signature = "u32 operator[](u16)"_c;
    Symbol::Resolved(&UInt32_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt32_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt32_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    /// operator+ with UInt32
    UInt32_operator_add_UInt32_arg.name = "arg"_c;
    UInt32_operator_add_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_add_UInt32.name = "operator+"_c;
    UInt32_operator_add_UInt32.backendIndex = 37;
    UInt32_operator_add_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_add_UInt32.parameters = UInt32_operator_add_UInt32_args;
    Symbol::Resolved(&UInt32_operator_add_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_add_UInt32)->signature = "u32 operator+(u32)"_c;
    Symbol::Resolved(&UInt32_operator_add_UInt32)->name = "operator+(u32)"_c;
    Symbol::Resolved(&UInt32_operator_add_UInt32)->nameWithVarNames = "operator+(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_add_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator- with UInt32
    UInt32_operator_sub_UInt32_arg.name = "arg"_c;
    UInt32_operator_sub_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_sub_UInt32.name = "operator-"_c;
    UInt32_operator_sub_UInt32.backendIndex = 38;
    UInt32_operator_sub_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_sub_UInt32.parameters = UInt32_operator_sub_UInt32_args;
    Symbol::Resolved(&UInt32_operator_sub_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_sub_UInt32)->signature = "u32 operator-(u32)"_c;
    Symbol::Resolved(&UInt32_operator_sub_UInt32)->name = "operator-(u32)"_c;
    Symbol::Resolved(&UInt32_operator_sub_UInt32)->nameWithVarNames = "operator-(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_sub_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator* with UInt32
    UInt32_operator_mul_UInt32_arg.name = "arg"_c;
    UInt32_operator_mul_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_mul_UInt32.name = "operator*"_c;
    UInt32_operator_mul_UInt32.backendIndex = 39;
    UInt32_operator_mul_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_mul_UInt32.parameters = UInt32_operator_mul_UInt32_args;
    Symbol::Resolved(&UInt32_operator_mul_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_mul_UInt32)->signature = "u32 operator*(u32)"_c;
    Symbol::Resolved(&UInt32_operator_mul_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&UInt32_operator_mul_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_mul_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator/ with UInt32
    UInt32_operator_div_UInt32_arg.name = "arg"_c;
    UInt32_operator_div_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_div_UInt32.name = "operator/"_c;
    UInt32_operator_div_UInt32.backendIndex = 40;
    UInt32_operator_div_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_div_UInt32.parameters = UInt32_operator_div_UInt32_args;
    Symbol::Resolved(&UInt32_operator_div_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_div_UInt32)->signature = "u32 operator/(u32)"_c;
    Symbol::Resolved(&UInt32_operator_div_UInt32)->name = "operator/(u32)"_c;
    Symbol::Resolved(&UInt32_operator_div_UInt32)->nameWithVarNames = "operator/(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_div_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator% with UInt32
    UInt32_operator_mod_UInt32_arg.name = "arg"_c;
    UInt32_operator_mod_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_mod_UInt32.name = "operator%"_c;
    UInt32_operator_mod_UInt32.backendIndex = 41;
    UInt32_operator_mod_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_mod_UInt32.parameters = UInt32_operator_mod_UInt32_args;
    Symbol::Resolved(&UInt32_operator_mod_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_mod_UInt32)->signature = "u32 operator%(u32)"_c;
    Symbol::Resolved(&UInt32_operator_mod_UInt32)->name = "operator%(u32)"_c;
    Symbol::Resolved(&UInt32_operator_mod_UInt32)->nameWithVarNames = "operator%(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_mod_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator+= with UInt32
    UInt32_operator_addasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_addasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_addasg_UInt32.name = "operator+="_c;
    UInt32_operator_addasg_UInt32.backendIndex = 42;
    UInt32_operator_addasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_addasg_UInt32.parameters = UInt32_operator_addasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_addasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_addasg_UInt32)->signature = "u32 operator+=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_addasg_UInt32)->name = "operator+=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_addasg_UInt32)->nameWithVarNames = "operator+=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_addasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator-= with UInt32
    UInt32_operator_subasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_subasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_subasg_UInt32.name = "operator-="_c;
    UInt32_operator_subasg_UInt32.backendIndex = 43;
    UInt32_operator_subasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_subasg_UInt32.parameters = UInt32_operator_subasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_subasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_subasg_UInt32)->signature = "u32 operator-=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_subasg_UInt32)->name = "operator-=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_subasg_UInt32)->nameWithVarNames = "operator-=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_subasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator*= with UInt32
    UInt32_operator_mulasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_mulasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_mulasg_UInt32.name = "operator*="_c;
    UInt32_operator_mulasg_UInt32.backendIndex = 44;
    UInt32_operator_mulasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_mulasg_UInt32.parameters = UInt32_operator_mulasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32)->signature = "u32 operator*=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32)->name = "operator*=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32)->nameWithVarNames = "operator*=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_mulasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator/= with UInt32
    UInt32_operator_divasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_divasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_divasg_UInt32.name = "operator/="_c;
    UInt32_operator_divasg_UInt32.backendIndex = 45;
    UInt32_operator_divasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_divasg_UInt32.parameters = UInt32_operator_divasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_divasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_divasg_UInt32)->signature = "u32 operator/=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_divasg_UInt32)->name = "operator/=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_divasg_UInt32)->nameWithVarNames = "operator/=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_divasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator< with UInt32
    UInt32_operator_lt_UInt32_arg.name = "arg"_c;
    UInt32_operator_lt_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_lt_UInt32.name = "operator<"_c;
    UInt32_operator_lt_UInt32.backendIndex = 46;
    UInt32_operator_lt_UInt32.returnType = Type::FullType { Bool8Type.name };
    UInt32_operator_lt_UInt32.parameters = UInt32_operator_lt_UInt32_args;
    Symbol::Resolved(&UInt32_operator_lt_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_lt_UInt32)->signature = "b8 operator<(u32)"_c;
    Symbol::Resolved(&UInt32_operator_lt_UInt32)->name = "operator<(u32)"_c;
    Symbol::Resolved(&UInt32_operator_lt_UInt32)->nameWithVarNames = "operator<(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_lt_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator<= with UInt32
    UInt32_operator_lte_UInt32_arg.name = "arg"_c;
    UInt32_operator_lte_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_lte_UInt32.name = "operator<="_c;
    UInt32_operator_lte_UInt32.backendIndex = 47;
    UInt32_operator_lte_UInt32.returnType = Type::FullType { Bool8Type.name };
    UInt32_operator_lte_UInt32.parameters = UInt32_operator_lte_UInt32_args;
    Symbol::Resolved(&UInt32_operator_lte_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_lte_UInt32)->signature = "b8 operator<=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_lte_UInt32)->name = "operator<=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_lte_UInt32)->nameWithVarNames = "operator<=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_lte_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator> with UInt32
    UInt32_operator_gt_UInt32_arg.name = "arg"_c;
    UInt32_operator_gt_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_gt_UInt32.name = "operator>"_c;
    UInt32_operator_gt_UInt32.backendIndex = 48;
    UInt32_operator_gt_UInt32.returnType = Type::FullType { Bool8Type.name };
    UInt32_operator_gt_UInt32.parameters = UInt32_operator_gt_UInt32_args;
    Symbol::Resolved(&UInt32_operator_gt_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_gt_UInt32)->signature = "b8 operator>(u32)"_c;
    Symbol::Resolved(&UInt32_operator_gt_UInt32)->name = "operator>(u32)"_c;
    Symbol::Resolved(&UInt32_operator_gt_UInt32)->nameWithVarNames = "operator>(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_gt_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator>= with UInt32
    UInt32_operator_gte_UInt32_arg.name = "arg"_c;
    UInt32_operator_gte_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_gte_UInt32.name = "operator>="_c;
    UInt32_operator_gte_UInt32.backendIndex = 49;
    UInt32_operator_gte_UInt32.returnType = Type::FullType { Bool8Type.name };
    UInt32_operator_gte_UInt32.parameters = UInt32_operator_gte_UInt32_args;
    Symbol::Resolved(&UInt32_operator_gte_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_gte_UInt32)->signature = "b8 operator>=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_gte_UInt32)->name = "operator>=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_gte_UInt32)->nameWithVarNames = "operator>=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_gte_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator== with UInt32
    UInt32_operator_eq_UInt32_arg.name = "arg"_c;
    UInt32_operator_eq_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_eq_UInt32.name = "operator=="_c;
    UInt32_operator_eq_UInt32.backendIndex = 50;
    UInt32_operator_eq_UInt32.returnType = Type::FullType { Bool8Type.name };
    UInt32_operator_eq_UInt32.parameters = UInt32_operator_eq_UInt32_args;
    Symbol::Resolved(&UInt32_operator_eq_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_eq_UInt32)->signature = "b8 operator==(u32)"_c;
    Symbol::Resolved(&UInt32_operator_eq_UInt32)->name = "operator==(u32)"_c;
    Symbol::Resolved(&UInt32_operator_eq_UInt32)->nameWithVarNames = "operator==(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_eq_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator!= with UInt32
    UInt32_operator_neq_UInt32_arg.name = "arg"_c;
    UInt32_operator_neq_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_neq_UInt32.name = "operator!="_c;
    UInt32_operator_neq_UInt32.backendIndex = 51;
    UInt32_operator_neq_UInt32.returnType = Type::FullType { Bool8Type.name };
    UInt32_operator_neq_UInt32.parameters = UInt32_operator_neq_UInt32_args;
    Symbol::Resolved(&UInt32_operator_neq_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_neq_UInt32)->signature = "b8 operator!=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_neq_UInt32)->name = "operator!=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_neq_UInt32)->nameWithVarNames = "operator!=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_neq_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator| with UInt32
    UInt32_operator_or_UInt32_arg.name = "arg"_c;
    UInt32_operator_or_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_or_UInt32.name = "operator|"_c;
    UInt32_operator_or_UInt32.backendIndex = 52;
    UInt32_operator_or_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_or_UInt32.parameters = UInt32_operator_or_UInt32_args;
    Symbol::Resolved(&UInt32_operator_or_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_or_UInt32)->signature = "u32 operator|(u32)"_c;
    Symbol::Resolved(&UInt32_operator_or_UInt32)->name = "operator|(u32)"_c;
    Symbol::Resolved(&UInt32_operator_or_UInt32)->nameWithVarNames = "operator|(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_or_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator& with UInt32
    UInt32_operator_and_UInt32_arg.name = "arg"_c;
    UInt32_operator_and_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_and_UInt32.name = "operator&"_c;
    UInt32_operator_and_UInt32.backendIndex = 53;
    UInt32_operator_and_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_and_UInt32.parameters = UInt32_operator_and_UInt32_args;
    Symbol::Resolved(&UInt32_operator_and_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_and_UInt32)->signature = "u32 operator&(u32)"_c;
    Symbol::Resolved(&UInt32_operator_and_UInt32)->name = "operator&(u32)"_c;
    Symbol::Resolved(&UInt32_operator_and_UInt32)->nameWithVarNames = "operator&(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_and_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator^ with UInt32
    UInt32_operator_xor_UInt32_arg.name = "arg"_c;
    UInt32_operator_xor_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_xor_UInt32.name = "operator^"_c;
    UInt32_operator_xor_UInt32.backendIndex = 54;
    UInt32_operator_xor_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_xor_UInt32.parameters = UInt32_operator_xor_UInt32_args;
    Symbol::Resolved(&UInt32_operator_xor_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_xor_UInt32)->signature = "u32 operator^(u32)"_c;
    Symbol::Resolved(&UInt32_operator_xor_UInt32)->name = "operator^(u32)"_c;
    Symbol::Resolved(&UInt32_operator_xor_UInt32)->nameWithVarNames = "operator^(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_xor_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator<< with UInt32
    UInt32_operator_lsh_UInt32_arg.name = "arg"_c;
    UInt32_operator_lsh_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_lsh_UInt32.name = "operator<<"_c;
    UInt32_operator_lsh_UInt32.backendIndex = 55;
    UInt32_operator_lsh_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_lsh_UInt32.parameters = UInt32_operator_lsh_UInt32_args;
    Symbol::Resolved(&UInt32_operator_lsh_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_lsh_UInt32)->signature = "u32 operator<<(u32)"_c;
    Symbol::Resolved(&UInt32_operator_lsh_UInt32)->name = "operator<<(u32)"_c;
    Symbol::Resolved(&UInt32_operator_lsh_UInt32)->nameWithVarNames = "operator<<(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_lsh_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator>> with UInt32
    UInt32_operator_rsh_UInt32_arg.name = "arg"_c;
    UInt32_operator_rsh_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_rsh_UInt32.name = "operator>>"_c;
    UInt32_operator_rsh_UInt32.backendIndex = 56;
    UInt32_operator_rsh_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_rsh_UInt32.parameters = UInt32_operator_rsh_UInt32_args;
    Symbol::Resolved(&UInt32_operator_rsh_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_rsh_UInt32)->signature = "u32 operator>>(u32)"_c;
    Symbol::Resolved(&UInt32_operator_rsh_UInt32)->name = "operator>>(u32)"_c;
    Symbol::Resolved(&UInt32_operator_rsh_UInt32)->nameWithVarNames = "operator>>(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_rsh_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator|= with UInt32
    UInt32_operator_orasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_orasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_orasg_UInt32.name = "operator|="_c;
    UInt32_operator_orasg_UInt32.backendIndex = 57;
    UInt32_operator_orasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_orasg_UInt32.parameters = UInt32_operator_orasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_orasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_orasg_UInt32)->signature = "u32 operator|=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_orasg_UInt32)->name = "operator|=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_orasg_UInt32)->nameWithVarNames = "operator|=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_orasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator&= with UInt32
    UInt32_operator_andasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_andasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_andasg_UInt32.name = "operator&="_c;
    UInt32_operator_andasg_UInt32.backendIndex = 58;
    UInt32_operator_andasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_andasg_UInt32.parameters = UInt32_operator_andasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_andasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_andasg_UInt32)->signature = "u32 operator&=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_andasg_UInt32)->name = "operator&=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_andasg_UInt32)->nameWithVarNames = "operator&=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_andasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator^= with UInt32
    UInt32_operator_xorasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_xorasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_xorasg_UInt32.name = "operator^="_c;
    UInt32_operator_xorasg_UInt32.backendIndex = 59;
    UInt32_operator_xorasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_xorasg_UInt32.parameters = UInt32_operator_xorasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32)->signature = "u32 operator^=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32)->name = "operator^=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32)->nameWithVarNames = "operator^=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_xorasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator<<= with UInt32
    UInt32_operator_lshasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_lshasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_lshasg_UInt32.name = "operator<<="_c;
    UInt32_operator_lshasg_UInt32.backendIndex = 60;
    UInt32_operator_lshasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_lshasg_UInt32.parameters = UInt32_operator_lshasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32)->signature = "u32 operator<<=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32)->name = "operator<<=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32)->nameWithVarNames = "operator<<=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_lshasg_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator>>= with UInt32
    UInt32_operator_rhsasg_UInt32_arg.name = "arg"_c;
    UInt32_operator_rhsasg_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32_operator_rhsasg_UInt32.name = "operator>>="_c;
    UInt32_operator_rhsasg_UInt32.backendIndex = 61;
    UInt32_operator_rhsasg_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32_operator_rhsasg_UInt32.parameters = UInt32_operator_rhsasg_UInt32_args;
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32)->signature = "u32 operator>>=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32)->name = "operator>>=(u32)"_c;
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32)->nameWithVarNames = "operator>>=(arg : u32)"_c;
    Symbol::Resolved(&UInt32_operator_rhsasg_UInt32)->returnTypeSymbol = &UInt32Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 58> { 
        std::pair{ "operator!="_c, &UInt32_operator_neq_UInt32 },
        std::pair{ "operator!=(u32)"_c, &UInt32_operator_neq_UInt32 },
        std::pair{ "operator%"_c, &UInt32_operator_mod_UInt32 },
        std::pair{ "operator%(u32)"_c, &UInt32_operator_mod_UInt32 },
        std::pair{ "operator&"_c, &UInt32_operator_and_UInt32 },
        std::pair{ "operator&(u32)"_c, &UInt32_operator_and_UInt32 },
        std::pair{ "operator&="_c, &UInt32_operator_andasg_UInt32 },
        std::pair{ "operator&=(u32)"_c, &UInt32_operator_andasg_UInt32 },
        std::pair{ "operator*"_c, &UInt32_operator_mul_UInt32 },
        std::pair{ "operator*(u32)"_c, &UInt32_operator_mul_UInt32 },
        std::pair{ "operator*="_c, &UInt32_operator_mulasg_UInt32 },
        std::pair{ "operator*=(u32)"_c, &UInt32_operator_mulasg_UInt32 },
        std::pair{ "operator+"_c, &UInt32_operator_add_UInt32 },
        std::pair{ "operator+(u32)"_c, &UInt32_operator_add_UInt32 },
        std::pair{ "operator+="_c, &UInt32_operator_addasg_UInt32 },
        std::pair{ "operator+=(u32)"_c, &UInt32_operator_addasg_UInt32 },
        std::pair{ "operator-"_c, &UInt32_operator_sub_UInt32 },
        std::pair{ "operator-(u32)"_c, &UInt32_operator_sub_UInt32 },
        std::pair{ "operator-="_c, &UInt32_operator_subasg_UInt32 },
        std::pair{ "operator-=(u32)"_c, &UInt32_operator_subasg_UInt32 },
        std::pair{ "operator/"_c, &UInt32_operator_div_UInt32 },
        std::pair{ "operator/(u32)"_c, &UInt32_operator_div_UInt32 },
        std::pair{ "operator/="_c, &UInt32_operator_divasg_UInt32 },
        std::pair{ "operator/=(u32)"_c, &UInt32_operator_divasg_UInt32 },
        std::pair{ "operator<"_c, &UInt32_operator_lt_UInt32 },
        std::pair{ "operator<(u32)"_c, &UInt32_operator_lt_UInt32 },
        std::pair{ "operator<<"_c, &UInt32_operator_lsh_UInt32 },
        std::pair{ "operator<<(u32)"_c, &UInt32_operator_lsh_UInt32 },
        std::pair{ "operator<<="_c, &UInt32_operator_lshasg_UInt32 },
        std::pair{ "operator<<=(u32)"_c, &UInt32_operator_lshasg_UInt32 },
        std::pair{ "operator<="_c, &UInt32_operator_lte_UInt32 },
        std::pair{ "operator<=(u32)"_c, &UInt32_operator_lte_UInt32 },
        std::pair{ "operator=="_c, &UInt32_operator_eq_UInt32 },
        std::pair{ "operator==(u32)"_c, &UInt32_operator_eq_UInt32 },
        std::pair{ "operator>"_c, &UInt32_operator_gt_UInt32 },
        std::pair{ "operator>(u32)"_c, &UInt32_operator_gt_UInt32 },
        std::pair{ "operator>="_c, &UInt32_operator_gte_UInt32 },
        std::pair{ "operator>=(u32)"_c, &UInt32_operator_gte_UInt32 },
        std::pair{ "operator>>"_c, &UInt32_operator_rsh_UInt32 },
        std::pair{ "operator>>(u32)"_c, &UInt32_operator_rsh_UInt32 },
        std::pair{ "operator>>="_c, &UInt32_operator_rhsasg_UInt32 },
        std::pair{ "operator>>=(u32)"_c, &UInt32_operator_rhsasg_UInt32 },
        std::pair{ "operator[]"_c, &UInt32_operator_index_Int32 },
        std::pair{ "operator[]"_c, &UInt32_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &UInt32_operator_index_Int16 },
        std::pair{ "operator[]"_c, &UInt32_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &UInt32_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &UInt32_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &UInt32_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &UInt32_operator_index_UInt32 },
        std::pair{ "operator^"_c, &UInt32_operator_xor_UInt32 },
        std::pair{ "operator^(u32)"_c, &UInt32_operator_xor_UInt32 },
        std::pair{ "operator^="_c, &UInt32_operator_xorasg_UInt32 },
        std::pair{ "operator^=(u32)"_c, &UInt32_operator_xorasg_UInt32 },
        std::pair{ "operator|"_c, &UInt32_operator_or_UInt32 },
        std::pair{ "operator|(u32)"_c, &UInt32_operator_or_UInt32 },
        std::pair{ "operator|="_c, &UInt32_operator_orasg_UInt32 },
        std::pair{ "operator|=(u32)"_c, &UInt32_operator_orasg_UInt32 }
    };
}
UInt32 UInt32Type;

/// operator[] with Int32
Variable Int32_operator_index_Int32_arg;
Function Int32_operator_index_Int32;
inline constexpr std::array Int32_operator_index_Int32_args = { &Int32_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int32_operator_index_UInt32_arg;
Function Int32_operator_index_UInt32;
inline constexpr std::array Int32_operator_index_UInt32_args = { &Int32_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int32_operator_index_Int16_arg;
Function Int32_operator_index_Int16;
inline constexpr std::array Int32_operator_index_Int16_args = { &Int32_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int32_operator_index_UInt16_arg;
Function Int32_operator_index_UInt16;
inline constexpr std::array Int32_operator_index_UInt16_args = { &Int32_operator_index_UInt16_arg };

/// operator+ with Int32
Variable Int32_operator_add_Int32_arg;
Function Int32_operator_add_Int32;
inline constexpr std::array Int32_operator_add_Int32_args = { &Int32_operator_add_Int32_arg };

/// operator- with Int32
Variable Int32_operator_sub_Int32_arg;
Function Int32_operator_sub_Int32;
inline constexpr std::array Int32_operator_sub_Int32_args = { &Int32_operator_sub_Int32_arg };

/// operator* with Int32
Variable Int32_operator_mul_Int32_arg;
Function Int32_operator_mul_Int32;
inline constexpr std::array Int32_operator_mul_Int32_args = { &Int32_operator_mul_Int32_arg };

/// operator/ with Int32
Variable Int32_operator_div_Int32_arg;
Function Int32_operator_div_Int32;
inline constexpr std::array Int32_operator_div_Int32_args = { &Int32_operator_div_Int32_arg };

/// operator% with Int32
Variable Int32_operator_mod_Int32_arg;
Function Int32_operator_mod_Int32;
inline constexpr std::array Int32_operator_mod_Int32_args = { &Int32_operator_mod_Int32_arg };

/// operator+= with Int32
Variable Int32_operator_addasg_Int32_arg;
Function Int32_operator_addasg_Int32;
inline constexpr std::array Int32_operator_addasg_Int32_args = { &Int32_operator_addasg_Int32_arg };

/// operator-= with Int32
Variable Int32_operator_subasg_Int32_arg;
Function Int32_operator_subasg_Int32;
inline constexpr std::array Int32_operator_subasg_Int32_args = { &Int32_operator_subasg_Int32_arg };

/// operator*= with Int32
Variable Int32_operator_mulasg_Int32_arg;
Function Int32_operator_mulasg_Int32;
inline constexpr std::array Int32_operator_mulasg_Int32_args = { &Int32_operator_mulasg_Int32_arg };

/// operator/= with Int32
Variable Int32_operator_divasg_Int32_arg;
Function Int32_operator_divasg_Int32;
inline constexpr std::array Int32_operator_divasg_Int32_args = { &Int32_operator_divasg_Int32_arg };

/// operator< with Int32
Variable Int32_operator_lt_Int32_arg;
Function Int32_operator_lt_Int32;
inline constexpr std::array Int32_operator_lt_Int32_args = { &Int32_operator_lt_Int32_arg };

/// operator<= with Int32
Variable Int32_operator_lte_Int32_arg;
Function Int32_operator_lte_Int32;
inline constexpr std::array Int32_operator_lte_Int32_args = { &Int32_operator_lte_Int32_arg };

/// operator> with Int32
Variable Int32_operator_gt_Int32_arg;
Function Int32_operator_gt_Int32;
inline constexpr std::array Int32_operator_gt_Int32_args = { &Int32_operator_gt_Int32_arg };

/// operator>= with Int32
Variable Int32_operator_gte_Int32_arg;
Function Int32_operator_gte_Int32;
inline constexpr std::array Int32_operator_gte_Int32_args = { &Int32_operator_gte_Int32_arg };

/// operator== with Int32
Variable Int32_operator_eq_Int32_arg;
Function Int32_operator_eq_Int32;
inline constexpr std::array Int32_operator_eq_Int32_args = { &Int32_operator_eq_Int32_arg };

/// operator!= with Int32
Variable Int32_operator_neq_Int32_arg;
Function Int32_operator_neq_Int32;
inline constexpr std::array Int32_operator_neq_Int32_args = { &Int32_operator_neq_Int32_arg };

/// operator| with Int32
Variable Int32_operator_or_Int32_arg;
Function Int32_operator_or_Int32;
inline constexpr std::array Int32_operator_or_Int32_args = { &Int32_operator_or_Int32_arg };

/// operator& with Int32
Variable Int32_operator_and_Int32_arg;
Function Int32_operator_and_Int32;
inline constexpr std::array Int32_operator_and_Int32_args = { &Int32_operator_and_Int32_arg };

/// operator^ with Int32
Variable Int32_operator_xor_Int32_arg;
Function Int32_operator_xor_Int32;
inline constexpr std::array Int32_operator_xor_Int32_args = { &Int32_operator_xor_Int32_arg };

/// operator<< with Int32
Variable Int32_operator_lsh_Int32_arg;
Function Int32_operator_lsh_Int32;
inline constexpr std::array Int32_operator_lsh_Int32_args = { &Int32_operator_lsh_Int32_arg };

/// operator>> with Int32
Variable Int32_operator_rsh_Int32_arg;
Function Int32_operator_rsh_Int32;
inline constexpr std::array Int32_operator_rsh_Int32_args = { &Int32_operator_rsh_Int32_arg };

/// operator|= with Int32
Variable Int32_operator_orasg_Int32_arg;
Function Int32_operator_orasg_Int32;
inline constexpr std::array Int32_operator_orasg_Int32_args = { &Int32_operator_orasg_Int32_arg };

/// operator&= with Int32
Variable Int32_operator_andasg_Int32_arg;
Function Int32_operator_andasg_Int32;
inline constexpr std::array Int32_operator_andasg_Int32_args = { &Int32_operator_andasg_Int32_arg };

/// operator^= with Int32
Variable Int32_operator_xorasg_Int32_arg;
Function Int32_operator_xorasg_Int32;
inline constexpr std::array Int32_operator_xorasg_Int32_args = { &Int32_operator_xorasg_Int32_arg };

/// operator<<= with Int32
Variable Int32_operator_lshasg_Int32_arg;
Function Int32_operator_lshasg_Int32;
inline constexpr std::array Int32_operator_lshasg_Int32_args = { &Int32_operator_lshasg_Int32_arg };

/// operator>>= with Int32
Variable Int32_operator_rhsasg_Int32_arg;
Function Int32_operator_rhsasg_Int32;
inline constexpr std::array Int32_operator_rhsasg_Int32_args = { &Int32_operator_rhsasg_Int32_arg };

Int32::Int32()
{
    this->name = "i32"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    /// operator[] with Int32
    Int32_operator_index_Int32_arg.name = "arg"_c;
    Int32_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_index_Int32.name = "operator[]"_c;
    Int32_operator_index_Int32.backendIndex = 69;
    Int32_operator_index_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_index_Int32.parameters = Int32_operator_index_Int32_args;
    Symbol::Resolved(&Int32_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_index_Int32)->signature = "i32 operator[](i32)"_c;
    Symbol::Resolved(&Int32_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int32_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt32
    Int32_operator_index_UInt32_arg.name = "arg"_c;
    Int32_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32_operator_index_UInt32.name = "operator[]"_c;
    Int32_operator_index_UInt32.backendIndex = 70;
    Int32_operator_index_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_index_UInt32.parameters = Int32_operator_index_UInt32_args;
    Symbol::Resolved(&Int32_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32_operator_index_UInt32)->signature = "i32 operator[](u32)"_c;
    Symbol::Resolved(&Int32_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int32_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int32_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int16
    Int32_operator_index_Int16_arg.name = "arg"_c;
    Int32_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32_operator_index_Int16.name = "operator[]"_c;
    Int32_operator_index_Int16.backendIndex = 71;
    Int32_operator_index_Int16.returnType = Type::FullType { Int32Type.name };
    Int32_operator_index_Int16.parameters = Int32_operator_index_Int16_args;
    Symbol::Resolved(&Int32_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32_operator_index_Int16)->signature = "i32 operator[](i16)"_c;
    Symbol::Resolved(&Int32_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int32_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int32_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt16
    Int32_operator_index_UInt16_arg.name = "arg"_c;
    Int32_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32_operator_index_UInt16.name = "operator[]"_c;
    Int32_operator_index_UInt16.backendIndex = 72;
    Int32_operator_index_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32_operator_index_UInt16.parameters = Int32_operator_index_UInt16_args;
    Symbol::Resolved(&Int32_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32_operator_index_UInt16)->signature = "i32 operator[](u16)"_c;
    Symbol::Resolved(&Int32_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int32_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int32_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    /// operator+ with Int32
    Int32_operator_add_Int32_arg.name = "arg"_c;
    Int32_operator_add_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_add_Int32.name = "operator+"_c;
    Int32_operator_add_Int32.backendIndex = 73;
    Int32_operator_add_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_add_Int32.parameters = Int32_operator_add_Int32_args;
    Symbol::Resolved(&Int32_operator_add_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_add_Int32)->signature = "i32 operator+(i32)"_c;
    Symbol::Resolved(&Int32_operator_add_Int32)->name = "operator+(i32)"_c;
    Symbol::Resolved(&Int32_operator_add_Int32)->nameWithVarNames = "operator+(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_add_Int32)->returnTypeSymbol = &Int32Type;

    /// operator- with Int32
    Int32_operator_sub_Int32_arg.name = "arg"_c;
    Int32_operator_sub_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_sub_Int32.name = "operator-"_c;
    Int32_operator_sub_Int32.backendIndex = 74;
    Int32_operator_sub_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_sub_Int32.parameters = Int32_operator_sub_Int32_args;
    Symbol::Resolved(&Int32_operator_sub_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_sub_Int32)->signature = "i32 operator-(i32)"_c;
    Symbol::Resolved(&Int32_operator_sub_Int32)->name = "operator-(i32)"_c;
    Symbol::Resolved(&Int32_operator_sub_Int32)->nameWithVarNames = "operator-(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_sub_Int32)->returnTypeSymbol = &Int32Type;

    /// operator* with Int32
    Int32_operator_mul_Int32_arg.name = "arg"_c;
    Int32_operator_mul_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_mul_Int32.name = "operator*"_c;
    Int32_operator_mul_Int32.backendIndex = 75;
    Int32_operator_mul_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_mul_Int32.parameters = Int32_operator_mul_Int32_args;
    Symbol::Resolved(&Int32_operator_mul_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_mul_Int32)->signature = "i32 operator*(i32)"_c;
    Symbol::Resolved(&Int32_operator_mul_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Int32_operator_mul_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_mul_Int32)->returnTypeSymbol = &Int32Type;

    /// operator/ with Int32
    Int32_operator_div_Int32_arg.name = "arg"_c;
    Int32_operator_div_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_div_Int32.name = "operator/"_c;
    Int32_operator_div_Int32.backendIndex = 76;
    Int32_operator_div_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_div_Int32.parameters = Int32_operator_div_Int32_args;
    Symbol::Resolved(&Int32_operator_div_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_div_Int32)->signature = "i32 operator/(i32)"_c;
    Symbol::Resolved(&Int32_operator_div_Int32)->name = "operator/(i32)"_c;
    Symbol::Resolved(&Int32_operator_div_Int32)->nameWithVarNames = "operator/(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_div_Int32)->returnTypeSymbol = &Int32Type;

    /// operator% with Int32
    Int32_operator_mod_Int32_arg.name = "arg"_c;
    Int32_operator_mod_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_mod_Int32.name = "operator%"_c;
    Int32_operator_mod_Int32.backendIndex = 77;
    Int32_operator_mod_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_mod_Int32.parameters = Int32_operator_mod_Int32_args;
    Symbol::Resolved(&Int32_operator_mod_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_mod_Int32)->signature = "i32 operator%(i32)"_c;
    Symbol::Resolved(&Int32_operator_mod_Int32)->name = "operator%(i32)"_c;
    Symbol::Resolved(&Int32_operator_mod_Int32)->nameWithVarNames = "operator%(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_mod_Int32)->returnTypeSymbol = &Int32Type;

    /// operator+= with Int32
    Int32_operator_addasg_Int32_arg.name = "arg"_c;
    Int32_operator_addasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_addasg_Int32.name = "operator+="_c;
    Int32_operator_addasg_Int32.backendIndex = 78;
    Int32_operator_addasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_addasg_Int32.parameters = Int32_operator_addasg_Int32_args;
    Symbol::Resolved(&Int32_operator_addasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_addasg_Int32)->signature = "i32 operator+=(i32)"_c;
    Symbol::Resolved(&Int32_operator_addasg_Int32)->name = "operator+=(i32)"_c;
    Symbol::Resolved(&Int32_operator_addasg_Int32)->nameWithVarNames = "operator+=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_addasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator-= with Int32
    Int32_operator_subasg_Int32_arg.name = "arg"_c;
    Int32_operator_subasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_subasg_Int32.name = "operator-="_c;
    Int32_operator_subasg_Int32.backendIndex = 79;
    Int32_operator_subasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_subasg_Int32.parameters = Int32_operator_subasg_Int32_args;
    Symbol::Resolved(&Int32_operator_subasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_subasg_Int32)->signature = "i32 operator-=(i32)"_c;
    Symbol::Resolved(&Int32_operator_subasg_Int32)->name = "operator-=(i32)"_c;
    Symbol::Resolved(&Int32_operator_subasg_Int32)->nameWithVarNames = "operator-=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_subasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator*= with Int32
    Int32_operator_mulasg_Int32_arg.name = "arg"_c;
    Int32_operator_mulasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_mulasg_Int32.name = "operator*="_c;
    Int32_operator_mulasg_Int32.backendIndex = 80;
    Int32_operator_mulasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_mulasg_Int32.parameters = Int32_operator_mulasg_Int32_args;
    Symbol::Resolved(&Int32_operator_mulasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_mulasg_Int32)->signature = "i32 operator*=(i32)"_c;
    Symbol::Resolved(&Int32_operator_mulasg_Int32)->name = "operator*=(i32)"_c;
    Symbol::Resolved(&Int32_operator_mulasg_Int32)->nameWithVarNames = "operator*=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_mulasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator/= with Int32
    Int32_operator_divasg_Int32_arg.name = "arg"_c;
    Int32_operator_divasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_divasg_Int32.name = "operator/="_c;
    Int32_operator_divasg_Int32.backendIndex = 81;
    Int32_operator_divasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_divasg_Int32.parameters = Int32_operator_divasg_Int32_args;
    Symbol::Resolved(&Int32_operator_divasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_divasg_Int32)->signature = "i32 operator/=(i32)"_c;
    Symbol::Resolved(&Int32_operator_divasg_Int32)->name = "operator/=(i32)"_c;
    Symbol::Resolved(&Int32_operator_divasg_Int32)->nameWithVarNames = "operator/=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_divasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator< with Int32
    Int32_operator_lt_Int32_arg.name = "arg"_c;
    Int32_operator_lt_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_lt_Int32.name = "operator<"_c;
    Int32_operator_lt_Int32.backendIndex = 82;
    Int32_operator_lt_Int32.returnType = Type::FullType { Bool8Type.name };
    Int32_operator_lt_Int32.parameters = Int32_operator_lt_Int32_args;
    Symbol::Resolved(&Int32_operator_lt_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_lt_Int32)->signature = "b8 operator<(i32)"_c;
    Symbol::Resolved(&Int32_operator_lt_Int32)->name = "operator<(i32)"_c;
    Symbol::Resolved(&Int32_operator_lt_Int32)->nameWithVarNames = "operator<(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_lt_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator<= with Int32
    Int32_operator_lte_Int32_arg.name = "arg"_c;
    Int32_operator_lte_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_lte_Int32.name = "operator<="_c;
    Int32_operator_lte_Int32.backendIndex = 83;
    Int32_operator_lte_Int32.returnType = Type::FullType { Bool8Type.name };
    Int32_operator_lte_Int32.parameters = Int32_operator_lte_Int32_args;
    Symbol::Resolved(&Int32_operator_lte_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_lte_Int32)->signature = "b8 operator<=(i32)"_c;
    Symbol::Resolved(&Int32_operator_lte_Int32)->name = "operator<=(i32)"_c;
    Symbol::Resolved(&Int32_operator_lte_Int32)->nameWithVarNames = "operator<=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_lte_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator> with Int32
    Int32_operator_gt_Int32_arg.name = "arg"_c;
    Int32_operator_gt_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_gt_Int32.name = "operator>"_c;
    Int32_operator_gt_Int32.backendIndex = 84;
    Int32_operator_gt_Int32.returnType = Type::FullType { Bool8Type.name };
    Int32_operator_gt_Int32.parameters = Int32_operator_gt_Int32_args;
    Symbol::Resolved(&Int32_operator_gt_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_gt_Int32)->signature = "b8 operator>(i32)"_c;
    Symbol::Resolved(&Int32_operator_gt_Int32)->name = "operator>(i32)"_c;
    Symbol::Resolved(&Int32_operator_gt_Int32)->nameWithVarNames = "operator>(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_gt_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator>= with Int32
    Int32_operator_gte_Int32_arg.name = "arg"_c;
    Int32_operator_gte_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_gte_Int32.name = "operator>="_c;
    Int32_operator_gte_Int32.backendIndex = 85;
    Int32_operator_gte_Int32.returnType = Type::FullType { Bool8Type.name };
    Int32_operator_gte_Int32.parameters = Int32_operator_gte_Int32_args;
    Symbol::Resolved(&Int32_operator_gte_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_gte_Int32)->signature = "b8 operator>=(i32)"_c;
    Symbol::Resolved(&Int32_operator_gte_Int32)->name = "operator>=(i32)"_c;
    Symbol::Resolved(&Int32_operator_gte_Int32)->nameWithVarNames = "operator>=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_gte_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator== with Int32
    Int32_operator_eq_Int32_arg.name = "arg"_c;
    Int32_operator_eq_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_eq_Int32.name = "operator=="_c;
    Int32_operator_eq_Int32.backendIndex = 86;
    Int32_operator_eq_Int32.returnType = Type::FullType { Bool8Type.name };
    Int32_operator_eq_Int32.parameters = Int32_operator_eq_Int32_args;
    Symbol::Resolved(&Int32_operator_eq_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_eq_Int32)->signature = "b8 operator==(i32)"_c;
    Symbol::Resolved(&Int32_operator_eq_Int32)->name = "operator==(i32)"_c;
    Symbol::Resolved(&Int32_operator_eq_Int32)->nameWithVarNames = "operator==(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_eq_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Int32
    Int32_operator_neq_Int32_arg.name = "arg"_c;
    Int32_operator_neq_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_neq_Int32.name = "operator!="_c;
    Int32_operator_neq_Int32.backendIndex = 87;
    Int32_operator_neq_Int32.returnType = Type::FullType { Bool8Type.name };
    Int32_operator_neq_Int32.parameters = Int32_operator_neq_Int32_args;
    Symbol::Resolved(&Int32_operator_neq_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_neq_Int32)->signature = "b8 operator!=(i32)"_c;
    Symbol::Resolved(&Int32_operator_neq_Int32)->name = "operator!=(i32)"_c;
    Symbol::Resolved(&Int32_operator_neq_Int32)->nameWithVarNames = "operator!=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_neq_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator| with Int32
    Int32_operator_or_Int32_arg.name = "arg"_c;
    Int32_operator_or_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_or_Int32.name = "operator|"_c;
    Int32_operator_or_Int32.backendIndex = 88;
    Int32_operator_or_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_or_Int32.parameters = Int32_operator_or_Int32_args;
    Symbol::Resolved(&Int32_operator_or_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_or_Int32)->signature = "i32 operator|(i32)"_c;
    Symbol::Resolved(&Int32_operator_or_Int32)->name = "operator|(i32)"_c;
    Symbol::Resolved(&Int32_operator_or_Int32)->nameWithVarNames = "operator|(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_or_Int32)->returnTypeSymbol = &Int32Type;

    /// operator& with Int32
    Int32_operator_and_Int32_arg.name = "arg"_c;
    Int32_operator_and_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_and_Int32.name = "operator&"_c;
    Int32_operator_and_Int32.backendIndex = 89;
    Int32_operator_and_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_and_Int32.parameters = Int32_operator_and_Int32_args;
    Symbol::Resolved(&Int32_operator_and_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_and_Int32)->signature = "i32 operator&(i32)"_c;
    Symbol::Resolved(&Int32_operator_and_Int32)->name = "operator&(i32)"_c;
    Symbol::Resolved(&Int32_operator_and_Int32)->nameWithVarNames = "operator&(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_and_Int32)->returnTypeSymbol = &Int32Type;

    /// operator^ with Int32
    Int32_operator_xor_Int32_arg.name = "arg"_c;
    Int32_operator_xor_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_xor_Int32.name = "operator^"_c;
    Int32_operator_xor_Int32.backendIndex = 90;
    Int32_operator_xor_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_xor_Int32.parameters = Int32_operator_xor_Int32_args;
    Symbol::Resolved(&Int32_operator_xor_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_xor_Int32)->signature = "i32 operator^(i32)"_c;
    Symbol::Resolved(&Int32_operator_xor_Int32)->name = "operator^(i32)"_c;
    Symbol::Resolved(&Int32_operator_xor_Int32)->nameWithVarNames = "operator^(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_xor_Int32)->returnTypeSymbol = &Int32Type;

    /// operator<< with Int32
    Int32_operator_lsh_Int32_arg.name = "arg"_c;
    Int32_operator_lsh_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_lsh_Int32.name = "operator<<"_c;
    Int32_operator_lsh_Int32.backendIndex = 91;
    Int32_operator_lsh_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_lsh_Int32.parameters = Int32_operator_lsh_Int32_args;
    Symbol::Resolved(&Int32_operator_lsh_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_lsh_Int32)->signature = "i32 operator<<(i32)"_c;
    Symbol::Resolved(&Int32_operator_lsh_Int32)->name = "operator<<(i32)"_c;
    Symbol::Resolved(&Int32_operator_lsh_Int32)->nameWithVarNames = "operator<<(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_lsh_Int32)->returnTypeSymbol = &Int32Type;

    /// operator>> with Int32
    Int32_operator_rsh_Int32_arg.name = "arg"_c;
    Int32_operator_rsh_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_rsh_Int32.name = "operator>>"_c;
    Int32_operator_rsh_Int32.backendIndex = 92;
    Int32_operator_rsh_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_rsh_Int32.parameters = Int32_operator_rsh_Int32_args;
    Symbol::Resolved(&Int32_operator_rsh_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_rsh_Int32)->signature = "i32 operator>>(i32)"_c;
    Symbol::Resolved(&Int32_operator_rsh_Int32)->name = "operator>>(i32)"_c;
    Symbol::Resolved(&Int32_operator_rsh_Int32)->nameWithVarNames = "operator>>(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_rsh_Int32)->returnTypeSymbol = &Int32Type;

    /// operator|= with Int32
    Int32_operator_orasg_Int32_arg.name = "arg"_c;
    Int32_operator_orasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_orasg_Int32.name = "operator|="_c;
    Int32_operator_orasg_Int32.backendIndex = 93;
    Int32_operator_orasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_orasg_Int32.parameters = Int32_operator_orasg_Int32_args;
    Symbol::Resolved(&Int32_operator_orasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_orasg_Int32)->signature = "i32 operator|=(i32)"_c;
    Symbol::Resolved(&Int32_operator_orasg_Int32)->name = "operator|=(i32)"_c;
    Symbol::Resolved(&Int32_operator_orasg_Int32)->nameWithVarNames = "operator|=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_orasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator&= with Int32
    Int32_operator_andasg_Int32_arg.name = "arg"_c;
    Int32_operator_andasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_andasg_Int32.name = "operator&="_c;
    Int32_operator_andasg_Int32.backendIndex = 94;
    Int32_operator_andasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_andasg_Int32.parameters = Int32_operator_andasg_Int32_args;
    Symbol::Resolved(&Int32_operator_andasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_andasg_Int32)->signature = "i32 operator&=(i32)"_c;
    Symbol::Resolved(&Int32_operator_andasg_Int32)->name = "operator&=(i32)"_c;
    Symbol::Resolved(&Int32_operator_andasg_Int32)->nameWithVarNames = "operator&=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_andasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator^= with Int32
    Int32_operator_xorasg_Int32_arg.name = "arg"_c;
    Int32_operator_xorasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_xorasg_Int32.name = "operator^="_c;
    Int32_operator_xorasg_Int32.backendIndex = 95;
    Int32_operator_xorasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_xorasg_Int32.parameters = Int32_operator_xorasg_Int32_args;
    Symbol::Resolved(&Int32_operator_xorasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_xorasg_Int32)->signature = "i32 operator^=(i32)"_c;
    Symbol::Resolved(&Int32_operator_xorasg_Int32)->name = "operator^=(i32)"_c;
    Symbol::Resolved(&Int32_operator_xorasg_Int32)->nameWithVarNames = "operator^=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_xorasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator<<= with Int32
    Int32_operator_lshasg_Int32_arg.name = "arg"_c;
    Int32_operator_lshasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_lshasg_Int32.name = "operator<<="_c;
    Int32_operator_lshasg_Int32.backendIndex = 96;
    Int32_operator_lshasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_lshasg_Int32.parameters = Int32_operator_lshasg_Int32_args;
    Symbol::Resolved(&Int32_operator_lshasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_lshasg_Int32)->signature = "i32 operator<<=(i32)"_c;
    Symbol::Resolved(&Int32_operator_lshasg_Int32)->name = "operator<<=(i32)"_c;
    Symbol::Resolved(&Int32_operator_lshasg_Int32)->nameWithVarNames = "operator<<=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_lshasg_Int32)->returnTypeSymbol = &Int32Type;

    /// operator>>= with Int32
    Int32_operator_rhsasg_Int32_arg.name = "arg"_c;
    Int32_operator_rhsasg_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32_operator_rhsasg_Int32.name = "operator>>="_c;
    Int32_operator_rhsasg_Int32.backendIndex = 97;
    Int32_operator_rhsasg_Int32.returnType = Type::FullType { Int32Type.name };
    Int32_operator_rhsasg_Int32.parameters = Int32_operator_rhsasg_Int32_args;
    Symbol::Resolved(&Int32_operator_rhsasg_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_operator_rhsasg_Int32)->signature = "i32 operator>>=(i32)"_c;
    Symbol::Resolved(&Int32_operator_rhsasg_Int32)->name = "operator>>=(i32)"_c;
    Symbol::Resolved(&Int32_operator_rhsasg_Int32)->nameWithVarNames = "operator>>=(arg : i32)"_c;
    Symbol::Resolved(&Int32_operator_rhsasg_Int32)->returnTypeSymbol = &Int32Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 58> { 
        std::pair{ "operator!="_c, &Int32_operator_neq_Int32 },
        std::pair{ "operator!=(i32)"_c, &Int32_operator_neq_Int32 },
        std::pair{ "operator%"_c, &Int32_operator_mod_Int32 },
        std::pair{ "operator%(i32)"_c, &Int32_operator_mod_Int32 },
        std::pair{ "operator&"_c, &Int32_operator_and_Int32 },
        std::pair{ "operator&(i32)"_c, &Int32_operator_and_Int32 },
        std::pair{ "operator&="_c, &Int32_operator_andasg_Int32 },
        std::pair{ "operator&=(i32)"_c, &Int32_operator_andasg_Int32 },
        std::pair{ "operator*"_c, &Int32_operator_mul_Int32 },
        std::pair{ "operator*(i32)"_c, &Int32_operator_mul_Int32 },
        std::pair{ "operator*="_c, &Int32_operator_mulasg_Int32 },
        std::pair{ "operator*=(i32)"_c, &Int32_operator_mulasg_Int32 },
        std::pair{ "operator+"_c, &Int32_operator_add_Int32 },
        std::pair{ "operator+(i32)"_c, &Int32_operator_add_Int32 },
        std::pair{ "operator+="_c, &Int32_operator_addasg_Int32 },
        std::pair{ "operator+=(i32)"_c, &Int32_operator_addasg_Int32 },
        std::pair{ "operator-"_c, &Int32_operator_sub_Int32 },
        std::pair{ "operator-(i32)"_c, &Int32_operator_sub_Int32 },
        std::pair{ "operator-="_c, &Int32_operator_subasg_Int32 },
        std::pair{ "operator-=(i32)"_c, &Int32_operator_subasg_Int32 },
        std::pair{ "operator/"_c, &Int32_operator_div_Int32 },
        std::pair{ "operator/(i32)"_c, &Int32_operator_div_Int32 },
        std::pair{ "operator/="_c, &Int32_operator_divasg_Int32 },
        std::pair{ "operator/=(i32)"_c, &Int32_operator_divasg_Int32 },
        std::pair{ "operator<"_c, &Int32_operator_lt_Int32 },
        std::pair{ "operator<(i32)"_c, &Int32_operator_lt_Int32 },
        std::pair{ "operator<<"_c, &Int32_operator_lsh_Int32 },
        std::pair{ "operator<<(i32)"_c, &Int32_operator_lsh_Int32 },
        std::pair{ "operator<<="_c, &Int32_operator_lshasg_Int32 },
        std::pair{ "operator<<=(i32)"_c, &Int32_operator_lshasg_Int32 },
        std::pair{ "operator<="_c, &Int32_operator_lte_Int32 },
        std::pair{ "operator<=(i32)"_c, &Int32_operator_lte_Int32 },
        std::pair{ "operator=="_c, &Int32_operator_eq_Int32 },
        std::pair{ "operator==(i32)"_c, &Int32_operator_eq_Int32 },
        std::pair{ "operator>"_c, &Int32_operator_gt_Int32 },
        std::pair{ "operator>(i32)"_c, &Int32_operator_gt_Int32 },
        std::pair{ "operator>="_c, &Int32_operator_gte_Int32 },
        std::pair{ "operator>=(i32)"_c, &Int32_operator_gte_Int32 },
        std::pair{ "operator>>"_c, &Int32_operator_rsh_Int32 },
        std::pair{ "operator>>(i32)"_c, &Int32_operator_rsh_Int32 },
        std::pair{ "operator>>="_c, &Int32_operator_rhsasg_Int32 },
        std::pair{ "operator>>=(i32)"_c, &Int32_operator_rhsasg_Int32 },
        std::pair{ "operator[]"_c, &Int32_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Int32_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Int32_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Int32_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Int32_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Int32_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Int32_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Int32_operator_index_UInt32 },
        std::pair{ "operator^"_c, &Int32_operator_xor_Int32 },
        std::pair{ "operator^(i32)"_c, &Int32_operator_xor_Int32 },
        std::pair{ "operator^="_c, &Int32_operator_xorasg_Int32 },
        std::pair{ "operator^=(i32)"_c, &Int32_operator_xorasg_Int32 },
        std::pair{ "operator|"_c, &Int32_operator_or_Int32 },
        std::pair{ "operator|(i32)"_c, &Int32_operator_or_Int32 },
        std::pair{ "operator|="_c, &Int32_operator_orasg_Int32 },
        std::pair{ "operator|=(i32)"_c, &Int32_operator_orasg_Int32 }
    };
}
Int32 Int32Type;

/// operator[] with Int32
Variable Bool8_operator_index_Int32_arg;
Function Bool8_operator_index_Int32;
inline constexpr std::array Bool8_operator_index_Int32_args = { &Bool8_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Bool8_operator_index_UInt32_arg;
Function Bool8_operator_index_UInt32;
inline constexpr std::array Bool8_operator_index_UInt32_args = { &Bool8_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Bool8_operator_index_Int16_arg;
Function Bool8_operator_index_Int16;
inline constexpr std::array Bool8_operator_index_Int16_args = { &Bool8_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Bool8_operator_index_UInt16_arg;
Function Bool8_operator_index_UInt16;
inline constexpr std::array Bool8_operator_index_UInt16_args = { &Bool8_operator_index_UInt16_arg };

/// operator|| with Bool8
Variable Bool8_operator_oror_Bool8_arg;
Function Bool8_operator_oror_Bool8;
inline constexpr std::array Bool8_operator_oror_Bool8_args = { &Bool8_operator_oror_Bool8_arg };

/// operator&& with Bool8
Variable Bool8_operator_andand_Bool8_arg;
Function Bool8_operator_andand_Bool8;
inline constexpr std::array Bool8_operator_andand_Bool8_args = { &Bool8_operator_andand_Bool8_arg };

/// operator== with Bool8
Variable Bool8_operator_eq_Bool8_arg;
Function Bool8_operator_eq_Bool8;
inline constexpr std::array Bool8_operator_eq_Bool8_args = { &Bool8_operator_eq_Bool8_arg };

/// operator!= with Bool8
Variable Bool8_operator_neq_Bool8_arg;
Function Bool8_operator_neq_Bool8;
inline constexpr std::array Bool8_operator_neq_Bool8_args = { &Bool8_operator_neq_Bool8_arg };

Bool8::Bool8()
{
    this->name = "b8"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 1;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    /// operator[] with Int32
    Bool8_operator_index_Int32_arg.name = "arg"_c;
    Bool8_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8_operator_index_Int32.name = "operator[]"_c;
    Bool8_operator_index_Int32.backendIndex = 103;
    Bool8_operator_index_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_index_Int32.parameters = Bool8_operator_index_Int32_args;
    Symbol::Resolved(&Bool8_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8_operator_index_Int32)->signature = "b8 operator[](i32)"_c;
    Symbol::Resolved(&Bool8_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Bool8_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Bool8_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt32
    Bool8_operator_index_UInt32_arg.name = "arg"_c;
    Bool8_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8_operator_index_UInt32.name = "operator[]"_c;
    Bool8_operator_index_UInt32.backendIndex = 104;
    Bool8_operator_index_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_index_UInt32.parameters = Bool8_operator_index_UInt32_args;
    Symbol::Resolved(&Bool8_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8_operator_index_UInt32)->signature = "b8 operator[](u32)"_c;
    Symbol::Resolved(&Bool8_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Bool8_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Bool8_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int16
    Bool8_operator_index_Int16_arg.name = "arg"_c;
    Bool8_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8_operator_index_Int16.name = "operator[]"_c;
    Bool8_operator_index_Int16.backendIndex = 105;
    Bool8_operator_index_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_index_Int16.parameters = Bool8_operator_index_Int16_args;
    Symbol::Resolved(&Bool8_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8_operator_index_Int16)->signature = "b8 operator[](i16)"_c;
    Symbol::Resolved(&Bool8_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Bool8_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Bool8_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt16
    Bool8_operator_index_UInt16_arg.name = "arg"_c;
    Bool8_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8_operator_index_UInt16.name = "operator[]"_c;
    Bool8_operator_index_UInt16.backendIndex = 106;
    Bool8_operator_index_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_index_UInt16.parameters = Bool8_operator_index_UInt16_args;
    Symbol::Resolved(&Bool8_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8_operator_index_UInt16)->signature = "b8 operator[](u16)"_c;
    Symbol::Resolved(&Bool8_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Bool8_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Bool8_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator|| with Bool8
    Bool8_operator_oror_Bool8_arg.name = "arg"_c;
    Bool8_operator_oror_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Bool8_operator_oror_Bool8.name = "operator||"_c;
    Bool8_operator_oror_Bool8.backendIndex = 107;
    Bool8_operator_oror_Bool8.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_oror_Bool8.parameters = Bool8_operator_oror_Bool8_args;
    Symbol::Resolved(&Bool8_operator_oror_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_operator_oror_Bool8)->signature = "b8 operator||(b8)"_c;
    Symbol::Resolved(&Bool8_operator_oror_Bool8)->name = "operator||(b8)"_c;
    Symbol::Resolved(&Bool8_operator_oror_Bool8)->nameWithVarNames = "operator||(arg : b8)"_c;
    Symbol::Resolved(&Bool8_operator_oror_Bool8)->returnTypeSymbol = &Bool8Type;

    /// operator&& with Bool8
    Bool8_operator_andand_Bool8_arg.name = "arg"_c;
    Bool8_operator_andand_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Bool8_operator_andand_Bool8.name = "operator&&"_c;
    Bool8_operator_andand_Bool8.backendIndex = 108;
    Bool8_operator_andand_Bool8.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_andand_Bool8.parameters = Bool8_operator_andand_Bool8_args;
    Symbol::Resolved(&Bool8_operator_andand_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_operator_andand_Bool8)->signature = "b8 operator&&(b8)"_c;
    Symbol::Resolved(&Bool8_operator_andand_Bool8)->name = "operator&&(b8)"_c;
    Symbol::Resolved(&Bool8_operator_andand_Bool8)->nameWithVarNames = "operator&&(arg : b8)"_c;
    Symbol::Resolved(&Bool8_operator_andand_Bool8)->returnTypeSymbol = &Bool8Type;

    /// operator== with Bool8
    Bool8_operator_eq_Bool8_arg.name = "arg"_c;
    Bool8_operator_eq_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Bool8_operator_eq_Bool8.name = "operator=="_c;
    Bool8_operator_eq_Bool8.backendIndex = 109;
    Bool8_operator_eq_Bool8.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_eq_Bool8.parameters = Bool8_operator_eq_Bool8_args;
    Symbol::Resolved(&Bool8_operator_eq_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_operator_eq_Bool8)->signature = "b8 operator==(b8)"_c;
    Symbol::Resolved(&Bool8_operator_eq_Bool8)->name = "operator==(b8)"_c;
    Symbol::Resolved(&Bool8_operator_eq_Bool8)->nameWithVarNames = "operator==(arg : b8)"_c;
    Symbol::Resolved(&Bool8_operator_eq_Bool8)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Bool8
    Bool8_operator_neq_Bool8_arg.name = "arg"_c;
    Bool8_operator_neq_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Bool8_operator_neq_Bool8.name = "operator!="_c;
    Bool8_operator_neq_Bool8.backendIndex = 110;
    Bool8_operator_neq_Bool8.returnType = Type::FullType { Bool8Type.name };
    Bool8_operator_neq_Bool8.parameters = Bool8_operator_neq_Bool8_args;
    Symbol::Resolved(&Bool8_operator_neq_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_operator_neq_Bool8)->signature = "b8 operator!=(b8)"_c;
    Symbol::Resolved(&Bool8_operator_neq_Bool8)->name = "operator!=(b8)"_c;
    Symbol::Resolved(&Bool8_operator_neq_Bool8)->nameWithVarNames = "operator!=(arg : b8)"_c;
    Symbol::Resolved(&Bool8_operator_neq_Bool8)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 16> { 
        std::pair{ "operator!="_c, &Bool8_operator_neq_Bool8 },
        std::pair{ "operator!=(b8)"_c, &Bool8_operator_neq_Bool8 },
        std::pair{ "operator&&"_c, &Bool8_operator_andand_Bool8 },
        std::pair{ "operator&&(b8)"_c, &Bool8_operator_andand_Bool8 },
        std::pair{ "operator=="_c, &Bool8_operator_eq_Bool8 },
        std::pair{ "operator==(b8)"_c, &Bool8_operator_eq_Bool8 },
        std::pair{ "operator[]"_c, &Bool8_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Bool8_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Bool8_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Bool8_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Bool8_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Bool8_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Bool8_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Bool8_operator_index_UInt32 },
        std::pair{ "operator||"_c, &Bool8_operator_oror_Bool8 },
        std::pair{ "operator||(b8)"_c, &Bool8_operator_oror_Bool8 }
    };
}
Bool8 Bool8Type;

/// operator[] with Int32
Variable Float16_operator_index_Int32_arg;
Function Float16_operator_index_Int32;
inline constexpr std::array Float16_operator_index_Int32_args = { &Float16_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16_operator_index_UInt32_arg;
Function Float16_operator_index_UInt32;
inline constexpr std::array Float16_operator_index_UInt32_args = { &Float16_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16_operator_index_Int16_arg;
Function Float16_operator_index_Int16;
inline constexpr std::array Float16_operator_index_Int16_args = { &Float16_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16_operator_index_UInt16_arg;
Function Float16_operator_index_UInt16;
inline constexpr std::array Float16_operator_index_UInt16_args = { &Float16_operator_index_UInt16_arg };

/// operator+ with Float16
Variable Float16_operator_add_Float16_arg;
Function Float16_operator_add_Float16;
inline constexpr std::array Float16_operator_add_Float16_args = { &Float16_operator_add_Float16_arg };

/// operator- with Float16
Variable Float16_operator_sub_Float16_arg;
Function Float16_operator_sub_Float16;
inline constexpr std::array Float16_operator_sub_Float16_args = { &Float16_operator_sub_Float16_arg };

/// operator* with Float16
Variable Float16_operator_mul_Float16_arg;
Function Float16_operator_mul_Float16;
inline constexpr std::array Float16_operator_mul_Float16_args = { &Float16_operator_mul_Float16_arg };

/// operator/ with Float16
Variable Float16_operator_div_Float16_arg;
Function Float16_operator_div_Float16;
inline constexpr std::array Float16_operator_div_Float16_args = { &Float16_operator_div_Float16_arg };

/// operator% with Float16
Variable Float16_operator_mod_Float16_arg;
Function Float16_operator_mod_Float16;
inline constexpr std::array Float16_operator_mod_Float16_args = { &Float16_operator_mod_Float16_arg };

/// operator+= with Float16
Variable Float16_operator_addasg_Float16_arg;
Function Float16_operator_addasg_Float16;
inline constexpr std::array Float16_operator_addasg_Float16_args = { &Float16_operator_addasg_Float16_arg };

/// operator-= with Float16
Variable Float16_operator_subasg_Float16_arg;
Function Float16_operator_subasg_Float16;
inline constexpr std::array Float16_operator_subasg_Float16_args = { &Float16_operator_subasg_Float16_arg };

/// operator*= with Float16
Variable Float16_operator_mulasg_Float16_arg;
Function Float16_operator_mulasg_Float16;
inline constexpr std::array Float16_operator_mulasg_Float16_args = { &Float16_operator_mulasg_Float16_arg };

/// operator/= with Float16
Variable Float16_operator_divasg_Float16_arg;
Function Float16_operator_divasg_Float16;
inline constexpr std::array Float16_operator_divasg_Float16_args = { &Float16_operator_divasg_Float16_arg };

/// operator< with Float16
Variable Float16_operator_lt_Float16_arg;
Function Float16_operator_lt_Float16;
inline constexpr std::array Float16_operator_lt_Float16_args = { &Float16_operator_lt_Float16_arg };

/// operator<= with Float16
Variable Float16_operator_lte_Float16_arg;
Function Float16_operator_lte_Float16;
inline constexpr std::array Float16_operator_lte_Float16_args = { &Float16_operator_lte_Float16_arg };

/// operator> with Float16
Variable Float16_operator_gt_Float16_arg;
Function Float16_operator_gt_Float16;
inline constexpr std::array Float16_operator_gt_Float16_args = { &Float16_operator_gt_Float16_arg };

/// operator>= with Float16
Variable Float16_operator_gte_Float16_arg;
Function Float16_operator_gte_Float16;
inline constexpr std::array Float16_operator_gte_Float16_args = { &Float16_operator_gte_Float16_arg };

/// operator== with Float16
Variable Float16_operator_eq_Float16_arg;
Function Float16_operator_eq_Float16;
inline constexpr std::array Float16_operator_eq_Float16_args = { &Float16_operator_eq_Float16_arg };

/// operator!= with Float16
Variable Float16_operator_neq_Float16_arg;
Function Float16_operator_neq_Float16;
inline constexpr std::array Float16_operator_neq_Float16_args = { &Float16_operator_neq_Float16_arg };

Float16::Float16()
{
    this->name = "f16"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16_operator_index_Int32_arg.name = "arg"_c;
    Float16_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16_operator_index_Int32.name = "operator[]"_c;
    Float16_operator_index_Int32.backendIndex = 118;
    Float16_operator_index_Int32.returnType = Type::FullType { Float16Type.name };
    Float16_operator_index_Int32.parameters = Float16_operator_index_Int32_args;
    Symbol::Resolved(&Float16_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16_operator_index_Int32)->signature = "f16 operator[](i32)"_c;
    Symbol::Resolved(&Float16_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float16_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt32
    Float16_operator_index_UInt32_arg.name = "arg"_c;
    Float16_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16_operator_index_UInt32.name = "operator[]"_c;
    Float16_operator_index_UInt32.backendIndex = 119;
    Float16_operator_index_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16_operator_index_UInt32.parameters = Float16_operator_index_UInt32_args;
    Symbol::Resolved(&Float16_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16_operator_index_UInt32)->signature = "f16 operator[](u32)"_c;
    Symbol::Resolved(&Float16_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float16_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int16
    Float16_operator_index_Int16_arg.name = "arg"_c;
    Float16_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16_operator_index_Int16.name = "operator[]"_c;
    Float16_operator_index_Int16.backendIndex = 120;
    Float16_operator_index_Int16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_index_Int16.parameters = Float16_operator_index_Int16_args;
    Symbol::Resolved(&Float16_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16_operator_index_Int16)->signature = "f16 operator[](i16)"_c;
    Symbol::Resolved(&Float16_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float16_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt16
    Float16_operator_index_UInt16_arg.name = "arg"_c;
    Float16_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16_operator_index_UInt16.name = "operator[]"_c;
    Float16_operator_index_UInt16.backendIndex = 121;
    Float16_operator_index_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_index_UInt16.parameters = Float16_operator_index_UInt16_args;
    Symbol::Resolved(&Float16_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16_operator_index_UInt16)->signature = "f16 operator[](u16)"_c;
    Symbol::Resolved(&Float16_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float16_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    /// operator+ with Float16
    Float16_operator_add_Float16_arg.name = "arg"_c;
    Float16_operator_add_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_add_Float16.name = "operator+"_c;
    Float16_operator_add_Float16.backendIndex = 122;
    Float16_operator_add_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_add_Float16.parameters = Float16_operator_add_Float16_args;
    Symbol::Resolved(&Float16_operator_add_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_add_Float16)->signature = "f16 operator+(f16)"_c;
    Symbol::Resolved(&Float16_operator_add_Float16)->name = "operator+(f16)"_c;
    Symbol::Resolved(&Float16_operator_add_Float16)->nameWithVarNames = "operator+(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_add_Float16)->returnTypeSymbol = &Float16Type;

    /// operator- with Float16
    Float16_operator_sub_Float16_arg.name = "arg"_c;
    Float16_operator_sub_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_sub_Float16.name = "operator-"_c;
    Float16_operator_sub_Float16.backendIndex = 123;
    Float16_operator_sub_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_sub_Float16.parameters = Float16_operator_sub_Float16_args;
    Symbol::Resolved(&Float16_operator_sub_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_sub_Float16)->signature = "f16 operator-(f16)"_c;
    Symbol::Resolved(&Float16_operator_sub_Float16)->name = "operator-(f16)"_c;
    Symbol::Resolved(&Float16_operator_sub_Float16)->nameWithVarNames = "operator-(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_sub_Float16)->returnTypeSymbol = &Float16Type;

    /// operator* with Float16
    Float16_operator_mul_Float16_arg.name = "arg"_c;
    Float16_operator_mul_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_mul_Float16.name = "operator*"_c;
    Float16_operator_mul_Float16.backendIndex = 124;
    Float16_operator_mul_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_mul_Float16.parameters = Float16_operator_mul_Float16_args;
    Symbol::Resolved(&Float16_operator_mul_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_mul_Float16)->signature = "f16 operator*(f16)"_c;
    Symbol::Resolved(&Float16_operator_mul_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16_operator_mul_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_mul_Float16)->returnTypeSymbol = &Float16Type;

    /// operator/ with Float16
    Float16_operator_div_Float16_arg.name = "arg"_c;
    Float16_operator_div_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_div_Float16.name = "operator/"_c;
    Float16_operator_div_Float16.backendIndex = 125;
    Float16_operator_div_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_div_Float16.parameters = Float16_operator_div_Float16_args;
    Symbol::Resolved(&Float16_operator_div_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_div_Float16)->signature = "f16 operator/(f16)"_c;
    Symbol::Resolved(&Float16_operator_div_Float16)->name = "operator/(f16)"_c;
    Symbol::Resolved(&Float16_operator_div_Float16)->nameWithVarNames = "operator/(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_div_Float16)->returnTypeSymbol = &Float16Type;

    /// operator% with Float16
    Float16_operator_mod_Float16_arg.name = "arg"_c;
    Float16_operator_mod_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_mod_Float16.name = "operator%"_c;
    Float16_operator_mod_Float16.backendIndex = 126;
    Float16_operator_mod_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_mod_Float16.parameters = Float16_operator_mod_Float16_args;
    Symbol::Resolved(&Float16_operator_mod_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_mod_Float16)->signature = "f16 operator%(f16)"_c;
    Symbol::Resolved(&Float16_operator_mod_Float16)->name = "operator%(f16)"_c;
    Symbol::Resolved(&Float16_operator_mod_Float16)->nameWithVarNames = "operator%(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_mod_Float16)->returnTypeSymbol = &Float16Type;

    /// operator+= with Float16
    Float16_operator_addasg_Float16_arg.name = "arg"_c;
    Float16_operator_addasg_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_addasg_Float16.name = "operator+="_c;
    Float16_operator_addasg_Float16.backendIndex = 127;
    Float16_operator_addasg_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_addasg_Float16.parameters = Float16_operator_addasg_Float16_args;
    Symbol::Resolved(&Float16_operator_addasg_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_addasg_Float16)->signature = "f16 operator+=(f16)"_c;
    Symbol::Resolved(&Float16_operator_addasg_Float16)->name = "operator+=(f16)"_c;
    Symbol::Resolved(&Float16_operator_addasg_Float16)->nameWithVarNames = "operator+=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_addasg_Float16)->returnTypeSymbol = &Float16Type;

    /// operator-= with Float16
    Float16_operator_subasg_Float16_arg.name = "arg"_c;
    Float16_operator_subasg_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_subasg_Float16.name = "operator-="_c;
    Float16_operator_subasg_Float16.backendIndex = 128;
    Float16_operator_subasg_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_subasg_Float16.parameters = Float16_operator_subasg_Float16_args;
    Symbol::Resolved(&Float16_operator_subasg_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_subasg_Float16)->signature = "f16 operator-=(f16)"_c;
    Symbol::Resolved(&Float16_operator_subasg_Float16)->name = "operator-=(f16)"_c;
    Symbol::Resolved(&Float16_operator_subasg_Float16)->nameWithVarNames = "operator-=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_subasg_Float16)->returnTypeSymbol = &Float16Type;

    /// operator*= with Float16
    Float16_operator_mulasg_Float16_arg.name = "arg"_c;
    Float16_operator_mulasg_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_mulasg_Float16.name = "operator*="_c;
    Float16_operator_mulasg_Float16.backendIndex = 129;
    Float16_operator_mulasg_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_mulasg_Float16.parameters = Float16_operator_mulasg_Float16_args;
    Symbol::Resolved(&Float16_operator_mulasg_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_mulasg_Float16)->signature = "f16 operator*=(f16)"_c;
    Symbol::Resolved(&Float16_operator_mulasg_Float16)->name = "operator*=(f16)"_c;
    Symbol::Resolved(&Float16_operator_mulasg_Float16)->nameWithVarNames = "operator*=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_mulasg_Float16)->returnTypeSymbol = &Float16Type;

    /// operator/= with Float16
    Float16_operator_divasg_Float16_arg.name = "arg"_c;
    Float16_operator_divasg_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_divasg_Float16.name = "operator/="_c;
    Float16_operator_divasg_Float16.backendIndex = 130;
    Float16_operator_divasg_Float16.returnType = Type::FullType { Float16Type.name };
    Float16_operator_divasg_Float16.parameters = Float16_operator_divasg_Float16_args;
    Symbol::Resolved(&Float16_operator_divasg_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_divasg_Float16)->signature = "f16 operator/=(f16)"_c;
    Symbol::Resolved(&Float16_operator_divasg_Float16)->name = "operator/=(f16)"_c;
    Symbol::Resolved(&Float16_operator_divasg_Float16)->nameWithVarNames = "operator/=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_divasg_Float16)->returnTypeSymbol = &Float16Type;

    /// operator< with Float16
    Float16_operator_lt_Float16_arg.name = "arg"_c;
    Float16_operator_lt_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_lt_Float16.name = "operator<"_c;
    Float16_operator_lt_Float16.backendIndex = 131;
    Float16_operator_lt_Float16.returnType = Type::FullType { Bool8Type.name };
    Float16_operator_lt_Float16.parameters = Float16_operator_lt_Float16_args;
    Symbol::Resolved(&Float16_operator_lt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_lt_Float16)->signature = "b8 operator<(f16)"_c;
    Symbol::Resolved(&Float16_operator_lt_Float16)->name = "operator<(f16)"_c;
    Symbol::Resolved(&Float16_operator_lt_Float16)->nameWithVarNames = "operator<(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_lt_Float16)->returnTypeSymbol = &Bool8Type;

    /// operator<= with Float16
    Float16_operator_lte_Float16_arg.name = "arg"_c;
    Float16_operator_lte_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_lte_Float16.name = "operator<="_c;
    Float16_operator_lte_Float16.backendIndex = 132;
    Float16_operator_lte_Float16.returnType = Type::FullType { Bool8Type.name };
    Float16_operator_lte_Float16.parameters = Float16_operator_lte_Float16_args;
    Symbol::Resolved(&Float16_operator_lte_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_lte_Float16)->signature = "b8 operator<=(f16)"_c;
    Symbol::Resolved(&Float16_operator_lte_Float16)->name = "operator<=(f16)"_c;
    Symbol::Resolved(&Float16_operator_lte_Float16)->nameWithVarNames = "operator<=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_lte_Float16)->returnTypeSymbol = &Bool8Type;

    /// operator> with Float16
    Float16_operator_gt_Float16_arg.name = "arg"_c;
    Float16_operator_gt_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_gt_Float16.name = "operator>"_c;
    Float16_operator_gt_Float16.backendIndex = 133;
    Float16_operator_gt_Float16.returnType = Type::FullType { Bool8Type.name };
    Float16_operator_gt_Float16.parameters = Float16_operator_gt_Float16_args;
    Symbol::Resolved(&Float16_operator_gt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_gt_Float16)->signature = "b8 operator>(f16)"_c;
    Symbol::Resolved(&Float16_operator_gt_Float16)->name = "operator>(f16)"_c;
    Symbol::Resolved(&Float16_operator_gt_Float16)->nameWithVarNames = "operator>(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_gt_Float16)->returnTypeSymbol = &Bool8Type;

    /// operator>= with Float16
    Float16_operator_gte_Float16_arg.name = "arg"_c;
    Float16_operator_gte_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_gte_Float16.name = "operator>="_c;
    Float16_operator_gte_Float16.backendIndex = 134;
    Float16_operator_gte_Float16.returnType = Type::FullType { Bool8Type.name };
    Float16_operator_gte_Float16.parameters = Float16_operator_gte_Float16_args;
    Symbol::Resolved(&Float16_operator_gte_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_gte_Float16)->signature = "b8 operator>=(f16)"_c;
    Symbol::Resolved(&Float16_operator_gte_Float16)->name = "operator>=(f16)"_c;
    Symbol::Resolved(&Float16_operator_gte_Float16)->nameWithVarNames = "operator>=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_gte_Float16)->returnTypeSymbol = &Bool8Type;

    /// operator== with Float16
    Float16_operator_eq_Float16_arg.name = "arg"_c;
    Float16_operator_eq_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_eq_Float16.name = "operator=="_c;
    Float16_operator_eq_Float16.backendIndex = 135;
    Float16_operator_eq_Float16.returnType = Type::FullType { Bool8Type.name };
    Float16_operator_eq_Float16.parameters = Float16_operator_eq_Float16_args;
    Symbol::Resolved(&Float16_operator_eq_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_eq_Float16)->signature = "b8 operator==(f16)"_c;
    Symbol::Resolved(&Float16_operator_eq_Float16)->name = "operator==(f16)"_c;
    Symbol::Resolved(&Float16_operator_eq_Float16)->nameWithVarNames = "operator==(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_eq_Float16)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Float16
    Float16_operator_neq_Float16_arg.name = "arg"_c;
    Float16_operator_neq_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16_operator_neq_Float16.name = "operator!="_c;
    Float16_operator_neq_Float16.backendIndex = 136;
    Float16_operator_neq_Float16.returnType = Type::FullType { Bool8Type.name };
    Float16_operator_neq_Float16.parameters = Float16_operator_neq_Float16_args;
    Symbol::Resolved(&Float16_operator_neq_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_operator_neq_Float16)->signature = "b8 operator!=(f16)"_c;
    Symbol::Resolved(&Float16_operator_neq_Float16)->name = "operator!=(f16)"_c;
    Symbol::Resolved(&Float16_operator_neq_Float16)->nameWithVarNames = "operator!=(arg : f16)"_c;
    Symbol::Resolved(&Float16_operator_neq_Float16)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 38> { 
        std::pair{ "operator!="_c, &Float16_operator_neq_Float16 },
        std::pair{ "operator!=(f16)"_c, &Float16_operator_neq_Float16 },
        std::pair{ "operator%"_c, &Float16_operator_mod_Float16 },
        std::pair{ "operator%(f16)"_c, &Float16_operator_mod_Float16 },
        std::pair{ "operator*"_c, &Float16_operator_mul_Float16 },
        std::pair{ "operator*(f16)"_c, &Float16_operator_mul_Float16 },
        std::pair{ "operator*="_c, &Float16_operator_mulasg_Float16 },
        std::pair{ "operator*=(f16)"_c, &Float16_operator_mulasg_Float16 },
        std::pair{ "operator+"_c, &Float16_operator_add_Float16 },
        std::pair{ "operator+(f16)"_c, &Float16_operator_add_Float16 },
        std::pair{ "operator+="_c, &Float16_operator_addasg_Float16 },
        std::pair{ "operator+=(f16)"_c, &Float16_operator_addasg_Float16 },
        std::pair{ "operator-"_c, &Float16_operator_sub_Float16 },
        std::pair{ "operator-(f16)"_c, &Float16_operator_sub_Float16 },
        std::pair{ "operator-="_c, &Float16_operator_subasg_Float16 },
        std::pair{ "operator-=(f16)"_c, &Float16_operator_subasg_Float16 },
        std::pair{ "operator/"_c, &Float16_operator_div_Float16 },
        std::pair{ "operator/(f16)"_c, &Float16_operator_div_Float16 },
        std::pair{ "operator/="_c, &Float16_operator_divasg_Float16 },
        std::pair{ "operator/=(f16)"_c, &Float16_operator_divasg_Float16 },
        std::pair{ "operator<"_c, &Float16_operator_lt_Float16 },
        std::pair{ "operator<(f16)"_c, &Float16_operator_lt_Float16 },
        std::pair{ "operator<="_c, &Float16_operator_lte_Float16 },
        std::pair{ "operator<=(f16)"_c, &Float16_operator_lte_Float16 },
        std::pair{ "operator=="_c, &Float16_operator_eq_Float16 },
        std::pair{ "operator==(f16)"_c, &Float16_operator_eq_Float16 },
        std::pair{ "operator>"_c, &Float16_operator_gt_Float16 },
        std::pair{ "operator>(f16)"_c, &Float16_operator_gt_Float16 },
        std::pair{ "operator>="_c, &Float16_operator_gte_Float16 },
        std::pair{ "operator>=(f16)"_c, &Float16_operator_gte_Float16 },
        std::pair{ "operator[]"_c, &Float16_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16_operator_index_UInt32 }
    };
}
Float16 Float16Type;

/// operator[] with Int32
Variable UInt16_operator_index_Int32_arg;
Function UInt16_operator_index_Int32;
inline constexpr std::array UInt16_operator_index_Int32_args = { &UInt16_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt16_operator_index_UInt32_arg;
Function UInt16_operator_index_UInt32;
inline constexpr std::array UInt16_operator_index_UInt32_args = { &UInt16_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt16_operator_index_Int16_arg;
Function UInt16_operator_index_Int16;
inline constexpr std::array UInt16_operator_index_Int16_args = { &UInt16_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt16_operator_index_UInt16_arg;
Function UInt16_operator_index_UInt16;
inline constexpr std::array UInt16_operator_index_UInt16_args = { &UInt16_operator_index_UInt16_arg };

/// operator+ with UInt16
Variable UInt16_operator_add_UInt16_arg;
Function UInt16_operator_add_UInt16;
inline constexpr std::array UInt16_operator_add_UInt16_args = { &UInt16_operator_add_UInt16_arg };

/// operator- with UInt16
Variable UInt16_operator_sub_UInt16_arg;
Function UInt16_operator_sub_UInt16;
inline constexpr std::array UInt16_operator_sub_UInt16_args = { &UInt16_operator_sub_UInt16_arg };

/// operator* with UInt16
Variable UInt16_operator_mul_UInt16_arg;
Function UInt16_operator_mul_UInt16;
inline constexpr std::array UInt16_operator_mul_UInt16_args = { &UInt16_operator_mul_UInt16_arg };

/// operator/ with UInt16
Variable UInt16_operator_div_UInt16_arg;
Function UInt16_operator_div_UInt16;
inline constexpr std::array UInt16_operator_div_UInt16_args = { &UInt16_operator_div_UInt16_arg };

/// operator% with UInt16
Variable UInt16_operator_mod_UInt16_arg;
Function UInt16_operator_mod_UInt16;
inline constexpr std::array UInt16_operator_mod_UInt16_args = { &UInt16_operator_mod_UInt16_arg };

/// operator+= with UInt16
Variable UInt16_operator_addasg_UInt16_arg;
Function UInt16_operator_addasg_UInt16;
inline constexpr std::array UInt16_operator_addasg_UInt16_args = { &UInt16_operator_addasg_UInt16_arg };

/// operator-= with UInt16
Variable UInt16_operator_subasg_UInt16_arg;
Function UInt16_operator_subasg_UInt16;
inline constexpr std::array UInt16_operator_subasg_UInt16_args = { &UInt16_operator_subasg_UInt16_arg };

/// operator*= with UInt16
Variable UInt16_operator_mulasg_UInt16_arg;
Function UInt16_operator_mulasg_UInt16;
inline constexpr std::array UInt16_operator_mulasg_UInt16_args = { &UInt16_operator_mulasg_UInt16_arg };

/// operator/= with UInt16
Variable UInt16_operator_divasg_UInt16_arg;
Function UInt16_operator_divasg_UInt16;
inline constexpr std::array UInt16_operator_divasg_UInt16_args = { &UInt16_operator_divasg_UInt16_arg };

/// operator< with UInt16
Variable UInt16_operator_lt_UInt16_arg;
Function UInt16_operator_lt_UInt16;
inline constexpr std::array UInt16_operator_lt_UInt16_args = { &UInt16_operator_lt_UInt16_arg };

/// operator<= with UInt16
Variable UInt16_operator_lte_UInt16_arg;
Function UInt16_operator_lte_UInt16;
inline constexpr std::array UInt16_operator_lte_UInt16_args = { &UInt16_operator_lte_UInt16_arg };

/// operator> with UInt16
Variable UInt16_operator_gt_UInt16_arg;
Function UInt16_operator_gt_UInt16;
inline constexpr std::array UInt16_operator_gt_UInt16_args = { &UInt16_operator_gt_UInt16_arg };

/// operator>= with UInt16
Variable UInt16_operator_gte_UInt16_arg;
Function UInt16_operator_gte_UInt16;
inline constexpr std::array UInt16_operator_gte_UInt16_args = { &UInt16_operator_gte_UInt16_arg };

/// operator== with UInt16
Variable UInt16_operator_eq_UInt16_arg;
Function UInt16_operator_eq_UInt16;
inline constexpr std::array UInt16_operator_eq_UInt16_args = { &UInt16_operator_eq_UInt16_arg };

/// operator!= with UInt16
Variable UInt16_operator_neq_UInt16_arg;
Function UInt16_operator_neq_UInt16;
inline constexpr std::array UInt16_operator_neq_UInt16_args = { &UInt16_operator_neq_UInt16_arg };

/// operator| with UInt16
Variable UInt16_operator_or_UInt16_arg;
Function UInt16_operator_or_UInt16;
inline constexpr std::array UInt16_operator_or_UInt16_args = { &UInt16_operator_or_UInt16_arg };

/// operator& with UInt16
Variable UInt16_operator_and_UInt16_arg;
Function UInt16_operator_and_UInt16;
inline constexpr std::array UInt16_operator_and_UInt16_args = { &UInt16_operator_and_UInt16_arg };

/// operator^ with UInt16
Variable UInt16_operator_xor_UInt16_arg;
Function UInt16_operator_xor_UInt16;
inline constexpr std::array UInt16_operator_xor_UInt16_args = { &UInt16_operator_xor_UInt16_arg };

/// operator<< with UInt16
Variable UInt16_operator_lsh_UInt16_arg;
Function UInt16_operator_lsh_UInt16;
inline constexpr std::array UInt16_operator_lsh_UInt16_args = { &UInt16_operator_lsh_UInt16_arg };

/// operator>> with UInt16
Variable UInt16_operator_rsh_UInt16_arg;
Function UInt16_operator_rsh_UInt16;
inline constexpr std::array UInt16_operator_rsh_UInt16_args = { &UInt16_operator_rsh_UInt16_arg };

/// operator|= with UInt16
Variable UInt16_operator_orasg_UInt16_arg;
Function UInt16_operator_orasg_UInt16;
inline constexpr std::array UInt16_operator_orasg_UInt16_args = { &UInt16_operator_orasg_UInt16_arg };

/// operator&= with UInt16
Variable UInt16_operator_andasg_UInt16_arg;
Function UInt16_operator_andasg_UInt16;
inline constexpr std::array UInt16_operator_andasg_UInt16_args = { &UInt16_operator_andasg_UInt16_arg };

/// operator^= with UInt16
Variable UInt16_operator_xorasg_UInt16_arg;
Function UInt16_operator_xorasg_UInt16;
inline constexpr std::array UInt16_operator_xorasg_UInt16_args = { &UInt16_operator_xorasg_UInt16_arg };

/// operator<<= with UInt16
Variable UInt16_operator_lshasg_UInt16_arg;
Function UInt16_operator_lshasg_UInt16;
inline constexpr std::array UInt16_operator_lshasg_UInt16_args = { &UInt16_operator_lshasg_UInt16_arg };

/// operator>>= with UInt16
Variable UInt16_operator_rhsasg_UInt16_arg;
Function UInt16_operator_rhsasg_UInt16;
inline constexpr std::array UInt16_operator_rhsasg_UInt16_args = { &UInt16_operator_rhsasg_UInt16_arg };

UInt16::UInt16()
{
    this->name = "u16"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    /// operator[] with Int32
    UInt16_operator_index_Int32_arg.name = "arg"_c;
    UInt16_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16_operator_index_Int32.name = "operator[]"_c;
    UInt16_operator_index_Int32.backendIndex = 144;
    UInt16_operator_index_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_index_Int32.parameters = UInt16_operator_index_Int32_args;
    Symbol::Resolved(&UInt16_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16_operator_index_Int32)->signature = "u16 operator[](i32)"_c;
    Symbol::Resolved(&UInt16_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt16_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt16_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt32
    UInt16_operator_index_UInt32_arg.name = "arg"_c;
    UInt16_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16_operator_index_UInt32.name = "operator[]"_c;
    UInt16_operator_index_UInt32.backendIndex = 145;
    UInt16_operator_index_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_index_UInt32.parameters = UInt16_operator_index_UInt32_args;
    Symbol::Resolved(&UInt16_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16_operator_index_UInt32)->signature = "u16 operator[](u32)"_c;
    Symbol::Resolved(&UInt16_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt16_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt16_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int16
    UInt16_operator_index_Int16_arg.name = "arg"_c;
    UInt16_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16_operator_index_Int16.name = "operator[]"_c;
    UInt16_operator_index_Int16.backendIndex = 146;
    UInt16_operator_index_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_index_Int16.parameters = UInt16_operator_index_Int16_args;
    Symbol::Resolved(&UInt16_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16_operator_index_Int16)->signature = "u16 operator[](i16)"_c;
    Symbol::Resolved(&UInt16_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt16_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt16_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt16
    UInt16_operator_index_UInt16_arg.name = "arg"_c;
    UInt16_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_index_UInt16.name = "operator[]"_c;
    UInt16_operator_index_UInt16.backendIndex = 147;
    UInt16_operator_index_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_index_UInt16.parameters = UInt16_operator_index_UInt16_args;
    Symbol::Resolved(&UInt16_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_index_UInt16)->signature = "u16 operator[](u16)"_c;
    Symbol::Resolved(&UInt16_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt16_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+ with UInt16
    UInt16_operator_add_UInt16_arg.name = "arg"_c;
    UInt16_operator_add_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_add_UInt16.name = "operator+"_c;
    UInt16_operator_add_UInt16.backendIndex = 148;
    UInt16_operator_add_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_add_UInt16.parameters = UInt16_operator_add_UInt16_args;
    Symbol::Resolved(&UInt16_operator_add_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_add_UInt16)->signature = "u16 operator+(u16)"_c;
    Symbol::Resolved(&UInt16_operator_add_UInt16)->name = "operator+(u16)"_c;
    Symbol::Resolved(&UInt16_operator_add_UInt16)->nameWithVarNames = "operator+(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_add_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator- with UInt16
    UInt16_operator_sub_UInt16_arg.name = "arg"_c;
    UInt16_operator_sub_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_sub_UInt16.name = "operator-"_c;
    UInt16_operator_sub_UInt16.backendIndex = 149;
    UInt16_operator_sub_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_sub_UInt16.parameters = UInt16_operator_sub_UInt16_args;
    Symbol::Resolved(&UInt16_operator_sub_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_sub_UInt16)->signature = "u16 operator-(u16)"_c;
    Symbol::Resolved(&UInt16_operator_sub_UInt16)->name = "operator-(u16)"_c;
    Symbol::Resolved(&UInt16_operator_sub_UInt16)->nameWithVarNames = "operator-(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_sub_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator* with UInt16
    UInt16_operator_mul_UInt16_arg.name = "arg"_c;
    UInt16_operator_mul_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_mul_UInt16.name = "operator*"_c;
    UInt16_operator_mul_UInt16.backendIndex = 150;
    UInt16_operator_mul_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_mul_UInt16.parameters = UInt16_operator_mul_UInt16_args;
    Symbol::Resolved(&UInt16_operator_mul_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_mul_UInt16)->signature = "u16 operator*(u16)"_c;
    Symbol::Resolved(&UInt16_operator_mul_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&UInt16_operator_mul_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_mul_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator/ with UInt16
    UInt16_operator_div_UInt16_arg.name = "arg"_c;
    UInt16_operator_div_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_div_UInt16.name = "operator/"_c;
    UInt16_operator_div_UInt16.backendIndex = 151;
    UInt16_operator_div_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_div_UInt16.parameters = UInt16_operator_div_UInt16_args;
    Symbol::Resolved(&UInt16_operator_div_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_div_UInt16)->signature = "u16 operator/(u16)"_c;
    Symbol::Resolved(&UInt16_operator_div_UInt16)->name = "operator/(u16)"_c;
    Symbol::Resolved(&UInt16_operator_div_UInt16)->nameWithVarNames = "operator/(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_div_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator% with UInt16
    UInt16_operator_mod_UInt16_arg.name = "arg"_c;
    UInt16_operator_mod_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_mod_UInt16.name = "operator%"_c;
    UInt16_operator_mod_UInt16.backendIndex = 152;
    UInt16_operator_mod_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_mod_UInt16.parameters = UInt16_operator_mod_UInt16_args;
    Symbol::Resolved(&UInt16_operator_mod_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_mod_UInt16)->signature = "u16 operator%(u16)"_c;
    Symbol::Resolved(&UInt16_operator_mod_UInt16)->name = "operator%(u16)"_c;
    Symbol::Resolved(&UInt16_operator_mod_UInt16)->nameWithVarNames = "operator%(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_mod_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+= with UInt16
    UInt16_operator_addasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_addasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_addasg_UInt16.name = "operator+="_c;
    UInt16_operator_addasg_UInt16.backendIndex = 153;
    UInt16_operator_addasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_addasg_UInt16.parameters = UInt16_operator_addasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_addasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_addasg_UInt16)->signature = "u16 operator+=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_addasg_UInt16)->name = "operator+=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_addasg_UInt16)->nameWithVarNames = "operator+=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_addasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator-= with UInt16
    UInt16_operator_subasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_subasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_subasg_UInt16.name = "operator-="_c;
    UInt16_operator_subasg_UInt16.backendIndex = 154;
    UInt16_operator_subasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_subasg_UInt16.parameters = UInt16_operator_subasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_subasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_subasg_UInt16)->signature = "u16 operator-=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_subasg_UInt16)->name = "operator-=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_subasg_UInt16)->nameWithVarNames = "operator-=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_subasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator*= with UInt16
    UInt16_operator_mulasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_mulasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_mulasg_UInt16.name = "operator*="_c;
    UInt16_operator_mulasg_UInt16.backendIndex = 155;
    UInt16_operator_mulasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_mulasg_UInt16.parameters = UInt16_operator_mulasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16)->signature = "u16 operator*=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16)->name = "operator*=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16)->nameWithVarNames = "operator*=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_mulasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator/= with UInt16
    UInt16_operator_divasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_divasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_divasg_UInt16.name = "operator/="_c;
    UInt16_operator_divasg_UInt16.backendIndex = 156;
    UInt16_operator_divasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_divasg_UInt16.parameters = UInt16_operator_divasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_divasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_divasg_UInt16)->signature = "u16 operator/=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_divasg_UInt16)->name = "operator/=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_divasg_UInt16)->nameWithVarNames = "operator/=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_divasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator< with UInt16
    UInt16_operator_lt_UInt16_arg.name = "arg"_c;
    UInt16_operator_lt_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_lt_UInt16.name = "operator<"_c;
    UInt16_operator_lt_UInt16.backendIndex = 157;
    UInt16_operator_lt_UInt16.returnType = Type::FullType { Bool8Type.name };
    UInt16_operator_lt_UInt16.parameters = UInt16_operator_lt_UInt16_args;
    Symbol::Resolved(&UInt16_operator_lt_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_lt_UInt16)->signature = "b8 operator<(u16)"_c;
    Symbol::Resolved(&UInt16_operator_lt_UInt16)->name = "operator<(u16)"_c;
    Symbol::Resolved(&UInt16_operator_lt_UInt16)->nameWithVarNames = "operator<(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_lt_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator<= with UInt16
    UInt16_operator_lte_UInt16_arg.name = "arg"_c;
    UInt16_operator_lte_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_lte_UInt16.name = "operator<="_c;
    UInt16_operator_lte_UInt16.backendIndex = 158;
    UInt16_operator_lte_UInt16.returnType = Type::FullType { Bool8Type.name };
    UInt16_operator_lte_UInt16.parameters = UInt16_operator_lte_UInt16_args;
    Symbol::Resolved(&UInt16_operator_lte_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_lte_UInt16)->signature = "b8 operator<=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_lte_UInt16)->name = "operator<=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_lte_UInt16)->nameWithVarNames = "operator<=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_lte_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator> with UInt16
    UInt16_operator_gt_UInt16_arg.name = "arg"_c;
    UInt16_operator_gt_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_gt_UInt16.name = "operator>"_c;
    UInt16_operator_gt_UInt16.backendIndex = 159;
    UInt16_operator_gt_UInt16.returnType = Type::FullType { Bool8Type.name };
    UInt16_operator_gt_UInt16.parameters = UInt16_operator_gt_UInt16_args;
    Symbol::Resolved(&UInt16_operator_gt_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_gt_UInt16)->signature = "b8 operator>(u16)"_c;
    Symbol::Resolved(&UInt16_operator_gt_UInt16)->name = "operator>(u16)"_c;
    Symbol::Resolved(&UInt16_operator_gt_UInt16)->nameWithVarNames = "operator>(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_gt_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator>= with UInt16
    UInt16_operator_gte_UInt16_arg.name = "arg"_c;
    UInt16_operator_gte_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_gte_UInt16.name = "operator>="_c;
    UInt16_operator_gte_UInt16.backendIndex = 160;
    UInt16_operator_gte_UInt16.returnType = Type::FullType { Bool8Type.name };
    UInt16_operator_gte_UInt16.parameters = UInt16_operator_gte_UInt16_args;
    Symbol::Resolved(&UInt16_operator_gte_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_gte_UInt16)->signature = "b8 operator>=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_gte_UInt16)->name = "operator>=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_gte_UInt16)->nameWithVarNames = "operator>=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_gte_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator== with UInt16
    UInt16_operator_eq_UInt16_arg.name = "arg"_c;
    UInt16_operator_eq_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_eq_UInt16.name = "operator=="_c;
    UInt16_operator_eq_UInt16.backendIndex = 161;
    UInt16_operator_eq_UInt16.returnType = Type::FullType { Bool8Type.name };
    UInt16_operator_eq_UInt16.parameters = UInt16_operator_eq_UInt16_args;
    Symbol::Resolved(&UInt16_operator_eq_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_eq_UInt16)->signature = "b8 operator==(u16)"_c;
    Symbol::Resolved(&UInt16_operator_eq_UInt16)->name = "operator==(u16)"_c;
    Symbol::Resolved(&UInt16_operator_eq_UInt16)->nameWithVarNames = "operator==(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_eq_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator!= with UInt16
    UInt16_operator_neq_UInt16_arg.name = "arg"_c;
    UInt16_operator_neq_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_neq_UInt16.name = "operator!="_c;
    UInt16_operator_neq_UInt16.backendIndex = 162;
    UInt16_operator_neq_UInt16.returnType = Type::FullType { Bool8Type.name };
    UInt16_operator_neq_UInt16.parameters = UInt16_operator_neq_UInt16_args;
    Symbol::Resolved(&UInt16_operator_neq_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_neq_UInt16)->signature = "b8 operator!=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_neq_UInt16)->name = "operator!=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_neq_UInt16)->nameWithVarNames = "operator!=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_neq_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator| with UInt16
    UInt16_operator_or_UInt16_arg.name = "arg"_c;
    UInt16_operator_or_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_or_UInt16.name = "operator|"_c;
    UInt16_operator_or_UInt16.backendIndex = 163;
    UInt16_operator_or_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_or_UInt16.parameters = UInt16_operator_or_UInt16_args;
    Symbol::Resolved(&UInt16_operator_or_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_or_UInt16)->signature = "u16 operator|(u16)"_c;
    Symbol::Resolved(&UInt16_operator_or_UInt16)->name = "operator|(u16)"_c;
    Symbol::Resolved(&UInt16_operator_or_UInt16)->nameWithVarNames = "operator|(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_or_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator& with UInt16
    UInt16_operator_and_UInt16_arg.name = "arg"_c;
    UInt16_operator_and_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_and_UInt16.name = "operator&"_c;
    UInt16_operator_and_UInt16.backendIndex = 164;
    UInt16_operator_and_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_and_UInt16.parameters = UInt16_operator_and_UInt16_args;
    Symbol::Resolved(&UInt16_operator_and_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_and_UInt16)->signature = "u16 operator&(u16)"_c;
    Symbol::Resolved(&UInt16_operator_and_UInt16)->name = "operator&(u16)"_c;
    Symbol::Resolved(&UInt16_operator_and_UInt16)->nameWithVarNames = "operator&(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_and_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator^ with UInt16
    UInt16_operator_xor_UInt16_arg.name = "arg"_c;
    UInt16_operator_xor_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_xor_UInt16.name = "operator^"_c;
    UInt16_operator_xor_UInt16.backendIndex = 165;
    UInt16_operator_xor_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_xor_UInt16.parameters = UInt16_operator_xor_UInt16_args;
    Symbol::Resolved(&UInt16_operator_xor_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_xor_UInt16)->signature = "u16 operator^(u16)"_c;
    Symbol::Resolved(&UInt16_operator_xor_UInt16)->name = "operator^(u16)"_c;
    Symbol::Resolved(&UInt16_operator_xor_UInt16)->nameWithVarNames = "operator^(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_xor_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator<< with UInt16
    UInt16_operator_lsh_UInt16_arg.name = "arg"_c;
    UInt16_operator_lsh_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_lsh_UInt16.name = "operator<<"_c;
    UInt16_operator_lsh_UInt16.backendIndex = 166;
    UInt16_operator_lsh_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_lsh_UInt16.parameters = UInt16_operator_lsh_UInt16_args;
    Symbol::Resolved(&UInt16_operator_lsh_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_lsh_UInt16)->signature = "u16 operator<<(u16)"_c;
    Symbol::Resolved(&UInt16_operator_lsh_UInt16)->name = "operator<<(u16)"_c;
    Symbol::Resolved(&UInt16_operator_lsh_UInt16)->nameWithVarNames = "operator<<(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_lsh_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator>> with UInt16
    UInt16_operator_rsh_UInt16_arg.name = "arg"_c;
    UInt16_operator_rsh_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_rsh_UInt16.name = "operator>>"_c;
    UInt16_operator_rsh_UInt16.backendIndex = 167;
    UInt16_operator_rsh_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_rsh_UInt16.parameters = UInt16_operator_rsh_UInt16_args;
    Symbol::Resolved(&UInt16_operator_rsh_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_rsh_UInt16)->signature = "u16 operator>>(u16)"_c;
    Symbol::Resolved(&UInt16_operator_rsh_UInt16)->name = "operator>>(u16)"_c;
    Symbol::Resolved(&UInt16_operator_rsh_UInt16)->nameWithVarNames = "operator>>(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_rsh_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator|= with UInt16
    UInt16_operator_orasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_orasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_orasg_UInt16.name = "operator|="_c;
    UInt16_operator_orasg_UInt16.backendIndex = 168;
    UInt16_operator_orasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_orasg_UInt16.parameters = UInt16_operator_orasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_orasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_orasg_UInt16)->signature = "u16 operator|=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_orasg_UInt16)->name = "operator|=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_orasg_UInt16)->nameWithVarNames = "operator|=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_orasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator&= with UInt16
    UInt16_operator_andasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_andasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_andasg_UInt16.name = "operator&="_c;
    UInt16_operator_andasg_UInt16.backendIndex = 169;
    UInt16_operator_andasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_andasg_UInt16.parameters = UInt16_operator_andasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_andasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_andasg_UInt16)->signature = "u16 operator&=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_andasg_UInt16)->name = "operator&=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_andasg_UInt16)->nameWithVarNames = "operator&=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_andasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator^= with UInt16
    UInt16_operator_xorasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_xorasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_xorasg_UInt16.name = "operator^="_c;
    UInt16_operator_xorasg_UInt16.backendIndex = 170;
    UInt16_operator_xorasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_xorasg_UInt16.parameters = UInt16_operator_xorasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16)->signature = "u16 operator^=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16)->name = "operator^=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16)->nameWithVarNames = "operator^=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_xorasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator<<= with UInt16
    UInt16_operator_lshasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_lshasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_lshasg_UInt16.name = "operator<<="_c;
    UInt16_operator_lshasg_UInt16.backendIndex = 171;
    UInt16_operator_lshasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_lshasg_UInt16.parameters = UInt16_operator_lshasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16)->signature = "u16 operator<<=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16)->name = "operator<<=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16)->nameWithVarNames = "operator<<=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_lshasg_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator>>= with UInt16
    UInt16_operator_rhsasg_UInt16_arg.name = "arg"_c;
    UInt16_operator_rhsasg_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16_operator_rhsasg_UInt16.name = "operator>>="_c;
    UInt16_operator_rhsasg_UInt16.backendIndex = 172;
    UInt16_operator_rhsasg_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16_operator_rhsasg_UInt16.parameters = UInt16_operator_rhsasg_UInt16_args;
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16)->signature = "u16 operator>>=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16)->name = "operator>>=(u16)"_c;
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16)->nameWithVarNames = "operator>>=(arg : u16)"_c;
    Symbol::Resolved(&UInt16_operator_rhsasg_UInt16)->returnTypeSymbol = &UInt16Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 58> { 
        std::pair{ "operator!="_c, &UInt16_operator_neq_UInt16 },
        std::pair{ "operator!=(u16)"_c, &UInt16_operator_neq_UInt16 },
        std::pair{ "operator%"_c, &UInt16_operator_mod_UInt16 },
        std::pair{ "operator%(u16)"_c, &UInt16_operator_mod_UInt16 },
        std::pair{ "operator&"_c, &UInt16_operator_and_UInt16 },
        std::pair{ "operator&(u16)"_c, &UInt16_operator_and_UInt16 },
        std::pair{ "operator&="_c, &UInt16_operator_andasg_UInt16 },
        std::pair{ "operator&=(u16)"_c, &UInt16_operator_andasg_UInt16 },
        std::pair{ "operator*"_c, &UInt16_operator_mul_UInt16 },
        std::pair{ "operator*(u16)"_c, &UInt16_operator_mul_UInt16 },
        std::pair{ "operator*="_c, &UInt16_operator_mulasg_UInt16 },
        std::pair{ "operator*=(u16)"_c, &UInt16_operator_mulasg_UInt16 },
        std::pair{ "operator+"_c, &UInt16_operator_add_UInt16 },
        std::pair{ "operator+(u16)"_c, &UInt16_operator_add_UInt16 },
        std::pair{ "operator+="_c, &UInt16_operator_addasg_UInt16 },
        std::pair{ "operator+=(u16)"_c, &UInt16_operator_addasg_UInt16 },
        std::pair{ "operator-"_c, &UInt16_operator_sub_UInt16 },
        std::pair{ "operator-(u16)"_c, &UInt16_operator_sub_UInt16 },
        std::pair{ "operator-="_c, &UInt16_operator_subasg_UInt16 },
        std::pair{ "operator-=(u16)"_c, &UInt16_operator_subasg_UInt16 },
        std::pair{ "operator/"_c, &UInt16_operator_div_UInt16 },
        std::pair{ "operator/(u16)"_c, &UInt16_operator_div_UInt16 },
        std::pair{ "operator/="_c, &UInt16_operator_divasg_UInt16 },
        std::pair{ "operator/=(u16)"_c, &UInt16_operator_divasg_UInt16 },
        std::pair{ "operator<"_c, &UInt16_operator_lt_UInt16 },
        std::pair{ "operator<(u16)"_c, &UInt16_operator_lt_UInt16 },
        std::pair{ "operator<<"_c, &UInt16_operator_lsh_UInt16 },
        std::pair{ "operator<<(u16)"_c, &UInt16_operator_lsh_UInt16 },
        std::pair{ "operator<<="_c, &UInt16_operator_lshasg_UInt16 },
        std::pair{ "operator<<=(u16)"_c, &UInt16_operator_lshasg_UInt16 },
        std::pair{ "operator<="_c, &UInt16_operator_lte_UInt16 },
        std::pair{ "operator<=(u16)"_c, &UInt16_operator_lte_UInt16 },
        std::pair{ "operator=="_c, &UInt16_operator_eq_UInt16 },
        std::pair{ "operator==(u16)"_c, &UInt16_operator_eq_UInt16 },
        std::pair{ "operator>"_c, &UInt16_operator_gt_UInt16 },
        std::pair{ "operator>(u16)"_c, &UInt16_operator_gt_UInt16 },
        std::pair{ "operator>="_c, &UInt16_operator_gte_UInt16 },
        std::pair{ "operator>=(u16)"_c, &UInt16_operator_gte_UInt16 },
        std::pair{ "operator>>"_c, &UInt16_operator_rsh_UInt16 },
        std::pair{ "operator>>(u16)"_c, &UInt16_operator_rsh_UInt16 },
        std::pair{ "operator>>="_c, &UInt16_operator_rhsasg_UInt16 },
        std::pair{ "operator>>=(u16)"_c, &UInt16_operator_rhsasg_UInt16 },
        std::pair{ "operator[]"_c, &UInt16_operator_index_Int32 },
        std::pair{ "operator[]"_c, &UInt16_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &UInt16_operator_index_Int16 },
        std::pair{ "operator[]"_c, &UInt16_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &UInt16_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &UInt16_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &UInt16_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &UInt16_operator_index_UInt32 },
        std::pair{ "operator^"_c, &UInt16_operator_xor_UInt16 },
        std::pair{ "operator^(u16)"_c, &UInt16_operator_xor_UInt16 },
        std::pair{ "operator^="_c, &UInt16_operator_xorasg_UInt16 },
        std::pair{ "operator^=(u16)"_c, &UInt16_operator_xorasg_UInt16 },
        std::pair{ "operator|"_c, &UInt16_operator_or_UInt16 },
        std::pair{ "operator|(u16)"_c, &UInt16_operator_or_UInt16 },
        std::pair{ "operator|="_c, &UInt16_operator_orasg_UInt16 },
        std::pair{ "operator|=(u16)"_c, &UInt16_operator_orasg_UInt16 }
    };
}
UInt16 UInt16Type;

/// operator[] with Int32
Variable Int16_operator_index_Int32_arg;
Function Int16_operator_index_Int32;
inline constexpr std::array Int16_operator_index_Int32_args = { &Int16_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int16_operator_index_UInt32_arg;
Function Int16_operator_index_UInt32;
inline constexpr std::array Int16_operator_index_UInt32_args = { &Int16_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int16_operator_index_Int16_arg;
Function Int16_operator_index_Int16;
inline constexpr std::array Int16_operator_index_Int16_args = { &Int16_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int16_operator_index_UInt16_arg;
Function Int16_operator_index_UInt16;
inline constexpr std::array Int16_operator_index_UInt16_args = { &Int16_operator_index_UInt16_arg };

/// operator+ with Int16
Variable Int16_operator_add_Int16_arg;
Function Int16_operator_add_Int16;
inline constexpr std::array Int16_operator_add_Int16_args = { &Int16_operator_add_Int16_arg };

/// operator- with Int16
Variable Int16_operator_sub_Int16_arg;
Function Int16_operator_sub_Int16;
inline constexpr std::array Int16_operator_sub_Int16_args = { &Int16_operator_sub_Int16_arg };

/// operator* with Int16
Variable Int16_operator_mul_Int16_arg;
Function Int16_operator_mul_Int16;
inline constexpr std::array Int16_operator_mul_Int16_args = { &Int16_operator_mul_Int16_arg };

/// operator/ with Int16
Variable Int16_operator_div_Int16_arg;
Function Int16_operator_div_Int16;
inline constexpr std::array Int16_operator_div_Int16_args = { &Int16_operator_div_Int16_arg };

/// operator% with Int16
Variable Int16_operator_mod_Int16_arg;
Function Int16_operator_mod_Int16;
inline constexpr std::array Int16_operator_mod_Int16_args = { &Int16_operator_mod_Int16_arg };

/// operator+= with Int16
Variable Int16_operator_addasg_Int16_arg;
Function Int16_operator_addasg_Int16;
inline constexpr std::array Int16_operator_addasg_Int16_args = { &Int16_operator_addasg_Int16_arg };

/// operator-= with Int16
Variable Int16_operator_subasg_Int16_arg;
Function Int16_operator_subasg_Int16;
inline constexpr std::array Int16_operator_subasg_Int16_args = { &Int16_operator_subasg_Int16_arg };

/// operator*= with Int16
Variable Int16_operator_mulasg_Int16_arg;
Function Int16_operator_mulasg_Int16;
inline constexpr std::array Int16_operator_mulasg_Int16_args = { &Int16_operator_mulasg_Int16_arg };

/// operator/= with Int16
Variable Int16_operator_divasg_Int16_arg;
Function Int16_operator_divasg_Int16;
inline constexpr std::array Int16_operator_divasg_Int16_args = { &Int16_operator_divasg_Int16_arg };

/// operator< with Int16
Variable Int16_operator_lt_Int16_arg;
Function Int16_operator_lt_Int16;
inline constexpr std::array Int16_operator_lt_Int16_args = { &Int16_operator_lt_Int16_arg };

/// operator<= with Int16
Variable Int16_operator_lte_Int16_arg;
Function Int16_operator_lte_Int16;
inline constexpr std::array Int16_operator_lte_Int16_args = { &Int16_operator_lte_Int16_arg };

/// operator> with Int16
Variable Int16_operator_gt_Int16_arg;
Function Int16_operator_gt_Int16;
inline constexpr std::array Int16_operator_gt_Int16_args = { &Int16_operator_gt_Int16_arg };

/// operator>= with Int16
Variable Int16_operator_gte_Int16_arg;
Function Int16_operator_gte_Int16;
inline constexpr std::array Int16_operator_gte_Int16_args = { &Int16_operator_gte_Int16_arg };

/// operator== with Int16
Variable Int16_operator_eq_Int16_arg;
Function Int16_operator_eq_Int16;
inline constexpr std::array Int16_operator_eq_Int16_args = { &Int16_operator_eq_Int16_arg };

/// operator!= with Int16
Variable Int16_operator_neq_Int16_arg;
Function Int16_operator_neq_Int16;
inline constexpr std::array Int16_operator_neq_Int16_args = { &Int16_operator_neq_Int16_arg };

/// operator| with Int16
Variable Int16_operator_or_Int16_arg;
Function Int16_operator_or_Int16;
inline constexpr std::array Int16_operator_or_Int16_args = { &Int16_operator_or_Int16_arg };

/// operator& with Int16
Variable Int16_operator_and_Int16_arg;
Function Int16_operator_and_Int16;
inline constexpr std::array Int16_operator_and_Int16_args = { &Int16_operator_and_Int16_arg };

/// operator^ with Int16
Variable Int16_operator_xor_Int16_arg;
Function Int16_operator_xor_Int16;
inline constexpr std::array Int16_operator_xor_Int16_args = { &Int16_operator_xor_Int16_arg };

/// operator<< with Int16
Variable Int16_operator_lsh_Int16_arg;
Function Int16_operator_lsh_Int16;
inline constexpr std::array Int16_operator_lsh_Int16_args = { &Int16_operator_lsh_Int16_arg };

/// operator>> with Int16
Variable Int16_operator_rsh_Int16_arg;
Function Int16_operator_rsh_Int16;
inline constexpr std::array Int16_operator_rsh_Int16_args = { &Int16_operator_rsh_Int16_arg };

/// operator|= with Int16
Variable Int16_operator_orasg_Int16_arg;
Function Int16_operator_orasg_Int16;
inline constexpr std::array Int16_operator_orasg_Int16_args = { &Int16_operator_orasg_Int16_arg };

/// operator&= with Int16
Variable Int16_operator_andasg_Int16_arg;
Function Int16_operator_andasg_Int16;
inline constexpr std::array Int16_operator_andasg_Int16_args = { &Int16_operator_andasg_Int16_arg };

/// operator^= with Int16
Variable Int16_operator_xorasg_Int16_arg;
Function Int16_operator_xorasg_Int16;
inline constexpr std::array Int16_operator_xorasg_Int16_args = { &Int16_operator_xorasg_Int16_arg };

/// operator<<= with Int16
Variable Int16_operator_lshasg_Int16_arg;
Function Int16_operator_lshasg_Int16;
inline constexpr std::array Int16_operator_lshasg_Int16_args = { &Int16_operator_lshasg_Int16_arg };

/// operator>>= with Int16
Variable Int16_operator_rhsasg_Int16_arg;
Function Int16_operator_rhsasg_Int16;
inline constexpr std::array Int16_operator_rhsasg_Int16_args = { &Int16_operator_rhsasg_Int16_arg };

Int16::Int16()
{
    this->name = "i16"_c;
    this->columnSize = 1;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    /// operator[] with Int32
    Int16_operator_index_Int32_arg.name = "arg"_c;
    Int16_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16_operator_index_Int32.name = "operator[]"_c;
    Int16_operator_index_Int32.backendIndex = 180;
    Int16_operator_index_Int32.returnType = Type::FullType { Int16Type.name };
    Int16_operator_index_Int32.parameters = Int16_operator_index_Int32_args;
    Symbol::Resolved(&Int16_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16_operator_index_Int32)->signature = "i16 operator[](i32)"_c;
    Symbol::Resolved(&Int16_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int16_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int16_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt32
    Int16_operator_index_UInt32_arg.name = "arg"_c;
    Int16_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16_operator_index_UInt32.name = "operator[]"_c;
    Int16_operator_index_UInt32.backendIndex = 181;
    Int16_operator_index_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16_operator_index_UInt32.parameters = Int16_operator_index_UInt32_args;
    Symbol::Resolved(&Int16_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16_operator_index_UInt32)->signature = "i16 operator[](u32)"_c;
    Symbol::Resolved(&Int16_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int16_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int16_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int16
    Int16_operator_index_Int16_arg.name = "arg"_c;
    Int16_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_index_Int16.name = "operator[]"_c;
    Int16_operator_index_Int16.backendIndex = 182;
    Int16_operator_index_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_index_Int16.parameters = Int16_operator_index_Int16_args;
    Symbol::Resolved(&Int16_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_index_Int16)->signature = "i16 operator[](i16)"_c;
    Symbol::Resolved(&Int16_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int16_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt16
    Int16_operator_index_UInt16_arg.name = "arg"_c;
    Int16_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16_operator_index_UInt16.name = "operator[]"_c;
    Int16_operator_index_UInt16.backendIndex = 183;
    Int16_operator_index_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_index_UInt16.parameters = Int16_operator_index_UInt16_args;
    Symbol::Resolved(&Int16_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16_operator_index_UInt16)->signature = "i16 operator[](u16)"_c;
    Symbol::Resolved(&Int16_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int16_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int16_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    /// operator+ with Int16
    Int16_operator_add_Int16_arg.name = "arg"_c;
    Int16_operator_add_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_add_Int16.name = "operator+"_c;
    Int16_operator_add_Int16.backendIndex = 184;
    Int16_operator_add_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_add_Int16.parameters = Int16_operator_add_Int16_args;
    Symbol::Resolved(&Int16_operator_add_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_add_Int16)->signature = "i16 operator+(i16)"_c;
    Symbol::Resolved(&Int16_operator_add_Int16)->name = "operator+(i16)"_c;
    Symbol::Resolved(&Int16_operator_add_Int16)->nameWithVarNames = "operator+(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_add_Int16)->returnTypeSymbol = &Int16Type;

    /// operator- with Int16
    Int16_operator_sub_Int16_arg.name = "arg"_c;
    Int16_operator_sub_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_sub_Int16.name = "operator-"_c;
    Int16_operator_sub_Int16.backendIndex = 185;
    Int16_operator_sub_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_sub_Int16.parameters = Int16_operator_sub_Int16_args;
    Symbol::Resolved(&Int16_operator_sub_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_sub_Int16)->signature = "i16 operator-(i16)"_c;
    Symbol::Resolved(&Int16_operator_sub_Int16)->name = "operator-(i16)"_c;
    Symbol::Resolved(&Int16_operator_sub_Int16)->nameWithVarNames = "operator-(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_sub_Int16)->returnTypeSymbol = &Int16Type;

    /// operator* with Int16
    Int16_operator_mul_Int16_arg.name = "arg"_c;
    Int16_operator_mul_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_mul_Int16.name = "operator*"_c;
    Int16_operator_mul_Int16.backendIndex = 186;
    Int16_operator_mul_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_mul_Int16.parameters = Int16_operator_mul_Int16_args;
    Symbol::Resolved(&Int16_operator_mul_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_mul_Int16)->signature = "i16 operator*(i16)"_c;
    Symbol::Resolved(&Int16_operator_mul_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Int16_operator_mul_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_mul_Int16)->returnTypeSymbol = &Int16Type;

    /// operator/ with Int16
    Int16_operator_div_Int16_arg.name = "arg"_c;
    Int16_operator_div_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_div_Int16.name = "operator/"_c;
    Int16_operator_div_Int16.backendIndex = 187;
    Int16_operator_div_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_div_Int16.parameters = Int16_operator_div_Int16_args;
    Symbol::Resolved(&Int16_operator_div_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_div_Int16)->signature = "i16 operator/(i16)"_c;
    Symbol::Resolved(&Int16_operator_div_Int16)->name = "operator/(i16)"_c;
    Symbol::Resolved(&Int16_operator_div_Int16)->nameWithVarNames = "operator/(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_div_Int16)->returnTypeSymbol = &Int16Type;

    /// operator% with Int16
    Int16_operator_mod_Int16_arg.name = "arg"_c;
    Int16_operator_mod_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_mod_Int16.name = "operator%"_c;
    Int16_operator_mod_Int16.backendIndex = 188;
    Int16_operator_mod_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_mod_Int16.parameters = Int16_operator_mod_Int16_args;
    Symbol::Resolved(&Int16_operator_mod_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_mod_Int16)->signature = "i16 operator%(i16)"_c;
    Symbol::Resolved(&Int16_operator_mod_Int16)->name = "operator%(i16)"_c;
    Symbol::Resolved(&Int16_operator_mod_Int16)->nameWithVarNames = "operator%(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_mod_Int16)->returnTypeSymbol = &Int16Type;

    /// operator+= with Int16
    Int16_operator_addasg_Int16_arg.name = "arg"_c;
    Int16_operator_addasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_addasg_Int16.name = "operator+="_c;
    Int16_operator_addasg_Int16.backendIndex = 189;
    Int16_operator_addasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_addasg_Int16.parameters = Int16_operator_addasg_Int16_args;
    Symbol::Resolved(&Int16_operator_addasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_addasg_Int16)->signature = "i16 operator+=(i16)"_c;
    Symbol::Resolved(&Int16_operator_addasg_Int16)->name = "operator+=(i16)"_c;
    Symbol::Resolved(&Int16_operator_addasg_Int16)->nameWithVarNames = "operator+=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_addasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator-= with Int16
    Int16_operator_subasg_Int16_arg.name = "arg"_c;
    Int16_operator_subasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_subasg_Int16.name = "operator-="_c;
    Int16_operator_subasg_Int16.backendIndex = 190;
    Int16_operator_subasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_subasg_Int16.parameters = Int16_operator_subasg_Int16_args;
    Symbol::Resolved(&Int16_operator_subasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_subasg_Int16)->signature = "i16 operator-=(i16)"_c;
    Symbol::Resolved(&Int16_operator_subasg_Int16)->name = "operator-=(i16)"_c;
    Symbol::Resolved(&Int16_operator_subasg_Int16)->nameWithVarNames = "operator-=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_subasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator*= with Int16
    Int16_operator_mulasg_Int16_arg.name = "arg"_c;
    Int16_operator_mulasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_mulasg_Int16.name = "operator*="_c;
    Int16_operator_mulasg_Int16.backendIndex = 191;
    Int16_operator_mulasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_mulasg_Int16.parameters = Int16_operator_mulasg_Int16_args;
    Symbol::Resolved(&Int16_operator_mulasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_mulasg_Int16)->signature = "i16 operator*=(i16)"_c;
    Symbol::Resolved(&Int16_operator_mulasg_Int16)->name = "operator*=(i16)"_c;
    Symbol::Resolved(&Int16_operator_mulasg_Int16)->nameWithVarNames = "operator*=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_mulasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator/= with Int16
    Int16_operator_divasg_Int16_arg.name = "arg"_c;
    Int16_operator_divasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_divasg_Int16.name = "operator/="_c;
    Int16_operator_divasg_Int16.backendIndex = 192;
    Int16_operator_divasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_divasg_Int16.parameters = Int16_operator_divasg_Int16_args;
    Symbol::Resolved(&Int16_operator_divasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_divasg_Int16)->signature = "i16 operator/=(i16)"_c;
    Symbol::Resolved(&Int16_operator_divasg_Int16)->name = "operator/=(i16)"_c;
    Symbol::Resolved(&Int16_operator_divasg_Int16)->nameWithVarNames = "operator/=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_divasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator< with Int16
    Int16_operator_lt_Int16_arg.name = "arg"_c;
    Int16_operator_lt_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_lt_Int16.name = "operator<"_c;
    Int16_operator_lt_Int16.backendIndex = 193;
    Int16_operator_lt_Int16.returnType = Type::FullType { Bool8Type.name };
    Int16_operator_lt_Int16.parameters = Int16_operator_lt_Int16_args;
    Symbol::Resolved(&Int16_operator_lt_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_lt_Int16)->signature = "b8 operator<(i16)"_c;
    Symbol::Resolved(&Int16_operator_lt_Int16)->name = "operator<(i16)"_c;
    Symbol::Resolved(&Int16_operator_lt_Int16)->nameWithVarNames = "operator<(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_lt_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator<= with Int16
    Int16_operator_lte_Int16_arg.name = "arg"_c;
    Int16_operator_lte_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_lte_Int16.name = "operator<="_c;
    Int16_operator_lte_Int16.backendIndex = 194;
    Int16_operator_lte_Int16.returnType = Type::FullType { Bool8Type.name };
    Int16_operator_lte_Int16.parameters = Int16_operator_lte_Int16_args;
    Symbol::Resolved(&Int16_operator_lte_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_lte_Int16)->signature = "b8 operator<=(i16)"_c;
    Symbol::Resolved(&Int16_operator_lte_Int16)->name = "operator<=(i16)"_c;
    Symbol::Resolved(&Int16_operator_lte_Int16)->nameWithVarNames = "operator<=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_lte_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator> with Int16
    Int16_operator_gt_Int16_arg.name = "arg"_c;
    Int16_operator_gt_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_gt_Int16.name = "operator>"_c;
    Int16_operator_gt_Int16.backendIndex = 195;
    Int16_operator_gt_Int16.returnType = Type::FullType { Bool8Type.name };
    Int16_operator_gt_Int16.parameters = Int16_operator_gt_Int16_args;
    Symbol::Resolved(&Int16_operator_gt_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_gt_Int16)->signature = "b8 operator>(i16)"_c;
    Symbol::Resolved(&Int16_operator_gt_Int16)->name = "operator>(i16)"_c;
    Symbol::Resolved(&Int16_operator_gt_Int16)->nameWithVarNames = "operator>(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_gt_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator>= with Int16
    Int16_operator_gte_Int16_arg.name = "arg"_c;
    Int16_operator_gte_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_gte_Int16.name = "operator>="_c;
    Int16_operator_gte_Int16.backendIndex = 196;
    Int16_operator_gte_Int16.returnType = Type::FullType { Bool8Type.name };
    Int16_operator_gte_Int16.parameters = Int16_operator_gte_Int16_args;
    Symbol::Resolved(&Int16_operator_gte_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_gte_Int16)->signature = "b8 operator>=(i16)"_c;
    Symbol::Resolved(&Int16_operator_gte_Int16)->name = "operator>=(i16)"_c;
    Symbol::Resolved(&Int16_operator_gte_Int16)->nameWithVarNames = "operator>=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_gte_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator== with Int16
    Int16_operator_eq_Int16_arg.name = "arg"_c;
    Int16_operator_eq_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_eq_Int16.name = "operator=="_c;
    Int16_operator_eq_Int16.backendIndex = 197;
    Int16_operator_eq_Int16.returnType = Type::FullType { Bool8Type.name };
    Int16_operator_eq_Int16.parameters = Int16_operator_eq_Int16_args;
    Symbol::Resolved(&Int16_operator_eq_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_eq_Int16)->signature = "b8 operator==(i16)"_c;
    Symbol::Resolved(&Int16_operator_eq_Int16)->name = "operator==(i16)"_c;
    Symbol::Resolved(&Int16_operator_eq_Int16)->nameWithVarNames = "operator==(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_eq_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Int16
    Int16_operator_neq_Int16_arg.name = "arg"_c;
    Int16_operator_neq_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_neq_Int16.name = "operator!="_c;
    Int16_operator_neq_Int16.backendIndex = 198;
    Int16_operator_neq_Int16.returnType = Type::FullType { Bool8Type.name };
    Int16_operator_neq_Int16.parameters = Int16_operator_neq_Int16_args;
    Symbol::Resolved(&Int16_operator_neq_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_neq_Int16)->signature = "b8 operator!=(i16)"_c;
    Symbol::Resolved(&Int16_operator_neq_Int16)->name = "operator!=(i16)"_c;
    Symbol::Resolved(&Int16_operator_neq_Int16)->nameWithVarNames = "operator!=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_neq_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator| with Int16
    Int16_operator_or_Int16_arg.name = "arg"_c;
    Int16_operator_or_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_or_Int16.name = "operator|"_c;
    Int16_operator_or_Int16.backendIndex = 199;
    Int16_operator_or_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_or_Int16.parameters = Int16_operator_or_Int16_args;
    Symbol::Resolved(&Int16_operator_or_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_or_Int16)->signature = "i16 operator|(i16)"_c;
    Symbol::Resolved(&Int16_operator_or_Int16)->name = "operator|(i16)"_c;
    Symbol::Resolved(&Int16_operator_or_Int16)->nameWithVarNames = "operator|(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_or_Int16)->returnTypeSymbol = &Int16Type;

    /// operator& with Int16
    Int16_operator_and_Int16_arg.name = "arg"_c;
    Int16_operator_and_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_and_Int16.name = "operator&"_c;
    Int16_operator_and_Int16.backendIndex = 200;
    Int16_operator_and_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_and_Int16.parameters = Int16_operator_and_Int16_args;
    Symbol::Resolved(&Int16_operator_and_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_and_Int16)->signature = "i16 operator&(i16)"_c;
    Symbol::Resolved(&Int16_operator_and_Int16)->name = "operator&(i16)"_c;
    Symbol::Resolved(&Int16_operator_and_Int16)->nameWithVarNames = "operator&(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_and_Int16)->returnTypeSymbol = &Int16Type;

    /// operator^ with Int16
    Int16_operator_xor_Int16_arg.name = "arg"_c;
    Int16_operator_xor_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_xor_Int16.name = "operator^"_c;
    Int16_operator_xor_Int16.backendIndex = 201;
    Int16_operator_xor_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_xor_Int16.parameters = Int16_operator_xor_Int16_args;
    Symbol::Resolved(&Int16_operator_xor_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_xor_Int16)->signature = "i16 operator^(i16)"_c;
    Symbol::Resolved(&Int16_operator_xor_Int16)->name = "operator^(i16)"_c;
    Symbol::Resolved(&Int16_operator_xor_Int16)->nameWithVarNames = "operator^(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_xor_Int16)->returnTypeSymbol = &Int16Type;

    /// operator<< with Int16
    Int16_operator_lsh_Int16_arg.name = "arg"_c;
    Int16_operator_lsh_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_lsh_Int16.name = "operator<<"_c;
    Int16_operator_lsh_Int16.backendIndex = 202;
    Int16_operator_lsh_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_lsh_Int16.parameters = Int16_operator_lsh_Int16_args;
    Symbol::Resolved(&Int16_operator_lsh_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_lsh_Int16)->signature = "i16 operator<<(i16)"_c;
    Symbol::Resolved(&Int16_operator_lsh_Int16)->name = "operator<<(i16)"_c;
    Symbol::Resolved(&Int16_operator_lsh_Int16)->nameWithVarNames = "operator<<(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_lsh_Int16)->returnTypeSymbol = &Int16Type;

    /// operator>> with Int16
    Int16_operator_rsh_Int16_arg.name = "arg"_c;
    Int16_operator_rsh_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_rsh_Int16.name = "operator>>"_c;
    Int16_operator_rsh_Int16.backendIndex = 203;
    Int16_operator_rsh_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_rsh_Int16.parameters = Int16_operator_rsh_Int16_args;
    Symbol::Resolved(&Int16_operator_rsh_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_rsh_Int16)->signature = "i16 operator>>(i16)"_c;
    Symbol::Resolved(&Int16_operator_rsh_Int16)->name = "operator>>(i16)"_c;
    Symbol::Resolved(&Int16_operator_rsh_Int16)->nameWithVarNames = "operator>>(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_rsh_Int16)->returnTypeSymbol = &Int16Type;

    /// operator|= with Int16
    Int16_operator_orasg_Int16_arg.name = "arg"_c;
    Int16_operator_orasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_orasg_Int16.name = "operator|="_c;
    Int16_operator_orasg_Int16.backendIndex = 204;
    Int16_operator_orasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_orasg_Int16.parameters = Int16_operator_orasg_Int16_args;
    Symbol::Resolved(&Int16_operator_orasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_orasg_Int16)->signature = "i16 operator|=(i16)"_c;
    Symbol::Resolved(&Int16_operator_orasg_Int16)->name = "operator|=(i16)"_c;
    Symbol::Resolved(&Int16_operator_orasg_Int16)->nameWithVarNames = "operator|=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_orasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator&= with Int16
    Int16_operator_andasg_Int16_arg.name = "arg"_c;
    Int16_operator_andasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_andasg_Int16.name = "operator&="_c;
    Int16_operator_andasg_Int16.backendIndex = 205;
    Int16_operator_andasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_andasg_Int16.parameters = Int16_operator_andasg_Int16_args;
    Symbol::Resolved(&Int16_operator_andasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_andasg_Int16)->signature = "i16 operator&=(i16)"_c;
    Symbol::Resolved(&Int16_operator_andasg_Int16)->name = "operator&=(i16)"_c;
    Symbol::Resolved(&Int16_operator_andasg_Int16)->nameWithVarNames = "operator&=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_andasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator^= with Int16
    Int16_operator_xorasg_Int16_arg.name = "arg"_c;
    Int16_operator_xorasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_xorasg_Int16.name = "operator^="_c;
    Int16_operator_xorasg_Int16.backendIndex = 206;
    Int16_operator_xorasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_xorasg_Int16.parameters = Int16_operator_xorasg_Int16_args;
    Symbol::Resolved(&Int16_operator_xorasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_xorasg_Int16)->signature = "i16 operator^=(i16)"_c;
    Symbol::Resolved(&Int16_operator_xorasg_Int16)->name = "operator^=(i16)"_c;
    Symbol::Resolved(&Int16_operator_xorasg_Int16)->nameWithVarNames = "operator^=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_xorasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator<<= with Int16
    Int16_operator_lshasg_Int16_arg.name = "arg"_c;
    Int16_operator_lshasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_lshasg_Int16.name = "operator<<="_c;
    Int16_operator_lshasg_Int16.backendIndex = 207;
    Int16_operator_lshasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_lshasg_Int16.parameters = Int16_operator_lshasg_Int16_args;
    Symbol::Resolved(&Int16_operator_lshasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_lshasg_Int16)->signature = "i16 operator<<=(i16)"_c;
    Symbol::Resolved(&Int16_operator_lshasg_Int16)->name = "operator<<=(i16)"_c;
    Symbol::Resolved(&Int16_operator_lshasg_Int16)->nameWithVarNames = "operator<<=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_lshasg_Int16)->returnTypeSymbol = &Int16Type;

    /// operator>>= with Int16
    Int16_operator_rhsasg_Int16_arg.name = "arg"_c;
    Int16_operator_rhsasg_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16_operator_rhsasg_Int16.name = "operator>>="_c;
    Int16_operator_rhsasg_Int16.backendIndex = 208;
    Int16_operator_rhsasg_Int16.returnType = Type::FullType { Int16Type.name };
    Int16_operator_rhsasg_Int16.parameters = Int16_operator_rhsasg_Int16_args;
    Symbol::Resolved(&Int16_operator_rhsasg_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_operator_rhsasg_Int16)->signature = "i16 operator>>=(i16)"_c;
    Symbol::Resolved(&Int16_operator_rhsasg_Int16)->name = "operator>>=(i16)"_c;
    Symbol::Resolved(&Int16_operator_rhsasg_Int16)->nameWithVarNames = "operator>>=(arg : i16)"_c;
    Symbol::Resolved(&Int16_operator_rhsasg_Int16)->returnTypeSymbol = &Int16Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 58> { 
        std::pair{ "operator!="_c, &Int16_operator_neq_Int16 },
        std::pair{ "operator!=(i16)"_c, &Int16_operator_neq_Int16 },
        std::pair{ "operator%"_c, &Int16_operator_mod_Int16 },
        std::pair{ "operator%(i16)"_c, &Int16_operator_mod_Int16 },
        std::pair{ "operator&"_c, &Int16_operator_and_Int16 },
        std::pair{ "operator&(i16)"_c, &Int16_operator_and_Int16 },
        std::pair{ "operator&="_c, &Int16_operator_andasg_Int16 },
        std::pair{ "operator&=(i16)"_c, &Int16_operator_andasg_Int16 },
        std::pair{ "operator*"_c, &Int16_operator_mul_Int16 },
        std::pair{ "operator*(i16)"_c, &Int16_operator_mul_Int16 },
        std::pair{ "operator*="_c, &Int16_operator_mulasg_Int16 },
        std::pair{ "operator*=(i16)"_c, &Int16_operator_mulasg_Int16 },
        std::pair{ "operator+"_c, &Int16_operator_add_Int16 },
        std::pair{ "operator+(i16)"_c, &Int16_operator_add_Int16 },
        std::pair{ "operator+="_c, &Int16_operator_addasg_Int16 },
        std::pair{ "operator+=(i16)"_c, &Int16_operator_addasg_Int16 },
        std::pair{ "operator-"_c, &Int16_operator_sub_Int16 },
        std::pair{ "operator-(i16)"_c, &Int16_operator_sub_Int16 },
        std::pair{ "operator-="_c, &Int16_operator_subasg_Int16 },
        std::pair{ "operator-=(i16)"_c, &Int16_operator_subasg_Int16 },
        std::pair{ "operator/"_c, &Int16_operator_div_Int16 },
        std::pair{ "operator/(i16)"_c, &Int16_operator_div_Int16 },
        std::pair{ "operator/="_c, &Int16_operator_divasg_Int16 },
        std::pair{ "operator/=(i16)"_c, &Int16_operator_divasg_Int16 },
        std::pair{ "operator<"_c, &Int16_operator_lt_Int16 },
        std::pair{ "operator<(i16)"_c, &Int16_operator_lt_Int16 },
        std::pair{ "operator<<"_c, &Int16_operator_lsh_Int16 },
        std::pair{ "operator<<(i16)"_c, &Int16_operator_lsh_Int16 },
        std::pair{ "operator<<="_c, &Int16_operator_lshasg_Int16 },
        std::pair{ "operator<<=(i16)"_c, &Int16_operator_lshasg_Int16 },
        std::pair{ "operator<="_c, &Int16_operator_lte_Int16 },
        std::pair{ "operator<=(i16)"_c, &Int16_operator_lte_Int16 },
        std::pair{ "operator=="_c, &Int16_operator_eq_Int16 },
        std::pair{ "operator==(i16)"_c, &Int16_operator_eq_Int16 },
        std::pair{ "operator>"_c, &Int16_operator_gt_Int16 },
        std::pair{ "operator>(i16)"_c, &Int16_operator_gt_Int16 },
        std::pair{ "operator>="_c, &Int16_operator_gte_Int16 },
        std::pair{ "operator>=(i16)"_c, &Int16_operator_gte_Int16 },
        std::pair{ "operator>>"_c, &Int16_operator_rsh_Int16 },
        std::pair{ "operator>>(i16)"_c, &Int16_operator_rsh_Int16 },
        std::pair{ "operator>>="_c, &Int16_operator_rhsasg_Int16 },
        std::pair{ "operator>>=(i16)"_c, &Int16_operator_rhsasg_Int16 },
        std::pair{ "operator[]"_c, &Int16_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Int16_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Int16_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Int16_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Int16_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Int16_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Int16_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Int16_operator_index_UInt32 },
        std::pair{ "operator^"_c, &Int16_operator_xor_Int16 },
        std::pair{ "operator^(i16)"_c, &Int16_operator_xor_Int16 },
        std::pair{ "operator^="_c, &Int16_operator_xorasg_Int16 },
        std::pair{ "operator^=(i16)"_c, &Int16_operator_xorasg_Int16 },
        std::pair{ "operator|"_c, &Int16_operator_or_Int16 },
        std::pair{ "operator|(i16)"_c, &Int16_operator_or_Int16 },
        std::pair{ "operator|="_c, &Int16_operator_orasg_Int16 },
        std::pair{ "operator|=(i16)"_c, &Int16_operator_orasg_Int16 }
    };
}
Int16 Int16Type;

/// operator[] with Int32
Variable Float32x2_operator_index_Int32_arg;
Function Float32x2_operator_index_Int32;
inline constexpr std::array Float32x2_operator_index_Int32_args = { &Float32x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x2_operator_index_UInt32_arg;
Function Float32x2_operator_index_UInt32;
inline constexpr std::array Float32x2_operator_index_UInt32_args = { &Float32x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x2_operator_index_Int16_arg;
Function Float32x2_operator_index_Int16;
inline constexpr std::array Float32x2_operator_index_Int16_args = { &Float32x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x2_operator_index_UInt16_arg;
Function Float32x2_operator_index_UInt16;
inline constexpr std::array Float32x2_operator_index_UInt16_args = { &Float32x2_operator_index_UInt16_arg };

/// operator+ with Float32x2
Variable Float32x2_operator_add_Float32x2_arg;
Function Float32x2_operator_add_Float32x2;
inline constexpr std::array Float32x2_operator_add_Float32x2_args = { &Float32x2_operator_add_Float32x2_arg };

/// operator- with Float32x2
Variable Float32x2_operator_sub_Float32x2_arg;
Function Float32x2_operator_sub_Float32x2;
inline constexpr std::array Float32x2_operator_sub_Float32x2_args = { &Float32x2_operator_sub_Float32x2_arg };

/// operator* with Float32x2
Variable Float32x2_operator_mul_Float32x2_arg;
Function Float32x2_operator_mul_Float32x2;
inline constexpr std::array Float32x2_operator_mul_Float32x2_args = { &Float32x2_operator_mul_Float32x2_arg };

/// operator/ with Float32x2
Variable Float32x2_operator_div_Float32x2_arg;
Function Float32x2_operator_div_Float32x2;
inline constexpr std::array Float32x2_operator_div_Float32x2_args = { &Float32x2_operator_div_Float32x2_arg };

/// operator% with Float32x2
Variable Float32x2_operator_mod_Float32x2_arg;
Function Float32x2_operator_mod_Float32x2;
inline constexpr std::array Float32x2_operator_mod_Float32x2_args = { &Float32x2_operator_mod_Float32x2_arg };

/// operator+= with Float32x2
Variable Float32x2_operator_addasg_Float32x2_arg;
Function Float32x2_operator_addasg_Float32x2;
inline constexpr std::array Float32x2_operator_addasg_Float32x2_args = { &Float32x2_operator_addasg_Float32x2_arg };

/// operator-= with Float32x2
Variable Float32x2_operator_subasg_Float32x2_arg;
Function Float32x2_operator_subasg_Float32x2;
inline constexpr std::array Float32x2_operator_subasg_Float32x2_args = { &Float32x2_operator_subasg_Float32x2_arg };

/// operator*= with Float32x2
Variable Float32x2_operator_mulasg_Float32x2_arg;
Function Float32x2_operator_mulasg_Float32x2;
inline constexpr std::array Float32x2_operator_mulasg_Float32x2_args = { &Float32x2_operator_mulasg_Float32x2_arg };

/// operator/= with Float32x2
Variable Float32x2_operator_divasg_Float32x2_arg;
Function Float32x2_operator_divasg_Float32x2;
inline constexpr std::array Float32x2_operator_divasg_Float32x2_args = { &Float32x2_operator_divasg_Float32x2_arg };

/// operator< with Float32x2
Variable Float32x2_operator_lt_Float32x2_arg;
Function Float32x2_operator_lt_Float32x2;
inline constexpr std::array Float32x2_operator_lt_Float32x2_args = { &Float32x2_operator_lt_Float32x2_arg };

/// operator<= with Float32x2
Variable Float32x2_operator_lte_Float32x2_arg;
Function Float32x2_operator_lte_Float32x2;
inline constexpr std::array Float32x2_operator_lte_Float32x2_args = { &Float32x2_operator_lte_Float32x2_arg };

/// operator> with Float32x2
Variable Float32x2_operator_gt_Float32x2_arg;
Function Float32x2_operator_gt_Float32x2;
inline constexpr std::array Float32x2_operator_gt_Float32x2_args = { &Float32x2_operator_gt_Float32x2_arg };

/// operator>= with Float32x2
Variable Float32x2_operator_gte_Float32x2_arg;
Function Float32x2_operator_gte_Float32x2;
inline constexpr std::array Float32x2_operator_gte_Float32x2_args = { &Float32x2_operator_gte_Float32x2_arg };

/// operator== with Float32x2
Variable Float32x2_operator_eq_Float32x2_arg;
Function Float32x2_operator_eq_Float32x2;
inline constexpr std::array Float32x2_operator_eq_Float32x2_args = { &Float32x2_operator_eq_Float32x2_arg };

/// operator!= with Float32x2
Variable Float32x2_operator_neq_Float32x2_arg;
Function Float32x2_operator_neq_Float32x2;
inline constexpr std::array Float32x2_operator_neq_Float32x2_args = { &Float32x2_operator_neq_Float32x2_arg };

/// operator* with Float32
Variable Float32x2_operator_scale_Float32_arg;
Function Float32x2_operator_scale_Float32;
inline constexpr std::array Float32x2_operator_scale_Float32_args = { &Float32x2_operator_scale_Float32_arg };

/// operator* with UInt32
Variable Float32x2_operator_scale_UInt32_arg;
Function Float32x2_operator_scale_UInt32;
inline constexpr std::array Float32x2_operator_scale_UInt32_args = { &Float32x2_operator_scale_UInt32_arg };

/// operator* with Int32
Variable Float32x2_operator_scale_Int32_arg;
Function Float32x2_operator_scale_Int32;
inline constexpr std::array Float32x2_operator_scale_Int32_args = { &Float32x2_operator_scale_Int32_arg };

/// operator* with Float32x2x2
Variable Float32x2_operator_transform_Float32x2x2_arg;
Function Float32x2_operator_transform_Float32x2x2;
inline constexpr std::array Float32x2_operator_transform_Float32x2x2_args = { &Float32x2_operator_transform_Float32x2x2_arg };

/// operator* with Float32x2x3
Variable Float32x2_operator_transform_Float32x2x3_arg;
Function Float32x2_operator_transform_Float32x2x3;
inline constexpr std::array Float32x2_operator_transform_Float32x2x3_args = { &Float32x2_operator_transform_Float32x2x3_arg };

/// operator* with Float32x2x4
Variable Float32x2_operator_transform_Float32x2x4_arg;
Function Float32x2_operator_transform_Float32x2x4;
inline constexpr std::array Float32x2_operator_transform_Float32x2x4_args = { &Float32x2_operator_transform_Float32x2x4_arg };

Float32x2::Float32x2()
{
    this->name = "f32x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x2_operator_index_Int32_arg.name = "arg"_c;
    Float32x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x2_operator_index_Int32.name = "operator[]"_c;
    Float32x2_operator_index_Int32.backendIndex = 224;
    Float32x2_operator_index_Int32.returnType = Type::FullType { Float32Type.name };
    Float32x2_operator_index_Int32.parameters = Float32x2_operator_index_Int32_args;
    Symbol::Resolved(&Float32x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2_operator_index_Int32)->signature = "f32 operator[](i32)"_c;
    Symbol::Resolved(&Float32x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float32x2_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt32
    Float32x2_operator_index_UInt32_arg.name = "arg"_c;
    Float32x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x2_operator_index_UInt32.name = "operator[]"_c;
    Float32x2_operator_index_UInt32.backendIndex = 225;
    Float32x2_operator_index_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32x2_operator_index_UInt32.parameters = Float32x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2_operator_index_UInt32)->signature = "f32 operator[](u32)"_c;
    Symbol::Resolved(&Float32x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float32x2_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int16
    Float32x2_operator_index_Int16_arg.name = "arg"_c;
    Float32x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x2_operator_index_Int16.name = "operator[]"_c;
    Float32x2_operator_index_Int16.backendIndex = 226;
    Float32x2_operator_index_Int16.returnType = Type::FullType { Float32Type.name };
    Float32x2_operator_index_Int16.parameters = Float32x2_operator_index_Int16_args;
    Symbol::Resolved(&Float32x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2_operator_index_Int16)->signature = "f32 operator[](i16)"_c;
    Symbol::Resolved(&Float32x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float32x2_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt16
    Float32x2_operator_index_UInt16_arg.name = "arg"_c;
    Float32x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x2_operator_index_UInt16.name = "operator[]"_c;
    Float32x2_operator_index_UInt16.backendIndex = 227;
    Float32x2_operator_index_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32x2_operator_index_UInt16.parameters = Float32x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2_operator_index_UInt16)->signature = "f32 operator[](u16)"_c;
    Symbol::Resolved(&Float32x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float32x2_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    /// operator+ with Float32x2
    Float32x2_operator_add_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_add_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_add_Float32x2.name = "operator+"_c;
    Float32x2_operator_add_Float32x2.backendIndex = 228;
    Float32x2_operator_add_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_add_Float32x2.parameters = Float32x2_operator_add_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_add_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_add_Float32x2)->signature = "f32x2 operator+(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_add_Float32x2)->name = "operator+(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_add_Float32x2)->nameWithVarNames = "operator+(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_add_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator- with Float32x2
    Float32x2_operator_sub_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_sub_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_sub_Float32x2.name = "operator-"_c;
    Float32x2_operator_sub_Float32x2.backendIndex = 229;
    Float32x2_operator_sub_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_sub_Float32x2.parameters = Float32x2_operator_sub_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2)->signature = "f32x2 operator-(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2)->name = "operator-(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2)->nameWithVarNames = "operator-(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_sub_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x2
    Float32x2_operator_mul_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_mul_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_mul_Float32x2.name = "operator*"_c;
    Float32x2_operator_mul_Float32x2.backendIndex = 230;
    Float32x2_operator_mul_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_mul_Float32x2.parameters = Float32x2_operator_mul_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2)->signature = "f32x2 operator*(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2)->name = "operator*(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2)->nameWithVarNames = "operator*(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mul_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator/ with Float32x2
    Float32x2_operator_div_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_div_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_div_Float32x2.name = "operator/"_c;
    Float32x2_operator_div_Float32x2.backendIndex = 231;
    Float32x2_operator_div_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_div_Float32x2.parameters = Float32x2_operator_div_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_div_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_div_Float32x2)->signature = "f32x2 operator/(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_div_Float32x2)->name = "operator/(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_div_Float32x2)->nameWithVarNames = "operator/(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_div_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator% with Float32x2
    Float32x2_operator_mod_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_mod_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_mod_Float32x2.name = "operator%"_c;
    Float32x2_operator_mod_Float32x2.backendIndex = 232;
    Float32x2_operator_mod_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_mod_Float32x2.parameters = Float32x2_operator_mod_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2)->signature = "f32x2 operator%(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2)->name = "operator%(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2)->nameWithVarNames = "operator%(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mod_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator+= with Float32x2
    Float32x2_operator_addasg_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_addasg_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_addasg_Float32x2.name = "operator+="_c;
    Float32x2_operator_addasg_Float32x2.backendIndex = 233;
    Float32x2_operator_addasg_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_addasg_Float32x2.parameters = Float32x2_operator_addasg_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2)->signature = "f32x2 operator+=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2)->name = "operator+=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2)->nameWithVarNames = "operator+=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_addasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator-= with Float32x2
    Float32x2_operator_subasg_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_subasg_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_subasg_Float32x2.name = "operator-="_c;
    Float32x2_operator_subasg_Float32x2.backendIndex = 234;
    Float32x2_operator_subasg_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_subasg_Float32x2.parameters = Float32x2_operator_subasg_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2)->signature = "f32x2 operator-=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2)->name = "operator-=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2)->nameWithVarNames = "operator-=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_subasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator*= with Float32x2
    Float32x2_operator_mulasg_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_mulasg_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_mulasg_Float32x2.name = "operator*="_c;
    Float32x2_operator_mulasg_Float32x2.backendIndex = 235;
    Float32x2_operator_mulasg_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_mulasg_Float32x2.parameters = Float32x2_operator_mulasg_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2)->signature = "f32x2 operator*=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2)->name = "operator*=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2)->nameWithVarNames = "operator*=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_mulasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator/= with Float32x2
    Float32x2_operator_divasg_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_divasg_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_divasg_Float32x2.name = "operator/="_c;
    Float32x2_operator_divasg_Float32x2.backendIndex = 236;
    Float32x2_operator_divasg_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_divasg_Float32x2.parameters = Float32x2_operator_divasg_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2)->signature = "f32x2 operator/=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2)->name = "operator/=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2)->nameWithVarNames = "operator/=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_divasg_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator< with Float32x2
    Float32x2_operator_lt_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_lt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_lt_Float32x2.name = "operator<"_c;
    Float32x2_operator_lt_Float32x2.backendIndex = 237;
    Float32x2_operator_lt_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Float32x2_operator_lt_Float32x2.parameters = Float32x2_operator_lt_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2)->signature = "b8x2 operator<(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2)->name = "operator<(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2)->nameWithVarNames = "operator<(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_lt_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator<= with Float32x2
    Float32x2_operator_lte_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_lte_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_lte_Float32x2.name = "operator<="_c;
    Float32x2_operator_lte_Float32x2.backendIndex = 238;
    Float32x2_operator_lte_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Float32x2_operator_lte_Float32x2.parameters = Float32x2_operator_lte_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2)->signature = "b8x2 operator<=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2)->name = "operator<=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2)->nameWithVarNames = "operator<=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_lte_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator> with Float32x2
    Float32x2_operator_gt_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_gt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_gt_Float32x2.name = "operator>"_c;
    Float32x2_operator_gt_Float32x2.backendIndex = 239;
    Float32x2_operator_gt_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Float32x2_operator_gt_Float32x2.parameters = Float32x2_operator_gt_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2)->signature = "b8x2 operator>(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2)->name = "operator>(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2)->nameWithVarNames = "operator>(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_gt_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator>= with Float32x2
    Float32x2_operator_gte_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_gte_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_gte_Float32x2.name = "operator>="_c;
    Float32x2_operator_gte_Float32x2.backendIndex = 240;
    Float32x2_operator_gte_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Float32x2_operator_gte_Float32x2.parameters = Float32x2_operator_gte_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2)->signature = "b8x2 operator>=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2)->name = "operator>=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2)->nameWithVarNames = "operator>=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_gte_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with Float32x2
    Float32x2_operator_eq_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_eq_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_eq_Float32x2.name = "operator=="_c;
    Float32x2_operator_eq_Float32x2.backendIndex = 241;
    Float32x2_operator_eq_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Float32x2_operator_eq_Float32x2.parameters = Float32x2_operator_eq_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2)->signature = "b8x2 operator==(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2)->name = "operator==(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2)->nameWithVarNames = "operator==(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_eq_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with Float32x2
    Float32x2_operator_neq_Float32x2_arg.name = "arg"_c;
    Float32x2_operator_neq_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_operator_neq_Float32x2.name = "operator!="_c;
    Float32x2_operator_neq_Float32x2.backendIndex = 242;
    Float32x2_operator_neq_Float32x2.returnType = Type::FullType { Bool8x2Type.name };
    Float32x2_operator_neq_Float32x2.parameters = Float32x2_operator_neq_Float32x2_args;
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2)->signature = "b8x2 operator!=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2)->name = "operator!=(f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2)->nameWithVarNames = "operator!=(arg : f32x2)"_c;
    Symbol::Resolved(&Float32x2_operator_neq_Float32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator* with Float32
    Float32x2_operator_scale_Float32_arg.name = "arg"_c;
    Float32x2_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x2_operator_scale_Float32.name = "operator*"_c;
    Float32x2_operator_scale_Float32.backendIndex = 243;
    Float32x2_operator_scale_Float32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_scale_Float32.parameters = Float32x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x2_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2_operator_scale_Float32)->signature = "f32x2 operator*(f32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_Float32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with UInt32
    Float32x2_operator_scale_UInt32_arg.name = "arg"_c;
    Float32x2_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x2_operator_scale_UInt32.name = "operator*"_c;
    Float32x2_operator_scale_UInt32.backendIndex = 244;
    Float32x2_operator_scale_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_scale_UInt32.parameters = Float32x2_operator_scale_UInt32_args;
    Symbol::Resolved(&Float32x2_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2_operator_scale_UInt32)->signature = "f32x2 operator*(u32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Int32
    Float32x2_operator_scale_Int32_arg.name = "arg"_c;
    Float32x2_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x2_operator_scale_Int32.name = "operator*"_c;
    Float32x2_operator_scale_Int32.backendIndex = 245;
    Float32x2_operator_scale_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_scale_Int32.parameters = Float32x2_operator_scale_Int32_args;
    Symbol::Resolved(&Float32x2_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2_operator_scale_Int32)->signature = "f32x2 operator*(i32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Float32x2_operator_scale_Int32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x2x2
    Float32x2_operator_transform_Float32x2x2_arg.name = "arg"_c;
    Float32x2_operator_transform_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2_operator_transform_Float32x2x2.name = "operator*"_c;
    Float32x2_operator_transform_Float32x2x2.backendIndex = 246;
    Float32x2_operator_transform_Float32x2x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_operator_transform_Float32x2x2.parameters = Float32x2_operator_transform_Float32x2x2_args;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x2)->signature = "f32x2 operator*(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x2)->name = "operator*(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x2)->nameWithVarNames = "operator*(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x2x3
    Float32x2_operator_transform_Float32x2x3_arg.name = "arg"_c;
    Float32x2_operator_transform_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2_operator_transform_Float32x2x3.name = "operator*"_c;
    Float32x2_operator_transform_Float32x2x3.backendIndex = 247;
    Float32x2_operator_transform_Float32x2x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x2_operator_transform_Float32x2x3.parameters = Float32x2_operator_transform_Float32x2x3_args;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x3)->signature = "f32x3 operator*(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x3)->name = "operator*(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x3)->nameWithVarNames = "operator*(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x2x4
    Float32x2_operator_transform_Float32x2x4_arg.name = "arg"_c;
    Float32x2_operator_transform_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2_operator_transform_Float32x2x4.name = "operator*"_c;
    Float32x2_operator_transform_Float32x2x4.backendIndex = 248;
    Float32x2_operator_transform_Float32x2x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x2_operator_transform_Float32x2x4.parameters = Float32x2_operator_transform_Float32x2x4_args;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x4)->signature = "f32x4 operator*(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x4)->name = "operator*(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x4)->nameWithVarNames = "operator*(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2_operator_transform_Float32x2x4)->returnTypeSymbol = &Float32x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 110> { 
        std::pair{ "g"_c, &Float32Type },
        std::pair{ "gg"_c, &Float32x2Type },
        std::pair{ "ggg"_c, &Float32x3Type },
        std::pair{ "gggg"_c, &Float32x4Type },
        std::pair{ "gggr"_c, &Float32x4Type },
        std::pair{ "ggr"_c, &Float32x3Type },
        std::pair{ "ggrg"_c, &Float32x4Type },
        std::pair{ "ggrr"_c, &Float32x4Type },
        std::pair{ "gr"_c, &Float32x2Type },
        std::pair{ "grg"_c, &Float32x3Type },
        std::pair{ "grgg"_c, &Float32x4Type },
        std::pair{ "grgr"_c, &Float32x4Type },
        std::pair{ "grr"_c, &Float32x3Type },
        std::pair{ "grrg"_c, &Float32x4Type },
        std::pair{ "grrr"_c, &Float32x4Type },
        std::pair{ "operator!="_c, &Float32x2_operator_neq_Float32x2 },
        std::pair{ "operator!=(f32x2)"_c, &Float32x2_operator_neq_Float32x2 },
        std::pair{ "operator%"_c, &Float32x2_operator_mod_Float32x2 },
        std::pair{ "operator%(f32x2)"_c, &Float32x2_operator_mod_Float32x2 },
        std::pair{ "operator*"_c, &Float32x2_operator_mul_Float32x2 },
        std::pair{ "operator*"_c, &Float32x2_operator_scale_Float32 },
        std::pair{ "operator*"_c, &Float32x2_operator_scale_UInt32 },
        std::pair{ "operator*"_c, &Float32x2_operator_scale_Int32 },
        std::pair{ "operator*"_c, &Float32x2_operator_transform_Float32x2x2 },
        std::pair{ "operator*"_c, &Float32x2_operator_transform_Float32x2x3 },
        std::pair{ "operator*"_c, &Float32x2_operator_transform_Float32x2x4 },
        std::pair{ "operator*(f32)"_c, &Float32x2_operator_scale_Float32 },
        std::pair{ "operator*(f32x2)"_c, &Float32x2_operator_mul_Float32x2 },
        std::pair{ "operator*(f32x2x2)"_c, &Float32x2_operator_transform_Float32x2x2 },
        std::pair{ "operator*(f32x2x3)"_c, &Float32x2_operator_transform_Float32x2x3 },
        std::pair{ "operator*(f32x2x4)"_c, &Float32x2_operator_transform_Float32x2x4 },
        std::pair{ "operator*(i32)"_c, &Float32x2_operator_scale_Int32 },
        std::pair{ "operator*(u32)"_c, &Float32x2_operator_scale_UInt32 },
        std::pair{ "operator*="_c, &Float32x2_operator_mulasg_Float32x2 },
        std::pair{ "operator*=(f32x2)"_c, &Float32x2_operator_mulasg_Float32x2 },
        std::pair{ "operator+"_c, &Float32x2_operator_add_Float32x2 },
        std::pair{ "operator+(f32x2)"_c, &Float32x2_operator_add_Float32x2 },
        std::pair{ "operator+="_c, &Float32x2_operator_addasg_Float32x2 },
        std::pair{ "operator+=(f32x2)"_c, &Float32x2_operator_addasg_Float32x2 },
        std::pair{ "operator-"_c, &Float32x2_operator_sub_Float32x2 },
        std::pair{ "operator-(f32x2)"_c, &Float32x2_operator_sub_Float32x2 },
        std::pair{ "operator-="_c, &Float32x2_operator_subasg_Float32x2 },
        std::pair{ "operator-=(f32x2)"_c, &Float32x2_operator_subasg_Float32x2 },
        std::pair{ "operator/"_c, &Float32x2_operator_div_Float32x2 },
        std::pair{ "operator/(f32x2)"_c, &Float32x2_operator_div_Float32x2 },
        std::pair{ "operator/="_c, &Float32x2_operator_divasg_Float32x2 },
        std::pair{ "operator/=(f32x2)"_c, &Float32x2_operator_divasg_Float32x2 },
        std::pair{ "operator<"_c, &Float32x2_operator_lt_Float32x2 },
        std::pair{ "operator<(f32x2)"_c, &Float32x2_operator_lt_Float32x2 },
        std::pair{ "operator<="_c, &Float32x2_operator_lte_Float32x2 },
        std::pair{ "operator<=(f32x2)"_c, &Float32x2_operator_lte_Float32x2 },
        std::pair{ "operator=="_c, &Float32x2_operator_eq_Float32x2 },
        std::pair{ "operator==(f32x2)"_c, &Float32x2_operator_eq_Float32x2 },
        std::pair{ "operator>"_c, &Float32x2_operator_gt_Float32x2 },
        std::pair{ "operator>(f32x2)"_c, &Float32x2_operator_gt_Float32x2 },
        std::pair{ "operator>="_c, &Float32x2_operator_gte_Float32x2 },
        std::pair{ "operator>=(f32x2)"_c, &Float32x2_operator_gte_Float32x2 },
        std::pair{ "operator[]"_c, &Float32x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32x2_operator_index_UInt32 },
        std::pair{ "r"_c, &Float32Type },
        std::pair{ "rg"_c, &Float32x2Type },
        std::pair{ "rgg"_c, &Float32x3Type },
        std::pair{ "rggg"_c, &Float32x4Type },
        std::pair{ "rggr"_c, &Float32x4Type },
        std::pair{ "rgr"_c, &Float32x3Type },
        std::pair{ "rgrg"_c, &Float32x4Type },
        std::pair{ "rgrr"_c, &Float32x4Type },
        std::pair{ "rr"_c, &Float32x2Type },
        std::pair{ "rrg"_c, &Float32x3Type },
        std::pair{ "rrgg"_c, &Float32x4Type },
        std::pair{ "rrgr"_c, &Float32x4Type },
        std::pair{ "rrr"_c, &Float32x3Type },
        std::pair{ "rrrg"_c, &Float32x4Type },
        std::pair{ "rrrr"_c, &Float32x4Type },
        std::pair{ "x"_c, &Float32Type },
        std::pair{ "xx"_c, &Float32x2Type },
        std::pair{ "xxx"_c, &Float32x3Type },
        std::pair{ "xxxx"_c, &Float32x4Type },
        std::pair{ "xxxy"_c, &Float32x4Type },
        std::pair{ "xxy"_c, &Float32x3Type },
        std::pair{ "xxyx"_c, &Float32x4Type },
        std::pair{ "xxyy"_c, &Float32x4Type },
        std::pair{ "xy"_c, &Float32x2Type },
        std::pair{ "xyx"_c, &Float32x3Type },
        std::pair{ "xyxx"_c, &Float32x4Type },
        std::pair{ "xyxy"_c, &Float32x4Type },
        std::pair{ "xyy"_c, &Float32x3Type },
        std::pair{ "xyyx"_c, &Float32x4Type },
        std::pair{ "xyyy"_c, &Float32x4Type },
        std::pair{ "y"_c, &Float32Type },
        std::pair{ "yx"_c, &Float32x2Type },
        std::pair{ "yxx"_c, &Float32x3Type },
        std::pair{ "yxxx"_c, &Float32x4Type },
        std::pair{ "yxxy"_c, &Float32x4Type },
        std::pair{ "yxy"_c, &Float32x3Type },
        std::pair{ "yxyx"_c, &Float32x4Type },
        std::pair{ "yxyy"_c, &Float32x4Type },
        std::pair{ "yy"_c, &Float32x2Type },
        std::pair{ "yyx"_c, &Float32x3Type },
        std::pair{ "yyxx"_c, &Float32x4Type },
        std::pair{ "yyxy"_c, &Float32x4Type },
        std::pair{ "yyy"_c, &Float32x3Type },
        std::pair{ "yyyx"_c, &Float32x4Type },
        std::pair{ "yyyy"_c, &Float32x4Type }
    };
}
Float32x2 Float32x2Type;

/// operator[] with Int32
Variable UInt32x2_operator_index_Int32_arg;
Function UInt32x2_operator_index_Int32;
inline constexpr std::array UInt32x2_operator_index_Int32_args = { &UInt32x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt32x2_operator_index_UInt32_arg;
Function UInt32x2_operator_index_UInt32;
inline constexpr std::array UInt32x2_operator_index_UInt32_args = { &UInt32x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt32x2_operator_index_Int16_arg;
Function UInt32x2_operator_index_Int16;
inline constexpr std::array UInt32x2_operator_index_Int16_args = { &UInt32x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt32x2_operator_index_UInt16_arg;
Function UInt32x2_operator_index_UInt16;
inline constexpr std::array UInt32x2_operator_index_UInt16_args = { &UInt32x2_operator_index_UInt16_arg };

/// operator+ with UInt32x2
Variable UInt32x2_operator_add_UInt32x2_arg;
Function UInt32x2_operator_add_UInt32x2;
inline constexpr std::array UInt32x2_operator_add_UInt32x2_args = { &UInt32x2_operator_add_UInt32x2_arg };

/// operator- with UInt32x2
Variable UInt32x2_operator_sub_UInt32x2_arg;
Function UInt32x2_operator_sub_UInt32x2;
inline constexpr std::array UInt32x2_operator_sub_UInt32x2_args = { &UInt32x2_operator_sub_UInt32x2_arg };

/// operator* with UInt32x2
Variable UInt32x2_operator_mul_UInt32x2_arg;
Function UInt32x2_operator_mul_UInt32x2;
inline constexpr std::array UInt32x2_operator_mul_UInt32x2_args = { &UInt32x2_operator_mul_UInt32x2_arg };

/// operator/ with UInt32x2
Variable UInt32x2_operator_div_UInt32x2_arg;
Function UInt32x2_operator_div_UInt32x2;
inline constexpr std::array UInt32x2_operator_div_UInt32x2_args = { &UInt32x2_operator_div_UInt32x2_arg };

/// operator% with UInt32x2
Variable UInt32x2_operator_mod_UInt32x2_arg;
Function UInt32x2_operator_mod_UInt32x2;
inline constexpr std::array UInt32x2_operator_mod_UInt32x2_args = { &UInt32x2_operator_mod_UInt32x2_arg };

/// operator+= with UInt32x2
Variable UInt32x2_operator_addasg_UInt32x2_arg;
Function UInt32x2_operator_addasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_addasg_UInt32x2_args = { &UInt32x2_operator_addasg_UInt32x2_arg };

/// operator-= with UInt32x2
Variable UInt32x2_operator_subasg_UInt32x2_arg;
Function UInt32x2_operator_subasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_subasg_UInt32x2_args = { &UInt32x2_operator_subasg_UInt32x2_arg };

/// operator*= with UInt32x2
Variable UInt32x2_operator_mulasg_UInt32x2_arg;
Function UInt32x2_operator_mulasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_mulasg_UInt32x2_args = { &UInt32x2_operator_mulasg_UInt32x2_arg };

/// operator/= with UInt32x2
Variable UInt32x2_operator_divasg_UInt32x2_arg;
Function UInt32x2_operator_divasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_divasg_UInt32x2_args = { &UInt32x2_operator_divasg_UInt32x2_arg };

/// operator< with UInt32x2
Variable UInt32x2_operator_lt_UInt32x2_arg;
Function UInt32x2_operator_lt_UInt32x2;
inline constexpr std::array UInt32x2_operator_lt_UInt32x2_args = { &UInt32x2_operator_lt_UInt32x2_arg };

/// operator<= with UInt32x2
Variable UInt32x2_operator_lte_UInt32x2_arg;
Function UInt32x2_operator_lte_UInt32x2;
inline constexpr std::array UInt32x2_operator_lte_UInt32x2_args = { &UInt32x2_operator_lte_UInt32x2_arg };

/// operator> with UInt32x2
Variable UInt32x2_operator_gt_UInt32x2_arg;
Function UInt32x2_operator_gt_UInt32x2;
inline constexpr std::array UInt32x2_operator_gt_UInt32x2_args = { &UInt32x2_operator_gt_UInt32x2_arg };

/// operator>= with UInt32x2
Variable UInt32x2_operator_gte_UInt32x2_arg;
Function UInt32x2_operator_gte_UInt32x2;
inline constexpr std::array UInt32x2_operator_gte_UInt32x2_args = { &UInt32x2_operator_gte_UInt32x2_arg };

/// operator== with UInt32x2
Variable UInt32x2_operator_eq_UInt32x2_arg;
Function UInt32x2_operator_eq_UInt32x2;
inline constexpr std::array UInt32x2_operator_eq_UInt32x2_args = { &UInt32x2_operator_eq_UInt32x2_arg };

/// operator!= with UInt32x2
Variable UInt32x2_operator_neq_UInt32x2_arg;
Function UInt32x2_operator_neq_UInt32x2;
inline constexpr std::array UInt32x2_operator_neq_UInt32x2_args = { &UInt32x2_operator_neq_UInt32x2_arg };

/// operator* with Float32
Variable UInt32x2_operator_scale_Float32_arg;
Function UInt32x2_operator_scale_Float32;
inline constexpr std::array UInt32x2_operator_scale_Float32_args = { &UInt32x2_operator_scale_Float32_arg };

/// operator* with UInt32
Variable UInt32x2_operator_scale_UInt32_arg;
Function UInt32x2_operator_scale_UInt32;
inline constexpr std::array UInt32x2_operator_scale_UInt32_args = { &UInt32x2_operator_scale_UInt32_arg };

/// operator* with Int32
Variable UInt32x2_operator_scale_Int32_arg;
Function UInt32x2_operator_scale_Int32;
inline constexpr std::array UInt32x2_operator_scale_Int32_args = { &UInt32x2_operator_scale_Int32_arg };

/// operator| with UInt32x2
Variable UInt32x2_operator_or_UInt32x2_arg;
Function UInt32x2_operator_or_UInt32x2;
inline constexpr std::array UInt32x2_operator_or_UInt32x2_args = { &UInt32x2_operator_or_UInt32x2_arg };

/// operator& with UInt32x2
Variable UInt32x2_operator_and_UInt32x2_arg;
Function UInt32x2_operator_and_UInt32x2;
inline constexpr std::array UInt32x2_operator_and_UInt32x2_args = { &UInt32x2_operator_and_UInt32x2_arg };

/// operator^ with UInt32x2
Variable UInt32x2_operator_xor_UInt32x2_arg;
Function UInt32x2_operator_xor_UInt32x2;
inline constexpr std::array UInt32x2_operator_xor_UInt32x2_args = { &UInt32x2_operator_xor_UInt32x2_arg };

/// operator<< with UInt32x2
Variable UInt32x2_operator_lsh_UInt32x2_arg;
Function UInt32x2_operator_lsh_UInt32x2;
inline constexpr std::array UInt32x2_operator_lsh_UInt32x2_args = { &UInt32x2_operator_lsh_UInt32x2_arg };

/// operator>> with UInt32x2
Variable UInt32x2_operator_rsh_UInt32x2_arg;
Function UInt32x2_operator_rsh_UInt32x2;
inline constexpr std::array UInt32x2_operator_rsh_UInt32x2_args = { &UInt32x2_operator_rsh_UInt32x2_arg };

/// operator|= with UInt32x2
Variable UInt32x2_operator_orasg_UInt32x2_arg;
Function UInt32x2_operator_orasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_orasg_UInt32x2_args = { &UInt32x2_operator_orasg_UInt32x2_arg };

/// operator&= with UInt32x2
Variable UInt32x2_operator_andasg_UInt32x2_arg;
Function UInt32x2_operator_andasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_andasg_UInt32x2_args = { &UInt32x2_operator_andasg_UInt32x2_arg };

/// operator^= with UInt32x2
Variable UInt32x2_operator_xorasg_UInt32x2_arg;
Function UInt32x2_operator_xorasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_xorasg_UInt32x2_args = { &UInt32x2_operator_xorasg_UInt32x2_arg };

/// operator<<= with UInt32x2
Variable UInt32x2_operator_lshasg_UInt32x2_arg;
Function UInt32x2_operator_lshasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_lshasg_UInt32x2_args = { &UInt32x2_operator_lshasg_UInt32x2_arg };

/// operator>>= with UInt32x2
Variable UInt32x2_operator_rhsasg_UInt32x2_arg;
Function UInt32x2_operator_rhsasg_UInt32x2;
inline constexpr std::array UInt32x2_operator_rhsasg_UInt32x2_args = { &UInt32x2_operator_rhsasg_UInt32x2_arg };

UInt32x2::UInt32x2()
{
    this->name = "u32x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    /// operator[] with Int32
    UInt32x2_operator_index_Int32_arg.name = "arg"_c;
    UInt32x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x2_operator_index_Int32.name = "operator[]"_c;
    UInt32x2_operator_index_Int32.backendIndex = 264;
    UInt32x2_operator_index_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32x2_operator_index_Int32.parameters = UInt32x2_operator_index_Int32_args;
    Symbol::Resolved(&UInt32x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x2_operator_index_Int32)->signature = "u32 operator[](i32)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt32
    UInt32x2_operator_index_UInt32_arg.name = "arg"_c;
    UInt32x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x2_operator_index_UInt32.name = "operator[]"_c;
    UInt32x2_operator_index_UInt32.backendIndex = 265;
    UInt32x2_operator_index_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32x2_operator_index_UInt32.parameters = UInt32x2_operator_index_UInt32_args;
    Symbol::Resolved(&UInt32x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_operator_index_UInt32)->signature = "u32 operator[](u32)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int16
    UInt32x2_operator_index_Int16_arg.name = "arg"_c;
    UInt32x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32x2_operator_index_Int16.name = "operator[]"_c;
    UInt32x2_operator_index_Int16.backendIndex = 266;
    UInt32x2_operator_index_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32x2_operator_index_Int16.parameters = UInt32x2_operator_index_Int16_args;
    Symbol::Resolved(&UInt32x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x2_operator_index_Int16)->signature = "u32 operator[](i16)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt16
    UInt32x2_operator_index_UInt16_arg.name = "arg"_c;
    UInt32x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32x2_operator_index_UInt16.name = "operator[]"_c;
    UInt32x2_operator_index_UInt16.backendIndex = 267;
    UInt32x2_operator_index_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32x2_operator_index_UInt16.parameters = UInt32x2_operator_index_UInt16_args;
    Symbol::Resolved(&UInt32x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x2_operator_index_UInt16)->signature = "u32 operator[](u16)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt32x2_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    /// operator+ with UInt32x2
    UInt32x2_operator_add_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_add_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_add_UInt32x2.name = "operator+"_c;
    UInt32x2_operator_add_UInt32x2.backendIndex = 268;
    UInt32x2_operator_add_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_add_UInt32x2.parameters = UInt32x2_operator_add_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2)->signature = "u32x2 operator+(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2)->name = "operator+(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2)->nameWithVarNames = "operator+(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_add_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator- with UInt32x2
    UInt32x2_operator_sub_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_sub_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_sub_UInt32x2.name = "operator-"_c;
    UInt32x2_operator_sub_UInt32x2.backendIndex = 269;
    UInt32x2_operator_sub_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_sub_UInt32x2.parameters = UInt32x2_operator_sub_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2)->signature = "u32x2 operator-(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2)->name = "operator-(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2)->nameWithVarNames = "operator-(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_sub_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator* with UInt32x2
    UInt32x2_operator_mul_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_mul_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_mul_UInt32x2.name = "operator*"_c;
    UInt32x2_operator_mul_UInt32x2.backendIndex = 270;
    UInt32x2_operator_mul_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_mul_UInt32x2.parameters = UInt32x2_operator_mul_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2)->signature = "u32x2 operator*(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2)->name = "operator*(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2)->nameWithVarNames = "operator*(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mul_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator/ with UInt32x2
    UInt32x2_operator_div_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_div_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_div_UInt32x2.name = "operator/"_c;
    UInt32x2_operator_div_UInt32x2.backendIndex = 271;
    UInt32x2_operator_div_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_div_UInt32x2.parameters = UInt32x2_operator_div_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2)->signature = "u32x2 operator/(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2)->name = "operator/(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2)->nameWithVarNames = "operator/(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_div_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator% with UInt32x2
    UInt32x2_operator_mod_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_mod_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_mod_UInt32x2.name = "operator%"_c;
    UInt32x2_operator_mod_UInt32x2.backendIndex = 272;
    UInt32x2_operator_mod_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_mod_UInt32x2.parameters = UInt32x2_operator_mod_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2)->signature = "u32x2 operator%(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2)->name = "operator%(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2)->nameWithVarNames = "operator%(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mod_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator+= with UInt32x2
    UInt32x2_operator_addasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_addasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_addasg_UInt32x2.name = "operator+="_c;
    UInt32x2_operator_addasg_UInt32x2.backendIndex = 273;
    UInt32x2_operator_addasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_addasg_UInt32x2.parameters = UInt32x2_operator_addasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2)->signature = "u32x2 operator+=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2)->name = "operator+=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2)->nameWithVarNames = "operator+=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_addasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator-= with UInt32x2
    UInt32x2_operator_subasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_subasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_subasg_UInt32x2.name = "operator-="_c;
    UInt32x2_operator_subasg_UInt32x2.backendIndex = 274;
    UInt32x2_operator_subasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_subasg_UInt32x2.parameters = UInt32x2_operator_subasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2)->signature = "u32x2 operator-=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2)->name = "operator-=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2)->nameWithVarNames = "operator-=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_subasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator*= with UInt32x2
    UInt32x2_operator_mulasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_mulasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_mulasg_UInt32x2.name = "operator*="_c;
    UInt32x2_operator_mulasg_UInt32x2.backendIndex = 275;
    UInt32x2_operator_mulasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_mulasg_UInt32x2.parameters = UInt32x2_operator_mulasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2)->signature = "u32x2 operator*=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2)->name = "operator*=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2)->nameWithVarNames = "operator*=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_mulasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator/= with UInt32x2
    UInt32x2_operator_divasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_divasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_divasg_UInt32x2.name = "operator/="_c;
    UInt32x2_operator_divasg_UInt32x2.backendIndex = 276;
    UInt32x2_operator_divasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_divasg_UInt32x2.parameters = UInt32x2_operator_divasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2)->signature = "u32x2 operator/=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2)->name = "operator/=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2)->nameWithVarNames = "operator/=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_divasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator< with UInt32x2
    UInt32x2_operator_lt_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_lt_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_lt_UInt32x2.name = "operator<"_c;
    UInt32x2_operator_lt_UInt32x2.backendIndex = 277;
    UInt32x2_operator_lt_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt32x2_operator_lt_UInt32x2.parameters = UInt32x2_operator_lt_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2)->signature = "b8x2 operator<(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2)->name = "operator<(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2)->nameWithVarNames = "operator<(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lt_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator<= with UInt32x2
    UInt32x2_operator_lte_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_lte_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_lte_UInt32x2.name = "operator<="_c;
    UInt32x2_operator_lte_UInt32x2.backendIndex = 278;
    UInt32x2_operator_lte_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt32x2_operator_lte_UInt32x2.parameters = UInt32x2_operator_lte_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2)->signature = "b8x2 operator<=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2)->name = "operator<=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2)->nameWithVarNames = "operator<=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lte_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator> with UInt32x2
    UInt32x2_operator_gt_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_gt_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_gt_UInt32x2.name = "operator>"_c;
    UInt32x2_operator_gt_UInt32x2.backendIndex = 279;
    UInt32x2_operator_gt_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt32x2_operator_gt_UInt32x2.parameters = UInt32x2_operator_gt_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2)->signature = "b8x2 operator>(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2)->name = "operator>(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2)->nameWithVarNames = "operator>(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_gt_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator>= with UInt32x2
    UInt32x2_operator_gte_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_gte_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_gte_UInt32x2.name = "operator>="_c;
    UInt32x2_operator_gte_UInt32x2.backendIndex = 280;
    UInt32x2_operator_gte_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt32x2_operator_gte_UInt32x2.parameters = UInt32x2_operator_gte_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2)->signature = "b8x2 operator>=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2)->name = "operator>=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2)->nameWithVarNames = "operator>=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_gte_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with UInt32x2
    UInt32x2_operator_eq_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_eq_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_eq_UInt32x2.name = "operator=="_c;
    UInt32x2_operator_eq_UInt32x2.backendIndex = 281;
    UInt32x2_operator_eq_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt32x2_operator_eq_UInt32x2.parameters = UInt32x2_operator_eq_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2)->signature = "b8x2 operator==(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2)->name = "operator==(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2)->nameWithVarNames = "operator==(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_eq_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with UInt32x2
    UInt32x2_operator_neq_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_neq_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_neq_UInt32x2.name = "operator!="_c;
    UInt32x2_operator_neq_UInt32x2.backendIndex = 282;
    UInt32x2_operator_neq_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt32x2_operator_neq_UInt32x2.parameters = UInt32x2_operator_neq_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2)->signature = "b8x2 operator!=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2)->name = "operator!=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2)->nameWithVarNames = "operator!=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_neq_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator* with Float32
    UInt32x2_operator_scale_Float32_arg.name = "arg"_c;
    UInt32x2_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt32x2_operator_scale_Float32.name = "operator*"_c;
    UInt32x2_operator_scale_Float32.backendIndex = 283;
    UInt32x2_operator_scale_Float32.returnType = Type::FullType { Float32x2Type.name };
    UInt32x2_operator_scale_Float32.parameters = UInt32x2_operator_scale_Float32_args;
    Symbol::Resolved(&UInt32x2_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x2_operator_scale_Float32)->signature = "f32x2 operator*(f32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_Float32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with UInt32
    UInt32x2_operator_scale_UInt32_arg.name = "arg"_c;
    UInt32x2_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x2_operator_scale_UInt32.name = "operator*"_c;
    UInt32x2_operator_scale_UInt32.backendIndex = 284;
    UInt32x2_operator_scale_UInt32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_scale_UInt32.parameters = UInt32x2_operator_scale_UInt32_args;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32)->signature = "u32x2 operator*(u32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_UInt32)->returnTypeSymbol = &UInt32x2Type;

    /// operator* with Int32
    UInt32x2_operator_scale_Int32_arg.name = "arg"_c;
    UInt32x2_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x2_operator_scale_Int32.name = "operator*"_c;
    UInt32x2_operator_scale_Int32.backendIndex = 285;
    UInt32x2_operator_scale_Int32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_scale_Int32.parameters = UInt32x2_operator_scale_Int32_args;
    Symbol::Resolved(&UInt32x2_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x2_operator_scale_Int32)->signature = "u32x2 operator*(i32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&UInt32x2_operator_scale_Int32)->returnTypeSymbol = &UInt32x2Type;

    /// operator| with UInt32x2
    UInt32x2_operator_or_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_or_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_or_UInt32x2.name = "operator|"_c;
    UInt32x2_operator_or_UInt32x2.backendIndex = 286;
    UInt32x2_operator_or_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_or_UInt32x2.parameters = UInt32x2_operator_or_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2)->signature = "u32x2 operator|(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2)->name = "operator|(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2)->nameWithVarNames = "operator|(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_or_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator& with UInt32x2
    UInt32x2_operator_and_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_and_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_and_UInt32x2.name = "operator&"_c;
    UInt32x2_operator_and_UInt32x2.backendIndex = 287;
    UInt32x2_operator_and_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_and_UInt32x2.parameters = UInt32x2_operator_and_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2)->signature = "u32x2 operator&(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2)->name = "operator&(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2)->nameWithVarNames = "operator&(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_and_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator^ with UInt32x2
    UInt32x2_operator_xor_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_xor_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_xor_UInt32x2.name = "operator^"_c;
    UInt32x2_operator_xor_UInt32x2.backendIndex = 288;
    UInt32x2_operator_xor_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_xor_UInt32x2.parameters = UInt32x2_operator_xor_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2)->signature = "u32x2 operator^(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2)->name = "operator^(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2)->nameWithVarNames = "operator^(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_xor_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator<< with UInt32x2
    UInt32x2_operator_lsh_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_lsh_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_lsh_UInt32x2.name = "operator<<"_c;
    UInt32x2_operator_lsh_UInt32x2.backendIndex = 289;
    UInt32x2_operator_lsh_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_lsh_UInt32x2.parameters = UInt32x2_operator_lsh_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2)->signature = "u32x2 operator<<(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2)->name = "operator<<(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2)->nameWithVarNames = "operator<<(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lsh_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator>> with UInt32x2
    UInt32x2_operator_rsh_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_rsh_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_rsh_UInt32x2.name = "operator>>"_c;
    UInt32x2_operator_rsh_UInt32x2.backendIndex = 290;
    UInt32x2_operator_rsh_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_rsh_UInt32x2.parameters = UInt32x2_operator_rsh_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2)->signature = "u32x2 operator>>(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2)->name = "operator>>(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2)->nameWithVarNames = "operator>>(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_rsh_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator|= with UInt32x2
    UInt32x2_operator_orasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_orasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_orasg_UInt32x2.name = "operator|="_c;
    UInt32x2_operator_orasg_UInt32x2.backendIndex = 291;
    UInt32x2_operator_orasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_orasg_UInt32x2.parameters = UInt32x2_operator_orasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2)->signature = "u32x2 operator|=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2)->name = "operator|=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2)->nameWithVarNames = "operator|=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_orasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator&= with UInt32x2
    UInt32x2_operator_andasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_andasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_andasg_UInt32x2.name = "operator&="_c;
    UInt32x2_operator_andasg_UInt32x2.backendIndex = 292;
    UInt32x2_operator_andasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_andasg_UInt32x2.parameters = UInt32x2_operator_andasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2)->signature = "u32x2 operator&=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2)->name = "operator&=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2)->nameWithVarNames = "operator&=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_andasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator^= with UInt32x2
    UInt32x2_operator_xorasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_xorasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_xorasg_UInt32x2.name = "operator^="_c;
    UInt32x2_operator_xorasg_UInt32x2.backendIndex = 293;
    UInt32x2_operator_xorasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_xorasg_UInt32x2.parameters = UInt32x2_operator_xorasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2)->signature = "u32x2 operator^=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2)->name = "operator^=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2)->nameWithVarNames = "operator^=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_xorasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator<<= with UInt32x2
    UInt32x2_operator_lshasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_lshasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_lshasg_UInt32x2.name = "operator<<="_c;
    UInt32x2_operator_lshasg_UInt32x2.backendIndex = 294;
    UInt32x2_operator_lshasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_lshasg_UInt32x2.parameters = UInt32x2_operator_lshasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2)->signature = "u32x2 operator<<=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2)->name = "operator<<=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2)->nameWithVarNames = "operator<<=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_lshasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// operator>>= with UInt32x2
    UInt32x2_operator_rhsasg_UInt32x2_arg.name = "arg"_c;
    UInt32x2_operator_rhsasg_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_operator_rhsasg_UInt32x2.name = "operator>>="_c;
    UInt32x2_operator_rhsasg_UInt32x2.backendIndex = 295;
    UInt32x2_operator_rhsasg_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_operator_rhsasg_UInt32x2.parameters = UInt32x2_operator_rhsasg_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2)->signature = "u32x2 operator>>=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2)->name = "operator>>=(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2)->nameWithVarNames = "operator>>=(arg : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_operator_rhsasg_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 124> { 
        std::pair{ "g"_c, &UInt32Type },
        std::pair{ "gg"_c, &UInt32x2Type },
        std::pair{ "ggg"_c, &UInt32x3Type },
        std::pair{ "gggg"_c, &UInt32x4Type },
        std::pair{ "gggr"_c, &UInt32x4Type },
        std::pair{ "ggr"_c, &UInt32x3Type },
        std::pair{ "ggrg"_c, &UInt32x4Type },
        std::pair{ "ggrr"_c, &UInt32x4Type },
        std::pair{ "gr"_c, &UInt32x2Type },
        std::pair{ "grg"_c, &UInt32x3Type },
        std::pair{ "grgg"_c, &UInt32x4Type },
        std::pair{ "grgr"_c, &UInt32x4Type },
        std::pair{ "grr"_c, &UInt32x3Type },
        std::pair{ "grrg"_c, &UInt32x4Type },
        std::pair{ "grrr"_c, &UInt32x4Type },
        std::pair{ "operator!="_c, &UInt32x2_operator_neq_UInt32x2 },
        std::pair{ "operator!=(u32x2)"_c, &UInt32x2_operator_neq_UInt32x2 },
        std::pair{ "operator%"_c, &UInt32x2_operator_mod_UInt32x2 },
        std::pair{ "operator%(u32x2)"_c, &UInt32x2_operator_mod_UInt32x2 },
        std::pair{ "operator&"_c, &UInt32x2_operator_and_UInt32x2 },
        std::pair{ "operator&(u32x2)"_c, &UInt32x2_operator_and_UInt32x2 },
        std::pair{ "operator&="_c, &UInt32x2_operator_andasg_UInt32x2 },
        std::pair{ "operator&=(u32x2)"_c, &UInt32x2_operator_andasg_UInt32x2 },
        std::pair{ "operator*"_c, &UInt32x2_operator_mul_UInt32x2 },
        std::pair{ "operator*"_c, &UInt32x2_operator_scale_Float32 },
        std::pair{ "operator*"_c, &UInt32x2_operator_scale_UInt32 },
        std::pair{ "operator*"_c, &UInt32x2_operator_scale_Int32 },
        std::pair{ "operator*(f32)"_c, &UInt32x2_operator_scale_Float32 },
        std::pair{ "operator*(i32)"_c, &UInt32x2_operator_scale_Int32 },
        std::pair{ "operator*(u32)"_c, &UInt32x2_operator_scale_UInt32 },
        std::pair{ "operator*(u32x2)"_c, &UInt32x2_operator_mul_UInt32x2 },
        std::pair{ "operator*="_c, &UInt32x2_operator_mulasg_UInt32x2 },
        std::pair{ "operator*=(u32x2)"_c, &UInt32x2_operator_mulasg_UInt32x2 },
        std::pair{ "operator+"_c, &UInt32x2_operator_add_UInt32x2 },
        std::pair{ "operator+(u32x2)"_c, &UInt32x2_operator_add_UInt32x2 },
        std::pair{ "operator+="_c, &UInt32x2_operator_addasg_UInt32x2 },
        std::pair{ "operator+=(u32x2)"_c, &UInt32x2_operator_addasg_UInt32x2 },
        std::pair{ "operator-"_c, &UInt32x2_operator_sub_UInt32x2 },
        std::pair{ "operator-(u32x2)"_c, &UInt32x2_operator_sub_UInt32x2 },
        std::pair{ "operator-="_c, &UInt32x2_operator_subasg_UInt32x2 },
        std::pair{ "operator-=(u32x2)"_c, &UInt32x2_operator_subasg_UInt32x2 },
        std::pair{ "operator/"_c, &UInt32x2_operator_div_UInt32x2 },
        std::pair{ "operator/(u32x2)"_c, &UInt32x2_operator_div_UInt32x2 },
        std::pair{ "operator/="_c, &UInt32x2_operator_divasg_UInt32x2 },
        std::pair{ "operator/=(u32x2)"_c, &UInt32x2_operator_divasg_UInt32x2 },
        std::pair{ "operator<"_c, &UInt32x2_operator_lt_UInt32x2 },
        std::pair{ "operator<(u32x2)"_c, &UInt32x2_operator_lt_UInt32x2 },
        std::pair{ "operator<<"_c, &UInt32x2_operator_lsh_UInt32x2 },
        std::pair{ "operator<<(u32x2)"_c, &UInt32x2_operator_lsh_UInt32x2 },
        std::pair{ "operator<<="_c, &UInt32x2_operator_lshasg_UInt32x2 },
        std::pair{ "operator<<=(u32x2)"_c, &UInt32x2_operator_lshasg_UInt32x2 },
        std::pair{ "operator<="_c, &UInt32x2_operator_lte_UInt32x2 },
        std::pair{ "operator<=(u32x2)"_c, &UInt32x2_operator_lte_UInt32x2 },
        std::pair{ "operator=="_c, &UInt32x2_operator_eq_UInt32x2 },
        std::pair{ "operator==(u32x2)"_c, &UInt32x2_operator_eq_UInt32x2 },
        std::pair{ "operator>"_c, &UInt32x2_operator_gt_UInt32x2 },
        std::pair{ "operator>(u32x2)"_c, &UInt32x2_operator_gt_UInt32x2 },
        std::pair{ "operator>="_c, &UInt32x2_operator_gte_UInt32x2 },
        std::pair{ "operator>=(u32x2)"_c, &UInt32x2_operator_gte_UInt32x2 },
        std::pair{ "operator>>"_c, &UInt32x2_operator_rsh_UInt32x2 },
        std::pair{ "operator>>(u32x2)"_c, &UInt32x2_operator_rsh_UInt32x2 },
        std::pair{ "operator>>="_c, &UInt32x2_operator_rhsasg_UInt32x2 },
        std::pair{ "operator>>=(u32x2)"_c, &UInt32x2_operator_rhsasg_UInt32x2 },
        std::pair{ "operator[]"_c, &UInt32x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &UInt32x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &UInt32x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &UInt32x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &UInt32x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &UInt32x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &UInt32x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &UInt32x2_operator_index_UInt32 },
        std::pair{ "operator^"_c, &UInt32x2_operator_xor_UInt32x2 },
        std::pair{ "operator^(u32x2)"_c, &UInt32x2_operator_xor_UInt32x2 },
        std::pair{ "operator^="_c, &UInt32x2_operator_xorasg_UInt32x2 },
        std::pair{ "operator^=(u32x2)"_c, &UInt32x2_operator_xorasg_UInt32x2 },
        std::pair{ "operator|"_c, &UInt32x2_operator_or_UInt32x2 },
        std::pair{ "operator|(u32x2)"_c, &UInt32x2_operator_or_UInt32x2 },
        std::pair{ "operator|="_c, &UInt32x2_operator_orasg_UInt32x2 },
        std::pair{ "operator|=(u32x2)"_c, &UInt32x2_operator_orasg_UInt32x2 },
        std::pair{ "r"_c, &UInt32Type },
        std::pair{ "rg"_c, &UInt32x2Type },
        std::pair{ "rgg"_c, &UInt32x3Type },
        std::pair{ "rggg"_c, &UInt32x4Type },
        std::pair{ "rggr"_c, &UInt32x4Type },
        std::pair{ "rgr"_c, &UInt32x3Type },
        std::pair{ "rgrg"_c, &UInt32x4Type },
        std::pair{ "rgrr"_c, &UInt32x4Type },
        std::pair{ "rr"_c, &UInt32x2Type },
        std::pair{ "rrg"_c, &UInt32x3Type },
        std::pair{ "rrgg"_c, &UInt32x4Type },
        std::pair{ "rrgr"_c, &UInt32x4Type },
        std::pair{ "rrr"_c, &UInt32x3Type },
        std::pair{ "rrrg"_c, &UInt32x4Type },
        std::pair{ "rrrr"_c, &UInt32x4Type },
        std::pair{ "x"_c, &UInt32Type },
        std::pair{ "xx"_c, &UInt32x2Type },
        std::pair{ "xxx"_c, &UInt32x3Type },
        std::pair{ "xxxx"_c, &UInt32x4Type },
        std::pair{ "xxxy"_c, &UInt32x4Type },
        std::pair{ "xxy"_c, &UInt32x3Type },
        std::pair{ "xxyx"_c, &UInt32x4Type },
        std::pair{ "xxyy"_c, &UInt32x4Type },
        std::pair{ "xy"_c, &UInt32x2Type },
        std::pair{ "xyx"_c, &UInt32x3Type },
        std::pair{ "xyxx"_c, &UInt32x4Type },
        std::pair{ "xyxy"_c, &UInt32x4Type },
        std::pair{ "xyy"_c, &UInt32x3Type },
        std::pair{ "xyyx"_c, &UInt32x4Type },
        std::pair{ "xyyy"_c, &UInt32x4Type },
        std::pair{ "y"_c, &UInt32Type },
        std::pair{ "yx"_c, &UInt32x2Type },
        std::pair{ "yxx"_c, &UInt32x3Type },
        std::pair{ "yxxx"_c, &UInt32x4Type },
        std::pair{ "yxxy"_c, &UInt32x4Type },
        std::pair{ "yxy"_c, &UInt32x3Type },
        std::pair{ "yxyx"_c, &UInt32x4Type },
        std::pair{ "yxyy"_c, &UInt32x4Type },
        std::pair{ "yy"_c, &UInt32x2Type },
        std::pair{ "yyx"_c, &UInt32x3Type },
        std::pair{ "yyxx"_c, &UInt32x4Type },
        std::pair{ "yyxy"_c, &UInt32x4Type },
        std::pair{ "yyy"_c, &UInt32x3Type },
        std::pair{ "yyyx"_c, &UInt32x4Type },
        std::pair{ "yyyy"_c, &UInt32x4Type }
    };
}
UInt32x2 UInt32x2Type;

/// operator[] with Int32
Variable Int32x2_operator_index_Int32_arg;
Function Int32x2_operator_index_Int32;
inline constexpr std::array Int32x2_operator_index_Int32_args = { &Int32x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int32x2_operator_index_UInt32_arg;
Function Int32x2_operator_index_UInt32;
inline constexpr std::array Int32x2_operator_index_UInt32_args = { &Int32x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int32x2_operator_index_Int16_arg;
Function Int32x2_operator_index_Int16;
inline constexpr std::array Int32x2_operator_index_Int16_args = { &Int32x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int32x2_operator_index_UInt16_arg;
Function Int32x2_operator_index_UInt16;
inline constexpr std::array Int32x2_operator_index_UInt16_args = { &Int32x2_operator_index_UInt16_arg };

/// operator+ with Int32x2
Variable Int32x2_operator_add_Int32x2_arg;
Function Int32x2_operator_add_Int32x2;
inline constexpr std::array Int32x2_operator_add_Int32x2_args = { &Int32x2_operator_add_Int32x2_arg };

/// operator- with Int32x2
Variable Int32x2_operator_sub_Int32x2_arg;
Function Int32x2_operator_sub_Int32x2;
inline constexpr std::array Int32x2_operator_sub_Int32x2_args = { &Int32x2_operator_sub_Int32x2_arg };

/// operator* with Int32x2
Variable Int32x2_operator_mul_Int32x2_arg;
Function Int32x2_operator_mul_Int32x2;
inline constexpr std::array Int32x2_operator_mul_Int32x2_args = { &Int32x2_operator_mul_Int32x2_arg };

/// operator/ with Int32x2
Variable Int32x2_operator_div_Int32x2_arg;
Function Int32x2_operator_div_Int32x2;
inline constexpr std::array Int32x2_operator_div_Int32x2_args = { &Int32x2_operator_div_Int32x2_arg };

/// operator% with Int32x2
Variable Int32x2_operator_mod_Int32x2_arg;
Function Int32x2_operator_mod_Int32x2;
inline constexpr std::array Int32x2_operator_mod_Int32x2_args = { &Int32x2_operator_mod_Int32x2_arg };

/// operator+= with Int32x2
Variable Int32x2_operator_addasg_Int32x2_arg;
Function Int32x2_operator_addasg_Int32x2;
inline constexpr std::array Int32x2_operator_addasg_Int32x2_args = { &Int32x2_operator_addasg_Int32x2_arg };

/// operator-= with Int32x2
Variable Int32x2_operator_subasg_Int32x2_arg;
Function Int32x2_operator_subasg_Int32x2;
inline constexpr std::array Int32x2_operator_subasg_Int32x2_args = { &Int32x2_operator_subasg_Int32x2_arg };

/// operator*= with Int32x2
Variable Int32x2_operator_mulasg_Int32x2_arg;
Function Int32x2_operator_mulasg_Int32x2;
inline constexpr std::array Int32x2_operator_mulasg_Int32x2_args = { &Int32x2_operator_mulasg_Int32x2_arg };

/// operator/= with Int32x2
Variable Int32x2_operator_divasg_Int32x2_arg;
Function Int32x2_operator_divasg_Int32x2;
inline constexpr std::array Int32x2_operator_divasg_Int32x2_args = { &Int32x2_operator_divasg_Int32x2_arg };

/// operator< with Int32x2
Variable Int32x2_operator_lt_Int32x2_arg;
Function Int32x2_operator_lt_Int32x2;
inline constexpr std::array Int32x2_operator_lt_Int32x2_args = { &Int32x2_operator_lt_Int32x2_arg };

/// operator<= with Int32x2
Variable Int32x2_operator_lte_Int32x2_arg;
Function Int32x2_operator_lte_Int32x2;
inline constexpr std::array Int32x2_operator_lte_Int32x2_args = { &Int32x2_operator_lte_Int32x2_arg };

/// operator> with Int32x2
Variable Int32x2_operator_gt_Int32x2_arg;
Function Int32x2_operator_gt_Int32x2;
inline constexpr std::array Int32x2_operator_gt_Int32x2_args = { &Int32x2_operator_gt_Int32x2_arg };

/// operator>= with Int32x2
Variable Int32x2_operator_gte_Int32x2_arg;
Function Int32x2_operator_gte_Int32x2;
inline constexpr std::array Int32x2_operator_gte_Int32x2_args = { &Int32x2_operator_gte_Int32x2_arg };

/// operator== with Int32x2
Variable Int32x2_operator_eq_Int32x2_arg;
Function Int32x2_operator_eq_Int32x2;
inline constexpr std::array Int32x2_operator_eq_Int32x2_args = { &Int32x2_operator_eq_Int32x2_arg };

/// operator!= with Int32x2
Variable Int32x2_operator_neq_Int32x2_arg;
Function Int32x2_operator_neq_Int32x2;
inline constexpr std::array Int32x2_operator_neq_Int32x2_args = { &Int32x2_operator_neq_Int32x2_arg };

/// operator* with Float32
Variable Int32x2_operator_scale_Float32_arg;
Function Int32x2_operator_scale_Float32;
inline constexpr std::array Int32x2_operator_scale_Float32_args = { &Int32x2_operator_scale_Float32_arg };

/// operator* with UInt32
Variable Int32x2_operator_scale_UInt32_arg;
Function Int32x2_operator_scale_UInt32;
inline constexpr std::array Int32x2_operator_scale_UInt32_args = { &Int32x2_operator_scale_UInt32_arg };

/// operator* with Int32
Variable Int32x2_operator_scale_Int32_arg;
Function Int32x2_operator_scale_Int32;
inline constexpr std::array Int32x2_operator_scale_Int32_args = { &Int32x2_operator_scale_Int32_arg };

/// operator| with Int32x2
Variable Int32x2_operator_or_Int32x2_arg;
Function Int32x2_operator_or_Int32x2;
inline constexpr std::array Int32x2_operator_or_Int32x2_args = { &Int32x2_operator_or_Int32x2_arg };

/// operator& with Int32x2
Variable Int32x2_operator_and_Int32x2_arg;
Function Int32x2_operator_and_Int32x2;
inline constexpr std::array Int32x2_operator_and_Int32x2_args = { &Int32x2_operator_and_Int32x2_arg };

/// operator^ with Int32x2
Variable Int32x2_operator_xor_Int32x2_arg;
Function Int32x2_operator_xor_Int32x2;
inline constexpr std::array Int32x2_operator_xor_Int32x2_args = { &Int32x2_operator_xor_Int32x2_arg };

/// operator<< with Int32x2
Variable Int32x2_operator_lsh_Int32x2_arg;
Function Int32x2_operator_lsh_Int32x2;
inline constexpr std::array Int32x2_operator_lsh_Int32x2_args = { &Int32x2_operator_lsh_Int32x2_arg };

/// operator>> with Int32x2
Variable Int32x2_operator_rsh_Int32x2_arg;
Function Int32x2_operator_rsh_Int32x2;
inline constexpr std::array Int32x2_operator_rsh_Int32x2_args = { &Int32x2_operator_rsh_Int32x2_arg };

/// operator|= with Int32x2
Variable Int32x2_operator_orasg_Int32x2_arg;
Function Int32x2_operator_orasg_Int32x2;
inline constexpr std::array Int32x2_operator_orasg_Int32x2_args = { &Int32x2_operator_orasg_Int32x2_arg };

/// operator&= with Int32x2
Variable Int32x2_operator_andasg_Int32x2_arg;
Function Int32x2_operator_andasg_Int32x2;
inline constexpr std::array Int32x2_operator_andasg_Int32x2_args = { &Int32x2_operator_andasg_Int32x2_arg };

/// operator^= with Int32x2
Variable Int32x2_operator_xorasg_Int32x2_arg;
Function Int32x2_operator_xorasg_Int32x2;
inline constexpr std::array Int32x2_operator_xorasg_Int32x2_args = { &Int32x2_operator_xorasg_Int32x2_arg };

/// operator<<= with Int32x2
Variable Int32x2_operator_lshasg_Int32x2_arg;
Function Int32x2_operator_lshasg_Int32x2;
inline constexpr std::array Int32x2_operator_lshasg_Int32x2_args = { &Int32x2_operator_lshasg_Int32x2_arg };

/// operator>>= with Int32x2
Variable Int32x2_operator_rhsasg_Int32x2_arg;
Function Int32x2_operator_rhsasg_Int32x2;
inline constexpr std::array Int32x2_operator_rhsasg_Int32x2_args = { &Int32x2_operator_rhsasg_Int32x2_arg };

Int32x2::Int32x2()
{
    this->name = "i32x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    /// operator[] with Int32
    Int32x2_operator_index_Int32_arg.name = "arg"_c;
    Int32x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x2_operator_index_Int32.name = "operator[]"_c;
    Int32x2_operator_index_Int32.backendIndex = 311;
    Int32x2_operator_index_Int32.returnType = Type::FullType { Int32Type.name };
    Int32x2_operator_index_Int32.parameters = Int32x2_operator_index_Int32_args;
    Symbol::Resolved(&Int32x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_operator_index_Int32)->signature = "i32 operator[](i32)"_c;
    Symbol::Resolved(&Int32x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int32x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int32x2_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt32
    Int32x2_operator_index_UInt32_arg.name = "arg"_c;
    Int32x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x2_operator_index_UInt32.name = "operator[]"_c;
    Int32x2_operator_index_UInt32.backendIndex = 312;
    Int32x2_operator_index_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32x2_operator_index_UInt32.parameters = Int32x2_operator_index_UInt32_args;
    Symbol::Resolved(&Int32x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x2_operator_index_UInt32)->signature = "i32 operator[](u32)"_c;
    Symbol::Resolved(&Int32x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int32x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int32x2_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int16
    Int32x2_operator_index_Int16_arg.name = "arg"_c;
    Int32x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32x2_operator_index_Int16.name = "operator[]"_c;
    Int32x2_operator_index_Int16.backendIndex = 313;
    Int32x2_operator_index_Int16.returnType = Type::FullType { Int32Type.name };
    Int32x2_operator_index_Int16.parameters = Int32x2_operator_index_Int16_args;
    Symbol::Resolved(&Int32x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x2_operator_index_Int16)->signature = "i32 operator[](i16)"_c;
    Symbol::Resolved(&Int32x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int32x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int32x2_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt16
    Int32x2_operator_index_UInt16_arg.name = "arg"_c;
    Int32x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32x2_operator_index_UInt16.name = "operator[]"_c;
    Int32x2_operator_index_UInt16.backendIndex = 314;
    Int32x2_operator_index_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32x2_operator_index_UInt16.parameters = Int32x2_operator_index_UInt16_args;
    Symbol::Resolved(&Int32x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x2_operator_index_UInt16)->signature = "i32 operator[](u16)"_c;
    Symbol::Resolved(&Int32x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int32x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int32x2_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    /// operator+ with Int32x2
    Int32x2_operator_add_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_add_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_add_Int32x2.name = "operator+"_c;
    Int32x2_operator_add_Int32x2.backendIndex = 315;
    Int32x2_operator_add_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_add_Int32x2.parameters = Int32x2_operator_add_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_add_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_add_Int32x2)->signature = "i32x2 operator+(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_add_Int32x2)->name = "operator+(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_add_Int32x2)->nameWithVarNames = "operator+(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_add_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator- with Int32x2
    Int32x2_operator_sub_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_sub_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_sub_Int32x2.name = "operator-"_c;
    Int32x2_operator_sub_Int32x2.backendIndex = 316;
    Int32x2_operator_sub_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_sub_Int32x2.parameters = Int32x2_operator_sub_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2)->signature = "i32x2 operator-(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2)->name = "operator-(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2)->nameWithVarNames = "operator-(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_sub_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator* with Int32x2
    Int32x2_operator_mul_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_mul_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_mul_Int32x2.name = "operator*"_c;
    Int32x2_operator_mul_Int32x2.backendIndex = 317;
    Int32x2_operator_mul_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_mul_Int32x2.parameters = Int32x2_operator_mul_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2)->signature = "i32x2 operator*(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2)->name = "operator*(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2)->nameWithVarNames = "operator*(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mul_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator/ with Int32x2
    Int32x2_operator_div_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_div_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_div_Int32x2.name = "operator/"_c;
    Int32x2_operator_div_Int32x2.backendIndex = 318;
    Int32x2_operator_div_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_div_Int32x2.parameters = Int32x2_operator_div_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_div_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_div_Int32x2)->signature = "i32x2 operator/(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_div_Int32x2)->name = "operator/(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_div_Int32x2)->nameWithVarNames = "operator/(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_div_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator% with Int32x2
    Int32x2_operator_mod_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_mod_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_mod_Int32x2.name = "operator%"_c;
    Int32x2_operator_mod_Int32x2.backendIndex = 319;
    Int32x2_operator_mod_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_mod_Int32x2.parameters = Int32x2_operator_mod_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2)->signature = "i32x2 operator%(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2)->name = "operator%(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2)->nameWithVarNames = "operator%(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mod_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator+= with Int32x2
    Int32x2_operator_addasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_addasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_addasg_Int32x2.name = "operator+="_c;
    Int32x2_operator_addasg_Int32x2.backendIndex = 320;
    Int32x2_operator_addasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_addasg_Int32x2.parameters = Int32x2_operator_addasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2)->signature = "i32x2 operator+=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2)->name = "operator+=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2)->nameWithVarNames = "operator+=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_addasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator-= with Int32x2
    Int32x2_operator_subasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_subasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_subasg_Int32x2.name = "operator-="_c;
    Int32x2_operator_subasg_Int32x2.backendIndex = 321;
    Int32x2_operator_subasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_subasg_Int32x2.parameters = Int32x2_operator_subasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2)->signature = "i32x2 operator-=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2)->name = "operator-=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2)->nameWithVarNames = "operator-=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_subasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator*= with Int32x2
    Int32x2_operator_mulasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_mulasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_mulasg_Int32x2.name = "operator*="_c;
    Int32x2_operator_mulasg_Int32x2.backendIndex = 322;
    Int32x2_operator_mulasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_mulasg_Int32x2.parameters = Int32x2_operator_mulasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2)->signature = "i32x2 operator*=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2)->name = "operator*=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2)->nameWithVarNames = "operator*=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_mulasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator/= with Int32x2
    Int32x2_operator_divasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_divasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_divasg_Int32x2.name = "operator/="_c;
    Int32x2_operator_divasg_Int32x2.backendIndex = 323;
    Int32x2_operator_divasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_divasg_Int32x2.parameters = Int32x2_operator_divasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2)->signature = "i32x2 operator/=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2)->name = "operator/=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2)->nameWithVarNames = "operator/=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_divasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator< with Int32x2
    Int32x2_operator_lt_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_lt_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_lt_Int32x2.name = "operator<"_c;
    Int32x2_operator_lt_Int32x2.backendIndex = 324;
    Int32x2_operator_lt_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Int32x2_operator_lt_Int32x2.parameters = Int32x2_operator_lt_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2)->signature = "b8x2 operator<(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2)->name = "operator<(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2)->nameWithVarNames = "operator<(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lt_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator<= with Int32x2
    Int32x2_operator_lte_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_lte_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_lte_Int32x2.name = "operator<="_c;
    Int32x2_operator_lte_Int32x2.backendIndex = 325;
    Int32x2_operator_lte_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Int32x2_operator_lte_Int32x2.parameters = Int32x2_operator_lte_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2)->signature = "b8x2 operator<=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2)->name = "operator<=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2)->nameWithVarNames = "operator<=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lte_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator> with Int32x2
    Int32x2_operator_gt_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_gt_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_gt_Int32x2.name = "operator>"_c;
    Int32x2_operator_gt_Int32x2.backendIndex = 326;
    Int32x2_operator_gt_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Int32x2_operator_gt_Int32x2.parameters = Int32x2_operator_gt_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2)->signature = "b8x2 operator>(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2)->name = "operator>(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2)->nameWithVarNames = "operator>(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_gt_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator>= with Int32x2
    Int32x2_operator_gte_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_gte_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_gte_Int32x2.name = "operator>="_c;
    Int32x2_operator_gte_Int32x2.backendIndex = 327;
    Int32x2_operator_gte_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Int32x2_operator_gte_Int32x2.parameters = Int32x2_operator_gte_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2)->signature = "b8x2 operator>=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2)->name = "operator>=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2)->nameWithVarNames = "operator>=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_gte_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with Int32x2
    Int32x2_operator_eq_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_eq_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_eq_Int32x2.name = "operator=="_c;
    Int32x2_operator_eq_Int32x2.backendIndex = 328;
    Int32x2_operator_eq_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Int32x2_operator_eq_Int32x2.parameters = Int32x2_operator_eq_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2)->signature = "b8x2 operator==(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2)->name = "operator==(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2)->nameWithVarNames = "operator==(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_eq_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with Int32x2
    Int32x2_operator_neq_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_neq_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_neq_Int32x2.name = "operator!="_c;
    Int32x2_operator_neq_Int32x2.backendIndex = 329;
    Int32x2_operator_neq_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Int32x2_operator_neq_Int32x2.parameters = Int32x2_operator_neq_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2)->signature = "b8x2 operator!=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2)->name = "operator!=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2)->nameWithVarNames = "operator!=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_neq_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator* with Float32
    Int32x2_operator_scale_Float32_arg.name = "arg"_c;
    Int32x2_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int32x2_operator_scale_Float32.name = "operator*"_c;
    Int32x2_operator_scale_Float32.backendIndex = 330;
    Int32x2_operator_scale_Float32.returnType = Type::FullType { Float32x2Type.name };
    Int32x2_operator_scale_Float32.parameters = Int32x2_operator_scale_Float32_args;
    Symbol::Resolved(&Int32x2_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x2_operator_scale_Float32)->signature = "f32x2 operator*(f32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_Float32)->returnTypeSymbol = &Float32x2Type;

    /// operator* with UInt32
    Int32x2_operator_scale_UInt32_arg.name = "arg"_c;
    Int32x2_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x2_operator_scale_UInt32.name = "operator*"_c;
    Int32x2_operator_scale_UInt32.backendIndex = 331;
    Int32x2_operator_scale_UInt32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_scale_UInt32.parameters = Int32x2_operator_scale_UInt32_args;
    Symbol::Resolved(&Int32x2_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x2_operator_scale_UInt32)->signature = "i32x2 operator*(u32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_UInt32)->returnTypeSymbol = &Int32x2Type;

    /// operator* with Int32
    Int32x2_operator_scale_Int32_arg.name = "arg"_c;
    Int32x2_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x2_operator_scale_Int32.name = "operator*"_c;
    Int32x2_operator_scale_Int32.backendIndex = 332;
    Int32x2_operator_scale_Int32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_scale_Int32.parameters = Int32x2_operator_scale_Int32_args;
    Symbol::Resolved(&Int32x2_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_operator_scale_Int32)->signature = "i32x2 operator*(i32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Int32x2_operator_scale_Int32)->returnTypeSymbol = &Int32x2Type;

    /// operator| with Int32x2
    Int32x2_operator_or_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_or_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_or_Int32x2.name = "operator|"_c;
    Int32x2_operator_or_Int32x2.backendIndex = 333;
    Int32x2_operator_or_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_or_Int32x2.parameters = Int32x2_operator_or_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_or_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_or_Int32x2)->signature = "i32x2 operator|(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_or_Int32x2)->name = "operator|(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_or_Int32x2)->nameWithVarNames = "operator|(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_or_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator& with Int32x2
    Int32x2_operator_and_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_and_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_and_Int32x2.name = "operator&"_c;
    Int32x2_operator_and_Int32x2.backendIndex = 334;
    Int32x2_operator_and_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_and_Int32x2.parameters = Int32x2_operator_and_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_and_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_and_Int32x2)->signature = "i32x2 operator&(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_and_Int32x2)->name = "operator&(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_and_Int32x2)->nameWithVarNames = "operator&(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_and_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator^ with Int32x2
    Int32x2_operator_xor_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_xor_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_xor_Int32x2.name = "operator^"_c;
    Int32x2_operator_xor_Int32x2.backendIndex = 335;
    Int32x2_operator_xor_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_xor_Int32x2.parameters = Int32x2_operator_xor_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2)->signature = "i32x2 operator^(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2)->name = "operator^(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2)->nameWithVarNames = "operator^(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_xor_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator<< with Int32x2
    Int32x2_operator_lsh_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_lsh_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_lsh_Int32x2.name = "operator<<"_c;
    Int32x2_operator_lsh_Int32x2.backendIndex = 336;
    Int32x2_operator_lsh_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_lsh_Int32x2.parameters = Int32x2_operator_lsh_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2)->signature = "i32x2 operator<<(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2)->name = "operator<<(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2)->nameWithVarNames = "operator<<(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lsh_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator>> with Int32x2
    Int32x2_operator_rsh_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_rsh_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_rsh_Int32x2.name = "operator>>"_c;
    Int32x2_operator_rsh_Int32x2.backendIndex = 337;
    Int32x2_operator_rsh_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_rsh_Int32x2.parameters = Int32x2_operator_rsh_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2)->signature = "i32x2 operator>>(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2)->name = "operator>>(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2)->nameWithVarNames = "operator>>(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_rsh_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator|= with Int32x2
    Int32x2_operator_orasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_orasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_orasg_Int32x2.name = "operator|="_c;
    Int32x2_operator_orasg_Int32x2.backendIndex = 338;
    Int32x2_operator_orasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_orasg_Int32x2.parameters = Int32x2_operator_orasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2)->signature = "i32x2 operator|=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2)->name = "operator|=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2)->nameWithVarNames = "operator|=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_orasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator&= with Int32x2
    Int32x2_operator_andasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_andasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_andasg_Int32x2.name = "operator&="_c;
    Int32x2_operator_andasg_Int32x2.backendIndex = 339;
    Int32x2_operator_andasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_andasg_Int32x2.parameters = Int32x2_operator_andasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2)->signature = "i32x2 operator&=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2)->name = "operator&=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2)->nameWithVarNames = "operator&=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_andasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator^= with Int32x2
    Int32x2_operator_xorasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_xorasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_xorasg_Int32x2.name = "operator^="_c;
    Int32x2_operator_xorasg_Int32x2.backendIndex = 340;
    Int32x2_operator_xorasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_xorasg_Int32x2.parameters = Int32x2_operator_xorasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2)->signature = "i32x2 operator^=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2)->name = "operator^=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2)->nameWithVarNames = "operator^=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_xorasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator<<= with Int32x2
    Int32x2_operator_lshasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_lshasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_lshasg_Int32x2.name = "operator<<="_c;
    Int32x2_operator_lshasg_Int32x2.backendIndex = 341;
    Int32x2_operator_lshasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_lshasg_Int32x2.parameters = Int32x2_operator_lshasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2)->signature = "i32x2 operator<<=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2)->name = "operator<<=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2)->nameWithVarNames = "operator<<=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_lshasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// operator>>= with Int32x2
    Int32x2_operator_rhsasg_Int32x2_arg.name = "arg"_c;
    Int32x2_operator_rhsasg_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_operator_rhsasg_Int32x2.name = "operator>>="_c;
    Int32x2_operator_rhsasg_Int32x2.backendIndex = 342;
    Int32x2_operator_rhsasg_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_operator_rhsasg_Int32x2.parameters = Int32x2_operator_rhsasg_Int32x2_args;
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2)->signature = "i32x2 operator>>=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2)->name = "operator>>=(i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2)->nameWithVarNames = "operator>>=(arg : i32x2)"_c;
    Symbol::Resolved(&Int32x2_operator_rhsasg_Int32x2)->returnTypeSymbol = &Int32x2Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 124> { 
        std::pair{ "g"_c, &Int32Type },
        std::pair{ "gg"_c, &Int32x2Type },
        std::pair{ "ggg"_c, &Int32x3Type },
        std::pair{ "gggg"_c, &Int32x4Type },
        std::pair{ "gggr"_c, &Int32x4Type },
        std::pair{ "ggr"_c, &Int32x3Type },
        std::pair{ "ggrg"_c, &Int32x4Type },
        std::pair{ "ggrr"_c, &Int32x4Type },
        std::pair{ "gr"_c, &Int32x2Type },
        std::pair{ "grg"_c, &Int32x3Type },
        std::pair{ "grgg"_c, &Int32x4Type },
        std::pair{ "grgr"_c, &Int32x4Type },
        std::pair{ "grr"_c, &Int32x3Type },
        std::pair{ "grrg"_c, &Int32x4Type },
        std::pair{ "grrr"_c, &Int32x4Type },
        std::pair{ "operator!="_c, &Int32x2_operator_neq_Int32x2 },
        std::pair{ "operator!=(i32x2)"_c, &Int32x2_operator_neq_Int32x2 },
        std::pair{ "operator%"_c, &Int32x2_operator_mod_Int32x2 },
        std::pair{ "operator%(i32x2)"_c, &Int32x2_operator_mod_Int32x2 },
        std::pair{ "operator&"_c, &Int32x2_operator_and_Int32x2 },
        std::pair{ "operator&(i32x2)"_c, &Int32x2_operator_and_Int32x2 },
        std::pair{ "operator&="_c, &Int32x2_operator_andasg_Int32x2 },
        std::pair{ "operator&=(i32x2)"_c, &Int32x2_operator_andasg_Int32x2 },
        std::pair{ "operator*"_c, &Int32x2_operator_mul_Int32x2 },
        std::pair{ "operator*"_c, &Int32x2_operator_scale_Float32 },
        std::pair{ "operator*"_c, &Int32x2_operator_scale_UInt32 },
        std::pair{ "operator*"_c, &Int32x2_operator_scale_Int32 },
        std::pair{ "operator*(f32)"_c, &Int32x2_operator_scale_Float32 },
        std::pair{ "operator*(i32)"_c, &Int32x2_operator_scale_Int32 },
        std::pair{ "operator*(i32x2)"_c, &Int32x2_operator_mul_Int32x2 },
        std::pair{ "operator*(u32)"_c, &Int32x2_operator_scale_UInt32 },
        std::pair{ "operator*="_c, &Int32x2_operator_mulasg_Int32x2 },
        std::pair{ "operator*=(i32x2)"_c, &Int32x2_operator_mulasg_Int32x2 },
        std::pair{ "operator+"_c, &Int32x2_operator_add_Int32x2 },
        std::pair{ "operator+(i32x2)"_c, &Int32x2_operator_add_Int32x2 },
        std::pair{ "operator+="_c, &Int32x2_operator_addasg_Int32x2 },
        std::pair{ "operator+=(i32x2)"_c, &Int32x2_operator_addasg_Int32x2 },
        std::pair{ "operator-"_c, &Int32x2_operator_sub_Int32x2 },
        std::pair{ "operator-(i32x2)"_c, &Int32x2_operator_sub_Int32x2 },
        std::pair{ "operator-="_c, &Int32x2_operator_subasg_Int32x2 },
        std::pair{ "operator-=(i32x2)"_c, &Int32x2_operator_subasg_Int32x2 },
        std::pair{ "operator/"_c, &Int32x2_operator_div_Int32x2 },
        std::pair{ "operator/(i32x2)"_c, &Int32x2_operator_div_Int32x2 },
        std::pair{ "operator/="_c, &Int32x2_operator_divasg_Int32x2 },
        std::pair{ "operator/=(i32x2)"_c, &Int32x2_operator_divasg_Int32x2 },
        std::pair{ "operator<"_c, &Int32x2_operator_lt_Int32x2 },
        std::pair{ "operator<(i32x2)"_c, &Int32x2_operator_lt_Int32x2 },
        std::pair{ "operator<<"_c, &Int32x2_operator_lsh_Int32x2 },
        std::pair{ "operator<<(i32x2)"_c, &Int32x2_operator_lsh_Int32x2 },
        std::pair{ "operator<<="_c, &Int32x2_operator_lshasg_Int32x2 },
        std::pair{ "operator<<=(i32x2)"_c, &Int32x2_operator_lshasg_Int32x2 },
        std::pair{ "operator<="_c, &Int32x2_operator_lte_Int32x2 },
        std::pair{ "operator<=(i32x2)"_c, &Int32x2_operator_lte_Int32x2 },
        std::pair{ "operator=="_c, &Int32x2_operator_eq_Int32x2 },
        std::pair{ "operator==(i32x2)"_c, &Int32x2_operator_eq_Int32x2 },
        std::pair{ "operator>"_c, &Int32x2_operator_gt_Int32x2 },
        std::pair{ "operator>(i32x2)"_c, &Int32x2_operator_gt_Int32x2 },
        std::pair{ "operator>="_c, &Int32x2_operator_gte_Int32x2 },
        std::pair{ "operator>=(i32x2)"_c, &Int32x2_operator_gte_Int32x2 },
        std::pair{ "operator>>"_c, &Int32x2_operator_rsh_Int32x2 },
        std::pair{ "operator>>(i32x2)"_c, &Int32x2_operator_rsh_Int32x2 },
        std::pair{ "operator>>="_c, &Int32x2_operator_rhsasg_Int32x2 },
        std::pair{ "operator>>=(i32x2)"_c, &Int32x2_operator_rhsasg_Int32x2 },
        std::pair{ "operator[]"_c, &Int32x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Int32x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Int32x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Int32x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Int32x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Int32x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Int32x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Int32x2_operator_index_UInt32 },
        std::pair{ "operator^"_c, &Int32x2_operator_xor_Int32x2 },
        std::pair{ "operator^(i32x2)"_c, &Int32x2_operator_xor_Int32x2 },
        std::pair{ "operator^="_c, &Int32x2_operator_xorasg_Int32x2 },
        std::pair{ "operator^=(i32x2)"_c, &Int32x2_operator_xorasg_Int32x2 },
        std::pair{ "operator|"_c, &Int32x2_operator_or_Int32x2 },
        std::pair{ "operator|(i32x2)"_c, &Int32x2_operator_or_Int32x2 },
        std::pair{ "operator|="_c, &Int32x2_operator_orasg_Int32x2 },
        std::pair{ "operator|=(i32x2)"_c, &Int32x2_operator_orasg_Int32x2 },
        std::pair{ "r"_c, &Int32Type },
        std::pair{ "rg"_c, &Int32x2Type },
        std::pair{ "rgg"_c, &Int32x3Type },
        std::pair{ "rggg"_c, &Int32x4Type },
        std::pair{ "rggr"_c, &Int32x4Type },
        std::pair{ "rgr"_c, &Int32x3Type },
        std::pair{ "rgrg"_c, &Int32x4Type },
        std::pair{ "rgrr"_c, &Int32x4Type },
        std::pair{ "rr"_c, &Int32x2Type },
        std::pair{ "rrg"_c, &Int32x3Type },
        std::pair{ "rrgg"_c, &Int32x4Type },
        std::pair{ "rrgr"_c, &Int32x4Type },
        std::pair{ "rrr"_c, &Int32x3Type },
        std::pair{ "rrrg"_c, &Int32x4Type },
        std::pair{ "rrrr"_c, &Int32x4Type },
        std::pair{ "x"_c, &Int32Type },
        std::pair{ "xx"_c, &Int32x2Type },
        std::pair{ "xxx"_c, &Int32x3Type },
        std::pair{ "xxxx"_c, &Int32x4Type },
        std::pair{ "xxxy"_c, &Int32x4Type },
        std::pair{ "xxy"_c, &Int32x3Type },
        std::pair{ "xxyx"_c, &Int32x4Type },
        std::pair{ "xxyy"_c, &Int32x4Type },
        std::pair{ "xy"_c, &Int32x2Type },
        std::pair{ "xyx"_c, &Int32x3Type },
        std::pair{ "xyxx"_c, &Int32x4Type },
        std::pair{ "xyxy"_c, &Int32x4Type },
        std::pair{ "xyy"_c, &Int32x3Type },
        std::pair{ "xyyx"_c, &Int32x4Type },
        std::pair{ "xyyy"_c, &Int32x4Type },
        std::pair{ "y"_c, &Int32Type },
        std::pair{ "yx"_c, &Int32x2Type },
        std::pair{ "yxx"_c, &Int32x3Type },
        std::pair{ "yxxx"_c, &Int32x4Type },
        std::pair{ "yxxy"_c, &Int32x4Type },
        std::pair{ "yxy"_c, &Int32x3Type },
        std::pair{ "yxyx"_c, &Int32x4Type },
        std::pair{ "yxyy"_c, &Int32x4Type },
        std::pair{ "yy"_c, &Int32x2Type },
        std::pair{ "yyx"_c, &Int32x3Type },
        std::pair{ "yyxx"_c, &Int32x4Type },
        std::pair{ "yyxy"_c, &Int32x4Type },
        std::pair{ "yyy"_c, &Int32x3Type },
        std::pair{ "yyyx"_c, &Int32x4Type },
        std::pair{ "yyyy"_c, &Int32x4Type }
    };
}
Int32x2 Int32x2Type;

/// operator[] with Int32
Variable Bool8x2_operator_index_Int32_arg;
Function Bool8x2_operator_index_Int32;
inline constexpr std::array Bool8x2_operator_index_Int32_args = { &Bool8x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Bool8x2_operator_index_UInt32_arg;
Function Bool8x2_operator_index_UInt32;
inline constexpr std::array Bool8x2_operator_index_UInt32_args = { &Bool8x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Bool8x2_operator_index_Int16_arg;
Function Bool8x2_operator_index_Int16;
inline constexpr std::array Bool8x2_operator_index_Int16_args = { &Bool8x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Bool8x2_operator_index_UInt16_arg;
Function Bool8x2_operator_index_UInt16;
inline constexpr std::array Bool8x2_operator_index_UInt16_args = { &Bool8x2_operator_index_UInt16_arg };

/// operator|| with Bool8x2
Variable Bool8x2_operator_oror_Bool8x2_arg;
Function Bool8x2_operator_oror_Bool8x2;
inline constexpr std::array Bool8x2_operator_oror_Bool8x2_args = { &Bool8x2_operator_oror_Bool8x2_arg };

/// operator&& with Bool8x2
Variable Bool8x2_operator_andand_Bool8x2_arg;
Function Bool8x2_operator_andand_Bool8x2;
inline constexpr std::array Bool8x2_operator_andand_Bool8x2_args = { &Bool8x2_operator_andand_Bool8x2_arg };

/// operator== with Bool8x2
Variable Bool8x2_operator_eq_Bool8x2_arg;
Function Bool8x2_operator_eq_Bool8x2;
inline constexpr std::array Bool8x2_operator_eq_Bool8x2_args = { &Bool8x2_operator_eq_Bool8x2_arg };

/// operator!= with Bool8x2
Variable Bool8x2_operator_neq_Bool8x2_arg;
Function Bool8x2_operator_neq_Bool8x2;
inline constexpr std::array Bool8x2_operator_neq_Bool8x2_args = { &Bool8x2_operator_neq_Bool8x2_arg };

Bool8x2::Bool8x2()
{
    this->name = "b8x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 2;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    /// operator[] with Int32
    Bool8x2_operator_index_Int32_arg.name = "arg"_c;
    Bool8x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8x2_operator_index_Int32.name = "operator[]"_c;
    Bool8x2_operator_index_Int32.backendIndex = 354;
    Bool8x2_operator_index_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_index_Int32.parameters = Bool8x2_operator_index_Int32_args;
    Symbol::Resolved(&Bool8x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x2_operator_index_Int32)->signature = "b8 operator[](i32)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt32
    Bool8x2_operator_index_UInt32_arg.name = "arg"_c;
    Bool8x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8x2_operator_index_UInt32.name = "operator[]"_c;
    Bool8x2_operator_index_UInt32.backendIndex = 355;
    Bool8x2_operator_index_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_index_UInt32.parameters = Bool8x2_operator_index_UInt32_args;
    Symbol::Resolved(&Bool8x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x2_operator_index_UInt32)->signature = "b8 operator[](u32)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int16
    Bool8x2_operator_index_Int16_arg.name = "arg"_c;
    Bool8x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8x2_operator_index_Int16.name = "operator[]"_c;
    Bool8x2_operator_index_Int16.backendIndex = 356;
    Bool8x2_operator_index_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_index_Int16.parameters = Bool8x2_operator_index_Int16_args;
    Symbol::Resolved(&Bool8x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x2_operator_index_Int16)->signature = "b8 operator[](i16)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt16
    Bool8x2_operator_index_UInt16_arg.name = "arg"_c;
    Bool8x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8x2_operator_index_UInt16.name = "operator[]"_c;
    Bool8x2_operator_index_UInt16.backendIndex = 357;
    Bool8x2_operator_index_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_index_UInt16.parameters = Bool8x2_operator_index_UInt16_args;
    Symbol::Resolved(&Bool8x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x2_operator_index_UInt16)->signature = "b8 operator[](u16)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Bool8x2_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator|| with Bool8x2
    Bool8x2_operator_oror_Bool8x2_arg.name = "arg"_c;
    Bool8x2_operator_oror_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_operator_oror_Bool8x2.name = "operator||"_c;
    Bool8x2_operator_oror_Bool8x2.backendIndex = 358;
    Bool8x2_operator_oror_Bool8x2.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_oror_Bool8x2.parameters = Bool8x2_operator_oror_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_operator_oror_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_operator_oror_Bool8x2)->signature = "b8 operator||(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_oror_Bool8x2)->name = "operator||(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_oror_Bool8x2)->nameWithVarNames = "operator||(arg : b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_oror_Bool8x2)->returnTypeSymbol = &Bool8Type;

    /// operator&& with Bool8x2
    Bool8x2_operator_andand_Bool8x2_arg.name = "arg"_c;
    Bool8x2_operator_andand_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_operator_andand_Bool8x2.name = "operator&&"_c;
    Bool8x2_operator_andand_Bool8x2.backendIndex = 359;
    Bool8x2_operator_andand_Bool8x2.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_andand_Bool8x2.parameters = Bool8x2_operator_andand_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_operator_andand_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_operator_andand_Bool8x2)->signature = "b8 operator&&(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_andand_Bool8x2)->name = "operator&&(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_andand_Bool8x2)->nameWithVarNames = "operator&&(arg : b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_andand_Bool8x2)->returnTypeSymbol = &Bool8Type;

    /// operator== with Bool8x2
    Bool8x2_operator_eq_Bool8x2_arg.name = "arg"_c;
    Bool8x2_operator_eq_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_operator_eq_Bool8x2.name = "operator=="_c;
    Bool8x2_operator_eq_Bool8x2.backendIndex = 360;
    Bool8x2_operator_eq_Bool8x2.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_eq_Bool8x2.parameters = Bool8x2_operator_eq_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2)->signature = "b8 operator==(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2)->name = "operator==(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2)->nameWithVarNames = "operator==(arg : b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_eq_Bool8x2)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Bool8x2
    Bool8x2_operator_neq_Bool8x2_arg.name = "arg"_c;
    Bool8x2_operator_neq_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_operator_neq_Bool8x2.name = "operator!="_c;
    Bool8x2_operator_neq_Bool8x2.backendIndex = 361;
    Bool8x2_operator_neq_Bool8x2.returnType = Type::FullType { Bool8Type.name };
    Bool8x2_operator_neq_Bool8x2.parameters = Bool8x2_operator_neq_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2)->signature = "b8 operator!=(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2)->name = "operator!=(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2)->nameWithVarNames = "operator!=(arg : b8x2)"_c;
    Symbol::Resolved(&Bool8x2_operator_neq_Bool8x2)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 76> { 
        std::pair{ "g"_c, &Bool8Type },
        std::pair{ "gg"_c, &Bool8x2Type },
        std::pair{ "ggg"_c, &Bool8x3Type },
        std::pair{ "gggg"_c, &Bool8x4Type },
        std::pair{ "gggr"_c, &Bool8x4Type },
        std::pair{ "ggr"_c, &Bool8x3Type },
        std::pair{ "ggrg"_c, &Bool8x4Type },
        std::pair{ "ggrr"_c, &Bool8x4Type },
        std::pair{ "gr"_c, &Bool8x2Type },
        std::pair{ "grg"_c, &Bool8x3Type },
        std::pair{ "grgg"_c, &Bool8x4Type },
        std::pair{ "grgr"_c, &Bool8x4Type },
        std::pair{ "grr"_c, &Bool8x3Type },
        std::pair{ "grrg"_c, &Bool8x4Type },
        std::pair{ "grrr"_c, &Bool8x4Type },
        std::pair{ "operator!="_c, &Bool8x2_operator_neq_Bool8x2 },
        std::pair{ "operator!=(b8x2)"_c, &Bool8x2_operator_neq_Bool8x2 },
        std::pair{ "operator&&"_c, &Bool8x2_operator_andand_Bool8x2 },
        std::pair{ "operator&&(b8x2)"_c, &Bool8x2_operator_andand_Bool8x2 },
        std::pair{ "operator=="_c, &Bool8x2_operator_eq_Bool8x2 },
        std::pair{ "operator==(b8x2)"_c, &Bool8x2_operator_eq_Bool8x2 },
        std::pair{ "operator[]"_c, &Bool8x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Bool8x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Bool8x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Bool8x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Bool8x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Bool8x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Bool8x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Bool8x2_operator_index_UInt32 },
        std::pair{ "operator||"_c, &Bool8x2_operator_oror_Bool8x2 },
        std::pair{ "operator||(b8x2)"_c, &Bool8x2_operator_oror_Bool8x2 },
        std::pair{ "r"_c, &Bool8Type },
        std::pair{ "rg"_c, &Bool8x2Type },
        std::pair{ "rgg"_c, &Bool8x3Type },
        std::pair{ "rggg"_c, &Bool8x4Type },
        std::pair{ "rggr"_c, &Bool8x4Type },
        std::pair{ "rgr"_c, &Bool8x3Type },
        std::pair{ "rgrg"_c, &Bool8x4Type },
        std::pair{ "rgrr"_c, &Bool8x4Type },
        std::pair{ "rr"_c, &Bool8x2Type },
        std::pair{ "rrg"_c, &Bool8x3Type },
        std::pair{ "rrgg"_c, &Bool8x4Type },
        std::pair{ "rrgr"_c, &Bool8x4Type },
        std::pair{ "rrr"_c, &Bool8x3Type },
        std::pair{ "rrrg"_c, &Bool8x4Type },
        std::pair{ "rrrr"_c, &Bool8x4Type },
        std::pair{ "x"_c, &Bool8Type },
        std::pair{ "xx"_c, &Bool8x2Type },
        std::pair{ "xxx"_c, &Bool8x3Type },
        std::pair{ "xxxx"_c, &Bool8x4Type },
        std::pair{ "xxxy"_c, &Bool8x4Type },
        std::pair{ "xxy"_c, &Bool8x3Type },
        std::pair{ "xxyx"_c, &Bool8x4Type },
        std::pair{ "xxyy"_c, &Bool8x4Type },
        std::pair{ "xy"_c, &Bool8x2Type },
        std::pair{ "xyx"_c, &Bool8x3Type },
        std::pair{ "xyxx"_c, &Bool8x4Type },
        std::pair{ "xyxy"_c, &Bool8x4Type },
        std::pair{ "xyy"_c, &Bool8x3Type },
        std::pair{ "xyyx"_c, &Bool8x4Type },
        std::pair{ "xyyy"_c, &Bool8x4Type },
        std::pair{ "y"_c, &Bool8Type },
        std::pair{ "yx"_c, &Bool8x2Type },
        std::pair{ "yxx"_c, &Bool8x3Type },
        std::pair{ "yxxx"_c, &Bool8x4Type },
        std::pair{ "yxxy"_c, &Bool8x4Type },
        std::pair{ "yxy"_c, &Bool8x3Type },
        std::pair{ "yxyx"_c, &Bool8x4Type },
        std::pair{ "yxyy"_c, &Bool8x4Type },
        std::pair{ "yy"_c, &Bool8x2Type },
        std::pair{ "yyx"_c, &Bool8x3Type },
        std::pair{ "yyxx"_c, &Bool8x4Type },
        std::pair{ "yyxy"_c, &Bool8x4Type },
        std::pair{ "yyy"_c, &Bool8x3Type },
        std::pair{ "yyyx"_c, &Bool8x4Type },
        std::pair{ "yyyy"_c, &Bool8x4Type }
    };
}
Bool8x2 Bool8x2Type;

/// operator[] with Int32
Variable Float16x2_operator_index_Int32_arg;
Function Float16x2_operator_index_Int32;
inline constexpr std::array Float16x2_operator_index_Int32_args = { &Float16x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x2_operator_index_UInt32_arg;
Function Float16x2_operator_index_UInt32;
inline constexpr std::array Float16x2_operator_index_UInt32_args = { &Float16x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x2_operator_index_Int16_arg;
Function Float16x2_operator_index_Int16;
inline constexpr std::array Float16x2_operator_index_Int16_args = { &Float16x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x2_operator_index_UInt16_arg;
Function Float16x2_operator_index_UInt16;
inline constexpr std::array Float16x2_operator_index_UInt16_args = { &Float16x2_operator_index_UInt16_arg };

/// operator+ with Float16x2
Variable Float16x2_operator_add_Float16x2_arg;
Function Float16x2_operator_add_Float16x2;
inline constexpr std::array Float16x2_operator_add_Float16x2_args = { &Float16x2_operator_add_Float16x2_arg };

/// operator- with Float16x2
Variable Float16x2_operator_sub_Float16x2_arg;
Function Float16x2_operator_sub_Float16x2;
inline constexpr std::array Float16x2_operator_sub_Float16x2_args = { &Float16x2_operator_sub_Float16x2_arg };

/// operator* with Float16x2
Variable Float16x2_operator_mul_Float16x2_arg;
Function Float16x2_operator_mul_Float16x2;
inline constexpr std::array Float16x2_operator_mul_Float16x2_args = { &Float16x2_operator_mul_Float16x2_arg };

/// operator/ with Float16x2
Variable Float16x2_operator_div_Float16x2_arg;
Function Float16x2_operator_div_Float16x2;
inline constexpr std::array Float16x2_operator_div_Float16x2_args = { &Float16x2_operator_div_Float16x2_arg };

/// operator% with Float16x2
Variable Float16x2_operator_mod_Float16x2_arg;
Function Float16x2_operator_mod_Float16x2;
inline constexpr std::array Float16x2_operator_mod_Float16x2_args = { &Float16x2_operator_mod_Float16x2_arg };

/// operator+= with Float16x2
Variable Float16x2_operator_addasg_Float16x2_arg;
Function Float16x2_operator_addasg_Float16x2;
inline constexpr std::array Float16x2_operator_addasg_Float16x2_args = { &Float16x2_operator_addasg_Float16x2_arg };

/// operator-= with Float16x2
Variable Float16x2_operator_subasg_Float16x2_arg;
Function Float16x2_operator_subasg_Float16x2;
inline constexpr std::array Float16x2_operator_subasg_Float16x2_args = { &Float16x2_operator_subasg_Float16x2_arg };

/// operator*= with Float16x2
Variable Float16x2_operator_mulasg_Float16x2_arg;
Function Float16x2_operator_mulasg_Float16x2;
inline constexpr std::array Float16x2_operator_mulasg_Float16x2_args = { &Float16x2_operator_mulasg_Float16x2_arg };

/// operator/= with Float16x2
Variable Float16x2_operator_divasg_Float16x2_arg;
Function Float16x2_operator_divasg_Float16x2;
inline constexpr std::array Float16x2_operator_divasg_Float16x2_args = { &Float16x2_operator_divasg_Float16x2_arg };

/// operator< with Float16x2
Variable Float16x2_operator_lt_Float16x2_arg;
Function Float16x2_operator_lt_Float16x2;
inline constexpr std::array Float16x2_operator_lt_Float16x2_args = { &Float16x2_operator_lt_Float16x2_arg };

/// operator<= with Float16x2
Variable Float16x2_operator_lte_Float16x2_arg;
Function Float16x2_operator_lte_Float16x2;
inline constexpr std::array Float16x2_operator_lte_Float16x2_args = { &Float16x2_operator_lte_Float16x2_arg };

/// operator> with Float16x2
Variable Float16x2_operator_gt_Float16x2_arg;
Function Float16x2_operator_gt_Float16x2;
inline constexpr std::array Float16x2_operator_gt_Float16x2_args = { &Float16x2_operator_gt_Float16x2_arg };

/// operator>= with Float16x2
Variable Float16x2_operator_gte_Float16x2_arg;
Function Float16x2_operator_gte_Float16x2;
inline constexpr std::array Float16x2_operator_gte_Float16x2_args = { &Float16x2_operator_gte_Float16x2_arg };

/// operator== with Float16x2
Variable Float16x2_operator_eq_Float16x2_arg;
Function Float16x2_operator_eq_Float16x2;
inline constexpr std::array Float16x2_operator_eq_Float16x2_args = { &Float16x2_operator_eq_Float16x2_arg };

/// operator!= with Float16x2
Variable Float16x2_operator_neq_Float16x2_arg;
Function Float16x2_operator_neq_Float16x2;
inline constexpr std::array Float16x2_operator_neq_Float16x2_args = { &Float16x2_operator_neq_Float16x2_arg };

/// operator* with Float16
Variable Float16x2_operator_scale_Float16_arg;
Function Float16x2_operator_scale_Float16;
inline constexpr std::array Float16x2_operator_scale_Float16_args = { &Float16x2_operator_scale_Float16_arg };

/// operator* with UInt16
Variable Float16x2_operator_scale_UInt16_arg;
Function Float16x2_operator_scale_UInt16;
inline constexpr std::array Float16x2_operator_scale_UInt16_args = { &Float16x2_operator_scale_UInt16_arg };

/// operator* with Int16
Variable Float16x2_operator_scale_Int16_arg;
Function Float16x2_operator_scale_Int16;
inline constexpr std::array Float16x2_operator_scale_Int16_args = { &Float16x2_operator_scale_Int16_arg };

/// operator* with Float32x2x2
Variable Float16x2_operator_transform_Float32x2x2_arg;
Function Float16x2_operator_transform_Float32x2x2;
inline constexpr std::array Float16x2_operator_transform_Float32x2x2_args = { &Float16x2_operator_transform_Float32x2x2_arg };

/// operator* with Float32x2x3
Variable Float16x2_operator_transform_Float32x2x3_arg;
Function Float16x2_operator_transform_Float32x2x3;
inline constexpr std::array Float16x2_operator_transform_Float32x2x3_args = { &Float16x2_operator_transform_Float32x2x3_arg };

/// operator* with Float32x2x4
Variable Float16x2_operator_transform_Float32x2x4_arg;
Function Float16x2_operator_transform_Float32x2x4;
inline constexpr std::array Float16x2_operator_transform_Float32x2x4_args = { &Float16x2_operator_transform_Float32x2x4_arg };

Float16x2::Float16x2()
{
    this->name = "f16x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x2_operator_index_Int32_arg.name = "arg"_c;
    Float16x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x2_operator_index_Int32.name = "operator[]"_c;
    Float16x2_operator_index_Int32.backendIndex = 377;
    Float16x2_operator_index_Int32.returnType = Type::FullType { Float16Type.name };
    Float16x2_operator_index_Int32.parameters = Float16x2_operator_index_Int32_args;
    Symbol::Resolved(&Float16x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2_operator_index_Int32)->signature = "f16 operator[](i32)"_c;
    Symbol::Resolved(&Float16x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float16x2_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt32
    Float16x2_operator_index_UInt32_arg.name = "arg"_c;
    Float16x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x2_operator_index_UInt32.name = "operator[]"_c;
    Float16x2_operator_index_UInt32.backendIndex = 378;
    Float16x2_operator_index_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16x2_operator_index_UInt32.parameters = Float16x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2_operator_index_UInt32)->signature = "f16 operator[](u32)"_c;
    Symbol::Resolved(&Float16x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float16x2_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int16
    Float16x2_operator_index_Int16_arg.name = "arg"_c;
    Float16x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x2_operator_index_Int16.name = "operator[]"_c;
    Float16x2_operator_index_Int16.backendIndex = 379;
    Float16x2_operator_index_Int16.returnType = Type::FullType { Float16Type.name };
    Float16x2_operator_index_Int16.parameters = Float16x2_operator_index_Int16_args;
    Symbol::Resolved(&Float16x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2_operator_index_Int16)->signature = "f16 operator[](i16)"_c;
    Symbol::Resolved(&Float16x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float16x2_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt16
    Float16x2_operator_index_UInt16_arg.name = "arg"_c;
    Float16x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x2_operator_index_UInt16.name = "operator[]"_c;
    Float16x2_operator_index_UInt16.backendIndex = 380;
    Float16x2_operator_index_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16x2_operator_index_UInt16.parameters = Float16x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2_operator_index_UInt16)->signature = "f16 operator[](u16)"_c;
    Symbol::Resolved(&Float16x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float16x2_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    /// operator+ with Float16x2
    Float16x2_operator_add_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_add_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_add_Float16x2.name = "operator+"_c;
    Float16x2_operator_add_Float16x2.backendIndex = 381;
    Float16x2_operator_add_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_add_Float16x2.parameters = Float16x2_operator_add_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_add_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_add_Float16x2)->signature = "f16x2 operator+(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_add_Float16x2)->name = "operator+(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_add_Float16x2)->nameWithVarNames = "operator+(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_add_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator- with Float16x2
    Float16x2_operator_sub_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_sub_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_sub_Float16x2.name = "operator-"_c;
    Float16x2_operator_sub_Float16x2.backendIndex = 382;
    Float16x2_operator_sub_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_sub_Float16x2.parameters = Float16x2_operator_sub_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2)->signature = "f16x2 operator-(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2)->name = "operator-(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2)->nameWithVarNames = "operator-(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_sub_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float16x2
    Float16x2_operator_mul_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_mul_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_mul_Float16x2.name = "operator*"_c;
    Float16x2_operator_mul_Float16x2.backendIndex = 383;
    Float16x2_operator_mul_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_mul_Float16x2.parameters = Float16x2_operator_mul_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2)->signature = "f16x2 operator*(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2)->name = "operator*(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2)->nameWithVarNames = "operator*(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mul_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator/ with Float16x2
    Float16x2_operator_div_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_div_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_div_Float16x2.name = "operator/"_c;
    Float16x2_operator_div_Float16x2.backendIndex = 384;
    Float16x2_operator_div_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_div_Float16x2.parameters = Float16x2_operator_div_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_div_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_div_Float16x2)->signature = "f16x2 operator/(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_div_Float16x2)->name = "operator/(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_div_Float16x2)->nameWithVarNames = "operator/(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_div_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator% with Float16x2
    Float16x2_operator_mod_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_mod_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_mod_Float16x2.name = "operator%"_c;
    Float16x2_operator_mod_Float16x2.backendIndex = 385;
    Float16x2_operator_mod_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_mod_Float16x2.parameters = Float16x2_operator_mod_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2)->signature = "f16x2 operator%(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2)->name = "operator%(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2)->nameWithVarNames = "operator%(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mod_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator+= with Float16x2
    Float16x2_operator_addasg_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_addasg_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_addasg_Float16x2.name = "operator+="_c;
    Float16x2_operator_addasg_Float16x2.backendIndex = 386;
    Float16x2_operator_addasg_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_addasg_Float16x2.parameters = Float16x2_operator_addasg_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2)->signature = "f16x2 operator+=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2)->name = "operator+=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2)->nameWithVarNames = "operator+=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_addasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator-= with Float16x2
    Float16x2_operator_subasg_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_subasg_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_subasg_Float16x2.name = "operator-="_c;
    Float16x2_operator_subasg_Float16x2.backendIndex = 387;
    Float16x2_operator_subasg_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_subasg_Float16x2.parameters = Float16x2_operator_subasg_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2)->signature = "f16x2 operator-=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2)->name = "operator-=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2)->nameWithVarNames = "operator-=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_subasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator*= with Float16x2
    Float16x2_operator_mulasg_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_mulasg_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_mulasg_Float16x2.name = "operator*="_c;
    Float16x2_operator_mulasg_Float16x2.backendIndex = 388;
    Float16x2_operator_mulasg_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_mulasg_Float16x2.parameters = Float16x2_operator_mulasg_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2)->signature = "f16x2 operator*=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2)->name = "operator*=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2)->nameWithVarNames = "operator*=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_mulasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator/= with Float16x2
    Float16x2_operator_divasg_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_divasg_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_divasg_Float16x2.name = "operator/="_c;
    Float16x2_operator_divasg_Float16x2.backendIndex = 389;
    Float16x2_operator_divasg_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_divasg_Float16x2.parameters = Float16x2_operator_divasg_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2)->signature = "f16x2 operator/=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2)->name = "operator/=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2)->nameWithVarNames = "operator/=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_divasg_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator< with Float16x2
    Float16x2_operator_lt_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_lt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_lt_Float16x2.name = "operator<"_c;
    Float16x2_operator_lt_Float16x2.backendIndex = 390;
    Float16x2_operator_lt_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Float16x2_operator_lt_Float16x2.parameters = Float16x2_operator_lt_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2)->signature = "b8x2 operator<(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2)->name = "operator<(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2)->nameWithVarNames = "operator<(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_lt_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator<= with Float16x2
    Float16x2_operator_lte_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_lte_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_lte_Float16x2.name = "operator<="_c;
    Float16x2_operator_lte_Float16x2.backendIndex = 391;
    Float16x2_operator_lte_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Float16x2_operator_lte_Float16x2.parameters = Float16x2_operator_lte_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2)->signature = "b8x2 operator<=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2)->name = "operator<=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2)->nameWithVarNames = "operator<=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_lte_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator> with Float16x2
    Float16x2_operator_gt_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_gt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_gt_Float16x2.name = "operator>"_c;
    Float16x2_operator_gt_Float16x2.backendIndex = 392;
    Float16x2_operator_gt_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Float16x2_operator_gt_Float16x2.parameters = Float16x2_operator_gt_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2)->signature = "b8x2 operator>(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2)->name = "operator>(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2)->nameWithVarNames = "operator>(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_gt_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator>= with Float16x2
    Float16x2_operator_gte_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_gte_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_gte_Float16x2.name = "operator>="_c;
    Float16x2_operator_gte_Float16x2.backendIndex = 393;
    Float16x2_operator_gte_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Float16x2_operator_gte_Float16x2.parameters = Float16x2_operator_gte_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2)->signature = "b8x2 operator>=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2)->name = "operator>=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2)->nameWithVarNames = "operator>=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_gte_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with Float16x2
    Float16x2_operator_eq_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_eq_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_eq_Float16x2.name = "operator=="_c;
    Float16x2_operator_eq_Float16x2.backendIndex = 394;
    Float16x2_operator_eq_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Float16x2_operator_eq_Float16x2.parameters = Float16x2_operator_eq_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2)->signature = "b8x2 operator==(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2)->name = "operator==(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2)->nameWithVarNames = "operator==(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_eq_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with Float16x2
    Float16x2_operator_neq_Float16x2_arg.name = "arg"_c;
    Float16x2_operator_neq_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_operator_neq_Float16x2.name = "operator!="_c;
    Float16x2_operator_neq_Float16x2.backendIndex = 395;
    Float16x2_operator_neq_Float16x2.returnType = Type::FullType { Bool8x2Type.name };
    Float16x2_operator_neq_Float16x2.parameters = Float16x2_operator_neq_Float16x2_args;
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2)->signature = "b8x2 operator!=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2)->name = "operator!=(f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2)->nameWithVarNames = "operator!=(arg : f16x2)"_c;
    Symbol::Resolved(&Float16x2_operator_neq_Float16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator* with Float16
    Float16x2_operator_scale_Float16_arg.name = "arg"_c;
    Float16x2_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x2_operator_scale_Float16.name = "operator*"_c;
    Float16x2_operator_scale_Float16.backendIndex = 396;
    Float16x2_operator_scale_Float16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_scale_Float16.parameters = Float16x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x2_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2_operator_scale_Float16)->signature = "f16x2 operator*(f16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_Float16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with UInt16
    Float16x2_operator_scale_UInt16_arg.name = "arg"_c;
    Float16x2_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x2_operator_scale_UInt16.name = "operator*"_c;
    Float16x2_operator_scale_UInt16.backendIndex = 397;
    Float16x2_operator_scale_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_scale_UInt16.parameters = Float16x2_operator_scale_UInt16_args;
    Symbol::Resolved(&Float16x2_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2_operator_scale_UInt16)->signature = "f16x2 operator*(u16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Int16
    Float16x2_operator_scale_Int16_arg.name = "arg"_c;
    Float16x2_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x2_operator_scale_Int16.name = "operator*"_c;
    Float16x2_operator_scale_Int16.backendIndex = 398;
    Float16x2_operator_scale_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_scale_Int16.parameters = Float16x2_operator_scale_Int16_args;
    Symbol::Resolved(&Float16x2_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2_operator_scale_Int16)->signature = "f16x2 operator*(i16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Float16x2_operator_scale_Int16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32x2x2
    Float16x2_operator_transform_Float32x2x2_arg.name = "arg"_c;
    Float16x2_operator_transform_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float16x2_operator_transform_Float32x2x2.name = "operator*"_c;
    Float16x2_operator_transform_Float32x2x2.backendIndex = 399;
    Float16x2_operator_transform_Float32x2x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_operator_transform_Float32x2x2.parameters = Float16x2_operator_transform_Float32x2x2_args;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x2)->signature = "f16x2 operator*(f32x2x2)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x2)->name = "operator*(f32x2x2)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x2)->nameWithVarNames = "operator*(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32x2x3
    Float16x2_operator_transform_Float32x2x3_arg.name = "arg"_c;
    Float16x2_operator_transform_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float16x2_operator_transform_Float32x2x3.name = "operator*"_c;
    Float16x2_operator_transform_Float32x2x3.backendIndex = 400;
    Float16x2_operator_transform_Float32x2x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x2_operator_transform_Float32x2x3.parameters = Float16x2_operator_transform_Float32x2x3_args;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x3)->signature = "f16x3 operator*(f32x2x3)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x3)->name = "operator*(f32x2x3)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x3)->nameWithVarNames = "operator*(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32x2x4
    Float16x2_operator_transform_Float32x2x4_arg.name = "arg"_c;
    Float16x2_operator_transform_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float16x2_operator_transform_Float32x2x4.name = "operator*"_c;
    Float16x2_operator_transform_Float32x2x4.backendIndex = 401;
    Float16x2_operator_transform_Float32x2x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x2_operator_transform_Float32x2x4.parameters = Float16x2_operator_transform_Float32x2x4_args;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x4)->signature = "f16x4 operator*(f32x2x4)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x4)->name = "operator*(f32x2x4)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x4)->nameWithVarNames = "operator*(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float16x2_operator_transform_Float32x2x4)->returnTypeSymbol = &Float16x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 110> { 
        std::pair{ "g"_c, &Float16Type },
        std::pair{ "gg"_c, &Float16x2Type },
        std::pair{ "ggg"_c, &Float16x3Type },
        std::pair{ "gggg"_c, &Float16x4Type },
        std::pair{ "gggr"_c, &Float16x4Type },
        std::pair{ "ggr"_c, &Float16x3Type },
        std::pair{ "ggrg"_c, &Float16x4Type },
        std::pair{ "ggrr"_c, &Float16x4Type },
        std::pair{ "gr"_c, &Float16x2Type },
        std::pair{ "grg"_c, &Float16x3Type },
        std::pair{ "grgg"_c, &Float16x4Type },
        std::pair{ "grgr"_c, &Float16x4Type },
        std::pair{ "grr"_c, &Float16x3Type },
        std::pair{ "grrg"_c, &Float16x4Type },
        std::pair{ "grrr"_c, &Float16x4Type },
        std::pair{ "operator!="_c, &Float16x2_operator_neq_Float16x2 },
        std::pair{ "operator!=(f16x2)"_c, &Float16x2_operator_neq_Float16x2 },
        std::pair{ "operator%"_c, &Float16x2_operator_mod_Float16x2 },
        std::pair{ "operator%(f16x2)"_c, &Float16x2_operator_mod_Float16x2 },
        std::pair{ "operator*"_c, &Float16x2_operator_mul_Float16x2 },
        std::pair{ "operator*"_c, &Float16x2_operator_scale_Float16 },
        std::pair{ "operator*"_c, &Float16x2_operator_scale_UInt16 },
        std::pair{ "operator*"_c, &Float16x2_operator_scale_Int16 },
        std::pair{ "operator*"_c, &Float16x2_operator_transform_Float32x2x2 },
        std::pair{ "operator*"_c, &Float16x2_operator_transform_Float32x2x3 },
        std::pair{ "operator*"_c, &Float16x2_operator_transform_Float32x2x4 },
        std::pair{ "operator*(f16)"_c, &Float16x2_operator_scale_Float16 },
        std::pair{ "operator*(f16x2)"_c, &Float16x2_operator_mul_Float16x2 },
        std::pair{ "operator*(f32x2x2)"_c, &Float16x2_operator_transform_Float32x2x2 },
        std::pair{ "operator*(f32x2x3)"_c, &Float16x2_operator_transform_Float32x2x3 },
        std::pair{ "operator*(f32x2x4)"_c, &Float16x2_operator_transform_Float32x2x4 },
        std::pair{ "operator*(i16)"_c, &Float16x2_operator_scale_Int16 },
        std::pair{ "operator*(u16)"_c, &Float16x2_operator_scale_UInt16 },
        std::pair{ "operator*="_c, &Float16x2_operator_mulasg_Float16x2 },
        std::pair{ "operator*=(f16x2)"_c, &Float16x2_operator_mulasg_Float16x2 },
        std::pair{ "operator+"_c, &Float16x2_operator_add_Float16x2 },
        std::pair{ "operator+(f16x2)"_c, &Float16x2_operator_add_Float16x2 },
        std::pair{ "operator+="_c, &Float16x2_operator_addasg_Float16x2 },
        std::pair{ "operator+=(f16x2)"_c, &Float16x2_operator_addasg_Float16x2 },
        std::pair{ "operator-"_c, &Float16x2_operator_sub_Float16x2 },
        std::pair{ "operator-(f16x2)"_c, &Float16x2_operator_sub_Float16x2 },
        std::pair{ "operator-="_c, &Float16x2_operator_subasg_Float16x2 },
        std::pair{ "operator-=(f16x2)"_c, &Float16x2_operator_subasg_Float16x2 },
        std::pair{ "operator/"_c, &Float16x2_operator_div_Float16x2 },
        std::pair{ "operator/(f16x2)"_c, &Float16x2_operator_div_Float16x2 },
        std::pair{ "operator/="_c, &Float16x2_operator_divasg_Float16x2 },
        std::pair{ "operator/=(f16x2)"_c, &Float16x2_operator_divasg_Float16x2 },
        std::pair{ "operator<"_c, &Float16x2_operator_lt_Float16x2 },
        std::pair{ "operator<(f16x2)"_c, &Float16x2_operator_lt_Float16x2 },
        std::pair{ "operator<="_c, &Float16x2_operator_lte_Float16x2 },
        std::pair{ "operator<=(f16x2)"_c, &Float16x2_operator_lte_Float16x2 },
        std::pair{ "operator=="_c, &Float16x2_operator_eq_Float16x2 },
        std::pair{ "operator==(f16x2)"_c, &Float16x2_operator_eq_Float16x2 },
        std::pair{ "operator>"_c, &Float16x2_operator_gt_Float16x2 },
        std::pair{ "operator>(f16x2)"_c, &Float16x2_operator_gt_Float16x2 },
        std::pair{ "operator>="_c, &Float16x2_operator_gte_Float16x2 },
        std::pair{ "operator>=(f16x2)"_c, &Float16x2_operator_gte_Float16x2 },
        std::pair{ "operator[]"_c, &Float16x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16x2_operator_index_UInt32 },
        std::pair{ "r"_c, &Float16Type },
        std::pair{ "rg"_c, &Float16x2Type },
        std::pair{ "rgg"_c, &Float16x3Type },
        std::pair{ "rggg"_c, &Float16x4Type },
        std::pair{ "rggr"_c, &Float16x4Type },
        std::pair{ "rgr"_c, &Float16x3Type },
        std::pair{ "rgrg"_c, &Float16x4Type },
        std::pair{ "rgrr"_c, &Float16x4Type },
        std::pair{ "rr"_c, &Float16x2Type },
        std::pair{ "rrg"_c, &Float16x3Type },
        std::pair{ "rrgg"_c, &Float16x4Type },
        std::pair{ "rrgr"_c, &Float16x4Type },
        std::pair{ "rrr"_c, &Float16x3Type },
        std::pair{ "rrrg"_c, &Float16x4Type },
        std::pair{ "rrrr"_c, &Float16x4Type },
        std::pair{ "x"_c, &Float16Type },
        std::pair{ "xx"_c, &Float16x2Type },
        std::pair{ "xxx"_c, &Float16x3Type },
        std::pair{ "xxxx"_c, &Float16x4Type },
        std::pair{ "xxxy"_c, &Float16x4Type },
        std::pair{ "xxy"_c, &Float16x3Type },
        std::pair{ "xxyx"_c, &Float16x4Type },
        std::pair{ "xxyy"_c, &Float16x4Type },
        std::pair{ "xy"_c, &Float16x2Type },
        std::pair{ "xyx"_c, &Float16x3Type },
        std::pair{ "xyxx"_c, &Float16x4Type },
        std::pair{ "xyxy"_c, &Float16x4Type },
        std::pair{ "xyy"_c, &Float16x3Type },
        std::pair{ "xyyx"_c, &Float16x4Type },
        std::pair{ "xyyy"_c, &Float16x4Type },
        std::pair{ "y"_c, &Float16Type },
        std::pair{ "yx"_c, &Float16x2Type },
        std::pair{ "yxx"_c, &Float16x3Type },
        std::pair{ "yxxx"_c, &Float16x4Type },
        std::pair{ "yxxy"_c, &Float16x4Type },
        std::pair{ "yxy"_c, &Float16x3Type },
        std::pair{ "yxyx"_c, &Float16x4Type },
        std::pair{ "yxyy"_c, &Float16x4Type },
        std::pair{ "yy"_c, &Float16x2Type },
        std::pair{ "yyx"_c, &Float16x3Type },
        std::pair{ "yyxx"_c, &Float16x4Type },
        std::pair{ "yyxy"_c, &Float16x4Type },
        std::pair{ "yyy"_c, &Float16x3Type },
        std::pair{ "yyyx"_c, &Float16x4Type },
        std::pair{ "yyyy"_c, &Float16x4Type }
    };
}
Float16x2 Float16x2Type;

/// operator[] with Int32
Variable UInt16x2_operator_index_Int32_arg;
Function UInt16x2_operator_index_Int32;
inline constexpr std::array UInt16x2_operator_index_Int32_args = { &UInt16x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt16x2_operator_index_UInt32_arg;
Function UInt16x2_operator_index_UInt32;
inline constexpr std::array UInt16x2_operator_index_UInt32_args = { &UInt16x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt16x2_operator_index_Int16_arg;
Function UInt16x2_operator_index_Int16;
inline constexpr std::array UInt16x2_operator_index_Int16_args = { &UInt16x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt16x2_operator_index_UInt16_arg;
Function UInt16x2_operator_index_UInt16;
inline constexpr std::array UInt16x2_operator_index_UInt16_args = { &UInt16x2_operator_index_UInt16_arg };

/// operator+ with UInt16x2
Variable UInt16x2_operator_add_UInt16x2_arg;
Function UInt16x2_operator_add_UInt16x2;
inline constexpr std::array UInt16x2_operator_add_UInt16x2_args = { &UInt16x2_operator_add_UInt16x2_arg };

/// operator- with UInt16x2
Variable UInt16x2_operator_sub_UInt16x2_arg;
Function UInt16x2_operator_sub_UInt16x2;
inline constexpr std::array UInt16x2_operator_sub_UInt16x2_args = { &UInt16x2_operator_sub_UInt16x2_arg };

/// operator* with UInt16x2
Variable UInt16x2_operator_mul_UInt16x2_arg;
Function UInt16x2_operator_mul_UInt16x2;
inline constexpr std::array UInt16x2_operator_mul_UInt16x2_args = { &UInt16x2_operator_mul_UInt16x2_arg };

/// operator/ with UInt16x2
Variable UInt16x2_operator_div_UInt16x2_arg;
Function UInt16x2_operator_div_UInt16x2;
inline constexpr std::array UInt16x2_operator_div_UInt16x2_args = { &UInt16x2_operator_div_UInt16x2_arg };

/// operator% with UInt16x2
Variable UInt16x2_operator_mod_UInt16x2_arg;
Function UInt16x2_operator_mod_UInt16x2;
inline constexpr std::array UInt16x2_operator_mod_UInt16x2_args = { &UInt16x2_operator_mod_UInt16x2_arg };

/// operator+= with UInt16x2
Variable UInt16x2_operator_addasg_UInt16x2_arg;
Function UInt16x2_operator_addasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_addasg_UInt16x2_args = { &UInt16x2_operator_addasg_UInt16x2_arg };

/// operator-= with UInt16x2
Variable UInt16x2_operator_subasg_UInt16x2_arg;
Function UInt16x2_operator_subasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_subasg_UInt16x2_args = { &UInt16x2_operator_subasg_UInt16x2_arg };

/// operator*= with UInt16x2
Variable UInt16x2_operator_mulasg_UInt16x2_arg;
Function UInt16x2_operator_mulasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_mulasg_UInt16x2_args = { &UInt16x2_operator_mulasg_UInt16x2_arg };

/// operator/= with UInt16x2
Variable UInt16x2_operator_divasg_UInt16x2_arg;
Function UInt16x2_operator_divasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_divasg_UInt16x2_args = { &UInt16x2_operator_divasg_UInt16x2_arg };

/// operator< with UInt16x2
Variable UInt16x2_operator_lt_UInt16x2_arg;
Function UInt16x2_operator_lt_UInt16x2;
inline constexpr std::array UInt16x2_operator_lt_UInt16x2_args = { &UInt16x2_operator_lt_UInt16x2_arg };

/// operator<= with UInt16x2
Variable UInt16x2_operator_lte_UInt16x2_arg;
Function UInt16x2_operator_lte_UInt16x2;
inline constexpr std::array UInt16x2_operator_lte_UInt16x2_args = { &UInt16x2_operator_lte_UInt16x2_arg };

/// operator> with UInt16x2
Variable UInt16x2_operator_gt_UInt16x2_arg;
Function UInt16x2_operator_gt_UInt16x2;
inline constexpr std::array UInt16x2_operator_gt_UInt16x2_args = { &UInt16x2_operator_gt_UInt16x2_arg };

/// operator>= with UInt16x2
Variable UInt16x2_operator_gte_UInt16x2_arg;
Function UInt16x2_operator_gte_UInt16x2;
inline constexpr std::array UInt16x2_operator_gte_UInt16x2_args = { &UInt16x2_operator_gte_UInt16x2_arg };

/// operator== with UInt16x2
Variable UInt16x2_operator_eq_UInt16x2_arg;
Function UInt16x2_operator_eq_UInt16x2;
inline constexpr std::array UInt16x2_operator_eq_UInt16x2_args = { &UInt16x2_operator_eq_UInt16x2_arg };

/// operator!= with UInt16x2
Variable UInt16x2_operator_neq_UInt16x2_arg;
Function UInt16x2_operator_neq_UInt16x2;
inline constexpr std::array UInt16x2_operator_neq_UInt16x2_args = { &UInt16x2_operator_neq_UInt16x2_arg };

/// operator* with Float16
Variable UInt16x2_operator_scale_Float16_arg;
Function UInt16x2_operator_scale_Float16;
inline constexpr std::array UInt16x2_operator_scale_Float16_args = { &UInt16x2_operator_scale_Float16_arg };

/// operator* with UInt16
Variable UInt16x2_operator_scale_UInt16_arg;
Function UInt16x2_operator_scale_UInt16;
inline constexpr std::array UInt16x2_operator_scale_UInt16_args = { &UInt16x2_operator_scale_UInt16_arg };

/// operator* with Int16
Variable UInt16x2_operator_scale_Int16_arg;
Function UInt16x2_operator_scale_Int16;
inline constexpr std::array UInt16x2_operator_scale_Int16_args = { &UInt16x2_operator_scale_Int16_arg };

/// operator| with UInt16x2
Variable UInt16x2_operator_or_UInt16x2_arg;
Function UInt16x2_operator_or_UInt16x2;
inline constexpr std::array UInt16x2_operator_or_UInt16x2_args = { &UInt16x2_operator_or_UInt16x2_arg };

/// operator& with UInt16x2
Variable UInt16x2_operator_and_UInt16x2_arg;
Function UInt16x2_operator_and_UInt16x2;
inline constexpr std::array UInt16x2_operator_and_UInt16x2_args = { &UInt16x2_operator_and_UInt16x2_arg };

/// operator^ with UInt16x2
Variable UInt16x2_operator_xor_UInt16x2_arg;
Function UInt16x2_operator_xor_UInt16x2;
inline constexpr std::array UInt16x2_operator_xor_UInt16x2_args = { &UInt16x2_operator_xor_UInt16x2_arg };

/// operator<< with UInt16x2
Variable UInt16x2_operator_lsh_UInt16x2_arg;
Function UInt16x2_operator_lsh_UInt16x2;
inline constexpr std::array UInt16x2_operator_lsh_UInt16x2_args = { &UInt16x2_operator_lsh_UInt16x2_arg };

/// operator>> with UInt16x2
Variable UInt16x2_operator_rsh_UInt16x2_arg;
Function UInt16x2_operator_rsh_UInt16x2;
inline constexpr std::array UInt16x2_operator_rsh_UInt16x2_args = { &UInt16x2_operator_rsh_UInt16x2_arg };

/// operator|= with UInt16x2
Variable UInt16x2_operator_orasg_UInt16x2_arg;
Function UInt16x2_operator_orasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_orasg_UInt16x2_args = { &UInt16x2_operator_orasg_UInt16x2_arg };

/// operator&= with UInt16x2
Variable UInt16x2_operator_andasg_UInt16x2_arg;
Function UInt16x2_operator_andasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_andasg_UInt16x2_args = { &UInt16x2_operator_andasg_UInt16x2_arg };

/// operator^= with UInt16x2
Variable UInt16x2_operator_xorasg_UInt16x2_arg;
Function UInt16x2_operator_xorasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_xorasg_UInt16x2_args = { &UInt16x2_operator_xorasg_UInt16x2_arg };

/// operator<<= with UInt16x2
Variable UInt16x2_operator_lshasg_UInt16x2_arg;
Function UInt16x2_operator_lshasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_lshasg_UInt16x2_args = { &UInt16x2_operator_lshasg_UInt16x2_arg };

/// operator>>= with UInt16x2
Variable UInt16x2_operator_rhsasg_UInt16x2_arg;
Function UInt16x2_operator_rhsasg_UInt16x2;
inline constexpr std::array UInt16x2_operator_rhsasg_UInt16x2_args = { &UInt16x2_operator_rhsasg_UInt16x2_arg };

UInt16x2::UInt16x2()
{
    this->name = "u16x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    /// operator[] with Int32
    UInt16x2_operator_index_Int32_arg.name = "arg"_c;
    UInt16x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16x2_operator_index_Int32.name = "operator[]"_c;
    UInt16x2_operator_index_Int32.backendIndex = 417;
    UInt16x2_operator_index_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16x2_operator_index_Int32.parameters = UInt16x2_operator_index_Int32_args;
    Symbol::Resolved(&UInt16x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x2_operator_index_Int32)->signature = "u16 operator[](i32)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt32
    UInt16x2_operator_index_UInt32_arg.name = "arg"_c;
    UInt16x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16x2_operator_index_UInt32.name = "operator[]"_c;
    UInt16x2_operator_index_UInt32.backendIndex = 418;
    UInt16x2_operator_index_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16x2_operator_index_UInt32.parameters = UInt16x2_operator_index_UInt32_args;
    Symbol::Resolved(&UInt16x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x2_operator_index_UInt32)->signature = "u16 operator[](u32)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int16
    UInt16x2_operator_index_Int16_arg.name = "arg"_c;
    UInt16x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x2_operator_index_Int16.name = "operator[]"_c;
    UInt16x2_operator_index_Int16.backendIndex = 419;
    UInt16x2_operator_index_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16x2_operator_index_Int16.parameters = UInt16x2_operator_index_Int16_args;
    Symbol::Resolved(&UInt16x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x2_operator_index_Int16)->signature = "u16 operator[](i16)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt16
    UInt16x2_operator_index_UInt16_arg.name = "arg"_c;
    UInt16x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x2_operator_index_UInt16.name = "operator[]"_c;
    UInt16x2_operator_index_UInt16.backendIndex = 420;
    UInt16x2_operator_index_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16x2_operator_index_UInt16.parameters = UInt16x2_operator_index_UInt16_args;
    Symbol::Resolved(&UInt16x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x2_operator_index_UInt16)->signature = "u16 operator[](u16)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt16x2_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+ with UInt16x2
    UInt16x2_operator_add_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_add_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_add_UInt16x2.name = "operator+"_c;
    UInt16x2_operator_add_UInt16x2.backendIndex = 421;
    UInt16x2_operator_add_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_add_UInt16x2.parameters = UInt16x2_operator_add_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2)->signature = "u16x2 operator+(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2)->name = "operator+(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2)->nameWithVarNames = "operator+(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_add_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator- with UInt16x2
    UInt16x2_operator_sub_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_sub_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_sub_UInt16x2.name = "operator-"_c;
    UInt16x2_operator_sub_UInt16x2.backendIndex = 422;
    UInt16x2_operator_sub_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_sub_UInt16x2.parameters = UInt16x2_operator_sub_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2)->signature = "u16x2 operator-(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2)->name = "operator-(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2)->nameWithVarNames = "operator-(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_sub_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator* with UInt16x2
    UInt16x2_operator_mul_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_mul_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_mul_UInt16x2.name = "operator*"_c;
    UInt16x2_operator_mul_UInt16x2.backendIndex = 423;
    UInt16x2_operator_mul_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_mul_UInt16x2.parameters = UInt16x2_operator_mul_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2)->signature = "u16x2 operator*(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2)->name = "operator*(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2)->nameWithVarNames = "operator*(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mul_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator/ with UInt16x2
    UInt16x2_operator_div_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_div_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_div_UInt16x2.name = "operator/"_c;
    UInt16x2_operator_div_UInt16x2.backendIndex = 424;
    UInt16x2_operator_div_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_div_UInt16x2.parameters = UInt16x2_operator_div_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2)->signature = "u16x2 operator/(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2)->name = "operator/(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2)->nameWithVarNames = "operator/(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_div_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator% with UInt16x2
    UInt16x2_operator_mod_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_mod_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_mod_UInt16x2.name = "operator%"_c;
    UInt16x2_operator_mod_UInt16x2.backendIndex = 425;
    UInt16x2_operator_mod_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_mod_UInt16x2.parameters = UInt16x2_operator_mod_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2)->signature = "u16x2 operator%(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2)->name = "operator%(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2)->nameWithVarNames = "operator%(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mod_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator+= with UInt16x2
    UInt16x2_operator_addasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_addasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_addasg_UInt16x2.name = "operator+="_c;
    UInt16x2_operator_addasg_UInt16x2.backendIndex = 426;
    UInt16x2_operator_addasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_addasg_UInt16x2.parameters = UInt16x2_operator_addasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2)->signature = "u16x2 operator+=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2)->name = "operator+=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2)->nameWithVarNames = "operator+=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_addasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator-= with UInt16x2
    UInt16x2_operator_subasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_subasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_subasg_UInt16x2.name = "operator-="_c;
    UInt16x2_operator_subasg_UInt16x2.backendIndex = 427;
    UInt16x2_operator_subasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_subasg_UInt16x2.parameters = UInt16x2_operator_subasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2)->signature = "u16x2 operator-=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2)->name = "operator-=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2)->nameWithVarNames = "operator-=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_subasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator*= with UInt16x2
    UInt16x2_operator_mulasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_mulasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_mulasg_UInt16x2.name = "operator*="_c;
    UInt16x2_operator_mulasg_UInt16x2.backendIndex = 428;
    UInt16x2_operator_mulasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_mulasg_UInt16x2.parameters = UInt16x2_operator_mulasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2)->signature = "u16x2 operator*=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2)->name = "operator*=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2)->nameWithVarNames = "operator*=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_mulasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator/= with UInt16x2
    UInt16x2_operator_divasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_divasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_divasg_UInt16x2.name = "operator/="_c;
    UInt16x2_operator_divasg_UInt16x2.backendIndex = 429;
    UInt16x2_operator_divasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_divasg_UInt16x2.parameters = UInt16x2_operator_divasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2)->signature = "u16x2 operator/=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2)->name = "operator/=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2)->nameWithVarNames = "operator/=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_divasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator< with UInt16x2
    UInt16x2_operator_lt_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_lt_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_lt_UInt16x2.name = "operator<"_c;
    UInt16x2_operator_lt_UInt16x2.backendIndex = 430;
    UInt16x2_operator_lt_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt16x2_operator_lt_UInt16x2.parameters = UInt16x2_operator_lt_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2)->signature = "b8x2 operator<(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2)->name = "operator<(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2)->nameWithVarNames = "operator<(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lt_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator<= with UInt16x2
    UInt16x2_operator_lte_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_lte_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_lte_UInt16x2.name = "operator<="_c;
    UInt16x2_operator_lte_UInt16x2.backendIndex = 431;
    UInt16x2_operator_lte_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt16x2_operator_lte_UInt16x2.parameters = UInt16x2_operator_lte_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2)->signature = "b8x2 operator<=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2)->name = "operator<=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2)->nameWithVarNames = "operator<=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lte_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator> with UInt16x2
    UInt16x2_operator_gt_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_gt_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_gt_UInt16x2.name = "operator>"_c;
    UInt16x2_operator_gt_UInt16x2.backendIndex = 432;
    UInt16x2_operator_gt_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt16x2_operator_gt_UInt16x2.parameters = UInt16x2_operator_gt_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2)->signature = "b8x2 operator>(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2)->name = "operator>(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2)->nameWithVarNames = "operator>(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_gt_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator>= with UInt16x2
    UInt16x2_operator_gte_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_gte_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_gte_UInt16x2.name = "operator>="_c;
    UInt16x2_operator_gte_UInt16x2.backendIndex = 433;
    UInt16x2_operator_gte_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt16x2_operator_gte_UInt16x2.parameters = UInt16x2_operator_gte_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2)->signature = "b8x2 operator>=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2)->name = "operator>=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2)->nameWithVarNames = "operator>=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_gte_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with UInt16x2
    UInt16x2_operator_eq_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_eq_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_eq_UInt16x2.name = "operator=="_c;
    UInt16x2_operator_eq_UInt16x2.backendIndex = 434;
    UInt16x2_operator_eq_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt16x2_operator_eq_UInt16x2.parameters = UInt16x2_operator_eq_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2)->signature = "b8x2 operator==(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2)->name = "operator==(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2)->nameWithVarNames = "operator==(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_eq_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with UInt16x2
    UInt16x2_operator_neq_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_neq_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_neq_UInt16x2.name = "operator!="_c;
    UInt16x2_operator_neq_UInt16x2.backendIndex = 435;
    UInt16x2_operator_neq_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    UInt16x2_operator_neq_UInt16x2.parameters = UInt16x2_operator_neq_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2)->signature = "b8x2 operator!=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2)->name = "operator!=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2)->nameWithVarNames = "operator!=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_neq_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator* with Float16
    UInt16x2_operator_scale_Float16_arg.name = "arg"_c;
    UInt16x2_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt16x2_operator_scale_Float16.name = "operator*"_c;
    UInt16x2_operator_scale_Float16.backendIndex = 436;
    UInt16x2_operator_scale_Float16.returnType = Type::FullType { Float16x2Type.name };
    UInt16x2_operator_scale_Float16.parameters = UInt16x2_operator_scale_Float16_args;
    Symbol::Resolved(&UInt16x2_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x2_operator_scale_Float16)->signature = "f16x2 operator*(f16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_Float16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with UInt16
    UInt16x2_operator_scale_UInt16_arg.name = "arg"_c;
    UInt16x2_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x2_operator_scale_UInt16.name = "operator*"_c;
    UInt16x2_operator_scale_UInt16.backendIndex = 437;
    UInt16x2_operator_scale_UInt16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_scale_UInt16.parameters = UInt16x2_operator_scale_UInt16_args;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16)->signature = "u16x2 operator*(u16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_UInt16)->returnTypeSymbol = &UInt16x2Type;

    /// operator* with Int16
    UInt16x2_operator_scale_Int16_arg.name = "arg"_c;
    UInt16x2_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x2_operator_scale_Int16.name = "operator*"_c;
    UInt16x2_operator_scale_Int16.backendIndex = 438;
    UInt16x2_operator_scale_Int16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_scale_Int16.parameters = UInt16x2_operator_scale_Int16_args;
    Symbol::Resolved(&UInt16x2_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x2_operator_scale_Int16)->signature = "u16x2 operator*(i16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&UInt16x2_operator_scale_Int16)->returnTypeSymbol = &UInt16x2Type;

    /// operator| with UInt16x2
    UInt16x2_operator_or_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_or_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_or_UInt16x2.name = "operator|"_c;
    UInt16x2_operator_or_UInt16x2.backendIndex = 439;
    UInt16x2_operator_or_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_or_UInt16x2.parameters = UInt16x2_operator_or_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2)->signature = "u16x2 operator|(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2)->name = "operator|(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2)->nameWithVarNames = "operator|(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_or_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator& with UInt16x2
    UInt16x2_operator_and_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_and_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_and_UInt16x2.name = "operator&"_c;
    UInt16x2_operator_and_UInt16x2.backendIndex = 440;
    UInt16x2_operator_and_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_and_UInt16x2.parameters = UInt16x2_operator_and_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2)->signature = "u16x2 operator&(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2)->name = "operator&(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2)->nameWithVarNames = "operator&(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_and_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator^ with UInt16x2
    UInt16x2_operator_xor_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_xor_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_xor_UInt16x2.name = "operator^"_c;
    UInt16x2_operator_xor_UInt16x2.backendIndex = 441;
    UInt16x2_operator_xor_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_xor_UInt16x2.parameters = UInt16x2_operator_xor_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2)->signature = "u16x2 operator^(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2)->name = "operator^(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2)->nameWithVarNames = "operator^(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_xor_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator<< with UInt16x2
    UInt16x2_operator_lsh_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_lsh_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_lsh_UInt16x2.name = "operator<<"_c;
    UInt16x2_operator_lsh_UInt16x2.backendIndex = 442;
    UInt16x2_operator_lsh_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_lsh_UInt16x2.parameters = UInt16x2_operator_lsh_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2)->signature = "u16x2 operator<<(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2)->name = "operator<<(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2)->nameWithVarNames = "operator<<(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lsh_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator>> with UInt16x2
    UInt16x2_operator_rsh_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_rsh_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_rsh_UInt16x2.name = "operator>>"_c;
    UInt16x2_operator_rsh_UInt16x2.backendIndex = 443;
    UInt16x2_operator_rsh_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_rsh_UInt16x2.parameters = UInt16x2_operator_rsh_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2)->signature = "u16x2 operator>>(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2)->name = "operator>>(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2)->nameWithVarNames = "operator>>(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_rsh_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator|= with UInt16x2
    UInt16x2_operator_orasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_orasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_orasg_UInt16x2.name = "operator|="_c;
    UInt16x2_operator_orasg_UInt16x2.backendIndex = 444;
    UInt16x2_operator_orasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_orasg_UInt16x2.parameters = UInt16x2_operator_orasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2)->signature = "u16x2 operator|=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2)->name = "operator|=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2)->nameWithVarNames = "operator|=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_orasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator&= with UInt16x2
    UInt16x2_operator_andasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_andasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_andasg_UInt16x2.name = "operator&="_c;
    UInt16x2_operator_andasg_UInt16x2.backendIndex = 445;
    UInt16x2_operator_andasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_andasg_UInt16x2.parameters = UInt16x2_operator_andasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2)->signature = "u16x2 operator&=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2)->name = "operator&=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2)->nameWithVarNames = "operator&=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_andasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator^= with UInt16x2
    UInt16x2_operator_xorasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_xorasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_xorasg_UInt16x2.name = "operator^="_c;
    UInt16x2_operator_xorasg_UInt16x2.backendIndex = 446;
    UInt16x2_operator_xorasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_xorasg_UInt16x2.parameters = UInt16x2_operator_xorasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2)->signature = "u16x2 operator^=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2)->name = "operator^=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2)->nameWithVarNames = "operator^=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_xorasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator<<= with UInt16x2
    UInt16x2_operator_lshasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_lshasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_lshasg_UInt16x2.name = "operator<<="_c;
    UInt16x2_operator_lshasg_UInt16x2.backendIndex = 447;
    UInt16x2_operator_lshasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_lshasg_UInt16x2.parameters = UInt16x2_operator_lshasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2)->signature = "u16x2 operator<<=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2)->name = "operator<<=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2)->nameWithVarNames = "operator<<=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_lshasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// operator>>= with UInt16x2
    UInt16x2_operator_rhsasg_UInt16x2_arg.name = "arg"_c;
    UInt16x2_operator_rhsasg_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_operator_rhsasg_UInt16x2.name = "operator>>="_c;
    UInt16x2_operator_rhsasg_UInt16x2.backendIndex = 448;
    UInt16x2_operator_rhsasg_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_operator_rhsasg_UInt16x2.parameters = UInt16x2_operator_rhsasg_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2)->signature = "u16x2 operator>>=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2)->name = "operator>>=(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2)->nameWithVarNames = "operator>>=(arg : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_operator_rhsasg_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 124> { 
        std::pair{ "g"_c, &UInt16Type },
        std::pair{ "gg"_c, &UInt16x2Type },
        std::pair{ "ggg"_c, &UInt16x3Type },
        std::pair{ "gggg"_c, &UInt16x4Type },
        std::pair{ "gggr"_c, &UInt16x4Type },
        std::pair{ "ggr"_c, &UInt16x3Type },
        std::pair{ "ggrg"_c, &UInt16x4Type },
        std::pair{ "ggrr"_c, &UInt16x4Type },
        std::pair{ "gr"_c, &UInt16x2Type },
        std::pair{ "grg"_c, &UInt16x3Type },
        std::pair{ "grgg"_c, &UInt16x4Type },
        std::pair{ "grgr"_c, &UInt16x4Type },
        std::pair{ "grr"_c, &UInt16x3Type },
        std::pair{ "grrg"_c, &UInt16x4Type },
        std::pair{ "grrr"_c, &UInt16x4Type },
        std::pair{ "operator!="_c, &UInt16x2_operator_neq_UInt16x2 },
        std::pair{ "operator!=(u16x2)"_c, &UInt16x2_operator_neq_UInt16x2 },
        std::pair{ "operator%"_c, &UInt16x2_operator_mod_UInt16x2 },
        std::pair{ "operator%(u16x2)"_c, &UInt16x2_operator_mod_UInt16x2 },
        std::pair{ "operator&"_c, &UInt16x2_operator_and_UInt16x2 },
        std::pair{ "operator&(u16x2)"_c, &UInt16x2_operator_and_UInt16x2 },
        std::pair{ "operator&="_c, &UInt16x2_operator_andasg_UInt16x2 },
        std::pair{ "operator&=(u16x2)"_c, &UInt16x2_operator_andasg_UInt16x2 },
        std::pair{ "operator*"_c, &UInt16x2_operator_mul_UInt16x2 },
        std::pair{ "operator*"_c, &UInt16x2_operator_scale_Float16 },
        std::pair{ "operator*"_c, &UInt16x2_operator_scale_UInt16 },
        std::pair{ "operator*"_c, &UInt16x2_operator_scale_Int16 },
        std::pair{ "operator*(f16)"_c, &UInt16x2_operator_scale_Float16 },
        std::pair{ "operator*(i16)"_c, &UInt16x2_operator_scale_Int16 },
        std::pair{ "operator*(u16)"_c, &UInt16x2_operator_scale_UInt16 },
        std::pair{ "operator*(u16x2)"_c, &UInt16x2_operator_mul_UInt16x2 },
        std::pair{ "operator*="_c, &UInt16x2_operator_mulasg_UInt16x2 },
        std::pair{ "operator*=(u16x2)"_c, &UInt16x2_operator_mulasg_UInt16x2 },
        std::pair{ "operator+"_c, &UInt16x2_operator_add_UInt16x2 },
        std::pair{ "operator+(u16x2)"_c, &UInt16x2_operator_add_UInt16x2 },
        std::pair{ "operator+="_c, &UInt16x2_operator_addasg_UInt16x2 },
        std::pair{ "operator+=(u16x2)"_c, &UInt16x2_operator_addasg_UInt16x2 },
        std::pair{ "operator-"_c, &UInt16x2_operator_sub_UInt16x2 },
        std::pair{ "operator-(u16x2)"_c, &UInt16x2_operator_sub_UInt16x2 },
        std::pair{ "operator-="_c, &UInt16x2_operator_subasg_UInt16x2 },
        std::pair{ "operator-=(u16x2)"_c, &UInt16x2_operator_subasg_UInt16x2 },
        std::pair{ "operator/"_c, &UInt16x2_operator_div_UInt16x2 },
        std::pair{ "operator/(u16x2)"_c, &UInt16x2_operator_div_UInt16x2 },
        std::pair{ "operator/="_c, &UInt16x2_operator_divasg_UInt16x2 },
        std::pair{ "operator/=(u16x2)"_c, &UInt16x2_operator_divasg_UInt16x2 },
        std::pair{ "operator<"_c, &UInt16x2_operator_lt_UInt16x2 },
        std::pair{ "operator<(u16x2)"_c, &UInt16x2_operator_lt_UInt16x2 },
        std::pair{ "operator<<"_c, &UInt16x2_operator_lsh_UInt16x2 },
        std::pair{ "operator<<(u16x2)"_c, &UInt16x2_operator_lsh_UInt16x2 },
        std::pair{ "operator<<="_c, &UInt16x2_operator_lshasg_UInt16x2 },
        std::pair{ "operator<<=(u16x2)"_c, &UInt16x2_operator_lshasg_UInt16x2 },
        std::pair{ "operator<="_c, &UInt16x2_operator_lte_UInt16x2 },
        std::pair{ "operator<=(u16x2)"_c, &UInt16x2_operator_lte_UInt16x2 },
        std::pair{ "operator=="_c, &UInt16x2_operator_eq_UInt16x2 },
        std::pair{ "operator==(u16x2)"_c, &UInt16x2_operator_eq_UInt16x2 },
        std::pair{ "operator>"_c, &UInt16x2_operator_gt_UInt16x2 },
        std::pair{ "operator>(u16x2)"_c, &UInt16x2_operator_gt_UInt16x2 },
        std::pair{ "operator>="_c, &UInt16x2_operator_gte_UInt16x2 },
        std::pair{ "operator>=(u16x2)"_c, &UInt16x2_operator_gte_UInt16x2 },
        std::pair{ "operator>>"_c, &UInt16x2_operator_rsh_UInt16x2 },
        std::pair{ "operator>>(u16x2)"_c, &UInt16x2_operator_rsh_UInt16x2 },
        std::pair{ "operator>>="_c, &UInt16x2_operator_rhsasg_UInt16x2 },
        std::pair{ "operator>>=(u16x2)"_c, &UInt16x2_operator_rhsasg_UInt16x2 },
        std::pair{ "operator[]"_c, &UInt16x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &UInt16x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &UInt16x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &UInt16x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &UInt16x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &UInt16x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &UInt16x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &UInt16x2_operator_index_UInt32 },
        std::pair{ "operator^"_c, &UInt16x2_operator_xor_UInt16x2 },
        std::pair{ "operator^(u16x2)"_c, &UInt16x2_operator_xor_UInt16x2 },
        std::pair{ "operator^="_c, &UInt16x2_operator_xorasg_UInt16x2 },
        std::pair{ "operator^=(u16x2)"_c, &UInt16x2_operator_xorasg_UInt16x2 },
        std::pair{ "operator|"_c, &UInt16x2_operator_or_UInt16x2 },
        std::pair{ "operator|(u16x2)"_c, &UInt16x2_operator_or_UInt16x2 },
        std::pair{ "operator|="_c, &UInt16x2_operator_orasg_UInt16x2 },
        std::pair{ "operator|=(u16x2)"_c, &UInt16x2_operator_orasg_UInt16x2 },
        std::pair{ "r"_c, &UInt16Type },
        std::pair{ "rg"_c, &UInt16x2Type },
        std::pair{ "rgg"_c, &UInt16x3Type },
        std::pair{ "rggg"_c, &UInt16x4Type },
        std::pair{ "rggr"_c, &UInt16x4Type },
        std::pair{ "rgr"_c, &UInt16x3Type },
        std::pair{ "rgrg"_c, &UInt16x4Type },
        std::pair{ "rgrr"_c, &UInt16x4Type },
        std::pair{ "rr"_c, &UInt16x2Type },
        std::pair{ "rrg"_c, &UInt16x3Type },
        std::pair{ "rrgg"_c, &UInt16x4Type },
        std::pair{ "rrgr"_c, &UInt16x4Type },
        std::pair{ "rrr"_c, &UInt16x3Type },
        std::pair{ "rrrg"_c, &UInt16x4Type },
        std::pair{ "rrrr"_c, &UInt16x4Type },
        std::pair{ "x"_c, &UInt16Type },
        std::pair{ "xx"_c, &UInt16x2Type },
        std::pair{ "xxx"_c, &UInt16x3Type },
        std::pair{ "xxxx"_c, &UInt16x4Type },
        std::pair{ "xxxy"_c, &UInt16x4Type },
        std::pair{ "xxy"_c, &UInt16x3Type },
        std::pair{ "xxyx"_c, &UInt16x4Type },
        std::pair{ "xxyy"_c, &UInt16x4Type },
        std::pair{ "xy"_c, &UInt16x2Type },
        std::pair{ "xyx"_c, &UInt16x3Type },
        std::pair{ "xyxx"_c, &UInt16x4Type },
        std::pair{ "xyxy"_c, &UInt16x4Type },
        std::pair{ "xyy"_c, &UInt16x3Type },
        std::pair{ "xyyx"_c, &UInt16x4Type },
        std::pair{ "xyyy"_c, &UInt16x4Type },
        std::pair{ "y"_c, &UInt16Type },
        std::pair{ "yx"_c, &UInt16x2Type },
        std::pair{ "yxx"_c, &UInt16x3Type },
        std::pair{ "yxxx"_c, &UInt16x4Type },
        std::pair{ "yxxy"_c, &UInt16x4Type },
        std::pair{ "yxy"_c, &UInt16x3Type },
        std::pair{ "yxyx"_c, &UInt16x4Type },
        std::pair{ "yxyy"_c, &UInt16x4Type },
        std::pair{ "yy"_c, &UInt16x2Type },
        std::pair{ "yyx"_c, &UInt16x3Type },
        std::pair{ "yyxx"_c, &UInt16x4Type },
        std::pair{ "yyxy"_c, &UInt16x4Type },
        std::pair{ "yyy"_c, &UInt16x3Type },
        std::pair{ "yyyx"_c, &UInt16x4Type },
        std::pair{ "yyyy"_c, &UInt16x4Type }
    };
}
UInt16x2 UInt16x2Type;

/// operator[] with Int32
Variable Int16x2_operator_index_Int32_arg;
Function Int16x2_operator_index_Int32;
inline constexpr std::array Int16x2_operator_index_Int32_args = { &Int16x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int16x2_operator_index_UInt32_arg;
Function Int16x2_operator_index_UInt32;
inline constexpr std::array Int16x2_operator_index_UInt32_args = { &Int16x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int16x2_operator_index_Int16_arg;
Function Int16x2_operator_index_Int16;
inline constexpr std::array Int16x2_operator_index_Int16_args = { &Int16x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int16x2_operator_index_UInt16_arg;
Function Int16x2_operator_index_UInt16;
inline constexpr std::array Int16x2_operator_index_UInt16_args = { &Int16x2_operator_index_UInt16_arg };

/// operator+ with Int16x2
Variable Int16x2_operator_add_Int16x2_arg;
Function Int16x2_operator_add_Int16x2;
inline constexpr std::array Int16x2_operator_add_Int16x2_args = { &Int16x2_operator_add_Int16x2_arg };

/// operator- with Int16x2
Variable Int16x2_operator_sub_Int16x2_arg;
Function Int16x2_operator_sub_Int16x2;
inline constexpr std::array Int16x2_operator_sub_Int16x2_args = { &Int16x2_operator_sub_Int16x2_arg };

/// operator* with Int16x2
Variable Int16x2_operator_mul_Int16x2_arg;
Function Int16x2_operator_mul_Int16x2;
inline constexpr std::array Int16x2_operator_mul_Int16x2_args = { &Int16x2_operator_mul_Int16x2_arg };

/// operator/ with Int16x2
Variable Int16x2_operator_div_Int16x2_arg;
Function Int16x2_operator_div_Int16x2;
inline constexpr std::array Int16x2_operator_div_Int16x2_args = { &Int16x2_operator_div_Int16x2_arg };

/// operator% with Int16x2
Variable Int16x2_operator_mod_Int16x2_arg;
Function Int16x2_operator_mod_Int16x2;
inline constexpr std::array Int16x2_operator_mod_Int16x2_args = { &Int16x2_operator_mod_Int16x2_arg };

/// operator+= with Int16x2
Variable Int16x2_operator_addasg_Int16x2_arg;
Function Int16x2_operator_addasg_Int16x2;
inline constexpr std::array Int16x2_operator_addasg_Int16x2_args = { &Int16x2_operator_addasg_Int16x2_arg };

/// operator-= with Int16x2
Variable Int16x2_operator_subasg_Int16x2_arg;
Function Int16x2_operator_subasg_Int16x2;
inline constexpr std::array Int16x2_operator_subasg_Int16x2_args = { &Int16x2_operator_subasg_Int16x2_arg };

/// operator*= with Int16x2
Variable Int16x2_operator_mulasg_Int16x2_arg;
Function Int16x2_operator_mulasg_Int16x2;
inline constexpr std::array Int16x2_operator_mulasg_Int16x2_args = { &Int16x2_operator_mulasg_Int16x2_arg };

/// operator/= with Int16x2
Variable Int16x2_operator_divasg_Int16x2_arg;
Function Int16x2_operator_divasg_Int16x2;
inline constexpr std::array Int16x2_operator_divasg_Int16x2_args = { &Int16x2_operator_divasg_Int16x2_arg };

/// operator< with Int16x2
Variable Int16x2_operator_lt_Int16x2_arg;
Function Int16x2_operator_lt_Int16x2;
inline constexpr std::array Int16x2_operator_lt_Int16x2_args = { &Int16x2_operator_lt_Int16x2_arg };

/// operator<= with Int16x2
Variable Int16x2_operator_lte_Int16x2_arg;
Function Int16x2_operator_lte_Int16x2;
inline constexpr std::array Int16x2_operator_lte_Int16x2_args = { &Int16x2_operator_lte_Int16x2_arg };

/// operator> with Int16x2
Variable Int16x2_operator_gt_Int16x2_arg;
Function Int16x2_operator_gt_Int16x2;
inline constexpr std::array Int16x2_operator_gt_Int16x2_args = { &Int16x2_operator_gt_Int16x2_arg };

/// operator>= with Int16x2
Variable Int16x2_operator_gte_Int16x2_arg;
Function Int16x2_operator_gte_Int16x2;
inline constexpr std::array Int16x2_operator_gte_Int16x2_args = { &Int16x2_operator_gte_Int16x2_arg };

/// operator== with Int16x2
Variable Int16x2_operator_eq_Int16x2_arg;
Function Int16x2_operator_eq_Int16x2;
inline constexpr std::array Int16x2_operator_eq_Int16x2_args = { &Int16x2_operator_eq_Int16x2_arg };

/// operator!= with Int16x2
Variable Int16x2_operator_neq_Int16x2_arg;
Function Int16x2_operator_neq_Int16x2;
inline constexpr std::array Int16x2_operator_neq_Int16x2_args = { &Int16x2_operator_neq_Int16x2_arg };

/// operator* with Float16
Variable Int16x2_operator_scale_Float16_arg;
Function Int16x2_operator_scale_Float16;
inline constexpr std::array Int16x2_operator_scale_Float16_args = { &Int16x2_operator_scale_Float16_arg };

/// operator* with UInt16
Variable Int16x2_operator_scale_UInt16_arg;
Function Int16x2_operator_scale_UInt16;
inline constexpr std::array Int16x2_operator_scale_UInt16_args = { &Int16x2_operator_scale_UInt16_arg };

/// operator* with Int16
Variable Int16x2_operator_scale_Int16_arg;
Function Int16x2_operator_scale_Int16;
inline constexpr std::array Int16x2_operator_scale_Int16_args = { &Int16x2_operator_scale_Int16_arg };

/// operator| with Int16x2
Variable Int16x2_operator_or_Int16x2_arg;
Function Int16x2_operator_or_Int16x2;
inline constexpr std::array Int16x2_operator_or_Int16x2_args = { &Int16x2_operator_or_Int16x2_arg };

/// operator& with Int16x2
Variable Int16x2_operator_and_Int16x2_arg;
Function Int16x2_operator_and_Int16x2;
inline constexpr std::array Int16x2_operator_and_Int16x2_args = { &Int16x2_operator_and_Int16x2_arg };

/// operator^ with Int16x2
Variable Int16x2_operator_xor_Int16x2_arg;
Function Int16x2_operator_xor_Int16x2;
inline constexpr std::array Int16x2_operator_xor_Int16x2_args = { &Int16x2_operator_xor_Int16x2_arg };

/// operator<< with Int16x2
Variable Int16x2_operator_lsh_Int16x2_arg;
Function Int16x2_operator_lsh_Int16x2;
inline constexpr std::array Int16x2_operator_lsh_Int16x2_args = { &Int16x2_operator_lsh_Int16x2_arg };

/// operator>> with Int16x2
Variable Int16x2_operator_rsh_Int16x2_arg;
Function Int16x2_operator_rsh_Int16x2;
inline constexpr std::array Int16x2_operator_rsh_Int16x2_args = { &Int16x2_operator_rsh_Int16x2_arg };

/// operator|= with Int16x2
Variable Int16x2_operator_orasg_Int16x2_arg;
Function Int16x2_operator_orasg_Int16x2;
inline constexpr std::array Int16x2_operator_orasg_Int16x2_args = { &Int16x2_operator_orasg_Int16x2_arg };

/// operator&= with Int16x2
Variable Int16x2_operator_andasg_Int16x2_arg;
Function Int16x2_operator_andasg_Int16x2;
inline constexpr std::array Int16x2_operator_andasg_Int16x2_args = { &Int16x2_operator_andasg_Int16x2_arg };

/// operator^= with Int16x2
Variable Int16x2_operator_xorasg_Int16x2_arg;
Function Int16x2_operator_xorasg_Int16x2;
inline constexpr std::array Int16x2_operator_xorasg_Int16x2_args = { &Int16x2_operator_xorasg_Int16x2_arg };

/// operator<<= with Int16x2
Variable Int16x2_operator_lshasg_Int16x2_arg;
Function Int16x2_operator_lshasg_Int16x2;
inline constexpr std::array Int16x2_operator_lshasg_Int16x2_args = { &Int16x2_operator_lshasg_Int16x2_arg };

/// operator>>= with Int16x2
Variable Int16x2_operator_rhsasg_Int16x2_arg;
Function Int16x2_operator_rhsasg_Int16x2;
inline constexpr std::array Int16x2_operator_rhsasg_Int16x2_args = { &Int16x2_operator_rhsasg_Int16x2_arg };

Int16x2::Int16x2()
{
    this->name = "i16x2"_c;
    this->columnSize = 2;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    /// operator[] with Int32
    Int16x2_operator_index_Int32_arg.name = "arg"_c;
    Int16x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16x2_operator_index_Int32.name = "operator[]"_c;
    Int16x2_operator_index_Int32.backendIndex = 464;
    Int16x2_operator_index_Int32.returnType = Type::FullType { Int16Type.name };
    Int16x2_operator_index_Int32.parameters = Int16x2_operator_index_Int32_args;
    Symbol::Resolved(&Int16x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x2_operator_index_Int32)->signature = "i16 operator[](i32)"_c;
    Symbol::Resolved(&Int16x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int16x2_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int16x2_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt32
    Int16x2_operator_index_UInt32_arg.name = "arg"_c;
    Int16x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16x2_operator_index_UInt32.name = "operator[]"_c;
    Int16x2_operator_index_UInt32.backendIndex = 465;
    Int16x2_operator_index_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16x2_operator_index_UInt32.parameters = Int16x2_operator_index_UInt32_args;
    Symbol::Resolved(&Int16x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x2_operator_index_UInt32)->signature = "i16 operator[](u32)"_c;
    Symbol::Resolved(&Int16x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int16x2_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int16x2_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int16
    Int16x2_operator_index_Int16_arg.name = "arg"_c;
    Int16x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x2_operator_index_Int16.name = "operator[]"_c;
    Int16x2_operator_index_Int16.backendIndex = 466;
    Int16x2_operator_index_Int16.returnType = Type::FullType { Int16Type.name };
    Int16x2_operator_index_Int16.parameters = Int16x2_operator_index_Int16_args;
    Symbol::Resolved(&Int16x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x2_operator_index_Int16)->signature = "i16 operator[](i16)"_c;
    Symbol::Resolved(&Int16x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int16x2_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int16x2_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt16
    Int16x2_operator_index_UInt16_arg.name = "arg"_c;
    Int16x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x2_operator_index_UInt16.name = "operator[]"_c;
    Int16x2_operator_index_UInt16.backendIndex = 467;
    Int16x2_operator_index_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16x2_operator_index_UInt16.parameters = Int16x2_operator_index_UInt16_args;
    Symbol::Resolved(&Int16x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x2_operator_index_UInt16)->signature = "i16 operator[](u16)"_c;
    Symbol::Resolved(&Int16x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int16x2_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int16x2_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    /// operator+ with Int16x2
    Int16x2_operator_add_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_add_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_add_Int16x2.name = "operator+"_c;
    Int16x2_operator_add_Int16x2.backendIndex = 468;
    Int16x2_operator_add_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_add_Int16x2.parameters = Int16x2_operator_add_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_add_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_add_Int16x2)->signature = "i16x2 operator+(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_add_Int16x2)->name = "operator+(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_add_Int16x2)->nameWithVarNames = "operator+(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_add_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator- with Int16x2
    Int16x2_operator_sub_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_sub_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_sub_Int16x2.name = "operator-"_c;
    Int16x2_operator_sub_Int16x2.backendIndex = 469;
    Int16x2_operator_sub_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_sub_Int16x2.parameters = Int16x2_operator_sub_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2)->signature = "i16x2 operator-(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2)->name = "operator-(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2)->nameWithVarNames = "operator-(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_sub_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator* with Int16x2
    Int16x2_operator_mul_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_mul_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_mul_Int16x2.name = "operator*"_c;
    Int16x2_operator_mul_Int16x2.backendIndex = 470;
    Int16x2_operator_mul_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_mul_Int16x2.parameters = Int16x2_operator_mul_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2)->signature = "i16x2 operator*(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2)->name = "operator*(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2)->nameWithVarNames = "operator*(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mul_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator/ with Int16x2
    Int16x2_operator_div_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_div_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_div_Int16x2.name = "operator/"_c;
    Int16x2_operator_div_Int16x2.backendIndex = 471;
    Int16x2_operator_div_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_div_Int16x2.parameters = Int16x2_operator_div_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_div_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_div_Int16x2)->signature = "i16x2 operator/(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_div_Int16x2)->name = "operator/(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_div_Int16x2)->nameWithVarNames = "operator/(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_div_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator% with Int16x2
    Int16x2_operator_mod_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_mod_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_mod_Int16x2.name = "operator%"_c;
    Int16x2_operator_mod_Int16x2.backendIndex = 472;
    Int16x2_operator_mod_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_mod_Int16x2.parameters = Int16x2_operator_mod_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2)->signature = "i16x2 operator%(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2)->name = "operator%(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2)->nameWithVarNames = "operator%(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mod_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator+= with Int16x2
    Int16x2_operator_addasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_addasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_addasg_Int16x2.name = "operator+="_c;
    Int16x2_operator_addasg_Int16x2.backendIndex = 473;
    Int16x2_operator_addasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_addasg_Int16x2.parameters = Int16x2_operator_addasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2)->signature = "i16x2 operator+=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2)->name = "operator+=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2)->nameWithVarNames = "operator+=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_addasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator-= with Int16x2
    Int16x2_operator_subasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_subasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_subasg_Int16x2.name = "operator-="_c;
    Int16x2_operator_subasg_Int16x2.backendIndex = 474;
    Int16x2_operator_subasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_subasg_Int16x2.parameters = Int16x2_operator_subasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2)->signature = "i16x2 operator-=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2)->name = "operator-=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2)->nameWithVarNames = "operator-=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_subasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator*= with Int16x2
    Int16x2_operator_mulasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_mulasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_mulasg_Int16x2.name = "operator*="_c;
    Int16x2_operator_mulasg_Int16x2.backendIndex = 475;
    Int16x2_operator_mulasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_mulasg_Int16x2.parameters = Int16x2_operator_mulasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2)->signature = "i16x2 operator*=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2)->name = "operator*=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2)->nameWithVarNames = "operator*=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_mulasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator/= with Int16x2
    Int16x2_operator_divasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_divasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_divasg_Int16x2.name = "operator/="_c;
    Int16x2_operator_divasg_Int16x2.backendIndex = 476;
    Int16x2_operator_divasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_divasg_Int16x2.parameters = Int16x2_operator_divasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2)->signature = "i16x2 operator/=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2)->name = "operator/=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2)->nameWithVarNames = "operator/=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_divasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator< with Int16x2
    Int16x2_operator_lt_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_lt_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_lt_Int16x2.name = "operator<"_c;
    Int16x2_operator_lt_Int16x2.backendIndex = 477;
    Int16x2_operator_lt_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Int16x2_operator_lt_Int16x2.parameters = Int16x2_operator_lt_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2)->signature = "b8x2 operator<(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2)->name = "operator<(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2)->nameWithVarNames = "operator<(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lt_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator<= with Int16x2
    Int16x2_operator_lte_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_lte_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_lte_Int16x2.name = "operator<="_c;
    Int16x2_operator_lte_Int16x2.backendIndex = 478;
    Int16x2_operator_lte_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Int16x2_operator_lte_Int16x2.parameters = Int16x2_operator_lte_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2)->signature = "b8x2 operator<=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2)->name = "operator<=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2)->nameWithVarNames = "operator<=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lte_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator> with Int16x2
    Int16x2_operator_gt_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_gt_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_gt_Int16x2.name = "operator>"_c;
    Int16x2_operator_gt_Int16x2.backendIndex = 479;
    Int16x2_operator_gt_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Int16x2_operator_gt_Int16x2.parameters = Int16x2_operator_gt_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2)->signature = "b8x2 operator>(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2)->name = "operator>(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2)->nameWithVarNames = "operator>(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_gt_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator>= with Int16x2
    Int16x2_operator_gte_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_gte_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_gte_Int16x2.name = "operator>="_c;
    Int16x2_operator_gte_Int16x2.backendIndex = 480;
    Int16x2_operator_gte_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Int16x2_operator_gte_Int16x2.parameters = Int16x2_operator_gte_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2)->signature = "b8x2 operator>=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2)->name = "operator>=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2)->nameWithVarNames = "operator>=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_gte_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator== with Int16x2
    Int16x2_operator_eq_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_eq_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_eq_Int16x2.name = "operator=="_c;
    Int16x2_operator_eq_Int16x2.backendIndex = 481;
    Int16x2_operator_eq_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Int16x2_operator_eq_Int16x2.parameters = Int16x2_operator_eq_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2)->signature = "b8x2 operator==(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2)->name = "operator==(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2)->nameWithVarNames = "operator==(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_eq_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator!= with Int16x2
    Int16x2_operator_neq_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_neq_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_neq_Int16x2.name = "operator!="_c;
    Int16x2_operator_neq_Int16x2.backendIndex = 482;
    Int16x2_operator_neq_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Int16x2_operator_neq_Int16x2.parameters = Int16x2_operator_neq_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2)->signature = "b8x2 operator!=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2)->name = "operator!=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2)->nameWithVarNames = "operator!=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_neq_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// operator* with Float16
    Int16x2_operator_scale_Float16_arg.name = "arg"_c;
    Int16x2_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int16x2_operator_scale_Float16.name = "operator*"_c;
    Int16x2_operator_scale_Float16.backendIndex = 483;
    Int16x2_operator_scale_Float16.returnType = Type::FullType { Float16x2Type.name };
    Int16x2_operator_scale_Float16.parameters = Int16x2_operator_scale_Float16_args;
    Symbol::Resolved(&Int16x2_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x2_operator_scale_Float16)->signature = "f16x2 operator*(f16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_Float16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with UInt16
    Int16x2_operator_scale_UInt16_arg.name = "arg"_c;
    Int16x2_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x2_operator_scale_UInt16.name = "operator*"_c;
    Int16x2_operator_scale_UInt16.backendIndex = 484;
    Int16x2_operator_scale_UInt16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_scale_UInt16.parameters = Int16x2_operator_scale_UInt16_args;
    Symbol::Resolved(&Int16x2_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x2_operator_scale_UInt16)->signature = "i16x2 operator*(u16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_UInt16)->returnTypeSymbol = &Int16x2Type;

    /// operator* with Int16
    Int16x2_operator_scale_Int16_arg.name = "arg"_c;
    Int16x2_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x2_operator_scale_Int16.name = "operator*"_c;
    Int16x2_operator_scale_Int16.backendIndex = 485;
    Int16x2_operator_scale_Int16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_scale_Int16.parameters = Int16x2_operator_scale_Int16_args;
    Symbol::Resolved(&Int16x2_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x2_operator_scale_Int16)->signature = "i16x2 operator*(i16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Int16x2_operator_scale_Int16)->returnTypeSymbol = &Int16x2Type;

    /// operator| with Int16x2
    Int16x2_operator_or_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_or_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_or_Int16x2.name = "operator|"_c;
    Int16x2_operator_or_Int16x2.backendIndex = 486;
    Int16x2_operator_or_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_or_Int16x2.parameters = Int16x2_operator_or_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_or_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_or_Int16x2)->signature = "i16x2 operator|(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_or_Int16x2)->name = "operator|(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_or_Int16x2)->nameWithVarNames = "operator|(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_or_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator& with Int16x2
    Int16x2_operator_and_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_and_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_and_Int16x2.name = "operator&"_c;
    Int16x2_operator_and_Int16x2.backendIndex = 487;
    Int16x2_operator_and_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_and_Int16x2.parameters = Int16x2_operator_and_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_and_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_and_Int16x2)->signature = "i16x2 operator&(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_and_Int16x2)->name = "operator&(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_and_Int16x2)->nameWithVarNames = "operator&(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_and_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator^ with Int16x2
    Int16x2_operator_xor_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_xor_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_xor_Int16x2.name = "operator^"_c;
    Int16x2_operator_xor_Int16x2.backendIndex = 488;
    Int16x2_operator_xor_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_xor_Int16x2.parameters = Int16x2_operator_xor_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2)->signature = "i16x2 operator^(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2)->name = "operator^(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2)->nameWithVarNames = "operator^(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_xor_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator<< with Int16x2
    Int16x2_operator_lsh_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_lsh_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_lsh_Int16x2.name = "operator<<"_c;
    Int16x2_operator_lsh_Int16x2.backendIndex = 489;
    Int16x2_operator_lsh_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_lsh_Int16x2.parameters = Int16x2_operator_lsh_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2)->signature = "i16x2 operator<<(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2)->name = "operator<<(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2)->nameWithVarNames = "operator<<(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lsh_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator>> with Int16x2
    Int16x2_operator_rsh_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_rsh_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_rsh_Int16x2.name = "operator>>"_c;
    Int16x2_operator_rsh_Int16x2.backendIndex = 490;
    Int16x2_operator_rsh_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_rsh_Int16x2.parameters = Int16x2_operator_rsh_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2)->signature = "i16x2 operator>>(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2)->name = "operator>>(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2)->nameWithVarNames = "operator>>(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_rsh_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator|= with Int16x2
    Int16x2_operator_orasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_orasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_orasg_Int16x2.name = "operator|="_c;
    Int16x2_operator_orasg_Int16x2.backendIndex = 491;
    Int16x2_operator_orasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_orasg_Int16x2.parameters = Int16x2_operator_orasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2)->signature = "i16x2 operator|=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2)->name = "operator|=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2)->nameWithVarNames = "operator|=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_orasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator&= with Int16x2
    Int16x2_operator_andasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_andasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_andasg_Int16x2.name = "operator&="_c;
    Int16x2_operator_andasg_Int16x2.backendIndex = 492;
    Int16x2_operator_andasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_andasg_Int16x2.parameters = Int16x2_operator_andasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2)->signature = "i16x2 operator&=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2)->name = "operator&=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2)->nameWithVarNames = "operator&=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_andasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator^= with Int16x2
    Int16x2_operator_xorasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_xorasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_xorasg_Int16x2.name = "operator^="_c;
    Int16x2_operator_xorasg_Int16x2.backendIndex = 493;
    Int16x2_operator_xorasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_xorasg_Int16x2.parameters = Int16x2_operator_xorasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2)->signature = "i16x2 operator^=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2)->name = "operator^=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2)->nameWithVarNames = "operator^=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_xorasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator<<= with Int16x2
    Int16x2_operator_lshasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_lshasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_lshasg_Int16x2.name = "operator<<="_c;
    Int16x2_operator_lshasg_Int16x2.backendIndex = 494;
    Int16x2_operator_lshasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_lshasg_Int16x2.parameters = Int16x2_operator_lshasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2)->signature = "i16x2 operator<<=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2)->name = "operator<<=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2)->nameWithVarNames = "operator<<=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_lshasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// operator>>= with Int16x2
    Int16x2_operator_rhsasg_Int16x2_arg.name = "arg"_c;
    Int16x2_operator_rhsasg_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_operator_rhsasg_Int16x2.name = "operator>>="_c;
    Int16x2_operator_rhsasg_Int16x2.backendIndex = 495;
    Int16x2_operator_rhsasg_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_operator_rhsasg_Int16x2.parameters = Int16x2_operator_rhsasg_Int16x2_args;
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2)->signature = "i16x2 operator>>=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2)->name = "operator>>=(i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2)->nameWithVarNames = "operator>>=(arg : i16x2)"_c;
    Symbol::Resolved(&Int16x2_operator_rhsasg_Int16x2)->returnTypeSymbol = &Int16x2Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 124> { 
        std::pair{ "g"_c, &Int16Type },
        std::pair{ "gg"_c, &Int16x2Type },
        std::pair{ "ggg"_c, &Int16x3Type },
        std::pair{ "gggg"_c, &Int16x4Type },
        std::pair{ "gggr"_c, &Int16x4Type },
        std::pair{ "ggr"_c, &Int16x3Type },
        std::pair{ "ggrg"_c, &Int16x4Type },
        std::pair{ "ggrr"_c, &Int16x4Type },
        std::pair{ "gr"_c, &Int16x2Type },
        std::pair{ "grg"_c, &Int16x3Type },
        std::pair{ "grgg"_c, &Int16x4Type },
        std::pair{ "grgr"_c, &Int16x4Type },
        std::pair{ "grr"_c, &Int16x3Type },
        std::pair{ "grrg"_c, &Int16x4Type },
        std::pair{ "grrr"_c, &Int16x4Type },
        std::pair{ "operator!="_c, &Int16x2_operator_neq_Int16x2 },
        std::pair{ "operator!=(i16x2)"_c, &Int16x2_operator_neq_Int16x2 },
        std::pair{ "operator%"_c, &Int16x2_operator_mod_Int16x2 },
        std::pair{ "operator%(i16x2)"_c, &Int16x2_operator_mod_Int16x2 },
        std::pair{ "operator&"_c, &Int16x2_operator_and_Int16x2 },
        std::pair{ "operator&(i16x2)"_c, &Int16x2_operator_and_Int16x2 },
        std::pair{ "operator&="_c, &Int16x2_operator_andasg_Int16x2 },
        std::pair{ "operator&=(i16x2)"_c, &Int16x2_operator_andasg_Int16x2 },
        std::pair{ "operator*"_c, &Int16x2_operator_mul_Int16x2 },
        std::pair{ "operator*"_c, &Int16x2_operator_scale_Float16 },
        std::pair{ "operator*"_c, &Int16x2_operator_scale_UInt16 },
        std::pair{ "operator*"_c, &Int16x2_operator_scale_Int16 },
        std::pair{ "operator*(f16)"_c, &Int16x2_operator_scale_Float16 },
        std::pair{ "operator*(i16)"_c, &Int16x2_operator_scale_Int16 },
        std::pair{ "operator*(i16x2)"_c, &Int16x2_operator_mul_Int16x2 },
        std::pair{ "operator*(u16)"_c, &Int16x2_operator_scale_UInt16 },
        std::pair{ "operator*="_c, &Int16x2_operator_mulasg_Int16x2 },
        std::pair{ "operator*=(i16x2)"_c, &Int16x2_operator_mulasg_Int16x2 },
        std::pair{ "operator+"_c, &Int16x2_operator_add_Int16x2 },
        std::pair{ "operator+(i16x2)"_c, &Int16x2_operator_add_Int16x2 },
        std::pair{ "operator+="_c, &Int16x2_operator_addasg_Int16x2 },
        std::pair{ "operator+=(i16x2)"_c, &Int16x2_operator_addasg_Int16x2 },
        std::pair{ "operator-"_c, &Int16x2_operator_sub_Int16x2 },
        std::pair{ "operator-(i16x2)"_c, &Int16x2_operator_sub_Int16x2 },
        std::pair{ "operator-="_c, &Int16x2_operator_subasg_Int16x2 },
        std::pair{ "operator-=(i16x2)"_c, &Int16x2_operator_subasg_Int16x2 },
        std::pair{ "operator/"_c, &Int16x2_operator_div_Int16x2 },
        std::pair{ "operator/(i16x2)"_c, &Int16x2_operator_div_Int16x2 },
        std::pair{ "operator/="_c, &Int16x2_operator_divasg_Int16x2 },
        std::pair{ "operator/=(i16x2)"_c, &Int16x2_operator_divasg_Int16x2 },
        std::pair{ "operator<"_c, &Int16x2_operator_lt_Int16x2 },
        std::pair{ "operator<(i16x2)"_c, &Int16x2_operator_lt_Int16x2 },
        std::pair{ "operator<<"_c, &Int16x2_operator_lsh_Int16x2 },
        std::pair{ "operator<<(i16x2)"_c, &Int16x2_operator_lsh_Int16x2 },
        std::pair{ "operator<<="_c, &Int16x2_operator_lshasg_Int16x2 },
        std::pair{ "operator<<=(i16x2)"_c, &Int16x2_operator_lshasg_Int16x2 },
        std::pair{ "operator<="_c, &Int16x2_operator_lte_Int16x2 },
        std::pair{ "operator<=(i16x2)"_c, &Int16x2_operator_lte_Int16x2 },
        std::pair{ "operator=="_c, &Int16x2_operator_eq_Int16x2 },
        std::pair{ "operator==(i16x2)"_c, &Int16x2_operator_eq_Int16x2 },
        std::pair{ "operator>"_c, &Int16x2_operator_gt_Int16x2 },
        std::pair{ "operator>(i16x2)"_c, &Int16x2_operator_gt_Int16x2 },
        std::pair{ "operator>="_c, &Int16x2_operator_gte_Int16x2 },
        std::pair{ "operator>=(i16x2)"_c, &Int16x2_operator_gte_Int16x2 },
        std::pair{ "operator>>"_c, &Int16x2_operator_rsh_Int16x2 },
        std::pair{ "operator>>(i16x2)"_c, &Int16x2_operator_rsh_Int16x2 },
        std::pair{ "operator>>="_c, &Int16x2_operator_rhsasg_Int16x2 },
        std::pair{ "operator>>=(i16x2)"_c, &Int16x2_operator_rhsasg_Int16x2 },
        std::pair{ "operator[]"_c, &Int16x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Int16x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Int16x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Int16x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Int16x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Int16x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Int16x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Int16x2_operator_index_UInt32 },
        std::pair{ "operator^"_c, &Int16x2_operator_xor_Int16x2 },
        std::pair{ "operator^(i16x2)"_c, &Int16x2_operator_xor_Int16x2 },
        std::pair{ "operator^="_c, &Int16x2_operator_xorasg_Int16x2 },
        std::pair{ "operator^=(i16x2)"_c, &Int16x2_operator_xorasg_Int16x2 },
        std::pair{ "operator|"_c, &Int16x2_operator_or_Int16x2 },
        std::pair{ "operator|(i16x2)"_c, &Int16x2_operator_or_Int16x2 },
        std::pair{ "operator|="_c, &Int16x2_operator_orasg_Int16x2 },
        std::pair{ "operator|=(i16x2)"_c, &Int16x2_operator_orasg_Int16x2 },
        std::pair{ "r"_c, &Int16Type },
        std::pair{ "rg"_c, &Int16x2Type },
        std::pair{ "rgg"_c, &Int16x3Type },
        std::pair{ "rggg"_c, &Int16x4Type },
        std::pair{ "rggr"_c, &Int16x4Type },
        std::pair{ "rgr"_c, &Int16x3Type },
        std::pair{ "rgrg"_c, &Int16x4Type },
        std::pair{ "rgrr"_c, &Int16x4Type },
        std::pair{ "rr"_c, &Int16x2Type },
        std::pair{ "rrg"_c, &Int16x3Type },
        std::pair{ "rrgg"_c, &Int16x4Type },
        std::pair{ "rrgr"_c, &Int16x4Type },
        std::pair{ "rrr"_c, &Int16x3Type },
        std::pair{ "rrrg"_c, &Int16x4Type },
        std::pair{ "rrrr"_c, &Int16x4Type },
        std::pair{ "x"_c, &Int16Type },
        std::pair{ "xx"_c, &Int16x2Type },
        std::pair{ "xxx"_c, &Int16x3Type },
        std::pair{ "xxxx"_c, &Int16x4Type },
        std::pair{ "xxxy"_c, &Int16x4Type },
        std::pair{ "xxy"_c, &Int16x3Type },
        std::pair{ "xxyx"_c, &Int16x4Type },
        std::pair{ "xxyy"_c, &Int16x4Type },
        std::pair{ "xy"_c, &Int16x2Type },
        std::pair{ "xyx"_c, &Int16x3Type },
        std::pair{ "xyxx"_c, &Int16x4Type },
        std::pair{ "xyxy"_c, &Int16x4Type },
        std::pair{ "xyy"_c, &Int16x3Type },
        std::pair{ "xyyx"_c, &Int16x4Type },
        std::pair{ "xyyy"_c, &Int16x4Type },
        std::pair{ "y"_c, &Int16Type },
        std::pair{ "yx"_c, &Int16x2Type },
        std::pair{ "yxx"_c, &Int16x3Type },
        std::pair{ "yxxx"_c, &Int16x4Type },
        std::pair{ "yxxy"_c, &Int16x4Type },
        std::pair{ "yxy"_c, &Int16x3Type },
        std::pair{ "yxyx"_c, &Int16x4Type },
        std::pair{ "yxyy"_c, &Int16x4Type },
        std::pair{ "yy"_c, &Int16x2Type },
        std::pair{ "yyx"_c, &Int16x3Type },
        std::pair{ "yyxx"_c, &Int16x4Type },
        std::pair{ "yyxy"_c, &Int16x4Type },
        std::pair{ "yyy"_c, &Int16x3Type },
        std::pair{ "yyyx"_c, &Int16x4Type },
        std::pair{ "yyyy"_c, &Int16x4Type }
    };
}
Int16x2 Int16x2Type;

/// operator[] with Int32
Variable Float32x3_operator_index_Int32_arg;
Function Float32x3_operator_index_Int32;
inline constexpr std::array Float32x3_operator_index_Int32_args = { &Float32x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x3_operator_index_UInt32_arg;
Function Float32x3_operator_index_UInt32;
inline constexpr std::array Float32x3_operator_index_UInt32_args = { &Float32x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x3_operator_index_Int16_arg;
Function Float32x3_operator_index_Int16;
inline constexpr std::array Float32x3_operator_index_Int16_args = { &Float32x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x3_operator_index_UInt16_arg;
Function Float32x3_operator_index_UInt16;
inline constexpr std::array Float32x3_operator_index_UInt16_args = { &Float32x3_operator_index_UInt16_arg };

/// operator+ with Float32x3
Variable Float32x3_operator_add_Float32x3_arg;
Function Float32x3_operator_add_Float32x3;
inline constexpr std::array Float32x3_operator_add_Float32x3_args = { &Float32x3_operator_add_Float32x3_arg };

/// operator- with Float32x3
Variable Float32x3_operator_sub_Float32x3_arg;
Function Float32x3_operator_sub_Float32x3;
inline constexpr std::array Float32x3_operator_sub_Float32x3_args = { &Float32x3_operator_sub_Float32x3_arg };

/// operator* with Float32x3
Variable Float32x3_operator_mul_Float32x3_arg;
Function Float32x3_operator_mul_Float32x3;
inline constexpr std::array Float32x3_operator_mul_Float32x3_args = { &Float32x3_operator_mul_Float32x3_arg };

/// operator/ with Float32x3
Variable Float32x3_operator_div_Float32x3_arg;
Function Float32x3_operator_div_Float32x3;
inline constexpr std::array Float32x3_operator_div_Float32x3_args = { &Float32x3_operator_div_Float32x3_arg };

/// operator% with Float32x3
Variable Float32x3_operator_mod_Float32x3_arg;
Function Float32x3_operator_mod_Float32x3;
inline constexpr std::array Float32x3_operator_mod_Float32x3_args = { &Float32x3_operator_mod_Float32x3_arg };

/// operator+= with Float32x3
Variable Float32x3_operator_addasg_Float32x3_arg;
Function Float32x3_operator_addasg_Float32x3;
inline constexpr std::array Float32x3_operator_addasg_Float32x3_args = { &Float32x3_operator_addasg_Float32x3_arg };

/// operator-= with Float32x3
Variable Float32x3_operator_subasg_Float32x3_arg;
Function Float32x3_operator_subasg_Float32x3;
inline constexpr std::array Float32x3_operator_subasg_Float32x3_args = { &Float32x3_operator_subasg_Float32x3_arg };

/// operator*= with Float32x3
Variable Float32x3_operator_mulasg_Float32x3_arg;
Function Float32x3_operator_mulasg_Float32x3;
inline constexpr std::array Float32x3_operator_mulasg_Float32x3_args = { &Float32x3_operator_mulasg_Float32x3_arg };

/// operator/= with Float32x3
Variable Float32x3_operator_divasg_Float32x3_arg;
Function Float32x3_operator_divasg_Float32x3;
inline constexpr std::array Float32x3_operator_divasg_Float32x3_args = { &Float32x3_operator_divasg_Float32x3_arg };

/// operator< with Float32x3
Variable Float32x3_operator_lt_Float32x3_arg;
Function Float32x3_operator_lt_Float32x3;
inline constexpr std::array Float32x3_operator_lt_Float32x3_args = { &Float32x3_operator_lt_Float32x3_arg };

/// operator<= with Float32x3
Variable Float32x3_operator_lte_Float32x3_arg;
Function Float32x3_operator_lte_Float32x3;
inline constexpr std::array Float32x3_operator_lte_Float32x3_args = { &Float32x3_operator_lte_Float32x3_arg };

/// operator> with Float32x3
Variable Float32x3_operator_gt_Float32x3_arg;
Function Float32x3_operator_gt_Float32x3;
inline constexpr std::array Float32x3_operator_gt_Float32x3_args = { &Float32x3_operator_gt_Float32x3_arg };

/// operator>= with Float32x3
Variable Float32x3_operator_gte_Float32x3_arg;
Function Float32x3_operator_gte_Float32x3;
inline constexpr std::array Float32x3_operator_gte_Float32x3_args = { &Float32x3_operator_gte_Float32x3_arg };

/// operator== with Float32x3
Variable Float32x3_operator_eq_Float32x3_arg;
Function Float32x3_operator_eq_Float32x3;
inline constexpr std::array Float32x3_operator_eq_Float32x3_args = { &Float32x3_operator_eq_Float32x3_arg };

/// operator!= with Float32x3
Variable Float32x3_operator_neq_Float32x3_arg;
Function Float32x3_operator_neq_Float32x3;
inline constexpr std::array Float32x3_operator_neq_Float32x3_args = { &Float32x3_operator_neq_Float32x3_arg };

/// operator* with Float32
Variable Float32x3_operator_scale_Float32_arg;
Function Float32x3_operator_scale_Float32;
inline constexpr std::array Float32x3_operator_scale_Float32_args = { &Float32x3_operator_scale_Float32_arg };

/// operator* with UInt32
Variable Float32x3_operator_scale_UInt32_arg;
Function Float32x3_operator_scale_UInt32;
inline constexpr std::array Float32x3_operator_scale_UInt32_args = { &Float32x3_operator_scale_UInt32_arg };

/// operator* with Int32
Variable Float32x3_operator_scale_Int32_arg;
Function Float32x3_operator_scale_Int32;
inline constexpr std::array Float32x3_operator_scale_Int32_args = { &Float32x3_operator_scale_Int32_arg };

/// operator* with Float32x3x2
Variable Float32x3_operator_transform_Float32x3x2_arg;
Function Float32x3_operator_transform_Float32x3x2;
inline constexpr std::array Float32x3_operator_transform_Float32x3x2_args = { &Float32x3_operator_transform_Float32x3x2_arg };

/// operator* with Float32x3x3
Variable Float32x3_operator_transform_Float32x3x3_arg;
Function Float32x3_operator_transform_Float32x3x3;
inline constexpr std::array Float32x3_operator_transform_Float32x3x3_args = { &Float32x3_operator_transform_Float32x3x3_arg };

/// operator* with Float32x3x4
Variable Float32x3_operator_transform_Float32x3x4_arg;
Function Float32x3_operator_transform_Float32x3x4;
inline constexpr std::array Float32x3_operator_transform_Float32x3x4_args = { &Float32x3_operator_transform_Float32x3x4_arg };

Float32x3::Float32x3()
{
    this->name = "f32x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x3_operator_index_Int32_arg.name = "arg"_c;
    Float32x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x3_operator_index_Int32.name = "operator[]"_c;
    Float32x3_operator_index_Int32.backendIndex = 513;
    Float32x3_operator_index_Int32.returnType = Type::FullType { Float32Type.name };
    Float32x3_operator_index_Int32.parameters = Float32x3_operator_index_Int32_args;
    Symbol::Resolved(&Float32x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3_operator_index_Int32)->signature = "f32 operator[](i32)"_c;
    Symbol::Resolved(&Float32x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float32x3_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt32
    Float32x3_operator_index_UInt32_arg.name = "arg"_c;
    Float32x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x3_operator_index_UInt32.name = "operator[]"_c;
    Float32x3_operator_index_UInt32.backendIndex = 514;
    Float32x3_operator_index_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32x3_operator_index_UInt32.parameters = Float32x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3_operator_index_UInt32)->signature = "f32 operator[](u32)"_c;
    Symbol::Resolved(&Float32x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float32x3_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int16
    Float32x3_operator_index_Int16_arg.name = "arg"_c;
    Float32x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x3_operator_index_Int16.name = "operator[]"_c;
    Float32x3_operator_index_Int16.backendIndex = 515;
    Float32x3_operator_index_Int16.returnType = Type::FullType { Float32Type.name };
    Float32x3_operator_index_Int16.parameters = Float32x3_operator_index_Int16_args;
    Symbol::Resolved(&Float32x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3_operator_index_Int16)->signature = "f32 operator[](i16)"_c;
    Symbol::Resolved(&Float32x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float32x3_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt16
    Float32x3_operator_index_UInt16_arg.name = "arg"_c;
    Float32x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x3_operator_index_UInt16.name = "operator[]"_c;
    Float32x3_operator_index_UInt16.backendIndex = 516;
    Float32x3_operator_index_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32x3_operator_index_UInt16.parameters = Float32x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3_operator_index_UInt16)->signature = "f32 operator[](u16)"_c;
    Symbol::Resolved(&Float32x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float32x3_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    /// operator+ with Float32x3
    Float32x3_operator_add_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_add_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_add_Float32x3.name = "operator+"_c;
    Float32x3_operator_add_Float32x3.backendIndex = 517;
    Float32x3_operator_add_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_add_Float32x3.parameters = Float32x3_operator_add_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_add_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_add_Float32x3)->signature = "f32x3 operator+(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_add_Float32x3)->name = "operator+(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_add_Float32x3)->nameWithVarNames = "operator+(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_add_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator- with Float32x3
    Float32x3_operator_sub_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_sub_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_sub_Float32x3.name = "operator-"_c;
    Float32x3_operator_sub_Float32x3.backendIndex = 518;
    Float32x3_operator_sub_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_sub_Float32x3.parameters = Float32x3_operator_sub_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3)->signature = "f32x3 operator-(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3)->name = "operator-(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3)->nameWithVarNames = "operator-(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_sub_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x3
    Float32x3_operator_mul_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_mul_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_mul_Float32x3.name = "operator*"_c;
    Float32x3_operator_mul_Float32x3.backendIndex = 519;
    Float32x3_operator_mul_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_mul_Float32x3.parameters = Float32x3_operator_mul_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3)->signature = "f32x3 operator*(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3)->name = "operator*(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3)->nameWithVarNames = "operator*(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mul_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator/ with Float32x3
    Float32x3_operator_div_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_div_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_div_Float32x3.name = "operator/"_c;
    Float32x3_operator_div_Float32x3.backendIndex = 520;
    Float32x3_operator_div_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_div_Float32x3.parameters = Float32x3_operator_div_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_div_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_div_Float32x3)->signature = "f32x3 operator/(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_div_Float32x3)->name = "operator/(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_div_Float32x3)->nameWithVarNames = "operator/(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_div_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator% with Float32x3
    Float32x3_operator_mod_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_mod_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_mod_Float32x3.name = "operator%"_c;
    Float32x3_operator_mod_Float32x3.backendIndex = 521;
    Float32x3_operator_mod_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_mod_Float32x3.parameters = Float32x3_operator_mod_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3)->signature = "f32x3 operator%(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3)->name = "operator%(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3)->nameWithVarNames = "operator%(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mod_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator+= with Float32x3
    Float32x3_operator_addasg_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_addasg_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_addasg_Float32x3.name = "operator+="_c;
    Float32x3_operator_addasg_Float32x3.backendIndex = 522;
    Float32x3_operator_addasg_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_addasg_Float32x3.parameters = Float32x3_operator_addasg_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3)->signature = "f32x3 operator+=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3)->name = "operator+=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3)->nameWithVarNames = "operator+=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_addasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator-= with Float32x3
    Float32x3_operator_subasg_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_subasg_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_subasg_Float32x3.name = "operator-="_c;
    Float32x3_operator_subasg_Float32x3.backendIndex = 523;
    Float32x3_operator_subasg_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_subasg_Float32x3.parameters = Float32x3_operator_subasg_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3)->signature = "f32x3 operator-=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3)->name = "operator-=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3)->nameWithVarNames = "operator-=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_subasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator*= with Float32x3
    Float32x3_operator_mulasg_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_mulasg_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_mulasg_Float32x3.name = "operator*="_c;
    Float32x3_operator_mulasg_Float32x3.backendIndex = 524;
    Float32x3_operator_mulasg_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_mulasg_Float32x3.parameters = Float32x3_operator_mulasg_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3)->signature = "f32x3 operator*=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3)->name = "operator*=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3)->nameWithVarNames = "operator*=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_mulasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator/= with Float32x3
    Float32x3_operator_divasg_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_divasg_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_divasg_Float32x3.name = "operator/="_c;
    Float32x3_operator_divasg_Float32x3.backendIndex = 525;
    Float32x3_operator_divasg_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_divasg_Float32x3.parameters = Float32x3_operator_divasg_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3)->signature = "f32x3 operator/=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3)->name = "operator/=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3)->nameWithVarNames = "operator/=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_divasg_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator< with Float32x3
    Float32x3_operator_lt_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_lt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_lt_Float32x3.name = "operator<"_c;
    Float32x3_operator_lt_Float32x3.backendIndex = 526;
    Float32x3_operator_lt_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Float32x3_operator_lt_Float32x3.parameters = Float32x3_operator_lt_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3)->signature = "b8x3 operator<(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3)->name = "operator<(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3)->nameWithVarNames = "operator<(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_lt_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator<= with Float32x3
    Float32x3_operator_lte_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_lte_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_lte_Float32x3.name = "operator<="_c;
    Float32x3_operator_lte_Float32x3.backendIndex = 527;
    Float32x3_operator_lte_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Float32x3_operator_lte_Float32x3.parameters = Float32x3_operator_lte_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3)->signature = "b8x3 operator<=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3)->name = "operator<=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3)->nameWithVarNames = "operator<=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_lte_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator> with Float32x3
    Float32x3_operator_gt_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_gt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_gt_Float32x3.name = "operator>"_c;
    Float32x3_operator_gt_Float32x3.backendIndex = 528;
    Float32x3_operator_gt_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Float32x3_operator_gt_Float32x3.parameters = Float32x3_operator_gt_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3)->signature = "b8x3 operator>(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3)->name = "operator>(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3)->nameWithVarNames = "operator>(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_gt_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator>= with Float32x3
    Float32x3_operator_gte_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_gte_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_gte_Float32x3.name = "operator>="_c;
    Float32x3_operator_gte_Float32x3.backendIndex = 529;
    Float32x3_operator_gte_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Float32x3_operator_gte_Float32x3.parameters = Float32x3_operator_gte_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3)->signature = "b8x3 operator>=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3)->name = "operator>=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3)->nameWithVarNames = "operator>=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_gte_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with Float32x3
    Float32x3_operator_eq_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_eq_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_eq_Float32x3.name = "operator=="_c;
    Float32x3_operator_eq_Float32x3.backendIndex = 530;
    Float32x3_operator_eq_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Float32x3_operator_eq_Float32x3.parameters = Float32x3_operator_eq_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3)->signature = "b8x3 operator==(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3)->name = "operator==(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3)->nameWithVarNames = "operator==(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_eq_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with Float32x3
    Float32x3_operator_neq_Float32x3_arg.name = "arg"_c;
    Float32x3_operator_neq_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_operator_neq_Float32x3.name = "operator!="_c;
    Float32x3_operator_neq_Float32x3.backendIndex = 531;
    Float32x3_operator_neq_Float32x3.returnType = Type::FullType { Bool8x3Type.name };
    Float32x3_operator_neq_Float32x3.parameters = Float32x3_operator_neq_Float32x3_args;
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3)->signature = "b8x3 operator!=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3)->name = "operator!=(f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3)->nameWithVarNames = "operator!=(arg : f32x3)"_c;
    Symbol::Resolved(&Float32x3_operator_neq_Float32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator* with Float32
    Float32x3_operator_scale_Float32_arg.name = "arg"_c;
    Float32x3_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x3_operator_scale_Float32.name = "operator*"_c;
    Float32x3_operator_scale_Float32.backendIndex = 532;
    Float32x3_operator_scale_Float32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_scale_Float32.parameters = Float32x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x3_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_operator_scale_Float32)->signature = "f32x3 operator*(f32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_Float32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with UInt32
    Float32x3_operator_scale_UInt32_arg.name = "arg"_c;
    Float32x3_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x3_operator_scale_UInt32.name = "operator*"_c;
    Float32x3_operator_scale_UInt32.backendIndex = 533;
    Float32x3_operator_scale_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_scale_UInt32.parameters = Float32x3_operator_scale_UInt32_args;
    Symbol::Resolved(&Float32x3_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3_operator_scale_UInt32)->signature = "f32x3 operator*(u32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Int32
    Float32x3_operator_scale_Int32_arg.name = "arg"_c;
    Float32x3_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x3_operator_scale_Int32.name = "operator*"_c;
    Float32x3_operator_scale_Int32.backendIndex = 534;
    Float32x3_operator_scale_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_scale_Int32.parameters = Float32x3_operator_scale_Int32_args;
    Symbol::Resolved(&Float32x3_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3_operator_scale_Int32)->signature = "f32x3 operator*(i32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Float32x3_operator_scale_Int32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x3x2
    Float32x3_operator_transform_Float32x3x2_arg.name = "arg"_c;
    Float32x3_operator_transform_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3_operator_transform_Float32x3x2.name = "operator*"_c;
    Float32x3_operator_transform_Float32x3x2.backendIndex = 535;
    Float32x3_operator_transform_Float32x3x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x3_operator_transform_Float32x3x2.parameters = Float32x3_operator_transform_Float32x3x2_args;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x2)->signature = "f32x2 operator*(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x2)->name = "operator*(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x2)->nameWithVarNames = "operator*(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x3x3
    Float32x3_operator_transform_Float32x3x3_arg.name = "arg"_c;
    Float32x3_operator_transform_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3_operator_transform_Float32x3x3.name = "operator*"_c;
    Float32x3_operator_transform_Float32x3x3.backendIndex = 536;
    Float32x3_operator_transform_Float32x3x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_operator_transform_Float32x3x3.parameters = Float32x3_operator_transform_Float32x3x3_args;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x3)->signature = "f32x3 operator*(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x3)->name = "operator*(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x3)->nameWithVarNames = "operator*(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x3x4
    Float32x3_operator_transform_Float32x3x4_arg.name = "arg"_c;
    Float32x3_operator_transform_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3_operator_transform_Float32x3x4.name = "operator*"_c;
    Float32x3_operator_transform_Float32x3x4.backendIndex = 537;
    Float32x3_operator_transform_Float32x3x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x3_operator_transform_Float32x3x4.parameters = Float32x3_operator_transform_Float32x3x4_args;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x4)->signature = "f32x4 operator*(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x4)->name = "operator*(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x4)->nameWithVarNames = "operator*(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3_operator_transform_Float32x3x4)->returnTypeSymbol = &Float32x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 290> { 
        std::pair{ "b"_c, &Float32Type },
        std::pair{ "bb"_c, &Float32x2Type },
        std::pair{ "bbb"_c, &Float32x3Type },
        std::pair{ "bbbb"_c, &Float32x4Type },
        std::pair{ "bbbg"_c, &Float32x4Type },
        std::pair{ "bbbr"_c, &Float32x4Type },
        std::pair{ "bbg"_c, &Float32x3Type },
        std::pair{ "bbgb"_c, &Float32x4Type },
        std::pair{ "bbgg"_c, &Float32x4Type },
        std::pair{ "bbgr"_c, &Float32x4Type },
        std::pair{ "bbr"_c, &Float32x3Type },
        std::pair{ "bbrb"_c, &Float32x4Type },
        std::pair{ "bbrg"_c, &Float32x4Type },
        std::pair{ "bbrr"_c, &Float32x4Type },
        std::pair{ "bg"_c, &Float32x2Type },
        std::pair{ "bgb"_c, &Float32x3Type },
        std::pair{ "bgbb"_c, &Float32x4Type },
        std::pair{ "bgbg"_c, &Float32x4Type },
        std::pair{ "bgbr"_c, &Float32x4Type },
        std::pair{ "bgg"_c, &Float32x3Type },
        std::pair{ "bggb"_c, &Float32x4Type },
        std::pair{ "bggg"_c, &Float32x4Type },
        std::pair{ "bggr"_c, &Float32x4Type },
        std::pair{ "bgr"_c, &Float32x3Type },
        std::pair{ "bgrb"_c, &Float32x4Type },
        std::pair{ "bgrg"_c, &Float32x4Type },
        std::pair{ "bgrr"_c, &Float32x4Type },
        std::pair{ "br"_c, &Float32x2Type },
        std::pair{ "brb"_c, &Float32x3Type },
        std::pair{ "brbb"_c, &Float32x4Type },
        std::pair{ "brbg"_c, &Float32x4Type },
        std::pair{ "brbr"_c, &Float32x4Type },
        std::pair{ "brg"_c, &Float32x3Type },
        std::pair{ "brgb"_c, &Float32x4Type },
        std::pair{ "brgg"_c, &Float32x4Type },
        std::pair{ "brgr"_c, &Float32x4Type },
        std::pair{ "brr"_c, &Float32x3Type },
        std::pair{ "brrb"_c, &Float32x4Type },
        std::pair{ "brrg"_c, &Float32x4Type },
        std::pair{ "brrr"_c, &Float32x4Type },
        std::pair{ "g"_c, &Float32Type },
        std::pair{ "gb"_c, &Float32x2Type },
        std::pair{ "gbb"_c, &Float32x3Type },
        std::pair{ "gbbb"_c, &Float32x4Type },
        std::pair{ "gbbg"_c, &Float32x4Type },
        std::pair{ "gbbr"_c, &Float32x4Type },
        std::pair{ "gbg"_c, &Float32x3Type },
        std::pair{ "gbgb"_c, &Float32x4Type },
        std::pair{ "gbgg"_c, &Float32x4Type },
        std::pair{ "gbgr"_c, &Float32x4Type },
        std::pair{ "gbr"_c, &Float32x3Type },
        std::pair{ "gbrb"_c, &Float32x4Type },
        std::pair{ "gbrg"_c, &Float32x4Type },
        std::pair{ "gbrr"_c, &Float32x4Type },
        std::pair{ "gg"_c, &Float32x2Type },
        std::pair{ "ggb"_c, &Float32x3Type },
        std::pair{ "ggbb"_c, &Float32x4Type },
        std::pair{ "ggbg"_c, &Float32x4Type },
        std::pair{ "ggbr"_c, &Float32x4Type },
        std::pair{ "ggg"_c, &Float32x3Type },
        std::pair{ "gggb"_c, &Float32x4Type },
        std::pair{ "gggg"_c, &Float32x4Type },
        std::pair{ "gggr"_c, &Float32x4Type },
        std::pair{ "ggr"_c, &Float32x3Type },
        std::pair{ "ggrb"_c, &Float32x4Type },
        std::pair{ "ggrg"_c, &Float32x4Type },
        std::pair{ "ggrr"_c, &Float32x4Type },
        std::pair{ "gr"_c, &Float32x2Type },
        std::pair{ "grb"_c, &Float32x3Type },
        std::pair{ "grbb"_c, &Float32x4Type },
        std::pair{ "grbg"_c, &Float32x4Type },
        std::pair{ "grbr"_c, &Float32x4Type },
        std::pair{ "grg"_c, &Float32x3Type },
        std::pair{ "grgb"_c, &Float32x4Type },
        std::pair{ "grgg"_c, &Float32x4Type },
        std::pair{ "grgr"_c, &Float32x4Type },
        std::pair{ "grr"_c, &Float32x3Type },
        std::pair{ "grrb"_c, &Float32x4Type },
        std::pair{ "grrg"_c, &Float32x4Type },
        std::pair{ "grrr"_c, &Float32x4Type },
        std::pair{ "operator!="_c, &Float32x3_operator_neq_Float32x3 },
        std::pair{ "operator!=(f32x3)"_c, &Float32x3_operator_neq_Float32x3 },
        std::pair{ "operator%"_c, &Float32x3_operator_mod_Float32x3 },
        std::pair{ "operator%(f32x3)"_c, &Float32x3_operator_mod_Float32x3 },
        std::pair{ "operator*"_c, &Float32x3_operator_mul_Float32x3 },
        std::pair{ "operator*"_c, &Float32x3_operator_scale_Float32 },
        std::pair{ "operator*"_c, &Float32x3_operator_scale_UInt32 },
        std::pair{ "operator*"_c, &Float32x3_operator_scale_Int32 },
        std::pair{ "operator*"_c, &Float32x3_operator_transform_Float32x3x2 },
        std::pair{ "operator*"_c, &Float32x3_operator_transform_Float32x3x3 },
        std::pair{ "operator*"_c, &Float32x3_operator_transform_Float32x3x4 },
        std::pair{ "operator*(f32)"_c, &Float32x3_operator_scale_Float32 },
        std::pair{ "operator*(f32x3)"_c, &Float32x3_operator_mul_Float32x3 },
        std::pair{ "operator*(f32x3x2)"_c, &Float32x3_operator_transform_Float32x3x2 },
        std::pair{ "operator*(f32x3x3)"_c, &Float32x3_operator_transform_Float32x3x3 },
        std::pair{ "operator*(f32x3x4)"_c, &Float32x3_operator_transform_Float32x3x4 },
        std::pair{ "operator*(i32)"_c, &Float32x3_operator_scale_Int32 },
        std::pair{ "operator*(u32)"_c, &Float32x3_operator_scale_UInt32 },
        std::pair{ "operator*="_c, &Float32x3_operator_mulasg_Float32x3 },
        std::pair{ "operator*=(f32x3)"_c, &Float32x3_operator_mulasg_Float32x3 },
        std::pair{ "operator+"_c, &Float32x3_operator_add_Float32x3 },
        std::pair{ "operator+(f32x3)"_c, &Float32x3_operator_add_Float32x3 },
        std::pair{ "operator+="_c, &Float32x3_operator_addasg_Float32x3 },
        std::pair{ "operator+=(f32x3)"_c, &Float32x3_operator_addasg_Float32x3 },
        std::pair{ "operator-"_c, &Float32x3_operator_sub_Float32x3 },
        std::pair{ "operator-(f32x3)"_c, &Float32x3_operator_sub_Float32x3 },
        std::pair{ "operator-="_c, &Float32x3_operator_subasg_Float32x3 },
        std::pair{ "operator-=(f32x3)"_c, &Float32x3_operator_subasg_Float32x3 },
        std::pair{ "operator/"_c, &Float32x3_operator_div_Float32x3 },
        std::pair{ "operator/(f32x3)"_c, &Float32x3_operator_div_Float32x3 },
        std::pair{ "operator/="_c, &Float32x3_operator_divasg_Float32x3 },
        std::pair{ "operator/=(f32x3)"_c, &Float32x3_operator_divasg_Float32x3 },
        std::pair{ "operator<"_c, &Float32x3_operator_lt_Float32x3 },
        std::pair{ "operator<(f32x3)"_c, &Float32x3_operator_lt_Float32x3 },
        std::pair{ "operator<="_c, &Float32x3_operator_lte_Float32x3 },
        std::pair{ "operator<=(f32x3)"_c, &Float32x3_operator_lte_Float32x3 },
        std::pair{ "operator=="_c, &Float32x3_operator_eq_Float32x3 },
        std::pair{ "operator==(f32x3)"_c, &Float32x3_operator_eq_Float32x3 },
        std::pair{ "operator>"_c, &Float32x3_operator_gt_Float32x3 },
        std::pair{ "operator>(f32x3)"_c, &Float32x3_operator_gt_Float32x3 },
        std::pair{ "operator>="_c, &Float32x3_operator_gte_Float32x3 },
        std::pair{ "operator>=(f32x3)"_c, &Float32x3_operator_gte_Float32x3 },
        std::pair{ "operator[]"_c, &Float32x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32x3_operator_index_UInt32 },
        std::pair{ "r"_c, &Float32Type },
        std::pair{ "rb"_c, &Float32x2Type },
        std::pair{ "rbb"_c, &Float32x3Type },
        std::pair{ "rbbb"_c, &Float32x4Type },
        std::pair{ "rbbg"_c, &Float32x4Type },
        std::pair{ "rbbr"_c, &Float32x4Type },
        std::pair{ "rbg"_c, &Float32x3Type },
        std::pair{ "rbgb"_c, &Float32x4Type },
        std::pair{ "rbgg"_c, &Float32x4Type },
        std::pair{ "rbgr"_c, &Float32x4Type },
        std::pair{ "rbr"_c, &Float32x3Type },
        std::pair{ "rbrb"_c, &Float32x4Type },
        std::pair{ "rbrg"_c, &Float32x4Type },
        std::pair{ "rbrr"_c, &Float32x4Type },
        std::pair{ "rg"_c, &Float32x2Type },
        std::pair{ "rgb"_c, &Float32x3Type },
        std::pair{ "rgbb"_c, &Float32x4Type },
        std::pair{ "rgbg"_c, &Float32x4Type },
        std::pair{ "rgbr"_c, &Float32x4Type },
        std::pair{ "rgg"_c, &Float32x3Type },
        std::pair{ "rggb"_c, &Float32x4Type },
        std::pair{ "rggg"_c, &Float32x4Type },
        std::pair{ "rggr"_c, &Float32x4Type },
        std::pair{ "rgr"_c, &Float32x3Type },
        std::pair{ "rgrb"_c, &Float32x4Type },
        std::pair{ "rgrg"_c, &Float32x4Type },
        std::pair{ "rgrr"_c, &Float32x4Type },
        std::pair{ "rr"_c, &Float32x2Type },
        std::pair{ "rrb"_c, &Float32x3Type },
        std::pair{ "rrbb"_c, &Float32x4Type },
        std::pair{ "rrbg"_c, &Float32x4Type },
        std::pair{ "rrbr"_c, &Float32x4Type },
        std::pair{ "rrg"_c, &Float32x3Type },
        std::pair{ "rrgb"_c, &Float32x4Type },
        std::pair{ "rrgg"_c, &Float32x4Type },
        std::pair{ "rrgr"_c, &Float32x4Type },
        std::pair{ "rrr"_c, &Float32x3Type },
        std::pair{ "rrrb"_c, &Float32x4Type },
        std::pair{ "rrrg"_c, &Float32x4Type },
        std::pair{ "rrrr"_c, &Float32x4Type },
        std::pair{ "x"_c, &Float32Type },
        std::pair{ "xx"_c, &Float32x2Type },
        std::pair{ "xxx"_c, &Float32x3Type },
        std::pair{ "xxxx"_c, &Float32x4Type },
        std::pair{ "xxxy"_c, &Float32x4Type },
        std::pair{ "xxxz"_c, &Float32x4Type },
        std::pair{ "xxy"_c, &Float32x3Type },
        std::pair{ "xxyx"_c, &Float32x4Type },
        std::pair{ "xxyy"_c, &Float32x4Type },
        std::pair{ "xxyz"_c, &Float32x4Type },
        std::pair{ "xxz"_c, &Float32x3Type },
        std::pair{ "xxzx"_c, &Float32x4Type },
        std::pair{ "xxzy"_c, &Float32x4Type },
        std::pair{ "xxzz"_c, &Float32x4Type },
        std::pair{ "xy"_c, &Float32x2Type },
        std::pair{ "xyx"_c, &Float32x3Type },
        std::pair{ "xyxx"_c, &Float32x4Type },
        std::pair{ "xyxy"_c, &Float32x4Type },
        std::pair{ "xyxz"_c, &Float32x4Type },
        std::pair{ "xyy"_c, &Float32x3Type },
        std::pair{ "xyyx"_c, &Float32x4Type },
        std::pair{ "xyyy"_c, &Float32x4Type },
        std::pair{ "xyyz"_c, &Float32x4Type },
        std::pair{ "xyz"_c, &Float32x3Type },
        std::pair{ "xyzx"_c, &Float32x4Type },
        std::pair{ "xyzy"_c, &Float32x4Type },
        std::pair{ "xyzz"_c, &Float32x4Type },
        std::pair{ "xz"_c, &Float32x2Type },
        std::pair{ "xzx"_c, &Float32x3Type },
        std::pair{ "xzxx"_c, &Float32x4Type },
        std::pair{ "xzxy"_c, &Float32x4Type },
        std::pair{ "xzxz"_c, &Float32x4Type },
        std::pair{ "xzy"_c, &Float32x3Type },
        std::pair{ "xzyx"_c, &Float32x4Type },
        std::pair{ "xzyy"_c, &Float32x4Type },
        std::pair{ "xzyz"_c, &Float32x4Type },
        std::pair{ "xzz"_c, &Float32x3Type },
        std::pair{ "xzzx"_c, &Float32x4Type },
        std::pair{ "xzzy"_c, &Float32x4Type },
        std::pair{ "xzzz"_c, &Float32x4Type },
        std::pair{ "y"_c, &Float32Type },
        std::pair{ "yx"_c, &Float32x2Type },
        std::pair{ "yxx"_c, &Float32x3Type },
        std::pair{ "yxxx"_c, &Float32x4Type },
        std::pair{ "yxxy"_c, &Float32x4Type },
        std::pair{ "yxxz"_c, &Float32x4Type },
        std::pair{ "yxy"_c, &Float32x3Type },
        std::pair{ "yxyx"_c, &Float32x4Type },
        std::pair{ "yxyy"_c, &Float32x4Type },
        std::pair{ "yxyz"_c, &Float32x4Type },
        std::pair{ "yxz"_c, &Float32x3Type },
        std::pair{ "yxzx"_c, &Float32x4Type },
        std::pair{ "yxzy"_c, &Float32x4Type },
        std::pair{ "yxzz"_c, &Float32x4Type },
        std::pair{ "yy"_c, &Float32x2Type },
        std::pair{ "yyx"_c, &Float32x3Type },
        std::pair{ "yyxx"_c, &Float32x4Type },
        std::pair{ "yyxy"_c, &Float32x4Type },
        std::pair{ "yyxz"_c, &Float32x4Type },
        std::pair{ "yyy"_c, &Float32x3Type },
        std::pair{ "yyyx"_c, &Float32x4Type },
        std::pair{ "yyyy"_c, &Float32x4Type },
        std::pair{ "yyyz"_c, &Float32x4Type },
        std::pair{ "yyz"_c, &Float32x3Type },
        std::pair{ "yyzx"_c, &Float32x4Type },
        std::pair{ "yyzy"_c, &Float32x4Type },
        std::pair{ "yyzz"_c, &Float32x4Type },
        std::pair{ "yz"_c, &Float32x2Type },
        std::pair{ "yzx"_c, &Float32x3Type },
        std::pair{ "yzxx"_c, &Float32x4Type },
        std::pair{ "yzxy"_c, &Float32x4Type },
        std::pair{ "yzxz"_c, &Float32x4Type },
        std::pair{ "yzy"_c, &Float32x3Type },
        std::pair{ "yzyx"_c, &Float32x4Type },
        std::pair{ "yzyy"_c, &Float32x4Type },
        std::pair{ "yzyz"_c, &Float32x4Type },
        std::pair{ "yzz"_c, &Float32x3Type },
        std::pair{ "yzzx"_c, &Float32x4Type },
        std::pair{ "yzzy"_c, &Float32x4Type },
        std::pair{ "yzzz"_c, &Float32x4Type },
        std::pair{ "z"_c, &Float32Type },
        std::pair{ "zx"_c, &Float32x2Type },
        std::pair{ "zxx"_c, &Float32x3Type },
        std::pair{ "zxxx"_c, &Float32x4Type },
        std::pair{ "zxxy"_c, &Float32x4Type },
        std::pair{ "zxxz"_c, &Float32x4Type },
        std::pair{ "zxy"_c, &Float32x3Type },
        std::pair{ "zxyx"_c, &Float32x4Type },
        std::pair{ "zxyy"_c, &Float32x4Type },
        std::pair{ "zxyz"_c, &Float32x4Type },
        std::pair{ "zxz"_c, &Float32x3Type },
        std::pair{ "zxzx"_c, &Float32x4Type },
        std::pair{ "zxzy"_c, &Float32x4Type },
        std::pair{ "zxzz"_c, &Float32x4Type },
        std::pair{ "zy"_c, &Float32x2Type },
        std::pair{ "zyx"_c, &Float32x3Type },
        std::pair{ "zyxx"_c, &Float32x4Type },
        std::pair{ "zyxy"_c, &Float32x4Type },
        std::pair{ "zyxz"_c, &Float32x4Type },
        std::pair{ "zyy"_c, &Float32x3Type },
        std::pair{ "zyyx"_c, &Float32x4Type },
        std::pair{ "zyyy"_c, &Float32x4Type },
        std::pair{ "zyyz"_c, &Float32x4Type },
        std::pair{ "zyz"_c, &Float32x3Type },
        std::pair{ "zyzx"_c, &Float32x4Type },
        std::pair{ "zyzy"_c, &Float32x4Type },
        std::pair{ "zyzz"_c, &Float32x4Type },
        std::pair{ "zz"_c, &Float32x2Type },
        std::pair{ "zzx"_c, &Float32x3Type },
        std::pair{ "zzxx"_c, &Float32x4Type },
        std::pair{ "zzxy"_c, &Float32x4Type },
        std::pair{ "zzxz"_c, &Float32x4Type },
        std::pair{ "zzy"_c, &Float32x3Type },
        std::pair{ "zzyx"_c, &Float32x4Type },
        std::pair{ "zzyy"_c, &Float32x4Type },
        std::pair{ "zzyz"_c, &Float32x4Type },
        std::pair{ "zzz"_c, &Float32x3Type },
        std::pair{ "zzzx"_c, &Float32x4Type },
        std::pair{ "zzzy"_c, &Float32x4Type },
        std::pair{ "zzzz"_c, &Float32x4Type }
    };
}
Float32x3 Float32x3Type;

/// operator[] with Int32
Variable UInt32x3_operator_index_Int32_arg;
Function UInt32x3_operator_index_Int32;
inline constexpr std::array UInt32x3_operator_index_Int32_args = { &UInt32x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt32x3_operator_index_UInt32_arg;
Function UInt32x3_operator_index_UInt32;
inline constexpr std::array UInt32x3_operator_index_UInt32_args = { &UInt32x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt32x3_operator_index_Int16_arg;
Function UInt32x3_operator_index_Int16;
inline constexpr std::array UInt32x3_operator_index_Int16_args = { &UInt32x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt32x3_operator_index_UInt16_arg;
Function UInt32x3_operator_index_UInt16;
inline constexpr std::array UInt32x3_operator_index_UInt16_args = { &UInt32x3_operator_index_UInt16_arg };

/// operator+ with UInt32x3
Variable UInt32x3_operator_add_UInt32x3_arg;
Function UInt32x3_operator_add_UInt32x3;
inline constexpr std::array UInt32x3_operator_add_UInt32x3_args = { &UInt32x3_operator_add_UInt32x3_arg };

/// operator- with UInt32x3
Variable UInt32x3_operator_sub_UInt32x3_arg;
Function UInt32x3_operator_sub_UInt32x3;
inline constexpr std::array UInt32x3_operator_sub_UInt32x3_args = { &UInt32x3_operator_sub_UInt32x3_arg };

/// operator* with UInt32x3
Variable UInt32x3_operator_mul_UInt32x3_arg;
Function UInt32x3_operator_mul_UInt32x3;
inline constexpr std::array UInt32x3_operator_mul_UInt32x3_args = { &UInt32x3_operator_mul_UInt32x3_arg };

/// operator/ with UInt32x3
Variable UInt32x3_operator_div_UInt32x3_arg;
Function UInt32x3_operator_div_UInt32x3;
inline constexpr std::array UInt32x3_operator_div_UInt32x3_args = { &UInt32x3_operator_div_UInt32x3_arg };

/// operator% with UInt32x3
Variable UInt32x3_operator_mod_UInt32x3_arg;
Function UInt32x3_operator_mod_UInt32x3;
inline constexpr std::array UInt32x3_operator_mod_UInt32x3_args = { &UInt32x3_operator_mod_UInt32x3_arg };

/// operator+= with UInt32x3
Variable UInt32x3_operator_addasg_UInt32x3_arg;
Function UInt32x3_operator_addasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_addasg_UInt32x3_args = { &UInt32x3_operator_addasg_UInt32x3_arg };

/// operator-= with UInt32x3
Variable UInt32x3_operator_subasg_UInt32x3_arg;
Function UInt32x3_operator_subasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_subasg_UInt32x3_args = { &UInt32x3_operator_subasg_UInt32x3_arg };

/// operator*= with UInt32x3
Variable UInt32x3_operator_mulasg_UInt32x3_arg;
Function UInt32x3_operator_mulasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_mulasg_UInt32x3_args = { &UInt32x3_operator_mulasg_UInt32x3_arg };

/// operator/= with UInt32x3
Variable UInt32x3_operator_divasg_UInt32x3_arg;
Function UInt32x3_operator_divasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_divasg_UInt32x3_args = { &UInt32x3_operator_divasg_UInt32x3_arg };

/// operator< with UInt32x3
Variable UInt32x3_operator_lt_UInt32x3_arg;
Function UInt32x3_operator_lt_UInt32x3;
inline constexpr std::array UInt32x3_operator_lt_UInt32x3_args = { &UInt32x3_operator_lt_UInt32x3_arg };

/// operator<= with UInt32x3
Variable UInt32x3_operator_lte_UInt32x3_arg;
Function UInt32x3_operator_lte_UInt32x3;
inline constexpr std::array UInt32x3_operator_lte_UInt32x3_args = { &UInt32x3_operator_lte_UInt32x3_arg };

/// operator> with UInt32x3
Variable UInt32x3_operator_gt_UInt32x3_arg;
Function UInt32x3_operator_gt_UInt32x3;
inline constexpr std::array UInt32x3_operator_gt_UInt32x3_args = { &UInt32x3_operator_gt_UInt32x3_arg };

/// operator>= with UInt32x3
Variable UInt32x3_operator_gte_UInt32x3_arg;
Function UInt32x3_operator_gte_UInt32x3;
inline constexpr std::array UInt32x3_operator_gte_UInt32x3_args = { &UInt32x3_operator_gte_UInt32x3_arg };

/// operator== with UInt32x3
Variable UInt32x3_operator_eq_UInt32x3_arg;
Function UInt32x3_operator_eq_UInt32x3;
inline constexpr std::array UInt32x3_operator_eq_UInt32x3_args = { &UInt32x3_operator_eq_UInt32x3_arg };

/// operator!= with UInt32x3
Variable UInt32x3_operator_neq_UInt32x3_arg;
Function UInt32x3_operator_neq_UInt32x3;
inline constexpr std::array UInt32x3_operator_neq_UInt32x3_args = { &UInt32x3_operator_neq_UInt32x3_arg };

/// operator* with Float32
Variable UInt32x3_operator_scale_Float32_arg;
Function UInt32x3_operator_scale_Float32;
inline constexpr std::array UInt32x3_operator_scale_Float32_args = { &UInt32x3_operator_scale_Float32_arg };

/// operator* with UInt32
Variable UInt32x3_operator_scale_UInt32_arg;
Function UInt32x3_operator_scale_UInt32;
inline constexpr std::array UInt32x3_operator_scale_UInt32_args = { &UInt32x3_operator_scale_UInt32_arg };

/// operator* with Int32
Variable UInt32x3_operator_scale_Int32_arg;
Function UInt32x3_operator_scale_Int32;
inline constexpr std::array UInt32x3_operator_scale_Int32_args = { &UInt32x3_operator_scale_Int32_arg };

/// operator| with UInt32x3
Variable UInt32x3_operator_or_UInt32x3_arg;
Function UInt32x3_operator_or_UInt32x3;
inline constexpr std::array UInt32x3_operator_or_UInt32x3_args = { &UInt32x3_operator_or_UInt32x3_arg };

/// operator& with UInt32x3
Variable UInt32x3_operator_and_UInt32x3_arg;
Function UInt32x3_operator_and_UInt32x3;
inline constexpr std::array UInt32x3_operator_and_UInt32x3_args = { &UInt32x3_operator_and_UInt32x3_arg };

/// operator^ with UInt32x3
Variable UInt32x3_operator_xor_UInt32x3_arg;
Function UInt32x3_operator_xor_UInt32x3;
inline constexpr std::array UInt32x3_operator_xor_UInt32x3_args = { &UInt32x3_operator_xor_UInt32x3_arg };

/// operator<< with UInt32x3
Variable UInt32x3_operator_lsh_UInt32x3_arg;
Function UInt32x3_operator_lsh_UInt32x3;
inline constexpr std::array UInt32x3_operator_lsh_UInt32x3_args = { &UInt32x3_operator_lsh_UInt32x3_arg };

/// operator>> with UInt32x3
Variable UInt32x3_operator_rsh_UInt32x3_arg;
Function UInt32x3_operator_rsh_UInt32x3;
inline constexpr std::array UInt32x3_operator_rsh_UInt32x3_args = { &UInt32x3_operator_rsh_UInt32x3_arg };

/// operator|= with UInt32x3
Variable UInt32x3_operator_orasg_UInt32x3_arg;
Function UInt32x3_operator_orasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_orasg_UInt32x3_args = { &UInt32x3_operator_orasg_UInt32x3_arg };

/// operator&= with UInt32x3
Variable UInt32x3_operator_andasg_UInt32x3_arg;
Function UInt32x3_operator_andasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_andasg_UInt32x3_args = { &UInt32x3_operator_andasg_UInt32x3_arg };

/// operator^= with UInt32x3
Variable UInt32x3_operator_xorasg_UInt32x3_arg;
Function UInt32x3_operator_xorasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_xorasg_UInt32x3_args = { &UInt32x3_operator_xorasg_UInt32x3_arg };

/// operator<<= with UInt32x3
Variable UInt32x3_operator_lshasg_UInt32x3_arg;
Function UInt32x3_operator_lshasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_lshasg_UInt32x3_args = { &UInt32x3_operator_lshasg_UInt32x3_arg };

/// operator>>= with UInt32x3
Variable UInt32x3_operator_rhsasg_UInt32x3_arg;
Function UInt32x3_operator_rhsasg_UInt32x3;
inline constexpr std::array UInt32x3_operator_rhsasg_UInt32x3_args = { &UInt32x3_operator_rhsasg_UInt32x3_arg };

UInt32x3::UInt32x3()
{
    this->name = "u32x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    /// operator[] with Int32
    UInt32x3_operator_index_Int32_arg.name = "arg"_c;
    UInt32x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x3_operator_index_Int32.name = "operator[]"_c;
    UInt32x3_operator_index_Int32.backendIndex = 555;
    UInt32x3_operator_index_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32x3_operator_index_Int32.parameters = UInt32x3_operator_index_Int32_args;
    Symbol::Resolved(&UInt32x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x3_operator_index_Int32)->signature = "u32 operator[](i32)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt32
    UInt32x3_operator_index_UInt32_arg.name = "arg"_c;
    UInt32x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x3_operator_index_UInt32.name = "operator[]"_c;
    UInt32x3_operator_index_UInt32.backendIndex = 556;
    UInt32x3_operator_index_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32x3_operator_index_UInt32.parameters = UInt32x3_operator_index_UInt32_args;
    Symbol::Resolved(&UInt32x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_operator_index_UInt32)->signature = "u32 operator[](u32)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int16
    UInt32x3_operator_index_Int16_arg.name = "arg"_c;
    UInt32x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32x3_operator_index_Int16.name = "operator[]"_c;
    UInt32x3_operator_index_Int16.backendIndex = 557;
    UInt32x3_operator_index_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32x3_operator_index_Int16.parameters = UInt32x3_operator_index_Int16_args;
    Symbol::Resolved(&UInt32x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x3_operator_index_Int16)->signature = "u32 operator[](i16)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt16
    UInt32x3_operator_index_UInt16_arg.name = "arg"_c;
    UInt32x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32x3_operator_index_UInt16.name = "operator[]"_c;
    UInt32x3_operator_index_UInt16.backendIndex = 558;
    UInt32x3_operator_index_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32x3_operator_index_UInt16.parameters = UInt32x3_operator_index_UInt16_args;
    Symbol::Resolved(&UInt32x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x3_operator_index_UInt16)->signature = "u32 operator[](u16)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt32x3_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    /// operator+ with UInt32x3
    UInt32x3_operator_add_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_add_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_add_UInt32x3.name = "operator+"_c;
    UInt32x3_operator_add_UInt32x3.backendIndex = 559;
    UInt32x3_operator_add_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_add_UInt32x3.parameters = UInt32x3_operator_add_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3)->signature = "u32x3 operator+(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3)->name = "operator+(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3)->nameWithVarNames = "operator+(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_add_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator- with UInt32x3
    UInt32x3_operator_sub_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_sub_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_sub_UInt32x3.name = "operator-"_c;
    UInt32x3_operator_sub_UInt32x3.backendIndex = 560;
    UInt32x3_operator_sub_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_sub_UInt32x3.parameters = UInt32x3_operator_sub_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3)->signature = "u32x3 operator-(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3)->name = "operator-(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3)->nameWithVarNames = "operator-(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_sub_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator* with UInt32x3
    UInt32x3_operator_mul_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_mul_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_mul_UInt32x3.name = "operator*"_c;
    UInt32x3_operator_mul_UInt32x3.backendIndex = 561;
    UInt32x3_operator_mul_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_mul_UInt32x3.parameters = UInt32x3_operator_mul_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3)->signature = "u32x3 operator*(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3)->name = "operator*(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3)->nameWithVarNames = "operator*(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mul_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator/ with UInt32x3
    UInt32x3_operator_div_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_div_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_div_UInt32x3.name = "operator/"_c;
    UInt32x3_operator_div_UInt32x3.backendIndex = 562;
    UInt32x3_operator_div_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_div_UInt32x3.parameters = UInt32x3_operator_div_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3)->signature = "u32x3 operator/(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3)->name = "operator/(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3)->nameWithVarNames = "operator/(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_div_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator% with UInt32x3
    UInt32x3_operator_mod_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_mod_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_mod_UInt32x3.name = "operator%"_c;
    UInt32x3_operator_mod_UInt32x3.backendIndex = 563;
    UInt32x3_operator_mod_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_mod_UInt32x3.parameters = UInt32x3_operator_mod_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3)->signature = "u32x3 operator%(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3)->name = "operator%(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3)->nameWithVarNames = "operator%(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mod_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator+= with UInt32x3
    UInt32x3_operator_addasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_addasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_addasg_UInt32x3.name = "operator+="_c;
    UInt32x3_operator_addasg_UInt32x3.backendIndex = 564;
    UInt32x3_operator_addasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_addasg_UInt32x3.parameters = UInt32x3_operator_addasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3)->signature = "u32x3 operator+=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3)->name = "operator+=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3)->nameWithVarNames = "operator+=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_addasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator-= with UInt32x3
    UInt32x3_operator_subasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_subasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_subasg_UInt32x3.name = "operator-="_c;
    UInt32x3_operator_subasg_UInt32x3.backendIndex = 565;
    UInt32x3_operator_subasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_subasg_UInt32x3.parameters = UInt32x3_operator_subasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3)->signature = "u32x3 operator-=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3)->name = "operator-=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3)->nameWithVarNames = "operator-=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_subasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator*= with UInt32x3
    UInt32x3_operator_mulasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_mulasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_mulasg_UInt32x3.name = "operator*="_c;
    UInt32x3_operator_mulasg_UInt32x3.backendIndex = 566;
    UInt32x3_operator_mulasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_mulasg_UInt32x3.parameters = UInt32x3_operator_mulasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3)->signature = "u32x3 operator*=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3)->name = "operator*=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3)->nameWithVarNames = "operator*=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_mulasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator/= with UInt32x3
    UInt32x3_operator_divasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_divasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_divasg_UInt32x3.name = "operator/="_c;
    UInt32x3_operator_divasg_UInt32x3.backendIndex = 567;
    UInt32x3_operator_divasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_divasg_UInt32x3.parameters = UInt32x3_operator_divasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3)->signature = "u32x3 operator/=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3)->name = "operator/=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3)->nameWithVarNames = "operator/=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_divasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator< with UInt32x3
    UInt32x3_operator_lt_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_lt_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_lt_UInt32x3.name = "operator<"_c;
    UInt32x3_operator_lt_UInt32x3.backendIndex = 568;
    UInt32x3_operator_lt_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt32x3_operator_lt_UInt32x3.parameters = UInt32x3_operator_lt_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3)->signature = "b8x3 operator<(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3)->name = "operator<(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3)->nameWithVarNames = "operator<(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lt_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator<= with UInt32x3
    UInt32x3_operator_lte_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_lte_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_lte_UInt32x3.name = "operator<="_c;
    UInt32x3_operator_lte_UInt32x3.backendIndex = 569;
    UInt32x3_operator_lte_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt32x3_operator_lte_UInt32x3.parameters = UInt32x3_operator_lte_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3)->signature = "b8x3 operator<=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3)->name = "operator<=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3)->nameWithVarNames = "operator<=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lte_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator> with UInt32x3
    UInt32x3_operator_gt_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_gt_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_gt_UInt32x3.name = "operator>"_c;
    UInt32x3_operator_gt_UInt32x3.backendIndex = 570;
    UInt32x3_operator_gt_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt32x3_operator_gt_UInt32x3.parameters = UInt32x3_operator_gt_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3)->signature = "b8x3 operator>(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3)->name = "operator>(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3)->nameWithVarNames = "operator>(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_gt_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator>= with UInt32x3
    UInt32x3_operator_gte_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_gte_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_gte_UInt32x3.name = "operator>="_c;
    UInt32x3_operator_gte_UInt32x3.backendIndex = 571;
    UInt32x3_operator_gte_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt32x3_operator_gte_UInt32x3.parameters = UInt32x3_operator_gte_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3)->signature = "b8x3 operator>=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3)->name = "operator>=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3)->nameWithVarNames = "operator>=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_gte_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with UInt32x3
    UInt32x3_operator_eq_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_eq_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_eq_UInt32x3.name = "operator=="_c;
    UInt32x3_operator_eq_UInt32x3.backendIndex = 572;
    UInt32x3_operator_eq_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt32x3_operator_eq_UInt32x3.parameters = UInt32x3_operator_eq_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3)->signature = "b8x3 operator==(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3)->name = "operator==(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3)->nameWithVarNames = "operator==(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_eq_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with UInt32x3
    UInt32x3_operator_neq_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_neq_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_neq_UInt32x3.name = "operator!="_c;
    UInt32x3_operator_neq_UInt32x3.backendIndex = 573;
    UInt32x3_operator_neq_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt32x3_operator_neq_UInt32x3.parameters = UInt32x3_operator_neq_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3)->signature = "b8x3 operator!=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3)->name = "operator!=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3)->nameWithVarNames = "operator!=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_neq_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator* with Float32
    UInt32x3_operator_scale_Float32_arg.name = "arg"_c;
    UInt32x3_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt32x3_operator_scale_Float32.name = "operator*"_c;
    UInt32x3_operator_scale_Float32.backendIndex = 574;
    UInt32x3_operator_scale_Float32.returnType = Type::FullType { Float32x3Type.name };
    UInt32x3_operator_scale_Float32.parameters = UInt32x3_operator_scale_Float32_args;
    Symbol::Resolved(&UInt32x3_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x3_operator_scale_Float32)->signature = "f32x3 operator*(f32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_Float32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with UInt32
    UInt32x3_operator_scale_UInt32_arg.name = "arg"_c;
    UInt32x3_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x3_operator_scale_UInt32.name = "operator*"_c;
    UInt32x3_operator_scale_UInt32.backendIndex = 575;
    UInt32x3_operator_scale_UInt32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_scale_UInt32.parameters = UInt32x3_operator_scale_UInt32_args;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32)->signature = "u32x3 operator*(u32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_UInt32)->returnTypeSymbol = &UInt32x3Type;

    /// operator* with Int32
    UInt32x3_operator_scale_Int32_arg.name = "arg"_c;
    UInt32x3_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x3_operator_scale_Int32.name = "operator*"_c;
    UInt32x3_operator_scale_Int32.backendIndex = 576;
    UInt32x3_operator_scale_Int32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_scale_Int32.parameters = UInt32x3_operator_scale_Int32_args;
    Symbol::Resolved(&UInt32x3_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x3_operator_scale_Int32)->signature = "u32x3 operator*(i32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&UInt32x3_operator_scale_Int32)->returnTypeSymbol = &UInt32x3Type;

    /// operator| with UInt32x3
    UInt32x3_operator_or_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_or_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_or_UInt32x3.name = "operator|"_c;
    UInt32x3_operator_or_UInt32x3.backendIndex = 577;
    UInt32x3_operator_or_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_or_UInt32x3.parameters = UInt32x3_operator_or_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3)->signature = "u32x3 operator|(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3)->name = "operator|(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3)->nameWithVarNames = "operator|(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_or_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator& with UInt32x3
    UInt32x3_operator_and_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_and_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_and_UInt32x3.name = "operator&"_c;
    UInt32x3_operator_and_UInt32x3.backendIndex = 578;
    UInt32x3_operator_and_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_and_UInt32x3.parameters = UInt32x3_operator_and_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3)->signature = "u32x3 operator&(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3)->name = "operator&(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3)->nameWithVarNames = "operator&(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_and_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator^ with UInt32x3
    UInt32x3_operator_xor_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_xor_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_xor_UInt32x3.name = "operator^"_c;
    UInt32x3_operator_xor_UInt32x3.backendIndex = 579;
    UInt32x3_operator_xor_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_xor_UInt32x3.parameters = UInt32x3_operator_xor_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3)->signature = "u32x3 operator^(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3)->name = "operator^(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3)->nameWithVarNames = "operator^(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_xor_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator<< with UInt32x3
    UInt32x3_operator_lsh_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_lsh_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_lsh_UInt32x3.name = "operator<<"_c;
    UInt32x3_operator_lsh_UInt32x3.backendIndex = 580;
    UInt32x3_operator_lsh_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_lsh_UInt32x3.parameters = UInt32x3_operator_lsh_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3)->signature = "u32x3 operator<<(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3)->name = "operator<<(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3)->nameWithVarNames = "operator<<(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lsh_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator>> with UInt32x3
    UInt32x3_operator_rsh_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_rsh_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_rsh_UInt32x3.name = "operator>>"_c;
    UInt32x3_operator_rsh_UInt32x3.backendIndex = 581;
    UInt32x3_operator_rsh_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_rsh_UInt32x3.parameters = UInt32x3_operator_rsh_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3)->signature = "u32x3 operator>>(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3)->name = "operator>>(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3)->nameWithVarNames = "operator>>(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_rsh_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator|= with UInt32x3
    UInt32x3_operator_orasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_orasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_orasg_UInt32x3.name = "operator|="_c;
    UInt32x3_operator_orasg_UInt32x3.backendIndex = 582;
    UInt32x3_operator_orasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_orasg_UInt32x3.parameters = UInt32x3_operator_orasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3)->signature = "u32x3 operator|=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3)->name = "operator|=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3)->nameWithVarNames = "operator|=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_orasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator&= with UInt32x3
    UInt32x3_operator_andasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_andasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_andasg_UInt32x3.name = "operator&="_c;
    UInt32x3_operator_andasg_UInt32x3.backendIndex = 583;
    UInt32x3_operator_andasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_andasg_UInt32x3.parameters = UInt32x3_operator_andasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3)->signature = "u32x3 operator&=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3)->name = "operator&=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3)->nameWithVarNames = "operator&=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_andasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator^= with UInt32x3
    UInt32x3_operator_xorasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_xorasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_xorasg_UInt32x3.name = "operator^="_c;
    UInt32x3_operator_xorasg_UInt32x3.backendIndex = 584;
    UInt32x3_operator_xorasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_xorasg_UInt32x3.parameters = UInt32x3_operator_xorasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3)->signature = "u32x3 operator^=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3)->name = "operator^=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3)->nameWithVarNames = "operator^=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_xorasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator<<= with UInt32x3
    UInt32x3_operator_lshasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_lshasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_lshasg_UInt32x3.name = "operator<<="_c;
    UInt32x3_operator_lshasg_UInt32x3.backendIndex = 585;
    UInt32x3_operator_lshasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_lshasg_UInt32x3.parameters = UInt32x3_operator_lshasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3)->signature = "u32x3 operator<<=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3)->name = "operator<<=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3)->nameWithVarNames = "operator<<=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_lshasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// operator>>= with UInt32x3
    UInt32x3_operator_rhsasg_UInt32x3_arg.name = "arg"_c;
    UInt32x3_operator_rhsasg_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_operator_rhsasg_UInt32x3.name = "operator>>="_c;
    UInt32x3_operator_rhsasg_UInt32x3.backendIndex = 586;
    UInt32x3_operator_rhsasg_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_operator_rhsasg_UInt32x3.parameters = UInt32x3_operator_rhsasg_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3)->signature = "u32x3 operator>>=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3)->name = "operator>>=(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3)->nameWithVarNames = "operator>>=(arg : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_operator_rhsasg_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 304> { 
        std::pair{ "b"_c, &UInt32Type },
        std::pair{ "bb"_c, &UInt32x2Type },
        std::pair{ "bbb"_c, &UInt32x3Type },
        std::pair{ "bbbb"_c, &UInt32x4Type },
        std::pair{ "bbbg"_c, &UInt32x4Type },
        std::pair{ "bbbr"_c, &UInt32x4Type },
        std::pair{ "bbg"_c, &UInt32x3Type },
        std::pair{ "bbgb"_c, &UInt32x4Type },
        std::pair{ "bbgg"_c, &UInt32x4Type },
        std::pair{ "bbgr"_c, &UInt32x4Type },
        std::pair{ "bbr"_c, &UInt32x3Type },
        std::pair{ "bbrb"_c, &UInt32x4Type },
        std::pair{ "bbrg"_c, &UInt32x4Type },
        std::pair{ "bbrr"_c, &UInt32x4Type },
        std::pair{ "bg"_c, &UInt32x2Type },
        std::pair{ "bgb"_c, &UInt32x3Type },
        std::pair{ "bgbb"_c, &UInt32x4Type },
        std::pair{ "bgbg"_c, &UInt32x4Type },
        std::pair{ "bgbr"_c, &UInt32x4Type },
        std::pair{ "bgg"_c, &UInt32x3Type },
        std::pair{ "bggb"_c, &UInt32x4Type },
        std::pair{ "bggg"_c, &UInt32x4Type },
        std::pair{ "bggr"_c, &UInt32x4Type },
        std::pair{ "bgr"_c, &UInt32x3Type },
        std::pair{ "bgrb"_c, &UInt32x4Type },
        std::pair{ "bgrg"_c, &UInt32x4Type },
        std::pair{ "bgrr"_c, &UInt32x4Type },
        std::pair{ "br"_c, &UInt32x2Type },
        std::pair{ "brb"_c, &UInt32x3Type },
        std::pair{ "brbb"_c, &UInt32x4Type },
        std::pair{ "brbg"_c, &UInt32x4Type },
        std::pair{ "brbr"_c, &UInt32x4Type },
        std::pair{ "brg"_c, &UInt32x3Type },
        std::pair{ "brgb"_c, &UInt32x4Type },
        std::pair{ "brgg"_c, &UInt32x4Type },
        std::pair{ "brgr"_c, &UInt32x4Type },
        std::pair{ "brr"_c, &UInt32x3Type },
        std::pair{ "brrb"_c, &UInt32x4Type },
        std::pair{ "brrg"_c, &UInt32x4Type },
        std::pair{ "brrr"_c, &UInt32x4Type },
        std::pair{ "g"_c, &UInt32Type },
        std::pair{ "gb"_c, &UInt32x2Type },
        std::pair{ "gbb"_c, &UInt32x3Type },
        std::pair{ "gbbb"_c, &UInt32x4Type },
        std::pair{ "gbbg"_c, &UInt32x4Type },
        std::pair{ "gbbr"_c, &UInt32x4Type },
        std::pair{ "gbg"_c, &UInt32x3Type },
        std::pair{ "gbgb"_c, &UInt32x4Type },
        std::pair{ "gbgg"_c, &UInt32x4Type },
        std::pair{ "gbgr"_c, &UInt32x4Type },
        std::pair{ "gbr"_c, &UInt32x3Type },
        std::pair{ "gbrb"_c, &UInt32x4Type },
        std::pair{ "gbrg"_c, &UInt32x4Type },
        std::pair{ "gbrr"_c, &UInt32x4Type },
        std::pair{ "gg"_c, &UInt32x2Type },
        std::pair{ "ggb"_c, &UInt32x3Type },
        std::pair{ "ggbb"_c, &UInt32x4Type },
        std::pair{ "ggbg"_c, &UInt32x4Type },
        std::pair{ "ggbr"_c, &UInt32x4Type },
        std::pair{ "ggg"_c, &UInt32x3Type },
        std::pair{ "gggb"_c, &UInt32x4Type },
        std::pair{ "gggg"_c, &UInt32x4Type },
        std::pair{ "gggr"_c, &UInt32x4Type },
        std::pair{ "ggr"_c, &UInt32x3Type },
        std::pair{ "ggrb"_c, &UInt32x4Type },
        std::pair{ "ggrg"_c, &UInt32x4Type },
        std::pair{ "ggrr"_c, &UInt32x4Type },
        std::pair{ "gr"_c, &UInt32x2Type },
        std::pair{ "grb"_c, &UInt32x3Type },
        std::pair{ "grbb"_c, &UInt32x4Type },
        std::pair{ "grbg"_c, &UInt32x4Type },
        std::pair{ "grbr"_c, &UInt32x4Type },
        std::pair{ "grg"_c, &UInt32x3Type },
        std::pair{ "grgb"_c, &UInt32x4Type },
        std::pair{ "grgg"_c, &UInt32x4Type },
        std::pair{ "grgr"_c, &UInt32x4Type },
        std::pair{ "grr"_c, &UInt32x3Type },
        std::pair{ "grrb"_c, &UInt32x4Type },
        std::pair{ "grrg"_c, &UInt32x4Type },
        std::pair{ "grrr"_c, &UInt32x4Type },
        std::pair{ "operator!="_c, &UInt32x3_operator_neq_UInt32x3 },
        std::pair{ "operator!=(u32x3)"_c, &UInt32x3_operator_neq_UInt32x3 },
        std::pair{ "operator%"_c, &UInt32x3_operator_mod_UInt32x3 },
        std::pair{ "operator%(u32x3)"_c, &UInt32x3_operator_mod_UInt32x3 },
        std::pair{ "operator&"_c, &UInt32x3_operator_and_UInt32x3 },
        std::pair{ "operator&(u32x3)"_c, &UInt32x3_operator_and_UInt32x3 },
        std::pair{ "operator&="_c, &UInt32x3_operator_andasg_UInt32x3 },
        std::pair{ "operator&=(u32x3)"_c, &UInt32x3_operator_andasg_UInt32x3 },
        std::pair{ "operator*"_c, &UInt32x3_operator_mul_UInt32x3 },
        std::pair{ "operator*"_c, &UInt32x3_operator_scale_Float32 },
        std::pair{ "operator*"_c, &UInt32x3_operator_scale_UInt32 },
        std::pair{ "operator*"_c, &UInt32x3_operator_scale_Int32 },
        std::pair{ "operator*(f32)"_c, &UInt32x3_operator_scale_Float32 },
        std::pair{ "operator*(i32)"_c, &UInt32x3_operator_scale_Int32 },
        std::pair{ "operator*(u32)"_c, &UInt32x3_operator_scale_UInt32 },
        std::pair{ "operator*(u32x3)"_c, &UInt32x3_operator_mul_UInt32x3 },
        std::pair{ "operator*="_c, &UInt32x3_operator_mulasg_UInt32x3 },
        std::pair{ "operator*=(u32x3)"_c, &UInt32x3_operator_mulasg_UInt32x3 },
        std::pair{ "operator+"_c, &UInt32x3_operator_add_UInt32x3 },
        std::pair{ "operator+(u32x3)"_c, &UInt32x3_operator_add_UInt32x3 },
        std::pair{ "operator+="_c, &UInt32x3_operator_addasg_UInt32x3 },
        std::pair{ "operator+=(u32x3)"_c, &UInt32x3_operator_addasg_UInt32x3 },
        std::pair{ "operator-"_c, &UInt32x3_operator_sub_UInt32x3 },
        std::pair{ "operator-(u32x3)"_c, &UInt32x3_operator_sub_UInt32x3 },
        std::pair{ "operator-="_c, &UInt32x3_operator_subasg_UInt32x3 },
        std::pair{ "operator-=(u32x3)"_c, &UInt32x3_operator_subasg_UInt32x3 },
        std::pair{ "operator/"_c, &UInt32x3_operator_div_UInt32x3 },
        std::pair{ "operator/(u32x3)"_c, &UInt32x3_operator_div_UInt32x3 },
        std::pair{ "operator/="_c, &UInt32x3_operator_divasg_UInt32x3 },
        std::pair{ "operator/=(u32x3)"_c, &UInt32x3_operator_divasg_UInt32x3 },
        std::pair{ "operator<"_c, &UInt32x3_operator_lt_UInt32x3 },
        std::pair{ "operator<(u32x3)"_c, &UInt32x3_operator_lt_UInt32x3 },
        std::pair{ "operator<<"_c, &UInt32x3_operator_lsh_UInt32x3 },
        std::pair{ "operator<<(u32x3)"_c, &UInt32x3_operator_lsh_UInt32x3 },
        std::pair{ "operator<<="_c, &UInt32x3_operator_lshasg_UInt32x3 },
        std::pair{ "operator<<=(u32x3)"_c, &UInt32x3_operator_lshasg_UInt32x3 },
        std::pair{ "operator<="_c, &UInt32x3_operator_lte_UInt32x3 },
        std::pair{ "operator<=(u32x3)"_c, &UInt32x3_operator_lte_UInt32x3 },
        std::pair{ "operator=="_c, &UInt32x3_operator_eq_UInt32x3 },
        std::pair{ "operator==(u32x3)"_c, &UInt32x3_operator_eq_UInt32x3 },
        std::pair{ "operator>"_c, &UInt32x3_operator_gt_UInt32x3 },
        std::pair{ "operator>(u32x3)"_c, &UInt32x3_operator_gt_UInt32x3 },
        std::pair{ "operator>="_c, &UInt32x3_operator_gte_UInt32x3 },
        std::pair{ "operator>=(u32x3)"_c, &UInt32x3_operator_gte_UInt32x3 },
        std::pair{ "operator>>"_c, &UInt32x3_operator_rsh_UInt32x3 },
        std::pair{ "operator>>(u32x3)"_c, &UInt32x3_operator_rsh_UInt32x3 },
        std::pair{ "operator>>="_c, &UInt32x3_operator_rhsasg_UInt32x3 },
        std::pair{ "operator>>=(u32x3)"_c, &UInt32x3_operator_rhsasg_UInt32x3 },
        std::pair{ "operator[]"_c, &UInt32x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &UInt32x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &UInt32x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &UInt32x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &UInt32x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &UInt32x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &UInt32x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &UInt32x3_operator_index_UInt32 },
        std::pair{ "operator^"_c, &UInt32x3_operator_xor_UInt32x3 },
        std::pair{ "operator^(u32x3)"_c, &UInt32x3_operator_xor_UInt32x3 },
        std::pair{ "operator^="_c, &UInt32x3_operator_xorasg_UInt32x3 },
        std::pair{ "operator^=(u32x3)"_c, &UInt32x3_operator_xorasg_UInt32x3 },
        std::pair{ "operator|"_c, &UInt32x3_operator_or_UInt32x3 },
        std::pair{ "operator|(u32x3)"_c, &UInt32x3_operator_or_UInt32x3 },
        std::pair{ "operator|="_c, &UInt32x3_operator_orasg_UInt32x3 },
        std::pair{ "operator|=(u32x3)"_c, &UInt32x3_operator_orasg_UInt32x3 },
        std::pair{ "r"_c, &UInt32Type },
        std::pair{ "rb"_c, &UInt32x2Type },
        std::pair{ "rbb"_c, &UInt32x3Type },
        std::pair{ "rbbb"_c, &UInt32x4Type },
        std::pair{ "rbbg"_c, &UInt32x4Type },
        std::pair{ "rbbr"_c, &UInt32x4Type },
        std::pair{ "rbg"_c, &UInt32x3Type },
        std::pair{ "rbgb"_c, &UInt32x4Type },
        std::pair{ "rbgg"_c, &UInt32x4Type },
        std::pair{ "rbgr"_c, &UInt32x4Type },
        std::pair{ "rbr"_c, &UInt32x3Type },
        std::pair{ "rbrb"_c, &UInt32x4Type },
        std::pair{ "rbrg"_c, &UInt32x4Type },
        std::pair{ "rbrr"_c, &UInt32x4Type },
        std::pair{ "rg"_c, &UInt32x2Type },
        std::pair{ "rgb"_c, &UInt32x3Type },
        std::pair{ "rgbb"_c, &UInt32x4Type },
        std::pair{ "rgbg"_c, &UInt32x4Type },
        std::pair{ "rgbr"_c, &UInt32x4Type },
        std::pair{ "rgg"_c, &UInt32x3Type },
        std::pair{ "rggb"_c, &UInt32x4Type },
        std::pair{ "rggg"_c, &UInt32x4Type },
        std::pair{ "rggr"_c, &UInt32x4Type },
        std::pair{ "rgr"_c, &UInt32x3Type },
        std::pair{ "rgrb"_c, &UInt32x4Type },
        std::pair{ "rgrg"_c, &UInt32x4Type },
        std::pair{ "rgrr"_c, &UInt32x4Type },
        std::pair{ "rr"_c, &UInt32x2Type },
        std::pair{ "rrb"_c, &UInt32x3Type },
        std::pair{ "rrbb"_c, &UInt32x4Type },
        std::pair{ "rrbg"_c, &UInt32x4Type },
        std::pair{ "rrbr"_c, &UInt32x4Type },
        std::pair{ "rrg"_c, &UInt32x3Type },
        std::pair{ "rrgb"_c, &UInt32x4Type },
        std::pair{ "rrgg"_c, &UInt32x4Type },
        std::pair{ "rrgr"_c, &UInt32x4Type },
        std::pair{ "rrr"_c, &UInt32x3Type },
        std::pair{ "rrrb"_c, &UInt32x4Type },
        std::pair{ "rrrg"_c, &UInt32x4Type },
        std::pair{ "rrrr"_c, &UInt32x4Type },
        std::pair{ "x"_c, &UInt32Type },
        std::pair{ "xx"_c, &UInt32x2Type },
        std::pair{ "xxx"_c, &UInt32x3Type },
        std::pair{ "xxxx"_c, &UInt32x4Type },
        std::pair{ "xxxy"_c, &UInt32x4Type },
        std::pair{ "xxxz"_c, &UInt32x4Type },
        std::pair{ "xxy"_c, &UInt32x3Type },
        std::pair{ "xxyx"_c, &UInt32x4Type },
        std::pair{ "xxyy"_c, &UInt32x4Type },
        std::pair{ "xxyz"_c, &UInt32x4Type },
        std::pair{ "xxz"_c, &UInt32x3Type },
        std::pair{ "xxzx"_c, &UInt32x4Type },
        std::pair{ "xxzy"_c, &UInt32x4Type },
        std::pair{ "xxzz"_c, &UInt32x4Type },
        std::pair{ "xy"_c, &UInt32x2Type },
        std::pair{ "xyx"_c, &UInt32x3Type },
        std::pair{ "xyxx"_c, &UInt32x4Type },
        std::pair{ "xyxy"_c, &UInt32x4Type },
        std::pair{ "xyxz"_c, &UInt32x4Type },
        std::pair{ "xyy"_c, &UInt32x3Type },
        std::pair{ "xyyx"_c, &UInt32x4Type },
        std::pair{ "xyyy"_c, &UInt32x4Type },
        std::pair{ "xyyz"_c, &UInt32x4Type },
        std::pair{ "xyz"_c, &UInt32x3Type },
        std::pair{ "xyzx"_c, &UInt32x4Type },
        std::pair{ "xyzy"_c, &UInt32x4Type },
        std::pair{ "xyzz"_c, &UInt32x4Type },
        std::pair{ "xz"_c, &UInt32x2Type },
        std::pair{ "xzx"_c, &UInt32x3Type },
        std::pair{ "xzxx"_c, &UInt32x4Type },
        std::pair{ "xzxy"_c, &UInt32x4Type },
        std::pair{ "xzxz"_c, &UInt32x4Type },
        std::pair{ "xzy"_c, &UInt32x3Type },
        std::pair{ "xzyx"_c, &UInt32x4Type },
        std::pair{ "xzyy"_c, &UInt32x4Type },
        std::pair{ "xzyz"_c, &UInt32x4Type },
        std::pair{ "xzz"_c, &UInt32x3Type },
        std::pair{ "xzzx"_c, &UInt32x4Type },
        std::pair{ "xzzy"_c, &UInt32x4Type },
        std::pair{ "xzzz"_c, &UInt32x4Type },
        std::pair{ "y"_c, &UInt32Type },
        std::pair{ "yx"_c, &UInt32x2Type },
        std::pair{ "yxx"_c, &UInt32x3Type },
        std::pair{ "yxxx"_c, &UInt32x4Type },
        std::pair{ "yxxy"_c, &UInt32x4Type },
        std::pair{ "yxxz"_c, &UInt32x4Type },
        std::pair{ "yxy"_c, &UInt32x3Type },
        std::pair{ "yxyx"_c, &UInt32x4Type },
        std::pair{ "yxyy"_c, &UInt32x4Type },
        std::pair{ "yxyz"_c, &UInt32x4Type },
        std::pair{ "yxz"_c, &UInt32x3Type },
        std::pair{ "yxzx"_c, &UInt32x4Type },
        std::pair{ "yxzy"_c, &UInt32x4Type },
        std::pair{ "yxzz"_c, &UInt32x4Type },
        std::pair{ "yy"_c, &UInt32x2Type },
        std::pair{ "yyx"_c, &UInt32x3Type },
        std::pair{ "yyxx"_c, &UInt32x4Type },
        std::pair{ "yyxy"_c, &UInt32x4Type },
        std::pair{ "yyxz"_c, &UInt32x4Type },
        std::pair{ "yyy"_c, &UInt32x3Type },
        std::pair{ "yyyx"_c, &UInt32x4Type },
        std::pair{ "yyyy"_c, &UInt32x4Type },
        std::pair{ "yyyz"_c, &UInt32x4Type },
        std::pair{ "yyz"_c, &UInt32x3Type },
        std::pair{ "yyzx"_c, &UInt32x4Type },
        std::pair{ "yyzy"_c, &UInt32x4Type },
        std::pair{ "yyzz"_c, &UInt32x4Type },
        std::pair{ "yz"_c, &UInt32x2Type },
        std::pair{ "yzx"_c, &UInt32x3Type },
        std::pair{ "yzxx"_c, &UInt32x4Type },
        std::pair{ "yzxy"_c, &UInt32x4Type },
        std::pair{ "yzxz"_c, &UInt32x4Type },
        std::pair{ "yzy"_c, &UInt32x3Type },
        std::pair{ "yzyx"_c, &UInt32x4Type },
        std::pair{ "yzyy"_c, &UInt32x4Type },
        std::pair{ "yzyz"_c, &UInt32x4Type },
        std::pair{ "yzz"_c, &UInt32x3Type },
        std::pair{ "yzzx"_c, &UInt32x4Type },
        std::pair{ "yzzy"_c, &UInt32x4Type },
        std::pair{ "yzzz"_c, &UInt32x4Type },
        std::pair{ "z"_c, &UInt32Type },
        std::pair{ "zx"_c, &UInt32x2Type },
        std::pair{ "zxx"_c, &UInt32x3Type },
        std::pair{ "zxxx"_c, &UInt32x4Type },
        std::pair{ "zxxy"_c, &UInt32x4Type },
        std::pair{ "zxxz"_c, &UInt32x4Type },
        std::pair{ "zxy"_c, &UInt32x3Type },
        std::pair{ "zxyx"_c, &UInt32x4Type },
        std::pair{ "zxyy"_c, &UInt32x4Type },
        std::pair{ "zxyz"_c, &UInt32x4Type },
        std::pair{ "zxz"_c, &UInt32x3Type },
        std::pair{ "zxzx"_c, &UInt32x4Type },
        std::pair{ "zxzy"_c, &UInt32x4Type },
        std::pair{ "zxzz"_c, &UInt32x4Type },
        std::pair{ "zy"_c, &UInt32x2Type },
        std::pair{ "zyx"_c, &UInt32x3Type },
        std::pair{ "zyxx"_c, &UInt32x4Type },
        std::pair{ "zyxy"_c, &UInt32x4Type },
        std::pair{ "zyxz"_c, &UInt32x4Type },
        std::pair{ "zyy"_c, &UInt32x3Type },
        std::pair{ "zyyx"_c, &UInt32x4Type },
        std::pair{ "zyyy"_c, &UInt32x4Type },
        std::pair{ "zyyz"_c, &UInt32x4Type },
        std::pair{ "zyz"_c, &UInt32x3Type },
        std::pair{ "zyzx"_c, &UInt32x4Type },
        std::pair{ "zyzy"_c, &UInt32x4Type },
        std::pair{ "zyzz"_c, &UInt32x4Type },
        std::pair{ "zz"_c, &UInt32x2Type },
        std::pair{ "zzx"_c, &UInt32x3Type },
        std::pair{ "zzxx"_c, &UInt32x4Type },
        std::pair{ "zzxy"_c, &UInt32x4Type },
        std::pair{ "zzxz"_c, &UInt32x4Type },
        std::pair{ "zzy"_c, &UInt32x3Type },
        std::pair{ "zzyx"_c, &UInt32x4Type },
        std::pair{ "zzyy"_c, &UInt32x4Type },
        std::pair{ "zzyz"_c, &UInt32x4Type },
        std::pair{ "zzz"_c, &UInt32x3Type },
        std::pair{ "zzzx"_c, &UInt32x4Type },
        std::pair{ "zzzy"_c, &UInt32x4Type },
        std::pair{ "zzzz"_c, &UInt32x4Type }
    };
}
UInt32x3 UInt32x3Type;

/// operator[] with Int32
Variable Int32x3_operator_index_Int32_arg;
Function Int32x3_operator_index_Int32;
inline constexpr std::array Int32x3_operator_index_Int32_args = { &Int32x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int32x3_operator_index_UInt32_arg;
Function Int32x3_operator_index_UInt32;
inline constexpr std::array Int32x3_operator_index_UInt32_args = { &Int32x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int32x3_operator_index_Int16_arg;
Function Int32x3_operator_index_Int16;
inline constexpr std::array Int32x3_operator_index_Int16_args = { &Int32x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int32x3_operator_index_UInt16_arg;
Function Int32x3_operator_index_UInt16;
inline constexpr std::array Int32x3_operator_index_UInt16_args = { &Int32x3_operator_index_UInt16_arg };

/// operator+ with Int32x3
Variable Int32x3_operator_add_Int32x3_arg;
Function Int32x3_operator_add_Int32x3;
inline constexpr std::array Int32x3_operator_add_Int32x3_args = { &Int32x3_operator_add_Int32x3_arg };

/// operator- with Int32x3
Variable Int32x3_operator_sub_Int32x3_arg;
Function Int32x3_operator_sub_Int32x3;
inline constexpr std::array Int32x3_operator_sub_Int32x3_args = { &Int32x3_operator_sub_Int32x3_arg };

/// operator* with Int32x3
Variable Int32x3_operator_mul_Int32x3_arg;
Function Int32x3_operator_mul_Int32x3;
inline constexpr std::array Int32x3_operator_mul_Int32x3_args = { &Int32x3_operator_mul_Int32x3_arg };

/// operator/ with Int32x3
Variable Int32x3_operator_div_Int32x3_arg;
Function Int32x3_operator_div_Int32x3;
inline constexpr std::array Int32x3_operator_div_Int32x3_args = { &Int32x3_operator_div_Int32x3_arg };

/// operator% with Int32x3
Variable Int32x3_operator_mod_Int32x3_arg;
Function Int32x3_operator_mod_Int32x3;
inline constexpr std::array Int32x3_operator_mod_Int32x3_args = { &Int32x3_operator_mod_Int32x3_arg };

/// operator+= with Int32x3
Variable Int32x3_operator_addasg_Int32x3_arg;
Function Int32x3_operator_addasg_Int32x3;
inline constexpr std::array Int32x3_operator_addasg_Int32x3_args = { &Int32x3_operator_addasg_Int32x3_arg };

/// operator-= with Int32x3
Variable Int32x3_operator_subasg_Int32x3_arg;
Function Int32x3_operator_subasg_Int32x3;
inline constexpr std::array Int32x3_operator_subasg_Int32x3_args = { &Int32x3_operator_subasg_Int32x3_arg };

/// operator*= with Int32x3
Variable Int32x3_operator_mulasg_Int32x3_arg;
Function Int32x3_operator_mulasg_Int32x3;
inline constexpr std::array Int32x3_operator_mulasg_Int32x3_args = { &Int32x3_operator_mulasg_Int32x3_arg };

/// operator/= with Int32x3
Variable Int32x3_operator_divasg_Int32x3_arg;
Function Int32x3_operator_divasg_Int32x3;
inline constexpr std::array Int32x3_operator_divasg_Int32x3_args = { &Int32x3_operator_divasg_Int32x3_arg };

/// operator< with Int32x3
Variable Int32x3_operator_lt_Int32x3_arg;
Function Int32x3_operator_lt_Int32x3;
inline constexpr std::array Int32x3_operator_lt_Int32x3_args = { &Int32x3_operator_lt_Int32x3_arg };

/// operator<= with Int32x3
Variable Int32x3_operator_lte_Int32x3_arg;
Function Int32x3_operator_lte_Int32x3;
inline constexpr std::array Int32x3_operator_lte_Int32x3_args = { &Int32x3_operator_lte_Int32x3_arg };

/// operator> with Int32x3
Variable Int32x3_operator_gt_Int32x3_arg;
Function Int32x3_operator_gt_Int32x3;
inline constexpr std::array Int32x3_operator_gt_Int32x3_args = { &Int32x3_operator_gt_Int32x3_arg };

/// operator>= with Int32x3
Variable Int32x3_operator_gte_Int32x3_arg;
Function Int32x3_operator_gte_Int32x3;
inline constexpr std::array Int32x3_operator_gte_Int32x3_args = { &Int32x3_operator_gte_Int32x3_arg };

/// operator== with Int32x3
Variable Int32x3_operator_eq_Int32x3_arg;
Function Int32x3_operator_eq_Int32x3;
inline constexpr std::array Int32x3_operator_eq_Int32x3_args = { &Int32x3_operator_eq_Int32x3_arg };

/// operator!= with Int32x3
Variable Int32x3_operator_neq_Int32x3_arg;
Function Int32x3_operator_neq_Int32x3;
inline constexpr std::array Int32x3_operator_neq_Int32x3_args = { &Int32x3_operator_neq_Int32x3_arg };

/// operator* with Float32
Variable Int32x3_operator_scale_Float32_arg;
Function Int32x3_operator_scale_Float32;
inline constexpr std::array Int32x3_operator_scale_Float32_args = { &Int32x3_operator_scale_Float32_arg };

/// operator* with UInt32
Variable Int32x3_operator_scale_UInt32_arg;
Function Int32x3_operator_scale_UInt32;
inline constexpr std::array Int32x3_operator_scale_UInt32_args = { &Int32x3_operator_scale_UInt32_arg };

/// operator* with Int32
Variable Int32x3_operator_scale_Int32_arg;
Function Int32x3_operator_scale_Int32;
inline constexpr std::array Int32x3_operator_scale_Int32_args = { &Int32x3_operator_scale_Int32_arg };

/// operator| with Int32x3
Variable Int32x3_operator_or_Int32x3_arg;
Function Int32x3_operator_or_Int32x3;
inline constexpr std::array Int32x3_operator_or_Int32x3_args = { &Int32x3_operator_or_Int32x3_arg };

/// operator& with Int32x3
Variable Int32x3_operator_and_Int32x3_arg;
Function Int32x3_operator_and_Int32x3;
inline constexpr std::array Int32x3_operator_and_Int32x3_args = { &Int32x3_operator_and_Int32x3_arg };

/// operator^ with Int32x3
Variable Int32x3_operator_xor_Int32x3_arg;
Function Int32x3_operator_xor_Int32x3;
inline constexpr std::array Int32x3_operator_xor_Int32x3_args = { &Int32x3_operator_xor_Int32x3_arg };

/// operator<< with Int32x3
Variable Int32x3_operator_lsh_Int32x3_arg;
Function Int32x3_operator_lsh_Int32x3;
inline constexpr std::array Int32x3_operator_lsh_Int32x3_args = { &Int32x3_operator_lsh_Int32x3_arg };

/// operator>> with Int32x3
Variable Int32x3_operator_rsh_Int32x3_arg;
Function Int32x3_operator_rsh_Int32x3;
inline constexpr std::array Int32x3_operator_rsh_Int32x3_args = { &Int32x3_operator_rsh_Int32x3_arg };

/// operator|= with Int32x3
Variable Int32x3_operator_orasg_Int32x3_arg;
Function Int32x3_operator_orasg_Int32x3;
inline constexpr std::array Int32x3_operator_orasg_Int32x3_args = { &Int32x3_operator_orasg_Int32x3_arg };

/// operator&= with Int32x3
Variable Int32x3_operator_andasg_Int32x3_arg;
Function Int32x3_operator_andasg_Int32x3;
inline constexpr std::array Int32x3_operator_andasg_Int32x3_args = { &Int32x3_operator_andasg_Int32x3_arg };

/// operator^= with Int32x3
Variable Int32x3_operator_xorasg_Int32x3_arg;
Function Int32x3_operator_xorasg_Int32x3;
inline constexpr std::array Int32x3_operator_xorasg_Int32x3_args = { &Int32x3_operator_xorasg_Int32x3_arg };

/// operator<<= with Int32x3
Variable Int32x3_operator_lshasg_Int32x3_arg;
Function Int32x3_operator_lshasg_Int32x3;
inline constexpr std::array Int32x3_operator_lshasg_Int32x3_args = { &Int32x3_operator_lshasg_Int32x3_arg };

/// operator>>= with Int32x3
Variable Int32x3_operator_rhsasg_Int32x3_arg;
Function Int32x3_operator_rhsasg_Int32x3;
inline constexpr std::array Int32x3_operator_rhsasg_Int32x3_args = { &Int32x3_operator_rhsasg_Int32x3_arg };

Int32x3::Int32x3()
{
    this->name = "i32x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    /// operator[] with Int32
    Int32x3_operator_index_Int32_arg.name = "arg"_c;
    Int32x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x3_operator_index_Int32.name = "operator[]"_c;
    Int32x3_operator_index_Int32.backendIndex = 604;
    Int32x3_operator_index_Int32.returnType = Type::FullType { Int32Type.name };
    Int32x3_operator_index_Int32.parameters = Int32x3_operator_index_Int32_args;
    Symbol::Resolved(&Int32x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_operator_index_Int32)->signature = "i32 operator[](i32)"_c;
    Symbol::Resolved(&Int32x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int32x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int32x3_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt32
    Int32x3_operator_index_UInt32_arg.name = "arg"_c;
    Int32x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x3_operator_index_UInt32.name = "operator[]"_c;
    Int32x3_operator_index_UInt32.backendIndex = 605;
    Int32x3_operator_index_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32x3_operator_index_UInt32.parameters = Int32x3_operator_index_UInt32_args;
    Symbol::Resolved(&Int32x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x3_operator_index_UInt32)->signature = "i32 operator[](u32)"_c;
    Symbol::Resolved(&Int32x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int32x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int32x3_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int16
    Int32x3_operator_index_Int16_arg.name = "arg"_c;
    Int32x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32x3_operator_index_Int16.name = "operator[]"_c;
    Int32x3_operator_index_Int16.backendIndex = 606;
    Int32x3_operator_index_Int16.returnType = Type::FullType { Int32Type.name };
    Int32x3_operator_index_Int16.parameters = Int32x3_operator_index_Int16_args;
    Symbol::Resolved(&Int32x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x3_operator_index_Int16)->signature = "i32 operator[](i16)"_c;
    Symbol::Resolved(&Int32x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int32x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int32x3_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt16
    Int32x3_operator_index_UInt16_arg.name = "arg"_c;
    Int32x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32x3_operator_index_UInt16.name = "operator[]"_c;
    Int32x3_operator_index_UInt16.backendIndex = 607;
    Int32x3_operator_index_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32x3_operator_index_UInt16.parameters = Int32x3_operator_index_UInt16_args;
    Symbol::Resolved(&Int32x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x3_operator_index_UInt16)->signature = "i32 operator[](u16)"_c;
    Symbol::Resolved(&Int32x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int32x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int32x3_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    /// operator+ with Int32x3
    Int32x3_operator_add_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_add_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_add_Int32x3.name = "operator+"_c;
    Int32x3_operator_add_Int32x3.backendIndex = 608;
    Int32x3_operator_add_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_add_Int32x3.parameters = Int32x3_operator_add_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_add_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_add_Int32x3)->signature = "i32x3 operator+(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_add_Int32x3)->name = "operator+(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_add_Int32x3)->nameWithVarNames = "operator+(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_add_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator- with Int32x3
    Int32x3_operator_sub_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_sub_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_sub_Int32x3.name = "operator-"_c;
    Int32x3_operator_sub_Int32x3.backendIndex = 609;
    Int32x3_operator_sub_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_sub_Int32x3.parameters = Int32x3_operator_sub_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3)->signature = "i32x3 operator-(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3)->name = "operator-(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3)->nameWithVarNames = "operator-(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_sub_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator* with Int32x3
    Int32x3_operator_mul_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_mul_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_mul_Int32x3.name = "operator*"_c;
    Int32x3_operator_mul_Int32x3.backendIndex = 610;
    Int32x3_operator_mul_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_mul_Int32x3.parameters = Int32x3_operator_mul_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3)->signature = "i32x3 operator*(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3)->name = "operator*(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3)->nameWithVarNames = "operator*(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mul_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator/ with Int32x3
    Int32x3_operator_div_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_div_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_div_Int32x3.name = "operator/"_c;
    Int32x3_operator_div_Int32x3.backendIndex = 611;
    Int32x3_operator_div_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_div_Int32x3.parameters = Int32x3_operator_div_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_div_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_div_Int32x3)->signature = "i32x3 operator/(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_div_Int32x3)->name = "operator/(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_div_Int32x3)->nameWithVarNames = "operator/(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_div_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator% with Int32x3
    Int32x3_operator_mod_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_mod_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_mod_Int32x3.name = "operator%"_c;
    Int32x3_operator_mod_Int32x3.backendIndex = 612;
    Int32x3_operator_mod_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_mod_Int32x3.parameters = Int32x3_operator_mod_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3)->signature = "i32x3 operator%(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3)->name = "operator%(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3)->nameWithVarNames = "operator%(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mod_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator+= with Int32x3
    Int32x3_operator_addasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_addasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_addasg_Int32x3.name = "operator+="_c;
    Int32x3_operator_addasg_Int32x3.backendIndex = 613;
    Int32x3_operator_addasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_addasg_Int32x3.parameters = Int32x3_operator_addasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3)->signature = "i32x3 operator+=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3)->name = "operator+=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3)->nameWithVarNames = "operator+=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_addasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator-= with Int32x3
    Int32x3_operator_subasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_subasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_subasg_Int32x3.name = "operator-="_c;
    Int32x3_operator_subasg_Int32x3.backendIndex = 614;
    Int32x3_operator_subasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_subasg_Int32x3.parameters = Int32x3_operator_subasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3)->signature = "i32x3 operator-=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3)->name = "operator-=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3)->nameWithVarNames = "operator-=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_subasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator*= with Int32x3
    Int32x3_operator_mulasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_mulasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_mulasg_Int32x3.name = "operator*="_c;
    Int32x3_operator_mulasg_Int32x3.backendIndex = 615;
    Int32x3_operator_mulasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_mulasg_Int32x3.parameters = Int32x3_operator_mulasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3)->signature = "i32x3 operator*=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3)->name = "operator*=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3)->nameWithVarNames = "operator*=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_mulasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator/= with Int32x3
    Int32x3_operator_divasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_divasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_divasg_Int32x3.name = "operator/="_c;
    Int32x3_operator_divasg_Int32x3.backendIndex = 616;
    Int32x3_operator_divasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_divasg_Int32x3.parameters = Int32x3_operator_divasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3)->signature = "i32x3 operator/=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3)->name = "operator/=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3)->nameWithVarNames = "operator/=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_divasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator< with Int32x3
    Int32x3_operator_lt_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_lt_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_lt_Int32x3.name = "operator<"_c;
    Int32x3_operator_lt_Int32x3.backendIndex = 617;
    Int32x3_operator_lt_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Int32x3_operator_lt_Int32x3.parameters = Int32x3_operator_lt_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3)->signature = "b8x3 operator<(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3)->name = "operator<(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3)->nameWithVarNames = "operator<(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lt_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator<= with Int32x3
    Int32x3_operator_lte_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_lte_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_lte_Int32x3.name = "operator<="_c;
    Int32x3_operator_lte_Int32x3.backendIndex = 618;
    Int32x3_operator_lte_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Int32x3_operator_lte_Int32x3.parameters = Int32x3_operator_lte_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3)->signature = "b8x3 operator<=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3)->name = "operator<=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3)->nameWithVarNames = "operator<=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lte_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator> with Int32x3
    Int32x3_operator_gt_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_gt_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_gt_Int32x3.name = "operator>"_c;
    Int32x3_operator_gt_Int32x3.backendIndex = 619;
    Int32x3_operator_gt_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Int32x3_operator_gt_Int32x3.parameters = Int32x3_operator_gt_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3)->signature = "b8x3 operator>(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3)->name = "operator>(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3)->nameWithVarNames = "operator>(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_gt_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator>= with Int32x3
    Int32x3_operator_gte_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_gte_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_gte_Int32x3.name = "operator>="_c;
    Int32x3_operator_gte_Int32x3.backendIndex = 620;
    Int32x3_operator_gte_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Int32x3_operator_gte_Int32x3.parameters = Int32x3_operator_gte_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3)->signature = "b8x3 operator>=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3)->name = "operator>=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3)->nameWithVarNames = "operator>=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_gte_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with Int32x3
    Int32x3_operator_eq_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_eq_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_eq_Int32x3.name = "operator=="_c;
    Int32x3_operator_eq_Int32x3.backendIndex = 621;
    Int32x3_operator_eq_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Int32x3_operator_eq_Int32x3.parameters = Int32x3_operator_eq_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3)->signature = "b8x3 operator==(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3)->name = "operator==(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3)->nameWithVarNames = "operator==(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_eq_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with Int32x3
    Int32x3_operator_neq_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_neq_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_neq_Int32x3.name = "operator!="_c;
    Int32x3_operator_neq_Int32x3.backendIndex = 622;
    Int32x3_operator_neq_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Int32x3_operator_neq_Int32x3.parameters = Int32x3_operator_neq_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3)->signature = "b8x3 operator!=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3)->name = "operator!=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3)->nameWithVarNames = "operator!=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_neq_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator* with Float32
    Int32x3_operator_scale_Float32_arg.name = "arg"_c;
    Int32x3_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int32x3_operator_scale_Float32.name = "operator*"_c;
    Int32x3_operator_scale_Float32.backendIndex = 623;
    Int32x3_operator_scale_Float32.returnType = Type::FullType { Float32x3Type.name };
    Int32x3_operator_scale_Float32.parameters = Int32x3_operator_scale_Float32_args;
    Symbol::Resolved(&Int32x3_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x3_operator_scale_Float32)->signature = "f32x3 operator*(f32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_Float32)->returnTypeSymbol = &Float32x3Type;

    /// operator* with UInt32
    Int32x3_operator_scale_UInt32_arg.name = "arg"_c;
    Int32x3_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x3_operator_scale_UInt32.name = "operator*"_c;
    Int32x3_operator_scale_UInt32.backendIndex = 624;
    Int32x3_operator_scale_UInt32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_scale_UInt32.parameters = Int32x3_operator_scale_UInt32_args;
    Symbol::Resolved(&Int32x3_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x3_operator_scale_UInt32)->signature = "i32x3 operator*(u32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_UInt32)->returnTypeSymbol = &Int32x3Type;

    /// operator* with Int32
    Int32x3_operator_scale_Int32_arg.name = "arg"_c;
    Int32x3_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x3_operator_scale_Int32.name = "operator*"_c;
    Int32x3_operator_scale_Int32.backendIndex = 625;
    Int32x3_operator_scale_Int32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_scale_Int32.parameters = Int32x3_operator_scale_Int32_args;
    Symbol::Resolved(&Int32x3_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_operator_scale_Int32)->signature = "i32x3 operator*(i32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Int32x3_operator_scale_Int32)->returnTypeSymbol = &Int32x3Type;

    /// operator| with Int32x3
    Int32x3_operator_or_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_or_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_or_Int32x3.name = "operator|"_c;
    Int32x3_operator_or_Int32x3.backendIndex = 626;
    Int32x3_operator_or_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_or_Int32x3.parameters = Int32x3_operator_or_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_or_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_or_Int32x3)->signature = "i32x3 operator|(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_or_Int32x3)->name = "operator|(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_or_Int32x3)->nameWithVarNames = "operator|(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_or_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator& with Int32x3
    Int32x3_operator_and_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_and_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_and_Int32x3.name = "operator&"_c;
    Int32x3_operator_and_Int32x3.backendIndex = 627;
    Int32x3_operator_and_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_and_Int32x3.parameters = Int32x3_operator_and_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_and_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_and_Int32x3)->signature = "i32x3 operator&(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_and_Int32x3)->name = "operator&(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_and_Int32x3)->nameWithVarNames = "operator&(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_and_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator^ with Int32x3
    Int32x3_operator_xor_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_xor_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_xor_Int32x3.name = "operator^"_c;
    Int32x3_operator_xor_Int32x3.backendIndex = 628;
    Int32x3_operator_xor_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_xor_Int32x3.parameters = Int32x3_operator_xor_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3)->signature = "i32x3 operator^(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3)->name = "operator^(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3)->nameWithVarNames = "operator^(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_xor_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator<< with Int32x3
    Int32x3_operator_lsh_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_lsh_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_lsh_Int32x3.name = "operator<<"_c;
    Int32x3_operator_lsh_Int32x3.backendIndex = 629;
    Int32x3_operator_lsh_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_lsh_Int32x3.parameters = Int32x3_operator_lsh_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3)->signature = "i32x3 operator<<(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3)->name = "operator<<(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3)->nameWithVarNames = "operator<<(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lsh_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator>> with Int32x3
    Int32x3_operator_rsh_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_rsh_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_rsh_Int32x3.name = "operator>>"_c;
    Int32x3_operator_rsh_Int32x3.backendIndex = 630;
    Int32x3_operator_rsh_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_rsh_Int32x3.parameters = Int32x3_operator_rsh_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3)->signature = "i32x3 operator>>(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3)->name = "operator>>(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3)->nameWithVarNames = "operator>>(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_rsh_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator|= with Int32x3
    Int32x3_operator_orasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_orasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_orasg_Int32x3.name = "operator|="_c;
    Int32x3_operator_orasg_Int32x3.backendIndex = 631;
    Int32x3_operator_orasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_orasg_Int32x3.parameters = Int32x3_operator_orasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3)->signature = "i32x3 operator|=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3)->name = "operator|=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3)->nameWithVarNames = "operator|=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_orasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator&= with Int32x3
    Int32x3_operator_andasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_andasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_andasg_Int32x3.name = "operator&="_c;
    Int32x3_operator_andasg_Int32x3.backendIndex = 632;
    Int32x3_operator_andasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_andasg_Int32x3.parameters = Int32x3_operator_andasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3)->signature = "i32x3 operator&=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3)->name = "operator&=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3)->nameWithVarNames = "operator&=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_andasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator^= with Int32x3
    Int32x3_operator_xorasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_xorasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_xorasg_Int32x3.name = "operator^="_c;
    Int32x3_operator_xorasg_Int32x3.backendIndex = 633;
    Int32x3_operator_xorasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_xorasg_Int32x3.parameters = Int32x3_operator_xorasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3)->signature = "i32x3 operator^=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3)->name = "operator^=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3)->nameWithVarNames = "operator^=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_xorasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator<<= with Int32x3
    Int32x3_operator_lshasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_lshasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_lshasg_Int32x3.name = "operator<<="_c;
    Int32x3_operator_lshasg_Int32x3.backendIndex = 634;
    Int32x3_operator_lshasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_lshasg_Int32x3.parameters = Int32x3_operator_lshasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3)->signature = "i32x3 operator<<=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3)->name = "operator<<=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3)->nameWithVarNames = "operator<<=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_lshasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// operator>>= with Int32x3
    Int32x3_operator_rhsasg_Int32x3_arg.name = "arg"_c;
    Int32x3_operator_rhsasg_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_operator_rhsasg_Int32x3.name = "operator>>="_c;
    Int32x3_operator_rhsasg_Int32x3.backendIndex = 635;
    Int32x3_operator_rhsasg_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_operator_rhsasg_Int32x3.parameters = Int32x3_operator_rhsasg_Int32x3_args;
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3)->signature = "i32x3 operator>>=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3)->name = "operator>>=(i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3)->nameWithVarNames = "operator>>=(arg : i32x3)"_c;
    Symbol::Resolved(&Int32x3_operator_rhsasg_Int32x3)->returnTypeSymbol = &Int32x3Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 304> { 
        std::pair{ "b"_c, &Int32Type },
        std::pair{ "bb"_c, &Int32x2Type },
        std::pair{ "bbb"_c, &Int32x3Type },
        std::pair{ "bbbb"_c, &Int32x4Type },
        std::pair{ "bbbg"_c, &Int32x4Type },
        std::pair{ "bbbr"_c, &Int32x4Type },
        std::pair{ "bbg"_c, &Int32x3Type },
        std::pair{ "bbgb"_c, &Int32x4Type },
        std::pair{ "bbgg"_c, &Int32x4Type },
        std::pair{ "bbgr"_c, &Int32x4Type },
        std::pair{ "bbr"_c, &Int32x3Type },
        std::pair{ "bbrb"_c, &Int32x4Type },
        std::pair{ "bbrg"_c, &Int32x4Type },
        std::pair{ "bbrr"_c, &Int32x4Type },
        std::pair{ "bg"_c, &Int32x2Type },
        std::pair{ "bgb"_c, &Int32x3Type },
        std::pair{ "bgbb"_c, &Int32x4Type },
        std::pair{ "bgbg"_c, &Int32x4Type },
        std::pair{ "bgbr"_c, &Int32x4Type },
        std::pair{ "bgg"_c, &Int32x3Type },
        std::pair{ "bggb"_c, &Int32x4Type },
        std::pair{ "bggg"_c, &Int32x4Type },
        std::pair{ "bggr"_c, &Int32x4Type },
        std::pair{ "bgr"_c, &Int32x3Type },
        std::pair{ "bgrb"_c, &Int32x4Type },
        std::pair{ "bgrg"_c, &Int32x4Type },
        std::pair{ "bgrr"_c, &Int32x4Type },
        std::pair{ "br"_c, &Int32x2Type },
        std::pair{ "brb"_c, &Int32x3Type },
        std::pair{ "brbb"_c, &Int32x4Type },
        std::pair{ "brbg"_c, &Int32x4Type },
        std::pair{ "brbr"_c, &Int32x4Type },
        std::pair{ "brg"_c, &Int32x3Type },
        std::pair{ "brgb"_c, &Int32x4Type },
        std::pair{ "brgg"_c, &Int32x4Type },
        std::pair{ "brgr"_c, &Int32x4Type },
        std::pair{ "brr"_c, &Int32x3Type },
        std::pair{ "brrb"_c, &Int32x4Type },
        std::pair{ "brrg"_c, &Int32x4Type },
        std::pair{ "brrr"_c, &Int32x4Type },
        std::pair{ "g"_c, &Int32Type },
        std::pair{ "gb"_c, &Int32x2Type },
        std::pair{ "gbb"_c, &Int32x3Type },
        std::pair{ "gbbb"_c, &Int32x4Type },
        std::pair{ "gbbg"_c, &Int32x4Type },
        std::pair{ "gbbr"_c, &Int32x4Type },
        std::pair{ "gbg"_c, &Int32x3Type },
        std::pair{ "gbgb"_c, &Int32x4Type },
        std::pair{ "gbgg"_c, &Int32x4Type },
        std::pair{ "gbgr"_c, &Int32x4Type },
        std::pair{ "gbr"_c, &Int32x3Type },
        std::pair{ "gbrb"_c, &Int32x4Type },
        std::pair{ "gbrg"_c, &Int32x4Type },
        std::pair{ "gbrr"_c, &Int32x4Type },
        std::pair{ "gg"_c, &Int32x2Type },
        std::pair{ "ggb"_c, &Int32x3Type },
        std::pair{ "ggbb"_c, &Int32x4Type },
        std::pair{ "ggbg"_c, &Int32x4Type },
        std::pair{ "ggbr"_c, &Int32x4Type },
        std::pair{ "ggg"_c, &Int32x3Type },
        std::pair{ "gggb"_c, &Int32x4Type },
        std::pair{ "gggg"_c, &Int32x4Type },
        std::pair{ "gggr"_c, &Int32x4Type },
        std::pair{ "ggr"_c, &Int32x3Type },
        std::pair{ "ggrb"_c, &Int32x4Type },
        std::pair{ "ggrg"_c, &Int32x4Type },
        std::pair{ "ggrr"_c, &Int32x4Type },
        std::pair{ "gr"_c, &Int32x2Type },
        std::pair{ "grb"_c, &Int32x3Type },
        std::pair{ "grbb"_c, &Int32x4Type },
        std::pair{ "grbg"_c, &Int32x4Type },
        std::pair{ "grbr"_c, &Int32x4Type },
        std::pair{ "grg"_c, &Int32x3Type },
        std::pair{ "grgb"_c, &Int32x4Type },
        std::pair{ "grgg"_c, &Int32x4Type },
        std::pair{ "grgr"_c, &Int32x4Type },
        std::pair{ "grr"_c, &Int32x3Type },
        std::pair{ "grrb"_c, &Int32x4Type },
        std::pair{ "grrg"_c, &Int32x4Type },
        std::pair{ "grrr"_c, &Int32x4Type },
        std::pair{ "operator!="_c, &Int32x3_operator_neq_Int32x3 },
        std::pair{ "operator!=(i32x3)"_c, &Int32x3_operator_neq_Int32x3 },
        std::pair{ "operator%"_c, &Int32x3_operator_mod_Int32x3 },
        std::pair{ "operator%(i32x3)"_c, &Int32x3_operator_mod_Int32x3 },
        std::pair{ "operator&"_c, &Int32x3_operator_and_Int32x3 },
        std::pair{ "operator&(i32x3)"_c, &Int32x3_operator_and_Int32x3 },
        std::pair{ "operator&="_c, &Int32x3_operator_andasg_Int32x3 },
        std::pair{ "operator&=(i32x3)"_c, &Int32x3_operator_andasg_Int32x3 },
        std::pair{ "operator*"_c, &Int32x3_operator_mul_Int32x3 },
        std::pair{ "operator*"_c, &Int32x3_operator_scale_Float32 },
        std::pair{ "operator*"_c, &Int32x3_operator_scale_UInt32 },
        std::pair{ "operator*"_c, &Int32x3_operator_scale_Int32 },
        std::pair{ "operator*(f32)"_c, &Int32x3_operator_scale_Float32 },
        std::pair{ "operator*(i32)"_c, &Int32x3_operator_scale_Int32 },
        std::pair{ "operator*(i32x3)"_c, &Int32x3_operator_mul_Int32x3 },
        std::pair{ "operator*(u32)"_c, &Int32x3_operator_scale_UInt32 },
        std::pair{ "operator*="_c, &Int32x3_operator_mulasg_Int32x3 },
        std::pair{ "operator*=(i32x3)"_c, &Int32x3_operator_mulasg_Int32x3 },
        std::pair{ "operator+"_c, &Int32x3_operator_add_Int32x3 },
        std::pair{ "operator+(i32x3)"_c, &Int32x3_operator_add_Int32x3 },
        std::pair{ "operator+="_c, &Int32x3_operator_addasg_Int32x3 },
        std::pair{ "operator+=(i32x3)"_c, &Int32x3_operator_addasg_Int32x3 },
        std::pair{ "operator-"_c, &Int32x3_operator_sub_Int32x3 },
        std::pair{ "operator-(i32x3)"_c, &Int32x3_operator_sub_Int32x3 },
        std::pair{ "operator-="_c, &Int32x3_operator_subasg_Int32x3 },
        std::pair{ "operator-=(i32x3)"_c, &Int32x3_operator_subasg_Int32x3 },
        std::pair{ "operator/"_c, &Int32x3_operator_div_Int32x3 },
        std::pair{ "operator/(i32x3)"_c, &Int32x3_operator_div_Int32x3 },
        std::pair{ "operator/="_c, &Int32x3_operator_divasg_Int32x3 },
        std::pair{ "operator/=(i32x3)"_c, &Int32x3_operator_divasg_Int32x3 },
        std::pair{ "operator<"_c, &Int32x3_operator_lt_Int32x3 },
        std::pair{ "operator<(i32x3)"_c, &Int32x3_operator_lt_Int32x3 },
        std::pair{ "operator<<"_c, &Int32x3_operator_lsh_Int32x3 },
        std::pair{ "operator<<(i32x3)"_c, &Int32x3_operator_lsh_Int32x3 },
        std::pair{ "operator<<="_c, &Int32x3_operator_lshasg_Int32x3 },
        std::pair{ "operator<<=(i32x3)"_c, &Int32x3_operator_lshasg_Int32x3 },
        std::pair{ "operator<="_c, &Int32x3_operator_lte_Int32x3 },
        std::pair{ "operator<=(i32x3)"_c, &Int32x3_operator_lte_Int32x3 },
        std::pair{ "operator=="_c, &Int32x3_operator_eq_Int32x3 },
        std::pair{ "operator==(i32x3)"_c, &Int32x3_operator_eq_Int32x3 },
        std::pair{ "operator>"_c, &Int32x3_operator_gt_Int32x3 },
        std::pair{ "operator>(i32x3)"_c, &Int32x3_operator_gt_Int32x3 },
        std::pair{ "operator>="_c, &Int32x3_operator_gte_Int32x3 },
        std::pair{ "operator>=(i32x3)"_c, &Int32x3_operator_gte_Int32x3 },
        std::pair{ "operator>>"_c, &Int32x3_operator_rsh_Int32x3 },
        std::pair{ "operator>>(i32x3)"_c, &Int32x3_operator_rsh_Int32x3 },
        std::pair{ "operator>>="_c, &Int32x3_operator_rhsasg_Int32x3 },
        std::pair{ "operator>>=(i32x3)"_c, &Int32x3_operator_rhsasg_Int32x3 },
        std::pair{ "operator[]"_c, &Int32x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Int32x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Int32x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Int32x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Int32x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Int32x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Int32x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Int32x3_operator_index_UInt32 },
        std::pair{ "operator^"_c, &Int32x3_operator_xor_Int32x3 },
        std::pair{ "operator^(i32x3)"_c, &Int32x3_operator_xor_Int32x3 },
        std::pair{ "operator^="_c, &Int32x3_operator_xorasg_Int32x3 },
        std::pair{ "operator^=(i32x3)"_c, &Int32x3_operator_xorasg_Int32x3 },
        std::pair{ "operator|"_c, &Int32x3_operator_or_Int32x3 },
        std::pair{ "operator|(i32x3)"_c, &Int32x3_operator_or_Int32x3 },
        std::pair{ "operator|="_c, &Int32x3_operator_orasg_Int32x3 },
        std::pair{ "operator|=(i32x3)"_c, &Int32x3_operator_orasg_Int32x3 },
        std::pair{ "r"_c, &Int32Type },
        std::pair{ "rb"_c, &Int32x2Type },
        std::pair{ "rbb"_c, &Int32x3Type },
        std::pair{ "rbbb"_c, &Int32x4Type },
        std::pair{ "rbbg"_c, &Int32x4Type },
        std::pair{ "rbbr"_c, &Int32x4Type },
        std::pair{ "rbg"_c, &Int32x3Type },
        std::pair{ "rbgb"_c, &Int32x4Type },
        std::pair{ "rbgg"_c, &Int32x4Type },
        std::pair{ "rbgr"_c, &Int32x4Type },
        std::pair{ "rbr"_c, &Int32x3Type },
        std::pair{ "rbrb"_c, &Int32x4Type },
        std::pair{ "rbrg"_c, &Int32x4Type },
        std::pair{ "rbrr"_c, &Int32x4Type },
        std::pair{ "rg"_c, &Int32x2Type },
        std::pair{ "rgb"_c, &Int32x3Type },
        std::pair{ "rgbb"_c, &Int32x4Type },
        std::pair{ "rgbg"_c, &Int32x4Type },
        std::pair{ "rgbr"_c, &Int32x4Type },
        std::pair{ "rgg"_c, &Int32x3Type },
        std::pair{ "rggb"_c, &Int32x4Type },
        std::pair{ "rggg"_c, &Int32x4Type },
        std::pair{ "rggr"_c, &Int32x4Type },
        std::pair{ "rgr"_c, &Int32x3Type },
        std::pair{ "rgrb"_c, &Int32x4Type },
        std::pair{ "rgrg"_c, &Int32x4Type },
        std::pair{ "rgrr"_c, &Int32x4Type },
        std::pair{ "rr"_c, &Int32x2Type },
        std::pair{ "rrb"_c, &Int32x3Type },
        std::pair{ "rrbb"_c, &Int32x4Type },
        std::pair{ "rrbg"_c, &Int32x4Type },
        std::pair{ "rrbr"_c, &Int32x4Type },
        std::pair{ "rrg"_c, &Int32x3Type },
        std::pair{ "rrgb"_c, &Int32x4Type },
        std::pair{ "rrgg"_c, &Int32x4Type },
        std::pair{ "rrgr"_c, &Int32x4Type },
        std::pair{ "rrr"_c, &Int32x3Type },
        std::pair{ "rrrb"_c, &Int32x4Type },
        std::pair{ "rrrg"_c, &Int32x4Type },
        std::pair{ "rrrr"_c, &Int32x4Type },
        std::pair{ "x"_c, &Int32Type },
        std::pair{ "xx"_c, &Int32x2Type },
        std::pair{ "xxx"_c, &Int32x3Type },
        std::pair{ "xxxx"_c, &Int32x4Type },
        std::pair{ "xxxy"_c, &Int32x4Type },
        std::pair{ "xxxz"_c, &Int32x4Type },
        std::pair{ "xxy"_c, &Int32x3Type },
        std::pair{ "xxyx"_c, &Int32x4Type },
        std::pair{ "xxyy"_c, &Int32x4Type },
        std::pair{ "xxyz"_c, &Int32x4Type },
        std::pair{ "xxz"_c, &Int32x3Type },
        std::pair{ "xxzx"_c, &Int32x4Type },
        std::pair{ "xxzy"_c, &Int32x4Type },
        std::pair{ "xxzz"_c, &Int32x4Type },
        std::pair{ "xy"_c, &Int32x2Type },
        std::pair{ "xyx"_c, &Int32x3Type },
        std::pair{ "xyxx"_c, &Int32x4Type },
        std::pair{ "xyxy"_c, &Int32x4Type },
        std::pair{ "xyxz"_c, &Int32x4Type },
        std::pair{ "xyy"_c, &Int32x3Type },
        std::pair{ "xyyx"_c, &Int32x4Type },
        std::pair{ "xyyy"_c, &Int32x4Type },
        std::pair{ "xyyz"_c, &Int32x4Type },
        std::pair{ "xyz"_c, &Int32x3Type },
        std::pair{ "xyzx"_c, &Int32x4Type },
        std::pair{ "xyzy"_c, &Int32x4Type },
        std::pair{ "xyzz"_c, &Int32x4Type },
        std::pair{ "xz"_c, &Int32x2Type },
        std::pair{ "xzx"_c, &Int32x3Type },
        std::pair{ "xzxx"_c, &Int32x4Type },
        std::pair{ "xzxy"_c, &Int32x4Type },
        std::pair{ "xzxz"_c, &Int32x4Type },
        std::pair{ "xzy"_c, &Int32x3Type },
        std::pair{ "xzyx"_c, &Int32x4Type },
        std::pair{ "xzyy"_c, &Int32x4Type },
        std::pair{ "xzyz"_c, &Int32x4Type },
        std::pair{ "xzz"_c, &Int32x3Type },
        std::pair{ "xzzx"_c, &Int32x4Type },
        std::pair{ "xzzy"_c, &Int32x4Type },
        std::pair{ "xzzz"_c, &Int32x4Type },
        std::pair{ "y"_c, &Int32Type },
        std::pair{ "yx"_c, &Int32x2Type },
        std::pair{ "yxx"_c, &Int32x3Type },
        std::pair{ "yxxx"_c, &Int32x4Type },
        std::pair{ "yxxy"_c, &Int32x4Type },
        std::pair{ "yxxz"_c, &Int32x4Type },
        std::pair{ "yxy"_c, &Int32x3Type },
        std::pair{ "yxyx"_c, &Int32x4Type },
        std::pair{ "yxyy"_c, &Int32x4Type },
        std::pair{ "yxyz"_c, &Int32x4Type },
        std::pair{ "yxz"_c, &Int32x3Type },
        std::pair{ "yxzx"_c, &Int32x4Type },
        std::pair{ "yxzy"_c, &Int32x4Type },
        std::pair{ "yxzz"_c, &Int32x4Type },
        std::pair{ "yy"_c, &Int32x2Type },
        std::pair{ "yyx"_c, &Int32x3Type },
        std::pair{ "yyxx"_c, &Int32x4Type },
        std::pair{ "yyxy"_c, &Int32x4Type },
        std::pair{ "yyxz"_c, &Int32x4Type },
        std::pair{ "yyy"_c, &Int32x3Type },
        std::pair{ "yyyx"_c, &Int32x4Type },
        std::pair{ "yyyy"_c, &Int32x4Type },
        std::pair{ "yyyz"_c, &Int32x4Type },
        std::pair{ "yyz"_c, &Int32x3Type },
        std::pair{ "yyzx"_c, &Int32x4Type },
        std::pair{ "yyzy"_c, &Int32x4Type },
        std::pair{ "yyzz"_c, &Int32x4Type },
        std::pair{ "yz"_c, &Int32x2Type },
        std::pair{ "yzx"_c, &Int32x3Type },
        std::pair{ "yzxx"_c, &Int32x4Type },
        std::pair{ "yzxy"_c, &Int32x4Type },
        std::pair{ "yzxz"_c, &Int32x4Type },
        std::pair{ "yzy"_c, &Int32x3Type },
        std::pair{ "yzyx"_c, &Int32x4Type },
        std::pair{ "yzyy"_c, &Int32x4Type },
        std::pair{ "yzyz"_c, &Int32x4Type },
        std::pair{ "yzz"_c, &Int32x3Type },
        std::pair{ "yzzx"_c, &Int32x4Type },
        std::pair{ "yzzy"_c, &Int32x4Type },
        std::pair{ "yzzz"_c, &Int32x4Type },
        std::pair{ "z"_c, &Int32Type },
        std::pair{ "zx"_c, &Int32x2Type },
        std::pair{ "zxx"_c, &Int32x3Type },
        std::pair{ "zxxx"_c, &Int32x4Type },
        std::pair{ "zxxy"_c, &Int32x4Type },
        std::pair{ "zxxz"_c, &Int32x4Type },
        std::pair{ "zxy"_c, &Int32x3Type },
        std::pair{ "zxyx"_c, &Int32x4Type },
        std::pair{ "zxyy"_c, &Int32x4Type },
        std::pair{ "zxyz"_c, &Int32x4Type },
        std::pair{ "zxz"_c, &Int32x3Type },
        std::pair{ "zxzx"_c, &Int32x4Type },
        std::pair{ "zxzy"_c, &Int32x4Type },
        std::pair{ "zxzz"_c, &Int32x4Type },
        std::pair{ "zy"_c, &Int32x2Type },
        std::pair{ "zyx"_c, &Int32x3Type },
        std::pair{ "zyxx"_c, &Int32x4Type },
        std::pair{ "zyxy"_c, &Int32x4Type },
        std::pair{ "zyxz"_c, &Int32x4Type },
        std::pair{ "zyy"_c, &Int32x3Type },
        std::pair{ "zyyx"_c, &Int32x4Type },
        std::pair{ "zyyy"_c, &Int32x4Type },
        std::pair{ "zyyz"_c, &Int32x4Type },
        std::pair{ "zyz"_c, &Int32x3Type },
        std::pair{ "zyzx"_c, &Int32x4Type },
        std::pair{ "zyzy"_c, &Int32x4Type },
        std::pair{ "zyzz"_c, &Int32x4Type },
        std::pair{ "zz"_c, &Int32x2Type },
        std::pair{ "zzx"_c, &Int32x3Type },
        std::pair{ "zzxx"_c, &Int32x4Type },
        std::pair{ "zzxy"_c, &Int32x4Type },
        std::pair{ "zzxz"_c, &Int32x4Type },
        std::pair{ "zzy"_c, &Int32x3Type },
        std::pair{ "zzyx"_c, &Int32x4Type },
        std::pair{ "zzyy"_c, &Int32x4Type },
        std::pair{ "zzyz"_c, &Int32x4Type },
        std::pair{ "zzz"_c, &Int32x3Type },
        std::pair{ "zzzx"_c, &Int32x4Type },
        std::pair{ "zzzy"_c, &Int32x4Type },
        std::pair{ "zzzz"_c, &Int32x4Type }
    };
}
Int32x3 Int32x3Type;

/// operator[] with Int32
Variable Bool8x3_operator_index_Int32_arg;
Function Bool8x3_operator_index_Int32;
inline constexpr std::array Bool8x3_operator_index_Int32_args = { &Bool8x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Bool8x3_operator_index_UInt32_arg;
Function Bool8x3_operator_index_UInt32;
inline constexpr std::array Bool8x3_operator_index_UInt32_args = { &Bool8x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Bool8x3_operator_index_Int16_arg;
Function Bool8x3_operator_index_Int16;
inline constexpr std::array Bool8x3_operator_index_Int16_args = { &Bool8x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Bool8x3_operator_index_UInt16_arg;
Function Bool8x3_operator_index_UInt16;
inline constexpr std::array Bool8x3_operator_index_UInt16_args = { &Bool8x3_operator_index_UInt16_arg };

/// operator|| with Bool8x3
Variable Bool8x3_operator_oror_Bool8x3_arg;
Function Bool8x3_operator_oror_Bool8x3;
inline constexpr std::array Bool8x3_operator_oror_Bool8x3_args = { &Bool8x3_operator_oror_Bool8x3_arg };

/// operator&& with Bool8x3
Variable Bool8x3_operator_andand_Bool8x3_arg;
Function Bool8x3_operator_andand_Bool8x3;
inline constexpr std::array Bool8x3_operator_andand_Bool8x3_args = { &Bool8x3_operator_andand_Bool8x3_arg };

/// operator== with Bool8x3
Variable Bool8x3_operator_eq_Bool8x3_arg;
Function Bool8x3_operator_eq_Bool8x3;
inline constexpr std::array Bool8x3_operator_eq_Bool8x3_args = { &Bool8x3_operator_eq_Bool8x3_arg };

/// operator!= with Bool8x3
Variable Bool8x3_operator_neq_Bool8x3_arg;
Function Bool8x3_operator_neq_Bool8x3;
inline constexpr std::array Bool8x3_operator_neq_Bool8x3_args = { &Bool8x3_operator_neq_Bool8x3_arg };

Bool8x3::Bool8x3()
{
    this->name = "b8x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 3;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    /// operator[] with Int32
    Bool8x3_operator_index_Int32_arg.name = "arg"_c;
    Bool8x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8x3_operator_index_Int32.name = "operator[]"_c;
    Bool8x3_operator_index_Int32.backendIndex = 649;
    Bool8x3_operator_index_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_index_Int32.parameters = Bool8x3_operator_index_Int32_args;
    Symbol::Resolved(&Bool8x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x3_operator_index_Int32)->signature = "b8 operator[](i32)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt32
    Bool8x3_operator_index_UInt32_arg.name = "arg"_c;
    Bool8x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8x3_operator_index_UInt32.name = "operator[]"_c;
    Bool8x3_operator_index_UInt32.backendIndex = 650;
    Bool8x3_operator_index_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_index_UInt32.parameters = Bool8x3_operator_index_UInt32_args;
    Symbol::Resolved(&Bool8x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x3_operator_index_UInt32)->signature = "b8 operator[](u32)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int16
    Bool8x3_operator_index_Int16_arg.name = "arg"_c;
    Bool8x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8x3_operator_index_Int16.name = "operator[]"_c;
    Bool8x3_operator_index_Int16.backendIndex = 651;
    Bool8x3_operator_index_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_index_Int16.parameters = Bool8x3_operator_index_Int16_args;
    Symbol::Resolved(&Bool8x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x3_operator_index_Int16)->signature = "b8 operator[](i16)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt16
    Bool8x3_operator_index_UInt16_arg.name = "arg"_c;
    Bool8x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8x3_operator_index_UInt16.name = "operator[]"_c;
    Bool8x3_operator_index_UInt16.backendIndex = 652;
    Bool8x3_operator_index_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_index_UInt16.parameters = Bool8x3_operator_index_UInt16_args;
    Symbol::Resolved(&Bool8x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x3_operator_index_UInt16)->signature = "b8 operator[](u16)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Bool8x3_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator|| with Bool8x3
    Bool8x3_operator_oror_Bool8x3_arg.name = "arg"_c;
    Bool8x3_operator_oror_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_operator_oror_Bool8x3.name = "operator||"_c;
    Bool8x3_operator_oror_Bool8x3.backendIndex = 653;
    Bool8x3_operator_oror_Bool8x3.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_oror_Bool8x3.parameters = Bool8x3_operator_oror_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_operator_oror_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_operator_oror_Bool8x3)->signature = "b8 operator||(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_oror_Bool8x3)->name = "operator||(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_oror_Bool8x3)->nameWithVarNames = "operator||(arg : b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_oror_Bool8x3)->returnTypeSymbol = &Bool8Type;

    /// operator&& with Bool8x3
    Bool8x3_operator_andand_Bool8x3_arg.name = "arg"_c;
    Bool8x3_operator_andand_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_operator_andand_Bool8x3.name = "operator&&"_c;
    Bool8x3_operator_andand_Bool8x3.backendIndex = 654;
    Bool8x3_operator_andand_Bool8x3.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_andand_Bool8x3.parameters = Bool8x3_operator_andand_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_operator_andand_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_operator_andand_Bool8x3)->signature = "b8 operator&&(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_andand_Bool8x3)->name = "operator&&(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_andand_Bool8x3)->nameWithVarNames = "operator&&(arg : b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_andand_Bool8x3)->returnTypeSymbol = &Bool8Type;

    /// operator== with Bool8x3
    Bool8x3_operator_eq_Bool8x3_arg.name = "arg"_c;
    Bool8x3_operator_eq_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_operator_eq_Bool8x3.name = "operator=="_c;
    Bool8x3_operator_eq_Bool8x3.backendIndex = 655;
    Bool8x3_operator_eq_Bool8x3.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_eq_Bool8x3.parameters = Bool8x3_operator_eq_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3)->signature = "b8 operator==(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3)->name = "operator==(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3)->nameWithVarNames = "operator==(arg : b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_eq_Bool8x3)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Bool8x3
    Bool8x3_operator_neq_Bool8x3_arg.name = "arg"_c;
    Bool8x3_operator_neq_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_operator_neq_Bool8x3.name = "operator!="_c;
    Bool8x3_operator_neq_Bool8x3.backendIndex = 656;
    Bool8x3_operator_neq_Bool8x3.returnType = Type::FullType { Bool8Type.name };
    Bool8x3_operator_neq_Bool8x3.parameters = Bool8x3_operator_neq_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3)->signature = "b8 operator!=(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3)->name = "operator!=(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3)->nameWithVarNames = "operator!=(arg : b8x3)"_c;
    Symbol::Resolved(&Bool8x3_operator_neq_Bool8x3)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 256> { 
        std::pair{ "b"_c, &Bool8Type },
        std::pair{ "bb"_c, &Bool8x2Type },
        std::pair{ "bbb"_c, &Bool8x3Type },
        std::pair{ "bbbb"_c, &Bool8x4Type },
        std::pair{ "bbbg"_c, &Bool8x4Type },
        std::pair{ "bbbr"_c, &Bool8x4Type },
        std::pair{ "bbg"_c, &Bool8x3Type },
        std::pair{ "bbgb"_c, &Bool8x4Type },
        std::pair{ "bbgg"_c, &Bool8x4Type },
        std::pair{ "bbgr"_c, &Bool8x4Type },
        std::pair{ "bbr"_c, &Bool8x3Type },
        std::pair{ "bbrb"_c, &Bool8x4Type },
        std::pair{ "bbrg"_c, &Bool8x4Type },
        std::pair{ "bbrr"_c, &Bool8x4Type },
        std::pair{ "bg"_c, &Bool8x2Type },
        std::pair{ "bgb"_c, &Bool8x3Type },
        std::pair{ "bgbb"_c, &Bool8x4Type },
        std::pair{ "bgbg"_c, &Bool8x4Type },
        std::pair{ "bgbr"_c, &Bool8x4Type },
        std::pair{ "bgg"_c, &Bool8x3Type },
        std::pair{ "bggb"_c, &Bool8x4Type },
        std::pair{ "bggg"_c, &Bool8x4Type },
        std::pair{ "bggr"_c, &Bool8x4Type },
        std::pair{ "bgr"_c, &Bool8x3Type },
        std::pair{ "bgrb"_c, &Bool8x4Type },
        std::pair{ "bgrg"_c, &Bool8x4Type },
        std::pair{ "bgrr"_c, &Bool8x4Type },
        std::pair{ "br"_c, &Bool8x2Type },
        std::pair{ "brb"_c, &Bool8x3Type },
        std::pair{ "brbb"_c, &Bool8x4Type },
        std::pair{ "brbg"_c, &Bool8x4Type },
        std::pair{ "brbr"_c, &Bool8x4Type },
        std::pair{ "brg"_c, &Bool8x3Type },
        std::pair{ "brgb"_c, &Bool8x4Type },
        std::pair{ "brgg"_c, &Bool8x4Type },
        std::pair{ "brgr"_c, &Bool8x4Type },
        std::pair{ "brr"_c, &Bool8x3Type },
        std::pair{ "brrb"_c, &Bool8x4Type },
        std::pair{ "brrg"_c, &Bool8x4Type },
        std::pair{ "brrr"_c, &Bool8x4Type },
        std::pair{ "g"_c, &Bool8Type },
        std::pair{ "gb"_c, &Bool8x2Type },
        std::pair{ "gbb"_c, &Bool8x3Type },
        std::pair{ "gbbb"_c, &Bool8x4Type },
        std::pair{ "gbbg"_c, &Bool8x4Type },
        std::pair{ "gbbr"_c, &Bool8x4Type },
        std::pair{ "gbg"_c, &Bool8x3Type },
        std::pair{ "gbgb"_c, &Bool8x4Type },
        std::pair{ "gbgg"_c, &Bool8x4Type },
        std::pair{ "gbgr"_c, &Bool8x4Type },
        std::pair{ "gbr"_c, &Bool8x3Type },
        std::pair{ "gbrb"_c, &Bool8x4Type },
        std::pair{ "gbrg"_c, &Bool8x4Type },
        std::pair{ "gbrr"_c, &Bool8x4Type },
        std::pair{ "gg"_c, &Bool8x2Type },
        std::pair{ "ggb"_c, &Bool8x3Type },
        std::pair{ "ggbb"_c, &Bool8x4Type },
        std::pair{ "ggbg"_c, &Bool8x4Type },
        std::pair{ "ggbr"_c, &Bool8x4Type },
        std::pair{ "ggg"_c, &Bool8x3Type },
        std::pair{ "gggb"_c, &Bool8x4Type },
        std::pair{ "gggg"_c, &Bool8x4Type },
        std::pair{ "gggr"_c, &Bool8x4Type },
        std::pair{ "ggr"_c, &Bool8x3Type },
        std::pair{ "ggrb"_c, &Bool8x4Type },
        std::pair{ "ggrg"_c, &Bool8x4Type },
        std::pair{ "ggrr"_c, &Bool8x4Type },
        std::pair{ "gr"_c, &Bool8x2Type },
        std::pair{ "grb"_c, &Bool8x3Type },
        std::pair{ "grbb"_c, &Bool8x4Type },
        std::pair{ "grbg"_c, &Bool8x4Type },
        std::pair{ "grbr"_c, &Bool8x4Type },
        std::pair{ "grg"_c, &Bool8x3Type },
        std::pair{ "grgb"_c, &Bool8x4Type },
        std::pair{ "grgg"_c, &Bool8x4Type },
        std::pair{ "grgr"_c, &Bool8x4Type },
        std::pair{ "grr"_c, &Bool8x3Type },
        std::pair{ "grrb"_c, &Bool8x4Type },
        std::pair{ "grrg"_c, &Bool8x4Type },
        std::pair{ "grrr"_c, &Bool8x4Type },
        std::pair{ "operator!="_c, &Bool8x3_operator_neq_Bool8x3 },
        std::pair{ "operator!=(b8x3)"_c, &Bool8x3_operator_neq_Bool8x3 },
        std::pair{ "operator&&"_c, &Bool8x3_operator_andand_Bool8x3 },
        std::pair{ "operator&&(b8x3)"_c, &Bool8x3_operator_andand_Bool8x3 },
        std::pair{ "operator=="_c, &Bool8x3_operator_eq_Bool8x3 },
        std::pair{ "operator==(b8x3)"_c, &Bool8x3_operator_eq_Bool8x3 },
        std::pair{ "operator[]"_c, &Bool8x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Bool8x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Bool8x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Bool8x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Bool8x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Bool8x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Bool8x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Bool8x3_operator_index_UInt32 },
        std::pair{ "operator||"_c, &Bool8x3_operator_oror_Bool8x3 },
        std::pair{ "operator||(b8x3)"_c, &Bool8x3_operator_oror_Bool8x3 },
        std::pair{ "r"_c, &Bool8Type },
        std::pair{ "rb"_c, &Bool8x2Type },
        std::pair{ "rbb"_c, &Bool8x3Type },
        std::pair{ "rbbb"_c, &Bool8x4Type },
        std::pair{ "rbbg"_c, &Bool8x4Type },
        std::pair{ "rbbr"_c, &Bool8x4Type },
        std::pair{ "rbg"_c, &Bool8x3Type },
        std::pair{ "rbgb"_c, &Bool8x4Type },
        std::pair{ "rbgg"_c, &Bool8x4Type },
        std::pair{ "rbgr"_c, &Bool8x4Type },
        std::pair{ "rbr"_c, &Bool8x3Type },
        std::pair{ "rbrb"_c, &Bool8x4Type },
        std::pair{ "rbrg"_c, &Bool8x4Type },
        std::pair{ "rbrr"_c, &Bool8x4Type },
        std::pair{ "rg"_c, &Bool8x2Type },
        std::pair{ "rgb"_c, &Bool8x3Type },
        std::pair{ "rgbb"_c, &Bool8x4Type },
        std::pair{ "rgbg"_c, &Bool8x4Type },
        std::pair{ "rgbr"_c, &Bool8x4Type },
        std::pair{ "rgg"_c, &Bool8x3Type },
        std::pair{ "rggb"_c, &Bool8x4Type },
        std::pair{ "rggg"_c, &Bool8x4Type },
        std::pair{ "rggr"_c, &Bool8x4Type },
        std::pair{ "rgr"_c, &Bool8x3Type },
        std::pair{ "rgrb"_c, &Bool8x4Type },
        std::pair{ "rgrg"_c, &Bool8x4Type },
        std::pair{ "rgrr"_c, &Bool8x4Type },
        std::pair{ "rr"_c, &Bool8x2Type },
        std::pair{ "rrb"_c, &Bool8x3Type },
        std::pair{ "rrbb"_c, &Bool8x4Type },
        std::pair{ "rrbg"_c, &Bool8x4Type },
        std::pair{ "rrbr"_c, &Bool8x4Type },
        std::pair{ "rrg"_c, &Bool8x3Type },
        std::pair{ "rrgb"_c, &Bool8x4Type },
        std::pair{ "rrgg"_c, &Bool8x4Type },
        std::pair{ "rrgr"_c, &Bool8x4Type },
        std::pair{ "rrr"_c, &Bool8x3Type },
        std::pair{ "rrrb"_c, &Bool8x4Type },
        std::pair{ "rrrg"_c, &Bool8x4Type },
        std::pair{ "rrrr"_c, &Bool8x4Type },
        std::pair{ "x"_c, &Bool8Type },
        std::pair{ "xx"_c, &Bool8x2Type },
        std::pair{ "xxx"_c, &Bool8x3Type },
        std::pair{ "xxxx"_c, &Bool8x4Type },
        std::pair{ "xxxy"_c, &Bool8x4Type },
        std::pair{ "xxxz"_c, &Bool8x4Type },
        std::pair{ "xxy"_c, &Bool8x3Type },
        std::pair{ "xxyx"_c, &Bool8x4Type },
        std::pair{ "xxyy"_c, &Bool8x4Type },
        std::pair{ "xxyz"_c, &Bool8x4Type },
        std::pair{ "xxz"_c, &Bool8x3Type },
        std::pair{ "xxzx"_c, &Bool8x4Type },
        std::pair{ "xxzy"_c, &Bool8x4Type },
        std::pair{ "xxzz"_c, &Bool8x4Type },
        std::pair{ "xy"_c, &Bool8x2Type },
        std::pair{ "xyx"_c, &Bool8x3Type },
        std::pair{ "xyxx"_c, &Bool8x4Type },
        std::pair{ "xyxy"_c, &Bool8x4Type },
        std::pair{ "xyxz"_c, &Bool8x4Type },
        std::pair{ "xyy"_c, &Bool8x3Type },
        std::pair{ "xyyx"_c, &Bool8x4Type },
        std::pair{ "xyyy"_c, &Bool8x4Type },
        std::pair{ "xyyz"_c, &Bool8x4Type },
        std::pair{ "xyz"_c, &Bool8x3Type },
        std::pair{ "xyzx"_c, &Bool8x4Type },
        std::pair{ "xyzy"_c, &Bool8x4Type },
        std::pair{ "xyzz"_c, &Bool8x4Type },
        std::pair{ "xz"_c, &Bool8x2Type },
        std::pair{ "xzx"_c, &Bool8x3Type },
        std::pair{ "xzxx"_c, &Bool8x4Type },
        std::pair{ "xzxy"_c, &Bool8x4Type },
        std::pair{ "xzxz"_c, &Bool8x4Type },
        std::pair{ "xzy"_c, &Bool8x3Type },
        std::pair{ "xzyx"_c, &Bool8x4Type },
        std::pair{ "xzyy"_c, &Bool8x4Type },
        std::pair{ "xzyz"_c, &Bool8x4Type },
        std::pair{ "xzz"_c, &Bool8x3Type },
        std::pair{ "xzzx"_c, &Bool8x4Type },
        std::pair{ "xzzy"_c, &Bool8x4Type },
        std::pair{ "xzzz"_c, &Bool8x4Type },
        std::pair{ "y"_c, &Bool8Type },
        std::pair{ "yx"_c, &Bool8x2Type },
        std::pair{ "yxx"_c, &Bool8x3Type },
        std::pair{ "yxxx"_c, &Bool8x4Type },
        std::pair{ "yxxy"_c, &Bool8x4Type },
        std::pair{ "yxxz"_c, &Bool8x4Type },
        std::pair{ "yxy"_c, &Bool8x3Type },
        std::pair{ "yxyx"_c, &Bool8x4Type },
        std::pair{ "yxyy"_c, &Bool8x4Type },
        std::pair{ "yxyz"_c, &Bool8x4Type },
        std::pair{ "yxz"_c, &Bool8x3Type },
        std::pair{ "yxzx"_c, &Bool8x4Type },
        std::pair{ "yxzy"_c, &Bool8x4Type },
        std::pair{ "yxzz"_c, &Bool8x4Type },
        std::pair{ "yy"_c, &Bool8x2Type },
        std::pair{ "yyx"_c, &Bool8x3Type },
        std::pair{ "yyxx"_c, &Bool8x4Type },
        std::pair{ "yyxy"_c, &Bool8x4Type },
        std::pair{ "yyxz"_c, &Bool8x4Type },
        std::pair{ "yyy"_c, &Bool8x3Type },
        std::pair{ "yyyx"_c, &Bool8x4Type },
        std::pair{ "yyyy"_c, &Bool8x4Type },
        std::pair{ "yyyz"_c, &Bool8x4Type },
        std::pair{ "yyz"_c, &Bool8x3Type },
        std::pair{ "yyzx"_c, &Bool8x4Type },
        std::pair{ "yyzy"_c, &Bool8x4Type },
        std::pair{ "yyzz"_c, &Bool8x4Type },
        std::pair{ "yz"_c, &Bool8x2Type },
        std::pair{ "yzx"_c, &Bool8x3Type },
        std::pair{ "yzxx"_c, &Bool8x4Type },
        std::pair{ "yzxy"_c, &Bool8x4Type },
        std::pair{ "yzxz"_c, &Bool8x4Type },
        std::pair{ "yzy"_c, &Bool8x3Type },
        std::pair{ "yzyx"_c, &Bool8x4Type },
        std::pair{ "yzyy"_c, &Bool8x4Type },
        std::pair{ "yzyz"_c, &Bool8x4Type },
        std::pair{ "yzz"_c, &Bool8x3Type },
        std::pair{ "yzzx"_c, &Bool8x4Type },
        std::pair{ "yzzy"_c, &Bool8x4Type },
        std::pair{ "yzzz"_c, &Bool8x4Type },
        std::pair{ "z"_c, &Bool8Type },
        std::pair{ "zx"_c, &Bool8x2Type },
        std::pair{ "zxx"_c, &Bool8x3Type },
        std::pair{ "zxxx"_c, &Bool8x4Type },
        std::pair{ "zxxy"_c, &Bool8x4Type },
        std::pair{ "zxxz"_c, &Bool8x4Type },
        std::pair{ "zxy"_c, &Bool8x3Type },
        std::pair{ "zxyx"_c, &Bool8x4Type },
        std::pair{ "zxyy"_c, &Bool8x4Type },
        std::pair{ "zxyz"_c, &Bool8x4Type },
        std::pair{ "zxz"_c, &Bool8x3Type },
        std::pair{ "zxzx"_c, &Bool8x4Type },
        std::pair{ "zxzy"_c, &Bool8x4Type },
        std::pair{ "zxzz"_c, &Bool8x4Type },
        std::pair{ "zy"_c, &Bool8x2Type },
        std::pair{ "zyx"_c, &Bool8x3Type },
        std::pair{ "zyxx"_c, &Bool8x4Type },
        std::pair{ "zyxy"_c, &Bool8x4Type },
        std::pair{ "zyxz"_c, &Bool8x4Type },
        std::pair{ "zyy"_c, &Bool8x3Type },
        std::pair{ "zyyx"_c, &Bool8x4Type },
        std::pair{ "zyyy"_c, &Bool8x4Type },
        std::pair{ "zyyz"_c, &Bool8x4Type },
        std::pair{ "zyz"_c, &Bool8x3Type },
        std::pair{ "zyzx"_c, &Bool8x4Type },
        std::pair{ "zyzy"_c, &Bool8x4Type },
        std::pair{ "zyzz"_c, &Bool8x4Type },
        std::pair{ "zz"_c, &Bool8x2Type },
        std::pair{ "zzx"_c, &Bool8x3Type },
        std::pair{ "zzxx"_c, &Bool8x4Type },
        std::pair{ "zzxy"_c, &Bool8x4Type },
        std::pair{ "zzxz"_c, &Bool8x4Type },
        std::pair{ "zzy"_c, &Bool8x3Type },
        std::pair{ "zzyx"_c, &Bool8x4Type },
        std::pair{ "zzyy"_c, &Bool8x4Type },
        std::pair{ "zzyz"_c, &Bool8x4Type },
        std::pair{ "zzz"_c, &Bool8x3Type },
        std::pair{ "zzzx"_c, &Bool8x4Type },
        std::pair{ "zzzy"_c, &Bool8x4Type },
        std::pair{ "zzzz"_c, &Bool8x4Type }
    };
}
Bool8x3 Bool8x3Type;

/// operator[] with Int32
Variable Float16x3_operator_index_Int32_arg;
Function Float16x3_operator_index_Int32;
inline constexpr std::array Float16x3_operator_index_Int32_args = { &Float16x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x3_operator_index_UInt32_arg;
Function Float16x3_operator_index_UInt32;
inline constexpr std::array Float16x3_operator_index_UInt32_args = { &Float16x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x3_operator_index_Int16_arg;
Function Float16x3_operator_index_Int16;
inline constexpr std::array Float16x3_operator_index_Int16_args = { &Float16x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x3_operator_index_UInt16_arg;
Function Float16x3_operator_index_UInt16;
inline constexpr std::array Float16x3_operator_index_UInt16_args = { &Float16x3_operator_index_UInt16_arg };

/// operator+ with Float16x3
Variable Float16x3_operator_add_Float16x3_arg;
Function Float16x3_operator_add_Float16x3;
inline constexpr std::array Float16x3_operator_add_Float16x3_args = { &Float16x3_operator_add_Float16x3_arg };

/// operator- with Float16x3
Variable Float16x3_operator_sub_Float16x3_arg;
Function Float16x3_operator_sub_Float16x3;
inline constexpr std::array Float16x3_operator_sub_Float16x3_args = { &Float16x3_operator_sub_Float16x3_arg };

/// operator* with Float16x3
Variable Float16x3_operator_mul_Float16x3_arg;
Function Float16x3_operator_mul_Float16x3;
inline constexpr std::array Float16x3_operator_mul_Float16x3_args = { &Float16x3_operator_mul_Float16x3_arg };

/// operator/ with Float16x3
Variable Float16x3_operator_div_Float16x3_arg;
Function Float16x3_operator_div_Float16x3;
inline constexpr std::array Float16x3_operator_div_Float16x3_args = { &Float16x3_operator_div_Float16x3_arg };

/// operator% with Float16x3
Variable Float16x3_operator_mod_Float16x3_arg;
Function Float16x3_operator_mod_Float16x3;
inline constexpr std::array Float16x3_operator_mod_Float16x3_args = { &Float16x3_operator_mod_Float16x3_arg };

/// operator+= with Float16x3
Variable Float16x3_operator_addasg_Float16x3_arg;
Function Float16x3_operator_addasg_Float16x3;
inline constexpr std::array Float16x3_operator_addasg_Float16x3_args = { &Float16x3_operator_addasg_Float16x3_arg };

/// operator-= with Float16x3
Variable Float16x3_operator_subasg_Float16x3_arg;
Function Float16x3_operator_subasg_Float16x3;
inline constexpr std::array Float16x3_operator_subasg_Float16x3_args = { &Float16x3_operator_subasg_Float16x3_arg };

/// operator*= with Float16x3
Variable Float16x3_operator_mulasg_Float16x3_arg;
Function Float16x3_operator_mulasg_Float16x3;
inline constexpr std::array Float16x3_operator_mulasg_Float16x3_args = { &Float16x3_operator_mulasg_Float16x3_arg };

/// operator/= with Float16x3
Variable Float16x3_operator_divasg_Float16x3_arg;
Function Float16x3_operator_divasg_Float16x3;
inline constexpr std::array Float16x3_operator_divasg_Float16x3_args = { &Float16x3_operator_divasg_Float16x3_arg };

/// operator< with Float16x3
Variable Float16x3_operator_lt_Float16x3_arg;
Function Float16x3_operator_lt_Float16x3;
inline constexpr std::array Float16x3_operator_lt_Float16x3_args = { &Float16x3_operator_lt_Float16x3_arg };

/// operator<= with Float16x3
Variable Float16x3_operator_lte_Float16x3_arg;
Function Float16x3_operator_lte_Float16x3;
inline constexpr std::array Float16x3_operator_lte_Float16x3_args = { &Float16x3_operator_lte_Float16x3_arg };

/// operator> with Float16x3
Variable Float16x3_operator_gt_Float16x3_arg;
Function Float16x3_operator_gt_Float16x3;
inline constexpr std::array Float16x3_operator_gt_Float16x3_args = { &Float16x3_operator_gt_Float16x3_arg };

/// operator>= with Float16x3
Variable Float16x3_operator_gte_Float16x3_arg;
Function Float16x3_operator_gte_Float16x3;
inline constexpr std::array Float16x3_operator_gte_Float16x3_args = { &Float16x3_operator_gte_Float16x3_arg };

/// operator== with Float16x3
Variable Float16x3_operator_eq_Float16x3_arg;
Function Float16x3_operator_eq_Float16x3;
inline constexpr std::array Float16x3_operator_eq_Float16x3_args = { &Float16x3_operator_eq_Float16x3_arg };

/// operator!= with Float16x3
Variable Float16x3_operator_neq_Float16x3_arg;
Function Float16x3_operator_neq_Float16x3;
inline constexpr std::array Float16x3_operator_neq_Float16x3_args = { &Float16x3_operator_neq_Float16x3_arg };

/// operator* with Float16
Variable Float16x3_operator_scale_Float16_arg;
Function Float16x3_operator_scale_Float16;
inline constexpr std::array Float16x3_operator_scale_Float16_args = { &Float16x3_operator_scale_Float16_arg };

/// operator* with UInt16
Variable Float16x3_operator_scale_UInt16_arg;
Function Float16x3_operator_scale_UInt16;
inline constexpr std::array Float16x3_operator_scale_UInt16_args = { &Float16x3_operator_scale_UInt16_arg };

/// operator* with Int16
Variable Float16x3_operator_scale_Int16_arg;
Function Float16x3_operator_scale_Int16;
inline constexpr std::array Float16x3_operator_scale_Int16_args = { &Float16x3_operator_scale_Int16_arg };

/// operator* with Float32x3x2
Variable Float16x3_operator_transform_Float32x3x2_arg;
Function Float16x3_operator_transform_Float32x3x2;
inline constexpr std::array Float16x3_operator_transform_Float32x3x2_args = { &Float16x3_operator_transform_Float32x3x2_arg };

/// operator* with Float32x3x3
Variable Float16x3_operator_transform_Float32x3x3_arg;
Function Float16x3_operator_transform_Float32x3x3;
inline constexpr std::array Float16x3_operator_transform_Float32x3x3_args = { &Float16x3_operator_transform_Float32x3x3_arg };

/// operator* with Float32x3x4
Variable Float16x3_operator_transform_Float32x3x4_arg;
Function Float16x3_operator_transform_Float32x3x4;
inline constexpr std::array Float16x3_operator_transform_Float32x3x4_args = { &Float16x3_operator_transform_Float32x3x4_arg };

Float16x3::Float16x3()
{
    this->name = "f16x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 6;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x3_operator_index_Int32_arg.name = "arg"_c;
    Float16x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x3_operator_index_Int32.name = "operator[]"_c;
    Float16x3_operator_index_Int32.backendIndex = 674;
    Float16x3_operator_index_Int32.returnType = Type::FullType { Float16Type.name };
    Float16x3_operator_index_Int32.parameters = Float16x3_operator_index_Int32_args;
    Symbol::Resolved(&Float16x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3_operator_index_Int32)->signature = "f16 operator[](i32)"_c;
    Symbol::Resolved(&Float16x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float16x3_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt32
    Float16x3_operator_index_UInt32_arg.name = "arg"_c;
    Float16x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x3_operator_index_UInt32.name = "operator[]"_c;
    Float16x3_operator_index_UInt32.backendIndex = 675;
    Float16x3_operator_index_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16x3_operator_index_UInt32.parameters = Float16x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3_operator_index_UInt32)->signature = "f16 operator[](u32)"_c;
    Symbol::Resolved(&Float16x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float16x3_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int16
    Float16x3_operator_index_Int16_arg.name = "arg"_c;
    Float16x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x3_operator_index_Int16.name = "operator[]"_c;
    Float16x3_operator_index_Int16.backendIndex = 676;
    Float16x3_operator_index_Int16.returnType = Type::FullType { Float16Type.name };
    Float16x3_operator_index_Int16.parameters = Float16x3_operator_index_Int16_args;
    Symbol::Resolved(&Float16x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3_operator_index_Int16)->signature = "f16 operator[](i16)"_c;
    Symbol::Resolved(&Float16x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float16x3_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt16
    Float16x3_operator_index_UInt16_arg.name = "arg"_c;
    Float16x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x3_operator_index_UInt16.name = "operator[]"_c;
    Float16x3_operator_index_UInt16.backendIndex = 677;
    Float16x3_operator_index_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16x3_operator_index_UInt16.parameters = Float16x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3_operator_index_UInt16)->signature = "f16 operator[](u16)"_c;
    Symbol::Resolved(&Float16x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float16x3_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    /// operator+ with Float16x3
    Float16x3_operator_add_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_add_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_add_Float16x3.name = "operator+"_c;
    Float16x3_operator_add_Float16x3.backendIndex = 678;
    Float16x3_operator_add_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_add_Float16x3.parameters = Float16x3_operator_add_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_add_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_add_Float16x3)->signature = "f16x3 operator+(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_add_Float16x3)->name = "operator+(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_add_Float16x3)->nameWithVarNames = "operator+(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_add_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator- with Float16x3
    Float16x3_operator_sub_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_sub_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_sub_Float16x3.name = "operator-"_c;
    Float16x3_operator_sub_Float16x3.backendIndex = 679;
    Float16x3_operator_sub_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_sub_Float16x3.parameters = Float16x3_operator_sub_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3)->signature = "f16x3 operator-(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3)->name = "operator-(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3)->nameWithVarNames = "operator-(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_sub_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float16x3
    Float16x3_operator_mul_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_mul_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_mul_Float16x3.name = "operator*"_c;
    Float16x3_operator_mul_Float16x3.backendIndex = 680;
    Float16x3_operator_mul_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_mul_Float16x3.parameters = Float16x3_operator_mul_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3)->signature = "f16x3 operator*(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3)->name = "operator*(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3)->nameWithVarNames = "operator*(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mul_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator/ with Float16x3
    Float16x3_operator_div_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_div_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_div_Float16x3.name = "operator/"_c;
    Float16x3_operator_div_Float16x3.backendIndex = 681;
    Float16x3_operator_div_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_div_Float16x3.parameters = Float16x3_operator_div_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_div_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_div_Float16x3)->signature = "f16x3 operator/(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_div_Float16x3)->name = "operator/(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_div_Float16x3)->nameWithVarNames = "operator/(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_div_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator% with Float16x3
    Float16x3_operator_mod_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_mod_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_mod_Float16x3.name = "operator%"_c;
    Float16x3_operator_mod_Float16x3.backendIndex = 682;
    Float16x3_operator_mod_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_mod_Float16x3.parameters = Float16x3_operator_mod_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3)->signature = "f16x3 operator%(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3)->name = "operator%(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3)->nameWithVarNames = "operator%(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mod_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator+= with Float16x3
    Float16x3_operator_addasg_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_addasg_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_addasg_Float16x3.name = "operator+="_c;
    Float16x3_operator_addasg_Float16x3.backendIndex = 683;
    Float16x3_operator_addasg_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_addasg_Float16x3.parameters = Float16x3_operator_addasg_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3)->signature = "f16x3 operator+=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3)->name = "operator+=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3)->nameWithVarNames = "operator+=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_addasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator-= with Float16x3
    Float16x3_operator_subasg_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_subasg_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_subasg_Float16x3.name = "operator-="_c;
    Float16x3_operator_subasg_Float16x3.backendIndex = 684;
    Float16x3_operator_subasg_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_subasg_Float16x3.parameters = Float16x3_operator_subasg_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3)->signature = "f16x3 operator-=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3)->name = "operator-=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3)->nameWithVarNames = "operator-=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_subasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator*= with Float16x3
    Float16x3_operator_mulasg_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_mulasg_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_mulasg_Float16x3.name = "operator*="_c;
    Float16x3_operator_mulasg_Float16x3.backendIndex = 685;
    Float16x3_operator_mulasg_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_mulasg_Float16x3.parameters = Float16x3_operator_mulasg_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3)->signature = "f16x3 operator*=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3)->name = "operator*=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3)->nameWithVarNames = "operator*=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_mulasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator/= with Float16x3
    Float16x3_operator_divasg_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_divasg_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_divasg_Float16x3.name = "operator/="_c;
    Float16x3_operator_divasg_Float16x3.backendIndex = 686;
    Float16x3_operator_divasg_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_divasg_Float16x3.parameters = Float16x3_operator_divasg_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3)->signature = "f16x3 operator/=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3)->name = "operator/=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3)->nameWithVarNames = "operator/=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_divasg_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator< with Float16x3
    Float16x3_operator_lt_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_lt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_lt_Float16x3.name = "operator<"_c;
    Float16x3_operator_lt_Float16x3.backendIndex = 687;
    Float16x3_operator_lt_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Float16x3_operator_lt_Float16x3.parameters = Float16x3_operator_lt_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3)->signature = "b8x3 operator<(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3)->name = "operator<(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3)->nameWithVarNames = "operator<(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_lt_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator<= with Float16x3
    Float16x3_operator_lte_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_lte_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_lte_Float16x3.name = "operator<="_c;
    Float16x3_operator_lte_Float16x3.backendIndex = 688;
    Float16x3_operator_lte_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Float16x3_operator_lte_Float16x3.parameters = Float16x3_operator_lte_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3)->signature = "b8x3 operator<=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3)->name = "operator<=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3)->nameWithVarNames = "operator<=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_lte_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator> with Float16x3
    Float16x3_operator_gt_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_gt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_gt_Float16x3.name = "operator>"_c;
    Float16x3_operator_gt_Float16x3.backendIndex = 689;
    Float16x3_operator_gt_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Float16x3_operator_gt_Float16x3.parameters = Float16x3_operator_gt_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3)->signature = "b8x3 operator>(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3)->name = "operator>(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3)->nameWithVarNames = "operator>(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_gt_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator>= with Float16x3
    Float16x3_operator_gte_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_gte_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_gte_Float16x3.name = "operator>="_c;
    Float16x3_operator_gte_Float16x3.backendIndex = 690;
    Float16x3_operator_gte_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Float16x3_operator_gte_Float16x3.parameters = Float16x3_operator_gte_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3)->signature = "b8x3 operator>=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3)->name = "operator>=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3)->nameWithVarNames = "operator>=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_gte_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with Float16x3
    Float16x3_operator_eq_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_eq_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_eq_Float16x3.name = "operator=="_c;
    Float16x3_operator_eq_Float16x3.backendIndex = 691;
    Float16x3_operator_eq_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Float16x3_operator_eq_Float16x3.parameters = Float16x3_operator_eq_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3)->signature = "b8x3 operator==(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3)->name = "operator==(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3)->nameWithVarNames = "operator==(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_eq_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with Float16x3
    Float16x3_operator_neq_Float16x3_arg.name = "arg"_c;
    Float16x3_operator_neq_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_operator_neq_Float16x3.name = "operator!="_c;
    Float16x3_operator_neq_Float16x3.backendIndex = 692;
    Float16x3_operator_neq_Float16x3.returnType = Type::FullType { Bool8x3Type.name };
    Float16x3_operator_neq_Float16x3.parameters = Float16x3_operator_neq_Float16x3_args;
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3)->signature = "b8x3 operator!=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3)->name = "operator!=(f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3)->nameWithVarNames = "operator!=(arg : f16x3)"_c;
    Symbol::Resolved(&Float16x3_operator_neq_Float16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator* with Float16
    Float16x3_operator_scale_Float16_arg.name = "arg"_c;
    Float16x3_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x3_operator_scale_Float16.name = "operator*"_c;
    Float16x3_operator_scale_Float16.backendIndex = 693;
    Float16x3_operator_scale_Float16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_scale_Float16.parameters = Float16x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x3_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_operator_scale_Float16)->signature = "f16x3 operator*(f16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_Float16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with UInt16
    Float16x3_operator_scale_UInt16_arg.name = "arg"_c;
    Float16x3_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x3_operator_scale_UInt16.name = "operator*"_c;
    Float16x3_operator_scale_UInt16.backendIndex = 694;
    Float16x3_operator_scale_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_scale_UInt16.parameters = Float16x3_operator_scale_UInt16_args;
    Symbol::Resolved(&Float16x3_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3_operator_scale_UInt16)->signature = "f16x3 operator*(u16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Int16
    Float16x3_operator_scale_Int16_arg.name = "arg"_c;
    Float16x3_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x3_operator_scale_Int16.name = "operator*"_c;
    Float16x3_operator_scale_Int16.backendIndex = 695;
    Float16x3_operator_scale_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_scale_Int16.parameters = Float16x3_operator_scale_Int16_args;
    Symbol::Resolved(&Float16x3_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3_operator_scale_Int16)->signature = "f16x3 operator*(i16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Float16x3_operator_scale_Int16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32x3x2
    Float16x3_operator_transform_Float32x3x2_arg.name = "arg"_c;
    Float16x3_operator_transform_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float16x3_operator_transform_Float32x3x2.name = "operator*"_c;
    Float16x3_operator_transform_Float32x3x2.backendIndex = 696;
    Float16x3_operator_transform_Float32x3x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x3_operator_transform_Float32x3x2.parameters = Float16x3_operator_transform_Float32x3x2_args;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x2)->signature = "f16x2 operator*(f32x3x2)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x2)->name = "operator*(f32x3x2)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x2)->nameWithVarNames = "operator*(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32x3x3
    Float16x3_operator_transform_Float32x3x3_arg.name = "arg"_c;
    Float16x3_operator_transform_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float16x3_operator_transform_Float32x3x3.name = "operator*"_c;
    Float16x3_operator_transform_Float32x3x3.backendIndex = 697;
    Float16x3_operator_transform_Float32x3x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_operator_transform_Float32x3x3.parameters = Float16x3_operator_transform_Float32x3x3_args;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x3)->signature = "f16x3 operator*(f32x3x3)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x3)->name = "operator*(f32x3x3)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x3)->nameWithVarNames = "operator*(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32x3x4
    Float16x3_operator_transform_Float32x3x4_arg.name = "arg"_c;
    Float16x3_operator_transform_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float16x3_operator_transform_Float32x3x4.name = "operator*"_c;
    Float16x3_operator_transform_Float32x3x4.backendIndex = 698;
    Float16x3_operator_transform_Float32x3x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x3_operator_transform_Float32x3x4.parameters = Float16x3_operator_transform_Float32x3x4_args;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x4)->signature = "f16x4 operator*(f32x3x4)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x4)->name = "operator*(f32x3x4)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x4)->nameWithVarNames = "operator*(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float16x3_operator_transform_Float32x3x4)->returnTypeSymbol = &Float16x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 290> { 
        std::pair{ "b"_c, &Float16Type },
        std::pair{ "bb"_c, &Float16x2Type },
        std::pair{ "bbb"_c, &Float16x3Type },
        std::pair{ "bbbb"_c, &Float16x4Type },
        std::pair{ "bbbg"_c, &Float16x4Type },
        std::pair{ "bbbr"_c, &Float16x4Type },
        std::pair{ "bbg"_c, &Float16x3Type },
        std::pair{ "bbgb"_c, &Float16x4Type },
        std::pair{ "bbgg"_c, &Float16x4Type },
        std::pair{ "bbgr"_c, &Float16x4Type },
        std::pair{ "bbr"_c, &Float16x3Type },
        std::pair{ "bbrb"_c, &Float16x4Type },
        std::pair{ "bbrg"_c, &Float16x4Type },
        std::pair{ "bbrr"_c, &Float16x4Type },
        std::pair{ "bg"_c, &Float16x2Type },
        std::pair{ "bgb"_c, &Float16x3Type },
        std::pair{ "bgbb"_c, &Float16x4Type },
        std::pair{ "bgbg"_c, &Float16x4Type },
        std::pair{ "bgbr"_c, &Float16x4Type },
        std::pair{ "bgg"_c, &Float16x3Type },
        std::pair{ "bggb"_c, &Float16x4Type },
        std::pair{ "bggg"_c, &Float16x4Type },
        std::pair{ "bggr"_c, &Float16x4Type },
        std::pair{ "bgr"_c, &Float16x3Type },
        std::pair{ "bgrb"_c, &Float16x4Type },
        std::pair{ "bgrg"_c, &Float16x4Type },
        std::pair{ "bgrr"_c, &Float16x4Type },
        std::pair{ "br"_c, &Float16x2Type },
        std::pair{ "brb"_c, &Float16x3Type },
        std::pair{ "brbb"_c, &Float16x4Type },
        std::pair{ "brbg"_c, &Float16x4Type },
        std::pair{ "brbr"_c, &Float16x4Type },
        std::pair{ "brg"_c, &Float16x3Type },
        std::pair{ "brgb"_c, &Float16x4Type },
        std::pair{ "brgg"_c, &Float16x4Type },
        std::pair{ "brgr"_c, &Float16x4Type },
        std::pair{ "brr"_c, &Float16x3Type },
        std::pair{ "brrb"_c, &Float16x4Type },
        std::pair{ "brrg"_c, &Float16x4Type },
        std::pair{ "brrr"_c, &Float16x4Type },
        std::pair{ "g"_c, &Float16Type },
        std::pair{ "gb"_c, &Float16x2Type },
        std::pair{ "gbb"_c, &Float16x3Type },
        std::pair{ "gbbb"_c, &Float16x4Type },
        std::pair{ "gbbg"_c, &Float16x4Type },
        std::pair{ "gbbr"_c, &Float16x4Type },
        std::pair{ "gbg"_c, &Float16x3Type },
        std::pair{ "gbgb"_c, &Float16x4Type },
        std::pair{ "gbgg"_c, &Float16x4Type },
        std::pair{ "gbgr"_c, &Float16x4Type },
        std::pair{ "gbr"_c, &Float16x3Type },
        std::pair{ "gbrb"_c, &Float16x4Type },
        std::pair{ "gbrg"_c, &Float16x4Type },
        std::pair{ "gbrr"_c, &Float16x4Type },
        std::pair{ "gg"_c, &Float16x2Type },
        std::pair{ "ggb"_c, &Float16x3Type },
        std::pair{ "ggbb"_c, &Float16x4Type },
        std::pair{ "ggbg"_c, &Float16x4Type },
        std::pair{ "ggbr"_c, &Float16x4Type },
        std::pair{ "ggg"_c, &Float16x3Type },
        std::pair{ "gggb"_c, &Float16x4Type },
        std::pair{ "gggg"_c, &Float16x4Type },
        std::pair{ "gggr"_c, &Float16x4Type },
        std::pair{ "ggr"_c, &Float16x3Type },
        std::pair{ "ggrb"_c, &Float16x4Type },
        std::pair{ "ggrg"_c, &Float16x4Type },
        std::pair{ "ggrr"_c, &Float16x4Type },
        std::pair{ "gr"_c, &Float16x2Type },
        std::pair{ "grb"_c, &Float16x3Type },
        std::pair{ "grbb"_c, &Float16x4Type },
        std::pair{ "grbg"_c, &Float16x4Type },
        std::pair{ "grbr"_c, &Float16x4Type },
        std::pair{ "grg"_c, &Float16x3Type },
        std::pair{ "grgb"_c, &Float16x4Type },
        std::pair{ "grgg"_c, &Float16x4Type },
        std::pair{ "grgr"_c, &Float16x4Type },
        std::pair{ "grr"_c, &Float16x3Type },
        std::pair{ "grrb"_c, &Float16x4Type },
        std::pair{ "grrg"_c, &Float16x4Type },
        std::pair{ "grrr"_c, &Float16x4Type },
        std::pair{ "operator!="_c, &Float16x3_operator_neq_Float16x3 },
        std::pair{ "operator!=(f16x3)"_c, &Float16x3_operator_neq_Float16x3 },
        std::pair{ "operator%"_c, &Float16x3_operator_mod_Float16x3 },
        std::pair{ "operator%(f16x3)"_c, &Float16x3_operator_mod_Float16x3 },
        std::pair{ "operator*"_c, &Float16x3_operator_mul_Float16x3 },
        std::pair{ "operator*"_c, &Float16x3_operator_scale_Float16 },
        std::pair{ "operator*"_c, &Float16x3_operator_scale_UInt16 },
        std::pair{ "operator*"_c, &Float16x3_operator_scale_Int16 },
        std::pair{ "operator*"_c, &Float16x3_operator_transform_Float32x3x2 },
        std::pair{ "operator*"_c, &Float16x3_operator_transform_Float32x3x3 },
        std::pair{ "operator*"_c, &Float16x3_operator_transform_Float32x3x4 },
        std::pair{ "operator*(f16)"_c, &Float16x3_operator_scale_Float16 },
        std::pair{ "operator*(f16x3)"_c, &Float16x3_operator_mul_Float16x3 },
        std::pair{ "operator*(f32x3x2)"_c, &Float16x3_operator_transform_Float32x3x2 },
        std::pair{ "operator*(f32x3x3)"_c, &Float16x3_operator_transform_Float32x3x3 },
        std::pair{ "operator*(f32x3x4)"_c, &Float16x3_operator_transform_Float32x3x4 },
        std::pair{ "operator*(i16)"_c, &Float16x3_operator_scale_Int16 },
        std::pair{ "operator*(u16)"_c, &Float16x3_operator_scale_UInt16 },
        std::pair{ "operator*="_c, &Float16x3_operator_mulasg_Float16x3 },
        std::pair{ "operator*=(f16x3)"_c, &Float16x3_operator_mulasg_Float16x3 },
        std::pair{ "operator+"_c, &Float16x3_operator_add_Float16x3 },
        std::pair{ "operator+(f16x3)"_c, &Float16x3_operator_add_Float16x3 },
        std::pair{ "operator+="_c, &Float16x3_operator_addasg_Float16x3 },
        std::pair{ "operator+=(f16x3)"_c, &Float16x3_operator_addasg_Float16x3 },
        std::pair{ "operator-"_c, &Float16x3_operator_sub_Float16x3 },
        std::pair{ "operator-(f16x3)"_c, &Float16x3_operator_sub_Float16x3 },
        std::pair{ "operator-="_c, &Float16x3_operator_subasg_Float16x3 },
        std::pair{ "operator-=(f16x3)"_c, &Float16x3_operator_subasg_Float16x3 },
        std::pair{ "operator/"_c, &Float16x3_operator_div_Float16x3 },
        std::pair{ "operator/(f16x3)"_c, &Float16x3_operator_div_Float16x3 },
        std::pair{ "operator/="_c, &Float16x3_operator_divasg_Float16x3 },
        std::pair{ "operator/=(f16x3)"_c, &Float16x3_operator_divasg_Float16x3 },
        std::pair{ "operator<"_c, &Float16x3_operator_lt_Float16x3 },
        std::pair{ "operator<(f16x3)"_c, &Float16x3_operator_lt_Float16x3 },
        std::pair{ "operator<="_c, &Float16x3_operator_lte_Float16x3 },
        std::pair{ "operator<=(f16x3)"_c, &Float16x3_operator_lte_Float16x3 },
        std::pair{ "operator=="_c, &Float16x3_operator_eq_Float16x3 },
        std::pair{ "operator==(f16x3)"_c, &Float16x3_operator_eq_Float16x3 },
        std::pair{ "operator>"_c, &Float16x3_operator_gt_Float16x3 },
        std::pair{ "operator>(f16x3)"_c, &Float16x3_operator_gt_Float16x3 },
        std::pair{ "operator>="_c, &Float16x3_operator_gte_Float16x3 },
        std::pair{ "operator>=(f16x3)"_c, &Float16x3_operator_gte_Float16x3 },
        std::pair{ "operator[]"_c, &Float16x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16x3_operator_index_UInt32 },
        std::pair{ "r"_c, &Float16Type },
        std::pair{ "rb"_c, &Float16x2Type },
        std::pair{ "rbb"_c, &Float16x3Type },
        std::pair{ "rbbb"_c, &Float16x4Type },
        std::pair{ "rbbg"_c, &Float16x4Type },
        std::pair{ "rbbr"_c, &Float16x4Type },
        std::pair{ "rbg"_c, &Float16x3Type },
        std::pair{ "rbgb"_c, &Float16x4Type },
        std::pair{ "rbgg"_c, &Float16x4Type },
        std::pair{ "rbgr"_c, &Float16x4Type },
        std::pair{ "rbr"_c, &Float16x3Type },
        std::pair{ "rbrb"_c, &Float16x4Type },
        std::pair{ "rbrg"_c, &Float16x4Type },
        std::pair{ "rbrr"_c, &Float16x4Type },
        std::pair{ "rg"_c, &Float16x2Type },
        std::pair{ "rgb"_c, &Float16x3Type },
        std::pair{ "rgbb"_c, &Float16x4Type },
        std::pair{ "rgbg"_c, &Float16x4Type },
        std::pair{ "rgbr"_c, &Float16x4Type },
        std::pair{ "rgg"_c, &Float16x3Type },
        std::pair{ "rggb"_c, &Float16x4Type },
        std::pair{ "rggg"_c, &Float16x4Type },
        std::pair{ "rggr"_c, &Float16x4Type },
        std::pair{ "rgr"_c, &Float16x3Type },
        std::pair{ "rgrb"_c, &Float16x4Type },
        std::pair{ "rgrg"_c, &Float16x4Type },
        std::pair{ "rgrr"_c, &Float16x4Type },
        std::pair{ "rr"_c, &Float16x2Type },
        std::pair{ "rrb"_c, &Float16x3Type },
        std::pair{ "rrbb"_c, &Float16x4Type },
        std::pair{ "rrbg"_c, &Float16x4Type },
        std::pair{ "rrbr"_c, &Float16x4Type },
        std::pair{ "rrg"_c, &Float16x3Type },
        std::pair{ "rrgb"_c, &Float16x4Type },
        std::pair{ "rrgg"_c, &Float16x4Type },
        std::pair{ "rrgr"_c, &Float16x4Type },
        std::pair{ "rrr"_c, &Float16x3Type },
        std::pair{ "rrrb"_c, &Float16x4Type },
        std::pair{ "rrrg"_c, &Float16x4Type },
        std::pair{ "rrrr"_c, &Float16x4Type },
        std::pair{ "x"_c, &Float16Type },
        std::pair{ "xx"_c, &Float16x2Type },
        std::pair{ "xxx"_c, &Float16x3Type },
        std::pair{ "xxxx"_c, &Float16x4Type },
        std::pair{ "xxxy"_c, &Float16x4Type },
        std::pair{ "xxxz"_c, &Float16x4Type },
        std::pair{ "xxy"_c, &Float16x3Type },
        std::pair{ "xxyx"_c, &Float16x4Type },
        std::pair{ "xxyy"_c, &Float16x4Type },
        std::pair{ "xxyz"_c, &Float16x4Type },
        std::pair{ "xxz"_c, &Float16x3Type },
        std::pair{ "xxzx"_c, &Float16x4Type },
        std::pair{ "xxzy"_c, &Float16x4Type },
        std::pair{ "xxzz"_c, &Float16x4Type },
        std::pair{ "xy"_c, &Float16x2Type },
        std::pair{ "xyx"_c, &Float16x3Type },
        std::pair{ "xyxx"_c, &Float16x4Type },
        std::pair{ "xyxy"_c, &Float16x4Type },
        std::pair{ "xyxz"_c, &Float16x4Type },
        std::pair{ "xyy"_c, &Float16x3Type },
        std::pair{ "xyyx"_c, &Float16x4Type },
        std::pair{ "xyyy"_c, &Float16x4Type },
        std::pair{ "xyyz"_c, &Float16x4Type },
        std::pair{ "xyz"_c, &Float16x3Type },
        std::pair{ "xyzx"_c, &Float16x4Type },
        std::pair{ "xyzy"_c, &Float16x4Type },
        std::pair{ "xyzz"_c, &Float16x4Type },
        std::pair{ "xz"_c, &Float16x2Type },
        std::pair{ "xzx"_c, &Float16x3Type },
        std::pair{ "xzxx"_c, &Float16x4Type },
        std::pair{ "xzxy"_c, &Float16x4Type },
        std::pair{ "xzxz"_c, &Float16x4Type },
        std::pair{ "xzy"_c, &Float16x3Type },
        std::pair{ "xzyx"_c, &Float16x4Type },
        std::pair{ "xzyy"_c, &Float16x4Type },
        std::pair{ "xzyz"_c, &Float16x4Type },
        std::pair{ "xzz"_c, &Float16x3Type },
        std::pair{ "xzzx"_c, &Float16x4Type },
        std::pair{ "xzzy"_c, &Float16x4Type },
        std::pair{ "xzzz"_c, &Float16x4Type },
        std::pair{ "y"_c, &Float16Type },
        std::pair{ "yx"_c, &Float16x2Type },
        std::pair{ "yxx"_c, &Float16x3Type },
        std::pair{ "yxxx"_c, &Float16x4Type },
        std::pair{ "yxxy"_c, &Float16x4Type },
        std::pair{ "yxxz"_c, &Float16x4Type },
        std::pair{ "yxy"_c, &Float16x3Type },
        std::pair{ "yxyx"_c, &Float16x4Type },
        std::pair{ "yxyy"_c, &Float16x4Type },
        std::pair{ "yxyz"_c, &Float16x4Type },
        std::pair{ "yxz"_c, &Float16x3Type },
        std::pair{ "yxzx"_c, &Float16x4Type },
        std::pair{ "yxzy"_c, &Float16x4Type },
        std::pair{ "yxzz"_c, &Float16x4Type },
        std::pair{ "yy"_c, &Float16x2Type },
        std::pair{ "yyx"_c, &Float16x3Type },
        std::pair{ "yyxx"_c, &Float16x4Type },
        std::pair{ "yyxy"_c, &Float16x4Type },
        std::pair{ "yyxz"_c, &Float16x4Type },
        std::pair{ "yyy"_c, &Float16x3Type },
        std::pair{ "yyyx"_c, &Float16x4Type },
        std::pair{ "yyyy"_c, &Float16x4Type },
        std::pair{ "yyyz"_c, &Float16x4Type },
        std::pair{ "yyz"_c, &Float16x3Type },
        std::pair{ "yyzx"_c, &Float16x4Type },
        std::pair{ "yyzy"_c, &Float16x4Type },
        std::pair{ "yyzz"_c, &Float16x4Type },
        std::pair{ "yz"_c, &Float16x2Type },
        std::pair{ "yzx"_c, &Float16x3Type },
        std::pair{ "yzxx"_c, &Float16x4Type },
        std::pair{ "yzxy"_c, &Float16x4Type },
        std::pair{ "yzxz"_c, &Float16x4Type },
        std::pair{ "yzy"_c, &Float16x3Type },
        std::pair{ "yzyx"_c, &Float16x4Type },
        std::pair{ "yzyy"_c, &Float16x4Type },
        std::pair{ "yzyz"_c, &Float16x4Type },
        std::pair{ "yzz"_c, &Float16x3Type },
        std::pair{ "yzzx"_c, &Float16x4Type },
        std::pair{ "yzzy"_c, &Float16x4Type },
        std::pair{ "yzzz"_c, &Float16x4Type },
        std::pair{ "z"_c, &Float16Type },
        std::pair{ "zx"_c, &Float16x2Type },
        std::pair{ "zxx"_c, &Float16x3Type },
        std::pair{ "zxxx"_c, &Float16x4Type },
        std::pair{ "zxxy"_c, &Float16x4Type },
        std::pair{ "zxxz"_c, &Float16x4Type },
        std::pair{ "zxy"_c, &Float16x3Type },
        std::pair{ "zxyx"_c, &Float16x4Type },
        std::pair{ "zxyy"_c, &Float16x4Type },
        std::pair{ "zxyz"_c, &Float16x4Type },
        std::pair{ "zxz"_c, &Float16x3Type },
        std::pair{ "zxzx"_c, &Float16x4Type },
        std::pair{ "zxzy"_c, &Float16x4Type },
        std::pair{ "zxzz"_c, &Float16x4Type },
        std::pair{ "zy"_c, &Float16x2Type },
        std::pair{ "zyx"_c, &Float16x3Type },
        std::pair{ "zyxx"_c, &Float16x4Type },
        std::pair{ "zyxy"_c, &Float16x4Type },
        std::pair{ "zyxz"_c, &Float16x4Type },
        std::pair{ "zyy"_c, &Float16x3Type },
        std::pair{ "zyyx"_c, &Float16x4Type },
        std::pair{ "zyyy"_c, &Float16x4Type },
        std::pair{ "zyyz"_c, &Float16x4Type },
        std::pair{ "zyz"_c, &Float16x3Type },
        std::pair{ "zyzx"_c, &Float16x4Type },
        std::pair{ "zyzy"_c, &Float16x4Type },
        std::pair{ "zyzz"_c, &Float16x4Type },
        std::pair{ "zz"_c, &Float16x2Type },
        std::pair{ "zzx"_c, &Float16x3Type },
        std::pair{ "zzxx"_c, &Float16x4Type },
        std::pair{ "zzxy"_c, &Float16x4Type },
        std::pair{ "zzxz"_c, &Float16x4Type },
        std::pair{ "zzy"_c, &Float16x3Type },
        std::pair{ "zzyx"_c, &Float16x4Type },
        std::pair{ "zzyy"_c, &Float16x4Type },
        std::pair{ "zzyz"_c, &Float16x4Type },
        std::pair{ "zzz"_c, &Float16x3Type },
        std::pair{ "zzzx"_c, &Float16x4Type },
        std::pair{ "zzzy"_c, &Float16x4Type },
        std::pair{ "zzzz"_c, &Float16x4Type }
    };
}
Float16x3 Float16x3Type;

/// operator[] with Int32
Variable UInt16x3_operator_index_Int32_arg;
Function UInt16x3_operator_index_Int32;
inline constexpr std::array UInt16x3_operator_index_Int32_args = { &UInt16x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt16x3_operator_index_UInt32_arg;
Function UInt16x3_operator_index_UInt32;
inline constexpr std::array UInt16x3_operator_index_UInt32_args = { &UInt16x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt16x3_operator_index_Int16_arg;
Function UInt16x3_operator_index_Int16;
inline constexpr std::array UInt16x3_operator_index_Int16_args = { &UInt16x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt16x3_operator_index_UInt16_arg;
Function UInt16x3_operator_index_UInt16;
inline constexpr std::array UInt16x3_operator_index_UInt16_args = { &UInt16x3_operator_index_UInt16_arg };

/// operator+ with UInt16x3
Variable UInt16x3_operator_add_UInt16x3_arg;
Function UInt16x3_operator_add_UInt16x3;
inline constexpr std::array UInt16x3_operator_add_UInt16x3_args = { &UInt16x3_operator_add_UInt16x3_arg };

/// operator- with UInt16x3
Variable UInt16x3_operator_sub_UInt16x3_arg;
Function UInt16x3_operator_sub_UInt16x3;
inline constexpr std::array UInt16x3_operator_sub_UInt16x3_args = { &UInt16x3_operator_sub_UInt16x3_arg };

/// operator* with UInt16x3
Variable UInt16x3_operator_mul_UInt16x3_arg;
Function UInt16x3_operator_mul_UInt16x3;
inline constexpr std::array UInt16x3_operator_mul_UInt16x3_args = { &UInt16x3_operator_mul_UInt16x3_arg };

/// operator/ with UInt16x3
Variable UInt16x3_operator_div_UInt16x3_arg;
Function UInt16x3_operator_div_UInt16x3;
inline constexpr std::array UInt16x3_operator_div_UInt16x3_args = { &UInt16x3_operator_div_UInt16x3_arg };

/// operator% with UInt16x3
Variable UInt16x3_operator_mod_UInt16x3_arg;
Function UInt16x3_operator_mod_UInt16x3;
inline constexpr std::array UInt16x3_operator_mod_UInt16x3_args = { &UInt16x3_operator_mod_UInt16x3_arg };

/// operator+= with UInt16x3
Variable UInt16x3_operator_addasg_UInt16x3_arg;
Function UInt16x3_operator_addasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_addasg_UInt16x3_args = { &UInt16x3_operator_addasg_UInt16x3_arg };

/// operator-= with UInt16x3
Variable UInt16x3_operator_subasg_UInt16x3_arg;
Function UInt16x3_operator_subasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_subasg_UInt16x3_args = { &UInt16x3_operator_subasg_UInt16x3_arg };

/// operator*= with UInt16x3
Variable UInt16x3_operator_mulasg_UInt16x3_arg;
Function UInt16x3_operator_mulasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_mulasg_UInt16x3_args = { &UInt16x3_operator_mulasg_UInt16x3_arg };

/// operator/= with UInt16x3
Variable UInt16x3_operator_divasg_UInt16x3_arg;
Function UInt16x3_operator_divasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_divasg_UInt16x3_args = { &UInt16x3_operator_divasg_UInt16x3_arg };

/// operator< with UInt16x3
Variable UInt16x3_operator_lt_UInt16x3_arg;
Function UInt16x3_operator_lt_UInt16x3;
inline constexpr std::array UInt16x3_operator_lt_UInt16x3_args = { &UInt16x3_operator_lt_UInt16x3_arg };

/// operator<= with UInt16x3
Variable UInt16x3_operator_lte_UInt16x3_arg;
Function UInt16x3_operator_lte_UInt16x3;
inline constexpr std::array UInt16x3_operator_lte_UInt16x3_args = { &UInt16x3_operator_lte_UInt16x3_arg };

/// operator> with UInt16x3
Variable UInt16x3_operator_gt_UInt16x3_arg;
Function UInt16x3_operator_gt_UInt16x3;
inline constexpr std::array UInt16x3_operator_gt_UInt16x3_args = { &UInt16x3_operator_gt_UInt16x3_arg };

/// operator>= with UInt16x3
Variable UInt16x3_operator_gte_UInt16x3_arg;
Function UInt16x3_operator_gte_UInt16x3;
inline constexpr std::array UInt16x3_operator_gte_UInt16x3_args = { &UInt16x3_operator_gte_UInt16x3_arg };

/// operator== with UInt16x3
Variable UInt16x3_operator_eq_UInt16x3_arg;
Function UInt16x3_operator_eq_UInt16x3;
inline constexpr std::array UInt16x3_operator_eq_UInt16x3_args = { &UInt16x3_operator_eq_UInt16x3_arg };

/// operator!= with UInt16x3
Variable UInt16x3_operator_neq_UInt16x3_arg;
Function UInt16x3_operator_neq_UInt16x3;
inline constexpr std::array UInt16x3_operator_neq_UInt16x3_args = { &UInt16x3_operator_neq_UInt16x3_arg };

/// operator* with Float16
Variable UInt16x3_operator_scale_Float16_arg;
Function UInt16x3_operator_scale_Float16;
inline constexpr std::array UInt16x3_operator_scale_Float16_args = { &UInt16x3_operator_scale_Float16_arg };

/// operator* with UInt16
Variable UInt16x3_operator_scale_UInt16_arg;
Function UInt16x3_operator_scale_UInt16;
inline constexpr std::array UInt16x3_operator_scale_UInt16_args = { &UInt16x3_operator_scale_UInt16_arg };

/// operator* with Int16
Variable UInt16x3_operator_scale_Int16_arg;
Function UInt16x3_operator_scale_Int16;
inline constexpr std::array UInt16x3_operator_scale_Int16_args = { &UInt16x3_operator_scale_Int16_arg };

/// operator| with UInt16x3
Variable UInt16x3_operator_or_UInt16x3_arg;
Function UInt16x3_operator_or_UInt16x3;
inline constexpr std::array UInt16x3_operator_or_UInt16x3_args = { &UInt16x3_operator_or_UInt16x3_arg };

/// operator& with UInt16x3
Variable UInt16x3_operator_and_UInt16x3_arg;
Function UInt16x3_operator_and_UInt16x3;
inline constexpr std::array UInt16x3_operator_and_UInt16x3_args = { &UInt16x3_operator_and_UInt16x3_arg };

/// operator^ with UInt16x3
Variable UInt16x3_operator_xor_UInt16x3_arg;
Function UInt16x3_operator_xor_UInt16x3;
inline constexpr std::array UInt16x3_operator_xor_UInt16x3_args = { &UInt16x3_operator_xor_UInt16x3_arg };

/// operator<< with UInt16x3
Variable UInt16x3_operator_lsh_UInt16x3_arg;
Function UInt16x3_operator_lsh_UInt16x3;
inline constexpr std::array UInt16x3_operator_lsh_UInt16x3_args = { &UInt16x3_operator_lsh_UInt16x3_arg };

/// operator>> with UInt16x3
Variable UInt16x3_operator_rsh_UInt16x3_arg;
Function UInt16x3_operator_rsh_UInt16x3;
inline constexpr std::array UInt16x3_operator_rsh_UInt16x3_args = { &UInt16x3_operator_rsh_UInt16x3_arg };

/// operator|= with UInt16x3
Variable UInt16x3_operator_orasg_UInt16x3_arg;
Function UInt16x3_operator_orasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_orasg_UInt16x3_args = { &UInt16x3_operator_orasg_UInt16x3_arg };

/// operator&= with UInt16x3
Variable UInt16x3_operator_andasg_UInt16x3_arg;
Function UInt16x3_operator_andasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_andasg_UInt16x3_args = { &UInt16x3_operator_andasg_UInt16x3_arg };

/// operator^= with UInt16x3
Variable UInt16x3_operator_xorasg_UInt16x3_arg;
Function UInt16x3_operator_xorasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_xorasg_UInt16x3_args = { &UInt16x3_operator_xorasg_UInt16x3_arg };

/// operator<<= with UInt16x3
Variable UInt16x3_operator_lshasg_UInt16x3_arg;
Function UInt16x3_operator_lshasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_lshasg_UInt16x3_args = { &UInt16x3_operator_lshasg_UInt16x3_arg };

/// operator>>= with UInt16x3
Variable UInt16x3_operator_rhsasg_UInt16x3_arg;
Function UInt16x3_operator_rhsasg_UInt16x3;
inline constexpr std::array UInt16x3_operator_rhsasg_UInt16x3_args = { &UInt16x3_operator_rhsasg_UInt16x3_arg };

UInt16x3::UInt16x3()
{
    this->name = "u16x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 6;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    /// operator[] with Int32
    UInt16x3_operator_index_Int32_arg.name = "arg"_c;
    UInt16x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16x3_operator_index_Int32.name = "operator[]"_c;
    UInt16x3_operator_index_Int32.backendIndex = 716;
    UInt16x3_operator_index_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16x3_operator_index_Int32.parameters = UInt16x3_operator_index_Int32_args;
    Symbol::Resolved(&UInt16x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x3_operator_index_Int32)->signature = "u16 operator[](i32)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt32
    UInt16x3_operator_index_UInt32_arg.name = "arg"_c;
    UInt16x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16x3_operator_index_UInt32.name = "operator[]"_c;
    UInt16x3_operator_index_UInt32.backendIndex = 717;
    UInt16x3_operator_index_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16x3_operator_index_UInt32.parameters = UInt16x3_operator_index_UInt32_args;
    Symbol::Resolved(&UInt16x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x3_operator_index_UInt32)->signature = "u16 operator[](u32)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int16
    UInt16x3_operator_index_Int16_arg.name = "arg"_c;
    UInt16x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x3_operator_index_Int16.name = "operator[]"_c;
    UInt16x3_operator_index_Int16.backendIndex = 718;
    UInt16x3_operator_index_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16x3_operator_index_Int16.parameters = UInt16x3_operator_index_Int16_args;
    Symbol::Resolved(&UInt16x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x3_operator_index_Int16)->signature = "u16 operator[](i16)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt16
    UInt16x3_operator_index_UInt16_arg.name = "arg"_c;
    UInt16x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x3_operator_index_UInt16.name = "operator[]"_c;
    UInt16x3_operator_index_UInt16.backendIndex = 719;
    UInt16x3_operator_index_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16x3_operator_index_UInt16.parameters = UInt16x3_operator_index_UInt16_args;
    Symbol::Resolved(&UInt16x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_operator_index_UInt16)->signature = "u16 operator[](u16)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt16x3_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+ with UInt16x3
    UInt16x3_operator_add_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_add_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_add_UInt16x3.name = "operator+"_c;
    UInt16x3_operator_add_UInt16x3.backendIndex = 720;
    UInt16x3_operator_add_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_add_UInt16x3.parameters = UInt16x3_operator_add_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3)->signature = "u16x3 operator+(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3)->name = "operator+(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3)->nameWithVarNames = "operator+(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_add_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator- with UInt16x3
    UInt16x3_operator_sub_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_sub_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_sub_UInt16x3.name = "operator-"_c;
    UInt16x3_operator_sub_UInt16x3.backendIndex = 721;
    UInt16x3_operator_sub_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_sub_UInt16x3.parameters = UInt16x3_operator_sub_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3)->signature = "u16x3 operator-(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3)->name = "operator-(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3)->nameWithVarNames = "operator-(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_sub_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator* with UInt16x3
    UInt16x3_operator_mul_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_mul_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_mul_UInt16x3.name = "operator*"_c;
    UInt16x3_operator_mul_UInt16x3.backendIndex = 722;
    UInt16x3_operator_mul_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_mul_UInt16x3.parameters = UInt16x3_operator_mul_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3)->signature = "u16x3 operator*(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3)->name = "operator*(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3)->nameWithVarNames = "operator*(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mul_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator/ with UInt16x3
    UInt16x3_operator_div_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_div_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_div_UInt16x3.name = "operator/"_c;
    UInt16x3_operator_div_UInt16x3.backendIndex = 723;
    UInt16x3_operator_div_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_div_UInt16x3.parameters = UInt16x3_operator_div_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3)->signature = "u16x3 operator/(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3)->name = "operator/(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3)->nameWithVarNames = "operator/(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_div_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator% with UInt16x3
    UInt16x3_operator_mod_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_mod_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_mod_UInt16x3.name = "operator%"_c;
    UInt16x3_operator_mod_UInt16x3.backendIndex = 724;
    UInt16x3_operator_mod_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_mod_UInt16x3.parameters = UInt16x3_operator_mod_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3)->signature = "u16x3 operator%(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3)->name = "operator%(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3)->nameWithVarNames = "operator%(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mod_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator+= with UInt16x3
    UInt16x3_operator_addasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_addasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_addasg_UInt16x3.name = "operator+="_c;
    UInt16x3_operator_addasg_UInt16x3.backendIndex = 725;
    UInt16x3_operator_addasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_addasg_UInt16x3.parameters = UInt16x3_operator_addasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3)->signature = "u16x3 operator+=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3)->name = "operator+=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3)->nameWithVarNames = "operator+=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_addasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator-= with UInt16x3
    UInt16x3_operator_subasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_subasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_subasg_UInt16x3.name = "operator-="_c;
    UInt16x3_operator_subasg_UInt16x3.backendIndex = 726;
    UInt16x3_operator_subasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_subasg_UInt16x3.parameters = UInt16x3_operator_subasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3)->signature = "u16x3 operator-=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3)->name = "operator-=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3)->nameWithVarNames = "operator-=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_subasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator*= with UInt16x3
    UInt16x3_operator_mulasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_mulasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_mulasg_UInt16x3.name = "operator*="_c;
    UInt16x3_operator_mulasg_UInt16x3.backendIndex = 727;
    UInt16x3_operator_mulasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_mulasg_UInt16x3.parameters = UInt16x3_operator_mulasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3)->signature = "u16x3 operator*=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3)->name = "operator*=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3)->nameWithVarNames = "operator*=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_mulasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator/= with UInt16x3
    UInt16x3_operator_divasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_divasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_divasg_UInt16x3.name = "operator/="_c;
    UInt16x3_operator_divasg_UInt16x3.backendIndex = 728;
    UInt16x3_operator_divasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_divasg_UInt16x3.parameters = UInt16x3_operator_divasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3)->signature = "u16x3 operator/=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3)->name = "operator/=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3)->nameWithVarNames = "operator/=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_divasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator< with UInt16x3
    UInt16x3_operator_lt_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_lt_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_lt_UInt16x3.name = "operator<"_c;
    UInt16x3_operator_lt_UInt16x3.backendIndex = 729;
    UInt16x3_operator_lt_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt16x3_operator_lt_UInt16x3.parameters = UInt16x3_operator_lt_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3)->signature = "b8x3 operator<(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3)->name = "operator<(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3)->nameWithVarNames = "operator<(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lt_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator<= with UInt16x3
    UInt16x3_operator_lte_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_lte_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_lte_UInt16x3.name = "operator<="_c;
    UInt16x3_operator_lte_UInt16x3.backendIndex = 730;
    UInt16x3_operator_lte_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt16x3_operator_lte_UInt16x3.parameters = UInt16x3_operator_lte_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3)->signature = "b8x3 operator<=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3)->name = "operator<=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3)->nameWithVarNames = "operator<=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lte_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator> with UInt16x3
    UInt16x3_operator_gt_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_gt_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_gt_UInt16x3.name = "operator>"_c;
    UInt16x3_operator_gt_UInt16x3.backendIndex = 731;
    UInt16x3_operator_gt_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt16x3_operator_gt_UInt16x3.parameters = UInt16x3_operator_gt_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3)->signature = "b8x3 operator>(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3)->name = "operator>(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3)->nameWithVarNames = "operator>(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_gt_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator>= with UInt16x3
    UInt16x3_operator_gte_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_gte_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_gte_UInt16x3.name = "operator>="_c;
    UInt16x3_operator_gte_UInt16x3.backendIndex = 732;
    UInt16x3_operator_gte_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt16x3_operator_gte_UInt16x3.parameters = UInt16x3_operator_gte_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3)->signature = "b8x3 operator>=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3)->name = "operator>=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3)->nameWithVarNames = "operator>=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_gte_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with UInt16x3
    UInt16x3_operator_eq_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_eq_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_eq_UInt16x3.name = "operator=="_c;
    UInt16x3_operator_eq_UInt16x3.backendIndex = 733;
    UInt16x3_operator_eq_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt16x3_operator_eq_UInt16x3.parameters = UInt16x3_operator_eq_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3)->signature = "b8x3 operator==(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3)->name = "operator==(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3)->nameWithVarNames = "operator==(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_eq_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with UInt16x3
    UInt16x3_operator_neq_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_neq_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_neq_UInt16x3.name = "operator!="_c;
    UInt16x3_operator_neq_UInt16x3.backendIndex = 734;
    UInt16x3_operator_neq_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    UInt16x3_operator_neq_UInt16x3.parameters = UInt16x3_operator_neq_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3)->signature = "b8x3 operator!=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3)->name = "operator!=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3)->nameWithVarNames = "operator!=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_neq_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator* with Float16
    UInt16x3_operator_scale_Float16_arg.name = "arg"_c;
    UInt16x3_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt16x3_operator_scale_Float16.name = "operator*"_c;
    UInt16x3_operator_scale_Float16.backendIndex = 735;
    UInt16x3_operator_scale_Float16.returnType = Type::FullType { Float16x3Type.name };
    UInt16x3_operator_scale_Float16.parameters = UInt16x3_operator_scale_Float16_args;
    Symbol::Resolved(&UInt16x3_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x3_operator_scale_Float16)->signature = "f16x3 operator*(f16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_Float16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with UInt16
    UInt16x3_operator_scale_UInt16_arg.name = "arg"_c;
    UInt16x3_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x3_operator_scale_UInt16.name = "operator*"_c;
    UInt16x3_operator_scale_UInt16.backendIndex = 736;
    UInt16x3_operator_scale_UInt16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_scale_UInt16.parameters = UInt16x3_operator_scale_UInt16_args;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16)->signature = "u16x3 operator*(u16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_UInt16)->returnTypeSymbol = &UInt16x3Type;

    /// operator* with Int16
    UInt16x3_operator_scale_Int16_arg.name = "arg"_c;
    UInt16x3_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x3_operator_scale_Int16.name = "operator*"_c;
    UInt16x3_operator_scale_Int16.backendIndex = 737;
    UInt16x3_operator_scale_Int16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_scale_Int16.parameters = UInt16x3_operator_scale_Int16_args;
    Symbol::Resolved(&UInt16x3_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x3_operator_scale_Int16)->signature = "u16x3 operator*(i16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&UInt16x3_operator_scale_Int16)->returnTypeSymbol = &UInt16x3Type;

    /// operator| with UInt16x3
    UInt16x3_operator_or_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_or_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_or_UInt16x3.name = "operator|"_c;
    UInt16x3_operator_or_UInt16x3.backendIndex = 738;
    UInt16x3_operator_or_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_or_UInt16x3.parameters = UInt16x3_operator_or_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3)->signature = "u16x3 operator|(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3)->name = "operator|(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3)->nameWithVarNames = "operator|(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_or_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator& with UInt16x3
    UInt16x3_operator_and_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_and_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_and_UInt16x3.name = "operator&"_c;
    UInt16x3_operator_and_UInt16x3.backendIndex = 739;
    UInt16x3_operator_and_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_and_UInt16x3.parameters = UInt16x3_operator_and_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3)->signature = "u16x3 operator&(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3)->name = "operator&(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3)->nameWithVarNames = "operator&(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_and_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator^ with UInt16x3
    UInt16x3_operator_xor_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_xor_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_xor_UInt16x3.name = "operator^"_c;
    UInt16x3_operator_xor_UInt16x3.backendIndex = 740;
    UInt16x3_operator_xor_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_xor_UInt16x3.parameters = UInt16x3_operator_xor_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3)->signature = "u16x3 operator^(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3)->name = "operator^(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3)->nameWithVarNames = "operator^(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_xor_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator<< with UInt16x3
    UInt16x3_operator_lsh_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_lsh_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_lsh_UInt16x3.name = "operator<<"_c;
    UInt16x3_operator_lsh_UInt16x3.backendIndex = 741;
    UInt16x3_operator_lsh_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_lsh_UInt16x3.parameters = UInt16x3_operator_lsh_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3)->signature = "u16x3 operator<<(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3)->name = "operator<<(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3)->nameWithVarNames = "operator<<(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lsh_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator>> with UInt16x3
    UInt16x3_operator_rsh_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_rsh_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_rsh_UInt16x3.name = "operator>>"_c;
    UInt16x3_operator_rsh_UInt16x3.backendIndex = 742;
    UInt16x3_operator_rsh_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_rsh_UInt16x3.parameters = UInt16x3_operator_rsh_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3)->signature = "u16x3 operator>>(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3)->name = "operator>>(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3)->nameWithVarNames = "operator>>(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_rsh_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator|= with UInt16x3
    UInt16x3_operator_orasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_orasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_orasg_UInt16x3.name = "operator|="_c;
    UInt16x3_operator_orasg_UInt16x3.backendIndex = 743;
    UInt16x3_operator_orasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_orasg_UInt16x3.parameters = UInt16x3_operator_orasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3)->signature = "u16x3 operator|=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3)->name = "operator|=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3)->nameWithVarNames = "operator|=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_orasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator&= with UInt16x3
    UInt16x3_operator_andasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_andasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_andasg_UInt16x3.name = "operator&="_c;
    UInt16x3_operator_andasg_UInt16x3.backendIndex = 744;
    UInt16x3_operator_andasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_andasg_UInt16x3.parameters = UInt16x3_operator_andasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3)->signature = "u16x3 operator&=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3)->name = "operator&=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3)->nameWithVarNames = "operator&=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_andasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator^= with UInt16x3
    UInt16x3_operator_xorasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_xorasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_xorasg_UInt16x3.name = "operator^="_c;
    UInt16x3_operator_xorasg_UInt16x3.backendIndex = 745;
    UInt16x3_operator_xorasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_xorasg_UInt16x3.parameters = UInt16x3_operator_xorasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3)->signature = "u16x3 operator^=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3)->name = "operator^=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3)->nameWithVarNames = "operator^=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_xorasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator<<= with UInt16x3
    UInt16x3_operator_lshasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_lshasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_lshasg_UInt16x3.name = "operator<<="_c;
    UInt16x3_operator_lshasg_UInt16x3.backendIndex = 746;
    UInt16x3_operator_lshasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_lshasg_UInt16x3.parameters = UInt16x3_operator_lshasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3)->signature = "u16x3 operator<<=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3)->name = "operator<<=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3)->nameWithVarNames = "operator<<=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_lshasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// operator>>= with UInt16x3
    UInt16x3_operator_rhsasg_UInt16x3_arg.name = "arg"_c;
    UInt16x3_operator_rhsasg_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_operator_rhsasg_UInt16x3.name = "operator>>="_c;
    UInt16x3_operator_rhsasg_UInt16x3.backendIndex = 747;
    UInt16x3_operator_rhsasg_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_operator_rhsasg_UInt16x3.parameters = UInt16x3_operator_rhsasg_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3)->signature = "u16x3 operator>>=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3)->name = "operator>>=(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3)->nameWithVarNames = "operator>>=(arg : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_operator_rhsasg_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 304> { 
        std::pair{ "b"_c, &UInt16Type },
        std::pair{ "bb"_c, &UInt16x2Type },
        std::pair{ "bbb"_c, &UInt16x3Type },
        std::pair{ "bbbb"_c, &UInt16x4Type },
        std::pair{ "bbbg"_c, &UInt16x4Type },
        std::pair{ "bbbr"_c, &UInt16x4Type },
        std::pair{ "bbg"_c, &UInt16x3Type },
        std::pair{ "bbgb"_c, &UInt16x4Type },
        std::pair{ "bbgg"_c, &UInt16x4Type },
        std::pair{ "bbgr"_c, &UInt16x4Type },
        std::pair{ "bbr"_c, &UInt16x3Type },
        std::pair{ "bbrb"_c, &UInt16x4Type },
        std::pair{ "bbrg"_c, &UInt16x4Type },
        std::pair{ "bbrr"_c, &UInt16x4Type },
        std::pair{ "bg"_c, &UInt16x2Type },
        std::pair{ "bgb"_c, &UInt16x3Type },
        std::pair{ "bgbb"_c, &UInt16x4Type },
        std::pair{ "bgbg"_c, &UInt16x4Type },
        std::pair{ "bgbr"_c, &UInt16x4Type },
        std::pair{ "bgg"_c, &UInt16x3Type },
        std::pair{ "bggb"_c, &UInt16x4Type },
        std::pair{ "bggg"_c, &UInt16x4Type },
        std::pair{ "bggr"_c, &UInt16x4Type },
        std::pair{ "bgr"_c, &UInt16x3Type },
        std::pair{ "bgrb"_c, &UInt16x4Type },
        std::pair{ "bgrg"_c, &UInt16x4Type },
        std::pair{ "bgrr"_c, &UInt16x4Type },
        std::pair{ "br"_c, &UInt16x2Type },
        std::pair{ "brb"_c, &UInt16x3Type },
        std::pair{ "brbb"_c, &UInt16x4Type },
        std::pair{ "brbg"_c, &UInt16x4Type },
        std::pair{ "brbr"_c, &UInt16x4Type },
        std::pair{ "brg"_c, &UInt16x3Type },
        std::pair{ "brgb"_c, &UInt16x4Type },
        std::pair{ "brgg"_c, &UInt16x4Type },
        std::pair{ "brgr"_c, &UInt16x4Type },
        std::pair{ "brr"_c, &UInt16x3Type },
        std::pair{ "brrb"_c, &UInt16x4Type },
        std::pair{ "brrg"_c, &UInt16x4Type },
        std::pair{ "brrr"_c, &UInt16x4Type },
        std::pair{ "g"_c, &UInt16Type },
        std::pair{ "gb"_c, &UInt16x2Type },
        std::pair{ "gbb"_c, &UInt16x3Type },
        std::pair{ "gbbb"_c, &UInt16x4Type },
        std::pair{ "gbbg"_c, &UInt16x4Type },
        std::pair{ "gbbr"_c, &UInt16x4Type },
        std::pair{ "gbg"_c, &UInt16x3Type },
        std::pair{ "gbgb"_c, &UInt16x4Type },
        std::pair{ "gbgg"_c, &UInt16x4Type },
        std::pair{ "gbgr"_c, &UInt16x4Type },
        std::pair{ "gbr"_c, &UInt16x3Type },
        std::pair{ "gbrb"_c, &UInt16x4Type },
        std::pair{ "gbrg"_c, &UInt16x4Type },
        std::pair{ "gbrr"_c, &UInt16x4Type },
        std::pair{ "gg"_c, &UInt16x2Type },
        std::pair{ "ggb"_c, &UInt16x3Type },
        std::pair{ "ggbb"_c, &UInt16x4Type },
        std::pair{ "ggbg"_c, &UInt16x4Type },
        std::pair{ "ggbr"_c, &UInt16x4Type },
        std::pair{ "ggg"_c, &UInt16x3Type },
        std::pair{ "gggb"_c, &UInt16x4Type },
        std::pair{ "gggg"_c, &UInt16x4Type },
        std::pair{ "gggr"_c, &UInt16x4Type },
        std::pair{ "ggr"_c, &UInt16x3Type },
        std::pair{ "ggrb"_c, &UInt16x4Type },
        std::pair{ "ggrg"_c, &UInt16x4Type },
        std::pair{ "ggrr"_c, &UInt16x4Type },
        std::pair{ "gr"_c, &UInt16x2Type },
        std::pair{ "grb"_c, &UInt16x3Type },
        std::pair{ "grbb"_c, &UInt16x4Type },
        std::pair{ "grbg"_c, &UInt16x4Type },
        std::pair{ "grbr"_c, &UInt16x4Type },
        std::pair{ "grg"_c, &UInt16x3Type },
        std::pair{ "grgb"_c, &UInt16x4Type },
        std::pair{ "grgg"_c, &UInt16x4Type },
        std::pair{ "grgr"_c, &UInt16x4Type },
        std::pair{ "grr"_c, &UInt16x3Type },
        std::pair{ "grrb"_c, &UInt16x4Type },
        std::pair{ "grrg"_c, &UInt16x4Type },
        std::pair{ "grrr"_c, &UInt16x4Type },
        std::pair{ "operator!="_c, &UInt16x3_operator_neq_UInt16x3 },
        std::pair{ "operator!=(u16x3)"_c, &UInt16x3_operator_neq_UInt16x3 },
        std::pair{ "operator%"_c, &UInt16x3_operator_mod_UInt16x3 },
        std::pair{ "operator%(u16x3)"_c, &UInt16x3_operator_mod_UInt16x3 },
        std::pair{ "operator&"_c, &UInt16x3_operator_and_UInt16x3 },
        std::pair{ "operator&(u16x3)"_c, &UInt16x3_operator_and_UInt16x3 },
        std::pair{ "operator&="_c, &UInt16x3_operator_andasg_UInt16x3 },
        std::pair{ "operator&=(u16x3)"_c, &UInt16x3_operator_andasg_UInt16x3 },
        std::pair{ "operator*"_c, &UInt16x3_operator_mul_UInt16x3 },
        std::pair{ "operator*"_c, &UInt16x3_operator_scale_Float16 },
        std::pair{ "operator*"_c, &UInt16x3_operator_scale_UInt16 },
        std::pair{ "operator*"_c, &UInt16x3_operator_scale_Int16 },
        std::pair{ "operator*(f16)"_c, &UInt16x3_operator_scale_Float16 },
        std::pair{ "operator*(i16)"_c, &UInt16x3_operator_scale_Int16 },
        std::pair{ "operator*(u16)"_c, &UInt16x3_operator_scale_UInt16 },
        std::pair{ "operator*(u16x3)"_c, &UInt16x3_operator_mul_UInt16x3 },
        std::pair{ "operator*="_c, &UInt16x3_operator_mulasg_UInt16x3 },
        std::pair{ "operator*=(u16x3)"_c, &UInt16x3_operator_mulasg_UInt16x3 },
        std::pair{ "operator+"_c, &UInt16x3_operator_add_UInt16x3 },
        std::pair{ "operator+(u16x3)"_c, &UInt16x3_operator_add_UInt16x3 },
        std::pair{ "operator+="_c, &UInt16x3_operator_addasg_UInt16x3 },
        std::pair{ "operator+=(u16x3)"_c, &UInt16x3_operator_addasg_UInt16x3 },
        std::pair{ "operator-"_c, &UInt16x3_operator_sub_UInt16x3 },
        std::pair{ "operator-(u16x3)"_c, &UInt16x3_operator_sub_UInt16x3 },
        std::pair{ "operator-="_c, &UInt16x3_operator_subasg_UInt16x3 },
        std::pair{ "operator-=(u16x3)"_c, &UInt16x3_operator_subasg_UInt16x3 },
        std::pair{ "operator/"_c, &UInt16x3_operator_div_UInt16x3 },
        std::pair{ "operator/(u16x3)"_c, &UInt16x3_operator_div_UInt16x3 },
        std::pair{ "operator/="_c, &UInt16x3_operator_divasg_UInt16x3 },
        std::pair{ "operator/=(u16x3)"_c, &UInt16x3_operator_divasg_UInt16x3 },
        std::pair{ "operator<"_c, &UInt16x3_operator_lt_UInt16x3 },
        std::pair{ "operator<(u16x3)"_c, &UInt16x3_operator_lt_UInt16x3 },
        std::pair{ "operator<<"_c, &UInt16x3_operator_lsh_UInt16x3 },
        std::pair{ "operator<<(u16x3)"_c, &UInt16x3_operator_lsh_UInt16x3 },
        std::pair{ "operator<<="_c, &UInt16x3_operator_lshasg_UInt16x3 },
        std::pair{ "operator<<=(u16x3)"_c, &UInt16x3_operator_lshasg_UInt16x3 },
        std::pair{ "operator<="_c, &UInt16x3_operator_lte_UInt16x3 },
        std::pair{ "operator<=(u16x3)"_c, &UInt16x3_operator_lte_UInt16x3 },
        std::pair{ "operator=="_c, &UInt16x3_operator_eq_UInt16x3 },
        std::pair{ "operator==(u16x3)"_c, &UInt16x3_operator_eq_UInt16x3 },
        std::pair{ "operator>"_c, &UInt16x3_operator_gt_UInt16x3 },
        std::pair{ "operator>(u16x3)"_c, &UInt16x3_operator_gt_UInt16x3 },
        std::pair{ "operator>="_c, &UInt16x3_operator_gte_UInt16x3 },
        std::pair{ "operator>=(u16x3)"_c, &UInt16x3_operator_gte_UInt16x3 },
        std::pair{ "operator>>"_c, &UInt16x3_operator_rsh_UInt16x3 },
        std::pair{ "operator>>(u16x3)"_c, &UInt16x3_operator_rsh_UInt16x3 },
        std::pair{ "operator>>="_c, &UInt16x3_operator_rhsasg_UInt16x3 },
        std::pair{ "operator>>=(u16x3)"_c, &UInt16x3_operator_rhsasg_UInt16x3 },
        std::pair{ "operator[]"_c, &UInt16x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &UInt16x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &UInt16x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &UInt16x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &UInt16x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &UInt16x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &UInt16x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &UInt16x3_operator_index_UInt32 },
        std::pair{ "operator^"_c, &UInt16x3_operator_xor_UInt16x3 },
        std::pair{ "operator^(u16x3)"_c, &UInt16x3_operator_xor_UInt16x3 },
        std::pair{ "operator^="_c, &UInt16x3_operator_xorasg_UInt16x3 },
        std::pair{ "operator^=(u16x3)"_c, &UInt16x3_operator_xorasg_UInt16x3 },
        std::pair{ "operator|"_c, &UInt16x3_operator_or_UInt16x3 },
        std::pair{ "operator|(u16x3)"_c, &UInt16x3_operator_or_UInt16x3 },
        std::pair{ "operator|="_c, &UInt16x3_operator_orasg_UInt16x3 },
        std::pair{ "operator|=(u16x3)"_c, &UInt16x3_operator_orasg_UInt16x3 },
        std::pair{ "r"_c, &UInt16Type },
        std::pair{ "rb"_c, &UInt16x2Type },
        std::pair{ "rbb"_c, &UInt16x3Type },
        std::pair{ "rbbb"_c, &UInt16x4Type },
        std::pair{ "rbbg"_c, &UInt16x4Type },
        std::pair{ "rbbr"_c, &UInt16x4Type },
        std::pair{ "rbg"_c, &UInt16x3Type },
        std::pair{ "rbgb"_c, &UInt16x4Type },
        std::pair{ "rbgg"_c, &UInt16x4Type },
        std::pair{ "rbgr"_c, &UInt16x4Type },
        std::pair{ "rbr"_c, &UInt16x3Type },
        std::pair{ "rbrb"_c, &UInt16x4Type },
        std::pair{ "rbrg"_c, &UInt16x4Type },
        std::pair{ "rbrr"_c, &UInt16x4Type },
        std::pair{ "rg"_c, &UInt16x2Type },
        std::pair{ "rgb"_c, &UInt16x3Type },
        std::pair{ "rgbb"_c, &UInt16x4Type },
        std::pair{ "rgbg"_c, &UInt16x4Type },
        std::pair{ "rgbr"_c, &UInt16x4Type },
        std::pair{ "rgg"_c, &UInt16x3Type },
        std::pair{ "rggb"_c, &UInt16x4Type },
        std::pair{ "rggg"_c, &UInt16x4Type },
        std::pair{ "rggr"_c, &UInt16x4Type },
        std::pair{ "rgr"_c, &UInt16x3Type },
        std::pair{ "rgrb"_c, &UInt16x4Type },
        std::pair{ "rgrg"_c, &UInt16x4Type },
        std::pair{ "rgrr"_c, &UInt16x4Type },
        std::pair{ "rr"_c, &UInt16x2Type },
        std::pair{ "rrb"_c, &UInt16x3Type },
        std::pair{ "rrbb"_c, &UInt16x4Type },
        std::pair{ "rrbg"_c, &UInt16x4Type },
        std::pair{ "rrbr"_c, &UInt16x4Type },
        std::pair{ "rrg"_c, &UInt16x3Type },
        std::pair{ "rrgb"_c, &UInt16x4Type },
        std::pair{ "rrgg"_c, &UInt16x4Type },
        std::pair{ "rrgr"_c, &UInt16x4Type },
        std::pair{ "rrr"_c, &UInt16x3Type },
        std::pair{ "rrrb"_c, &UInt16x4Type },
        std::pair{ "rrrg"_c, &UInt16x4Type },
        std::pair{ "rrrr"_c, &UInt16x4Type },
        std::pair{ "x"_c, &UInt16Type },
        std::pair{ "xx"_c, &UInt16x2Type },
        std::pair{ "xxx"_c, &UInt16x3Type },
        std::pair{ "xxxx"_c, &UInt16x4Type },
        std::pair{ "xxxy"_c, &UInt16x4Type },
        std::pair{ "xxxz"_c, &UInt16x4Type },
        std::pair{ "xxy"_c, &UInt16x3Type },
        std::pair{ "xxyx"_c, &UInt16x4Type },
        std::pair{ "xxyy"_c, &UInt16x4Type },
        std::pair{ "xxyz"_c, &UInt16x4Type },
        std::pair{ "xxz"_c, &UInt16x3Type },
        std::pair{ "xxzx"_c, &UInt16x4Type },
        std::pair{ "xxzy"_c, &UInt16x4Type },
        std::pair{ "xxzz"_c, &UInt16x4Type },
        std::pair{ "xy"_c, &UInt16x2Type },
        std::pair{ "xyx"_c, &UInt16x3Type },
        std::pair{ "xyxx"_c, &UInt16x4Type },
        std::pair{ "xyxy"_c, &UInt16x4Type },
        std::pair{ "xyxz"_c, &UInt16x4Type },
        std::pair{ "xyy"_c, &UInt16x3Type },
        std::pair{ "xyyx"_c, &UInt16x4Type },
        std::pair{ "xyyy"_c, &UInt16x4Type },
        std::pair{ "xyyz"_c, &UInt16x4Type },
        std::pair{ "xyz"_c, &UInt16x3Type },
        std::pair{ "xyzx"_c, &UInt16x4Type },
        std::pair{ "xyzy"_c, &UInt16x4Type },
        std::pair{ "xyzz"_c, &UInt16x4Type },
        std::pair{ "xz"_c, &UInt16x2Type },
        std::pair{ "xzx"_c, &UInt16x3Type },
        std::pair{ "xzxx"_c, &UInt16x4Type },
        std::pair{ "xzxy"_c, &UInt16x4Type },
        std::pair{ "xzxz"_c, &UInt16x4Type },
        std::pair{ "xzy"_c, &UInt16x3Type },
        std::pair{ "xzyx"_c, &UInt16x4Type },
        std::pair{ "xzyy"_c, &UInt16x4Type },
        std::pair{ "xzyz"_c, &UInt16x4Type },
        std::pair{ "xzz"_c, &UInt16x3Type },
        std::pair{ "xzzx"_c, &UInt16x4Type },
        std::pair{ "xzzy"_c, &UInt16x4Type },
        std::pair{ "xzzz"_c, &UInt16x4Type },
        std::pair{ "y"_c, &UInt16Type },
        std::pair{ "yx"_c, &UInt16x2Type },
        std::pair{ "yxx"_c, &UInt16x3Type },
        std::pair{ "yxxx"_c, &UInt16x4Type },
        std::pair{ "yxxy"_c, &UInt16x4Type },
        std::pair{ "yxxz"_c, &UInt16x4Type },
        std::pair{ "yxy"_c, &UInt16x3Type },
        std::pair{ "yxyx"_c, &UInt16x4Type },
        std::pair{ "yxyy"_c, &UInt16x4Type },
        std::pair{ "yxyz"_c, &UInt16x4Type },
        std::pair{ "yxz"_c, &UInt16x3Type },
        std::pair{ "yxzx"_c, &UInt16x4Type },
        std::pair{ "yxzy"_c, &UInt16x4Type },
        std::pair{ "yxzz"_c, &UInt16x4Type },
        std::pair{ "yy"_c, &UInt16x2Type },
        std::pair{ "yyx"_c, &UInt16x3Type },
        std::pair{ "yyxx"_c, &UInt16x4Type },
        std::pair{ "yyxy"_c, &UInt16x4Type },
        std::pair{ "yyxz"_c, &UInt16x4Type },
        std::pair{ "yyy"_c, &UInt16x3Type },
        std::pair{ "yyyx"_c, &UInt16x4Type },
        std::pair{ "yyyy"_c, &UInt16x4Type },
        std::pair{ "yyyz"_c, &UInt16x4Type },
        std::pair{ "yyz"_c, &UInt16x3Type },
        std::pair{ "yyzx"_c, &UInt16x4Type },
        std::pair{ "yyzy"_c, &UInt16x4Type },
        std::pair{ "yyzz"_c, &UInt16x4Type },
        std::pair{ "yz"_c, &UInt16x2Type },
        std::pair{ "yzx"_c, &UInt16x3Type },
        std::pair{ "yzxx"_c, &UInt16x4Type },
        std::pair{ "yzxy"_c, &UInt16x4Type },
        std::pair{ "yzxz"_c, &UInt16x4Type },
        std::pair{ "yzy"_c, &UInt16x3Type },
        std::pair{ "yzyx"_c, &UInt16x4Type },
        std::pair{ "yzyy"_c, &UInt16x4Type },
        std::pair{ "yzyz"_c, &UInt16x4Type },
        std::pair{ "yzz"_c, &UInt16x3Type },
        std::pair{ "yzzx"_c, &UInt16x4Type },
        std::pair{ "yzzy"_c, &UInt16x4Type },
        std::pair{ "yzzz"_c, &UInt16x4Type },
        std::pair{ "z"_c, &UInt16Type },
        std::pair{ "zx"_c, &UInt16x2Type },
        std::pair{ "zxx"_c, &UInt16x3Type },
        std::pair{ "zxxx"_c, &UInt16x4Type },
        std::pair{ "zxxy"_c, &UInt16x4Type },
        std::pair{ "zxxz"_c, &UInt16x4Type },
        std::pair{ "zxy"_c, &UInt16x3Type },
        std::pair{ "zxyx"_c, &UInt16x4Type },
        std::pair{ "zxyy"_c, &UInt16x4Type },
        std::pair{ "zxyz"_c, &UInt16x4Type },
        std::pair{ "zxz"_c, &UInt16x3Type },
        std::pair{ "zxzx"_c, &UInt16x4Type },
        std::pair{ "zxzy"_c, &UInt16x4Type },
        std::pair{ "zxzz"_c, &UInt16x4Type },
        std::pair{ "zy"_c, &UInt16x2Type },
        std::pair{ "zyx"_c, &UInt16x3Type },
        std::pair{ "zyxx"_c, &UInt16x4Type },
        std::pair{ "zyxy"_c, &UInt16x4Type },
        std::pair{ "zyxz"_c, &UInt16x4Type },
        std::pair{ "zyy"_c, &UInt16x3Type },
        std::pair{ "zyyx"_c, &UInt16x4Type },
        std::pair{ "zyyy"_c, &UInt16x4Type },
        std::pair{ "zyyz"_c, &UInt16x4Type },
        std::pair{ "zyz"_c, &UInt16x3Type },
        std::pair{ "zyzx"_c, &UInt16x4Type },
        std::pair{ "zyzy"_c, &UInt16x4Type },
        std::pair{ "zyzz"_c, &UInt16x4Type },
        std::pair{ "zz"_c, &UInt16x2Type },
        std::pair{ "zzx"_c, &UInt16x3Type },
        std::pair{ "zzxx"_c, &UInt16x4Type },
        std::pair{ "zzxy"_c, &UInt16x4Type },
        std::pair{ "zzxz"_c, &UInt16x4Type },
        std::pair{ "zzy"_c, &UInt16x3Type },
        std::pair{ "zzyx"_c, &UInt16x4Type },
        std::pair{ "zzyy"_c, &UInt16x4Type },
        std::pair{ "zzyz"_c, &UInt16x4Type },
        std::pair{ "zzz"_c, &UInt16x3Type },
        std::pair{ "zzzx"_c, &UInt16x4Type },
        std::pair{ "zzzy"_c, &UInt16x4Type },
        std::pair{ "zzzz"_c, &UInt16x4Type }
    };
}
UInt16x3 UInt16x3Type;

/// operator[] with Int32
Variable Int16x3_operator_index_Int32_arg;
Function Int16x3_operator_index_Int32;
inline constexpr std::array Int16x3_operator_index_Int32_args = { &Int16x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int16x3_operator_index_UInt32_arg;
Function Int16x3_operator_index_UInt32;
inline constexpr std::array Int16x3_operator_index_UInt32_args = { &Int16x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int16x3_operator_index_Int16_arg;
Function Int16x3_operator_index_Int16;
inline constexpr std::array Int16x3_operator_index_Int16_args = { &Int16x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int16x3_operator_index_UInt16_arg;
Function Int16x3_operator_index_UInt16;
inline constexpr std::array Int16x3_operator_index_UInt16_args = { &Int16x3_operator_index_UInt16_arg };

/// operator+ with Int16x3
Variable Int16x3_operator_add_Int16x3_arg;
Function Int16x3_operator_add_Int16x3;
inline constexpr std::array Int16x3_operator_add_Int16x3_args = { &Int16x3_operator_add_Int16x3_arg };

/// operator- with Int16x3
Variable Int16x3_operator_sub_Int16x3_arg;
Function Int16x3_operator_sub_Int16x3;
inline constexpr std::array Int16x3_operator_sub_Int16x3_args = { &Int16x3_operator_sub_Int16x3_arg };

/// operator* with Int16x3
Variable Int16x3_operator_mul_Int16x3_arg;
Function Int16x3_operator_mul_Int16x3;
inline constexpr std::array Int16x3_operator_mul_Int16x3_args = { &Int16x3_operator_mul_Int16x3_arg };

/// operator/ with Int16x3
Variable Int16x3_operator_div_Int16x3_arg;
Function Int16x3_operator_div_Int16x3;
inline constexpr std::array Int16x3_operator_div_Int16x3_args = { &Int16x3_operator_div_Int16x3_arg };

/// operator% with Int16x3
Variable Int16x3_operator_mod_Int16x3_arg;
Function Int16x3_operator_mod_Int16x3;
inline constexpr std::array Int16x3_operator_mod_Int16x3_args = { &Int16x3_operator_mod_Int16x3_arg };

/// operator+= with Int16x3
Variable Int16x3_operator_addasg_Int16x3_arg;
Function Int16x3_operator_addasg_Int16x3;
inline constexpr std::array Int16x3_operator_addasg_Int16x3_args = { &Int16x3_operator_addasg_Int16x3_arg };

/// operator-= with Int16x3
Variable Int16x3_operator_subasg_Int16x3_arg;
Function Int16x3_operator_subasg_Int16x3;
inline constexpr std::array Int16x3_operator_subasg_Int16x3_args = { &Int16x3_operator_subasg_Int16x3_arg };

/// operator*= with Int16x3
Variable Int16x3_operator_mulasg_Int16x3_arg;
Function Int16x3_operator_mulasg_Int16x3;
inline constexpr std::array Int16x3_operator_mulasg_Int16x3_args = { &Int16x3_operator_mulasg_Int16x3_arg };

/// operator/= with Int16x3
Variable Int16x3_operator_divasg_Int16x3_arg;
Function Int16x3_operator_divasg_Int16x3;
inline constexpr std::array Int16x3_operator_divasg_Int16x3_args = { &Int16x3_operator_divasg_Int16x3_arg };

/// operator< with Int16x3
Variable Int16x3_operator_lt_Int16x3_arg;
Function Int16x3_operator_lt_Int16x3;
inline constexpr std::array Int16x3_operator_lt_Int16x3_args = { &Int16x3_operator_lt_Int16x3_arg };

/// operator<= with Int16x3
Variable Int16x3_operator_lte_Int16x3_arg;
Function Int16x3_operator_lte_Int16x3;
inline constexpr std::array Int16x3_operator_lte_Int16x3_args = { &Int16x3_operator_lte_Int16x3_arg };

/// operator> with Int16x3
Variable Int16x3_operator_gt_Int16x3_arg;
Function Int16x3_operator_gt_Int16x3;
inline constexpr std::array Int16x3_operator_gt_Int16x3_args = { &Int16x3_operator_gt_Int16x3_arg };

/// operator>= with Int16x3
Variable Int16x3_operator_gte_Int16x3_arg;
Function Int16x3_operator_gte_Int16x3;
inline constexpr std::array Int16x3_operator_gte_Int16x3_args = { &Int16x3_operator_gte_Int16x3_arg };

/// operator== with Int16x3
Variable Int16x3_operator_eq_Int16x3_arg;
Function Int16x3_operator_eq_Int16x3;
inline constexpr std::array Int16x3_operator_eq_Int16x3_args = { &Int16x3_operator_eq_Int16x3_arg };

/// operator!= with Int16x3
Variable Int16x3_operator_neq_Int16x3_arg;
Function Int16x3_operator_neq_Int16x3;
inline constexpr std::array Int16x3_operator_neq_Int16x3_args = { &Int16x3_operator_neq_Int16x3_arg };

/// operator* with Float16
Variable Int16x3_operator_scale_Float16_arg;
Function Int16x3_operator_scale_Float16;
inline constexpr std::array Int16x3_operator_scale_Float16_args = { &Int16x3_operator_scale_Float16_arg };

/// operator* with UInt16
Variable Int16x3_operator_scale_UInt16_arg;
Function Int16x3_operator_scale_UInt16;
inline constexpr std::array Int16x3_operator_scale_UInt16_args = { &Int16x3_operator_scale_UInt16_arg };

/// operator* with Int16
Variable Int16x3_operator_scale_Int16_arg;
Function Int16x3_operator_scale_Int16;
inline constexpr std::array Int16x3_operator_scale_Int16_args = { &Int16x3_operator_scale_Int16_arg };

/// operator| with Int16x3
Variable Int16x3_operator_or_Int16x3_arg;
Function Int16x3_operator_or_Int16x3;
inline constexpr std::array Int16x3_operator_or_Int16x3_args = { &Int16x3_operator_or_Int16x3_arg };

/// operator& with Int16x3
Variable Int16x3_operator_and_Int16x3_arg;
Function Int16x3_operator_and_Int16x3;
inline constexpr std::array Int16x3_operator_and_Int16x3_args = { &Int16x3_operator_and_Int16x3_arg };

/// operator^ with Int16x3
Variable Int16x3_operator_xor_Int16x3_arg;
Function Int16x3_operator_xor_Int16x3;
inline constexpr std::array Int16x3_operator_xor_Int16x3_args = { &Int16x3_operator_xor_Int16x3_arg };

/// operator<< with Int16x3
Variable Int16x3_operator_lsh_Int16x3_arg;
Function Int16x3_operator_lsh_Int16x3;
inline constexpr std::array Int16x3_operator_lsh_Int16x3_args = { &Int16x3_operator_lsh_Int16x3_arg };

/// operator>> with Int16x3
Variable Int16x3_operator_rsh_Int16x3_arg;
Function Int16x3_operator_rsh_Int16x3;
inline constexpr std::array Int16x3_operator_rsh_Int16x3_args = { &Int16x3_operator_rsh_Int16x3_arg };

/// operator|= with Int16x3
Variable Int16x3_operator_orasg_Int16x3_arg;
Function Int16x3_operator_orasg_Int16x3;
inline constexpr std::array Int16x3_operator_orasg_Int16x3_args = { &Int16x3_operator_orasg_Int16x3_arg };

/// operator&= with Int16x3
Variable Int16x3_operator_andasg_Int16x3_arg;
Function Int16x3_operator_andasg_Int16x3;
inline constexpr std::array Int16x3_operator_andasg_Int16x3_args = { &Int16x3_operator_andasg_Int16x3_arg };

/// operator^= with Int16x3
Variable Int16x3_operator_xorasg_Int16x3_arg;
Function Int16x3_operator_xorasg_Int16x3;
inline constexpr std::array Int16x3_operator_xorasg_Int16x3_args = { &Int16x3_operator_xorasg_Int16x3_arg };

/// operator<<= with Int16x3
Variable Int16x3_operator_lshasg_Int16x3_arg;
Function Int16x3_operator_lshasg_Int16x3;
inline constexpr std::array Int16x3_operator_lshasg_Int16x3_args = { &Int16x3_operator_lshasg_Int16x3_arg };

/// operator>>= with Int16x3
Variable Int16x3_operator_rhsasg_Int16x3_arg;
Function Int16x3_operator_rhsasg_Int16x3;
inline constexpr std::array Int16x3_operator_rhsasg_Int16x3_args = { &Int16x3_operator_rhsasg_Int16x3_arg };

Int16x3::Int16x3()
{
    this->name = "i16x3"_c;
    this->columnSize = 3;
    this->rowSize = 1;
    this->byteSize = 6;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    /// operator[] with Int32
    Int16x3_operator_index_Int32_arg.name = "arg"_c;
    Int16x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16x3_operator_index_Int32.name = "operator[]"_c;
    Int16x3_operator_index_Int32.backendIndex = 765;
    Int16x3_operator_index_Int32.returnType = Type::FullType { Int16Type.name };
    Int16x3_operator_index_Int32.parameters = Int16x3_operator_index_Int32_args;
    Symbol::Resolved(&Int16x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x3_operator_index_Int32)->signature = "i16 operator[](i32)"_c;
    Symbol::Resolved(&Int16x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int16x3_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int16x3_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt32
    Int16x3_operator_index_UInt32_arg.name = "arg"_c;
    Int16x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16x3_operator_index_UInt32.name = "operator[]"_c;
    Int16x3_operator_index_UInt32.backendIndex = 766;
    Int16x3_operator_index_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16x3_operator_index_UInt32.parameters = Int16x3_operator_index_UInt32_args;
    Symbol::Resolved(&Int16x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x3_operator_index_UInt32)->signature = "i16 operator[](u32)"_c;
    Symbol::Resolved(&Int16x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int16x3_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int16x3_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int16
    Int16x3_operator_index_Int16_arg.name = "arg"_c;
    Int16x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x3_operator_index_Int16.name = "operator[]"_c;
    Int16x3_operator_index_Int16.backendIndex = 767;
    Int16x3_operator_index_Int16.returnType = Type::FullType { Int16Type.name };
    Int16x3_operator_index_Int16.parameters = Int16x3_operator_index_Int16_args;
    Symbol::Resolved(&Int16x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_operator_index_Int16)->signature = "i16 operator[](i16)"_c;
    Symbol::Resolved(&Int16x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int16x3_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int16x3_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt16
    Int16x3_operator_index_UInt16_arg.name = "arg"_c;
    Int16x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x3_operator_index_UInt16.name = "operator[]"_c;
    Int16x3_operator_index_UInt16.backendIndex = 768;
    Int16x3_operator_index_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16x3_operator_index_UInt16.parameters = Int16x3_operator_index_UInt16_args;
    Symbol::Resolved(&Int16x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x3_operator_index_UInt16)->signature = "i16 operator[](u16)"_c;
    Symbol::Resolved(&Int16x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int16x3_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int16x3_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    /// operator+ with Int16x3
    Int16x3_operator_add_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_add_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_add_Int16x3.name = "operator+"_c;
    Int16x3_operator_add_Int16x3.backendIndex = 769;
    Int16x3_operator_add_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_add_Int16x3.parameters = Int16x3_operator_add_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_add_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_add_Int16x3)->signature = "i16x3 operator+(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_add_Int16x3)->name = "operator+(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_add_Int16x3)->nameWithVarNames = "operator+(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_add_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator- with Int16x3
    Int16x3_operator_sub_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_sub_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_sub_Int16x3.name = "operator-"_c;
    Int16x3_operator_sub_Int16x3.backendIndex = 770;
    Int16x3_operator_sub_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_sub_Int16x3.parameters = Int16x3_operator_sub_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3)->signature = "i16x3 operator-(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3)->name = "operator-(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3)->nameWithVarNames = "operator-(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_sub_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator* with Int16x3
    Int16x3_operator_mul_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_mul_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_mul_Int16x3.name = "operator*"_c;
    Int16x3_operator_mul_Int16x3.backendIndex = 771;
    Int16x3_operator_mul_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_mul_Int16x3.parameters = Int16x3_operator_mul_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3)->signature = "i16x3 operator*(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3)->name = "operator*(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3)->nameWithVarNames = "operator*(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mul_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator/ with Int16x3
    Int16x3_operator_div_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_div_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_div_Int16x3.name = "operator/"_c;
    Int16x3_operator_div_Int16x3.backendIndex = 772;
    Int16x3_operator_div_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_div_Int16x3.parameters = Int16x3_operator_div_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_div_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_div_Int16x3)->signature = "i16x3 operator/(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_div_Int16x3)->name = "operator/(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_div_Int16x3)->nameWithVarNames = "operator/(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_div_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator% with Int16x3
    Int16x3_operator_mod_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_mod_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_mod_Int16x3.name = "operator%"_c;
    Int16x3_operator_mod_Int16x3.backendIndex = 773;
    Int16x3_operator_mod_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_mod_Int16x3.parameters = Int16x3_operator_mod_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3)->signature = "i16x3 operator%(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3)->name = "operator%(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3)->nameWithVarNames = "operator%(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mod_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator+= with Int16x3
    Int16x3_operator_addasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_addasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_addasg_Int16x3.name = "operator+="_c;
    Int16x3_operator_addasg_Int16x3.backendIndex = 774;
    Int16x3_operator_addasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_addasg_Int16x3.parameters = Int16x3_operator_addasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3)->signature = "i16x3 operator+=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3)->name = "operator+=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3)->nameWithVarNames = "operator+=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_addasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator-= with Int16x3
    Int16x3_operator_subasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_subasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_subasg_Int16x3.name = "operator-="_c;
    Int16x3_operator_subasg_Int16x3.backendIndex = 775;
    Int16x3_operator_subasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_subasg_Int16x3.parameters = Int16x3_operator_subasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3)->signature = "i16x3 operator-=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3)->name = "operator-=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3)->nameWithVarNames = "operator-=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_subasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator*= with Int16x3
    Int16x3_operator_mulasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_mulasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_mulasg_Int16x3.name = "operator*="_c;
    Int16x3_operator_mulasg_Int16x3.backendIndex = 776;
    Int16x3_operator_mulasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_mulasg_Int16x3.parameters = Int16x3_operator_mulasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3)->signature = "i16x3 operator*=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3)->name = "operator*=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3)->nameWithVarNames = "operator*=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_mulasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator/= with Int16x3
    Int16x3_operator_divasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_divasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_divasg_Int16x3.name = "operator/="_c;
    Int16x3_operator_divasg_Int16x3.backendIndex = 777;
    Int16x3_operator_divasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_divasg_Int16x3.parameters = Int16x3_operator_divasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3)->signature = "i16x3 operator/=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3)->name = "operator/=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3)->nameWithVarNames = "operator/=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_divasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator< with Int16x3
    Int16x3_operator_lt_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_lt_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_lt_Int16x3.name = "operator<"_c;
    Int16x3_operator_lt_Int16x3.backendIndex = 778;
    Int16x3_operator_lt_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Int16x3_operator_lt_Int16x3.parameters = Int16x3_operator_lt_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3)->signature = "b8x3 operator<(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3)->name = "operator<(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3)->nameWithVarNames = "operator<(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lt_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator<= with Int16x3
    Int16x3_operator_lte_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_lte_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_lte_Int16x3.name = "operator<="_c;
    Int16x3_operator_lte_Int16x3.backendIndex = 779;
    Int16x3_operator_lte_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Int16x3_operator_lte_Int16x3.parameters = Int16x3_operator_lte_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3)->signature = "b8x3 operator<=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3)->name = "operator<=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3)->nameWithVarNames = "operator<=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lte_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator> with Int16x3
    Int16x3_operator_gt_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_gt_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_gt_Int16x3.name = "operator>"_c;
    Int16x3_operator_gt_Int16x3.backendIndex = 780;
    Int16x3_operator_gt_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Int16x3_operator_gt_Int16x3.parameters = Int16x3_operator_gt_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3)->signature = "b8x3 operator>(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3)->name = "operator>(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3)->nameWithVarNames = "operator>(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_gt_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator>= with Int16x3
    Int16x3_operator_gte_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_gte_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_gte_Int16x3.name = "operator>="_c;
    Int16x3_operator_gte_Int16x3.backendIndex = 781;
    Int16x3_operator_gte_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Int16x3_operator_gte_Int16x3.parameters = Int16x3_operator_gte_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3)->signature = "b8x3 operator>=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3)->name = "operator>=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3)->nameWithVarNames = "operator>=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_gte_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator== with Int16x3
    Int16x3_operator_eq_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_eq_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_eq_Int16x3.name = "operator=="_c;
    Int16x3_operator_eq_Int16x3.backendIndex = 782;
    Int16x3_operator_eq_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Int16x3_operator_eq_Int16x3.parameters = Int16x3_operator_eq_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3)->signature = "b8x3 operator==(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3)->name = "operator==(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3)->nameWithVarNames = "operator==(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_eq_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator!= with Int16x3
    Int16x3_operator_neq_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_neq_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_neq_Int16x3.name = "operator!="_c;
    Int16x3_operator_neq_Int16x3.backendIndex = 783;
    Int16x3_operator_neq_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Int16x3_operator_neq_Int16x3.parameters = Int16x3_operator_neq_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3)->signature = "b8x3 operator!=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3)->name = "operator!=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3)->nameWithVarNames = "operator!=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_neq_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// operator* with Float16
    Int16x3_operator_scale_Float16_arg.name = "arg"_c;
    Int16x3_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int16x3_operator_scale_Float16.name = "operator*"_c;
    Int16x3_operator_scale_Float16.backendIndex = 784;
    Int16x3_operator_scale_Float16.returnType = Type::FullType { Float16x3Type.name };
    Int16x3_operator_scale_Float16.parameters = Int16x3_operator_scale_Float16_args;
    Symbol::Resolved(&Int16x3_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x3_operator_scale_Float16)->signature = "f16x3 operator*(f16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_Float16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with UInt16
    Int16x3_operator_scale_UInt16_arg.name = "arg"_c;
    Int16x3_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x3_operator_scale_UInt16.name = "operator*"_c;
    Int16x3_operator_scale_UInt16.backendIndex = 785;
    Int16x3_operator_scale_UInt16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_scale_UInt16.parameters = Int16x3_operator_scale_UInt16_args;
    Symbol::Resolved(&Int16x3_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x3_operator_scale_UInt16)->signature = "i16x3 operator*(u16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_UInt16)->returnTypeSymbol = &Int16x3Type;

    /// operator* with Int16
    Int16x3_operator_scale_Int16_arg.name = "arg"_c;
    Int16x3_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x3_operator_scale_Int16.name = "operator*"_c;
    Int16x3_operator_scale_Int16.backendIndex = 786;
    Int16x3_operator_scale_Int16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_scale_Int16.parameters = Int16x3_operator_scale_Int16_args;
    Symbol::Resolved(&Int16x3_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_operator_scale_Int16)->signature = "i16x3 operator*(i16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Int16x3_operator_scale_Int16)->returnTypeSymbol = &Int16x3Type;

    /// operator| with Int16x3
    Int16x3_operator_or_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_or_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_or_Int16x3.name = "operator|"_c;
    Int16x3_operator_or_Int16x3.backendIndex = 787;
    Int16x3_operator_or_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_or_Int16x3.parameters = Int16x3_operator_or_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_or_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_or_Int16x3)->signature = "i16x3 operator|(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_or_Int16x3)->name = "operator|(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_or_Int16x3)->nameWithVarNames = "operator|(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_or_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator& with Int16x3
    Int16x3_operator_and_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_and_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_and_Int16x3.name = "operator&"_c;
    Int16x3_operator_and_Int16x3.backendIndex = 788;
    Int16x3_operator_and_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_and_Int16x3.parameters = Int16x3_operator_and_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_and_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_and_Int16x3)->signature = "i16x3 operator&(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_and_Int16x3)->name = "operator&(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_and_Int16x3)->nameWithVarNames = "operator&(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_and_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator^ with Int16x3
    Int16x3_operator_xor_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_xor_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_xor_Int16x3.name = "operator^"_c;
    Int16x3_operator_xor_Int16x3.backendIndex = 789;
    Int16x3_operator_xor_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_xor_Int16x3.parameters = Int16x3_operator_xor_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3)->signature = "i16x3 operator^(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3)->name = "operator^(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3)->nameWithVarNames = "operator^(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_xor_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator<< with Int16x3
    Int16x3_operator_lsh_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_lsh_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_lsh_Int16x3.name = "operator<<"_c;
    Int16x3_operator_lsh_Int16x3.backendIndex = 790;
    Int16x3_operator_lsh_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_lsh_Int16x3.parameters = Int16x3_operator_lsh_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3)->signature = "i16x3 operator<<(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3)->name = "operator<<(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3)->nameWithVarNames = "operator<<(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lsh_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator>> with Int16x3
    Int16x3_operator_rsh_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_rsh_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_rsh_Int16x3.name = "operator>>"_c;
    Int16x3_operator_rsh_Int16x3.backendIndex = 791;
    Int16x3_operator_rsh_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_rsh_Int16x3.parameters = Int16x3_operator_rsh_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3)->signature = "i16x3 operator>>(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3)->name = "operator>>(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3)->nameWithVarNames = "operator>>(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_rsh_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator|= with Int16x3
    Int16x3_operator_orasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_orasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_orasg_Int16x3.name = "operator|="_c;
    Int16x3_operator_orasg_Int16x3.backendIndex = 792;
    Int16x3_operator_orasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_orasg_Int16x3.parameters = Int16x3_operator_orasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3)->signature = "i16x3 operator|=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3)->name = "operator|=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3)->nameWithVarNames = "operator|=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_orasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator&= with Int16x3
    Int16x3_operator_andasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_andasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_andasg_Int16x3.name = "operator&="_c;
    Int16x3_operator_andasg_Int16x3.backendIndex = 793;
    Int16x3_operator_andasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_andasg_Int16x3.parameters = Int16x3_operator_andasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3)->signature = "i16x3 operator&=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3)->name = "operator&=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3)->nameWithVarNames = "operator&=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_andasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator^= with Int16x3
    Int16x3_operator_xorasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_xorasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_xorasg_Int16x3.name = "operator^="_c;
    Int16x3_operator_xorasg_Int16x3.backendIndex = 794;
    Int16x3_operator_xorasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_xorasg_Int16x3.parameters = Int16x3_operator_xorasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3)->signature = "i16x3 operator^=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3)->name = "operator^=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3)->nameWithVarNames = "operator^=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_xorasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator<<= with Int16x3
    Int16x3_operator_lshasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_lshasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_lshasg_Int16x3.name = "operator<<="_c;
    Int16x3_operator_lshasg_Int16x3.backendIndex = 795;
    Int16x3_operator_lshasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_lshasg_Int16x3.parameters = Int16x3_operator_lshasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3)->signature = "i16x3 operator<<=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3)->name = "operator<<=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3)->nameWithVarNames = "operator<<=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_lshasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// operator>>= with Int16x3
    Int16x3_operator_rhsasg_Int16x3_arg.name = "arg"_c;
    Int16x3_operator_rhsasg_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_operator_rhsasg_Int16x3.name = "operator>>="_c;
    Int16x3_operator_rhsasg_Int16x3.backendIndex = 796;
    Int16x3_operator_rhsasg_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_operator_rhsasg_Int16x3.parameters = Int16x3_operator_rhsasg_Int16x3_args;
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3)->signature = "i16x3 operator>>=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3)->name = "operator>>=(i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3)->nameWithVarNames = "operator>>=(arg : i16x3)"_c;
    Symbol::Resolved(&Int16x3_operator_rhsasg_Int16x3)->returnTypeSymbol = &Int16x3Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 304> { 
        std::pair{ "b"_c, &Int16Type },
        std::pair{ "bb"_c, &Int16x2Type },
        std::pair{ "bbb"_c, &Int16x3Type },
        std::pair{ "bbbb"_c, &Int16x4Type },
        std::pair{ "bbbg"_c, &Int16x4Type },
        std::pair{ "bbbr"_c, &Int16x4Type },
        std::pair{ "bbg"_c, &Int16x3Type },
        std::pair{ "bbgb"_c, &Int16x4Type },
        std::pair{ "bbgg"_c, &Int16x4Type },
        std::pair{ "bbgr"_c, &Int16x4Type },
        std::pair{ "bbr"_c, &Int16x3Type },
        std::pair{ "bbrb"_c, &Int16x4Type },
        std::pair{ "bbrg"_c, &Int16x4Type },
        std::pair{ "bbrr"_c, &Int16x4Type },
        std::pair{ "bg"_c, &Int16x2Type },
        std::pair{ "bgb"_c, &Int16x3Type },
        std::pair{ "bgbb"_c, &Int16x4Type },
        std::pair{ "bgbg"_c, &Int16x4Type },
        std::pair{ "bgbr"_c, &Int16x4Type },
        std::pair{ "bgg"_c, &Int16x3Type },
        std::pair{ "bggb"_c, &Int16x4Type },
        std::pair{ "bggg"_c, &Int16x4Type },
        std::pair{ "bggr"_c, &Int16x4Type },
        std::pair{ "bgr"_c, &Int16x3Type },
        std::pair{ "bgrb"_c, &Int16x4Type },
        std::pair{ "bgrg"_c, &Int16x4Type },
        std::pair{ "bgrr"_c, &Int16x4Type },
        std::pair{ "br"_c, &Int16x2Type },
        std::pair{ "brb"_c, &Int16x3Type },
        std::pair{ "brbb"_c, &Int16x4Type },
        std::pair{ "brbg"_c, &Int16x4Type },
        std::pair{ "brbr"_c, &Int16x4Type },
        std::pair{ "brg"_c, &Int16x3Type },
        std::pair{ "brgb"_c, &Int16x4Type },
        std::pair{ "brgg"_c, &Int16x4Type },
        std::pair{ "brgr"_c, &Int16x4Type },
        std::pair{ "brr"_c, &Int16x3Type },
        std::pair{ "brrb"_c, &Int16x4Type },
        std::pair{ "brrg"_c, &Int16x4Type },
        std::pair{ "brrr"_c, &Int16x4Type },
        std::pair{ "g"_c, &Int16Type },
        std::pair{ "gb"_c, &Int16x2Type },
        std::pair{ "gbb"_c, &Int16x3Type },
        std::pair{ "gbbb"_c, &Int16x4Type },
        std::pair{ "gbbg"_c, &Int16x4Type },
        std::pair{ "gbbr"_c, &Int16x4Type },
        std::pair{ "gbg"_c, &Int16x3Type },
        std::pair{ "gbgb"_c, &Int16x4Type },
        std::pair{ "gbgg"_c, &Int16x4Type },
        std::pair{ "gbgr"_c, &Int16x4Type },
        std::pair{ "gbr"_c, &Int16x3Type },
        std::pair{ "gbrb"_c, &Int16x4Type },
        std::pair{ "gbrg"_c, &Int16x4Type },
        std::pair{ "gbrr"_c, &Int16x4Type },
        std::pair{ "gg"_c, &Int16x2Type },
        std::pair{ "ggb"_c, &Int16x3Type },
        std::pair{ "ggbb"_c, &Int16x4Type },
        std::pair{ "ggbg"_c, &Int16x4Type },
        std::pair{ "ggbr"_c, &Int16x4Type },
        std::pair{ "ggg"_c, &Int16x3Type },
        std::pair{ "gggb"_c, &Int16x4Type },
        std::pair{ "gggg"_c, &Int16x4Type },
        std::pair{ "gggr"_c, &Int16x4Type },
        std::pair{ "ggr"_c, &Int16x3Type },
        std::pair{ "ggrb"_c, &Int16x4Type },
        std::pair{ "ggrg"_c, &Int16x4Type },
        std::pair{ "ggrr"_c, &Int16x4Type },
        std::pair{ "gr"_c, &Int16x2Type },
        std::pair{ "grb"_c, &Int16x3Type },
        std::pair{ "grbb"_c, &Int16x4Type },
        std::pair{ "grbg"_c, &Int16x4Type },
        std::pair{ "grbr"_c, &Int16x4Type },
        std::pair{ "grg"_c, &Int16x3Type },
        std::pair{ "grgb"_c, &Int16x4Type },
        std::pair{ "grgg"_c, &Int16x4Type },
        std::pair{ "grgr"_c, &Int16x4Type },
        std::pair{ "grr"_c, &Int16x3Type },
        std::pair{ "grrb"_c, &Int16x4Type },
        std::pair{ "grrg"_c, &Int16x4Type },
        std::pair{ "grrr"_c, &Int16x4Type },
        std::pair{ "operator!="_c, &Int16x3_operator_neq_Int16x3 },
        std::pair{ "operator!=(i16x3)"_c, &Int16x3_operator_neq_Int16x3 },
        std::pair{ "operator%"_c, &Int16x3_operator_mod_Int16x3 },
        std::pair{ "operator%(i16x3)"_c, &Int16x3_operator_mod_Int16x3 },
        std::pair{ "operator&"_c, &Int16x3_operator_and_Int16x3 },
        std::pair{ "operator&(i16x3)"_c, &Int16x3_operator_and_Int16x3 },
        std::pair{ "operator&="_c, &Int16x3_operator_andasg_Int16x3 },
        std::pair{ "operator&=(i16x3)"_c, &Int16x3_operator_andasg_Int16x3 },
        std::pair{ "operator*"_c, &Int16x3_operator_mul_Int16x3 },
        std::pair{ "operator*"_c, &Int16x3_operator_scale_Float16 },
        std::pair{ "operator*"_c, &Int16x3_operator_scale_UInt16 },
        std::pair{ "operator*"_c, &Int16x3_operator_scale_Int16 },
        std::pair{ "operator*(f16)"_c, &Int16x3_operator_scale_Float16 },
        std::pair{ "operator*(i16)"_c, &Int16x3_operator_scale_Int16 },
        std::pair{ "operator*(i16x3)"_c, &Int16x3_operator_mul_Int16x3 },
        std::pair{ "operator*(u16)"_c, &Int16x3_operator_scale_UInt16 },
        std::pair{ "operator*="_c, &Int16x3_operator_mulasg_Int16x3 },
        std::pair{ "operator*=(i16x3)"_c, &Int16x3_operator_mulasg_Int16x3 },
        std::pair{ "operator+"_c, &Int16x3_operator_add_Int16x3 },
        std::pair{ "operator+(i16x3)"_c, &Int16x3_operator_add_Int16x3 },
        std::pair{ "operator+="_c, &Int16x3_operator_addasg_Int16x3 },
        std::pair{ "operator+=(i16x3)"_c, &Int16x3_operator_addasg_Int16x3 },
        std::pair{ "operator-"_c, &Int16x3_operator_sub_Int16x3 },
        std::pair{ "operator-(i16x3)"_c, &Int16x3_operator_sub_Int16x3 },
        std::pair{ "operator-="_c, &Int16x3_operator_subasg_Int16x3 },
        std::pair{ "operator-=(i16x3)"_c, &Int16x3_operator_subasg_Int16x3 },
        std::pair{ "operator/"_c, &Int16x3_operator_div_Int16x3 },
        std::pair{ "operator/(i16x3)"_c, &Int16x3_operator_div_Int16x3 },
        std::pair{ "operator/="_c, &Int16x3_operator_divasg_Int16x3 },
        std::pair{ "operator/=(i16x3)"_c, &Int16x3_operator_divasg_Int16x3 },
        std::pair{ "operator<"_c, &Int16x3_operator_lt_Int16x3 },
        std::pair{ "operator<(i16x3)"_c, &Int16x3_operator_lt_Int16x3 },
        std::pair{ "operator<<"_c, &Int16x3_operator_lsh_Int16x3 },
        std::pair{ "operator<<(i16x3)"_c, &Int16x3_operator_lsh_Int16x3 },
        std::pair{ "operator<<="_c, &Int16x3_operator_lshasg_Int16x3 },
        std::pair{ "operator<<=(i16x3)"_c, &Int16x3_operator_lshasg_Int16x3 },
        std::pair{ "operator<="_c, &Int16x3_operator_lte_Int16x3 },
        std::pair{ "operator<=(i16x3)"_c, &Int16x3_operator_lte_Int16x3 },
        std::pair{ "operator=="_c, &Int16x3_operator_eq_Int16x3 },
        std::pair{ "operator==(i16x3)"_c, &Int16x3_operator_eq_Int16x3 },
        std::pair{ "operator>"_c, &Int16x3_operator_gt_Int16x3 },
        std::pair{ "operator>(i16x3)"_c, &Int16x3_operator_gt_Int16x3 },
        std::pair{ "operator>="_c, &Int16x3_operator_gte_Int16x3 },
        std::pair{ "operator>=(i16x3)"_c, &Int16x3_operator_gte_Int16x3 },
        std::pair{ "operator>>"_c, &Int16x3_operator_rsh_Int16x3 },
        std::pair{ "operator>>(i16x3)"_c, &Int16x3_operator_rsh_Int16x3 },
        std::pair{ "operator>>="_c, &Int16x3_operator_rhsasg_Int16x3 },
        std::pair{ "operator>>=(i16x3)"_c, &Int16x3_operator_rhsasg_Int16x3 },
        std::pair{ "operator[]"_c, &Int16x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Int16x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Int16x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Int16x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Int16x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Int16x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Int16x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Int16x3_operator_index_UInt32 },
        std::pair{ "operator^"_c, &Int16x3_operator_xor_Int16x3 },
        std::pair{ "operator^(i16x3)"_c, &Int16x3_operator_xor_Int16x3 },
        std::pair{ "operator^="_c, &Int16x3_operator_xorasg_Int16x3 },
        std::pair{ "operator^=(i16x3)"_c, &Int16x3_operator_xorasg_Int16x3 },
        std::pair{ "operator|"_c, &Int16x3_operator_or_Int16x3 },
        std::pair{ "operator|(i16x3)"_c, &Int16x3_operator_or_Int16x3 },
        std::pair{ "operator|="_c, &Int16x3_operator_orasg_Int16x3 },
        std::pair{ "operator|=(i16x3)"_c, &Int16x3_operator_orasg_Int16x3 },
        std::pair{ "r"_c, &Int16Type },
        std::pair{ "rb"_c, &Int16x2Type },
        std::pair{ "rbb"_c, &Int16x3Type },
        std::pair{ "rbbb"_c, &Int16x4Type },
        std::pair{ "rbbg"_c, &Int16x4Type },
        std::pair{ "rbbr"_c, &Int16x4Type },
        std::pair{ "rbg"_c, &Int16x3Type },
        std::pair{ "rbgb"_c, &Int16x4Type },
        std::pair{ "rbgg"_c, &Int16x4Type },
        std::pair{ "rbgr"_c, &Int16x4Type },
        std::pair{ "rbr"_c, &Int16x3Type },
        std::pair{ "rbrb"_c, &Int16x4Type },
        std::pair{ "rbrg"_c, &Int16x4Type },
        std::pair{ "rbrr"_c, &Int16x4Type },
        std::pair{ "rg"_c, &Int16x2Type },
        std::pair{ "rgb"_c, &Int16x3Type },
        std::pair{ "rgbb"_c, &Int16x4Type },
        std::pair{ "rgbg"_c, &Int16x4Type },
        std::pair{ "rgbr"_c, &Int16x4Type },
        std::pair{ "rgg"_c, &Int16x3Type },
        std::pair{ "rggb"_c, &Int16x4Type },
        std::pair{ "rggg"_c, &Int16x4Type },
        std::pair{ "rggr"_c, &Int16x4Type },
        std::pair{ "rgr"_c, &Int16x3Type },
        std::pair{ "rgrb"_c, &Int16x4Type },
        std::pair{ "rgrg"_c, &Int16x4Type },
        std::pair{ "rgrr"_c, &Int16x4Type },
        std::pair{ "rr"_c, &Int16x2Type },
        std::pair{ "rrb"_c, &Int16x3Type },
        std::pair{ "rrbb"_c, &Int16x4Type },
        std::pair{ "rrbg"_c, &Int16x4Type },
        std::pair{ "rrbr"_c, &Int16x4Type },
        std::pair{ "rrg"_c, &Int16x3Type },
        std::pair{ "rrgb"_c, &Int16x4Type },
        std::pair{ "rrgg"_c, &Int16x4Type },
        std::pair{ "rrgr"_c, &Int16x4Type },
        std::pair{ "rrr"_c, &Int16x3Type },
        std::pair{ "rrrb"_c, &Int16x4Type },
        std::pair{ "rrrg"_c, &Int16x4Type },
        std::pair{ "rrrr"_c, &Int16x4Type },
        std::pair{ "x"_c, &Int16Type },
        std::pair{ "xx"_c, &Int16x2Type },
        std::pair{ "xxx"_c, &Int16x3Type },
        std::pair{ "xxxx"_c, &Int16x4Type },
        std::pair{ "xxxy"_c, &Int16x4Type },
        std::pair{ "xxxz"_c, &Int16x4Type },
        std::pair{ "xxy"_c, &Int16x3Type },
        std::pair{ "xxyx"_c, &Int16x4Type },
        std::pair{ "xxyy"_c, &Int16x4Type },
        std::pair{ "xxyz"_c, &Int16x4Type },
        std::pair{ "xxz"_c, &Int16x3Type },
        std::pair{ "xxzx"_c, &Int16x4Type },
        std::pair{ "xxzy"_c, &Int16x4Type },
        std::pair{ "xxzz"_c, &Int16x4Type },
        std::pair{ "xy"_c, &Int16x2Type },
        std::pair{ "xyx"_c, &Int16x3Type },
        std::pair{ "xyxx"_c, &Int16x4Type },
        std::pair{ "xyxy"_c, &Int16x4Type },
        std::pair{ "xyxz"_c, &Int16x4Type },
        std::pair{ "xyy"_c, &Int16x3Type },
        std::pair{ "xyyx"_c, &Int16x4Type },
        std::pair{ "xyyy"_c, &Int16x4Type },
        std::pair{ "xyyz"_c, &Int16x4Type },
        std::pair{ "xyz"_c, &Int16x3Type },
        std::pair{ "xyzx"_c, &Int16x4Type },
        std::pair{ "xyzy"_c, &Int16x4Type },
        std::pair{ "xyzz"_c, &Int16x4Type },
        std::pair{ "xz"_c, &Int16x2Type },
        std::pair{ "xzx"_c, &Int16x3Type },
        std::pair{ "xzxx"_c, &Int16x4Type },
        std::pair{ "xzxy"_c, &Int16x4Type },
        std::pair{ "xzxz"_c, &Int16x4Type },
        std::pair{ "xzy"_c, &Int16x3Type },
        std::pair{ "xzyx"_c, &Int16x4Type },
        std::pair{ "xzyy"_c, &Int16x4Type },
        std::pair{ "xzyz"_c, &Int16x4Type },
        std::pair{ "xzz"_c, &Int16x3Type },
        std::pair{ "xzzx"_c, &Int16x4Type },
        std::pair{ "xzzy"_c, &Int16x4Type },
        std::pair{ "xzzz"_c, &Int16x4Type },
        std::pair{ "y"_c, &Int16Type },
        std::pair{ "yx"_c, &Int16x2Type },
        std::pair{ "yxx"_c, &Int16x3Type },
        std::pair{ "yxxx"_c, &Int16x4Type },
        std::pair{ "yxxy"_c, &Int16x4Type },
        std::pair{ "yxxz"_c, &Int16x4Type },
        std::pair{ "yxy"_c, &Int16x3Type },
        std::pair{ "yxyx"_c, &Int16x4Type },
        std::pair{ "yxyy"_c, &Int16x4Type },
        std::pair{ "yxyz"_c, &Int16x4Type },
        std::pair{ "yxz"_c, &Int16x3Type },
        std::pair{ "yxzx"_c, &Int16x4Type },
        std::pair{ "yxzy"_c, &Int16x4Type },
        std::pair{ "yxzz"_c, &Int16x4Type },
        std::pair{ "yy"_c, &Int16x2Type },
        std::pair{ "yyx"_c, &Int16x3Type },
        std::pair{ "yyxx"_c, &Int16x4Type },
        std::pair{ "yyxy"_c, &Int16x4Type },
        std::pair{ "yyxz"_c, &Int16x4Type },
        std::pair{ "yyy"_c, &Int16x3Type },
        std::pair{ "yyyx"_c, &Int16x4Type },
        std::pair{ "yyyy"_c, &Int16x4Type },
        std::pair{ "yyyz"_c, &Int16x4Type },
        std::pair{ "yyz"_c, &Int16x3Type },
        std::pair{ "yyzx"_c, &Int16x4Type },
        std::pair{ "yyzy"_c, &Int16x4Type },
        std::pair{ "yyzz"_c, &Int16x4Type },
        std::pair{ "yz"_c, &Int16x2Type },
        std::pair{ "yzx"_c, &Int16x3Type },
        std::pair{ "yzxx"_c, &Int16x4Type },
        std::pair{ "yzxy"_c, &Int16x4Type },
        std::pair{ "yzxz"_c, &Int16x4Type },
        std::pair{ "yzy"_c, &Int16x3Type },
        std::pair{ "yzyx"_c, &Int16x4Type },
        std::pair{ "yzyy"_c, &Int16x4Type },
        std::pair{ "yzyz"_c, &Int16x4Type },
        std::pair{ "yzz"_c, &Int16x3Type },
        std::pair{ "yzzx"_c, &Int16x4Type },
        std::pair{ "yzzy"_c, &Int16x4Type },
        std::pair{ "yzzz"_c, &Int16x4Type },
        std::pair{ "z"_c, &Int16Type },
        std::pair{ "zx"_c, &Int16x2Type },
        std::pair{ "zxx"_c, &Int16x3Type },
        std::pair{ "zxxx"_c, &Int16x4Type },
        std::pair{ "zxxy"_c, &Int16x4Type },
        std::pair{ "zxxz"_c, &Int16x4Type },
        std::pair{ "zxy"_c, &Int16x3Type },
        std::pair{ "zxyx"_c, &Int16x4Type },
        std::pair{ "zxyy"_c, &Int16x4Type },
        std::pair{ "zxyz"_c, &Int16x4Type },
        std::pair{ "zxz"_c, &Int16x3Type },
        std::pair{ "zxzx"_c, &Int16x4Type },
        std::pair{ "zxzy"_c, &Int16x4Type },
        std::pair{ "zxzz"_c, &Int16x4Type },
        std::pair{ "zy"_c, &Int16x2Type },
        std::pair{ "zyx"_c, &Int16x3Type },
        std::pair{ "zyxx"_c, &Int16x4Type },
        std::pair{ "zyxy"_c, &Int16x4Type },
        std::pair{ "zyxz"_c, &Int16x4Type },
        std::pair{ "zyy"_c, &Int16x3Type },
        std::pair{ "zyyx"_c, &Int16x4Type },
        std::pair{ "zyyy"_c, &Int16x4Type },
        std::pair{ "zyyz"_c, &Int16x4Type },
        std::pair{ "zyz"_c, &Int16x3Type },
        std::pair{ "zyzx"_c, &Int16x4Type },
        std::pair{ "zyzy"_c, &Int16x4Type },
        std::pair{ "zyzz"_c, &Int16x4Type },
        std::pair{ "zz"_c, &Int16x2Type },
        std::pair{ "zzx"_c, &Int16x3Type },
        std::pair{ "zzxx"_c, &Int16x4Type },
        std::pair{ "zzxy"_c, &Int16x4Type },
        std::pair{ "zzxz"_c, &Int16x4Type },
        std::pair{ "zzy"_c, &Int16x3Type },
        std::pair{ "zzyx"_c, &Int16x4Type },
        std::pair{ "zzyy"_c, &Int16x4Type },
        std::pair{ "zzyz"_c, &Int16x4Type },
        std::pair{ "zzz"_c, &Int16x3Type },
        std::pair{ "zzzx"_c, &Int16x4Type },
        std::pair{ "zzzy"_c, &Int16x4Type },
        std::pair{ "zzzz"_c, &Int16x4Type }
    };
}
Int16x3 Int16x3Type;

/// operator[] with Int32
Variable Float32x4_operator_index_Int32_arg;
Function Float32x4_operator_index_Int32;
inline constexpr std::array Float32x4_operator_index_Int32_args = { &Float32x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x4_operator_index_UInt32_arg;
Function Float32x4_operator_index_UInt32;
inline constexpr std::array Float32x4_operator_index_UInt32_args = { &Float32x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x4_operator_index_Int16_arg;
Function Float32x4_operator_index_Int16;
inline constexpr std::array Float32x4_operator_index_Int16_args = { &Float32x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x4_operator_index_UInt16_arg;
Function Float32x4_operator_index_UInt16;
inline constexpr std::array Float32x4_operator_index_UInt16_args = { &Float32x4_operator_index_UInt16_arg };

/// operator+ with Float32x4
Variable Float32x4_operator_add_Float32x4_arg;
Function Float32x4_operator_add_Float32x4;
inline constexpr std::array Float32x4_operator_add_Float32x4_args = { &Float32x4_operator_add_Float32x4_arg };

/// operator- with Float32x4
Variable Float32x4_operator_sub_Float32x4_arg;
Function Float32x4_operator_sub_Float32x4;
inline constexpr std::array Float32x4_operator_sub_Float32x4_args = { &Float32x4_operator_sub_Float32x4_arg };

/// operator* with Float32x4
Variable Float32x4_operator_mul_Float32x4_arg;
Function Float32x4_operator_mul_Float32x4;
inline constexpr std::array Float32x4_operator_mul_Float32x4_args = { &Float32x4_operator_mul_Float32x4_arg };

/// operator/ with Float32x4
Variable Float32x4_operator_div_Float32x4_arg;
Function Float32x4_operator_div_Float32x4;
inline constexpr std::array Float32x4_operator_div_Float32x4_args = { &Float32x4_operator_div_Float32x4_arg };

/// operator% with Float32x4
Variable Float32x4_operator_mod_Float32x4_arg;
Function Float32x4_operator_mod_Float32x4;
inline constexpr std::array Float32x4_operator_mod_Float32x4_args = { &Float32x4_operator_mod_Float32x4_arg };

/// operator+= with Float32x4
Variable Float32x4_operator_addasg_Float32x4_arg;
Function Float32x4_operator_addasg_Float32x4;
inline constexpr std::array Float32x4_operator_addasg_Float32x4_args = { &Float32x4_operator_addasg_Float32x4_arg };

/// operator-= with Float32x4
Variable Float32x4_operator_subasg_Float32x4_arg;
Function Float32x4_operator_subasg_Float32x4;
inline constexpr std::array Float32x4_operator_subasg_Float32x4_args = { &Float32x4_operator_subasg_Float32x4_arg };

/// operator*= with Float32x4
Variable Float32x4_operator_mulasg_Float32x4_arg;
Function Float32x4_operator_mulasg_Float32x4;
inline constexpr std::array Float32x4_operator_mulasg_Float32x4_args = { &Float32x4_operator_mulasg_Float32x4_arg };

/// operator/= with Float32x4
Variable Float32x4_operator_divasg_Float32x4_arg;
Function Float32x4_operator_divasg_Float32x4;
inline constexpr std::array Float32x4_operator_divasg_Float32x4_args = { &Float32x4_operator_divasg_Float32x4_arg };

/// operator< with Float32x4
Variable Float32x4_operator_lt_Float32x4_arg;
Function Float32x4_operator_lt_Float32x4;
inline constexpr std::array Float32x4_operator_lt_Float32x4_args = { &Float32x4_operator_lt_Float32x4_arg };

/// operator<= with Float32x4
Variable Float32x4_operator_lte_Float32x4_arg;
Function Float32x4_operator_lte_Float32x4;
inline constexpr std::array Float32x4_operator_lte_Float32x4_args = { &Float32x4_operator_lte_Float32x4_arg };

/// operator> with Float32x4
Variable Float32x4_operator_gt_Float32x4_arg;
Function Float32x4_operator_gt_Float32x4;
inline constexpr std::array Float32x4_operator_gt_Float32x4_args = { &Float32x4_operator_gt_Float32x4_arg };

/// operator>= with Float32x4
Variable Float32x4_operator_gte_Float32x4_arg;
Function Float32x4_operator_gte_Float32x4;
inline constexpr std::array Float32x4_operator_gte_Float32x4_args = { &Float32x4_operator_gte_Float32x4_arg };

/// operator== with Float32x4
Variable Float32x4_operator_eq_Float32x4_arg;
Function Float32x4_operator_eq_Float32x4;
inline constexpr std::array Float32x4_operator_eq_Float32x4_args = { &Float32x4_operator_eq_Float32x4_arg };

/// operator!= with Float32x4
Variable Float32x4_operator_neq_Float32x4_arg;
Function Float32x4_operator_neq_Float32x4;
inline constexpr std::array Float32x4_operator_neq_Float32x4_args = { &Float32x4_operator_neq_Float32x4_arg };

/// operator* with Float32
Variable Float32x4_operator_scale_Float32_arg;
Function Float32x4_operator_scale_Float32;
inline constexpr std::array Float32x4_operator_scale_Float32_args = { &Float32x4_operator_scale_Float32_arg };

/// operator* with UInt32
Variable Float32x4_operator_scale_UInt32_arg;
Function Float32x4_operator_scale_UInt32;
inline constexpr std::array Float32x4_operator_scale_UInt32_args = { &Float32x4_operator_scale_UInt32_arg };

/// operator* with Int32
Variable Float32x4_operator_scale_Int32_arg;
Function Float32x4_operator_scale_Int32;
inline constexpr std::array Float32x4_operator_scale_Int32_args = { &Float32x4_operator_scale_Int32_arg };

/// operator* with Float32x4x2
Variable Float32x4_operator_transform_Float32x4x2_arg;
Function Float32x4_operator_transform_Float32x4x2;
inline constexpr std::array Float32x4_operator_transform_Float32x4x2_args = { &Float32x4_operator_transform_Float32x4x2_arg };

/// operator* with Float32x4x3
Variable Float32x4_operator_transform_Float32x4x3_arg;
Function Float32x4_operator_transform_Float32x4x3;
inline constexpr std::array Float32x4_operator_transform_Float32x4x3_args = { &Float32x4_operator_transform_Float32x4x3_arg };

/// operator* with Float32x4x4
Variable Float32x4_operator_transform_Float32x4x4_arg;
Function Float32x4_operator_transform_Float32x4x4;
inline constexpr std::array Float32x4_operator_transform_Float32x4x4_args = { &Float32x4_operator_transform_Float32x4x4_arg };

Float32x4::Float32x4()
{
    this->name = "f32x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x4_operator_index_Int32_arg.name = "arg"_c;
    Float32x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x4_operator_index_Int32.name = "operator[]"_c;
    Float32x4_operator_index_Int32.backendIndex = 818;
    Float32x4_operator_index_Int32.returnType = Type::FullType { Float32Type.name };
    Float32x4_operator_index_Int32.parameters = Float32x4_operator_index_Int32_args;
    Symbol::Resolved(&Float32x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4_operator_index_Int32)->signature = "f32 operator[](i32)"_c;
    Symbol::Resolved(&Float32x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float32x4_operator_index_Int32)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt32
    Float32x4_operator_index_UInt32_arg.name = "arg"_c;
    Float32x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x4_operator_index_UInt32.name = "operator[]"_c;
    Float32x4_operator_index_UInt32.backendIndex = 819;
    Float32x4_operator_index_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32x4_operator_index_UInt32.parameters = Float32x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4_operator_index_UInt32)->signature = "f32 operator[](u32)"_c;
    Symbol::Resolved(&Float32x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float32x4_operator_index_UInt32)->returnTypeSymbol = &Float32Type;

    /// operator[] with Int16
    Float32x4_operator_index_Int16_arg.name = "arg"_c;
    Float32x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x4_operator_index_Int16.name = "operator[]"_c;
    Float32x4_operator_index_Int16.backendIndex = 820;
    Float32x4_operator_index_Int16.returnType = Type::FullType { Float32Type.name };
    Float32x4_operator_index_Int16.parameters = Float32x4_operator_index_Int16_args;
    Symbol::Resolved(&Float32x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4_operator_index_Int16)->signature = "f32 operator[](i16)"_c;
    Symbol::Resolved(&Float32x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float32x4_operator_index_Int16)->returnTypeSymbol = &Float32Type;

    /// operator[] with UInt16
    Float32x4_operator_index_UInt16_arg.name = "arg"_c;
    Float32x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x4_operator_index_UInt16.name = "operator[]"_c;
    Float32x4_operator_index_UInt16.backendIndex = 821;
    Float32x4_operator_index_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32x4_operator_index_UInt16.parameters = Float32x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4_operator_index_UInt16)->signature = "f32 operator[](u16)"_c;
    Symbol::Resolved(&Float32x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float32x4_operator_index_UInt16)->returnTypeSymbol = &Float32Type;

    /// operator+ with Float32x4
    Float32x4_operator_add_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_add_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_add_Float32x4.name = "operator+"_c;
    Float32x4_operator_add_Float32x4.backendIndex = 822;
    Float32x4_operator_add_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_add_Float32x4.parameters = Float32x4_operator_add_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_add_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_add_Float32x4)->signature = "f32x4 operator+(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_add_Float32x4)->name = "operator+(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_add_Float32x4)->nameWithVarNames = "operator+(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_add_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator- with Float32x4
    Float32x4_operator_sub_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_sub_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_sub_Float32x4.name = "operator-"_c;
    Float32x4_operator_sub_Float32x4.backendIndex = 823;
    Float32x4_operator_sub_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_sub_Float32x4.parameters = Float32x4_operator_sub_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4)->signature = "f32x4 operator-(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4)->name = "operator-(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4)->nameWithVarNames = "operator-(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_sub_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32x4
    Float32x4_operator_mul_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_mul_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_mul_Float32x4.name = "operator*"_c;
    Float32x4_operator_mul_Float32x4.backendIndex = 824;
    Float32x4_operator_mul_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_mul_Float32x4.parameters = Float32x4_operator_mul_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4)->signature = "f32x4 operator*(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4)->name = "operator*(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4)->nameWithVarNames = "operator*(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mul_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator/ with Float32x4
    Float32x4_operator_div_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_div_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_div_Float32x4.name = "operator/"_c;
    Float32x4_operator_div_Float32x4.backendIndex = 825;
    Float32x4_operator_div_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_div_Float32x4.parameters = Float32x4_operator_div_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_div_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_div_Float32x4)->signature = "f32x4 operator/(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_div_Float32x4)->name = "operator/(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_div_Float32x4)->nameWithVarNames = "operator/(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_div_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator% with Float32x4
    Float32x4_operator_mod_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_mod_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_mod_Float32x4.name = "operator%"_c;
    Float32x4_operator_mod_Float32x4.backendIndex = 826;
    Float32x4_operator_mod_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_mod_Float32x4.parameters = Float32x4_operator_mod_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4)->signature = "f32x4 operator%(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4)->name = "operator%(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4)->nameWithVarNames = "operator%(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mod_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator+= with Float32x4
    Float32x4_operator_addasg_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_addasg_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_addasg_Float32x4.name = "operator+="_c;
    Float32x4_operator_addasg_Float32x4.backendIndex = 827;
    Float32x4_operator_addasg_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_addasg_Float32x4.parameters = Float32x4_operator_addasg_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4)->signature = "f32x4 operator+=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4)->name = "operator+=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4)->nameWithVarNames = "operator+=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_addasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator-= with Float32x4
    Float32x4_operator_subasg_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_subasg_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_subasg_Float32x4.name = "operator-="_c;
    Float32x4_operator_subasg_Float32x4.backendIndex = 828;
    Float32x4_operator_subasg_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_subasg_Float32x4.parameters = Float32x4_operator_subasg_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4)->signature = "f32x4 operator-=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4)->name = "operator-=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4)->nameWithVarNames = "operator-=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_subasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator*= with Float32x4
    Float32x4_operator_mulasg_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_mulasg_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_mulasg_Float32x4.name = "operator*="_c;
    Float32x4_operator_mulasg_Float32x4.backendIndex = 829;
    Float32x4_operator_mulasg_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_mulasg_Float32x4.parameters = Float32x4_operator_mulasg_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4)->signature = "f32x4 operator*=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4)->name = "operator*=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4)->nameWithVarNames = "operator*=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_mulasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator/= with Float32x4
    Float32x4_operator_divasg_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_divasg_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_divasg_Float32x4.name = "operator/="_c;
    Float32x4_operator_divasg_Float32x4.backendIndex = 830;
    Float32x4_operator_divasg_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_divasg_Float32x4.parameters = Float32x4_operator_divasg_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4)->signature = "f32x4 operator/=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4)->name = "operator/=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4)->nameWithVarNames = "operator/=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_divasg_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator< with Float32x4
    Float32x4_operator_lt_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_lt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_lt_Float32x4.name = "operator<"_c;
    Float32x4_operator_lt_Float32x4.backendIndex = 831;
    Float32x4_operator_lt_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Float32x4_operator_lt_Float32x4.parameters = Float32x4_operator_lt_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4)->signature = "b8x4 operator<(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4)->name = "operator<(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4)->nameWithVarNames = "operator<(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_lt_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator<= with Float32x4
    Float32x4_operator_lte_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_lte_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_lte_Float32x4.name = "operator<="_c;
    Float32x4_operator_lte_Float32x4.backendIndex = 832;
    Float32x4_operator_lte_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Float32x4_operator_lte_Float32x4.parameters = Float32x4_operator_lte_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4)->signature = "b8x4 operator<=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4)->name = "operator<=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4)->nameWithVarNames = "operator<=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_lte_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator> with Float32x4
    Float32x4_operator_gt_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_gt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_gt_Float32x4.name = "operator>"_c;
    Float32x4_operator_gt_Float32x4.backendIndex = 833;
    Float32x4_operator_gt_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Float32x4_operator_gt_Float32x4.parameters = Float32x4_operator_gt_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4)->signature = "b8x4 operator>(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4)->name = "operator>(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4)->nameWithVarNames = "operator>(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_gt_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator>= with Float32x4
    Float32x4_operator_gte_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_gte_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_gte_Float32x4.name = "operator>="_c;
    Float32x4_operator_gte_Float32x4.backendIndex = 834;
    Float32x4_operator_gte_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Float32x4_operator_gte_Float32x4.parameters = Float32x4_operator_gte_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4)->signature = "b8x4 operator>=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4)->name = "operator>=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4)->nameWithVarNames = "operator>=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_gte_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with Float32x4
    Float32x4_operator_eq_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_eq_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_eq_Float32x4.name = "operator=="_c;
    Float32x4_operator_eq_Float32x4.backendIndex = 835;
    Float32x4_operator_eq_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Float32x4_operator_eq_Float32x4.parameters = Float32x4_operator_eq_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4)->signature = "b8x4 operator==(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4)->name = "operator==(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4)->nameWithVarNames = "operator==(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_eq_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with Float32x4
    Float32x4_operator_neq_Float32x4_arg.name = "arg"_c;
    Float32x4_operator_neq_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_operator_neq_Float32x4.name = "operator!="_c;
    Float32x4_operator_neq_Float32x4.backendIndex = 836;
    Float32x4_operator_neq_Float32x4.returnType = Type::FullType { Bool8x4Type.name };
    Float32x4_operator_neq_Float32x4.parameters = Float32x4_operator_neq_Float32x4_args;
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4)->signature = "b8x4 operator!=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4)->name = "operator!=(f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4)->nameWithVarNames = "operator!=(arg : f32x4)"_c;
    Symbol::Resolved(&Float32x4_operator_neq_Float32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator* with Float32
    Float32x4_operator_scale_Float32_arg.name = "arg"_c;
    Float32x4_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x4_operator_scale_Float32.name = "operator*"_c;
    Float32x4_operator_scale_Float32.backendIndex = 837;
    Float32x4_operator_scale_Float32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_scale_Float32.parameters = Float32x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x4_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_operator_scale_Float32)->signature = "f32x4 operator*(f32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_Float32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with UInt32
    Float32x4_operator_scale_UInt32_arg.name = "arg"_c;
    Float32x4_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x4_operator_scale_UInt32.name = "operator*"_c;
    Float32x4_operator_scale_UInt32.backendIndex = 838;
    Float32x4_operator_scale_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_scale_UInt32.parameters = Float32x4_operator_scale_UInt32_args;
    Symbol::Resolved(&Float32x4_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4_operator_scale_UInt32)->signature = "f32x4 operator*(u32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Int32
    Float32x4_operator_scale_Int32_arg.name = "arg"_c;
    Float32x4_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x4_operator_scale_Int32.name = "operator*"_c;
    Float32x4_operator_scale_Int32.backendIndex = 839;
    Float32x4_operator_scale_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_scale_Int32.parameters = Float32x4_operator_scale_Int32_args;
    Symbol::Resolved(&Float32x4_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4_operator_scale_Int32)->signature = "f32x4 operator*(i32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Float32x4_operator_scale_Int32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32x4x2
    Float32x4_operator_transform_Float32x4x2_arg.name = "arg"_c;
    Float32x4_operator_transform_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4_operator_transform_Float32x4x2.name = "operator*"_c;
    Float32x4_operator_transform_Float32x4x2.backendIndex = 840;
    Float32x4_operator_transform_Float32x4x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x4_operator_transform_Float32x4x2.parameters = Float32x4_operator_transform_Float32x4x2_args;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x2)->signature = "f32x2 operator*(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x2)->name = "operator*(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x2)->nameWithVarNames = "operator*(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x2)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x4x3
    Float32x4_operator_transform_Float32x4x3_arg.name = "arg"_c;
    Float32x4_operator_transform_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4_operator_transform_Float32x4x3.name = "operator*"_c;
    Float32x4_operator_transform_Float32x4x3.backendIndex = 841;
    Float32x4_operator_transform_Float32x4x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x4_operator_transform_Float32x4x3.parameters = Float32x4_operator_transform_Float32x4x3_args;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x3)->signature = "f32x3 operator*(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x3)->name = "operator*(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x3)->nameWithVarNames = "operator*(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x3)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x4x4
    Float32x4_operator_transform_Float32x4x4_arg.name = "arg"_c;
    Float32x4_operator_transform_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4_operator_transform_Float32x4x4.name = "operator*"_c;
    Float32x4_operator_transform_Float32x4x4.backendIndex = 842;
    Float32x4_operator_transform_Float32x4x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_operator_transform_Float32x4x4.parameters = Float32x4_operator_transform_Float32x4x4_args;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x4)->signature = "f32x4 operator*(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x4)->name = "operator*(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x4)->nameWithVarNames = "operator*(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4_operator_transform_Float32x4x4)->returnTypeSymbol = &Float32x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 730> { 
        std::pair{ "a"_c, &Float32Type },
        std::pair{ "aa"_c, &Float32x2Type },
        std::pair{ "aaa"_c, &Float32x3Type },
        std::pair{ "aaaa"_c, &Float32x4Type },
        std::pair{ "aaab"_c, &Float32x4Type },
        std::pair{ "aaag"_c, &Float32x4Type },
        std::pair{ "aaar"_c, &Float32x4Type },
        std::pair{ "aab"_c, &Float32x3Type },
        std::pair{ "aaba"_c, &Float32x4Type },
        std::pair{ "aabb"_c, &Float32x4Type },
        std::pair{ "aabg"_c, &Float32x4Type },
        std::pair{ "aabr"_c, &Float32x4Type },
        std::pair{ "aag"_c, &Float32x3Type },
        std::pair{ "aaga"_c, &Float32x4Type },
        std::pair{ "aagb"_c, &Float32x4Type },
        std::pair{ "aagg"_c, &Float32x4Type },
        std::pair{ "aagr"_c, &Float32x4Type },
        std::pair{ "aar"_c, &Float32x3Type },
        std::pair{ "aara"_c, &Float32x4Type },
        std::pair{ "aarb"_c, &Float32x4Type },
        std::pair{ "aarg"_c, &Float32x4Type },
        std::pair{ "aarr"_c, &Float32x4Type },
        std::pair{ "ab"_c, &Float32x2Type },
        std::pair{ "aba"_c, &Float32x3Type },
        std::pair{ "abaa"_c, &Float32x4Type },
        std::pair{ "abab"_c, &Float32x4Type },
        std::pair{ "abag"_c, &Float32x4Type },
        std::pair{ "abar"_c, &Float32x4Type },
        std::pair{ "abb"_c, &Float32x3Type },
        std::pair{ "abba"_c, &Float32x4Type },
        std::pair{ "abbb"_c, &Float32x4Type },
        std::pair{ "abbg"_c, &Float32x4Type },
        std::pair{ "abbr"_c, &Float32x4Type },
        std::pair{ "abg"_c, &Float32x3Type },
        std::pair{ "abga"_c, &Float32x4Type },
        std::pair{ "abgb"_c, &Float32x4Type },
        std::pair{ "abgg"_c, &Float32x4Type },
        std::pair{ "abgr"_c, &Float32x4Type },
        std::pair{ "abr"_c, &Float32x3Type },
        std::pair{ "abra"_c, &Float32x4Type },
        std::pair{ "abrb"_c, &Float32x4Type },
        std::pair{ "abrg"_c, &Float32x4Type },
        std::pair{ "abrr"_c, &Float32x4Type },
        std::pair{ "ag"_c, &Float32x2Type },
        std::pair{ "aga"_c, &Float32x3Type },
        std::pair{ "agaa"_c, &Float32x4Type },
        std::pair{ "agab"_c, &Float32x4Type },
        std::pair{ "agag"_c, &Float32x4Type },
        std::pair{ "agar"_c, &Float32x4Type },
        std::pair{ "agb"_c, &Float32x3Type },
        std::pair{ "agba"_c, &Float32x4Type },
        std::pair{ "agbb"_c, &Float32x4Type },
        std::pair{ "agbg"_c, &Float32x4Type },
        std::pair{ "agbr"_c, &Float32x4Type },
        std::pair{ "agg"_c, &Float32x3Type },
        std::pair{ "agga"_c, &Float32x4Type },
        std::pair{ "aggb"_c, &Float32x4Type },
        std::pair{ "aggg"_c, &Float32x4Type },
        std::pair{ "aggr"_c, &Float32x4Type },
        std::pair{ "agr"_c, &Float32x3Type },
        std::pair{ "agra"_c, &Float32x4Type },
        std::pair{ "agrb"_c, &Float32x4Type },
        std::pair{ "agrg"_c, &Float32x4Type },
        std::pair{ "agrr"_c, &Float32x4Type },
        std::pair{ "ar"_c, &Float32x2Type },
        std::pair{ "ara"_c, &Float32x3Type },
        std::pair{ "araa"_c, &Float32x4Type },
        std::pair{ "arab"_c, &Float32x4Type },
        std::pair{ "arag"_c, &Float32x4Type },
        std::pair{ "arar"_c, &Float32x4Type },
        std::pair{ "arb"_c, &Float32x3Type },
        std::pair{ "arba"_c, &Float32x4Type },
        std::pair{ "arbb"_c, &Float32x4Type },
        std::pair{ "arbg"_c, &Float32x4Type },
        std::pair{ "arbr"_c, &Float32x4Type },
        std::pair{ "arg"_c, &Float32x3Type },
        std::pair{ "arga"_c, &Float32x4Type },
        std::pair{ "argb"_c, &Float32x4Type },
        std::pair{ "argg"_c, &Float32x4Type },
        std::pair{ "argr"_c, &Float32x4Type },
        std::pair{ "arr"_c, &Float32x3Type },
        std::pair{ "arra"_c, &Float32x4Type },
        std::pair{ "arrb"_c, &Float32x4Type },
        std::pair{ "arrg"_c, &Float32x4Type },
        std::pair{ "arrr"_c, &Float32x4Type },
        std::pair{ "b"_c, &Float32Type },
        std::pair{ "ba"_c, &Float32x2Type },
        std::pair{ "baa"_c, &Float32x3Type },
        std::pair{ "baaa"_c, &Float32x4Type },
        std::pair{ "baab"_c, &Float32x4Type },
        std::pair{ "baag"_c, &Float32x4Type },
        std::pair{ "baar"_c, &Float32x4Type },
        std::pair{ "bab"_c, &Float32x3Type },
        std::pair{ "baba"_c, &Float32x4Type },
        std::pair{ "babb"_c, &Float32x4Type },
        std::pair{ "babg"_c, &Float32x4Type },
        std::pair{ "babr"_c, &Float32x4Type },
        std::pair{ "bag"_c, &Float32x3Type },
        std::pair{ "baga"_c, &Float32x4Type },
        std::pair{ "bagb"_c, &Float32x4Type },
        std::pair{ "bagg"_c, &Float32x4Type },
        std::pair{ "bagr"_c, &Float32x4Type },
        std::pair{ "bar"_c, &Float32x3Type },
        std::pair{ "bara"_c, &Float32x4Type },
        std::pair{ "barb"_c, &Float32x4Type },
        std::pair{ "barg"_c, &Float32x4Type },
        std::pair{ "barr"_c, &Float32x4Type },
        std::pair{ "bb"_c, &Float32x2Type },
        std::pair{ "bba"_c, &Float32x3Type },
        std::pair{ "bbaa"_c, &Float32x4Type },
        std::pair{ "bbab"_c, &Float32x4Type },
        std::pair{ "bbag"_c, &Float32x4Type },
        std::pair{ "bbar"_c, &Float32x4Type },
        std::pair{ "bbb"_c, &Float32x3Type },
        std::pair{ "bbba"_c, &Float32x4Type },
        std::pair{ "bbbb"_c, &Float32x4Type },
        std::pair{ "bbbg"_c, &Float32x4Type },
        std::pair{ "bbbr"_c, &Float32x4Type },
        std::pair{ "bbg"_c, &Float32x3Type },
        std::pair{ "bbga"_c, &Float32x4Type },
        std::pair{ "bbgb"_c, &Float32x4Type },
        std::pair{ "bbgg"_c, &Float32x4Type },
        std::pair{ "bbgr"_c, &Float32x4Type },
        std::pair{ "bbr"_c, &Float32x3Type },
        std::pair{ "bbra"_c, &Float32x4Type },
        std::pair{ "bbrb"_c, &Float32x4Type },
        std::pair{ "bbrg"_c, &Float32x4Type },
        std::pair{ "bbrr"_c, &Float32x4Type },
        std::pair{ "bg"_c, &Float32x2Type },
        std::pair{ "bga"_c, &Float32x3Type },
        std::pair{ "bgaa"_c, &Float32x4Type },
        std::pair{ "bgab"_c, &Float32x4Type },
        std::pair{ "bgag"_c, &Float32x4Type },
        std::pair{ "bgar"_c, &Float32x4Type },
        std::pair{ "bgb"_c, &Float32x3Type },
        std::pair{ "bgba"_c, &Float32x4Type },
        std::pair{ "bgbb"_c, &Float32x4Type },
        std::pair{ "bgbg"_c, &Float32x4Type },
        std::pair{ "bgbr"_c, &Float32x4Type },
        std::pair{ "bgg"_c, &Float32x3Type },
        std::pair{ "bgga"_c, &Float32x4Type },
        std::pair{ "bggb"_c, &Float32x4Type },
        std::pair{ "bggg"_c, &Float32x4Type },
        std::pair{ "bggr"_c, &Float32x4Type },
        std::pair{ "bgr"_c, &Float32x3Type },
        std::pair{ "bgra"_c, &Float32x4Type },
        std::pair{ "bgrb"_c, &Float32x4Type },
        std::pair{ "bgrg"_c, &Float32x4Type },
        std::pair{ "bgrr"_c, &Float32x4Type },
        std::pair{ "br"_c, &Float32x2Type },
        std::pair{ "bra"_c, &Float32x3Type },
        std::pair{ "braa"_c, &Float32x4Type },
        std::pair{ "brab"_c, &Float32x4Type },
        std::pair{ "brag"_c, &Float32x4Type },
        std::pair{ "brar"_c, &Float32x4Type },
        std::pair{ "brb"_c, &Float32x3Type },
        std::pair{ "brba"_c, &Float32x4Type },
        std::pair{ "brbb"_c, &Float32x4Type },
        std::pair{ "brbg"_c, &Float32x4Type },
        std::pair{ "brbr"_c, &Float32x4Type },
        std::pair{ "brg"_c, &Float32x3Type },
        std::pair{ "brga"_c, &Float32x4Type },
        std::pair{ "brgb"_c, &Float32x4Type },
        std::pair{ "brgg"_c, &Float32x4Type },
        std::pair{ "brgr"_c, &Float32x4Type },
        std::pair{ "brr"_c, &Float32x3Type },
        std::pair{ "brra"_c, &Float32x4Type },
        std::pair{ "brrb"_c, &Float32x4Type },
        std::pair{ "brrg"_c, &Float32x4Type },
        std::pair{ "brrr"_c, &Float32x4Type },
        std::pair{ "g"_c, &Float32Type },
        std::pair{ "ga"_c, &Float32x2Type },
        std::pair{ "gaa"_c, &Float32x3Type },
        std::pair{ "gaaa"_c, &Float32x4Type },
        std::pair{ "gaab"_c, &Float32x4Type },
        std::pair{ "gaag"_c, &Float32x4Type },
        std::pair{ "gaar"_c, &Float32x4Type },
        std::pair{ "gab"_c, &Float32x3Type },
        std::pair{ "gaba"_c, &Float32x4Type },
        std::pair{ "gabb"_c, &Float32x4Type },
        std::pair{ "gabg"_c, &Float32x4Type },
        std::pair{ "gabr"_c, &Float32x4Type },
        std::pair{ "gag"_c, &Float32x3Type },
        std::pair{ "gaga"_c, &Float32x4Type },
        std::pair{ "gagb"_c, &Float32x4Type },
        std::pair{ "gagg"_c, &Float32x4Type },
        std::pair{ "gagr"_c, &Float32x4Type },
        std::pair{ "gar"_c, &Float32x3Type },
        std::pair{ "gara"_c, &Float32x4Type },
        std::pair{ "garb"_c, &Float32x4Type },
        std::pair{ "garg"_c, &Float32x4Type },
        std::pair{ "garr"_c, &Float32x4Type },
        std::pair{ "gb"_c, &Float32x2Type },
        std::pair{ "gba"_c, &Float32x3Type },
        std::pair{ "gbaa"_c, &Float32x4Type },
        std::pair{ "gbab"_c, &Float32x4Type },
        std::pair{ "gbag"_c, &Float32x4Type },
        std::pair{ "gbar"_c, &Float32x4Type },
        std::pair{ "gbb"_c, &Float32x3Type },
        std::pair{ "gbba"_c, &Float32x4Type },
        std::pair{ "gbbb"_c, &Float32x4Type },
        std::pair{ "gbbg"_c, &Float32x4Type },
        std::pair{ "gbbr"_c, &Float32x4Type },
        std::pair{ "gbg"_c, &Float32x3Type },
        std::pair{ "gbga"_c, &Float32x4Type },
        std::pair{ "gbgb"_c, &Float32x4Type },
        std::pair{ "gbgg"_c, &Float32x4Type },
        std::pair{ "gbgr"_c, &Float32x4Type },
        std::pair{ "gbr"_c, &Float32x3Type },
        std::pair{ "gbra"_c, &Float32x4Type },
        std::pair{ "gbrb"_c, &Float32x4Type },
        std::pair{ "gbrg"_c, &Float32x4Type },
        std::pair{ "gbrr"_c, &Float32x4Type },
        std::pair{ "gg"_c, &Float32x2Type },
        std::pair{ "gga"_c, &Float32x3Type },
        std::pair{ "ggaa"_c, &Float32x4Type },
        std::pair{ "ggab"_c, &Float32x4Type },
        std::pair{ "ggag"_c, &Float32x4Type },
        std::pair{ "ggar"_c, &Float32x4Type },
        std::pair{ "ggb"_c, &Float32x3Type },
        std::pair{ "ggba"_c, &Float32x4Type },
        std::pair{ "ggbb"_c, &Float32x4Type },
        std::pair{ "ggbg"_c, &Float32x4Type },
        std::pair{ "ggbr"_c, &Float32x4Type },
        std::pair{ "ggg"_c, &Float32x3Type },
        std::pair{ "ggga"_c, &Float32x4Type },
        std::pair{ "gggb"_c, &Float32x4Type },
        std::pair{ "gggg"_c, &Float32x4Type },
        std::pair{ "gggr"_c, &Float32x4Type },
        std::pair{ "ggr"_c, &Float32x3Type },
        std::pair{ "ggra"_c, &Float32x4Type },
        std::pair{ "ggrb"_c, &Float32x4Type },
        std::pair{ "ggrg"_c, &Float32x4Type },
        std::pair{ "ggrr"_c, &Float32x4Type },
        std::pair{ "gr"_c, &Float32x2Type },
        std::pair{ "gra"_c, &Float32x3Type },
        std::pair{ "graa"_c, &Float32x4Type },
        std::pair{ "grab"_c, &Float32x4Type },
        std::pair{ "grag"_c, &Float32x4Type },
        std::pair{ "grar"_c, &Float32x4Type },
        std::pair{ "grb"_c, &Float32x3Type },
        std::pair{ "grba"_c, &Float32x4Type },
        std::pair{ "grbb"_c, &Float32x4Type },
        std::pair{ "grbg"_c, &Float32x4Type },
        std::pair{ "grbr"_c, &Float32x4Type },
        std::pair{ "grg"_c, &Float32x3Type },
        std::pair{ "grga"_c, &Float32x4Type },
        std::pair{ "grgb"_c, &Float32x4Type },
        std::pair{ "grgg"_c, &Float32x4Type },
        std::pair{ "grgr"_c, &Float32x4Type },
        std::pair{ "grr"_c, &Float32x3Type },
        std::pair{ "grra"_c, &Float32x4Type },
        std::pair{ "grrb"_c, &Float32x4Type },
        std::pair{ "grrg"_c, &Float32x4Type },
        std::pair{ "grrr"_c, &Float32x4Type },
        std::pair{ "operator!="_c, &Float32x4_operator_neq_Float32x4 },
        std::pair{ "operator!=(f32x4)"_c, &Float32x4_operator_neq_Float32x4 },
        std::pair{ "operator%"_c, &Float32x4_operator_mod_Float32x4 },
        std::pair{ "operator%(f32x4)"_c, &Float32x4_operator_mod_Float32x4 },
        std::pair{ "operator*"_c, &Float32x4_operator_mul_Float32x4 },
        std::pair{ "operator*"_c, &Float32x4_operator_scale_Float32 },
        std::pair{ "operator*"_c, &Float32x4_operator_scale_UInt32 },
        std::pair{ "operator*"_c, &Float32x4_operator_scale_Int32 },
        std::pair{ "operator*"_c, &Float32x4_operator_transform_Float32x4x2 },
        std::pair{ "operator*"_c, &Float32x4_operator_transform_Float32x4x3 },
        std::pair{ "operator*"_c, &Float32x4_operator_transform_Float32x4x4 },
        std::pair{ "operator*(f32)"_c, &Float32x4_operator_scale_Float32 },
        std::pair{ "operator*(f32x4)"_c, &Float32x4_operator_mul_Float32x4 },
        std::pair{ "operator*(f32x4x2)"_c, &Float32x4_operator_transform_Float32x4x2 },
        std::pair{ "operator*(f32x4x3)"_c, &Float32x4_operator_transform_Float32x4x3 },
        std::pair{ "operator*(f32x4x4)"_c, &Float32x4_operator_transform_Float32x4x4 },
        std::pair{ "operator*(i32)"_c, &Float32x4_operator_scale_Int32 },
        std::pair{ "operator*(u32)"_c, &Float32x4_operator_scale_UInt32 },
        std::pair{ "operator*="_c, &Float32x4_operator_mulasg_Float32x4 },
        std::pair{ "operator*=(f32x4)"_c, &Float32x4_operator_mulasg_Float32x4 },
        std::pair{ "operator+"_c, &Float32x4_operator_add_Float32x4 },
        std::pair{ "operator+(f32x4)"_c, &Float32x4_operator_add_Float32x4 },
        std::pair{ "operator+="_c, &Float32x4_operator_addasg_Float32x4 },
        std::pair{ "operator+=(f32x4)"_c, &Float32x4_operator_addasg_Float32x4 },
        std::pair{ "operator-"_c, &Float32x4_operator_sub_Float32x4 },
        std::pair{ "operator-(f32x4)"_c, &Float32x4_operator_sub_Float32x4 },
        std::pair{ "operator-="_c, &Float32x4_operator_subasg_Float32x4 },
        std::pair{ "operator-=(f32x4)"_c, &Float32x4_operator_subasg_Float32x4 },
        std::pair{ "operator/"_c, &Float32x4_operator_div_Float32x4 },
        std::pair{ "operator/(f32x4)"_c, &Float32x4_operator_div_Float32x4 },
        std::pair{ "operator/="_c, &Float32x4_operator_divasg_Float32x4 },
        std::pair{ "operator/=(f32x4)"_c, &Float32x4_operator_divasg_Float32x4 },
        std::pair{ "operator<"_c, &Float32x4_operator_lt_Float32x4 },
        std::pair{ "operator<(f32x4)"_c, &Float32x4_operator_lt_Float32x4 },
        std::pair{ "operator<="_c, &Float32x4_operator_lte_Float32x4 },
        std::pair{ "operator<=(f32x4)"_c, &Float32x4_operator_lte_Float32x4 },
        std::pair{ "operator=="_c, &Float32x4_operator_eq_Float32x4 },
        std::pair{ "operator==(f32x4)"_c, &Float32x4_operator_eq_Float32x4 },
        std::pair{ "operator>"_c, &Float32x4_operator_gt_Float32x4 },
        std::pair{ "operator>(f32x4)"_c, &Float32x4_operator_gt_Float32x4 },
        std::pair{ "operator>="_c, &Float32x4_operator_gte_Float32x4 },
        std::pair{ "operator>=(f32x4)"_c, &Float32x4_operator_gte_Float32x4 },
        std::pair{ "operator[]"_c, &Float32x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32x4_operator_index_UInt32 },
        std::pair{ "r"_c, &Float32Type },
        std::pair{ "ra"_c, &Float32x2Type },
        std::pair{ "raa"_c, &Float32x3Type },
        std::pair{ "raaa"_c, &Float32x4Type },
        std::pair{ "raab"_c, &Float32x4Type },
        std::pair{ "raag"_c, &Float32x4Type },
        std::pair{ "raar"_c, &Float32x4Type },
        std::pair{ "rab"_c, &Float32x3Type },
        std::pair{ "raba"_c, &Float32x4Type },
        std::pair{ "rabb"_c, &Float32x4Type },
        std::pair{ "rabg"_c, &Float32x4Type },
        std::pair{ "rabr"_c, &Float32x4Type },
        std::pair{ "rag"_c, &Float32x3Type },
        std::pair{ "raga"_c, &Float32x4Type },
        std::pair{ "ragb"_c, &Float32x4Type },
        std::pair{ "ragg"_c, &Float32x4Type },
        std::pair{ "ragr"_c, &Float32x4Type },
        std::pair{ "rar"_c, &Float32x3Type },
        std::pair{ "rara"_c, &Float32x4Type },
        std::pair{ "rarb"_c, &Float32x4Type },
        std::pair{ "rarg"_c, &Float32x4Type },
        std::pair{ "rarr"_c, &Float32x4Type },
        std::pair{ "rb"_c, &Float32x2Type },
        std::pair{ "rba"_c, &Float32x3Type },
        std::pair{ "rbaa"_c, &Float32x4Type },
        std::pair{ "rbab"_c, &Float32x4Type },
        std::pair{ "rbag"_c, &Float32x4Type },
        std::pair{ "rbar"_c, &Float32x4Type },
        std::pair{ "rbb"_c, &Float32x3Type },
        std::pair{ "rbba"_c, &Float32x4Type },
        std::pair{ "rbbb"_c, &Float32x4Type },
        std::pair{ "rbbg"_c, &Float32x4Type },
        std::pair{ "rbbr"_c, &Float32x4Type },
        std::pair{ "rbg"_c, &Float32x3Type },
        std::pair{ "rbga"_c, &Float32x4Type },
        std::pair{ "rbgb"_c, &Float32x4Type },
        std::pair{ "rbgg"_c, &Float32x4Type },
        std::pair{ "rbgr"_c, &Float32x4Type },
        std::pair{ "rbr"_c, &Float32x3Type },
        std::pair{ "rbra"_c, &Float32x4Type },
        std::pair{ "rbrb"_c, &Float32x4Type },
        std::pair{ "rbrg"_c, &Float32x4Type },
        std::pair{ "rbrr"_c, &Float32x4Type },
        std::pair{ "rg"_c, &Float32x2Type },
        std::pair{ "rga"_c, &Float32x3Type },
        std::pair{ "rgaa"_c, &Float32x4Type },
        std::pair{ "rgab"_c, &Float32x4Type },
        std::pair{ "rgag"_c, &Float32x4Type },
        std::pair{ "rgar"_c, &Float32x4Type },
        std::pair{ "rgb"_c, &Float32x3Type },
        std::pair{ "rgba"_c, &Float32x4Type },
        std::pair{ "rgbb"_c, &Float32x4Type },
        std::pair{ "rgbg"_c, &Float32x4Type },
        std::pair{ "rgbr"_c, &Float32x4Type },
        std::pair{ "rgg"_c, &Float32x3Type },
        std::pair{ "rgga"_c, &Float32x4Type },
        std::pair{ "rggb"_c, &Float32x4Type },
        std::pair{ "rggg"_c, &Float32x4Type },
        std::pair{ "rggr"_c, &Float32x4Type },
        std::pair{ "rgr"_c, &Float32x3Type },
        std::pair{ "rgra"_c, &Float32x4Type },
        std::pair{ "rgrb"_c, &Float32x4Type },
        std::pair{ "rgrg"_c, &Float32x4Type },
        std::pair{ "rgrr"_c, &Float32x4Type },
        std::pair{ "rr"_c, &Float32x2Type },
        std::pair{ "rra"_c, &Float32x3Type },
        std::pair{ "rraa"_c, &Float32x4Type },
        std::pair{ "rrab"_c, &Float32x4Type },
        std::pair{ "rrag"_c, &Float32x4Type },
        std::pair{ "rrar"_c, &Float32x4Type },
        std::pair{ "rrb"_c, &Float32x3Type },
        std::pair{ "rrba"_c, &Float32x4Type },
        std::pair{ "rrbb"_c, &Float32x4Type },
        std::pair{ "rrbg"_c, &Float32x4Type },
        std::pair{ "rrbr"_c, &Float32x4Type },
        std::pair{ "rrg"_c, &Float32x3Type },
        std::pair{ "rrga"_c, &Float32x4Type },
        std::pair{ "rrgb"_c, &Float32x4Type },
        std::pair{ "rrgg"_c, &Float32x4Type },
        std::pair{ "rrgr"_c, &Float32x4Type },
        std::pair{ "rrr"_c, &Float32x3Type },
        std::pair{ "rrra"_c, &Float32x4Type },
        std::pair{ "rrrb"_c, &Float32x4Type },
        std::pair{ "rrrg"_c, &Float32x4Type },
        std::pair{ "rrrr"_c, &Float32x4Type },
        std::pair{ "w"_c, &Float32Type },
        std::pair{ "ww"_c, &Float32x2Type },
        std::pair{ "www"_c, &Float32x3Type },
        std::pair{ "wwww"_c, &Float32x4Type },
        std::pair{ "wwwx"_c, &Float32x4Type },
        std::pair{ "wwwy"_c, &Float32x4Type },
        std::pair{ "wwwz"_c, &Float32x4Type },
        std::pair{ "wwx"_c, &Float32x3Type },
        std::pair{ "wwxw"_c, &Float32x4Type },
        std::pair{ "wwxx"_c, &Float32x4Type },
        std::pair{ "wwxy"_c, &Float32x4Type },
        std::pair{ "wwxz"_c, &Float32x4Type },
        std::pair{ "wwy"_c, &Float32x3Type },
        std::pair{ "wwyw"_c, &Float32x4Type },
        std::pair{ "wwyx"_c, &Float32x4Type },
        std::pair{ "wwyy"_c, &Float32x4Type },
        std::pair{ "wwyz"_c, &Float32x4Type },
        std::pair{ "wwz"_c, &Float32x3Type },
        std::pair{ "wwzw"_c, &Float32x4Type },
        std::pair{ "wwzx"_c, &Float32x4Type },
        std::pair{ "wwzy"_c, &Float32x4Type },
        std::pair{ "wwzz"_c, &Float32x4Type },
        std::pair{ "wx"_c, &Float32x2Type },
        std::pair{ "wxw"_c, &Float32x3Type },
        std::pair{ "wxww"_c, &Float32x4Type },
        std::pair{ "wxwx"_c, &Float32x4Type },
        std::pair{ "wxwy"_c, &Float32x4Type },
        std::pair{ "wxwz"_c, &Float32x4Type },
        std::pair{ "wxx"_c, &Float32x3Type },
        std::pair{ "wxxw"_c, &Float32x4Type },
        std::pair{ "wxxx"_c, &Float32x4Type },
        std::pair{ "wxxy"_c, &Float32x4Type },
        std::pair{ "wxxz"_c, &Float32x4Type },
        std::pair{ "wxy"_c, &Float32x3Type },
        std::pair{ "wxyw"_c, &Float32x4Type },
        std::pair{ "wxyx"_c, &Float32x4Type },
        std::pair{ "wxyy"_c, &Float32x4Type },
        std::pair{ "wxyz"_c, &Float32x4Type },
        std::pair{ "wxz"_c, &Float32x3Type },
        std::pair{ "wxzw"_c, &Float32x4Type },
        std::pair{ "wxzx"_c, &Float32x4Type },
        std::pair{ "wxzy"_c, &Float32x4Type },
        std::pair{ "wxzz"_c, &Float32x4Type },
        std::pair{ "wy"_c, &Float32x2Type },
        std::pair{ "wyw"_c, &Float32x3Type },
        std::pair{ "wyww"_c, &Float32x4Type },
        std::pair{ "wywx"_c, &Float32x4Type },
        std::pair{ "wywy"_c, &Float32x4Type },
        std::pair{ "wywz"_c, &Float32x4Type },
        std::pair{ "wyx"_c, &Float32x3Type },
        std::pair{ "wyxw"_c, &Float32x4Type },
        std::pair{ "wyxx"_c, &Float32x4Type },
        std::pair{ "wyxy"_c, &Float32x4Type },
        std::pair{ "wyxz"_c, &Float32x4Type },
        std::pair{ "wyy"_c, &Float32x3Type },
        std::pair{ "wyyw"_c, &Float32x4Type },
        std::pair{ "wyyx"_c, &Float32x4Type },
        std::pair{ "wyyy"_c, &Float32x4Type },
        std::pair{ "wyyz"_c, &Float32x4Type },
        std::pair{ "wyz"_c, &Float32x3Type },
        std::pair{ "wyzw"_c, &Float32x4Type },
        std::pair{ "wyzx"_c, &Float32x4Type },
        std::pair{ "wyzy"_c, &Float32x4Type },
        std::pair{ "wyzz"_c, &Float32x4Type },
        std::pair{ "wz"_c, &Float32x2Type },
        std::pair{ "wzw"_c, &Float32x3Type },
        std::pair{ "wzww"_c, &Float32x4Type },
        std::pair{ "wzwx"_c, &Float32x4Type },
        std::pair{ "wzwy"_c, &Float32x4Type },
        std::pair{ "wzwz"_c, &Float32x4Type },
        std::pair{ "wzx"_c, &Float32x3Type },
        std::pair{ "wzxw"_c, &Float32x4Type },
        std::pair{ "wzxx"_c, &Float32x4Type },
        std::pair{ "wzxy"_c, &Float32x4Type },
        std::pair{ "wzxz"_c, &Float32x4Type },
        std::pair{ "wzy"_c, &Float32x3Type },
        std::pair{ "wzyw"_c, &Float32x4Type },
        std::pair{ "wzyx"_c, &Float32x4Type },
        std::pair{ "wzyy"_c, &Float32x4Type },
        std::pair{ "wzyz"_c, &Float32x4Type },
        std::pair{ "wzz"_c, &Float32x3Type },
        std::pair{ "wzzw"_c, &Float32x4Type },
        std::pair{ "wzzx"_c, &Float32x4Type },
        std::pair{ "wzzy"_c, &Float32x4Type },
        std::pair{ "wzzz"_c, &Float32x4Type },
        std::pair{ "x"_c, &Float32Type },
        std::pair{ "xw"_c, &Float32x2Type },
        std::pair{ "xww"_c, &Float32x3Type },
        std::pair{ "xwww"_c, &Float32x4Type },
        std::pair{ "xwwx"_c, &Float32x4Type },
        std::pair{ "xwwy"_c, &Float32x4Type },
        std::pair{ "xwwz"_c, &Float32x4Type },
        std::pair{ "xwx"_c, &Float32x3Type },
        std::pair{ "xwxw"_c, &Float32x4Type },
        std::pair{ "xwxx"_c, &Float32x4Type },
        std::pair{ "xwxy"_c, &Float32x4Type },
        std::pair{ "xwxz"_c, &Float32x4Type },
        std::pair{ "xwy"_c, &Float32x3Type },
        std::pair{ "xwyw"_c, &Float32x4Type },
        std::pair{ "xwyx"_c, &Float32x4Type },
        std::pair{ "xwyy"_c, &Float32x4Type },
        std::pair{ "xwyz"_c, &Float32x4Type },
        std::pair{ "xwz"_c, &Float32x3Type },
        std::pair{ "xwzw"_c, &Float32x4Type },
        std::pair{ "xwzx"_c, &Float32x4Type },
        std::pair{ "xwzy"_c, &Float32x4Type },
        std::pair{ "xwzz"_c, &Float32x4Type },
        std::pair{ "xx"_c, &Float32x2Type },
        std::pair{ "xxw"_c, &Float32x3Type },
        std::pair{ "xxww"_c, &Float32x4Type },
        std::pair{ "xxwx"_c, &Float32x4Type },
        std::pair{ "xxwy"_c, &Float32x4Type },
        std::pair{ "xxwz"_c, &Float32x4Type },
        std::pair{ "xxx"_c, &Float32x3Type },
        std::pair{ "xxxw"_c, &Float32x4Type },
        std::pair{ "xxxx"_c, &Float32x4Type },
        std::pair{ "xxxy"_c, &Float32x4Type },
        std::pair{ "xxxz"_c, &Float32x4Type },
        std::pair{ "xxy"_c, &Float32x3Type },
        std::pair{ "xxyw"_c, &Float32x4Type },
        std::pair{ "xxyx"_c, &Float32x4Type },
        std::pair{ "xxyy"_c, &Float32x4Type },
        std::pair{ "xxyz"_c, &Float32x4Type },
        std::pair{ "xxz"_c, &Float32x3Type },
        std::pair{ "xxzw"_c, &Float32x4Type },
        std::pair{ "xxzx"_c, &Float32x4Type },
        std::pair{ "xxzy"_c, &Float32x4Type },
        std::pair{ "xxzz"_c, &Float32x4Type },
        std::pair{ "xy"_c, &Float32x2Type },
        std::pair{ "xyw"_c, &Float32x3Type },
        std::pair{ "xyww"_c, &Float32x4Type },
        std::pair{ "xywx"_c, &Float32x4Type },
        std::pair{ "xywy"_c, &Float32x4Type },
        std::pair{ "xywz"_c, &Float32x4Type },
        std::pair{ "xyx"_c, &Float32x3Type },
        std::pair{ "xyxw"_c, &Float32x4Type },
        std::pair{ "xyxx"_c, &Float32x4Type },
        std::pair{ "xyxy"_c, &Float32x4Type },
        std::pair{ "xyxz"_c, &Float32x4Type },
        std::pair{ "xyy"_c, &Float32x3Type },
        std::pair{ "xyyw"_c, &Float32x4Type },
        std::pair{ "xyyx"_c, &Float32x4Type },
        std::pair{ "xyyy"_c, &Float32x4Type },
        std::pair{ "xyyz"_c, &Float32x4Type },
        std::pair{ "xyz"_c, &Float32x3Type },
        std::pair{ "xyzw"_c, &Float32x4Type },
        std::pair{ "xyzx"_c, &Float32x4Type },
        std::pair{ "xyzy"_c, &Float32x4Type },
        std::pair{ "xyzz"_c, &Float32x4Type },
        std::pair{ "xz"_c, &Float32x2Type },
        std::pair{ "xzw"_c, &Float32x3Type },
        std::pair{ "xzww"_c, &Float32x4Type },
        std::pair{ "xzwx"_c, &Float32x4Type },
        std::pair{ "xzwy"_c, &Float32x4Type },
        std::pair{ "xzwz"_c, &Float32x4Type },
        std::pair{ "xzx"_c, &Float32x3Type },
        std::pair{ "xzxw"_c, &Float32x4Type },
        std::pair{ "xzxx"_c, &Float32x4Type },
        std::pair{ "xzxy"_c, &Float32x4Type },
        std::pair{ "xzxz"_c, &Float32x4Type },
        std::pair{ "xzy"_c, &Float32x3Type },
        std::pair{ "xzyw"_c, &Float32x4Type },
        std::pair{ "xzyx"_c, &Float32x4Type },
        std::pair{ "xzyy"_c, &Float32x4Type },
        std::pair{ "xzyz"_c, &Float32x4Type },
        std::pair{ "xzz"_c, &Float32x3Type },
        std::pair{ "xzzw"_c, &Float32x4Type },
        std::pair{ "xzzx"_c, &Float32x4Type },
        std::pair{ "xzzy"_c, &Float32x4Type },
        std::pair{ "xzzz"_c, &Float32x4Type },
        std::pair{ "y"_c, &Float32Type },
        std::pair{ "yw"_c, &Float32x2Type },
        std::pair{ "yww"_c, &Float32x3Type },
        std::pair{ "ywww"_c, &Float32x4Type },
        std::pair{ "ywwx"_c, &Float32x4Type },
        std::pair{ "ywwy"_c, &Float32x4Type },
        std::pair{ "ywwz"_c, &Float32x4Type },
        std::pair{ "ywx"_c, &Float32x3Type },
        std::pair{ "ywxw"_c, &Float32x4Type },
        std::pair{ "ywxx"_c, &Float32x4Type },
        std::pair{ "ywxy"_c, &Float32x4Type },
        std::pair{ "ywxz"_c, &Float32x4Type },
        std::pair{ "ywy"_c, &Float32x3Type },
        std::pair{ "ywyw"_c, &Float32x4Type },
        std::pair{ "ywyx"_c, &Float32x4Type },
        std::pair{ "ywyy"_c, &Float32x4Type },
        std::pair{ "ywyz"_c, &Float32x4Type },
        std::pair{ "ywz"_c, &Float32x3Type },
        std::pair{ "ywzw"_c, &Float32x4Type },
        std::pair{ "ywzx"_c, &Float32x4Type },
        std::pair{ "ywzy"_c, &Float32x4Type },
        std::pair{ "ywzz"_c, &Float32x4Type },
        std::pair{ "yx"_c, &Float32x2Type },
        std::pair{ "yxw"_c, &Float32x3Type },
        std::pair{ "yxww"_c, &Float32x4Type },
        std::pair{ "yxwx"_c, &Float32x4Type },
        std::pair{ "yxwy"_c, &Float32x4Type },
        std::pair{ "yxwz"_c, &Float32x4Type },
        std::pair{ "yxx"_c, &Float32x3Type },
        std::pair{ "yxxw"_c, &Float32x4Type },
        std::pair{ "yxxx"_c, &Float32x4Type },
        std::pair{ "yxxy"_c, &Float32x4Type },
        std::pair{ "yxxz"_c, &Float32x4Type },
        std::pair{ "yxy"_c, &Float32x3Type },
        std::pair{ "yxyw"_c, &Float32x4Type },
        std::pair{ "yxyx"_c, &Float32x4Type },
        std::pair{ "yxyy"_c, &Float32x4Type },
        std::pair{ "yxyz"_c, &Float32x4Type },
        std::pair{ "yxz"_c, &Float32x3Type },
        std::pair{ "yxzw"_c, &Float32x4Type },
        std::pair{ "yxzx"_c, &Float32x4Type },
        std::pair{ "yxzy"_c, &Float32x4Type },
        std::pair{ "yxzz"_c, &Float32x4Type },
        std::pair{ "yy"_c, &Float32x2Type },
        std::pair{ "yyw"_c, &Float32x3Type },
        std::pair{ "yyww"_c, &Float32x4Type },
        std::pair{ "yywx"_c, &Float32x4Type },
        std::pair{ "yywy"_c, &Float32x4Type },
        std::pair{ "yywz"_c, &Float32x4Type },
        std::pair{ "yyx"_c, &Float32x3Type },
        std::pair{ "yyxw"_c, &Float32x4Type },
        std::pair{ "yyxx"_c, &Float32x4Type },
        std::pair{ "yyxy"_c, &Float32x4Type },
        std::pair{ "yyxz"_c, &Float32x4Type },
        std::pair{ "yyy"_c, &Float32x3Type },
        std::pair{ "yyyw"_c, &Float32x4Type },
        std::pair{ "yyyx"_c, &Float32x4Type },
        std::pair{ "yyyy"_c, &Float32x4Type },
        std::pair{ "yyyz"_c, &Float32x4Type },
        std::pair{ "yyz"_c, &Float32x3Type },
        std::pair{ "yyzw"_c, &Float32x4Type },
        std::pair{ "yyzx"_c, &Float32x4Type },
        std::pair{ "yyzy"_c, &Float32x4Type },
        std::pair{ "yyzz"_c, &Float32x4Type },
        std::pair{ "yz"_c, &Float32x2Type },
        std::pair{ "yzw"_c, &Float32x3Type },
        std::pair{ "yzww"_c, &Float32x4Type },
        std::pair{ "yzwx"_c, &Float32x4Type },
        std::pair{ "yzwy"_c, &Float32x4Type },
        std::pair{ "yzwz"_c, &Float32x4Type },
        std::pair{ "yzx"_c, &Float32x3Type },
        std::pair{ "yzxw"_c, &Float32x4Type },
        std::pair{ "yzxx"_c, &Float32x4Type },
        std::pair{ "yzxy"_c, &Float32x4Type },
        std::pair{ "yzxz"_c, &Float32x4Type },
        std::pair{ "yzy"_c, &Float32x3Type },
        std::pair{ "yzyw"_c, &Float32x4Type },
        std::pair{ "yzyx"_c, &Float32x4Type },
        std::pair{ "yzyy"_c, &Float32x4Type },
        std::pair{ "yzyz"_c, &Float32x4Type },
        std::pair{ "yzz"_c, &Float32x3Type },
        std::pair{ "yzzw"_c, &Float32x4Type },
        std::pair{ "yzzx"_c, &Float32x4Type },
        std::pair{ "yzzy"_c, &Float32x4Type },
        std::pair{ "yzzz"_c, &Float32x4Type },
        std::pair{ "z"_c, &Float32Type },
        std::pair{ "zw"_c, &Float32x2Type },
        std::pair{ "zww"_c, &Float32x3Type },
        std::pair{ "zwww"_c, &Float32x4Type },
        std::pair{ "zwwx"_c, &Float32x4Type },
        std::pair{ "zwwy"_c, &Float32x4Type },
        std::pair{ "zwwz"_c, &Float32x4Type },
        std::pair{ "zwx"_c, &Float32x3Type },
        std::pair{ "zwxw"_c, &Float32x4Type },
        std::pair{ "zwxx"_c, &Float32x4Type },
        std::pair{ "zwxy"_c, &Float32x4Type },
        std::pair{ "zwxz"_c, &Float32x4Type },
        std::pair{ "zwy"_c, &Float32x3Type },
        std::pair{ "zwyw"_c, &Float32x4Type },
        std::pair{ "zwyx"_c, &Float32x4Type },
        std::pair{ "zwyy"_c, &Float32x4Type },
        std::pair{ "zwyz"_c, &Float32x4Type },
        std::pair{ "zwz"_c, &Float32x3Type },
        std::pair{ "zwzw"_c, &Float32x4Type },
        std::pair{ "zwzx"_c, &Float32x4Type },
        std::pair{ "zwzy"_c, &Float32x4Type },
        std::pair{ "zwzz"_c, &Float32x4Type },
        std::pair{ "zx"_c, &Float32x2Type },
        std::pair{ "zxw"_c, &Float32x3Type },
        std::pair{ "zxww"_c, &Float32x4Type },
        std::pair{ "zxwx"_c, &Float32x4Type },
        std::pair{ "zxwy"_c, &Float32x4Type },
        std::pair{ "zxwz"_c, &Float32x4Type },
        std::pair{ "zxx"_c, &Float32x3Type },
        std::pair{ "zxxw"_c, &Float32x4Type },
        std::pair{ "zxxx"_c, &Float32x4Type },
        std::pair{ "zxxy"_c, &Float32x4Type },
        std::pair{ "zxxz"_c, &Float32x4Type },
        std::pair{ "zxy"_c, &Float32x3Type },
        std::pair{ "zxyw"_c, &Float32x4Type },
        std::pair{ "zxyx"_c, &Float32x4Type },
        std::pair{ "zxyy"_c, &Float32x4Type },
        std::pair{ "zxyz"_c, &Float32x4Type },
        std::pair{ "zxz"_c, &Float32x3Type },
        std::pair{ "zxzw"_c, &Float32x4Type },
        std::pair{ "zxzx"_c, &Float32x4Type },
        std::pair{ "zxzy"_c, &Float32x4Type },
        std::pair{ "zxzz"_c, &Float32x4Type },
        std::pair{ "zy"_c, &Float32x2Type },
        std::pair{ "zyw"_c, &Float32x3Type },
        std::pair{ "zyww"_c, &Float32x4Type },
        std::pair{ "zywx"_c, &Float32x4Type },
        std::pair{ "zywy"_c, &Float32x4Type },
        std::pair{ "zywz"_c, &Float32x4Type },
        std::pair{ "zyx"_c, &Float32x3Type },
        std::pair{ "zyxw"_c, &Float32x4Type },
        std::pair{ "zyxx"_c, &Float32x4Type },
        std::pair{ "zyxy"_c, &Float32x4Type },
        std::pair{ "zyxz"_c, &Float32x4Type },
        std::pair{ "zyy"_c, &Float32x3Type },
        std::pair{ "zyyw"_c, &Float32x4Type },
        std::pair{ "zyyx"_c, &Float32x4Type },
        std::pair{ "zyyy"_c, &Float32x4Type },
        std::pair{ "zyyz"_c, &Float32x4Type },
        std::pair{ "zyz"_c, &Float32x3Type },
        std::pair{ "zyzw"_c, &Float32x4Type },
        std::pair{ "zyzx"_c, &Float32x4Type },
        std::pair{ "zyzy"_c, &Float32x4Type },
        std::pair{ "zyzz"_c, &Float32x4Type },
        std::pair{ "zz"_c, &Float32x2Type },
        std::pair{ "zzw"_c, &Float32x3Type },
        std::pair{ "zzww"_c, &Float32x4Type },
        std::pair{ "zzwx"_c, &Float32x4Type },
        std::pair{ "zzwy"_c, &Float32x4Type },
        std::pair{ "zzwz"_c, &Float32x4Type },
        std::pair{ "zzx"_c, &Float32x3Type },
        std::pair{ "zzxw"_c, &Float32x4Type },
        std::pair{ "zzxx"_c, &Float32x4Type },
        std::pair{ "zzxy"_c, &Float32x4Type },
        std::pair{ "zzxz"_c, &Float32x4Type },
        std::pair{ "zzy"_c, &Float32x3Type },
        std::pair{ "zzyw"_c, &Float32x4Type },
        std::pair{ "zzyx"_c, &Float32x4Type },
        std::pair{ "zzyy"_c, &Float32x4Type },
        std::pair{ "zzyz"_c, &Float32x4Type },
        std::pair{ "zzz"_c, &Float32x3Type },
        std::pair{ "zzzw"_c, &Float32x4Type },
        std::pair{ "zzzx"_c, &Float32x4Type },
        std::pair{ "zzzy"_c, &Float32x4Type },
        std::pair{ "zzzz"_c, &Float32x4Type }
    };
}
Float32x4 Float32x4Type;

/// operator[] with Int32
Variable UInt32x4_operator_index_Int32_arg;
Function UInt32x4_operator_index_Int32;
inline constexpr std::array UInt32x4_operator_index_Int32_args = { &UInt32x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt32x4_operator_index_UInt32_arg;
Function UInt32x4_operator_index_UInt32;
inline constexpr std::array UInt32x4_operator_index_UInt32_args = { &UInt32x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt32x4_operator_index_Int16_arg;
Function UInt32x4_operator_index_Int16;
inline constexpr std::array UInt32x4_operator_index_Int16_args = { &UInt32x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt32x4_operator_index_UInt16_arg;
Function UInt32x4_operator_index_UInt16;
inline constexpr std::array UInt32x4_operator_index_UInt16_args = { &UInt32x4_operator_index_UInt16_arg };

/// operator+ with UInt32x4
Variable UInt32x4_operator_add_UInt32x4_arg;
Function UInt32x4_operator_add_UInt32x4;
inline constexpr std::array UInt32x4_operator_add_UInt32x4_args = { &UInt32x4_operator_add_UInt32x4_arg };

/// operator- with UInt32x4
Variable UInt32x4_operator_sub_UInt32x4_arg;
Function UInt32x4_operator_sub_UInt32x4;
inline constexpr std::array UInt32x4_operator_sub_UInt32x4_args = { &UInt32x4_operator_sub_UInt32x4_arg };

/// operator* with UInt32x4
Variable UInt32x4_operator_mul_UInt32x4_arg;
Function UInt32x4_operator_mul_UInt32x4;
inline constexpr std::array UInt32x4_operator_mul_UInt32x4_args = { &UInt32x4_operator_mul_UInt32x4_arg };

/// operator/ with UInt32x4
Variable UInt32x4_operator_div_UInt32x4_arg;
Function UInt32x4_operator_div_UInt32x4;
inline constexpr std::array UInt32x4_operator_div_UInt32x4_args = { &UInt32x4_operator_div_UInt32x4_arg };

/// operator% with UInt32x4
Variable UInt32x4_operator_mod_UInt32x4_arg;
Function UInt32x4_operator_mod_UInt32x4;
inline constexpr std::array UInt32x4_operator_mod_UInt32x4_args = { &UInt32x4_operator_mod_UInt32x4_arg };

/// operator+= with UInt32x4
Variable UInt32x4_operator_addasg_UInt32x4_arg;
Function UInt32x4_operator_addasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_addasg_UInt32x4_args = { &UInt32x4_operator_addasg_UInt32x4_arg };

/// operator-= with UInt32x4
Variable UInt32x4_operator_subasg_UInt32x4_arg;
Function UInt32x4_operator_subasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_subasg_UInt32x4_args = { &UInt32x4_operator_subasg_UInt32x4_arg };

/// operator*= with UInt32x4
Variable UInt32x4_operator_mulasg_UInt32x4_arg;
Function UInt32x4_operator_mulasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_mulasg_UInt32x4_args = { &UInt32x4_operator_mulasg_UInt32x4_arg };

/// operator/= with UInt32x4
Variable UInt32x4_operator_divasg_UInt32x4_arg;
Function UInt32x4_operator_divasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_divasg_UInt32x4_args = { &UInt32x4_operator_divasg_UInt32x4_arg };

/// operator< with UInt32x4
Variable UInt32x4_operator_lt_UInt32x4_arg;
Function UInt32x4_operator_lt_UInt32x4;
inline constexpr std::array UInt32x4_operator_lt_UInt32x4_args = { &UInt32x4_operator_lt_UInt32x4_arg };

/// operator<= with UInt32x4
Variable UInt32x4_operator_lte_UInt32x4_arg;
Function UInt32x4_operator_lte_UInt32x4;
inline constexpr std::array UInt32x4_operator_lte_UInt32x4_args = { &UInt32x4_operator_lte_UInt32x4_arg };

/// operator> with UInt32x4
Variable UInt32x4_operator_gt_UInt32x4_arg;
Function UInt32x4_operator_gt_UInt32x4;
inline constexpr std::array UInt32x4_operator_gt_UInt32x4_args = { &UInt32x4_operator_gt_UInt32x4_arg };

/// operator>= with UInt32x4
Variable UInt32x4_operator_gte_UInt32x4_arg;
Function UInt32x4_operator_gte_UInt32x4;
inline constexpr std::array UInt32x4_operator_gte_UInt32x4_args = { &UInt32x4_operator_gte_UInt32x4_arg };

/// operator== with UInt32x4
Variable UInt32x4_operator_eq_UInt32x4_arg;
Function UInt32x4_operator_eq_UInt32x4;
inline constexpr std::array UInt32x4_operator_eq_UInt32x4_args = { &UInt32x4_operator_eq_UInt32x4_arg };

/// operator!= with UInt32x4
Variable UInt32x4_operator_neq_UInt32x4_arg;
Function UInt32x4_operator_neq_UInt32x4;
inline constexpr std::array UInt32x4_operator_neq_UInt32x4_args = { &UInt32x4_operator_neq_UInt32x4_arg };

/// operator* with Float32
Variable UInt32x4_operator_scale_Float32_arg;
Function UInt32x4_operator_scale_Float32;
inline constexpr std::array UInt32x4_operator_scale_Float32_args = { &UInt32x4_operator_scale_Float32_arg };

/// operator* with UInt32
Variable UInt32x4_operator_scale_UInt32_arg;
Function UInt32x4_operator_scale_UInt32;
inline constexpr std::array UInt32x4_operator_scale_UInt32_args = { &UInt32x4_operator_scale_UInt32_arg };

/// operator* with Int32
Variable UInt32x4_operator_scale_Int32_arg;
Function UInt32x4_operator_scale_Int32;
inline constexpr std::array UInt32x4_operator_scale_Int32_args = { &UInt32x4_operator_scale_Int32_arg };

/// operator| with UInt32x4
Variable UInt32x4_operator_or_UInt32x4_arg;
Function UInt32x4_operator_or_UInt32x4;
inline constexpr std::array UInt32x4_operator_or_UInt32x4_args = { &UInt32x4_operator_or_UInt32x4_arg };

/// operator& with UInt32x4
Variable UInt32x4_operator_and_UInt32x4_arg;
Function UInt32x4_operator_and_UInt32x4;
inline constexpr std::array UInt32x4_operator_and_UInt32x4_args = { &UInt32x4_operator_and_UInt32x4_arg };

/// operator^ with UInt32x4
Variable UInt32x4_operator_xor_UInt32x4_arg;
Function UInt32x4_operator_xor_UInt32x4;
inline constexpr std::array UInt32x4_operator_xor_UInt32x4_args = { &UInt32x4_operator_xor_UInt32x4_arg };

/// operator<< with UInt32x4
Variable UInt32x4_operator_lsh_UInt32x4_arg;
Function UInt32x4_operator_lsh_UInt32x4;
inline constexpr std::array UInt32x4_operator_lsh_UInt32x4_args = { &UInt32x4_operator_lsh_UInt32x4_arg };

/// operator>> with UInt32x4
Variable UInt32x4_operator_rsh_UInt32x4_arg;
Function UInt32x4_operator_rsh_UInt32x4;
inline constexpr std::array UInt32x4_operator_rsh_UInt32x4_args = { &UInt32x4_operator_rsh_UInt32x4_arg };

/// operator|= with UInt32x4
Variable UInt32x4_operator_orasg_UInt32x4_arg;
Function UInt32x4_operator_orasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_orasg_UInt32x4_args = { &UInt32x4_operator_orasg_UInt32x4_arg };

/// operator&= with UInt32x4
Variable UInt32x4_operator_andasg_UInt32x4_arg;
Function UInt32x4_operator_andasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_andasg_UInt32x4_args = { &UInt32x4_operator_andasg_UInt32x4_arg };

/// operator^= with UInt32x4
Variable UInt32x4_operator_xorasg_UInt32x4_arg;
Function UInt32x4_operator_xorasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_xorasg_UInt32x4_args = { &UInt32x4_operator_xorasg_UInt32x4_arg };

/// operator<<= with UInt32x4
Variable UInt32x4_operator_lshasg_UInt32x4_arg;
Function UInt32x4_operator_lshasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_lshasg_UInt32x4_args = { &UInt32x4_operator_lshasg_UInt32x4_arg };

/// operator>>= with UInt32x4
Variable UInt32x4_operator_rhsasg_UInt32x4_arg;
Function UInt32x4_operator_rhsasg_UInt32x4;
inline constexpr std::array UInt32x4_operator_rhsasg_UInt32x4_args = { &UInt32x4_operator_rhsasg_UInt32x4_arg };

UInt32x4::UInt32x4()
{
    this->name = "u32x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt32;
    this->builtin = true;

    /// operator[] with Int32
    UInt32x4_operator_index_Int32_arg.name = "arg"_c;
    UInt32x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x4_operator_index_Int32.name = "operator[]"_c;
    UInt32x4_operator_index_Int32.backendIndex = 864;
    UInt32x4_operator_index_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32x4_operator_index_Int32.parameters = UInt32x4_operator_index_Int32_args;
    Symbol::Resolved(&UInt32x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x4_operator_index_Int32)->signature = "u32 operator[](i32)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_Int32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt32
    UInt32x4_operator_index_UInt32_arg.name = "arg"_c;
    UInt32x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x4_operator_index_UInt32.name = "operator[]"_c;
    UInt32x4_operator_index_UInt32.backendIndex = 865;
    UInt32x4_operator_index_UInt32.returnType = Type::FullType { UInt32Type.name };
    UInt32x4_operator_index_UInt32.parameters = UInt32x4_operator_index_UInt32_args;
    Symbol::Resolved(&UInt32x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_operator_index_UInt32)->signature = "u32 operator[](u32)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_UInt32)->returnTypeSymbol = &UInt32Type;

    /// operator[] with Int16
    UInt32x4_operator_index_Int16_arg.name = "arg"_c;
    UInt32x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32x4_operator_index_Int16.name = "operator[]"_c;
    UInt32x4_operator_index_Int16.backendIndex = 866;
    UInt32x4_operator_index_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32x4_operator_index_Int16.parameters = UInt32x4_operator_index_Int16_args;
    Symbol::Resolved(&UInt32x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x4_operator_index_Int16)->signature = "u32 operator[](i16)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_Int16)->returnTypeSymbol = &UInt32Type;

    /// operator[] with UInt16
    UInt32x4_operator_index_UInt16_arg.name = "arg"_c;
    UInt32x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32x4_operator_index_UInt16.name = "operator[]"_c;
    UInt32x4_operator_index_UInt16.backendIndex = 867;
    UInt32x4_operator_index_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32x4_operator_index_UInt16.parameters = UInt32x4_operator_index_UInt16_args;
    Symbol::Resolved(&UInt32x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x4_operator_index_UInt16)->signature = "u32 operator[](u16)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt32x4_operator_index_UInt16)->returnTypeSymbol = &UInt32Type;

    /// operator+ with UInt32x4
    UInt32x4_operator_add_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_add_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_add_UInt32x4.name = "operator+"_c;
    UInt32x4_operator_add_UInt32x4.backendIndex = 868;
    UInt32x4_operator_add_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_add_UInt32x4.parameters = UInt32x4_operator_add_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4)->signature = "u32x4 operator+(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4)->name = "operator+(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4)->nameWithVarNames = "operator+(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_add_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator- with UInt32x4
    UInt32x4_operator_sub_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_sub_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_sub_UInt32x4.name = "operator-"_c;
    UInt32x4_operator_sub_UInt32x4.backendIndex = 869;
    UInt32x4_operator_sub_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_sub_UInt32x4.parameters = UInt32x4_operator_sub_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4)->signature = "u32x4 operator-(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4)->name = "operator-(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4)->nameWithVarNames = "operator-(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_sub_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator* with UInt32x4
    UInt32x4_operator_mul_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_mul_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_mul_UInt32x4.name = "operator*"_c;
    UInt32x4_operator_mul_UInt32x4.backendIndex = 870;
    UInt32x4_operator_mul_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_mul_UInt32x4.parameters = UInt32x4_operator_mul_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4)->signature = "u32x4 operator*(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4)->name = "operator*(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4)->nameWithVarNames = "operator*(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mul_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator/ with UInt32x4
    UInt32x4_operator_div_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_div_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_div_UInt32x4.name = "operator/"_c;
    UInt32x4_operator_div_UInt32x4.backendIndex = 871;
    UInt32x4_operator_div_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_div_UInt32x4.parameters = UInt32x4_operator_div_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4)->signature = "u32x4 operator/(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4)->name = "operator/(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4)->nameWithVarNames = "operator/(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_div_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator% with UInt32x4
    UInt32x4_operator_mod_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_mod_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_mod_UInt32x4.name = "operator%"_c;
    UInt32x4_operator_mod_UInt32x4.backendIndex = 872;
    UInt32x4_operator_mod_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_mod_UInt32x4.parameters = UInt32x4_operator_mod_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4)->signature = "u32x4 operator%(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4)->name = "operator%(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4)->nameWithVarNames = "operator%(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mod_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator+= with UInt32x4
    UInt32x4_operator_addasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_addasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_addasg_UInt32x4.name = "operator+="_c;
    UInt32x4_operator_addasg_UInt32x4.backendIndex = 873;
    UInt32x4_operator_addasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_addasg_UInt32x4.parameters = UInt32x4_operator_addasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4)->signature = "u32x4 operator+=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4)->name = "operator+=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4)->nameWithVarNames = "operator+=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_addasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator-= with UInt32x4
    UInt32x4_operator_subasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_subasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_subasg_UInt32x4.name = "operator-="_c;
    UInt32x4_operator_subasg_UInt32x4.backendIndex = 874;
    UInt32x4_operator_subasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_subasg_UInt32x4.parameters = UInt32x4_operator_subasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4)->signature = "u32x4 operator-=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4)->name = "operator-=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4)->nameWithVarNames = "operator-=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_subasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator*= with UInt32x4
    UInt32x4_operator_mulasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_mulasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_mulasg_UInt32x4.name = "operator*="_c;
    UInt32x4_operator_mulasg_UInt32x4.backendIndex = 875;
    UInt32x4_operator_mulasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_mulasg_UInt32x4.parameters = UInt32x4_operator_mulasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4)->signature = "u32x4 operator*=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4)->name = "operator*=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4)->nameWithVarNames = "operator*=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_mulasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator/= with UInt32x4
    UInt32x4_operator_divasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_divasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_divasg_UInt32x4.name = "operator/="_c;
    UInt32x4_operator_divasg_UInt32x4.backendIndex = 876;
    UInt32x4_operator_divasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_divasg_UInt32x4.parameters = UInt32x4_operator_divasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4)->signature = "u32x4 operator/=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4)->name = "operator/=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4)->nameWithVarNames = "operator/=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_divasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator< with UInt32x4
    UInt32x4_operator_lt_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_lt_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_lt_UInt32x4.name = "operator<"_c;
    UInt32x4_operator_lt_UInt32x4.backendIndex = 877;
    UInt32x4_operator_lt_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt32x4_operator_lt_UInt32x4.parameters = UInt32x4_operator_lt_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4)->signature = "b8x4 operator<(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4)->name = "operator<(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4)->nameWithVarNames = "operator<(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lt_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator<= with UInt32x4
    UInt32x4_operator_lte_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_lte_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_lte_UInt32x4.name = "operator<="_c;
    UInt32x4_operator_lte_UInt32x4.backendIndex = 878;
    UInt32x4_operator_lte_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt32x4_operator_lte_UInt32x4.parameters = UInt32x4_operator_lte_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4)->signature = "b8x4 operator<=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4)->name = "operator<=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4)->nameWithVarNames = "operator<=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lte_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator> with UInt32x4
    UInt32x4_operator_gt_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_gt_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_gt_UInt32x4.name = "operator>"_c;
    UInt32x4_operator_gt_UInt32x4.backendIndex = 879;
    UInt32x4_operator_gt_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt32x4_operator_gt_UInt32x4.parameters = UInt32x4_operator_gt_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4)->signature = "b8x4 operator>(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4)->name = "operator>(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4)->nameWithVarNames = "operator>(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_gt_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator>= with UInt32x4
    UInt32x4_operator_gte_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_gte_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_gte_UInt32x4.name = "operator>="_c;
    UInt32x4_operator_gte_UInt32x4.backendIndex = 880;
    UInt32x4_operator_gte_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt32x4_operator_gte_UInt32x4.parameters = UInt32x4_operator_gte_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4)->signature = "b8x4 operator>=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4)->name = "operator>=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4)->nameWithVarNames = "operator>=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_gte_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with UInt32x4
    UInt32x4_operator_eq_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_eq_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_eq_UInt32x4.name = "operator=="_c;
    UInt32x4_operator_eq_UInt32x4.backendIndex = 881;
    UInt32x4_operator_eq_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt32x4_operator_eq_UInt32x4.parameters = UInt32x4_operator_eq_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4)->signature = "b8x4 operator==(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4)->name = "operator==(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4)->nameWithVarNames = "operator==(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_eq_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with UInt32x4
    UInt32x4_operator_neq_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_neq_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_neq_UInt32x4.name = "operator!="_c;
    UInt32x4_operator_neq_UInt32x4.backendIndex = 882;
    UInt32x4_operator_neq_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt32x4_operator_neq_UInt32x4.parameters = UInt32x4_operator_neq_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4)->signature = "b8x4 operator!=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4)->name = "operator!=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4)->nameWithVarNames = "operator!=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_neq_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator* with Float32
    UInt32x4_operator_scale_Float32_arg.name = "arg"_c;
    UInt32x4_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt32x4_operator_scale_Float32.name = "operator*"_c;
    UInt32x4_operator_scale_Float32.backendIndex = 883;
    UInt32x4_operator_scale_Float32.returnType = Type::FullType { Float32x4Type.name };
    UInt32x4_operator_scale_Float32.parameters = UInt32x4_operator_scale_Float32_args;
    Symbol::Resolved(&UInt32x4_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x4_operator_scale_Float32)->signature = "f32x4 operator*(f32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_Float32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with UInt32
    UInt32x4_operator_scale_UInt32_arg.name = "arg"_c;
    UInt32x4_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x4_operator_scale_UInt32.name = "operator*"_c;
    UInt32x4_operator_scale_UInt32.backendIndex = 884;
    UInt32x4_operator_scale_UInt32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_scale_UInt32.parameters = UInt32x4_operator_scale_UInt32_args;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32)->signature = "u32x4 operator*(u32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_UInt32)->returnTypeSymbol = &UInt32x4Type;

    /// operator* with Int32
    UInt32x4_operator_scale_Int32_arg.name = "arg"_c;
    UInt32x4_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x4_operator_scale_Int32.name = "operator*"_c;
    UInt32x4_operator_scale_Int32.backendIndex = 885;
    UInt32x4_operator_scale_Int32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_scale_Int32.parameters = UInt32x4_operator_scale_Int32_args;
    Symbol::Resolved(&UInt32x4_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x4_operator_scale_Int32)->signature = "u32x4 operator*(i32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&UInt32x4_operator_scale_Int32)->returnTypeSymbol = &UInt32x4Type;

    /// operator| with UInt32x4
    UInt32x4_operator_or_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_or_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_or_UInt32x4.name = "operator|"_c;
    UInt32x4_operator_or_UInt32x4.backendIndex = 886;
    UInt32x4_operator_or_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_or_UInt32x4.parameters = UInt32x4_operator_or_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4)->signature = "u32x4 operator|(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4)->name = "operator|(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4)->nameWithVarNames = "operator|(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_or_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator& with UInt32x4
    UInt32x4_operator_and_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_and_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_and_UInt32x4.name = "operator&"_c;
    UInt32x4_operator_and_UInt32x4.backendIndex = 887;
    UInt32x4_operator_and_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_and_UInt32x4.parameters = UInt32x4_operator_and_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4)->signature = "u32x4 operator&(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4)->name = "operator&(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4)->nameWithVarNames = "operator&(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_and_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator^ with UInt32x4
    UInt32x4_operator_xor_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_xor_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_xor_UInt32x4.name = "operator^"_c;
    UInt32x4_operator_xor_UInt32x4.backendIndex = 888;
    UInt32x4_operator_xor_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_xor_UInt32x4.parameters = UInt32x4_operator_xor_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4)->signature = "u32x4 operator^(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4)->name = "operator^(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4)->nameWithVarNames = "operator^(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_xor_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator<< with UInt32x4
    UInt32x4_operator_lsh_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_lsh_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_lsh_UInt32x4.name = "operator<<"_c;
    UInt32x4_operator_lsh_UInt32x4.backendIndex = 889;
    UInt32x4_operator_lsh_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_lsh_UInt32x4.parameters = UInt32x4_operator_lsh_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4)->signature = "u32x4 operator<<(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4)->name = "operator<<(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4)->nameWithVarNames = "operator<<(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lsh_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator>> with UInt32x4
    UInt32x4_operator_rsh_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_rsh_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_rsh_UInt32x4.name = "operator>>"_c;
    UInt32x4_operator_rsh_UInt32x4.backendIndex = 890;
    UInt32x4_operator_rsh_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_rsh_UInt32x4.parameters = UInt32x4_operator_rsh_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4)->signature = "u32x4 operator>>(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4)->name = "operator>>(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4)->nameWithVarNames = "operator>>(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_rsh_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator|= with UInt32x4
    UInt32x4_operator_orasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_orasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_orasg_UInt32x4.name = "operator|="_c;
    UInt32x4_operator_orasg_UInt32x4.backendIndex = 891;
    UInt32x4_operator_orasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_orasg_UInt32x4.parameters = UInt32x4_operator_orasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4)->signature = "u32x4 operator|=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4)->name = "operator|=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4)->nameWithVarNames = "operator|=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_orasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator&= with UInt32x4
    UInt32x4_operator_andasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_andasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_andasg_UInt32x4.name = "operator&="_c;
    UInt32x4_operator_andasg_UInt32x4.backendIndex = 892;
    UInt32x4_operator_andasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_andasg_UInt32x4.parameters = UInt32x4_operator_andasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4)->signature = "u32x4 operator&=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4)->name = "operator&=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4)->nameWithVarNames = "operator&=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_andasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator^= with UInt32x4
    UInt32x4_operator_xorasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_xorasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_xorasg_UInt32x4.name = "operator^="_c;
    UInt32x4_operator_xorasg_UInt32x4.backendIndex = 893;
    UInt32x4_operator_xorasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_xorasg_UInt32x4.parameters = UInt32x4_operator_xorasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4)->signature = "u32x4 operator^=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4)->name = "operator^=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4)->nameWithVarNames = "operator^=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_xorasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator<<= with UInt32x4
    UInt32x4_operator_lshasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_lshasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_lshasg_UInt32x4.name = "operator<<="_c;
    UInt32x4_operator_lshasg_UInt32x4.backendIndex = 894;
    UInt32x4_operator_lshasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_lshasg_UInt32x4.parameters = UInt32x4_operator_lshasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4)->signature = "u32x4 operator<<=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4)->name = "operator<<=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4)->nameWithVarNames = "operator<<=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_lshasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// operator>>= with UInt32x4
    UInt32x4_operator_rhsasg_UInt32x4_arg.name = "arg"_c;
    UInt32x4_operator_rhsasg_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_operator_rhsasg_UInt32x4.name = "operator>>="_c;
    UInt32x4_operator_rhsasg_UInt32x4.backendIndex = 895;
    UInt32x4_operator_rhsasg_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_operator_rhsasg_UInt32x4.parameters = UInt32x4_operator_rhsasg_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4)->signature = "u32x4 operator>>=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4)->name = "operator>>=(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4)->nameWithVarNames = "operator>>=(arg : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_operator_rhsasg_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 744> { 
        std::pair{ "a"_c, &UInt32Type },
        std::pair{ "aa"_c, &UInt32x2Type },
        std::pair{ "aaa"_c, &UInt32x3Type },
        std::pair{ "aaaa"_c, &UInt32x4Type },
        std::pair{ "aaab"_c, &UInt32x4Type },
        std::pair{ "aaag"_c, &UInt32x4Type },
        std::pair{ "aaar"_c, &UInt32x4Type },
        std::pair{ "aab"_c, &UInt32x3Type },
        std::pair{ "aaba"_c, &UInt32x4Type },
        std::pair{ "aabb"_c, &UInt32x4Type },
        std::pair{ "aabg"_c, &UInt32x4Type },
        std::pair{ "aabr"_c, &UInt32x4Type },
        std::pair{ "aag"_c, &UInt32x3Type },
        std::pair{ "aaga"_c, &UInt32x4Type },
        std::pair{ "aagb"_c, &UInt32x4Type },
        std::pair{ "aagg"_c, &UInt32x4Type },
        std::pair{ "aagr"_c, &UInt32x4Type },
        std::pair{ "aar"_c, &UInt32x3Type },
        std::pair{ "aara"_c, &UInt32x4Type },
        std::pair{ "aarb"_c, &UInt32x4Type },
        std::pair{ "aarg"_c, &UInt32x4Type },
        std::pair{ "aarr"_c, &UInt32x4Type },
        std::pair{ "ab"_c, &UInt32x2Type },
        std::pair{ "aba"_c, &UInt32x3Type },
        std::pair{ "abaa"_c, &UInt32x4Type },
        std::pair{ "abab"_c, &UInt32x4Type },
        std::pair{ "abag"_c, &UInt32x4Type },
        std::pair{ "abar"_c, &UInt32x4Type },
        std::pair{ "abb"_c, &UInt32x3Type },
        std::pair{ "abba"_c, &UInt32x4Type },
        std::pair{ "abbb"_c, &UInt32x4Type },
        std::pair{ "abbg"_c, &UInt32x4Type },
        std::pair{ "abbr"_c, &UInt32x4Type },
        std::pair{ "abg"_c, &UInt32x3Type },
        std::pair{ "abga"_c, &UInt32x4Type },
        std::pair{ "abgb"_c, &UInt32x4Type },
        std::pair{ "abgg"_c, &UInt32x4Type },
        std::pair{ "abgr"_c, &UInt32x4Type },
        std::pair{ "abr"_c, &UInt32x3Type },
        std::pair{ "abra"_c, &UInt32x4Type },
        std::pair{ "abrb"_c, &UInt32x4Type },
        std::pair{ "abrg"_c, &UInt32x4Type },
        std::pair{ "abrr"_c, &UInt32x4Type },
        std::pair{ "ag"_c, &UInt32x2Type },
        std::pair{ "aga"_c, &UInt32x3Type },
        std::pair{ "agaa"_c, &UInt32x4Type },
        std::pair{ "agab"_c, &UInt32x4Type },
        std::pair{ "agag"_c, &UInt32x4Type },
        std::pair{ "agar"_c, &UInt32x4Type },
        std::pair{ "agb"_c, &UInt32x3Type },
        std::pair{ "agba"_c, &UInt32x4Type },
        std::pair{ "agbb"_c, &UInt32x4Type },
        std::pair{ "agbg"_c, &UInt32x4Type },
        std::pair{ "agbr"_c, &UInt32x4Type },
        std::pair{ "agg"_c, &UInt32x3Type },
        std::pair{ "agga"_c, &UInt32x4Type },
        std::pair{ "aggb"_c, &UInt32x4Type },
        std::pair{ "aggg"_c, &UInt32x4Type },
        std::pair{ "aggr"_c, &UInt32x4Type },
        std::pair{ "agr"_c, &UInt32x3Type },
        std::pair{ "agra"_c, &UInt32x4Type },
        std::pair{ "agrb"_c, &UInt32x4Type },
        std::pair{ "agrg"_c, &UInt32x4Type },
        std::pair{ "agrr"_c, &UInt32x4Type },
        std::pair{ "ar"_c, &UInt32x2Type },
        std::pair{ "ara"_c, &UInt32x3Type },
        std::pair{ "araa"_c, &UInt32x4Type },
        std::pair{ "arab"_c, &UInt32x4Type },
        std::pair{ "arag"_c, &UInt32x4Type },
        std::pair{ "arar"_c, &UInt32x4Type },
        std::pair{ "arb"_c, &UInt32x3Type },
        std::pair{ "arba"_c, &UInt32x4Type },
        std::pair{ "arbb"_c, &UInt32x4Type },
        std::pair{ "arbg"_c, &UInt32x4Type },
        std::pair{ "arbr"_c, &UInt32x4Type },
        std::pair{ "arg"_c, &UInt32x3Type },
        std::pair{ "arga"_c, &UInt32x4Type },
        std::pair{ "argb"_c, &UInt32x4Type },
        std::pair{ "argg"_c, &UInt32x4Type },
        std::pair{ "argr"_c, &UInt32x4Type },
        std::pair{ "arr"_c, &UInt32x3Type },
        std::pair{ "arra"_c, &UInt32x4Type },
        std::pair{ "arrb"_c, &UInt32x4Type },
        std::pair{ "arrg"_c, &UInt32x4Type },
        std::pair{ "arrr"_c, &UInt32x4Type },
        std::pair{ "b"_c, &UInt32Type },
        std::pair{ "ba"_c, &UInt32x2Type },
        std::pair{ "baa"_c, &UInt32x3Type },
        std::pair{ "baaa"_c, &UInt32x4Type },
        std::pair{ "baab"_c, &UInt32x4Type },
        std::pair{ "baag"_c, &UInt32x4Type },
        std::pair{ "baar"_c, &UInt32x4Type },
        std::pair{ "bab"_c, &UInt32x3Type },
        std::pair{ "baba"_c, &UInt32x4Type },
        std::pair{ "babb"_c, &UInt32x4Type },
        std::pair{ "babg"_c, &UInt32x4Type },
        std::pair{ "babr"_c, &UInt32x4Type },
        std::pair{ "bag"_c, &UInt32x3Type },
        std::pair{ "baga"_c, &UInt32x4Type },
        std::pair{ "bagb"_c, &UInt32x4Type },
        std::pair{ "bagg"_c, &UInt32x4Type },
        std::pair{ "bagr"_c, &UInt32x4Type },
        std::pair{ "bar"_c, &UInt32x3Type },
        std::pair{ "bara"_c, &UInt32x4Type },
        std::pair{ "barb"_c, &UInt32x4Type },
        std::pair{ "barg"_c, &UInt32x4Type },
        std::pair{ "barr"_c, &UInt32x4Type },
        std::pair{ "bb"_c, &UInt32x2Type },
        std::pair{ "bba"_c, &UInt32x3Type },
        std::pair{ "bbaa"_c, &UInt32x4Type },
        std::pair{ "bbab"_c, &UInt32x4Type },
        std::pair{ "bbag"_c, &UInt32x4Type },
        std::pair{ "bbar"_c, &UInt32x4Type },
        std::pair{ "bbb"_c, &UInt32x3Type },
        std::pair{ "bbba"_c, &UInt32x4Type },
        std::pair{ "bbbb"_c, &UInt32x4Type },
        std::pair{ "bbbg"_c, &UInt32x4Type },
        std::pair{ "bbbr"_c, &UInt32x4Type },
        std::pair{ "bbg"_c, &UInt32x3Type },
        std::pair{ "bbga"_c, &UInt32x4Type },
        std::pair{ "bbgb"_c, &UInt32x4Type },
        std::pair{ "bbgg"_c, &UInt32x4Type },
        std::pair{ "bbgr"_c, &UInt32x4Type },
        std::pair{ "bbr"_c, &UInt32x3Type },
        std::pair{ "bbra"_c, &UInt32x4Type },
        std::pair{ "bbrb"_c, &UInt32x4Type },
        std::pair{ "bbrg"_c, &UInt32x4Type },
        std::pair{ "bbrr"_c, &UInt32x4Type },
        std::pair{ "bg"_c, &UInt32x2Type },
        std::pair{ "bga"_c, &UInt32x3Type },
        std::pair{ "bgaa"_c, &UInt32x4Type },
        std::pair{ "bgab"_c, &UInt32x4Type },
        std::pair{ "bgag"_c, &UInt32x4Type },
        std::pair{ "bgar"_c, &UInt32x4Type },
        std::pair{ "bgb"_c, &UInt32x3Type },
        std::pair{ "bgba"_c, &UInt32x4Type },
        std::pair{ "bgbb"_c, &UInt32x4Type },
        std::pair{ "bgbg"_c, &UInt32x4Type },
        std::pair{ "bgbr"_c, &UInt32x4Type },
        std::pair{ "bgg"_c, &UInt32x3Type },
        std::pair{ "bgga"_c, &UInt32x4Type },
        std::pair{ "bggb"_c, &UInt32x4Type },
        std::pair{ "bggg"_c, &UInt32x4Type },
        std::pair{ "bggr"_c, &UInt32x4Type },
        std::pair{ "bgr"_c, &UInt32x3Type },
        std::pair{ "bgra"_c, &UInt32x4Type },
        std::pair{ "bgrb"_c, &UInt32x4Type },
        std::pair{ "bgrg"_c, &UInt32x4Type },
        std::pair{ "bgrr"_c, &UInt32x4Type },
        std::pair{ "br"_c, &UInt32x2Type },
        std::pair{ "bra"_c, &UInt32x3Type },
        std::pair{ "braa"_c, &UInt32x4Type },
        std::pair{ "brab"_c, &UInt32x4Type },
        std::pair{ "brag"_c, &UInt32x4Type },
        std::pair{ "brar"_c, &UInt32x4Type },
        std::pair{ "brb"_c, &UInt32x3Type },
        std::pair{ "brba"_c, &UInt32x4Type },
        std::pair{ "brbb"_c, &UInt32x4Type },
        std::pair{ "brbg"_c, &UInt32x4Type },
        std::pair{ "brbr"_c, &UInt32x4Type },
        std::pair{ "brg"_c, &UInt32x3Type },
        std::pair{ "brga"_c, &UInt32x4Type },
        std::pair{ "brgb"_c, &UInt32x4Type },
        std::pair{ "brgg"_c, &UInt32x4Type },
        std::pair{ "brgr"_c, &UInt32x4Type },
        std::pair{ "brr"_c, &UInt32x3Type },
        std::pair{ "brra"_c, &UInt32x4Type },
        std::pair{ "brrb"_c, &UInt32x4Type },
        std::pair{ "brrg"_c, &UInt32x4Type },
        std::pair{ "brrr"_c, &UInt32x4Type },
        std::pair{ "g"_c, &UInt32Type },
        std::pair{ "ga"_c, &UInt32x2Type },
        std::pair{ "gaa"_c, &UInt32x3Type },
        std::pair{ "gaaa"_c, &UInt32x4Type },
        std::pair{ "gaab"_c, &UInt32x4Type },
        std::pair{ "gaag"_c, &UInt32x4Type },
        std::pair{ "gaar"_c, &UInt32x4Type },
        std::pair{ "gab"_c, &UInt32x3Type },
        std::pair{ "gaba"_c, &UInt32x4Type },
        std::pair{ "gabb"_c, &UInt32x4Type },
        std::pair{ "gabg"_c, &UInt32x4Type },
        std::pair{ "gabr"_c, &UInt32x4Type },
        std::pair{ "gag"_c, &UInt32x3Type },
        std::pair{ "gaga"_c, &UInt32x4Type },
        std::pair{ "gagb"_c, &UInt32x4Type },
        std::pair{ "gagg"_c, &UInt32x4Type },
        std::pair{ "gagr"_c, &UInt32x4Type },
        std::pair{ "gar"_c, &UInt32x3Type },
        std::pair{ "gara"_c, &UInt32x4Type },
        std::pair{ "garb"_c, &UInt32x4Type },
        std::pair{ "garg"_c, &UInt32x4Type },
        std::pair{ "garr"_c, &UInt32x4Type },
        std::pair{ "gb"_c, &UInt32x2Type },
        std::pair{ "gba"_c, &UInt32x3Type },
        std::pair{ "gbaa"_c, &UInt32x4Type },
        std::pair{ "gbab"_c, &UInt32x4Type },
        std::pair{ "gbag"_c, &UInt32x4Type },
        std::pair{ "gbar"_c, &UInt32x4Type },
        std::pair{ "gbb"_c, &UInt32x3Type },
        std::pair{ "gbba"_c, &UInt32x4Type },
        std::pair{ "gbbb"_c, &UInt32x4Type },
        std::pair{ "gbbg"_c, &UInt32x4Type },
        std::pair{ "gbbr"_c, &UInt32x4Type },
        std::pair{ "gbg"_c, &UInt32x3Type },
        std::pair{ "gbga"_c, &UInt32x4Type },
        std::pair{ "gbgb"_c, &UInt32x4Type },
        std::pair{ "gbgg"_c, &UInt32x4Type },
        std::pair{ "gbgr"_c, &UInt32x4Type },
        std::pair{ "gbr"_c, &UInt32x3Type },
        std::pair{ "gbra"_c, &UInt32x4Type },
        std::pair{ "gbrb"_c, &UInt32x4Type },
        std::pair{ "gbrg"_c, &UInt32x4Type },
        std::pair{ "gbrr"_c, &UInt32x4Type },
        std::pair{ "gg"_c, &UInt32x2Type },
        std::pair{ "gga"_c, &UInt32x3Type },
        std::pair{ "ggaa"_c, &UInt32x4Type },
        std::pair{ "ggab"_c, &UInt32x4Type },
        std::pair{ "ggag"_c, &UInt32x4Type },
        std::pair{ "ggar"_c, &UInt32x4Type },
        std::pair{ "ggb"_c, &UInt32x3Type },
        std::pair{ "ggba"_c, &UInt32x4Type },
        std::pair{ "ggbb"_c, &UInt32x4Type },
        std::pair{ "ggbg"_c, &UInt32x4Type },
        std::pair{ "ggbr"_c, &UInt32x4Type },
        std::pair{ "ggg"_c, &UInt32x3Type },
        std::pair{ "ggga"_c, &UInt32x4Type },
        std::pair{ "gggb"_c, &UInt32x4Type },
        std::pair{ "gggg"_c, &UInt32x4Type },
        std::pair{ "gggr"_c, &UInt32x4Type },
        std::pair{ "ggr"_c, &UInt32x3Type },
        std::pair{ "ggra"_c, &UInt32x4Type },
        std::pair{ "ggrb"_c, &UInt32x4Type },
        std::pair{ "ggrg"_c, &UInt32x4Type },
        std::pair{ "ggrr"_c, &UInt32x4Type },
        std::pair{ "gr"_c, &UInt32x2Type },
        std::pair{ "gra"_c, &UInt32x3Type },
        std::pair{ "graa"_c, &UInt32x4Type },
        std::pair{ "grab"_c, &UInt32x4Type },
        std::pair{ "grag"_c, &UInt32x4Type },
        std::pair{ "grar"_c, &UInt32x4Type },
        std::pair{ "grb"_c, &UInt32x3Type },
        std::pair{ "grba"_c, &UInt32x4Type },
        std::pair{ "grbb"_c, &UInt32x4Type },
        std::pair{ "grbg"_c, &UInt32x4Type },
        std::pair{ "grbr"_c, &UInt32x4Type },
        std::pair{ "grg"_c, &UInt32x3Type },
        std::pair{ "grga"_c, &UInt32x4Type },
        std::pair{ "grgb"_c, &UInt32x4Type },
        std::pair{ "grgg"_c, &UInt32x4Type },
        std::pair{ "grgr"_c, &UInt32x4Type },
        std::pair{ "grr"_c, &UInt32x3Type },
        std::pair{ "grra"_c, &UInt32x4Type },
        std::pair{ "grrb"_c, &UInt32x4Type },
        std::pair{ "grrg"_c, &UInt32x4Type },
        std::pair{ "grrr"_c, &UInt32x4Type },
        std::pair{ "operator!="_c, &UInt32x4_operator_neq_UInt32x4 },
        std::pair{ "operator!=(u32x4)"_c, &UInt32x4_operator_neq_UInt32x4 },
        std::pair{ "operator%"_c, &UInt32x4_operator_mod_UInt32x4 },
        std::pair{ "operator%(u32x4)"_c, &UInt32x4_operator_mod_UInt32x4 },
        std::pair{ "operator&"_c, &UInt32x4_operator_and_UInt32x4 },
        std::pair{ "operator&(u32x4)"_c, &UInt32x4_operator_and_UInt32x4 },
        std::pair{ "operator&="_c, &UInt32x4_operator_andasg_UInt32x4 },
        std::pair{ "operator&=(u32x4)"_c, &UInt32x4_operator_andasg_UInt32x4 },
        std::pair{ "operator*"_c, &UInt32x4_operator_mul_UInt32x4 },
        std::pair{ "operator*"_c, &UInt32x4_operator_scale_Float32 },
        std::pair{ "operator*"_c, &UInt32x4_operator_scale_UInt32 },
        std::pair{ "operator*"_c, &UInt32x4_operator_scale_Int32 },
        std::pair{ "operator*(f32)"_c, &UInt32x4_operator_scale_Float32 },
        std::pair{ "operator*(i32)"_c, &UInt32x4_operator_scale_Int32 },
        std::pair{ "operator*(u32)"_c, &UInt32x4_operator_scale_UInt32 },
        std::pair{ "operator*(u32x4)"_c, &UInt32x4_operator_mul_UInt32x4 },
        std::pair{ "operator*="_c, &UInt32x4_operator_mulasg_UInt32x4 },
        std::pair{ "operator*=(u32x4)"_c, &UInt32x4_operator_mulasg_UInt32x4 },
        std::pair{ "operator+"_c, &UInt32x4_operator_add_UInt32x4 },
        std::pair{ "operator+(u32x4)"_c, &UInt32x4_operator_add_UInt32x4 },
        std::pair{ "operator+="_c, &UInt32x4_operator_addasg_UInt32x4 },
        std::pair{ "operator+=(u32x4)"_c, &UInt32x4_operator_addasg_UInt32x4 },
        std::pair{ "operator-"_c, &UInt32x4_operator_sub_UInt32x4 },
        std::pair{ "operator-(u32x4)"_c, &UInt32x4_operator_sub_UInt32x4 },
        std::pair{ "operator-="_c, &UInt32x4_operator_subasg_UInt32x4 },
        std::pair{ "operator-=(u32x4)"_c, &UInt32x4_operator_subasg_UInt32x4 },
        std::pair{ "operator/"_c, &UInt32x4_operator_div_UInt32x4 },
        std::pair{ "operator/(u32x4)"_c, &UInt32x4_operator_div_UInt32x4 },
        std::pair{ "operator/="_c, &UInt32x4_operator_divasg_UInt32x4 },
        std::pair{ "operator/=(u32x4)"_c, &UInt32x4_operator_divasg_UInt32x4 },
        std::pair{ "operator<"_c, &UInt32x4_operator_lt_UInt32x4 },
        std::pair{ "operator<(u32x4)"_c, &UInt32x4_operator_lt_UInt32x4 },
        std::pair{ "operator<<"_c, &UInt32x4_operator_lsh_UInt32x4 },
        std::pair{ "operator<<(u32x4)"_c, &UInt32x4_operator_lsh_UInt32x4 },
        std::pair{ "operator<<="_c, &UInt32x4_operator_lshasg_UInt32x4 },
        std::pair{ "operator<<=(u32x4)"_c, &UInt32x4_operator_lshasg_UInt32x4 },
        std::pair{ "operator<="_c, &UInt32x4_operator_lte_UInt32x4 },
        std::pair{ "operator<=(u32x4)"_c, &UInt32x4_operator_lte_UInt32x4 },
        std::pair{ "operator=="_c, &UInt32x4_operator_eq_UInt32x4 },
        std::pair{ "operator==(u32x4)"_c, &UInt32x4_operator_eq_UInt32x4 },
        std::pair{ "operator>"_c, &UInt32x4_operator_gt_UInt32x4 },
        std::pair{ "operator>(u32x4)"_c, &UInt32x4_operator_gt_UInt32x4 },
        std::pair{ "operator>="_c, &UInt32x4_operator_gte_UInt32x4 },
        std::pair{ "operator>=(u32x4)"_c, &UInt32x4_operator_gte_UInt32x4 },
        std::pair{ "operator>>"_c, &UInt32x4_operator_rsh_UInt32x4 },
        std::pair{ "operator>>(u32x4)"_c, &UInt32x4_operator_rsh_UInt32x4 },
        std::pair{ "operator>>="_c, &UInt32x4_operator_rhsasg_UInt32x4 },
        std::pair{ "operator>>=(u32x4)"_c, &UInt32x4_operator_rhsasg_UInt32x4 },
        std::pair{ "operator[]"_c, &UInt32x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &UInt32x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &UInt32x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &UInt32x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &UInt32x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &UInt32x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &UInt32x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &UInt32x4_operator_index_UInt32 },
        std::pair{ "operator^"_c, &UInt32x4_operator_xor_UInt32x4 },
        std::pair{ "operator^(u32x4)"_c, &UInt32x4_operator_xor_UInt32x4 },
        std::pair{ "operator^="_c, &UInt32x4_operator_xorasg_UInt32x4 },
        std::pair{ "operator^=(u32x4)"_c, &UInt32x4_operator_xorasg_UInt32x4 },
        std::pair{ "operator|"_c, &UInt32x4_operator_or_UInt32x4 },
        std::pair{ "operator|(u32x4)"_c, &UInt32x4_operator_or_UInt32x4 },
        std::pair{ "operator|="_c, &UInt32x4_operator_orasg_UInt32x4 },
        std::pair{ "operator|=(u32x4)"_c, &UInt32x4_operator_orasg_UInt32x4 },
        std::pair{ "r"_c, &UInt32Type },
        std::pair{ "ra"_c, &UInt32x2Type },
        std::pair{ "raa"_c, &UInt32x3Type },
        std::pair{ "raaa"_c, &UInt32x4Type },
        std::pair{ "raab"_c, &UInt32x4Type },
        std::pair{ "raag"_c, &UInt32x4Type },
        std::pair{ "raar"_c, &UInt32x4Type },
        std::pair{ "rab"_c, &UInt32x3Type },
        std::pair{ "raba"_c, &UInt32x4Type },
        std::pair{ "rabb"_c, &UInt32x4Type },
        std::pair{ "rabg"_c, &UInt32x4Type },
        std::pair{ "rabr"_c, &UInt32x4Type },
        std::pair{ "rag"_c, &UInt32x3Type },
        std::pair{ "raga"_c, &UInt32x4Type },
        std::pair{ "ragb"_c, &UInt32x4Type },
        std::pair{ "ragg"_c, &UInt32x4Type },
        std::pair{ "ragr"_c, &UInt32x4Type },
        std::pair{ "rar"_c, &UInt32x3Type },
        std::pair{ "rara"_c, &UInt32x4Type },
        std::pair{ "rarb"_c, &UInt32x4Type },
        std::pair{ "rarg"_c, &UInt32x4Type },
        std::pair{ "rarr"_c, &UInt32x4Type },
        std::pair{ "rb"_c, &UInt32x2Type },
        std::pair{ "rba"_c, &UInt32x3Type },
        std::pair{ "rbaa"_c, &UInt32x4Type },
        std::pair{ "rbab"_c, &UInt32x4Type },
        std::pair{ "rbag"_c, &UInt32x4Type },
        std::pair{ "rbar"_c, &UInt32x4Type },
        std::pair{ "rbb"_c, &UInt32x3Type },
        std::pair{ "rbba"_c, &UInt32x4Type },
        std::pair{ "rbbb"_c, &UInt32x4Type },
        std::pair{ "rbbg"_c, &UInt32x4Type },
        std::pair{ "rbbr"_c, &UInt32x4Type },
        std::pair{ "rbg"_c, &UInt32x3Type },
        std::pair{ "rbga"_c, &UInt32x4Type },
        std::pair{ "rbgb"_c, &UInt32x4Type },
        std::pair{ "rbgg"_c, &UInt32x4Type },
        std::pair{ "rbgr"_c, &UInt32x4Type },
        std::pair{ "rbr"_c, &UInt32x3Type },
        std::pair{ "rbra"_c, &UInt32x4Type },
        std::pair{ "rbrb"_c, &UInt32x4Type },
        std::pair{ "rbrg"_c, &UInt32x4Type },
        std::pair{ "rbrr"_c, &UInt32x4Type },
        std::pair{ "rg"_c, &UInt32x2Type },
        std::pair{ "rga"_c, &UInt32x3Type },
        std::pair{ "rgaa"_c, &UInt32x4Type },
        std::pair{ "rgab"_c, &UInt32x4Type },
        std::pair{ "rgag"_c, &UInt32x4Type },
        std::pair{ "rgar"_c, &UInt32x4Type },
        std::pair{ "rgb"_c, &UInt32x3Type },
        std::pair{ "rgba"_c, &UInt32x4Type },
        std::pair{ "rgbb"_c, &UInt32x4Type },
        std::pair{ "rgbg"_c, &UInt32x4Type },
        std::pair{ "rgbr"_c, &UInt32x4Type },
        std::pair{ "rgg"_c, &UInt32x3Type },
        std::pair{ "rgga"_c, &UInt32x4Type },
        std::pair{ "rggb"_c, &UInt32x4Type },
        std::pair{ "rggg"_c, &UInt32x4Type },
        std::pair{ "rggr"_c, &UInt32x4Type },
        std::pair{ "rgr"_c, &UInt32x3Type },
        std::pair{ "rgra"_c, &UInt32x4Type },
        std::pair{ "rgrb"_c, &UInt32x4Type },
        std::pair{ "rgrg"_c, &UInt32x4Type },
        std::pair{ "rgrr"_c, &UInt32x4Type },
        std::pair{ "rr"_c, &UInt32x2Type },
        std::pair{ "rra"_c, &UInt32x3Type },
        std::pair{ "rraa"_c, &UInt32x4Type },
        std::pair{ "rrab"_c, &UInt32x4Type },
        std::pair{ "rrag"_c, &UInt32x4Type },
        std::pair{ "rrar"_c, &UInt32x4Type },
        std::pair{ "rrb"_c, &UInt32x3Type },
        std::pair{ "rrba"_c, &UInt32x4Type },
        std::pair{ "rrbb"_c, &UInt32x4Type },
        std::pair{ "rrbg"_c, &UInt32x4Type },
        std::pair{ "rrbr"_c, &UInt32x4Type },
        std::pair{ "rrg"_c, &UInt32x3Type },
        std::pair{ "rrga"_c, &UInt32x4Type },
        std::pair{ "rrgb"_c, &UInt32x4Type },
        std::pair{ "rrgg"_c, &UInt32x4Type },
        std::pair{ "rrgr"_c, &UInt32x4Type },
        std::pair{ "rrr"_c, &UInt32x3Type },
        std::pair{ "rrra"_c, &UInt32x4Type },
        std::pair{ "rrrb"_c, &UInt32x4Type },
        std::pair{ "rrrg"_c, &UInt32x4Type },
        std::pair{ "rrrr"_c, &UInt32x4Type },
        std::pair{ "w"_c, &UInt32Type },
        std::pair{ "ww"_c, &UInt32x2Type },
        std::pair{ "www"_c, &UInt32x3Type },
        std::pair{ "wwww"_c, &UInt32x4Type },
        std::pair{ "wwwx"_c, &UInt32x4Type },
        std::pair{ "wwwy"_c, &UInt32x4Type },
        std::pair{ "wwwz"_c, &UInt32x4Type },
        std::pair{ "wwx"_c, &UInt32x3Type },
        std::pair{ "wwxw"_c, &UInt32x4Type },
        std::pair{ "wwxx"_c, &UInt32x4Type },
        std::pair{ "wwxy"_c, &UInt32x4Type },
        std::pair{ "wwxz"_c, &UInt32x4Type },
        std::pair{ "wwy"_c, &UInt32x3Type },
        std::pair{ "wwyw"_c, &UInt32x4Type },
        std::pair{ "wwyx"_c, &UInt32x4Type },
        std::pair{ "wwyy"_c, &UInt32x4Type },
        std::pair{ "wwyz"_c, &UInt32x4Type },
        std::pair{ "wwz"_c, &UInt32x3Type },
        std::pair{ "wwzw"_c, &UInt32x4Type },
        std::pair{ "wwzx"_c, &UInt32x4Type },
        std::pair{ "wwzy"_c, &UInt32x4Type },
        std::pair{ "wwzz"_c, &UInt32x4Type },
        std::pair{ "wx"_c, &UInt32x2Type },
        std::pair{ "wxw"_c, &UInt32x3Type },
        std::pair{ "wxww"_c, &UInt32x4Type },
        std::pair{ "wxwx"_c, &UInt32x4Type },
        std::pair{ "wxwy"_c, &UInt32x4Type },
        std::pair{ "wxwz"_c, &UInt32x4Type },
        std::pair{ "wxx"_c, &UInt32x3Type },
        std::pair{ "wxxw"_c, &UInt32x4Type },
        std::pair{ "wxxx"_c, &UInt32x4Type },
        std::pair{ "wxxy"_c, &UInt32x4Type },
        std::pair{ "wxxz"_c, &UInt32x4Type },
        std::pair{ "wxy"_c, &UInt32x3Type },
        std::pair{ "wxyw"_c, &UInt32x4Type },
        std::pair{ "wxyx"_c, &UInt32x4Type },
        std::pair{ "wxyy"_c, &UInt32x4Type },
        std::pair{ "wxyz"_c, &UInt32x4Type },
        std::pair{ "wxz"_c, &UInt32x3Type },
        std::pair{ "wxzw"_c, &UInt32x4Type },
        std::pair{ "wxzx"_c, &UInt32x4Type },
        std::pair{ "wxzy"_c, &UInt32x4Type },
        std::pair{ "wxzz"_c, &UInt32x4Type },
        std::pair{ "wy"_c, &UInt32x2Type },
        std::pair{ "wyw"_c, &UInt32x3Type },
        std::pair{ "wyww"_c, &UInt32x4Type },
        std::pair{ "wywx"_c, &UInt32x4Type },
        std::pair{ "wywy"_c, &UInt32x4Type },
        std::pair{ "wywz"_c, &UInt32x4Type },
        std::pair{ "wyx"_c, &UInt32x3Type },
        std::pair{ "wyxw"_c, &UInt32x4Type },
        std::pair{ "wyxx"_c, &UInt32x4Type },
        std::pair{ "wyxy"_c, &UInt32x4Type },
        std::pair{ "wyxz"_c, &UInt32x4Type },
        std::pair{ "wyy"_c, &UInt32x3Type },
        std::pair{ "wyyw"_c, &UInt32x4Type },
        std::pair{ "wyyx"_c, &UInt32x4Type },
        std::pair{ "wyyy"_c, &UInt32x4Type },
        std::pair{ "wyyz"_c, &UInt32x4Type },
        std::pair{ "wyz"_c, &UInt32x3Type },
        std::pair{ "wyzw"_c, &UInt32x4Type },
        std::pair{ "wyzx"_c, &UInt32x4Type },
        std::pair{ "wyzy"_c, &UInt32x4Type },
        std::pair{ "wyzz"_c, &UInt32x4Type },
        std::pair{ "wz"_c, &UInt32x2Type },
        std::pair{ "wzw"_c, &UInt32x3Type },
        std::pair{ "wzww"_c, &UInt32x4Type },
        std::pair{ "wzwx"_c, &UInt32x4Type },
        std::pair{ "wzwy"_c, &UInt32x4Type },
        std::pair{ "wzwz"_c, &UInt32x4Type },
        std::pair{ "wzx"_c, &UInt32x3Type },
        std::pair{ "wzxw"_c, &UInt32x4Type },
        std::pair{ "wzxx"_c, &UInt32x4Type },
        std::pair{ "wzxy"_c, &UInt32x4Type },
        std::pair{ "wzxz"_c, &UInt32x4Type },
        std::pair{ "wzy"_c, &UInt32x3Type },
        std::pair{ "wzyw"_c, &UInt32x4Type },
        std::pair{ "wzyx"_c, &UInt32x4Type },
        std::pair{ "wzyy"_c, &UInt32x4Type },
        std::pair{ "wzyz"_c, &UInt32x4Type },
        std::pair{ "wzz"_c, &UInt32x3Type },
        std::pair{ "wzzw"_c, &UInt32x4Type },
        std::pair{ "wzzx"_c, &UInt32x4Type },
        std::pair{ "wzzy"_c, &UInt32x4Type },
        std::pair{ "wzzz"_c, &UInt32x4Type },
        std::pair{ "x"_c, &UInt32Type },
        std::pair{ "xw"_c, &UInt32x2Type },
        std::pair{ "xww"_c, &UInt32x3Type },
        std::pair{ "xwww"_c, &UInt32x4Type },
        std::pair{ "xwwx"_c, &UInt32x4Type },
        std::pair{ "xwwy"_c, &UInt32x4Type },
        std::pair{ "xwwz"_c, &UInt32x4Type },
        std::pair{ "xwx"_c, &UInt32x3Type },
        std::pair{ "xwxw"_c, &UInt32x4Type },
        std::pair{ "xwxx"_c, &UInt32x4Type },
        std::pair{ "xwxy"_c, &UInt32x4Type },
        std::pair{ "xwxz"_c, &UInt32x4Type },
        std::pair{ "xwy"_c, &UInt32x3Type },
        std::pair{ "xwyw"_c, &UInt32x4Type },
        std::pair{ "xwyx"_c, &UInt32x4Type },
        std::pair{ "xwyy"_c, &UInt32x4Type },
        std::pair{ "xwyz"_c, &UInt32x4Type },
        std::pair{ "xwz"_c, &UInt32x3Type },
        std::pair{ "xwzw"_c, &UInt32x4Type },
        std::pair{ "xwzx"_c, &UInt32x4Type },
        std::pair{ "xwzy"_c, &UInt32x4Type },
        std::pair{ "xwzz"_c, &UInt32x4Type },
        std::pair{ "xx"_c, &UInt32x2Type },
        std::pair{ "xxw"_c, &UInt32x3Type },
        std::pair{ "xxww"_c, &UInt32x4Type },
        std::pair{ "xxwx"_c, &UInt32x4Type },
        std::pair{ "xxwy"_c, &UInt32x4Type },
        std::pair{ "xxwz"_c, &UInt32x4Type },
        std::pair{ "xxx"_c, &UInt32x3Type },
        std::pair{ "xxxw"_c, &UInt32x4Type },
        std::pair{ "xxxx"_c, &UInt32x4Type },
        std::pair{ "xxxy"_c, &UInt32x4Type },
        std::pair{ "xxxz"_c, &UInt32x4Type },
        std::pair{ "xxy"_c, &UInt32x3Type },
        std::pair{ "xxyw"_c, &UInt32x4Type },
        std::pair{ "xxyx"_c, &UInt32x4Type },
        std::pair{ "xxyy"_c, &UInt32x4Type },
        std::pair{ "xxyz"_c, &UInt32x4Type },
        std::pair{ "xxz"_c, &UInt32x3Type },
        std::pair{ "xxzw"_c, &UInt32x4Type },
        std::pair{ "xxzx"_c, &UInt32x4Type },
        std::pair{ "xxzy"_c, &UInt32x4Type },
        std::pair{ "xxzz"_c, &UInt32x4Type },
        std::pair{ "xy"_c, &UInt32x2Type },
        std::pair{ "xyw"_c, &UInt32x3Type },
        std::pair{ "xyww"_c, &UInt32x4Type },
        std::pair{ "xywx"_c, &UInt32x4Type },
        std::pair{ "xywy"_c, &UInt32x4Type },
        std::pair{ "xywz"_c, &UInt32x4Type },
        std::pair{ "xyx"_c, &UInt32x3Type },
        std::pair{ "xyxw"_c, &UInt32x4Type },
        std::pair{ "xyxx"_c, &UInt32x4Type },
        std::pair{ "xyxy"_c, &UInt32x4Type },
        std::pair{ "xyxz"_c, &UInt32x4Type },
        std::pair{ "xyy"_c, &UInt32x3Type },
        std::pair{ "xyyw"_c, &UInt32x4Type },
        std::pair{ "xyyx"_c, &UInt32x4Type },
        std::pair{ "xyyy"_c, &UInt32x4Type },
        std::pair{ "xyyz"_c, &UInt32x4Type },
        std::pair{ "xyz"_c, &UInt32x3Type },
        std::pair{ "xyzw"_c, &UInt32x4Type },
        std::pair{ "xyzx"_c, &UInt32x4Type },
        std::pair{ "xyzy"_c, &UInt32x4Type },
        std::pair{ "xyzz"_c, &UInt32x4Type },
        std::pair{ "xz"_c, &UInt32x2Type },
        std::pair{ "xzw"_c, &UInt32x3Type },
        std::pair{ "xzww"_c, &UInt32x4Type },
        std::pair{ "xzwx"_c, &UInt32x4Type },
        std::pair{ "xzwy"_c, &UInt32x4Type },
        std::pair{ "xzwz"_c, &UInt32x4Type },
        std::pair{ "xzx"_c, &UInt32x3Type },
        std::pair{ "xzxw"_c, &UInt32x4Type },
        std::pair{ "xzxx"_c, &UInt32x4Type },
        std::pair{ "xzxy"_c, &UInt32x4Type },
        std::pair{ "xzxz"_c, &UInt32x4Type },
        std::pair{ "xzy"_c, &UInt32x3Type },
        std::pair{ "xzyw"_c, &UInt32x4Type },
        std::pair{ "xzyx"_c, &UInt32x4Type },
        std::pair{ "xzyy"_c, &UInt32x4Type },
        std::pair{ "xzyz"_c, &UInt32x4Type },
        std::pair{ "xzz"_c, &UInt32x3Type },
        std::pair{ "xzzw"_c, &UInt32x4Type },
        std::pair{ "xzzx"_c, &UInt32x4Type },
        std::pair{ "xzzy"_c, &UInt32x4Type },
        std::pair{ "xzzz"_c, &UInt32x4Type },
        std::pair{ "y"_c, &UInt32Type },
        std::pair{ "yw"_c, &UInt32x2Type },
        std::pair{ "yww"_c, &UInt32x3Type },
        std::pair{ "ywww"_c, &UInt32x4Type },
        std::pair{ "ywwx"_c, &UInt32x4Type },
        std::pair{ "ywwy"_c, &UInt32x4Type },
        std::pair{ "ywwz"_c, &UInt32x4Type },
        std::pair{ "ywx"_c, &UInt32x3Type },
        std::pair{ "ywxw"_c, &UInt32x4Type },
        std::pair{ "ywxx"_c, &UInt32x4Type },
        std::pair{ "ywxy"_c, &UInt32x4Type },
        std::pair{ "ywxz"_c, &UInt32x4Type },
        std::pair{ "ywy"_c, &UInt32x3Type },
        std::pair{ "ywyw"_c, &UInt32x4Type },
        std::pair{ "ywyx"_c, &UInt32x4Type },
        std::pair{ "ywyy"_c, &UInt32x4Type },
        std::pair{ "ywyz"_c, &UInt32x4Type },
        std::pair{ "ywz"_c, &UInt32x3Type },
        std::pair{ "ywzw"_c, &UInt32x4Type },
        std::pair{ "ywzx"_c, &UInt32x4Type },
        std::pair{ "ywzy"_c, &UInt32x4Type },
        std::pair{ "ywzz"_c, &UInt32x4Type },
        std::pair{ "yx"_c, &UInt32x2Type },
        std::pair{ "yxw"_c, &UInt32x3Type },
        std::pair{ "yxww"_c, &UInt32x4Type },
        std::pair{ "yxwx"_c, &UInt32x4Type },
        std::pair{ "yxwy"_c, &UInt32x4Type },
        std::pair{ "yxwz"_c, &UInt32x4Type },
        std::pair{ "yxx"_c, &UInt32x3Type },
        std::pair{ "yxxw"_c, &UInt32x4Type },
        std::pair{ "yxxx"_c, &UInt32x4Type },
        std::pair{ "yxxy"_c, &UInt32x4Type },
        std::pair{ "yxxz"_c, &UInt32x4Type },
        std::pair{ "yxy"_c, &UInt32x3Type },
        std::pair{ "yxyw"_c, &UInt32x4Type },
        std::pair{ "yxyx"_c, &UInt32x4Type },
        std::pair{ "yxyy"_c, &UInt32x4Type },
        std::pair{ "yxyz"_c, &UInt32x4Type },
        std::pair{ "yxz"_c, &UInt32x3Type },
        std::pair{ "yxzw"_c, &UInt32x4Type },
        std::pair{ "yxzx"_c, &UInt32x4Type },
        std::pair{ "yxzy"_c, &UInt32x4Type },
        std::pair{ "yxzz"_c, &UInt32x4Type },
        std::pair{ "yy"_c, &UInt32x2Type },
        std::pair{ "yyw"_c, &UInt32x3Type },
        std::pair{ "yyww"_c, &UInt32x4Type },
        std::pair{ "yywx"_c, &UInt32x4Type },
        std::pair{ "yywy"_c, &UInt32x4Type },
        std::pair{ "yywz"_c, &UInt32x4Type },
        std::pair{ "yyx"_c, &UInt32x3Type },
        std::pair{ "yyxw"_c, &UInt32x4Type },
        std::pair{ "yyxx"_c, &UInt32x4Type },
        std::pair{ "yyxy"_c, &UInt32x4Type },
        std::pair{ "yyxz"_c, &UInt32x4Type },
        std::pair{ "yyy"_c, &UInt32x3Type },
        std::pair{ "yyyw"_c, &UInt32x4Type },
        std::pair{ "yyyx"_c, &UInt32x4Type },
        std::pair{ "yyyy"_c, &UInt32x4Type },
        std::pair{ "yyyz"_c, &UInt32x4Type },
        std::pair{ "yyz"_c, &UInt32x3Type },
        std::pair{ "yyzw"_c, &UInt32x4Type },
        std::pair{ "yyzx"_c, &UInt32x4Type },
        std::pair{ "yyzy"_c, &UInt32x4Type },
        std::pair{ "yyzz"_c, &UInt32x4Type },
        std::pair{ "yz"_c, &UInt32x2Type },
        std::pair{ "yzw"_c, &UInt32x3Type },
        std::pair{ "yzww"_c, &UInt32x4Type },
        std::pair{ "yzwx"_c, &UInt32x4Type },
        std::pair{ "yzwy"_c, &UInt32x4Type },
        std::pair{ "yzwz"_c, &UInt32x4Type },
        std::pair{ "yzx"_c, &UInt32x3Type },
        std::pair{ "yzxw"_c, &UInt32x4Type },
        std::pair{ "yzxx"_c, &UInt32x4Type },
        std::pair{ "yzxy"_c, &UInt32x4Type },
        std::pair{ "yzxz"_c, &UInt32x4Type },
        std::pair{ "yzy"_c, &UInt32x3Type },
        std::pair{ "yzyw"_c, &UInt32x4Type },
        std::pair{ "yzyx"_c, &UInt32x4Type },
        std::pair{ "yzyy"_c, &UInt32x4Type },
        std::pair{ "yzyz"_c, &UInt32x4Type },
        std::pair{ "yzz"_c, &UInt32x3Type },
        std::pair{ "yzzw"_c, &UInt32x4Type },
        std::pair{ "yzzx"_c, &UInt32x4Type },
        std::pair{ "yzzy"_c, &UInt32x4Type },
        std::pair{ "yzzz"_c, &UInt32x4Type },
        std::pair{ "z"_c, &UInt32Type },
        std::pair{ "zw"_c, &UInt32x2Type },
        std::pair{ "zww"_c, &UInt32x3Type },
        std::pair{ "zwww"_c, &UInt32x4Type },
        std::pair{ "zwwx"_c, &UInt32x4Type },
        std::pair{ "zwwy"_c, &UInt32x4Type },
        std::pair{ "zwwz"_c, &UInt32x4Type },
        std::pair{ "zwx"_c, &UInt32x3Type },
        std::pair{ "zwxw"_c, &UInt32x4Type },
        std::pair{ "zwxx"_c, &UInt32x4Type },
        std::pair{ "zwxy"_c, &UInt32x4Type },
        std::pair{ "zwxz"_c, &UInt32x4Type },
        std::pair{ "zwy"_c, &UInt32x3Type },
        std::pair{ "zwyw"_c, &UInt32x4Type },
        std::pair{ "zwyx"_c, &UInt32x4Type },
        std::pair{ "zwyy"_c, &UInt32x4Type },
        std::pair{ "zwyz"_c, &UInt32x4Type },
        std::pair{ "zwz"_c, &UInt32x3Type },
        std::pair{ "zwzw"_c, &UInt32x4Type },
        std::pair{ "zwzx"_c, &UInt32x4Type },
        std::pair{ "zwzy"_c, &UInt32x4Type },
        std::pair{ "zwzz"_c, &UInt32x4Type },
        std::pair{ "zx"_c, &UInt32x2Type },
        std::pair{ "zxw"_c, &UInt32x3Type },
        std::pair{ "zxww"_c, &UInt32x4Type },
        std::pair{ "zxwx"_c, &UInt32x4Type },
        std::pair{ "zxwy"_c, &UInt32x4Type },
        std::pair{ "zxwz"_c, &UInt32x4Type },
        std::pair{ "zxx"_c, &UInt32x3Type },
        std::pair{ "zxxw"_c, &UInt32x4Type },
        std::pair{ "zxxx"_c, &UInt32x4Type },
        std::pair{ "zxxy"_c, &UInt32x4Type },
        std::pair{ "zxxz"_c, &UInt32x4Type },
        std::pair{ "zxy"_c, &UInt32x3Type },
        std::pair{ "zxyw"_c, &UInt32x4Type },
        std::pair{ "zxyx"_c, &UInt32x4Type },
        std::pair{ "zxyy"_c, &UInt32x4Type },
        std::pair{ "zxyz"_c, &UInt32x4Type },
        std::pair{ "zxz"_c, &UInt32x3Type },
        std::pair{ "zxzw"_c, &UInt32x4Type },
        std::pair{ "zxzx"_c, &UInt32x4Type },
        std::pair{ "zxzy"_c, &UInt32x4Type },
        std::pair{ "zxzz"_c, &UInt32x4Type },
        std::pair{ "zy"_c, &UInt32x2Type },
        std::pair{ "zyw"_c, &UInt32x3Type },
        std::pair{ "zyww"_c, &UInt32x4Type },
        std::pair{ "zywx"_c, &UInt32x4Type },
        std::pair{ "zywy"_c, &UInt32x4Type },
        std::pair{ "zywz"_c, &UInt32x4Type },
        std::pair{ "zyx"_c, &UInt32x3Type },
        std::pair{ "zyxw"_c, &UInt32x4Type },
        std::pair{ "zyxx"_c, &UInt32x4Type },
        std::pair{ "zyxy"_c, &UInt32x4Type },
        std::pair{ "zyxz"_c, &UInt32x4Type },
        std::pair{ "zyy"_c, &UInt32x3Type },
        std::pair{ "zyyw"_c, &UInt32x4Type },
        std::pair{ "zyyx"_c, &UInt32x4Type },
        std::pair{ "zyyy"_c, &UInt32x4Type },
        std::pair{ "zyyz"_c, &UInt32x4Type },
        std::pair{ "zyz"_c, &UInt32x3Type },
        std::pair{ "zyzw"_c, &UInt32x4Type },
        std::pair{ "zyzx"_c, &UInt32x4Type },
        std::pair{ "zyzy"_c, &UInt32x4Type },
        std::pair{ "zyzz"_c, &UInt32x4Type },
        std::pair{ "zz"_c, &UInt32x2Type },
        std::pair{ "zzw"_c, &UInt32x3Type },
        std::pair{ "zzww"_c, &UInt32x4Type },
        std::pair{ "zzwx"_c, &UInt32x4Type },
        std::pair{ "zzwy"_c, &UInt32x4Type },
        std::pair{ "zzwz"_c, &UInt32x4Type },
        std::pair{ "zzx"_c, &UInt32x3Type },
        std::pair{ "zzxw"_c, &UInt32x4Type },
        std::pair{ "zzxx"_c, &UInt32x4Type },
        std::pair{ "zzxy"_c, &UInt32x4Type },
        std::pair{ "zzxz"_c, &UInt32x4Type },
        std::pair{ "zzy"_c, &UInt32x3Type },
        std::pair{ "zzyw"_c, &UInt32x4Type },
        std::pair{ "zzyx"_c, &UInt32x4Type },
        std::pair{ "zzyy"_c, &UInt32x4Type },
        std::pair{ "zzyz"_c, &UInt32x4Type },
        std::pair{ "zzz"_c, &UInt32x3Type },
        std::pair{ "zzzw"_c, &UInt32x4Type },
        std::pair{ "zzzx"_c, &UInt32x4Type },
        std::pair{ "zzzy"_c, &UInt32x4Type },
        std::pair{ "zzzz"_c, &UInt32x4Type }
    };
}
UInt32x4 UInt32x4Type;

/// operator[] with Int32
Variable Int32x4_operator_index_Int32_arg;
Function Int32x4_operator_index_Int32;
inline constexpr std::array Int32x4_operator_index_Int32_args = { &Int32x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int32x4_operator_index_UInt32_arg;
Function Int32x4_operator_index_UInt32;
inline constexpr std::array Int32x4_operator_index_UInt32_args = { &Int32x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int32x4_operator_index_Int16_arg;
Function Int32x4_operator_index_Int16;
inline constexpr std::array Int32x4_operator_index_Int16_args = { &Int32x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int32x4_operator_index_UInt16_arg;
Function Int32x4_operator_index_UInt16;
inline constexpr std::array Int32x4_operator_index_UInt16_args = { &Int32x4_operator_index_UInt16_arg };

/// operator+ with Int32x4
Variable Int32x4_operator_add_Int32x4_arg;
Function Int32x4_operator_add_Int32x4;
inline constexpr std::array Int32x4_operator_add_Int32x4_args = { &Int32x4_operator_add_Int32x4_arg };

/// operator- with Int32x4
Variable Int32x4_operator_sub_Int32x4_arg;
Function Int32x4_operator_sub_Int32x4;
inline constexpr std::array Int32x4_operator_sub_Int32x4_args = { &Int32x4_operator_sub_Int32x4_arg };

/// operator* with Int32x4
Variable Int32x4_operator_mul_Int32x4_arg;
Function Int32x4_operator_mul_Int32x4;
inline constexpr std::array Int32x4_operator_mul_Int32x4_args = { &Int32x4_operator_mul_Int32x4_arg };

/// operator/ with Int32x4
Variable Int32x4_operator_div_Int32x4_arg;
Function Int32x4_operator_div_Int32x4;
inline constexpr std::array Int32x4_operator_div_Int32x4_args = { &Int32x4_operator_div_Int32x4_arg };

/// operator% with Int32x4
Variable Int32x4_operator_mod_Int32x4_arg;
Function Int32x4_operator_mod_Int32x4;
inline constexpr std::array Int32x4_operator_mod_Int32x4_args = { &Int32x4_operator_mod_Int32x4_arg };

/// operator+= with Int32x4
Variable Int32x4_operator_addasg_Int32x4_arg;
Function Int32x4_operator_addasg_Int32x4;
inline constexpr std::array Int32x4_operator_addasg_Int32x4_args = { &Int32x4_operator_addasg_Int32x4_arg };

/// operator-= with Int32x4
Variable Int32x4_operator_subasg_Int32x4_arg;
Function Int32x4_operator_subasg_Int32x4;
inline constexpr std::array Int32x4_operator_subasg_Int32x4_args = { &Int32x4_operator_subasg_Int32x4_arg };

/// operator*= with Int32x4
Variable Int32x4_operator_mulasg_Int32x4_arg;
Function Int32x4_operator_mulasg_Int32x4;
inline constexpr std::array Int32x4_operator_mulasg_Int32x4_args = { &Int32x4_operator_mulasg_Int32x4_arg };

/// operator/= with Int32x4
Variable Int32x4_operator_divasg_Int32x4_arg;
Function Int32x4_operator_divasg_Int32x4;
inline constexpr std::array Int32x4_operator_divasg_Int32x4_args = { &Int32x4_operator_divasg_Int32x4_arg };

/// operator< with Int32x4
Variable Int32x4_operator_lt_Int32x4_arg;
Function Int32x4_operator_lt_Int32x4;
inline constexpr std::array Int32x4_operator_lt_Int32x4_args = { &Int32x4_operator_lt_Int32x4_arg };

/// operator<= with Int32x4
Variable Int32x4_operator_lte_Int32x4_arg;
Function Int32x4_operator_lte_Int32x4;
inline constexpr std::array Int32x4_operator_lte_Int32x4_args = { &Int32x4_operator_lte_Int32x4_arg };

/// operator> with Int32x4
Variable Int32x4_operator_gt_Int32x4_arg;
Function Int32x4_operator_gt_Int32x4;
inline constexpr std::array Int32x4_operator_gt_Int32x4_args = { &Int32x4_operator_gt_Int32x4_arg };

/// operator>= with Int32x4
Variable Int32x4_operator_gte_Int32x4_arg;
Function Int32x4_operator_gte_Int32x4;
inline constexpr std::array Int32x4_operator_gte_Int32x4_args = { &Int32x4_operator_gte_Int32x4_arg };

/// operator== with Int32x4
Variable Int32x4_operator_eq_Int32x4_arg;
Function Int32x4_operator_eq_Int32x4;
inline constexpr std::array Int32x4_operator_eq_Int32x4_args = { &Int32x4_operator_eq_Int32x4_arg };

/// operator!= with Int32x4
Variable Int32x4_operator_neq_Int32x4_arg;
Function Int32x4_operator_neq_Int32x4;
inline constexpr std::array Int32x4_operator_neq_Int32x4_args = { &Int32x4_operator_neq_Int32x4_arg };

/// operator* with Float32
Variable Int32x4_operator_scale_Float32_arg;
Function Int32x4_operator_scale_Float32;
inline constexpr std::array Int32x4_operator_scale_Float32_args = { &Int32x4_operator_scale_Float32_arg };

/// operator* with UInt32
Variable Int32x4_operator_scale_UInt32_arg;
Function Int32x4_operator_scale_UInt32;
inline constexpr std::array Int32x4_operator_scale_UInt32_args = { &Int32x4_operator_scale_UInt32_arg };

/// operator* with Int32
Variable Int32x4_operator_scale_Int32_arg;
Function Int32x4_operator_scale_Int32;
inline constexpr std::array Int32x4_operator_scale_Int32_args = { &Int32x4_operator_scale_Int32_arg };

/// operator| with Int32x4
Variable Int32x4_operator_or_Int32x4_arg;
Function Int32x4_operator_or_Int32x4;
inline constexpr std::array Int32x4_operator_or_Int32x4_args = { &Int32x4_operator_or_Int32x4_arg };

/// operator& with Int32x4
Variable Int32x4_operator_and_Int32x4_arg;
Function Int32x4_operator_and_Int32x4;
inline constexpr std::array Int32x4_operator_and_Int32x4_args = { &Int32x4_operator_and_Int32x4_arg };

/// operator^ with Int32x4
Variable Int32x4_operator_xor_Int32x4_arg;
Function Int32x4_operator_xor_Int32x4;
inline constexpr std::array Int32x4_operator_xor_Int32x4_args = { &Int32x4_operator_xor_Int32x4_arg };

/// operator<< with Int32x4
Variable Int32x4_operator_lsh_Int32x4_arg;
Function Int32x4_operator_lsh_Int32x4;
inline constexpr std::array Int32x4_operator_lsh_Int32x4_args = { &Int32x4_operator_lsh_Int32x4_arg };

/// operator>> with Int32x4
Variable Int32x4_operator_rsh_Int32x4_arg;
Function Int32x4_operator_rsh_Int32x4;
inline constexpr std::array Int32x4_operator_rsh_Int32x4_args = { &Int32x4_operator_rsh_Int32x4_arg };

/// operator|= with Int32x4
Variable Int32x4_operator_orasg_Int32x4_arg;
Function Int32x4_operator_orasg_Int32x4;
inline constexpr std::array Int32x4_operator_orasg_Int32x4_args = { &Int32x4_operator_orasg_Int32x4_arg };

/// operator&= with Int32x4
Variable Int32x4_operator_andasg_Int32x4_arg;
Function Int32x4_operator_andasg_Int32x4;
inline constexpr std::array Int32x4_operator_andasg_Int32x4_args = { &Int32x4_operator_andasg_Int32x4_arg };

/// operator^= with Int32x4
Variable Int32x4_operator_xorasg_Int32x4_arg;
Function Int32x4_operator_xorasg_Int32x4;
inline constexpr std::array Int32x4_operator_xorasg_Int32x4_args = { &Int32x4_operator_xorasg_Int32x4_arg };

/// operator<<= with Int32x4
Variable Int32x4_operator_lshasg_Int32x4_arg;
Function Int32x4_operator_lshasg_Int32x4;
inline constexpr std::array Int32x4_operator_lshasg_Int32x4_args = { &Int32x4_operator_lshasg_Int32x4_arg };

/// operator>>= with Int32x4
Variable Int32x4_operator_rhsasg_Int32x4_arg;
Function Int32x4_operator_rhsasg_Int32x4;
inline constexpr std::array Int32x4_operator_rhsasg_Int32x4_args = { &Int32x4_operator_rhsasg_Int32x4_arg };

Int32x4::Int32x4()
{
    this->name = "i32x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int32;
    this->builtin = true;

    /// operator[] with Int32
    Int32x4_operator_index_Int32_arg.name = "arg"_c;
    Int32x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x4_operator_index_Int32.name = "operator[]"_c;
    Int32x4_operator_index_Int32.backendIndex = 917;
    Int32x4_operator_index_Int32.returnType = Type::FullType { Int32Type.name };
    Int32x4_operator_index_Int32.parameters = Int32x4_operator_index_Int32_args;
    Symbol::Resolved(&Int32x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_operator_index_Int32)->signature = "i32 operator[](i32)"_c;
    Symbol::Resolved(&Int32x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int32x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int32x4_operator_index_Int32)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt32
    Int32x4_operator_index_UInt32_arg.name = "arg"_c;
    Int32x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x4_operator_index_UInt32.name = "operator[]"_c;
    Int32x4_operator_index_UInt32.backendIndex = 918;
    Int32x4_operator_index_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32x4_operator_index_UInt32.parameters = Int32x4_operator_index_UInt32_args;
    Symbol::Resolved(&Int32x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x4_operator_index_UInt32)->signature = "i32 operator[](u32)"_c;
    Symbol::Resolved(&Int32x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int32x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int32x4_operator_index_UInt32)->returnTypeSymbol = &Int32Type;

    /// operator[] with Int16
    Int32x4_operator_index_Int16_arg.name = "arg"_c;
    Int32x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32x4_operator_index_Int16.name = "operator[]"_c;
    Int32x4_operator_index_Int16.backendIndex = 919;
    Int32x4_operator_index_Int16.returnType = Type::FullType { Int32Type.name };
    Int32x4_operator_index_Int16.parameters = Int32x4_operator_index_Int16_args;
    Symbol::Resolved(&Int32x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x4_operator_index_Int16)->signature = "i32 operator[](i16)"_c;
    Symbol::Resolved(&Int32x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int32x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int32x4_operator_index_Int16)->returnTypeSymbol = &Int32Type;

    /// operator[] with UInt16
    Int32x4_operator_index_UInt16_arg.name = "arg"_c;
    Int32x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32x4_operator_index_UInt16.name = "operator[]"_c;
    Int32x4_operator_index_UInt16.backendIndex = 920;
    Int32x4_operator_index_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32x4_operator_index_UInt16.parameters = Int32x4_operator_index_UInt16_args;
    Symbol::Resolved(&Int32x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x4_operator_index_UInt16)->signature = "i32 operator[](u16)"_c;
    Symbol::Resolved(&Int32x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int32x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int32x4_operator_index_UInt16)->returnTypeSymbol = &Int32Type;

    /// operator+ with Int32x4
    Int32x4_operator_add_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_add_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_add_Int32x4.name = "operator+"_c;
    Int32x4_operator_add_Int32x4.backendIndex = 921;
    Int32x4_operator_add_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_add_Int32x4.parameters = Int32x4_operator_add_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_add_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_add_Int32x4)->signature = "i32x4 operator+(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_add_Int32x4)->name = "operator+(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_add_Int32x4)->nameWithVarNames = "operator+(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_add_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator- with Int32x4
    Int32x4_operator_sub_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_sub_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_sub_Int32x4.name = "operator-"_c;
    Int32x4_operator_sub_Int32x4.backendIndex = 922;
    Int32x4_operator_sub_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_sub_Int32x4.parameters = Int32x4_operator_sub_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4)->signature = "i32x4 operator-(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4)->name = "operator-(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4)->nameWithVarNames = "operator-(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_sub_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator* with Int32x4
    Int32x4_operator_mul_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_mul_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_mul_Int32x4.name = "operator*"_c;
    Int32x4_operator_mul_Int32x4.backendIndex = 923;
    Int32x4_operator_mul_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_mul_Int32x4.parameters = Int32x4_operator_mul_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4)->signature = "i32x4 operator*(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4)->name = "operator*(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4)->nameWithVarNames = "operator*(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mul_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator/ with Int32x4
    Int32x4_operator_div_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_div_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_div_Int32x4.name = "operator/"_c;
    Int32x4_operator_div_Int32x4.backendIndex = 924;
    Int32x4_operator_div_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_div_Int32x4.parameters = Int32x4_operator_div_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_div_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_div_Int32x4)->signature = "i32x4 operator/(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_div_Int32x4)->name = "operator/(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_div_Int32x4)->nameWithVarNames = "operator/(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_div_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator% with Int32x4
    Int32x4_operator_mod_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_mod_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_mod_Int32x4.name = "operator%"_c;
    Int32x4_operator_mod_Int32x4.backendIndex = 925;
    Int32x4_operator_mod_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_mod_Int32x4.parameters = Int32x4_operator_mod_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4)->signature = "i32x4 operator%(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4)->name = "operator%(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4)->nameWithVarNames = "operator%(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mod_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator+= with Int32x4
    Int32x4_operator_addasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_addasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_addasg_Int32x4.name = "operator+="_c;
    Int32x4_operator_addasg_Int32x4.backendIndex = 926;
    Int32x4_operator_addasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_addasg_Int32x4.parameters = Int32x4_operator_addasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4)->signature = "i32x4 operator+=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4)->name = "operator+=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4)->nameWithVarNames = "operator+=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_addasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator-= with Int32x4
    Int32x4_operator_subasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_subasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_subasg_Int32x4.name = "operator-="_c;
    Int32x4_operator_subasg_Int32x4.backendIndex = 927;
    Int32x4_operator_subasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_subasg_Int32x4.parameters = Int32x4_operator_subasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4)->signature = "i32x4 operator-=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4)->name = "operator-=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4)->nameWithVarNames = "operator-=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_subasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator*= with Int32x4
    Int32x4_operator_mulasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_mulasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_mulasg_Int32x4.name = "operator*="_c;
    Int32x4_operator_mulasg_Int32x4.backendIndex = 928;
    Int32x4_operator_mulasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_mulasg_Int32x4.parameters = Int32x4_operator_mulasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4)->signature = "i32x4 operator*=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4)->name = "operator*=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4)->nameWithVarNames = "operator*=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_mulasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator/= with Int32x4
    Int32x4_operator_divasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_divasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_divasg_Int32x4.name = "operator/="_c;
    Int32x4_operator_divasg_Int32x4.backendIndex = 929;
    Int32x4_operator_divasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_divasg_Int32x4.parameters = Int32x4_operator_divasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4)->signature = "i32x4 operator/=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4)->name = "operator/=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4)->nameWithVarNames = "operator/=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_divasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator< with Int32x4
    Int32x4_operator_lt_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_lt_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_lt_Int32x4.name = "operator<"_c;
    Int32x4_operator_lt_Int32x4.backendIndex = 930;
    Int32x4_operator_lt_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Int32x4_operator_lt_Int32x4.parameters = Int32x4_operator_lt_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4)->signature = "b8x4 operator<(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4)->name = "operator<(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4)->nameWithVarNames = "operator<(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lt_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator<= with Int32x4
    Int32x4_operator_lte_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_lte_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_lte_Int32x4.name = "operator<="_c;
    Int32x4_operator_lte_Int32x4.backendIndex = 931;
    Int32x4_operator_lte_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Int32x4_operator_lte_Int32x4.parameters = Int32x4_operator_lte_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4)->signature = "b8x4 operator<=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4)->name = "operator<=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4)->nameWithVarNames = "operator<=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lte_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator> with Int32x4
    Int32x4_operator_gt_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_gt_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_gt_Int32x4.name = "operator>"_c;
    Int32x4_operator_gt_Int32x4.backendIndex = 932;
    Int32x4_operator_gt_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Int32x4_operator_gt_Int32x4.parameters = Int32x4_operator_gt_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4)->signature = "b8x4 operator>(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4)->name = "operator>(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4)->nameWithVarNames = "operator>(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_gt_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator>= with Int32x4
    Int32x4_operator_gte_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_gte_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_gte_Int32x4.name = "operator>="_c;
    Int32x4_operator_gte_Int32x4.backendIndex = 933;
    Int32x4_operator_gte_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Int32x4_operator_gte_Int32x4.parameters = Int32x4_operator_gte_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4)->signature = "b8x4 operator>=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4)->name = "operator>=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4)->nameWithVarNames = "operator>=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_gte_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with Int32x4
    Int32x4_operator_eq_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_eq_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_eq_Int32x4.name = "operator=="_c;
    Int32x4_operator_eq_Int32x4.backendIndex = 934;
    Int32x4_operator_eq_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Int32x4_operator_eq_Int32x4.parameters = Int32x4_operator_eq_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4)->signature = "b8x4 operator==(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4)->name = "operator==(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4)->nameWithVarNames = "operator==(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_eq_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with Int32x4
    Int32x4_operator_neq_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_neq_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_neq_Int32x4.name = "operator!="_c;
    Int32x4_operator_neq_Int32x4.backendIndex = 935;
    Int32x4_operator_neq_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Int32x4_operator_neq_Int32x4.parameters = Int32x4_operator_neq_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4)->signature = "b8x4 operator!=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4)->name = "operator!=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4)->nameWithVarNames = "operator!=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_neq_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator* with Float32
    Int32x4_operator_scale_Float32_arg.name = "arg"_c;
    Int32x4_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int32x4_operator_scale_Float32.name = "operator*"_c;
    Int32x4_operator_scale_Float32.backendIndex = 936;
    Int32x4_operator_scale_Float32.returnType = Type::FullType { Float32x4Type.name };
    Int32x4_operator_scale_Float32.parameters = Int32x4_operator_scale_Float32_args;
    Symbol::Resolved(&Int32x4_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x4_operator_scale_Float32)->signature = "f32x4 operator*(f32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_Float32)->returnTypeSymbol = &Float32x4Type;

    /// operator* with UInt32
    Int32x4_operator_scale_UInt32_arg.name = "arg"_c;
    Int32x4_operator_scale_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x4_operator_scale_UInt32.name = "operator*"_c;
    Int32x4_operator_scale_UInt32.backendIndex = 937;
    Int32x4_operator_scale_UInt32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_scale_UInt32.parameters = Int32x4_operator_scale_UInt32_args;
    Symbol::Resolved(&Int32x4_operator_scale_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x4_operator_scale_UInt32)->signature = "i32x4 operator*(u32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_UInt32)->name = "operator*(u32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_UInt32)->nameWithVarNames = "operator*(arg : u32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_UInt32)->returnTypeSymbol = &Int32x4Type;

    /// operator* with Int32
    Int32x4_operator_scale_Int32_arg.name = "arg"_c;
    Int32x4_operator_scale_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x4_operator_scale_Int32.name = "operator*"_c;
    Int32x4_operator_scale_Int32.backendIndex = 938;
    Int32x4_operator_scale_Int32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_scale_Int32.parameters = Int32x4_operator_scale_Int32_args;
    Symbol::Resolved(&Int32x4_operator_scale_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_operator_scale_Int32)->signature = "i32x4 operator*(i32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_Int32)->name = "operator*(i32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_Int32)->nameWithVarNames = "operator*(arg : i32)"_c;
    Symbol::Resolved(&Int32x4_operator_scale_Int32)->returnTypeSymbol = &Int32x4Type;

    /// operator| with Int32x4
    Int32x4_operator_or_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_or_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_or_Int32x4.name = "operator|"_c;
    Int32x4_operator_or_Int32x4.backendIndex = 939;
    Int32x4_operator_or_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_or_Int32x4.parameters = Int32x4_operator_or_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_or_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_or_Int32x4)->signature = "i32x4 operator|(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_or_Int32x4)->name = "operator|(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_or_Int32x4)->nameWithVarNames = "operator|(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_or_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator& with Int32x4
    Int32x4_operator_and_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_and_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_and_Int32x4.name = "operator&"_c;
    Int32x4_operator_and_Int32x4.backendIndex = 940;
    Int32x4_operator_and_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_and_Int32x4.parameters = Int32x4_operator_and_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_and_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_and_Int32x4)->signature = "i32x4 operator&(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_and_Int32x4)->name = "operator&(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_and_Int32x4)->nameWithVarNames = "operator&(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_and_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator^ with Int32x4
    Int32x4_operator_xor_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_xor_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_xor_Int32x4.name = "operator^"_c;
    Int32x4_operator_xor_Int32x4.backendIndex = 941;
    Int32x4_operator_xor_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_xor_Int32x4.parameters = Int32x4_operator_xor_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4)->signature = "i32x4 operator^(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4)->name = "operator^(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4)->nameWithVarNames = "operator^(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_xor_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator<< with Int32x4
    Int32x4_operator_lsh_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_lsh_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_lsh_Int32x4.name = "operator<<"_c;
    Int32x4_operator_lsh_Int32x4.backendIndex = 942;
    Int32x4_operator_lsh_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_lsh_Int32x4.parameters = Int32x4_operator_lsh_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4)->signature = "i32x4 operator<<(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4)->name = "operator<<(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4)->nameWithVarNames = "operator<<(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lsh_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator>> with Int32x4
    Int32x4_operator_rsh_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_rsh_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_rsh_Int32x4.name = "operator>>"_c;
    Int32x4_operator_rsh_Int32x4.backendIndex = 943;
    Int32x4_operator_rsh_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_rsh_Int32x4.parameters = Int32x4_operator_rsh_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4)->signature = "i32x4 operator>>(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4)->name = "operator>>(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4)->nameWithVarNames = "operator>>(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_rsh_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator|= with Int32x4
    Int32x4_operator_orasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_orasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_orasg_Int32x4.name = "operator|="_c;
    Int32x4_operator_orasg_Int32x4.backendIndex = 944;
    Int32x4_operator_orasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_orasg_Int32x4.parameters = Int32x4_operator_orasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4)->signature = "i32x4 operator|=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4)->name = "operator|=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4)->nameWithVarNames = "operator|=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_orasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator&= with Int32x4
    Int32x4_operator_andasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_andasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_andasg_Int32x4.name = "operator&="_c;
    Int32x4_operator_andasg_Int32x4.backendIndex = 945;
    Int32x4_operator_andasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_andasg_Int32x4.parameters = Int32x4_operator_andasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4)->signature = "i32x4 operator&=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4)->name = "operator&=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4)->nameWithVarNames = "operator&=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_andasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator^= with Int32x4
    Int32x4_operator_xorasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_xorasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_xorasg_Int32x4.name = "operator^="_c;
    Int32x4_operator_xorasg_Int32x4.backendIndex = 946;
    Int32x4_operator_xorasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_xorasg_Int32x4.parameters = Int32x4_operator_xorasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4)->signature = "i32x4 operator^=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4)->name = "operator^=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4)->nameWithVarNames = "operator^=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_xorasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator<<= with Int32x4
    Int32x4_operator_lshasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_lshasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_lshasg_Int32x4.name = "operator<<="_c;
    Int32x4_operator_lshasg_Int32x4.backendIndex = 947;
    Int32x4_operator_lshasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_lshasg_Int32x4.parameters = Int32x4_operator_lshasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4)->signature = "i32x4 operator<<=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4)->name = "operator<<=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4)->nameWithVarNames = "operator<<=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_lshasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// operator>>= with Int32x4
    Int32x4_operator_rhsasg_Int32x4_arg.name = "arg"_c;
    Int32x4_operator_rhsasg_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_operator_rhsasg_Int32x4.name = "operator>>="_c;
    Int32x4_operator_rhsasg_Int32x4.backendIndex = 948;
    Int32x4_operator_rhsasg_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_operator_rhsasg_Int32x4.parameters = Int32x4_operator_rhsasg_Int32x4_args;
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4)->signature = "i32x4 operator>>=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4)->name = "operator>>=(i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4)->nameWithVarNames = "operator>>=(arg : i32x4)"_c;
    Symbol::Resolved(&Int32x4_operator_rhsasg_Int32x4)->returnTypeSymbol = &Int32x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 744> { 
        std::pair{ "a"_c, &Int32Type },
        std::pair{ "aa"_c, &Int32x2Type },
        std::pair{ "aaa"_c, &Int32x3Type },
        std::pair{ "aaaa"_c, &Int32x4Type },
        std::pair{ "aaab"_c, &Int32x4Type },
        std::pair{ "aaag"_c, &Int32x4Type },
        std::pair{ "aaar"_c, &Int32x4Type },
        std::pair{ "aab"_c, &Int32x3Type },
        std::pair{ "aaba"_c, &Int32x4Type },
        std::pair{ "aabb"_c, &Int32x4Type },
        std::pair{ "aabg"_c, &Int32x4Type },
        std::pair{ "aabr"_c, &Int32x4Type },
        std::pair{ "aag"_c, &Int32x3Type },
        std::pair{ "aaga"_c, &Int32x4Type },
        std::pair{ "aagb"_c, &Int32x4Type },
        std::pair{ "aagg"_c, &Int32x4Type },
        std::pair{ "aagr"_c, &Int32x4Type },
        std::pair{ "aar"_c, &Int32x3Type },
        std::pair{ "aara"_c, &Int32x4Type },
        std::pair{ "aarb"_c, &Int32x4Type },
        std::pair{ "aarg"_c, &Int32x4Type },
        std::pair{ "aarr"_c, &Int32x4Type },
        std::pair{ "ab"_c, &Int32x2Type },
        std::pair{ "aba"_c, &Int32x3Type },
        std::pair{ "abaa"_c, &Int32x4Type },
        std::pair{ "abab"_c, &Int32x4Type },
        std::pair{ "abag"_c, &Int32x4Type },
        std::pair{ "abar"_c, &Int32x4Type },
        std::pair{ "abb"_c, &Int32x3Type },
        std::pair{ "abba"_c, &Int32x4Type },
        std::pair{ "abbb"_c, &Int32x4Type },
        std::pair{ "abbg"_c, &Int32x4Type },
        std::pair{ "abbr"_c, &Int32x4Type },
        std::pair{ "abg"_c, &Int32x3Type },
        std::pair{ "abga"_c, &Int32x4Type },
        std::pair{ "abgb"_c, &Int32x4Type },
        std::pair{ "abgg"_c, &Int32x4Type },
        std::pair{ "abgr"_c, &Int32x4Type },
        std::pair{ "abr"_c, &Int32x3Type },
        std::pair{ "abra"_c, &Int32x4Type },
        std::pair{ "abrb"_c, &Int32x4Type },
        std::pair{ "abrg"_c, &Int32x4Type },
        std::pair{ "abrr"_c, &Int32x4Type },
        std::pair{ "ag"_c, &Int32x2Type },
        std::pair{ "aga"_c, &Int32x3Type },
        std::pair{ "agaa"_c, &Int32x4Type },
        std::pair{ "agab"_c, &Int32x4Type },
        std::pair{ "agag"_c, &Int32x4Type },
        std::pair{ "agar"_c, &Int32x4Type },
        std::pair{ "agb"_c, &Int32x3Type },
        std::pair{ "agba"_c, &Int32x4Type },
        std::pair{ "agbb"_c, &Int32x4Type },
        std::pair{ "agbg"_c, &Int32x4Type },
        std::pair{ "agbr"_c, &Int32x4Type },
        std::pair{ "agg"_c, &Int32x3Type },
        std::pair{ "agga"_c, &Int32x4Type },
        std::pair{ "aggb"_c, &Int32x4Type },
        std::pair{ "aggg"_c, &Int32x4Type },
        std::pair{ "aggr"_c, &Int32x4Type },
        std::pair{ "agr"_c, &Int32x3Type },
        std::pair{ "agra"_c, &Int32x4Type },
        std::pair{ "agrb"_c, &Int32x4Type },
        std::pair{ "agrg"_c, &Int32x4Type },
        std::pair{ "agrr"_c, &Int32x4Type },
        std::pair{ "ar"_c, &Int32x2Type },
        std::pair{ "ara"_c, &Int32x3Type },
        std::pair{ "araa"_c, &Int32x4Type },
        std::pair{ "arab"_c, &Int32x4Type },
        std::pair{ "arag"_c, &Int32x4Type },
        std::pair{ "arar"_c, &Int32x4Type },
        std::pair{ "arb"_c, &Int32x3Type },
        std::pair{ "arba"_c, &Int32x4Type },
        std::pair{ "arbb"_c, &Int32x4Type },
        std::pair{ "arbg"_c, &Int32x4Type },
        std::pair{ "arbr"_c, &Int32x4Type },
        std::pair{ "arg"_c, &Int32x3Type },
        std::pair{ "arga"_c, &Int32x4Type },
        std::pair{ "argb"_c, &Int32x4Type },
        std::pair{ "argg"_c, &Int32x4Type },
        std::pair{ "argr"_c, &Int32x4Type },
        std::pair{ "arr"_c, &Int32x3Type },
        std::pair{ "arra"_c, &Int32x4Type },
        std::pair{ "arrb"_c, &Int32x4Type },
        std::pair{ "arrg"_c, &Int32x4Type },
        std::pair{ "arrr"_c, &Int32x4Type },
        std::pair{ "b"_c, &Int32Type },
        std::pair{ "ba"_c, &Int32x2Type },
        std::pair{ "baa"_c, &Int32x3Type },
        std::pair{ "baaa"_c, &Int32x4Type },
        std::pair{ "baab"_c, &Int32x4Type },
        std::pair{ "baag"_c, &Int32x4Type },
        std::pair{ "baar"_c, &Int32x4Type },
        std::pair{ "bab"_c, &Int32x3Type },
        std::pair{ "baba"_c, &Int32x4Type },
        std::pair{ "babb"_c, &Int32x4Type },
        std::pair{ "babg"_c, &Int32x4Type },
        std::pair{ "babr"_c, &Int32x4Type },
        std::pair{ "bag"_c, &Int32x3Type },
        std::pair{ "baga"_c, &Int32x4Type },
        std::pair{ "bagb"_c, &Int32x4Type },
        std::pair{ "bagg"_c, &Int32x4Type },
        std::pair{ "bagr"_c, &Int32x4Type },
        std::pair{ "bar"_c, &Int32x3Type },
        std::pair{ "bara"_c, &Int32x4Type },
        std::pair{ "barb"_c, &Int32x4Type },
        std::pair{ "barg"_c, &Int32x4Type },
        std::pair{ "barr"_c, &Int32x4Type },
        std::pair{ "bb"_c, &Int32x2Type },
        std::pair{ "bba"_c, &Int32x3Type },
        std::pair{ "bbaa"_c, &Int32x4Type },
        std::pair{ "bbab"_c, &Int32x4Type },
        std::pair{ "bbag"_c, &Int32x4Type },
        std::pair{ "bbar"_c, &Int32x4Type },
        std::pair{ "bbb"_c, &Int32x3Type },
        std::pair{ "bbba"_c, &Int32x4Type },
        std::pair{ "bbbb"_c, &Int32x4Type },
        std::pair{ "bbbg"_c, &Int32x4Type },
        std::pair{ "bbbr"_c, &Int32x4Type },
        std::pair{ "bbg"_c, &Int32x3Type },
        std::pair{ "bbga"_c, &Int32x4Type },
        std::pair{ "bbgb"_c, &Int32x4Type },
        std::pair{ "bbgg"_c, &Int32x4Type },
        std::pair{ "bbgr"_c, &Int32x4Type },
        std::pair{ "bbr"_c, &Int32x3Type },
        std::pair{ "bbra"_c, &Int32x4Type },
        std::pair{ "bbrb"_c, &Int32x4Type },
        std::pair{ "bbrg"_c, &Int32x4Type },
        std::pair{ "bbrr"_c, &Int32x4Type },
        std::pair{ "bg"_c, &Int32x2Type },
        std::pair{ "bga"_c, &Int32x3Type },
        std::pair{ "bgaa"_c, &Int32x4Type },
        std::pair{ "bgab"_c, &Int32x4Type },
        std::pair{ "bgag"_c, &Int32x4Type },
        std::pair{ "bgar"_c, &Int32x4Type },
        std::pair{ "bgb"_c, &Int32x3Type },
        std::pair{ "bgba"_c, &Int32x4Type },
        std::pair{ "bgbb"_c, &Int32x4Type },
        std::pair{ "bgbg"_c, &Int32x4Type },
        std::pair{ "bgbr"_c, &Int32x4Type },
        std::pair{ "bgg"_c, &Int32x3Type },
        std::pair{ "bgga"_c, &Int32x4Type },
        std::pair{ "bggb"_c, &Int32x4Type },
        std::pair{ "bggg"_c, &Int32x4Type },
        std::pair{ "bggr"_c, &Int32x4Type },
        std::pair{ "bgr"_c, &Int32x3Type },
        std::pair{ "bgra"_c, &Int32x4Type },
        std::pair{ "bgrb"_c, &Int32x4Type },
        std::pair{ "bgrg"_c, &Int32x4Type },
        std::pair{ "bgrr"_c, &Int32x4Type },
        std::pair{ "br"_c, &Int32x2Type },
        std::pair{ "bra"_c, &Int32x3Type },
        std::pair{ "braa"_c, &Int32x4Type },
        std::pair{ "brab"_c, &Int32x4Type },
        std::pair{ "brag"_c, &Int32x4Type },
        std::pair{ "brar"_c, &Int32x4Type },
        std::pair{ "brb"_c, &Int32x3Type },
        std::pair{ "brba"_c, &Int32x4Type },
        std::pair{ "brbb"_c, &Int32x4Type },
        std::pair{ "brbg"_c, &Int32x4Type },
        std::pair{ "brbr"_c, &Int32x4Type },
        std::pair{ "brg"_c, &Int32x3Type },
        std::pair{ "brga"_c, &Int32x4Type },
        std::pair{ "brgb"_c, &Int32x4Type },
        std::pair{ "brgg"_c, &Int32x4Type },
        std::pair{ "brgr"_c, &Int32x4Type },
        std::pair{ "brr"_c, &Int32x3Type },
        std::pair{ "brra"_c, &Int32x4Type },
        std::pair{ "brrb"_c, &Int32x4Type },
        std::pair{ "brrg"_c, &Int32x4Type },
        std::pair{ "brrr"_c, &Int32x4Type },
        std::pair{ "g"_c, &Int32Type },
        std::pair{ "ga"_c, &Int32x2Type },
        std::pair{ "gaa"_c, &Int32x3Type },
        std::pair{ "gaaa"_c, &Int32x4Type },
        std::pair{ "gaab"_c, &Int32x4Type },
        std::pair{ "gaag"_c, &Int32x4Type },
        std::pair{ "gaar"_c, &Int32x4Type },
        std::pair{ "gab"_c, &Int32x3Type },
        std::pair{ "gaba"_c, &Int32x4Type },
        std::pair{ "gabb"_c, &Int32x4Type },
        std::pair{ "gabg"_c, &Int32x4Type },
        std::pair{ "gabr"_c, &Int32x4Type },
        std::pair{ "gag"_c, &Int32x3Type },
        std::pair{ "gaga"_c, &Int32x4Type },
        std::pair{ "gagb"_c, &Int32x4Type },
        std::pair{ "gagg"_c, &Int32x4Type },
        std::pair{ "gagr"_c, &Int32x4Type },
        std::pair{ "gar"_c, &Int32x3Type },
        std::pair{ "gara"_c, &Int32x4Type },
        std::pair{ "garb"_c, &Int32x4Type },
        std::pair{ "garg"_c, &Int32x4Type },
        std::pair{ "garr"_c, &Int32x4Type },
        std::pair{ "gb"_c, &Int32x2Type },
        std::pair{ "gba"_c, &Int32x3Type },
        std::pair{ "gbaa"_c, &Int32x4Type },
        std::pair{ "gbab"_c, &Int32x4Type },
        std::pair{ "gbag"_c, &Int32x4Type },
        std::pair{ "gbar"_c, &Int32x4Type },
        std::pair{ "gbb"_c, &Int32x3Type },
        std::pair{ "gbba"_c, &Int32x4Type },
        std::pair{ "gbbb"_c, &Int32x4Type },
        std::pair{ "gbbg"_c, &Int32x4Type },
        std::pair{ "gbbr"_c, &Int32x4Type },
        std::pair{ "gbg"_c, &Int32x3Type },
        std::pair{ "gbga"_c, &Int32x4Type },
        std::pair{ "gbgb"_c, &Int32x4Type },
        std::pair{ "gbgg"_c, &Int32x4Type },
        std::pair{ "gbgr"_c, &Int32x4Type },
        std::pair{ "gbr"_c, &Int32x3Type },
        std::pair{ "gbra"_c, &Int32x4Type },
        std::pair{ "gbrb"_c, &Int32x4Type },
        std::pair{ "gbrg"_c, &Int32x4Type },
        std::pair{ "gbrr"_c, &Int32x4Type },
        std::pair{ "gg"_c, &Int32x2Type },
        std::pair{ "gga"_c, &Int32x3Type },
        std::pair{ "ggaa"_c, &Int32x4Type },
        std::pair{ "ggab"_c, &Int32x4Type },
        std::pair{ "ggag"_c, &Int32x4Type },
        std::pair{ "ggar"_c, &Int32x4Type },
        std::pair{ "ggb"_c, &Int32x3Type },
        std::pair{ "ggba"_c, &Int32x4Type },
        std::pair{ "ggbb"_c, &Int32x4Type },
        std::pair{ "ggbg"_c, &Int32x4Type },
        std::pair{ "ggbr"_c, &Int32x4Type },
        std::pair{ "ggg"_c, &Int32x3Type },
        std::pair{ "ggga"_c, &Int32x4Type },
        std::pair{ "gggb"_c, &Int32x4Type },
        std::pair{ "gggg"_c, &Int32x4Type },
        std::pair{ "gggr"_c, &Int32x4Type },
        std::pair{ "ggr"_c, &Int32x3Type },
        std::pair{ "ggra"_c, &Int32x4Type },
        std::pair{ "ggrb"_c, &Int32x4Type },
        std::pair{ "ggrg"_c, &Int32x4Type },
        std::pair{ "ggrr"_c, &Int32x4Type },
        std::pair{ "gr"_c, &Int32x2Type },
        std::pair{ "gra"_c, &Int32x3Type },
        std::pair{ "graa"_c, &Int32x4Type },
        std::pair{ "grab"_c, &Int32x4Type },
        std::pair{ "grag"_c, &Int32x4Type },
        std::pair{ "grar"_c, &Int32x4Type },
        std::pair{ "grb"_c, &Int32x3Type },
        std::pair{ "grba"_c, &Int32x4Type },
        std::pair{ "grbb"_c, &Int32x4Type },
        std::pair{ "grbg"_c, &Int32x4Type },
        std::pair{ "grbr"_c, &Int32x4Type },
        std::pair{ "grg"_c, &Int32x3Type },
        std::pair{ "grga"_c, &Int32x4Type },
        std::pair{ "grgb"_c, &Int32x4Type },
        std::pair{ "grgg"_c, &Int32x4Type },
        std::pair{ "grgr"_c, &Int32x4Type },
        std::pair{ "grr"_c, &Int32x3Type },
        std::pair{ "grra"_c, &Int32x4Type },
        std::pair{ "grrb"_c, &Int32x4Type },
        std::pair{ "grrg"_c, &Int32x4Type },
        std::pair{ "grrr"_c, &Int32x4Type },
        std::pair{ "operator!="_c, &Int32x4_operator_neq_Int32x4 },
        std::pair{ "operator!=(i32x4)"_c, &Int32x4_operator_neq_Int32x4 },
        std::pair{ "operator%"_c, &Int32x4_operator_mod_Int32x4 },
        std::pair{ "operator%(i32x4)"_c, &Int32x4_operator_mod_Int32x4 },
        std::pair{ "operator&"_c, &Int32x4_operator_and_Int32x4 },
        std::pair{ "operator&(i32x4)"_c, &Int32x4_operator_and_Int32x4 },
        std::pair{ "operator&="_c, &Int32x4_operator_andasg_Int32x4 },
        std::pair{ "operator&=(i32x4)"_c, &Int32x4_operator_andasg_Int32x4 },
        std::pair{ "operator*"_c, &Int32x4_operator_mul_Int32x4 },
        std::pair{ "operator*"_c, &Int32x4_operator_scale_Float32 },
        std::pair{ "operator*"_c, &Int32x4_operator_scale_UInt32 },
        std::pair{ "operator*"_c, &Int32x4_operator_scale_Int32 },
        std::pair{ "operator*(f32)"_c, &Int32x4_operator_scale_Float32 },
        std::pair{ "operator*(i32)"_c, &Int32x4_operator_scale_Int32 },
        std::pair{ "operator*(i32x4)"_c, &Int32x4_operator_mul_Int32x4 },
        std::pair{ "operator*(u32)"_c, &Int32x4_operator_scale_UInt32 },
        std::pair{ "operator*="_c, &Int32x4_operator_mulasg_Int32x4 },
        std::pair{ "operator*=(i32x4)"_c, &Int32x4_operator_mulasg_Int32x4 },
        std::pair{ "operator+"_c, &Int32x4_operator_add_Int32x4 },
        std::pair{ "operator+(i32x4)"_c, &Int32x4_operator_add_Int32x4 },
        std::pair{ "operator+="_c, &Int32x4_operator_addasg_Int32x4 },
        std::pair{ "operator+=(i32x4)"_c, &Int32x4_operator_addasg_Int32x4 },
        std::pair{ "operator-"_c, &Int32x4_operator_sub_Int32x4 },
        std::pair{ "operator-(i32x4)"_c, &Int32x4_operator_sub_Int32x4 },
        std::pair{ "operator-="_c, &Int32x4_operator_subasg_Int32x4 },
        std::pair{ "operator-=(i32x4)"_c, &Int32x4_operator_subasg_Int32x4 },
        std::pair{ "operator/"_c, &Int32x4_operator_div_Int32x4 },
        std::pair{ "operator/(i32x4)"_c, &Int32x4_operator_div_Int32x4 },
        std::pair{ "operator/="_c, &Int32x4_operator_divasg_Int32x4 },
        std::pair{ "operator/=(i32x4)"_c, &Int32x4_operator_divasg_Int32x4 },
        std::pair{ "operator<"_c, &Int32x4_operator_lt_Int32x4 },
        std::pair{ "operator<(i32x4)"_c, &Int32x4_operator_lt_Int32x4 },
        std::pair{ "operator<<"_c, &Int32x4_operator_lsh_Int32x4 },
        std::pair{ "operator<<(i32x4)"_c, &Int32x4_operator_lsh_Int32x4 },
        std::pair{ "operator<<="_c, &Int32x4_operator_lshasg_Int32x4 },
        std::pair{ "operator<<=(i32x4)"_c, &Int32x4_operator_lshasg_Int32x4 },
        std::pair{ "operator<="_c, &Int32x4_operator_lte_Int32x4 },
        std::pair{ "operator<=(i32x4)"_c, &Int32x4_operator_lte_Int32x4 },
        std::pair{ "operator=="_c, &Int32x4_operator_eq_Int32x4 },
        std::pair{ "operator==(i32x4)"_c, &Int32x4_operator_eq_Int32x4 },
        std::pair{ "operator>"_c, &Int32x4_operator_gt_Int32x4 },
        std::pair{ "operator>(i32x4)"_c, &Int32x4_operator_gt_Int32x4 },
        std::pair{ "operator>="_c, &Int32x4_operator_gte_Int32x4 },
        std::pair{ "operator>=(i32x4)"_c, &Int32x4_operator_gte_Int32x4 },
        std::pair{ "operator>>"_c, &Int32x4_operator_rsh_Int32x4 },
        std::pair{ "operator>>(i32x4)"_c, &Int32x4_operator_rsh_Int32x4 },
        std::pair{ "operator>>="_c, &Int32x4_operator_rhsasg_Int32x4 },
        std::pair{ "operator>>=(i32x4)"_c, &Int32x4_operator_rhsasg_Int32x4 },
        std::pair{ "operator[]"_c, &Int32x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Int32x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Int32x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Int32x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Int32x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Int32x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Int32x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Int32x4_operator_index_UInt32 },
        std::pair{ "operator^"_c, &Int32x4_operator_xor_Int32x4 },
        std::pair{ "operator^(i32x4)"_c, &Int32x4_operator_xor_Int32x4 },
        std::pair{ "operator^="_c, &Int32x4_operator_xorasg_Int32x4 },
        std::pair{ "operator^=(i32x4)"_c, &Int32x4_operator_xorasg_Int32x4 },
        std::pair{ "operator|"_c, &Int32x4_operator_or_Int32x4 },
        std::pair{ "operator|(i32x4)"_c, &Int32x4_operator_or_Int32x4 },
        std::pair{ "operator|="_c, &Int32x4_operator_orasg_Int32x4 },
        std::pair{ "operator|=(i32x4)"_c, &Int32x4_operator_orasg_Int32x4 },
        std::pair{ "r"_c, &Int32Type },
        std::pair{ "ra"_c, &Int32x2Type },
        std::pair{ "raa"_c, &Int32x3Type },
        std::pair{ "raaa"_c, &Int32x4Type },
        std::pair{ "raab"_c, &Int32x4Type },
        std::pair{ "raag"_c, &Int32x4Type },
        std::pair{ "raar"_c, &Int32x4Type },
        std::pair{ "rab"_c, &Int32x3Type },
        std::pair{ "raba"_c, &Int32x4Type },
        std::pair{ "rabb"_c, &Int32x4Type },
        std::pair{ "rabg"_c, &Int32x4Type },
        std::pair{ "rabr"_c, &Int32x4Type },
        std::pair{ "rag"_c, &Int32x3Type },
        std::pair{ "raga"_c, &Int32x4Type },
        std::pair{ "ragb"_c, &Int32x4Type },
        std::pair{ "ragg"_c, &Int32x4Type },
        std::pair{ "ragr"_c, &Int32x4Type },
        std::pair{ "rar"_c, &Int32x3Type },
        std::pair{ "rara"_c, &Int32x4Type },
        std::pair{ "rarb"_c, &Int32x4Type },
        std::pair{ "rarg"_c, &Int32x4Type },
        std::pair{ "rarr"_c, &Int32x4Type },
        std::pair{ "rb"_c, &Int32x2Type },
        std::pair{ "rba"_c, &Int32x3Type },
        std::pair{ "rbaa"_c, &Int32x4Type },
        std::pair{ "rbab"_c, &Int32x4Type },
        std::pair{ "rbag"_c, &Int32x4Type },
        std::pair{ "rbar"_c, &Int32x4Type },
        std::pair{ "rbb"_c, &Int32x3Type },
        std::pair{ "rbba"_c, &Int32x4Type },
        std::pair{ "rbbb"_c, &Int32x4Type },
        std::pair{ "rbbg"_c, &Int32x4Type },
        std::pair{ "rbbr"_c, &Int32x4Type },
        std::pair{ "rbg"_c, &Int32x3Type },
        std::pair{ "rbga"_c, &Int32x4Type },
        std::pair{ "rbgb"_c, &Int32x4Type },
        std::pair{ "rbgg"_c, &Int32x4Type },
        std::pair{ "rbgr"_c, &Int32x4Type },
        std::pair{ "rbr"_c, &Int32x3Type },
        std::pair{ "rbra"_c, &Int32x4Type },
        std::pair{ "rbrb"_c, &Int32x4Type },
        std::pair{ "rbrg"_c, &Int32x4Type },
        std::pair{ "rbrr"_c, &Int32x4Type },
        std::pair{ "rg"_c, &Int32x2Type },
        std::pair{ "rga"_c, &Int32x3Type },
        std::pair{ "rgaa"_c, &Int32x4Type },
        std::pair{ "rgab"_c, &Int32x4Type },
        std::pair{ "rgag"_c, &Int32x4Type },
        std::pair{ "rgar"_c, &Int32x4Type },
        std::pair{ "rgb"_c, &Int32x3Type },
        std::pair{ "rgba"_c, &Int32x4Type },
        std::pair{ "rgbb"_c, &Int32x4Type },
        std::pair{ "rgbg"_c, &Int32x4Type },
        std::pair{ "rgbr"_c, &Int32x4Type },
        std::pair{ "rgg"_c, &Int32x3Type },
        std::pair{ "rgga"_c, &Int32x4Type },
        std::pair{ "rggb"_c, &Int32x4Type },
        std::pair{ "rggg"_c, &Int32x4Type },
        std::pair{ "rggr"_c, &Int32x4Type },
        std::pair{ "rgr"_c, &Int32x3Type },
        std::pair{ "rgra"_c, &Int32x4Type },
        std::pair{ "rgrb"_c, &Int32x4Type },
        std::pair{ "rgrg"_c, &Int32x4Type },
        std::pair{ "rgrr"_c, &Int32x4Type },
        std::pair{ "rr"_c, &Int32x2Type },
        std::pair{ "rra"_c, &Int32x3Type },
        std::pair{ "rraa"_c, &Int32x4Type },
        std::pair{ "rrab"_c, &Int32x4Type },
        std::pair{ "rrag"_c, &Int32x4Type },
        std::pair{ "rrar"_c, &Int32x4Type },
        std::pair{ "rrb"_c, &Int32x3Type },
        std::pair{ "rrba"_c, &Int32x4Type },
        std::pair{ "rrbb"_c, &Int32x4Type },
        std::pair{ "rrbg"_c, &Int32x4Type },
        std::pair{ "rrbr"_c, &Int32x4Type },
        std::pair{ "rrg"_c, &Int32x3Type },
        std::pair{ "rrga"_c, &Int32x4Type },
        std::pair{ "rrgb"_c, &Int32x4Type },
        std::pair{ "rrgg"_c, &Int32x4Type },
        std::pair{ "rrgr"_c, &Int32x4Type },
        std::pair{ "rrr"_c, &Int32x3Type },
        std::pair{ "rrra"_c, &Int32x4Type },
        std::pair{ "rrrb"_c, &Int32x4Type },
        std::pair{ "rrrg"_c, &Int32x4Type },
        std::pair{ "rrrr"_c, &Int32x4Type },
        std::pair{ "w"_c, &Int32Type },
        std::pair{ "ww"_c, &Int32x2Type },
        std::pair{ "www"_c, &Int32x3Type },
        std::pair{ "wwww"_c, &Int32x4Type },
        std::pair{ "wwwx"_c, &Int32x4Type },
        std::pair{ "wwwy"_c, &Int32x4Type },
        std::pair{ "wwwz"_c, &Int32x4Type },
        std::pair{ "wwx"_c, &Int32x3Type },
        std::pair{ "wwxw"_c, &Int32x4Type },
        std::pair{ "wwxx"_c, &Int32x4Type },
        std::pair{ "wwxy"_c, &Int32x4Type },
        std::pair{ "wwxz"_c, &Int32x4Type },
        std::pair{ "wwy"_c, &Int32x3Type },
        std::pair{ "wwyw"_c, &Int32x4Type },
        std::pair{ "wwyx"_c, &Int32x4Type },
        std::pair{ "wwyy"_c, &Int32x4Type },
        std::pair{ "wwyz"_c, &Int32x4Type },
        std::pair{ "wwz"_c, &Int32x3Type },
        std::pair{ "wwzw"_c, &Int32x4Type },
        std::pair{ "wwzx"_c, &Int32x4Type },
        std::pair{ "wwzy"_c, &Int32x4Type },
        std::pair{ "wwzz"_c, &Int32x4Type },
        std::pair{ "wx"_c, &Int32x2Type },
        std::pair{ "wxw"_c, &Int32x3Type },
        std::pair{ "wxww"_c, &Int32x4Type },
        std::pair{ "wxwx"_c, &Int32x4Type },
        std::pair{ "wxwy"_c, &Int32x4Type },
        std::pair{ "wxwz"_c, &Int32x4Type },
        std::pair{ "wxx"_c, &Int32x3Type },
        std::pair{ "wxxw"_c, &Int32x4Type },
        std::pair{ "wxxx"_c, &Int32x4Type },
        std::pair{ "wxxy"_c, &Int32x4Type },
        std::pair{ "wxxz"_c, &Int32x4Type },
        std::pair{ "wxy"_c, &Int32x3Type },
        std::pair{ "wxyw"_c, &Int32x4Type },
        std::pair{ "wxyx"_c, &Int32x4Type },
        std::pair{ "wxyy"_c, &Int32x4Type },
        std::pair{ "wxyz"_c, &Int32x4Type },
        std::pair{ "wxz"_c, &Int32x3Type },
        std::pair{ "wxzw"_c, &Int32x4Type },
        std::pair{ "wxzx"_c, &Int32x4Type },
        std::pair{ "wxzy"_c, &Int32x4Type },
        std::pair{ "wxzz"_c, &Int32x4Type },
        std::pair{ "wy"_c, &Int32x2Type },
        std::pair{ "wyw"_c, &Int32x3Type },
        std::pair{ "wyww"_c, &Int32x4Type },
        std::pair{ "wywx"_c, &Int32x4Type },
        std::pair{ "wywy"_c, &Int32x4Type },
        std::pair{ "wywz"_c, &Int32x4Type },
        std::pair{ "wyx"_c, &Int32x3Type },
        std::pair{ "wyxw"_c, &Int32x4Type },
        std::pair{ "wyxx"_c, &Int32x4Type },
        std::pair{ "wyxy"_c, &Int32x4Type },
        std::pair{ "wyxz"_c, &Int32x4Type },
        std::pair{ "wyy"_c, &Int32x3Type },
        std::pair{ "wyyw"_c, &Int32x4Type },
        std::pair{ "wyyx"_c, &Int32x4Type },
        std::pair{ "wyyy"_c, &Int32x4Type },
        std::pair{ "wyyz"_c, &Int32x4Type },
        std::pair{ "wyz"_c, &Int32x3Type },
        std::pair{ "wyzw"_c, &Int32x4Type },
        std::pair{ "wyzx"_c, &Int32x4Type },
        std::pair{ "wyzy"_c, &Int32x4Type },
        std::pair{ "wyzz"_c, &Int32x4Type },
        std::pair{ "wz"_c, &Int32x2Type },
        std::pair{ "wzw"_c, &Int32x3Type },
        std::pair{ "wzww"_c, &Int32x4Type },
        std::pair{ "wzwx"_c, &Int32x4Type },
        std::pair{ "wzwy"_c, &Int32x4Type },
        std::pair{ "wzwz"_c, &Int32x4Type },
        std::pair{ "wzx"_c, &Int32x3Type },
        std::pair{ "wzxw"_c, &Int32x4Type },
        std::pair{ "wzxx"_c, &Int32x4Type },
        std::pair{ "wzxy"_c, &Int32x4Type },
        std::pair{ "wzxz"_c, &Int32x4Type },
        std::pair{ "wzy"_c, &Int32x3Type },
        std::pair{ "wzyw"_c, &Int32x4Type },
        std::pair{ "wzyx"_c, &Int32x4Type },
        std::pair{ "wzyy"_c, &Int32x4Type },
        std::pair{ "wzyz"_c, &Int32x4Type },
        std::pair{ "wzz"_c, &Int32x3Type },
        std::pair{ "wzzw"_c, &Int32x4Type },
        std::pair{ "wzzx"_c, &Int32x4Type },
        std::pair{ "wzzy"_c, &Int32x4Type },
        std::pair{ "wzzz"_c, &Int32x4Type },
        std::pair{ "x"_c, &Int32Type },
        std::pair{ "xw"_c, &Int32x2Type },
        std::pair{ "xww"_c, &Int32x3Type },
        std::pair{ "xwww"_c, &Int32x4Type },
        std::pair{ "xwwx"_c, &Int32x4Type },
        std::pair{ "xwwy"_c, &Int32x4Type },
        std::pair{ "xwwz"_c, &Int32x4Type },
        std::pair{ "xwx"_c, &Int32x3Type },
        std::pair{ "xwxw"_c, &Int32x4Type },
        std::pair{ "xwxx"_c, &Int32x4Type },
        std::pair{ "xwxy"_c, &Int32x4Type },
        std::pair{ "xwxz"_c, &Int32x4Type },
        std::pair{ "xwy"_c, &Int32x3Type },
        std::pair{ "xwyw"_c, &Int32x4Type },
        std::pair{ "xwyx"_c, &Int32x4Type },
        std::pair{ "xwyy"_c, &Int32x4Type },
        std::pair{ "xwyz"_c, &Int32x4Type },
        std::pair{ "xwz"_c, &Int32x3Type },
        std::pair{ "xwzw"_c, &Int32x4Type },
        std::pair{ "xwzx"_c, &Int32x4Type },
        std::pair{ "xwzy"_c, &Int32x4Type },
        std::pair{ "xwzz"_c, &Int32x4Type },
        std::pair{ "xx"_c, &Int32x2Type },
        std::pair{ "xxw"_c, &Int32x3Type },
        std::pair{ "xxww"_c, &Int32x4Type },
        std::pair{ "xxwx"_c, &Int32x4Type },
        std::pair{ "xxwy"_c, &Int32x4Type },
        std::pair{ "xxwz"_c, &Int32x4Type },
        std::pair{ "xxx"_c, &Int32x3Type },
        std::pair{ "xxxw"_c, &Int32x4Type },
        std::pair{ "xxxx"_c, &Int32x4Type },
        std::pair{ "xxxy"_c, &Int32x4Type },
        std::pair{ "xxxz"_c, &Int32x4Type },
        std::pair{ "xxy"_c, &Int32x3Type },
        std::pair{ "xxyw"_c, &Int32x4Type },
        std::pair{ "xxyx"_c, &Int32x4Type },
        std::pair{ "xxyy"_c, &Int32x4Type },
        std::pair{ "xxyz"_c, &Int32x4Type },
        std::pair{ "xxz"_c, &Int32x3Type },
        std::pair{ "xxzw"_c, &Int32x4Type },
        std::pair{ "xxzx"_c, &Int32x4Type },
        std::pair{ "xxzy"_c, &Int32x4Type },
        std::pair{ "xxzz"_c, &Int32x4Type },
        std::pair{ "xy"_c, &Int32x2Type },
        std::pair{ "xyw"_c, &Int32x3Type },
        std::pair{ "xyww"_c, &Int32x4Type },
        std::pair{ "xywx"_c, &Int32x4Type },
        std::pair{ "xywy"_c, &Int32x4Type },
        std::pair{ "xywz"_c, &Int32x4Type },
        std::pair{ "xyx"_c, &Int32x3Type },
        std::pair{ "xyxw"_c, &Int32x4Type },
        std::pair{ "xyxx"_c, &Int32x4Type },
        std::pair{ "xyxy"_c, &Int32x4Type },
        std::pair{ "xyxz"_c, &Int32x4Type },
        std::pair{ "xyy"_c, &Int32x3Type },
        std::pair{ "xyyw"_c, &Int32x4Type },
        std::pair{ "xyyx"_c, &Int32x4Type },
        std::pair{ "xyyy"_c, &Int32x4Type },
        std::pair{ "xyyz"_c, &Int32x4Type },
        std::pair{ "xyz"_c, &Int32x3Type },
        std::pair{ "xyzw"_c, &Int32x4Type },
        std::pair{ "xyzx"_c, &Int32x4Type },
        std::pair{ "xyzy"_c, &Int32x4Type },
        std::pair{ "xyzz"_c, &Int32x4Type },
        std::pair{ "xz"_c, &Int32x2Type },
        std::pair{ "xzw"_c, &Int32x3Type },
        std::pair{ "xzww"_c, &Int32x4Type },
        std::pair{ "xzwx"_c, &Int32x4Type },
        std::pair{ "xzwy"_c, &Int32x4Type },
        std::pair{ "xzwz"_c, &Int32x4Type },
        std::pair{ "xzx"_c, &Int32x3Type },
        std::pair{ "xzxw"_c, &Int32x4Type },
        std::pair{ "xzxx"_c, &Int32x4Type },
        std::pair{ "xzxy"_c, &Int32x4Type },
        std::pair{ "xzxz"_c, &Int32x4Type },
        std::pair{ "xzy"_c, &Int32x3Type },
        std::pair{ "xzyw"_c, &Int32x4Type },
        std::pair{ "xzyx"_c, &Int32x4Type },
        std::pair{ "xzyy"_c, &Int32x4Type },
        std::pair{ "xzyz"_c, &Int32x4Type },
        std::pair{ "xzz"_c, &Int32x3Type },
        std::pair{ "xzzw"_c, &Int32x4Type },
        std::pair{ "xzzx"_c, &Int32x4Type },
        std::pair{ "xzzy"_c, &Int32x4Type },
        std::pair{ "xzzz"_c, &Int32x4Type },
        std::pair{ "y"_c, &Int32Type },
        std::pair{ "yw"_c, &Int32x2Type },
        std::pair{ "yww"_c, &Int32x3Type },
        std::pair{ "ywww"_c, &Int32x4Type },
        std::pair{ "ywwx"_c, &Int32x4Type },
        std::pair{ "ywwy"_c, &Int32x4Type },
        std::pair{ "ywwz"_c, &Int32x4Type },
        std::pair{ "ywx"_c, &Int32x3Type },
        std::pair{ "ywxw"_c, &Int32x4Type },
        std::pair{ "ywxx"_c, &Int32x4Type },
        std::pair{ "ywxy"_c, &Int32x4Type },
        std::pair{ "ywxz"_c, &Int32x4Type },
        std::pair{ "ywy"_c, &Int32x3Type },
        std::pair{ "ywyw"_c, &Int32x4Type },
        std::pair{ "ywyx"_c, &Int32x4Type },
        std::pair{ "ywyy"_c, &Int32x4Type },
        std::pair{ "ywyz"_c, &Int32x4Type },
        std::pair{ "ywz"_c, &Int32x3Type },
        std::pair{ "ywzw"_c, &Int32x4Type },
        std::pair{ "ywzx"_c, &Int32x4Type },
        std::pair{ "ywzy"_c, &Int32x4Type },
        std::pair{ "ywzz"_c, &Int32x4Type },
        std::pair{ "yx"_c, &Int32x2Type },
        std::pair{ "yxw"_c, &Int32x3Type },
        std::pair{ "yxww"_c, &Int32x4Type },
        std::pair{ "yxwx"_c, &Int32x4Type },
        std::pair{ "yxwy"_c, &Int32x4Type },
        std::pair{ "yxwz"_c, &Int32x4Type },
        std::pair{ "yxx"_c, &Int32x3Type },
        std::pair{ "yxxw"_c, &Int32x4Type },
        std::pair{ "yxxx"_c, &Int32x4Type },
        std::pair{ "yxxy"_c, &Int32x4Type },
        std::pair{ "yxxz"_c, &Int32x4Type },
        std::pair{ "yxy"_c, &Int32x3Type },
        std::pair{ "yxyw"_c, &Int32x4Type },
        std::pair{ "yxyx"_c, &Int32x4Type },
        std::pair{ "yxyy"_c, &Int32x4Type },
        std::pair{ "yxyz"_c, &Int32x4Type },
        std::pair{ "yxz"_c, &Int32x3Type },
        std::pair{ "yxzw"_c, &Int32x4Type },
        std::pair{ "yxzx"_c, &Int32x4Type },
        std::pair{ "yxzy"_c, &Int32x4Type },
        std::pair{ "yxzz"_c, &Int32x4Type },
        std::pair{ "yy"_c, &Int32x2Type },
        std::pair{ "yyw"_c, &Int32x3Type },
        std::pair{ "yyww"_c, &Int32x4Type },
        std::pair{ "yywx"_c, &Int32x4Type },
        std::pair{ "yywy"_c, &Int32x4Type },
        std::pair{ "yywz"_c, &Int32x4Type },
        std::pair{ "yyx"_c, &Int32x3Type },
        std::pair{ "yyxw"_c, &Int32x4Type },
        std::pair{ "yyxx"_c, &Int32x4Type },
        std::pair{ "yyxy"_c, &Int32x4Type },
        std::pair{ "yyxz"_c, &Int32x4Type },
        std::pair{ "yyy"_c, &Int32x3Type },
        std::pair{ "yyyw"_c, &Int32x4Type },
        std::pair{ "yyyx"_c, &Int32x4Type },
        std::pair{ "yyyy"_c, &Int32x4Type },
        std::pair{ "yyyz"_c, &Int32x4Type },
        std::pair{ "yyz"_c, &Int32x3Type },
        std::pair{ "yyzw"_c, &Int32x4Type },
        std::pair{ "yyzx"_c, &Int32x4Type },
        std::pair{ "yyzy"_c, &Int32x4Type },
        std::pair{ "yyzz"_c, &Int32x4Type },
        std::pair{ "yz"_c, &Int32x2Type },
        std::pair{ "yzw"_c, &Int32x3Type },
        std::pair{ "yzww"_c, &Int32x4Type },
        std::pair{ "yzwx"_c, &Int32x4Type },
        std::pair{ "yzwy"_c, &Int32x4Type },
        std::pair{ "yzwz"_c, &Int32x4Type },
        std::pair{ "yzx"_c, &Int32x3Type },
        std::pair{ "yzxw"_c, &Int32x4Type },
        std::pair{ "yzxx"_c, &Int32x4Type },
        std::pair{ "yzxy"_c, &Int32x4Type },
        std::pair{ "yzxz"_c, &Int32x4Type },
        std::pair{ "yzy"_c, &Int32x3Type },
        std::pair{ "yzyw"_c, &Int32x4Type },
        std::pair{ "yzyx"_c, &Int32x4Type },
        std::pair{ "yzyy"_c, &Int32x4Type },
        std::pair{ "yzyz"_c, &Int32x4Type },
        std::pair{ "yzz"_c, &Int32x3Type },
        std::pair{ "yzzw"_c, &Int32x4Type },
        std::pair{ "yzzx"_c, &Int32x4Type },
        std::pair{ "yzzy"_c, &Int32x4Type },
        std::pair{ "yzzz"_c, &Int32x4Type },
        std::pair{ "z"_c, &Int32Type },
        std::pair{ "zw"_c, &Int32x2Type },
        std::pair{ "zww"_c, &Int32x3Type },
        std::pair{ "zwww"_c, &Int32x4Type },
        std::pair{ "zwwx"_c, &Int32x4Type },
        std::pair{ "zwwy"_c, &Int32x4Type },
        std::pair{ "zwwz"_c, &Int32x4Type },
        std::pair{ "zwx"_c, &Int32x3Type },
        std::pair{ "zwxw"_c, &Int32x4Type },
        std::pair{ "zwxx"_c, &Int32x4Type },
        std::pair{ "zwxy"_c, &Int32x4Type },
        std::pair{ "zwxz"_c, &Int32x4Type },
        std::pair{ "zwy"_c, &Int32x3Type },
        std::pair{ "zwyw"_c, &Int32x4Type },
        std::pair{ "zwyx"_c, &Int32x4Type },
        std::pair{ "zwyy"_c, &Int32x4Type },
        std::pair{ "zwyz"_c, &Int32x4Type },
        std::pair{ "zwz"_c, &Int32x3Type },
        std::pair{ "zwzw"_c, &Int32x4Type },
        std::pair{ "zwzx"_c, &Int32x4Type },
        std::pair{ "zwzy"_c, &Int32x4Type },
        std::pair{ "zwzz"_c, &Int32x4Type },
        std::pair{ "zx"_c, &Int32x2Type },
        std::pair{ "zxw"_c, &Int32x3Type },
        std::pair{ "zxww"_c, &Int32x4Type },
        std::pair{ "zxwx"_c, &Int32x4Type },
        std::pair{ "zxwy"_c, &Int32x4Type },
        std::pair{ "zxwz"_c, &Int32x4Type },
        std::pair{ "zxx"_c, &Int32x3Type },
        std::pair{ "zxxw"_c, &Int32x4Type },
        std::pair{ "zxxx"_c, &Int32x4Type },
        std::pair{ "zxxy"_c, &Int32x4Type },
        std::pair{ "zxxz"_c, &Int32x4Type },
        std::pair{ "zxy"_c, &Int32x3Type },
        std::pair{ "zxyw"_c, &Int32x4Type },
        std::pair{ "zxyx"_c, &Int32x4Type },
        std::pair{ "zxyy"_c, &Int32x4Type },
        std::pair{ "zxyz"_c, &Int32x4Type },
        std::pair{ "zxz"_c, &Int32x3Type },
        std::pair{ "zxzw"_c, &Int32x4Type },
        std::pair{ "zxzx"_c, &Int32x4Type },
        std::pair{ "zxzy"_c, &Int32x4Type },
        std::pair{ "zxzz"_c, &Int32x4Type },
        std::pair{ "zy"_c, &Int32x2Type },
        std::pair{ "zyw"_c, &Int32x3Type },
        std::pair{ "zyww"_c, &Int32x4Type },
        std::pair{ "zywx"_c, &Int32x4Type },
        std::pair{ "zywy"_c, &Int32x4Type },
        std::pair{ "zywz"_c, &Int32x4Type },
        std::pair{ "zyx"_c, &Int32x3Type },
        std::pair{ "zyxw"_c, &Int32x4Type },
        std::pair{ "zyxx"_c, &Int32x4Type },
        std::pair{ "zyxy"_c, &Int32x4Type },
        std::pair{ "zyxz"_c, &Int32x4Type },
        std::pair{ "zyy"_c, &Int32x3Type },
        std::pair{ "zyyw"_c, &Int32x4Type },
        std::pair{ "zyyx"_c, &Int32x4Type },
        std::pair{ "zyyy"_c, &Int32x4Type },
        std::pair{ "zyyz"_c, &Int32x4Type },
        std::pair{ "zyz"_c, &Int32x3Type },
        std::pair{ "zyzw"_c, &Int32x4Type },
        std::pair{ "zyzx"_c, &Int32x4Type },
        std::pair{ "zyzy"_c, &Int32x4Type },
        std::pair{ "zyzz"_c, &Int32x4Type },
        std::pair{ "zz"_c, &Int32x2Type },
        std::pair{ "zzw"_c, &Int32x3Type },
        std::pair{ "zzww"_c, &Int32x4Type },
        std::pair{ "zzwx"_c, &Int32x4Type },
        std::pair{ "zzwy"_c, &Int32x4Type },
        std::pair{ "zzwz"_c, &Int32x4Type },
        std::pair{ "zzx"_c, &Int32x3Type },
        std::pair{ "zzxw"_c, &Int32x4Type },
        std::pair{ "zzxx"_c, &Int32x4Type },
        std::pair{ "zzxy"_c, &Int32x4Type },
        std::pair{ "zzxz"_c, &Int32x4Type },
        std::pair{ "zzy"_c, &Int32x3Type },
        std::pair{ "zzyw"_c, &Int32x4Type },
        std::pair{ "zzyx"_c, &Int32x4Type },
        std::pair{ "zzyy"_c, &Int32x4Type },
        std::pair{ "zzyz"_c, &Int32x4Type },
        std::pair{ "zzz"_c, &Int32x3Type },
        std::pair{ "zzzw"_c, &Int32x4Type },
        std::pair{ "zzzx"_c, &Int32x4Type },
        std::pair{ "zzzy"_c, &Int32x4Type },
        std::pair{ "zzzz"_c, &Int32x4Type }
    };
}
Int32x4 Int32x4Type;

/// operator[] with Int32
Variable Bool8x4_operator_index_Int32_arg;
Function Bool8x4_operator_index_Int32;
inline constexpr std::array Bool8x4_operator_index_Int32_args = { &Bool8x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Bool8x4_operator_index_UInt32_arg;
Function Bool8x4_operator_index_UInt32;
inline constexpr std::array Bool8x4_operator_index_UInt32_args = { &Bool8x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Bool8x4_operator_index_Int16_arg;
Function Bool8x4_operator_index_Int16;
inline constexpr std::array Bool8x4_operator_index_Int16_args = { &Bool8x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Bool8x4_operator_index_UInt16_arg;
Function Bool8x4_operator_index_UInt16;
inline constexpr std::array Bool8x4_operator_index_UInt16_args = { &Bool8x4_operator_index_UInt16_arg };

/// operator|| with Bool8x4
Variable Bool8x4_operator_oror_Bool8x4_arg;
Function Bool8x4_operator_oror_Bool8x4;
inline constexpr std::array Bool8x4_operator_oror_Bool8x4_args = { &Bool8x4_operator_oror_Bool8x4_arg };

/// operator&& with Bool8x4
Variable Bool8x4_operator_andand_Bool8x4_arg;
Function Bool8x4_operator_andand_Bool8x4;
inline constexpr std::array Bool8x4_operator_andand_Bool8x4_args = { &Bool8x4_operator_andand_Bool8x4_arg };

/// operator== with Bool8x4
Variable Bool8x4_operator_eq_Bool8x4_arg;
Function Bool8x4_operator_eq_Bool8x4;
inline constexpr std::array Bool8x4_operator_eq_Bool8x4_args = { &Bool8x4_operator_eq_Bool8x4_arg };

/// operator!= with Bool8x4
Variable Bool8x4_operator_neq_Bool8x4_arg;
Function Bool8x4_operator_neq_Bool8x4;
inline constexpr std::array Bool8x4_operator_neq_Bool8x4_args = { &Bool8x4_operator_neq_Bool8x4_arg };

Bool8x4::Bool8x4()
{
    this->name = "b8x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 4;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Bool8;
    this->builtin = true;

    /// operator[] with Int32
    Bool8x4_operator_index_Int32_arg.name = "arg"_c;
    Bool8x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8x4_operator_index_Int32.name = "operator[]"_c;
    Bool8x4_operator_index_Int32.backendIndex = 966;
    Bool8x4_operator_index_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_index_Int32.parameters = Bool8x4_operator_index_Int32_args;
    Symbol::Resolved(&Bool8x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x4_operator_index_Int32)->signature = "b8 operator[](i32)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_Int32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt32
    Bool8x4_operator_index_UInt32_arg.name = "arg"_c;
    Bool8x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8x4_operator_index_UInt32.name = "operator[]"_c;
    Bool8x4_operator_index_UInt32.backendIndex = 967;
    Bool8x4_operator_index_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_index_UInt32.parameters = Bool8x4_operator_index_UInt32_args;
    Symbol::Resolved(&Bool8x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x4_operator_index_UInt32)->signature = "b8 operator[](u32)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_UInt32)->returnTypeSymbol = &Bool8Type;

    /// operator[] with Int16
    Bool8x4_operator_index_Int16_arg.name = "arg"_c;
    Bool8x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8x4_operator_index_Int16.name = "operator[]"_c;
    Bool8x4_operator_index_Int16.backendIndex = 968;
    Bool8x4_operator_index_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_index_Int16.parameters = Bool8x4_operator_index_Int16_args;
    Symbol::Resolved(&Bool8x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x4_operator_index_Int16)->signature = "b8 operator[](i16)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_Int16)->returnTypeSymbol = &Bool8Type;

    /// operator[] with UInt16
    Bool8x4_operator_index_UInt16_arg.name = "arg"_c;
    Bool8x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8x4_operator_index_UInt16.name = "operator[]"_c;
    Bool8x4_operator_index_UInt16.backendIndex = 969;
    Bool8x4_operator_index_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_index_UInt16.parameters = Bool8x4_operator_index_UInt16_args;
    Symbol::Resolved(&Bool8x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x4_operator_index_UInt16)->signature = "b8 operator[](u16)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Bool8x4_operator_index_UInt16)->returnTypeSymbol = &Bool8Type;

    /// operator|| with Bool8x4
    Bool8x4_operator_oror_Bool8x4_arg.name = "arg"_c;
    Bool8x4_operator_oror_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_operator_oror_Bool8x4.name = "operator||"_c;
    Bool8x4_operator_oror_Bool8x4.backendIndex = 970;
    Bool8x4_operator_oror_Bool8x4.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_oror_Bool8x4.parameters = Bool8x4_operator_oror_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_operator_oror_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_operator_oror_Bool8x4)->signature = "b8 operator||(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_oror_Bool8x4)->name = "operator||(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_oror_Bool8x4)->nameWithVarNames = "operator||(arg : b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_oror_Bool8x4)->returnTypeSymbol = &Bool8Type;

    /// operator&& with Bool8x4
    Bool8x4_operator_andand_Bool8x4_arg.name = "arg"_c;
    Bool8x4_operator_andand_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_operator_andand_Bool8x4.name = "operator&&"_c;
    Bool8x4_operator_andand_Bool8x4.backendIndex = 971;
    Bool8x4_operator_andand_Bool8x4.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_andand_Bool8x4.parameters = Bool8x4_operator_andand_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_operator_andand_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_operator_andand_Bool8x4)->signature = "b8 operator&&(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_andand_Bool8x4)->name = "operator&&(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_andand_Bool8x4)->nameWithVarNames = "operator&&(arg : b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_andand_Bool8x4)->returnTypeSymbol = &Bool8Type;

    /// operator== with Bool8x4
    Bool8x4_operator_eq_Bool8x4_arg.name = "arg"_c;
    Bool8x4_operator_eq_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_operator_eq_Bool8x4.name = "operator=="_c;
    Bool8x4_operator_eq_Bool8x4.backendIndex = 972;
    Bool8x4_operator_eq_Bool8x4.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_eq_Bool8x4.parameters = Bool8x4_operator_eq_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4)->signature = "b8 operator==(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4)->name = "operator==(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4)->nameWithVarNames = "operator==(arg : b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_eq_Bool8x4)->returnTypeSymbol = &Bool8Type;

    /// operator!= with Bool8x4
    Bool8x4_operator_neq_Bool8x4_arg.name = "arg"_c;
    Bool8x4_operator_neq_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_operator_neq_Bool8x4.name = "operator!="_c;
    Bool8x4_operator_neq_Bool8x4.backendIndex = 973;
    Bool8x4_operator_neq_Bool8x4.returnType = Type::FullType { Bool8Type.name };
    Bool8x4_operator_neq_Bool8x4.parameters = Bool8x4_operator_neq_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4)->signature = "b8 operator!=(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4)->name = "operator!=(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4)->nameWithVarNames = "operator!=(arg : b8x4)"_c;
    Symbol::Resolved(&Bool8x4_operator_neq_Bool8x4)->returnTypeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 696> { 
        std::pair{ "a"_c, &Bool8Type },
        std::pair{ "aa"_c, &Bool8x2Type },
        std::pair{ "aaa"_c, &Bool8x3Type },
        std::pair{ "aaaa"_c, &Bool8x4Type },
        std::pair{ "aaab"_c, &Bool8x4Type },
        std::pair{ "aaag"_c, &Bool8x4Type },
        std::pair{ "aaar"_c, &Bool8x4Type },
        std::pair{ "aab"_c, &Bool8x3Type },
        std::pair{ "aaba"_c, &Bool8x4Type },
        std::pair{ "aabb"_c, &Bool8x4Type },
        std::pair{ "aabg"_c, &Bool8x4Type },
        std::pair{ "aabr"_c, &Bool8x4Type },
        std::pair{ "aag"_c, &Bool8x3Type },
        std::pair{ "aaga"_c, &Bool8x4Type },
        std::pair{ "aagb"_c, &Bool8x4Type },
        std::pair{ "aagg"_c, &Bool8x4Type },
        std::pair{ "aagr"_c, &Bool8x4Type },
        std::pair{ "aar"_c, &Bool8x3Type },
        std::pair{ "aara"_c, &Bool8x4Type },
        std::pair{ "aarb"_c, &Bool8x4Type },
        std::pair{ "aarg"_c, &Bool8x4Type },
        std::pair{ "aarr"_c, &Bool8x4Type },
        std::pair{ "ab"_c, &Bool8x2Type },
        std::pair{ "aba"_c, &Bool8x3Type },
        std::pair{ "abaa"_c, &Bool8x4Type },
        std::pair{ "abab"_c, &Bool8x4Type },
        std::pair{ "abag"_c, &Bool8x4Type },
        std::pair{ "abar"_c, &Bool8x4Type },
        std::pair{ "abb"_c, &Bool8x3Type },
        std::pair{ "abba"_c, &Bool8x4Type },
        std::pair{ "abbb"_c, &Bool8x4Type },
        std::pair{ "abbg"_c, &Bool8x4Type },
        std::pair{ "abbr"_c, &Bool8x4Type },
        std::pair{ "abg"_c, &Bool8x3Type },
        std::pair{ "abga"_c, &Bool8x4Type },
        std::pair{ "abgb"_c, &Bool8x4Type },
        std::pair{ "abgg"_c, &Bool8x4Type },
        std::pair{ "abgr"_c, &Bool8x4Type },
        std::pair{ "abr"_c, &Bool8x3Type },
        std::pair{ "abra"_c, &Bool8x4Type },
        std::pair{ "abrb"_c, &Bool8x4Type },
        std::pair{ "abrg"_c, &Bool8x4Type },
        std::pair{ "abrr"_c, &Bool8x4Type },
        std::pair{ "ag"_c, &Bool8x2Type },
        std::pair{ "aga"_c, &Bool8x3Type },
        std::pair{ "agaa"_c, &Bool8x4Type },
        std::pair{ "agab"_c, &Bool8x4Type },
        std::pair{ "agag"_c, &Bool8x4Type },
        std::pair{ "agar"_c, &Bool8x4Type },
        std::pair{ "agb"_c, &Bool8x3Type },
        std::pair{ "agba"_c, &Bool8x4Type },
        std::pair{ "agbb"_c, &Bool8x4Type },
        std::pair{ "agbg"_c, &Bool8x4Type },
        std::pair{ "agbr"_c, &Bool8x4Type },
        std::pair{ "agg"_c, &Bool8x3Type },
        std::pair{ "agga"_c, &Bool8x4Type },
        std::pair{ "aggb"_c, &Bool8x4Type },
        std::pair{ "aggg"_c, &Bool8x4Type },
        std::pair{ "aggr"_c, &Bool8x4Type },
        std::pair{ "agr"_c, &Bool8x3Type },
        std::pair{ "agra"_c, &Bool8x4Type },
        std::pair{ "agrb"_c, &Bool8x4Type },
        std::pair{ "agrg"_c, &Bool8x4Type },
        std::pair{ "agrr"_c, &Bool8x4Type },
        std::pair{ "ar"_c, &Bool8x2Type },
        std::pair{ "ara"_c, &Bool8x3Type },
        std::pair{ "araa"_c, &Bool8x4Type },
        std::pair{ "arab"_c, &Bool8x4Type },
        std::pair{ "arag"_c, &Bool8x4Type },
        std::pair{ "arar"_c, &Bool8x4Type },
        std::pair{ "arb"_c, &Bool8x3Type },
        std::pair{ "arba"_c, &Bool8x4Type },
        std::pair{ "arbb"_c, &Bool8x4Type },
        std::pair{ "arbg"_c, &Bool8x4Type },
        std::pair{ "arbr"_c, &Bool8x4Type },
        std::pair{ "arg"_c, &Bool8x3Type },
        std::pair{ "arga"_c, &Bool8x4Type },
        std::pair{ "argb"_c, &Bool8x4Type },
        std::pair{ "argg"_c, &Bool8x4Type },
        std::pair{ "argr"_c, &Bool8x4Type },
        std::pair{ "arr"_c, &Bool8x3Type },
        std::pair{ "arra"_c, &Bool8x4Type },
        std::pair{ "arrb"_c, &Bool8x4Type },
        std::pair{ "arrg"_c, &Bool8x4Type },
        std::pair{ "arrr"_c, &Bool8x4Type },
        std::pair{ "b"_c, &Bool8Type },
        std::pair{ "ba"_c, &Bool8x2Type },
        std::pair{ "baa"_c, &Bool8x3Type },
        std::pair{ "baaa"_c, &Bool8x4Type },
        std::pair{ "baab"_c, &Bool8x4Type },
        std::pair{ "baag"_c, &Bool8x4Type },
        std::pair{ "baar"_c, &Bool8x4Type },
        std::pair{ "bab"_c, &Bool8x3Type },
        std::pair{ "baba"_c, &Bool8x4Type },
        std::pair{ "babb"_c, &Bool8x4Type },
        std::pair{ "babg"_c, &Bool8x4Type },
        std::pair{ "babr"_c, &Bool8x4Type },
        std::pair{ "bag"_c, &Bool8x3Type },
        std::pair{ "baga"_c, &Bool8x4Type },
        std::pair{ "bagb"_c, &Bool8x4Type },
        std::pair{ "bagg"_c, &Bool8x4Type },
        std::pair{ "bagr"_c, &Bool8x4Type },
        std::pair{ "bar"_c, &Bool8x3Type },
        std::pair{ "bara"_c, &Bool8x4Type },
        std::pair{ "barb"_c, &Bool8x4Type },
        std::pair{ "barg"_c, &Bool8x4Type },
        std::pair{ "barr"_c, &Bool8x4Type },
        std::pair{ "bb"_c, &Bool8x2Type },
        std::pair{ "bba"_c, &Bool8x3Type },
        std::pair{ "bbaa"_c, &Bool8x4Type },
        std::pair{ "bbab"_c, &Bool8x4Type },
        std::pair{ "bbag"_c, &Bool8x4Type },
        std::pair{ "bbar"_c, &Bool8x4Type },
        std::pair{ "bbb"_c, &Bool8x3Type },
        std::pair{ "bbba"_c, &Bool8x4Type },
        std::pair{ "bbbb"_c, &Bool8x4Type },
        std::pair{ "bbbg"_c, &Bool8x4Type },
        std::pair{ "bbbr"_c, &Bool8x4Type },
        std::pair{ "bbg"_c, &Bool8x3Type },
        std::pair{ "bbga"_c, &Bool8x4Type },
        std::pair{ "bbgb"_c, &Bool8x4Type },
        std::pair{ "bbgg"_c, &Bool8x4Type },
        std::pair{ "bbgr"_c, &Bool8x4Type },
        std::pair{ "bbr"_c, &Bool8x3Type },
        std::pair{ "bbra"_c, &Bool8x4Type },
        std::pair{ "bbrb"_c, &Bool8x4Type },
        std::pair{ "bbrg"_c, &Bool8x4Type },
        std::pair{ "bbrr"_c, &Bool8x4Type },
        std::pair{ "bg"_c, &Bool8x2Type },
        std::pair{ "bga"_c, &Bool8x3Type },
        std::pair{ "bgaa"_c, &Bool8x4Type },
        std::pair{ "bgab"_c, &Bool8x4Type },
        std::pair{ "bgag"_c, &Bool8x4Type },
        std::pair{ "bgar"_c, &Bool8x4Type },
        std::pair{ "bgb"_c, &Bool8x3Type },
        std::pair{ "bgba"_c, &Bool8x4Type },
        std::pair{ "bgbb"_c, &Bool8x4Type },
        std::pair{ "bgbg"_c, &Bool8x4Type },
        std::pair{ "bgbr"_c, &Bool8x4Type },
        std::pair{ "bgg"_c, &Bool8x3Type },
        std::pair{ "bgga"_c, &Bool8x4Type },
        std::pair{ "bggb"_c, &Bool8x4Type },
        std::pair{ "bggg"_c, &Bool8x4Type },
        std::pair{ "bggr"_c, &Bool8x4Type },
        std::pair{ "bgr"_c, &Bool8x3Type },
        std::pair{ "bgra"_c, &Bool8x4Type },
        std::pair{ "bgrb"_c, &Bool8x4Type },
        std::pair{ "bgrg"_c, &Bool8x4Type },
        std::pair{ "bgrr"_c, &Bool8x4Type },
        std::pair{ "br"_c, &Bool8x2Type },
        std::pair{ "bra"_c, &Bool8x3Type },
        std::pair{ "braa"_c, &Bool8x4Type },
        std::pair{ "brab"_c, &Bool8x4Type },
        std::pair{ "brag"_c, &Bool8x4Type },
        std::pair{ "brar"_c, &Bool8x4Type },
        std::pair{ "brb"_c, &Bool8x3Type },
        std::pair{ "brba"_c, &Bool8x4Type },
        std::pair{ "brbb"_c, &Bool8x4Type },
        std::pair{ "brbg"_c, &Bool8x4Type },
        std::pair{ "brbr"_c, &Bool8x4Type },
        std::pair{ "brg"_c, &Bool8x3Type },
        std::pair{ "brga"_c, &Bool8x4Type },
        std::pair{ "brgb"_c, &Bool8x4Type },
        std::pair{ "brgg"_c, &Bool8x4Type },
        std::pair{ "brgr"_c, &Bool8x4Type },
        std::pair{ "brr"_c, &Bool8x3Type },
        std::pair{ "brra"_c, &Bool8x4Type },
        std::pair{ "brrb"_c, &Bool8x4Type },
        std::pair{ "brrg"_c, &Bool8x4Type },
        std::pair{ "brrr"_c, &Bool8x4Type },
        std::pair{ "g"_c, &Bool8Type },
        std::pair{ "ga"_c, &Bool8x2Type },
        std::pair{ "gaa"_c, &Bool8x3Type },
        std::pair{ "gaaa"_c, &Bool8x4Type },
        std::pair{ "gaab"_c, &Bool8x4Type },
        std::pair{ "gaag"_c, &Bool8x4Type },
        std::pair{ "gaar"_c, &Bool8x4Type },
        std::pair{ "gab"_c, &Bool8x3Type },
        std::pair{ "gaba"_c, &Bool8x4Type },
        std::pair{ "gabb"_c, &Bool8x4Type },
        std::pair{ "gabg"_c, &Bool8x4Type },
        std::pair{ "gabr"_c, &Bool8x4Type },
        std::pair{ "gag"_c, &Bool8x3Type },
        std::pair{ "gaga"_c, &Bool8x4Type },
        std::pair{ "gagb"_c, &Bool8x4Type },
        std::pair{ "gagg"_c, &Bool8x4Type },
        std::pair{ "gagr"_c, &Bool8x4Type },
        std::pair{ "gar"_c, &Bool8x3Type },
        std::pair{ "gara"_c, &Bool8x4Type },
        std::pair{ "garb"_c, &Bool8x4Type },
        std::pair{ "garg"_c, &Bool8x4Type },
        std::pair{ "garr"_c, &Bool8x4Type },
        std::pair{ "gb"_c, &Bool8x2Type },
        std::pair{ "gba"_c, &Bool8x3Type },
        std::pair{ "gbaa"_c, &Bool8x4Type },
        std::pair{ "gbab"_c, &Bool8x4Type },
        std::pair{ "gbag"_c, &Bool8x4Type },
        std::pair{ "gbar"_c, &Bool8x4Type },
        std::pair{ "gbb"_c, &Bool8x3Type },
        std::pair{ "gbba"_c, &Bool8x4Type },
        std::pair{ "gbbb"_c, &Bool8x4Type },
        std::pair{ "gbbg"_c, &Bool8x4Type },
        std::pair{ "gbbr"_c, &Bool8x4Type },
        std::pair{ "gbg"_c, &Bool8x3Type },
        std::pair{ "gbga"_c, &Bool8x4Type },
        std::pair{ "gbgb"_c, &Bool8x4Type },
        std::pair{ "gbgg"_c, &Bool8x4Type },
        std::pair{ "gbgr"_c, &Bool8x4Type },
        std::pair{ "gbr"_c, &Bool8x3Type },
        std::pair{ "gbra"_c, &Bool8x4Type },
        std::pair{ "gbrb"_c, &Bool8x4Type },
        std::pair{ "gbrg"_c, &Bool8x4Type },
        std::pair{ "gbrr"_c, &Bool8x4Type },
        std::pair{ "gg"_c, &Bool8x2Type },
        std::pair{ "gga"_c, &Bool8x3Type },
        std::pair{ "ggaa"_c, &Bool8x4Type },
        std::pair{ "ggab"_c, &Bool8x4Type },
        std::pair{ "ggag"_c, &Bool8x4Type },
        std::pair{ "ggar"_c, &Bool8x4Type },
        std::pair{ "ggb"_c, &Bool8x3Type },
        std::pair{ "ggba"_c, &Bool8x4Type },
        std::pair{ "ggbb"_c, &Bool8x4Type },
        std::pair{ "ggbg"_c, &Bool8x4Type },
        std::pair{ "ggbr"_c, &Bool8x4Type },
        std::pair{ "ggg"_c, &Bool8x3Type },
        std::pair{ "ggga"_c, &Bool8x4Type },
        std::pair{ "gggb"_c, &Bool8x4Type },
        std::pair{ "gggg"_c, &Bool8x4Type },
        std::pair{ "gggr"_c, &Bool8x4Type },
        std::pair{ "ggr"_c, &Bool8x3Type },
        std::pair{ "ggra"_c, &Bool8x4Type },
        std::pair{ "ggrb"_c, &Bool8x4Type },
        std::pair{ "ggrg"_c, &Bool8x4Type },
        std::pair{ "ggrr"_c, &Bool8x4Type },
        std::pair{ "gr"_c, &Bool8x2Type },
        std::pair{ "gra"_c, &Bool8x3Type },
        std::pair{ "graa"_c, &Bool8x4Type },
        std::pair{ "grab"_c, &Bool8x4Type },
        std::pair{ "grag"_c, &Bool8x4Type },
        std::pair{ "grar"_c, &Bool8x4Type },
        std::pair{ "grb"_c, &Bool8x3Type },
        std::pair{ "grba"_c, &Bool8x4Type },
        std::pair{ "grbb"_c, &Bool8x4Type },
        std::pair{ "grbg"_c, &Bool8x4Type },
        std::pair{ "grbr"_c, &Bool8x4Type },
        std::pair{ "grg"_c, &Bool8x3Type },
        std::pair{ "grga"_c, &Bool8x4Type },
        std::pair{ "grgb"_c, &Bool8x4Type },
        std::pair{ "grgg"_c, &Bool8x4Type },
        std::pair{ "grgr"_c, &Bool8x4Type },
        std::pair{ "grr"_c, &Bool8x3Type },
        std::pair{ "grra"_c, &Bool8x4Type },
        std::pair{ "grrb"_c, &Bool8x4Type },
        std::pair{ "grrg"_c, &Bool8x4Type },
        std::pair{ "grrr"_c, &Bool8x4Type },
        std::pair{ "operator!="_c, &Bool8x4_operator_neq_Bool8x4 },
        std::pair{ "operator!=(b8x4)"_c, &Bool8x4_operator_neq_Bool8x4 },
        std::pair{ "operator&&"_c, &Bool8x4_operator_andand_Bool8x4 },
        std::pair{ "operator&&(b8x4)"_c, &Bool8x4_operator_andand_Bool8x4 },
        std::pair{ "operator=="_c, &Bool8x4_operator_eq_Bool8x4 },
        std::pair{ "operator==(b8x4)"_c, &Bool8x4_operator_eq_Bool8x4 },
        std::pair{ "operator[]"_c, &Bool8x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Bool8x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Bool8x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Bool8x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Bool8x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Bool8x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Bool8x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Bool8x4_operator_index_UInt32 },
        std::pair{ "operator||"_c, &Bool8x4_operator_oror_Bool8x4 },
        std::pair{ "operator||(b8x4)"_c, &Bool8x4_operator_oror_Bool8x4 },
        std::pair{ "r"_c, &Bool8Type },
        std::pair{ "ra"_c, &Bool8x2Type },
        std::pair{ "raa"_c, &Bool8x3Type },
        std::pair{ "raaa"_c, &Bool8x4Type },
        std::pair{ "raab"_c, &Bool8x4Type },
        std::pair{ "raag"_c, &Bool8x4Type },
        std::pair{ "raar"_c, &Bool8x4Type },
        std::pair{ "rab"_c, &Bool8x3Type },
        std::pair{ "raba"_c, &Bool8x4Type },
        std::pair{ "rabb"_c, &Bool8x4Type },
        std::pair{ "rabg"_c, &Bool8x4Type },
        std::pair{ "rabr"_c, &Bool8x4Type },
        std::pair{ "rag"_c, &Bool8x3Type },
        std::pair{ "raga"_c, &Bool8x4Type },
        std::pair{ "ragb"_c, &Bool8x4Type },
        std::pair{ "ragg"_c, &Bool8x4Type },
        std::pair{ "ragr"_c, &Bool8x4Type },
        std::pair{ "rar"_c, &Bool8x3Type },
        std::pair{ "rara"_c, &Bool8x4Type },
        std::pair{ "rarb"_c, &Bool8x4Type },
        std::pair{ "rarg"_c, &Bool8x4Type },
        std::pair{ "rarr"_c, &Bool8x4Type },
        std::pair{ "rb"_c, &Bool8x2Type },
        std::pair{ "rba"_c, &Bool8x3Type },
        std::pair{ "rbaa"_c, &Bool8x4Type },
        std::pair{ "rbab"_c, &Bool8x4Type },
        std::pair{ "rbag"_c, &Bool8x4Type },
        std::pair{ "rbar"_c, &Bool8x4Type },
        std::pair{ "rbb"_c, &Bool8x3Type },
        std::pair{ "rbba"_c, &Bool8x4Type },
        std::pair{ "rbbb"_c, &Bool8x4Type },
        std::pair{ "rbbg"_c, &Bool8x4Type },
        std::pair{ "rbbr"_c, &Bool8x4Type },
        std::pair{ "rbg"_c, &Bool8x3Type },
        std::pair{ "rbga"_c, &Bool8x4Type },
        std::pair{ "rbgb"_c, &Bool8x4Type },
        std::pair{ "rbgg"_c, &Bool8x4Type },
        std::pair{ "rbgr"_c, &Bool8x4Type },
        std::pair{ "rbr"_c, &Bool8x3Type },
        std::pair{ "rbra"_c, &Bool8x4Type },
        std::pair{ "rbrb"_c, &Bool8x4Type },
        std::pair{ "rbrg"_c, &Bool8x4Type },
        std::pair{ "rbrr"_c, &Bool8x4Type },
        std::pair{ "rg"_c, &Bool8x2Type },
        std::pair{ "rga"_c, &Bool8x3Type },
        std::pair{ "rgaa"_c, &Bool8x4Type },
        std::pair{ "rgab"_c, &Bool8x4Type },
        std::pair{ "rgag"_c, &Bool8x4Type },
        std::pair{ "rgar"_c, &Bool8x4Type },
        std::pair{ "rgb"_c, &Bool8x3Type },
        std::pair{ "rgba"_c, &Bool8x4Type },
        std::pair{ "rgbb"_c, &Bool8x4Type },
        std::pair{ "rgbg"_c, &Bool8x4Type },
        std::pair{ "rgbr"_c, &Bool8x4Type },
        std::pair{ "rgg"_c, &Bool8x3Type },
        std::pair{ "rgga"_c, &Bool8x4Type },
        std::pair{ "rggb"_c, &Bool8x4Type },
        std::pair{ "rggg"_c, &Bool8x4Type },
        std::pair{ "rggr"_c, &Bool8x4Type },
        std::pair{ "rgr"_c, &Bool8x3Type },
        std::pair{ "rgra"_c, &Bool8x4Type },
        std::pair{ "rgrb"_c, &Bool8x4Type },
        std::pair{ "rgrg"_c, &Bool8x4Type },
        std::pair{ "rgrr"_c, &Bool8x4Type },
        std::pair{ "rr"_c, &Bool8x2Type },
        std::pair{ "rra"_c, &Bool8x3Type },
        std::pair{ "rraa"_c, &Bool8x4Type },
        std::pair{ "rrab"_c, &Bool8x4Type },
        std::pair{ "rrag"_c, &Bool8x4Type },
        std::pair{ "rrar"_c, &Bool8x4Type },
        std::pair{ "rrb"_c, &Bool8x3Type },
        std::pair{ "rrba"_c, &Bool8x4Type },
        std::pair{ "rrbb"_c, &Bool8x4Type },
        std::pair{ "rrbg"_c, &Bool8x4Type },
        std::pair{ "rrbr"_c, &Bool8x4Type },
        std::pair{ "rrg"_c, &Bool8x3Type },
        std::pair{ "rrga"_c, &Bool8x4Type },
        std::pair{ "rrgb"_c, &Bool8x4Type },
        std::pair{ "rrgg"_c, &Bool8x4Type },
        std::pair{ "rrgr"_c, &Bool8x4Type },
        std::pair{ "rrr"_c, &Bool8x3Type },
        std::pair{ "rrra"_c, &Bool8x4Type },
        std::pair{ "rrrb"_c, &Bool8x4Type },
        std::pair{ "rrrg"_c, &Bool8x4Type },
        std::pair{ "rrrr"_c, &Bool8x4Type },
        std::pair{ "w"_c, &Bool8Type },
        std::pair{ "ww"_c, &Bool8x2Type },
        std::pair{ "www"_c, &Bool8x3Type },
        std::pair{ "wwww"_c, &Bool8x4Type },
        std::pair{ "wwwx"_c, &Bool8x4Type },
        std::pair{ "wwwy"_c, &Bool8x4Type },
        std::pair{ "wwwz"_c, &Bool8x4Type },
        std::pair{ "wwx"_c, &Bool8x3Type },
        std::pair{ "wwxw"_c, &Bool8x4Type },
        std::pair{ "wwxx"_c, &Bool8x4Type },
        std::pair{ "wwxy"_c, &Bool8x4Type },
        std::pair{ "wwxz"_c, &Bool8x4Type },
        std::pair{ "wwy"_c, &Bool8x3Type },
        std::pair{ "wwyw"_c, &Bool8x4Type },
        std::pair{ "wwyx"_c, &Bool8x4Type },
        std::pair{ "wwyy"_c, &Bool8x4Type },
        std::pair{ "wwyz"_c, &Bool8x4Type },
        std::pair{ "wwz"_c, &Bool8x3Type },
        std::pair{ "wwzw"_c, &Bool8x4Type },
        std::pair{ "wwzx"_c, &Bool8x4Type },
        std::pair{ "wwzy"_c, &Bool8x4Type },
        std::pair{ "wwzz"_c, &Bool8x4Type },
        std::pair{ "wx"_c, &Bool8x2Type },
        std::pair{ "wxw"_c, &Bool8x3Type },
        std::pair{ "wxww"_c, &Bool8x4Type },
        std::pair{ "wxwx"_c, &Bool8x4Type },
        std::pair{ "wxwy"_c, &Bool8x4Type },
        std::pair{ "wxwz"_c, &Bool8x4Type },
        std::pair{ "wxx"_c, &Bool8x3Type },
        std::pair{ "wxxw"_c, &Bool8x4Type },
        std::pair{ "wxxx"_c, &Bool8x4Type },
        std::pair{ "wxxy"_c, &Bool8x4Type },
        std::pair{ "wxxz"_c, &Bool8x4Type },
        std::pair{ "wxy"_c, &Bool8x3Type },
        std::pair{ "wxyw"_c, &Bool8x4Type },
        std::pair{ "wxyx"_c, &Bool8x4Type },
        std::pair{ "wxyy"_c, &Bool8x4Type },
        std::pair{ "wxyz"_c, &Bool8x4Type },
        std::pair{ "wxz"_c, &Bool8x3Type },
        std::pair{ "wxzw"_c, &Bool8x4Type },
        std::pair{ "wxzx"_c, &Bool8x4Type },
        std::pair{ "wxzy"_c, &Bool8x4Type },
        std::pair{ "wxzz"_c, &Bool8x4Type },
        std::pair{ "wy"_c, &Bool8x2Type },
        std::pair{ "wyw"_c, &Bool8x3Type },
        std::pair{ "wyww"_c, &Bool8x4Type },
        std::pair{ "wywx"_c, &Bool8x4Type },
        std::pair{ "wywy"_c, &Bool8x4Type },
        std::pair{ "wywz"_c, &Bool8x4Type },
        std::pair{ "wyx"_c, &Bool8x3Type },
        std::pair{ "wyxw"_c, &Bool8x4Type },
        std::pair{ "wyxx"_c, &Bool8x4Type },
        std::pair{ "wyxy"_c, &Bool8x4Type },
        std::pair{ "wyxz"_c, &Bool8x4Type },
        std::pair{ "wyy"_c, &Bool8x3Type },
        std::pair{ "wyyw"_c, &Bool8x4Type },
        std::pair{ "wyyx"_c, &Bool8x4Type },
        std::pair{ "wyyy"_c, &Bool8x4Type },
        std::pair{ "wyyz"_c, &Bool8x4Type },
        std::pair{ "wyz"_c, &Bool8x3Type },
        std::pair{ "wyzw"_c, &Bool8x4Type },
        std::pair{ "wyzx"_c, &Bool8x4Type },
        std::pair{ "wyzy"_c, &Bool8x4Type },
        std::pair{ "wyzz"_c, &Bool8x4Type },
        std::pair{ "wz"_c, &Bool8x2Type },
        std::pair{ "wzw"_c, &Bool8x3Type },
        std::pair{ "wzww"_c, &Bool8x4Type },
        std::pair{ "wzwx"_c, &Bool8x4Type },
        std::pair{ "wzwy"_c, &Bool8x4Type },
        std::pair{ "wzwz"_c, &Bool8x4Type },
        std::pair{ "wzx"_c, &Bool8x3Type },
        std::pair{ "wzxw"_c, &Bool8x4Type },
        std::pair{ "wzxx"_c, &Bool8x4Type },
        std::pair{ "wzxy"_c, &Bool8x4Type },
        std::pair{ "wzxz"_c, &Bool8x4Type },
        std::pair{ "wzy"_c, &Bool8x3Type },
        std::pair{ "wzyw"_c, &Bool8x4Type },
        std::pair{ "wzyx"_c, &Bool8x4Type },
        std::pair{ "wzyy"_c, &Bool8x4Type },
        std::pair{ "wzyz"_c, &Bool8x4Type },
        std::pair{ "wzz"_c, &Bool8x3Type },
        std::pair{ "wzzw"_c, &Bool8x4Type },
        std::pair{ "wzzx"_c, &Bool8x4Type },
        std::pair{ "wzzy"_c, &Bool8x4Type },
        std::pair{ "wzzz"_c, &Bool8x4Type },
        std::pair{ "x"_c, &Bool8Type },
        std::pair{ "xw"_c, &Bool8x2Type },
        std::pair{ "xww"_c, &Bool8x3Type },
        std::pair{ "xwww"_c, &Bool8x4Type },
        std::pair{ "xwwx"_c, &Bool8x4Type },
        std::pair{ "xwwy"_c, &Bool8x4Type },
        std::pair{ "xwwz"_c, &Bool8x4Type },
        std::pair{ "xwx"_c, &Bool8x3Type },
        std::pair{ "xwxw"_c, &Bool8x4Type },
        std::pair{ "xwxx"_c, &Bool8x4Type },
        std::pair{ "xwxy"_c, &Bool8x4Type },
        std::pair{ "xwxz"_c, &Bool8x4Type },
        std::pair{ "xwy"_c, &Bool8x3Type },
        std::pair{ "xwyw"_c, &Bool8x4Type },
        std::pair{ "xwyx"_c, &Bool8x4Type },
        std::pair{ "xwyy"_c, &Bool8x4Type },
        std::pair{ "xwyz"_c, &Bool8x4Type },
        std::pair{ "xwz"_c, &Bool8x3Type },
        std::pair{ "xwzw"_c, &Bool8x4Type },
        std::pair{ "xwzx"_c, &Bool8x4Type },
        std::pair{ "xwzy"_c, &Bool8x4Type },
        std::pair{ "xwzz"_c, &Bool8x4Type },
        std::pair{ "xx"_c, &Bool8x2Type },
        std::pair{ "xxw"_c, &Bool8x3Type },
        std::pair{ "xxww"_c, &Bool8x4Type },
        std::pair{ "xxwx"_c, &Bool8x4Type },
        std::pair{ "xxwy"_c, &Bool8x4Type },
        std::pair{ "xxwz"_c, &Bool8x4Type },
        std::pair{ "xxx"_c, &Bool8x3Type },
        std::pair{ "xxxw"_c, &Bool8x4Type },
        std::pair{ "xxxx"_c, &Bool8x4Type },
        std::pair{ "xxxy"_c, &Bool8x4Type },
        std::pair{ "xxxz"_c, &Bool8x4Type },
        std::pair{ "xxy"_c, &Bool8x3Type },
        std::pair{ "xxyw"_c, &Bool8x4Type },
        std::pair{ "xxyx"_c, &Bool8x4Type },
        std::pair{ "xxyy"_c, &Bool8x4Type },
        std::pair{ "xxyz"_c, &Bool8x4Type },
        std::pair{ "xxz"_c, &Bool8x3Type },
        std::pair{ "xxzw"_c, &Bool8x4Type },
        std::pair{ "xxzx"_c, &Bool8x4Type },
        std::pair{ "xxzy"_c, &Bool8x4Type },
        std::pair{ "xxzz"_c, &Bool8x4Type },
        std::pair{ "xy"_c, &Bool8x2Type },
        std::pair{ "xyw"_c, &Bool8x3Type },
        std::pair{ "xyww"_c, &Bool8x4Type },
        std::pair{ "xywx"_c, &Bool8x4Type },
        std::pair{ "xywy"_c, &Bool8x4Type },
        std::pair{ "xywz"_c, &Bool8x4Type },
        std::pair{ "xyx"_c, &Bool8x3Type },
        std::pair{ "xyxw"_c, &Bool8x4Type },
        std::pair{ "xyxx"_c, &Bool8x4Type },
        std::pair{ "xyxy"_c, &Bool8x4Type },
        std::pair{ "xyxz"_c, &Bool8x4Type },
        std::pair{ "xyy"_c, &Bool8x3Type },
        std::pair{ "xyyw"_c, &Bool8x4Type },
        std::pair{ "xyyx"_c, &Bool8x4Type },
        std::pair{ "xyyy"_c, &Bool8x4Type },
        std::pair{ "xyyz"_c, &Bool8x4Type },
        std::pair{ "xyz"_c, &Bool8x3Type },
        std::pair{ "xyzw"_c, &Bool8x4Type },
        std::pair{ "xyzx"_c, &Bool8x4Type },
        std::pair{ "xyzy"_c, &Bool8x4Type },
        std::pair{ "xyzz"_c, &Bool8x4Type },
        std::pair{ "xz"_c, &Bool8x2Type },
        std::pair{ "xzw"_c, &Bool8x3Type },
        std::pair{ "xzww"_c, &Bool8x4Type },
        std::pair{ "xzwx"_c, &Bool8x4Type },
        std::pair{ "xzwy"_c, &Bool8x4Type },
        std::pair{ "xzwz"_c, &Bool8x4Type },
        std::pair{ "xzx"_c, &Bool8x3Type },
        std::pair{ "xzxw"_c, &Bool8x4Type },
        std::pair{ "xzxx"_c, &Bool8x4Type },
        std::pair{ "xzxy"_c, &Bool8x4Type },
        std::pair{ "xzxz"_c, &Bool8x4Type },
        std::pair{ "xzy"_c, &Bool8x3Type },
        std::pair{ "xzyw"_c, &Bool8x4Type },
        std::pair{ "xzyx"_c, &Bool8x4Type },
        std::pair{ "xzyy"_c, &Bool8x4Type },
        std::pair{ "xzyz"_c, &Bool8x4Type },
        std::pair{ "xzz"_c, &Bool8x3Type },
        std::pair{ "xzzw"_c, &Bool8x4Type },
        std::pair{ "xzzx"_c, &Bool8x4Type },
        std::pair{ "xzzy"_c, &Bool8x4Type },
        std::pair{ "xzzz"_c, &Bool8x4Type },
        std::pair{ "y"_c, &Bool8Type },
        std::pair{ "yw"_c, &Bool8x2Type },
        std::pair{ "yww"_c, &Bool8x3Type },
        std::pair{ "ywww"_c, &Bool8x4Type },
        std::pair{ "ywwx"_c, &Bool8x4Type },
        std::pair{ "ywwy"_c, &Bool8x4Type },
        std::pair{ "ywwz"_c, &Bool8x4Type },
        std::pair{ "ywx"_c, &Bool8x3Type },
        std::pair{ "ywxw"_c, &Bool8x4Type },
        std::pair{ "ywxx"_c, &Bool8x4Type },
        std::pair{ "ywxy"_c, &Bool8x4Type },
        std::pair{ "ywxz"_c, &Bool8x4Type },
        std::pair{ "ywy"_c, &Bool8x3Type },
        std::pair{ "ywyw"_c, &Bool8x4Type },
        std::pair{ "ywyx"_c, &Bool8x4Type },
        std::pair{ "ywyy"_c, &Bool8x4Type },
        std::pair{ "ywyz"_c, &Bool8x4Type },
        std::pair{ "ywz"_c, &Bool8x3Type },
        std::pair{ "ywzw"_c, &Bool8x4Type },
        std::pair{ "ywzx"_c, &Bool8x4Type },
        std::pair{ "ywzy"_c, &Bool8x4Type },
        std::pair{ "ywzz"_c, &Bool8x4Type },
        std::pair{ "yx"_c, &Bool8x2Type },
        std::pair{ "yxw"_c, &Bool8x3Type },
        std::pair{ "yxww"_c, &Bool8x4Type },
        std::pair{ "yxwx"_c, &Bool8x4Type },
        std::pair{ "yxwy"_c, &Bool8x4Type },
        std::pair{ "yxwz"_c, &Bool8x4Type },
        std::pair{ "yxx"_c, &Bool8x3Type },
        std::pair{ "yxxw"_c, &Bool8x4Type },
        std::pair{ "yxxx"_c, &Bool8x4Type },
        std::pair{ "yxxy"_c, &Bool8x4Type },
        std::pair{ "yxxz"_c, &Bool8x4Type },
        std::pair{ "yxy"_c, &Bool8x3Type },
        std::pair{ "yxyw"_c, &Bool8x4Type },
        std::pair{ "yxyx"_c, &Bool8x4Type },
        std::pair{ "yxyy"_c, &Bool8x4Type },
        std::pair{ "yxyz"_c, &Bool8x4Type },
        std::pair{ "yxz"_c, &Bool8x3Type },
        std::pair{ "yxzw"_c, &Bool8x4Type },
        std::pair{ "yxzx"_c, &Bool8x4Type },
        std::pair{ "yxzy"_c, &Bool8x4Type },
        std::pair{ "yxzz"_c, &Bool8x4Type },
        std::pair{ "yy"_c, &Bool8x2Type },
        std::pair{ "yyw"_c, &Bool8x3Type },
        std::pair{ "yyww"_c, &Bool8x4Type },
        std::pair{ "yywx"_c, &Bool8x4Type },
        std::pair{ "yywy"_c, &Bool8x4Type },
        std::pair{ "yywz"_c, &Bool8x4Type },
        std::pair{ "yyx"_c, &Bool8x3Type },
        std::pair{ "yyxw"_c, &Bool8x4Type },
        std::pair{ "yyxx"_c, &Bool8x4Type },
        std::pair{ "yyxy"_c, &Bool8x4Type },
        std::pair{ "yyxz"_c, &Bool8x4Type },
        std::pair{ "yyy"_c, &Bool8x3Type },
        std::pair{ "yyyw"_c, &Bool8x4Type },
        std::pair{ "yyyx"_c, &Bool8x4Type },
        std::pair{ "yyyy"_c, &Bool8x4Type },
        std::pair{ "yyyz"_c, &Bool8x4Type },
        std::pair{ "yyz"_c, &Bool8x3Type },
        std::pair{ "yyzw"_c, &Bool8x4Type },
        std::pair{ "yyzx"_c, &Bool8x4Type },
        std::pair{ "yyzy"_c, &Bool8x4Type },
        std::pair{ "yyzz"_c, &Bool8x4Type },
        std::pair{ "yz"_c, &Bool8x2Type },
        std::pair{ "yzw"_c, &Bool8x3Type },
        std::pair{ "yzww"_c, &Bool8x4Type },
        std::pair{ "yzwx"_c, &Bool8x4Type },
        std::pair{ "yzwy"_c, &Bool8x4Type },
        std::pair{ "yzwz"_c, &Bool8x4Type },
        std::pair{ "yzx"_c, &Bool8x3Type },
        std::pair{ "yzxw"_c, &Bool8x4Type },
        std::pair{ "yzxx"_c, &Bool8x4Type },
        std::pair{ "yzxy"_c, &Bool8x4Type },
        std::pair{ "yzxz"_c, &Bool8x4Type },
        std::pair{ "yzy"_c, &Bool8x3Type },
        std::pair{ "yzyw"_c, &Bool8x4Type },
        std::pair{ "yzyx"_c, &Bool8x4Type },
        std::pair{ "yzyy"_c, &Bool8x4Type },
        std::pair{ "yzyz"_c, &Bool8x4Type },
        std::pair{ "yzz"_c, &Bool8x3Type },
        std::pair{ "yzzw"_c, &Bool8x4Type },
        std::pair{ "yzzx"_c, &Bool8x4Type },
        std::pair{ "yzzy"_c, &Bool8x4Type },
        std::pair{ "yzzz"_c, &Bool8x4Type },
        std::pair{ "z"_c, &Bool8Type },
        std::pair{ "zw"_c, &Bool8x2Type },
        std::pair{ "zww"_c, &Bool8x3Type },
        std::pair{ "zwww"_c, &Bool8x4Type },
        std::pair{ "zwwx"_c, &Bool8x4Type },
        std::pair{ "zwwy"_c, &Bool8x4Type },
        std::pair{ "zwwz"_c, &Bool8x4Type },
        std::pair{ "zwx"_c, &Bool8x3Type },
        std::pair{ "zwxw"_c, &Bool8x4Type },
        std::pair{ "zwxx"_c, &Bool8x4Type },
        std::pair{ "zwxy"_c, &Bool8x4Type },
        std::pair{ "zwxz"_c, &Bool8x4Type },
        std::pair{ "zwy"_c, &Bool8x3Type },
        std::pair{ "zwyw"_c, &Bool8x4Type },
        std::pair{ "zwyx"_c, &Bool8x4Type },
        std::pair{ "zwyy"_c, &Bool8x4Type },
        std::pair{ "zwyz"_c, &Bool8x4Type },
        std::pair{ "zwz"_c, &Bool8x3Type },
        std::pair{ "zwzw"_c, &Bool8x4Type },
        std::pair{ "zwzx"_c, &Bool8x4Type },
        std::pair{ "zwzy"_c, &Bool8x4Type },
        std::pair{ "zwzz"_c, &Bool8x4Type },
        std::pair{ "zx"_c, &Bool8x2Type },
        std::pair{ "zxw"_c, &Bool8x3Type },
        std::pair{ "zxww"_c, &Bool8x4Type },
        std::pair{ "zxwx"_c, &Bool8x4Type },
        std::pair{ "zxwy"_c, &Bool8x4Type },
        std::pair{ "zxwz"_c, &Bool8x4Type },
        std::pair{ "zxx"_c, &Bool8x3Type },
        std::pair{ "zxxw"_c, &Bool8x4Type },
        std::pair{ "zxxx"_c, &Bool8x4Type },
        std::pair{ "zxxy"_c, &Bool8x4Type },
        std::pair{ "zxxz"_c, &Bool8x4Type },
        std::pair{ "zxy"_c, &Bool8x3Type },
        std::pair{ "zxyw"_c, &Bool8x4Type },
        std::pair{ "zxyx"_c, &Bool8x4Type },
        std::pair{ "zxyy"_c, &Bool8x4Type },
        std::pair{ "zxyz"_c, &Bool8x4Type },
        std::pair{ "zxz"_c, &Bool8x3Type },
        std::pair{ "zxzw"_c, &Bool8x4Type },
        std::pair{ "zxzx"_c, &Bool8x4Type },
        std::pair{ "zxzy"_c, &Bool8x4Type },
        std::pair{ "zxzz"_c, &Bool8x4Type },
        std::pair{ "zy"_c, &Bool8x2Type },
        std::pair{ "zyw"_c, &Bool8x3Type },
        std::pair{ "zyww"_c, &Bool8x4Type },
        std::pair{ "zywx"_c, &Bool8x4Type },
        std::pair{ "zywy"_c, &Bool8x4Type },
        std::pair{ "zywz"_c, &Bool8x4Type },
        std::pair{ "zyx"_c, &Bool8x3Type },
        std::pair{ "zyxw"_c, &Bool8x4Type },
        std::pair{ "zyxx"_c, &Bool8x4Type },
        std::pair{ "zyxy"_c, &Bool8x4Type },
        std::pair{ "zyxz"_c, &Bool8x4Type },
        std::pair{ "zyy"_c, &Bool8x3Type },
        std::pair{ "zyyw"_c, &Bool8x4Type },
        std::pair{ "zyyx"_c, &Bool8x4Type },
        std::pair{ "zyyy"_c, &Bool8x4Type },
        std::pair{ "zyyz"_c, &Bool8x4Type },
        std::pair{ "zyz"_c, &Bool8x3Type },
        std::pair{ "zyzw"_c, &Bool8x4Type },
        std::pair{ "zyzx"_c, &Bool8x4Type },
        std::pair{ "zyzy"_c, &Bool8x4Type },
        std::pair{ "zyzz"_c, &Bool8x4Type },
        std::pair{ "zz"_c, &Bool8x2Type },
        std::pair{ "zzw"_c, &Bool8x3Type },
        std::pair{ "zzww"_c, &Bool8x4Type },
        std::pair{ "zzwx"_c, &Bool8x4Type },
        std::pair{ "zzwy"_c, &Bool8x4Type },
        std::pair{ "zzwz"_c, &Bool8x4Type },
        std::pair{ "zzx"_c, &Bool8x3Type },
        std::pair{ "zzxw"_c, &Bool8x4Type },
        std::pair{ "zzxx"_c, &Bool8x4Type },
        std::pair{ "zzxy"_c, &Bool8x4Type },
        std::pair{ "zzxz"_c, &Bool8x4Type },
        std::pair{ "zzy"_c, &Bool8x3Type },
        std::pair{ "zzyw"_c, &Bool8x4Type },
        std::pair{ "zzyx"_c, &Bool8x4Type },
        std::pair{ "zzyy"_c, &Bool8x4Type },
        std::pair{ "zzyz"_c, &Bool8x4Type },
        std::pair{ "zzz"_c, &Bool8x3Type },
        std::pair{ "zzzw"_c, &Bool8x4Type },
        std::pair{ "zzzx"_c, &Bool8x4Type },
        std::pair{ "zzzy"_c, &Bool8x4Type },
        std::pair{ "zzzz"_c, &Bool8x4Type }
    };
}
Bool8x4 Bool8x4Type;

/// operator[] with Int32
Variable Float16x4_operator_index_Int32_arg;
Function Float16x4_operator_index_Int32;
inline constexpr std::array Float16x4_operator_index_Int32_args = { &Float16x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x4_operator_index_UInt32_arg;
Function Float16x4_operator_index_UInt32;
inline constexpr std::array Float16x4_operator_index_UInt32_args = { &Float16x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x4_operator_index_Int16_arg;
Function Float16x4_operator_index_Int16;
inline constexpr std::array Float16x4_operator_index_Int16_args = { &Float16x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x4_operator_index_UInt16_arg;
Function Float16x4_operator_index_UInt16;
inline constexpr std::array Float16x4_operator_index_UInt16_args = { &Float16x4_operator_index_UInt16_arg };

/// operator+ with Float16x4
Variable Float16x4_operator_add_Float16x4_arg;
Function Float16x4_operator_add_Float16x4;
inline constexpr std::array Float16x4_operator_add_Float16x4_args = { &Float16x4_operator_add_Float16x4_arg };

/// operator- with Float16x4
Variable Float16x4_operator_sub_Float16x4_arg;
Function Float16x4_operator_sub_Float16x4;
inline constexpr std::array Float16x4_operator_sub_Float16x4_args = { &Float16x4_operator_sub_Float16x4_arg };

/// operator* with Float16x4
Variable Float16x4_operator_mul_Float16x4_arg;
Function Float16x4_operator_mul_Float16x4;
inline constexpr std::array Float16x4_operator_mul_Float16x4_args = { &Float16x4_operator_mul_Float16x4_arg };

/// operator/ with Float16x4
Variable Float16x4_operator_div_Float16x4_arg;
Function Float16x4_operator_div_Float16x4;
inline constexpr std::array Float16x4_operator_div_Float16x4_args = { &Float16x4_operator_div_Float16x4_arg };

/// operator% with Float16x4
Variable Float16x4_operator_mod_Float16x4_arg;
Function Float16x4_operator_mod_Float16x4;
inline constexpr std::array Float16x4_operator_mod_Float16x4_args = { &Float16x4_operator_mod_Float16x4_arg };

/// operator+= with Float16x4
Variable Float16x4_operator_addasg_Float16x4_arg;
Function Float16x4_operator_addasg_Float16x4;
inline constexpr std::array Float16x4_operator_addasg_Float16x4_args = { &Float16x4_operator_addasg_Float16x4_arg };

/// operator-= with Float16x4
Variable Float16x4_operator_subasg_Float16x4_arg;
Function Float16x4_operator_subasg_Float16x4;
inline constexpr std::array Float16x4_operator_subasg_Float16x4_args = { &Float16x4_operator_subasg_Float16x4_arg };

/// operator*= with Float16x4
Variable Float16x4_operator_mulasg_Float16x4_arg;
Function Float16x4_operator_mulasg_Float16x4;
inline constexpr std::array Float16x4_operator_mulasg_Float16x4_args = { &Float16x4_operator_mulasg_Float16x4_arg };

/// operator/= with Float16x4
Variable Float16x4_operator_divasg_Float16x4_arg;
Function Float16x4_operator_divasg_Float16x4;
inline constexpr std::array Float16x4_operator_divasg_Float16x4_args = { &Float16x4_operator_divasg_Float16x4_arg };

/// operator< with Float16x4
Variable Float16x4_operator_lt_Float16x4_arg;
Function Float16x4_operator_lt_Float16x4;
inline constexpr std::array Float16x4_operator_lt_Float16x4_args = { &Float16x4_operator_lt_Float16x4_arg };

/// operator<= with Float16x4
Variable Float16x4_operator_lte_Float16x4_arg;
Function Float16x4_operator_lte_Float16x4;
inline constexpr std::array Float16x4_operator_lte_Float16x4_args = { &Float16x4_operator_lte_Float16x4_arg };

/// operator> with Float16x4
Variable Float16x4_operator_gt_Float16x4_arg;
Function Float16x4_operator_gt_Float16x4;
inline constexpr std::array Float16x4_operator_gt_Float16x4_args = { &Float16x4_operator_gt_Float16x4_arg };

/// operator>= with Float16x4
Variable Float16x4_operator_gte_Float16x4_arg;
Function Float16x4_operator_gte_Float16x4;
inline constexpr std::array Float16x4_operator_gte_Float16x4_args = { &Float16x4_operator_gte_Float16x4_arg };

/// operator== with Float16x4
Variable Float16x4_operator_eq_Float16x4_arg;
Function Float16x4_operator_eq_Float16x4;
inline constexpr std::array Float16x4_operator_eq_Float16x4_args = { &Float16x4_operator_eq_Float16x4_arg };

/// operator!= with Float16x4
Variable Float16x4_operator_neq_Float16x4_arg;
Function Float16x4_operator_neq_Float16x4;
inline constexpr std::array Float16x4_operator_neq_Float16x4_args = { &Float16x4_operator_neq_Float16x4_arg };

/// operator* with Float16
Variable Float16x4_operator_scale_Float16_arg;
Function Float16x4_operator_scale_Float16;
inline constexpr std::array Float16x4_operator_scale_Float16_args = { &Float16x4_operator_scale_Float16_arg };

/// operator* with UInt16
Variable Float16x4_operator_scale_UInt16_arg;
Function Float16x4_operator_scale_UInt16;
inline constexpr std::array Float16x4_operator_scale_UInt16_args = { &Float16x4_operator_scale_UInt16_arg };

/// operator* with Int16
Variable Float16x4_operator_scale_Int16_arg;
Function Float16x4_operator_scale_Int16;
inline constexpr std::array Float16x4_operator_scale_Int16_args = { &Float16x4_operator_scale_Int16_arg };

/// operator* with Float32x4x2
Variable Float16x4_operator_transform_Float32x4x2_arg;
Function Float16x4_operator_transform_Float32x4x2;
inline constexpr std::array Float16x4_operator_transform_Float32x4x2_args = { &Float16x4_operator_transform_Float32x4x2_arg };

/// operator* with Float32x4x3
Variable Float16x4_operator_transform_Float32x4x3_arg;
Function Float16x4_operator_transform_Float32x4x3;
inline constexpr std::array Float16x4_operator_transform_Float32x4x3_args = { &Float16x4_operator_transform_Float32x4x3_arg };

/// operator* with Float32x4x4
Variable Float16x4_operator_transform_Float32x4x4_arg;
Function Float16x4_operator_transform_Float32x4x4;
inline constexpr std::array Float16x4_operator_transform_Float32x4x4_args = { &Float16x4_operator_transform_Float32x4x4_arg };

Float16x4::Float16x4()
{
    this->name = "f16x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x4_operator_index_Int32_arg.name = "arg"_c;
    Float16x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x4_operator_index_Int32.name = "operator[]"_c;
    Float16x4_operator_index_Int32.backendIndex = 995;
    Float16x4_operator_index_Int32.returnType = Type::FullType { Float16Type.name };
    Float16x4_operator_index_Int32.parameters = Float16x4_operator_index_Int32_args;
    Symbol::Resolved(&Float16x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4_operator_index_Int32)->signature = "f16 operator[](i32)"_c;
    Symbol::Resolved(&Float16x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Float16x4_operator_index_Int32)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt32
    Float16x4_operator_index_UInt32_arg.name = "arg"_c;
    Float16x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x4_operator_index_UInt32.name = "operator[]"_c;
    Float16x4_operator_index_UInt32.backendIndex = 996;
    Float16x4_operator_index_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16x4_operator_index_UInt32.parameters = Float16x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4_operator_index_UInt32)->signature = "f16 operator[](u32)"_c;
    Symbol::Resolved(&Float16x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Float16x4_operator_index_UInt32)->returnTypeSymbol = &Float16Type;

    /// operator[] with Int16
    Float16x4_operator_index_Int16_arg.name = "arg"_c;
    Float16x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x4_operator_index_Int16.name = "operator[]"_c;
    Float16x4_operator_index_Int16.backendIndex = 997;
    Float16x4_operator_index_Int16.returnType = Type::FullType { Float16Type.name };
    Float16x4_operator_index_Int16.parameters = Float16x4_operator_index_Int16_args;
    Symbol::Resolved(&Float16x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4_operator_index_Int16)->signature = "f16 operator[](i16)"_c;
    Symbol::Resolved(&Float16x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Float16x4_operator_index_Int16)->returnTypeSymbol = &Float16Type;

    /// operator[] with UInt16
    Float16x4_operator_index_UInt16_arg.name = "arg"_c;
    Float16x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x4_operator_index_UInt16.name = "operator[]"_c;
    Float16x4_operator_index_UInt16.backendIndex = 998;
    Float16x4_operator_index_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16x4_operator_index_UInt16.parameters = Float16x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4_operator_index_UInt16)->signature = "f16 operator[](u16)"_c;
    Symbol::Resolved(&Float16x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Float16x4_operator_index_UInt16)->returnTypeSymbol = &Float16Type;

    /// operator+ with Float16x4
    Float16x4_operator_add_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_add_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_add_Float16x4.name = "operator+"_c;
    Float16x4_operator_add_Float16x4.backendIndex = 999;
    Float16x4_operator_add_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_add_Float16x4.parameters = Float16x4_operator_add_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_add_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_add_Float16x4)->signature = "f16x4 operator+(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_add_Float16x4)->name = "operator+(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_add_Float16x4)->nameWithVarNames = "operator+(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_add_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator- with Float16x4
    Float16x4_operator_sub_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_sub_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_sub_Float16x4.name = "operator-"_c;
    Float16x4_operator_sub_Float16x4.backendIndex = 1000;
    Float16x4_operator_sub_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_sub_Float16x4.parameters = Float16x4_operator_sub_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4)->signature = "f16x4 operator-(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4)->name = "operator-(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4)->nameWithVarNames = "operator-(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_sub_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float16x4
    Float16x4_operator_mul_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_mul_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_mul_Float16x4.name = "operator*"_c;
    Float16x4_operator_mul_Float16x4.backendIndex = 1001;
    Float16x4_operator_mul_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_mul_Float16x4.parameters = Float16x4_operator_mul_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4)->signature = "f16x4 operator*(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4)->name = "operator*(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4)->nameWithVarNames = "operator*(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mul_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator/ with Float16x4
    Float16x4_operator_div_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_div_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_div_Float16x4.name = "operator/"_c;
    Float16x4_operator_div_Float16x4.backendIndex = 1002;
    Float16x4_operator_div_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_div_Float16x4.parameters = Float16x4_operator_div_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_div_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_div_Float16x4)->signature = "f16x4 operator/(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_div_Float16x4)->name = "operator/(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_div_Float16x4)->nameWithVarNames = "operator/(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_div_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator% with Float16x4
    Float16x4_operator_mod_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_mod_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_mod_Float16x4.name = "operator%"_c;
    Float16x4_operator_mod_Float16x4.backendIndex = 1003;
    Float16x4_operator_mod_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_mod_Float16x4.parameters = Float16x4_operator_mod_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4)->signature = "f16x4 operator%(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4)->name = "operator%(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4)->nameWithVarNames = "operator%(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mod_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator+= with Float16x4
    Float16x4_operator_addasg_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_addasg_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_addasg_Float16x4.name = "operator+="_c;
    Float16x4_operator_addasg_Float16x4.backendIndex = 1004;
    Float16x4_operator_addasg_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_addasg_Float16x4.parameters = Float16x4_operator_addasg_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4)->signature = "f16x4 operator+=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4)->name = "operator+=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4)->nameWithVarNames = "operator+=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_addasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator-= with Float16x4
    Float16x4_operator_subasg_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_subasg_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_subasg_Float16x4.name = "operator-="_c;
    Float16x4_operator_subasg_Float16x4.backendIndex = 1005;
    Float16x4_operator_subasg_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_subasg_Float16x4.parameters = Float16x4_operator_subasg_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4)->signature = "f16x4 operator-=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4)->name = "operator-=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4)->nameWithVarNames = "operator-=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_subasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator*= with Float16x4
    Float16x4_operator_mulasg_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_mulasg_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_mulasg_Float16x4.name = "operator*="_c;
    Float16x4_operator_mulasg_Float16x4.backendIndex = 1006;
    Float16x4_operator_mulasg_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_mulasg_Float16x4.parameters = Float16x4_operator_mulasg_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4)->signature = "f16x4 operator*=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4)->name = "operator*=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4)->nameWithVarNames = "operator*=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_mulasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator/= with Float16x4
    Float16x4_operator_divasg_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_divasg_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_divasg_Float16x4.name = "operator/="_c;
    Float16x4_operator_divasg_Float16x4.backendIndex = 1007;
    Float16x4_operator_divasg_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_divasg_Float16x4.parameters = Float16x4_operator_divasg_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4)->signature = "f16x4 operator/=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4)->name = "operator/=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4)->nameWithVarNames = "operator/=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_divasg_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator< with Float16x4
    Float16x4_operator_lt_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_lt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_lt_Float16x4.name = "operator<"_c;
    Float16x4_operator_lt_Float16x4.backendIndex = 1008;
    Float16x4_operator_lt_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Float16x4_operator_lt_Float16x4.parameters = Float16x4_operator_lt_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4)->signature = "b8x4 operator<(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4)->name = "operator<(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4)->nameWithVarNames = "operator<(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_lt_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator<= with Float16x4
    Float16x4_operator_lte_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_lte_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_lte_Float16x4.name = "operator<="_c;
    Float16x4_operator_lte_Float16x4.backendIndex = 1009;
    Float16x4_operator_lte_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Float16x4_operator_lte_Float16x4.parameters = Float16x4_operator_lte_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4)->signature = "b8x4 operator<=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4)->name = "operator<=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4)->nameWithVarNames = "operator<=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_lte_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator> with Float16x4
    Float16x4_operator_gt_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_gt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_gt_Float16x4.name = "operator>"_c;
    Float16x4_operator_gt_Float16x4.backendIndex = 1010;
    Float16x4_operator_gt_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Float16x4_operator_gt_Float16x4.parameters = Float16x4_operator_gt_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4)->signature = "b8x4 operator>(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4)->name = "operator>(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4)->nameWithVarNames = "operator>(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_gt_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator>= with Float16x4
    Float16x4_operator_gte_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_gte_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_gte_Float16x4.name = "operator>="_c;
    Float16x4_operator_gte_Float16x4.backendIndex = 1011;
    Float16x4_operator_gte_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Float16x4_operator_gte_Float16x4.parameters = Float16x4_operator_gte_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4)->signature = "b8x4 operator>=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4)->name = "operator>=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4)->nameWithVarNames = "operator>=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_gte_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with Float16x4
    Float16x4_operator_eq_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_eq_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_eq_Float16x4.name = "operator=="_c;
    Float16x4_operator_eq_Float16x4.backendIndex = 1012;
    Float16x4_operator_eq_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Float16x4_operator_eq_Float16x4.parameters = Float16x4_operator_eq_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4)->signature = "b8x4 operator==(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4)->name = "operator==(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4)->nameWithVarNames = "operator==(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_eq_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with Float16x4
    Float16x4_operator_neq_Float16x4_arg.name = "arg"_c;
    Float16x4_operator_neq_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_operator_neq_Float16x4.name = "operator!="_c;
    Float16x4_operator_neq_Float16x4.backendIndex = 1013;
    Float16x4_operator_neq_Float16x4.returnType = Type::FullType { Bool8x4Type.name };
    Float16x4_operator_neq_Float16x4.parameters = Float16x4_operator_neq_Float16x4_args;
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4)->signature = "b8x4 operator!=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4)->name = "operator!=(f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4)->nameWithVarNames = "operator!=(arg : f16x4)"_c;
    Symbol::Resolved(&Float16x4_operator_neq_Float16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator* with Float16
    Float16x4_operator_scale_Float16_arg.name = "arg"_c;
    Float16x4_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x4_operator_scale_Float16.name = "operator*"_c;
    Float16x4_operator_scale_Float16.backendIndex = 1014;
    Float16x4_operator_scale_Float16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_scale_Float16.parameters = Float16x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x4_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_operator_scale_Float16)->signature = "f16x4 operator*(f16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_Float16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with UInt16
    Float16x4_operator_scale_UInt16_arg.name = "arg"_c;
    Float16x4_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x4_operator_scale_UInt16.name = "operator*"_c;
    Float16x4_operator_scale_UInt16.backendIndex = 1015;
    Float16x4_operator_scale_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_scale_UInt16.parameters = Float16x4_operator_scale_UInt16_args;
    Symbol::Resolved(&Float16x4_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4_operator_scale_UInt16)->signature = "f16x4 operator*(u16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Int16
    Float16x4_operator_scale_Int16_arg.name = "arg"_c;
    Float16x4_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x4_operator_scale_Int16.name = "operator*"_c;
    Float16x4_operator_scale_Int16.backendIndex = 1016;
    Float16x4_operator_scale_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_scale_Int16.parameters = Float16x4_operator_scale_Int16_args;
    Symbol::Resolved(&Float16x4_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4_operator_scale_Int16)->signature = "f16x4 operator*(i16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Float16x4_operator_scale_Int16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float32x4x2
    Float16x4_operator_transform_Float32x4x2_arg.name = "arg"_c;
    Float16x4_operator_transform_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float16x4_operator_transform_Float32x4x2.name = "operator*"_c;
    Float16x4_operator_transform_Float32x4x2.backendIndex = 1017;
    Float16x4_operator_transform_Float32x4x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x4_operator_transform_Float32x4x2.parameters = Float16x4_operator_transform_Float32x4x2_args;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x2)->signature = "f16x2 operator*(f32x4x2)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x2)->name = "operator*(f32x4x2)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x2)->nameWithVarNames = "operator*(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x2)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float32x4x3
    Float16x4_operator_transform_Float32x4x3_arg.name = "arg"_c;
    Float16x4_operator_transform_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float16x4_operator_transform_Float32x4x3.name = "operator*"_c;
    Float16x4_operator_transform_Float32x4x3.backendIndex = 1018;
    Float16x4_operator_transform_Float32x4x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x4_operator_transform_Float32x4x3.parameters = Float16x4_operator_transform_Float32x4x3_args;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x3)->signature = "f16x3 operator*(f32x4x3)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x3)->name = "operator*(f32x4x3)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x3)->nameWithVarNames = "operator*(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x3)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float32x4x4
    Float16x4_operator_transform_Float32x4x4_arg.name = "arg"_c;
    Float16x4_operator_transform_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float16x4_operator_transform_Float32x4x4.name = "operator*"_c;
    Float16x4_operator_transform_Float32x4x4.backendIndex = 1019;
    Float16x4_operator_transform_Float32x4x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_operator_transform_Float32x4x4.parameters = Float16x4_operator_transform_Float32x4x4_args;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x4)->signature = "f16x4 operator*(f32x4x4)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x4)->name = "operator*(f32x4x4)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x4)->nameWithVarNames = "operator*(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float16x4_operator_transform_Float32x4x4)->returnTypeSymbol = &Float16x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 730> { 
        std::pair{ "a"_c, &Float16Type },
        std::pair{ "aa"_c, &Float16x2Type },
        std::pair{ "aaa"_c, &Float16x3Type },
        std::pair{ "aaaa"_c, &Float16x4Type },
        std::pair{ "aaab"_c, &Float16x4Type },
        std::pair{ "aaag"_c, &Float16x4Type },
        std::pair{ "aaar"_c, &Float16x4Type },
        std::pair{ "aab"_c, &Float16x3Type },
        std::pair{ "aaba"_c, &Float16x4Type },
        std::pair{ "aabb"_c, &Float16x4Type },
        std::pair{ "aabg"_c, &Float16x4Type },
        std::pair{ "aabr"_c, &Float16x4Type },
        std::pair{ "aag"_c, &Float16x3Type },
        std::pair{ "aaga"_c, &Float16x4Type },
        std::pair{ "aagb"_c, &Float16x4Type },
        std::pair{ "aagg"_c, &Float16x4Type },
        std::pair{ "aagr"_c, &Float16x4Type },
        std::pair{ "aar"_c, &Float16x3Type },
        std::pair{ "aara"_c, &Float16x4Type },
        std::pair{ "aarb"_c, &Float16x4Type },
        std::pair{ "aarg"_c, &Float16x4Type },
        std::pair{ "aarr"_c, &Float16x4Type },
        std::pair{ "ab"_c, &Float16x2Type },
        std::pair{ "aba"_c, &Float16x3Type },
        std::pair{ "abaa"_c, &Float16x4Type },
        std::pair{ "abab"_c, &Float16x4Type },
        std::pair{ "abag"_c, &Float16x4Type },
        std::pair{ "abar"_c, &Float16x4Type },
        std::pair{ "abb"_c, &Float16x3Type },
        std::pair{ "abba"_c, &Float16x4Type },
        std::pair{ "abbb"_c, &Float16x4Type },
        std::pair{ "abbg"_c, &Float16x4Type },
        std::pair{ "abbr"_c, &Float16x4Type },
        std::pair{ "abg"_c, &Float16x3Type },
        std::pair{ "abga"_c, &Float16x4Type },
        std::pair{ "abgb"_c, &Float16x4Type },
        std::pair{ "abgg"_c, &Float16x4Type },
        std::pair{ "abgr"_c, &Float16x4Type },
        std::pair{ "abr"_c, &Float16x3Type },
        std::pair{ "abra"_c, &Float16x4Type },
        std::pair{ "abrb"_c, &Float16x4Type },
        std::pair{ "abrg"_c, &Float16x4Type },
        std::pair{ "abrr"_c, &Float16x4Type },
        std::pair{ "ag"_c, &Float16x2Type },
        std::pair{ "aga"_c, &Float16x3Type },
        std::pair{ "agaa"_c, &Float16x4Type },
        std::pair{ "agab"_c, &Float16x4Type },
        std::pair{ "agag"_c, &Float16x4Type },
        std::pair{ "agar"_c, &Float16x4Type },
        std::pair{ "agb"_c, &Float16x3Type },
        std::pair{ "agba"_c, &Float16x4Type },
        std::pair{ "agbb"_c, &Float16x4Type },
        std::pair{ "agbg"_c, &Float16x4Type },
        std::pair{ "agbr"_c, &Float16x4Type },
        std::pair{ "agg"_c, &Float16x3Type },
        std::pair{ "agga"_c, &Float16x4Type },
        std::pair{ "aggb"_c, &Float16x4Type },
        std::pair{ "aggg"_c, &Float16x4Type },
        std::pair{ "aggr"_c, &Float16x4Type },
        std::pair{ "agr"_c, &Float16x3Type },
        std::pair{ "agra"_c, &Float16x4Type },
        std::pair{ "agrb"_c, &Float16x4Type },
        std::pair{ "agrg"_c, &Float16x4Type },
        std::pair{ "agrr"_c, &Float16x4Type },
        std::pair{ "ar"_c, &Float16x2Type },
        std::pair{ "ara"_c, &Float16x3Type },
        std::pair{ "araa"_c, &Float16x4Type },
        std::pair{ "arab"_c, &Float16x4Type },
        std::pair{ "arag"_c, &Float16x4Type },
        std::pair{ "arar"_c, &Float16x4Type },
        std::pair{ "arb"_c, &Float16x3Type },
        std::pair{ "arba"_c, &Float16x4Type },
        std::pair{ "arbb"_c, &Float16x4Type },
        std::pair{ "arbg"_c, &Float16x4Type },
        std::pair{ "arbr"_c, &Float16x4Type },
        std::pair{ "arg"_c, &Float16x3Type },
        std::pair{ "arga"_c, &Float16x4Type },
        std::pair{ "argb"_c, &Float16x4Type },
        std::pair{ "argg"_c, &Float16x4Type },
        std::pair{ "argr"_c, &Float16x4Type },
        std::pair{ "arr"_c, &Float16x3Type },
        std::pair{ "arra"_c, &Float16x4Type },
        std::pair{ "arrb"_c, &Float16x4Type },
        std::pair{ "arrg"_c, &Float16x4Type },
        std::pair{ "arrr"_c, &Float16x4Type },
        std::pair{ "b"_c, &Float16Type },
        std::pair{ "ba"_c, &Float16x2Type },
        std::pair{ "baa"_c, &Float16x3Type },
        std::pair{ "baaa"_c, &Float16x4Type },
        std::pair{ "baab"_c, &Float16x4Type },
        std::pair{ "baag"_c, &Float16x4Type },
        std::pair{ "baar"_c, &Float16x4Type },
        std::pair{ "bab"_c, &Float16x3Type },
        std::pair{ "baba"_c, &Float16x4Type },
        std::pair{ "babb"_c, &Float16x4Type },
        std::pair{ "babg"_c, &Float16x4Type },
        std::pair{ "babr"_c, &Float16x4Type },
        std::pair{ "bag"_c, &Float16x3Type },
        std::pair{ "baga"_c, &Float16x4Type },
        std::pair{ "bagb"_c, &Float16x4Type },
        std::pair{ "bagg"_c, &Float16x4Type },
        std::pair{ "bagr"_c, &Float16x4Type },
        std::pair{ "bar"_c, &Float16x3Type },
        std::pair{ "bara"_c, &Float16x4Type },
        std::pair{ "barb"_c, &Float16x4Type },
        std::pair{ "barg"_c, &Float16x4Type },
        std::pair{ "barr"_c, &Float16x4Type },
        std::pair{ "bb"_c, &Float16x2Type },
        std::pair{ "bba"_c, &Float16x3Type },
        std::pair{ "bbaa"_c, &Float16x4Type },
        std::pair{ "bbab"_c, &Float16x4Type },
        std::pair{ "bbag"_c, &Float16x4Type },
        std::pair{ "bbar"_c, &Float16x4Type },
        std::pair{ "bbb"_c, &Float16x3Type },
        std::pair{ "bbba"_c, &Float16x4Type },
        std::pair{ "bbbb"_c, &Float16x4Type },
        std::pair{ "bbbg"_c, &Float16x4Type },
        std::pair{ "bbbr"_c, &Float16x4Type },
        std::pair{ "bbg"_c, &Float16x3Type },
        std::pair{ "bbga"_c, &Float16x4Type },
        std::pair{ "bbgb"_c, &Float16x4Type },
        std::pair{ "bbgg"_c, &Float16x4Type },
        std::pair{ "bbgr"_c, &Float16x4Type },
        std::pair{ "bbr"_c, &Float16x3Type },
        std::pair{ "bbra"_c, &Float16x4Type },
        std::pair{ "bbrb"_c, &Float16x4Type },
        std::pair{ "bbrg"_c, &Float16x4Type },
        std::pair{ "bbrr"_c, &Float16x4Type },
        std::pair{ "bg"_c, &Float16x2Type },
        std::pair{ "bga"_c, &Float16x3Type },
        std::pair{ "bgaa"_c, &Float16x4Type },
        std::pair{ "bgab"_c, &Float16x4Type },
        std::pair{ "bgag"_c, &Float16x4Type },
        std::pair{ "bgar"_c, &Float16x4Type },
        std::pair{ "bgb"_c, &Float16x3Type },
        std::pair{ "bgba"_c, &Float16x4Type },
        std::pair{ "bgbb"_c, &Float16x4Type },
        std::pair{ "bgbg"_c, &Float16x4Type },
        std::pair{ "bgbr"_c, &Float16x4Type },
        std::pair{ "bgg"_c, &Float16x3Type },
        std::pair{ "bgga"_c, &Float16x4Type },
        std::pair{ "bggb"_c, &Float16x4Type },
        std::pair{ "bggg"_c, &Float16x4Type },
        std::pair{ "bggr"_c, &Float16x4Type },
        std::pair{ "bgr"_c, &Float16x3Type },
        std::pair{ "bgra"_c, &Float16x4Type },
        std::pair{ "bgrb"_c, &Float16x4Type },
        std::pair{ "bgrg"_c, &Float16x4Type },
        std::pair{ "bgrr"_c, &Float16x4Type },
        std::pair{ "br"_c, &Float16x2Type },
        std::pair{ "bra"_c, &Float16x3Type },
        std::pair{ "braa"_c, &Float16x4Type },
        std::pair{ "brab"_c, &Float16x4Type },
        std::pair{ "brag"_c, &Float16x4Type },
        std::pair{ "brar"_c, &Float16x4Type },
        std::pair{ "brb"_c, &Float16x3Type },
        std::pair{ "brba"_c, &Float16x4Type },
        std::pair{ "brbb"_c, &Float16x4Type },
        std::pair{ "brbg"_c, &Float16x4Type },
        std::pair{ "brbr"_c, &Float16x4Type },
        std::pair{ "brg"_c, &Float16x3Type },
        std::pair{ "brga"_c, &Float16x4Type },
        std::pair{ "brgb"_c, &Float16x4Type },
        std::pair{ "brgg"_c, &Float16x4Type },
        std::pair{ "brgr"_c, &Float16x4Type },
        std::pair{ "brr"_c, &Float16x3Type },
        std::pair{ "brra"_c, &Float16x4Type },
        std::pair{ "brrb"_c, &Float16x4Type },
        std::pair{ "brrg"_c, &Float16x4Type },
        std::pair{ "brrr"_c, &Float16x4Type },
        std::pair{ "g"_c, &Float16Type },
        std::pair{ "ga"_c, &Float16x2Type },
        std::pair{ "gaa"_c, &Float16x3Type },
        std::pair{ "gaaa"_c, &Float16x4Type },
        std::pair{ "gaab"_c, &Float16x4Type },
        std::pair{ "gaag"_c, &Float16x4Type },
        std::pair{ "gaar"_c, &Float16x4Type },
        std::pair{ "gab"_c, &Float16x3Type },
        std::pair{ "gaba"_c, &Float16x4Type },
        std::pair{ "gabb"_c, &Float16x4Type },
        std::pair{ "gabg"_c, &Float16x4Type },
        std::pair{ "gabr"_c, &Float16x4Type },
        std::pair{ "gag"_c, &Float16x3Type },
        std::pair{ "gaga"_c, &Float16x4Type },
        std::pair{ "gagb"_c, &Float16x4Type },
        std::pair{ "gagg"_c, &Float16x4Type },
        std::pair{ "gagr"_c, &Float16x4Type },
        std::pair{ "gar"_c, &Float16x3Type },
        std::pair{ "gara"_c, &Float16x4Type },
        std::pair{ "garb"_c, &Float16x4Type },
        std::pair{ "garg"_c, &Float16x4Type },
        std::pair{ "garr"_c, &Float16x4Type },
        std::pair{ "gb"_c, &Float16x2Type },
        std::pair{ "gba"_c, &Float16x3Type },
        std::pair{ "gbaa"_c, &Float16x4Type },
        std::pair{ "gbab"_c, &Float16x4Type },
        std::pair{ "gbag"_c, &Float16x4Type },
        std::pair{ "gbar"_c, &Float16x4Type },
        std::pair{ "gbb"_c, &Float16x3Type },
        std::pair{ "gbba"_c, &Float16x4Type },
        std::pair{ "gbbb"_c, &Float16x4Type },
        std::pair{ "gbbg"_c, &Float16x4Type },
        std::pair{ "gbbr"_c, &Float16x4Type },
        std::pair{ "gbg"_c, &Float16x3Type },
        std::pair{ "gbga"_c, &Float16x4Type },
        std::pair{ "gbgb"_c, &Float16x4Type },
        std::pair{ "gbgg"_c, &Float16x4Type },
        std::pair{ "gbgr"_c, &Float16x4Type },
        std::pair{ "gbr"_c, &Float16x3Type },
        std::pair{ "gbra"_c, &Float16x4Type },
        std::pair{ "gbrb"_c, &Float16x4Type },
        std::pair{ "gbrg"_c, &Float16x4Type },
        std::pair{ "gbrr"_c, &Float16x4Type },
        std::pair{ "gg"_c, &Float16x2Type },
        std::pair{ "gga"_c, &Float16x3Type },
        std::pair{ "ggaa"_c, &Float16x4Type },
        std::pair{ "ggab"_c, &Float16x4Type },
        std::pair{ "ggag"_c, &Float16x4Type },
        std::pair{ "ggar"_c, &Float16x4Type },
        std::pair{ "ggb"_c, &Float16x3Type },
        std::pair{ "ggba"_c, &Float16x4Type },
        std::pair{ "ggbb"_c, &Float16x4Type },
        std::pair{ "ggbg"_c, &Float16x4Type },
        std::pair{ "ggbr"_c, &Float16x4Type },
        std::pair{ "ggg"_c, &Float16x3Type },
        std::pair{ "ggga"_c, &Float16x4Type },
        std::pair{ "gggb"_c, &Float16x4Type },
        std::pair{ "gggg"_c, &Float16x4Type },
        std::pair{ "gggr"_c, &Float16x4Type },
        std::pair{ "ggr"_c, &Float16x3Type },
        std::pair{ "ggra"_c, &Float16x4Type },
        std::pair{ "ggrb"_c, &Float16x4Type },
        std::pair{ "ggrg"_c, &Float16x4Type },
        std::pair{ "ggrr"_c, &Float16x4Type },
        std::pair{ "gr"_c, &Float16x2Type },
        std::pair{ "gra"_c, &Float16x3Type },
        std::pair{ "graa"_c, &Float16x4Type },
        std::pair{ "grab"_c, &Float16x4Type },
        std::pair{ "grag"_c, &Float16x4Type },
        std::pair{ "grar"_c, &Float16x4Type },
        std::pair{ "grb"_c, &Float16x3Type },
        std::pair{ "grba"_c, &Float16x4Type },
        std::pair{ "grbb"_c, &Float16x4Type },
        std::pair{ "grbg"_c, &Float16x4Type },
        std::pair{ "grbr"_c, &Float16x4Type },
        std::pair{ "grg"_c, &Float16x3Type },
        std::pair{ "grga"_c, &Float16x4Type },
        std::pair{ "grgb"_c, &Float16x4Type },
        std::pair{ "grgg"_c, &Float16x4Type },
        std::pair{ "grgr"_c, &Float16x4Type },
        std::pair{ "grr"_c, &Float16x3Type },
        std::pair{ "grra"_c, &Float16x4Type },
        std::pair{ "grrb"_c, &Float16x4Type },
        std::pair{ "grrg"_c, &Float16x4Type },
        std::pair{ "grrr"_c, &Float16x4Type },
        std::pair{ "operator!="_c, &Float16x4_operator_neq_Float16x4 },
        std::pair{ "operator!=(f16x4)"_c, &Float16x4_operator_neq_Float16x4 },
        std::pair{ "operator%"_c, &Float16x4_operator_mod_Float16x4 },
        std::pair{ "operator%(f16x4)"_c, &Float16x4_operator_mod_Float16x4 },
        std::pair{ "operator*"_c, &Float16x4_operator_mul_Float16x4 },
        std::pair{ "operator*"_c, &Float16x4_operator_scale_Float16 },
        std::pair{ "operator*"_c, &Float16x4_operator_scale_UInt16 },
        std::pair{ "operator*"_c, &Float16x4_operator_scale_Int16 },
        std::pair{ "operator*"_c, &Float16x4_operator_transform_Float32x4x2 },
        std::pair{ "operator*"_c, &Float16x4_operator_transform_Float32x4x3 },
        std::pair{ "operator*"_c, &Float16x4_operator_transform_Float32x4x4 },
        std::pair{ "operator*(f16)"_c, &Float16x4_operator_scale_Float16 },
        std::pair{ "operator*(f16x4)"_c, &Float16x4_operator_mul_Float16x4 },
        std::pair{ "operator*(f32x4x2)"_c, &Float16x4_operator_transform_Float32x4x2 },
        std::pair{ "operator*(f32x4x3)"_c, &Float16x4_operator_transform_Float32x4x3 },
        std::pair{ "operator*(f32x4x4)"_c, &Float16x4_operator_transform_Float32x4x4 },
        std::pair{ "operator*(i16)"_c, &Float16x4_operator_scale_Int16 },
        std::pair{ "operator*(u16)"_c, &Float16x4_operator_scale_UInt16 },
        std::pair{ "operator*="_c, &Float16x4_operator_mulasg_Float16x4 },
        std::pair{ "operator*=(f16x4)"_c, &Float16x4_operator_mulasg_Float16x4 },
        std::pair{ "operator+"_c, &Float16x4_operator_add_Float16x4 },
        std::pair{ "operator+(f16x4)"_c, &Float16x4_operator_add_Float16x4 },
        std::pair{ "operator+="_c, &Float16x4_operator_addasg_Float16x4 },
        std::pair{ "operator+=(f16x4)"_c, &Float16x4_operator_addasg_Float16x4 },
        std::pair{ "operator-"_c, &Float16x4_operator_sub_Float16x4 },
        std::pair{ "operator-(f16x4)"_c, &Float16x4_operator_sub_Float16x4 },
        std::pair{ "operator-="_c, &Float16x4_operator_subasg_Float16x4 },
        std::pair{ "operator-=(f16x4)"_c, &Float16x4_operator_subasg_Float16x4 },
        std::pair{ "operator/"_c, &Float16x4_operator_div_Float16x4 },
        std::pair{ "operator/(f16x4)"_c, &Float16x4_operator_div_Float16x4 },
        std::pair{ "operator/="_c, &Float16x4_operator_divasg_Float16x4 },
        std::pair{ "operator/=(f16x4)"_c, &Float16x4_operator_divasg_Float16x4 },
        std::pair{ "operator<"_c, &Float16x4_operator_lt_Float16x4 },
        std::pair{ "operator<(f16x4)"_c, &Float16x4_operator_lt_Float16x4 },
        std::pair{ "operator<="_c, &Float16x4_operator_lte_Float16x4 },
        std::pair{ "operator<=(f16x4)"_c, &Float16x4_operator_lte_Float16x4 },
        std::pair{ "operator=="_c, &Float16x4_operator_eq_Float16x4 },
        std::pair{ "operator==(f16x4)"_c, &Float16x4_operator_eq_Float16x4 },
        std::pair{ "operator>"_c, &Float16x4_operator_gt_Float16x4 },
        std::pair{ "operator>(f16x4)"_c, &Float16x4_operator_gt_Float16x4 },
        std::pair{ "operator>="_c, &Float16x4_operator_gte_Float16x4 },
        std::pair{ "operator>=(f16x4)"_c, &Float16x4_operator_gte_Float16x4 },
        std::pair{ "operator[]"_c, &Float16x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16x4_operator_index_UInt32 },
        std::pair{ "r"_c, &Float16Type },
        std::pair{ "ra"_c, &Float16x2Type },
        std::pair{ "raa"_c, &Float16x3Type },
        std::pair{ "raaa"_c, &Float16x4Type },
        std::pair{ "raab"_c, &Float16x4Type },
        std::pair{ "raag"_c, &Float16x4Type },
        std::pair{ "raar"_c, &Float16x4Type },
        std::pair{ "rab"_c, &Float16x3Type },
        std::pair{ "raba"_c, &Float16x4Type },
        std::pair{ "rabb"_c, &Float16x4Type },
        std::pair{ "rabg"_c, &Float16x4Type },
        std::pair{ "rabr"_c, &Float16x4Type },
        std::pair{ "rag"_c, &Float16x3Type },
        std::pair{ "raga"_c, &Float16x4Type },
        std::pair{ "ragb"_c, &Float16x4Type },
        std::pair{ "ragg"_c, &Float16x4Type },
        std::pair{ "ragr"_c, &Float16x4Type },
        std::pair{ "rar"_c, &Float16x3Type },
        std::pair{ "rara"_c, &Float16x4Type },
        std::pair{ "rarb"_c, &Float16x4Type },
        std::pair{ "rarg"_c, &Float16x4Type },
        std::pair{ "rarr"_c, &Float16x4Type },
        std::pair{ "rb"_c, &Float16x2Type },
        std::pair{ "rba"_c, &Float16x3Type },
        std::pair{ "rbaa"_c, &Float16x4Type },
        std::pair{ "rbab"_c, &Float16x4Type },
        std::pair{ "rbag"_c, &Float16x4Type },
        std::pair{ "rbar"_c, &Float16x4Type },
        std::pair{ "rbb"_c, &Float16x3Type },
        std::pair{ "rbba"_c, &Float16x4Type },
        std::pair{ "rbbb"_c, &Float16x4Type },
        std::pair{ "rbbg"_c, &Float16x4Type },
        std::pair{ "rbbr"_c, &Float16x4Type },
        std::pair{ "rbg"_c, &Float16x3Type },
        std::pair{ "rbga"_c, &Float16x4Type },
        std::pair{ "rbgb"_c, &Float16x4Type },
        std::pair{ "rbgg"_c, &Float16x4Type },
        std::pair{ "rbgr"_c, &Float16x4Type },
        std::pair{ "rbr"_c, &Float16x3Type },
        std::pair{ "rbra"_c, &Float16x4Type },
        std::pair{ "rbrb"_c, &Float16x4Type },
        std::pair{ "rbrg"_c, &Float16x4Type },
        std::pair{ "rbrr"_c, &Float16x4Type },
        std::pair{ "rg"_c, &Float16x2Type },
        std::pair{ "rga"_c, &Float16x3Type },
        std::pair{ "rgaa"_c, &Float16x4Type },
        std::pair{ "rgab"_c, &Float16x4Type },
        std::pair{ "rgag"_c, &Float16x4Type },
        std::pair{ "rgar"_c, &Float16x4Type },
        std::pair{ "rgb"_c, &Float16x3Type },
        std::pair{ "rgba"_c, &Float16x4Type },
        std::pair{ "rgbb"_c, &Float16x4Type },
        std::pair{ "rgbg"_c, &Float16x4Type },
        std::pair{ "rgbr"_c, &Float16x4Type },
        std::pair{ "rgg"_c, &Float16x3Type },
        std::pair{ "rgga"_c, &Float16x4Type },
        std::pair{ "rggb"_c, &Float16x4Type },
        std::pair{ "rggg"_c, &Float16x4Type },
        std::pair{ "rggr"_c, &Float16x4Type },
        std::pair{ "rgr"_c, &Float16x3Type },
        std::pair{ "rgra"_c, &Float16x4Type },
        std::pair{ "rgrb"_c, &Float16x4Type },
        std::pair{ "rgrg"_c, &Float16x4Type },
        std::pair{ "rgrr"_c, &Float16x4Type },
        std::pair{ "rr"_c, &Float16x2Type },
        std::pair{ "rra"_c, &Float16x3Type },
        std::pair{ "rraa"_c, &Float16x4Type },
        std::pair{ "rrab"_c, &Float16x4Type },
        std::pair{ "rrag"_c, &Float16x4Type },
        std::pair{ "rrar"_c, &Float16x4Type },
        std::pair{ "rrb"_c, &Float16x3Type },
        std::pair{ "rrba"_c, &Float16x4Type },
        std::pair{ "rrbb"_c, &Float16x4Type },
        std::pair{ "rrbg"_c, &Float16x4Type },
        std::pair{ "rrbr"_c, &Float16x4Type },
        std::pair{ "rrg"_c, &Float16x3Type },
        std::pair{ "rrga"_c, &Float16x4Type },
        std::pair{ "rrgb"_c, &Float16x4Type },
        std::pair{ "rrgg"_c, &Float16x4Type },
        std::pair{ "rrgr"_c, &Float16x4Type },
        std::pair{ "rrr"_c, &Float16x3Type },
        std::pair{ "rrra"_c, &Float16x4Type },
        std::pair{ "rrrb"_c, &Float16x4Type },
        std::pair{ "rrrg"_c, &Float16x4Type },
        std::pair{ "rrrr"_c, &Float16x4Type },
        std::pair{ "w"_c, &Float16Type },
        std::pair{ "ww"_c, &Float16x2Type },
        std::pair{ "www"_c, &Float16x3Type },
        std::pair{ "wwww"_c, &Float16x4Type },
        std::pair{ "wwwx"_c, &Float16x4Type },
        std::pair{ "wwwy"_c, &Float16x4Type },
        std::pair{ "wwwz"_c, &Float16x4Type },
        std::pair{ "wwx"_c, &Float16x3Type },
        std::pair{ "wwxw"_c, &Float16x4Type },
        std::pair{ "wwxx"_c, &Float16x4Type },
        std::pair{ "wwxy"_c, &Float16x4Type },
        std::pair{ "wwxz"_c, &Float16x4Type },
        std::pair{ "wwy"_c, &Float16x3Type },
        std::pair{ "wwyw"_c, &Float16x4Type },
        std::pair{ "wwyx"_c, &Float16x4Type },
        std::pair{ "wwyy"_c, &Float16x4Type },
        std::pair{ "wwyz"_c, &Float16x4Type },
        std::pair{ "wwz"_c, &Float16x3Type },
        std::pair{ "wwzw"_c, &Float16x4Type },
        std::pair{ "wwzx"_c, &Float16x4Type },
        std::pair{ "wwzy"_c, &Float16x4Type },
        std::pair{ "wwzz"_c, &Float16x4Type },
        std::pair{ "wx"_c, &Float16x2Type },
        std::pair{ "wxw"_c, &Float16x3Type },
        std::pair{ "wxww"_c, &Float16x4Type },
        std::pair{ "wxwx"_c, &Float16x4Type },
        std::pair{ "wxwy"_c, &Float16x4Type },
        std::pair{ "wxwz"_c, &Float16x4Type },
        std::pair{ "wxx"_c, &Float16x3Type },
        std::pair{ "wxxw"_c, &Float16x4Type },
        std::pair{ "wxxx"_c, &Float16x4Type },
        std::pair{ "wxxy"_c, &Float16x4Type },
        std::pair{ "wxxz"_c, &Float16x4Type },
        std::pair{ "wxy"_c, &Float16x3Type },
        std::pair{ "wxyw"_c, &Float16x4Type },
        std::pair{ "wxyx"_c, &Float16x4Type },
        std::pair{ "wxyy"_c, &Float16x4Type },
        std::pair{ "wxyz"_c, &Float16x4Type },
        std::pair{ "wxz"_c, &Float16x3Type },
        std::pair{ "wxzw"_c, &Float16x4Type },
        std::pair{ "wxzx"_c, &Float16x4Type },
        std::pair{ "wxzy"_c, &Float16x4Type },
        std::pair{ "wxzz"_c, &Float16x4Type },
        std::pair{ "wy"_c, &Float16x2Type },
        std::pair{ "wyw"_c, &Float16x3Type },
        std::pair{ "wyww"_c, &Float16x4Type },
        std::pair{ "wywx"_c, &Float16x4Type },
        std::pair{ "wywy"_c, &Float16x4Type },
        std::pair{ "wywz"_c, &Float16x4Type },
        std::pair{ "wyx"_c, &Float16x3Type },
        std::pair{ "wyxw"_c, &Float16x4Type },
        std::pair{ "wyxx"_c, &Float16x4Type },
        std::pair{ "wyxy"_c, &Float16x4Type },
        std::pair{ "wyxz"_c, &Float16x4Type },
        std::pair{ "wyy"_c, &Float16x3Type },
        std::pair{ "wyyw"_c, &Float16x4Type },
        std::pair{ "wyyx"_c, &Float16x4Type },
        std::pair{ "wyyy"_c, &Float16x4Type },
        std::pair{ "wyyz"_c, &Float16x4Type },
        std::pair{ "wyz"_c, &Float16x3Type },
        std::pair{ "wyzw"_c, &Float16x4Type },
        std::pair{ "wyzx"_c, &Float16x4Type },
        std::pair{ "wyzy"_c, &Float16x4Type },
        std::pair{ "wyzz"_c, &Float16x4Type },
        std::pair{ "wz"_c, &Float16x2Type },
        std::pair{ "wzw"_c, &Float16x3Type },
        std::pair{ "wzww"_c, &Float16x4Type },
        std::pair{ "wzwx"_c, &Float16x4Type },
        std::pair{ "wzwy"_c, &Float16x4Type },
        std::pair{ "wzwz"_c, &Float16x4Type },
        std::pair{ "wzx"_c, &Float16x3Type },
        std::pair{ "wzxw"_c, &Float16x4Type },
        std::pair{ "wzxx"_c, &Float16x4Type },
        std::pair{ "wzxy"_c, &Float16x4Type },
        std::pair{ "wzxz"_c, &Float16x4Type },
        std::pair{ "wzy"_c, &Float16x3Type },
        std::pair{ "wzyw"_c, &Float16x4Type },
        std::pair{ "wzyx"_c, &Float16x4Type },
        std::pair{ "wzyy"_c, &Float16x4Type },
        std::pair{ "wzyz"_c, &Float16x4Type },
        std::pair{ "wzz"_c, &Float16x3Type },
        std::pair{ "wzzw"_c, &Float16x4Type },
        std::pair{ "wzzx"_c, &Float16x4Type },
        std::pair{ "wzzy"_c, &Float16x4Type },
        std::pair{ "wzzz"_c, &Float16x4Type },
        std::pair{ "x"_c, &Float16Type },
        std::pair{ "xw"_c, &Float16x2Type },
        std::pair{ "xww"_c, &Float16x3Type },
        std::pair{ "xwww"_c, &Float16x4Type },
        std::pair{ "xwwx"_c, &Float16x4Type },
        std::pair{ "xwwy"_c, &Float16x4Type },
        std::pair{ "xwwz"_c, &Float16x4Type },
        std::pair{ "xwx"_c, &Float16x3Type },
        std::pair{ "xwxw"_c, &Float16x4Type },
        std::pair{ "xwxx"_c, &Float16x4Type },
        std::pair{ "xwxy"_c, &Float16x4Type },
        std::pair{ "xwxz"_c, &Float16x4Type },
        std::pair{ "xwy"_c, &Float16x3Type },
        std::pair{ "xwyw"_c, &Float16x4Type },
        std::pair{ "xwyx"_c, &Float16x4Type },
        std::pair{ "xwyy"_c, &Float16x4Type },
        std::pair{ "xwyz"_c, &Float16x4Type },
        std::pair{ "xwz"_c, &Float16x3Type },
        std::pair{ "xwzw"_c, &Float16x4Type },
        std::pair{ "xwzx"_c, &Float16x4Type },
        std::pair{ "xwzy"_c, &Float16x4Type },
        std::pair{ "xwzz"_c, &Float16x4Type },
        std::pair{ "xx"_c, &Float16x2Type },
        std::pair{ "xxw"_c, &Float16x3Type },
        std::pair{ "xxww"_c, &Float16x4Type },
        std::pair{ "xxwx"_c, &Float16x4Type },
        std::pair{ "xxwy"_c, &Float16x4Type },
        std::pair{ "xxwz"_c, &Float16x4Type },
        std::pair{ "xxx"_c, &Float16x3Type },
        std::pair{ "xxxw"_c, &Float16x4Type },
        std::pair{ "xxxx"_c, &Float16x4Type },
        std::pair{ "xxxy"_c, &Float16x4Type },
        std::pair{ "xxxz"_c, &Float16x4Type },
        std::pair{ "xxy"_c, &Float16x3Type },
        std::pair{ "xxyw"_c, &Float16x4Type },
        std::pair{ "xxyx"_c, &Float16x4Type },
        std::pair{ "xxyy"_c, &Float16x4Type },
        std::pair{ "xxyz"_c, &Float16x4Type },
        std::pair{ "xxz"_c, &Float16x3Type },
        std::pair{ "xxzw"_c, &Float16x4Type },
        std::pair{ "xxzx"_c, &Float16x4Type },
        std::pair{ "xxzy"_c, &Float16x4Type },
        std::pair{ "xxzz"_c, &Float16x4Type },
        std::pair{ "xy"_c, &Float16x2Type },
        std::pair{ "xyw"_c, &Float16x3Type },
        std::pair{ "xyww"_c, &Float16x4Type },
        std::pair{ "xywx"_c, &Float16x4Type },
        std::pair{ "xywy"_c, &Float16x4Type },
        std::pair{ "xywz"_c, &Float16x4Type },
        std::pair{ "xyx"_c, &Float16x3Type },
        std::pair{ "xyxw"_c, &Float16x4Type },
        std::pair{ "xyxx"_c, &Float16x4Type },
        std::pair{ "xyxy"_c, &Float16x4Type },
        std::pair{ "xyxz"_c, &Float16x4Type },
        std::pair{ "xyy"_c, &Float16x3Type },
        std::pair{ "xyyw"_c, &Float16x4Type },
        std::pair{ "xyyx"_c, &Float16x4Type },
        std::pair{ "xyyy"_c, &Float16x4Type },
        std::pair{ "xyyz"_c, &Float16x4Type },
        std::pair{ "xyz"_c, &Float16x3Type },
        std::pair{ "xyzw"_c, &Float16x4Type },
        std::pair{ "xyzx"_c, &Float16x4Type },
        std::pair{ "xyzy"_c, &Float16x4Type },
        std::pair{ "xyzz"_c, &Float16x4Type },
        std::pair{ "xz"_c, &Float16x2Type },
        std::pair{ "xzw"_c, &Float16x3Type },
        std::pair{ "xzww"_c, &Float16x4Type },
        std::pair{ "xzwx"_c, &Float16x4Type },
        std::pair{ "xzwy"_c, &Float16x4Type },
        std::pair{ "xzwz"_c, &Float16x4Type },
        std::pair{ "xzx"_c, &Float16x3Type },
        std::pair{ "xzxw"_c, &Float16x4Type },
        std::pair{ "xzxx"_c, &Float16x4Type },
        std::pair{ "xzxy"_c, &Float16x4Type },
        std::pair{ "xzxz"_c, &Float16x4Type },
        std::pair{ "xzy"_c, &Float16x3Type },
        std::pair{ "xzyw"_c, &Float16x4Type },
        std::pair{ "xzyx"_c, &Float16x4Type },
        std::pair{ "xzyy"_c, &Float16x4Type },
        std::pair{ "xzyz"_c, &Float16x4Type },
        std::pair{ "xzz"_c, &Float16x3Type },
        std::pair{ "xzzw"_c, &Float16x4Type },
        std::pair{ "xzzx"_c, &Float16x4Type },
        std::pair{ "xzzy"_c, &Float16x4Type },
        std::pair{ "xzzz"_c, &Float16x4Type },
        std::pair{ "y"_c, &Float16Type },
        std::pair{ "yw"_c, &Float16x2Type },
        std::pair{ "yww"_c, &Float16x3Type },
        std::pair{ "ywww"_c, &Float16x4Type },
        std::pair{ "ywwx"_c, &Float16x4Type },
        std::pair{ "ywwy"_c, &Float16x4Type },
        std::pair{ "ywwz"_c, &Float16x4Type },
        std::pair{ "ywx"_c, &Float16x3Type },
        std::pair{ "ywxw"_c, &Float16x4Type },
        std::pair{ "ywxx"_c, &Float16x4Type },
        std::pair{ "ywxy"_c, &Float16x4Type },
        std::pair{ "ywxz"_c, &Float16x4Type },
        std::pair{ "ywy"_c, &Float16x3Type },
        std::pair{ "ywyw"_c, &Float16x4Type },
        std::pair{ "ywyx"_c, &Float16x4Type },
        std::pair{ "ywyy"_c, &Float16x4Type },
        std::pair{ "ywyz"_c, &Float16x4Type },
        std::pair{ "ywz"_c, &Float16x3Type },
        std::pair{ "ywzw"_c, &Float16x4Type },
        std::pair{ "ywzx"_c, &Float16x4Type },
        std::pair{ "ywzy"_c, &Float16x4Type },
        std::pair{ "ywzz"_c, &Float16x4Type },
        std::pair{ "yx"_c, &Float16x2Type },
        std::pair{ "yxw"_c, &Float16x3Type },
        std::pair{ "yxww"_c, &Float16x4Type },
        std::pair{ "yxwx"_c, &Float16x4Type },
        std::pair{ "yxwy"_c, &Float16x4Type },
        std::pair{ "yxwz"_c, &Float16x4Type },
        std::pair{ "yxx"_c, &Float16x3Type },
        std::pair{ "yxxw"_c, &Float16x4Type },
        std::pair{ "yxxx"_c, &Float16x4Type },
        std::pair{ "yxxy"_c, &Float16x4Type },
        std::pair{ "yxxz"_c, &Float16x4Type },
        std::pair{ "yxy"_c, &Float16x3Type },
        std::pair{ "yxyw"_c, &Float16x4Type },
        std::pair{ "yxyx"_c, &Float16x4Type },
        std::pair{ "yxyy"_c, &Float16x4Type },
        std::pair{ "yxyz"_c, &Float16x4Type },
        std::pair{ "yxz"_c, &Float16x3Type },
        std::pair{ "yxzw"_c, &Float16x4Type },
        std::pair{ "yxzx"_c, &Float16x4Type },
        std::pair{ "yxzy"_c, &Float16x4Type },
        std::pair{ "yxzz"_c, &Float16x4Type },
        std::pair{ "yy"_c, &Float16x2Type },
        std::pair{ "yyw"_c, &Float16x3Type },
        std::pair{ "yyww"_c, &Float16x4Type },
        std::pair{ "yywx"_c, &Float16x4Type },
        std::pair{ "yywy"_c, &Float16x4Type },
        std::pair{ "yywz"_c, &Float16x4Type },
        std::pair{ "yyx"_c, &Float16x3Type },
        std::pair{ "yyxw"_c, &Float16x4Type },
        std::pair{ "yyxx"_c, &Float16x4Type },
        std::pair{ "yyxy"_c, &Float16x4Type },
        std::pair{ "yyxz"_c, &Float16x4Type },
        std::pair{ "yyy"_c, &Float16x3Type },
        std::pair{ "yyyw"_c, &Float16x4Type },
        std::pair{ "yyyx"_c, &Float16x4Type },
        std::pair{ "yyyy"_c, &Float16x4Type },
        std::pair{ "yyyz"_c, &Float16x4Type },
        std::pair{ "yyz"_c, &Float16x3Type },
        std::pair{ "yyzw"_c, &Float16x4Type },
        std::pair{ "yyzx"_c, &Float16x4Type },
        std::pair{ "yyzy"_c, &Float16x4Type },
        std::pair{ "yyzz"_c, &Float16x4Type },
        std::pair{ "yz"_c, &Float16x2Type },
        std::pair{ "yzw"_c, &Float16x3Type },
        std::pair{ "yzww"_c, &Float16x4Type },
        std::pair{ "yzwx"_c, &Float16x4Type },
        std::pair{ "yzwy"_c, &Float16x4Type },
        std::pair{ "yzwz"_c, &Float16x4Type },
        std::pair{ "yzx"_c, &Float16x3Type },
        std::pair{ "yzxw"_c, &Float16x4Type },
        std::pair{ "yzxx"_c, &Float16x4Type },
        std::pair{ "yzxy"_c, &Float16x4Type },
        std::pair{ "yzxz"_c, &Float16x4Type },
        std::pair{ "yzy"_c, &Float16x3Type },
        std::pair{ "yzyw"_c, &Float16x4Type },
        std::pair{ "yzyx"_c, &Float16x4Type },
        std::pair{ "yzyy"_c, &Float16x4Type },
        std::pair{ "yzyz"_c, &Float16x4Type },
        std::pair{ "yzz"_c, &Float16x3Type },
        std::pair{ "yzzw"_c, &Float16x4Type },
        std::pair{ "yzzx"_c, &Float16x4Type },
        std::pair{ "yzzy"_c, &Float16x4Type },
        std::pair{ "yzzz"_c, &Float16x4Type },
        std::pair{ "z"_c, &Float16Type },
        std::pair{ "zw"_c, &Float16x2Type },
        std::pair{ "zww"_c, &Float16x3Type },
        std::pair{ "zwww"_c, &Float16x4Type },
        std::pair{ "zwwx"_c, &Float16x4Type },
        std::pair{ "zwwy"_c, &Float16x4Type },
        std::pair{ "zwwz"_c, &Float16x4Type },
        std::pair{ "zwx"_c, &Float16x3Type },
        std::pair{ "zwxw"_c, &Float16x4Type },
        std::pair{ "zwxx"_c, &Float16x4Type },
        std::pair{ "zwxy"_c, &Float16x4Type },
        std::pair{ "zwxz"_c, &Float16x4Type },
        std::pair{ "zwy"_c, &Float16x3Type },
        std::pair{ "zwyw"_c, &Float16x4Type },
        std::pair{ "zwyx"_c, &Float16x4Type },
        std::pair{ "zwyy"_c, &Float16x4Type },
        std::pair{ "zwyz"_c, &Float16x4Type },
        std::pair{ "zwz"_c, &Float16x3Type },
        std::pair{ "zwzw"_c, &Float16x4Type },
        std::pair{ "zwzx"_c, &Float16x4Type },
        std::pair{ "zwzy"_c, &Float16x4Type },
        std::pair{ "zwzz"_c, &Float16x4Type },
        std::pair{ "zx"_c, &Float16x2Type },
        std::pair{ "zxw"_c, &Float16x3Type },
        std::pair{ "zxww"_c, &Float16x4Type },
        std::pair{ "zxwx"_c, &Float16x4Type },
        std::pair{ "zxwy"_c, &Float16x4Type },
        std::pair{ "zxwz"_c, &Float16x4Type },
        std::pair{ "zxx"_c, &Float16x3Type },
        std::pair{ "zxxw"_c, &Float16x4Type },
        std::pair{ "zxxx"_c, &Float16x4Type },
        std::pair{ "zxxy"_c, &Float16x4Type },
        std::pair{ "zxxz"_c, &Float16x4Type },
        std::pair{ "zxy"_c, &Float16x3Type },
        std::pair{ "zxyw"_c, &Float16x4Type },
        std::pair{ "zxyx"_c, &Float16x4Type },
        std::pair{ "zxyy"_c, &Float16x4Type },
        std::pair{ "zxyz"_c, &Float16x4Type },
        std::pair{ "zxz"_c, &Float16x3Type },
        std::pair{ "zxzw"_c, &Float16x4Type },
        std::pair{ "zxzx"_c, &Float16x4Type },
        std::pair{ "zxzy"_c, &Float16x4Type },
        std::pair{ "zxzz"_c, &Float16x4Type },
        std::pair{ "zy"_c, &Float16x2Type },
        std::pair{ "zyw"_c, &Float16x3Type },
        std::pair{ "zyww"_c, &Float16x4Type },
        std::pair{ "zywx"_c, &Float16x4Type },
        std::pair{ "zywy"_c, &Float16x4Type },
        std::pair{ "zywz"_c, &Float16x4Type },
        std::pair{ "zyx"_c, &Float16x3Type },
        std::pair{ "zyxw"_c, &Float16x4Type },
        std::pair{ "zyxx"_c, &Float16x4Type },
        std::pair{ "zyxy"_c, &Float16x4Type },
        std::pair{ "zyxz"_c, &Float16x4Type },
        std::pair{ "zyy"_c, &Float16x3Type },
        std::pair{ "zyyw"_c, &Float16x4Type },
        std::pair{ "zyyx"_c, &Float16x4Type },
        std::pair{ "zyyy"_c, &Float16x4Type },
        std::pair{ "zyyz"_c, &Float16x4Type },
        std::pair{ "zyz"_c, &Float16x3Type },
        std::pair{ "zyzw"_c, &Float16x4Type },
        std::pair{ "zyzx"_c, &Float16x4Type },
        std::pair{ "zyzy"_c, &Float16x4Type },
        std::pair{ "zyzz"_c, &Float16x4Type },
        std::pair{ "zz"_c, &Float16x2Type },
        std::pair{ "zzw"_c, &Float16x3Type },
        std::pair{ "zzww"_c, &Float16x4Type },
        std::pair{ "zzwx"_c, &Float16x4Type },
        std::pair{ "zzwy"_c, &Float16x4Type },
        std::pair{ "zzwz"_c, &Float16x4Type },
        std::pair{ "zzx"_c, &Float16x3Type },
        std::pair{ "zzxw"_c, &Float16x4Type },
        std::pair{ "zzxx"_c, &Float16x4Type },
        std::pair{ "zzxy"_c, &Float16x4Type },
        std::pair{ "zzxz"_c, &Float16x4Type },
        std::pair{ "zzy"_c, &Float16x3Type },
        std::pair{ "zzyw"_c, &Float16x4Type },
        std::pair{ "zzyx"_c, &Float16x4Type },
        std::pair{ "zzyy"_c, &Float16x4Type },
        std::pair{ "zzyz"_c, &Float16x4Type },
        std::pair{ "zzz"_c, &Float16x3Type },
        std::pair{ "zzzw"_c, &Float16x4Type },
        std::pair{ "zzzx"_c, &Float16x4Type },
        std::pair{ "zzzy"_c, &Float16x4Type },
        std::pair{ "zzzz"_c, &Float16x4Type }
    };
}
Float16x4 Float16x4Type;

/// operator[] with Int32
Variable UInt16x4_operator_index_Int32_arg;
Function UInt16x4_operator_index_Int32;
inline constexpr std::array UInt16x4_operator_index_Int32_args = { &UInt16x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable UInt16x4_operator_index_UInt32_arg;
Function UInt16x4_operator_index_UInt32;
inline constexpr std::array UInt16x4_operator_index_UInt32_args = { &UInt16x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable UInt16x4_operator_index_Int16_arg;
Function UInt16x4_operator_index_Int16;
inline constexpr std::array UInt16x4_operator_index_Int16_args = { &UInt16x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable UInt16x4_operator_index_UInt16_arg;
Function UInt16x4_operator_index_UInt16;
inline constexpr std::array UInt16x4_operator_index_UInt16_args = { &UInt16x4_operator_index_UInt16_arg };

/// operator+ with UInt16x4
Variable UInt16x4_operator_add_UInt16x4_arg;
Function UInt16x4_operator_add_UInt16x4;
inline constexpr std::array UInt16x4_operator_add_UInt16x4_args = { &UInt16x4_operator_add_UInt16x4_arg };

/// operator- with UInt16x4
Variable UInt16x4_operator_sub_UInt16x4_arg;
Function UInt16x4_operator_sub_UInt16x4;
inline constexpr std::array UInt16x4_operator_sub_UInt16x4_args = { &UInt16x4_operator_sub_UInt16x4_arg };

/// operator* with UInt16x4
Variable UInt16x4_operator_mul_UInt16x4_arg;
Function UInt16x4_operator_mul_UInt16x4;
inline constexpr std::array UInt16x4_operator_mul_UInt16x4_args = { &UInt16x4_operator_mul_UInt16x4_arg };

/// operator/ with UInt16x4
Variable UInt16x4_operator_div_UInt16x4_arg;
Function UInt16x4_operator_div_UInt16x4;
inline constexpr std::array UInt16x4_operator_div_UInt16x4_args = { &UInt16x4_operator_div_UInt16x4_arg };

/// operator% with UInt16x4
Variable UInt16x4_operator_mod_UInt16x4_arg;
Function UInt16x4_operator_mod_UInt16x4;
inline constexpr std::array UInt16x4_operator_mod_UInt16x4_args = { &UInt16x4_operator_mod_UInt16x4_arg };

/// operator+= with UInt16x4
Variable UInt16x4_operator_addasg_UInt16x4_arg;
Function UInt16x4_operator_addasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_addasg_UInt16x4_args = { &UInt16x4_operator_addasg_UInt16x4_arg };

/// operator-= with UInt16x4
Variable UInt16x4_operator_subasg_UInt16x4_arg;
Function UInt16x4_operator_subasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_subasg_UInt16x4_args = { &UInt16x4_operator_subasg_UInt16x4_arg };

/// operator*= with UInt16x4
Variable UInt16x4_operator_mulasg_UInt16x4_arg;
Function UInt16x4_operator_mulasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_mulasg_UInt16x4_args = { &UInt16x4_operator_mulasg_UInt16x4_arg };

/// operator/= with UInt16x4
Variable UInt16x4_operator_divasg_UInt16x4_arg;
Function UInt16x4_operator_divasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_divasg_UInt16x4_args = { &UInt16x4_operator_divasg_UInt16x4_arg };

/// operator< with UInt16x4
Variable UInt16x4_operator_lt_UInt16x4_arg;
Function UInt16x4_operator_lt_UInt16x4;
inline constexpr std::array UInt16x4_operator_lt_UInt16x4_args = { &UInt16x4_operator_lt_UInt16x4_arg };

/// operator<= with UInt16x4
Variable UInt16x4_operator_lte_UInt16x4_arg;
Function UInt16x4_operator_lte_UInt16x4;
inline constexpr std::array UInt16x4_operator_lte_UInt16x4_args = { &UInt16x4_operator_lte_UInt16x4_arg };

/// operator> with UInt16x4
Variable UInt16x4_operator_gt_UInt16x4_arg;
Function UInt16x4_operator_gt_UInt16x4;
inline constexpr std::array UInt16x4_operator_gt_UInt16x4_args = { &UInt16x4_operator_gt_UInt16x4_arg };

/// operator>= with UInt16x4
Variable UInt16x4_operator_gte_UInt16x4_arg;
Function UInt16x4_operator_gte_UInt16x4;
inline constexpr std::array UInt16x4_operator_gte_UInt16x4_args = { &UInt16x4_operator_gte_UInt16x4_arg };

/// operator== with UInt16x4
Variable UInt16x4_operator_eq_UInt16x4_arg;
Function UInt16x4_operator_eq_UInt16x4;
inline constexpr std::array UInt16x4_operator_eq_UInt16x4_args = { &UInt16x4_operator_eq_UInt16x4_arg };

/// operator!= with UInt16x4
Variable UInt16x4_operator_neq_UInt16x4_arg;
Function UInt16x4_operator_neq_UInt16x4;
inline constexpr std::array UInt16x4_operator_neq_UInt16x4_args = { &UInt16x4_operator_neq_UInt16x4_arg };

/// operator* with Float16
Variable UInt16x4_operator_scale_Float16_arg;
Function UInt16x4_operator_scale_Float16;
inline constexpr std::array UInt16x4_operator_scale_Float16_args = { &UInt16x4_operator_scale_Float16_arg };

/// operator* with UInt16
Variable UInt16x4_operator_scale_UInt16_arg;
Function UInt16x4_operator_scale_UInt16;
inline constexpr std::array UInt16x4_operator_scale_UInt16_args = { &UInt16x4_operator_scale_UInt16_arg };

/// operator* with Int16
Variable UInt16x4_operator_scale_Int16_arg;
Function UInt16x4_operator_scale_Int16;
inline constexpr std::array UInt16x4_operator_scale_Int16_args = { &UInt16x4_operator_scale_Int16_arg };

/// operator| with UInt16x4
Variable UInt16x4_operator_or_UInt16x4_arg;
Function UInt16x4_operator_or_UInt16x4;
inline constexpr std::array UInt16x4_operator_or_UInt16x4_args = { &UInt16x4_operator_or_UInt16x4_arg };

/// operator& with UInt16x4
Variable UInt16x4_operator_and_UInt16x4_arg;
Function UInt16x4_operator_and_UInt16x4;
inline constexpr std::array UInt16x4_operator_and_UInt16x4_args = { &UInt16x4_operator_and_UInt16x4_arg };

/// operator^ with UInt16x4
Variable UInt16x4_operator_xor_UInt16x4_arg;
Function UInt16x4_operator_xor_UInt16x4;
inline constexpr std::array UInt16x4_operator_xor_UInt16x4_args = { &UInt16x4_operator_xor_UInt16x4_arg };

/// operator<< with UInt16x4
Variable UInt16x4_operator_lsh_UInt16x4_arg;
Function UInt16x4_operator_lsh_UInt16x4;
inline constexpr std::array UInt16x4_operator_lsh_UInt16x4_args = { &UInt16x4_operator_lsh_UInt16x4_arg };

/// operator>> with UInt16x4
Variable UInt16x4_operator_rsh_UInt16x4_arg;
Function UInt16x4_operator_rsh_UInt16x4;
inline constexpr std::array UInt16x4_operator_rsh_UInt16x4_args = { &UInt16x4_operator_rsh_UInt16x4_arg };

/// operator|= with UInt16x4
Variable UInt16x4_operator_orasg_UInt16x4_arg;
Function UInt16x4_operator_orasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_orasg_UInt16x4_args = { &UInt16x4_operator_orasg_UInt16x4_arg };

/// operator&= with UInt16x4
Variable UInt16x4_operator_andasg_UInt16x4_arg;
Function UInt16x4_operator_andasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_andasg_UInt16x4_args = { &UInt16x4_operator_andasg_UInt16x4_arg };

/// operator^= with UInt16x4
Variable UInt16x4_operator_xorasg_UInt16x4_arg;
Function UInt16x4_operator_xorasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_xorasg_UInt16x4_args = { &UInt16x4_operator_xorasg_UInt16x4_arg };

/// operator<<= with UInt16x4
Variable UInt16x4_operator_lshasg_UInt16x4_arg;
Function UInt16x4_operator_lshasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_lshasg_UInt16x4_args = { &UInt16x4_operator_lshasg_UInt16x4_arg };

/// operator>>= with UInt16x4
Variable UInt16x4_operator_rhsasg_UInt16x4_arg;
Function UInt16x4_operator_rhsasg_UInt16x4;
inline constexpr std::array UInt16x4_operator_rhsasg_UInt16x4_args = { &UInt16x4_operator_rhsasg_UInt16x4_arg };

UInt16x4::UInt16x4()
{
    this->name = "u16x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::UInt16;
    this->builtin = true;

    /// operator[] with Int32
    UInt16x4_operator_index_Int32_arg.name = "arg"_c;
    UInt16x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16x4_operator_index_Int32.name = "operator[]"_c;
    UInt16x4_operator_index_Int32.backendIndex = 1041;
    UInt16x4_operator_index_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16x4_operator_index_Int32.parameters = UInt16x4_operator_index_Int32_args;
    Symbol::Resolved(&UInt16x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x4_operator_index_Int32)->signature = "u16 operator[](i32)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_Int32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt32
    UInt16x4_operator_index_UInt32_arg.name = "arg"_c;
    UInt16x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16x4_operator_index_UInt32.name = "operator[]"_c;
    UInt16x4_operator_index_UInt32.backendIndex = 1042;
    UInt16x4_operator_index_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16x4_operator_index_UInt32.parameters = UInt16x4_operator_index_UInt32_args;
    Symbol::Resolved(&UInt16x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x4_operator_index_UInt32)->signature = "u16 operator[](u32)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_UInt32)->returnTypeSymbol = &UInt16Type;

    /// operator[] with Int16
    UInt16x4_operator_index_Int16_arg.name = "arg"_c;
    UInt16x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x4_operator_index_Int16.name = "operator[]"_c;
    UInt16x4_operator_index_Int16.backendIndex = 1043;
    UInt16x4_operator_index_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16x4_operator_index_Int16.parameters = UInt16x4_operator_index_Int16_args;
    Symbol::Resolved(&UInt16x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x4_operator_index_Int16)->signature = "u16 operator[](i16)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_Int16)->returnTypeSymbol = &UInt16Type;

    /// operator[] with UInt16
    UInt16x4_operator_index_UInt16_arg.name = "arg"_c;
    UInt16x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x4_operator_index_UInt16.name = "operator[]"_c;
    UInt16x4_operator_index_UInt16.backendIndex = 1044;
    UInt16x4_operator_index_UInt16.returnType = Type::FullType { UInt16Type.name };
    UInt16x4_operator_index_UInt16.parameters = UInt16x4_operator_index_UInt16_args;
    Symbol::Resolved(&UInt16x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_operator_index_UInt16)->signature = "u16 operator[](u16)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&UInt16x4_operator_index_UInt16)->returnTypeSymbol = &UInt16Type;

    /// operator+ with UInt16x4
    UInt16x4_operator_add_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_add_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_add_UInt16x4.name = "operator+"_c;
    UInt16x4_operator_add_UInt16x4.backendIndex = 1045;
    UInt16x4_operator_add_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_add_UInt16x4.parameters = UInt16x4_operator_add_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4)->signature = "u16x4 operator+(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4)->name = "operator+(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4)->nameWithVarNames = "operator+(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_add_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator- with UInt16x4
    UInt16x4_operator_sub_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_sub_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_sub_UInt16x4.name = "operator-"_c;
    UInt16x4_operator_sub_UInt16x4.backendIndex = 1046;
    UInt16x4_operator_sub_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_sub_UInt16x4.parameters = UInt16x4_operator_sub_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4)->signature = "u16x4 operator-(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4)->name = "operator-(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4)->nameWithVarNames = "operator-(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_sub_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator* with UInt16x4
    UInt16x4_operator_mul_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_mul_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_mul_UInt16x4.name = "operator*"_c;
    UInt16x4_operator_mul_UInt16x4.backendIndex = 1047;
    UInt16x4_operator_mul_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_mul_UInt16x4.parameters = UInt16x4_operator_mul_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4)->signature = "u16x4 operator*(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4)->name = "operator*(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4)->nameWithVarNames = "operator*(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mul_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator/ with UInt16x4
    UInt16x4_operator_div_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_div_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_div_UInt16x4.name = "operator/"_c;
    UInt16x4_operator_div_UInt16x4.backendIndex = 1048;
    UInt16x4_operator_div_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_div_UInt16x4.parameters = UInt16x4_operator_div_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4)->signature = "u16x4 operator/(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4)->name = "operator/(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4)->nameWithVarNames = "operator/(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_div_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator% with UInt16x4
    UInt16x4_operator_mod_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_mod_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_mod_UInt16x4.name = "operator%"_c;
    UInt16x4_operator_mod_UInt16x4.backendIndex = 1049;
    UInt16x4_operator_mod_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_mod_UInt16x4.parameters = UInt16x4_operator_mod_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4)->signature = "u16x4 operator%(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4)->name = "operator%(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4)->nameWithVarNames = "operator%(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mod_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator+= with UInt16x4
    UInt16x4_operator_addasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_addasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_addasg_UInt16x4.name = "operator+="_c;
    UInt16x4_operator_addasg_UInt16x4.backendIndex = 1050;
    UInt16x4_operator_addasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_addasg_UInt16x4.parameters = UInt16x4_operator_addasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4)->signature = "u16x4 operator+=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4)->name = "operator+=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4)->nameWithVarNames = "operator+=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_addasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator-= with UInt16x4
    UInt16x4_operator_subasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_subasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_subasg_UInt16x4.name = "operator-="_c;
    UInt16x4_operator_subasg_UInt16x4.backendIndex = 1051;
    UInt16x4_operator_subasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_subasg_UInt16x4.parameters = UInt16x4_operator_subasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4)->signature = "u16x4 operator-=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4)->name = "operator-=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4)->nameWithVarNames = "operator-=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_subasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator*= with UInt16x4
    UInt16x4_operator_mulasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_mulasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_mulasg_UInt16x4.name = "operator*="_c;
    UInt16x4_operator_mulasg_UInt16x4.backendIndex = 1052;
    UInt16x4_operator_mulasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_mulasg_UInt16x4.parameters = UInt16x4_operator_mulasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4)->signature = "u16x4 operator*=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4)->name = "operator*=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4)->nameWithVarNames = "operator*=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_mulasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator/= with UInt16x4
    UInt16x4_operator_divasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_divasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_divasg_UInt16x4.name = "operator/="_c;
    UInt16x4_operator_divasg_UInt16x4.backendIndex = 1053;
    UInt16x4_operator_divasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_divasg_UInt16x4.parameters = UInt16x4_operator_divasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4)->signature = "u16x4 operator/=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4)->name = "operator/=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4)->nameWithVarNames = "operator/=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_divasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator< with UInt16x4
    UInt16x4_operator_lt_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_lt_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_lt_UInt16x4.name = "operator<"_c;
    UInt16x4_operator_lt_UInt16x4.backendIndex = 1054;
    UInt16x4_operator_lt_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt16x4_operator_lt_UInt16x4.parameters = UInt16x4_operator_lt_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4)->signature = "b8x4 operator<(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4)->name = "operator<(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4)->nameWithVarNames = "operator<(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lt_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator<= with UInt16x4
    UInt16x4_operator_lte_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_lte_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_lte_UInt16x4.name = "operator<="_c;
    UInt16x4_operator_lte_UInt16x4.backendIndex = 1055;
    UInt16x4_operator_lte_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt16x4_operator_lte_UInt16x4.parameters = UInt16x4_operator_lte_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4)->signature = "b8x4 operator<=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4)->name = "operator<=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4)->nameWithVarNames = "operator<=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lte_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator> with UInt16x4
    UInt16x4_operator_gt_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_gt_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_gt_UInt16x4.name = "operator>"_c;
    UInt16x4_operator_gt_UInt16x4.backendIndex = 1056;
    UInt16x4_operator_gt_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt16x4_operator_gt_UInt16x4.parameters = UInt16x4_operator_gt_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4)->signature = "b8x4 operator>(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4)->name = "operator>(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4)->nameWithVarNames = "operator>(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_gt_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator>= with UInt16x4
    UInt16x4_operator_gte_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_gte_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_gte_UInt16x4.name = "operator>="_c;
    UInt16x4_operator_gte_UInt16x4.backendIndex = 1057;
    UInt16x4_operator_gte_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt16x4_operator_gte_UInt16x4.parameters = UInt16x4_operator_gte_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4)->signature = "b8x4 operator>=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4)->name = "operator>=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4)->nameWithVarNames = "operator>=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_gte_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with UInt16x4
    UInt16x4_operator_eq_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_eq_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_eq_UInt16x4.name = "operator=="_c;
    UInt16x4_operator_eq_UInt16x4.backendIndex = 1058;
    UInt16x4_operator_eq_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt16x4_operator_eq_UInt16x4.parameters = UInt16x4_operator_eq_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4)->signature = "b8x4 operator==(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4)->name = "operator==(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4)->nameWithVarNames = "operator==(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_eq_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with UInt16x4
    UInt16x4_operator_neq_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_neq_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_neq_UInt16x4.name = "operator!="_c;
    UInt16x4_operator_neq_UInt16x4.backendIndex = 1059;
    UInt16x4_operator_neq_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    UInt16x4_operator_neq_UInt16x4.parameters = UInt16x4_operator_neq_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4)->signature = "b8x4 operator!=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4)->name = "operator!=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4)->nameWithVarNames = "operator!=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_neq_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator* with Float16
    UInt16x4_operator_scale_Float16_arg.name = "arg"_c;
    UInt16x4_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt16x4_operator_scale_Float16.name = "operator*"_c;
    UInt16x4_operator_scale_Float16.backendIndex = 1060;
    UInt16x4_operator_scale_Float16.returnType = Type::FullType { Float16x4Type.name };
    UInt16x4_operator_scale_Float16.parameters = UInt16x4_operator_scale_Float16_args;
    Symbol::Resolved(&UInt16x4_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x4_operator_scale_Float16)->signature = "f16x4 operator*(f16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_Float16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with UInt16
    UInt16x4_operator_scale_UInt16_arg.name = "arg"_c;
    UInt16x4_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x4_operator_scale_UInt16.name = "operator*"_c;
    UInt16x4_operator_scale_UInt16.backendIndex = 1061;
    UInt16x4_operator_scale_UInt16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_scale_UInt16.parameters = UInt16x4_operator_scale_UInt16_args;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16)->signature = "u16x4 operator*(u16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_UInt16)->returnTypeSymbol = &UInt16x4Type;

    /// operator* with Int16
    UInt16x4_operator_scale_Int16_arg.name = "arg"_c;
    UInt16x4_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x4_operator_scale_Int16.name = "operator*"_c;
    UInt16x4_operator_scale_Int16.backendIndex = 1062;
    UInt16x4_operator_scale_Int16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_scale_Int16.parameters = UInt16x4_operator_scale_Int16_args;
    Symbol::Resolved(&UInt16x4_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x4_operator_scale_Int16)->signature = "u16x4 operator*(i16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&UInt16x4_operator_scale_Int16)->returnTypeSymbol = &UInt16x4Type;

    /// operator| with UInt16x4
    UInt16x4_operator_or_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_or_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_or_UInt16x4.name = "operator|"_c;
    UInt16x4_operator_or_UInt16x4.backendIndex = 1063;
    UInt16x4_operator_or_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_or_UInt16x4.parameters = UInt16x4_operator_or_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4)->signature = "u16x4 operator|(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4)->name = "operator|(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4)->nameWithVarNames = "operator|(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_or_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator& with UInt16x4
    UInt16x4_operator_and_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_and_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_and_UInt16x4.name = "operator&"_c;
    UInt16x4_operator_and_UInt16x4.backendIndex = 1064;
    UInt16x4_operator_and_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_and_UInt16x4.parameters = UInt16x4_operator_and_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4)->signature = "u16x4 operator&(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4)->name = "operator&(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4)->nameWithVarNames = "operator&(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_and_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator^ with UInt16x4
    UInt16x4_operator_xor_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_xor_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_xor_UInt16x4.name = "operator^"_c;
    UInt16x4_operator_xor_UInt16x4.backendIndex = 1065;
    UInt16x4_operator_xor_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_xor_UInt16x4.parameters = UInt16x4_operator_xor_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4)->signature = "u16x4 operator^(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4)->name = "operator^(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4)->nameWithVarNames = "operator^(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_xor_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator<< with UInt16x4
    UInt16x4_operator_lsh_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_lsh_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_lsh_UInt16x4.name = "operator<<"_c;
    UInt16x4_operator_lsh_UInt16x4.backendIndex = 1066;
    UInt16x4_operator_lsh_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_lsh_UInt16x4.parameters = UInt16x4_operator_lsh_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4)->signature = "u16x4 operator<<(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4)->name = "operator<<(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4)->nameWithVarNames = "operator<<(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lsh_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator>> with UInt16x4
    UInt16x4_operator_rsh_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_rsh_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_rsh_UInt16x4.name = "operator>>"_c;
    UInt16x4_operator_rsh_UInt16x4.backendIndex = 1067;
    UInt16x4_operator_rsh_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_rsh_UInt16x4.parameters = UInt16x4_operator_rsh_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4)->signature = "u16x4 operator>>(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4)->name = "operator>>(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4)->nameWithVarNames = "operator>>(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_rsh_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator|= with UInt16x4
    UInt16x4_operator_orasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_orasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_orasg_UInt16x4.name = "operator|="_c;
    UInt16x4_operator_orasg_UInt16x4.backendIndex = 1068;
    UInt16x4_operator_orasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_orasg_UInt16x4.parameters = UInt16x4_operator_orasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4)->signature = "u16x4 operator|=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4)->name = "operator|=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4)->nameWithVarNames = "operator|=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_orasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator&= with UInt16x4
    UInt16x4_operator_andasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_andasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_andasg_UInt16x4.name = "operator&="_c;
    UInt16x4_operator_andasg_UInt16x4.backendIndex = 1069;
    UInt16x4_operator_andasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_andasg_UInt16x4.parameters = UInt16x4_operator_andasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4)->signature = "u16x4 operator&=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4)->name = "operator&=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4)->nameWithVarNames = "operator&=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_andasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator^= with UInt16x4
    UInt16x4_operator_xorasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_xorasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_xorasg_UInt16x4.name = "operator^="_c;
    UInt16x4_operator_xorasg_UInt16x4.backendIndex = 1070;
    UInt16x4_operator_xorasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_xorasg_UInt16x4.parameters = UInt16x4_operator_xorasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4)->signature = "u16x4 operator^=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4)->name = "operator^=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4)->nameWithVarNames = "operator^=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_xorasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator<<= with UInt16x4
    UInt16x4_operator_lshasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_lshasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_lshasg_UInt16x4.name = "operator<<="_c;
    UInt16x4_operator_lshasg_UInt16x4.backendIndex = 1071;
    UInt16x4_operator_lshasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_lshasg_UInt16x4.parameters = UInt16x4_operator_lshasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4)->signature = "u16x4 operator<<=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4)->name = "operator<<=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4)->nameWithVarNames = "operator<<=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_lshasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// operator>>= with UInt16x4
    UInt16x4_operator_rhsasg_UInt16x4_arg.name = "arg"_c;
    UInt16x4_operator_rhsasg_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_operator_rhsasg_UInt16x4.name = "operator>>="_c;
    UInt16x4_operator_rhsasg_UInt16x4.backendIndex = 1072;
    UInt16x4_operator_rhsasg_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_operator_rhsasg_UInt16x4.parameters = UInt16x4_operator_rhsasg_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4)->signature = "u16x4 operator>>=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4)->name = "operator>>=(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4)->nameWithVarNames = "operator>>=(arg : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_operator_rhsasg_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 744> { 
        std::pair{ "a"_c, &UInt16Type },
        std::pair{ "aa"_c, &UInt16x2Type },
        std::pair{ "aaa"_c, &UInt16x3Type },
        std::pair{ "aaaa"_c, &UInt16x4Type },
        std::pair{ "aaab"_c, &UInt16x4Type },
        std::pair{ "aaag"_c, &UInt16x4Type },
        std::pair{ "aaar"_c, &UInt16x4Type },
        std::pair{ "aab"_c, &UInt16x3Type },
        std::pair{ "aaba"_c, &UInt16x4Type },
        std::pair{ "aabb"_c, &UInt16x4Type },
        std::pair{ "aabg"_c, &UInt16x4Type },
        std::pair{ "aabr"_c, &UInt16x4Type },
        std::pair{ "aag"_c, &UInt16x3Type },
        std::pair{ "aaga"_c, &UInt16x4Type },
        std::pair{ "aagb"_c, &UInt16x4Type },
        std::pair{ "aagg"_c, &UInt16x4Type },
        std::pair{ "aagr"_c, &UInt16x4Type },
        std::pair{ "aar"_c, &UInt16x3Type },
        std::pair{ "aara"_c, &UInt16x4Type },
        std::pair{ "aarb"_c, &UInt16x4Type },
        std::pair{ "aarg"_c, &UInt16x4Type },
        std::pair{ "aarr"_c, &UInt16x4Type },
        std::pair{ "ab"_c, &UInt16x2Type },
        std::pair{ "aba"_c, &UInt16x3Type },
        std::pair{ "abaa"_c, &UInt16x4Type },
        std::pair{ "abab"_c, &UInt16x4Type },
        std::pair{ "abag"_c, &UInt16x4Type },
        std::pair{ "abar"_c, &UInt16x4Type },
        std::pair{ "abb"_c, &UInt16x3Type },
        std::pair{ "abba"_c, &UInt16x4Type },
        std::pair{ "abbb"_c, &UInt16x4Type },
        std::pair{ "abbg"_c, &UInt16x4Type },
        std::pair{ "abbr"_c, &UInt16x4Type },
        std::pair{ "abg"_c, &UInt16x3Type },
        std::pair{ "abga"_c, &UInt16x4Type },
        std::pair{ "abgb"_c, &UInt16x4Type },
        std::pair{ "abgg"_c, &UInt16x4Type },
        std::pair{ "abgr"_c, &UInt16x4Type },
        std::pair{ "abr"_c, &UInt16x3Type },
        std::pair{ "abra"_c, &UInt16x4Type },
        std::pair{ "abrb"_c, &UInt16x4Type },
        std::pair{ "abrg"_c, &UInt16x4Type },
        std::pair{ "abrr"_c, &UInt16x4Type },
        std::pair{ "ag"_c, &UInt16x2Type },
        std::pair{ "aga"_c, &UInt16x3Type },
        std::pair{ "agaa"_c, &UInt16x4Type },
        std::pair{ "agab"_c, &UInt16x4Type },
        std::pair{ "agag"_c, &UInt16x4Type },
        std::pair{ "agar"_c, &UInt16x4Type },
        std::pair{ "agb"_c, &UInt16x3Type },
        std::pair{ "agba"_c, &UInt16x4Type },
        std::pair{ "agbb"_c, &UInt16x4Type },
        std::pair{ "agbg"_c, &UInt16x4Type },
        std::pair{ "agbr"_c, &UInt16x4Type },
        std::pair{ "agg"_c, &UInt16x3Type },
        std::pair{ "agga"_c, &UInt16x4Type },
        std::pair{ "aggb"_c, &UInt16x4Type },
        std::pair{ "aggg"_c, &UInt16x4Type },
        std::pair{ "aggr"_c, &UInt16x4Type },
        std::pair{ "agr"_c, &UInt16x3Type },
        std::pair{ "agra"_c, &UInt16x4Type },
        std::pair{ "agrb"_c, &UInt16x4Type },
        std::pair{ "agrg"_c, &UInt16x4Type },
        std::pair{ "agrr"_c, &UInt16x4Type },
        std::pair{ "ar"_c, &UInt16x2Type },
        std::pair{ "ara"_c, &UInt16x3Type },
        std::pair{ "araa"_c, &UInt16x4Type },
        std::pair{ "arab"_c, &UInt16x4Type },
        std::pair{ "arag"_c, &UInt16x4Type },
        std::pair{ "arar"_c, &UInt16x4Type },
        std::pair{ "arb"_c, &UInt16x3Type },
        std::pair{ "arba"_c, &UInt16x4Type },
        std::pair{ "arbb"_c, &UInt16x4Type },
        std::pair{ "arbg"_c, &UInt16x4Type },
        std::pair{ "arbr"_c, &UInt16x4Type },
        std::pair{ "arg"_c, &UInt16x3Type },
        std::pair{ "arga"_c, &UInt16x4Type },
        std::pair{ "argb"_c, &UInt16x4Type },
        std::pair{ "argg"_c, &UInt16x4Type },
        std::pair{ "argr"_c, &UInt16x4Type },
        std::pair{ "arr"_c, &UInt16x3Type },
        std::pair{ "arra"_c, &UInt16x4Type },
        std::pair{ "arrb"_c, &UInt16x4Type },
        std::pair{ "arrg"_c, &UInt16x4Type },
        std::pair{ "arrr"_c, &UInt16x4Type },
        std::pair{ "b"_c, &UInt16Type },
        std::pair{ "ba"_c, &UInt16x2Type },
        std::pair{ "baa"_c, &UInt16x3Type },
        std::pair{ "baaa"_c, &UInt16x4Type },
        std::pair{ "baab"_c, &UInt16x4Type },
        std::pair{ "baag"_c, &UInt16x4Type },
        std::pair{ "baar"_c, &UInt16x4Type },
        std::pair{ "bab"_c, &UInt16x3Type },
        std::pair{ "baba"_c, &UInt16x4Type },
        std::pair{ "babb"_c, &UInt16x4Type },
        std::pair{ "babg"_c, &UInt16x4Type },
        std::pair{ "babr"_c, &UInt16x4Type },
        std::pair{ "bag"_c, &UInt16x3Type },
        std::pair{ "baga"_c, &UInt16x4Type },
        std::pair{ "bagb"_c, &UInt16x4Type },
        std::pair{ "bagg"_c, &UInt16x4Type },
        std::pair{ "bagr"_c, &UInt16x4Type },
        std::pair{ "bar"_c, &UInt16x3Type },
        std::pair{ "bara"_c, &UInt16x4Type },
        std::pair{ "barb"_c, &UInt16x4Type },
        std::pair{ "barg"_c, &UInt16x4Type },
        std::pair{ "barr"_c, &UInt16x4Type },
        std::pair{ "bb"_c, &UInt16x2Type },
        std::pair{ "bba"_c, &UInt16x3Type },
        std::pair{ "bbaa"_c, &UInt16x4Type },
        std::pair{ "bbab"_c, &UInt16x4Type },
        std::pair{ "bbag"_c, &UInt16x4Type },
        std::pair{ "bbar"_c, &UInt16x4Type },
        std::pair{ "bbb"_c, &UInt16x3Type },
        std::pair{ "bbba"_c, &UInt16x4Type },
        std::pair{ "bbbb"_c, &UInt16x4Type },
        std::pair{ "bbbg"_c, &UInt16x4Type },
        std::pair{ "bbbr"_c, &UInt16x4Type },
        std::pair{ "bbg"_c, &UInt16x3Type },
        std::pair{ "bbga"_c, &UInt16x4Type },
        std::pair{ "bbgb"_c, &UInt16x4Type },
        std::pair{ "bbgg"_c, &UInt16x4Type },
        std::pair{ "bbgr"_c, &UInt16x4Type },
        std::pair{ "bbr"_c, &UInt16x3Type },
        std::pair{ "bbra"_c, &UInt16x4Type },
        std::pair{ "bbrb"_c, &UInt16x4Type },
        std::pair{ "bbrg"_c, &UInt16x4Type },
        std::pair{ "bbrr"_c, &UInt16x4Type },
        std::pair{ "bg"_c, &UInt16x2Type },
        std::pair{ "bga"_c, &UInt16x3Type },
        std::pair{ "bgaa"_c, &UInt16x4Type },
        std::pair{ "bgab"_c, &UInt16x4Type },
        std::pair{ "bgag"_c, &UInt16x4Type },
        std::pair{ "bgar"_c, &UInt16x4Type },
        std::pair{ "bgb"_c, &UInt16x3Type },
        std::pair{ "bgba"_c, &UInt16x4Type },
        std::pair{ "bgbb"_c, &UInt16x4Type },
        std::pair{ "bgbg"_c, &UInt16x4Type },
        std::pair{ "bgbr"_c, &UInt16x4Type },
        std::pair{ "bgg"_c, &UInt16x3Type },
        std::pair{ "bgga"_c, &UInt16x4Type },
        std::pair{ "bggb"_c, &UInt16x4Type },
        std::pair{ "bggg"_c, &UInt16x4Type },
        std::pair{ "bggr"_c, &UInt16x4Type },
        std::pair{ "bgr"_c, &UInt16x3Type },
        std::pair{ "bgra"_c, &UInt16x4Type },
        std::pair{ "bgrb"_c, &UInt16x4Type },
        std::pair{ "bgrg"_c, &UInt16x4Type },
        std::pair{ "bgrr"_c, &UInt16x4Type },
        std::pair{ "br"_c, &UInt16x2Type },
        std::pair{ "bra"_c, &UInt16x3Type },
        std::pair{ "braa"_c, &UInt16x4Type },
        std::pair{ "brab"_c, &UInt16x4Type },
        std::pair{ "brag"_c, &UInt16x4Type },
        std::pair{ "brar"_c, &UInt16x4Type },
        std::pair{ "brb"_c, &UInt16x3Type },
        std::pair{ "brba"_c, &UInt16x4Type },
        std::pair{ "brbb"_c, &UInt16x4Type },
        std::pair{ "brbg"_c, &UInt16x4Type },
        std::pair{ "brbr"_c, &UInt16x4Type },
        std::pair{ "brg"_c, &UInt16x3Type },
        std::pair{ "brga"_c, &UInt16x4Type },
        std::pair{ "brgb"_c, &UInt16x4Type },
        std::pair{ "brgg"_c, &UInt16x4Type },
        std::pair{ "brgr"_c, &UInt16x4Type },
        std::pair{ "brr"_c, &UInt16x3Type },
        std::pair{ "brra"_c, &UInt16x4Type },
        std::pair{ "brrb"_c, &UInt16x4Type },
        std::pair{ "brrg"_c, &UInt16x4Type },
        std::pair{ "brrr"_c, &UInt16x4Type },
        std::pair{ "g"_c, &UInt16Type },
        std::pair{ "ga"_c, &UInt16x2Type },
        std::pair{ "gaa"_c, &UInt16x3Type },
        std::pair{ "gaaa"_c, &UInt16x4Type },
        std::pair{ "gaab"_c, &UInt16x4Type },
        std::pair{ "gaag"_c, &UInt16x4Type },
        std::pair{ "gaar"_c, &UInt16x4Type },
        std::pair{ "gab"_c, &UInt16x3Type },
        std::pair{ "gaba"_c, &UInt16x4Type },
        std::pair{ "gabb"_c, &UInt16x4Type },
        std::pair{ "gabg"_c, &UInt16x4Type },
        std::pair{ "gabr"_c, &UInt16x4Type },
        std::pair{ "gag"_c, &UInt16x3Type },
        std::pair{ "gaga"_c, &UInt16x4Type },
        std::pair{ "gagb"_c, &UInt16x4Type },
        std::pair{ "gagg"_c, &UInt16x4Type },
        std::pair{ "gagr"_c, &UInt16x4Type },
        std::pair{ "gar"_c, &UInt16x3Type },
        std::pair{ "gara"_c, &UInt16x4Type },
        std::pair{ "garb"_c, &UInt16x4Type },
        std::pair{ "garg"_c, &UInt16x4Type },
        std::pair{ "garr"_c, &UInt16x4Type },
        std::pair{ "gb"_c, &UInt16x2Type },
        std::pair{ "gba"_c, &UInt16x3Type },
        std::pair{ "gbaa"_c, &UInt16x4Type },
        std::pair{ "gbab"_c, &UInt16x4Type },
        std::pair{ "gbag"_c, &UInt16x4Type },
        std::pair{ "gbar"_c, &UInt16x4Type },
        std::pair{ "gbb"_c, &UInt16x3Type },
        std::pair{ "gbba"_c, &UInt16x4Type },
        std::pair{ "gbbb"_c, &UInt16x4Type },
        std::pair{ "gbbg"_c, &UInt16x4Type },
        std::pair{ "gbbr"_c, &UInt16x4Type },
        std::pair{ "gbg"_c, &UInt16x3Type },
        std::pair{ "gbga"_c, &UInt16x4Type },
        std::pair{ "gbgb"_c, &UInt16x4Type },
        std::pair{ "gbgg"_c, &UInt16x4Type },
        std::pair{ "gbgr"_c, &UInt16x4Type },
        std::pair{ "gbr"_c, &UInt16x3Type },
        std::pair{ "gbra"_c, &UInt16x4Type },
        std::pair{ "gbrb"_c, &UInt16x4Type },
        std::pair{ "gbrg"_c, &UInt16x4Type },
        std::pair{ "gbrr"_c, &UInt16x4Type },
        std::pair{ "gg"_c, &UInt16x2Type },
        std::pair{ "gga"_c, &UInt16x3Type },
        std::pair{ "ggaa"_c, &UInt16x4Type },
        std::pair{ "ggab"_c, &UInt16x4Type },
        std::pair{ "ggag"_c, &UInt16x4Type },
        std::pair{ "ggar"_c, &UInt16x4Type },
        std::pair{ "ggb"_c, &UInt16x3Type },
        std::pair{ "ggba"_c, &UInt16x4Type },
        std::pair{ "ggbb"_c, &UInt16x4Type },
        std::pair{ "ggbg"_c, &UInt16x4Type },
        std::pair{ "ggbr"_c, &UInt16x4Type },
        std::pair{ "ggg"_c, &UInt16x3Type },
        std::pair{ "ggga"_c, &UInt16x4Type },
        std::pair{ "gggb"_c, &UInt16x4Type },
        std::pair{ "gggg"_c, &UInt16x4Type },
        std::pair{ "gggr"_c, &UInt16x4Type },
        std::pair{ "ggr"_c, &UInt16x3Type },
        std::pair{ "ggra"_c, &UInt16x4Type },
        std::pair{ "ggrb"_c, &UInt16x4Type },
        std::pair{ "ggrg"_c, &UInt16x4Type },
        std::pair{ "ggrr"_c, &UInt16x4Type },
        std::pair{ "gr"_c, &UInt16x2Type },
        std::pair{ "gra"_c, &UInt16x3Type },
        std::pair{ "graa"_c, &UInt16x4Type },
        std::pair{ "grab"_c, &UInt16x4Type },
        std::pair{ "grag"_c, &UInt16x4Type },
        std::pair{ "grar"_c, &UInt16x4Type },
        std::pair{ "grb"_c, &UInt16x3Type },
        std::pair{ "grba"_c, &UInt16x4Type },
        std::pair{ "grbb"_c, &UInt16x4Type },
        std::pair{ "grbg"_c, &UInt16x4Type },
        std::pair{ "grbr"_c, &UInt16x4Type },
        std::pair{ "grg"_c, &UInt16x3Type },
        std::pair{ "grga"_c, &UInt16x4Type },
        std::pair{ "grgb"_c, &UInt16x4Type },
        std::pair{ "grgg"_c, &UInt16x4Type },
        std::pair{ "grgr"_c, &UInt16x4Type },
        std::pair{ "grr"_c, &UInt16x3Type },
        std::pair{ "grra"_c, &UInt16x4Type },
        std::pair{ "grrb"_c, &UInt16x4Type },
        std::pair{ "grrg"_c, &UInt16x4Type },
        std::pair{ "grrr"_c, &UInt16x4Type },
        std::pair{ "operator!="_c, &UInt16x4_operator_neq_UInt16x4 },
        std::pair{ "operator!=(u16x4)"_c, &UInt16x4_operator_neq_UInt16x4 },
        std::pair{ "operator%"_c, &UInt16x4_operator_mod_UInt16x4 },
        std::pair{ "operator%(u16x4)"_c, &UInt16x4_operator_mod_UInt16x4 },
        std::pair{ "operator&"_c, &UInt16x4_operator_and_UInt16x4 },
        std::pair{ "operator&(u16x4)"_c, &UInt16x4_operator_and_UInt16x4 },
        std::pair{ "operator&="_c, &UInt16x4_operator_andasg_UInt16x4 },
        std::pair{ "operator&=(u16x4)"_c, &UInt16x4_operator_andasg_UInt16x4 },
        std::pair{ "operator*"_c, &UInt16x4_operator_mul_UInt16x4 },
        std::pair{ "operator*"_c, &UInt16x4_operator_scale_Float16 },
        std::pair{ "operator*"_c, &UInt16x4_operator_scale_UInt16 },
        std::pair{ "operator*"_c, &UInt16x4_operator_scale_Int16 },
        std::pair{ "operator*(f16)"_c, &UInt16x4_operator_scale_Float16 },
        std::pair{ "operator*(i16)"_c, &UInt16x4_operator_scale_Int16 },
        std::pair{ "operator*(u16)"_c, &UInt16x4_operator_scale_UInt16 },
        std::pair{ "operator*(u16x4)"_c, &UInt16x4_operator_mul_UInt16x4 },
        std::pair{ "operator*="_c, &UInt16x4_operator_mulasg_UInt16x4 },
        std::pair{ "operator*=(u16x4)"_c, &UInt16x4_operator_mulasg_UInt16x4 },
        std::pair{ "operator+"_c, &UInt16x4_operator_add_UInt16x4 },
        std::pair{ "operator+(u16x4)"_c, &UInt16x4_operator_add_UInt16x4 },
        std::pair{ "operator+="_c, &UInt16x4_operator_addasg_UInt16x4 },
        std::pair{ "operator+=(u16x4)"_c, &UInt16x4_operator_addasg_UInt16x4 },
        std::pair{ "operator-"_c, &UInt16x4_operator_sub_UInt16x4 },
        std::pair{ "operator-(u16x4)"_c, &UInt16x4_operator_sub_UInt16x4 },
        std::pair{ "operator-="_c, &UInt16x4_operator_subasg_UInt16x4 },
        std::pair{ "operator-=(u16x4)"_c, &UInt16x4_operator_subasg_UInt16x4 },
        std::pair{ "operator/"_c, &UInt16x4_operator_div_UInt16x4 },
        std::pair{ "operator/(u16x4)"_c, &UInt16x4_operator_div_UInt16x4 },
        std::pair{ "operator/="_c, &UInt16x4_operator_divasg_UInt16x4 },
        std::pair{ "operator/=(u16x4)"_c, &UInt16x4_operator_divasg_UInt16x4 },
        std::pair{ "operator<"_c, &UInt16x4_operator_lt_UInt16x4 },
        std::pair{ "operator<(u16x4)"_c, &UInt16x4_operator_lt_UInt16x4 },
        std::pair{ "operator<<"_c, &UInt16x4_operator_lsh_UInt16x4 },
        std::pair{ "operator<<(u16x4)"_c, &UInt16x4_operator_lsh_UInt16x4 },
        std::pair{ "operator<<="_c, &UInt16x4_operator_lshasg_UInt16x4 },
        std::pair{ "operator<<=(u16x4)"_c, &UInt16x4_operator_lshasg_UInt16x4 },
        std::pair{ "operator<="_c, &UInt16x4_operator_lte_UInt16x4 },
        std::pair{ "operator<=(u16x4)"_c, &UInt16x4_operator_lte_UInt16x4 },
        std::pair{ "operator=="_c, &UInt16x4_operator_eq_UInt16x4 },
        std::pair{ "operator==(u16x4)"_c, &UInt16x4_operator_eq_UInt16x4 },
        std::pair{ "operator>"_c, &UInt16x4_operator_gt_UInt16x4 },
        std::pair{ "operator>(u16x4)"_c, &UInt16x4_operator_gt_UInt16x4 },
        std::pair{ "operator>="_c, &UInt16x4_operator_gte_UInt16x4 },
        std::pair{ "operator>=(u16x4)"_c, &UInt16x4_operator_gte_UInt16x4 },
        std::pair{ "operator>>"_c, &UInt16x4_operator_rsh_UInt16x4 },
        std::pair{ "operator>>(u16x4)"_c, &UInt16x4_operator_rsh_UInt16x4 },
        std::pair{ "operator>>="_c, &UInt16x4_operator_rhsasg_UInt16x4 },
        std::pair{ "operator>>=(u16x4)"_c, &UInt16x4_operator_rhsasg_UInt16x4 },
        std::pair{ "operator[]"_c, &UInt16x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &UInt16x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &UInt16x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &UInt16x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &UInt16x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &UInt16x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &UInt16x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &UInt16x4_operator_index_UInt32 },
        std::pair{ "operator^"_c, &UInt16x4_operator_xor_UInt16x4 },
        std::pair{ "operator^(u16x4)"_c, &UInt16x4_operator_xor_UInt16x4 },
        std::pair{ "operator^="_c, &UInt16x4_operator_xorasg_UInt16x4 },
        std::pair{ "operator^=(u16x4)"_c, &UInt16x4_operator_xorasg_UInt16x4 },
        std::pair{ "operator|"_c, &UInt16x4_operator_or_UInt16x4 },
        std::pair{ "operator|(u16x4)"_c, &UInt16x4_operator_or_UInt16x4 },
        std::pair{ "operator|="_c, &UInt16x4_operator_orasg_UInt16x4 },
        std::pair{ "operator|=(u16x4)"_c, &UInt16x4_operator_orasg_UInt16x4 },
        std::pair{ "r"_c, &UInt16Type },
        std::pair{ "ra"_c, &UInt16x2Type },
        std::pair{ "raa"_c, &UInt16x3Type },
        std::pair{ "raaa"_c, &UInt16x4Type },
        std::pair{ "raab"_c, &UInt16x4Type },
        std::pair{ "raag"_c, &UInt16x4Type },
        std::pair{ "raar"_c, &UInt16x4Type },
        std::pair{ "rab"_c, &UInt16x3Type },
        std::pair{ "raba"_c, &UInt16x4Type },
        std::pair{ "rabb"_c, &UInt16x4Type },
        std::pair{ "rabg"_c, &UInt16x4Type },
        std::pair{ "rabr"_c, &UInt16x4Type },
        std::pair{ "rag"_c, &UInt16x3Type },
        std::pair{ "raga"_c, &UInt16x4Type },
        std::pair{ "ragb"_c, &UInt16x4Type },
        std::pair{ "ragg"_c, &UInt16x4Type },
        std::pair{ "ragr"_c, &UInt16x4Type },
        std::pair{ "rar"_c, &UInt16x3Type },
        std::pair{ "rara"_c, &UInt16x4Type },
        std::pair{ "rarb"_c, &UInt16x4Type },
        std::pair{ "rarg"_c, &UInt16x4Type },
        std::pair{ "rarr"_c, &UInt16x4Type },
        std::pair{ "rb"_c, &UInt16x2Type },
        std::pair{ "rba"_c, &UInt16x3Type },
        std::pair{ "rbaa"_c, &UInt16x4Type },
        std::pair{ "rbab"_c, &UInt16x4Type },
        std::pair{ "rbag"_c, &UInt16x4Type },
        std::pair{ "rbar"_c, &UInt16x4Type },
        std::pair{ "rbb"_c, &UInt16x3Type },
        std::pair{ "rbba"_c, &UInt16x4Type },
        std::pair{ "rbbb"_c, &UInt16x4Type },
        std::pair{ "rbbg"_c, &UInt16x4Type },
        std::pair{ "rbbr"_c, &UInt16x4Type },
        std::pair{ "rbg"_c, &UInt16x3Type },
        std::pair{ "rbga"_c, &UInt16x4Type },
        std::pair{ "rbgb"_c, &UInt16x4Type },
        std::pair{ "rbgg"_c, &UInt16x4Type },
        std::pair{ "rbgr"_c, &UInt16x4Type },
        std::pair{ "rbr"_c, &UInt16x3Type },
        std::pair{ "rbra"_c, &UInt16x4Type },
        std::pair{ "rbrb"_c, &UInt16x4Type },
        std::pair{ "rbrg"_c, &UInt16x4Type },
        std::pair{ "rbrr"_c, &UInt16x4Type },
        std::pair{ "rg"_c, &UInt16x2Type },
        std::pair{ "rga"_c, &UInt16x3Type },
        std::pair{ "rgaa"_c, &UInt16x4Type },
        std::pair{ "rgab"_c, &UInt16x4Type },
        std::pair{ "rgag"_c, &UInt16x4Type },
        std::pair{ "rgar"_c, &UInt16x4Type },
        std::pair{ "rgb"_c, &UInt16x3Type },
        std::pair{ "rgba"_c, &UInt16x4Type },
        std::pair{ "rgbb"_c, &UInt16x4Type },
        std::pair{ "rgbg"_c, &UInt16x4Type },
        std::pair{ "rgbr"_c, &UInt16x4Type },
        std::pair{ "rgg"_c, &UInt16x3Type },
        std::pair{ "rgga"_c, &UInt16x4Type },
        std::pair{ "rggb"_c, &UInt16x4Type },
        std::pair{ "rggg"_c, &UInt16x4Type },
        std::pair{ "rggr"_c, &UInt16x4Type },
        std::pair{ "rgr"_c, &UInt16x3Type },
        std::pair{ "rgra"_c, &UInt16x4Type },
        std::pair{ "rgrb"_c, &UInt16x4Type },
        std::pair{ "rgrg"_c, &UInt16x4Type },
        std::pair{ "rgrr"_c, &UInt16x4Type },
        std::pair{ "rr"_c, &UInt16x2Type },
        std::pair{ "rra"_c, &UInt16x3Type },
        std::pair{ "rraa"_c, &UInt16x4Type },
        std::pair{ "rrab"_c, &UInt16x4Type },
        std::pair{ "rrag"_c, &UInt16x4Type },
        std::pair{ "rrar"_c, &UInt16x4Type },
        std::pair{ "rrb"_c, &UInt16x3Type },
        std::pair{ "rrba"_c, &UInt16x4Type },
        std::pair{ "rrbb"_c, &UInt16x4Type },
        std::pair{ "rrbg"_c, &UInt16x4Type },
        std::pair{ "rrbr"_c, &UInt16x4Type },
        std::pair{ "rrg"_c, &UInt16x3Type },
        std::pair{ "rrga"_c, &UInt16x4Type },
        std::pair{ "rrgb"_c, &UInt16x4Type },
        std::pair{ "rrgg"_c, &UInt16x4Type },
        std::pair{ "rrgr"_c, &UInt16x4Type },
        std::pair{ "rrr"_c, &UInt16x3Type },
        std::pair{ "rrra"_c, &UInt16x4Type },
        std::pair{ "rrrb"_c, &UInt16x4Type },
        std::pair{ "rrrg"_c, &UInt16x4Type },
        std::pair{ "rrrr"_c, &UInt16x4Type },
        std::pair{ "w"_c, &UInt16Type },
        std::pair{ "ww"_c, &UInt16x2Type },
        std::pair{ "www"_c, &UInt16x3Type },
        std::pair{ "wwww"_c, &UInt16x4Type },
        std::pair{ "wwwx"_c, &UInt16x4Type },
        std::pair{ "wwwy"_c, &UInt16x4Type },
        std::pair{ "wwwz"_c, &UInt16x4Type },
        std::pair{ "wwx"_c, &UInt16x3Type },
        std::pair{ "wwxw"_c, &UInt16x4Type },
        std::pair{ "wwxx"_c, &UInt16x4Type },
        std::pair{ "wwxy"_c, &UInt16x4Type },
        std::pair{ "wwxz"_c, &UInt16x4Type },
        std::pair{ "wwy"_c, &UInt16x3Type },
        std::pair{ "wwyw"_c, &UInt16x4Type },
        std::pair{ "wwyx"_c, &UInt16x4Type },
        std::pair{ "wwyy"_c, &UInt16x4Type },
        std::pair{ "wwyz"_c, &UInt16x4Type },
        std::pair{ "wwz"_c, &UInt16x3Type },
        std::pair{ "wwzw"_c, &UInt16x4Type },
        std::pair{ "wwzx"_c, &UInt16x4Type },
        std::pair{ "wwzy"_c, &UInt16x4Type },
        std::pair{ "wwzz"_c, &UInt16x4Type },
        std::pair{ "wx"_c, &UInt16x2Type },
        std::pair{ "wxw"_c, &UInt16x3Type },
        std::pair{ "wxww"_c, &UInt16x4Type },
        std::pair{ "wxwx"_c, &UInt16x4Type },
        std::pair{ "wxwy"_c, &UInt16x4Type },
        std::pair{ "wxwz"_c, &UInt16x4Type },
        std::pair{ "wxx"_c, &UInt16x3Type },
        std::pair{ "wxxw"_c, &UInt16x4Type },
        std::pair{ "wxxx"_c, &UInt16x4Type },
        std::pair{ "wxxy"_c, &UInt16x4Type },
        std::pair{ "wxxz"_c, &UInt16x4Type },
        std::pair{ "wxy"_c, &UInt16x3Type },
        std::pair{ "wxyw"_c, &UInt16x4Type },
        std::pair{ "wxyx"_c, &UInt16x4Type },
        std::pair{ "wxyy"_c, &UInt16x4Type },
        std::pair{ "wxyz"_c, &UInt16x4Type },
        std::pair{ "wxz"_c, &UInt16x3Type },
        std::pair{ "wxzw"_c, &UInt16x4Type },
        std::pair{ "wxzx"_c, &UInt16x4Type },
        std::pair{ "wxzy"_c, &UInt16x4Type },
        std::pair{ "wxzz"_c, &UInt16x4Type },
        std::pair{ "wy"_c, &UInt16x2Type },
        std::pair{ "wyw"_c, &UInt16x3Type },
        std::pair{ "wyww"_c, &UInt16x4Type },
        std::pair{ "wywx"_c, &UInt16x4Type },
        std::pair{ "wywy"_c, &UInt16x4Type },
        std::pair{ "wywz"_c, &UInt16x4Type },
        std::pair{ "wyx"_c, &UInt16x3Type },
        std::pair{ "wyxw"_c, &UInt16x4Type },
        std::pair{ "wyxx"_c, &UInt16x4Type },
        std::pair{ "wyxy"_c, &UInt16x4Type },
        std::pair{ "wyxz"_c, &UInt16x4Type },
        std::pair{ "wyy"_c, &UInt16x3Type },
        std::pair{ "wyyw"_c, &UInt16x4Type },
        std::pair{ "wyyx"_c, &UInt16x4Type },
        std::pair{ "wyyy"_c, &UInt16x4Type },
        std::pair{ "wyyz"_c, &UInt16x4Type },
        std::pair{ "wyz"_c, &UInt16x3Type },
        std::pair{ "wyzw"_c, &UInt16x4Type },
        std::pair{ "wyzx"_c, &UInt16x4Type },
        std::pair{ "wyzy"_c, &UInt16x4Type },
        std::pair{ "wyzz"_c, &UInt16x4Type },
        std::pair{ "wz"_c, &UInt16x2Type },
        std::pair{ "wzw"_c, &UInt16x3Type },
        std::pair{ "wzww"_c, &UInt16x4Type },
        std::pair{ "wzwx"_c, &UInt16x4Type },
        std::pair{ "wzwy"_c, &UInt16x4Type },
        std::pair{ "wzwz"_c, &UInt16x4Type },
        std::pair{ "wzx"_c, &UInt16x3Type },
        std::pair{ "wzxw"_c, &UInt16x4Type },
        std::pair{ "wzxx"_c, &UInt16x4Type },
        std::pair{ "wzxy"_c, &UInt16x4Type },
        std::pair{ "wzxz"_c, &UInt16x4Type },
        std::pair{ "wzy"_c, &UInt16x3Type },
        std::pair{ "wzyw"_c, &UInt16x4Type },
        std::pair{ "wzyx"_c, &UInt16x4Type },
        std::pair{ "wzyy"_c, &UInt16x4Type },
        std::pair{ "wzyz"_c, &UInt16x4Type },
        std::pair{ "wzz"_c, &UInt16x3Type },
        std::pair{ "wzzw"_c, &UInt16x4Type },
        std::pair{ "wzzx"_c, &UInt16x4Type },
        std::pair{ "wzzy"_c, &UInt16x4Type },
        std::pair{ "wzzz"_c, &UInt16x4Type },
        std::pair{ "x"_c, &UInt16Type },
        std::pair{ "xw"_c, &UInt16x2Type },
        std::pair{ "xww"_c, &UInt16x3Type },
        std::pair{ "xwww"_c, &UInt16x4Type },
        std::pair{ "xwwx"_c, &UInt16x4Type },
        std::pair{ "xwwy"_c, &UInt16x4Type },
        std::pair{ "xwwz"_c, &UInt16x4Type },
        std::pair{ "xwx"_c, &UInt16x3Type },
        std::pair{ "xwxw"_c, &UInt16x4Type },
        std::pair{ "xwxx"_c, &UInt16x4Type },
        std::pair{ "xwxy"_c, &UInt16x4Type },
        std::pair{ "xwxz"_c, &UInt16x4Type },
        std::pair{ "xwy"_c, &UInt16x3Type },
        std::pair{ "xwyw"_c, &UInt16x4Type },
        std::pair{ "xwyx"_c, &UInt16x4Type },
        std::pair{ "xwyy"_c, &UInt16x4Type },
        std::pair{ "xwyz"_c, &UInt16x4Type },
        std::pair{ "xwz"_c, &UInt16x3Type },
        std::pair{ "xwzw"_c, &UInt16x4Type },
        std::pair{ "xwzx"_c, &UInt16x4Type },
        std::pair{ "xwzy"_c, &UInt16x4Type },
        std::pair{ "xwzz"_c, &UInt16x4Type },
        std::pair{ "xx"_c, &UInt16x2Type },
        std::pair{ "xxw"_c, &UInt16x3Type },
        std::pair{ "xxww"_c, &UInt16x4Type },
        std::pair{ "xxwx"_c, &UInt16x4Type },
        std::pair{ "xxwy"_c, &UInt16x4Type },
        std::pair{ "xxwz"_c, &UInt16x4Type },
        std::pair{ "xxx"_c, &UInt16x3Type },
        std::pair{ "xxxw"_c, &UInt16x4Type },
        std::pair{ "xxxx"_c, &UInt16x4Type },
        std::pair{ "xxxy"_c, &UInt16x4Type },
        std::pair{ "xxxz"_c, &UInt16x4Type },
        std::pair{ "xxy"_c, &UInt16x3Type },
        std::pair{ "xxyw"_c, &UInt16x4Type },
        std::pair{ "xxyx"_c, &UInt16x4Type },
        std::pair{ "xxyy"_c, &UInt16x4Type },
        std::pair{ "xxyz"_c, &UInt16x4Type },
        std::pair{ "xxz"_c, &UInt16x3Type },
        std::pair{ "xxzw"_c, &UInt16x4Type },
        std::pair{ "xxzx"_c, &UInt16x4Type },
        std::pair{ "xxzy"_c, &UInt16x4Type },
        std::pair{ "xxzz"_c, &UInt16x4Type },
        std::pair{ "xy"_c, &UInt16x2Type },
        std::pair{ "xyw"_c, &UInt16x3Type },
        std::pair{ "xyww"_c, &UInt16x4Type },
        std::pair{ "xywx"_c, &UInt16x4Type },
        std::pair{ "xywy"_c, &UInt16x4Type },
        std::pair{ "xywz"_c, &UInt16x4Type },
        std::pair{ "xyx"_c, &UInt16x3Type },
        std::pair{ "xyxw"_c, &UInt16x4Type },
        std::pair{ "xyxx"_c, &UInt16x4Type },
        std::pair{ "xyxy"_c, &UInt16x4Type },
        std::pair{ "xyxz"_c, &UInt16x4Type },
        std::pair{ "xyy"_c, &UInt16x3Type },
        std::pair{ "xyyw"_c, &UInt16x4Type },
        std::pair{ "xyyx"_c, &UInt16x4Type },
        std::pair{ "xyyy"_c, &UInt16x4Type },
        std::pair{ "xyyz"_c, &UInt16x4Type },
        std::pair{ "xyz"_c, &UInt16x3Type },
        std::pair{ "xyzw"_c, &UInt16x4Type },
        std::pair{ "xyzx"_c, &UInt16x4Type },
        std::pair{ "xyzy"_c, &UInt16x4Type },
        std::pair{ "xyzz"_c, &UInt16x4Type },
        std::pair{ "xz"_c, &UInt16x2Type },
        std::pair{ "xzw"_c, &UInt16x3Type },
        std::pair{ "xzww"_c, &UInt16x4Type },
        std::pair{ "xzwx"_c, &UInt16x4Type },
        std::pair{ "xzwy"_c, &UInt16x4Type },
        std::pair{ "xzwz"_c, &UInt16x4Type },
        std::pair{ "xzx"_c, &UInt16x3Type },
        std::pair{ "xzxw"_c, &UInt16x4Type },
        std::pair{ "xzxx"_c, &UInt16x4Type },
        std::pair{ "xzxy"_c, &UInt16x4Type },
        std::pair{ "xzxz"_c, &UInt16x4Type },
        std::pair{ "xzy"_c, &UInt16x3Type },
        std::pair{ "xzyw"_c, &UInt16x4Type },
        std::pair{ "xzyx"_c, &UInt16x4Type },
        std::pair{ "xzyy"_c, &UInt16x4Type },
        std::pair{ "xzyz"_c, &UInt16x4Type },
        std::pair{ "xzz"_c, &UInt16x3Type },
        std::pair{ "xzzw"_c, &UInt16x4Type },
        std::pair{ "xzzx"_c, &UInt16x4Type },
        std::pair{ "xzzy"_c, &UInt16x4Type },
        std::pair{ "xzzz"_c, &UInt16x4Type },
        std::pair{ "y"_c, &UInt16Type },
        std::pair{ "yw"_c, &UInt16x2Type },
        std::pair{ "yww"_c, &UInt16x3Type },
        std::pair{ "ywww"_c, &UInt16x4Type },
        std::pair{ "ywwx"_c, &UInt16x4Type },
        std::pair{ "ywwy"_c, &UInt16x4Type },
        std::pair{ "ywwz"_c, &UInt16x4Type },
        std::pair{ "ywx"_c, &UInt16x3Type },
        std::pair{ "ywxw"_c, &UInt16x4Type },
        std::pair{ "ywxx"_c, &UInt16x4Type },
        std::pair{ "ywxy"_c, &UInt16x4Type },
        std::pair{ "ywxz"_c, &UInt16x4Type },
        std::pair{ "ywy"_c, &UInt16x3Type },
        std::pair{ "ywyw"_c, &UInt16x4Type },
        std::pair{ "ywyx"_c, &UInt16x4Type },
        std::pair{ "ywyy"_c, &UInt16x4Type },
        std::pair{ "ywyz"_c, &UInt16x4Type },
        std::pair{ "ywz"_c, &UInt16x3Type },
        std::pair{ "ywzw"_c, &UInt16x4Type },
        std::pair{ "ywzx"_c, &UInt16x4Type },
        std::pair{ "ywzy"_c, &UInt16x4Type },
        std::pair{ "ywzz"_c, &UInt16x4Type },
        std::pair{ "yx"_c, &UInt16x2Type },
        std::pair{ "yxw"_c, &UInt16x3Type },
        std::pair{ "yxww"_c, &UInt16x4Type },
        std::pair{ "yxwx"_c, &UInt16x4Type },
        std::pair{ "yxwy"_c, &UInt16x4Type },
        std::pair{ "yxwz"_c, &UInt16x4Type },
        std::pair{ "yxx"_c, &UInt16x3Type },
        std::pair{ "yxxw"_c, &UInt16x4Type },
        std::pair{ "yxxx"_c, &UInt16x4Type },
        std::pair{ "yxxy"_c, &UInt16x4Type },
        std::pair{ "yxxz"_c, &UInt16x4Type },
        std::pair{ "yxy"_c, &UInt16x3Type },
        std::pair{ "yxyw"_c, &UInt16x4Type },
        std::pair{ "yxyx"_c, &UInt16x4Type },
        std::pair{ "yxyy"_c, &UInt16x4Type },
        std::pair{ "yxyz"_c, &UInt16x4Type },
        std::pair{ "yxz"_c, &UInt16x3Type },
        std::pair{ "yxzw"_c, &UInt16x4Type },
        std::pair{ "yxzx"_c, &UInt16x4Type },
        std::pair{ "yxzy"_c, &UInt16x4Type },
        std::pair{ "yxzz"_c, &UInt16x4Type },
        std::pair{ "yy"_c, &UInt16x2Type },
        std::pair{ "yyw"_c, &UInt16x3Type },
        std::pair{ "yyww"_c, &UInt16x4Type },
        std::pair{ "yywx"_c, &UInt16x4Type },
        std::pair{ "yywy"_c, &UInt16x4Type },
        std::pair{ "yywz"_c, &UInt16x4Type },
        std::pair{ "yyx"_c, &UInt16x3Type },
        std::pair{ "yyxw"_c, &UInt16x4Type },
        std::pair{ "yyxx"_c, &UInt16x4Type },
        std::pair{ "yyxy"_c, &UInt16x4Type },
        std::pair{ "yyxz"_c, &UInt16x4Type },
        std::pair{ "yyy"_c, &UInt16x3Type },
        std::pair{ "yyyw"_c, &UInt16x4Type },
        std::pair{ "yyyx"_c, &UInt16x4Type },
        std::pair{ "yyyy"_c, &UInt16x4Type },
        std::pair{ "yyyz"_c, &UInt16x4Type },
        std::pair{ "yyz"_c, &UInt16x3Type },
        std::pair{ "yyzw"_c, &UInt16x4Type },
        std::pair{ "yyzx"_c, &UInt16x4Type },
        std::pair{ "yyzy"_c, &UInt16x4Type },
        std::pair{ "yyzz"_c, &UInt16x4Type },
        std::pair{ "yz"_c, &UInt16x2Type },
        std::pair{ "yzw"_c, &UInt16x3Type },
        std::pair{ "yzww"_c, &UInt16x4Type },
        std::pair{ "yzwx"_c, &UInt16x4Type },
        std::pair{ "yzwy"_c, &UInt16x4Type },
        std::pair{ "yzwz"_c, &UInt16x4Type },
        std::pair{ "yzx"_c, &UInt16x3Type },
        std::pair{ "yzxw"_c, &UInt16x4Type },
        std::pair{ "yzxx"_c, &UInt16x4Type },
        std::pair{ "yzxy"_c, &UInt16x4Type },
        std::pair{ "yzxz"_c, &UInt16x4Type },
        std::pair{ "yzy"_c, &UInt16x3Type },
        std::pair{ "yzyw"_c, &UInt16x4Type },
        std::pair{ "yzyx"_c, &UInt16x4Type },
        std::pair{ "yzyy"_c, &UInt16x4Type },
        std::pair{ "yzyz"_c, &UInt16x4Type },
        std::pair{ "yzz"_c, &UInt16x3Type },
        std::pair{ "yzzw"_c, &UInt16x4Type },
        std::pair{ "yzzx"_c, &UInt16x4Type },
        std::pair{ "yzzy"_c, &UInt16x4Type },
        std::pair{ "yzzz"_c, &UInt16x4Type },
        std::pair{ "z"_c, &UInt16Type },
        std::pair{ "zw"_c, &UInt16x2Type },
        std::pair{ "zww"_c, &UInt16x3Type },
        std::pair{ "zwww"_c, &UInt16x4Type },
        std::pair{ "zwwx"_c, &UInt16x4Type },
        std::pair{ "zwwy"_c, &UInt16x4Type },
        std::pair{ "zwwz"_c, &UInt16x4Type },
        std::pair{ "zwx"_c, &UInt16x3Type },
        std::pair{ "zwxw"_c, &UInt16x4Type },
        std::pair{ "zwxx"_c, &UInt16x4Type },
        std::pair{ "zwxy"_c, &UInt16x4Type },
        std::pair{ "zwxz"_c, &UInt16x4Type },
        std::pair{ "zwy"_c, &UInt16x3Type },
        std::pair{ "zwyw"_c, &UInt16x4Type },
        std::pair{ "zwyx"_c, &UInt16x4Type },
        std::pair{ "zwyy"_c, &UInt16x4Type },
        std::pair{ "zwyz"_c, &UInt16x4Type },
        std::pair{ "zwz"_c, &UInt16x3Type },
        std::pair{ "zwzw"_c, &UInt16x4Type },
        std::pair{ "zwzx"_c, &UInt16x4Type },
        std::pair{ "zwzy"_c, &UInt16x4Type },
        std::pair{ "zwzz"_c, &UInt16x4Type },
        std::pair{ "zx"_c, &UInt16x2Type },
        std::pair{ "zxw"_c, &UInt16x3Type },
        std::pair{ "zxww"_c, &UInt16x4Type },
        std::pair{ "zxwx"_c, &UInt16x4Type },
        std::pair{ "zxwy"_c, &UInt16x4Type },
        std::pair{ "zxwz"_c, &UInt16x4Type },
        std::pair{ "zxx"_c, &UInt16x3Type },
        std::pair{ "zxxw"_c, &UInt16x4Type },
        std::pair{ "zxxx"_c, &UInt16x4Type },
        std::pair{ "zxxy"_c, &UInt16x4Type },
        std::pair{ "zxxz"_c, &UInt16x4Type },
        std::pair{ "zxy"_c, &UInt16x3Type },
        std::pair{ "zxyw"_c, &UInt16x4Type },
        std::pair{ "zxyx"_c, &UInt16x4Type },
        std::pair{ "zxyy"_c, &UInt16x4Type },
        std::pair{ "zxyz"_c, &UInt16x4Type },
        std::pair{ "zxz"_c, &UInt16x3Type },
        std::pair{ "zxzw"_c, &UInt16x4Type },
        std::pair{ "zxzx"_c, &UInt16x4Type },
        std::pair{ "zxzy"_c, &UInt16x4Type },
        std::pair{ "zxzz"_c, &UInt16x4Type },
        std::pair{ "zy"_c, &UInt16x2Type },
        std::pair{ "zyw"_c, &UInt16x3Type },
        std::pair{ "zyww"_c, &UInt16x4Type },
        std::pair{ "zywx"_c, &UInt16x4Type },
        std::pair{ "zywy"_c, &UInt16x4Type },
        std::pair{ "zywz"_c, &UInt16x4Type },
        std::pair{ "zyx"_c, &UInt16x3Type },
        std::pair{ "zyxw"_c, &UInt16x4Type },
        std::pair{ "zyxx"_c, &UInt16x4Type },
        std::pair{ "zyxy"_c, &UInt16x4Type },
        std::pair{ "zyxz"_c, &UInt16x4Type },
        std::pair{ "zyy"_c, &UInt16x3Type },
        std::pair{ "zyyw"_c, &UInt16x4Type },
        std::pair{ "zyyx"_c, &UInt16x4Type },
        std::pair{ "zyyy"_c, &UInt16x4Type },
        std::pair{ "zyyz"_c, &UInt16x4Type },
        std::pair{ "zyz"_c, &UInt16x3Type },
        std::pair{ "zyzw"_c, &UInt16x4Type },
        std::pair{ "zyzx"_c, &UInt16x4Type },
        std::pair{ "zyzy"_c, &UInt16x4Type },
        std::pair{ "zyzz"_c, &UInt16x4Type },
        std::pair{ "zz"_c, &UInt16x2Type },
        std::pair{ "zzw"_c, &UInt16x3Type },
        std::pair{ "zzww"_c, &UInt16x4Type },
        std::pair{ "zzwx"_c, &UInt16x4Type },
        std::pair{ "zzwy"_c, &UInt16x4Type },
        std::pair{ "zzwz"_c, &UInt16x4Type },
        std::pair{ "zzx"_c, &UInt16x3Type },
        std::pair{ "zzxw"_c, &UInt16x4Type },
        std::pair{ "zzxx"_c, &UInt16x4Type },
        std::pair{ "zzxy"_c, &UInt16x4Type },
        std::pair{ "zzxz"_c, &UInt16x4Type },
        std::pair{ "zzy"_c, &UInt16x3Type },
        std::pair{ "zzyw"_c, &UInt16x4Type },
        std::pair{ "zzyx"_c, &UInt16x4Type },
        std::pair{ "zzyy"_c, &UInt16x4Type },
        std::pair{ "zzyz"_c, &UInt16x4Type },
        std::pair{ "zzz"_c, &UInt16x3Type },
        std::pair{ "zzzw"_c, &UInt16x4Type },
        std::pair{ "zzzx"_c, &UInt16x4Type },
        std::pair{ "zzzy"_c, &UInt16x4Type },
        std::pair{ "zzzz"_c, &UInt16x4Type }
    };
}
UInt16x4 UInt16x4Type;

/// operator[] with Int32
Variable Int16x4_operator_index_Int32_arg;
Function Int16x4_operator_index_Int32;
inline constexpr std::array Int16x4_operator_index_Int32_args = { &Int16x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Int16x4_operator_index_UInt32_arg;
Function Int16x4_operator_index_UInt32;
inline constexpr std::array Int16x4_operator_index_UInt32_args = { &Int16x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Int16x4_operator_index_Int16_arg;
Function Int16x4_operator_index_Int16;
inline constexpr std::array Int16x4_operator_index_Int16_args = { &Int16x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Int16x4_operator_index_UInt16_arg;
Function Int16x4_operator_index_UInt16;
inline constexpr std::array Int16x4_operator_index_UInt16_args = { &Int16x4_operator_index_UInt16_arg };

/// operator+ with Int16x4
Variable Int16x4_operator_add_Int16x4_arg;
Function Int16x4_operator_add_Int16x4;
inline constexpr std::array Int16x4_operator_add_Int16x4_args = { &Int16x4_operator_add_Int16x4_arg };

/// operator- with Int16x4
Variable Int16x4_operator_sub_Int16x4_arg;
Function Int16x4_operator_sub_Int16x4;
inline constexpr std::array Int16x4_operator_sub_Int16x4_args = { &Int16x4_operator_sub_Int16x4_arg };

/// operator* with Int16x4
Variable Int16x4_operator_mul_Int16x4_arg;
Function Int16x4_operator_mul_Int16x4;
inline constexpr std::array Int16x4_operator_mul_Int16x4_args = { &Int16x4_operator_mul_Int16x4_arg };

/// operator/ with Int16x4
Variable Int16x4_operator_div_Int16x4_arg;
Function Int16x4_operator_div_Int16x4;
inline constexpr std::array Int16x4_operator_div_Int16x4_args = { &Int16x4_operator_div_Int16x4_arg };

/// operator% with Int16x4
Variable Int16x4_operator_mod_Int16x4_arg;
Function Int16x4_operator_mod_Int16x4;
inline constexpr std::array Int16x4_operator_mod_Int16x4_args = { &Int16x4_operator_mod_Int16x4_arg };

/// operator+= with Int16x4
Variable Int16x4_operator_addasg_Int16x4_arg;
Function Int16x4_operator_addasg_Int16x4;
inline constexpr std::array Int16x4_operator_addasg_Int16x4_args = { &Int16x4_operator_addasg_Int16x4_arg };

/// operator-= with Int16x4
Variable Int16x4_operator_subasg_Int16x4_arg;
Function Int16x4_operator_subasg_Int16x4;
inline constexpr std::array Int16x4_operator_subasg_Int16x4_args = { &Int16x4_operator_subasg_Int16x4_arg };

/// operator*= with Int16x4
Variable Int16x4_operator_mulasg_Int16x4_arg;
Function Int16x4_operator_mulasg_Int16x4;
inline constexpr std::array Int16x4_operator_mulasg_Int16x4_args = { &Int16x4_operator_mulasg_Int16x4_arg };

/// operator/= with Int16x4
Variable Int16x4_operator_divasg_Int16x4_arg;
Function Int16x4_operator_divasg_Int16x4;
inline constexpr std::array Int16x4_operator_divasg_Int16x4_args = { &Int16x4_operator_divasg_Int16x4_arg };

/// operator< with Int16x4
Variable Int16x4_operator_lt_Int16x4_arg;
Function Int16x4_operator_lt_Int16x4;
inline constexpr std::array Int16x4_operator_lt_Int16x4_args = { &Int16x4_operator_lt_Int16x4_arg };

/// operator<= with Int16x4
Variable Int16x4_operator_lte_Int16x4_arg;
Function Int16x4_operator_lte_Int16x4;
inline constexpr std::array Int16x4_operator_lte_Int16x4_args = { &Int16x4_operator_lte_Int16x4_arg };

/// operator> with Int16x4
Variable Int16x4_operator_gt_Int16x4_arg;
Function Int16x4_operator_gt_Int16x4;
inline constexpr std::array Int16x4_operator_gt_Int16x4_args = { &Int16x4_operator_gt_Int16x4_arg };

/// operator>= with Int16x4
Variable Int16x4_operator_gte_Int16x4_arg;
Function Int16x4_operator_gte_Int16x4;
inline constexpr std::array Int16x4_operator_gte_Int16x4_args = { &Int16x4_operator_gte_Int16x4_arg };

/// operator== with Int16x4
Variable Int16x4_operator_eq_Int16x4_arg;
Function Int16x4_operator_eq_Int16x4;
inline constexpr std::array Int16x4_operator_eq_Int16x4_args = { &Int16x4_operator_eq_Int16x4_arg };

/// operator!= with Int16x4
Variable Int16x4_operator_neq_Int16x4_arg;
Function Int16x4_operator_neq_Int16x4;
inline constexpr std::array Int16x4_operator_neq_Int16x4_args = { &Int16x4_operator_neq_Int16x4_arg };

/// operator* with Float16
Variable Int16x4_operator_scale_Float16_arg;
Function Int16x4_operator_scale_Float16;
inline constexpr std::array Int16x4_operator_scale_Float16_args = { &Int16x4_operator_scale_Float16_arg };

/// operator* with UInt16
Variable Int16x4_operator_scale_UInt16_arg;
Function Int16x4_operator_scale_UInt16;
inline constexpr std::array Int16x4_operator_scale_UInt16_args = { &Int16x4_operator_scale_UInt16_arg };

/// operator* with Int16
Variable Int16x4_operator_scale_Int16_arg;
Function Int16x4_operator_scale_Int16;
inline constexpr std::array Int16x4_operator_scale_Int16_args = { &Int16x4_operator_scale_Int16_arg };

/// operator| with Int16x4
Variable Int16x4_operator_or_Int16x4_arg;
Function Int16x4_operator_or_Int16x4;
inline constexpr std::array Int16x4_operator_or_Int16x4_args = { &Int16x4_operator_or_Int16x4_arg };

/// operator& with Int16x4
Variable Int16x4_operator_and_Int16x4_arg;
Function Int16x4_operator_and_Int16x4;
inline constexpr std::array Int16x4_operator_and_Int16x4_args = { &Int16x4_operator_and_Int16x4_arg };

/// operator^ with Int16x4
Variable Int16x4_operator_xor_Int16x4_arg;
Function Int16x4_operator_xor_Int16x4;
inline constexpr std::array Int16x4_operator_xor_Int16x4_args = { &Int16x4_operator_xor_Int16x4_arg };

/// operator<< with Int16x4
Variable Int16x4_operator_lsh_Int16x4_arg;
Function Int16x4_operator_lsh_Int16x4;
inline constexpr std::array Int16x4_operator_lsh_Int16x4_args = { &Int16x4_operator_lsh_Int16x4_arg };

/// operator>> with Int16x4
Variable Int16x4_operator_rsh_Int16x4_arg;
Function Int16x4_operator_rsh_Int16x4;
inline constexpr std::array Int16x4_operator_rsh_Int16x4_args = { &Int16x4_operator_rsh_Int16x4_arg };

/// operator|= with Int16x4
Variable Int16x4_operator_orasg_Int16x4_arg;
Function Int16x4_operator_orasg_Int16x4;
inline constexpr std::array Int16x4_operator_orasg_Int16x4_args = { &Int16x4_operator_orasg_Int16x4_arg };

/// operator&= with Int16x4
Variable Int16x4_operator_andasg_Int16x4_arg;
Function Int16x4_operator_andasg_Int16x4;
inline constexpr std::array Int16x4_operator_andasg_Int16x4_args = { &Int16x4_operator_andasg_Int16x4_arg };

/// operator^= with Int16x4
Variable Int16x4_operator_xorasg_Int16x4_arg;
Function Int16x4_operator_xorasg_Int16x4;
inline constexpr std::array Int16x4_operator_xorasg_Int16x4_args = { &Int16x4_operator_xorasg_Int16x4_arg };

/// operator<<= with Int16x4
Variable Int16x4_operator_lshasg_Int16x4_arg;
Function Int16x4_operator_lshasg_Int16x4;
inline constexpr std::array Int16x4_operator_lshasg_Int16x4_args = { &Int16x4_operator_lshasg_Int16x4_arg };

/// operator>>= with Int16x4
Variable Int16x4_operator_rhsasg_Int16x4_arg;
Function Int16x4_operator_rhsasg_Int16x4;
inline constexpr std::array Int16x4_operator_rhsasg_Int16x4_args = { &Int16x4_operator_rhsasg_Int16x4_arg };

Int16x4::Int16x4()
{
    this->name = "i16x4"_c;
    this->columnSize = 4;
    this->rowSize = 1;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Int16;
    this->builtin = true;

    /// operator[] with Int32
    Int16x4_operator_index_Int32_arg.name = "arg"_c;
    Int16x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16x4_operator_index_Int32.name = "operator[]"_c;
    Int16x4_operator_index_Int32.backendIndex = 1094;
    Int16x4_operator_index_Int32.returnType = Type::FullType { Int16Type.name };
    Int16x4_operator_index_Int32.parameters = Int16x4_operator_index_Int32_args;
    Symbol::Resolved(&Int16x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x4_operator_index_Int32)->signature = "i16 operator[](i32)"_c;
    Symbol::Resolved(&Int16x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Int16x4_operator_index_Int32)->nameWithVarNames = "operator[](arg : i32)"_c;
    Symbol::Resolved(&Int16x4_operator_index_Int32)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt32
    Int16x4_operator_index_UInt32_arg.name = "arg"_c;
    Int16x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16x4_operator_index_UInt32.name = "operator[]"_c;
    Int16x4_operator_index_UInt32.backendIndex = 1095;
    Int16x4_operator_index_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16x4_operator_index_UInt32.parameters = Int16x4_operator_index_UInt32_args;
    Symbol::Resolved(&Int16x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x4_operator_index_UInt32)->signature = "i16 operator[](u32)"_c;
    Symbol::Resolved(&Int16x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Int16x4_operator_index_UInt32)->nameWithVarNames = "operator[](arg : u32)"_c;
    Symbol::Resolved(&Int16x4_operator_index_UInt32)->returnTypeSymbol = &Int16Type;

    /// operator[] with Int16
    Int16x4_operator_index_Int16_arg.name = "arg"_c;
    Int16x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x4_operator_index_Int16.name = "operator[]"_c;
    Int16x4_operator_index_Int16.backendIndex = 1096;
    Int16x4_operator_index_Int16.returnType = Type::FullType { Int16Type.name };
    Int16x4_operator_index_Int16.parameters = Int16x4_operator_index_Int16_args;
    Symbol::Resolved(&Int16x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_operator_index_Int16)->signature = "i16 operator[](i16)"_c;
    Symbol::Resolved(&Int16x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Int16x4_operator_index_Int16)->nameWithVarNames = "operator[](arg : i16)"_c;
    Symbol::Resolved(&Int16x4_operator_index_Int16)->returnTypeSymbol = &Int16Type;

    /// operator[] with UInt16
    Int16x4_operator_index_UInt16_arg.name = "arg"_c;
    Int16x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x4_operator_index_UInt16.name = "operator[]"_c;
    Int16x4_operator_index_UInt16.backendIndex = 1097;
    Int16x4_operator_index_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16x4_operator_index_UInt16.parameters = Int16x4_operator_index_UInt16_args;
    Symbol::Resolved(&Int16x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x4_operator_index_UInt16)->signature = "i16 operator[](u16)"_c;
    Symbol::Resolved(&Int16x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Int16x4_operator_index_UInt16)->nameWithVarNames = "operator[](arg : u16)"_c;
    Symbol::Resolved(&Int16x4_operator_index_UInt16)->returnTypeSymbol = &Int16Type;

    /// operator+ with Int16x4
    Int16x4_operator_add_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_add_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_add_Int16x4.name = "operator+"_c;
    Int16x4_operator_add_Int16x4.backendIndex = 1098;
    Int16x4_operator_add_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_add_Int16x4.parameters = Int16x4_operator_add_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_add_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_add_Int16x4)->signature = "i16x4 operator+(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_add_Int16x4)->name = "operator+(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_add_Int16x4)->nameWithVarNames = "operator+(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_add_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator- with Int16x4
    Int16x4_operator_sub_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_sub_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_sub_Int16x4.name = "operator-"_c;
    Int16x4_operator_sub_Int16x4.backendIndex = 1099;
    Int16x4_operator_sub_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_sub_Int16x4.parameters = Int16x4_operator_sub_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4)->signature = "i16x4 operator-(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4)->name = "operator-(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4)->nameWithVarNames = "operator-(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_sub_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator* with Int16x4
    Int16x4_operator_mul_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_mul_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_mul_Int16x4.name = "operator*"_c;
    Int16x4_operator_mul_Int16x4.backendIndex = 1100;
    Int16x4_operator_mul_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_mul_Int16x4.parameters = Int16x4_operator_mul_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4)->signature = "i16x4 operator*(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4)->name = "operator*(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4)->nameWithVarNames = "operator*(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mul_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator/ with Int16x4
    Int16x4_operator_div_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_div_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_div_Int16x4.name = "operator/"_c;
    Int16x4_operator_div_Int16x4.backendIndex = 1101;
    Int16x4_operator_div_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_div_Int16x4.parameters = Int16x4_operator_div_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_div_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_div_Int16x4)->signature = "i16x4 operator/(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_div_Int16x4)->name = "operator/(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_div_Int16x4)->nameWithVarNames = "operator/(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_div_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator% with Int16x4
    Int16x4_operator_mod_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_mod_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_mod_Int16x4.name = "operator%"_c;
    Int16x4_operator_mod_Int16x4.backendIndex = 1102;
    Int16x4_operator_mod_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_mod_Int16x4.parameters = Int16x4_operator_mod_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4)->signature = "i16x4 operator%(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4)->name = "operator%(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4)->nameWithVarNames = "operator%(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mod_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator+= with Int16x4
    Int16x4_operator_addasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_addasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_addasg_Int16x4.name = "operator+="_c;
    Int16x4_operator_addasg_Int16x4.backendIndex = 1103;
    Int16x4_operator_addasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_addasg_Int16x4.parameters = Int16x4_operator_addasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4)->signature = "i16x4 operator+=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4)->name = "operator+=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4)->nameWithVarNames = "operator+=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_addasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator-= with Int16x4
    Int16x4_operator_subasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_subasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_subasg_Int16x4.name = "operator-="_c;
    Int16x4_operator_subasg_Int16x4.backendIndex = 1104;
    Int16x4_operator_subasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_subasg_Int16x4.parameters = Int16x4_operator_subasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4)->signature = "i16x4 operator-=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4)->name = "operator-=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4)->nameWithVarNames = "operator-=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_subasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator*= with Int16x4
    Int16x4_operator_mulasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_mulasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_mulasg_Int16x4.name = "operator*="_c;
    Int16x4_operator_mulasg_Int16x4.backendIndex = 1105;
    Int16x4_operator_mulasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_mulasg_Int16x4.parameters = Int16x4_operator_mulasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4)->signature = "i16x4 operator*=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4)->name = "operator*=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4)->nameWithVarNames = "operator*=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_mulasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator/= with Int16x4
    Int16x4_operator_divasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_divasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_divasg_Int16x4.name = "operator/="_c;
    Int16x4_operator_divasg_Int16x4.backendIndex = 1106;
    Int16x4_operator_divasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_divasg_Int16x4.parameters = Int16x4_operator_divasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4)->signature = "i16x4 operator/=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4)->name = "operator/=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4)->nameWithVarNames = "operator/=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_divasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator< with Int16x4
    Int16x4_operator_lt_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_lt_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_lt_Int16x4.name = "operator<"_c;
    Int16x4_operator_lt_Int16x4.backendIndex = 1107;
    Int16x4_operator_lt_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Int16x4_operator_lt_Int16x4.parameters = Int16x4_operator_lt_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4)->signature = "b8x4 operator<(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4)->name = "operator<(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4)->nameWithVarNames = "operator<(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lt_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator<= with Int16x4
    Int16x4_operator_lte_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_lte_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_lte_Int16x4.name = "operator<="_c;
    Int16x4_operator_lte_Int16x4.backendIndex = 1108;
    Int16x4_operator_lte_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Int16x4_operator_lte_Int16x4.parameters = Int16x4_operator_lte_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4)->signature = "b8x4 operator<=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4)->name = "operator<=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4)->nameWithVarNames = "operator<=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lte_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator> with Int16x4
    Int16x4_operator_gt_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_gt_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_gt_Int16x4.name = "operator>"_c;
    Int16x4_operator_gt_Int16x4.backendIndex = 1109;
    Int16x4_operator_gt_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Int16x4_operator_gt_Int16x4.parameters = Int16x4_operator_gt_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4)->signature = "b8x4 operator>(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4)->name = "operator>(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4)->nameWithVarNames = "operator>(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_gt_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator>= with Int16x4
    Int16x4_operator_gte_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_gte_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_gte_Int16x4.name = "operator>="_c;
    Int16x4_operator_gte_Int16x4.backendIndex = 1110;
    Int16x4_operator_gte_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Int16x4_operator_gte_Int16x4.parameters = Int16x4_operator_gte_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4)->signature = "b8x4 operator>=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4)->name = "operator>=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4)->nameWithVarNames = "operator>=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_gte_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator== with Int16x4
    Int16x4_operator_eq_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_eq_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_eq_Int16x4.name = "operator=="_c;
    Int16x4_operator_eq_Int16x4.backendIndex = 1111;
    Int16x4_operator_eq_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Int16x4_operator_eq_Int16x4.parameters = Int16x4_operator_eq_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4)->signature = "b8x4 operator==(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4)->name = "operator==(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4)->nameWithVarNames = "operator==(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_eq_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator!= with Int16x4
    Int16x4_operator_neq_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_neq_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_neq_Int16x4.name = "operator!="_c;
    Int16x4_operator_neq_Int16x4.backendIndex = 1112;
    Int16x4_operator_neq_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Int16x4_operator_neq_Int16x4.parameters = Int16x4_operator_neq_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4)->signature = "b8x4 operator!=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4)->name = "operator!=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4)->nameWithVarNames = "operator!=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_neq_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// operator* with Float16
    Int16x4_operator_scale_Float16_arg.name = "arg"_c;
    Int16x4_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int16x4_operator_scale_Float16.name = "operator*"_c;
    Int16x4_operator_scale_Float16.backendIndex = 1113;
    Int16x4_operator_scale_Float16.returnType = Type::FullType { Float16x4Type.name };
    Int16x4_operator_scale_Float16.parameters = Int16x4_operator_scale_Float16_args;
    Symbol::Resolved(&Int16x4_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x4_operator_scale_Float16)->signature = "f16x4 operator*(f16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_Float16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with UInt16
    Int16x4_operator_scale_UInt16_arg.name = "arg"_c;
    Int16x4_operator_scale_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x4_operator_scale_UInt16.name = "operator*"_c;
    Int16x4_operator_scale_UInt16.backendIndex = 1114;
    Int16x4_operator_scale_UInt16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_scale_UInt16.parameters = Int16x4_operator_scale_UInt16_args;
    Symbol::Resolved(&Int16x4_operator_scale_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x4_operator_scale_UInt16)->signature = "i16x4 operator*(u16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_UInt16)->name = "operator*(u16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_UInt16)->nameWithVarNames = "operator*(arg : u16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_UInt16)->returnTypeSymbol = &Int16x4Type;

    /// operator* with Int16
    Int16x4_operator_scale_Int16_arg.name = "arg"_c;
    Int16x4_operator_scale_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x4_operator_scale_Int16.name = "operator*"_c;
    Int16x4_operator_scale_Int16.backendIndex = 1115;
    Int16x4_operator_scale_Int16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_scale_Int16.parameters = Int16x4_operator_scale_Int16_args;
    Symbol::Resolved(&Int16x4_operator_scale_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_operator_scale_Int16)->signature = "i16x4 operator*(i16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_Int16)->name = "operator*(i16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_Int16)->nameWithVarNames = "operator*(arg : i16)"_c;
    Symbol::Resolved(&Int16x4_operator_scale_Int16)->returnTypeSymbol = &Int16x4Type;

    /// operator| with Int16x4
    Int16x4_operator_or_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_or_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_or_Int16x4.name = "operator|"_c;
    Int16x4_operator_or_Int16x4.backendIndex = 1116;
    Int16x4_operator_or_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_or_Int16x4.parameters = Int16x4_operator_or_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_or_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_or_Int16x4)->signature = "i16x4 operator|(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_or_Int16x4)->name = "operator|(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_or_Int16x4)->nameWithVarNames = "operator|(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_or_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator& with Int16x4
    Int16x4_operator_and_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_and_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_and_Int16x4.name = "operator&"_c;
    Int16x4_operator_and_Int16x4.backendIndex = 1117;
    Int16x4_operator_and_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_and_Int16x4.parameters = Int16x4_operator_and_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_and_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_and_Int16x4)->signature = "i16x4 operator&(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_and_Int16x4)->name = "operator&(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_and_Int16x4)->nameWithVarNames = "operator&(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_and_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator^ with Int16x4
    Int16x4_operator_xor_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_xor_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_xor_Int16x4.name = "operator^"_c;
    Int16x4_operator_xor_Int16x4.backendIndex = 1118;
    Int16x4_operator_xor_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_xor_Int16x4.parameters = Int16x4_operator_xor_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4)->signature = "i16x4 operator^(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4)->name = "operator^(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4)->nameWithVarNames = "operator^(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_xor_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator<< with Int16x4
    Int16x4_operator_lsh_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_lsh_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_lsh_Int16x4.name = "operator<<"_c;
    Int16x4_operator_lsh_Int16x4.backendIndex = 1119;
    Int16x4_operator_lsh_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_lsh_Int16x4.parameters = Int16x4_operator_lsh_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4)->signature = "i16x4 operator<<(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4)->name = "operator<<(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4)->nameWithVarNames = "operator<<(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lsh_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator>> with Int16x4
    Int16x4_operator_rsh_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_rsh_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_rsh_Int16x4.name = "operator>>"_c;
    Int16x4_operator_rsh_Int16x4.backendIndex = 1120;
    Int16x4_operator_rsh_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_rsh_Int16x4.parameters = Int16x4_operator_rsh_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4)->signature = "i16x4 operator>>(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4)->name = "operator>>(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4)->nameWithVarNames = "operator>>(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_rsh_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator|= with Int16x4
    Int16x4_operator_orasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_orasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_orasg_Int16x4.name = "operator|="_c;
    Int16x4_operator_orasg_Int16x4.backendIndex = 1121;
    Int16x4_operator_orasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_orasg_Int16x4.parameters = Int16x4_operator_orasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4)->signature = "i16x4 operator|=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4)->name = "operator|=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4)->nameWithVarNames = "operator|=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_orasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator&= with Int16x4
    Int16x4_operator_andasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_andasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_andasg_Int16x4.name = "operator&="_c;
    Int16x4_operator_andasg_Int16x4.backendIndex = 1122;
    Int16x4_operator_andasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_andasg_Int16x4.parameters = Int16x4_operator_andasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4)->signature = "i16x4 operator&=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4)->name = "operator&=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4)->nameWithVarNames = "operator&=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_andasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator^= with Int16x4
    Int16x4_operator_xorasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_xorasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_xorasg_Int16x4.name = "operator^="_c;
    Int16x4_operator_xorasg_Int16x4.backendIndex = 1123;
    Int16x4_operator_xorasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_xorasg_Int16x4.parameters = Int16x4_operator_xorasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4)->signature = "i16x4 operator^=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4)->name = "operator^=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4)->nameWithVarNames = "operator^=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_xorasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator<<= with Int16x4
    Int16x4_operator_lshasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_lshasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_lshasg_Int16x4.name = "operator<<="_c;
    Int16x4_operator_lshasg_Int16x4.backendIndex = 1124;
    Int16x4_operator_lshasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_lshasg_Int16x4.parameters = Int16x4_operator_lshasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4)->signature = "i16x4 operator<<=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4)->name = "operator<<=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4)->nameWithVarNames = "operator<<=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_lshasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// operator>>= with Int16x4
    Int16x4_operator_rhsasg_Int16x4_arg.name = "arg"_c;
    Int16x4_operator_rhsasg_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_operator_rhsasg_Int16x4.name = "operator>>="_c;
    Int16x4_operator_rhsasg_Int16x4.backendIndex = 1125;
    Int16x4_operator_rhsasg_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_operator_rhsasg_Int16x4.parameters = Int16x4_operator_rhsasg_Int16x4_args;
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4)->signature = "i16x4 operator>>=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4)->name = "operator>>=(i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4)->nameWithVarNames = "operator>>=(arg : i16x4)"_c;
    Symbol::Resolved(&Int16x4_operator_rhsasg_Int16x4)->returnTypeSymbol = &Int16x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 744> { 
        std::pair{ "a"_c, &Int16Type },
        std::pair{ "aa"_c, &Int16x2Type },
        std::pair{ "aaa"_c, &Int16x3Type },
        std::pair{ "aaaa"_c, &Int16x4Type },
        std::pair{ "aaab"_c, &Int16x4Type },
        std::pair{ "aaag"_c, &Int16x4Type },
        std::pair{ "aaar"_c, &Int16x4Type },
        std::pair{ "aab"_c, &Int16x3Type },
        std::pair{ "aaba"_c, &Int16x4Type },
        std::pair{ "aabb"_c, &Int16x4Type },
        std::pair{ "aabg"_c, &Int16x4Type },
        std::pair{ "aabr"_c, &Int16x4Type },
        std::pair{ "aag"_c, &Int16x3Type },
        std::pair{ "aaga"_c, &Int16x4Type },
        std::pair{ "aagb"_c, &Int16x4Type },
        std::pair{ "aagg"_c, &Int16x4Type },
        std::pair{ "aagr"_c, &Int16x4Type },
        std::pair{ "aar"_c, &Int16x3Type },
        std::pair{ "aara"_c, &Int16x4Type },
        std::pair{ "aarb"_c, &Int16x4Type },
        std::pair{ "aarg"_c, &Int16x4Type },
        std::pair{ "aarr"_c, &Int16x4Type },
        std::pair{ "ab"_c, &Int16x2Type },
        std::pair{ "aba"_c, &Int16x3Type },
        std::pair{ "abaa"_c, &Int16x4Type },
        std::pair{ "abab"_c, &Int16x4Type },
        std::pair{ "abag"_c, &Int16x4Type },
        std::pair{ "abar"_c, &Int16x4Type },
        std::pair{ "abb"_c, &Int16x3Type },
        std::pair{ "abba"_c, &Int16x4Type },
        std::pair{ "abbb"_c, &Int16x4Type },
        std::pair{ "abbg"_c, &Int16x4Type },
        std::pair{ "abbr"_c, &Int16x4Type },
        std::pair{ "abg"_c, &Int16x3Type },
        std::pair{ "abga"_c, &Int16x4Type },
        std::pair{ "abgb"_c, &Int16x4Type },
        std::pair{ "abgg"_c, &Int16x4Type },
        std::pair{ "abgr"_c, &Int16x4Type },
        std::pair{ "abr"_c, &Int16x3Type },
        std::pair{ "abra"_c, &Int16x4Type },
        std::pair{ "abrb"_c, &Int16x4Type },
        std::pair{ "abrg"_c, &Int16x4Type },
        std::pair{ "abrr"_c, &Int16x4Type },
        std::pair{ "ag"_c, &Int16x2Type },
        std::pair{ "aga"_c, &Int16x3Type },
        std::pair{ "agaa"_c, &Int16x4Type },
        std::pair{ "agab"_c, &Int16x4Type },
        std::pair{ "agag"_c, &Int16x4Type },
        std::pair{ "agar"_c, &Int16x4Type },
        std::pair{ "agb"_c, &Int16x3Type },
        std::pair{ "agba"_c, &Int16x4Type },
        std::pair{ "agbb"_c, &Int16x4Type },
        std::pair{ "agbg"_c, &Int16x4Type },
        std::pair{ "agbr"_c, &Int16x4Type },
        std::pair{ "agg"_c, &Int16x3Type },
        std::pair{ "agga"_c, &Int16x4Type },
        std::pair{ "aggb"_c, &Int16x4Type },
        std::pair{ "aggg"_c, &Int16x4Type },
        std::pair{ "aggr"_c, &Int16x4Type },
        std::pair{ "agr"_c, &Int16x3Type },
        std::pair{ "agra"_c, &Int16x4Type },
        std::pair{ "agrb"_c, &Int16x4Type },
        std::pair{ "agrg"_c, &Int16x4Type },
        std::pair{ "agrr"_c, &Int16x4Type },
        std::pair{ "ar"_c, &Int16x2Type },
        std::pair{ "ara"_c, &Int16x3Type },
        std::pair{ "araa"_c, &Int16x4Type },
        std::pair{ "arab"_c, &Int16x4Type },
        std::pair{ "arag"_c, &Int16x4Type },
        std::pair{ "arar"_c, &Int16x4Type },
        std::pair{ "arb"_c, &Int16x3Type },
        std::pair{ "arba"_c, &Int16x4Type },
        std::pair{ "arbb"_c, &Int16x4Type },
        std::pair{ "arbg"_c, &Int16x4Type },
        std::pair{ "arbr"_c, &Int16x4Type },
        std::pair{ "arg"_c, &Int16x3Type },
        std::pair{ "arga"_c, &Int16x4Type },
        std::pair{ "argb"_c, &Int16x4Type },
        std::pair{ "argg"_c, &Int16x4Type },
        std::pair{ "argr"_c, &Int16x4Type },
        std::pair{ "arr"_c, &Int16x3Type },
        std::pair{ "arra"_c, &Int16x4Type },
        std::pair{ "arrb"_c, &Int16x4Type },
        std::pair{ "arrg"_c, &Int16x4Type },
        std::pair{ "arrr"_c, &Int16x4Type },
        std::pair{ "b"_c, &Int16Type },
        std::pair{ "ba"_c, &Int16x2Type },
        std::pair{ "baa"_c, &Int16x3Type },
        std::pair{ "baaa"_c, &Int16x4Type },
        std::pair{ "baab"_c, &Int16x4Type },
        std::pair{ "baag"_c, &Int16x4Type },
        std::pair{ "baar"_c, &Int16x4Type },
        std::pair{ "bab"_c, &Int16x3Type },
        std::pair{ "baba"_c, &Int16x4Type },
        std::pair{ "babb"_c, &Int16x4Type },
        std::pair{ "babg"_c, &Int16x4Type },
        std::pair{ "babr"_c, &Int16x4Type },
        std::pair{ "bag"_c, &Int16x3Type },
        std::pair{ "baga"_c, &Int16x4Type },
        std::pair{ "bagb"_c, &Int16x4Type },
        std::pair{ "bagg"_c, &Int16x4Type },
        std::pair{ "bagr"_c, &Int16x4Type },
        std::pair{ "bar"_c, &Int16x3Type },
        std::pair{ "bara"_c, &Int16x4Type },
        std::pair{ "barb"_c, &Int16x4Type },
        std::pair{ "barg"_c, &Int16x4Type },
        std::pair{ "barr"_c, &Int16x4Type },
        std::pair{ "bb"_c, &Int16x2Type },
        std::pair{ "bba"_c, &Int16x3Type },
        std::pair{ "bbaa"_c, &Int16x4Type },
        std::pair{ "bbab"_c, &Int16x4Type },
        std::pair{ "bbag"_c, &Int16x4Type },
        std::pair{ "bbar"_c, &Int16x4Type },
        std::pair{ "bbb"_c, &Int16x3Type },
        std::pair{ "bbba"_c, &Int16x4Type },
        std::pair{ "bbbb"_c, &Int16x4Type },
        std::pair{ "bbbg"_c, &Int16x4Type },
        std::pair{ "bbbr"_c, &Int16x4Type },
        std::pair{ "bbg"_c, &Int16x3Type },
        std::pair{ "bbga"_c, &Int16x4Type },
        std::pair{ "bbgb"_c, &Int16x4Type },
        std::pair{ "bbgg"_c, &Int16x4Type },
        std::pair{ "bbgr"_c, &Int16x4Type },
        std::pair{ "bbr"_c, &Int16x3Type },
        std::pair{ "bbra"_c, &Int16x4Type },
        std::pair{ "bbrb"_c, &Int16x4Type },
        std::pair{ "bbrg"_c, &Int16x4Type },
        std::pair{ "bbrr"_c, &Int16x4Type },
        std::pair{ "bg"_c, &Int16x2Type },
        std::pair{ "bga"_c, &Int16x3Type },
        std::pair{ "bgaa"_c, &Int16x4Type },
        std::pair{ "bgab"_c, &Int16x4Type },
        std::pair{ "bgag"_c, &Int16x4Type },
        std::pair{ "bgar"_c, &Int16x4Type },
        std::pair{ "bgb"_c, &Int16x3Type },
        std::pair{ "bgba"_c, &Int16x4Type },
        std::pair{ "bgbb"_c, &Int16x4Type },
        std::pair{ "bgbg"_c, &Int16x4Type },
        std::pair{ "bgbr"_c, &Int16x4Type },
        std::pair{ "bgg"_c, &Int16x3Type },
        std::pair{ "bgga"_c, &Int16x4Type },
        std::pair{ "bggb"_c, &Int16x4Type },
        std::pair{ "bggg"_c, &Int16x4Type },
        std::pair{ "bggr"_c, &Int16x4Type },
        std::pair{ "bgr"_c, &Int16x3Type },
        std::pair{ "bgra"_c, &Int16x4Type },
        std::pair{ "bgrb"_c, &Int16x4Type },
        std::pair{ "bgrg"_c, &Int16x4Type },
        std::pair{ "bgrr"_c, &Int16x4Type },
        std::pair{ "br"_c, &Int16x2Type },
        std::pair{ "bra"_c, &Int16x3Type },
        std::pair{ "braa"_c, &Int16x4Type },
        std::pair{ "brab"_c, &Int16x4Type },
        std::pair{ "brag"_c, &Int16x4Type },
        std::pair{ "brar"_c, &Int16x4Type },
        std::pair{ "brb"_c, &Int16x3Type },
        std::pair{ "brba"_c, &Int16x4Type },
        std::pair{ "brbb"_c, &Int16x4Type },
        std::pair{ "brbg"_c, &Int16x4Type },
        std::pair{ "brbr"_c, &Int16x4Type },
        std::pair{ "brg"_c, &Int16x3Type },
        std::pair{ "brga"_c, &Int16x4Type },
        std::pair{ "brgb"_c, &Int16x4Type },
        std::pair{ "brgg"_c, &Int16x4Type },
        std::pair{ "brgr"_c, &Int16x4Type },
        std::pair{ "brr"_c, &Int16x3Type },
        std::pair{ "brra"_c, &Int16x4Type },
        std::pair{ "brrb"_c, &Int16x4Type },
        std::pair{ "brrg"_c, &Int16x4Type },
        std::pair{ "brrr"_c, &Int16x4Type },
        std::pair{ "g"_c, &Int16Type },
        std::pair{ "ga"_c, &Int16x2Type },
        std::pair{ "gaa"_c, &Int16x3Type },
        std::pair{ "gaaa"_c, &Int16x4Type },
        std::pair{ "gaab"_c, &Int16x4Type },
        std::pair{ "gaag"_c, &Int16x4Type },
        std::pair{ "gaar"_c, &Int16x4Type },
        std::pair{ "gab"_c, &Int16x3Type },
        std::pair{ "gaba"_c, &Int16x4Type },
        std::pair{ "gabb"_c, &Int16x4Type },
        std::pair{ "gabg"_c, &Int16x4Type },
        std::pair{ "gabr"_c, &Int16x4Type },
        std::pair{ "gag"_c, &Int16x3Type },
        std::pair{ "gaga"_c, &Int16x4Type },
        std::pair{ "gagb"_c, &Int16x4Type },
        std::pair{ "gagg"_c, &Int16x4Type },
        std::pair{ "gagr"_c, &Int16x4Type },
        std::pair{ "gar"_c, &Int16x3Type },
        std::pair{ "gara"_c, &Int16x4Type },
        std::pair{ "garb"_c, &Int16x4Type },
        std::pair{ "garg"_c, &Int16x4Type },
        std::pair{ "garr"_c, &Int16x4Type },
        std::pair{ "gb"_c, &Int16x2Type },
        std::pair{ "gba"_c, &Int16x3Type },
        std::pair{ "gbaa"_c, &Int16x4Type },
        std::pair{ "gbab"_c, &Int16x4Type },
        std::pair{ "gbag"_c, &Int16x4Type },
        std::pair{ "gbar"_c, &Int16x4Type },
        std::pair{ "gbb"_c, &Int16x3Type },
        std::pair{ "gbba"_c, &Int16x4Type },
        std::pair{ "gbbb"_c, &Int16x4Type },
        std::pair{ "gbbg"_c, &Int16x4Type },
        std::pair{ "gbbr"_c, &Int16x4Type },
        std::pair{ "gbg"_c, &Int16x3Type },
        std::pair{ "gbga"_c, &Int16x4Type },
        std::pair{ "gbgb"_c, &Int16x4Type },
        std::pair{ "gbgg"_c, &Int16x4Type },
        std::pair{ "gbgr"_c, &Int16x4Type },
        std::pair{ "gbr"_c, &Int16x3Type },
        std::pair{ "gbra"_c, &Int16x4Type },
        std::pair{ "gbrb"_c, &Int16x4Type },
        std::pair{ "gbrg"_c, &Int16x4Type },
        std::pair{ "gbrr"_c, &Int16x4Type },
        std::pair{ "gg"_c, &Int16x2Type },
        std::pair{ "gga"_c, &Int16x3Type },
        std::pair{ "ggaa"_c, &Int16x4Type },
        std::pair{ "ggab"_c, &Int16x4Type },
        std::pair{ "ggag"_c, &Int16x4Type },
        std::pair{ "ggar"_c, &Int16x4Type },
        std::pair{ "ggb"_c, &Int16x3Type },
        std::pair{ "ggba"_c, &Int16x4Type },
        std::pair{ "ggbb"_c, &Int16x4Type },
        std::pair{ "ggbg"_c, &Int16x4Type },
        std::pair{ "ggbr"_c, &Int16x4Type },
        std::pair{ "ggg"_c, &Int16x3Type },
        std::pair{ "ggga"_c, &Int16x4Type },
        std::pair{ "gggb"_c, &Int16x4Type },
        std::pair{ "gggg"_c, &Int16x4Type },
        std::pair{ "gggr"_c, &Int16x4Type },
        std::pair{ "ggr"_c, &Int16x3Type },
        std::pair{ "ggra"_c, &Int16x4Type },
        std::pair{ "ggrb"_c, &Int16x4Type },
        std::pair{ "ggrg"_c, &Int16x4Type },
        std::pair{ "ggrr"_c, &Int16x4Type },
        std::pair{ "gr"_c, &Int16x2Type },
        std::pair{ "gra"_c, &Int16x3Type },
        std::pair{ "graa"_c, &Int16x4Type },
        std::pair{ "grab"_c, &Int16x4Type },
        std::pair{ "grag"_c, &Int16x4Type },
        std::pair{ "grar"_c, &Int16x4Type },
        std::pair{ "grb"_c, &Int16x3Type },
        std::pair{ "grba"_c, &Int16x4Type },
        std::pair{ "grbb"_c, &Int16x4Type },
        std::pair{ "grbg"_c, &Int16x4Type },
        std::pair{ "grbr"_c, &Int16x4Type },
        std::pair{ "grg"_c, &Int16x3Type },
        std::pair{ "grga"_c, &Int16x4Type },
        std::pair{ "grgb"_c, &Int16x4Type },
        std::pair{ "grgg"_c, &Int16x4Type },
        std::pair{ "grgr"_c, &Int16x4Type },
        std::pair{ "grr"_c, &Int16x3Type },
        std::pair{ "grra"_c, &Int16x4Type },
        std::pair{ "grrb"_c, &Int16x4Type },
        std::pair{ "grrg"_c, &Int16x4Type },
        std::pair{ "grrr"_c, &Int16x4Type },
        std::pair{ "operator!="_c, &Int16x4_operator_neq_Int16x4 },
        std::pair{ "operator!=(i16x4)"_c, &Int16x4_operator_neq_Int16x4 },
        std::pair{ "operator%"_c, &Int16x4_operator_mod_Int16x4 },
        std::pair{ "operator%(i16x4)"_c, &Int16x4_operator_mod_Int16x4 },
        std::pair{ "operator&"_c, &Int16x4_operator_and_Int16x4 },
        std::pair{ "operator&(i16x4)"_c, &Int16x4_operator_and_Int16x4 },
        std::pair{ "operator&="_c, &Int16x4_operator_andasg_Int16x4 },
        std::pair{ "operator&=(i16x4)"_c, &Int16x4_operator_andasg_Int16x4 },
        std::pair{ "operator*"_c, &Int16x4_operator_mul_Int16x4 },
        std::pair{ "operator*"_c, &Int16x4_operator_scale_Float16 },
        std::pair{ "operator*"_c, &Int16x4_operator_scale_UInt16 },
        std::pair{ "operator*"_c, &Int16x4_operator_scale_Int16 },
        std::pair{ "operator*(f16)"_c, &Int16x4_operator_scale_Float16 },
        std::pair{ "operator*(i16)"_c, &Int16x4_operator_scale_Int16 },
        std::pair{ "operator*(i16x4)"_c, &Int16x4_operator_mul_Int16x4 },
        std::pair{ "operator*(u16)"_c, &Int16x4_operator_scale_UInt16 },
        std::pair{ "operator*="_c, &Int16x4_operator_mulasg_Int16x4 },
        std::pair{ "operator*=(i16x4)"_c, &Int16x4_operator_mulasg_Int16x4 },
        std::pair{ "operator+"_c, &Int16x4_operator_add_Int16x4 },
        std::pair{ "operator+(i16x4)"_c, &Int16x4_operator_add_Int16x4 },
        std::pair{ "operator+="_c, &Int16x4_operator_addasg_Int16x4 },
        std::pair{ "operator+=(i16x4)"_c, &Int16x4_operator_addasg_Int16x4 },
        std::pair{ "operator-"_c, &Int16x4_operator_sub_Int16x4 },
        std::pair{ "operator-(i16x4)"_c, &Int16x4_operator_sub_Int16x4 },
        std::pair{ "operator-="_c, &Int16x4_operator_subasg_Int16x4 },
        std::pair{ "operator-=(i16x4)"_c, &Int16x4_operator_subasg_Int16x4 },
        std::pair{ "operator/"_c, &Int16x4_operator_div_Int16x4 },
        std::pair{ "operator/(i16x4)"_c, &Int16x4_operator_div_Int16x4 },
        std::pair{ "operator/="_c, &Int16x4_operator_divasg_Int16x4 },
        std::pair{ "operator/=(i16x4)"_c, &Int16x4_operator_divasg_Int16x4 },
        std::pair{ "operator<"_c, &Int16x4_operator_lt_Int16x4 },
        std::pair{ "operator<(i16x4)"_c, &Int16x4_operator_lt_Int16x4 },
        std::pair{ "operator<<"_c, &Int16x4_operator_lsh_Int16x4 },
        std::pair{ "operator<<(i16x4)"_c, &Int16x4_operator_lsh_Int16x4 },
        std::pair{ "operator<<="_c, &Int16x4_operator_lshasg_Int16x4 },
        std::pair{ "operator<<=(i16x4)"_c, &Int16x4_operator_lshasg_Int16x4 },
        std::pair{ "operator<="_c, &Int16x4_operator_lte_Int16x4 },
        std::pair{ "operator<=(i16x4)"_c, &Int16x4_operator_lte_Int16x4 },
        std::pair{ "operator=="_c, &Int16x4_operator_eq_Int16x4 },
        std::pair{ "operator==(i16x4)"_c, &Int16x4_operator_eq_Int16x4 },
        std::pair{ "operator>"_c, &Int16x4_operator_gt_Int16x4 },
        std::pair{ "operator>(i16x4)"_c, &Int16x4_operator_gt_Int16x4 },
        std::pair{ "operator>="_c, &Int16x4_operator_gte_Int16x4 },
        std::pair{ "operator>=(i16x4)"_c, &Int16x4_operator_gte_Int16x4 },
        std::pair{ "operator>>"_c, &Int16x4_operator_rsh_Int16x4 },
        std::pair{ "operator>>(i16x4)"_c, &Int16x4_operator_rsh_Int16x4 },
        std::pair{ "operator>>="_c, &Int16x4_operator_rhsasg_Int16x4 },
        std::pair{ "operator>>=(i16x4)"_c, &Int16x4_operator_rhsasg_Int16x4 },
        std::pair{ "operator[]"_c, &Int16x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Int16x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Int16x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Int16x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Int16x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Int16x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Int16x4_operator_index_UInt32 },
        std::pair{ "operator^"_c, &Int16x4_operator_xor_Int16x4 },
        std::pair{ "operator^(i16x4)"_c, &Int16x4_operator_xor_Int16x4 },
        std::pair{ "operator^="_c, &Int16x4_operator_xorasg_Int16x4 },
        std::pair{ "operator^=(i16x4)"_c, &Int16x4_operator_xorasg_Int16x4 },
        std::pair{ "operator|"_c, &Int16x4_operator_or_Int16x4 },
        std::pair{ "operator|(i16x4)"_c, &Int16x4_operator_or_Int16x4 },
        std::pair{ "operator|="_c, &Int16x4_operator_orasg_Int16x4 },
        std::pair{ "operator|=(i16x4)"_c, &Int16x4_operator_orasg_Int16x4 },
        std::pair{ "r"_c, &Int16Type },
        std::pair{ "ra"_c, &Int16x2Type },
        std::pair{ "raa"_c, &Int16x3Type },
        std::pair{ "raaa"_c, &Int16x4Type },
        std::pair{ "raab"_c, &Int16x4Type },
        std::pair{ "raag"_c, &Int16x4Type },
        std::pair{ "raar"_c, &Int16x4Type },
        std::pair{ "rab"_c, &Int16x3Type },
        std::pair{ "raba"_c, &Int16x4Type },
        std::pair{ "rabb"_c, &Int16x4Type },
        std::pair{ "rabg"_c, &Int16x4Type },
        std::pair{ "rabr"_c, &Int16x4Type },
        std::pair{ "rag"_c, &Int16x3Type },
        std::pair{ "raga"_c, &Int16x4Type },
        std::pair{ "ragb"_c, &Int16x4Type },
        std::pair{ "ragg"_c, &Int16x4Type },
        std::pair{ "ragr"_c, &Int16x4Type },
        std::pair{ "rar"_c, &Int16x3Type },
        std::pair{ "rara"_c, &Int16x4Type },
        std::pair{ "rarb"_c, &Int16x4Type },
        std::pair{ "rarg"_c, &Int16x4Type },
        std::pair{ "rarr"_c, &Int16x4Type },
        std::pair{ "rb"_c, &Int16x2Type },
        std::pair{ "rba"_c, &Int16x3Type },
        std::pair{ "rbaa"_c, &Int16x4Type },
        std::pair{ "rbab"_c, &Int16x4Type },
        std::pair{ "rbag"_c, &Int16x4Type },
        std::pair{ "rbar"_c, &Int16x4Type },
        std::pair{ "rbb"_c, &Int16x3Type },
        std::pair{ "rbba"_c, &Int16x4Type },
        std::pair{ "rbbb"_c, &Int16x4Type },
        std::pair{ "rbbg"_c, &Int16x4Type },
        std::pair{ "rbbr"_c, &Int16x4Type },
        std::pair{ "rbg"_c, &Int16x3Type },
        std::pair{ "rbga"_c, &Int16x4Type },
        std::pair{ "rbgb"_c, &Int16x4Type },
        std::pair{ "rbgg"_c, &Int16x4Type },
        std::pair{ "rbgr"_c, &Int16x4Type },
        std::pair{ "rbr"_c, &Int16x3Type },
        std::pair{ "rbra"_c, &Int16x4Type },
        std::pair{ "rbrb"_c, &Int16x4Type },
        std::pair{ "rbrg"_c, &Int16x4Type },
        std::pair{ "rbrr"_c, &Int16x4Type },
        std::pair{ "rg"_c, &Int16x2Type },
        std::pair{ "rga"_c, &Int16x3Type },
        std::pair{ "rgaa"_c, &Int16x4Type },
        std::pair{ "rgab"_c, &Int16x4Type },
        std::pair{ "rgag"_c, &Int16x4Type },
        std::pair{ "rgar"_c, &Int16x4Type },
        std::pair{ "rgb"_c, &Int16x3Type },
        std::pair{ "rgba"_c, &Int16x4Type },
        std::pair{ "rgbb"_c, &Int16x4Type },
        std::pair{ "rgbg"_c, &Int16x4Type },
        std::pair{ "rgbr"_c, &Int16x4Type },
        std::pair{ "rgg"_c, &Int16x3Type },
        std::pair{ "rgga"_c, &Int16x4Type },
        std::pair{ "rggb"_c, &Int16x4Type },
        std::pair{ "rggg"_c, &Int16x4Type },
        std::pair{ "rggr"_c, &Int16x4Type },
        std::pair{ "rgr"_c, &Int16x3Type },
        std::pair{ "rgra"_c, &Int16x4Type },
        std::pair{ "rgrb"_c, &Int16x4Type },
        std::pair{ "rgrg"_c, &Int16x4Type },
        std::pair{ "rgrr"_c, &Int16x4Type },
        std::pair{ "rr"_c, &Int16x2Type },
        std::pair{ "rra"_c, &Int16x3Type },
        std::pair{ "rraa"_c, &Int16x4Type },
        std::pair{ "rrab"_c, &Int16x4Type },
        std::pair{ "rrag"_c, &Int16x4Type },
        std::pair{ "rrar"_c, &Int16x4Type },
        std::pair{ "rrb"_c, &Int16x3Type },
        std::pair{ "rrba"_c, &Int16x4Type },
        std::pair{ "rrbb"_c, &Int16x4Type },
        std::pair{ "rrbg"_c, &Int16x4Type },
        std::pair{ "rrbr"_c, &Int16x4Type },
        std::pair{ "rrg"_c, &Int16x3Type },
        std::pair{ "rrga"_c, &Int16x4Type },
        std::pair{ "rrgb"_c, &Int16x4Type },
        std::pair{ "rrgg"_c, &Int16x4Type },
        std::pair{ "rrgr"_c, &Int16x4Type },
        std::pair{ "rrr"_c, &Int16x3Type },
        std::pair{ "rrra"_c, &Int16x4Type },
        std::pair{ "rrrb"_c, &Int16x4Type },
        std::pair{ "rrrg"_c, &Int16x4Type },
        std::pair{ "rrrr"_c, &Int16x4Type },
        std::pair{ "w"_c, &Int16Type },
        std::pair{ "ww"_c, &Int16x2Type },
        std::pair{ "www"_c, &Int16x3Type },
        std::pair{ "wwww"_c, &Int16x4Type },
        std::pair{ "wwwx"_c, &Int16x4Type },
        std::pair{ "wwwy"_c, &Int16x4Type },
        std::pair{ "wwwz"_c, &Int16x4Type },
        std::pair{ "wwx"_c, &Int16x3Type },
        std::pair{ "wwxw"_c, &Int16x4Type },
        std::pair{ "wwxx"_c, &Int16x4Type },
        std::pair{ "wwxy"_c, &Int16x4Type },
        std::pair{ "wwxz"_c, &Int16x4Type },
        std::pair{ "wwy"_c, &Int16x3Type },
        std::pair{ "wwyw"_c, &Int16x4Type },
        std::pair{ "wwyx"_c, &Int16x4Type },
        std::pair{ "wwyy"_c, &Int16x4Type },
        std::pair{ "wwyz"_c, &Int16x4Type },
        std::pair{ "wwz"_c, &Int16x3Type },
        std::pair{ "wwzw"_c, &Int16x4Type },
        std::pair{ "wwzx"_c, &Int16x4Type },
        std::pair{ "wwzy"_c, &Int16x4Type },
        std::pair{ "wwzz"_c, &Int16x4Type },
        std::pair{ "wx"_c, &Int16x2Type },
        std::pair{ "wxw"_c, &Int16x3Type },
        std::pair{ "wxww"_c, &Int16x4Type },
        std::pair{ "wxwx"_c, &Int16x4Type },
        std::pair{ "wxwy"_c, &Int16x4Type },
        std::pair{ "wxwz"_c, &Int16x4Type },
        std::pair{ "wxx"_c, &Int16x3Type },
        std::pair{ "wxxw"_c, &Int16x4Type },
        std::pair{ "wxxx"_c, &Int16x4Type },
        std::pair{ "wxxy"_c, &Int16x4Type },
        std::pair{ "wxxz"_c, &Int16x4Type },
        std::pair{ "wxy"_c, &Int16x3Type },
        std::pair{ "wxyw"_c, &Int16x4Type },
        std::pair{ "wxyx"_c, &Int16x4Type },
        std::pair{ "wxyy"_c, &Int16x4Type },
        std::pair{ "wxyz"_c, &Int16x4Type },
        std::pair{ "wxz"_c, &Int16x3Type },
        std::pair{ "wxzw"_c, &Int16x4Type },
        std::pair{ "wxzx"_c, &Int16x4Type },
        std::pair{ "wxzy"_c, &Int16x4Type },
        std::pair{ "wxzz"_c, &Int16x4Type },
        std::pair{ "wy"_c, &Int16x2Type },
        std::pair{ "wyw"_c, &Int16x3Type },
        std::pair{ "wyww"_c, &Int16x4Type },
        std::pair{ "wywx"_c, &Int16x4Type },
        std::pair{ "wywy"_c, &Int16x4Type },
        std::pair{ "wywz"_c, &Int16x4Type },
        std::pair{ "wyx"_c, &Int16x3Type },
        std::pair{ "wyxw"_c, &Int16x4Type },
        std::pair{ "wyxx"_c, &Int16x4Type },
        std::pair{ "wyxy"_c, &Int16x4Type },
        std::pair{ "wyxz"_c, &Int16x4Type },
        std::pair{ "wyy"_c, &Int16x3Type },
        std::pair{ "wyyw"_c, &Int16x4Type },
        std::pair{ "wyyx"_c, &Int16x4Type },
        std::pair{ "wyyy"_c, &Int16x4Type },
        std::pair{ "wyyz"_c, &Int16x4Type },
        std::pair{ "wyz"_c, &Int16x3Type },
        std::pair{ "wyzw"_c, &Int16x4Type },
        std::pair{ "wyzx"_c, &Int16x4Type },
        std::pair{ "wyzy"_c, &Int16x4Type },
        std::pair{ "wyzz"_c, &Int16x4Type },
        std::pair{ "wz"_c, &Int16x2Type },
        std::pair{ "wzw"_c, &Int16x3Type },
        std::pair{ "wzww"_c, &Int16x4Type },
        std::pair{ "wzwx"_c, &Int16x4Type },
        std::pair{ "wzwy"_c, &Int16x4Type },
        std::pair{ "wzwz"_c, &Int16x4Type },
        std::pair{ "wzx"_c, &Int16x3Type },
        std::pair{ "wzxw"_c, &Int16x4Type },
        std::pair{ "wzxx"_c, &Int16x4Type },
        std::pair{ "wzxy"_c, &Int16x4Type },
        std::pair{ "wzxz"_c, &Int16x4Type },
        std::pair{ "wzy"_c, &Int16x3Type },
        std::pair{ "wzyw"_c, &Int16x4Type },
        std::pair{ "wzyx"_c, &Int16x4Type },
        std::pair{ "wzyy"_c, &Int16x4Type },
        std::pair{ "wzyz"_c, &Int16x4Type },
        std::pair{ "wzz"_c, &Int16x3Type },
        std::pair{ "wzzw"_c, &Int16x4Type },
        std::pair{ "wzzx"_c, &Int16x4Type },
        std::pair{ "wzzy"_c, &Int16x4Type },
        std::pair{ "wzzz"_c, &Int16x4Type },
        std::pair{ "x"_c, &Int16Type },
        std::pair{ "xw"_c, &Int16x2Type },
        std::pair{ "xww"_c, &Int16x3Type },
        std::pair{ "xwww"_c, &Int16x4Type },
        std::pair{ "xwwx"_c, &Int16x4Type },
        std::pair{ "xwwy"_c, &Int16x4Type },
        std::pair{ "xwwz"_c, &Int16x4Type },
        std::pair{ "xwx"_c, &Int16x3Type },
        std::pair{ "xwxw"_c, &Int16x4Type },
        std::pair{ "xwxx"_c, &Int16x4Type },
        std::pair{ "xwxy"_c, &Int16x4Type },
        std::pair{ "xwxz"_c, &Int16x4Type },
        std::pair{ "xwy"_c, &Int16x3Type },
        std::pair{ "xwyw"_c, &Int16x4Type },
        std::pair{ "xwyx"_c, &Int16x4Type },
        std::pair{ "xwyy"_c, &Int16x4Type },
        std::pair{ "xwyz"_c, &Int16x4Type },
        std::pair{ "xwz"_c, &Int16x3Type },
        std::pair{ "xwzw"_c, &Int16x4Type },
        std::pair{ "xwzx"_c, &Int16x4Type },
        std::pair{ "xwzy"_c, &Int16x4Type },
        std::pair{ "xwzz"_c, &Int16x4Type },
        std::pair{ "xx"_c, &Int16x2Type },
        std::pair{ "xxw"_c, &Int16x3Type },
        std::pair{ "xxww"_c, &Int16x4Type },
        std::pair{ "xxwx"_c, &Int16x4Type },
        std::pair{ "xxwy"_c, &Int16x4Type },
        std::pair{ "xxwz"_c, &Int16x4Type },
        std::pair{ "xxx"_c, &Int16x3Type },
        std::pair{ "xxxw"_c, &Int16x4Type },
        std::pair{ "xxxx"_c, &Int16x4Type },
        std::pair{ "xxxy"_c, &Int16x4Type },
        std::pair{ "xxxz"_c, &Int16x4Type },
        std::pair{ "xxy"_c, &Int16x3Type },
        std::pair{ "xxyw"_c, &Int16x4Type },
        std::pair{ "xxyx"_c, &Int16x4Type },
        std::pair{ "xxyy"_c, &Int16x4Type },
        std::pair{ "xxyz"_c, &Int16x4Type },
        std::pair{ "xxz"_c, &Int16x3Type },
        std::pair{ "xxzw"_c, &Int16x4Type },
        std::pair{ "xxzx"_c, &Int16x4Type },
        std::pair{ "xxzy"_c, &Int16x4Type },
        std::pair{ "xxzz"_c, &Int16x4Type },
        std::pair{ "xy"_c, &Int16x2Type },
        std::pair{ "xyw"_c, &Int16x3Type },
        std::pair{ "xyww"_c, &Int16x4Type },
        std::pair{ "xywx"_c, &Int16x4Type },
        std::pair{ "xywy"_c, &Int16x4Type },
        std::pair{ "xywz"_c, &Int16x4Type },
        std::pair{ "xyx"_c, &Int16x3Type },
        std::pair{ "xyxw"_c, &Int16x4Type },
        std::pair{ "xyxx"_c, &Int16x4Type },
        std::pair{ "xyxy"_c, &Int16x4Type },
        std::pair{ "xyxz"_c, &Int16x4Type },
        std::pair{ "xyy"_c, &Int16x3Type },
        std::pair{ "xyyw"_c, &Int16x4Type },
        std::pair{ "xyyx"_c, &Int16x4Type },
        std::pair{ "xyyy"_c, &Int16x4Type },
        std::pair{ "xyyz"_c, &Int16x4Type },
        std::pair{ "xyz"_c, &Int16x3Type },
        std::pair{ "xyzw"_c, &Int16x4Type },
        std::pair{ "xyzx"_c, &Int16x4Type },
        std::pair{ "xyzy"_c, &Int16x4Type },
        std::pair{ "xyzz"_c, &Int16x4Type },
        std::pair{ "xz"_c, &Int16x2Type },
        std::pair{ "xzw"_c, &Int16x3Type },
        std::pair{ "xzww"_c, &Int16x4Type },
        std::pair{ "xzwx"_c, &Int16x4Type },
        std::pair{ "xzwy"_c, &Int16x4Type },
        std::pair{ "xzwz"_c, &Int16x4Type },
        std::pair{ "xzx"_c, &Int16x3Type },
        std::pair{ "xzxw"_c, &Int16x4Type },
        std::pair{ "xzxx"_c, &Int16x4Type },
        std::pair{ "xzxy"_c, &Int16x4Type },
        std::pair{ "xzxz"_c, &Int16x4Type },
        std::pair{ "xzy"_c, &Int16x3Type },
        std::pair{ "xzyw"_c, &Int16x4Type },
        std::pair{ "xzyx"_c, &Int16x4Type },
        std::pair{ "xzyy"_c, &Int16x4Type },
        std::pair{ "xzyz"_c, &Int16x4Type },
        std::pair{ "xzz"_c, &Int16x3Type },
        std::pair{ "xzzw"_c, &Int16x4Type },
        std::pair{ "xzzx"_c, &Int16x4Type },
        std::pair{ "xzzy"_c, &Int16x4Type },
        std::pair{ "xzzz"_c, &Int16x4Type },
        std::pair{ "y"_c, &Int16Type },
        std::pair{ "yw"_c, &Int16x2Type },
        std::pair{ "yww"_c, &Int16x3Type },
        std::pair{ "ywww"_c, &Int16x4Type },
        std::pair{ "ywwx"_c, &Int16x4Type },
        std::pair{ "ywwy"_c, &Int16x4Type },
        std::pair{ "ywwz"_c, &Int16x4Type },
        std::pair{ "ywx"_c, &Int16x3Type },
        std::pair{ "ywxw"_c, &Int16x4Type },
        std::pair{ "ywxx"_c, &Int16x4Type },
        std::pair{ "ywxy"_c, &Int16x4Type },
        std::pair{ "ywxz"_c, &Int16x4Type },
        std::pair{ "ywy"_c, &Int16x3Type },
        std::pair{ "ywyw"_c, &Int16x4Type },
        std::pair{ "ywyx"_c, &Int16x4Type },
        std::pair{ "ywyy"_c, &Int16x4Type },
        std::pair{ "ywyz"_c, &Int16x4Type },
        std::pair{ "ywz"_c, &Int16x3Type },
        std::pair{ "ywzw"_c, &Int16x4Type },
        std::pair{ "ywzx"_c, &Int16x4Type },
        std::pair{ "ywzy"_c, &Int16x4Type },
        std::pair{ "ywzz"_c, &Int16x4Type },
        std::pair{ "yx"_c, &Int16x2Type },
        std::pair{ "yxw"_c, &Int16x3Type },
        std::pair{ "yxww"_c, &Int16x4Type },
        std::pair{ "yxwx"_c, &Int16x4Type },
        std::pair{ "yxwy"_c, &Int16x4Type },
        std::pair{ "yxwz"_c, &Int16x4Type },
        std::pair{ "yxx"_c, &Int16x3Type },
        std::pair{ "yxxw"_c, &Int16x4Type },
        std::pair{ "yxxx"_c, &Int16x4Type },
        std::pair{ "yxxy"_c, &Int16x4Type },
        std::pair{ "yxxz"_c, &Int16x4Type },
        std::pair{ "yxy"_c, &Int16x3Type },
        std::pair{ "yxyw"_c, &Int16x4Type },
        std::pair{ "yxyx"_c, &Int16x4Type },
        std::pair{ "yxyy"_c, &Int16x4Type },
        std::pair{ "yxyz"_c, &Int16x4Type },
        std::pair{ "yxz"_c, &Int16x3Type },
        std::pair{ "yxzw"_c, &Int16x4Type },
        std::pair{ "yxzx"_c, &Int16x4Type },
        std::pair{ "yxzy"_c, &Int16x4Type },
        std::pair{ "yxzz"_c, &Int16x4Type },
        std::pair{ "yy"_c, &Int16x2Type },
        std::pair{ "yyw"_c, &Int16x3Type },
        std::pair{ "yyww"_c, &Int16x4Type },
        std::pair{ "yywx"_c, &Int16x4Type },
        std::pair{ "yywy"_c, &Int16x4Type },
        std::pair{ "yywz"_c, &Int16x4Type },
        std::pair{ "yyx"_c, &Int16x3Type },
        std::pair{ "yyxw"_c, &Int16x4Type },
        std::pair{ "yyxx"_c, &Int16x4Type },
        std::pair{ "yyxy"_c, &Int16x4Type },
        std::pair{ "yyxz"_c, &Int16x4Type },
        std::pair{ "yyy"_c, &Int16x3Type },
        std::pair{ "yyyw"_c, &Int16x4Type },
        std::pair{ "yyyx"_c, &Int16x4Type },
        std::pair{ "yyyy"_c, &Int16x4Type },
        std::pair{ "yyyz"_c, &Int16x4Type },
        std::pair{ "yyz"_c, &Int16x3Type },
        std::pair{ "yyzw"_c, &Int16x4Type },
        std::pair{ "yyzx"_c, &Int16x4Type },
        std::pair{ "yyzy"_c, &Int16x4Type },
        std::pair{ "yyzz"_c, &Int16x4Type },
        std::pair{ "yz"_c, &Int16x2Type },
        std::pair{ "yzw"_c, &Int16x3Type },
        std::pair{ "yzww"_c, &Int16x4Type },
        std::pair{ "yzwx"_c, &Int16x4Type },
        std::pair{ "yzwy"_c, &Int16x4Type },
        std::pair{ "yzwz"_c, &Int16x4Type },
        std::pair{ "yzx"_c, &Int16x3Type },
        std::pair{ "yzxw"_c, &Int16x4Type },
        std::pair{ "yzxx"_c, &Int16x4Type },
        std::pair{ "yzxy"_c, &Int16x4Type },
        std::pair{ "yzxz"_c, &Int16x4Type },
        std::pair{ "yzy"_c, &Int16x3Type },
        std::pair{ "yzyw"_c, &Int16x4Type },
        std::pair{ "yzyx"_c, &Int16x4Type },
        std::pair{ "yzyy"_c, &Int16x4Type },
        std::pair{ "yzyz"_c, &Int16x4Type },
        std::pair{ "yzz"_c, &Int16x3Type },
        std::pair{ "yzzw"_c, &Int16x4Type },
        std::pair{ "yzzx"_c, &Int16x4Type },
        std::pair{ "yzzy"_c, &Int16x4Type },
        std::pair{ "yzzz"_c, &Int16x4Type },
        std::pair{ "z"_c, &Int16Type },
        std::pair{ "zw"_c, &Int16x2Type },
        std::pair{ "zww"_c, &Int16x3Type },
        std::pair{ "zwww"_c, &Int16x4Type },
        std::pair{ "zwwx"_c, &Int16x4Type },
        std::pair{ "zwwy"_c, &Int16x4Type },
        std::pair{ "zwwz"_c, &Int16x4Type },
        std::pair{ "zwx"_c, &Int16x3Type },
        std::pair{ "zwxw"_c, &Int16x4Type },
        std::pair{ "zwxx"_c, &Int16x4Type },
        std::pair{ "zwxy"_c, &Int16x4Type },
        std::pair{ "zwxz"_c, &Int16x4Type },
        std::pair{ "zwy"_c, &Int16x3Type },
        std::pair{ "zwyw"_c, &Int16x4Type },
        std::pair{ "zwyx"_c, &Int16x4Type },
        std::pair{ "zwyy"_c, &Int16x4Type },
        std::pair{ "zwyz"_c, &Int16x4Type },
        std::pair{ "zwz"_c, &Int16x3Type },
        std::pair{ "zwzw"_c, &Int16x4Type },
        std::pair{ "zwzx"_c, &Int16x4Type },
        std::pair{ "zwzy"_c, &Int16x4Type },
        std::pair{ "zwzz"_c, &Int16x4Type },
        std::pair{ "zx"_c, &Int16x2Type },
        std::pair{ "zxw"_c, &Int16x3Type },
        std::pair{ "zxww"_c, &Int16x4Type },
        std::pair{ "zxwx"_c, &Int16x4Type },
        std::pair{ "zxwy"_c, &Int16x4Type },
        std::pair{ "zxwz"_c, &Int16x4Type },
        std::pair{ "zxx"_c, &Int16x3Type },
        std::pair{ "zxxw"_c, &Int16x4Type },
        std::pair{ "zxxx"_c, &Int16x4Type },
        std::pair{ "zxxy"_c, &Int16x4Type },
        std::pair{ "zxxz"_c, &Int16x4Type },
        std::pair{ "zxy"_c, &Int16x3Type },
        std::pair{ "zxyw"_c, &Int16x4Type },
        std::pair{ "zxyx"_c, &Int16x4Type },
        std::pair{ "zxyy"_c, &Int16x4Type },
        std::pair{ "zxyz"_c, &Int16x4Type },
        std::pair{ "zxz"_c, &Int16x3Type },
        std::pair{ "zxzw"_c, &Int16x4Type },
        std::pair{ "zxzx"_c, &Int16x4Type },
        std::pair{ "zxzy"_c, &Int16x4Type },
        std::pair{ "zxzz"_c, &Int16x4Type },
        std::pair{ "zy"_c, &Int16x2Type },
        std::pair{ "zyw"_c, &Int16x3Type },
        std::pair{ "zyww"_c, &Int16x4Type },
        std::pair{ "zywx"_c, &Int16x4Type },
        std::pair{ "zywy"_c, &Int16x4Type },
        std::pair{ "zywz"_c, &Int16x4Type },
        std::pair{ "zyx"_c, &Int16x3Type },
        std::pair{ "zyxw"_c, &Int16x4Type },
        std::pair{ "zyxx"_c, &Int16x4Type },
        std::pair{ "zyxy"_c, &Int16x4Type },
        std::pair{ "zyxz"_c, &Int16x4Type },
        std::pair{ "zyy"_c, &Int16x3Type },
        std::pair{ "zyyw"_c, &Int16x4Type },
        std::pair{ "zyyx"_c, &Int16x4Type },
        std::pair{ "zyyy"_c, &Int16x4Type },
        std::pair{ "zyyz"_c, &Int16x4Type },
        std::pair{ "zyz"_c, &Int16x3Type },
        std::pair{ "zyzw"_c, &Int16x4Type },
        std::pair{ "zyzx"_c, &Int16x4Type },
        std::pair{ "zyzy"_c, &Int16x4Type },
        std::pair{ "zyzz"_c, &Int16x4Type },
        std::pair{ "zz"_c, &Int16x2Type },
        std::pair{ "zzw"_c, &Int16x3Type },
        std::pair{ "zzww"_c, &Int16x4Type },
        std::pair{ "zzwx"_c, &Int16x4Type },
        std::pair{ "zzwy"_c, &Int16x4Type },
        std::pair{ "zzwz"_c, &Int16x4Type },
        std::pair{ "zzx"_c, &Int16x3Type },
        std::pair{ "zzxw"_c, &Int16x4Type },
        std::pair{ "zzxx"_c, &Int16x4Type },
        std::pair{ "zzxy"_c, &Int16x4Type },
        std::pair{ "zzxz"_c, &Int16x4Type },
        std::pair{ "zzy"_c, &Int16x3Type },
        std::pair{ "zzyw"_c, &Int16x4Type },
        std::pair{ "zzyx"_c, &Int16x4Type },
        std::pair{ "zzyy"_c, &Int16x4Type },
        std::pair{ "zzyz"_c, &Int16x4Type },
        std::pair{ "zzz"_c, &Int16x3Type },
        std::pair{ "zzzw"_c, &Int16x4Type },
        std::pair{ "zzzx"_c, &Int16x4Type },
        std::pair{ "zzzy"_c, &Int16x4Type },
        std::pair{ "zzzz"_c, &Int16x4Type }
    };
}
Int16x4 Int16x4Type;

/// operator[] with Int32
Variable Float32x2x2_operator_index_Int32_arg;
Function Float32x2x2_operator_index_Int32;
inline constexpr std::array Float32x2x2_operator_index_Int32_args = { &Float32x2x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x2x2_operator_index_UInt32_arg;
Function Float32x2x2_operator_index_UInt32;
inline constexpr std::array Float32x2x2_operator_index_UInt32_args = { &Float32x2x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x2x2_operator_index_Int16_arg;
Function Float32x2x2_operator_index_Int16;
inline constexpr std::array Float32x2x2_operator_index_Int16_args = { &Float32x2x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x2x2_operator_index_UInt16_arg;
Function Float32x2x2_operator_index_UInt16;
inline constexpr std::array Float32x2x2_operator_index_UInt16_args = { &Float32x2x2_operator_index_UInt16_arg };

/// operator* with Float32x2
Variable Float32x2x2_transform_Float32x2_vec;
Function Float32x2x2_transform_Float32x2;
inline constexpr std::array Float32x2x2_transform_Float32x2_args = { &Float32x2x2_transform_Float32x2_vec };

/// operator+ with Float32x2x2
Variable Float32x2x2_operator_add_Float32x2x2_arg;
Function Float32x2x2_operator_add_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_add_Float32x2x2_args = { &Float32x2x2_operator_add_Float32x2x2_arg };

/// operator- with Float32x2x2
Variable Float32x2x2_operator_sub_Float32x2x2_arg;
Function Float32x2x2_operator_sub_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_sub_Float32x2x2_args = { &Float32x2x2_operator_sub_Float32x2x2_arg };

/// operator* with Float32x2x2
Variable Float32x2x2_operator_mul_Float32x2x2_arg;
Function Float32x2x2_operator_mul_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_mul_Float32x2x2_args = { &Float32x2x2_operator_mul_Float32x2x2_arg };

/// operator+= with Float32x2x2
Variable Float32x2x2_operator_addasg_Float32x2x2_arg;
Function Float32x2x2_operator_addasg_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_addasg_Float32x2x2_args = { &Float32x2x2_operator_addasg_Float32x2x2_arg };

/// operator-= with Float32x2x2
Variable Float32x2x2_operator_subasg_Float32x2x2_arg;
Function Float32x2x2_operator_subasg_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_subasg_Float32x2x2_args = { &Float32x2x2_operator_subasg_Float32x2x2_arg };

/// operator*= with Float32x2x2
Variable Float32x2x2_operator_mulasg_Float32x2x2_arg;
Function Float32x2x2_operator_mulasg_Float32x2x2;
inline constexpr std::array Float32x2x2_operator_mulasg_Float32x2x2_args = { &Float32x2x2_operator_mulasg_Float32x2x2_arg };

/// operator* with Float32
Variable Float32x2x2_operator_scale_Float32_arg;
Function Float32x2x2_operator_scale_Float32;
inline constexpr std::array Float32x2x2_operator_scale_Float32_args = { &Float32x2x2_operator_scale_Float32_arg };

Float32x2x2::Float32x2x2()
{
    this->name = "f32x2x2"_c;
    this->columnSize = 2;
    this->rowSize = 2;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x2x2_operator_index_Int32_arg.name = "idx"_c;
    Float32x2x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x2x2_operator_index_Int32.name = "operator[]"_c;
    Float32x2x2_operator_index_Int32.backendIndex = 1129;
    Float32x2x2_operator_index_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_operator_index_Int32.parameters = Float32x2x2_operator_index_Int32_args;
    Symbol::Resolved(&Float32x2x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2x2_operator_index_Int32)->signature = "f32x2 operator[](i32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_Int32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt32
    Float32x2x2_operator_index_UInt32_arg.name = "idx"_c;
    Float32x2x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x2x2_operator_index_UInt32.name = "operator[]"_c;
    Float32x2x2_operator_index_UInt32.backendIndex = 1130;
    Float32x2x2_operator_index_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_operator_index_UInt32.parameters = Float32x2x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32)->signature = "f32x2 operator[](u32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with Int16
    Float32x2x2_operator_index_Int16_arg.name = "idx"_c;
    Float32x2x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x2x2_operator_index_Int16.name = "operator[]"_c;
    Float32x2x2_operator_index_Int16.backendIndex = 1131;
    Float32x2x2_operator_index_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_operator_index_Int16.parameters = Float32x2x2_operator_index_Int16_args;
    Symbol::Resolved(&Float32x2x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2x2_operator_index_Int16)->signature = "f32x2 operator[](i16)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_Int16)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt16
    Float32x2x2_operator_index_UInt16_arg.name = "idx"_c;
    Float32x2x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x2x2_operator_index_UInt16.name = "operator[]"_c;
    Float32x2x2_operator_index_UInt16.backendIndex = 1132;
    Float32x2x2_operator_index_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_operator_index_UInt16.parameters = Float32x2x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16)->signature = "f32x2 operator[](u16)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x2x2_operator_index_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x2
    Float32x2x2_transform_Float32x2_vec.name = "vec"_c;
    Float32x2x2_transform_Float32x2_vec.type = Type::FullType{ Float32x2Type.name };
    Float32x2x2_transform_Float32x2.name = "operator*"_c;
    Float32x2x2_transform_Float32x2.backendIndex = 1133;
    Float32x2x2_transform_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x2_transform_Float32x2.parameters = Float32x2x2_transform_Float32x2_args;
    Symbol::Resolved(&Float32x2x2_transform_Float32x2_vec)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2x2_transform_Float32x2)->signature = "f32x2 operator*(f32x2)"_c;
    Symbol::Resolved(&Float32x2x2_transform_Float32x2)->name = "operator*(f32x2)"_c;
    Symbol::Resolved(&Float32x2x2_transform_Float32x2)->nameWithVarNames = "operator*(vec : f32x2)"_c;
    Symbol::Resolved(&Float32x2x2_transform_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator+ with Float32x2x2
    Float32x2x2_operator_add_Float32x2x2_arg.name = "arg"_c;
    Float32x2x2_operator_add_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_add_Float32x2x2.name = "operator+"_c;
    Float32x2x2_operator_add_Float32x2x2.backendIndex = 1134;
    Float32x2x2_operator_add_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_add_Float32x2x2.parameters = Float32x2x2_operator_add_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2)->signature = "f32x2x2 operator+(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2)->name = "operator+(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2)->nameWithVarNames = "operator+(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_add_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator- with Float32x2x2
    Float32x2x2_operator_sub_Float32x2x2_arg.name = "arg"_c;
    Float32x2x2_operator_sub_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_sub_Float32x2x2.name = "operator-"_c;
    Float32x2x2_operator_sub_Float32x2x2.backendIndex = 1135;
    Float32x2x2_operator_sub_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_sub_Float32x2x2.parameters = Float32x2x2_operator_sub_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2)->signature = "f32x2x2 operator-(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2)->name = "operator-(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2)->nameWithVarNames = "operator-(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_sub_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator* with Float32x2x2
    Float32x2x2_operator_mul_Float32x2x2_arg.name = "arg"_c;
    Float32x2x2_operator_mul_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_mul_Float32x2x2.name = "operator*"_c;
    Float32x2x2_operator_mul_Float32x2x2.backendIndex = 1136;
    Float32x2x2_operator_mul_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_mul_Float32x2x2.parameters = Float32x2x2_operator_mul_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2)->signature = "f32x2x2 operator*(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2)->name = "operator*(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2)->nameWithVarNames = "operator*(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_mul_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator+= with Float32x2x2
    Float32x2x2_operator_addasg_Float32x2x2_arg.name = "arg"_c;
    Float32x2x2_operator_addasg_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_addasg_Float32x2x2.name = "operator+="_c;
    Float32x2x2_operator_addasg_Float32x2x2.backendIndex = 1137;
    Float32x2x2_operator_addasg_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_addasg_Float32x2x2.parameters = Float32x2x2_operator_addasg_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2)->signature = "f32x2x2 operator+=(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2)->name = "operator+=(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2)->nameWithVarNames = "operator+=(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_addasg_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator-= with Float32x2x2
    Float32x2x2_operator_subasg_Float32x2x2_arg.name = "arg"_c;
    Float32x2x2_operator_subasg_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_subasg_Float32x2x2.name = "operator-="_c;
    Float32x2x2_operator_subasg_Float32x2x2.backendIndex = 1138;
    Float32x2x2_operator_subasg_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_subasg_Float32x2x2.parameters = Float32x2x2_operator_subasg_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2)->signature = "f32x2x2 operator-=(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2)->name = "operator-=(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2)->nameWithVarNames = "operator-=(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_subasg_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator*= with Float32x2x2
    Float32x2x2_operator_mulasg_Float32x2x2_arg.name = "arg"_c;
    Float32x2x2_operator_mulasg_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    Float32x2x2_operator_mulasg_Float32x2x2.name = "operator*="_c;
    Float32x2x2_operator_mulasg_Float32x2x2.backendIndex = 1139;
    Float32x2x2_operator_mulasg_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_mulasg_Float32x2x2.parameters = Float32x2x2_operator_mulasg_Float32x2x2_args;
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2)->signature = "f32x2x2 operator*=(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2)->name = "operator*=(f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2)->nameWithVarNames = "operator*=(arg : f32x2x2)"_c;
    Symbol::Resolved(&Float32x2x2_operator_mulasg_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// operator* with Float32
    Float32x2x2_operator_scale_Float32_arg.name = "arg"_c;
    Float32x2x2_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x2x2_operator_scale_Float32.name = "operator*"_c;
    Float32x2x2_operator_scale_Float32.backendIndex = 1140;
    Float32x2x2_operator_scale_Float32.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_operator_scale_Float32.parameters = Float32x2x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32)->signature = "f32x2x2 operator*(f32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x2x2_operator_scale_Float32)->returnTypeSymbol = &Float32x2x2Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float32x2x2_transform_Float32x2 },
        std::pair{ "operator*"_c, &Float32x2x2_operator_mul_Float32x2x2 },
        std::pair{ "operator*"_c, &Float32x2x2_operator_scale_Float32 },
        std::pair{ "operator*(f32)"_c, &Float32x2x2_operator_scale_Float32 },
        std::pair{ "operator*(f32x2)"_c, &Float32x2x2_transform_Float32x2 },
        std::pair{ "operator*(f32x2x2)"_c, &Float32x2x2_operator_mul_Float32x2x2 },
        std::pair{ "operator*="_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
        std::pair{ "operator*=(f32x2x2)"_c, &Float32x2x2_operator_mulasg_Float32x2x2 },
        std::pair{ "operator+"_c, &Float32x2x2_operator_add_Float32x2x2 },
        std::pair{ "operator+(f32x2x2)"_c, &Float32x2x2_operator_add_Float32x2x2 },
        std::pair{ "operator+="_c, &Float32x2x2_operator_addasg_Float32x2x2 },
        std::pair{ "operator+=(f32x2x2)"_c, &Float32x2x2_operator_addasg_Float32x2x2 },
        std::pair{ "operator-"_c, &Float32x2x2_operator_sub_Float32x2x2 },
        std::pair{ "operator-(f32x2x2)"_c, &Float32x2x2_operator_sub_Float32x2x2 },
        std::pair{ "operator-="_c, &Float32x2x2_operator_subasg_Float32x2x2 },
        std::pair{ "operator-=(f32x2x2)"_c, &Float32x2x2_operator_subasg_Float32x2x2 },
        std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32x2x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32x2x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32x2x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32x2x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32x2x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32x2x2_operator_index_UInt32 }
    };
}
Float32x2x2 Float32x2x2Type;

/// operator[] with Int32
Variable Float32x3x2_operator_index_Int32_arg;
Function Float32x3x2_operator_index_Int32;
inline constexpr std::array Float32x3x2_operator_index_Int32_args = { &Float32x3x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x3x2_operator_index_UInt32_arg;
Function Float32x3x2_operator_index_UInt32;
inline constexpr std::array Float32x3x2_operator_index_UInt32_args = { &Float32x3x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x3x2_operator_index_Int16_arg;
Function Float32x3x2_operator_index_Int16;
inline constexpr std::array Float32x3x2_operator_index_Int16_args = { &Float32x3x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x3x2_operator_index_UInt16_arg;
Function Float32x3x2_operator_index_UInt16;
inline constexpr std::array Float32x3x2_operator_index_UInt16_args = { &Float32x3x2_operator_index_UInt16_arg };

/// operator* with Float32x2
Variable Float32x3x2_transform_Float32x3_vec;
Function Float32x3x2_transform_Float32x3;
inline constexpr std::array Float32x3x2_transform_Float32x3_args = { &Float32x3x2_transform_Float32x3_vec };

/// operator+ with Float32x3x2
Variable Float32x3x2_operator_add_Float32x3x2_arg;
Function Float32x3x2_operator_add_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_add_Float32x3x2_args = { &Float32x3x2_operator_add_Float32x3x2_arg };

/// operator- with Float32x3x2
Variable Float32x3x2_operator_sub_Float32x3x2_arg;
Function Float32x3x2_operator_sub_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_sub_Float32x3x2_args = { &Float32x3x2_operator_sub_Float32x3x2_arg };

/// operator* with Float32x3x2
Variable Float32x3x2_operator_mul_Float32x3x2_arg;
Function Float32x3x2_operator_mul_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_mul_Float32x3x2_args = { &Float32x3x2_operator_mul_Float32x3x2_arg };

/// operator+= with Float32x3x2
Variable Float32x3x2_operator_addasg_Float32x3x2_arg;
Function Float32x3x2_operator_addasg_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_addasg_Float32x3x2_args = { &Float32x3x2_operator_addasg_Float32x3x2_arg };

/// operator-= with Float32x3x2
Variable Float32x3x2_operator_subasg_Float32x3x2_arg;
Function Float32x3x2_operator_subasg_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_subasg_Float32x3x2_args = { &Float32x3x2_operator_subasg_Float32x3x2_arg };

/// operator*= with Float32x3x2
Variable Float32x3x2_operator_mulasg_Float32x3x2_arg;
Function Float32x3x2_operator_mulasg_Float32x3x2;
inline constexpr std::array Float32x3x2_operator_mulasg_Float32x3x2_args = { &Float32x3x2_operator_mulasg_Float32x3x2_arg };

/// operator* with Float32
Variable Float32x3x2_operator_scale_Float32_arg;
Function Float32x3x2_operator_scale_Float32;
inline constexpr std::array Float32x3x2_operator_scale_Float32_args = { &Float32x3x2_operator_scale_Float32_arg };

Float32x3x2::Float32x3x2()
{
    this->name = "f32x3x2"_c;
    this->columnSize = 3;
    this->rowSize = 2;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x3x2_operator_index_Int32_arg.name = "idx"_c;
    Float32x3x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x3x2_operator_index_Int32.name = "operator[]"_c;
    Float32x3x2_operator_index_Int32.backendIndex = 1143;
    Float32x3x2_operator_index_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x2_operator_index_Int32.parameters = Float32x3x2_operator_index_Int32_args;
    Symbol::Resolved(&Float32x3x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3x2_operator_index_Int32)->signature = "f32x3 operator[](i32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_Int32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt32
    Float32x3x2_operator_index_UInt32_arg.name = "idx"_c;
    Float32x3x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x3x2_operator_index_UInt32.name = "operator[]"_c;
    Float32x3x2_operator_index_UInt32.backendIndex = 1144;
    Float32x3x2_operator_index_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x2_operator_index_UInt32.parameters = Float32x3x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32)->signature = "f32x3 operator[](u32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with Int16
    Float32x3x2_operator_index_Int16_arg.name = "idx"_c;
    Float32x3x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x3x2_operator_index_Int16.name = "operator[]"_c;
    Float32x3x2_operator_index_Int16.backendIndex = 1145;
    Float32x3x2_operator_index_Int16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x2_operator_index_Int16.parameters = Float32x3x2_operator_index_Int16_args;
    Symbol::Resolved(&Float32x3x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3x2_operator_index_Int16)->signature = "f32x3 operator[](i16)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_Int16)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt16
    Float32x3x2_operator_index_UInt16_arg.name = "idx"_c;
    Float32x3x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x3x2_operator_index_UInt16.name = "operator[]"_c;
    Float32x3x2_operator_index_UInt16.backendIndex = 1146;
    Float32x3x2_operator_index_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x2_operator_index_UInt16.parameters = Float32x3x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16)->signature = "f32x3 operator[](u16)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x3x2_operator_index_UInt16)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x2
    Float32x3x2_transform_Float32x3_vec.name = "vec"_c;
    Float32x3x2_transform_Float32x3_vec.type = Type::FullType{ Float32x2Type.name };
    Float32x3x2_transform_Float32x3.name = "operator*"_c;
    Float32x3x2_transform_Float32x3.backendIndex = 1147;
    Float32x3x2_transform_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x2_transform_Float32x3.parameters = Float32x3x2_transform_Float32x3_args;
    Symbol::Resolved(&Float32x3x2_transform_Float32x3_vec)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3x2_transform_Float32x3)->signature = "f32x3 operator*(f32x2)"_c;
    Symbol::Resolved(&Float32x3x2_transform_Float32x3)->name = "operator*(f32x2)"_c;
    Symbol::Resolved(&Float32x3x2_transform_Float32x3)->nameWithVarNames = "operator*(vec : f32x2)"_c;
    Symbol::Resolved(&Float32x3x2_transform_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator+ with Float32x3x2
    Float32x3x2_operator_add_Float32x3x2_arg.name = "arg"_c;
    Float32x3x2_operator_add_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_add_Float32x3x2.name = "operator+"_c;
    Float32x3x2_operator_add_Float32x3x2.backendIndex = 1148;
    Float32x3x2_operator_add_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_add_Float32x3x2.parameters = Float32x3x2_operator_add_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2)->signature = "f32x3x2 operator+(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2)->name = "operator+(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2)->nameWithVarNames = "operator+(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_add_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator- with Float32x3x2
    Float32x3x2_operator_sub_Float32x3x2_arg.name = "arg"_c;
    Float32x3x2_operator_sub_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_sub_Float32x3x2.name = "operator-"_c;
    Float32x3x2_operator_sub_Float32x3x2.backendIndex = 1149;
    Float32x3x2_operator_sub_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_sub_Float32x3x2.parameters = Float32x3x2_operator_sub_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2)->signature = "f32x3x2 operator-(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2)->name = "operator-(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2)->nameWithVarNames = "operator-(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_sub_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator* with Float32x3x2
    Float32x3x2_operator_mul_Float32x3x2_arg.name = "arg"_c;
    Float32x3x2_operator_mul_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_mul_Float32x3x2.name = "operator*"_c;
    Float32x3x2_operator_mul_Float32x3x2.backendIndex = 1150;
    Float32x3x2_operator_mul_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_mul_Float32x3x2.parameters = Float32x3x2_operator_mul_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2)->signature = "f32x3x2 operator*(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2)->name = "operator*(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2)->nameWithVarNames = "operator*(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_mul_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator+= with Float32x3x2
    Float32x3x2_operator_addasg_Float32x3x2_arg.name = "arg"_c;
    Float32x3x2_operator_addasg_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_addasg_Float32x3x2.name = "operator+="_c;
    Float32x3x2_operator_addasg_Float32x3x2.backendIndex = 1151;
    Float32x3x2_operator_addasg_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_addasg_Float32x3x2.parameters = Float32x3x2_operator_addasg_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2)->signature = "f32x3x2 operator+=(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2)->name = "operator+=(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2)->nameWithVarNames = "operator+=(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_addasg_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator-= with Float32x3x2
    Float32x3x2_operator_subasg_Float32x3x2_arg.name = "arg"_c;
    Float32x3x2_operator_subasg_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_subasg_Float32x3x2.name = "operator-="_c;
    Float32x3x2_operator_subasg_Float32x3x2.backendIndex = 1152;
    Float32x3x2_operator_subasg_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_subasg_Float32x3x2.parameters = Float32x3x2_operator_subasg_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2)->signature = "f32x3x2 operator-=(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2)->name = "operator-=(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2)->nameWithVarNames = "operator-=(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_subasg_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator*= with Float32x3x2
    Float32x3x2_operator_mulasg_Float32x3x2_arg.name = "arg"_c;
    Float32x3x2_operator_mulasg_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    Float32x3x2_operator_mulasg_Float32x3x2.name = "operator*="_c;
    Float32x3x2_operator_mulasg_Float32x3x2.backendIndex = 1153;
    Float32x3x2_operator_mulasg_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_mulasg_Float32x3x2.parameters = Float32x3x2_operator_mulasg_Float32x3x2_args;
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2)->signature = "f32x3x2 operator*=(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2)->name = "operator*=(f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2)->nameWithVarNames = "operator*=(arg : f32x3x2)"_c;
    Symbol::Resolved(&Float32x3x2_operator_mulasg_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// operator* with Float32
    Float32x3x2_operator_scale_Float32_arg.name = "arg"_c;
    Float32x3x2_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x3x2_operator_scale_Float32.name = "operator*"_c;
    Float32x3x2_operator_scale_Float32.backendIndex = 1154;
    Float32x3x2_operator_scale_Float32.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_operator_scale_Float32.parameters = Float32x3x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32)->signature = "f32x3x2 operator*(f32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x3x2_operator_scale_Float32)->returnTypeSymbol = &Float32x3x2Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float32x3x2_transform_Float32x3 },
        std::pair{ "operator*"_c, &Float32x3x2_operator_mul_Float32x3x2 },
        std::pair{ "operator*"_c, &Float32x3x2_operator_scale_Float32 },
        std::pair{ "operator*(f32)"_c, &Float32x3x2_operator_scale_Float32 },
        std::pair{ "operator*(f32x2)"_c, &Float32x3x2_transform_Float32x3 },
        std::pair{ "operator*(f32x3x2)"_c, &Float32x3x2_operator_mul_Float32x3x2 },
        std::pair{ "operator*="_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
        std::pair{ "operator*=(f32x3x2)"_c, &Float32x3x2_operator_mulasg_Float32x3x2 },
        std::pair{ "operator+"_c, &Float32x3x2_operator_add_Float32x3x2 },
        std::pair{ "operator+(f32x3x2)"_c, &Float32x3x2_operator_add_Float32x3x2 },
        std::pair{ "operator+="_c, &Float32x3x2_operator_addasg_Float32x3x2 },
        std::pair{ "operator+=(f32x3x2)"_c, &Float32x3x2_operator_addasg_Float32x3x2 },
        std::pair{ "operator-"_c, &Float32x3x2_operator_sub_Float32x3x2 },
        std::pair{ "operator-(f32x3x2)"_c, &Float32x3x2_operator_sub_Float32x3x2 },
        std::pair{ "operator-="_c, &Float32x3x2_operator_subasg_Float32x3x2 },
        std::pair{ "operator-=(f32x3x2)"_c, &Float32x3x2_operator_subasg_Float32x3x2 },
        std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32x3x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32x3x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32x3x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32x3x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32x3x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32x3x2_operator_index_UInt32 }
    };
}
Float32x3x2 Float32x3x2Type;

/// operator[] with Int32
Variable Float32x4x2_operator_index_Int32_arg;
Function Float32x4x2_operator_index_Int32;
inline constexpr std::array Float32x4x2_operator_index_Int32_args = { &Float32x4x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x4x2_operator_index_UInt32_arg;
Function Float32x4x2_operator_index_UInt32;
inline constexpr std::array Float32x4x2_operator_index_UInt32_args = { &Float32x4x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x4x2_operator_index_Int16_arg;
Function Float32x4x2_operator_index_Int16;
inline constexpr std::array Float32x4x2_operator_index_Int16_args = { &Float32x4x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x4x2_operator_index_UInt16_arg;
Function Float32x4x2_operator_index_UInt16;
inline constexpr std::array Float32x4x2_operator_index_UInt16_args = { &Float32x4x2_operator_index_UInt16_arg };

/// operator* with Float32x2
Variable Float32x4x2_transform_Float32x4_vec;
Function Float32x4x2_transform_Float32x4;
inline constexpr std::array Float32x4x2_transform_Float32x4_args = { &Float32x4x2_transform_Float32x4_vec };

/// operator+ with Float32x4x2
Variable Float32x4x2_operator_add_Float32x4x2_arg;
Function Float32x4x2_operator_add_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_add_Float32x4x2_args = { &Float32x4x2_operator_add_Float32x4x2_arg };

/// operator- with Float32x4x2
Variable Float32x4x2_operator_sub_Float32x4x2_arg;
Function Float32x4x2_operator_sub_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_sub_Float32x4x2_args = { &Float32x4x2_operator_sub_Float32x4x2_arg };

/// operator* with Float32x4x2
Variable Float32x4x2_operator_mul_Float32x4x2_arg;
Function Float32x4x2_operator_mul_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_mul_Float32x4x2_args = { &Float32x4x2_operator_mul_Float32x4x2_arg };

/// operator+= with Float32x4x2
Variable Float32x4x2_operator_addasg_Float32x4x2_arg;
Function Float32x4x2_operator_addasg_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_addasg_Float32x4x2_args = { &Float32x4x2_operator_addasg_Float32x4x2_arg };

/// operator-= with Float32x4x2
Variable Float32x4x2_operator_subasg_Float32x4x2_arg;
Function Float32x4x2_operator_subasg_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_subasg_Float32x4x2_args = { &Float32x4x2_operator_subasg_Float32x4x2_arg };

/// operator*= with Float32x4x2
Variable Float32x4x2_operator_mulasg_Float32x4x2_arg;
Function Float32x4x2_operator_mulasg_Float32x4x2;
inline constexpr std::array Float32x4x2_operator_mulasg_Float32x4x2_args = { &Float32x4x2_operator_mulasg_Float32x4x2_arg };

/// operator* with Float32
Variable Float32x4x2_operator_scale_Float32_arg;
Function Float32x4x2_operator_scale_Float32;
inline constexpr std::array Float32x4x2_operator_scale_Float32_args = { &Float32x4x2_operator_scale_Float32_arg };

Float32x4x2::Float32x4x2()
{
    this->name = "f32x4x2"_c;
    this->columnSize = 4;
    this->rowSize = 2;
    this->byteSize = 32;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x4x2_operator_index_Int32_arg.name = "idx"_c;
    Float32x4x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x4x2_operator_index_Int32.name = "operator[]"_c;
    Float32x4x2_operator_index_Int32.backendIndex = 1157;
    Float32x4x2_operator_index_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x2_operator_index_Int32.parameters = Float32x4x2_operator_index_Int32_args;
    Symbol::Resolved(&Float32x4x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4x2_operator_index_Int32)->signature = "f32x4 operator[](i32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_Int32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt32
    Float32x4x2_operator_index_UInt32_arg.name = "idx"_c;
    Float32x4x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x4x2_operator_index_UInt32.name = "operator[]"_c;
    Float32x4x2_operator_index_UInt32.backendIndex = 1158;
    Float32x4x2_operator_index_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x2_operator_index_UInt32.parameters = Float32x4x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32)->signature = "f32x4 operator[](u32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with Int16
    Float32x4x2_operator_index_Int16_arg.name = "idx"_c;
    Float32x4x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x4x2_operator_index_Int16.name = "operator[]"_c;
    Float32x4x2_operator_index_Int16.backendIndex = 1159;
    Float32x4x2_operator_index_Int16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x2_operator_index_Int16.parameters = Float32x4x2_operator_index_Int16_args;
    Symbol::Resolved(&Float32x4x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4x2_operator_index_Int16)->signature = "f32x4 operator[](i16)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_Int16)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt16
    Float32x4x2_operator_index_UInt16_arg.name = "idx"_c;
    Float32x4x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x4x2_operator_index_UInt16.name = "operator[]"_c;
    Float32x4x2_operator_index_UInt16.backendIndex = 1160;
    Float32x4x2_operator_index_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x2_operator_index_UInt16.parameters = Float32x4x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16)->signature = "f32x4 operator[](u16)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x4x2_operator_index_UInt16)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32x2
    Float32x4x2_transform_Float32x4_vec.name = "vec"_c;
    Float32x4x2_transform_Float32x4_vec.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_transform_Float32x4.name = "operator*"_c;
    Float32x4x2_transform_Float32x4.backendIndex = 1161;
    Float32x4x2_transform_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x2_transform_Float32x4.parameters = Float32x4x2_transform_Float32x4_args;
    Symbol::Resolved(&Float32x4x2_transform_Float32x4_vec)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_transform_Float32x4)->signature = "f32x4 operator*(f32x2)"_c;
    Symbol::Resolved(&Float32x4x2_transform_Float32x4)->name = "operator*(f32x2)"_c;
    Symbol::Resolved(&Float32x4x2_transform_Float32x4)->nameWithVarNames = "operator*(vec : f32x2)"_c;
    Symbol::Resolved(&Float32x4x2_transform_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator+ with Float32x4x2
    Float32x4x2_operator_add_Float32x4x2_arg.name = "arg"_c;
    Float32x4x2_operator_add_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_add_Float32x4x2.name = "operator+"_c;
    Float32x4x2_operator_add_Float32x4x2.backendIndex = 1162;
    Float32x4x2_operator_add_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_add_Float32x4x2.parameters = Float32x4x2_operator_add_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2)->signature = "f32x4x2 operator+(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2)->name = "operator+(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2)->nameWithVarNames = "operator+(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_add_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator- with Float32x4x2
    Float32x4x2_operator_sub_Float32x4x2_arg.name = "arg"_c;
    Float32x4x2_operator_sub_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_sub_Float32x4x2.name = "operator-"_c;
    Float32x4x2_operator_sub_Float32x4x2.backendIndex = 1163;
    Float32x4x2_operator_sub_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_sub_Float32x4x2.parameters = Float32x4x2_operator_sub_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2)->signature = "f32x4x2 operator-(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2)->name = "operator-(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2)->nameWithVarNames = "operator-(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_sub_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator* with Float32x4x2
    Float32x4x2_operator_mul_Float32x4x2_arg.name = "arg"_c;
    Float32x4x2_operator_mul_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_mul_Float32x4x2.name = "operator*"_c;
    Float32x4x2_operator_mul_Float32x4x2.backendIndex = 1164;
    Float32x4x2_operator_mul_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_mul_Float32x4x2.parameters = Float32x4x2_operator_mul_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2)->signature = "f32x4x2 operator*(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2)->name = "operator*(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2)->nameWithVarNames = "operator*(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_mul_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator+= with Float32x4x2
    Float32x4x2_operator_addasg_Float32x4x2_arg.name = "arg"_c;
    Float32x4x2_operator_addasg_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_addasg_Float32x4x2.name = "operator+="_c;
    Float32x4x2_operator_addasg_Float32x4x2.backendIndex = 1165;
    Float32x4x2_operator_addasg_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_addasg_Float32x4x2.parameters = Float32x4x2_operator_addasg_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2)->signature = "f32x4x2 operator+=(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2)->name = "operator+=(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2)->nameWithVarNames = "operator+=(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_addasg_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator-= with Float32x4x2
    Float32x4x2_operator_subasg_Float32x4x2_arg.name = "arg"_c;
    Float32x4x2_operator_subasg_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_subasg_Float32x4x2.name = "operator-="_c;
    Float32x4x2_operator_subasg_Float32x4x2.backendIndex = 1166;
    Float32x4x2_operator_subasg_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_subasg_Float32x4x2.parameters = Float32x4x2_operator_subasg_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2)->signature = "f32x4x2 operator-=(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2)->name = "operator-=(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2)->nameWithVarNames = "operator-=(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_subasg_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator*= with Float32x4x2
    Float32x4x2_operator_mulasg_Float32x4x2_arg.name = "arg"_c;
    Float32x4x2_operator_mulasg_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    Float32x4x2_operator_mulasg_Float32x4x2.name = "operator*="_c;
    Float32x4x2_operator_mulasg_Float32x4x2.backendIndex = 1167;
    Float32x4x2_operator_mulasg_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_mulasg_Float32x4x2.parameters = Float32x4x2_operator_mulasg_Float32x4x2_args;
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2)->signature = "f32x4x2 operator*=(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2)->name = "operator*=(f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2)->nameWithVarNames = "operator*=(arg : f32x4x2)"_c;
    Symbol::Resolved(&Float32x4x2_operator_mulasg_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// operator* with Float32
    Float32x4x2_operator_scale_Float32_arg.name = "arg"_c;
    Float32x4x2_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x4x2_operator_scale_Float32.name = "operator*"_c;
    Float32x4x2_operator_scale_Float32.backendIndex = 1168;
    Float32x4x2_operator_scale_Float32.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_operator_scale_Float32.parameters = Float32x4x2_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32)->signature = "f32x4x2 operator*(f32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x4x2_operator_scale_Float32)->returnTypeSymbol = &Float32x4x2Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float32x4x2_transform_Float32x4 },
        std::pair{ "operator*"_c, &Float32x4x2_operator_mul_Float32x4x2 },
        std::pair{ "operator*"_c, &Float32x4x2_operator_scale_Float32 },
        std::pair{ "operator*(f32)"_c, &Float32x4x2_operator_scale_Float32 },
        std::pair{ "operator*(f32x2)"_c, &Float32x4x2_transform_Float32x4 },
        std::pair{ "operator*(f32x4x2)"_c, &Float32x4x2_operator_mul_Float32x4x2 },
        std::pair{ "operator*="_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
        std::pair{ "operator*=(f32x4x2)"_c, &Float32x4x2_operator_mulasg_Float32x4x2 },
        std::pair{ "operator+"_c, &Float32x4x2_operator_add_Float32x4x2 },
        std::pair{ "operator+(f32x4x2)"_c, &Float32x4x2_operator_add_Float32x4x2 },
        std::pair{ "operator+="_c, &Float32x4x2_operator_addasg_Float32x4x2 },
        std::pair{ "operator+=(f32x4x2)"_c, &Float32x4x2_operator_addasg_Float32x4x2 },
        std::pair{ "operator-"_c, &Float32x4x2_operator_sub_Float32x4x2 },
        std::pair{ "operator-(f32x4x2)"_c, &Float32x4x2_operator_sub_Float32x4x2 },
        std::pair{ "operator-="_c, &Float32x4x2_operator_subasg_Float32x4x2 },
        std::pair{ "operator-=(f32x4x2)"_c, &Float32x4x2_operator_subasg_Float32x4x2 },
        std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32x4x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32x4x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32x4x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32x4x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32x4x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32x4x2_operator_index_UInt32 }
    };
}
Float32x4x2 Float32x4x2Type;

/// operator[] with Int32
Variable Float32x2x3_operator_index_Int32_arg;
Function Float32x2x3_operator_index_Int32;
inline constexpr std::array Float32x2x3_operator_index_Int32_args = { &Float32x2x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x2x3_operator_index_UInt32_arg;
Function Float32x2x3_operator_index_UInt32;
inline constexpr std::array Float32x2x3_operator_index_UInt32_args = { &Float32x2x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x2x3_operator_index_Int16_arg;
Function Float32x2x3_operator_index_Int16;
inline constexpr std::array Float32x2x3_operator_index_Int16_args = { &Float32x2x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x2x3_operator_index_UInt16_arg;
Function Float32x2x3_operator_index_UInt16;
inline constexpr std::array Float32x2x3_operator_index_UInt16_args = { &Float32x2x3_operator_index_UInt16_arg };

/// operator* with Float32x3
Variable Float32x2x3_transform_Float32x2_vec;
Function Float32x2x3_transform_Float32x2;
inline constexpr std::array Float32x2x3_transform_Float32x2_args = { &Float32x2x3_transform_Float32x2_vec };

/// operator+ with Float32x2x3
Variable Float32x2x3_operator_add_Float32x2x3_arg;
Function Float32x2x3_operator_add_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_add_Float32x2x3_args = { &Float32x2x3_operator_add_Float32x2x3_arg };

/// operator- with Float32x2x3
Variable Float32x2x3_operator_sub_Float32x2x3_arg;
Function Float32x2x3_operator_sub_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_sub_Float32x2x3_args = { &Float32x2x3_operator_sub_Float32x2x3_arg };

/// operator* with Float32x2x3
Variable Float32x2x3_operator_mul_Float32x2x3_arg;
Function Float32x2x3_operator_mul_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_mul_Float32x2x3_args = { &Float32x2x3_operator_mul_Float32x2x3_arg };

/// operator+= with Float32x2x3
Variable Float32x2x3_operator_addasg_Float32x2x3_arg;
Function Float32x2x3_operator_addasg_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_addasg_Float32x2x3_args = { &Float32x2x3_operator_addasg_Float32x2x3_arg };

/// operator-= with Float32x2x3
Variable Float32x2x3_operator_subasg_Float32x2x3_arg;
Function Float32x2x3_operator_subasg_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_subasg_Float32x2x3_args = { &Float32x2x3_operator_subasg_Float32x2x3_arg };

/// operator*= with Float32x2x3
Variable Float32x2x3_operator_mulasg_Float32x2x3_arg;
Function Float32x2x3_operator_mulasg_Float32x2x3;
inline constexpr std::array Float32x2x3_operator_mulasg_Float32x2x3_args = { &Float32x2x3_operator_mulasg_Float32x2x3_arg };

/// operator* with Float32
Variable Float32x2x3_operator_scale_Float32_arg;
Function Float32x2x3_operator_scale_Float32;
inline constexpr std::array Float32x2x3_operator_scale_Float32_args = { &Float32x2x3_operator_scale_Float32_arg };

Float32x2x3::Float32x2x3()
{
    this->name = "f32x2x3"_c;
    this->columnSize = 2;
    this->rowSize = 3;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x2x3_operator_index_Int32_arg.name = "idx"_c;
    Float32x2x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x2x3_operator_index_Int32.name = "operator[]"_c;
    Float32x2x3_operator_index_Int32.backendIndex = 1171;
    Float32x2x3_operator_index_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x3_operator_index_Int32.parameters = Float32x2x3_operator_index_Int32_args;
    Symbol::Resolved(&Float32x2x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2x3_operator_index_Int32)->signature = "f32x2 operator[](i32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_Int32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt32
    Float32x2x3_operator_index_UInt32_arg.name = "idx"_c;
    Float32x2x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x2x3_operator_index_UInt32.name = "operator[]"_c;
    Float32x2x3_operator_index_UInt32.backendIndex = 1172;
    Float32x2x3_operator_index_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x3_operator_index_UInt32.parameters = Float32x2x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32)->signature = "f32x2 operator[](u32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with Int16
    Float32x2x3_operator_index_Int16_arg.name = "idx"_c;
    Float32x2x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x2x3_operator_index_Int16.name = "operator[]"_c;
    Float32x2x3_operator_index_Int16.backendIndex = 1173;
    Float32x2x3_operator_index_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x3_operator_index_Int16.parameters = Float32x2x3_operator_index_Int16_args;
    Symbol::Resolved(&Float32x2x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2x3_operator_index_Int16)->signature = "f32x2 operator[](i16)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_Int16)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt16
    Float32x2x3_operator_index_UInt16_arg.name = "idx"_c;
    Float32x2x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x2x3_operator_index_UInt16.name = "operator[]"_c;
    Float32x2x3_operator_index_UInt16.backendIndex = 1174;
    Float32x2x3_operator_index_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x3_operator_index_UInt16.parameters = Float32x2x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16)->signature = "f32x2 operator[](u16)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x2x3_operator_index_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x3
    Float32x2x3_transform_Float32x2_vec.name = "vec"_c;
    Float32x2x3_transform_Float32x2_vec.type = Type::FullType{ Float32x3Type.name };
    Float32x2x3_transform_Float32x2.name = "operator*"_c;
    Float32x2x3_transform_Float32x2.backendIndex = 1175;
    Float32x2x3_transform_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x3_transform_Float32x2.parameters = Float32x2x3_transform_Float32x2_args;
    Symbol::Resolved(&Float32x2x3_transform_Float32x2_vec)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x2x3_transform_Float32x2)->signature = "f32x2 operator*(f32x3)"_c;
    Symbol::Resolved(&Float32x2x3_transform_Float32x2)->name = "operator*(f32x3)"_c;
    Symbol::Resolved(&Float32x2x3_transform_Float32x2)->nameWithVarNames = "operator*(vec : f32x3)"_c;
    Symbol::Resolved(&Float32x2x3_transform_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator+ with Float32x2x3
    Float32x2x3_operator_add_Float32x2x3_arg.name = "arg"_c;
    Float32x2x3_operator_add_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_add_Float32x2x3.name = "operator+"_c;
    Float32x2x3_operator_add_Float32x2x3.backendIndex = 1176;
    Float32x2x3_operator_add_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_add_Float32x2x3.parameters = Float32x2x3_operator_add_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3)->signature = "f32x2x3 operator+(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3)->name = "operator+(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3)->nameWithVarNames = "operator+(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_add_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator- with Float32x2x3
    Float32x2x3_operator_sub_Float32x2x3_arg.name = "arg"_c;
    Float32x2x3_operator_sub_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_sub_Float32x2x3.name = "operator-"_c;
    Float32x2x3_operator_sub_Float32x2x3.backendIndex = 1177;
    Float32x2x3_operator_sub_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_sub_Float32x2x3.parameters = Float32x2x3_operator_sub_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3)->signature = "f32x2x3 operator-(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3)->name = "operator-(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3)->nameWithVarNames = "operator-(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_sub_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator* with Float32x2x3
    Float32x2x3_operator_mul_Float32x2x3_arg.name = "arg"_c;
    Float32x2x3_operator_mul_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_mul_Float32x2x3.name = "operator*"_c;
    Float32x2x3_operator_mul_Float32x2x3.backendIndex = 1178;
    Float32x2x3_operator_mul_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_mul_Float32x2x3.parameters = Float32x2x3_operator_mul_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3)->signature = "f32x2x3 operator*(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3)->name = "operator*(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3)->nameWithVarNames = "operator*(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_mul_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator+= with Float32x2x3
    Float32x2x3_operator_addasg_Float32x2x3_arg.name = "arg"_c;
    Float32x2x3_operator_addasg_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_addasg_Float32x2x3.name = "operator+="_c;
    Float32x2x3_operator_addasg_Float32x2x3.backendIndex = 1179;
    Float32x2x3_operator_addasg_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_addasg_Float32x2x3.parameters = Float32x2x3_operator_addasg_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3)->signature = "f32x2x3 operator+=(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3)->name = "operator+=(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3)->nameWithVarNames = "operator+=(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_addasg_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator-= with Float32x2x3
    Float32x2x3_operator_subasg_Float32x2x3_arg.name = "arg"_c;
    Float32x2x3_operator_subasg_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_subasg_Float32x2x3.name = "operator-="_c;
    Float32x2x3_operator_subasg_Float32x2x3.backendIndex = 1180;
    Float32x2x3_operator_subasg_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_subasg_Float32x2x3.parameters = Float32x2x3_operator_subasg_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3)->signature = "f32x2x3 operator-=(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3)->name = "operator-=(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3)->nameWithVarNames = "operator-=(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_subasg_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator*= with Float32x2x3
    Float32x2x3_operator_mulasg_Float32x2x3_arg.name = "arg"_c;
    Float32x2x3_operator_mulasg_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    Float32x2x3_operator_mulasg_Float32x2x3.name = "operator*="_c;
    Float32x2x3_operator_mulasg_Float32x2x3.backendIndex = 1181;
    Float32x2x3_operator_mulasg_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_mulasg_Float32x2x3.parameters = Float32x2x3_operator_mulasg_Float32x2x3_args;
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3)->signature = "f32x2x3 operator*=(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3)->name = "operator*=(f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3)->nameWithVarNames = "operator*=(arg : f32x2x3)"_c;
    Symbol::Resolved(&Float32x2x3_operator_mulasg_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// operator* with Float32
    Float32x2x3_operator_scale_Float32_arg.name = "arg"_c;
    Float32x2x3_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x2x3_operator_scale_Float32.name = "operator*"_c;
    Float32x2x3_operator_scale_Float32.backendIndex = 1182;
    Float32x2x3_operator_scale_Float32.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_operator_scale_Float32.parameters = Float32x2x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32)->signature = "f32x2x3 operator*(f32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x2x3_operator_scale_Float32)->returnTypeSymbol = &Float32x2x3Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float32x2x3_transform_Float32x2 },
        std::pair{ "operator*"_c, &Float32x2x3_operator_mul_Float32x2x3 },
        std::pair{ "operator*"_c, &Float32x2x3_operator_scale_Float32 },
        std::pair{ "operator*(f32)"_c, &Float32x2x3_operator_scale_Float32 },
        std::pair{ "operator*(f32x2x3)"_c, &Float32x2x3_operator_mul_Float32x2x3 },
        std::pair{ "operator*(f32x3)"_c, &Float32x2x3_transform_Float32x2 },
        std::pair{ "operator*="_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
        std::pair{ "operator*=(f32x2x3)"_c, &Float32x2x3_operator_mulasg_Float32x2x3 },
        std::pair{ "operator+"_c, &Float32x2x3_operator_add_Float32x2x3 },
        std::pair{ "operator+(f32x2x3)"_c, &Float32x2x3_operator_add_Float32x2x3 },
        std::pair{ "operator+="_c, &Float32x2x3_operator_addasg_Float32x2x3 },
        std::pair{ "operator+=(f32x2x3)"_c, &Float32x2x3_operator_addasg_Float32x2x3 },
        std::pair{ "operator-"_c, &Float32x2x3_operator_sub_Float32x2x3 },
        std::pair{ "operator-(f32x2x3)"_c, &Float32x2x3_operator_sub_Float32x2x3 },
        std::pair{ "operator-="_c, &Float32x2x3_operator_subasg_Float32x2x3 },
        std::pair{ "operator-=(f32x2x3)"_c, &Float32x2x3_operator_subasg_Float32x2x3 },
        std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32x2x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32x2x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32x2x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32x2x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32x2x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32x2x3_operator_index_UInt32 }
    };
}
Float32x2x3 Float32x2x3Type;

/// operator[] with Int32
Variable Float32x3x3_operator_index_Int32_arg;
Function Float32x3x3_operator_index_Int32;
inline constexpr std::array Float32x3x3_operator_index_Int32_args = { &Float32x3x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x3x3_operator_index_UInt32_arg;
Function Float32x3x3_operator_index_UInt32;
inline constexpr std::array Float32x3x3_operator_index_UInt32_args = { &Float32x3x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x3x3_operator_index_Int16_arg;
Function Float32x3x3_operator_index_Int16;
inline constexpr std::array Float32x3x3_operator_index_Int16_args = { &Float32x3x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x3x3_operator_index_UInt16_arg;
Function Float32x3x3_operator_index_UInt16;
inline constexpr std::array Float32x3x3_operator_index_UInt16_args = { &Float32x3x3_operator_index_UInt16_arg };

/// operator* with Float32x3
Variable Float32x3x3_transform_Float32x3_vec;
Function Float32x3x3_transform_Float32x3;
inline constexpr std::array Float32x3x3_transform_Float32x3_args = { &Float32x3x3_transform_Float32x3_vec };

/// operator+ with Float32x3x3
Variable Float32x3x3_operator_add_Float32x3x3_arg;
Function Float32x3x3_operator_add_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_add_Float32x3x3_args = { &Float32x3x3_operator_add_Float32x3x3_arg };

/// operator- with Float32x3x3
Variable Float32x3x3_operator_sub_Float32x3x3_arg;
Function Float32x3x3_operator_sub_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_sub_Float32x3x3_args = { &Float32x3x3_operator_sub_Float32x3x3_arg };

/// operator* with Float32x3x3
Variable Float32x3x3_operator_mul_Float32x3x3_arg;
Function Float32x3x3_operator_mul_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_mul_Float32x3x3_args = { &Float32x3x3_operator_mul_Float32x3x3_arg };

/// operator+= with Float32x3x3
Variable Float32x3x3_operator_addasg_Float32x3x3_arg;
Function Float32x3x3_operator_addasg_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_addasg_Float32x3x3_args = { &Float32x3x3_operator_addasg_Float32x3x3_arg };

/// operator-= with Float32x3x3
Variable Float32x3x3_operator_subasg_Float32x3x3_arg;
Function Float32x3x3_operator_subasg_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_subasg_Float32x3x3_args = { &Float32x3x3_operator_subasg_Float32x3x3_arg };

/// operator*= with Float32x3x3
Variable Float32x3x3_operator_mulasg_Float32x3x3_arg;
Function Float32x3x3_operator_mulasg_Float32x3x3;
inline constexpr std::array Float32x3x3_operator_mulasg_Float32x3x3_args = { &Float32x3x3_operator_mulasg_Float32x3x3_arg };

/// operator* with Float32
Variable Float32x3x3_operator_scale_Float32_arg;
Function Float32x3x3_operator_scale_Float32;
inline constexpr std::array Float32x3x3_operator_scale_Float32_args = { &Float32x3x3_operator_scale_Float32_arg };

Float32x3x3::Float32x3x3()
{
    this->name = "f32x3x3"_c;
    this->columnSize = 3;
    this->rowSize = 3;
    this->byteSize = 36;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x3x3_operator_index_Int32_arg.name = "idx"_c;
    Float32x3x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x3x3_operator_index_Int32.name = "operator[]"_c;
    Float32x3x3_operator_index_Int32.backendIndex = 1186;
    Float32x3x3_operator_index_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_operator_index_Int32.parameters = Float32x3x3_operator_index_Int32_args;
    Symbol::Resolved(&Float32x3x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3x3_operator_index_Int32)->signature = "f32x3 operator[](i32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_Int32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt32
    Float32x3x3_operator_index_UInt32_arg.name = "idx"_c;
    Float32x3x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x3x3_operator_index_UInt32.name = "operator[]"_c;
    Float32x3x3_operator_index_UInt32.backendIndex = 1187;
    Float32x3x3_operator_index_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_operator_index_UInt32.parameters = Float32x3x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32)->signature = "f32x3 operator[](u32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with Int16
    Float32x3x3_operator_index_Int16_arg.name = "idx"_c;
    Float32x3x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x3x3_operator_index_Int16.name = "operator[]"_c;
    Float32x3x3_operator_index_Int16.backendIndex = 1188;
    Float32x3x3_operator_index_Int16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_operator_index_Int16.parameters = Float32x3x3_operator_index_Int16_args;
    Symbol::Resolved(&Float32x3x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3x3_operator_index_Int16)->signature = "f32x3 operator[](i16)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_Int16)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt16
    Float32x3x3_operator_index_UInt16_arg.name = "idx"_c;
    Float32x3x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x3x3_operator_index_UInt16.name = "operator[]"_c;
    Float32x3x3_operator_index_UInt16.backendIndex = 1189;
    Float32x3x3_operator_index_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_operator_index_UInt16.parameters = Float32x3x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16)->signature = "f32x3 operator[](u16)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x3x3_operator_index_UInt16)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x3
    Float32x3x3_transform_Float32x3_vec.name = "vec"_c;
    Float32x3x3_transform_Float32x3_vec.type = Type::FullType{ Float32x3Type.name };
    Float32x3x3_transform_Float32x3.name = "operator*"_c;
    Float32x3x3_transform_Float32x3.backendIndex = 1190;
    Float32x3x3_transform_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x3_transform_Float32x3.parameters = Float32x3x3_transform_Float32x3_args;
    Symbol::Resolved(&Float32x3x3_transform_Float32x3_vec)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3x3_transform_Float32x3)->signature = "f32x3 operator*(f32x3)"_c;
    Symbol::Resolved(&Float32x3x3_transform_Float32x3)->name = "operator*(f32x3)"_c;
    Symbol::Resolved(&Float32x3x3_transform_Float32x3)->nameWithVarNames = "operator*(vec : f32x3)"_c;
    Symbol::Resolved(&Float32x3x3_transform_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator+ with Float32x3x3
    Float32x3x3_operator_add_Float32x3x3_arg.name = "arg"_c;
    Float32x3x3_operator_add_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_add_Float32x3x3.name = "operator+"_c;
    Float32x3x3_operator_add_Float32x3x3.backendIndex = 1191;
    Float32x3x3_operator_add_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_add_Float32x3x3.parameters = Float32x3x3_operator_add_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3)->signature = "f32x3x3 operator+(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3)->name = "operator+(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3)->nameWithVarNames = "operator+(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_add_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator- with Float32x3x3
    Float32x3x3_operator_sub_Float32x3x3_arg.name = "arg"_c;
    Float32x3x3_operator_sub_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_sub_Float32x3x3.name = "operator-"_c;
    Float32x3x3_operator_sub_Float32x3x3.backendIndex = 1192;
    Float32x3x3_operator_sub_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_sub_Float32x3x3.parameters = Float32x3x3_operator_sub_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3)->signature = "f32x3x3 operator-(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3)->name = "operator-(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3)->nameWithVarNames = "operator-(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_sub_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator* with Float32x3x3
    Float32x3x3_operator_mul_Float32x3x3_arg.name = "arg"_c;
    Float32x3x3_operator_mul_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_mul_Float32x3x3.name = "operator*"_c;
    Float32x3x3_operator_mul_Float32x3x3.backendIndex = 1193;
    Float32x3x3_operator_mul_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_mul_Float32x3x3.parameters = Float32x3x3_operator_mul_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3)->signature = "f32x3x3 operator*(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3)->name = "operator*(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3)->nameWithVarNames = "operator*(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_mul_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator+= with Float32x3x3
    Float32x3x3_operator_addasg_Float32x3x3_arg.name = "arg"_c;
    Float32x3x3_operator_addasg_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_addasg_Float32x3x3.name = "operator+="_c;
    Float32x3x3_operator_addasg_Float32x3x3.backendIndex = 1194;
    Float32x3x3_operator_addasg_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_addasg_Float32x3x3.parameters = Float32x3x3_operator_addasg_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3)->signature = "f32x3x3 operator+=(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3)->name = "operator+=(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3)->nameWithVarNames = "operator+=(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_addasg_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator-= with Float32x3x3
    Float32x3x3_operator_subasg_Float32x3x3_arg.name = "arg"_c;
    Float32x3x3_operator_subasg_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_subasg_Float32x3x3.name = "operator-="_c;
    Float32x3x3_operator_subasg_Float32x3x3.backendIndex = 1195;
    Float32x3x3_operator_subasg_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_subasg_Float32x3x3.parameters = Float32x3x3_operator_subasg_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3)->signature = "f32x3x3 operator-=(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3)->name = "operator-=(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3)->nameWithVarNames = "operator-=(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_subasg_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator*= with Float32x3x3
    Float32x3x3_operator_mulasg_Float32x3x3_arg.name = "arg"_c;
    Float32x3x3_operator_mulasg_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    Float32x3x3_operator_mulasg_Float32x3x3.name = "operator*="_c;
    Float32x3x3_operator_mulasg_Float32x3x3.backendIndex = 1196;
    Float32x3x3_operator_mulasg_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_mulasg_Float32x3x3.parameters = Float32x3x3_operator_mulasg_Float32x3x3_args;
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3)->signature = "f32x3x3 operator*=(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3)->name = "operator*=(f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3)->nameWithVarNames = "operator*=(arg : f32x3x3)"_c;
    Symbol::Resolved(&Float32x3x3_operator_mulasg_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// operator* with Float32
    Float32x3x3_operator_scale_Float32_arg.name = "arg"_c;
    Float32x3x3_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x3x3_operator_scale_Float32.name = "operator*"_c;
    Float32x3x3_operator_scale_Float32.backendIndex = 1197;
    Float32x3x3_operator_scale_Float32.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_operator_scale_Float32.parameters = Float32x3x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32)->signature = "f32x3x3 operator*(f32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x3x3_operator_scale_Float32)->returnTypeSymbol = &Float32x3x3Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float32x3x3_transform_Float32x3 },
        std::pair{ "operator*"_c, &Float32x3x3_operator_mul_Float32x3x3 },
        std::pair{ "operator*"_c, &Float32x3x3_operator_scale_Float32 },
        std::pair{ "operator*(f32)"_c, &Float32x3x3_operator_scale_Float32 },
        std::pair{ "operator*(f32x3)"_c, &Float32x3x3_transform_Float32x3 },
        std::pair{ "operator*(f32x3x3)"_c, &Float32x3x3_operator_mul_Float32x3x3 },
        std::pair{ "operator*="_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
        std::pair{ "operator*=(f32x3x3)"_c, &Float32x3x3_operator_mulasg_Float32x3x3 },
        std::pair{ "operator+"_c, &Float32x3x3_operator_add_Float32x3x3 },
        std::pair{ "operator+(f32x3x3)"_c, &Float32x3x3_operator_add_Float32x3x3 },
        std::pair{ "operator+="_c, &Float32x3x3_operator_addasg_Float32x3x3 },
        std::pair{ "operator+=(f32x3x3)"_c, &Float32x3x3_operator_addasg_Float32x3x3 },
        std::pair{ "operator-"_c, &Float32x3x3_operator_sub_Float32x3x3 },
        std::pair{ "operator-(f32x3x3)"_c, &Float32x3x3_operator_sub_Float32x3x3 },
        std::pair{ "operator-="_c, &Float32x3x3_operator_subasg_Float32x3x3 },
        std::pair{ "operator-=(f32x3x3)"_c, &Float32x3x3_operator_subasg_Float32x3x3 },
        std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32x3x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32x3x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32x3x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32x3x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32x3x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32x3x3_operator_index_UInt32 }
    };
}
Float32x3x3 Float32x3x3Type;

/// operator[] with Int32
Variable Float32x4x3_operator_index_Int32_arg;
Function Float32x4x3_operator_index_Int32;
inline constexpr std::array Float32x4x3_operator_index_Int32_args = { &Float32x4x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x4x3_operator_index_UInt32_arg;
Function Float32x4x3_operator_index_UInt32;
inline constexpr std::array Float32x4x3_operator_index_UInt32_args = { &Float32x4x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x4x3_operator_index_Int16_arg;
Function Float32x4x3_operator_index_Int16;
inline constexpr std::array Float32x4x3_operator_index_Int16_args = { &Float32x4x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x4x3_operator_index_UInt16_arg;
Function Float32x4x3_operator_index_UInt16;
inline constexpr std::array Float32x4x3_operator_index_UInt16_args = { &Float32x4x3_operator_index_UInt16_arg };

/// operator* with Float32x3
Variable Float32x4x3_transform_Float32x4_vec;
Function Float32x4x3_transform_Float32x4;
inline constexpr std::array Float32x4x3_transform_Float32x4_args = { &Float32x4x3_transform_Float32x4_vec };

/// operator+ with Float32x4x3
Variable Float32x4x3_operator_add_Float32x4x3_arg;
Function Float32x4x3_operator_add_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_add_Float32x4x3_args = { &Float32x4x3_operator_add_Float32x4x3_arg };

/// operator- with Float32x4x3
Variable Float32x4x3_operator_sub_Float32x4x3_arg;
Function Float32x4x3_operator_sub_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_sub_Float32x4x3_args = { &Float32x4x3_operator_sub_Float32x4x3_arg };

/// operator* with Float32x4x3
Variable Float32x4x3_operator_mul_Float32x4x3_arg;
Function Float32x4x3_operator_mul_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_mul_Float32x4x3_args = { &Float32x4x3_operator_mul_Float32x4x3_arg };

/// operator+= with Float32x4x3
Variable Float32x4x3_operator_addasg_Float32x4x3_arg;
Function Float32x4x3_operator_addasg_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_addasg_Float32x4x3_args = { &Float32x4x3_operator_addasg_Float32x4x3_arg };

/// operator-= with Float32x4x3
Variable Float32x4x3_operator_subasg_Float32x4x3_arg;
Function Float32x4x3_operator_subasg_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_subasg_Float32x4x3_args = { &Float32x4x3_operator_subasg_Float32x4x3_arg };

/// operator*= with Float32x4x3
Variable Float32x4x3_operator_mulasg_Float32x4x3_arg;
Function Float32x4x3_operator_mulasg_Float32x4x3;
inline constexpr std::array Float32x4x3_operator_mulasg_Float32x4x3_args = { &Float32x4x3_operator_mulasg_Float32x4x3_arg };

/// operator* with Float32
Variable Float32x4x3_operator_scale_Float32_arg;
Function Float32x4x3_operator_scale_Float32;
inline constexpr std::array Float32x4x3_operator_scale_Float32_args = { &Float32x4x3_operator_scale_Float32_arg };

Float32x4x3::Float32x4x3()
{
    this->name = "f32x4x3"_c;
    this->columnSize = 4;
    this->rowSize = 3;
    this->byteSize = 48;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x4x3_operator_index_Int32_arg.name = "idx"_c;
    Float32x4x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x4x3_operator_index_Int32.name = "operator[]"_c;
    Float32x4x3_operator_index_Int32.backendIndex = 1200;
    Float32x4x3_operator_index_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x3_operator_index_Int32.parameters = Float32x4x3_operator_index_Int32_args;
    Symbol::Resolved(&Float32x4x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4x3_operator_index_Int32)->signature = "f32x4 operator[](i32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_Int32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt32
    Float32x4x3_operator_index_UInt32_arg.name = "idx"_c;
    Float32x4x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x4x3_operator_index_UInt32.name = "operator[]"_c;
    Float32x4x3_operator_index_UInt32.backendIndex = 1201;
    Float32x4x3_operator_index_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x3_operator_index_UInt32.parameters = Float32x4x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32)->signature = "f32x4 operator[](u32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with Int16
    Float32x4x3_operator_index_Int16_arg.name = "idx"_c;
    Float32x4x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x4x3_operator_index_Int16.name = "operator[]"_c;
    Float32x4x3_operator_index_Int16.backendIndex = 1202;
    Float32x4x3_operator_index_Int16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x3_operator_index_Int16.parameters = Float32x4x3_operator_index_Int16_args;
    Symbol::Resolved(&Float32x4x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4x3_operator_index_Int16)->signature = "f32x4 operator[](i16)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_Int16)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt16
    Float32x4x3_operator_index_UInt16_arg.name = "idx"_c;
    Float32x4x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x4x3_operator_index_UInt16.name = "operator[]"_c;
    Float32x4x3_operator_index_UInt16.backendIndex = 1203;
    Float32x4x3_operator_index_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x3_operator_index_UInt16.parameters = Float32x4x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16)->signature = "f32x4 operator[](u16)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x4x3_operator_index_UInt16)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32x3
    Float32x4x3_transform_Float32x4_vec.name = "vec"_c;
    Float32x4x3_transform_Float32x4_vec.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_transform_Float32x4.name = "operator*"_c;
    Float32x4x3_transform_Float32x4.backendIndex = 1204;
    Float32x4x3_transform_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x3_transform_Float32x4.parameters = Float32x4x3_transform_Float32x4_args;
    Symbol::Resolved(&Float32x4x3_transform_Float32x4_vec)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_transform_Float32x4)->signature = "f32x4 operator*(f32x3)"_c;
    Symbol::Resolved(&Float32x4x3_transform_Float32x4)->name = "operator*(f32x3)"_c;
    Symbol::Resolved(&Float32x4x3_transform_Float32x4)->nameWithVarNames = "operator*(vec : f32x3)"_c;
    Symbol::Resolved(&Float32x4x3_transform_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator+ with Float32x4x3
    Float32x4x3_operator_add_Float32x4x3_arg.name = "arg"_c;
    Float32x4x3_operator_add_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_add_Float32x4x3.name = "operator+"_c;
    Float32x4x3_operator_add_Float32x4x3.backendIndex = 1205;
    Float32x4x3_operator_add_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_add_Float32x4x3.parameters = Float32x4x3_operator_add_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3)->signature = "f32x4x3 operator+(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3)->name = "operator+(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3)->nameWithVarNames = "operator+(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_add_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator- with Float32x4x3
    Float32x4x3_operator_sub_Float32x4x3_arg.name = "arg"_c;
    Float32x4x3_operator_sub_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_sub_Float32x4x3.name = "operator-"_c;
    Float32x4x3_operator_sub_Float32x4x3.backendIndex = 1206;
    Float32x4x3_operator_sub_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_sub_Float32x4x3.parameters = Float32x4x3_operator_sub_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3)->signature = "f32x4x3 operator-(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3)->name = "operator-(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3)->nameWithVarNames = "operator-(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_sub_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator* with Float32x4x3
    Float32x4x3_operator_mul_Float32x4x3_arg.name = "arg"_c;
    Float32x4x3_operator_mul_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_mul_Float32x4x3.name = "operator*"_c;
    Float32x4x3_operator_mul_Float32x4x3.backendIndex = 1207;
    Float32x4x3_operator_mul_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_mul_Float32x4x3.parameters = Float32x4x3_operator_mul_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3)->signature = "f32x4x3 operator*(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3)->name = "operator*(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3)->nameWithVarNames = "operator*(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_mul_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator+= with Float32x4x3
    Float32x4x3_operator_addasg_Float32x4x3_arg.name = "arg"_c;
    Float32x4x3_operator_addasg_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_addasg_Float32x4x3.name = "operator+="_c;
    Float32x4x3_operator_addasg_Float32x4x3.backendIndex = 1208;
    Float32x4x3_operator_addasg_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_addasg_Float32x4x3.parameters = Float32x4x3_operator_addasg_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3)->signature = "f32x4x3 operator+=(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3)->name = "operator+=(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3)->nameWithVarNames = "operator+=(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_addasg_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator-= with Float32x4x3
    Float32x4x3_operator_subasg_Float32x4x3_arg.name = "arg"_c;
    Float32x4x3_operator_subasg_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_subasg_Float32x4x3.name = "operator-="_c;
    Float32x4x3_operator_subasg_Float32x4x3.backendIndex = 1209;
    Float32x4x3_operator_subasg_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_subasg_Float32x4x3.parameters = Float32x4x3_operator_subasg_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3)->signature = "f32x4x3 operator-=(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3)->name = "operator-=(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3)->nameWithVarNames = "operator-=(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_subasg_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator*= with Float32x4x3
    Float32x4x3_operator_mulasg_Float32x4x3_arg.name = "arg"_c;
    Float32x4x3_operator_mulasg_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    Float32x4x3_operator_mulasg_Float32x4x3.name = "operator*="_c;
    Float32x4x3_operator_mulasg_Float32x4x3.backendIndex = 1210;
    Float32x4x3_operator_mulasg_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_mulasg_Float32x4x3.parameters = Float32x4x3_operator_mulasg_Float32x4x3_args;
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3)->signature = "f32x4x3 operator*=(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3)->name = "operator*=(f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3)->nameWithVarNames = "operator*=(arg : f32x4x3)"_c;
    Symbol::Resolved(&Float32x4x3_operator_mulasg_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// operator* with Float32
    Float32x4x3_operator_scale_Float32_arg.name = "arg"_c;
    Float32x4x3_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x4x3_operator_scale_Float32.name = "operator*"_c;
    Float32x4x3_operator_scale_Float32.backendIndex = 1211;
    Float32x4x3_operator_scale_Float32.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_operator_scale_Float32.parameters = Float32x4x3_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32)->signature = "f32x4x3 operator*(f32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x4x3_operator_scale_Float32)->returnTypeSymbol = &Float32x4x3Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float32x4x3_transform_Float32x4 },
        std::pair{ "operator*"_c, &Float32x4x3_operator_mul_Float32x4x3 },
        std::pair{ "operator*"_c, &Float32x4x3_operator_scale_Float32 },
        std::pair{ "operator*(f32)"_c, &Float32x4x3_operator_scale_Float32 },
        std::pair{ "operator*(f32x3)"_c, &Float32x4x3_transform_Float32x4 },
        std::pair{ "operator*(f32x4x3)"_c, &Float32x4x3_operator_mul_Float32x4x3 },
        std::pair{ "operator*="_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
        std::pair{ "operator*=(f32x4x3)"_c, &Float32x4x3_operator_mulasg_Float32x4x3 },
        std::pair{ "operator+"_c, &Float32x4x3_operator_add_Float32x4x3 },
        std::pair{ "operator+(f32x4x3)"_c, &Float32x4x3_operator_add_Float32x4x3 },
        std::pair{ "operator+="_c, &Float32x4x3_operator_addasg_Float32x4x3 },
        std::pair{ "operator+=(f32x4x3)"_c, &Float32x4x3_operator_addasg_Float32x4x3 },
        std::pair{ "operator-"_c, &Float32x4x3_operator_sub_Float32x4x3 },
        std::pair{ "operator-(f32x4x3)"_c, &Float32x4x3_operator_sub_Float32x4x3 },
        std::pair{ "operator-="_c, &Float32x4x3_operator_subasg_Float32x4x3 },
        std::pair{ "operator-=(f32x4x3)"_c, &Float32x4x3_operator_subasg_Float32x4x3 },
        std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32x4x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32x4x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32x4x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32x4x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32x4x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32x4x3_operator_index_UInt32 }
    };
}
Float32x4x3 Float32x4x3Type;

/// operator[] with Int32
Variable Float32x2x4_operator_index_Int32_arg;
Function Float32x2x4_operator_index_Int32;
inline constexpr std::array Float32x2x4_operator_index_Int32_args = { &Float32x2x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x2x4_operator_index_UInt32_arg;
Function Float32x2x4_operator_index_UInt32;
inline constexpr std::array Float32x2x4_operator_index_UInt32_args = { &Float32x2x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x2x4_operator_index_Int16_arg;
Function Float32x2x4_operator_index_Int16;
inline constexpr std::array Float32x2x4_operator_index_Int16_args = { &Float32x2x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x2x4_operator_index_UInt16_arg;
Function Float32x2x4_operator_index_UInt16;
inline constexpr std::array Float32x2x4_operator_index_UInt16_args = { &Float32x2x4_operator_index_UInt16_arg };

/// operator* with Float32x4
Variable Float32x2x4_transform_Float32x2_vec;
Function Float32x2x4_transform_Float32x2;
inline constexpr std::array Float32x2x4_transform_Float32x2_args = { &Float32x2x4_transform_Float32x2_vec };

/// operator+ with Float32x2x4
Variable Float32x2x4_operator_add_Float32x2x4_arg;
Function Float32x2x4_operator_add_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_add_Float32x2x4_args = { &Float32x2x4_operator_add_Float32x2x4_arg };

/// operator- with Float32x2x4
Variable Float32x2x4_operator_sub_Float32x2x4_arg;
Function Float32x2x4_operator_sub_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_sub_Float32x2x4_args = { &Float32x2x4_operator_sub_Float32x2x4_arg };

/// operator* with Float32x2x4
Variable Float32x2x4_operator_mul_Float32x2x4_arg;
Function Float32x2x4_operator_mul_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_mul_Float32x2x4_args = { &Float32x2x4_operator_mul_Float32x2x4_arg };

/// operator+= with Float32x2x4
Variable Float32x2x4_operator_addasg_Float32x2x4_arg;
Function Float32x2x4_operator_addasg_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_addasg_Float32x2x4_args = { &Float32x2x4_operator_addasg_Float32x2x4_arg };

/// operator-= with Float32x2x4
Variable Float32x2x4_operator_subasg_Float32x2x4_arg;
Function Float32x2x4_operator_subasg_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_subasg_Float32x2x4_args = { &Float32x2x4_operator_subasg_Float32x2x4_arg };

/// operator*= with Float32x2x4
Variable Float32x2x4_operator_mulasg_Float32x2x4_arg;
Function Float32x2x4_operator_mulasg_Float32x2x4;
inline constexpr std::array Float32x2x4_operator_mulasg_Float32x2x4_args = { &Float32x2x4_operator_mulasg_Float32x2x4_arg };

/// operator* with Float32
Variable Float32x2x4_operator_scale_Float32_arg;
Function Float32x2x4_operator_scale_Float32;
inline constexpr std::array Float32x2x4_operator_scale_Float32_args = { &Float32x2x4_operator_scale_Float32_arg };

Float32x2x4::Float32x2x4()
{
    this->name = "f32x2x4"_c;
    this->columnSize = 2;
    this->rowSize = 4;
    this->byteSize = 32;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x2x4_operator_index_Int32_arg.name = "idx"_c;
    Float32x2x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x2x4_operator_index_Int32.name = "operator[]"_c;
    Float32x2x4_operator_index_Int32.backendIndex = 1214;
    Float32x2x4_operator_index_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x4_operator_index_Int32.parameters = Float32x2x4_operator_index_Int32_args;
    Symbol::Resolved(&Float32x2x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2x4_operator_index_Int32)->signature = "f32x2 operator[](i32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_Int32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt32
    Float32x2x4_operator_index_UInt32_arg.name = "idx"_c;
    Float32x2x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x2x4_operator_index_UInt32.name = "operator[]"_c;
    Float32x2x4_operator_index_UInt32.backendIndex = 1215;
    Float32x2x4_operator_index_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x4_operator_index_UInt32.parameters = Float32x2x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32)->signature = "f32x2 operator[](u32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with Int16
    Float32x2x4_operator_index_Int16_arg.name = "idx"_c;
    Float32x2x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x2x4_operator_index_Int16.name = "operator[]"_c;
    Float32x2x4_operator_index_Int16.backendIndex = 1216;
    Float32x2x4_operator_index_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x4_operator_index_Int16.parameters = Float32x2x4_operator_index_Int16_args;
    Symbol::Resolved(&Float32x2x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2x4_operator_index_Int16)->signature = "f32x2 operator[](i16)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_Int16)->returnTypeSymbol = &Float32x2Type;

    /// operator[] with UInt16
    Float32x2x4_operator_index_UInt16_arg.name = "idx"_c;
    Float32x2x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x2x4_operator_index_UInt16.name = "operator[]"_c;
    Float32x2x4_operator_index_UInt16.backendIndex = 1217;
    Float32x2x4_operator_index_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x4_operator_index_UInt16.parameters = Float32x2x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16)->signature = "f32x2 operator[](u16)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x2x4_operator_index_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// operator* with Float32x4
    Float32x2x4_transform_Float32x2_vec.name = "vec"_c;
    Float32x2x4_transform_Float32x2_vec.type = Type::FullType{ Float32x4Type.name };
    Float32x2x4_transform_Float32x2.name = "operator*"_c;
    Float32x2x4_transform_Float32x2.backendIndex = 1218;
    Float32x2x4_transform_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2x4_transform_Float32x2.parameters = Float32x2x4_transform_Float32x2_args;
    Symbol::Resolved(&Float32x2x4_transform_Float32x2_vec)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x2x4_transform_Float32x2)->signature = "f32x2 operator*(f32x4)"_c;
    Symbol::Resolved(&Float32x2x4_transform_Float32x2)->name = "operator*(f32x4)"_c;
    Symbol::Resolved(&Float32x2x4_transform_Float32x2)->nameWithVarNames = "operator*(vec : f32x4)"_c;
    Symbol::Resolved(&Float32x2x4_transform_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// operator+ with Float32x2x4
    Float32x2x4_operator_add_Float32x2x4_arg.name = "arg"_c;
    Float32x2x4_operator_add_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_add_Float32x2x4.name = "operator+"_c;
    Float32x2x4_operator_add_Float32x2x4.backendIndex = 1219;
    Float32x2x4_operator_add_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_add_Float32x2x4.parameters = Float32x2x4_operator_add_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4)->signature = "f32x2x4 operator+(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4)->name = "operator+(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4)->nameWithVarNames = "operator+(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_add_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator- with Float32x2x4
    Float32x2x4_operator_sub_Float32x2x4_arg.name = "arg"_c;
    Float32x2x4_operator_sub_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_sub_Float32x2x4.name = "operator-"_c;
    Float32x2x4_operator_sub_Float32x2x4.backendIndex = 1220;
    Float32x2x4_operator_sub_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_sub_Float32x2x4.parameters = Float32x2x4_operator_sub_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4)->signature = "f32x2x4 operator-(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4)->name = "operator-(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4)->nameWithVarNames = "operator-(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_sub_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator* with Float32x2x4
    Float32x2x4_operator_mul_Float32x2x4_arg.name = "arg"_c;
    Float32x2x4_operator_mul_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_mul_Float32x2x4.name = "operator*"_c;
    Float32x2x4_operator_mul_Float32x2x4.backendIndex = 1221;
    Float32x2x4_operator_mul_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_mul_Float32x2x4.parameters = Float32x2x4_operator_mul_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4)->signature = "f32x2x4 operator*(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4)->name = "operator*(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4)->nameWithVarNames = "operator*(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_mul_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator+= with Float32x2x4
    Float32x2x4_operator_addasg_Float32x2x4_arg.name = "arg"_c;
    Float32x2x4_operator_addasg_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_addasg_Float32x2x4.name = "operator+="_c;
    Float32x2x4_operator_addasg_Float32x2x4.backendIndex = 1222;
    Float32x2x4_operator_addasg_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_addasg_Float32x2x4.parameters = Float32x2x4_operator_addasg_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4)->signature = "f32x2x4 operator+=(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4)->name = "operator+=(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4)->nameWithVarNames = "operator+=(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_addasg_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator-= with Float32x2x4
    Float32x2x4_operator_subasg_Float32x2x4_arg.name = "arg"_c;
    Float32x2x4_operator_subasg_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_subasg_Float32x2x4.name = "operator-="_c;
    Float32x2x4_operator_subasg_Float32x2x4.backendIndex = 1223;
    Float32x2x4_operator_subasg_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_subasg_Float32x2x4.parameters = Float32x2x4_operator_subasg_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4)->signature = "f32x2x4 operator-=(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4)->name = "operator-=(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4)->nameWithVarNames = "operator-=(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_subasg_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator*= with Float32x2x4
    Float32x2x4_operator_mulasg_Float32x2x4_arg.name = "arg"_c;
    Float32x2x4_operator_mulasg_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    Float32x2x4_operator_mulasg_Float32x2x4.name = "operator*="_c;
    Float32x2x4_operator_mulasg_Float32x2x4.backendIndex = 1224;
    Float32x2x4_operator_mulasg_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_mulasg_Float32x2x4.parameters = Float32x2x4_operator_mulasg_Float32x2x4_args;
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4)->signature = "f32x2x4 operator*=(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4)->name = "operator*=(f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4)->nameWithVarNames = "operator*=(arg : f32x2x4)"_c;
    Symbol::Resolved(&Float32x2x4_operator_mulasg_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// operator* with Float32
    Float32x2x4_operator_scale_Float32_arg.name = "arg"_c;
    Float32x2x4_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x2x4_operator_scale_Float32.name = "operator*"_c;
    Float32x2x4_operator_scale_Float32.backendIndex = 1225;
    Float32x2x4_operator_scale_Float32.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_operator_scale_Float32.parameters = Float32x2x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32)->signature = "f32x2x4 operator*(f32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x2x4_operator_scale_Float32)->returnTypeSymbol = &Float32x2x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float32x2x4_transform_Float32x2 },
        std::pair{ "operator*"_c, &Float32x2x4_operator_mul_Float32x2x4 },
        std::pair{ "operator*"_c, &Float32x2x4_operator_scale_Float32 },
        std::pair{ "operator*(f32)"_c, &Float32x2x4_operator_scale_Float32 },
        std::pair{ "operator*(f32x2x4)"_c, &Float32x2x4_operator_mul_Float32x2x4 },
        std::pair{ "operator*(f32x4)"_c, &Float32x2x4_transform_Float32x2 },
        std::pair{ "operator*="_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
        std::pair{ "operator*=(f32x2x4)"_c, &Float32x2x4_operator_mulasg_Float32x2x4 },
        std::pair{ "operator+"_c, &Float32x2x4_operator_add_Float32x2x4 },
        std::pair{ "operator+(f32x2x4)"_c, &Float32x2x4_operator_add_Float32x2x4 },
        std::pair{ "operator+="_c, &Float32x2x4_operator_addasg_Float32x2x4 },
        std::pair{ "operator+=(f32x2x4)"_c, &Float32x2x4_operator_addasg_Float32x2x4 },
        std::pair{ "operator-"_c, &Float32x2x4_operator_sub_Float32x2x4 },
        std::pair{ "operator-(f32x2x4)"_c, &Float32x2x4_operator_sub_Float32x2x4 },
        std::pair{ "operator-="_c, &Float32x2x4_operator_subasg_Float32x2x4 },
        std::pair{ "operator-=(f32x2x4)"_c, &Float32x2x4_operator_subasg_Float32x2x4 },
        std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32x2x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32x2x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32x2x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32x2x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32x2x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32x2x4_operator_index_UInt32 }
    };
}
Float32x2x4 Float32x2x4Type;

/// operator[] with Int32
Variable Float32x3x4_operator_index_Int32_arg;
Function Float32x3x4_operator_index_Int32;
inline constexpr std::array Float32x3x4_operator_index_Int32_args = { &Float32x3x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x3x4_operator_index_UInt32_arg;
Function Float32x3x4_operator_index_UInt32;
inline constexpr std::array Float32x3x4_operator_index_UInt32_args = { &Float32x3x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x3x4_operator_index_Int16_arg;
Function Float32x3x4_operator_index_Int16;
inline constexpr std::array Float32x3x4_operator_index_Int16_args = { &Float32x3x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x3x4_operator_index_UInt16_arg;
Function Float32x3x4_operator_index_UInt16;
inline constexpr std::array Float32x3x4_operator_index_UInt16_args = { &Float32x3x4_operator_index_UInt16_arg };

/// operator* with Float32x4
Variable Float32x3x4_transform_Float32x3_vec;
Function Float32x3x4_transform_Float32x3;
inline constexpr std::array Float32x3x4_transform_Float32x3_args = { &Float32x3x4_transform_Float32x3_vec };

/// operator+ with Float32x3x4
Variable Float32x3x4_operator_add_Float32x3x4_arg;
Function Float32x3x4_operator_add_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_add_Float32x3x4_args = { &Float32x3x4_operator_add_Float32x3x4_arg };

/// operator- with Float32x3x4
Variable Float32x3x4_operator_sub_Float32x3x4_arg;
Function Float32x3x4_operator_sub_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_sub_Float32x3x4_args = { &Float32x3x4_operator_sub_Float32x3x4_arg };

/// operator* with Float32x3x4
Variable Float32x3x4_operator_mul_Float32x3x4_arg;
Function Float32x3x4_operator_mul_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_mul_Float32x3x4_args = { &Float32x3x4_operator_mul_Float32x3x4_arg };

/// operator+= with Float32x3x4
Variable Float32x3x4_operator_addasg_Float32x3x4_arg;
Function Float32x3x4_operator_addasg_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_addasg_Float32x3x4_args = { &Float32x3x4_operator_addasg_Float32x3x4_arg };

/// operator-= with Float32x3x4
Variable Float32x3x4_operator_subasg_Float32x3x4_arg;
Function Float32x3x4_operator_subasg_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_subasg_Float32x3x4_args = { &Float32x3x4_operator_subasg_Float32x3x4_arg };

/// operator*= with Float32x3x4
Variable Float32x3x4_operator_mulasg_Float32x3x4_arg;
Function Float32x3x4_operator_mulasg_Float32x3x4;
inline constexpr std::array Float32x3x4_operator_mulasg_Float32x3x4_args = { &Float32x3x4_operator_mulasg_Float32x3x4_arg };

/// operator* with Float32
Variable Float32x3x4_operator_scale_Float32_arg;
Function Float32x3x4_operator_scale_Float32;
inline constexpr std::array Float32x3x4_operator_scale_Float32_args = { &Float32x3x4_operator_scale_Float32_arg };

Float32x3x4::Float32x3x4()
{
    this->name = "f32x3x4"_c;
    this->columnSize = 3;
    this->rowSize = 4;
    this->byteSize = 48;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x3x4_operator_index_Int32_arg.name = "idx"_c;
    Float32x3x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x3x4_operator_index_Int32.name = "operator[]"_c;
    Float32x3x4_operator_index_Int32.backendIndex = 1228;
    Float32x3x4_operator_index_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x4_operator_index_Int32.parameters = Float32x3x4_operator_index_Int32_args;
    Symbol::Resolved(&Float32x3x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3x4_operator_index_Int32)->signature = "f32x3 operator[](i32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_Int32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt32
    Float32x3x4_operator_index_UInt32_arg.name = "idx"_c;
    Float32x3x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x3x4_operator_index_UInt32.name = "operator[]"_c;
    Float32x3x4_operator_index_UInt32.backendIndex = 1229;
    Float32x3x4_operator_index_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x4_operator_index_UInt32.parameters = Float32x3x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32)->signature = "f32x3 operator[](u32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with Int16
    Float32x3x4_operator_index_Int16_arg.name = "idx"_c;
    Float32x3x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x3x4_operator_index_Int16.name = "operator[]"_c;
    Float32x3x4_operator_index_Int16.backendIndex = 1230;
    Float32x3x4_operator_index_Int16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x4_operator_index_Int16.parameters = Float32x3x4_operator_index_Int16_args;
    Symbol::Resolved(&Float32x3x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3x4_operator_index_Int16)->signature = "f32x3 operator[](i16)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_Int16)->returnTypeSymbol = &Float32x3Type;

    /// operator[] with UInt16
    Float32x3x4_operator_index_UInt16_arg.name = "idx"_c;
    Float32x3x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x3x4_operator_index_UInt16.name = "operator[]"_c;
    Float32x3x4_operator_index_UInt16.backendIndex = 1231;
    Float32x3x4_operator_index_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x4_operator_index_UInt16.parameters = Float32x3x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16)->signature = "f32x3 operator[](u16)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x3x4_operator_index_UInt16)->returnTypeSymbol = &Float32x3Type;

    /// operator* with Float32x4
    Float32x3x4_transform_Float32x3_vec.name = "vec"_c;
    Float32x3x4_transform_Float32x3_vec.type = Type::FullType{ Float32x4Type.name };
    Float32x3x4_transform_Float32x3.name = "operator*"_c;
    Float32x3x4_transform_Float32x3.backendIndex = 1232;
    Float32x3x4_transform_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3x4_transform_Float32x3.parameters = Float32x3x4_transform_Float32x3_args;
    Symbol::Resolved(&Float32x3x4_transform_Float32x3_vec)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x3x4_transform_Float32x3)->signature = "f32x3 operator*(f32x4)"_c;
    Symbol::Resolved(&Float32x3x4_transform_Float32x3)->name = "operator*(f32x4)"_c;
    Symbol::Resolved(&Float32x3x4_transform_Float32x3)->nameWithVarNames = "operator*(vec : f32x4)"_c;
    Symbol::Resolved(&Float32x3x4_transform_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// operator+ with Float32x3x4
    Float32x3x4_operator_add_Float32x3x4_arg.name = "arg"_c;
    Float32x3x4_operator_add_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_add_Float32x3x4.name = "operator+"_c;
    Float32x3x4_operator_add_Float32x3x4.backendIndex = 1233;
    Float32x3x4_operator_add_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_add_Float32x3x4.parameters = Float32x3x4_operator_add_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4)->signature = "f32x3x4 operator+(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4)->name = "operator+(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4)->nameWithVarNames = "operator+(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_add_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator- with Float32x3x4
    Float32x3x4_operator_sub_Float32x3x4_arg.name = "arg"_c;
    Float32x3x4_operator_sub_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_sub_Float32x3x4.name = "operator-"_c;
    Float32x3x4_operator_sub_Float32x3x4.backendIndex = 1234;
    Float32x3x4_operator_sub_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_sub_Float32x3x4.parameters = Float32x3x4_operator_sub_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4)->signature = "f32x3x4 operator-(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4)->name = "operator-(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4)->nameWithVarNames = "operator-(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_sub_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator* with Float32x3x4
    Float32x3x4_operator_mul_Float32x3x4_arg.name = "arg"_c;
    Float32x3x4_operator_mul_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_mul_Float32x3x4.name = "operator*"_c;
    Float32x3x4_operator_mul_Float32x3x4.backendIndex = 1235;
    Float32x3x4_operator_mul_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_mul_Float32x3x4.parameters = Float32x3x4_operator_mul_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4)->signature = "f32x3x4 operator*(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4)->name = "operator*(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4)->nameWithVarNames = "operator*(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_mul_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator+= with Float32x3x4
    Float32x3x4_operator_addasg_Float32x3x4_arg.name = "arg"_c;
    Float32x3x4_operator_addasg_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_addasg_Float32x3x4.name = "operator+="_c;
    Float32x3x4_operator_addasg_Float32x3x4.backendIndex = 1236;
    Float32x3x4_operator_addasg_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_addasg_Float32x3x4.parameters = Float32x3x4_operator_addasg_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4)->signature = "f32x3x4 operator+=(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4)->name = "operator+=(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4)->nameWithVarNames = "operator+=(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_addasg_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator-= with Float32x3x4
    Float32x3x4_operator_subasg_Float32x3x4_arg.name = "arg"_c;
    Float32x3x4_operator_subasg_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_subasg_Float32x3x4.name = "operator-="_c;
    Float32x3x4_operator_subasg_Float32x3x4.backendIndex = 1237;
    Float32x3x4_operator_subasg_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_subasg_Float32x3x4.parameters = Float32x3x4_operator_subasg_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4)->signature = "f32x3x4 operator-=(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4)->name = "operator-=(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4)->nameWithVarNames = "operator-=(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_subasg_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator*= with Float32x3x4
    Float32x3x4_operator_mulasg_Float32x3x4_arg.name = "arg"_c;
    Float32x3x4_operator_mulasg_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    Float32x3x4_operator_mulasg_Float32x3x4.name = "operator*="_c;
    Float32x3x4_operator_mulasg_Float32x3x4.backendIndex = 1238;
    Float32x3x4_operator_mulasg_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_mulasg_Float32x3x4.parameters = Float32x3x4_operator_mulasg_Float32x3x4_args;
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4)->signature = "f32x3x4 operator*=(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4)->name = "operator*=(f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4)->nameWithVarNames = "operator*=(arg : f32x3x4)"_c;
    Symbol::Resolved(&Float32x3x4_operator_mulasg_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// operator* with Float32
    Float32x3x4_operator_scale_Float32_arg.name = "arg"_c;
    Float32x3x4_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x3x4_operator_scale_Float32.name = "operator*"_c;
    Float32x3x4_operator_scale_Float32.backendIndex = 1239;
    Float32x3x4_operator_scale_Float32.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_operator_scale_Float32.parameters = Float32x3x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32)->signature = "f32x3x4 operator*(f32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x3x4_operator_scale_Float32)->returnTypeSymbol = &Float32x3x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float32x3x4_transform_Float32x3 },
        std::pair{ "operator*"_c, &Float32x3x4_operator_mul_Float32x3x4 },
        std::pair{ "operator*"_c, &Float32x3x4_operator_scale_Float32 },
        std::pair{ "operator*(f32)"_c, &Float32x3x4_operator_scale_Float32 },
        std::pair{ "operator*(f32x3x4)"_c, &Float32x3x4_operator_mul_Float32x3x4 },
        std::pair{ "operator*(f32x4)"_c, &Float32x3x4_transform_Float32x3 },
        std::pair{ "operator*="_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
        std::pair{ "operator*=(f32x3x4)"_c, &Float32x3x4_operator_mulasg_Float32x3x4 },
        std::pair{ "operator+"_c, &Float32x3x4_operator_add_Float32x3x4 },
        std::pair{ "operator+(f32x3x4)"_c, &Float32x3x4_operator_add_Float32x3x4 },
        std::pair{ "operator+="_c, &Float32x3x4_operator_addasg_Float32x3x4 },
        std::pair{ "operator+=(f32x3x4)"_c, &Float32x3x4_operator_addasg_Float32x3x4 },
        std::pair{ "operator-"_c, &Float32x3x4_operator_sub_Float32x3x4 },
        std::pair{ "operator-(f32x3x4)"_c, &Float32x3x4_operator_sub_Float32x3x4 },
        std::pair{ "operator-="_c, &Float32x3x4_operator_subasg_Float32x3x4 },
        std::pair{ "operator-=(f32x3x4)"_c, &Float32x3x4_operator_subasg_Float32x3x4 },
        std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32x3x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32x3x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32x3x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32x3x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32x3x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32x3x4_operator_index_UInt32 }
    };
}
Float32x3x4 Float32x3x4Type;

/// operator[] with Int32
Variable Float32x4x4_operator_index_Int32_arg;
Function Float32x4x4_operator_index_Int32;
inline constexpr std::array Float32x4x4_operator_index_Int32_args = { &Float32x4x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float32x4x4_operator_index_UInt32_arg;
Function Float32x4x4_operator_index_UInt32;
inline constexpr std::array Float32x4x4_operator_index_UInt32_args = { &Float32x4x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float32x4x4_operator_index_Int16_arg;
Function Float32x4x4_operator_index_Int16;
inline constexpr std::array Float32x4x4_operator_index_Int16_args = { &Float32x4x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float32x4x4_operator_index_UInt16_arg;
Function Float32x4x4_operator_index_UInt16;
inline constexpr std::array Float32x4x4_operator_index_UInt16_args = { &Float32x4x4_operator_index_UInt16_arg };

/// operator* with Float32x4
Variable Float32x4x4_transform_Float32x4_vec;
Function Float32x4x4_transform_Float32x4;
inline constexpr std::array Float32x4x4_transform_Float32x4_args = { &Float32x4x4_transform_Float32x4_vec };

/// operator+ with Float32x4x4
Variable Float32x4x4_operator_add_Float32x4x4_arg;
Function Float32x4x4_operator_add_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_add_Float32x4x4_args = { &Float32x4x4_operator_add_Float32x4x4_arg };

/// operator- with Float32x4x4
Variable Float32x4x4_operator_sub_Float32x4x4_arg;
Function Float32x4x4_operator_sub_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_sub_Float32x4x4_args = { &Float32x4x4_operator_sub_Float32x4x4_arg };

/// operator* with Float32x4x4
Variable Float32x4x4_operator_mul_Float32x4x4_arg;
Function Float32x4x4_operator_mul_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_mul_Float32x4x4_args = { &Float32x4x4_operator_mul_Float32x4x4_arg };

/// operator+= with Float32x4x4
Variable Float32x4x4_operator_addasg_Float32x4x4_arg;
Function Float32x4x4_operator_addasg_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_addasg_Float32x4x4_args = { &Float32x4x4_operator_addasg_Float32x4x4_arg };

/// operator-= with Float32x4x4
Variable Float32x4x4_operator_subasg_Float32x4x4_arg;
Function Float32x4x4_operator_subasg_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_subasg_Float32x4x4_args = { &Float32x4x4_operator_subasg_Float32x4x4_arg };

/// operator*= with Float32x4x4
Variable Float32x4x4_operator_mulasg_Float32x4x4_arg;
Function Float32x4x4_operator_mulasg_Float32x4x4;
inline constexpr std::array Float32x4x4_operator_mulasg_Float32x4x4_args = { &Float32x4x4_operator_mulasg_Float32x4x4_arg };

/// operator* with Float32
Variable Float32x4x4_operator_scale_Float32_arg;
Function Float32x4x4_operator_scale_Float32;
inline constexpr std::array Float32x4x4_operator_scale_Float32_args = { &Float32x4x4_operator_scale_Float32_arg };

Float32x4x4::Float32x4x4()
{
    this->name = "f32x4x4"_c;
    this->columnSize = 4;
    this->rowSize = 4;
    this->byteSize = 64;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float32;
    this->builtin = true;

    /// operator[] with Int32
    Float32x4x4_operator_index_Int32_arg.name = "idx"_c;
    Float32x4x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x4x4_operator_index_Int32.name = "operator[]"_c;
    Float32x4x4_operator_index_Int32.backendIndex = 1243;
    Float32x4x4_operator_index_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_operator_index_Int32.parameters = Float32x4x4_operator_index_Int32_args;
    Symbol::Resolved(&Float32x4x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4x4_operator_index_Int32)->signature = "f32x4 operator[](i32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_Int32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt32
    Float32x4x4_operator_index_UInt32_arg.name = "idx"_c;
    Float32x4x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x4x4_operator_index_UInt32.name = "operator[]"_c;
    Float32x4x4_operator_index_UInt32.backendIndex = 1244;
    Float32x4x4_operator_index_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_operator_index_UInt32.parameters = Float32x4x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32)->signature = "f32x4 operator[](u32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with Int16
    Float32x4x4_operator_index_Int16_arg.name = "idx"_c;
    Float32x4x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x4x4_operator_index_Int16.name = "operator[]"_c;
    Float32x4x4_operator_index_Int16.backendIndex = 1245;
    Float32x4x4_operator_index_Int16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_operator_index_Int16.parameters = Float32x4x4_operator_index_Int16_args;
    Symbol::Resolved(&Float32x4x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4x4_operator_index_Int16)->signature = "f32x4 operator[](i16)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_Int16)->returnTypeSymbol = &Float32x4Type;

    /// operator[] with UInt16
    Float32x4x4_operator_index_UInt16_arg.name = "idx"_c;
    Float32x4x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x4x4_operator_index_UInt16.name = "operator[]"_c;
    Float32x4x4_operator_index_UInt16.backendIndex = 1246;
    Float32x4x4_operator_index_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_operator_index_UInt16.parameters = Float32x4x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16)->signature = "f32x4 operator[](u16)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float32x4x4_operator_index_UInt16)->returnTypeSymbol = &Float32x4Type;

    /// operator* with Float32x4
    Float32x4x4_transform_Float32x4_vec.name = "vec"_c;
    Float32x4x4_transform_Float32x4_vec.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_transform_Float32x4.name = "operator*"_c;
    Float32x4x4_transform_Float32x4.backendIndex = 1247;
    Float32x4x4_transform_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4x4_transform_Float32x4.parameters = Float32x4x4_transform_Float32x4_args;
    Symbol::Resolved(&Float32x4x4_transform_Float32x4_vec)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_transform_Float32x4)->signature = "f32x4 operator*(f32x4)"_c;
    Symbol::Resolved(&Float32x4x4_transform_Float32x4)->name = "operator*(f32x4)"_c;
    Symbol::Resolved(&Float32x4x4_transform_Float32x4)->nameWithVarNames = "operator*(vec : f32x4)"_c;
    Symbol::Resolved(&Float32x4x4_transform_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// operator+ with Float32x4x4
    Float32x4x4_operator_add_Float32x4x4_arg.name = "arg"_c;
    Float32x4x4_operator_add_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_add_Float32x4x4.name = "operator+"_c;
    Float32x4x4_operator_add_Float32x4x4.backendIndex = 1248;
    Float32x4x4_operator_add_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_add_Float32x4x4.parameters = Float32x4x4_operator_add_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4)->signature = "f32x4x4 operator+(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4)->name = "operator+(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4)->nameWithVarNames = "operator+(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_add_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator- with Float32x4x4
    Float32x4x4_operator_sub_Float32x4x4_arg.name = "arg"_c;
    Float32x4x4_operator_sub_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_sub_Float32x4x4.name = "operator-"_c;
    Float32x4x4_operator_sub_Float32x4x4.backendIndex = 1249;
    Float32x4x4_operator_sub_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_sub_Float32x4x4.parameters = Float32x4x4_operator_sub_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4)->signature = "f32x4x4 operator-(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4)->name = "operator-(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4)->nameWithVarNames = "operator-(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_sub_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator* with Float32x4x4
    Float32x4x4_operator_mul_Float32x4x4_arg.name = "arg"_c;
    Float32x4x4_operator_mul_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_mul_Float32x4x4.name = "operator*"_c;
    Float32x4x4_operator_mul_Float32x4x4.backendIndex = 1250;
    Float32x4x4_operator_mul_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_mul_Float32x4x4.parameters = Float32x4x4_operator_mul_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4)->signature = "f32x4x4 operator*(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4)->name = "operator*(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4)->nameWithVarNames = "operator*(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_mul_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator+= with Float32x4x4
    Float32x4x4_operator_addasg_Float32x4x4_arg.name = "arg"_c;
    Float32x4x4_operator_addasg_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_addasg_Float32x4x4.name = "operator+="_c;
    Float32x4x4_operator_addasg_Float32x4x4.backendIndex = 1251;
    Float32x4x4_operator_addasg_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_addasg_Float32x4x4.parameters = Float32x4x4_operator_addasg_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4)->signature = "f32x4x4 operator+=(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4)->name = "operator+=(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4)->nameWithVarNames = "operator+=(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_addasg_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator-= with Float32x4x4
    Float32x4x4_operator_subasg_Float32x4x4_arg.name = "arg"_c;
    Float32x4x4_operator_subasg_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_subasg_Float32x4x4.name = "operator-="_c;
    Float32x4x4_operator_subasg_Float32x4x4.backendIndex = 1252;
    Float32x4x4_operator_subasg_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_subasg_Float32x4x4.parameters = Float32x4x4_operator_subasg_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4)->signature = "f32x4x4 operator-=(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4)->name = "operator-=(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4)->nameWithVarNames = "operator-=(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_subasg_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator*= with Float32x4x4
    Float32x4x4_operator_mulasg_Float32x4x4_arg.name = "arg"_c;
    Float32x4x4_operator_mulasg_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    Float32x4x4_operator_mulasg_Float32x4x4.name = "operator*="_c;
    Float32x4x4_operator_mulasg_Float32x4x4.backendIndex = 1253;
    Float32x4x4_operator_mulasg_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_mulasg_Float32x4x4.parameters = Float32x4x4_operator_mulasg_Float32x4x4_args;
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4)->signature = "f32x4x4 operator*=(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4)->name = "operator*=(f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4)->nameWithVarNames = "operator*=(arg : f32x4x4)"_c;
    Symbol::Resolved(&Float32x4x4_operator_mulasg_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// operator* with Float32
    Float32x4x4_operator_scale_Float32_arg.name = "arg"_c;
    Float32x4x4_operator_scale_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x4x4_operator_scale_Float32.name = "operator*"_c;
    Float32x4x4_operator_scale_Float32.backendIndex = 1254;
    Float32x4x4_operator_scale_Float32.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_operator_scale_Float32.parameters = Float32x4x4_operator_scale_Float32_args;
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32)->signature = "f32x4x4 operator*(f32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32)->name = "operator*(f32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32)->nameWithVarNames = "operator*(arg : f32)"_c;
    Symbol::Resolved(&Float32x4x4_operator_scale_Float32)->returnTypeSymbol = &Float32x4x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float32x4x4_transform_Float32x4 },
        std::pair{ "operator*"_c, &Float32x4x4_operator_mul_Float32x4x4 },
        std::pair{ "operator*"_c, &Float32x4x4_operator_scale_Float32 },
        std::pair{ "operator*(f32)"_c, &Float32x4x4_operator_scale_Float32 },
        std::pair{ "operator*(f32x4)"_c, &Float32x4x4_transform_Float32x4 },
        std::pair{ "operator*(f32x4x4)"_c, &Float32x4x4_operator_mul_Float32x4x4 },
        std::pair{ "operator*="_c, &Float32x4x4_operator_mulasg_Float32x4x4 },
        std::pair{ "operator*=(f32x4x4)"_c, &Float32x4x4_operator_mulasg_Float32x4x4 },
        std::pair{ "operator+"_c, &Float32x4x4_operator_add_Float32x4x4 },
        std::pair{ "operator+(f32x4x4)"_c, &Float32x4x4_operator_add_Float32x4x4 },
        std::pair{ "operator+="_c, &Float32x4x4_operator_addasg_Float32x4x4 },
        std::pair{ "operator+=(f32x4x4)"_c, &Float32x4x4_operator_addasg_Float32x4x4 },
        std::pair{ "operator-"_c, &Float32x4x4_operator_sub_Float32x4x4 },
        std::pair{ "operator-(f32x4x4)"_c, &Float32x4x4_operator_sub_Float32x4x4 },
        std::pair{ "operator-="_c, &Float32x4x4_operator_subasg_Float32x4x4 },
        std::pair{ "operator-=(f32x4x4)"_c, &Float32x4x4_operator_subasg_Float32x4x4 },
        std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float32x4x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float32x4x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float32x4x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float32x4x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float32x4x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float32x4x4_operator_index_UInt32 }
    };
}
Float32x4x4 Float32x4x4Type;

/// operator[] with Int32
Variable Float16x2x2_operator_index_Int32_arg;
Function Float16x2x2_operator_index_Int32;
inline constexpr std::array Float16x2x2_operator_index_Int32_args = { &Float16x2x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x2x2_operator_index_UInt32_arg;
Function Float16x2x2_operator_index_UInt32;
inline constexpr std::array Float16x2x2_operator_index_UInt32_args = { &Float16x2x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x2x2_operator_index_Int16_arg;
Function Float16x2x2_operator_index_Int16;
inline constexpr std::array Float16x2x2_operator_index_Int16_args = { &Float16x2x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x2x2_operator_index_UInt16_arg;
Function Float16x2x2_operator_index_UInt16;
inline constexpr std::array Float16x2x2_operator_index_UInt16_args = { &Float16x2x2_operator_index_UInt16_arg };

/// operator* with Float16x2
Variable Float16x2x2_transform_Float16x2_vec;
Function Float16x2x2_transform_Float16x2;
inline constexpr std::array Float16x2x2_transform_Float16x2_args = { &Float16x2x2_transform_Float16x2_vec };

/// operator+ with Float16x2x2
Variable Float16x2x2_operator_add_Float16x2x2_arg;
Function Float16x2x2_operator_add_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_add_Float16x2x2_args = { &Float16x2x2_operator_add_Float16x2x2_arg };

/// operator- with Float16x2x2
Variable Float16x2x2_operator_sub_Float16x2x2_arg;
Function Float16x2x2_operator_sub_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_sub_Float16x2x2_args = { &Float16x2x2_operator_sub_Float16x2x2_arg };

/// operator* with Float16x2x2
Variable Float16x2x2_operator_mul_Float16x2x2_arg;
Function Float16x2x2_operator_mul_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_mul_Float16x2x2_args = { &Float16x2x2_operator_mul_Float16x2x2_arg };

/// operator+= with Float16x2x2
Variable Float16x2x2_operator_addasg_Float16x2x2_arg;
Function Float16x2x2_operator_addasg_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_addasg_Float16x2x2_args = { &Float16x2x2_operator_addasg_Float16x2x2_arg };

/// operator-= with Float16x2x2
Variable Float16x2x2_operator_subasg_Float16x2x2_arg;
Function Float16x2x2_operator_subasg_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_subasg_Float16x2x2_args = { &Float16x2x2_operator_subasg_Float16x2x2_arg };

/// operator*= with Float16x2x2
Variable Float16x2x2_operator_mulasg_Float16x2x2_arg;
Function Float16x2x2_operator_mulasg_Float16x2x2;
inline constexpr std::array Float16x2x2_operator_mulasg_Float16x2x2_args = { &Float16x2x2_operator_mulasg_Float16x2x2_arg };

/// operator* with Float16
Variable Float16x2x2_operator_scale_Float16_arg;
Function Float16x2x2_operator_scale_Float16;
inline constexpr std::array Float16x2x2_operator_scale_Float16_args = { &Float16x2x2_operator_scale_Float16_arg };

Float16x2x2::Float16x2x2()
{
    this->name = "f16x2x2"_c;
    this->columnSize = 2;
    this->rowSize = 2;
    this->byteSize = 8;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x2x2_operator_index_Int32_arg.name = "idx"_c;
    Float16x2x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x2x2_operator_index_Int32.name = "operator[]"_c;
    Float16x2x2_operator_index_Int32.backendIndex = 1258;
    Float16x2x2_operator_index_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_operator_index_Int32.parameters = Float16x2x2_operator_index_Int32_args;
    Symbol::Resolved(&Float16x2x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2x2_operator_index_Int32)->signature = "f16x2 operator[](i32)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_Int32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt32
    Float16x2x2_operator_index_UInt32_arg.name = "idx"_c;
    Float16x2x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x2x2_operator_index_UInt32.name = "operator[]"_c;
    Float16x2x2_operator_index_UInt32.backendIndex = 1259;
    Float16x2x2_operator_index_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_operator_index_UInt32.parameters = Float16x2x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32)->signature = "f16x2 operator[](u32)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with Int16
    Float16x2x2_operator_index_Int16_arg.name = "idx"_c;
    Float16x2x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x2x2_operator_index_Int16.name = "operator[]"_c;
    Float16x2x2_operator_index_Int16.backendIndex = 1260;
    Float16x2x2_operator_index_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_operator_index_Int16.parameters = Float16x2x2_operator_index_Int16_args;
    Symbol::Resolved(&Float16x2x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2x2_operator_index_Int16)->signature = "f16x2 operator[](i16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_Int16)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt16
    Float16x2x2_operator_index_UInt16_arg.name = "idx"_c;
    Float16x2x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x2x2_operator_index_UInt16.name = "operator[]"_c;
    Float16x2x2_operator_index_UInt16.backendIndex = 1261;
    Float16x2x2_operator_index_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_operator_index_UInt16.parameters = Float16x2x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16)->signature = "f16x2 operator[](u16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_index_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float16x2
    Float16x2x2_transform_Float16x2_vec.name = "vec"_c;
    Float16x2x2_transform_Float16x2_vec.type = Type::FullType{ Float16x2Type.name };
    Float16x2x2_transform_Float16x2.name = "operator*"_c;
    Float16x2x2_transform_Float16x2.backendIndex = 1262;
    Float16x2x2_transform_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x2_transform_Float16x2.parameters = Float16x2x2_transform_Float16x2_args;
    Symbol::Resolved(&Float16x2x2_transform_Float16x2_vec)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2x2_transform_Float16x2)->signature = "f16x2 operator*(f16x2)"_c;
    Symbol::Resolved(&Float16x2x2_transform_Float16x2)->name = "operator*(f16x2)"_c;
    Symbol::Resolved(&Float16x2x2_transform_Float16x2)->nameWithVarNames = "operator*(vec : f16x2)"_c;
    Symbol::Resolved(&Float16x2x2_transform_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator+ with Float16x2x2
    Float16x2x2_operator_add_Float16x2x2_arg.name = "arg"_c;
    Float16x2x2_operator_add_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_add_Float16x2x2.name = "operator+"_c;
    Float16x2x2_operator_add_Float16x2x2.backendIndex = 1263;
    Float16x2x2_operator_add_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_add_Float16x2x2.parameters = Float16x2x2_operator_add_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2)->signature = "f16x2x2 operator+(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2)->name = "operator+(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2)->nameWithVarNames = "operator+(arg : f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_add_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator- with Float16x2x2
    Float16x2x2_operator_sub_Float16x2x2_arg.name = "arg"_c;
    Float16x2x2_operator_sub_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_sub_Float16x2x2.name = "operator-"_c;
    Float16x2x2_operator_sub_Float16x2x2.backendIndex = 1264;
    Float16x2x2_operator_sub_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_sub_Float16x2x2.parameters = Float16x2x2_operator_sub_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2)->signature = "f16x2x2 operator-(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2)->name = "operator-(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2)->nameWithVarNames = "operator-(arg : f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_sub_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator* with Float16x2x2
    Float16x2x2_operator_mul_Float16x2x2_arg.name = "arg"_c;
    Float16x2x2_operator_mul_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_mul_Float16x2x2.name = "operator*"_c;
    Float16x2x2_operator_mul_Float16x2x2.backendIndex = 1265;
    Float16x2x2_operator_mul_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_mul_Float16x2x2.parameters = Float16x2x2_operator_mul_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2)->signature = "f16x2x2 operator*(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2)->name = "operator*(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2)->nameWithVarNames = "operator*(arg : f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_mul_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator+= with Float16x2x2
    Float16x2x2_operator_addasg_Float16x2x2_arg.name = "arg"_c;
    Float16x2x2_operator_addasg_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_addasg_Float16x2x2.name = "operator+="_c;
    Float16x2x2_operator_addasg_Float16x2x2.backendIndex = 1266;
    Float16x2x2_operator_addasg_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_addasg_Float16x2x2.parameters = Float16x2x2_operator_addasg_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2)->signature = "f16x2x2 operator+=(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2)->name = "operator+=(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2)->nameWithVarNames = "operator+=(arg : f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_addasg_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator-= with Float16x2x2
    Float16x2x2_operator_subasg_Float16x2x2_arg.name = "arg"_c;
    Float16x2x2_operator_subasg_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_subasg_Float16x2x2.name = "operator-="_c;
    Float16x2x2_operator_subasg_Float16x2x2.backendIndex = 1267;
    Float16x2x2_operator_subasg_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_subasg_Float16x2x2.parameters = Float16x2x2_operator_subasg_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2)->signature = "f16x2x2 operator-=(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2)->name = "operator-=(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2)->nameWithVarNames = "operator-=(arg : f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_subasg_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator*= with Float16x2x2
    Float16x2x2_operator_mulasg_Float16x2x2_arg.name = "arg"_c;
    Float16x2x2_operator_mulasg_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    Float16x2x2_operator_mulasg_Float16x2x2.name = "operator*="_c;
    Float16x2x2_operator_mulasg_Float16x2x2.backendIndex = 1268;
    Float16x2x2_operator_mulasg_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_mulasg_Float16x2x2.parameters = Float16x2x2_operator_mulasg_Float16x2x2_args;
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2)->signature = "f16x2x2 operator*=(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2)->name = "operator*=(f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2)->nameWithVarNames = "operator*=(arg : f16x2x2)"_c;
    Symbol::Resolved(&Float16x2x2_operator_mulasg_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// operator* with Float16
    Float16x2x2_operator_scale_Float16_arg.name = "arg"_c;
    Float16x2x2_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x2x2_operator_scale_Float16.name = "operator*"_c;
    Float16x2x2_operator_scale_Float16.backendIndex = 1269;
    Float16x2x2_operator_scale_Float16.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_operator_scale_Float16.parameters = Float16x2x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16)->signature = "f16x2x2 operator*(f16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x2x2_operator_scale_Float16)->returnTypeSymbol = &Float16x2x2Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float16x2x2_transform_Float16x2 },
        std::pair{ "operator*"_c, &Float16x2x2_operator_mul_Float16x2x2 },
        std::pair{ "operator*"_c, &Float16x2x2_operator_scale_Float16 },
        std::pair{ "operator*(f16)"_c, &Float16x2x2_operator_scale_Float16 },
        std::pair{ "operator*(f16x2)"_c, &Float16x2x2_transform_Float16x2 },
        std::pair{ "operator*(f16x2x2)"_c, &Float16x2x2_operator_mul_Float16x2x2 },
        std::pair{ "operator*="_c, &Float16x2x2_operator_mulasg_Float16x2x2 },
        std::pair{ "operator*=(f16x2x2)"_c, &Float16x2x2_operator_mulasg_Float16x2x2 },
        std::pair{ "operator+"_c, &Float16x2x2_operator_add_Float16x2x2 },
        std::pair{ "operator+(f16x2x2)"_c, &Float16x2x2_operator_add_Float16x2x2 },
        std::pair{ "operator+="_c, &Float16x2x2_operator_addasg_Float16x2x2 },
        std::pair{ "operator+=(f16x2x2)"_c, &Float16x2x2_operator_addasg_Float16x2x2 },
        std::pair{ "operator-"_c, &Float16x2x2_operator_sub_Float16x2x2 },
        std::pair{ "operator-(f16x2x2)"_c, &Float16x2x2_operator_sub_Float16x2x2 },
        std::pair{ "operator-="_c, &Float16x2x2_operator_subasg_Float16x2x2 },
        std::pair{ "operator-=(f16x2x2)"_c, &Float16x2x2_operator_subasg_Float16x2x2 },
        std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16x2x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16x2x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16x2x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16x2x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16x2x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16x2x2_operator_index_UInt32 }
    };
}
Float16x2x2 Float16x2x2Type;

/// operator[] with Int32
Variable Float16x3x2_operator_index_Int32_arg;
Function Float16x3x2_operator_index_Int32;
inline constexpr std::array Float16x3x2_operator_index_Int32_args = { &Float16x3x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x3x2_operator_index_UInt32_arg;
Function Float16x3x2_operator_index_UInt32;
inline constexpr std::array Float16x3x2_operator_index_UInt32_args = { &Float16x3x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x3x2_operator_index_Int16_arg;
Function Float16x3x2_operator_index_Int16;
inline constexpr std::array Float16x3x2_operator_index_Int16_args = { &Float16x3x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x3x2_operator_index_UInt16_arg;
Function Float16x3x2_operator_index_UInt16;
inline constexpr std::array Float16x3x2_operator_index_UInt16_args = { &Float16x3x2_operator_index_UInt16_arg };

/// operator* with Float16x2
Variable Float16x3x2_transform_Float16x3_vec;
Function Float16x3x2_transform_Float16x3;
inline constexpr std::array Float16x3x2_transform_Float16x3_args = { &Float16x3x2_transform_Float16x3_vec };

/// operator+ with Float16x3x2
Variable Float16x3x2_operator_add_Float16x3x2_arg;
Function Float16x3x2_operator_add_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_add_Float16x3x2_args = { &Float16x3x2_operator_add_Float16x3x2_arg };

/// operator- with Float16x3x2
Variable Float16x3x2_operator_sub_Float16x3x2_arg;
Function Float16x3x2_operator_sub_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_sub_Float16x3x2_args = { &Float16x3x2_operator_sub_Float16x3x2_arg };

/// operator* with Float16x3x2
Variable Float16x3x2_operator_mul_Float16x3x2_arg;
Function Float16x3x2_operator_mul_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_mul_Float16x3x2_args = { &Float16x3x2_operator_mul_Float16x3x2_arg };

/// operator+= with Float16x3x2
Variable Float16x3x2_operator_addasg_Float16x3x2_arg;
Function Float16x3x2_operator_addasg_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_addasg_Float16x3x2_args = { &Float16x3x2_operator_addasg_Float16x3x2_arg };

/// operator-= with Float16x3x2
Variable Float16x3x2_operator_subasg_Float16x3x2_arg;
Function Float16x3x2_operator_subasg_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_subasg_Float16x3x2_args = { &Float16x3x2_operator_subasg_Float16x3x2_arg };

/// operator*= with Float16x3x2
Variable Float16x3x2_operator_mulasg_Float16x3x2_arg;
Function Float16x3x2_operator_mulasg_Float16x3x2;
inline constexpr std::array Float16x3x2_operator_mulasg_Float16x3x2_args = { &Float16x3x2_operator_mulasg_Float16x3x2_arg };

/// operator* with Float16
Variable Float16x3x2_operator_scale_Float16_arg;
Function Float16x3x2_operator_scale_Float16;
inline constexpr std::array Float16x3x2_operator_scale_Float16_args = { &Float16x3x2_operator_scale_Float16_arg };

Float16x3x2::Float16x3x2()
{
    this->name = "f16x3x2"_c;
    this->columnSize = 3;
    this->rowSize = 2;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x3x2_operator_index_Int32_arg.name = "idx"_c;
    Float16x3x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x3x2_operator_index_Int32.name = "operator[]"_c;
    Float16x3x2_operator_index_Int32.backendIndex = 1272;
    Float16x3x2_operator_index_Int32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x2_operator_index_Int32.parameters = Float16x3x2_operator_index_Int32_args;
    Symbol::Resolved(&Float16x3x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3x2_operator_index_Int32)->signature = "f16x3 operator[](i32)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_Int32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt32
    Float16x3x2_operator_index_UInt32_arg.name = "idx"_c;
    Float16x3x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x3x2_operator_index_UInt32.name = "operator[]"_c;
    Float16x3x2_operator_index_UInt32.backendIndex = 1273;
    Float16x3x2_operator_index_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x2_operator_index_UInt32.parameters = Float16x3x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32)->signature = "f16x3 operator[](u32)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with Int16
    Float16x3x2_operator_index_Int16_arg.name = "idx"_c;
    Float16x3x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x3x2_operator_index_Int16.name = "operator[]"_c;
    Float16x3x2_operator_index_Int16.backendIndex = 1274;
    Float16x3x2_operator_index_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x2_operator_index_Int16.parameters = Float16x3x2_operator_index_Int16_args;
    Symbol::Resolved(&Float16x3x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3x2_operator_index_Int16)->signature = "f16x3 operator[](i16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_Int16)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt16
    Float16x3x2_operator_index_UInt16_arg.name = "idx"_c;
    Float16x3x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x3x2_operator_index_UInt16.name = "operator[]"_c;
    Float16x3x2_operator_index_UInt16.backendIndex = 1275;
    Float16x3x2_operator_index_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x2_operator_index_UInt16.parameters = Float16x3x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16)->signature = "f16x3 operator[](u16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_index_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float16x2
    Float16x3x2_transform_Float16x3_vec.name = "vec"_c;
    Float16x3x2_transform_Float16x3_vec.type = Type::FullType{ Float16x2Type.name };
    Float16x3x2_transform_Float16x3.name = "operator*"_c;
    Float16x3x2_transform_Float16x3.backendIndex = 1276;
    Float16x3x2_transform_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x2_transform_Float16x3.parameters = Float16x3x2_transform_Float16x3_args;
    Symbol::Resolved(&Float16x3x2_transform_Float16x3_vec)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3x2_transform_Float16x3)->signature = "f16x3 operator*(f16x2)"_c;
    Symbol::Resolved(&Float16x3x2_transform_Float16x3)->name = "operator*(f16x2)"_c;
    Symbol::Resolved(&Float16x3x2_transform_Float16x3)->nameWithVarNames = "operator*(vec : f16x2)"_c;
    Symbol::Resolved(&Float16x3x2_transform_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator+ with Float16x3x2
    Float16x3x2_operator_add_Float16x3x2_arg.name = "arg"_c;
    Float16x3x2_operator_add_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_add_Float16x3x2.name = "operator+"_c;
    Float16x3x2_operator_add_Float16x3x2.backendIndex = 1277;
    Float16x3x2_operator_add_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_add_Float16x3x2.parameters = Float16x3x2_operator_add_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2)->signature = "f16x3x2 operator+(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2)->name = "operator+(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2)->nameWithVarNames = "operator+(arg : f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_add_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator- with Float16x3x2
    Float16x3x2_operator_sub_Float16x3x2_arg.name = "arg"_c;
    Float16x3x2_operator_sub_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_sub_Float16x3x2.name = "operator-"_c;
    Float16x3x2_operator_sub_Float16x3x2.backendIndex = 1278;
    Float16x3x2_operator_sub_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_sub_Float16x3x2.parameters = Float16x3x2_operator_sub_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2)->signature = "f16x3x2 operator-(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2)->name = "operator-(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2)->nameWithVarNames = "operator-(arg : f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_sub_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator* with Float16x3x2
    Float16x3x2_operator_mul_Float16x3x2_arg.name = "arg"_c;
    Float16x3x2_operator_mul_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_mul_Float16x3x2.name = "operator*"_c;
    Float16x3x2_operator_mul_Float16x3x2.backendIndex = 1279;
    Float16x3x2_operator_mul_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_mul_Float16x3x2.parameters = Float16x3x2_operator_mul_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2)->signature = "f16x3x2 operator*(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2)->name = "operator*(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2)->nameWithVarNames = "operator*(arg : f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_mul_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator+= with Float16x3x2
    Float16x3x2_operator_addasg_Float16x3x2_arg.name = "arg"_c;
    Float16x3x2_operator_addasg_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_addasg_Float16x3x2.name = "operator+="_c;
    Float16x3x2_operator_addasg_Float16x3x2.backendIndex = 1280;
    Float16x3x2_operator_addasg_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_addasg_Float16x3x2.parameters = Float16x3x2_operator_addasg_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2)->signature = "f16x3x2 operator+=(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2)->name = "operator+=(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2)->nameWithVarNames = "operator+=(arg : f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_addasg_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator-= with Float16x3x2
    Float16x3x2_operator_subasg_Float16x3x2_arg.name = "arg"_c;
    Float16x3x2_operator_subasg_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_subasg_Float16x3x2.name = "operator-="_c;
    Float16x3x2_operator_subasg_Float16x3x2.backendIndex = 1281;
    Float16x3x2_operator_subasg_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_subasg_Float16x3x2.parameters = Float16x3x2_operator_subasg_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2)->signature = "f16x3x2 operator-=(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2)->name = "operator-=(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2)->nameWithVarNames = "operator-=(arg : f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_subasg_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator*= with Float16x3x2
    Float16x3x2_operator_mulasg_Float16x3x2_arg.name = "arg"_c;
    Float16x3x2_operator_mulasg_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    Float16x3x2_operator_mulasg_Float16x3x2.name = "operator*="_c;
    Float16x3x2_operator_mulasg_Float16x3x2.backendIndex = 1282;
    Float16x3x2_operator_mulasg_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_mulasg_Float16x3x2.parameters = Float16x3x2_operator_mulasg_Float16x3x2_args;
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2)->signature = "f16x3x2 operator*=(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2)->name = "operator*=(f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2)->nameWithVarNames = "operator*=(arg : f16x3x2)"_c;
    Symbol::Resolved(&Float16x3x2_operator_mulasg_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// operator* with Float16
    Float16x3x2_operator_scale_Float16_arg.name = "arg"_c;
    Float16x3x2_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x3x2_operator_scale_Float16.name = "operator*"_c;
    Float16x3x2_operator_scale_Float16.backendIndex = 1283;
    Float16x3x2_operator_scale_Float16.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_operator_scale_Float16.parameters = Float16x3x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16)->signature = "f16x3x2 operator*(f16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x3x2_operator_scale_Float16)->returnTypeSymbol = &Float16x3x2Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float16x3x2_transform_Float16x3 },
        std::pair{ "operator*"_c, &Float16x3x2_operator_mul_Float16x3x2 },
        std::pair{ "operator*"_c, &Float16x3x2_operator_scale_Float16 },
        std::pair{ "operator*(f16)"_c, &Float16x3x2_operator_scale_Float16 },
        std::pair{ "operator*(f16x2)"_c, &Float16x3x2_transform_Float16x3 },
        std::pair{ "operator*(f16x3x2)"_c, &Float16x3x2_operator_mul_Float16x3x2 },
        std::pair{ "operator*="_c, &Float16x3x2_operator_mulasg_Float16x3x2 },
        std::pair{ "operator*=(f16x3x2)"_c, &Float16x3x2_operator_mulasg_Float16x3x2 },
        std::pair{ "operator+"_c, &Float16x3x2_operator_add_Float16x3x2 },
        std::pair{ "operator+(f16x3x2)"_c, &Float16x3x2_operator_add_Float16x3x2 },
        std::pair{ "operator+="_c, &Float16x3x2_operator_addasg_Float16x3x2 },
        std::pair{ "operator+=(f16x3x2)"_c, &Float16x3x2_operator_addasg_Float16x3x2 },
        std::pair{ "operator-"_c, &Float16x3x2_operator_sub_Float16x3x2 },
        std::pair{ "operator-(f16x3x2)"_c, &Float16x3x2_operator_sub_Float16x3x2 },
        std::pair{ "operator-="_c, &Float16x3x2_operator_subasg_Float16x3x2 },
        std::pair{ "operator-=(f16x3x2)"_c, &Float16x3x2_operator_subasg_Float16x3x2 },
        std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16x3x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16x3x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16x3x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16x3x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16x3x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16x3x2_operator_index_UInt32 }
    };
}
Float16x3x2 Float16x3x2Type;

/// operator[] with Int32
Variable Float16x4x2_operator_index_Int32_arg;
Function Float16x4x2_operator_index_Int32;
inline constexpr std::array Float16x4x2_operator_index_Int32_args = { &Float16x4x2_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x4x2_operator_index_UInt32_arg;
Function Float16x4x2_operator_index_UInt32;
inline constexpr std::array Float16x4x2_operator_index_UInt32_args = { &Float16x4x2_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x4x2_operator_index_Int16_arg;
Function Float16x4x2_operator_index_Int16;
inline constexpr std::array Float16x4x2_operator_index_Int16_args = { &Float16x4x2_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x4x2_operator_index_UInt16_arg;
Function Float16x4x2_operator_index_UInt16;
inline constexpr std::array Float16x4x2_operator_index_UInt16_args = { &Float16x4x2_operator_index_UInt16_arg };

/// operator* with Float16x2
Variable Float16x4x2_transform_Float16x4_vec;
Function Float16x4x2_transform_Float16x4;
inline constexpr std::array Float16x4x2_transform_Float16x4_args = { &Float16x4x2_transform_Float16x4_vec };

/// operator+ with Float16x4x2
Variable Float16x4x2_operator_add_Float16x4x2_arg;
Function Float16x4x2_operator_add_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_add_Float16x4x2_args = { &Float16x4x2_operator_add_Float16x4x2_arg };

/// operator- with Float16x4x2
Variable Float16x4x2_operator_sub_Float16x4x2_arg;
Function Float16x4x2_operator_sub_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_sub_Float16x4x2_args = { &Float16x4x2_operator_sub_Float16x4x2_arg };

/// operator* with Float16x4x2
Variable Float16x4x2_operator_mul_Float16x4x2_arg;
Function Float16x4x2_operator_mul_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_mul_Float16x4x2_args = { &Float16x4x2_operator_mul_Float16x4x2_arg };

/// operator+= with Float16x4x2
Variable Float16x4x2_operator_addasg_Float16x4x2_arg;
Function Float16x4x2_operator_addasg_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_addasg_Float16x4x2_args = { &Float16x4x2_operator_addasg_Float16x4x2_arg };

/// operator-= with Float16x4x2
Variable Float16x4x2_operator_subasg_Float16x4x2_arg;
Function Float16x4x2_operator_subasg_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_subasg_Float16x4x2_args = { &Float16x4x2_operator_subasg_Float16x4x2_arg };

/// operator*= with Float16x4x2
Variable Float16x4x2_operator_mulasg_Float16x4x2_arg;
Function Float16x4x2_operator_mulasg_Float16x4x2;
inline constexpr std::array Float16x4x2_operator_mulasg_Float16x4x2_args = { &Float16x4x2_operator_mulasg_Float16x4x2_arg };

/// operator* with Float16
Variable Float16x4x2_operator_scale_Float16_arg;
Function Float16x4x2_operator_scale_Float16;
inline constexpr std::array Float16x4x2_operator_scale_Float16_args = { &Float16x4x2_operator_scale_Float16_arg };

Float16x4x2::Float16x4x2()
{
    this->name = "f16x4x2"_c;
    this->columnSize = 4;
    this->rowSize = 2;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x4x2_operator_index_Int32_arg.name = "idx"_c;
    Float16x4x2_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x4x2_operator_index_Int32.name = "operator[]"_c;
    Float16x4x2_operator_index_Int32.backendIndex = 1286;
    Float16x4x2_operator_index_Int32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x2_operator_index_Int32.parameters = Float16x4x2_operator_index_Int32_args;
    Symbol::Resolved(&Float16x4x2_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4x2_operator_index_Int32)->signature = "f16x4 operator[](i32)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_Int32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt32
    Float16x4x2_operator_index_UInt32_arg.name = "idx"_c;
    Float16x4x2_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x4x2_operator_index_UInt32.name = "operator[]"_c;
    Float16x4x2_operator_index_UInt32.backendIndex = 1287;
    Float16x4x2_operator_index_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x2_operator_index_UInt32.parameters = Float16x4x2_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32)->signature = "f16x4 operator[](u32)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with Int16
    Float16x4x2_operator_index_Int16_arg.name = "idx"_c;
    Float16x4x2_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x4x2_operator_index_Int16.name = "operator[]"_c;
    Float16x4x2_operator_index_Int16.backendIndex = 1288;
    Float16x4x2_operator_index_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x2_operator_index_Int16.parameters = Float16x4x2_operator_index_Int16_args;
    Symbol::Resolved(&Float16x4x2_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4x2_operator_index_Int16)->signature = "f16x4 operator[](i16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_Int16)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt16
    Float16x4x2_operator_index_UInt16_arg.name = "idx"_c;
    Float16x4x2_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x4x2_operator_index_UInt16.name = "operator[]"_c;
    Float16x4x2_operator_index_UInt16.backendIndex = 1289;
    Float16x4x2_operator_index_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x2_operator_index_UInt16.parameters = Float16x4x2_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16)->signature = "f16x4 operator[](u16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_index_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float16x2
    Float16x4x2_transform_Float16x4_vec.name = "vec"_c;
    Float16x4x2_transform_Float16x4_vec.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_transform_Float16x4.name = "operator*"_c;
    Float16x4x2_transform_Float16x4.backendIndex = 1290;
    Float16x4x2_transform_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x2_transform_Float16x4.parameters = Float16x4x2_transform_Float16x4_args;
    Symbol::Resolved(&Float16x4x2_transform_Float16x4_vec)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_transform_Float16x4)->signature = "f16x4 operator*(f16x2)"_c;
    Symbol::Resolved(&Float16x4x2_transform_Float16x4)->name = "operator*(f16x2)"_c;
    Symbol::Resolved(&Float16x4x2_transform_Float16x4)->nameWithVarNames = "operator*(vec : f16x2)"_c;
    Symbol::Resolved(&Float16x4x2_transform_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator+ with Float16x4x2
    Float16x4x2_operator_add_Float16x4x2_arg.name = "arg"_c;
    Float16x4x2_operator_add_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_add_Float16x4x2.name = "operator+"_c;
    Float16x4x2_operator_add_Float16x4x2.backendIndex = 1291;
    Float16x4x2_operator_add_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_add_Float16x4x2.parameters = Float16x4x2_operator_add_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2)->signature = "f16x4x2 operator+(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2)->name = "operator+(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2)->nameWithVarNames = "operator+(arg : f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_add_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator- with Float16x4x2
    Float16x4x2_operator_sub_Float16x4x2_arg.name = "arg"_c;
    Float16x4x2_operator_sub_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_sub_Float16x4x2.name = "operator-"_c;
    Float16x4x2_operator_sub_Float16x4x2.backendIndex = 1292;
    Float16x4x2_operator_sub_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_sub_Float16x4x2.parameters = Float16x4x2_operator_sub_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2)->signature = "f16x4x2 operator-(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2)->name = "operator-(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2)->nameWithVarNames = "operator-(arg : f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_sub_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator* with Float16x4x2
    Float16x4x2_operator_mul_Float16x4x2_arg.name = "arg"_c;
    Float16x4x2_operator_mul_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_mul_Float16x4x2.name = "operator*"_c;
    Float16x4x2_operator_mul_Float16x4x2.backendIndex = 1293;
    Float16x4x2_operator_mul_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_mul_Float16x4x2.parameters = Float16x4x2_operator_mul_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2)->signature = "f16x4x2 operator*(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2)->name = "operator*(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2)->nameWithVarNames = "operator*(arg : f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_mul_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator+= with Float16x4x2
    Float16x4x2_operator_addasg_Float16x4x2_arg.name = "arg"_c;
    Float16x4x2_operator_addasg_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_addasg_Float16x4x2.name = "operator+="_c;
    Float16x4x2_operator_addasg_Float16x4x2.backendIndex = 1294;
    Float16x4x2_operator_addasg_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_addasg_Float16x4x2.parameters = Float16x4x2_operator_addasg_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2)->signature = "f16x4x2 operator+=(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2)->name = "operator+=(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2)->nameWithVarNames = "operator+=(arg : f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_addasg_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator-= with Float16x4x2
    Float16x4x2_operator_subasg_Float16x4x2_arg.name = "arg"_c;
    Float16x4x2_operator_subasg_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_subasg_Float16x4x2.name = "operator-="_c;
    Float16x4x2_operator_subasg_Float16x4x2.backendIndex = 1295;
    Float16x4x2_operator_subasg_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_subasg_Float16x4x2.parameters = Float16x4x2_operator_subasg_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2)->signature = "f16x4x2 operator-=(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2)->name = "operator-=(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2)->nameWithVarNames = "operator-=(arg : f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_subasg_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator*= with Float16x4x2
    Float16x4x2_operator_mulasg_Float16x4x2_arg.name = "arg"_c;
    Float16x4x2_operator_mulasg_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    Float16x4x2_operator_mulasg_Float16x4x2.name = "operator*="_c;
    Float16x4x2_operator_mulasg_Float16x4x2.backendIndex = 1296;
    Float16x4x2_operator_mulasg_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_mulasg_Float16x4x2.parameters = Float16x4x2_operator_mulasg_Float16x4x2_args;
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2)->signature = "f16x4x2 operator*=(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2)->name = "operator*=(f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2)->nameWithVarNames = "operator*=(arg : f16x4x2)"_c;
    Symbol::Resolved(&Float16x4x2_operator_mulasg_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// operator* with Float16
    Float16x4x2_operator_scale_Float16_arg.name = "arg"_c;
    Float16x4x2_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x4x2_operator_scale_Float16.name = "operator*"_c;
    Float16x4x2_operator_scale_Float16.backendIndex = 1297;
    Float16x4x2_operator_scale_Float16.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_operator_scale_Float16.parameters = Float16x4x2_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16)->signature = "f16x4x2 operator*(f16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x4x2_operator_scale_Float16)->returnTypeSymbol = &Float16x4x2Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float16x4x2_transform_Float16x4 },
        std::pair{ "operator*"_c, &Float16x4x2_operator_mul_Float16x4x2 },
        std::pair{ "operator*"_c, &Float16x4x2_operator_scale_Float16 },
        std::pair{ "operator*(f16)"_c, &Float16x4x2_operator_scale_Float16 },
        std::pair{ "operator*(f16x2)"_c, &Float16x4x2_transform_Float16x4 },
        std::pair{ "operator*(f16x4x2)"_c, &Float16x4x2_operator_mul_Float16x4x2 },
        std::pair{ "operator*="_c, &Float16x4x2_operator_mulasg_Float16x4x2 },
        std::pair{ "operator*=(f16x4x2)"_c, &Float16x4x2_operator_mulasg_Float16x4x2 },
        std::pair{ "operator+"_c, &Float16x4x2_operator_add_Float16x4x2 },
        std::pair{ "operator+(f16x4x2)"_c, &Float16x4x2_operator_add_Float16x4x2 },
        std::pair{ "operator+="_c, &Float16x4x2_operator_addasg_Float16x4x2 },
        std::pair{ "operator+=(f16x4x2)"_c, &Float16x4x2_operator_addasg_Float16x4x2 },
        std::pair{ "operator-"_c, &Float16x4x2_operator_sub_Float16x4x2 },
        std::pair{ "operator-(f16x4x2)"_c, &Float16x4x2_operator_sub_Float16x4x2 },
        std::pair{ "operator-="_c, &Float16x4x2_operator_subasg_Float16x4x2 },
        std::pair{ "operator-=(f16x4x2)"_c, &Float16x4x2_operator_subasg_Float16x4x2 },
        std::pair{ "operator[]"_c, &Float16x4x2_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16x4x2_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16x4x2_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16x4x2_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16x4x2_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16x4x2_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16x4x2_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16x4x2_operator_index_UInt32 }
    };
}
Float16x4x2 Float16x4x2Type;

/// operator[] with Int32
Variable Float16x2x3_operator_index_Int32_arg;
Function Float16x2x3_operator_index_Int32;
inline constexpr std::array Float16x2x3_operator_index_Int32_args = { &Float16x2x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x2x3_operator_index_UInt32_arg;
Function Float16x2x3_operator_index_UInt32;
inline constexpr std::array Float16x2x3_operator_index_UInt32_args = { &Float16x2x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x2x3_operator_index_Int16_arg;
Function Float16x2x3_operator_index_Int16;
inline constexpr std::array Float16x2x3_operator_index_Int16_args = { &Float16x2x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x2x3_operator_index_UInt16_arg;
Function Float16x2x3_operator_index_UInt16;
inline constexpr std::array Float16x2x3_operator_index_UInt16_args = { &Float16x2x3_operator_index_UInt16_arg };

/// operator* with Float16x3
Variable Float16x2x3_transform_Float16x2_vec;
Function Float16x2x3_transform_Float16x2;
inline constexpr std::array Float16x2x3_transform_Float16x2_args = { &Float16x2x3_transform_Float16x2_vec };

/// operator+ with Float16x2x3
Variable Float16x2x3_operator_add_Float16x2x3_arg;
Function Float16x2x3_operator_add_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_add_Float16x2x3_args = { &Float16x2x3_operator_add_Float16x2x3_arg };

/// operator- with Float16x2x3
Variable Float16x2x3_operator_sub_Float16x2x3_arg;
Function Float16x2x3_operator_sub_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_sub_Float16x2x3_args = { &Float16x2x3_operator_sub_Float16x2x3_arg };

/// operator* with Float16x2x3
Variable Float16x2x3_operator_mul_Float16x2x3_arg;
Function Float16x2x3_operator_mul_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_mul_Float16x2x3_args = { &Float16x2x3_operator_mul_Float16x2x3_arg };

/// operator+= with Float16x2x3
Variable Float16x2x3_operator_addasg_Float16x2x3_arg;
Function Float16x2x3_operator_addasg_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_addasg_Float16x2x3_args = { &Float16x2x3_operator_addasg_Float16x2x3_arg };

/// operator-= with Float16x2x3
Variable Float16x2x3_operator_subasg_Float16x2x3_arg;
Function Float16x2x3_operator_subasg_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_subasg_Float16x2x3_args = { &Float16x2x3_operator_subasg_Float16x2x3_arg };

/// operator*= with Float16x2x3
Variable Float16x2x3_operator_mulasg_Float16x2x3_arg;
Function Float16x2x3_operator_mulasg_Float16x2x3;
inline constexpr std::array Float16x2x3_operator_mulasg_Float16x2x3_args = { &Float16x2x3_operator_mulasg_Float16x2x3_arg };

/// operator* with Float16
Variable Float16x2x3_operator_scale_Float16_arg;
Function Float16x2x3_operator_scale_Float16;
inline constexpr std::array Float16x2x3_operator_scale_Float16_args = { &Float16x2x3_operator_scale_Float16_arg };

Float16x2x3::Float16x2x3()
{
    this->name = "f16x2x3"_c;
    this->columnSize = 2;
    this->rowSize = 3;
    this->byteSize = 12;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x2x3_operator_index_Int32_arg.name = "idx"_c;
    Float16x2x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x2x3_operator_index_Int32.name = "operator[]"_c;
    Float16x2x3_operator_index_Int32.backendIndex = 1300;
    Float16x2x3_operator_index_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x3_operator_index_Int32.parameters = Float16x2x3_operator_index_Int32_args;
    Symbol::Resolved(&Float16x2x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2x3_operator_index_Int32)->signature = "f16x2 operator[](i32)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_Int32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt32
    Float16x2x3_operator_index_UInt32_arg.name = "idx"_c;
    Float16x2x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x2x3_operator_index_UInt32.name = "operator[]"_c;
    Float16x2x3_operator_index_UInt32.backendIndex = 1301;
    Float16x2x3_operator_index_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x3_operator_index_UInt32.parameters = Float16x2x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32)->signature = "f16x2 operator[](u32)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with Int16
    Float16x2x3_operator_index_Int16_arg.name = "idx"_c;
    Float16x2x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x2x3_operator_index_Int16.name = "operator[]"_c;
    Float16x2x3_operator_index_Int16.backendIndex = 1302;
    Float16x2x3_operator_index_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x3_operator_index_Int16.parameters = Float16x2x3_operator_index_Int16_args;
    Symbol::Resolved(&Float16x2x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2x3_operator_index_Int16)->signature = "f16x2 operator[](i16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_Int16)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt16
    Float16x2x3_operator_index_UInt16_arg.name = "idx"_c;
    Float16x2x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x2x3_operator_index_UInt16.name = "operator[]"_c;
    Float16x2x3_operator_index_UInt16.backendIndex = 1303;
    Float16x2x3_operator_index_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x3_operator_index_UInt16.parameters = Float16x2x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16)->signature = "f16x2 operator[](u16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_index_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float16x3
    Float16x2x3_transform_Float16x2_vec.name = "vec"_c;
    Float16x2x3_transform_Float16x2_vec.type = Type::FullType{ Float16x3Type.name };
    Float16x2x3_transform_Float16x2.name = "operator*"_c;
    Float16x2x3_transform_Float16x2.backendIndex = 1304;
    Float16x2x3_transform_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x3_transform_Float16x2.parameters = Float16x2x3_transform_Float16x2_args;
    Symbol::Resolved(&Float16x2x3_transform_Float16x2_vec)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x2x3_transform_Float16x2)->signature = "f16x2 operator*(f16x3)"_c;
    Symbol::Resolved(&Float16x2x3_transform_Float16x2)->name = "operator*(f16x3)"_c;
    Symbol::Resolved(&Float16x2x3_transform_Float16x2)->nameWithVarNames = "operator*(vec : f16x3)"_c;
    Symbol::Resolved(&Float16x2x3_transform_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator+ with Float16x2x3
    Float16x2x3_operator_add_Float16x2x3_arg.name = "arg"_c;
    Float16x2x3_operator_add_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_add_Float16x2x3.name = "operator+"_c;
    Float16x2x3_operator_add_Float16x2x3.backendIndex = 1305;
    Float16x2x3_operator_add_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_add_Float16x2x3.parameters = Float16x2x3_operator_add_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3)->signature = "f16x2x3 operator+(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3)->name = "operator+(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3)->nameWithVarNames = "operator+(arg : f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_add_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator- with Float16x2x3
    Float16x2x3_operator_sub_Float16x2x3_arg.name = "arg"_c;
    Float16x2x3_operator_sub_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_sub_Float16x2x3.name = "operator-"_c;
    Float16x2x3_operator_sub_Float16x2x3.backendIndex = 1306;
    Float16x2x3_operator_sub_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_sub_Float16x2x3.parameters = Float16x2x3_operator_sub_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3)->signature = "f16x2x3 operator-(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3)->name = "operator-(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3)->nameWithVarNames = "operator-(arg : f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_sub_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator* with Float16x2x3
    Float16x2x3_operator_mul_Float16x2x3_arg.name = "arg"_c;
    Float16x2x3_operator_mul_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_mul_Float16x2x3.name = "operator*"_c;
    Float16x2x3_operator_mul_Float16x2x3.backendIndex = 1307;
    Float16x2x3_operator_mul_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_mul_Float16x2x3.parameters = Float16x2x3_operator_mul_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3)->signature = "f16x2x3 operator*(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3)->name = "operator*(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3)->nameWithVarNames = "operator*(arg : f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_mul_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator+= with Float16x2x3
    Float16x2x3_operator_addasg_Float16x2x3_arg.name = "arg"_c;
    Float16x2x3_operator_addasg_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_addasg_Float16x2x3.name = "operator+="_c;
    Float16x2x3_operator_addasg_Float16x2x3.backendIndex = 1308;
    Float16x2x3_operator_addasg_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_addasg_Float16x2x3.parameters = Float16x2x3_operator_addasg_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3)->signature = "f16x2x3 operator+=(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3)->name = "operator+=(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3)->nameWithVarNames = "operator+=(arg : f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_addasg_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator-= with Float16x2x3
    Float16x2x3_operator_subasg_Float16x2x3_arg.name = "arg"_c;
    Float16x2x3_operator_subasg_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_subasg_Float16x2x3.name = "operator-="_c;
    Float16x2x3_operator_subasg_Float16x2x3.backendIndex = 1309;
    Float16x2x3_operator_subasg_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_subasg_Float16x2x3.parameters = Float16x2x3_operator_subasg_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3)->signature = "f16x2x3 operator-=(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3)->name = "operator-=(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3)->nameWithVarNames = "operator-=(arg : f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_subasg_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator*= with Float16x2x3
    Float16x2x3_operator_mulasg_Float16x2x3_arg.name = "arg"_c;
    Float16x2x3_operator_mulasg_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    Float16x2x3_operator_mulasg_Float16x2x3.name = "operator*="_c;
    Float16x2x3_operator_mulasg_Float16x2x3.backendIndex = 1310;
    Float16x2x3_operator_mulasg_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_mulasg_Float16x2x3.parameters = Float16x2x3_operator_mulasg_Float16x2x3_args;
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3)->signature = "f16x2x3 operator*=(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3)->name = "operator*=(f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3)->nameWithVarNames = "operator*=(arg : f16x2x3)"_c;
    Symbol::Resolved(&Float16x2x3_operator_mulasg_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// operator* with Float16
    Float16x2x3_operator_scale_Float16_arg.name = "arg"_c;
    Float16x2x3_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x2x3_operator_scale_Float16.name = "operator*"_c;
    Float16x2x3_operator_scale_Float16.backendIndex = 1311;
    Float16x2x3_operator_scale_Float16.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_operator_scale_Float16.parameters = Float16x2x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16)->signature = "f16x2x3 operator*(f16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x2x3_operator_scale_Float16)->returnTypeSymbol = &Float16x2x3Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float16x2x3_transform_Float16x2 },
        std::pair{ "operator*"_c, &Float16x2x3_operator_mul_Float16x2x3 },
        std::pair{ "operator*"_c, &Float16x2x3_operator_scale_Float16 },
        std::pair{ "operator*(f16)"_c, &Float16x2x3_operator_scale_Float16 },
        std::pair{ "operator*(f16x2x3)"_c, &Float16x2x3_operator_mul_Float16x2x3 },
        std::pair{ "operator*(f16x3)"_c, &Float16x2x3_transform_Float16x2 },
        std::pair{ "operator*="_c, &Float16x2x3_operator_mulasg_Float16x2x3 },
        std::pair{ "operator*=(f16x2x3)"_c, &Float16x2x3_operator_mulasg_Float16x2x3 },
        std::pair{ "operator+"_c, &Float16x2x3_operator_add_Float16x2x3 },
        std::pair{ "operator+(f16x2x3)"_c, &Float16x2x3_operator_add_Float16x2x3 },
        std::pair{ "operator+="_c, &Float16x2x3_operator_addasg_Float16x2x3 },
        std::pair{ "operator+=(f16x2x3)"_c, &Float16x2x3_operator_addasg_Float16x2x3 },
        std::pair{ "operator-"_c, &Float16x2x3_operator_sub_Float16x2x3 },
        std::pair{ "operator-(f16x2x3)"_c, &Float16x2x3_operator_sub_Float16x2x3 },
        std::pair{ "operator-="_c, &Float16x2x3_operator_subasg_Float16x2x3 },
        std::pair{ "operator-=(f16x2x3)"_c, &Float16x2x3_operator_subasg_Float16x2x3 },
        std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16x2x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16x2x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16x2x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16x2x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16x2x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16x2x3_operator_index_UInt32 }
    };
}
Float16x2x3 Float16x2x3Type;

/// operator[] with Int32
Variable Float16x3x3_operator_index_Int32_arg;
Function Float16x3x3_operator_index_Int32;
inline constexpr std::array Float16x3x3_operator_index_Int32_args = { &Float16x3x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x3x3_operator_index_UInt32_arg;
Function Float16x3x3_operator_index_UInt32;
inline constexpr std::array Float16x3x3_operator_index_UInt32_args = { &Float16x3x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x3x3_operator_index_Int16_arg;
Function Float16x3x3_operator_index_Int16;
inline constexpr std::array Float16x3x3_operator_index_Int16_args = { &Float16x3x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x3x3_operator_index_UInt16_arg;
Function Float16x3x3_operator_index_UInt16;
inline constexpr std::array Float16x3x3_operator_index_UInt16_args = { &Float16x3x3_operator_index_UInt16_arg };

/// operator* with Float16x3
Variable Float16x3x3_transform_Float16x3_vec;
Function Float16x3x3_transform_Float16x3;
inline constexpr std::array Float16x3x3_transform_Float16x3_args = { &Float16x3x3_transform_Float16x3_vec };

/// operator+ with Float16x3x3
Variable Float16x3x3_operator_add_Float16x3x3_arg;
Function Float16x3x3_operator_add_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_add_Float16x3x3_args = { &Float16x3x3_operator_add_Float16x3x3_arg };

/// operator- with Float16x3x3
Variable Float16x3x3_operator_sub_Float16x3x3_arg;
Function Float16x3x3_operator_sub_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_sub_Float16x3x3_args = { &Float16x3x3_operator_sub_Float16x3x3_arg };

/// operator* with Float16x3x3
Variable Float16x3x3_operator_mul_Float16x3x3_arg;
Function Float16x3x3_operator_mul_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_mul_Float16x3x3_args = { &Float16x3x3_operator_mul_Float16x3x3_arg };

/// operator+= with Float16x3x3
Variable Float16x3x3_operator_addasg_Float16x3x3_arg;
Function Float16x3x3_operator_addasg_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_addasg_Float16x3x3_args = { &Float16x3x3_operator_addasg_Float16x3x3_arg };

/// operator-= with Float16x3x3
Variable Float16x3x3_operator_subasg_Float16x3x3_arg;
Function Float16x3x3_operator_subasg_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_subasg_Float16x3x3_args = { &Float16x3x3_operator_subasg_Float16x3x3_arg };

/// operator*= with Float16x3x3
Variable Float16x3x3_operator_mulasg_Float16x3x3_arg;
Function Float16x3x3_operator_mulasg_Float16x3x3;
inline constexpr std::array Float16x3x3_operator_mulasg_Float16x3x3_args = { &Float16x3x3_operator_mulasg_Float16x3x3_arg };

/// operator* with Float16
Variable Float16x3x3_operator_scale_Float16_arg;
Function Float16x3x3_operator_scale_Float16;
inline constexpr std::array Float16x3x3_operator_scale_Float16_args = { &Float16x3x3_operator_scale_Float16_arg };

Float16x3x3::Float16x3x3()
{
    this->name = "f16x3x3"_c;
    this->columnSize = 3;
    this->rowSize = 3;
    this->byteSize = 18;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x3x3_operator_index_Int32_arg.name = "idx"_c;
    Float16x3x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x3x3_operator_index_Int32.name = "operator[]"_c;
    Float16x3x3_operator_index_Int32.backendIndex = 1315;
    Float16x3x3_operator_index_Int32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_operator_index_Int32.parameters = Float16x3x3_operator_index_Int32_args;
    Symbol::Resolved(&Float16x3x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3x3_operator_index_Int32)->signature = "f16x3 operator[](i32)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_Int32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt32
    Float16x3x3_operator_index_UInt32_arg.name = "idx"_c;
    Float16x3x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x3x3_operator_index_UInt32.name = "operator[]"_c;
    Float16x3x3_operator_index_UInt32.backendIndex = 1316;
    Float16x3x3_operator_index_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_operator_index_UInt32.parameters = Float16x3x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32)->signature = "f16x3 operator[](u32)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with Int16
    Float16x3x3_operator_index_Int16_arg.name = "idx"_c;
    Float16x3x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x3x3_operator_index_Int16.name = "operator[]"_c;
    Float16x3x3_operator_index_Int16.backendIndex = 1317;
    Float16x3x3_operator_index_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_operator_index_Int16.parameters = Float16x3x3_operator_index_Int16_args;
    Symbol::Resolved(&Float16x3x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3x3_operator_index_Int16)->signature = "f16x3 operator[](i16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_Int16)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt16
    Float16x3x3_operator_index_UInt16_arg.name = "idx"_c;
    Float16x3x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x3x3_operator_index_UInt16.name = "operator[]"_c;
    Float16x3x3_operator_index_UInt16.backendIndex = 1318;
    Float16x3x3_operator_index_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_operator_index_UInt16.parameters = Float16x3x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16)->signature = "f16x3 operator[](u16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_index_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float16x3
    Float16x3x3_transform_Float16x3_vec.name = "vec"_c;
    Float16x3x3_transform_Float16x3_vec.type = Type::FullType{ Float16x3Type.name };
    Float16x3x3_transform_Float16x3.name = "operator*"_c;
    Float16x3x3_transform_Float16x3.backendIndex = 1319;
    Float16x3x3_transform_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x3_transform_Float16x3.parameters = Float16x3x3_transform_Float16x3_args;
    Symbol::Resolved(&Float16x3x3_transform_Float16x3_vec)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3x3_transform_Float16x3)->signature = "f16x3 operator*(f16x3)"_c;
    Symbol::Resolved(&Float16x3x3_transform_Float16x3)->name = "operator*(f16x3)"_c;
    Symbol::Resolved(&Float16x3x3_transform_Float16x3)->nameWithVarNames = "operator*(vec : f16x3)"_c;
    Symbol::Resolved(&Float16x3x3_transform_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator+ with Float16x3x3
    Float16x3x3_operator_add_Float16x3x3_arg.name = "arg"_c;
    Float16x3x3_operator_add_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_add_Float16x3x3.name = "operator+"_c;
    Float16x3x3_operator_add_Float16x3x3.backendIndex = 1320;
    Float16x3x3_operator_add_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_add_Float16x3x3.parameters = Float16x3x3_operator_add_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3)->signature = "f16x3x3 operator+(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3)->name = "operator+(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3)->nameWithVarNames = "operator+(arg : f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_add_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator- with Float16x3x3
    Float16x3x3_operator_sub_Float16x3x3_arg.name = "arg"_c;
    Float16x3x3_operator_sub_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_sub_Float16x3x3.name = "operator-"_c;
    Float16x3x3_operator_sub_Float16x3x3.backendIndex = 1321;
    Float16x3x3_operator_sub_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_sub_Float16x3x3.parameters = Float16x3x3_operator_sub_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3)->signature = "f16x3x3 operator-(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3)->name = "operator-(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3)->nameWithVarNames = "operator-(arg : f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_sub_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator* with Float16x3x3
    Float16x3x3_operator_mul_Float16x3x3_arg.name = "arg"_c;
    Float16x3x3_operator_mul_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_mul_Float16x3x3.name = "operator*"_c;
    Float16x3x3_operator_mul_Float16x3x3.backendIndex = 1322;
    Float16x3x3_operator_mul_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_mul_Float16x3x3.parameters = Float16x3x3_operator_mul_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3)->signature = "f16x3x3 operator*(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3)->name = "operator*(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3)->nameWithVarNames = "operator*(arg : f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_mul_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator+= with Float16x3x3
    Float16x3x3_operator_addasg_Float16x3x3_arg.name = "arg"_c;
    Float16x3x3_operator_addasg_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_addasg_Float16x3x3.name = "operator+="_c;
    Float16x3x3_operator_addasg_Float16x3x3.backendIndex = 1323;
    Float16x3x3_operator_addasg_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_addasg_Float16x3x3.parameters = Float16x3x3_operator_addasg_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3)->signature = "f16x3x3 operator+=(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3)->name = "operator+=(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3)->nameWithVarNames = "operator+=(arg : f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_addasg_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator-= with Float16x3x3
    Float16x3x3_operator_subasg_Float16x3x3_arg.name = "arg"_c;
    Float16x3x3_operator_subasg_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_subasg_Float16x3x3.name = "operator-="_c;
    Float16x3x3_operator_subasg_Float16x3x3.backendIndex = 1324;
    Float16x3x3_operator_subasg_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_subasg_Float16x3x3.parameters = Float16x3x3_operator_subasg_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3)->signature = "f16x3x3 operator-=(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3)->name = "operator-=(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3)->nameWithVarNames = "operator-=(arg : f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_subasg_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator*= with Float16x3x3
    Float16x3x3_operator_mulasg_Float16x3x3_arg.name = "arg"_c;
    Float16x3x3_operator_mulasg_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    Float16x3x3_operator_mulasg_Float16x3x3.name = "operator*="_c;
    Float16x3x3_operator_mulasg_Float16x3x3.backendIndex = 1325;
    Float16x3x3_operator_mulasg_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_mulasg_Float16x3x3.parameters = Float16x3x3_operator_mulasg_Float16x3x3_args;
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3)->signature = "f16x3x3 operator*=(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3)->name = "operator*=(f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3)->nameWithVarNames = "operator*=(arg : f16x3x3)"_c;
    Symbol::Resolved(&Float16x3x3_operator_mulasg_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// operator* with Float16
    Float16x3x3_operator_scale_Float16_arg.name = "arg"_c;
    Float16x3x3_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x3x3_operator_scale_Float16.name = "operator*"_c;
    Float16x3x3_operator_scale_Float16.backendIndex = 1326;
    Float16x3x3_operator_scale_Float16.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_operator_scale_Float16.parameters = Float16x3x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16)->signature = "f16x3x3 operator*(f16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x3x3_operator_scale_Float16)->returnTypeSymbol = &Float16x3x3Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float16x3x3_transform_Float16x3 },
        std::pair{ "operator*"_c, &Float16x3x3_operator_mul_Float16x3x3 },
        std::pair{ "operator*"_c, &Float16x3x3_operator_scale_Float16 },
        std::pair{ "operator*(f16)"_c, &Float16x3x3_operator_scale_Float16 },
        std::pair{ "operator*(f16x3)"_c, &Float16x3x3_transform_Float16x3 },
        std::pair{ "operator*(f16x3x3)"_c, &Float16x3x3_operator_mul_Float16x3x3 },
        std::pair{ "operator*="_c, &Float16x3x3_operator_mulasg_Float16x3x3 },
        std::pair{ "operator*=(f16x3x3)"_c, &Float16x3x3_operator_mulasg_Float16x3x3 },
        std::pair{ "operator+"_c, &Float16x3x3_operator_add_Float16x3x3 },
        std::pair{ "operator+(f16x3x3)"_c, &Float16x3x3_operator_add_Float16x3x3 },
        std::pair{ "operator+="_c, &Float16x3x3_operator_addasg_Float16x3x3 },
        std::pair{ "operator+=(f16x3x3)"_c, &Float16x3x3_operator_addasg_Float16x3x3 },
        std::pair{ "operator-"_c, &Float16x3x3_operator_sub_Float16x3x3 },
        std::pair{ "operator-(f16x3x3)"_c, &Float16x3x3_operator_sub_Float16x3x3 },
        std::pair{ "operator-="_c, &Float16x3x3_operator_subasg_Float16x3x3 },
        std::pair{ "operator-=(f16x3x3)"_c, &Float16x3x3_operator_subasg_Float16x3x3 },
        std::pair{ "operator[]"_c, &Float16x3x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16x3x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16x3x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16x3x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16x3x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16x3x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16x3x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16x3x3_operator_index_UInt32 }
    };
}
Float16x3x3 Float16x3x3Type;

/// operator[] with Int32
Variable Float16x4x3_operator_index_Int32_arg;
Function Float16x4x3_operator_index_Int32;
inline constexpr std::array Float16x4x3_operator_index_Int32_args = { &Float16x4x3_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x4x3_operator_index_UInt32_arg;
Function Float16x4x3_operator_index_UInt32;
inline constexpr std::array Float16x4x3_operator_index_UInt32_args = { &Float16x4x3_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x4x3_operator_index_Int16_arg;
Function Float16x4x3_operator_index_Int16;
inline constexpr std::array Float16x4x3_operator_index_Int16_args = { &Float16x4x3_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x4x3_operator_index_UInt16_arg;
Function Float16x4x3_operator_index_UInt16;
inline constexpr std::array Float16x4x3_operator_index_UInt16_args = { &Float16x4x3_operator_index_UInt16_arg };

/// operator* with Float16x3
Variable Float16x4x3_transform_Float16x4_vec;
Function Float16x4x3_transform_Float16x4;
inline constexpr std::array Float16x4x3_transform_Float16x4_args = { &Float16x4x3_transform_Float16x4_vec };

/// operator+ with Float16x4x3
Variable Float16x4x3_operator_add_Float16x4x3_arg;
Function Float16x4x3_operator_add_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_add_Float16x4x3_args = { &Float16x4x3_operator_add_Float16x4x3_arg };

/// operator- with Float16x4x3
Variable Float16x4x3_operator_sub_Float16x4x3_arg;
Function Float16x4x3_operator_sub_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_sub_Float16x4x3_args = { &Float16x4x3_operator_sub_Float16x4x3_arg };

/// operator* with Float16x4x3
Variable Float16x4x3_operator_mul_Float16x4x3_arg;
Function Float16x4x3_operator_mul_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_mul_Float16x4x3_args = { &Float16x4x3_operator_mul_Float16x4x3_arg };

/// operator+= with Float16x4x3
Variable Float16x4x3_operator_addasg_Float16x4x3_arg;
Function Float16x4x3_operator_addasg_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_addasg_Float16x4x3_args = { &Float16x4x3_operator_addasg_Float16x4x3_arg };

/// operator-= with Float16x4x3
Variable Float16x4x3_operator_subasg_Float16x4x3_arg;
Function Float16x4x3_operator_subasg_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_subasg_Float16x4x3_args = { &Float16x4x3_operator_subasg_Float16x4x3_arg };

/// operator*= with Float16x4x3
Variable Float16x4x3_operator_mulasg_Float16x4x3_arg;
Function Float16x4x3_operator_mulasg_Float16x4x3;
inline constexpr std::array Float16x4x3_operator_mulasg_Float16x4x3_args = { &Float16x4x3_operator_mulasg_Float16x4x3_arg };

/// operator* with Float16
Variable Float16x4x3_operator_scale_Float16_arg;
Function Float16x4x3_operator_scale_Float16;
inline constexpr std::array Float16x4x3_operator_scale_Float16_args = { &Float16x4x3_operator_scale_Float16_arg };

Float16x4x3::Float16x4x3()
{
    this->name = "f16x4x3"_c;
    this->columnSize = 4;
    this->rowSize = 3;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x4x3_operator_index_Int32_arg.name = "idx"_c;
    Float16x4x3_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x4x3_operator_index_Int32.name = "operator[]"_c;
    Float16x4x3_operator_index_Int32.backendIndex = 1329;
    Float16x4x3_operator_index_Int32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x3_operator_index_Int32.parameters = Float16x4x3_operator_index_Int32_args;
    Symbol::Resolved(&Float16x4x3_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4x3_operator_index_Int32)->signature = "f16x4 operator[](i32)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_Int32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt32
    Float16x4x3_operator_index_UInt32_arg.name = "idx"_c;
    Float16x4x3_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x4x3_operator_index_UInt32.name = "operator[]"_c;
    Float16x4x3_operator_index_UInt32.backendIndex = 1330;
    Float16x4x3_operator_index_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x3_operator_index_UInt32.parameters = Float16x4x3_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32)->signature = "f16x4 operator[](u32)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with Int16
    Float16x4x3_operator_index_Int16_arg.name = "idx"_c;
    Float16x4x3_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x4x3_operator_index_Int16.name = "operator[]"_c;
    Float16x4x3_operator_index_Int16.backendIndex = 1331;
    Float16x4x3_operator_index_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x3_operator_index_Int16.parameters = Float16x4x3_operator_index_Int16_args;
    Symbol::Resolved(&Float16x4x3_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4x3_operator_index_Int16)->signature = "f16x4 operator[](i16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_Int16)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt16
    Float16x4x3_operator_index_UInt16_arg.name = "idx"_c;
    Float16x4x3_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x4x3_operator_index_UInt16.name = "operator[]"_c;
    Float16x4x3_operator_index_UInt16.backendIndex = 1332;
    Float16x4x3_operator_index_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x3_operator_index_UInt16.parameters = Float16x4x3_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16)->signature = "f16x4 operator[](u16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_index_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float16x3
    Float16x4x3_transform_Float16x4_vec.name = "vec"_c;
    Float16x4x3_transform_Float16x4_vec.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_transform_Float16x4.name = "operator*"_c;
    Float16x4x3_transform_Float16x4.backendIndex = 1333;
    Float16x4x3_transform_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x3_transform_Float16x4.parameters = Float16x4x3_transform_Float16x4_args;
    Symbol::Resolved(&Float16x4x3_transform_Float16x4_vec)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_transform_Float16x4)->signature = "f16x4 operator*(f16x3)"_c;
    Symbol::Resolved(&Float16x4x3_transform_Float16x4)->name = "operator*(f16x3)"_c;
    Symbol::Resolved(&Float16x4x3_transform_Float16x4)->nameWithVarNames = "operator*(vec : f16x3)"_c;
    Symbol::Resolved(&Float16x4x3_transform_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator+ with Float16x4x3
    Float16x4x3_operator_add_Float16x4x3_arg.name = "arg"_c;
    Float16x4x3_operator_add_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_add_Float16x4x3.name = "operator+"_c;
    Float16x4x3_operator_add_Float16x4x3.backendIndex = 1334;
    Float16x4x3_operator_add_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_add_Float16x4x3.parameters = Float16x4x3_operator_add_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3)->signature = "f16x4x3 operator+(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3)->name = "operator+(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3)->nameWithVarNames = "operator+(arg : f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_add_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator- with Float16x4x3
    Float16x4x3_operator_sub_Float16x4x3_arg.name = "arg"_c;
    Float16x4x3_operator_sub_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_sub_Float16x4x3.name = "operator-"_c;
    Float16x4x3_operator_sub_Float16x4x3.backendIndex = 1335;
    Float16x4x3_operator_sub_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_sub_Float16x4x3.parameters = Float16x4x3_operator_sub_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3)->signature = "f16x4x3 operator-(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3)->name = "operator-(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3)->nameWithVarNames = "operator-(arg : f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_sub_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator* with Float16x4x3
    Float16x4x3_operator_mul_Float16x4x3_arg.name = "arg"_c;
    Float16x4x3_operator_mul_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_mul_Float16x4x3.name = "operator*"_c;
    Float16x4x3_operator_mul_Float16x4x3.backendIndex = 1336;
    Float16x4x3_operator_mul_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_mul_Float16x4x3.parameters = Float16x4x3_operator_mul_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3)->signature = "f16x4x3 operator*(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3)->name = "operator*(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3)->nameWithVarNames = "operator*(arg : f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_mul_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator+= with Float16x4x3
    Float16x4x3_operator_addasg_Float16x4x3_arg.name = "arg"_c;
    Float16x4x3_operator_addasg_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_addasg_Float16x4x3.name = "operator+="_c;
    Float16x4x3_operator_addasg_Float16x4x3.backendIndex = 1337;
    Float16x4x3_operator_addasg_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_addasg_Float16x4x3.parameters = Float16x4x3_operator_addasg_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3)->signature = "f16x4x3 operator+=(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3)->name = "operator+=(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3)->nameWithVarNames = "operator+=(arg : f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_addasg_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator-= with Float16x4x3
    Float16x4x3_operator_subasg_Float16x4x3_arg.name = "arg"_c;
    Float16x4x3_operator_subasg_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_subasg_Float16x4x3.name = "operator-="_c;
    Float16x4x3_operator_subasg_Float16x4x3.backendIndex = 1338;
    Float16x4x3_operator_subasg_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_subasg_Float16x4x3.parameters = Float16x4x3_operator_subasg_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3)->signature = "f16x4x3 operator-=(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3)->name = "operator-=(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3)->nameWithVarNames = "operator-=(arg : f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_subasg_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator*= with Float16x4x3
    Float16x4x3_operator_mulasg_Float16x4x3_arg.name = "arg"_c;
    Float16x4x3_operator_mulasg_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    Float16x4x3_operator_mulasg_Float16x4x3.name = "operator*="_c;
    Float16x4x3_operator_mulasg_Float16x4x3.backendIndex = 1339;
    Float16x4x3_operator_mulasg_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_mulasg_Float16x4x3.parameters = Float16x4x3_operator_mulasg_Float16x4x3_args;
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3)->signature = "f16x4x3 operator*=(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3)->name = "operator*=(f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3)->nameWithVarNames = "operator*=(arg : f16x4x3)"_c;
    Symbol::Resolved(&Float16x4x3_operator_mulasg_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// operator* with Float16
    Float16x4x3_operator_scale_Float16_arg.name = "arg"_c;
    Float16x4x3_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x4x3_operator_scale_Float16.name = "operator*"_c;
    Float16x4x3_operator_scale_Float16.backendIndex = 1340;
    Float16x4x3_operator_scale_Float16.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_operator_scale_Float16.parameters = Float16x4x3_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16)->signature = "f16x4x3 operator*(f16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x4x3_operator_scale_Float16)->returnTypeSymbol = &Float16x4x3Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float16x4x3_transform_Float16x4 },
        std::pair{ "operator*"_c, &Float16x4x3_operator_mul_Float16x4x3 },
        std::pair{ "operator*"_c, &Float16x4x3_operator_scale_Float16 },
        std::pair{ "operator*(f16)"_c, &Float16x4x3_operator_scale_Float16 },
        std::pair{ "operator*(f16x3)"_c, &Float16x4x3_transform_Float16x4 },
        std::pair{ "operator*(f16x4x3)"_c, &Float16x4x3_operator_mul_Float16x4x3 },
        std::pair{ "operator*="_c, &Float16x4x3_operator_mulasg_Float16x4x3 },
        std::pair{ "operator*=(f16x4x3)"_c, &Float16x4x3_operator_mulasg_Float16x4x3 },
        std::pair{ "operator+"_c, &Float16x4x3_operator_add_Float16x4x3 },
        std::pair{ "operator+(f16x4x3)"_c, &Float16x4x3_operator_add_Float16x4x3 },
        std::pair{ "operator+="_c, &Float16x4x3_operator_addasg_Float16x4x3 },
        std::pair{ "operator+=(f16x4x3)"_c, &Float16x4x3_operator_addasg_Float16x4x3 },
        std::pair{ "operator-"_c, &Float16x4x3_operator_sub_Float16x4x3 },
        std::pair{ "operator-(f16x4x3)"_c, &Float16x4x3_operator_sub_Float16x4x3 },
        std::pair{ "operator-="_c, &Float16x4x3_operator_subasg_Float16x4x3 },
        std::pair{ "operator-=(f16x4x3)"_c, &Float16x4x3_operator_subasg_Float16x4x3 },
        std::pair{ "operator[]"_c, &Float16x4x3_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16x4x3_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16x4x3_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16x4x3_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16x4x3_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16x4x3_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16x4x3_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16x4x3_operator_index_UInt32 }
    };
}
Float16x4x3 Float16x4x3Type;

/// operator[] with Int32
Variable Float16x2x4_operator_index_Int32_arg;
Function Float16x2x4_operator_index_Int32;
inline constexpr std::array Float16x2x4_operator_index_Int32_args = { &Float16x2x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x2x4_operator_index_UInt32_arg;
Function Float16x2x4_operator_index_UInt32;
inline constexpr std::array Float16x2x4_operator_index_UInt32_args = { &Float16x2x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x2x4_operator_index_Int16_arg;
Function Float16x2x4_operator_index_Int16;
inline constexpr std::array Float16x2x4_operator_index_Int16_args = { &Float16x2x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x2x4_operator_index_UInt16_arg;
Function Float16x2x4_operator_index_UInt16;
inline constexpr std::array Float16x2x4_operator_index_UInt16_args = { &Float16x2x4_operator_index_UInt16_arg };

/// operator* with Float16x4
Variable Float16x2x4_transform_Float16x2_vec;
Function Float16x2x4_transform_Float16x2;
inline constexpr std::array Float16x2x4_transform_Float16x2_args = { &Float16x2x4_transform_Float16x2_vec };

/// operator+ with Float16x2x4
Variable Float16x2x4_operator_add_Float16x2x4_arg;
Function Float16x2x4_operator_add_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_add_Float16x2x4_args = { &Float16x2x4_operator_add_Float16x2x4_arg };

/// operator- with Float16x2x4
Variable Float16x2x4_operator_sub_Float16x2x4_arg;
Function Float16x2x4_operator_sub_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_sub_Float16x2x4_args = { &Float16x2x4_operator_sub_Float16x2x4_arg };

/// operator* with Float16x2x4
Variable Float16x2x4_operator_mul_Float16x2x4_arg;
Function Float16x2x4_operator_mul_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_mul_Float16x2x4_args = { &Float16x2x4_operator_mul_Float16x2x4_arg };

/// operator+= with Float16x2x4
Variable Float16x2x4_operator_addasg_Float16x2x4_arg;
Function Float16x2x4_operator_addasg_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_addasg_Float16x2x4_args = { &Float16x2x4_operator_addasg_Float16x2x4_arg };

/// operator-= with Float16x2x4
Variable Float16x2x4_operator_subasg_Float16x2x4_arg;
Function Float16x2x4_operator_subasg_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_subasg_Float16x2x4_args = { &Float16x2x4_operator_subasg_Float16x2x4_arg };

/// operator*= with Float16x2x4
Variable Float16x2x4_operator_mulasg_Float16x2x4_arg;
Function Float16x2x4_operator_mulasg_Float16x2x4;
inline constexpr std::array Float16x2x4_operator_mulasg_Float16x2x4_args = { &Float16x2x4_operator_mulasg_Float16x2x4_arg };

/// operator* with Float16
Variable Float16x2x4_operator_scale_Float16_arg;
Function Float16x2x4_operator_scale_Float16;
inline constexpr std::array Float16x2x4_operator_scale_Float16_args = { &Float16x2x4_operator_scale_Float16_arg };

Float16x2x4::Float16x2x4()
{
    this->name = "f16x2x4"_c;
    this->columnSize = 2;
    this->rowSize = 4;
    this->byteSize = 16;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x2x4_operator_index_Int32_arg.name = "idx"_c;
    Float16x2x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x2x4_operator_index_Int32.name = "operator[]"_c;
    Float16x2x4_operator_index_Int32.backendIndex = 1343;
    Float16x2x4_operator_index_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x4_operator_index_Int32.parameters = Float16x2x4_operator_index_Int32_args;
    Symbol::Resolved(&Float16x2x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2x4_operator_index_Int32)->signature = "f16x2 operator[](i32)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_Int32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt32
    Float16x2x4_operator_index_UInt32_arg.name = "idx"_c;
    Float16x2x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x2x4_operator_index_UInt32.name = "operator[]"_c;
    Float16x2x4_operator_index_UInt32.backendIndex = 1344;
    Float16x2x4_operator_index_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x4_operator_index_UInt32.parameters = Float16x2x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32)->signature = "f16x2 operator[](u32)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with Int16
    Float16x2x4_operator_index_Int16_arg.name = "idx"_c;
    Float16x2x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x2x4_operator_index_Int16.name = "operator[]"_c;
    Float16x2x4_operator_index_Int16.backendIndex = 1345;
    Float16x2x4_operator_index_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x4_operator_index_Int16.parameters = Float16x2x4_operator_index_Int16_args;
    Symbol::Resolved(&Float16x2x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2x4_operator_index_Int16)->signature = "f16x2 operator[](i16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_Int16)->returnTypeSymbol = &Float16x2Type;

    /// operator[] with UInt16
    Float16x2x4_operator_index_UInt16_arg.name = "idx"_c;
    Float16x2x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x2x4_operator_index_UInt16.name = "operator[]"_c;
    Float16x2x4_operator_index_UInt16.backendIndex = 1346;
    Float16x2x4_operator_index_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x4_operator_index_UInt16.parameters = Float16x2x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16)->signature = "f16x2 operator[](u16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_index_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// operator* with Float16x4
    Float16x2x4_transform_Float16x2_vec.name = "vec"_c;
    Float16x2x4_transform_Float16x2_vec.type = Type::FullType{ Float16x4Type.name };
    Float16x2x4_transform_Float16x2.name = "operator*"_c;
    Float16x2x4_transform_Float16x2.backendIndex = 1347;
    Float16x2x4_transform_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2x4_transform_Float16x2.parameters = Float16x2x4_transform_Float16x2_args;
    Symbol::Resolved(&Float16x2x4_transform_Float16x2_vec)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x2x4_transform_Float16x2)->signature = "f16x2 operator*(f16x4)"_c;
    Symbol::Resolved(&Float16x2x4_transform_Float16x2)->name = "operator*(f16x4)"_c;
    Symbol::Resolved(&Float16x2x4_transform_Float16x2)->nameWithVarNames = "operator*(vec : f16x4)"_c;
    Symbol::Resolved(&Float16x2x4_transform_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// operator+ with Float16x2x4
    Float16x2x4_operator_add_Float16x2x4_arg.name = "arg"_c;
    Float16x2x4_operator_add_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_add_Float16x2x4.name = "operator+"_c;
    Float16x2x4_operator_add_Float16x2x4.backendIndex = 1348;
    Float16x2x4_operator_add_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_add_Float16x2x4.parameters = Float16x2x4_operator_add_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4)->signature = "f16x2x4 operator+(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4)->name = "operator+(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4)->nameWithVarNames = "operator+(arg : f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_add_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator- with Float16x2x4
    Float16x2x4_operator_sub_Float16x2x4_arg.name = "arg"_c;
    Float16x2x4_operator_sub_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_sub_Float16x2x4.name = "operator-"_c;
    Float16x2x4_operator_sub_Float16x2x4.backendIndex = 1349;
    Float16x2x4_operator_sub_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_sub_Float16x2x4.parameters = Float16x2x4_operator_sub_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4)->signature = "f16x2x4 operator-(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4)->name = "operator-(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4)->nameWithVarNames = "operator-(arg : f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_sub_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator* with Float16x2x4
    Float16x2x4_operator_mul_Float16x2x4_arg.name = "arg"_c;
    Float16x2x4_operator_mul_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_mul_Float16x2x4.name = "operator*"_c;
    Float16x2x4_operator_mul_Float16x2x4.backendIndex = 1350;
    Float16x2x4_operator_mul_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_mul_Float16x2x4.parameters = Float16x2x4_operator_mul_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4)->signature = "f16x2x4 operator*(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4)->name = "operator*(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4)->nameWithVarNames = "operator*(arg : f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_mul_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator+= with Float16x2x4
    Float16x2x4_operator_addasg_Float16x2x4_arg.name = "arg"_c;
    Float16x2x4_operator_addasg_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_addasg_Float16x2x4.name = "operator+="_c;
    Float16x2x4_operator_addasg_Float16x2x4.backendIndex = 1351;
    Float16x2x4_operator_addasg_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_addasg_Float16x2x4.parameters = Float16x2x4_operator_addasg_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4)->signature = "f16x2x4 operator+=(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4)->name = "operator+=(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4)->nameWithVarNames = "operator+=(arg : f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_addasg_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator-= with Float16x2x4
    Float16x2x4_operator_subasg_Float16x2x4_arg.name = "arg"_c;
    Float16x2x4_operator_subasg_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_subasg_Float16x2x4.name = "operator-="_c;
    Float16x2x4_operator_subasg_Float16x2x4.backendIndex = 1352;
    Float16x2x4_operator_subasg_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_subasg_Float16x2x4.parameters = Float16x2x4_operator_subasg_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4)->signature = "f16x2x4 operator-=(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4)->name = "operator-=(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4)->nameWithVarNames = "operator-=(arg : f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_subasg_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator*= with Float16x2x4
    Float16x2x4_operator_mulasg_Float16x2x4_arg.name = "arg"_c;
    Float16x2x4_operator_mulasg_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    Float16x2x4_operator_mulasg_Float16x2x4.name = "operator*="_c;
    Float16x2x4_operator_mulasg_Float16x2x4.backendIndex = 1353;
    Float16x2x4_operator_mulasg_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_mulasg_Float16x2x4.parameters = Float16x2x4_operator_mulasg_Float16x2x4_args;
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4)->signature = "f16x2x4 operator*=(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4)->name = "operator*=(f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4)->nameWithVarNames = "operator*=(arg : f16x2x4)"_c;
    Symbol::Resolved(&Float16x2x4_operator_mulasg_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// operator* with Float16
    Float16x2x4_operator_scale_Float16_arg.name = "arg"_c;
    Float16x2x4_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x2x4_operator_scale_Float16.name = "operator*"_c;
    Float16x2x4_operator_scale_Float16.backendIndex = 1354;
    Float16x2x4_operator_scale_Float16.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_operator_scale_Float16.parameters = Float16x2x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16)->signature = "f16x2x4 operator*(f16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x2x4_operator_scale_Float16)->returnTypeSymbol = &Float16x2x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float16x2x4_transform_Float16x2 },
        std::pair{ "operator*"_c, &Float16x2x4_operator_mul_Float16x2x4 },
        std::pair{ "operator*"_c, &Float16x2x4_operator_scale_Float16 },
        std::pair{ "operator*(f16)"_c, &Float16x2x4_operator_scale_Float16 },
        std::pair{ "operator*(f16x2x4)"_c, &Float16x2x4_operator_mul_Float16x2x4 },
        std::pair{ "operator*(f16x4)"_c, &Float16x2x4_transform_Float16x2 },
        std::pair{ "operator*="_c, &Float16x2x4_operator_mulasg_Float16x2x4 },
        std::pair{ "operator*=(f16x2x4)"_c, &Float16x2x4_operator_mulasg_Float16x2x4 },
        std::pair{ "operator+"_c, &Float16x2x4_operator_add_Float16x2x4 },
        std::pair{ "operator+(f16x2x4)"_c, &Float16x2x4_operator_add_Float16x2x4 },
        std::pair{ "operator+="_c, &Float16x2x4_operator_addasg_Float16x2x4 },
        std::pair{ "operator+=(f16x2x4)"_c, &Float16x2x4_operator_addasg_Float16x2x4 },
        std::pair{ "operator-"_c, &Float16x2x4_operator_sub_Float16x2x4 },
        std::pair{ "operator-(f16x2x4)"_c, &Float16x2x4_operator_sub_Float16x2x4 },
        std::pair{ "operator-="_c, &Float16x2x4_operator_subasg_Float16x2x4 },
        std::pair{ "operator-=(f16x2x4)"_c, &Float16x2x4_operator_subasg_Float16x2x4 },
        std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16x2x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16x2x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16x2x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16x2x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16x2x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16x2x4_operator_index_UInt32 }
    };
}
Float16x2x4 Float16x2x4Type;

/// operator[] with Int32
Variable Float16x3x4_operator_index_Int32_arg;
Function Float16x3x4_operator_index_Int32;
inline constexpr std::array Float16x3x4_operator_index_Int32_args = { &Float16x3x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x3x4_operator_index_UInt32_arg;
Function Float16x3x4_operator_index_UInt32;
inline constexpr std::array Float16x3x4_operator_index_UInt32_args = { &Float16x3x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x3x4_operator_index_Int16_arg;
Function Float16x3x4_operator_index_Int16;
inline constexpr std::array Float16x3x4_operator_index_Int16_args = { &Float16x3x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x3x4_operator_index_UInt16_arg;
Function Float16x3x4_operator_index_UInt16;
inline constexpr std::array Float16x3x4_operator_index_UInt16_args = { &Float16x3x4_operator_index_UInt16_arg };

/// operator* with Float16x4
Variable Float16x3x4_transform_Float16x3_vec;
Function Float16x3x4_transform_Float16x3;
inline constexpr std::array Float16x3x4_transform_Float16x3_args = { &Float16x3x4_transform_Float16x3_vec };

/// operator+ with Float16x3x4
Variable Float16x3x4_operator_add_Float16x3x4_arg;
Function Float16x3x4_operator_add_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_add_Float16x3x4_args = { &Float16x3x4_operator_add_Float16x3x4_arg };

/// operator- with Float16x3x4
Variable Float16x3x4_operator_sub_Float16x3x4_arg;
Function Float16x3x4_operator_sub_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_sub_Float16x3x4_args = { &Float16x3x4_operator_sub_Float16x3x4_arg };

/// operator* with Float16x3x4
Variable Float16x3x4_operator_mul_Float16x3x4_arg;
Function Float16x3x4_operator_mul_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_mul_Float16x3x4_args = { &Float16x3x4_operator_mul_Float16x3x4_arg };

/// operator+= with Float16x3x4
Variable Float16x3x4_operator_addasg_Float16x3x4_arg;
Function Float16x3x4_operator_addasg_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_addasg_Float16x3x4_args = { &Float16x3x4_operator_addasg_Float16x3x4_arg };

/// operator-= with Float16x3x4
Variable Float16x3x4_operator_subasg_Float16x3x4_arg;
Function Float16x3x4_operator_subasg_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_subasg_Float16x3x4_args = { &Float16x3x4_operator_subasg_Float16x3x4_arg };

/// operator*= with Float16x3x4
Variable Float16x3x4_operator_mulasg_Float16x3x4_arg;
Function Float16x3x4_operator_mulasg_Float16x3x4;
inline constexpr std::array Float16x3x4_operator_mulasg_Float16x3x4_args = { &Float16x3x4_operator_mulasg_Float16x3x4_arg };

/// operator* with Float16
Variable Float16x3x4_operator_scale_Float16_arg;
Function Float16x3x4_operator_scale_Float16;
inline constexpr std::array Float16x3x4_operator_scale_Float16_args = { &Float16x3x4_operator_scale_Float16_arg };

Float16x3x4::Float16x3x4()
{
    this->name = "f16x3x4"_c;
    this->columnSize = 3;
    this->rowSize = 4;
    this->byteSize = 24;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x3x4_operator_index_Int32_arg.name = "idx"_c;
    Float16x3x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x3x4_operator_index_Int32.name = "operator[]"_c;
    Float16x3x4_operator_index_Int32.backendIndex = 1357;
    Float16x3x4_operator_index_Int32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x4_operator_index_Int32.parameters = Float16x3x4_operator_index_Int32_args;
    Symbol::Resolved(&Float16x3x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3x4_operator_index_Int32)->signature = "f16x3 operator[](i32)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_Int32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt32
    Float16x3x4_operator_index_UInt32_arg.name = "idx"_c;
    Float16x3x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x3x4_operator_index_UInt32.name = "operator[]"_c;
    Float16x3x4_operator_index_UInt32.backendIndex = 1358;
    Float16x3x4_operator_index_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x4_operator_index_UInt32.parameters = Float16x3x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32)->signature = "f16x3 operator[](u32)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt32)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with Int16
    Float16x3x4_operator_index_Int16_arg.name = "idx"_c;
    Float16x3x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x3x4_operator_index_Int16.name = "operator[]"_c;
    Float16x3x4_operator_index_Int16.backendIndex = 1359;
    Float16x3x4_operator_index_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x4_operator_index_Int16.parameters = Float16x3x4_operator_index_Int16_args;
    Symbol::Resolved(&Float16x3x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3x4_operator_index_Int16)->signature = "f16x3 operator[](i16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_Int16)->returnTypeSymbol = &Float16x3Type;

    /// operator[] with UInt16
    Float16x3x4_operator_index_UInt16_arg.name = "idx"_c;
    Float16x3x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x3x4_operator_index_UInt16.name = "operator[]"_c;
    Float16x3x4_operator_index_UInt16.backendIndex = 1360;
    Float16x3x4_operator_index_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x4_operator_index_UInt16.parameters = Float16x3x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16)->signature = "f16x3 operator[](u16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_index_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// operator* with Float16x4
    Float16x3x4_transform_Float16x3_vec.name = "vec"_c;
    Float16x3x4_transform_Float16x3_vec.type = Type::FullType{ Float16x4Type.name };
    Float16x3x4_transform_Float16x3.name = "operator*"_c;
    Float16x3x4_transform_Float16x3.backendIndex = 1361;
    Float16x3x4_transform_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3x4_transform_Float16x3.parameters = Float16x3x4_transform_Float16x3_args;
    Symbol::Resolved(&Float16x3x4_transform_Float16x3_vec)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x3x4_transform_Float16x3)->signature = "f16x3 operator*(f16x4)"_c;
    Symbol::Resolved(&Float16x3x4_transform_Float16x3)->name = "operator*(f16x4)"_c;
    Symbol::Resolved(&Float16x3x4_transform_Float16x3)->nameWithVarNames = "operator*(vec : f16x4)"_c;
    Symbol::Resolved(&Float16x3x4_transform_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// operator+ with Float16x3x4
    Float16x3x4_operator_add_Float16x3x4_arg.name = "arg"_c;
    Float16x3x4_operator_add_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_add_Float16x3x4.name = "operator+"_c;
    Float16x3x4_operator_add_Float16x3x4.backendIndex = 1362;
    Float16x3x4_operator_add_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_add_Float16x3x4.parameters = Float16x3x4_operator_add_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4)->signature = "f16x3x4 operator+(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4)->name = "operator+(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4)->nameWithVarNames = "operator+(arg : f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_add_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator- with Float16x3x4
    Float16x3x4_operator_sub_Float16x3x4_arg.name = "arg"_c;
    Float16x3x4_operator_sub_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_sub_Float16x3x4.name = "operator-"_c;
    Float16x3x4_operator_sub_Float16x3x4.backendIndex = 1363;
    Float16x3x4_operator_sub_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_sub_Float16x3x4.parameters = Float16x3x4_operator_sub_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4)->signature = "f16x3x4 operator-(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4)->name = "operator-(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4)->nameWithVarNames = "operator-(arg : f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_sub_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator* with Float16x3x4
    Float16x3x4_operator_mul_Float16x3x4_arg.name = "arg"_c;
    Float16x3x4_operator_mul_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_mul_Float16x3x4.name = "operator*"_c;
    Float16x3x4_operator_mul_Float16x3x4.backendIndex = 1364;
    Float16x3x4_operator_mul_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_mul_Float16x3x4.parameters = Float16x3x4_operator_mul_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4)->signature = "f16x3x4 operator*(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4)->name = "operator*(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4)->nameWithVarNames = "operator*(arg : f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_mul_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator+= with Float16x3x4
    Float16x3x4_operator_addasg_Float16x3x4_arg.name = "arg"_c;
    Float16x3x4_operator_addasg_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_addasg_Float16x3x4.name = "operator+="_c;
    Float16x3x4_operator_addasg_Float16x3x4.backendIndex = 1365;
    Float16x3x4_operator_addasg_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_addasg_Float16x3x4.parameters = Float16x3x4_operator_addasg_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4)->signature = "f16x3x4 operator+=(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4)->name = "operator+=(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4)->nameWithVarNames = "operator+=(arg : f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_addasg_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator-= with Float16x3x4
    Float16x3x4_operator_subasg_Float16x3x4_arg.name = "arg"_c;
    Float16x3x4_operator_subasg_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_subasg_Float16x3x4.name = "operator-="_c;
    Float16x3x4_operator_subasg_Float16x3x4.backendIndex = 1366;
    Float16x3x4_operator_subasg_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_subasg_Float16x3x4.parameters = Float16x3x4_operator_subasg_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4)->signature = "f16x3x4 operator-=(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4)->name = "operator-=(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4)->nameWithVarNames = "operator-=(arg : f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_subasg_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator*= with Float16x3x4
    Float16x3x4_operator_mulasg_Float16x3x4_arg.name = "arg"_c;
    Float16x3x4_operator_mulasg_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    Float16x3x4_operator_mulasg_Float16x3x4.name = "operator*="_c;
    Float16x3x4_operator_mulasg_Float16x3x4.backendIndex = 1367;
    Float16x3x4_operator_mulasg_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_mulasg_Float16x3x4.parameters = Float16x3x4_operator_mulasg_Float16x3x4_args;
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4)->signature = "f16x3x4 operator*=(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4)->name = "operator*=(f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4)->nameWithVarNames = "operator*=(arg : f16x3x4)"_c;
    Symbol::Resolved(&Float16x3x4_operator_mulasg_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// operator* with Float16
    Float16x3x4_operator_scale_Float16_arg.name = "arg"_c;
    Float16x3x4_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x3x4_operator_scale_Float16.name = "operator*"_c;
    Float16x3x4_operator_scale_Float16.backendIndex = 1368;
    Float16x3x4_operator_scale_Float16.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_operator_scale_Float16.parameters = Float16x3x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16)->signature = "f16x3x4 operator*(f16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x3x4_operator_scale_Float16)->returnTypeSymbol = &Float16x3x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float16x3x4_transform_Float16x3 },
        std::pair{ "operator*"_c, &Float16x3x4_operator_mul_Float16x3x4 },
        std::pair{ "operator*"_c, &Float16x3x4_operator_scale_Float16 },
        std::pair{ "operator*(f16)"_c, &Float16x3x4_operator_scale_Float16 },
        std::pair{ "operator*(f16x3x4)"_c, &Float16x3x4_operator_mul_Float16x3x4 },
        std::pair{ "operator*(f16x4)"_c, &Float16x3x4_transform_Float16x3 },
        std::pair{ "operator*="_c, &Float16x3x4_operator_mulasg_Float16x3x4 },
        std::pair{ "operator*=(f16x3x4)"_c, &Float16x3x4_operator_mulasg_Float16x3x4 },
        std::pair{ "operator+"_c, &Float16x3x4_operator_add_Float16x3x4 },
        std::pair{ "operator+(f16x3x4)"_c, &Float16x3x4_operator_add_Float16x3x4 },
        std::pair{ "operator+="_c, &Float16x3x4_operator_addasg_Float16x3x4 },
        std::pair{ "operator+=(f16x3x4)"_c, &Float16x3x4_operator_addasg_Float16x3x4 },
        std::pair{ "operator-"_c, &Float16x3x4_operator_sub_Float16x3x4 },
        std::pair{ "operator-(f16x3x4)"_c, &Float16x3x4_operator_sub_Float16x3x4 },
        std::pair{ "operator-="_c, &Float16x3x4_operator_subasg_Float16x3x4 },
        std::pair{ "operator-=(f16x3x4)"_c, &Float16x3x4_operator_subasg_Float16x3x4 },
        std::pair{ "operator[]"_c, &Float16x3x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16x3x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16x3x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16x3x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16x3x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16x3x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16x3x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16x3x4_operator_index_UInt32 }
    };
}
Float16x3x4 Float16x3x4Type;

/// operator[] with Int32
Variable Float16x4x4_operator_index_Int32_arg;
Function Float16x4x4_operator_index_Int32;
inline constexpr std::array Float16x4x4_operator_index_Int32_args = { &Float16x4x4_operator_index_Int32_arg };

/// operator[] with UInt32
Variable Float16x4x4_operator_index_UInt32_arg;
Function Float16x4x4_operator_index_UInt32;
inline constexpr std::array Float16x4x4_operator_index_UInt32_args = { &Float16x4x4_operator_index_UInt32_arg };

/// operator[] with Int16
Variable Float16x4x4_operator_index_Int16_arg;
Function Float16x4x4_operator_index_Int16;
inline constexpr std::array Float16x4x4_operator_index_Int16_args = { &Float16x4x4_operator_index_Int16_arg };

/// operator[] with UInt16
Variable Float16x4x4_operator_index_UInt16_arg;
Function Float16x4x4_operator_index_UInt16;
inline constexpr std::array Float16x4x4_operator_index_UInt16_args = { &Float16x4x4_operator_index_UInt16_arg };

/// operator* with Float16x4
Variable Float16x4x4_transform_Float16x4_vec;
Function Float16x4x4_transform_Float16x4;
inline constexpr std::array Float16x4x4_transform_Float16x4_args = { &Float16x4x4_transform_Float16x4_vec };

/// operator+ with Float16x4x4
Variable Float16x4x4_operator_add_Float16x4x4_arg;
Function Float16x4x4_operator_add_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_add_Float16x4x4_args = { &Float16x4x4_operator_add_Float16x4x4_arg };

/// operator- with Float16x4x4
Variable Float16x4x4_operator_sub_Float16x4x4_arg;
Function Float16x4x4_operator_sub_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_sub_Float16x4x4_args = { &Float16x4x4_operator_sub_Float16x4x4_arg };

/// operator* with Float16x4x4
Variable Float16x4x4_operator_mul_Float16x4x4_arg;
Function Float16x4x4_operator_mul_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_mul_Float16x4x4_args = { &Float16x4x4_operator_mul_Float16x4x4_arg };

/// operator+= with Float16x4x4
Variable Float16x4x4_operator_addasg_Float16x4x4_arg;
Function Float16x4x4_operator_addasg_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_addasg_Float16x4x4_args = { &Float16x4x4_operator_addasg_Float16x4x4_arg };

/// operator-= with Float16x4x4
Variable Float16x4x4_operator_subasg_Float16x4x4_arg;
Function Float16x4x4_operator_subasg_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_subasg_Float16x4x4_args = { &Float16x4x4_operator_subasg_Float16x4x4_arg };

/// operator*= with Float16x4x4
Variable Float16x4x4_operator_mulasg_Float16x4x4_arg;
Function Float16x4x4_operator_mulasg_Float16x4x4;
inline constexpr std::array Float16x4x4_operator_mulasg_Float16x4x4_args = { &Float16x4x4_operator_mulasg_Float16x4x4_arg };

/// operator* with Float16
Variable Float16x4x4_operator_scale_Float16_arg;
Function Float16x4x4_operator_scale_Float16;
inline constexpr std::array Float16x4x4_operator_scale_Float16_args = { &Float16x4x4_operator_scale_Float16_arg };

Float16x4x4::Float16x4x4()
{
    this->name = "f16x4x4"_c;
    this->columnSize = 4;
    this->rowSize = 4;
    this->byteSize = 32;
    this->category = Type::ScalarCategory;
    this->baseType = TypeCode::Float16;
    this->builtin = true;

    /// operator[] with Int32
    Float16x4x4_operator_index_Int32_arg.name = "idx"_c;
    Float16x4x4_operator_index_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x4x4_operator_index_Int32.name = "operator[]"_c;
    Float16x4x4_operator_index_Int32.backendIndex = 1372;
    Float16x4x4_operator_index_Int32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_operator_index_Int32.parameters = Float16x4x4_operator_index_Int32_args;
    Symbol::Resolved(&Float16x4x4_operator_index_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4x4_operator_index_Int32)->signature = "f16x4 operator[](i32)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_Int32)->name = "operator[](i32)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_Int32)->nameWithVarNames = "operator[](idx : i32)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_Int32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt32
    Float16x4x4_operator_index_UInt32_arg.name = "idx"_c;
    Float16x4x4_operator_index_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x4x4_operator_index_UInt32.name = "operator[]"_c;
    Float16x4x4_operator_index_UInt32.backendIndex = 1373;
    Float16x4x4_operator_index_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_operator_index_UInt32.parameters = Float16x4x4_operator_index_UInt32_args;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32)->signature = "f16x4 operator[](u32)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32)->name = "operator[](u32)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32)->nameWithVarNames = "operator[](idx : u32)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt32)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with Int16
    Float16x4x4_operator_index_Int16_arg.name = "idx"_c;
    Float16x4x4_operator_index_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x4x4_operator_index_Int16.name = "operator[]"_c;
    Float16x4x4_operator_index_Int16.backendIndex = 1374;
    Float16x4x4_operator_index_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_operator_index_Int16.parameters = Float16x4x4_operator_index_Int16_args;
    Symbol::Resolved(&Float16x4x4_operator_index_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4x4_operator_index_Int16)->signature = "f16x4 operator[](i16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_Int16)->name = "operator[](i16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_Int16)->nameWithVarNames = "operator[](idx : i16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_Int16)->returnTypeSymbol = &Float16x4Type;

    /// operator[] with UInt16
    Float16x4x4_operator_index_UInt16_arg.name = "idx"_c;
    Float16x4x4_operator_index_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x4x4_operator_index_UInt16.name = "operator[]"_c;
    Float16x4x4_operator_index_UInt16.backendIndex = 1375;
    Float16x4x4_operator_index_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_operator_index_UInt16.parameters = Float16x4x4_operator_index_UInt16_args;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16)->signature = "f16x4 operator[](u16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16)->name = "operator[](u16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16)->nameWithVarNames = "operator[](idx : u16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_index_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// operator* with Float16x4
    Float16x4x4_transform_Float16x4_vec.name = "vec"_c;
    Float16x4x4_transform_Float16x4_vec.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_transform_Float16x4.name = "operator*"_c;
    Float16x4x4_transform_Float16x4.backendIndex = 1376;
    Float16x4x4_transform_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4x4_transform_Float16x4.parameters = Float16x4x4_transform_Float16x4_args;
    Symbol::Resolved(&Float16x4x4_transform_Float16x4_vec)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_transform_Float16x4)->signature = "f16x4 operator*(f16x4)"_c;
    Symbol::Resolved(&Float16x4x4_transform_Float16x4)->name = "operator*(f16x4)"_c;
    Symbol::Resolved(&Float16x4x4_transform_Float16x4)->nameWithVarNames = "operator*(vec : f16x4)"_c;
    Symbol::Resolved(&Float16x4x4_transform_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// operator+ with Float16x4x4
    Float16x4x4_operator_add_Float16x4x4_arg.name = "arg"_c;
    Float16x4x4_operator_add_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_add_Float16x4x4.name = "operator+"_c;
    Float16x4x4_operator_add_Float16x4x4.backendIndex = 1377;
    Float16x4x4_operator_add_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_add_Float16x4x4.parameters = Float16x4x4_operator_add_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4)->signature = "f16x4x4 operator+(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4)->name = "operator+(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4)->nameWithVarNames = "operator+(arg : f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_add_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator- with Float16x4x4
    Float16x4x4_operator_sub_Float16x4x4_arg.name = "arg"_c;
    Float16x4x4_operator_sub_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_sub_Float16x4x4.name = "operator-"_c;
    Float16x4x4_operator_sub_Float16x4x4.backendIndex = 1378;
    Float16x4x4_operator_sub_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_sub_Float16x4x4.parameters = Float16x4x4_operator_sub_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4)->signature = "f16x4x4 operator-(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4)->name = "operator-(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4)->nameWithVarNames = "operator-(arg : f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_sub_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator* with Float16x4x4
    Float16x4x4_operator_mul_Float16x4x4_arg.name = "arg"_c;
    Float16x4x4_operator_mul_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_mul_Float16x4x4.name = "operator*"_c;
    Float16x4x4_operator_mul_Float16x4x4.backendIndex = 1379;
    Float16x4x4_operator_mul_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_mul_Float16x4x4.parameters = Float16x4x4_operator_mul_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4)->signature = "f16x4x4 operator*(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4)->name = "operator*(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4)->nameWithVarNames = "operator*(arg : f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_mul_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator+= with Float16x4x4
    Float16x4x4_operator_addasg_Float16x4x4_arg.name = "arg"_c;
    Float16x4x4_operator_addasg_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_addasg_Float16x4x4.name = "operator+="_c;
    Float16x4x4_operator_addasg_Float16x4x4.backendIndex = 1380;
    Float16x4x4_operator_addasg_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_addasg_Float16x4x4.parameters = Float16x4x4_operator_addasg_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4)->signature = "f16x4x4 operator+=(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4)->name = "operator+=(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4)->nameWithVarNames = "operator+=(arg : f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_addasg_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator-= with Float16x4x4
    Float16x4x4_operator_subasg_Float16x4x4_arg.name = "arg"_c;
    Float16x4x4_operator_subasg_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_subasg_Float16x4x4.name = "operator-="_c;
    Float16x4x4_operator_subasg_Float16x4x4.backendIndex = 1381;
    Float16x4x4_operator_subasg_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_subasg_Float16x4x4.parameters = Float16x4x4_operator_subasg_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4)->signature = "f16x4x4 operator-=(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4)->name = "operator-=(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4)->nameWithVarNames = "operator-=(arg : f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_subasg_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator*= with Float16x4x4
    Float16x4x4_operator_mulasg_Float16x4x4_arg.name = "arg"_c;
    Float16x4x4_operator_mulasg_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    Float16x4x4_operator_mulasg_Float16x4x4.name = "operator*="_c;
    Float16x4x4_operator_mulasg_Float16x4x4.backendIndex = 1382;
    Float16x4x4_operator_mulasg_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_mulasg_Float16x4x4.parameters = Float16x4x4_operator_mulasg_Float16x4x4_args;
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4)->signature = "f16x4x4 operator*=(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4)->name = "operator*=(f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4)->nameWithVarNames = "operator*=(arg : f16x4x4)"_c;
    Symbol::Resolved(&Float16x4x4_operator_mulasg_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// operator* with Float16
    Float16x4x4_operator_scale_Float16_arg.name = "arg"_c;
    Float16x4x4_operator_scale_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x4x4_operator_scale_Float16.name = "operator*"_c;
    Float16x4x4_operator_scale_Float16.backendIndex = 1383;
    Float16x4x4_operator_scale_Float16.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_operator_scale_Float16.parameters = Float16x4x4_operator_scale_Float16_args;
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16)->signature = "f16x4x4 operator*(f16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16)->name = "operator*(f16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16)->nameWithVarNames = "operator*(arg : f16)"_c;
    Symbol::Resolved(&Float16x4x4_operator_scale_Float16)->returnTypeSymbol = &Float16x4x4Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 24> { 
        std::pair{ "operator*"_c, &Float16x4x4_transform_Float16x4 },
        std::pair{ "operator*"_c, &Float16x4x4_operator_mul_Float16x4x4 },
        std::pair{ "operator*"_c, &Float16x4x4_operator_scale_Float16 },
        std::pair{ "operator*(f16)"_c, &Float16x4x4_operator_scale_Float16 },
        std::pair{ "operator*(f16x4)"_c, &Float16x4x4_transform_Float16x4 },
        std::pair{ "operator*(f16x4x4)"_c, &Float16x4x4_operator_mul_Float16x4x4 },
        std::pair{ "operator*="_c, &Float16x4x4_operator_mulasg_Float16x4x4 },
        std::pair{ "operator*=(f16x4x4)"_c, &Float16x4x4_operator_mulasg_Float16x4x4 },
        std::pair{ "operator+"_c, &Float16x4x4_operator_add_Float16x4x4 },
        std::pair{ "operator+(f16x4x4)"_c, &Float16x4x4_operator_add_Float16x4x4 },
        std::pair{ "operator+="_c, &Float16x4x4_operator_addasg_Float16x4x4 },
        std::pair{ "operator+=(f16x4x4)"_c, &Float16x4x4_operator_addasg_Float16x4x4 },
        std::pair{ "operator-"_c, &Float16x4x4_operator_sub_Float16x4x4 },
        std::pair{ "operator-(f16x4x4)"_c, &Float16x4x4_operator_sub_Float16x4x4 },
        std::pair{ "operator-="_c, &Float16x4x4_operator_subasg_Float16x4x4 },
        std::pair{ "operator-=(f16x4x4)"_c, &Float16x4x4_operator_subasg_Float16x4x4 },
        std::pair{ "operator[]"_c, &Float16x4x4_operator_index_Int32 },
        std::pair{ "operator[]"_c, &Float16x4x4_operator_index_UInt32 },
        std::pair{ "operator[]"_c, &Float16x4x4_operator_index_Int16 },
        std::pair{ "operator[]"_c, &Float16x4x4_operator_index_UInt16 },
        std::pair{ "operator[](i16)"_c, &Float16x4x4_operator_index_Int16 },
        std::pair{ "operator[](i32)"_c, &Float16x4x4_operator_index_Int32 },
        std::pair{ "operator[](u16)"_c, &Float16x4x4_operator_index_UInt16 },
        std::pair{ "operator[](u32)"_c, &Float16x4x4_operator_index_UInt32 }
    };
}
Float16x4x4 Float16x4x4Type;

Texture1D::Texture1D()
{
    this->name = "texture1D"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture1D;
    this->builtin = true;
};
Texture1D Texture1DType;

Texture1DArray::Texture1DArray()
{
    this->name = "texture1DArray"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture1D;
    this->builtin = true;
};
Texture1DArray Texture1DArrayType;

Texture2D::Texture2D()
{
    this->name = "texture2D"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture2D;
    this->builtin = true;
};
Texture2D Texture2DType;

Texture2DMS::Texture2DMS()
{
    this->name = "texture2DMS"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture2D;
    this->builtin = true;
};
Texture2DMS Texture2DMSType;

Texture2DMSArray::Texture2DMSArray()
{
    this->name = "texture2DMSArray"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture2D;
    this->builtin = true;
};
Texture2DMSArray Texture2DMSArrayType;

Texture2DArray::Texture2DArray()
{
    this->name = "texture2DArray"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture2D;
    this->builtin = true;
};
Texture2DArray Texture2DArrayType;

Texture3D::Texture3D()
{
    this->name = "texture3D"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::Texture3D;
    this->builtin = true;
};
Texture3D Texture3DType;

TextureCube::TextureCube()
{
    this->name = "textureCube"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::TextureCube;
    this->builtin = true;
};
TextureCube TextureCubeType;

TextureCubeArray::TextureCubeArray()
{
    this->name = "textureCubeArray"_c;
    this->category = Type::TextureCategory;
    this->baseType = TypeCode::TextureCube;
    this->builtin = true;
};
TextureCubeArray TextureCubeArrayType;

SampledTexture1D::SampledTexture1D()
{
    this->name = "textureSampled1D"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture1D;
    this->builtin = true;
};
SampledTexture1D SampledTexture1DType;

SampledTexture1DArray::SampledTexture1DArray()
{
    this->name = "textureSampled1DArray"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture1D;
    this->builtin = true;
};
SampledTexture1DArray SampledTexture1DArrayType;

SampledTexture2D::SampledTexture2D()
{
    this->name = "textureSampled2D"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture2D;
    this->builtin = true;
};
SampledTexture2D SampledTexture2DType;

SampledTexture2DMS::SampledTexture2DMS()
{
    this->name = "textureSampled2DMS"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture2D;
    this->builtin = true;
};
SampledTexture2DMS SampledTexture2DMSType;

SampledTexture2DMSArray::SampledTexture2DMSArray()
{
    this->name = "textureSampled2DMSArray"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture2D;
    this->builtin = true;
};
SampledTexture2DMSArray SampledTexture2DMSArrayType;

SampledTexture2DArray::SampledTexture2DArray()
{
    this->name = "textureSampled2DArray"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture2D;
    this->builtin = true;
};
SampledTexture2DArray SampledTexture2DArrayType;

SampledTexture3D::SampledTexture3D()
{
    this->name = "textureSampled3D"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTexture3D;
    this->builtin = true;
};
SampledTexture3D SampledTexture3DType;

SampledTextureCube::SampledTextureCube()
{
    this->name = "textureSampledCube"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTextureCube;
    this->builtin = true;
};
SampledTextureCube SampledTextureCubeType;

SampledTextureCubeArray::SampledTextureCubeArray()
{
    this->name = "textureSampledCubeArray"_c;
    this->category = Type::SampledTextureCategory;
    this->baseType = TypeCode::SampledTextureCube;
    this->builtin = true;
};
SampledTextureCubeArray SampledTextureCubeArrayType;

PixelCache::PixelCache()
{
    this->name = "pixelCache"_c;
    this->category = Type::PixelCacheCategory;
    this->baseType = TypeCode::PixelCache;
    this->builtin = true;
};
PixelCache PixelCacheType;

PixelCacheMS::PixelCacheMS()
{
    this->name = "pixelCacheMS"_c;
    this->category = Type::PixelCacheCategory;
    this->baseType = TypeCode::PixelCacheMS;
    this->builtin = true;
};
PixelCacheMS PixelCacheMSType;

Sampler::Sampler()
{
    this->name = "sampler"_c;
    this->category = Type::SamplerCategory;
    this->baseType = TypeCode::Sampler;
    this->builtin = true;
};
Sampler SamplerType;

FunctionPtr::FunctionPtr()
{
    this->name = "Function"_c;
    this->builtin = true;
};
FunctionPtr FunctionPtrType;

AccelerationStructure::AccelerationStructure()
{
    this->name = "accelerationStructure"_c;
    this->category = Type::AccelerationStructureCategory;
    this->baseType = TypeCode::AccelerationStructure;
    this->builtin = true;
};
AccelerationStructure AccelerationStructureType;

Void::Void()
{
    this->name = "void"_c;
    this->category = Type::VoidCategory;
    this->baseType = TypeCode::Void;
    this->builtin = true;
};
Void VoidType;

EnumExpression CompareModeLess;
EnumExpression CompareModeLessEqual;
EnumExpression CompareModeGreater;
EnumExpression CompareModeGreaterEqual;
EnumExpression CompareModeEqual;
EnumExpression CompareModeNotEqual;
EnumExpression CompareModeAlways;
EnumExpression CompareModeNever;
CompareMode::CompareMode()
{
    this->name = "CompareMode"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    CompareModeLess.value = 0x0;
    CompareModeLess.type = Type::FullType{ CompareModeType.name, true };
    CompareModeLess.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeLess)->type = this;
    CompareModeLessEqual.value = 0x1;
    CompareModeLessEqual.type = Type::FullType{ CompareModeType.name, true };
    CompareModeLessEqual.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeLessEqual)->type = this;
    CompareModeGreater.value = 0x2;
    CompareModeGreater.type = Type::FullType{ CompareModeType.name, true };
    CompareModeGreater.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeGreater)->type = this;
    CompareModeGreaterEqual.value = 0x3;
    CompareModeGreaterEqual.type = Type::FullType{ CompareModeType.name, true };
    CompareModeGreaterEqual.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeGreaterEqual)->type = this;
    CompareModeEqual.value = 0x4;
    CompareModeEqual.type = Type::FullType{ CompareModeType.name, true };
    CompareModeEqual.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeEqual)->type = this;
    CompareModeNotEqual.value = 0x5;
    CompareModeNotEqual.type = Type::FullType{ CompareModeType.name, true };
    CompareModeNotEqual.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeNotEqual)->type = this;
    CompareModeAlways.value = 0x6;
    CompareModeAlways.type = Type::FullType{ CompareModeType.name, true };
    CompareModeAlways.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeAlways)->type = this;
    CompareModeNever.value = 0x7;
    CompareModeNever.type = Type::FullType{ CompareModeType.name, true };
    CompareModeNever.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CompareModeNever)->type = this;
    this->labels = std::array{ "Less"_c, "LessEqual"_c, "Greater"_c, "GreaterEqual"_c, "Equal"_c, "NotEqual"_c, "Always"_c, "Never"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 10> {
        std::pair{ "Always"_c, &CompareModeAlways },
        std::pair{ "Equal"_c, &CompareModeEqual },
        std::pair{ "Greater"_c, &CompareModeGreater },
        std::pair{ "GreaterEqual"_c, &CompareModeGreaterEqual },
        std::pair{ "Less"_c, &CompareModeLess },
        std::pair{ "LessEqual"_c, &CompareModeLessEqual },
        std::pair{ "Never"_c, &CompareModeNever },
        std::pair{ "NotEqual"_c, &CompareModeNotEqual },
        std::pair{ "operator!="_c, &CompareModeType.neqOp },
        std::pair{ "operator=="_c, &CompareModeType.eqOp }
    };
};
CompareMode CompareModeType;

EnumExpression StencilOpKeep;
EnumExpression StencilOpZero;
EnumExpression StencilOpReplace;
EnumExpression StencilOpIncrement;
EnumExpression StencilOpDecrement;
EnumExpression StencilOpInvert;
EnumExpression StencilOpIncrementWrap;
EnumExpression StencilOpDecrementWrap;
StencilOp::StencilOp()
{
    this->name = "StencilOp"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    StencilOpKeep.value = 0x0;
    StencilOpKeep.type = Type::FullType{ StencilOpType.name, true };
    StencilOpKeep.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpKeep)->type = this;
    StencilOpZero.value = 0x1;
    StencilOpZero.type = Type::FullType{ StencilOpType.name, true };
    StencilOpZero.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpZero)->type = this;
    StencilOpReplace.value = 0x2;
    StencilOpReplace.type = Type::FullType{ StencilOpType.name, true };
    StencilOpReplace.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpReplace)->type = this;
    StencilOpIncrement.value = 0x3;
    StencilOpIncrement.type = Type::FullType{ StencilOpType.name, true };
    StencilOpIncrement.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpIncrement)->type = this;
    StencilOpDecrement.value = 0x4;
    StencilOpDecrement.type = Type::FullType{ StencilOpType.name, true };
    StencilOpDecrement.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpDecrement)->type = this;
    StencilOpInvert.value = 0x5;
    StencilOpInvert.type = Type::FullType{ StencilOpType.name, true };
    StencilOpInvert.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpInvert)->type = this;
    StencilOpIncrementWrap.value = 0x6;
    StencilOpIncrementWrap.type = Type::FullType{ StencilOpType.name, true };
    StencilOpIncrementWrap.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpIncrementWrap)->type = this;
    StencilOpDecrementWrap.value = 0x7;
    StencilOpDecrementWrap.type = Type::FullType{ StencilOpType.name, true };
    StencilOpDecrementWrap.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilOpDecrementWrap)->type = this;
    this->labels = std::array{ "Keep"_c, "Zero"_c, "Replace"_c, "Increment"_c, "Decrement"_c, "Invert"_c, "IncrementWrap"_c, "DecrementWrap"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 10> {
        std::pair{ "Decrement"_c, &StencilOpDecrement },
        std::pair{ "DecrementWrap"_c, &StencilOpDecrementWrap },
        std::pair{ "Increment"_c, &StencilOpIncrement },
        std::pair{ "IncrementWrap"_c, &StencilOpIncrementWrap },
        std::pair{ "Invert"_c, &StencilOpInvert },
        std::pair{ "Keep"_c, &StencilOpKeep },
        std::pair{ "Replace"_c, &StencilOpReplace },
        std::pair{ "Zero"_c, &StencilOpZero },
        std::pair{ "operator!="_c, &StencilOpType.neqOp },
        std::pair{ "operator=="_c, &StencilOpType.eqOp }
    };
};
StencilOp StencilOpType;

EnumExpression ExecutionScopeGlobal;
EnumExpression ExecutionScopeDevice;
EnumExpression ExecutionScopeWorkgroup;
EnumExpression ExecutionScopeSubgroup;
EnumExpression ExecutionScopeInvocation;
EnumExpression ExecutionScopeQueue;
ExecutionScope::ExecutionScope()
{
    this->name = "ExecutionScope"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    ExecutionScopeGlobal.value = 0x0;
    ExecutionScopeGlobal.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeGlobal.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ExecutionScopeGlobal)->type = this;
    ExecutionScopeDevice.value = 0x1;
    ExecutionScopeDevice.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeDevice.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ExecutionScopeDevice)->type = this;
    ExecutionScopeWorkgroup.value = 0x2;
    ExecutionScopeWorkgroup.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeWorkgroup.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ExecutionScopeWorkgroup)->type = this;
    ExecutionScopeSubgroup.value = 0x3;
    ExecutionScopeSubgroup.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeSubgroup.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ExecutionScopeSubgroup)->type = this;
    ExecutionScopeInvocation.value = 0x4;
    ExecutionScopeInvocation.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeInvocation.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ExecutionScopeInvocation)->type = this;
    ExecutionScopeQueue.value = 0x5;
    ExecutionScopeQueue.type = Type::FullType{ ExecutionScopeType.name, true };
    ExecutionScopeQueue.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ExecutionScopeQueue)->type = this;
    this->labels = std::array{ "Global"_c, "Device"_c, "Workgroup"_c, "Subgroup"_c, "Invocation"_c, "Queue"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 8> {
        std::pair{ "Device"_c, &ExecutionScopeDevice },
        std::pair{ "Global"_c, &ExecutionScopeGlobal },
        std::pair{ "Invocation"_c, &ExecutionScopeInvocation },
        std::pair{ "Queue"_c, &ExecutionScopeQueue },
        std::pair{ "Subgroup"_c, &ExecutionScopeSubgroup },
        std::pair{ "Workgroup"_c, &ExecutionScopeWorkgroup },
        std::pair{ "operator!="_c, &ExecutionScopeType.neqOp },
        std::pair{ "operator=="_c, &ExecutionScopeType.eqOp }
    };
};
ExecutionScope ExecutionScopeType;

EnumExpression MemorySemanticsAcquire;
EnumExpression MemorySemanticsRelease;
EnumExpression MemorySemanticsAcquireRelease;
EnumExpression MemorySemanticsSequentiallyConsistent;
EnumExpression MemorySemanticsRelaxed;
MemorySemantics::MemorySemantics()
{
    this->name = "MemorySemantics"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    MemorySemanticsAcquire.value = 0x1;
    MemorySemanticsAcquire.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsAcquire.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&MemorySemanticsAcquire)->type = this;
    MemorySemanticsRelease.value = 0x2;
    MemorySemanticsRelease.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsRelease.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&MemorySemanticsRelease)->type = this;
    MemorySemanticsAcquireRelease.value = 0x4;
    MemorySemanticsAcquireRelease.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsAcquireRelease.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&MemorySemanticsAcquireRelease)->type = this;
    MemorySemanticsSequentiallyConsistent.value = 0x8;
    MemorySemanticsSequentiallyConsistent.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsSequentiallyConsistent.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&MemorySemanticsSequentiallyConsistent)->type = this;
    MemorySemanticsRelaxed.value = 0x10;
    MemorySemanticsRelaxed.type = Type::FullType{ MemorySemanticsType.name, true };
    MemorySemanticsRelaxed.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&MemorySemanticsRelaxed)->type = this;
    this->labels = std::array{ "Acquire"_c, "Release"_c, "AcquireRelease"_c, "SequentiallyConsistent"_c, "Relaxed"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 7> {
        std::pair{ "Acquire"_c, &MemorySemanticsAcquire },
        std::pair{ "AcquireRelease"_c, &MemorySemanticsAcquireRelease },
        std::pair{ "Relaxed"_c, &MemorySemanticsRelaxed },
        std::pair{ "Release"_c, &MemorySemanticsRelease },
        std::pair{ "SequentiallyConsistent"_c, &MemorySemanticsSequentiallyConsistent },
        std::pair{ "operator!="_c, &MemorySemanticsType.neqOp },
        std::pair{ "operator=="_c, &MemorySemanticsType.eqOp }
    };
};
MemorySemantics MemorySemanticsType;

EnumExpression PolygonModeFill;
EnumExpression PolygonModeLine;
EnumExpression PolygonModePoint;
PolygonMode::PolygonMode()
{
    this->name = "PolygonMode"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    PolygonModeFill.value = 0x0;
    PolygonModeFill.type = Type::FullType{ PolygonModeType.name, true };
    PolygonModeFill.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&PolygonModeFill)->type = this;
    PolygonModeLine.value = 0x1;
    PolygonModeLine.type = Type::FullType{ PolygonModeType.name, true };
    PolygonModeLine.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&PolygonModeLine)->type = this;
    PolygonModePoint.value = 0x2;
    PolygonModePoint.type = Type::FullType{ PolygonModeType.name, true };
    PolygonModePoint.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&PolygonModePoint)->type = this;
    this->labels = std::array{ "Fill"_c, "Line"_c, "Point"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 5> {
        std::pair{ "Fill"_c, &PolygonModeFill },
        std::pair{ "Line"_c, &PolygonModeLine },
        std::pair{ "Point"_c, &PolygonModePoint },
        std::pair{ "operator!="_c, &PolygonModeType.neqOp },
        std::pair{ "operator=="_c, &PolygonModeType.eqOp }
    };
};
PolygonMode PolygonModeType;

EnumExpression CullFaceNone;
EnumExpression CullFaceFront;
EnumExpression CullFaceBack;
EnumExpression CullFaceFrontAndBack;
CullFace::CullFace()
{
    this->name = "CullFace"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    CullFaceNone.value = 0x0;
    CullFaceNone.type = Type::FullType{ CullFaceType.name, true };
    CullFaceNone.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CullFaceNone)->type = this;
    CullFaceFront.value = 0x1;
    CullFaceFront.type = Type::FullType{ CullFaceType.name, true };
    CullFaceFront.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CullFaceFront)->type = this;
    CullFaceBack.value = 0x2;
    CullFaceBack.type = Type::FullType{ CullFaceType.name, true };
    CullFaceBack.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CullFaceBack)->type = this;
    CullFaceFrontAndBack.value = 0x3;
    CullFaceFrontAndBack.type = Type::FullType{ CullFaceType.name, true };
    CullFaceFrontAndBack.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&CullFaceFrontAndBack)->type = this;
    this->labels = std::array{ "None"_c, "Front"_c, "Back"_c, "FrontAndBack"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 6> {
        std::pair{ "Back"_c, &CullFaceBack },
        std::pair{ "Front"_c, &CullFaceFront },
        std::pair{ "FrontAndBack"_c, &CullFaceFrontAndBack },
        std::pair{ "None"_c, &CullFaceNone },
        std::pair{ "operator!="_c, &CullFaceType.neqOp },
        std::pair{ "operator=="_c, &CullFaceType.eqOp }
    };
};
CullFace CullFaceType;

EnumExpression WindingOrderClockwise;
EnumExpression WindingOrderCounterClockwise;
WindingOrder::WindingOrder()
{
    this->name = "WindingOrder"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    WindingOrderClockwise.value = 0x0;
    WindingOrderClockwise.type = Type::FullType{ WindingOrderType.name, true };
    WindingOrderClockwise.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&WindingOrderClockwise)->type = this;
    WindingOrderCounterClockwise.value = 0x1;
    WindingOrderCounterClockwise.type = Type::FullType{ WindingOrderType.name, true };
    WindingOrderCounterClockwise.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&WindingOrderCounterClockwise)->type = this;
    this->labels = std::array{ "Clockwise"_c, "CounterClockwise"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 4> {
        std::pair{ "Clockwise"_c, &WindingOrderClockwise },
        std::pair{ "CounterClockwise"_c, &WindingOrderCounterClockwise },
        std::pair{ "operator!="_c, &WindingOrderType.neqOp },
        std::pair{ "operator=="_c, &WindingOrderType.eqOp }
    };
};
WindingOrder WindingOrderType;

EnumExpression LogicOpAnd;
EnumExpression LogicOpAndInverted;
EnumExpression LogicOpAndReverse;
EnumExpression LogicOpClear;
EnumExpression LogicOpCopy;
EnumExpression LogicOpCopyInverted;
EnumExpression LogicOpEquivalence;
EnumExpression LogicOpInvert;
EnumExpression LogicOpNand;
EnumExpression LogicOpNo;
EnumExpression LogicOpNor;
EnumExpression LogicOpOr;
EnumExpression LogicOpOrInverted;
EnumExpression LogicOpOrReverse;
EnumExpression LogicOpSet;
EnumExpression LogicOpXor;
LogicOp::LogicOp()
{
    this->name = "LogicOp"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    LogicOpAnd.value = 0x0;
    LogicOpAnd.type = Type::FullType{ LogicOpType.name, true };
    LogicOpAnd.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpAnd)->type = this;
    LogicOpAndInverted.value = 0x1;
    LogicOpAndInverted.type = Type::FullType{ LogicOpType.name, true };
    LogicOpAndInverted.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpAndInverted)->type = this;
    LogicOpAndReverse.value = 0x2;
    LogicOpAndReverse.type = Type::FullType{ LogicOpType.name, true };
    LogicOpAndReverse.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpAndReverse)->type = this;
    LogicOpClear.value = 0x3;
    LogicOpClear.type = Type::FullType{ LogicOpType.name, true };
    LogicOpClear.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpClear)->type = this;
    LogicOpCopy.value = 0x4;
    LogicOpCopy.type = Type::FullType{ LogicOpType.name, true };
    LogicOpCopy.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpCopy)->type = this;
    LogicOpCopyInverted.value = 0x5;
    LogicOpCopyInverted.type = Type::FullType{ LogicOpType.name, true };
    LogicOpCopyInverted.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpCopyInverted)->type = this;
    LogicOpEquivalence.value = 0x6;
    LogicOpEquivalence.type = Type::FullType{ LogicOpType.name, true };
    LogicOpEquivalence.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpEquivalence)->type = this;
    LogicOpInvert.value = 0x7;
    LogicOpInvert.type = Type::FullType{ LogicOpType.name, true };
    LogicOpInvert.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpInvert)->type = this;
    LogicOpNand.value = 0x8;
    LogicOpNand.type = Type::FullType{ LogicOpType.name, true };
    LogicOpNand.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpNand)->type = this;
    LogicOpNo.value = 0x9;
    LogicOpNo.type = Type::FullType{ LogicOpType.name, true };
    LogicOpNo.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpNo)->type = this;
    LogicOpNor.value = 0xa;
    LogicOpNor.type = Type::FullType{ LogicOpType.name, true };
    LogicOpNor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpNor)->type = this;
    LogicOpOr.value = 0xb;
    LogicOpOr.type = Type::FullType{ LogicOpType.name, true };
    LogicOpOr.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpOr)->type = this;
    LogicOpOrInverted.value = 0xc;
    LogicOpOrInverted.type = Type::FullType{ LogicOpType.name, true };
    LogicOpOrInverted.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpOrInverted)->type = this;
    LogicOpOrReverse.value = 0xd;
    LogicOpOrReverse.type = Type::FullType{ LogicOpType.name, true };
    LogicOpOrReverse.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpOrReverse)->type = this;
    LogicOpSet.value = 0xe;
    LogicOpSet.type = Type::FullType{ LogicOpType.name, true };
    LogicOpSet.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpSet)->type = this;
    LogicOpXor.value = 0xf;
    LogicOpXor.type = Type::FullType{ LogicOpType.name, true };
    LogicOpXor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&LogicOpXor)->type = this;
    this->labels = std::array{ "And"_c, "AndInverted"_c, "AndReverse"_c, "Clear"_c, "Copy"_c, "CopyInverted"_c, "Equivalence"_c, "Invert"_c, "Nand"_c, "No"_c, "Nor"_c, "Or"_c, "OrInverted"_c, "OrReverse"_c, "Set"_c, "Xor"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 18> {
        std::pair{ "And"_c, &LogicOpAnd },
        std::pair{ "AndInverted"_c, &LogicOpAndInverted },
        std::pair{ "AndReverse"_c, &LogicOpAndReverse },
        std::pair{ "Clear"_c, &LogicOpClear },
        std::pair{ "Copy"_c, &LogicOpCopy },
        std::pair{ "CopyInverted"_c, &LogicOpCopyInverted },
        std::pair{ "Equivalence"_c, &LogicOpEquivalence },
        std::pair{ "Invert"_c, &LogicOpInvert },
        std::pair{ "Nand"_c, &LogicOpNand },
        std::pair{ "No"_c, &LogicOpNo },
        std::pair{ "Nor"_c, &LogicOpNor },
        std::pair{ "Or"_c, &LogicOpOr },
        std::pair{ "OrInverted"_c, &LogicOpOrInverted },
        std::pair{ "OrReverse"_c, &LogicOpOrReverse },
        std::pair{ "Set"_c, &LogicOpSet },
        std::pair{ "Xor"_c, &LogicOpXor },
        std::pair{ "operator!="_c, &LogicOpType.neqOp },
        std::pair{ "operator=="_c, &LogicOpType.eqOp }
    };
};
LogicOp LogicOpType;

EnumExpression BlendFactorZero;
EnumExpression BlendFactorOne;
EnumExpression BlendFactorSourceColor;
EnumExpression BlendFactorOneMinusSourceColor;
EnumExpression BlendFactorSourceAlpha;
EnumExpression BlendFactorOneMinusSourceAlpha;
EnumExpression BlendFactorDestinationColor;
EnumExpression BlendFactorOneMinusDestinationColor;
EnumExpression BlendFactorDestinationAlpha;
EnumExpression BlendFactorOneMinusDestinationAlpha;
EnumExpression BlendFactorConstantColor;
EnumExpression BlendFactorOneMinusConstantColor;
EnumExpression BlendFactorConstantAlpha;
EnumExpression BlendFactorOneMinusConstantAlpha;
BlendFactor::BlendFactor()
{
    this->name = "BlendFactor"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    BlendFactorZero.value = 0x0;
    BlendFactorZero.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorZero.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorZero)->type = this;
    BlendFactorOne.value = 0x1;
    BlendFactorOne.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOne.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOne)->type = this;
    BlendFactorSourceColor.value = 0x2;
    BlendFactorSourceColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorSourceColor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorSourceColor)->type = this;
    BlendFactorOneMinusSourceColor.value = 0x3;
    BlendFactorOneMinusSourceColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusSourceColor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOneMinusSourceColor)->type = this;
    BlendFactorSourceAlpha.value = 0x4;
    BlendFactorSourceAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorSourceAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorSourceAlpha)->type = this;
    BlendFactorOneMinusSourceAlpha.value = 0x5;
    BlendFactorOneMinusSourceAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusSourceAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOneMinusSourceAlpha)->type = this;
    BlendFactorDestinationColor.value = 0x6;
    BlendFactorDestinationColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorDestinationColor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorDestinationColor)->type = this;
    BlendFactorOneMinusDestinationColor.value = 0x7;
    BlendFactorOneMinusDestinationColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusDestinationColor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOneMinusDestinationColor)->type = this;
    BlendFactorDestinationAlpha.value = 0x8;
    BlendFactorDestinationAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorDestinationAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorDestinationAlpha)->type = this;
    BlendFactorOneMinusDestinationAlpha.value = 0x9;
    BlendFactorOneMinusDestinationAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusDestinationAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOneMinusDestinationAlpha)->type = this;
    BlendFactorConstantColor.value = 0xa;
    BlendFactorConstantColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorConstantColor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorConstantColor)->type = this;
    BlendFactorOneMinusConstantColor.value = 0xb;
    BlendFactorOneMinusConstantColor.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusConstantColor.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOneMinusConstantColor)->type = this;
    BlendFactorConstantAlpha.value = 0xc;
    BlendFactorConstantAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorConstantAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorConstantAlpha)->type = this;
    BlendFactorOneMinusConstantAlpha.value = 0xd;
    BlendFactorOneMinusConstantAlpha.type = Type::FullType{ BlendFactorType.name, true };
    BlendFactorOneMinusConstantAlpha.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendFactorOneMinusConstantAlpha)->type = this;
    this->labels = std::array{ "Zero"_c, "One"_c, "SourceColor"_c, "OneMinusSourceColor"_c, "SourceAlpha"_c, "OneMinusSourceAlpha"_c, "DestinationColor"_c, "OneMinusDestinationColor"_c, "DestinationAlpha"_c, "OneMinusDestinationAlpha"_c, "ConstantColor"_c, "OneMinusConstantColor"_c, "ConstantAlpha"_c, "OneMinusConstantAlpha"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 16> {
        std::pair{ "ConstantAlpha"_c, &BlendFactorConstantAlpha },
        std::pair{ "ConstantColor"_c, &BlendFactorConstantColor },
        std::pair{ "DestinationAlpha"_c, &BlendFactorDestinationAlpha },
        std::pair{ "DestinationColor"_c, &BlendFactorDestinationColor },
        std::pair{ "One"_c, &BlendFactorOne },
        std::pair{ "OneMinusConstantAlpha"_c, &BlendFactorOneMinusConstantAlpha },
        std::pair{ "OneMinusConstantColor"_c, &BlendFactorOneMinusConstantColor },
        std::pair{ "OneMinusDestinationAlpha"_c, &BlendFactorOneMinusDestinationAlpha },
        std::pair{ "OneMinusDestinationColor"_c, &BlendFactorOneMinusDestinationColor },
        std::pair{ "OneMinusSourceAlpha"_c, &BlendFactorOneMinusSourceAlpha },
        std::pair{ "OneMinusSourceColor"_c, &BlendFactorOneMinusSourceColor },
        std::pair{ "SourceAlpha"_c, &BlendFactorSourceAlpha },
        std::pair{ "SourceColor"_c, &BlendFactorSourceColor },
        std::pair{ "Zero"_c, &BlendFactorZero },
        std::pair{ "operator!="_c, &BlendFactorType.neqOp },
        std::pair{ "operator=="_c, &BlendFactorType.eqOp }
    };
};
BlendFactor BlendFactorType;

EnumExpression BlendOperationAdd;
EnumExpression BlendOperationSubtract;
EnumExpression BlendOperationReverseSubtract;
EnumExpression BlendOperationMin;
EnumExpression BlendOperationMax;
BlendOperation::BlendOperation()
{
    this->name = "BlendOperation"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    BlendOperationAdd.value = 0x0;
    BlendOperationAdd.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationAdd.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendOperationAdd)->type = this;
    BlendOperationSubtract.value = 0x1;
    BlendOperationSubtract.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationSubtract.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendOperationSubtract)->type = this;
    BlendOperationReverseSubtract.value = 0x2;
    BlendOperationReverseSubtract.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationReverseSubtract.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendOperationReverseSubtract)->type = this;
    BlendOperationMin.value = 0x3;
    BlendOperationMin.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationMin.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendOperationMin)->type = this;
    BlendOperationMax.value = 0x4;
    BlendOperationMax.type = Type::FullType{ BlendOperationType.name, true };
    BlendOperationMax.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendOperationMax)->type = this;
    this->labels = std::array{ "Add"_c, "Subtract"_c, "ReverseSubtract"_c, "Min"_c, "Max"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 7> {
        std::pair{ "Add"_c, &BlendOperationAdd },
        std::pair{ "Max"_c, &BlendOperationMax },
        std::pair{ "Min"_c, &BlendOperationMin },
        std::pair{ "ReverseSubtract"_c, &BlendOperationReverseSubtract },
        std::pair{ "Subtract"_c, &BlendOperationSubtract },
        std::pair{ "operator!="_c, &BlendOperationType.neqOp },
        std::pair{ "operator=="_c, &BlendOperationType.eqOp }
    };
};
BlendOperation BlendOperationType;

EnumExpression BlendColorMaskNone;
EnumExpression BlendColorMaskR;
EnumExpression BlendColorMaskRG;
EnumExpression BlendColorMaskRGB;
EnumExpression BlendColorMaskRGBA;
BlendColorMask::BlendColorMask()
{
    this->name = "BlendColorMask"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    BlendColorMaskNone.value = 0x0;
    BlendColorMaskNone.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskNone.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendColorMaskNone)->type = this;
    BlendColorMaskR.value = 0x1;
    BlendColorMaskR.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskR.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendColorMaskR)->type = this;
    BlendColorMaskRG.value = 0x2;
    BlendColorMaskRG.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskRG.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendColorMaskRG)->type = this;
    BlendColorMaskRGB.value = 0x3;
    BlendColorMaskRGB.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskRGB.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendColorMaskRGB)->type = this;
    BlendColorMaskRGBA.value = 0x4;
    BlendColorMaskRGBA.type = Type::FullType{ BlendColorMaskType.name, true };
    BlendColorMaskRGBA.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BlendColorMaskRGBA)->type = this;
    this->labels = std::array{ "None"_c, "R"_c, "RG"_c, "RGB"_c, "RGBA"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 7> {
        std::pair{ "None"_c, &BlendColorMaskNone },
        std::pair{ "R"_c, &BlendColorMaskR },
        std::pair{ "RG"_c, &BlendColorMaskRG },
        std::pair{ "RGB"_c, &BlendColorMaskRGB },
        std::pair{ "RGBA"_c, &BlendColorMaskRGBA },
        std::pair{ "operator!="_c, &BlendColorMaskType.neqOp },
        std::pair{ "operator=="_c, &BlendColorMaskType.eqOp }
    };
};
BlendColorMask BlendColorMaskType;

EnumExpression FilterModePoint;
EnumExpression FilterModeNearest;
EnumExpression FilterModeLinear;
EnumExpression FilterModeMinMagMipLinear;
EnumExpression FilterModeMinMagLinearMipPoint;
EnumExpression FilterModeMinLinearMagMipPoint;
EnumExpression FilterModeMinMagMipPoint;
EnumExpression FilterModeMinMagPointMipLinear;
EnumExpression FilterModeMinPointMagMipLinear;
EnumExpression FilterModeMinLinearMagPointMipLinear;
EnumExpression FilterModeMinPointMagLinearMipPoint;
FilterMode::FilterMode()
{
    this->name = "FilterMode"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    FilterModePoint.value = 0x0;
    FilterModePoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModePoint.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModePoint)->type = this;
    FilterModeNearest.value = 0x0;
    FilterModeNearest.type = Type::FullType{ FilterModeType.name, true };
    FilterModeNearest.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeNearest)->type = this;
    FilterModeLinear.value = 0x1;
    FilterModeLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeLinear.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeLinear)->type = this;
    FilterModeMinMagMipLinear.value = 0x2;
    FilterModeMinMagMipLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinMagMipLinear.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinMagMipLinear)->type = this;
    FilterModeMinMagLinearMipPoint.value = 0x3;
    FilterModeMinMagLinearMipPoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinMagLinearMipPoint.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinMagLinearMipPoint)->type = this;
    FilterModeMinLinearMagMipPoint.value = 0x4;
    FilterModeMinLinearMagMipPoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinLinearMagMipPoint.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinLinearMagMipPoint)->type = this;
    FilterModeMinMagMipPoint.value = 0x5;
    FilterModeMinMagMipPoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinMagMipPoint.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinMagMipPoint)->type = this;
    FilterModeMinMagPointMipLinear.value = 0x6;
    FilterModeMinMagPointMipLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinMagPointMipLinear.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinMagPointMipLinear)->type = this;
    FilterModeMinPointMagMipLinear.value = 0x7;
    FilterModeMinPointMagMipLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinPointMagMipLinear.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinPointMagMipLinear)->type = this;
    FilterModeMinLinearMagPointMipLinear.value = 0x8;
    FilterModeMinLinearMagPointMipLinear.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinLinearMagPointMipLinear.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinLinearMagPointMipLinear)->type = this;
    FilterModeMinPointMagLinearMipPoint.value = 0x9;
    FilterModeMinPointMagLinearMipPoint.type = Type::FullType{ FilterModeType.name, true };
    FilterModeMinPointMagLinearMipPoint.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&FilterModeMinPointMagLinearMipPoint)->type = this;
    this->labels = std::array{ "Point"_c, "Nearest"_c, "Linear"_c, "MinMagMipLinear"_c, "MinMagLinearMipPoint"_c, "MinLinearMagMipPoint"_c, "MinMagMipPoint"_c, "MinMagPointMipLinear"_c, "MinPointMagMipLinear"_c, "MinLinearMagPointMipLinear"_c, "MinPointMagLinearMipPoint"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 13> {
        std::pair{ "Linear"_c, &FilterModeLinear },
        std::pair{ "MinLinearMagMipPoint"_c, &FilterModeMinLinearMagMipPoint },
        std::pair{ "MinLinearMagPointMipLinear"_c, &FilterModeMinLinearMagPointMipLinear },
        std::pair{ "MinMagLinearMipPoint"_c, &FilterModeMinMagLinearMipPoint },
        std::pair{ "MinMagMipLinear"_c, &FilterModeMinMagMipLinear },
        std::pair{ "MinMagMipPoint"_c, &FilterModeMinMagMipPoint },
        std::pair{ "MinMagPointMipLinear"_c, &FilterModeMinMagPointMipLinear },
        std::pair{ "MinPointMagLinearMipPoint"_c, &FilterModeMinPointMagLinearMipPoint },
        std::pair{ "MinPointMagMipLinear"_c, &FilterModeMinPointMagMipLinear },
        std::pair{ "Nearest"_c, &FilterModeNearest },
        std::pair{ "Point"_c, &FilterModePoint },
        std::pair{ "operator!="_c, &FilterModeType.neqOp },
        std::pair{ "operator=="_c, &FilterModeType.eqOp }
    };
};
FilterMode FilterModeType;

EnumExpression AddressModeRepeat;
EnumExpression AddressModeMirror;
EnumExpression AddressModeClamp;
EnumExpression AddressModeBorder;
AddressMode::AddressMode()
{
    this->name = "AddressMode"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    AddressModeRepeat.value = 0x0;
    AddressModeRepeat.type = Type::FullType{ AddressModeType.name, true };
    AddressModeRepeat.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AddressModeRepeat)->type = this;
    AddressModeMirror.value = 0x1;
    AddressModeMirror.type = Type::FullType{ AddressModeType.name, true };
    AddressModeMirror.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AddressModeMirror)->type = this;
    AddressModeClamp.value = 0x2;
    AddressModeClamp.type = Type::FullType{ AddressModeType.name, true };
    AddressModeClamp.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AddressModeClamp)->type = this;
    AddressModeBorder.value = 0x3;
    AddressModeBorder.type = Type::FullType{ AddressModeType.name, true };
    AddressModeBorder.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AddressModeBorder)->type = this;
    this->labels = std::array{ "Repeat"_c, "Mirror"_c, "Clamp"_c, "Border"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 6> {
        std::pair{ "Border"_c, &AddressModeBorder },
        std::pair{ "Clamp"_c, &AddressModeClamp },
        std::pair{ "Mirror"_c, &AddressModeMirror },
        std::pair{ "Repeat"_c, &AddressModeRepeat },
        std::pair{ "operator!="_c, &AddressModeType.neqOp },
        std::pair{ "operator=="_c, &AddressModeType.eqOp }
    };
};
AddressMode AddressModeType;

EnumExpression ColorTransparent;
EnumExpression ColorBlack;
EnumExpression ColorWhite;
Color::Color()
{
    this->name = "Color"_c;
    this->category = Type::EnumCategory;
    this->type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(this)->typeSymbol = &UInt32Type;
    this->baseType = TypeCode::UInt;
    this->type.literal = true;
    this->builtin = true;
    ColorTransparent.value = 0x0;
    ColorTransparent.type = Type::FullType{ ColorType.name, true };
    ColorTransparent.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ColorTransparent)->type = this;
    ColorBlack.value = 0x1;
    ColorBlack.type = Type::FullType{ ColorType.name, true };
    ColorBlack.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ColorBlack)->type = this;
    ColorWhite.value = 0x2;
    ColorWhite.type = Type::FullType{ ColorType.name, true };
    ColorWhite.underlyingType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ColorWhite)->type = this;
    this->labels = std::array{ "Transparent"_c, "Black"_c, "White"_c };
    auto enumResolved = Symbol::Resolved(this);
    this->fromUnderlyingType.name = this->name;
    this->fromUnderlyingType.returnType = Type::FullType{{ this->name }};
    this->fromUnderlyingType.compileTime = true;
    this->fromUnderlyingType.constructorType = this;
    this->fromUnderlyingType.parameters = { &this->fromUnderlyingTypeArg };
    this->fromUnderlyingTypeArg.name = "arg"_c;
    this->fromUnderlyingTypeArg.type = this->type;
    Symbol::Resolved(&this->fromUnderlyingTypeArg)->typeSymbol = enumResolved->typeSymbol;
    Symbol::Resolved(&this->fromUnderlyingType)->returnTypeSymbol = this;
    this->toUnderlyingType.name = this->type.name;
    this->toUnderlyingType.returnType = this->type;
    this->toUnderlyingType.compileTime = true;
    this->toUnderlyingType.constructorType = this;
    this->toUnderlyingType.parameters = { &this->toUnderlyingTypeArg };
    this->toUnderlyingTypeArg.name = "arg"_c;
    this->toUnderlyingTypeArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->toUnderlyingTypeArg)->typeSymbol = this;
    Symbol::Resolved(&this->toUnderlyingType)->returnTypeSymbol = enumResolved->typeSymbol;
    this->eqOp.name = "operator=="_c;
    this->eqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->eqOpArg.name = "rhs"_c;
    this->eqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->eqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->eqOp)->returnTypeSymbol = &Bool8Type;
    this->neqOp.name = "operator!="_c;
    this->neqOp.returnType = Type::FullType{{ "Bool8"_c }};
    this->neqOpArg.name = "rhs"_c;
    this->neqOpArg.type = Type::FullType{{ this->name }};
    Symbol::Resolved(&this->neqOpArg)->typeSymbol = this;
    Symbol::Resolved(&this->neqOp)->returnTypeSymbol = &Bool8Type;
    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 5> {
        std::pair{ "Black"_c, &ColorBlack },
        std::pair{ "Transparent"_c, &ColorTransparent },
        std::pair{ "White"_c, &ColorWhite },
        std::pair{ "operator!="_c, &ColorType.neqOp },
        std::pair{ "operator=="_c, &ColorType.eqOp }
    };
};
Color ColorType;

Variable StencilStateFail;
Variable StencilStatePass;
Variable StencilStateDepthFail;
Variable StencilStateCompareFunction;
Variable StencilStateCompareMask;
Variable StencilStateWriteMask;
Variable StencilStateReference;
StencilState::StencilState()
{
    this->name = "StencilState"_c;
    this->builtin = true;
    StencilStateFail.name = "Fail"_c;
    StencilStateFail.type = Type::FullType{ StencilOpType.name };
    Symbol::Resolved(&StencilStateFail)->typeSymbol = &StencilOpType;

    StencilStatePass.name = "Pass"_c;
    StencilStatePass.type = Type::FullType{ StencilOpType.name };
    Symbol::Resolved(&StencilStatePass)->typeSymbol = &StencilOpType;

    StencilStateDepthFail.name = "DepthFail"_c;
    StencilStateDepthFail.type = Type::FullType{ StencilOpType.name };
    Symbol::Resolved(&StencilStateDepthFail)->typeSymbol = &StencilOpType;

    StencilStateCompareFunction.name = "CompareFunction"_c;
    StencilStateCompareFunction.type = Type::FullType{ CompareModeType.name };
    Symbol::Resolved(&StencilStateCompareFunction)->typeSymbol = &CompareModeType;

    StencilStateCompareMask.name = "CompareMask"_c;
    StencilStateCompareMask.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilStateCompareMask)->typeSymbol = &UInt32Type;

    StencilStateWriteMask.name = "WriteMask"_c;
    StencilStateWriteMask.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilStateWriteMask)->typeSymbol = &UInt32Type;

    StencilStateReference.name = "Reference"_c;
    StencilStateReference.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&StencilStateReference)->typeSymbol = &UInt32Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 7>{
        std::pair{ "CompareFunction"_c, &StencilStateCompareFunction },
        std::pair{ "CompareMask"_c, &StencilStateCompareMask },
        std::pair{ "DepthFail"_c, &StencilStateDepthFail },
        std::pair{ "Fail"_c, &StencilStateFail },
        std::pair{ "Pass"_c, &StencilStatePass },
        std::pair{ "Reference"_c, &StencilStateReference },
        std::pair{ "WriteMask"_c, &StencilStateWriteMask }
    };
};
StencilState StencilStateType;

Variable RenderStateDepthClampEnabled;
Variable RenderStateDepthTestEnabled;
Variable RenderStateDepthWriteEnabled;
Variable RenderStateDepthBiasEnabled;
Variable RenderStateDepthBiasFactor;
Variable RenderStateDepthBiasClamp;
Variable RenderStateDepthBiasSlopeFactor;
Variable RenderStateDepthTestFunction;
Variable RenderStateDepthBoundsTestEnabled;
Variable RenderStateDepthBoundsMin;
Variable RenderStateDepthBoundsMax;
Variable RenderStateNoRasterization;
Variable RenderStatePolygonMode;
Variable RenderStateCull;
Variable RenderStateWindingOrder;
Variable RenderStateScissorEnabled;
Variable RenderStateStencilEnabled;
Variable RenderStateStencilFront;
Variable RenderStateStencilBack;
Variable RenderStateLogicOpEnabled;
Variable RenderStateLogicOp;
Variable RenderStateBlendEnabled;
IntExpression RenderStateBlendEnabledArraySize(8);
Variable RenderStateSourceBlend;
IntExpression RenderStateSourceBlendArraySize(8);
Variable RenderStateDestinationBlend;
IntExpression RenderStateDestinationBlendArraySize(8);
Variable RenderStateSourceAlphaBlend;
IntExpression RenderStateSourceAlphaBlendArraySize(8);
Variable RenderStateDestinationAlphaBlend;
IntExpression RenderStateDestinationAlphaBlendArraySize(8);
Variable RenderStateColorBlendOp;
IntExpression RenderStateColorBlendOpArraySize(8);
Variable RenderStateAlphaBlendOp;
IntExpression RenderStateAlphaBlendOpArraySize(8);
Variable RenderStateMask;
IntExpression RenderStateMaskArraySize(8);
RenderState::RenderState()
{
    this->name = "RenderState"_c;
    this->builtin = true;
    RenderStateDepthClampEnabled.name = "DepthClampEnabled"_c;
    RenderStateDepthClampEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthClampEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthTestEnabled.name = "DepthTestEnabled"_c;
    RenderStateDepthTestEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthTestEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthWriteEnabled.name = "DepthWriteEnabled"_c;
    RenderStateDepthWriteEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthWriteEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthBiasEnabled.name = "DepthBiasEnabled"_c;
    RenderStateDepthBiasEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthBiasEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthBiasFactor.name = "DepthBiasFactor"_c;
    RenderStateDepthBiasFactor.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBiasFactor)->typeSymbol = &Float32Type;

    RenderStateDepthBiasClamp.name = "DepthBiasClamp"_c;
    RenderStateDepthBiasClamp.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBiasClamp)->typeSymbol = &Float32Type;

    RenderStateDepthBiasSlopeFactor.name = "DepthBiasSlopeFactor"_c;
    RenderStateDepthBiasSlopeFactor.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBiasSlopeFactor)->typeSymbol = &Float32Type;

    RenderStateDepthTestFunction.name = "DepthTestFunction"_c;
    RenderStateDepthTestFunction.type = Type::FullType{ CompareModeType.name };
    Symbol::Resolved(&RenderStateDepthTestFunction)->typeSymbol = &CompareModeType;

    RenderStateDepthBoundsTestEnabled.name = "DepthBoundsTestEnabled"_c;
    RenderStateDepthBoundsTestEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateDepthBoundsTestEnabled)->typeSymbol = &Bool8Type;

    RenderStateDepthBoundsMin.name = "DepthBoundsMin"_c;
    RenderStateDepthBoundsMin.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBoundsMin)->typeSymbol = &Float32Type;

    RenderStateDepthBoundsMax.name = "DepthBoundsMax"_c;
    RenderStateDepthBoundsMax.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&RenderStateDepthBoundsMax)->typeSymbol = &Float32Type;

    RenderStateNoRasterization.name = "NoRasterization"_c;
    RenderStateNoRasterization.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateNoRasterization)->typeSymbol = &Bool8Type;

    RenderStatePolygonMode.name = "PolygonMode"_c;
    RenderStatePolygonMode.type = Type::FullType{ PolygonModeType.name };
    Symbol::Resolved(&RenderStatePolygonMode)->typeSymbol = &PolygonModeType;

    RenderStateCull.name = "Cull"_c;
    RenderStateCull.type = Type::FullType{ CullFaceType.name };
    Symbol::Resolved(&RenderStateCull)->typeSymbol = &CullFaceType;

    RenderStateWindingOrder.name = "WindingOrder"_c;
    RenderStateWindingOrder.type = Type::FullType{ WindingOrderType.name };
    Symbol::Resolved(&RenderStateWindingOrder)->typeSymbol = &WindingOrderType;

    RenderStateScissorEnabled.name = "ScissorEnabled"_c;
    RenderStateScissorEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateScissorEnabled)->typeSymbol = &Bool8Type;

    RenderStateStencilEnabled.name = "StencilEnabled"_c;
    RenderStateStencilEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateStencilEnabled)->typeSymbol = &Bool8Type;

    RenderStateStencilFront.name = "StencilFront"_c;
    RenderStateStencilFront.type = Type::FullType{ StencilStateType.name };
    Symbol::Resolved(&RenderStateStencilFront)->typeSymbol = &StencilStateType;

    RenderStateStencilBack.name = "StencilBack"_c;
    RenderStateStencilBack.type = Type::FullType{ StencilStateType.name };
    Symbol::Resolved(&RenderStateStencilBack)->typeSymbol = &StencilStateType;

    RenderStateLogicOpEnabled.name = "LogicOpEnabled"_c;
    RenderStateLogicOpEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&RenderStateLogicOpEnabled)->typeSymbol = &Bool8Type;

    RenderStateLogicOp.name = "LogicOp"_c;
    RenderStateLogicOp.type = Type::FullType{ LogicOpType.name };
    Symbol::Resolved(&RenderStateLogicOp)->typeSymbol = &LogicOpType;

    RenderStateBlendEnabled.name = "BlendEnabled"_c;
    RenderStateBlendEnabled.type = Type::FullType{ Bool8Type.name, {Type::FullType::Modifier::Array}, {&RenderStateBlendEnabledArraySize} };
    Symbol::Resolved(&RenderStateBlendEnabled)->typeSymbol = &Bool8Type;

    RenderStateSourceBlend.name = "SourceBlend"_c;
    RenderStateSourceBlend.type = Type::FullType{ BlendFactorType.name, {Type::FullType::Modifier::Array}, {&RenderStateSourceBlendArraySize} };
    Symbol::Resolved(&RenderStateSourceBlend)->typeSymbol = &BlendFactorType;

    RenderStateDestinationBlend.name = "DestinationBlend"_c;
    RenderStateDestinationBlend.type = Type::FullType{ BlendFactorType.name, {Type::FullType::Modifier::Array}, {&RenderStateDestinationBlendArraySize} };
    Symbol::Resolved(&RenderStateDestinationBlend)->typeSymbol = &BlendFactorType;

    RenderStateSourceAlphaBlend.name = "SourceAlphaBlend"_c;
    RenderStateSourceAlphaBlend.type = Type::FullType{ BlendFactorType.name, {Type::FullType::Modifier::Array}, {&RenderStateSourceAlphaBlendArraySize} };
    Symbol::Resolved(&RenderStateSourceAlphaBlend)->typeSymbol = &BlendFactorType;

    RenderStateDestinationAlphaBlend.name = "DestinationAlphaBlend"_c;
    RenderStateDestinationAlphaBlend.type = Type::FullType{ BlendFactorType.name, {Type::FullType::Modifier::Array}, {&RenderStateDestinationAlphaBlendArraySize} };
    Symbol::Resolved(&RenderStateDestinationAlphaBlend)->typeSymbol = &BlendFactorType;

    RenderStateColorBlendOp.name = "ColorBlendOp"_c;
    RenderStateColorBlendOp.type = Type::FullType{ BlendOperationType.name, {Type::FullType::Modifier::Array}, {&RenderStateColorBlendOpArraySize} };
    Symbol::Resolved(&RenderStateColorBlendOp)->typeSymbol = &BlendOperationType;

    RenderStateAlphaBlendOp.name = "AlphaBlendOp"_c;
    RenderStateAlphaBlendOp.type = Type::FullType{ BlendOperationType.name, {Type::FullType::Modifier::Array}, {&RenderStateAlphaBlendOpArraySize} };
    Symbol::Resolved(&RenderStateAlphaBlendOp)->typeSymbol = &BlendOperationType;

    RenderStateMask.name = "Mask"_c;
    RenderStateMask.type = Type::FullType{ BlendColorMaskType.name, {Type::FullType::Modifier::Array}, {&RenderStateMaskArraySize} };
    Symbol::Resolved(&RenderStateMask)->typeSymbol = &BlendColorMaskType;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 29>{
        std::pair{ "AlphaBlendOp"_c, &RenderStateAlphaBlendOp },
        std::pair{ "BlendEnabled"_c, &RenderStateBlendEnabled },
        std::pair{ "ColorBlendOp"_c, &RenderStateColorBlendOp },
        std::pair{ "Cull"_c, &RenderStateCull },
        std::pair{ "DepthBiasClamp"_c, &RenderStateDepthBiasClamp },
        std::pair{ "DepthBiasEnabled"_c, &RenderStateDepthBiasEnabled },
        std::pair{ "DepthBiasFactor"_c, &RenderStateDepthBiasFactor },
        std::pair{ "DepthBiasSlopeFactor"_c, &RenderStateDepthBiasSlopeFactor },
        std::pair{ "DepthBoundsMax"_c, &RenderStateDepthBoundsMax },
        std::pair{ "DepthBoundsMin"_c, &RenderStateDepthBoundsMin },
        std::pair{ "DepthBoundsTestEnabled"_c, &RenderStateDepthBoundsTestEnabled },
        std::pair{ "DepthClampEnabled"_c, &RenderStateDepthClampEnabled },
        std::pair{ "DepthTestEnabled"_c, &RenderStateDepthTestEnabled },
        std::pair{ "DepthTestFunction"_c, &RenderStateDepthTestFunction },
        std::pair{ "DepthWriteEnabled"_c, &RenderStateDepthWriteEnabled },
        std::pair{ "DestinationAlphaBlend"_c, &RenderStateDestinationAlphaBlend },
        std::pair{ "DestinationBlend"_c, &RenderStateDestinationBlend },
        std::pair{ "LogicOp"_c, &RenderStateLogicOp },
        std::pair{ "LogicOpEnabled"_c, &RenderStateLogicOpEnabled },
        std::pair{ "Mask"_c, &RenderStateMask },
        std::pair{ "NoRasterization"_c, &RenderStateNoRasterization },
        std::pair{ "PolygonMode"_c, &RenderStatePolygonMode },
        std::pair{ "ScissorEnabled"_c, &RenderStateScissorEnabled },
        std::pair{ "SourceAlphaBlend"_c, &RenderStateSourceAlphaBlend },
        std::pair{ "SourceBlend"_c, &RenderStateSourceBlend },
        std::pair{ "StencilBack"_c, &RenderStateStencilBack },
        std::pair{ "StencilEnabled"_c, &RenderStateStencilEnabled },
        std::pair{ "StencilFront"_c, &RenderStateStencilFront },
        std::pair{ "WindingOrder"_c, &RenderStateWindingOrder }
    };
};
RenderState RenderStateType;

Variable SamplerStateAddress;
Variable SamplerStateAddressU;
Variable SamplerStateAddressV;
Variable SamplerStateAddressW;
Variable SamplerStateFilter;
Variable SamplerStateMinFilter;
Variable SamplerStateMagFilter;
Variable SamplerStateMipFilter;
Variable SamplerStateMipLodBias;
Variable SamplerStateAnisotropyEnabled;
Variable SamplerStateMaxAnisotropy;
Variable SamplerStateCompareEnabled;
Variable SamplerStateCompareFunction;
Variable SamplerStateMinLod;
Variable SamplerStateMaxLod;
Variable SamplerStateBorder;
Variable SamplerStateUnnormalizedSamplingEnabled;
SamplerState::SamplerState()
{
    this->name = "SamplerState"_c;
    this->builtin = true;
    SamplerStateAddress.name = "Address"_c;
    SamplerStateAddress.type = Type::FullType{ AddressModeType.name };
    Symbol::Resolved(&SamplerStateAddress)->typeSymbol = &AddressModeType;

    SamplerStateAddressU.name = "AddressU"_c;
    SamplerStateAddressU.type = Type::FullType{ AddressModeType.name };
    Symbol::Resolved(&SamplerStateAddressU)->typeSymbol = &AddressModeType;

    SamplerStateAddressV.name = "AddressV"_c;
    SamplerStateAddressV.type = Type::FullType{ AddressModeType.name };
    Symbol::Resolved(&SamplerStateAddressV)->typeSymbol = &AddressModeType;

    SamplerStateAddressW.name = "AddressW"_c;
    SamplerStateAddressW.type = Type::FullType{ AddressModeType.name };
    Symbol::Resolved(&SamplerStateAddressW)->typeSymbol = &AddressModeType;

    SamplerStateFilter.name = "Filter"_c;
    SamplerStateFilter.type = Type::FullType{ FilterModeType.name };
    Symbol::Resolved(&SamplerStateFilter)->typeSymbol = &FilterModeType;

    SamplerStateMinFilter.name = "MinFilter"_c;
    SamplerStateMinFilter.type = Type::FullType{ FilterModeType.name };
    Symbol::Resolved(&SamplerStateMinFilter)->typeSymbol = &FilterModeType;

    SamplerStateMagFilter.name = "MagFilter"_c;
    SamplerStateMagFilter.type = Type::FullType{ FilterModeType.name };
    Symbol::Resolved(&SamplerStateMagFilter)->typeSymbol = &FilterModeType;

    SamplerStateMipFilter.name = "MipFilter"_c;
    SamplerStateMipFilter.type = Type::FullType{ FilterModeType.name };
    Symbol::Resolved(&SamplerStateMipFilter)->typeSymbol = &FilterModeType;

    SamplerStateMipLodBias.name = "MipLodBias"_c;
    SamplerStateMipLodBias.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&SamplerStateMipLodBias)->typeSymbol = &Float32Type;

    SamplerStateAnisotropyEnabled.name = "AnisotropyEnabled"_c;
    SamplerStateAnisotropyEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&SamplerStateAnisotropyEnabled)->typeSymbol = &Bool8Type;

    SamplerStateMaxAnisotropy.name = "MaxAnisotropy"_c;
    SamplerStateMaxAnisotropy.type = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SamplerStateMaxAnisotropy)->typeSymbol = &UInt32Type;

    SamplerStateCompareEnabled.name = "CompareEnabled"_c;
    SamplerStateCompareEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&SamplerStateCompareEnabled)->typeSymbol = &Bool8Type;

    SamplerStateCompareFunction.name = "CompareFunction"_c;
    SamplerStateCompareFunction.type = Type::FullType{ CompareModeType.name };
    Symbol::Resolved(&SamplerStateCompareFunction)->typeSymbol = &CompareModeType;

    SamplerStateMinLod.name = "MinLod"_c;
    SamplerStateMinLod.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&SamplerStateMinLod)->typeSymbol = &Float32Type;

    SamplerStateMaxLod.name = "MaxLod"_c;
    SamplerStateMaxLod.type = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&SamplerStateMaxLod)->typeSymbol = &Float32Type;

    SamplerStateBorder.name = "Border"_c;
    SamplerStateBorder.type = Type::FullType{ ColorType.name };
    Symbol::Resolved(&SamplerStateBorder)->typeSymbol = &ColorType;

    SamplerStateUnnormalizedSamplingEnabled.name = "UnnormalizedSamplingEnabled"_c;
    SamplerStateUnnormalizedSamplingEnabled.type = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&SamplerStateUnnormalizedSamplingEnabled)->typeSymbol = &Bool8Type;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 17>{
        std::pair{ "Address"_c, &SamplerStateAddress },
        std::pair{ "AddressU"_c, &SamplerStateAddressU },
        std::pair{ "AddressV"_c, &SamplerStateAddressV },
        std::pair{ "AddressW"_c, &SamplerStateAddressW },
        std::pair{ "AnisotropyEnabled"_c, &SamplerStateAnisotropyEnabled },
        std::pair{ "Border"_c, &SamplerStateBorder },
        std::pair{ "CompareEnabled"_c, &SamplerStateCompareEnabled },
        std::pair{ "CompareFunction"_c, &SamplerStateCompareFunction },
        std::pair{ "Filter"_c, &SamplerStateFilter },
        std::pair{ "MagFilter"_c, &SamplerStateMagFilter },
        std::pair{ "MaxAnisotropy"_c, &SamplerStateMaxAnisotropy },
        std::pair{ "MaxLod"_c, &SamplerStateMaxLod },
        std::pair{ "MinFilter"_c, &SamplerStateMinFilter },
        std::pair{ "MinLod"_c, &SamplerStateMinLod },
        std::pair{ "MipFilter"_c, &SamplerStateMipFilter },
        std::pair{ "MipLodBias"_c, &SamplerStateMipLodBias },
        std::pair{ "UnnormalizedSamplingEnabled"_c, &SamplerStateUnnormalizedSamplingEnabled }
    };
};
SamplerState SamplerStateType;

Variable ProgramVertexShader;
Variable ProgramHullShader;
Variable ProgramDomainShader;
Variable ProgramGeometryShader;
Variable ProgramPixelShader;
Variable ProgramComputeShader;
Variable ProgramTaskShader;
Variable ProgramMeshShader;
Variable ProgramRayGenerationShader;
Variable ProgramRayAnyHitShader;
Variable ProgramRayClosestHitShader;
Variable ProgramRayMissShader;
Variable ProgramRayIntersectionShader;
Variable ProgramRayCallableShader;
Variable ProgramRenderState;
Program::Program()
{
    this->name = "Program"_c;
    this->builtin = true;
    ProgramVertexShader.name = "VertexShader"_c;
    ProgramVertexShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramVertexShader)->typeSymbol = &FunctionPtrType;

    ProgramHullShader.name = "HullShader"_c;
    ProgramHullShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramHullShader)->typeSymbol = &FunctionPtrType;

    ProgramDomainShader.name = "DomainShader"_c;
    ProgramDomainShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramDomainShader)->typeSymbol = &FunctionPtrType;

    ProgramGeometryShader.name = "GeometryShader"_c;
    ProgramGeometryShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramGeometryShader)->typeSymbol = &FunctionPtrType;

    ProgramPixelShader.name = "PixelShader"_c;
    ProgramPixelShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramPixelShader)->typeSymbol = &FunctionPtrType;

    ProgramComputeShader.name = "ComputeShader"_c;
    ProgramComputeShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramComputeShader)->typeSymbol = &FunctionPtrType;

    ProgramTaskShader.name = "TaskShader"_c;
    ProgramTaskShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramTaskShader)->typeSymbol = &FunctionPtrType;

    ProgramMeshShader.name = "MeshShader"_c;
    ProgramMeshShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramMeshShader)->typeSymbol = &FunctionPtrType;

    ProgramRayGenerationShader.name = "RayGenerationShader"_c;
    ProgramRayGenerationShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayGenerationShader)->typeSymbol = &FunctionPtrType;

    ProgramRayAnyHitShader.name = "RayAnyHitShader"_c;
    ProgramRayAnyHitShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayAnyHitShader)->typeSymbol = &FunctionPtrType;

    ProgramRayClosestHitShader.name = "RayClosestHitShader"_c;
    ProgramRayClosestHitShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayClosestHitShader)->typeSymbol = &FunctionPtrType;

    ProgramRayMissShader.name = "RayMissShader"_c;
    ProgramRayMissShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayMissShader)->typeSymbol = &FunctionPtrType;

    ProgramRayIntersectionShader.name = "RayIntersectionShader"_c;
    ProgramRayIntersectionShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayIntersectionShader)->typeSymbol = &FunctionPtrType;

    ProgramRayCallableShader.name = "RayCallableShader"_c;
    ProgramRayCallableShader.type = Type::FullType{ FunctionPtrType.name };
    Symbol::Resolved(&ProgramRayCallableShader)->typeSymbol = &FunctionPtrType;

    ProgramRenderState.name = "RenderState"_c;
    ProgramRenderState.type = Type::FullType{ RenderStateType.name };
    Symbol::Resolved(&ProgramRenderState)->typeSymbol = &RenderStateType;

    this->scope.symbolLookup = StaticMap<ConstantString, Symbol*, 15>{
        std::pair{ "ComputeShader"_c, &ProgramComputeShader },
        std::pair{ "DomainShader"_c, &ProgramDomainShader },
        std::pair{ "GeometryShader"_c, &ProgramGeometryShader },
        std::pair{ "HullShader"_c, &ProgramHullShader },
        std::pair{ "MeshShader"_c, &ProgramMeshShader },
        std::pair{ "PixelShader"_c, &ProgramPixelShader },
        std::pair{ "RayAnyHitShader"_c, &ProgramRayAnyHitShader },
        std::pair{ "RayCallableShader"_c, &ProgramRayCallableShader },
        std::pair{ "RayClosestHitShader"_c, &ProgramRayClosestHitShader },
        std::pair{ "RayGenerationShader"_c, &ProgramRayGenerationShader },
        std::pair{ "RayIntersectionShader"_c, &ProgramRayIntersectionShader },
        std::pair{ "RayMissShader"_c, &ProgramRayMissShader },
        std::pair{ "RenderState"_c, &ProgramRenderState },
        std::pair{ "TaskShader"_c, &ProgramTaskShader },
        std::pair{ "VertexShader"_c, &ProgramVertexShader }
    };
};
Program ProgramType;


struct StaticTypeTimerStop
{
    StaticTypeTimerStop()
    {
        StaticTypeTimer.Stop();
        StaticTypeTimer.Print("Static Type Setup");
    }
};
StaticTypeTimerStop StaticTypeTimerStopInstance;

} // namespace GPULang

