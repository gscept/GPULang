//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// textureAtomicMax with Texture3D, Int32x3, Int16
Variable TextureAtomicMax_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_Int16_coordinate;
Variable TextureAtomicMax_Texture3D_Int16_value;
Function TextureAtomicMax_Texture3D_Int16;
inline constexpr std::array TextureAtomicMax_Texture3D_Int16_args = { &TextureAtomicMax_Texture3D_Int16_texture, &TextureAtomicMax_Texture3D_Int16_coordinate, &TextureAtomicMax_Texture3D_Int16_value };

/// textureAtomicMax with Texture3D, Int32x3, Int16
Variable TextureAtomicMax_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_Int16_coordinate;
Variable TextureAtomicMax_Texture3D_Int16_value;
Function TextureAtomicMax_Texture3D_Int16;
inline constexpr std::array TextureAtomicMax_Texture3D_Int16_args = { &TextureAtomicMax_Texture3D_Int16_texture, &TextureAtomicMax_Texture3D_Int16_coordinate, &TextureAtomicMax_Texture3D_Int16_value };

/// textureAtomicMax with TextureCube, Int32x3, UInt32
Variable TextureAtomicMax_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_UInt32_coordinate;
Variable TextureAtomicMax_TextureCube_UInt32_value;
Function TextureAtomicMax_TextureCube_UInt32;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt32_args = { &TextureAtomicMax_TextureCube_UInt32_texture, &TextureAtomicMax_TextureCube_UInt32_coordinate, &TextureAtomicMax_TextureCube_UInt32_value };

/// textureAtomicMax with TextureCube, Int32x3, UInt32
Variable TextureAtomicMax_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_UInt32_coordinate;
Variable TextureAtomicMax_TextureCube_UInt32_value;
Function TextureAtomicMax_TextureCube_UInt32;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt32_args = { &TextureAtomicMax_TextureCube_UInt32_texture, &TextureAtomicMax_TextureCube_UInt32_coordinate, &TextureAtomicMax_TextureCube_UInt32_value };

/// textureAtomicMax with TextureCube, Int32x3, Int32
Variable TextureAtomicMax_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_Int32_coordinate;
Variable TextureAtomicMax_TextureCube_Int32_value;
Function TextureAtomicMax_TextureCube_Int32;
inline constexpr std::array TextureAtomicMax_TextureCube_Int32_args = { &TextureAtomicMax_TextureCube_Int32_texture, &TextureAtomicMax_TextureCube_Int32_coordinate, &TextureAtomicMax_TextureCube_Int32_value };

/// textureAtomicMax with TextureCube, Int32x3, Int32
Variable TextureAtomicMax_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_Int32_coordinate;
Variable TextureAtomicMax_TextureCube_Int32_value;
Function TextureAtomicMax_TextureCube_Int32;
inline constexpr std::array TextureAtomicMax_TextureCube_Int32_args = { &TextureAtomicMax_TextureCube_Int32_texture, &TextureAtomicMax_TextureCube_Int32_coordinate, &TextureAtomicMax_TextureCube_Int32_value };

/// textureAtomicMax with TextureCube, Int32x3, UInt16
Variable TextureAtomicMax_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_UInt16_coordinate;
Variable TextureAtomicMax_TextureCube_UInt16_value;
Function TextureAtomicMax_TextureCube_UInt16;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt16_args = { &TextureAtomicMax_TextureCube_UInt16_texture, &TextureAtomicMax_TextureCube_UInt16_coordinate, &TextureAtomicMax_TextureCube_UInt16_value };

/// textureAtomicMax with TextureCube, Int32x3, UInt16
Variable TextureAtomicMax_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_UInt16_coordinate;
Variable TextureAtomicMax_TextureCube_UInt16_value;
Function TextureAtomicMax_TextureCube_UInt16;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt16_args = { &TextureAtomicMax_TextureCube_UInt16_texture, &TextureAtomicMax_TextureCube_UInt16_coordinate, &TextureAtomicMax_TextureCube_UInt16_value };

/// textureAtomicMax with TextureCube, Int32x3, Int16
Variable TextureAtomicMax_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_Int16_coordinate;
Variable TextureAtomicMax_TextureCube_Int16_value;
Function TextureAtomicMax_TextureCube_Int16;
inline constexpr std::array TextureAtomicMax_TextureCube_Int16_args = { &TextureAtomicMax_TextureCube_Int16_texture, &TextureAtomicMax_TextureCube_Int16_coordinate, &TextureAtomicMax_TextureCube_Int16_value };

/// textureAtomicMax with TextureCube, Int32x3, Int16
Variable TextureAtomicMax_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_Int16_coordinate;
Variable TextureAtomicMax_TextureCube_Int16_value;
Function TextureAtomicMax_TextureCube_Int16;
inline constexpr std::array TextureAtomicMax_TextureCube_Int16_args = { &TextureAtomicMax_TextureCube_Int16_texture, &TextureAtomicMax_TextureCube_Int16_coordinate, &TextureAtomicMax_TextureCube_Int16_value };

/// textureAtomicMax with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicMax_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicMax_Texture1DArray_UInt32_value;
Function TextureAtomicMax_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt32_args = { &TextureAtomicMax_Texture1DArray_UInt32_texture, &TextureAtomicMax_Texture1DArray_UInt32_coordinate, &TextureAtomicMax_Texture1DArray_UInt32_value };

/// textureAtomicMax with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicMax_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicMax_Texture1DArray_UInt32_value;
Function TextureAtomicMax_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt32_args = { &TextureAtomicMax_Texture1DArray_UInt32_texture, &TextureAtomicMax_Texture1DArray_UInt32_coordinate, &TextureAtomicMax_Texture1DArray_UInt32_value };

/// textureAtomicMax with Texture1DArray, Int32x2, Int32
Variable TextureAtomicMax_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_Int32_coordinate;
Variable TextureAtomicMax_Texture1DArray_Int32_value;
Function TextureAtomicMax_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int32_args = { &TextureAtomicMax_Texture1DArray_Int32_texture, &TextureAtomicMax_Texture1DArray_Int32_coordinate, &TextureAtomicMax_Texture1DArray_Int32_value };

/// textureAtomicMax with Texture1DArray, Int32x2, Int32
Variable TextureAtomicMax_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_Int32_coordinate;
Variable TextureAtomicMax_Texture1DArray_Int32_value;
Function TextureAtomicMax_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int32_args = { &TextureAtomicMax_Texture1DArray_Int32_texture, &TextureAtomicMax_Texture1DArray_Int32_coordinate, &TextureAtomicMax_Texture1DArray_Int32_value };

/// textureAtomicMax with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicMax_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicMax_Texture1DArray_UInt16_value;
Function TextureAtomicMax_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt16_args = { &TextureAtomicMax_Texture1DArray_UInt16_texture, &TextureAtomicMax_Texture1DArray_UInt16_coordinate, &TextureAtomicMax_Texture1DArray_UInt16_value };

/// textureAtomicMax with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicMax_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicMax_Texture1DArray_UInt16_value;
Function TextureAtomicMax_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt16_args = { &TextureAtomicMax_Texture1DArray_UInt16_texture, &TextureAtomicMax_Texture1DArray_UInt16_coordinate, &TextureAtomicMax_Texture1DArray_UInt16_value };

/// textureAtomicMax with Texture1DArray, Int32x2, Int16
Variable TextureAtomicMax_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_Int16_coordinate;
Variable TextureAtomicMax_Texture1DArray_Int16_value;
Function TextureAtomicMax_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int16_args = { &TextureAtomicMax_Texture1DArray_Int16_texture, &TextureAtomicMax_Texture1DArray_Int16_coordinate, &TextureAtomicMax_Texture1DArray_Int16_value };

/// textureAtomicMax with Texture1DArray, Int32x2, Int16
Variable TextureAtomicMax_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_Int16_coordinate;
Variable TextureAtomicMax_Texture1DArray_Int16_value;
Function TextureAtomicMax_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int16_args = { &TextureAtomicMax_Texture1DArray_Int16_texture, &TextureAtomicMax_Texture1DArray_Int16_coordinate, &TextureAtomicMax_Texture1DArray_Int16_value };

/// textureAtomicMax with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicMax_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicMax_Texture2DArray_UInt32_value;
Function TextureAtomicMax_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt32_args = { &TextureAtomicMax_Texture2DArray_UInt32_texture, &TextureAtomicMax_Texture2DArray_UInt32_coordinate, &TextureAtomicMax_Texture2DArray_UInt32_value };

/// textureAtomicMax with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicMax_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicMax_Texture2DArray_UInt32_value;
Function TextureAtomicMax_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt32_args = { &TextureAtomicMax_Texture2DArray_UInt32_texture, &TextureAtomicMax_Texture2DArray_UInt32_coordinate, &TextureAtomicMax_Texture2DArray_UInt32_value };

/// textureAtomicMax with Texture2DArray, Int32x3, Int32
Variable TextureAtomicMax_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_Int32_coordinate;
Variable TextureAtomicMax_Texture2DArray_Int32_value;
Function TextureAtomicMax_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int32_args = { &TextureAtomicMax_Texture2DArray_Int32_texture, &TextureAtomicMax_Texture2DArray_Int32_coordinate, &TextureAtomicMax_Texture2DArray_Int32_value };

/// textureAtomicMax with Texture2DArray, Int32x3, Int32
Variable TextureAtomicMax_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_Int32_coordinate;
Variable TextureAtomicMax_Texture2DArray_Int32_value;
Function TextureAtomicMax_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int32_args = { &TextureAtomicMax_Texture2DArray_Int32_texture, &TextureAtomicMax_Texture2DArray_Int32_coordinate, &TextureAtomicMax_Texture2DArray_Int32_value };

/// textureAtomicMax with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicMax_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicMax_Texture2DArray_UInt16_value;
Function TextureAtomicMax_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt16_args = { &TextureAtomicMax_Texture2DArray_UInt16_texture, &TextureAtomicMax_Texture2DArray_UInt16_coordinate, &TextureAtomicMax_Texture2DArray_UInt16_value };

/// textureAtomicMax with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicMax_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicMax_Texture2DArray_UInt16_value;
Function TextureAtomicMax_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt16_args = { &TextureAtomicMax_Texture2DArray_UInt16_texture, &TextureAtomicMax_Texture2DArray_UInt16_coordinate, &TextureAtomicMax_Texture2DArray_UInt16_value };

/// textureAtomicMax with Texture2DArray, Int32x3, Int16
Variable TextureAtomicMax_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_Int16_coordinate;
Variable TextureAtomicMax_Texture2DArray_Int16_value;
Function TextureAtomicMax_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int16_args = { &TextureAtomicMax_Texture2DArray_Int16_texture, &TextureAtomicMax_Texture2DArray_Int16_coordinate, &TextureAtomicMax_Texture2DArray_Int16_value };

/// textureAtomicMax with Texture2DArray, Int32x3, Int16
Variable TextureAtomicMax_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_Int16_coordinate;
Variable TextureAtomicMax_Texture2DArray_Int16_value;
Function TextureAtomicMax_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int16_args = { &TextureAtomicMax_Texture2DArray_Int16_texture, &TextureAtomicMax_Texture2DArray_Int16_coordinate, &TextureAtomicMax_Texture2DArray_Int16_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicMax_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicMax_TextureCubeArray_UInt32_value;
Function TextureAtomicMax_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt32_args = { &TextureAtomicMax_TextureCubeArray_UInt32_texture, &TextureAtomicMax_TextureCubeArray_UInt32_coordinate, &TextureAtomicMax_TextureCubeArray_UInt32_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicMax_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicMax_TextureCubeArray_UInt32_value;
Function TextureAtomicMax_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt32_args = { &TextureAtomicMax_TextureCubeArray_UInt32_texture, &TextureAtomicMax_TextureCubeArray_UInt32_coordinate, &TextureAtomicMax_TextureCubeArray_UInt32_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicMax_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicMax_TextureCubeArray_Int32_value;
Function TextureAtomicMax_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int32_args = { &TextureAtomicMax_TextureCubeArray_Int32_texture, &TextureAtomicMax_TextureCubeArray_Int32_coordinate, &TextureAtomicMax_TextureCubeArray_Int32_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicMax_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicMax_TextureCubeArray_Int32_value;
Function TextureAtomicMax_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int32_args = { &TextureAtomicMax_TextureCubeArray_Int32_texture, &TextureAtomicMax_TextureCubeArray_Int32_coordinate, &TextureAtomicMax_TextureCubeArray_Int32_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicMax_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicMax_TextureCubeArray_UInt16_value;
Function TextureAtomicMax_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt16_args = { &TextureAtomicMax_TextureCubeArray_UInt16_texture, &TextureAtomicMax_TextureCubeArray_UInt16_coordinate, &TextureAtomicMax_TextureCubeArray_UInt16_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicMax_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicMax_TextureCubeArray_UInt16_value;
Function TextureAtomicMax_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt16_args = { &TextureAtomicMax_TextureCubeArray_UInt16_texture, &TextureAtomicMax_TextureCubeArray_UInt16_coordinate, &TextureAtomicMax_TextureCubeArray_UInt16_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicMax_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicMax_TextureCubeArray_Int16_value;
Function TextureAtomicMax_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int16_args = { &TextureAtomicMax_TextureCubeArray_Int16_texture, &TextureAtomicMax_TextureCubeArray_Int16_coordinate, &TextureAtomicMax_TextureCubeArray_Int16_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicMax_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicMax_TextureCubeArray_Int16_value;
Function TextureAtomicMax_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int16_args = { &TextureAtomicMax_TextureCubeArray_Int16_texture, &TextureAtomicMax_TextureCubeArray_Int16_coordinate, &TextureAtomicMax_TextureCubeArray_Int16_value };

/// textureAtomicAnd with Texture1D, Int32, UInt32
Variable TextureAtomicAnd_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_UInt32_coordinate;
Variable TextureAtomicAnd_Texture1D_UInt32_value;
Function TextureAtomicAnd_Texture1D_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt32_args = { &TextureAtomicAnd_Texture1D_UInt32_texture, &TextureAtomicAnd_Texture1D_UInt32_coordinate, &TextureAtomicAnd_Texture1D_UInt32_value };

/// textureAtomicAnd with Texture1D, Int32, UInt32
Variable TextureAtomicAnd_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_UInt32_coordinate;
Variable TextureAtomicAnd_Texture1D_UInt32_value;
Function TextureAtomicAnd_Texture1D_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt32_args = { &TextureAtomicAnd_Texture1D_UInt32_texture, &TextureAtomicAnd_Texture1D_UInt32_coordinate, &TextureAtomicAnd_Texture1D_UInt32_value };

/// textureAtomicAnd with Texture1D, Int32, Int32
Variable TextureAtomicAnd_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_Int32_coordinate;
Variable TextureAtomicAnd_Texture1D_Int32_value;
Function TextureAtomicAnd_Texture1D_Int32;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int32_args = { &TextureAtomicAnd_Texture1D_Int32_texture, &TextureAtomicAnd_Texture1D_Int32_coordinate, &TextureAtomicAnd_Texture1D_Int32_value };

/// textureAtomicAnd with Texture1D, Int32, Int32
Variable TextureAtomicAnd_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_Int32_coordinate;
Variable TextureAtomicAnd_Texture1D_Int32_value;
Function TextureAtomicAnd_Texture1D_Int32;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int32_args = { &TextureAtomicAnd_Texture1D_Int32_texture, &TextureAtomicAnd_Texture1D_Int32_coordinate, &TextureAtomicAnd_Texture1D_Int32_value };

/// textureAtomicAnd with Texture1D, Int32, UInt16
Variable TextureAtomicAnd_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_UInt16_coordinate;
Variable TextureAtomicAnd_Texture1D_UInt16_value;
Function TextureAtomicAnd_Texture1D_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt16_args = { &TextureAtomicAnd_Texture1D_UInt16_texture, &TextureAtomicAnd_Texture1D_UInt16_coordinate, &TextureAtomicAnd_Texture1D_UInt16_value };

/// textureAtomicAnd with Texture1D, Int32, UInt16
Variable TextureAtomicAnd_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_UInt16_coordinate;
Variable TextureAtomicAnd_Texture1D_UInt16_value;
Function TextureAtomicAnd_Texture1D_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt16_args = { &TextureAtomicAnd_Texture1D_UInt16_texture, &TextureAtomicAnd_Texture1D_UInt16_coordinate, &TextureAtomicAnd_Texture1D_UInt16_value };

/// textureAtomicAnd with Texture1D, Int32, Int16
Variable TextureAtomicAnd_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_Int16_coordinate;
Variable TextureAtomicAnd_Texture1D_Int16_value;
Function TextureAtomicAnd_Texture1D_Int16;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int16_args = { &TextureAtomicAnd_Texture1D_Int16_texture, &TextureAtomicAnd_Texture1D_Int16_coordinate, &TextureAtomicAnd_Texture1D_Int16_value };

/// textureAtomicAnd with Texture1D, Int32, Int16
Variable TextureAtomicAnd_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_Int16_coordinate;
Variable TextureAtomicAnd_Texture1D_Int16_value;
Function TextureAtomicAnd_Texture1D_Int16;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int16_args = { &TextureAtomicAnd_Texture1D_Int16_texture, &TextureAtomicAnd_Texture1D_Int16_coordinate, &TextureAtomicAnd_Texture1D_Int16_value };

/// textureAtomicAnd with Texture2D, Int32x2, UInt32
Variable TextureAtomicAnd_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_UInt32_coordinate;
Variable TextureAtomicAnd_Texture2D_UInt32_value;
Function TextureAtomicAnd_Texture2D_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt32_args = { &TextureAtomicAnd_Texture2D_UInt32_texture, &TextureAtomicAnd_Texture2D_UInt32_coordinate, &TextureAtomicAnd_Texture2D_UInt32_value };

/// textureAtomicAnd with Texture2D, Int32x2, UInt32
Variable TextureAtomicAnd_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_UInt32_coordinate;
Variable TextureAtomicAnd_Texture2D_UInt32_value;
Function TextureAtomicAnd_Texture2D_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt32_args = { &TextureAtomicAnd_Texture2D_UInt32_texture, &TextureAtomicAnd_Texture2D_UInt32_coordinate, &TextureAtomicAnd_Texture2D_UInt32_value };

/// textureAtomicAnd with Texture2D, Int32x2, Int32
Variable TextureAtomicAnd_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_Int32_coordinate;
Variable TextureAtomicAnd_Texture2D_Int32_value;
Function TextureAtomicAnd_Texture2D_Int32;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int32_args = { &TextureAtomicAnd_Texture2D_Int32_texture, &TextureAtomicAnd_Texture2D_Int32_coordinate, &TextureAtomicAnd_Texture2D_Int32_value };

/// textureAtomicAnd with Texture2D, Int32x2, Int32
Variable TextureAtomicAnd_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_Int32_coordinate;
Variable TextureAtomicAnd_Texture2D_Int32_value;
Function TextureAtomicAnd_Texture2D_Int32;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int32_args = { &TextureAtomicAnd_Texture2D_Int32_texture, &TextureAtomicAnd_Texture2D_Int32_coordinate, &TextureAtomicAnd_Texture2D_Int32_value };

/// textureAtomicAnd with Texture2D, Int32x2, UInt16
Variable TextureAtomicAnd_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_UInt16_coordinate;
Variable TextureAtomicAnd_Texture2D_UInt16_value;
Function TextureAtomicAnd_Texture2D_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt16_args = { &TextureAtomicAnd_Texture2D_UInt16_texture, &TextureAtomicAnd_Texture2D_UInt16_coordinate, &TextureAtomicAnd_Texture2D_UInt16_value };

/// textureAtomicAnd with Texture2D, Int32x2, UInt16
Variable TextureAtomicAnd_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_UInt16_coordinate;
Variable TextureAtomicAnd_Texture2D_UInt16_value;
Function TextureAtomicAnd_Texture2D_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt16_args = { &TextureAtomicAnd_Texture2D_UInt16_texture, &TextureAtomicAnd_Texture2D_UInt16_coordinate, &TextureAtomicAnd_Texture2D_UInt16_value };

/// textureAtomicAnd with Texture2D, Int32x2, Int16
Variable TextureAtomicAnd_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_Int16_coordinate;
Variable TextureAtomicAnd_Texture2D_Int16_value;
Function TextureAtomicAnd_Texture2D_Int16;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int16_args = { &TextureAtomicAnd_Texture2D_Int16_texture, &TextureAtomicAnd_Texture2D_Int16_coordinate, &TextureAtomicAnd_Texture2D_Int16_value };

/// textureAtomicAnd with Texture2D, Int32x2, Int16
Variable TextureAtomicAnd_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_Int16_coordinate;
Variable TextureAtomicAnd_Texture2D_Int16_value;
Function TextureAtomicAnd_Texture2D_Int16;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int16_args = { &TextureAtomicAnd_Texture2D_Int16_texture, &TextureAtomicAnd_Texture2D_Int16_coordinate, &TextureAtomicAnd_Texture2D_Int16_value };

/// textureAtomicAnd with Texture3D, Int32x3, UInt32
Variable TextureAtomicAnd_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_UInt32_coordinate;
Variable TextureAtomicAnd_Texture3D_UInt32_value;
Function TextureAtomicAnd_Texture3D_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt32_args = { &TextureAtomicAnd_Texture3D_UInt32_texture, &TextureAtomicAnd_Texture3D_UInt32_coordinate, &TextureAtomicAnd_Texture3D_UInt32_value };

/// textureAtomicAnd with Texture3D, Int32x3, UInt32
Variable TextureAtomicAnd_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_UInt32_coordinate;
Variable TextureAtomicAnd_Texture3D_UInt32_value;
Function TextureAtomicAnd_Texture3D_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt32_args = { &TextureAtomicAnd_Texture3D_UInt32_texture, &TextureAtomicAnd_Texture3D_UInt32_coordinate, &TextureAtomicAnd_Texture3D_UInt32_value };

/// textureAtomicAnd with Texture3D, Int32x3, Int32
Variable TextureAtomicAnd_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_Int32_coordinate;
Variable TextureAtomicAnd_Texture3D_Int32_value;
Function TextureAtomicAnd_Texture3D_Int32;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int32_args = { &TextureAtomicAnd_Texture3D_Int32_texture, &TextureAtomicAnd_Texture3D_Int32_coordinate, &TextureAtomicAnd_Texture3D_Int32_value };

/// textureAtomicAnd with Texture3D, Int32x3, Int32
Variable TextureAtomicAnd_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_Int32_coordinate;
Variable TextureAtomicAnd_Texture3D_Int32_value;
Function TextureAtomicAnd_Texture3D_Int32;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int32_args = { &TextureAtomicAnd_Texture3D_Int32_texture, &TextureAtomicAnd_Texture3D_Int32_coordinate, &TextureAtomicAnd_Texture3D_Int32_value };

/// textureAtomicAnd with Texture3D, Int32x3, UInt16
Variable TextureAtomicAnd_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_UInt16_coordinate;
Variable TextureAtomicAnd_Texture3D_UInt16_value;
Function TextureAtomicAnd_Texture3D_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt16_args = { &TextureAtomicAnd_Texture3D_UInt16_texture, &TextureAtomicAnd_Texture3D_UInt16_coordinate, &TextureAtomicAnd_Texture3D_UInt16_value };

/// textureAtomicAnd with Texture3D, Int32x3, UInt16
Variable TextureAtomicAnd_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_UInt16_coordinate;
Variable TextureAtomicAnd_Texture3D_UInt16_value;
Function TextureAtomicAnd_Texture3D_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt16_args = { &TextureAtomicAnd_Texture3D_UInt16_texture, &TextureAtomicAnd_Texture3D_UInt16_coordinate, &TextureAtomicAnd_Texture3D_UInt16_value };

/// textureAtomicAnd with Texture3D, Int32x3, Int16
Variable TextureAtomicAnd_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_Int16_coordinate;
Variable TextureAtomicAnd_Texture3D_Int16_value;
Function TextureAtomicAnd_Texture3D_Int16;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int16_args = { &TextureAtomicAnd_Texture3D_Int16_texture, &TextureAtomicAnd_Texture3D_Int16_coordinate, &TextureAtomicAnd_Texture3D_Int16_value };

/// textureAtomicAnd with Texture3D, Int32x3, Int16
Variable TextureAtomicAnd_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_Int16_coordinate;
Variable TextureAtomicAnd_Texture3D_Int16_value;
Function TextureAtomicAnd_Texture3D_Int16;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int16_args = { &TextureAtomicAnd_Texture3D_Int16_texture, &TextureAtomicAnd_Texture3D_Int16_coordinate, &TextureAtomicAnd_Texture3D_Int16_value };

/// textureAtomicAnd with TextureCube, Int32x3, UInt32
Variable TextureAtomicAnd_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_UInt32_coordinate;
Variable TextureAtomicAnd_TextureCube_UInt32_value;
Function TextureAtomicAnd_TextureCube_UInt32;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt32_args = { &TextureAtomicAnd_TextureCube_UInt32_texture, &TextureAtomicAnd_TextureCube_UInt32_coordinate, &TextureAtomicAnd_TextureCube_UInt32_value };

/// textureAtomicAnd with TextureCube, Int32x3, UInt32
Variable TextureAtomicAnd_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_UInt32_coordinate;
Variable TextureAtomicAnd_TextureCube_UInt32_value;
Function TextureAtomicAnd_TextureCube_UInt32;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt32_args = { &TextureAtomicAnd_TextureCube_UInt32_texture, &TextureAtomicAnd_TextureCube_UInt32_coordinate, &TextureAtomicAnd_TextureCube_UInt32_value };

/// textureAtomicAnd with TextureCube, Int32x3, Int32
Variable TextureAtomicAnd_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_Int32_coordinate;
Variable TextureAtomicAnd_TextureCube_Int32_value;
Function TextureAtomicAnd_TextureCube_Int32;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int32_args = { &TextureAtomicAnd_TextureCube_Int32_texture, &TextureAtomicAnd_TextureCube_Int32_coordinate, &TextureAtomicAnd_TextureCube_Int32_value };

/// textureAtomicAnd with TextureCube, Int32x3, Int32
Variable TextureAtomicAnd_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_Int32_coordinate;
Variable TextureAtomicAnd_TextureCube_Int32_value;
Function TextureAtomicAnd_TextureCube_Int32;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int32_args = { &TextureAtomicAnd_TextureCube_Int32_texture, &TextureAtomicAnd_TextureCube_Int32_coordinate, &TextureAtomicAnd_TextureCube_Int32_value };

/// textureAtomicAnd with TextureCube, Int32x3, UInt16
Variable TextureAtomicAnd_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_UInt16_coordinate;
Variable TextureAtomicAnd_TextureCube_UInt16_value;
Function TextureAtomicAnd_TextureCube_UInt16;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt16_args = { &TextureAtomicAnd_TextureCube_UInt16_texture, &TextureAtomicAnd_TextureCube_UInt16_coordinate, &TextureAtomicAnd_TextureCube_UInt16_value };

/// textureAtomicAnd with TextureCube, Int32x3, UInt16
Variable TextureAtomicAnd_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_UInt16_coordinate;
Variable TextureAtomicAnd_TextureCube_UInt16_value;
Function TextureAtomicAnd_TextureCube_UInt16;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt16_args = { &TextureAtomicAnd_TextureCube_UInt16_texture, &TextureAtomicAnd_TextureCube_UInt16_coordinate, &TextureAtomicAnd_TextureCube_UInt16_value };

/// textureAtomicAnd with TextureCube, Int32x3, Int16
Variable TextureAtomicAnd_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_Int16_coordinate;
Variable TextureAtomicAnd_TextureCube_Int16_value;
Function TextureAtomicAnd_TextureCube_Int16;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int16_args = { &TextureAtomicAnd_TextureCube_Int16_texture, &TextureAtomicAnd_TextureCube_Int16_coordinate, &TextureAtomicAnd_TextureCube_Int16_value };

/// textureAtomicAnd with TextureCube, Int32x3, Int16
Variable TextureAtomicAnd_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_Int16_coordinate;
Variable TextureAtomicAnd_TextureCube_Int16_value;
Function TextureAtomicAnd_TextureCube_Int16;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int16_args = { &TextureAtomicAnd_TextureCube_Int16_texture, &TextureAtomicAnd_TextureCube_Int16_coordinate, &TextureAtomicAnd_TextureCube_Int16_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicAnd_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicAnd_Texture1DArray_UInt32_value;
Function TextureAtomicAnd_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt32_args = { &TextureAtomicAnd_Texture1DArray_UInt32_texture, &TextureAtomicAnd_Texture1DArray_UInt32_coordinate, &TextureAtomicAnd_Texture1DArray_UInt32_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicAnd_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicAnd_Texture1DArray_UInt32_value;
Function TextureAtomicAnd_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt32_args = { &TextureAtomicAnd_Texture1DArray_UInt32_texture, &TextureAtomicAnd_Texture1DArray_UInt32_coordinate, &TextureAtomicAnd_Texture1DArray_UInt32_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, Int32
Variable TextureAtomicAnd_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_Int32_coordinate;
Variable TextureAtomicAnd_Texture1DArray_Int32_value;
Function TextureAtomicAnd_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int32_args = { &TextureAtomicAnd_Texture1DArray_Int32_texture, &TextureAtomicAnd_Texture1DArray_Int32_coordinate, &TextureAtomicAnd_Texture1DArray_Int32_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, Int32
Variable TextureAtomicAnd_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_Int32_coordinate;
Variable TextureAtomicAnd_Texture1DArray_Int32_value;
Function TextureAtomicAnd_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int32_args = { &TextureAtomicAnd_Texture1DArray_Int32_texture, &TextureAtomicAnd_Texture1DArray_Int32_coordinate, &TextureAtomicAnd_Texture1DArray_Int32_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicAnd_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicAnd_Texture1DArray_UInt16_value;
Function TextureAtomicAnd_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt16_args = { &TextureAtomicAnd_Texture1DArray_UInt16_texture, &TextureAtomicAnd_Texture1DArray_UInt16_coordinate, &TextureAtomicAnd_Texture1DArray_UInt16_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicAnd_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicAnd_Texture1DArray_UInt16_value;
Function TextureAtomicAnd_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt16_args = { &TextureAtomicAnd_Texture1DArray_UInt16_texture, &TextureAtomicAnd_Texture1DArray_UInt16_coordinate, &TextureAtomicAnd_Texture1DArray_UInt16_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, Int16
Variable TextureAtomicAnd_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_Int16_coordinate;
Variable TextureAtomicAnd_Texture1DArray_Int16_value;
Function TextureAtomicAnd_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int16_args = { &TextureAtomicAnd_Texture1DArray_Int16_texture, &TextureAtomicAnd_Texture1DArray_Int16_coordinate, &TextureAtomicAnd_Texture1DArray_Int16_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, Int16
Variable TextureAtomicAnd_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_Int16_coordinate;
Variable TextureAtomicAnd_Texture1DArray_Int16_value;
Function TextureAtomicAnd_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int16_args = { &TextureAtomicAnd_Texture1DArray_Int16_texture, &TextureAtomicAnd_Texture1DArray_Int16_coordinate, &TextureAtomicAnd_Texture1DArray_Int16_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicAnd_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicAnd_Texture2DArray_UInt32_value;
Function TextureAtomicAnd_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt32_args = { &TextureAtomicAnd_Texture2DArray_UInt32_texture, &TextureAtomicAnd_Texture2DArray_UInt32_coordinate, &TextureAtomicAnd_Texture2DArray_UInt32_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicAnd_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicAnd_Texture2DArray_UInt32_value;
Function TextureAtomicAnd_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt32_args = { &TextureAtomicAnd_Texture2DArray_UInt32_texture, &TextureAtomicAnd_Texture2DArray_UInt32_coordinate, &TextureAtomicAnd_Texture2DArray_UInt32_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, Int32
Variable TextureAtomicAnd_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_Int32_coordinate;
Variable TextureAtomicAnd_Texture2DArray_Int32_value;
Function TextureAtomicAnd_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int32_args = { &TextureAtomicAnd_Texture2DArray_Int32_texture, &TextureAtomicAnd_Texture2DArray_Int32_coordinate, &TextureAtomicAnd_Texture2DArray_Int32_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, Int32
Variable TextureAtomicAnd_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_Int32_coordinate;
Variable TextureAtomicAnd_Texture2DArray_Int32_value;
Function TextureAtomicAnd_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int32_args = { &TextureAtomicAnd_Texture2DArray_Int32_texture, &TextureAtomicAnd_Texture2DArray_Int32_coordinate, &TextureAtomicAnd_Texture2DArray_Int32_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicAnd_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicAnd_Texture2DArray_UInt16_value;
Function TextureAtomicAnd_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt16_args = { &TextureAtomicAnd_Texture2DArray_UInt16_texture, &TextureAtomicAnd_Texture2DArray_UInt16_coordinate, &TextureAtomicAnd_Texture2DArray_UInt16_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicAnd_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicAnd_Texture2DArray_UInt16_value;
Function TextureAtomicAnd_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt16_args = { &TextureAtomicAnd_Texture2DArray_UInt16_texture, &TextureAtomicAnd_Texture2DArray_UInt16_coordinate, &TextureAtomicAnd_Texture2DArray_UInt16_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, Int16
Variable TextureAtomicAnd_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_Int16_coordinate;
Variable TextureAtomicAnd_Texture2DArray_Int16_value;
Function TextureAtomicAnd_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int16_args = { &TextureAtomicAnd_Texture2DArray_Int16_texture, &TextureAtomicAnd_Texture2DArray_Int16_coordinate, &TextureAtomicAnd_Texture2DArray_Int16_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, Int16
Variable TextureAtomicAnd_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_Int16_coordinate;
Variable TextureAtomicAnd_Texture2DArray_Int16_value;
Function TextureAtomicAnd_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int16_args = { &TextureAtomicAnd_Texture2DArray_Int16_texture, &TextureAtomicAnd_Texture2DArray_Int16_coordinate, &TextureAtomicAnd_Texture2DArray_Int16_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicAnd_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_UInt32_value;
Function TextureAtomicAnd_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt32_args = { &TextureAtomicAnd_TextureCubeArray_UInt32_texture, &TextureAtomicAnd_TextureCubeArray_UInt32_coordinate, &TextureAtomicAnd_TextureCubeArray_UInt32_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicAnd_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_UInt32_value;
Function TextureAtomicAnd_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt32_args = { &TextureAtomicAnd_TextureCubeArray_UInt32_texture, &TextureAtomicAnd_TextureCubeArray_UInt32_coordinate, &TextureAtomicAnd_TextureCubeArray_UInt32_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicAnd_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_Int32_value;
Function TextureAtomicAnd_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int32_args = { &TextureAtomicAnd_TextureCubeArray_Int32_texture, &TextureAtomicAnd_TextureCubeArray_Int32_coordinate, &TextureAtomicAnd_TextureCubeArray_Int32_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicAnd_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_Int32_value;
Function TextureAtomicAnd_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int32_args = { &TextureAtomicAnd_TextureCubeArray_Int32_texture, &TextureAtomicAnd_TextureCubeArray_Int32_coordinate, &TextureAtomicAnd_TextureCubeArray_Int32_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicAnd_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_UInt16_value;
Function TextureAtomicAnd_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt16_args = { &TextureAtomicAnd_TextureCubeArray_UInt16_texture, &TextureAtomicAnd_TextureCubeArray_UInt16_coordinate, &TextureAtomicAnd_TextureCubeArray_UInt16_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicAnd_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_UInt16_value;
Function TextureAtomicAnd_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt16_args = { &TextureAtomicAnd_TextureCubeArray_UInt16_texture, &TextureAtomicAnd_TextureCubeArray_UInt16_coordinate, &TextureAtomicAnd_TextureCubeArray_UInt16_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicAnd_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_Int16_value;
Function TextureAtomicAnd_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int16_args = { &TextureAtomicAnd_TextureCubeArray_Int16_texture, &TextureAtomicAnd_TextureCubeArray_Int16_coordinate, &TextureAtomicAnd_TextureCubeArray_Int16_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicAnd_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_Int16_value;
Function TextureAtomicAnd_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int16_args = { &TextureAtomicAnd_TextureCubeArray_Int16_texture, &TextureAtomicAnd_TextureCubeArray_Int16_coordinate, &TextureAtomicAnd_TextureCubeArray_Int16_value };

/// textureAtomicOr with Texture1D, Int32, UInt32
Variable TextureAtomicOr_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_UInt32_coordinate;
Variable TextureAtomicOr_Texture1D_UInt32_value;
Function TextureAtomicOr_Texture1D_UInt32;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt32_args = { &TextureAtomicOr_Texture1D_UInt32_texture, &TextureAtomicOr_Texture1D_UInt32_coordinate, &TextureAtomicOr_Texture1D_UInt32_value };

/// textureAtomicOr with Texture1D, Int32, UInt32
Variable TextureAtomicOr_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_UInt32_coordinate;
Variable TextureAtomicOr_Texture1D_UInt32_value;
Function TextureAtomicOr_Texture1D_UInt32;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt32_args = { &TextureAtomicOr_Texture1D_UInt32_texture, &TextureAtomicOr_Texture1D_UInt32_coordinate, &TextureAtomicOr_Texture1D_UInt32_value };

/// textureAtomicOr with Texture1D, Int32, Int32
Variable TextureAtomicOr_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_Int32_coordinate;
Variable TextureAtomicOr_Texture1D_Int32_value;
Function TextureAtomicOr_Texture1D_Int32;
inline constexpr std::array TextureAtomicOr_Texture1D_Int32_args = { &TextureAtomicOr_Texture1D_Int32_texture, &TextureAtomicOr_Texture1D_Int32_coordinate, &TextureAtomicOr_Texture1D_Int32_value };

/// textureAtomicOr with Texture1D, Int32, Int32
Variable TextureAtomicOr_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_Int32_coordinate;
Variable TextureAtomicOr_Texture1D_Int32_value;
Function TextureAtomicOr_Texture1D_Int32;
inline constexpr std::array TextureAtomicOr_Texture1D_Int32_args = { &TextureAtomicOr_Texture1D_Int32_texture, &TextureAtomicOr_Texture1D_Int32_coordinate, &TextureAtomicOr_Texture1D_Int32_value };

/// textureAtomicOr with Texture1D, Int32, UInt16
Variable TextureAtomicOr_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_UInt16_coordinate;
Variable TextureAtomicOr_Texture1D_UInt16_value;
Function TextureAtomicOr_Texture1D_UInt16;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt16_args = { &TextureAtomicOr_Texture1D_UInt16_texture, &TextureAtomicOr_Texture1D_UInt16_coordinate, &TextureAtomicOr_Texture1D_UInt16_value };

/// textureAtomicOr with Texture1D, Int32, UInt16
Variable TextureAtomicOr_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_UInt16_coordinate;
Variable TextureAtomicOr_Texture1D_UInt16_value;
Function TextureAtomicOr_Texture1D_UInt16;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt16_args = { &TextureAtomicOr_Texture1D_UInt16_texture, &TextureAtomicOr_Texture1D_UInt16_coordinate, &TextureAtomicOr_Texture1D_UInt16_value };

/// textureAtomicOr with Texture1D, Int32, Int16
Variable TextureAtomicOr_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_Int16_coordinate;
Variable TextureAtomicOr_Texture1D_Int16_value;
Function TextureAtomicOr_Texture1D_Int16;
inline constexpr std::array TextureAtomicOr_Texture1D_Int16_args = { &TextureAtomicOr_Texture1D_Int16_texture, &TextureAtomicOr_Texture1D_Int16_coordinate, &TextureAtomicOr_Texture1D_Int16_value };

/// textureAtomicOr with Texture1D, Int32, Int16
Variable TextureAtomicOr_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_Int16_coordinate;
Variable TextureAtomicOr_Texture1D_Int16_value;
Function TextureAtomicOr_Texture1D_Int16;
inline constexpr std::array TextureAtomicOr_Texture1D_Int16_args = { &TextureAtomicOr_Texture1D_Int16_texture, &TextureAtomicOr_Texture1D_Int16_coordinate, &TextureAtomicOr_Texture1D_Int16_value };

/// textureAtomicOr with Texture2D, Int32x2, UInt32
Variable TextureAtomicOr_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_UInt32_coordinate;
Variable TextureAtomicOr_Texture2D_UInt32_value;
Function TextureAtomicOr_Texture2D_UInt32;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt32_args = { &TextureAtomicOr_Texture2D_UInt32_texture, &TextureAtomicOr_Texture2D_UInt32_coordinate, &TextureAtomicOr_Texture2D_UInt32_value };

/// textureAtomicOr with Texture2D, Int32x2, UInt32
Variable TextureAtomicOr_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_UInt32_coordinate;
Variable TextureAtomicOr_Texture2D_UInt32_value;
Function TextureAtomicOr_Texture2D_UInt32;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt32_args = { &TextureAtomicOr_Texture2D_UInt32_texture, &TextureAtomicOr_Texture2D_UInt32_coordinate, &TextureAtomicOr_Texture2D_UInt32_value };

/// textureAtomicOr with Texture2D, Int32x2, Int32
Variable TextureAtomicOr_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_Int32_coordinate;
Variable TextureAtomicOr_Texture2D_Int32_value;
Function TextureAtomicOr_Texture2D_Int32;
inline constexpr std::array TextureAtomicOr_Texture2D_Int32_args = { &TextureAtomicOr_Texture2D_Int32_texture, &TextureAtomicOr_Texture2D_Int32_coordinate, &TextureAtomicOr_Texture2D_Int32_value };

/// textureAtomicOr with Texture2D, Int32x2, Int32
Variable TextureAtomicOr_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_Int32_coordinate;
Variable TextureAtomicOr_Texture2D_Int32_value;
Function TextureAtomicOr_Texture2D_Int32;
inline constexpr std::array TextureAtomicOr_Texture2D_Int32_args = { &TextureAtomicOr_Texture2D_Int32_texture, &TextureAtomicOr_Texture2D_Int32_coordinate, &TextureAtomicOr_Texture2D_Int32_value };

/// textureAtomicOr with Texture2D, Int32x2, UInt16
Variable TextureAtomicOr_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_UInt16_coordinate;
Variable TextureAtomicOr_Texture2D_UInt16_value;
Function TextureAtomicOr_Texture2D_UInt16;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt16_args = { &TextureAtomicOr_Texture2D_UInt16_texture, &TextureAtomicOr_Texture2D_UInt16_coordinate, &TextureAtomicOr_Texture2D_UInt16_value };

/// textureAtomicOr with Texture2D, Int32x2, UInt16
Variable TextureAtomicOr_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_UInt16_coordinate;
Variable TextureAtomicOr_Texture2D_UInt16_value;
Function TextureAtomicOr_Texture2D_UInt16;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt16_args = { &TextureAtomicOr_Texture2D_UInt16_texture, &TextureAtomicOr_Texture2D_UInt16_coordinate, &TextureAtomicOr_Texture2D_UInt16_value };

/// textureAtomicOr with Texture2D, Int32x2, Int16
Variable TextureAtomicOr_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_Int16_coordinate;
Variable TextureAtomicOr_Texture2D_Int16_value;
Function TextureAtomicOr_Texture2D_Int16;
inline constexpr std::array TextureAtomicOr_Texture2D_Int16_args = { &TextureAtomicOr_Texture2D_Int16_texture, &TextureAtomicOr_Texture2D_Int16_coordinate, &TextureAtomicOr_Texture2D_Int16_value };

/// textureAtomicOr with Texture2D, Int32x2, Int16
Variable TextureAtomicOr_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_Int16_coordinate;
Variable TextureAtomicOr_Texture2D_Int16_value;
Function TextureAtomicOr_Texture2D_Int16;
inline constexpr std::array TextureAtomicOr_Texture2D_Int16_args = { &TextureAtomicOr_Texture2D_Int16_texture, &TextureAtomicOr_Texture2D_Int16_coordinate, &TextureAtomicOr_Texture2D_Int16_value };

/// textureAtomicOr with Texture3D, Int32x3, UInt32
Variable TextureAtomicOr_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_UInt32_coordinate;
Variable TextureAtomicOr_Texture3D_UInt32_value;
Function TextureAtomicOr_Texture3D_UInt32;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt32_args = { &TextureAtomicOr_Texture3D_UInt32_texture, &TextureAtomicOr_Texture3D_UInt32_coordinate, &TextureAtomicOr_Texture3D_UInt32_value };

/// textureAtomicOr with Texture3D, Int32x3, UInt32
Variable TextureAtomicOr_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_UInt32_coordinate;
Variable TextureAtomicOr_Texture3D_UInt32_value;
Function TextureAtomicOr_Texture3D_UInt32;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt32_args = { &TextureAtomicOr_Texture3D_UInt32_texture, &TextureAtomicOr_Texture3D_UInt32_coordinate, &TextureAtomicOr_Texture3D_UInt32_value };

/// textureAtomicOr with Texture3D, Int32x3, Int32
Variable TextureAtomicOr_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_Int32_coordinate;
Variable TextureAtomicOr_Texture3D_Int32_value;
Function TextureAtomicOr_Texture3D_Int32;
inline constexpr std::array TextureAtomicOr_Texture3D_Int32_args = { &TextureAtomicOr_Texture3D_Int32_texture, &TextureAtomicOr_Texture3D_Int32_coordinate, &TextureAtomicOr_Texture3D_Int32_value };

/// textureAtomicOr with Texture3D, Int32x3, Int32
Variable TextureAtomicOr_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_Int32_coordinate;
Variable TextureAtomicOr_Texture3D_Int32_value;
Function TextureAtomicOr_Texture3D_Int32;
inline constexpr std::array TextureAtomicOr_Texture3D_Int32_args = { &TextureAtomicOr_Texture3D_Int32_texture, &TextureAtomicOr_Texture3D_Int32_coordinate, &TextureAtomicOr_Texture3D_Int32_value };

/// textureAtomicOr with Texture3D, Int32x3, UInt16
Variable TextureAtomicOr_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_UInt16_coordinate;
Variable TextureAtomicOr_Texture3D_UInt16_value;
Function TextureAtomicOr_Texture3D_UInt16;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt16_args = { &TextureAtomicOr_Texture3D_UInt16_texture, &TextureAtomicOr_Texture3D_UInt16_coordinate, &TextureAtomicOr_Texture3D_UInt16_value };

/// textureAtomicOr with Texture3D, Int32x3, UInt16
Variable TextureAtomicOr_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_UInt16_coordinate;
Variable TextureAtomicOr_Texture3D_UInt16_value;
Function TextureAtomicOr_Texture3D_UInt16;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt16_args = { &TextureAtomicOr_Texture3D_UInt16_texture, &TextureAtomicOr_Texture3D_UInt16_coordinate, &TextureAtomicOr_Texture3D_UInt16_value };

/// textureAtomicOr with Texture3D, Int32x3, Int16
Variable TextureAtomicOr_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_Int16_coordinate;
Variable TextureAtomicOr_Texture3D_Int16_value;
Function TextureAtomicOr_Texture3D_Int16;
inline constexpr std::array TextureAtomicOr_Texture3D_Int16_args = { &TextureAtomicOr_Texture3D_Int16_texture, &TextureAtomicOr_Texture3D_Int16_coordinate, &TextureAtomicOr_Texture3D_Int16_value };

/// textureAtomicOr with Texture3D, Int32x3, Int16
Variable TextureAtomicOr_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_Int16_coordinate;
Variable TextureAtomicOr_Texture3D_Int16_value;
Function TextureAtomicOr_Texture3D_Int16;
inline constexpr std::array TextureAtomicOr_Texture3D_Int16_args = { &TextureAtomicOr_Texture3D_Int16_texture, &TextureAtomicOr_Texture3D_Int16_coordinate, &TextureAtomicOr_Texture3D_Int16_value };

/// textureAtomicOr with TextureCube, Int32x3, UInt32
Variable TextureAtomicOr_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_UInt32_coordinate;
Variable TextureAtomicOr_TextureCube_UInt32_value;
Function TextureAtomicOr_TextureCube_UInt32;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt32_args = { &TextureAtomicOr_TextureCube_UInt32_texture, &TextureAtomicOr_TextureCube_UInt32_coordinate, &TextureAtomicOr_TextureCube_UInt32_value };

/// textureAtomicOr with TextureCube, Int32x3, UInt32
Variable TextureAtomicOr_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_UInt32_coordinate;
Variable TextureAtomicOr_TextureCube_UInt32_value;
Function TextureAtomicOr_TextureCube_UInt32;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt32_args = { &TextureAtomicOr_TextureCube_UInt32_texture, &TextureAtomicOr_TextureCube_UInt32_coordinate, &TextureAtomicOr_TextureCube_UInt32_value };

/// textureAtomicOr with TextureCube, Int32x3, Int32
Variable TextureAtomicOr_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_Int32_coordinate;
Variable TextureAtomicOr_TextureCube_Int32_value;
Function TextureAtomicOr_TextureCube_Int32;
inline constexpr std::array TextureAtomicOr_TextureCube_Int32_args = { &TextureAtomicOr_TextureCube_Int32_texture, &TextureAtomicOr_TextureCube_Int32_coordinate, &TextureAtomicOr_TextureCube_Int32_value };

/// textureAtomicOr with TextureCube, Int32x3, Int32
Variable TextureAtomicOr_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_Int32_coordinate;
Variable TextureAtomicOr_TextureCube_Int32_value;
Function TextureAtomicOr_TextureCube_Int32;
inline constexpr std::array TextureAtomicOr_TextureCube_Int32_args = { &TextureAtomicOr_TextureCube_Int32_texture, &TextureAtomicOr_TextureCube_Int32_coordinate, &TextureAtomicOr_TextureCube_Int32_value };

/// textureAtomicOr with TextureCube, Int32x3, UInt16
Variable TextureAtomicOr_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_UInt16_coordinate;
Variable TextureAtomicOr_TextureCube_UInt16_value;
Function TextureAtomicOr_TextureCube_UInt16;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt16_args = { &TextureAtomicOr_TextureCube_UInt16_texture, &TextureAtomicOr_TextureCube_UInt16_coordinate, &TextureAtomicOr_TextureCube_UInt16_value };

/// textureAtomicOr with TextureCube, Int32x3, UInt16
Variable TextureAtomicOr_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_UInt16_coordinate;
Variable TextureAtomicOr_TextureCube_UInt16_value;
Function TextureAtomicOr_TextureCube_UInt16;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt16_args = { &TextureAtomicOr_TextureCube_UInt16_texture, &TextureAtomicOr_TextureCube_UInt16_coordinate, &TextureAtomicOr_TextureCube_UInt16_value };

/// textureAtomicOr with TextureCube, Int32x3, Int16
Variable TextureAtomicOr_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_Int16_coordinate;
Variable TextureAtomicOr_TextureCube_Int16_value;
Function TextureAtomicOr_TextureCube_Int16;
inline constexpr std::array TextureAtomicOr_TextureCube_Int16_args = { &TextureAtomicOr_TextureCube_Int16_texture, &TextureAtomicOr_TextureCube_Int16_coordinate, &TextureAtomicOr_TextureCube_Int16_value };

/// textureAtomicOr with TextureCube, Int32x3, Int16
Variable TextureAtomicOr_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_Int16_coordinate;
Variable TextureAtomicOr_TextureCube_Int16_value;
Function TextureAtomicOr_TextureCube_Int16;
inline constexpr std::array TextureAtomicOr_TextureCube_Int16_args = { &TextureAtomicOr_TextureCube_Int16_texture, &TextureAtomicOr_TextureCube_Int16_coordinate, &TextureAtomicOr_TextureCube_Int16_value };

/// textureAtomicOr with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicOr_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicOr_Texture1DArray_UInt32_value;
Function TextureAtomicOr_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt32_args = { &TextureAtomicOr_Texture1DArray_UInt32_texture, &TextureAtomicOr_Texture1DArray_UInt32_coordinate, &TextureAtomicOr_Texture1DArray_UInt32_value };

/// textureAtomicOr with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicOr_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicOr_Texture1DArray_UInt32_value;
Function TextureAtomicOr_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt32_args = { &TextureAtomicOr_Texture1DArray_UInt32_texture, &TextureAtomicOr_Texture1DArray_UInt32_coordinate, &TextureAtomicOr_Texture1DArray_UInt32_value };

/// textureAtomicOr with Texture1DArray, Int32x2, Int32
Variable TextureAtomicOr_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1DArray_Int32_coordinate;
Variable TextureAtomicOr_Texture1DArray_Int32_value;
Function TextureAtomicOr_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int32_args = { &TextureAtomicOr_Texture1DArray_Int32_texture, &TextureAtomicOr_Texture1DArray_Int32_coordinate, &TextureAtomicOr_Texture1DArray_Int32_value };

/// textureAtomicOr with Texture1DArray, Int32x2, Int32
Variable TextureAtomicOr_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1DArray_Int32_coordinate;
Variable TextureAtomicOr_Texture1DArray_Int32_value;
Function TextureAtomicOr_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int32_args = { &TextureAtomicOr_Texture1DArray_Int32_texture, &TextureAtomicOr_Texture1DArray_Int32_coordinate, &TextureAtomicOr_Texture1DArray_Int32_value };

/// textureAtomicOr with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicOr_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicOr_Texture1DArray_UInt16_value;
Function TextureAtomicOr_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt16_args = { &TextureAtomicOr_Texture1DArray_UInt16_texture, &TextureAtomicOr_Texture1DArray_UInt16_coordinate, &TextureAtomicOr_Texture1DArray_UInt16_value };

/// textureAtomicOr with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicOr_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicOr_Texture1DArray_UInt16_value;
Function TextureAtomicOr_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt16_args = { &TextureAtomicOr_Texture1DArray_UInt16_texture, &TextureAtomicOr_Texture1DArray_UInt16_coordinate, &TextureAtomicOr_Texture1DArray_UInt16_value };

void SetupIntrinsics17()
{
    /// textureAtomicMax with Texture3D, Int32x3, Int16
    TextureAtomicMax_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_Int16_texture.type.modifiers = TextureAtomicMax_Texture3D_Int16_texture_modifiers;
    TextureAtomicMax_Texture3D_Int16_texture.type.modifierValues = TextureAtomicMax_Texture3D_Int16_texture_modifierValues;
    TextureAtomicMax_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_Int16.name = TextureAtomicMax_Texture3D_Int16_name;
    TextureAtomicMax_Texture3D_Int16.backendIndex = 3113;
    TextureAtomicMax_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture3D_Int16.parameters = TextureAtomicMax_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->signature = "textureAtomicMax(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->name = "textureAtomicMax(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture3D, Int32x3, Int16
    TextureAtomicMax_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_Int16_texture.type.modifiers = TextureAtomicMax_Texture3D_Int16_texture_modifiers;
    TextureAtomicMax_Texture3D_Int16_texture.type.modifierValues = TextureAtomicMax_Texture3D_Int16_texture_modifierValues;
    TextureAtomicMax_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_Int16.name = TextureAtomicMax_Texture3D_Int16_name;
    TextureAtomicMax_Texture3D_Int16.backendIndex = 3114;
    TextureAtomicMax_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture3D_Int16.parameters = TextureAtomicMax_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->signature = "textureAtomicMax(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->name = "textureAtomicMax(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with TextureCube, Int32x3, UInt32
    TextureAtomicMax_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_UInt32_texture.type.modifiers = TextureAtomicMax_TextureCube_UInt32_texture_modifiers;
    TextureAtomicMax_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicMax_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicMax_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicMax_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_UInt32.name = TextureAtomicMax_TextureCube_UInt32_name;
    TextureAtomicMax_TextureCube_UInt32.backendIndex = 3115;
    TextureAtomicMax_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_TextureCube_UInt32.parameters = TextureAtomicMax_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->signature = "textureAtomicMax(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->name = "textureAtomicMax(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with TextureCube, Int32x3, UInt32
    TextureAtomicMax_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_UInt32_texture.type.modifiers = TextureAtomicMax_TextureCube_UInt32_texture_modifiers;
    TextureAtomicMax_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicMax_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicMax_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicMax_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_UInt32.name = TextureAtomicMax_TextureCube_UInt32_name;
    TextureAtomicMax_TextureCube_UInt32.backendIndex = 3116;
    TextureAtomicMax_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_TextureCube_UInt32.parameters = TextureAtomicMax_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->signature = "textureAtomicMax(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->name = "textureAtomicMax(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with TextureCube, Int32x3, Int32
    TextureAtomicMax_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_Int32_texture.type.modifiers = TextureAtomicMax_TextureCube_Int32_texture_modifiers;
    TextureAtomicMax_TextureCube_Int32_texture.type.modifierValues = TextureAtomicMax_TextureCube_Int32_texture_modifierValues;
    TextureAtomicMax_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicMax_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_Int32.name = TextureAtomicMax_TextureCube_Int32_name;
    TextureAtomicMax_TextureCube_Int32.backendIndex = 3117;
    TextureAtomicMax_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_TextureCube_Int32.parameters = TextureAtomicMax_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->signature = "textureAtomicMax(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->name = "textureAtomicMax(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with TextureCube, Int32x3, Int32
    TextureAtomicMax_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_Int32_texture.type.modifiers = TextureAtomicMax_TextureCube_Int32_texture_modifiers;
    TextureAtomicMax_TextureCube_Int32_texture.type.modifierValues = TextureAtomicMax_TextureCube_Int32_texture_modifierValues;
    TextureAtomicMax_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicMax_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_Int32.name = TextureAtomicMax_TextureCube_Int32_name;
    TextureAtomicMax_TextureCube_Int32.backendIndex = 3118;
    TextureAtomicMax_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_TextureCube_Int32.parameters = TextureAtomicMax_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->signature = "textureAtomicMax(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->name = "textureAtomicMax(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with TextureCube, Int32x3, UInt16
    TextureAtomicMax_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_UInt16_texture.type.modifiers = TextureAtomicMax_TextureCube_UInt16_texture_modifiers;
    TextureAtomicMax_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicMax_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicMax_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicMax_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_UInt16.name = TextureAtomicMax_TextureCube_UInt16_name;
    TextureAtomicMax_TextureCube_UInt16.backendIndex = 3119;
    TextureAtomicMax_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_TextureCube_UInt16.parameters = TextureAtomicMax_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->signature = "textureAtomicMax(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->name = "textureAtomicMax(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with TextureCube, Int32x3, UInt16
    TextureAtomicMax_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_UInt16_texture.type.modifiers = TextureAtomicMax_TextureCube_UInt16_texture_modifiers;
    TextureAtomicMax_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicMax_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicMax_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicMax_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_UInt16.name = TextureAtomicMax_TextureCube_UInt16_name;
    TextureAtomicMax_TextureCube_UInt16.backendIndex = 3120;
    TextureAtomicMax_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_TextureCube_UInt16.parameters = TextureAtomicMax_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->signature = "textureAtomicMax(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->name = "textureAtomicMax(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with TextureCube, Int32x3, Int16
    TextureAtomicMax_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_Int16_texture.type.modifiers = TextureAtomicMax_TextureCube_Int16_texture_modifiers;
    TextureAtomicMax_TextureCube_Int16_texture.type.modifierValues = TextureAtomicMax_TextureCube_Int16_texture_modifierValues;
    TextureAtomicMax_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicMax_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_Int16.name = TextureAtomicMax_TextureCube_Int16_name;
    TextureAtomicMax_TextureCube_Int16.backendIndex = 3121;
    TextureAtomicMax_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_TextureCube_Int16.parameters = TextureAtomicMax_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->signature = "textureAtomicMax(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->name = "textureAtomicMax(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with TextureCube, Int32x3, Int16
    TextureAtomicMax_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_Int16_texture.type.modifiers = TextureAtomicMax_TextureCube_Int16_texture_modifiers;
    TextureAtomicMax_TextureCube_Int16_texture.type.modifierValues = TextureAtomicMax_TextureCube_Int16_texture_modifierValues;
    TextureAtomicMax_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicMax_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_Int16.name = TextureAtomicMax_TextureCube_Int16_name;
    TextureAtomicMax_TextureCube_Int16.backendIndex = 3122;
    TextureAtomicMax_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_TextureCube_Int16.parameters = TextureAtomicMax_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->signature = "textureAtomicMax(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->name = "textureAtomicMax(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, UInt32
    TextureAtomicMax_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicMax_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicMax_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_UInt32.name = TextureAtomicMax_Texture1DArray_UInt32_name;
    TextureAtomicMax_Texture1DArray_UInt32.backendIndex = 3123;
    TextureAtomicMax_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture1DArray_UInt32.parameters = TextureAtomicMax_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, UInt32
    TextureAtomicMax_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicMax_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicMax_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_UInt32.name = TextureAtomicMax_Texture1DArray_UInt32_name;
    TextureAtomicMax_Texture1DArray_UInt32.backendIndex = 3124;
    TextureAtomicMax_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture1DArray_UInt32.parameters = TextureAtomicMax_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, Int32
    TextureAtomicMax_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicMax_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicMax_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_Int32.name = TextureAtomicMax_Texture1DArray_Int32_name;
    TextureAtomicMax_Texture1DArray_Int32.backendIndex = 3125;
    TextureAtomicMax_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture1DArray_Int32.parameters = TextureAtomicMax_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, Int32
    TextureAtomicMax_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicMax_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicMax_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_Int32.name = TextureAtomicMax_Texture1DArray_Int32_name;
    TextureAtomicMax_Texture1DArray_Int32.backendIndex = 3126;
    TextureAtomicMax_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture1DArray_Int32.parameters = TextureAtomicMax_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, UInt16
    TextureAtomicMax_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicMax_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicMax_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_UInt16.name = TextureAtomicMax_Texture1DArray_UInt16_name;
    TextureAtomicMax_Texture1DArray_UInt16.backendIndex = 3127;
    TextureAtomicMax_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture1DArray_UInt16.parameters = TextureAtomicMax_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, UInt16
    TextureAtomicMax_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicMax_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicMax_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_UInt16.name = TextureAtomicMax_Texture1DArray_UInt16_name;
    TextureAtomicMax_Texture1DArray_UInt16.backendIndex = 3128;
    TextureAtomicMax_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture1DArray_UInt16.parameters = TextureAtomicMax_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, Int16
    TextureAtomicMax_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicMax_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicMax_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_Int16.name = TextureAtomicMax_Texture1DArray_Int16_name;
    TextureAtomicMax_Texture1DArray_Int16.backendIndex = 3129;
    TextureAtomicMax_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture1DArray_Int16.parameters = TextureAtomicMax_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, Int16
    TextureAtomicMax_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicMax_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicMax_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_Int16.name = TextureAtomicMax_Texture1DArray_Int16_name;
    TextureAtomicMax_Texture1DArray_Int16.backendIndex = 3130;
    TextureAtomicMax_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture1DArray_Int16.parameters = TextureAtomicMax_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, UInt32
    TextureAtomicMax_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicMax_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicMax_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_UInt32.name = TextureAtomicMax_Texture2DArray_UInt32_name;
    TextureAtomicMax_Texture2DArray_UInt32.backendIndex = 3131;
    TextureAtomicMax_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture2DArray_UInt32.parameters = TextureAtomicMax_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, UInt32
    TextureAtomicMax_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicMax_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicMax_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_UInt32.name = TextureAtomicMax_Texture2DArray_UInt32_name;
    TextureAtomicMax_Texture2DArray_UInt32.backendIndex = 3132;
    TextureAtomicMax_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture2DArray_UInt32.parameters = TextureAtomicMax_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, Int32
    TextureAtomicMax_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicMax_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicMax_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_Int32.name = TextureAtomicMax_Texture2DArray_Int32_name;
    TextureAtomicMax_Texture2DArray_Int32.backendIndex = 3133;
    TextureAtomicMax_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture2DArray_Int32.parameters = TextureAtomicMax_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, Int32
    TextureAtomicMax_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicMax_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicMax_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_Int32.name = TextureAtomicMax_Texture2DArray_Int32_name;
    TextureAtomicMax_Texture2DArray_Int32.backendIndex = 3134;
    TextureAtomicMax_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture2DArray_Int32.parameters = TextureAtomicMax_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, UInt16
    TextureAtomicMax_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicMax_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicMax_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_UInt16.name = TextureAtomicMax_Texture2DArray_UInt16_name;
    TextureAtomicMax_Texture2DArray_UInt16.backendIndex = 3135;
    TextureAtomicMax_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture2DArray_UInt16.parameters = TextureAtomicMax_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, UInt16
    TextureAtomicMax_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicMax_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicMax_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_UInt16.name = TextureAtomicMax_Texture2DArray_UInt16_name;
    TextureAtomicMax_Texture2DArray_UInt16.backendIndex = 3136;
    TextureAtomicMax_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture2DArray_UInt16.parameters = TextureAtomicMax_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, Int16
    TextureAtomicMax_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicMax_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicMax_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_Int16.name = TextureAtomicMax_Texture2DArray_Int16_name;
    TextureAtomicMax_Texture2DArray_Int16.backendIndex = 3137;
    TextureAtomicMax_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture2DArray_Int16.parameters = TextureAtomicMax_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, Int16
    TextureAtomicMax_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicMax_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicMax_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_Int16.name = TextureAtomicMax_Texture2DArray_Int16_name;
    TextureAtomicMax_Texture2DArray_Int16.backendIndex = 3138;
    TextureAtomicMax_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture2DArray_Int16.parameters = TextureAtomicMax_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, UInt32
    TextureAtomicMax_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_UInt32.name = TextureAtomicMax_TextureCubeArray_UInt32_name;
    TextureAtomicMax_TextureCubeArray_UInt32.backendIndex = 3139;
    TextureAtomicMax_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_TextureCubeArray_UInt32.parameters = TextureAtomicMax_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, UInt32
    TextureAtomicMax_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_UInt32.name = TextureAtomicMax_TextureCubeArray_UInt32_name;
    TextureAtomicMax_TextureCubeArray_UInt32.backendIndex = 3140;
    TextureAtomicMax_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_TextureCubeArray_UInt32.parameters = TextureAtomicMax_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, Int32
    TextureAtomicMax_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_Int32.name = TextureAtomicMax_TextureCubeArray_Int32_name;
    TextureAtomicMax_TextureCubeArray_Int32.backendIndex = 3141;
    TextureAtomicMax_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_TextureCubeArray_Int32.parameters = TextureAtomicMax_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, Int32
    TextureAtomicMax_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_Int32.name = TextureAtomicMax_TextureCubeArray_Int32_name;
    TextureAtomicMax_TextureCubeArray_Int32.backendIndex = 3142;
    TextureAtomicMax_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_TextureCubeArray_Int32.parameters = TextureAtomicMax_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, UInt16
    TextureAtomicMax_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_UInt16.name = TextureAtomicMax_TextureCubeArray_UInt16_name;
    TextureAtomicMax_TextureCubeArray_UInt16.backendIndex = 3143;
    TextureAtomicMax_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_TextureCubeArray_UInt16.parameters = TextureAtomicMax_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, UInt16
    TextureAtomicMax_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_UInt16.name = TextureAtomicMax_TextureCubeArray_UInt16_name;
    TextureAtomicMax_TextureCubeArray_UInt16.backendIndex = 3144;
    TextureAtomicMax_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_TextureCubeArray_UInt16.parameters = TextureAtomicMax_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, Int16
    TextureAtomicMax_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_Int16.name = TextureAtomicMax_TextureCubeArray_Int16_name;
    TextureAtomicMax_TextureCubeArray_Int16.backendIndex = 3145;
    TextureAtomicMax_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_TextureCubeArray_Int16.parameters = TextureAtomicMax_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, Int16
    TextureAtomicMax_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_Int16.name = TextureAtomicMax_TextureCubeArray_Int16_name;
    TextureAtomicMax_TextureCubeArray_Int16.backendIndex = 3146;
    TextureAtomicMax_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_TextureCubeArray_Int16.parameters = TextureAtomicMax_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture1D, Int32, UInt32
    TextureAtomicAnd_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture1D_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_UInt32.name = TextureAtomicAnd_Texture1D_UInt32_name;
    TextureAtomicAnd_Texture1D_UInt32.backendIndex = 3147;
    TextureAtomicAnd_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture1D_UInt32.parameters = TextureAtomicAnd_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->signature = "textureAtomicAnd(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->name = "textureAtomicAnd(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture1D, Int32, UInt32
    TextureAtomicAnd_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture1D_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_UInt32.name = TextureAtomicAnd_Texture1D_UInt32_name;
    TextureAtomicAnd_Texture1D_UInt32.backendIndex = 3148;
    TextureAtomicAnd_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture1D_UInt32.parameters = TextureAtomicAnd_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->signature = "textureAtomicAnd(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->name = "textureAtomicAnd(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture1D, Int32, Int32
    TextureAtomicAnd_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_Int32_texture.type.modifiers = TextureAtomicAnd_Texture1D_Int32_texture_modifiers;
    TextureAtomicAnd_Texture1D_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture1D_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_Int32.name = TextureAtomicAnd_Texture1D_Int32_name;
    TextureAtomicAnd_Texture1D_Int32.backendIndex = 3149;
    TextureAtomicAnd_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture1D_Int32.parameters = TextureAtomicAnd_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->signature = "textureAtomicAnd(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->name = "textureAtomicAnd(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture1D, Int32, Int32
    TextureAtomicAnd_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_Int32_texture.type.modifiers = TextureAtomicAnd_Texture1D_Int32_texture_modifiers;
    TextureAtomicAnd_Texture1D_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture1D_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_Int32.name = TextureAtomicAnd_Texture1D_Int32_name;
    TextureAtomicAnd_Texture1D_Int32.backendIndex = 3150;
    TextureAtomicAnd_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture1D_Int32.parameters = TextureAtomicAnd_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->signature = "textureAtomicAnd(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->name = "textureAtomicAnd(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture1D, Int32, UInt16
    TextureAtomicAnd_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture1D_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_UInt16.name = TextureAtomicAnd_Texture1D_UInt16_name;
    TextureAtomicAnd_Texture1D_UInt16.backendIndex = 3151;
    TextureAtomicAnd_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture1D_UInt16.parameters = TextureAtomicAnd_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->signature = "textureAtomicAnd(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->name = "textureAtomicAnd(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture1D, Int32, UInt16
    TextureAtomicAnd_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture1D_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_UInt16.name = TextureAtomicAnd_Texture1D_UInt16_name;
    TextureAtomicAnd_Texture1D_UInt16.backendIndex = 3152;
    TextureAtomicAnd_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture1D_UInt16.parameters = TextureAtomicAnd_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->signature = "textureAtomicAnd(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->name = "textureAtomicAnd(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture1D, Int32, Int16
    TextureAtomicAnd_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_Int16_texture.type.modifiers = TextureAtomicAnd_Texture1D_Int16_texture_modifiers;
    TextureAtomicAnd_Texture1D_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture1D_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_Int16.name = TextureAtomicAnd_Texture1D_Int16_name;
    TextureAtomicAnd_Texture1D_Int16.backendIndex = 3153;
    TextureAtomicAnd_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture1D_Int16.parameters = TextureAtomicAnd_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->signature = "textureAtomicAnd(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->name = "textureAtomicAnd(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture1D, Int32, Int16
    TextureAtomicAnd_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_Int16_texture.type.modifiers = TextureAtomicAnd_Texture1D_Int16_texture_modifiers;
    TextureAtomicAnd_Texture1D_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture1D_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_Int16.name = TextureAtomicAnd_Texture1D_Int16_name;
    TextureAtomicAnd_Texture1D_Int16.backendIndex = 3154;
    TextureAtomicAnd_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture1D_Int16.parameters = TextureAtomicAnd_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->signature = "textureAtomicAnd(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->name = "textureAtomicAnd(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture2D, Int32x2, UInt32
    TextureAtomicAnd_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture2D_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_UInt32.name = TextureAtomicAnd_Texture2D_UInt32_name;
    TextureAtomicAnd_Texture2D_UInt32.backendIndex = 3155;
    TextureAtomicAnd_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture2D_UInt32.parameters = TextureAtomicAnd_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->name = "textureAtomicAnd(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture2D, Int32x2, UInt32
    TextureAtomicAnd_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture2D_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_UInt32.name = TextureAtomicAnd_Texture2D_UInt32_name;
    TextureAtomicAnd_Texture2D_UInt32.backendIndex = 3156;
    TextureAtomicAnd_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture2D_UInt32.parameters = TextureAtomicAnd_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->name = "textureAtomicAnd(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture2D, Int32x2, Int32
    TextureAtomicAnd_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_Int32_texture.type.modifiers = TextureAtomicAnd_Texture2D_Int32_texture_modifiers;
    TextureAtomicAnd_Texture2D_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture2D_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_Int32.name = TextureAtomicAnd_Texture2D_Int32_name;
    TextureAtomicAnd_Texture2D_Int32.backendIndex = 3157;
    TextureAtomicAnd_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture2D_Int32.parameters = TextureAtomicAnd_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->name = "textureAtomicAnd(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture2D, Int32x2, Int32
    TextureAtomicAnd_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_Int32_texture.type.modifiers = TextureAtomicAnd_Texture2D_Int32_texture_modifiers;
    TextureAtomicAnd_Texture2D_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture2D_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_Int32.name = TextureAtomicAnd_Texture2D_Int32_name;
    TextureAtomicAnd_Texture2D_Int32.backendIndex = 3158;
    TextureAtomicAnd_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture2D_Int32.parameters = TextureAtomicAnd_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->name = "textureAtomicAnd(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture2D, Int32x2, UInt16
    TextureAtomicAnd_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture2D_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_UInt16.name = TextureAtomicAnd_Texture2D_UInt16_name;
    TextureAtomicAnd_Texture2D_UInt16.backendIndex = 3159;
    TextureAtomicAnd_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture2D_UInt16.parameters = TextureAtomicAnd_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->name = "textureAtomicAnd(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture2D, Int32x2, UInt16
    TextureAtomicAnd_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture2D_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_UInt16.name = TextureAtomicAnd_Texture2D_UInt16_name;
    TextureAtomicAnd_Texture2D_UInt16.backendIndex = 3160;
    TextureAtomicAnd_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture2D_UInt16.parameters = TextureAtomicAnd_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->name = "textureAtomicAnd(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture2D, Int32x2, Int16
    TextureAtomicAnd_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_Int16_texture.type.modifiers = TextureAtomicAnd_Texture2D_Int16_texture_modifiers;
    TextureAtomicAnd_Texture2D_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture2D_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_Int16.name = TextureAtomicAnd_Texture2D_Int16_name;
    TextureAtomicAnd_Texture2D_Int16.backendIndex = 3161;
    TextureAtomicAnd_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture2D_Int16.parameters = TextureAtomicAnd_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->name = "textureAtomicAnd(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture2D, Int32x2, Int16
    TextureAtomicAnd_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_Int16_texture.type.modifiers = TextureAtomicAnd_Texture2D_Int16_texture_modifiers;
    TextureAtomicAnd_Texture2D_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture2D_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_Int16.name = TextureAtomicAnd_Texture2D_Int16_name;
    TextureAtomicAnd_Texture2D_Int16.backendIndex = 3162;
    TextureAtomicAnd_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture2D_Int16.parameters = TextureAtomicAnd_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->name = "textureAtomicAnd(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture3D, Int32x3, UInt32
    TextureAtomicAnd_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture3D_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_UInt32.name = TextureAtomicAnd_Texture3D_UInt32_name;
    TextureAtomicAnd_Texture3D_UInt32.backendIndex = 3163;
    TextureAtomicAnd_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture3D_UInt32.parameters = TextureAtomicAnd_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->name = "textureAtomicAnd(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture3D, Int32x3, UInt32
    TextureAtomicAnd_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture3D_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_UInt32.name = TextureAtomicAnd_Texture3D_UInt32_name;
    TextureAtomicAnd_Texture3D_UInt32.backendIndex = 3164;
    TextureAtomicAnd_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture3D_UInt32.parameters = TextureAtomicAnd_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->name = "textureAtomicAnd(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture3D, Int32x3, Int32
    TextureAtomicAnd_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_Int32_texture.type.modifiers = TextureAtomicAnd_Texture3D_Int32_texture_modifiers;
    TextureAtomicAnd_Texture3D_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture3D_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_Int32.name = TextureAtomicAnd_Texture3D_Int32_name;
    TextureAtomicAnd_Texture3D_Int32.backendIndex = 3165;
    TextureAtomicAnd_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture3D_Int32.parameters = TextureAtomicAnd_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->name = "textureAtomicAnd(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture3D, Int32x3, Int32
    TextureAtomicAnd_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_Int32_texture.type.modifiers = TextureAtomicAnd_Texture3D_Int32_texture_modifiers;
    TextureAtomicAnd_Texture3D_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture3D_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_Int32.name = TextureAtomicAnd_Texture3D_Int32_name;
    TextureAtomicAnd_Texture3D_Int32.backendIndex = 3166;
    TextureAtomicAnd_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture3D_Int32.parameters = TextureAtomicAnd_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->name = "textureAtomicAnd(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture3D, Int32x3, UInt16
    TextureAtomicAnd_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture3D_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_UInt16.name = TextureAtomicAnd_Texture3D_UInt16_name;
    TextureAtomicAnd_Texture3D_UInt16.backendIndex = 3167;
    TextureAtomicAnd_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture3D_UInt16.parameters = TextureAtomicAnd_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->name = "textureAtomicAnd(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture3D, Int32x3, UInt16
    TextureAtomicAnd_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture3D_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_UInt16.name = TextureAtomicAnd_Texture3D_UInt16_name;
    TextureAtomicAnd_Texture3D_UInt16.backendIndex = 3168;
    TextureAtomicAnd_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture3D_UInt16.parameters = TextureAtomicAnd_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->name = "textureAtomicAnd(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture3D, Int32x3, Int16
    TextureAtomicAnd_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_Int16_texture.type.modifiers = TextureAtomicAnd_Texture3D_Int16_texture_modifiers;
    TextureAtomicAnd_Texture3D_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture3D_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_Int16.name = TextureAtomicAnd_Texture3D_Int16_name;
    TextureAtomicAnd_Texture3D_Int16.backendIndex = 3169;
    TextureAtomicAnd_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture3D_Int16.parameters = TextureAtomicAnd_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->name = "textureAtomicAnd(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture3D, Int32x3, Int16
    TextureAtomicAnd_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_Int16_texture.type.modifiers = TextureAtomicAnd_Texture3D_Int16_texture_modifiers;
    TextureAtomicAnd_Texture3D_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture3D_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_Int16.name = TextureAtomicAnd_Texture3D_Int16_name;
    TextureAtomicAnd_Texture3D_Int16.backendIndex = 3170;
    TextureAtomicAnd_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture3D_Int16.parameters = TextureAtomicAnd_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->name = "textureAtomicAnd(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with TextureCube, Int32x3, UInt32
    TextureAtomicAnd_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_UInt32_texture.type.modifiers = TextureAtomicAnd_TextureCube_UInt32_texture_modifiers;
    TextureAtomicAnd_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicAnd_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicAnd_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_UInt32.name = TextureAtomicAnd_TextureCube_UInt32_name;
    TextureAtomicAnd_TextureCube_UInt32.backendIndex = 3171;
    TextureAtomicAnd_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_TextureCube_UInt32.parameters = TextureAtomicAnd_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->name = "textureAtomicAnd(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with TextureCube, Int32x3, UInt32
    TextureAtomicAnd_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_UInt32_texture.type.modifiers = TextureAtomicAnd_TextureCube_UInt32_texture_modifiers;
    TextureAtomicAnd_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicAnd_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicAnd_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_UInt32.name = TextureAtomicAnd_TextureCube_UInt32_name;
    TextureAtomicAnd_TextureCube_UInt32.backendIndex = 3172;
    TextureAtomicAnd_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_TextureCube_UInt32.parameters = TextureAtomicAnd_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->name = "textureAtomicAnd(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with TextureCube, Int32x3, Int32
    TextureAtomicAnd_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_Int32_texture.type.modifiers = TextureAtomicAnd_TextureCube_Int32_texture_modifiers;
    TextureAtomicAnd_TextureCube_Int32_texture.type.modifierValues = TextureAtomicAnd_TextureCube_Int32_texture_modifierValues;
    TextureAtomicAnd_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_Int32.name = TextureAtomicAnd_TextureCube_Int32_name;
    TextureAtomicAnd_TextureCube_Int32.backendIndex = 3173;
    TextureAtomicAnd_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_TextureCube_Int32.parameters = TextureAtomicAnd_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->name = "textureAtomicAnd(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with TextureCube, Int32x3, Int32
    TextureAtomicAnd_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_Int32_texture.type.modifiers = TextureAtomicAnd_TextureCube_Int32_texture_modifiers;
    TextureAtomicAnd_TextureCube_Int32_texture.type.modifierValues = TextureAtomicAnd_TextureCube_Int32_texture_modifierValues;
    TextureAtomicAnd_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_Int32.name = TextureAtomicAnd_TextureCube_Int32_name;
    TextureAtomicAnd_TextureCube_Int32.backendIndex = 3174;
    TextureAtomicAnd_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_TextureCube_Int32.parameters = TextureAtomicAnd_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->name = "textureAtomicAnd(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with TextureCube, Int32x3, UInt16
    TextureAtomicAnd_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_UInt16_texture.type.modifiers = TextureAtomicAnd_TextureCube_UInt16_texture_modifiers;
    TextureAtomicAnd_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicAnd_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicAnd_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_UInt16.name = TextureAtomicAnd_TextureCube_UInt16_name;
    TextureAtomicAnd_TextureCube_UInt16.backendIndex = 3175;
    TextureAtomicAnd_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_TextureCube_UInt16.parameters = TextureAtomicAnd_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->name = "textureAtomicAnd(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with TextureCube, Int32x3, UInt16
    TextureAtomicAnd_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_UInt16_texture.type.modifiers = TextureAtomicAnd_TextureCube_UInt16_texture_modifiers;
    TextureAtomicAnd_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicAnd_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicAnd_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_UInt16.name = TextureAtomicAnd_TextureCube_UInt16_name;
    TextureAtomicAnd_TextureCube_UInt16.backendIndex = 3176;
    TextureAtomicAnd_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_TextureCube_UInt16.parameters = TextureAtomicAnd_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->name = "textureAtomicAnd(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with TextureCube, Int32x3, Int16
    TextureAtomicAnd_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_Int16_texture.type.modifiers = TextureAtomicAnd_TextureCube_Int16_texture_modifiers;
    TextureAtomicAnd_TextureCube_Int16_texture.type.modifierValues = TextureAtomicAnd_TextureCube_Int16_texture_modifierValues;
    TextureAtomicAnd_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_Int16.name = TextureAtomicAnd_TextureCube_Int16_name;
    TextureAtomicAnd_TextureCube_Int16.backendIndex = 3177;
    TextureAtomicAnd_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_TextureCube_Int16.parameters = TextureAtomicAnd_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->name = "textureAtomicAnd(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with TextureCube, Int32x3, Int16
    TextureAtomicAnd_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_Int16_texture.type.modifiers = TextureAtomicAnd_TextureCube_Int16_texture_modifiers;
    TextureAtomicAnd_TextureCube_Int16_texture.type.modifierValues = TextureAtomicAnd_TextureCube_Int16_texture_modifierValues;
    TextureAtomicAnd_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_Int16.name = TextureAtomicAnd_TextureCube_Int16_name;
    TextureAtomicAnd_TextureCube_Int16.backendIndex = 3178;
    TextureAtomicAnd_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_TextureCube_Int16.parameters = TextureAtomicAnd_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->name = "textureAtomicAnd(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, UInt32
    TextureAtomicAnd_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_UInt32.name = TextureAtomicAnd_Texture1DArray_UInt32_name;
    TextureAtomicAnd_Texture1DArray_UInt32.backendIndex = 3179;
    TextureAtomicAnd_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture1DArray_UInt32.parameters = TextureAtomicAnd_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, UInt32
    TextureAtomicAnd_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_UInt32.name = TextureAtomicAnd_Texture1DArray_UInt32_name;
    TextureAtomicAnd_Texture1DArray_UInt32.backendIndex = 3180;
    TextureAtomicAnd_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture1DArray_UInt32.parameters = TextureAtomicAnd_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, Int32
    TextureAtomicAnd_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_Int32.name = TextureAtomicAnd_Texture1DArray_Int32_name;
    TextureAtomicAnd_Texture1DArray_Int32.backendIndex = 3181;
    TextureAtomicAnd_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture1DArray_Int32.parameters = TextureAtomicAnd_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, Int32
    TextureAtomicAnd_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_Int32.name = TextureAtomicAnd_Texture1DArray_Int32_name;
    TextureAtomicAnd_Texture1DArray_Int32.backendIndex = 3182;
    TextureAtomicAnd_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture1DArray_Int32.parameters = TextureAtomicAnd_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, UInt16
    TextureAtomicAnd_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_UInt16.name = TextureAtomicAnd_Texture1DArray_UInt16_name;
    TextureAtomicAnd_Texture1DArray_UInt16.backendIndex = 3183;
    TextureAtomicAnd_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture1DArray_UInt16.parameters = TextureAtomicAnd_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, UInt16
    TextureAtomicAnd_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_UInt16.name = TextureAtomicAnd_Texture1DArray_UInt16_name;
    TextureAtomicAnd_Texture1DArray_UInt16.backendIndex = 3184;
    TextureAtomicAnd_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture1DArray_UInt16.parameters = TextureAtomicAnd_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, Int16
    TextureAtomicAnd_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_Int16.name = TextureAtomicAnd_Texture1DArray_Int16_name;
    TextureAtomicAnd_Texture1DArray_Int16.backendIndex = 3185;
    TextureAtomicAnd_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture1DArray_Int16.parameters = TextureAtomicAnd_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, Int16
    TextureAtomicAnd_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_Int16.name = TextureAtomicAnd_Texture1DArray_Int16_name;
    TextureAtomicAnd_Texture1DArray_Int16.backendIndex = 3186;
    TextureAtomicAnd_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture1DArray_Int16.parameters = TextureAtomicAnd_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, UInt32
    TextureAtomicAnd_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_UInt32.name = TextureAtomicAnd_Texture2DArray_UInt32_name;
    TextureAtomicAnd_Texture2DArray_UInt32.backendIndex = 3187;
    TextureAtomicAnd_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture2DArray_UInt32.parameters = TextureAtomicAnd_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, UInt32
    TextureAtomicAnd_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_UInt32.name = TextureAtomicAnd_Texture2DArray_UInt32_name;
    TextureAtomicAnd_Texture2DArray_UInt32.backendIndex = 3188;
    TextureAtomicAnd_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture2DArray_UInt32.parameters = TextureAtomicAnd_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, Int32
    TextureAtomicAnd_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_Int32.name = TextureAtomicAnd_Texture2DArray_Int32_name;
    TextureAtomicAnd_Texture2DArray_Int32.backendIndex = 3189;
    TextureAtomicAnd_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture2DArray_Int32.parameters = TextureAtomicAnd_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, Int32
    TextureAtomicAnd_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_Int32.name = TextureAtomicAnd_Texture2DArray_Int32_name;
    TextureAtomicAnd_Texture2DArray_Int32.backendIndex = 3190;
    TextureAtomicAnd_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture2DArray_Int32.parameters = TextureAtomicAnd_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, UInt16
    TextureAtomicAnd_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_UInt16.name = TextureAtomicAnd_Texture2DArray_UInt16_name;
    TextureAtomicAnd_Texture2DArray_UInt16.backendIndex = 3191;
    TextureAtomicAnd_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture2DArray_UInt16.parameters = TextureAtomicAnd_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, UInt16
    TextureAtomicAnd_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_UInt16.name = TextureAtomicAnd_Texture2DArray_UInt16_name;
    TextureAtomicAnd_Texture2DArray_UInt16.backendIndex = 3192;
    TextureAtomicAnd_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture2DArray_UInt16.parameters = TextureAtomicAnd_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, Int16
    TextureAtomicAnd_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_Int16.name = TextureAtomicAnd_Texture2DArray_Int16_name;
    TextureAtomicAnd_Texture2DArray_Int16.backendIndex = 3193;
    TextureAtomicAnd_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture2DArray_Int16.parameters = TextureAtomicAnd_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, Int16
    TextureAtomicAnd_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_Int16.name = TextureAtomicAnd_Texture2DArray_Int16_name;
    TextureAtomicAnd_Texture2DArray_Int16.backendIndex = 3194;
    TextureAtomicAnd_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture2DArray_Int16.parameters = TextureAtomicAnd_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, UInt32
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_UInt32.name = TextureAtomicAnd_TextureCubeArray_UInt32_name;
    TextureAtomicAnd_TextureCubeArray_UInt32.backendIndex = 3195;
    TextureAtomicAnd_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt32.parameters = TextureAtomicAnd_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, UInt32
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_UInt32.name = TextureAtomicAnd_TextureCubeArray_UInt32_name;
    TextureAtomicAnd_TextureCubeArray_UInt32.backendIndex = 3196;
    TextureAtomicAnd_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt32.parameters = TextureAtomicAnd_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, Int32
    TextureAtomicAnd_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_Int32.name = TextureAtomicAnd_TextureCubeArray_Int32_name;
    TextureAtomicAnd_TextureCubeArray_Int32.backendIndex = 3197;
    TextureAtomicAnd_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_TextureCubeArray_Int32.parameters = TextureAtomicAnd_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, Int32
    TextureAtomicAnd_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_Int32.name = TextureAtomicAnd_TextureCubeArray_Int32_name;
    TextureAtomicAnd_TextureCubeArray_Int32.backendIndex = 3198;
    TextureAtomicAnd_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_TextureCubeArray_Int32.parameters = TextureAtomicAnd_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, UInt16
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_UInt16.name = TextureAtomicAnd_TextureCubeArray_UInt16_name;
    TextureAtomicAnd_TextureCubeArray_UInt16.backendIndex = 3199;
    TextureAtomicAnd_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt16.parameters = TextureAtomicAnd_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, UInt16
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_UInt16.name = TextureAtomicAnd_TextureCubeArray_UInt16_name;
    TextureAtomicAnd_TextureCubeArray_UInt16.backendIndex = 3200;
    TextureAtomicAnd_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt16.parameters = TextureAtomicAnd_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, Int16
    TextureAtomicAnd_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_Int16.name = TextureAtomicAnd_TextureCubeArray_Int16_name;
    TextureAtomicAnd_TextureCubeArray_Int16.backendIndex = 3201;
    TextureAtomicAnd_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_TextureCubeArray_Int16.parameters = TextureAtomicAnd_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, Int16
    TextureAtomicAnd_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_Int16.name = TextureAtomicAnd_TextureCubeArray_Int16_name;
    TextureAtomicAnd_TextureCubeArray_Int16.backendIndex = 3202;
    TextureAtomicAnd_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_TextureCubeArray_Int16.parameters = TextureAtomicAnd_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture1D, Int32, UInt32
    TextureAtomicOr_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_UInt32_texture.type.modifiers = TextureAtomicOr_Texture1D_UInt32_texture_modifiers;
    TextureAtomicOr_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_UInt32.name = TextureAtomicOr_Texture1D_UInt32_name;
    TextureAtomicOr_Texture1D_UInt32.backendIndex = 3203;
    TextureAtomicOr_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture1D_UInt32.parameters = TextureAtomicOr_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->signature = "textureAtomicOr(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->name = "textureAtomicOr(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture1D, Int32, UInt32
    TextureAtomicOr_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_UInt32_texture.type.modifiers = TextureAtomicOr_Texture1D_UInt32_texture_modifiers;
    TextureAtomicOr_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_UInt32.name = TextureAtomicOr_Texture1D_UInt32_name;
    TextureAtomicOr_Texture1D_UInt32.backendIndex = 3204;
    TextureAtomicOr_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture1D_UInt32.parameters = TextureAtomicOr_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->signature = "textureAtomicOr(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->name = "textureAtomicOr(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture1D, Int32, Int32
    TextureAtomicOr_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_Int32_texture.type.modifiers = TextureAtomicOr_Texture1D_Int32_texture_modifiers;
    TextureAtomicOr_Texture1D_Int32_texture.type.modifierValues = TextureAtomicOr_Texture1D_Int32_texture_modifierValues;
    TextureAtomicOr_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_Int32.name = TextureAtomicOr_Texture1D_Int32_name;
    TextureAtomicOr_Texture1D_Int32.backendIndex = 3205;
    TextureAtomicOr_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture1D_Int32.parameters = TextureAtomicOr_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->signature = "textureAtomicOr(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->name = "textureAtomicOr(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture1D, Int32, Int32
    TextureAtomicOr_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_Int32_texture.type.modifiers = TextureAtomicOr_Texture1D_Int32_texture_modifiers;
    TextureAtomicOr_Texture1D_Int32_texture.type.modifierValues = TextureAtomicOr_Texture1D_Int32_texture_modifierValues;
    TextureAtomicOr_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_Int32.name = TextureAtomicOr_Texture1D_Int32_name;
    TextureAtomicOr_Texture1D_Int32.backendIndex = 3206;
    TextureAtomicOr_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture1D_Int32.parameters = TextureAtomicOr_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->signature = "textureAtomicOr(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->name = "textureAtomicOr(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture1D, Int32, UInt16
    TextureAtomicOr_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_UInt16_texture.type.modifiers = TextureAtomicOr_Texture1D_UInt16_texture_modifiers;
    TextureAtomicOr_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_UInt16.name = TextureAtomicOr_Texture1D_UInt16_name;
    TextureAtomicOr_Texture1D_UInt16.backendIndex = 3207;
    TextureAtomicOr_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture1D_UInt16.parameters = TextureAtomicOr_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->signature = "textureAtomicOr(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->name = "textureAtomicOr(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture1D, Int32, UInt16
    TextureAtomicOr_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_UInt16_texture.type.modifiers = TextureAtomicOr_Texture1D_UInt16_texture_modifiers;
    TextureAtomicOr_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_UInt16.name = TextureAtomicOr_Texture1D_UInt16_name;
    TextureAtomicOr_Texture1D_UInt16.backendIndex = 3208;
    TextureAtomicOr_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture1D_UInt16.parameters = TextureAtomicOr_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->signature = "textureAtomicOr(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->name = "textureAtomicOr(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture1D, Int32, Int16
    TextureAtomicOr_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_Int16_texture.type.modifiers = TextureAtomicOr_Texture1D_Int16_texture_modifiers;
    TextureAtomicOr_Texture1D_Int16_texture.type.modifierValues = TextureAtomicOr_Texture1D_Int16_texture_modifierValues;
    TextureAtomicOr_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_Int16.name = TextureAtomicOr_Texture1D_Int16_name;
    TextureAtomicOr_Texture1D_Int16.backendIndex = 3209;
    TextureAtomicOr_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture1D_Int16.parameters = TextureAtomicOr_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->signature = "textureAtomicOr(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->name = "textureAtomicOr(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture1D, Int32, Int16
    TextureAtomicOr_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_Int16_texture.type.modifiers = TextureAtomicOr_Texture1D_Int16_texture_modifiers;
    TextureAtomicOr_Texture1D_Int16_texture.type.modifierValues = TextureAtomicOr_Texture1D_Int16_texture_modifierValues;
    TextureAtomicOr_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_Int16.name = TextureAtomicOr_Texture1D_Int16_name;
    TextureAtomicOr_Texture1D_Int16.backendIndex = 3210;
    TextureAtomicOr_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture1D_Int16.parameters = TextureAtomicOr_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->signature = "textureAtomicOr(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->name = "textureAtomicOr(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture2D, Int32x2, UInt32
    TextureAtomicOr_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_UInt32_texture.type.modifiers = TextureAtomicOr_Texture2D_UInt32_texture_modifiers;
    TextureAtomicOr_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_UInt32.name = TextureAtomicOr_Texture2D_UInt32_name;
    TextureAtomicOr_Texture2D_UInt32.backendIndex = 3211;
    TextureAtomicOr_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture2D_UInt32.parameters = TextureAtomicOr_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->signature = "textureAtomicOr(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->name = "textureAtomicOr(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture2D, Int32x2, UInt32
    TextureAtomicOr_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_UInt32_texture.type.modifiers = TextureAtomicOr_Texture2D_UInt32_texture_modifiers;
    TextureAtomicOr_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_UInt32.name = TextureAtomicOr_Texture2D_UInt32_name;
    TextureAtomicOr_Texture2D_UInt32.backendIndex = 3212;
    TextureAtomicOr_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture2D_UInt32.parameters = TextureAtomicOr_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->signature = "textureAtomicOr(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->name = "textureAtomicOr(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture2D, Int32x2, Int32
    TextureAtomicOr_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_Int32_texture.type.modifiers = TextureAtomicOr_Texture2D_Int32_texture_modifiers;
    TextureAtomicOr_Texture2D_Int32_texture.type.modifierValues = TextureAtomicOr_Texture2D_Int32_texture_modifierValues;
    TextureAtomicOr_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_Int32.name = TextureAtomicOr_Texture2D_Int32_name;
    TextureAtomicOr_Texture2D_Int32.backendIndex = 3213;
    TextureAtomicOr_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture2D_Int32.parameters = TextureAtomicOr_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->signature = "textureAtomicOr(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->name = "textureAtomicOr(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture2D, Int32x2, Int32
    TextureAtomicOr_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_Int32_texture.type.modifiers = TextureAtomicOr_Texture2D_Int32_texture_modifiers;
    TextureAtomicOr_Texture2D_Int32_texture.type.modifierValues = TextureAtomicOr_Texture2D_Int32_texture_modifierValues;
    TextureAtomicOr_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_Int32.name = TextureAtomicOr_Texture2D_Int32_name;
    TextureAtomicOr_Texture2D_Int32.backendIndex = 3214;
    TextureAtomicOr_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture2D_Int32.parameters = TextureAtomicOr_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->signature = "textureAtomicOr(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->name = "textureAtomicOr(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture2D, Int32x2, UInt16
    TextureAtomicOr_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_UInt16_texture.type.modifiers = TextureAtomicOr_Texture2D_UInt16_texture_modifiers;
    TextureAtomicOr_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_UInt16.name = TextureAtomicOr_Texture2D_UInt16_name;
    TextureAtomicOr_Texture2D_UInt16.backendIndex = 3215;
    TextureAtomicOr_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture2D_UInt16.parameters = TextureAtomicOr_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->signature = "textureAtomicOr(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->name = "textureAtomicOr(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture2D, Int32x2, UInt16
    TextureAtomicOr_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_UInt16_texture.type.modifiers = TextureAtomicOr_Texture2D_UInt16_texture_modifiers;
    TextureAtomicOr_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_UInt16.name = TextureAtomicOr_Texture2D_UInt16_name;
    TextureAtomicOr_Texture2D_UInt16.backendIndex = 3216;
    TextureAtomicOr_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture2D_UInt16.parameters = TextureAtomicOr_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->signature = "textureAtomicOr(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->name = "textureAtomicOr(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture2D, Int32x2, Int16
    TextureAtomicOr_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_Int16_texture.type.modifiers = TextureAtomicOr_Texture2D_Int16_texture_modifiers;
    TextureAtomicOr_Texture2D_Int16_texture.type.modifierValues = TextureAtomicOr_Texture2D_Int16_texture_modifierValues;
    TextureAtomicOr_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_Int16.name = TextureAtomicOr_Texture2D_Int16_name;
    TextureAtomicOr_Texture2D_Int16.backendIndex = 3217;
    TextureAtomicOr_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture2D_Int16.parameters = TextureAtomicOr_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->signature = "textureAtomicOr(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->name = "textureAtomicOr(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture2D, Int32x2, Int16
    TextureAtomicOr_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_Int16_texture.type.modifiers = TextureAtomicOr_Texture2D_Int16_texture_modifiers;
    TextureAtomicOr_Texture2D_Int16_texture.type.modifierValues = TextureAtomicOr_Texture2D_Int16_texture_modifierValues;
    TextureAtomicOr_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_Int16.name = TextureAtomicOr_Texture2D_Int16_name;
    TextureAtomicOr_Texture2D_Int16.backendIndex = 3218;
    TextureAtomicOr_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture2D_Int16.parameters = TextureAtomicOr_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->signature = "textureAtomicOr(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->name = "textureAtomicOr(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture3D, Int32x3, UInt32
    TextureAtomicOr_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_UInt32_texture.type.modifiers = TextureAtomicOr_Texture3D_UInt32_texture_modifiers;
    TextureAtomicOr_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_UInt32.name = TextureAtomicOr_Texture3D_UInt32_name;
    TextureAtomicOr_Texture3D_UInt32.backendIndex = 3219;
    TextureAtomicOr_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture3D_UInt32.parameters = TextureAtomicOr_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->signature = "textureAtomicOr(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->name = "textureAtomicOr(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture3D, Int32x3, UInt32
    TextureAtomicOr_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_UInt32_texture.type.modifiers = TextureAtomicOr_Texture3D_UInt32_texture_modifiers;
    TextureAtomicOr_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_UInt32.name = TextureAtomicOr_Texture3D_UInt32_name;
    TextureAtomicOr_Texture3D_UInt32.backendIndex = 3220;
    TextureAtomicOr_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture3D_UInt32.parameters = TextureAtomicOr_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->signature = "textureAtomicOr(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->name = "textureAtomicOr(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture3D, Int32x3, Int32
    TextureAtomicOr_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_Int32_texture.type.modifiers = TextureAtomicOr_Texture3D_Int32_texture_modifiers;
    TextureAtomicOr_Texture3D_Int32_texture.type.modifierValues = TextureAtomicOr_Texture3D_Int32_texture_modifierValues;
    TextureAtomicOr_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_Int32.name = TextureAtomicOr_Texture3D_Int32_name;
    TextureAtomicOr_Texture3D_Int32.backendIndex = 3221;
    TextureAtomicOr_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture3D_Int32.parameters = TextureAtomicOr_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->signature = "textureAtomicOr(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->name = "textureAtomicOr(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture3D, Int32x3, Int32
    TextureAtomicOr_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_Int32_texture.type.modifiers = TextureAtomicOr_Texture3D_Int32_texture_modifiers;
    TextureAtomicOr_Texture3D_Int32_texture.type.modifierValues = TextureAtomicOr_Texture3D_Int32_texture_modifierValues;
    TextureAtomicOr_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_Int32.name = TextureAtomicOr_Texture3D_Int32_name;
    TextureAtomicOr_Texture3D_Int32.backendIndex = 3222;
    TextureAtomicOr_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture3D_Int32.parameters = TextureAtomicOr_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->signature = "textureAtomicOr(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->name = "textureAtomicOr(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture3D, Int32x3, UInt16
    TextureAtomicOr_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_UInt16_texture.type.modifiers = TextureAtomicOr_Texture3D_UInt16_texture_modifiers;
    TextureAtomicOr_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_UInt16.name = TextureAtomicOr_Texture3D_UInt16_name;
    TextureAtomicOr_Texture3D_UInt16.backendIndex = 3223;
    TextureAtomicOr_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture3D_UInt16.parameters = TextureAtomicOr_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->signature = "textureAtomicOr(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->name = "textureAtomicOr(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture3D, Int32x3, UInt16
    TextureAtomicOr_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_UInt16_texture.type.modifiers = TextureAtomicOr_Texture3D_UInt16_texture_modifiers;
    TextureAtomicOr_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_UInt16.name = TextureAtomicOr_Texture3D_UInt16_name;
    TextureAtomicOr_Texture3D_UInt16.backendIndex = 3224;
    TextureAtomicOr_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture3D_UInt16.parameters = TextureAtomicOr_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->signature = "textureAtomicOr(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->name = "textureAtomicOr(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture3D, Int32x3, Int16
    TextureAtomicOr_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_Int16_texture.type.modifiers = TextureAtomicOr_Texture3D_Int16_texture_modifiers;
    TextureAtomicOr_Texture3D_Int16_texture.type.modifierValues = TextureAtomicOr_Texture3D_Int16_texture_modifierValues;
    TextureAtomicOr_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_Int16.name = TextureAtomicOr_Texture3D_Int16_name;
    TextureAtomicOr_Texture3D_Int16.backendIndex = 3225;
    TextureAtomicOr_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture3D_Int16.parameters = TextureAtomicOr_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->signature = "textureAtomicOr(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->name = "textureAtomicOr(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture3D, Int32x3, Int16
    TextureAtomicOr_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_Int16_texture.type.modifiers = TextureAtomicOr_Texture3D_Int16_texture_modifiers;
    TextureAtomicOr_Texture3D_Int16_texture.type.modifierValues = TextureAtomicOr_Texture3D_Int16_texture_modifierValues;
    TextureAtomicOr_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_Int16.name = TextureAtomicOr_Texture3D_Int16_name;
    TextureAtomicOr_Texture3D_Int16.backendIndex = 3226;
    TextureAtomicOr_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture3D_Int16.parameters = TextureAtomicOr_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->signature = "textureAtomicOr(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->name = "textureAtomicOr(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with TextureCube, Int32x3, UInt32
    TextureAtomicOr_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_UInt32_texture.type.modifiers = TextureAtomicOr_TextureCube_UInt32_texture_modifiers;
    TextureAtomicOr_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicOr_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicOr_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicOr_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_UInt32.name = TextureAtomicOr_TextureCube_UInt32_name;
    TextureAtomicOr_TextureCube_UInt32.backendIndex = 3227;
    TextureAtomicOr_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_TextureCube_UInt32.parameters = TextureAtomicOr_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->signature = "textureAtomicOr(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->name = "textureAtomicOr(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with TextureCube, Int32x3, UInt32
    TextureAtomicOr_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_UInt32_texture.type.modifiers = TextureAtomicOr_TextureCube_UInt32_texture_modifiers;
    TextureAtomicOr_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicOr_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicOr_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicOr_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_UInt32.name = TextureAtomicOr_TextureCube_UInt32_name;
    TextureAtomicOr_TextureCube_UInt32.backendIndex = 3228;
    TextureAtomicOr_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_TextureCube_UInt32.parameters = TextureAtomicOr_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->signature = "textureAtomicOr(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->name = "textureAtomicOr(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with TextureCube, Int32x3, Int32
    TextureAtomicOr_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_Int32_texture.type.modifiers = TextureAtomicOr_TextureCube_Int32_texture_modifiers;
    TextureAtomicOr_TextureCube_Int32_texture.type.modifierValues = TextureAtomicOr_TextureCube_Int32_texture_modifierValues;
    TextureAtomicOr_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicOr_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_Int32.name = TextureAtomicOr_TextureCube_Int32_name;
    TextureAtomicOr_TextureCube_Int32.backendIndex = 3229;
    TextureAtomicOr_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_TextureCube_Int32.parameters = TextureAtomicOr_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->signature = "textureAtomicOr(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->name = "textureAtomicOr(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with TextureCube, Int32x3, Int32
    TextureAtomicOr_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_Int32_texture.type.modifiers = TextureAtomicOr_TextureCube_Int32_texture_modifiers;
    TextureAtomicOr_TextureCube_Int32_texture.type.modifierValues = TextureAtomicOr_TextureCube_Int32_texture_modifierValues;
    TextureAtomicOr_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicOr_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_Int32.name = TextureAtomicOr_TextureCube_Int32_name;
    TextureAtomicOr_TextureCube_Int32.backendIndex = 3230;
    TextureAtomicOr_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_TextureCube_Int32.parameters = TextureAtomicOr_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->signature = "textureAtomicOr(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->name = "textureAtomicOr(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with TextureCube, Int32x3, UInt16
    TextureAtomicOr_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_UInt16_texture.type.modifiers = TextureAtomicOr_TextureCube_UInt16_texture_modifiers;
    TextureAtomicOr_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicOr_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicOr_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicOr_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_UInt16.name = TextureAtomicOr_TextureCube_UInt16_name;
    TextureAtomicOr_TextureCube_UInt16.backendIndex = 3231;
    TextureAtomicOr_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_TextureCube_UInt16.parameters = TextureAtomicOr_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->signature = "textureAtomicOr(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->name = "textureAtomicOr(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with TextureCube, Int32x3, UInt16
    TextureAtomicOr_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_UInt16_texture.type.modifiers = TextureAtomicOr_TextureCube_UInt16_texture_modifiers;
    TextureAtomicOr_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicOr_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicOr_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicOr_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_UInt16.name = TextureAtomicOr_TextureCube_UInt16_name;
    TextureAtomicOr_TextureCube_UInt16.backendIndex = 3232;
    TextureAtomicOr_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_TextureCube_UInt16.parameters = TextureAtomicOr_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->signature = "textureAtomicOr(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->name = "textureAtomicOr(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with TextureCube, Int32x3, Int16
    TextureAtomicOr_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_Int16_texture.type.modifiers = TextureAtomicOr_TextureCube_Int16_texture_modifiers;
    TextureAtomicOr_TextureCube_Int16_texture.type.modifierValues = TextureAtomicOr_TextureCube_Int16_texture_modifierValues;
    TextureAtomicOr_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicOr_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_Int16.name = TextureAtomicOr_TextureCube_Int16_name;
    TextureAtomicOr_TextureCube_Int16.backendIndex = 3233;
    TextureAtomicOr_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_TextureCube_Int16.parameters = TextureAtomicOr_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->signature = "textureAtomicOr(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->name = "textureAtomicOr(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with TextureCube, Int32x3, Int16
    TextureAtomicOr_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_Int16_texture.type.modifiers = TextureAtomicOr_TextureCube_Int16_texture_modifiers;
    TextureAtomicOr_TextureCube_Int16_texture.type.modifierValues = TextureAtomicOr_TextureCube_Int16_texture_modifierValues;
    TextureAtomicOr_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicOr_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_Int16.name = TextureAtomicOr_TextureCube_Int16_name;
    TextureAtomicOr_TextureCube_Int16.backendIndex = 3234;
    TextureAtomicOr_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_TextureCube_Int16.parameters = TextureAtomicOr_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->signature = "textureAtomicOr(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->name = "textureAtomicOr(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture1DArray, Int32x2, UInt32
    TextureAtomicOr_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicOr_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicOr_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicOr_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1DArray_UInt32.name = TextureAtomicOr_Texture1DArray_UInt32_name;
    TextureAtomicOr_Texture1DArray_UInt32.backendIndex = 3235;
    TextureAtomicOr_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture1DArray_UInt32.parameters = TextureAtomicOr_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->signature = "textureAtomicOr(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->name = "textureAtomicOr(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture1DArray, Int32x2, UInt32
    TextureAtomicOr_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicOr_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicOr_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicOr_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1DArray_UInt32.name = TextureAtomicOr_Texture1DArray_UInt32_name;
    TextureAtomicOr_Texture1DArray_UInt32.backendIndex = 3236;
    TextureAtomicOr_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture1DArray_UInt32.parameters = TextureAtomicOr_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->signature = "textureAtomicOr(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->name = "textureAtomicOr(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture1DArray, Int32x2, Int32
    TextureAtomicOr_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicOr_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicOr_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicOr_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicOr_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicOr_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1DArray_Int32.name = TextureAtomicOr_Texture1DArray_Int32_name;
    TextureAtomicOr_Texture1DArray_Int32.backendIndex = 3237;
    TextureAtomicOr_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture1DArray_Int32.parameters = TextureAtomicOr_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->signature = "textureAtomicOr(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->name = "textureAtomicOr(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture1DArray, Int32x2, Int32
    TextureAtomicOr_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicOr_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicOr_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicOr_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicOr_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicOr_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1DArray_Int32.name = TextureAtomicOr_Texture1DArray_Int32_name;
    TextureAtomicOr_Texture1DArray_Int32.backendIndex = 3238;
    TextureAtomicOr_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture1DArray_Int32.parameters = TextureAtomicOr_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->signature = "textureAtomicOr(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->name = "textureAtomicOr(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture1DArray, Int32x2, UInt16
    TextureAtomicOr_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicOr_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicOr_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicOr_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1DArray_UInt16.name = TextureAtomicOr_Texture1DArray_UInt16_name;
    TextureAtomicOr_Texture1DArray_UInt16.backendIndex = 3239;
    TextureAtomicOr_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture1DArray_UInt16.parameters = TextureAtomicOr_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16)->signature = "textureAtomicOr(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16)->name = "textureAtomicOr(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture1DArray, Int32x2, UInt16
    TextureAtomicOr_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicOr_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicOr_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicOr_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1DArray_UInt16.name = TextureAtomicOr_Texture1DArray_UInt16_name;
    TextureAtomicOr_Texture1DArray_UInt16.backendIndex = 3240;
    TextureAtomicOr_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture1DArray_UInt16.parameters = TextureAtomicOr_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16)->signature = "textureAtomicOr(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16)->name = "textureAtomicOr(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

}
} // namespace GPULang
