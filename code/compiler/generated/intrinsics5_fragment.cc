//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// reflect with Float16x2, Float16x2
Variable reflect_Float16x2_incident;
Variable reflect_Float16x2_normal;
Function reflect_Float16x2;
inline constexpr std::array reflect_Float16x2_args = { &reflect_Float16x2_incident, &reflect_Float16x2_normal };

/// reflect with Float16x3, Float16x3
Variable reflect_Float16x3_incident;
Variable reflect_Float16x3_normal;
Function reflect_Float16x3;
inline constexpr std::array reflect_Float16x3_args = { &reflect_Float16x3_incident, &reflect_Float16x3_normal };

/// reflect with Float16x4, Float16x4
Variable reflect_Float16x4_incident;
Variable reflect_Float16x4_normal;
Function reflect_Float16x4;
inline constexpr std::array reflect_Float16x4_args = { &reflect_Float16x4_incident, &reflect_Float16x4_normal };

/// refract with Float32x2, Float32x2, Float32x2
Variable refract_Float32x2_incident;
Variable refract_Float32x2_normal;
Variable refract_Float32x2_ior;
Function refract_Float32x2;
inline constexpr std::array refract_Float32x2_args = { &refract_Float32x2_incident, &refract_Float32x2_normal, &refract_Float32x2_ior };

/// refract with Float32x3, Float32x3, Float32x3
Variable refract_Float32x3_incident;
Variable refract_Float32x3_normal;
Variable refract_Float32x3_ior;
Function refract_Float32x3;
inline constexpr std::array refract_Float32x3_args = { &refract_Float32x3_incident, &refract_Float32x3_normal, &refract_Float32x3_ior };

/// refract with Float32x4, Float32x4, Float32x4
Variable refract_Float32x4_incident;
Variable refract_Float32x4_normal;
Variable refract_Float32x4_ior;
Function refract_Float32x4;
inline constexpr std::array refract_Float32x4_args = { &refract_Float32x4_incident, &refract_Float32x4_normal, &refract_Float32x4_ior };

/// refract with Float16x2, Float16x2, Float16x2
Variable refract_Float16x2_incident;
Variable refract_Float16x2_normal;
Variable refract_Float16x2_ior;
Function refract_Float16x2;
inline constexpr std::array refract_Float16x2_args = { &refract_Float16x2_incident, &refract_Float16x2_normal, &refract_Float16x2_ior };

/// refract with Float16x3, Float16x3, Float16x3
Variable refract_Float16x3_incident;
Variable refract_Float16x3_normal;
Variable refract_Float16x3_ior;
Function refract_Float16x3;
inline constexpr std::array refract_Float16x3_args = { &refract_Float16x3_incident, &refract_Float16x3_normal, &refract_Float16x3_ior };

/// refract with Float16x4, Float16x4, Float16x4
Variable refract_Float16x4_incident;
Variable refract_Float16x4_normal;
Variable refract_Float16x4_ior;
Function refract_Float16x4;
inline constexpr std::array refract_Float16x4_args = { &refract_Float16x4_incident, &refract_Float16x4_normal, &refract_Float16x4_ior };

/// cross with Float32x3, Float32x3
Variable cross_Float32x3_v0;
Variable cross_Float32x3_v1;
Function cross_Float32x3;
inline constexpr std::array cross_Float32x3_args = { &cross_Float32x3_v0, &cross_Float32x3_v1 };

/// cross with Float16x3, Float16x3
Variable cross_Float16x3_v0;
Variable cross_Float16x3_v1;
Function cross_Float16x3;
inline constexpr std::array cross_Float16x3_args = { &cross_Float16x3_v0, &cross_Float16x3_v1 };

/// length with Float32x2
Variable length_Float32x2_arg;
Function length_Float32x2;
inline constexpr std::array length_Float32x2_args = { &length_Float32x2_arg };

/// length with Float32x3
Variable length_Float32x3_arg;
Function length_Float32x3;
inline constexpr std::array length_Float32x3_args = { &length_Float32x3_arg };

/// length with Float32x4
Variable length_Float32x4_arg;
Function length_Float32x4;
inline constexpr std::array length_Float32x4_args = { &length_Float32x4_arg };

/// length with Float16x2
Variable length_Float16x2_arg;
Function length_Float16x2;
inline constexpr std::array length_Float16x2_args = { &length_Float16x2_arg };

/// length with Float16x3
Variable length_Float16x3_arg;
Function length_Float16x3;
inline constexpr std::array length_Float16x3_args = { &length_Float16x3_arg };

/// length with Float16x4
Variable length_Float16x4_arg;
Function length_Float16x4;
inline constexpr std::array length_Float16x4_args = { &length_Float16x4_arg };

/// normalize with Float32x2
Variable normalize_Float32x2_arg;
Function normalize_Float32x2;
inline constexpr std::array normalize_Float32x2_args = { &normalize_Float32x2_arg };

/// normalize with Float32x3
Variable normalize_Float32x3_arg;
Function normalize_Float32x3;
inline constexpr std::array normalize_Float32x3_args = { &normalize_Float32x3_arg };

/// normalize with Float32x4
Variable normalize_Float32x4_arg;
Function normalize_Float32x4;
inline constexpr std::array normalize_Float32x4_args = { &normalize_Float32x4_arg };

/// normalize with Float16x2
Variable normalize_Float16x2_arg;
Function normalize_Float16x2;
inline constexpr std::array normalize_Float16x2_args = { &normalize_Float16x2_arg };

/// normalize with Float16x3
Variable normalize_Float16x3_arg;
Function normalize_Float16x3;
inline constexpr std::array normalize_Float16x3_args = { &normalize_Float16x3_arg };

/// normalize with Float16x4
Variable normalize_Float16x4_arg;
Function normalize_Float16x4;
inline constexpr std::array normalize_Float16x4_args = { &normalize_Float16x4_arg };

/// distance with Float32x2, Float32x2
Variable distance_Float32x2_p0;
Variable distance_Float32x2_p1;
Function distance_Float32x2;
inline constexpr std::array distance_Float32x2_args = { &distance_Float32x2_p0, &distance_Float32x2_p1 };

/// distance with Float32x3, Float32x3
Variable distance_Float32x3_p0;
Variable distance_Float32x3_p1;
Function distance_Float32x3;
inline constexpr std::array distance_Float32x3_args = { &distance_Float32x3_p0, &distance_Float32x3_p1 };

/// distance with Float32x4, Float32x4
Variable distance_Float32x4_p0;
Variable distance_Float32x4_p1;
Function distance_Float32x4;
inline constexpr std::array distance_Float32x4_args = { &distance_Float32x4_p0, &distance_Float32x4_p1 };

/// distance with Float16x2, Float16x2
Variable distance_Float16x2_p0;
Variable distance_Float16x2_p1;
Function distance_Float16x2;
inline constexpr std::array distance_Float16x2_args = { &distance_Float16x2_p0, &distance_Float16x2_p1 };

/// distance with Float16x3, Float16x3
Variable distance_Float16x3_p0;
Variable distance_Float16x3_p1;
Function distance_Float16x3;
inline constexpr std::array distance_Float16x3_args = { &distance_Float16x3_p0, &distance_Float16x3_p1 };

/// distance with Float16x4, Float16x4
Variable distance_Float16x4_p0;
Variable distance_Float16x4_p1;
Function distance_Float16x4;
inline constexpr std::array distance_Float16x4_args = { &distance_Float16x4_p0, &distance_Float16x4_p1 };

/// min with Float32, Float32
Variable min_Float32_x;
Variable min_Float32_y;
Function min_Float32;
inline constexpr std::array min_Float32_args = { &min_Float32_x, &min_Float32_y };

/// min with Float32x2, Float32x2
Variable min_Float32x2_x;
Variable min_Float32x2_y;
Function min_Float32x2;
inline constexpr std::array min_Float32x2_args = { &min_Float32x2_x, &min_Float32x2_y };

/// min with Float32x3, Float32x3
Variable min_Float32x3_x;
Variable min_Float32x3_y;
Function min_Float32x3;
inline constexpr std::array min_Float32x3_args = { &min_Float32x3_x, &min_Float32x3_y };

/// min with Float32x4, Float32x4
Variable min_Float32x4_x;
Variable min_Float32x4_y;
Function min_Float32x4;
inline constexpr std::array min_Float32x4_args = { &min_Float32x4_x, &min_Float32x4_y };

/// min with Float16, Float16
Variable min_Float16_x;
Variable min_Float16_y;
Function min_Float16;
inline constexpr std::array min_Float16_args = { &min_Float16_x, &min_Float16_y };

/// min with Float16x2, Float16x2
Variable min_Float16x2_x;
Variable min_Float16x2_y;
Function min_Float16x2;
inline constexpr std::array min_Float16x2_args = { &min_Float16x2_x, &min_Float16x2_y };

/// min with Float16x3, Float16x3
Variable min_Float16x3_x;
Variable min_Float16x3_y;
Function min_Float16x3;
inline constexpr std::array min_Float16x3_args = { &min_Float16x3_x, &min_Float16x3_y };

/// min with Float16x4, Float16x4
Variable min_Float16x4_x;
Variable min_Float16x4_y;
Function min_Float16x4;
inline constexpr std::array min_Float16x4_args = { &min_Float16x4_x, &min_Float16x4_y };

/// min with Int32, Int32
Variable min_Int32_x;
Variable min_Int32_y;
Function min_Int32;
inline constexpr std::array min_Int32_args = { &min_Int32_x, &min_Int32_y };

/// min with Int32x2, Int32x2
Variable min_Int32x2_x;
Variable min_Int32x2_y;
Function min_Int32x2;
inline constexpr std::array min_Int32x2_args = { &min_Int32x2_x, &min_Int32x2_y };

/// min with Int32x3, Int32x3
Variable min_Int32x3_x;
Variable min_Int32x3_y;
Function min_Int32x3;
inline constexpr std::array min_Int32x3_args = { &min_Int32x3_x, &min_Int32x3_y };

/// min with Int32x4, Int32x4
Variable min_Int32x4_x;
Variable min_Int32x4_y;
Function min_Int32x4;
inline constexpr std::array min_Int32x4_args = { &min_Int32x4_x, &min_Int32x4_y };

/// min with Int16, Int16
Variable min_Int16_x;
Variable min_Int16_y;
Function min_Int16;
inline constexpr std::array min_Int16_args = { &min_Int16_x, &min_Int16_y };

/// min with Int16x2, Int16x2
Variable min_Int16x2_x;
Variable min_Int16x2_y;
Function min_Int16x2;
inline constexpr std::array min_Int16x2_args = { &min_Int16x2_x, &min_Int16x2_y };

/// min with Int16x3, Int16x3
Variable min_Int16x3_x;
Variable min_Int16x3_y;
Function min_Int16x3;
inline constexpr std::array min_Int16x3_args = { &min_Int16x3_x, &min_Int16x3_y };

/// min with Int16x4, Int16x4
Variable min_Int16x4_x;
Variable min_Int16x4_y;
Function min_Int16x4;
inline constexpr std::array min_Int16x4_args = { &min_Int16x4_x, &min_Int16x4_y };

/// min with UInt32, UInt32
Variable min_UInt32_x;
Variable min_UInt32_y;
Function min_UInt32;
inline constexpr std::array min_UInt32_args = { &min_UInt32_x, &min_UInt32_y };

/// min with UInt32x2, UInt32x2
Variable min_UInt32x2_x;
Variable min_UInt32x2_y;
Function min_UInt32x2;
inline constexpr std::array min_UInt32x2_args = { &min_UInt32x2_x, &min_UInt32x2_y };

/// min with UInt32x3, UInt32x3
Variable min_UInt32x3_x;
Variable min_UInt32x3_y;
Function min_UInt32x3;
inline constexpr std::array min_UInt32x3_args = { &min_UInt32x3_x, &min_UInt32x3_y };

/// min with UInt32x4, UInt32x4
Variable min_UInt32x4_x;
Variable min_UInt32x4_y;
Function min_UInt32x4;
inline constexpr std::array min_UInt32x4_args = { &min_UInt32x4_x, &min_UInt32x4_y };

/// min with UInt16, UInt16
Variable min_UInt16_x;
Variable min_UInt16_y;
Function min_UInt16;
inline constexpr std::array min_UInt16_args = { &min_UInt16_x, &min_UInt16_y };

/// min with UInt16x2, UInt16x2
Variable min_UInt16x2_x;
Variable min_UInt16x2_y;
Function min_UInt16x2;
inline constexpr std::array min_UInt16x2_args = { &min_UInt16x2_x, &min_UInt16x2_y };

/// min with UInt16x3, UInt16x3
Variable min_UInt16x3_x;
Variable min_UInt16x3_y;
Function min_UInt16x3;
inline constexpr std::array min_UInt16x3_args = { &min_UInt16x3_x, &min_UInt16x3_y };

/// min with UInt16x4, UInt16x4
Variable min_UInt16x4_x;
Variable min_UInt16x4_y;
Function min_UInt16x4;
inline constexpr std::array min_UInt16x4_args = { &min_UInt16x4_x, &min_UInt16x4_y };

/// max with Float32, Float32
Variable max_Float32_x;
Variable max_Float32_y;
Function max_Float32;
inline constexpr std::array max_Float32_args = { &max_Float32_x, &max_Float32_y };

/// max with Float32x2, Float32x2
Variable max_Float32x2_x;
Variable max_Float32x2_y;
Function max_Float32x2;
inline constexpr std::array max_Float32x2_args = { &max_Float32x2_x, &max_Float32x2_y };

/// max with Float32x3, Float32x3
Variable max_Float32x3_x;
Variable max_Float32x3_y;
Function max_Float32x3;
inline constexpr std::array max_Float32x3_args = { &max_Float32x3_x, &max_Float32x3_y };

/// max with Float32x4, Float32x4
Variable max_Float32x4_x;
Variable max_Float32x4_y;
Function max_Float32x4;
inline constexpr std::array max_Float32x4_args = { &max_Float32x4_x, &max_Float32x4_y };

/// max with Float16, Float16
Variable max_Float16_x;
Variable max_Float16_y;
Function max_Float16;
inline constexpr std::array max_Float16_args = { &max_Float16_x, &max_Float16_y };

/// max with Float16x2, Float16x2
Variable max_Float16x2_x;
Variable max_Float16x2_y;
Function max_Float16x2;
inline constexpr std::array max_Float16x2_args = { &max_Float16x2_x, &max_Float16x2_y };

/// max with Float16x3, Float16x3
Variable max_Float16x3_x;
Variable max_Float16x3_y;
Function max_Float16x3;
inline constexpr std::array max_Float16x3_args = { &max_Float16x3_x, &max_Float16x3_y };

/// max with Float16x4, Float16x4
Variable max_Float16x4_x;
Variable max_Float16x4_y;
Function max_Float16x4;
inline constexpr std::array max_Float16x4_args = { &max_Float16x4_x, &max_Float16x4_y };

/// max with Int32, Int32
Variable max_Int32_x;
Variable max_Int32_y;
Function max_Int32;
inline constexpr std::array max_Int32_args = { &max_Int32_x, &max_Int32_y };

/// max with Int32x2, Int32x2
Variable max_Int32x2_x;
Variable max_Int32x2_y;
Function max_Int32x2;
inline constexpr std::array max_Int32x2_args = { &max_Int32x2_x, &max_Int32x2_y };

/// max with Int32x3, Int32x3
Variable max_Int32x3_x;
Variable max_Int32x3_y;
Function max_Int32x3;
inline constexpr std::array max_Int32x3_args = { &max_Int32x3_x, &max_Int32x3_y };

/// max with Int32x4, Int32x4
Variable max_Int32x4_x;
Variable max_Int32x4_y;
Function max_Int32x4;
inline constexpr std::array max_Int32x4_args = { &max_Int32x4_x, &max_Int32x4_y };

/// max with Int16, Int16
Variable max_Int16_x;
Variable max_Int16_y;
Function max_Int16;
inline constexpr std::array max_Int16_args = { &max_Int16_x, &max_Int16_y };

/// max with Int16x2, Int16x2
Variable max_Int16x2_x;
Variable max_Int16x2_y;
Function max_Int16x2;
inline constexpr std::array max_Int16x2_args = { &max_Int16x2_x, &max_Int16x2_y };

/// max with Int16x3, Int16x3
Variable max_Int16x3_x;
Variable max_Int16x3_y;
Function max_Int16x3;
inline constexpr std::array max_Int16x3_args = { &max_Int16x3_x, &max_Int16x3_y };

/// max with Int16x4, Int16x4
Variable max_Int16x4_x;
Variable max_Int16x4_y;
Function max_Int16x4;
inline constexpr std::array max_Int16x4_args = { &max_Int16x4_x, &max_Int16x4_y };

/// max with UInt32, UInt32
Variable max_UInt32_x;
Variable max_UInt32_y;
Function max_UInt32;
inline constexpr std::array max_UInt32_args = { &max_UInt32_x, &max_UInt32_y };

/// max with UInt32x2, UInt32x2
Variable max_UInt32x2_x;
Variable max_UInt32x2_y;
Function max_UInt32x2;
inline constexpr std::array max_UInt32x2_args = { &max_UInt32x2_x, &max_UInt32x2_y };

/// max with UInt32x3, UInt32x3
Variable max_UInt32x3_x;
Variable max_UInt32x3_y;
Function max_UInt32x3;
inline constexpr std::array max_UInt32x3_args = { &max_UInt32x3_x, &max_UInt32x3_y };

/// max with UInt32x4, UInt32x4
Variable max_UInt32x4_x;
Variable max_UInt32x4_y;
Function max_UInt32x4;
inline constexpr std::array max_UInt32x4_args = { &max_UInt32x4_x, &max_UInt32x4_y };

/// max with UInt16, UInt16
Variable max_UInt16_x;
Variable max_UInt16_y;
Function max_UInt16;
inline constexpr std::array max_UInt16_args = { &max_UInt16_x, &max_UInt16_y };

/// max with UInt16x2, UInt16x2
Variable max_UInt16x2_x;
Variable max_UInt16x2_y;
Function max_UInt16x2;
inline constexpr std::array max_UInt16x2_args = { &max_UInt16x2_x, &max_UInt16x2_y };

/// max with UInt16x3, UInt16x3
Variable max_UInt16x3_x;
Variable max_UInt16x3_y;
Function max_UInt16x3;
inline constexpr std::array max_UInt16x3_args = { &max_UInt16x3_x, &max_UInt16x3_y };

/// max with UInt16x4, UInt16x4
Variable max_UInt16x4_x;
Variable max_UInt16x4_y;
Function max_UInt16x4;
inline constexpr std::array max_UInt16x4_args = { &max_UInt16x4_x, &max_UInt16x4_y };

/// clamp with Float32, Float32, Float32
Variable clamp_Float32_val;
Variable clamp_Float32_min;
Variable clamp_Float32_max;
Function clamp_Float32;
inline constexpr std::array clamp_Float32_args = { &clamp_Float32_val, &clamp_Float32_min, &clamp_Float32_max };

/// clamp with Float32x2, Float32x2, Float32x2
Variable clamp_Float32x2_val;
Variable clamp_Float32x2_min;
Variable clamp_Float32x2_max;
Function clamp_Float32x2;
inline constexpr std::array clamp_Float32x2_args = { &clamp_Float32x2_val, &clamp_Float32x2_min, &clamp_Float32x2_max };

/// clamp with Float32x3, Float32x3, Float32x3
Variable clamp_Float32x3_val;
Variable clamp_Float32x3_min;
Variable clamp_Float32x3_max;
Function clamp_Float32x3;
inline constexpr std::array clamp_Float32x3_args = { &clamp_Float32x3_val, &clamp_Float32x3_min, &clamp_Float32x3_max };

/// clamp with Float32x4, Float32x4, Float32x4
Variable clamp_Float32x4_val;
Variable clamp_Float32x4_min;
Variable clamp_Float32x4_max;
Function clamp_Float32x4;
inline constexpr std::array clamp_Float32x4_args = { &clamp_Float32x4_val, &clamp_Float32x4_min, &clamp_Float32x4_max };

/// clamp with Float16, Float16, Float16
Variable clamp_Float16_val;
Variable clamp_Float16_min;
Variable clamp_Float16_max;
Function clamp_Float16;
inline constexpr std::array clamp_Float16_args = { &clamp_Float16_val, &clamp_Float16_min, &clamp_Float16_max };

/// clamp with Float16x2, Float16x2, Float16x2
Variable clamp_Float16x2_val;
Variable clamp_Float16x2_min;
Variable clamp_Float16x2_max;
Function clamp_Float16x2;
inline constexpr std::array clamp_Float16x2_args = { &clamp_Float16x2_val, &clamp_Float16x2_min, &clamp_Float16x2_max };

/// clamp with Float16x3, Float16x3, Float16x3
Variable clamp_Float16x3_val;
Variable clamp_Float16x3_min;
Variable clamp_Float16x3_max;
Function clamp_Float16x3;
inline constexpr std::array clamp_Float16x3_args = { &clamp_Float16x3_val, &clamp_Float16x3_min, &clamp_Float16x3_max };

/// clamp with Float16x4, Float16x4, Float16x4
Variable clamp_Float16x4_val;
Variable clamp_Float16x4_min;
Variable clamp_Float16x4_max;
Function clamp_Float16x4;
inline constexpr std::array clamp_Float16x4_args = { &clamp_Float16x4_val, &clamp_Float16x4_min, &clamp_Float16x4_max };

/// clamp with Int32, Int32, Int32
Variable clamp_Int32_val;
Variable clamp_Int32_min;
Variable clamp_Int32_max;
Function clamp_Int32;
inline constexpr std::array clamp_Int32_args = { &clamp_Int32_val, &clamp_Int32_min, &clamp_Int32_max };

/// clamp with Int32x2, Int32x2, Int32x2
Variable clamp_Int32x2_val;
Variable clamp_Int32x2_min;
Variable clamp_Int32x2_max;
Function clamp_Int32x2;
inline constexpr std::array clamp_Int32x2_args = { &clamp_Int32x2_val, &clamp_Int32x2_min, &clamp_Int32x2_max };

/// clamp with Int32x3, Int32x3, Int32x3
Variable clamp_Int32x3_val;
Variable clamp_Int32x3_min;
Variable clamp_Int32x3_max;
Function clamp_Int32x3;
inline constexpr std::array clamp_Int32x3_args = { &clamp_Int32x3_val, &clamp_Int32x3_min, &clamp_Int32x3_max };

/// clamp with Int32x4, Int32x4, Int32x4
Variable clamp_Int32x4_val;
Variable clamp_Int32x4_min;
Variable clamp_Int32x4_max;
Function clamp_Int32x4;
inline constexpr std::array clamp_Int32x4_args = { &clamp_Int32x4_val, &clamp_Int32x4_min, &clamp_Int32x4_max };

/// clamp with Int16, Int16, Int16
Variable clamp_Int16_val;
Variable clamp_Int16_min;
Variable clamp_Int16_max;
Function clamp_Int16;
inline constexpr std::array clamp_Int16_args = { &clamp_Int16_val, &clamp_Int16_min, &clamp_Int16_max };

/// clamp with Int16x2, Int16x2, Int16x2
Variable clamp_Int16x2_val;
Variable clamp_Int16x2_min;
Variable clamp_Int16x2_max;
Function clamp_Int16x2;
inline constexpr std::array clamp_Int16x2_args = { &clamp_Int16x2_val, &clamp_Int16x2_min, &clamp_Int16x2_max };

/// clamp with Int16x3, Int16x3, Int16x3
Variable clamp_Int16x3_val;
Variable clamp_Int16x3_min;
Variable clamp_Int16x3_max;
Function clamp_Int16x3;
inline constexpr std::array clamp_Int16x3_args = { &clamp_Int16x3_val, &clamp_Int16x3_min, &clamp_Int16x3_max };

/// clamp with Int16x4, Int16x4, Int16x4
Variable clamp_Int16x4_val;
Variable clamp_Int16x4_min;
Variable clamp_Int16x4_max;
Function clamp_Int16x4;
inline constexpr std::array clamp_Int16x4_args = { &clamp_Int16x4_val, &clamp_Int16x4_min, &clamp_Int16x4_max };

/// clamp with UInt32, UInt32, UInt32
Variable clamp_UInt32_val;
Variable clamp_UInt32_min;
Variable clamp_UInt32_max;
Function clamp_UInt32;
inline constexpr std::array clamp_UInt32_args = { &clamp_UInt32_val, &clamp_UInt32_min, &clamp_UInt32_max };

/// clamp with UInt32x2, UInt32x2, UInt32x2
Variable clamp_UInt32x2_val;
Variable clamp_UInt32x2_min;
Variable clamp_UInt32x2_max;
Function clamp_UInt32x2;
inline constexpr std::array clamp_UInt32x2_args = { &clamp_UInt32x2_val, &clamp_UInt32x2_min, &clamp_UInt32x2_max };

/// clamp with UInt32x3, UInt32x3, UInt32x3
Variable clamp_UInt32x3_val;
Variable clamp_UInt32x3_min;
Variable clamp_UInt32x3_max;
Function clamp_UInt32x3;
inline constexpr std::array clamp_UInt32x3_args = { &clamp_UInt32x3_val, &clamp_UInt32x3_min, &clamp_UInt32x3_max };

/// clamp with UInt32x4, UInt32x4, UInt32x4
Variable clamp_UInt32x4_val;
Variable clamp_UInt32x4_min;
Variable clamp_UInt32x4_max;
Function clamp_UInt32x4;
inline constexpr std::array clamp_UInt32x4_args = { &clamp_UInt32x4_val, &clamp_UInt32x4_min, &clamp_UInt32x4_max };

/// clamp with UInt16, UInt16, UInt16
Variable clamp_UInt16_val;
Variable clamp_UInt16_min;
Variable clamp_UInt16_max;
Function clamp_UInt16;
inline constexpr std::array clamp_UInt16_args = { &clamp_UInt16_val, &clamp_UInt16_min, &clamp_UInt16_max };

/// clamp with UInt16x2, UInt16x2, UInt16x2
Variable clamp_UInt16x2_val;
Variable clamp_UInt16x2_min;
Variable clamp_UInt16x2_max;
Function clamp_UInt16x2;
inline constexpr std::array clamp_UInt16x2_args = { &clamp_UInt16x2_val, &clamp_UInt16x2_min, &clamp_UInt16x2_max };

/// clamp with UInt16x3, UInt16x3, UInt16x3
Variable clamp_UInt16x3_val;
Variable clamp_UInt16x3_min;
Variable clamp_UInt16x3_max;
Function clamp_UInt16x3;
inline constexpr std::array clamp_UInt16x3_args = { &clamp_UInt16x3_val, &clamp_UInt16x3_min, &clamp_UInt16x3_max };

/// clamp with UInt16x4, UInt16x4, UInt16x4
Variable clamp_UInt16x4_val;
Variable clamp_UInt16x4_min;
Variable clamp_UInt16x4_max;
Function clamp_UInt16x4;
inline constexpr std::array clamp_UInt16x4_args = { &clamp_UInt16x4_val, &clamp_UInt16x4_min, &clamp_UInt16x4_max };

/// lerp with Float32, Float32, Float32
Variable lerp_Float32_a;
Variable lerp_Float32_b;
Variable lerp_Float32_t;
Function lerp_Float32;
inline constexpr std::array lerp_Float32_args = { &lerp_Float32_a, &lerp_Float32_b, &lerp_Float32_t };

/// lerp with Float32x2, Float32x2, Float32x2
Variable lerp_Float32x2_a;
Variable lerp_Float32x2_b;
Variable lerp_Float32x2_t;
Function lerp_Float32x2;
inline constexpr std::array lerp_Float32x2_args = { &lerp_Float32x2_a, &lerp_Float32x2_b, &lerp_Float32x2_t };

/// lerp with Float32x3, Float32x3, Float32x3
Variable lerp_Float32x3_a;
Variable lerp_Float32x3_b;
Variable lerp_Float32x3_t;
Function lerp_Float32x3;
inline constexpr std::array lerp_Float32x3_args = { &lerp_Float32x3_a, &lerp_Float32x3_b, &lerp_Float32x3_t };

/// lerp with Float32x4, Float32x4, Float32x4
Variable lerp_Float32x4_a;
Variable lerp_Float32x4_b;
Variable lerp_Float32x4_t;
Function lerp_Float32x4;
inline constexpr std::array lerp_Float32x4_args = { &lerp_Float32x4_a, &lerp_Float32x4_b, &lerp_Float32x4_t };

/// lerp with Float16, Float16, Float16
Variable lerp_Float16_a;
Variable lerp_Float16_b;
Variable lerp_Float16_t;
Function lerp_Float16;
inline constexpr std::array lerp_Float16_args = { &lerp_Float16_a, &lerp_Float16_b, &lerp_Float16_t };

/// lerp with Float16x2, Float16x2, Float16x2
Variable lerp_Float16x2_a;
Variable lerp_Float16x2_b;
Variable lerp_Float16x2_t;
Function lerp_Float16x2;
inline constexpr std::array lerp_Float16x2_args = { &lerp_Float16x2_a, &lerp_Float16x2_b, &lerp_Float16x2_t };

/// lerp with Float16x3, Float16x3, Float16x3
Variable lerp_Float16x3_a;
Variable lerp_Float16x3_b;
Variable lerp_Float16x3_t;
Function lerp_Float16x3;
inline constexpr std::array lerp_Float16x3_args = { &lerp_Float16x3_a, &lerp_Float16x3_b, &lerp_Float16x3_t };

/// lerp with Float16x4, Float16x4, Float16x4
Variable lerp_Float16x4_a;
Variable lerp_Float16x4_b;
Variable lerp_Float16x4_t;
Function lerp_Float16x4;
inline constexpr std::array lerp_Float16x4_args = { &lerp_Float16x4_a, &lerp_Float16x4_b, &lerp_Float16x4_t };

/// step with Float32, Float32
Variable step_Float32_edge;
Variable step_Float32_x;
Function step_Float32;
inline constexpr std::array step_Float32_args = { &step_Float32_edge, &step_Float32_x };

/// step with Float32x2, Float32x2
Variable step_Float32x2_edge;
Variable step_Float32x2_x;
Function step_Float32x2;
inline constexpr std::array step_Float32x2_args = { &step_Float32x2_edge, &step_Float32x2_x };

/// step with Float32x3, Float32x3
Variable step_Float32x3_edge;
Variable step_Float32x3_x;
Function step_Float32x3;
inline constexpr std::array step_Float32x3_args = { &step_Float32x3_edge, &step_Float32x3_x };

/// step with Float32x4, Float32x4
Variable step_Float32x4_edge;
Variable step_Float32x4_x;
Function step_Float32x4;
inline constexpr std::array step_Float32x4_args = { &step_Float32x4_edge, &step_Float32x4_x };

/// step with Float16, Float16
Variable step_Float16_edge;
Variable step_Float16_x;
Function step_Float16;
inline constexpr std::array step_Float16_args = { &step_Float16_edge, &step_Float16_x };

/// step with Float16x2, Float16x2
Variable step_Float16x2_edge;
Variable step_Float16x2_x;
Function step_Float16x2;
inline constexpr std::array step_Float16x2_args = { &step_Float16x2_edge, &step_Float16x2_x };

/// step with Float16x3, Float16x3
Variable step_Float16x3_edge;
Variable step_Float16x3_x;
Function step_Float16x3;
inline constexpr std::array step_Float16x3_args = { &step_Float16x3_edge, &step_Float16x3_x };

/// step with Float16x4, Float16x4
Variable step_Float16x4_edge;
Variable step_Float16x4_x;
Function step_Float16x4;
inline constexpr std::array step_Float16x4_args = { &step_Float16x4_edge, &step_Float16x4_x };

/// smoothstep with Float32, Float32, Float32
Variable smoothstep_Float32_edge0;
Variable smoothstep_Float32_edge1;
Variable smoothstep_Float32_x;
Function smoothstep_Float32;
inline constexpr std::array smoothstep_Float32_args = { &smoothstep_Float32_edge0, &smoothstep_Float32_edge1, &smoothstep_Float32_x };

/// smoothstep with Float32x2, Float32x2, Float32x2
Variable smoothstep_Float32x2_edge0;
Variable smoothstep_Float32x2_edge1;
Variable smoothstep_Float32x2_x;
Function smoothstep_Float32x2;
inline constexpr std::array smoothstep_Float32x2_args = { &smoothstep_Float32x2_edge0, &smoothstep_Float32x2_edge1, &smoothstep_Float32x2_x };

/// smoothstep with Float32x3, Float32x3, Float32x3
Variable smoothstep_Float32x3_edge0;
Variable smoothstep_Float32x3_edge1;
Variable smoothstep_Float32x3_x;
Function smoothstep_Float32x3;
inline constexpr std::array smoothstep_Float32x3_args = { &smoothstep_Float32x3_edge0, &smoothstep_Float32x3_edge1, &smoothstep_Float32x3_x };

/// smoothstep with Float32x4, Float32x4, Float32x4
Variable smoothstep_Float32x4_edge0;
Variable smoothstep_Float32x4_edge1;
Variable smoothstep_Float32x4_x;
Function smoothstep_Float32x4;
inline constexpr std::array smoothstep_Float32x4_args = { &smoothstep_Float32x4_edge0, &smoothstep_Float32x4_edge1, &smoothstep_Float32x4_x };

/// smoothstep with Float16, Float16, Float16
Variable smoothstep_Float16_edge0;
Variable smoothstep_Float16_edge1;
Variable smoothstep_Float16_x;
Function smoothstep_Float16;
inline constexpr std::array smoothstep_Float16_args = { &smoothstep_Float16_edge0, &smoothstep_Float16_edge1, &smoothstep_Float16_x };

/// smoothstep with Float16x2, Float16x2, Float16x2
Variable smoothstep_Float16x2_edge0;
Variable smoothstep_Float16x2_edge1;
Variable smoothstep_Float16x2_x;
Function smoothstep_Float16x2;
inline constexpr std::array smoothstep_Float16x2_args = { &smoothstep_Float16x2_edge0, &smoothstep_Float16x2_edge1, &smoothstep_Float16x2_x };

/// smoothstep with Float16x3, Float16x3, Float16x3
Variable smoothstep_Float16x3_edge0;
Variable smoothstep_Float16x3_edge1;
Variable smoothstep_Float16x3_x;
Function smoothstep_Float16x3;
inline constexpr std::array smoothstep_Float16x3_args = { &smoothstep_Float16x3_edge0, &smoothstep_Float16x3_edge1, &smoothstep_Float16x3_x };

/// smoothstep with Float16x4, Float16x4, Float16x4
Variable smoothstep_Float16x4_edge0;
Variable smoothstep_Float16x4_edge1;
Variable smoothstep_Float16x4_x;
Function smoothstep_Float16x4;
inline constexpr std::array smoothstep_Float16x4_args = { &smoothstep_Float16x4_edge0, &smoothstep_Float16x4_edge1, &smoothstep_Float16x4_x };

/// ceil with Float32
Variable ceil_Float32_arg;
Function ceil_Float32;
inline constexpr std::array ceil_Float32_args = { &ceil_Float32_arg };

/// ceil with Float32x2
Variable ceil_Float32x2_arg;
Function ceil_Float32x2;
inline constexpr std::array ceil_Float32x2_args = { &ceil_Float32x2_arg };

/// ceil with Float32x3
Variable ceil_Float32x3_arg;
Function ceil_Float32x3;
inline constexpr std::array ceil_Float32x3_args = { &ceil_Float32x3_arg };

void SetupIntrinsics5()
{
    /// reflect with Float16x2, Float16x2
    reflect_Float16x2_incident.name = "incident"_c;
    reflect_Float16x2_incident.type = Type::FullType{ Float16x2Type.name };
    reflect_Float16x2_normal.name = "normal"_c;
    reflect_Float16x2_normal.type = Type::FullType{ Float16x2Type.name };
    reflect_Float16x2.documentation = "Returns the reflection of a vector through a surface using an incident vector and normal."_c;
    reflect_Float16x2.name = reflect_Float16x2_name;
    reflect_Float16x2.backendIndex = 1577;
    reflect_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    reflect_Float16x2.parameters = reflect_Float16x2_args;
    Symbol::Resolved(&reflect_Float16x2_incident)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&reflect_Float16x2_normal)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&reflect_Float16x2)->signature = "reflect(f16x2,f16x2) f16x2"_c;
    Symbol::Resolved(&reflect_Float16x2)->name = "reflect(f16x2,f16x2)"_c;
    Symbol::Resolved(&reflect_Float16x2)->nameWithVarNames = "reflect(incident : f16x2, normal : f16x2)"_c;
    Symbol::Resolved(&reflect_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// reflect with Float16x3, Float16x3
    reflect_Float16x3_incident.name = "incident"_c;
    reflect_Float16x3_incident.type = Type::FullType{ Float16x3Type.name };
    reflect_Float16x3_normal.name = "normal"_c;
    reflect_Float16x3_normal.type = Type::FullType{ Float16x3Type.name };
    reflect_Float16x3.documentation = "Returns the reflection of a vector through a surface using an incident vector and normal."_c;
    reflect_Float16x3.name = reflect_Float16x3_name;
    reflect_Float16x3.backendIndex = 1578;
    reflect_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    reflect_Float16x3.parameters = reflect_Float16x3_args;
    Symbol::Resolved(&reflect_Float16x3_incident)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&reflect_Float16x3_normal)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&reflect_Float16x3)->signature = "reflect(f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&reflect_Float16x3)->name = "reflect(f16x3,f16x3)"_c;
    Symbol::Resolved(&reflect_Float16x3)->nameWithVarNames = "reflect(incident : f16x3, normal : f16x3)"_c;
    Symbol::Resolved(&reflect_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// reflect with Float16x4, Float16x4
    reflect_Float16x4_incident.name = "incident"_c;
    reflect_Float16x4_incident.type = Type::FullType{ Float16x4Type.name };
    reflect_Float16x4_normal.name = "normal"_c;
    reflect_Float16x4_normal.type = Type::FullType{ Float16x4Type.name };
    reflect_Float16x4.documentation = "Returns the reflection of a vector through a surface using an incident vector and normal."_c;
    reflect_Float16x4.name = reflect_Float16x4_name;
    reflect_Float16x4.backendIndex = 1579;
    reflect_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    reflect_Float16x4.parameters = reflect_Float16x4_args;
    Symbol::Resolved(&reflect_Float16x4_incident)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&reflect_Float16x4_normal)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&reflect_Float16x4)->signature = "reflect(f16x4,f16x4) f16x4"_c;
    Symbol::Resolved(&reflect_Float16x4)->name = "reflect(f16x4,f16x4)"_c;
    Symbol::Resolved(&reflect_Float16x4)->nameWithVarNames = "reflect(incident : f16x4, normal : f16x4)"_c;
    Symbol::Resolved(&reflect_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// refract with Float32x2, Float32x2, Float32x2
    refract_Float32x2_incident.name = "incident"_c;
    refract_Float32x2_incident.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2_normal.name = "normal"_c;
    refract_Float32x2_normal.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2_ior.name = "ior"_c;
    refract_Float32x2_ior.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2.documentation = "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction."_c;
    refract_Float32x2.name = refract_Float32x2_name;
    refract_Float32x2.backendIndex = 1580;
    refract_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    refract_Float32x2.parameters = refract_Float32x2_args;
    Symbol::Resolved(&refract_Float32x2_incident)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2_normal)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2_ior)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2)->signature = "refract(f32x2,f32x2,f32x2) f32x2"_c;
    Symbol::Resolved(&refract_Float32x2)->name = "refract(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&refract_Float32x2)->nameWithVarNames = "refract(incident : f32x2, normal : f32x2, ior : f32x2)"_c;
    Symbol::Resolved(&refract_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// refract with Float32x3, Float32x3, Float32x3
    refract_Float32x3_incident.name = "incident"_c;
    refract_Float32x3_incident.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3_normal.name = "normal"_c;
    refract_Float32x3_normal.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3_ior.name = "ior"_c;
    refract_Float32x3_ior.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3.documentation = "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction."_c;
    refract_Float32x3.name = refract_Float32x3_name;
    refract_Float32x3.backendIndex = 1581;
    refract_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    refract_Float32x3.parameters = refract_Float32x3_args;
    Symbol::Resolved(&refract_Float32x3_incident)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3_normal)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3_ior)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3)->signature = "refract(f32x3,f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&refract_Float32x3)->name = "refract(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&refract_Float32x3)->nameWithVarNames = "refract(incident : f32x3, normal : f32x3, ior : f32x3)"_c;
    Symbol::Resolved(&refract_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// refract with Float32x4, Float32x4, Float32x4
    refract_Float32x4_incident.name = "incident"_c;
    refract_Float32x4_incident.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4_normal.name = "normal"_c;
    refract_Float32x4_normal.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4_ior.name = "ior"_c;
    refract_Float32x4_ior.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4.documentation = "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction."_c;
    refract_Float32x4.name = refract_Float32x4_name;
    refract_Float32x4.backendIndex = 1582;
    refract_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    refract_Float32x4.parameters = refract_Float32x4_args;
    Symbol::Resolved(&refract_Float32x4_incident)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4_normal)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4_ior)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4)->signature = "refract(f32x4,f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&refract_Float32x4)->name = "refract(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&refract_Float32x4)->nameWithVarNames = "refract(incident : f32x4, normal : f32x4, ior : f32x4)"_c;
    Symbol::Resolved(&refract_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// refract with Float16x2, Float16x2, Float16x2
    refract_Float16x2_incident.name = "incident"_c;
    refract_Float16x2_incident.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2_normal.name = "normal"_c;
    refract_Float16x2_normal.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2_ior.name = "ior"_c;
    refract_Float16x2_ior.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2.documentation = "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction."_c;
    refract_Float16x2.name = refract_Float16x2_name;
    refract_Float16x2.backendIndex = 1583;
    refract_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    refract_Float16x2.parameters = refract_Float16x2_args;
    Symbol::Resolved(&refract_Float16x2_incident)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2_normal)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2_ior)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2)->signature = "refract(f16x2,f16x2,f16x2) f16x2"_c;
    Symbol::Resolved(&refract_Float16x2)->name = "refract(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&refract_Float16x2)->nameWithVarNames = "refract(incident : f16x2, normal : f16x2, ior : f16x2)"_c;
    Symbol::Resolved(&refract_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// refract with Float16x3, Float16x3, Float16x3
    refract_Float16x3_incident.name = "incident"_c;
    refract_Float16x3_incident.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3_normal.name = "normal"_c;
    refract_Float16x3_normal.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3_ior.name = "ior"_c;
    refract_Float16x3_ior.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3.documentation = "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction."_c;
    refract_Float16x3.name = refract_Float16x3_name;
    refract_Float16x3.backendIndex = 1584;
    refract_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    refract_Float16x3.parameters = refract_Float16x3_args;
    Symbol::Resolved(&refract_Float16x3_incident)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3_normal)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3_ior)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3)->signature = "refract(f16x3,f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&refract_Float16x3)->name = "refract(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&refract_Float16x3)->nameWithVarNames = "refract(incident : f16x3, normal : f16x3, ior : f16x3)"_c;
    Symbol::Resolved(&refract_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// refract with Float16x4, Float16x4, Float16x4
    refract_Float16x4_incident.name = "incident"_c;
    refract_Float16x4_incident.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4_normal.name = "normal"_c;
    refract_Float16x4_normal.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4_ior.name = "ior"_c;
    refract_Float16x4_ior.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4.documentation = "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction."_c;
    refract_Float16x4.name = refract_Float16x4_name;
    refract_Float16x4.backendIndex = 1585;
    refract_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    refract_Float16x4.parameters = refract_Float16x4_args;
    Symbol::Resolved(&refract_Float16x4_incident)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4_normal)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4_ior)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4)->signature = "refract(f16x4,f16x4,f16x4) f16x4"_c;
    Symbol::Resolved(&refract_Float16x4)->name = "refract(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&refract_Float16x4)->nameWithVarNames = "refract(incident : f16x4, normal : f16x4, ior : f16x4)"_c;
    Symbol::Resolved(&refract_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// cross with Float32x3, Float32x3
    cross_Float32x3_v0.name = "v0"_c;
    cross_Float32x3_v0.type = Type::FullType{ Float32x3Type.name };
    cross_Float32x3_v1.name = "v1"_c;
    cross_Float32x3_v1.type = Type::FullType{ Float32x3Type.name };
    cross_Float32x3.documentation = "Returns the cross product of two vectors."_c;
    cross_Float32x3.name = cross_Float32x3_name;
    cross_Float32x3.backendIndex = 1586;
    cross_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    cross_Float32x3.parameters = cross_Float32x3_args;
    Symbol::Resolved(&cross_Float32x3_v0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cross_Float32x3_v1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cross_Float32x3)->signature = "cross(f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&cross_Float32x3)->name = "cross(f32x3,f32x3)"_c;
    Symbol::Resolved(&cross_Float32x3)->nameWithVarNames = "cross(v0 : f32x3, v1 : f32x3)"_c;
    Symbol::Resolved(&cross_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// cross with Float16x3, Float16x3
    cross_Float16x3_v0.name = "v0"_c;
    cross_Float16x3_v0.type = Type::FullType{ Float16x3Type.name };
    cross_Float16x3_v1.name = "v1"_c;
    cross_Float16x3_v1.type = Type::FullType{ Float16x3Type.name };
    cross_Float16x3.documentation = "Returns the cross product of two vectors."_c;
    cross_Float16x3.name = cross_Float16x3_name;
    cross_Float16x3.backendIndex = 1587;
    cross_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    cross_Float16x3.parameters = cross_Float16x3_args;
    Symbol::Resolved(&cross_Float16x3_v0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cross_Float16x3_v1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cross_Float16x3)->signature = "cross(f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&cross_Float16x3)->name = "cross(f16x3,f16x3)"_c;
    Symbol::Resolved(&cross_Float16x3)->nameWithVarNames = "cross(v0 : f16x3, v1 : f16x3)"_c;
    Symbol::Resolved(&cross_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// length with Float32x2
    length_Float32x2_arg.name = "val"_c;
    length_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    length_Float32x2.documentation = "Returns the length of the vector."_c;
    length_Float32x2.name = length_Float32x2_name;
    length_Float32x2.backendIndex = 1588;
    length_Float32x2.returnType = Type::FullType { Float32Type.name };
    length_Float32x2.parameters = length_Float32x2_args;
    Symbol::Resolved(&length_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&length_Float32x2)->signature = "length(f32x2) f32"_c;
    Symbol::Resolved(&length_Float32x2)->name = "length(f32x2)"_c;
    Symbol::Resolved(&length_Float32x2)->nameWithVarNames = "length(val : f32x2)"_c;
    Symbol::Resolved(&length_Float32x2)->returnTypeSymbol = &Float32Type;

    /// length with Float32x3
    length_Float32x3_arg.name = "val"_c;
    length_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    length_Float32x3.documentation = "Returns the length of the vector."_c;
    length_Float32x3.name = length_Float32x3_name;
    length_Float32x3.backendIndex = 1589;
    length_Float32x3.returnType = Type::FullType { Float32Type.name };
    length_Float32x3.parameters = length_Float32x3_args;
    Symbol::Resolved(&length_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&length_Float32x3)->signature = "length(f32x3) f32"_c;
    Symbol::Resolved(&length_Float32x3)->name = "length(f32x3)"_c;
    Symbol::Resolved(&length_Float32x3)->nameWithVarNames = "length(val : f32x3)"_c;
    Symbol::Resolved(&length_Float32x3)->returnTypeSymbol = &Float32Type;

    /// length with Float32x4
    length_Float32x4_arg.name = "val"_c;
    length_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    length_Float32x4.documentation = "Returns the length of the vector."_c;
    length_Float32x4.name = length_Float32x4_name;
    length_Float32x4.backendIndex = 1590;
    length_Float32x4.returnType = Type::FullType { Float32Type.name };
    length_Float32x4.parameters = length_Float32x4_args;
    Symbol::Resolved(&length_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&length_Float32x4)->signature = "length(f32x4) f32"_c;
    Symbol::Resolved(&length_Float32x4)->name = "length(f32x4)"_c;
    Symbol::Resolved(&length_Float32x4)->nameWithVarNames = "length(val : f32x4)"_c;
    Symbol::Resolved(&length_Float32x4)->returnTypeSymbol = &Float32Type;

    /// length with Float16x2
    length_Float16x2_arg.name = "val"_c;
    length_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    length_Float16x2.documentation = "Returns the length of the vector."_c;
    length_Float16x2.name = length_Float16x2_name;
    length_Float16x2.backendIndex = 1591;
    length_Float16x2.returnType = Type::FullType { Float32Type.name };
    length_Float16x2.parameters = length_Float16x2_args;
    Symbol::Resolved(&length_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&length_Float16x2)->signature = "length(f16x2) f32"_c;
    Symbol::Resolved(&length_Float16x2)->name = "length(f16x2)"_c;
    Symbol::Resolved(&length_Float16x2)->nameWithVarNames = "length(val : f16x2)"_c;
    Symbol::Resolved(&length_Float16x2)->returnTypeSymbol = &Float32Type;

    /// length with Float16x3
    length_Float16x3_arg.name = "val"_c;
    length_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    length_Float16x3.documentation = "Returns the length of the vector."_c;
    length_Float16x3.name = length_Float16x3_name;
    length_Float16x3.backendIndex = 1592;
    length_Float16x3.returnType = Type::FullType { Float32Type.name };
    length_Float16x3.parameters = length_Float16x3_args;
    Symbol::Resolved(&length_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&length_Float16x3)->signature = "length(f16x3) f32"_c;
    Symbol::Resolved(&length_Float16x3)->name = "length(f16x3)"_c;
    Symbol::Resolved(&length_Float16x3)->nameWithVarNames = "length(val : f16x3)"_c;
    Symbol::Resolved(&length_Float16x3)->returnTypeSymbol = &Float32Type;

    /// length with Float16x4
    length_Float16x4_arg.name = "val"_c;
    length_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    length_Float16x4.documentation = "Returns the length of the vector."_c;
    length_Float16x4.name = length_Float16x4_name;
    length_Float16x4.backendIndex = 1593;
    length_Float16x4.returnType = Type::FullType { Float32Type.name };
    length_Float16x4.parameters = length_Float16x4_args;
    Symbol::Resolved(&length_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&length_Float16x4)->signature = "length(f16x4) f32"_c;
    Symbol::Resolved(&length_Float16x4)->name = "length(f16x4)"_c;
    Symbol::Resolved(&length_Float16x4)->nameWithVarNames = "length(val : f16x4)"_c;
    Symbol::Resolved(&length_Float16x4)->returnTypeSymbol = &Float32Type;

    /// normalize with Float32x2
    normalize_Float32x2_arg.name = "val"_c;
    normalize_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    normalize_Float32x2.documentation = "Returns the normalized vector."_c;
    normalize_Float32x2.name = normalize_Float32x2_name;
    normalize_Float32x2.backendIndex = 1594;
    normalize_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    normalize_Float32x2.parameters = normalize_Float32x2_args;
    Symbol::Resolved(&normalize_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&normalize_Float32x2)->signature = "normalize(f32x2) f32x2"_c;
    Symbol::Resolved(&normalize_Float32x2)->name = "normalize(f32x2)"_c;
    Symbol::Resolved(&normalize_Float32x2)->nameWithVarNames = "normalize(val : f32x2)"_c;
    Symbol::Resolved(&normalize_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// normalize with Float32x3
    normalize_Float32x3_arg.name = "val"_c;
    normalize_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    normalize_Float32x3.documentation = "Returns the normalized vector."_c;
    normalize_Float32x3.name = normalize_Float32x3_name;
    normalize_Float32x3.backendIndex = 1595;
    normalize_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    normalize_Float32x3.parameters = normalize_Float32x3_args;
    Symbol::Resolved(&normalize_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&normalize_Float32x3)->signature = "normalize(f32x3) f32x3"_c;
    Symbol::Resolved(&normalize_Float32x3)->name = "normalize(f32x3)"_c;
    Symbol::Resolved(&normalize_Float32x3)->nameWithVarNames = "normalize(val : f32x3)"_c;
    Symbol::Resolved(&normalize_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// normalize with Float32x4
    normalize_Float32x4_arg.name = "val"_c;
    normalize_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    normalize_Float32x4.documentation = "Returns the normalized vector."_c;
    normalize_Float32x4.name = normalize_Float32x4_name;
    normalize_Float32x4.backendIndex = 1596;
    normalize_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    normalize_Float32x4.parameters = normalize_Float32x4_args;
    Symbol::Resolved(&normalize_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&normalize_Float32x4)->signature = "normalize(f32x4) f32x4"_c;
    Symbol::Resolved(&normalize_Float32x4)->name = "normalize(f32x4)"_c;
    Symbol::Resolved(&normalize_Float32x4)->nameWithVarNames = "normalize(val : f32x4)"_c;
    Symbol::Resolved(&normalize_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// normalize with Float16x2
    normalize_Float16x2_arg.name = "val"_c;
    normalize_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    normalize_Float16x2.documentation = "Returns the normalized vector."_c;
    normalize_Float16x2.name = normalize_Float16x2_name;
    normalize_Float16x2.backendIndex = 1597;
    normalize_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    normalize_Float16x2.parameters = normalize_Float16x2_args;
    Symbol::Resolved(&normalize_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&normalize_Float16x2)->signature = "normalize(f16x2) f16x2"_c;
    Symbol::Resolved(&normalize_Float16x2)->name = "normalize(f16x2)"_c;
    Symbol::Resolved(&normalize_Float16x2)->nameWithVarNames = "normalize(val : f16x2)"_c;
    Symbol::Resolved(&normalize_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// normalize with Float16x3
    normalize_Float16x3_arg.name = "val"_c;
    normalize_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    normalize_Float16x3.documentation = "Returns the normalized vector."_c;
    normalize_Float16x3.name = normalize_Float16x3_name;
    normalize_Float16x3.backendIndex = 1598;
    normalize_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    normalize_Float16x3.parameters = normalize_Float16x3_args;
    Symbol::Resolved(&normalize_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&normalize_Float16x3)->signature = "normalize(f16x3) f16x3"_c;
    Symbol::Resolved(&normalize_Float16x3)->name = "normalize(f16x3)"_c;
    Symbol::Resolved(&normalize_Float16x3)->nameWithVarNames = "normalize(val : f16x3)"_c;
    Symbol::Resolved(&normalize_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// normalize with Float16x4
    normalize_Float16x4_arg.name = "val"_c;
    normalize_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    normalize_Float16x4.documentation = "Returns the normalized vector."_c;
    normalize_Float16x4.name = normalize_Float16x4_name;
    normalize_Float16x4.backendIndex = 1599;
    normalize_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    normalize_Float16x4.parameters = normalize_Float16x4_args;
    Symbol::Resolved(&normalize_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&normalize_Float16x4)->signature = "normalize(f16x4) f16x4"_c;
    Symbol::Resolved(&normalize_Float16x4)->name = "normalize(f16x4)"_c;
    Symbol::Resolved(&normalize_Float16x4)->nameWithVarNames = "normalize(val : f16x4)"_c;
    Symbol::Resolved(&normalize_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// distance with Float32x2, Float32x2
    distance_Float32x2_p0.name = "p0"_c;
    distance_Float32x2_p0.type = Type::FullType{ Float32x2Type.name };
    distance_Float32x2_p1.name = "p1"_c;
    distance_Float32x2_p1.type = Type::FullType{ Float32x2Type.name };
    distance_Float32x2.documentation = "Returns the distance between two points."_c;
    distance_Float32x2.name = distance_Float32x2_name;
    distance_Float32x2.backendIndex = 1600;
    distance_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    distance_Float32x2.parameters = distance_Float32x2_args;
    Symbol::Resolved(&distance_Float32x2_p0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&distance_Float32x2_p1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&distance_Float32x2)->signature = "distance(f32x2,f32x2) f32x2"_c;
    Symbol::Resolved(&distance_Float32x2)->name = "distance(f32x2,f32x2)"_c;
    Symbol::Resolved(&distance_Float32x2)->nameWithVarNames = "distance(p0 : f32x2, p1 : f32x2)"_c;
    Symbol::Resolved(&distance_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// distance with Float32x3, Float32x3
    distance_Float32x3_p0.name = "p0"_c;
    distance_Float32x3_p0.type = Type::FullType{ Float32x3Type.name };
    distance_Float32x3_p1.name = "p1"_c;
    distance_Float32x3_p1.type = Type::FullType{ Float32x3Type.name };
    distance_Float32x3.documentation = "Returns the distance between two points."_c;
    distance_Float32x3.name = distance_Float32x3_name;
    distance_Float32x3.backendIndex = 1601;
    distance_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    distance_Float32x3.parameters = distance_Float32x3_args;
    Symbol::Resolved(&distance_Float32x3_p0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&distance_Float32x3_p1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&distance_Float32x3)->signature = "distance(f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&distance_Float32x3)->name = "distance(f32x3,f32x3)"_c;
    Symbol::Resolved(&distance_Float32x3)->nameWithVarNames = "distance(p0 : f32x3, p1 : f32x3)"_c;
    Symbol::Resolved(&distance_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// distance with Float32x4, Float32x4
    distance_Float32x4_p0.name = "p0"_c;
    distance_Float32x4_p0.type = Type::FullType{ Float32x4Type.name };
    distance_Float32x4_p1.name = "p1"_c;
    distance_Float32x4_p1.type = Type::FullType{ Float32x4Type.name };
    distance_Float32x4.documentation = "Returns the distance between two points."_c;
    distance_Float32x4.name = distance_Float32x4_name;
    distance_Float32x4.backendIndex = 1602;
    distance_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    distance_Float32x4.parameters = distance_Float32x4_args;
    Symbol::Resolved(&distance_Float32x4_p0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&distance_Float32x4_p1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&distance_Float32x4)->signature = "distance(f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&distance_Float32x4)->name = "distance(f32x4,f32x4)"_c;
    Symbol::Resolved(&distance_Float32x4)->nameWithVarNames = "distance(p0 : f32x4, p1 : f32x4)"_c;
    Symbol::Resolved(&distance_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// distance with Float16x2, Float16x2
    distance_Float16x2_p0.name = "p0"_c;
    distance_Float16x2_p0.type = Type::FullType{ Float16x2Type.name };
    distance_Float16x2_p1.name = "p1"_c;
    distance_Float16x2_p1.type = Type::FullType{ Float16x2Type.name };
    distance_Float16x2.documentation = "Returns the distance between two points."_c;
    distance_Float16x2.name = distance_Float16x2_name;
    distance_Float16x2.backendIndex = 1603;
    distance_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    distance_Float16x2.parameters = distance_Float16x2_args;
    Symbol::Resolved(&distance_Float16x2_p0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&distance_Float16x2_p1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&distance_Float16x2)->signature = "distance(f16x2,f16x2) f16x2"_c;
    Symbol::Resolved(&distance_Float16x2)->name = "distance(f16x2,f16x2)"_c;
    Symbol::Resolved(&distance_Float16x2)->nameWithVarNames = "distance(p0 : f16x2, p1 : f16x2)"_c;
    Symbol::Resolved(&distance_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// distance with Float16x3, Float16x3
    distance_Float16x3_p0.name = "p0"_c;
    distance_Float16x3_p0.type = Type::FullType{ Float16x3Type.name };
    distance_Float16x3_p1.name = "p1"_c;
    distance_Float16x3_p1.type = Type::FullType{ Float16x3Type.name };
    distance_Float16x3.documentation = "Returns the distance between two points."_c;
    distance_Float16x3.name = distance_Float16x3_name;
    distance_Float16x3.backendIndex = 1604;
    distance_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    distance_Float16x3.parameters = distance_Float16x3_args;
    Symbol::Resolved(&distance_Float16x3_p0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&distance_Float16x3_p1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&distance_Float16x3)->signature = "distance(f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&distance_Float16x3)->name = "distance(f16x3,f16x3)"_c;
    Symbol::Resolved(&distance_Float16x3)->nameWithVarNames = "distance(p0 : f16x3, p1 : f16x3)"_c;
    Symbol::Resolved(&distance_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// distance with Float16x4, Float16x4
    distance_Float16x4_p0.name = "p0"_c;
    distance_Float16x4_p0.type = Type::FullType{ Float16x4Type.name };
    distance_Float16x4_p1.name = "p1"_c;
    distance_Float16x4_p1.type = Type::FullType{ Float16x4Type.name };
    distance_Float16x4.documentation = "Returns the distance between two points."_c;
    distance_Float16x4.name = distance_Float16x4_name;
    distance_Float16x4.backendIndex = 1605;
    distance_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    distance_Float16x4.parameters = distance_Float16x4_args;
    Symbol::Resolved(&distance_Float16x4_p0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&distance_Float16x4_p1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&distance_Float16x4)->signature = "distance(f16x4,f16x4) f16x4"_c;
    Symbol::Resolved(&distance_Float16x4)->name = "distance(f16x4,f16x4)"_c;
    Symbol::Resolved(&distance_Float16x4)->nameWithVarNames = "distance(p0 : f16x4, p1 : f16x4)"_c;
    Symbol::Resolved(&distance_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// min with Float32, Float32
    min_Float32_x.name = "x"_c;
    min_Float32_x.type = Type::FullType{ Float32Type.name };
    min_Float32_y.name = "y"_c;
    min_Float32_y.type = Type::FullType{ Float32Type.name };
    min_Float32.documentation = "Returns the minimum of x and y."_c;
    min_Float32.name = min_Float32_name;
    min_Float32.backendIndex = 1606;
    min_Float32.returnType = Type::FullType { Float32Type.name };
    min_Float32.parameters = min_Float32_args;
    Symbol::Resolved(&min_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&min_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&min_Float32)->signature = "min(f32,f32) f32"_c;
    Symbol::Resolved(&min_Float32)->name = "min(f32,f32)"_c;
    Symbol::Resolved(&min_Float32)->nameWithVarNames = "min(x : f32, y : f32)"_c;
    Symbol::Resolved(&min_Float32)->returnTypeSymbol = &Float32Type;

    /// min with Float32x2, Float32x2
    min_Float32x2_x.name = "x"_c;
    min_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    min_Float32x2_y.name = "y"_c;
    min_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    min_Float32x2.documentation = "Returns the minimum of x and y."_c;
    min_Float32x2.name = min_Float32x2_name;
    min_Float32x2.backendIndex = 1607;
    min_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    min_Float32x2.parameters = min_Float32x2_args;
    Symbol::Resolved(&min_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&min_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&min_Float32x2)->signature = "min(f32x2,f32x2) f32x2"_c;
    Symbol::Resolved(&min_Float32x2)->name = "min(f32x2,f32x2)"_c;
    Symbol::Resolved(&min_Float32x2)->nameWithVarNames = "min(x : f32x2, y : f32x2)"_c;
    Symbol::Resolved(&min_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// min with Float32x3, Float32x3
    min_Float32x3_x.name = "x"_c;
    min_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    min_Float32x3_y.name = "y"_c;
    min_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    min_Float32x3.documentation = "Returns the minimum of x and y."_c;
    min_Float32x3.name = min_Float32x3_name;
    min_Float32x3.backendIndex = 1608;
    min_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    min_Float32x3.parameters = min_Float32x3_args;
    Symbol::Resolved(&min_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&min_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&min_Float32x3)->signature = "min(f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&min_Float32x3)->name = "min(f32x3,f32x3)"_c;
    Symbol::Resolved(&min_Float32x3)->nameWithVarNames = "min(x : f32x3, y : f32x3)"_c;
    Symbol::Resolved(&min_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// min with Float32x4, Float32x4
    min_Float32x4_x.name = "x"_c;
    min_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    min_Float32x4_y.name = "y"_c;
    min_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    min_Float32x4.documentation = "Returns the minimum of x and y."_c;
    min_Float32x4.name = min_Float32x4_name;
    min_Float32x4.backendIndex = 1609;
    min_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    min_Float32x4.parameters = min_Float32x4_args;
    Symbol::Resolved(&min_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&min_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&min_Float32x4)->signature = "min(f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&min_Float32x4)->name = "min(f32x4,f32x4)"_c;
    Symbol::Resolved(&min_Float32x4)->nameWithVarNames = "min(x : f32x4, y : f32x4)"_c;
    Symbol::Resolved(&min_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// min with Float16, Float16
    min_Float16_x.name = "x"_c;
    min_Float16_x.type = Type::FullType{ Float16Type.name };
    min_Float16_y.name = "y"_c;
    min_Float16_y.type = Type::FullType{ Float16Type.name };
    min_Float16.documentation = "Returns the minimum of x and y."_c;
    min_Float16.name = min_Float16_name;
    min_Float16.backendIndex = 1610;
    min_Float16.returnType = Type::FullType { Float16Type.name };
    min_Float16.parameters = min_Float16_args;
    Symbol::Resolved(&min_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&min_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&min_Float16)->signature = "min(f16,f16) f16"_c;
    Symbol::Resolved(&min_Float16)->name = "min(f16,f16)"_c;
    Symbol::Resolved(&min_Float16)->nameWithVarNames = "min(x : f16, y : f16)"_c;
    Symbol::Resolved(&min_Float16)->returnTypeSymbol = &Float16Type;

    /// min with Float16x2, Float16x2
    min_Float16x2_x.name = "x"_c;
    min_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    min_Float16x2_y.name = "y"_c;
    min_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    min_Float16x2.documentation = "Returns the minimum of x and y."_c;
    min_Float16x2.name = min_Float16x2_name;
    min_Float16x2.backendIndex = 1611;
    min_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    min_Float16x2.parameters = min_Float16x2_args;
    Symbol::Resolved(&min_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&min_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&min_Float16x2)->signature = "min(f16x2,f16x2) f16x2"_c;
    Symbol::Resolved(&min_Float16x2)->name = "min(f16x2,f16x2)"_c;
    Symbol::Resolved(&min_Float16x2)->nameWithVarNames = "min(x : f16x2, y : f16x2)"_c;
    Symbol::Resolved(&min_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// min with Float16x3, Float16x3
    min_Float16x3_x.name = "x"_c;
    min_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    min_Float16x3_y.name = "y"_c;
    min_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    min_Float16x3.documentation = "Returns the minimum of x and y."_c;
    min_Float16x3.name = min_Float16x3_name;
    min_Float16x3.backendIndex = 1612;
    min_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    min_Float16x3.parameters = min_Float16x3_args;
    Symbol::Resolved(&min_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&min_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&min_Float16x3)->signature = "min(f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&min_Float16x3)->name = "min(f16x3,f16x3)"_c;
    Symbol::Resolved(&min_Float16x3)->nameWithVarNames = "min(x : f16x3, y : f16x3)"_c;
    Symbol::Resolved(&min_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// min with Float16x4, Float16x4
    min_Float16x4_x.name = "x"_c;
    min_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    min_Float16x4_y.name = "y"_c;
    min_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    min_Float16x4.documentation = "Returns the minimum of x and y."_c;
    min_Float16x4.name = min_Float16x4_name;
    min_Float16x4.backendIndex = 1613;
    min_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    min_Float16x4.parameters = min_Float16x4_args;
    Symbol::Resolved(&min_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&min_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&min_Float16x4)->signature = "min(f16x4,f16x4) f16x4"_c;
    Symbol::Resolved(&min_Float16x4)->name = "min(f16x4,f16x4)"_c;
    Symbol::Resolved(&min_Float16x4)->nameWithVarNames = "min(x : f16x4, y : f16x4)"_c;
    Symbol::Resolved(&min_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// min with Int32, Int32
    min_Int32_x.name = "x"_c;
    min_Int32_x.type = Type::FullType{ Int32Type.name };
    min_Int32_y.name = "y"_c;
    min_Int32_y.type = Type::FullType{ Int32Type.name };
    min_Int32.documentation = "Returns the minimum of x and y."_c;
    min_Int32.name = min_Int32_name;
    min_Int32.backendIndex = 1614;
    min_Int32.returnType = Type::FullType { Int32Type.name };
    min_Int32.parameters = min_Int32_args;
    Symbol::Resolved(&min_Int32_x)->typeSymbol = &Int32Type;
    Symbol::Resolved(&min_Int32_y)->typeSymbol = &Int32Type;
    Symbol::Resolved(&min_Int32)->signature = "min(i32,i32) i32"_c;
    Symbol::Resolved(&min_Int32)->name = "min(i32,i32)"_c;
    Symbol::Resolved(&min_Int32)->nameWithVarNames = "min(x : i32, y : i32)"_c;
    Symbol::Resolved(&min_Int32)->returnTypeSymbol = &Int32Type;

    /// min with Int32x2, Int32x2
    min_Int32x2_x.name = "x"_c;
    min_Int32x2_x.type = Type::FullType{ Int32x2Type.name };
    min_Int32x2_y.name = "y"_c;
    min_Int32x2_y.type = Type::FullType{ Int32x2Type.name };
    min_Int32x2.documentation = "Returns the minimum of x and y."_c;
    min_Int32x2.name = min_Int32x2_name;
    min_Int32x2.backendIndex = 1615;
    min_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    min_Int32x2.parameters = min_Int32x2_args;
    Symbol::Resolved(&min_Int32x2_x)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&min_Int32x2_y)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&min_Int32x2)->signature = "min(i32x2,i32x2) i32x2"_c;
    Symbol::Resolved(&min_Int32x2)->name = "min(i32x2,i32x2)"_c;
    Symbol::Resolved(&min_Int32x2)->nameWithVarNames = "min(x : i32x2, y : i32x2)"_c;
    Symbol::Resolved(&min_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// min with Int32x3, Int32x3
    min_Int32x3_x.name = "x"_c;
    min_Int32x3_x.type = Type::FullType{ Int32x3Type.name };
    min_Int32x3_y.name = "y"_c;
    min_Int32x3_y.type = Type::FullType{ Int32x3Type.name };
    min_Int32x3.documentation = "Returns the minimum of x and y."_c;
    min_Int32x3.name = min_Int32x3_name;
    min_Int32x3.backendIndex = 1616;
    min_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    min_Int32x3.parameters = min_Int32x3_args;
    Symbol::Resolved(&min_Int32x3_x)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&min_Int32x3_y)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&min_Int32x3)->signature = "min(i32x3,i32x3) i32x3"_c;
    Symbol::Resolved(&min_Int32x3)->name = "min(i32x3,i32x3)"_c;
    Symbol::Resolved(&min_Int32x3)->nameWithVarNames = "min(x : i32x3, y : i32x3)"_c;
    Symbol::Resolved(&min_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// min with Int32x4, Int32x4
    min_Int32x4_x.name = "x"_c;
    min_Int32x4_x.type = Type::FullType{ Int32x4Type.name };
    min_Int32x4_y.name = "y"_c;
    min_Int32x4_y.type = Type::FullType{ Int32x4Type.name };
    min_Int32x4.documentation = "Returns the minimum of x and y."_c;
    min_Int32x4.name = min_Int32x4_name;
    min_Int32x4.backendIndex = 1617;
    min_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    min_Int32x4.parameters = min_Int32x4_args;
    Symbol::Resolved(&min_Int32x4_x)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&min_Int32x4_y)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&min_Int32x4)->signature = "min(i32x4,i32x4) i32x4"_c;
    Symbol::Resolved(&min_Int32x4)->name = "min(i32x4,i32x4)"_c;
    Symbol::Resolved(&min_Int32x4)->nameWithVarNames = "min(x : i32x4, y : i32x4)"_c;
    Symbol::Resolved(&min_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// min with Int16, Int16
    min_Int16_x.name = "x"_c;
    min_Int16_x.type = Type::FullType{ Int16Type.name };
    min_Int16_y.name = "y"_c;
    min_Int16_y.type = Type::FullType{ Int16Type.name };
    min_Int16.documentation = "Returns the minimum of x and y."_c;
    min_Int16.name = min_Int16_name;
    min_Int16.backendIndex = 1618;
    min_Int16.returnType = Type::FullType { Int16Type.name };
    min_Int16.parameters = min_Int16_args;
    Symbol::Resolved(&min_Int16_x)->typeSymbol = &Int16Type;
    Symbol::Resolved(&min_Int16_y)->typeSymbol = &Int16Type;
    Symbol::Resolved(&min_Int16)->signature = "min(i16,i16) i16"_c;
    Symbol::Resolved(&min_Int16)->name = "min(i16,i16)"_c;
    Symbol::Resolved(&min_Int16)->nameWithVarNames = "min(x : i16, y : i16)"_c;
    Symbol::Resolved(&min_Int16)->returnTypeSymbol = &Int16Type;

    /// min with Int16x2, Int16x2
    min_Int16x2_x.name = "x"_c;
    min_Int16x2_x.type = Type::FullType{ Int16x2Type.name };
    min_Int16x2_y.name = "y"_c;
    min_Int16x2_y.type = Type::FullType{ Int16x2Type.name };
    min_Int16x2.documentation = "Returns the minimum of x and y."_c;
    min_Int16x2.name = min_Int16x2_name;
    min_Int16x2.backendIndex = 1619;
    min_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    min_Int16x2.parameters = min_Int16x2_args;
    Symbol::Resolved(&min_Int16x2_x)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&min_Int16x2_y)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&min_Int16x2)->signature = "min(i16x2,i16x2) i16x2"_c;
    Symbol::Resolved(&min_Int16x2)->name = "min(i16x2,i16x2)"_c;
    Symbol::Resolved(&min_Int16x2)->nameWithVarNames = "min(x : i16x2, y : i16x2)"_c;
    Symbol::Resolved(&min_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// min with Int16x3, Int16x3
    min_Int16x3_x.name = "x"_c;
    min_Int16x3_x.type = Type::FullType{ Int16x3Type.name };
    min_Int16x3_y.name = "y"_c;
    min_Int16x3_y.type = Type::FullType{ Int16x3Type.name };
    min_Int16x3.documentation = "Returns the minimum of x and y."_c;
    min_Int16x3.name = min_Int16x3_name;
    min_Int16x3.backendIndex = 1620;
    min_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    min_Int16x3.parameters = min_Int16x3_args;
    Symbol::Resolved(&min_Int16x3_x)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&min_Int16x3_y)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&min_Int16x3)->signature = "min(i16x3,i16x3) i16x3"_c;
    Symbol::Resolved(&min_Int16x3)->name = "min(i16x3,i16x3)"_c;
    Symbol::Resolved(&min_Int16x3)->nameWithVarNames = "min(x : i16x3, y : i16x3)"_c;
    Symbol::Resolved(&min_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// min with Int16x4, Int16x4
    min_Int16x4_x.name = "x"_c;
    min_Int16x4_x.type = Type::FullType{ Int16x4Type.name };
    min_Int16x4_y.name = "y"_c;
    min_Int16x4_y.type = Type::FullType{ Int16x4Type.name };
    min_Int16x4.documentation = "Returns the minimum of x and y."_c;
    min_Int16x4.name = min_Int16x4_name;
    min_Int16x4.backendIndex = 1621;
    min_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    min_Int16x4.parameters = min_Int16x4_args;
    Symbol::Resolved(&min_Int16x4_x)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&min_Int16x4_y)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&min_Int16x4)->signature = "min(i16x4,i16x4) i16x4"_c;
    Symbol::Resolved(&min_Int16x4)->name = "min(i16x4,i16x4)"_c;
    Symbol::Resolved(&min_Int16x4)->nameWithVarNames = "min(x : i16x4, y : i16x4)"_c;
    Symbol::Resolved(&min_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// min with UInt32, UInt32
    min_UInt32_x.name = "x"_c;
    min_UInt32_x.type = Type::FullType{ UInt32Type.name };
    min_UInt32_y.name = "y"_c;
    min_UInt32_y.type = Type::FullType{ UInt32Type.name };
    min_UInt32.documentation = "Returns the minimum of x and y."_c;
    min_UInt32.name = min_UInt32_name;
    min_UInt32.backendIndex = 1622;
    min_UInt32.returnType = Type::FullType { UInt32Type.name };
    min_UInt32.parameters = min_UInt32_args;
    Symbol::Resolved(&min_UInt32_x)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&min_UInt32_y)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&min_UInt32)->signature = "min(u32,u32) u32"_c;
    Symbol::Resolved(&min_UInt32)->name = "min(u32,u32)"_c;
    Symbol::Resolved(&min_UInt32)->nameWithVarNames = "min(x : u32, y : u32)"_c;
    Symbol::Resolved(&min_UInt32)->returnTypeSymbol = &UInt32Type;

    /// min with UInt32x2, UInt32x2
    min_UInt32x2_x.name = "x"_c;
    min_UInt32x2_x.type = Type::FullType{ UInt32x2Type.name };
    min_UInt32x2_y.name = "y"_c;
    min_UInt32x2_y.type = Type::FullType{ UInt32x2Type.name };
    min_UInt32x2.documentation = "Returns the minimum of x and y."_c;
    min_UInt32x2.name = min_UInt32x2_name;
    min_UInt32x2.backendIndex = 1623;
    min_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    min_UInt32x2.parameters = min_UInt32x2_args;
    Symbol::Resolved(&min_UInt32x2_x)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&min_UInt32x2_y)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&min_UInt32x2)->signature = "min(u32x2,u32x2) u32x2"_c;
    Symbol::Resolved(&min_UInt32x2)->name = "min(u32x2,u32x2)"_c;
    Symbol::Resolved(&min_UInt32x2)->nameWithVarNames = "min(x : u32x2, y : u32x2)"_c;
    Symbol::Resolved(&min_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// min with UInt32x3, UInt32x3
    min_UInt32x3_x.name = "x"_c;
    min_UInt32x3_x.type = Type::FullType{ UInt32x3Type.name };
    min_UInt32x3_y.name = "y"_c;
    min_UInt32x3_y.type = Type::FullType{ UInt32x3Type.name };
    min_UInt32x3.documentation = "Returns the minimum of x and y."_c;
    min_UInt32x3.name = min_UInt32x3_name;
    min_UInt32x3.backendIndex = 1624;
    min_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    min_UInt32x3.parameters = min_UInt32x3_args;
    Symbol::Resolved(&min_UInt32x3_x)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&min_UInt32x3_y)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&min_UInt32x3)->signature = "min(u32x3,u32x3) u32x3"_c;
    Symbol::Resolved(&min_UInt32x3)->name = "min(u32x3,u32x3)"_c;
    Symbol::Resolved(&min_UInt32x3)->nameWithVarNames = "min(x : u32x3, y : u32x3)"_c;
    Symbol::Resolved(&min_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// min with UInt32x4, UInt32x4
    min_UInt32x4_x.name = "x"_c;
    min_UInt32x4_x.type = Type::FullType{ UInt32x4Type.name };
    min_UInt32x4_y.name = "y"_c;
    min_UInt32x4_y.type = Type::FullType{ UInt32x4Type.name };
    min_UInt32x4.documentation = "Returns the minimum of x and y."_c;
    min_UInt32x4.name = min_UInt32x4_name;
    min_UInt32x4.backendIndex = 1625;
    min_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    min_UInt32x4.parameters = min_UInt32x4_args;
    Symbol::Resolved(&min_UInt32x4_x)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&min_UInt32x4_y)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&min_UInt32x4)->signature = "min(u32x4,u32x4) u32x4"_c;
    Symbol::Resolved(&min_UInt32x4)->name = "min(u32x4,u32x4)"_c;
    Symbol::Resolved(&min_UInt32x4)->nameWithVarNames = "min(x : u32x4, y : u32x4)"_c;
    Symbol::Resolved(&min_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// min with UInt16, UInt16
    min_UInt16_x.name = "x"_c;
    min_UInt16_x.type = Type::FullType{ UInt16Type.name };
    min_UInt16_y.name = "y"_c;
    min_UInt16_y.type = Type::FullType{ UInt16Type.name };
    min_UInt16.documentation = "Returns the minimum of x and y."_c;
    min_UInt16.name = min_UInt16_name;
    min_UInt16.backendIndex = 1626;
    min_UInt16.returnType = Type::FullType { UInt16Type.name };
    min_UInt16.parameters = min_UInt16_args;
    Symbol::Resolved(&min_UInt16_x)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&min_UInt16_y)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&min_UInt16)->signature = "min(u16,u16) u16"_c;
    Symbol::Resolved(&min_UInt16)->name = "min(u16,u16)"_c;
    Symbol::Resolved(&min_UInt16)->nameWithVarNames = "min(x : u16, y : u16)"_c;
    Symbol::Resolved(&min_UInt16)->returnTypeSymbol = &UInt16Type;

    /// min with UInt16x2, UInt16x2
    min_UInt16x2_x.name = "x"_c;
    min_UInt16x2_x.type = Type::FullType{ UInt16x2Type.name };
    min_UInt16x2_y.name = "y"_c;
    min_UInt16x2_y.type = Type::FullType{ UInt16x2Type.name };
    min_UInt16x2.documentation = "Returns the minimum of x and y."_c;
    min_UInt16x2.name = min_UInt16x2_name;
    min_UInt16x2.backendIndex = 1627;
    min_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    min_UInt16x2.parameters = min_UInt16x2_args;
    Symbol::Resolved(&min_UInt16x2_x)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&min_UInt16x2_y)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&min_UInt16x2)->signature = "min(u16x2,u16x2) u16x2"_c;
    Symbol::Resolved(&min_UInt16x2)->name = "min(u16x2,u16x2)"_c;
    Symbol::Resolved(&min_UInt16x2)->nameWithVarNames = "min(x : u16x2, y : u16x2)"_c;
    Symbol::Resolved(&min_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// min with UInt16x3, UInt16x3
    min_UInt16x3_x.name = "x"_c;
    min_UInt16x3_x.type = Type::FullType{ UInt16x3Type.name };
    min_UInt16x3_y.name = "y"_c;
    min_UInt16x3_y.type = Type::FullType{ UInt16x3Type.name };
    min_UInt16x3.documentation = "Returns the minimum of x and y."_c;
    min_UInt16x3.name = min_UInt16x3_name;
    min_UInt16x3.backendIndex = 1628;
    min_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    min_UInt16x3.parameters = min_UInt16x3_args;
    Symbol::Resolved(&min_UInt16x3_x)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&min_UInt16x3_y)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&min_UInt16x3)->signature = "min(u16x3,u16x3) u16x3"_c;
    Symbol::Resolved(&min_UInt16x3)->name = "min(u16x3,u16x3)"_c;
    Symbol::Resolved(&min_UInt16x3)->nameWithVarNames = "min(x : u16x3, y : u16x3)"_c;
    Symbol::Resolved(&min_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// min with UInt16x4, UInt16x4
    min_UInt16x4_x.name = "x"_c;
    min_UInt16x4_x.type = Type::FullType{ UInt16x4Type.name };
    min_UInt16x4_y.name = "y"_c;
    min_UInt16x4_y.type = Type::FullType{ UInt16x4Type.name };
    min_UInt16x4.documentation = "Returns the minimum of x and y."_c;
    min_UInt16x4.name = min_UInt16x4_name;
    min_UInt16x4.backendIndex = 1629;
    min_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    min_UInt16x4.parameters = min_UInt16x4_args;
    Symbol::Resolved(&min_UInt16x4_x)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&min_UInt16x4_y)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&min_UInt16x4)->signature = "min(u16x4,u16x4) u16x4"_c;
    Symbol::Resolved(&min_UInt16x4)->name = "min(u16x4,u16x4)"_c;
    Symbol::Resolved(&min_UInt16x4)->nameWithVarNames = "min(x : u16x4, y : u16x4)"_c;
    Symbol::Resolved(&min_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// max with Float32, Float32
    max_Float32_x.name = "x"_c;
    max_Float32_x.type = Type::FullType{ Float32Type.name };
    max_Float32_y.name = "y"_c;
    max_Float32_y.type = Type::FullType{ Float32Type.name };
    max_Float32.documentation = "Returns the maximum of x and y."_c;
    max_Float32.name = max_Float32_name;
    max_Float32.backendIndex = 1630;
    max_Float32.returnType = Type::FullType { Float32Type.name };
    max_Float32.parameters = max_Float32_args;
    Symbol::Resolved(&max_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&max_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&max_Float32)->signature = "max(f32,f32) f32"_c;
    Symbol::Resolved(&max_Float32)->name = "max(f32,f32)"_c;
    Symbol::Resolved(&max_Float32)->nameWithVarNames = "max(x : f32, y : f32)"_c;
    Symbol::Resolved(&max_Float32)->returnTypeSymbol = &Float32Type;

    /// max with Float32x2, Float32x2
    max_Float32x2_x.name = "x"_c;
    max_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    max_Float32x2_y.name = "y"_c;
    max_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    max_Float32x2.documentation = "Returns the maximum of x and y."_c;
    max_Float32x2.name = max_Float32x2_name;
    max_Float32x2.backendIndex = 1631;
    max_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    max_Float32x2.parameters = max_Float32x2_args;
    Symbol::Resolved(&max_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&max_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&max_Float32x2)->signature = "max(f32x2,f32x2) f32x2"_c;
    Symbol::Resolved(&max_Float32x2)->name = "max(f32x2,f32x2)"_c;
    Symbol::Resolved(&max_Float32x2)->nameWithVarNames = "max(x : f32x2, y : f32x2)"_c;
    Symbol::Resolved(&max_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// max with Float32x3, Float32x3
    max_Float32x3_x.name = "x"_c;
    max_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    max_Float32x3_y.name = "y"_c;
    max_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    max_Float32x3.documentation = "Returns the maximum of x and y."_c;
    max_Float32x3.name = max_Float32x3_name;
    max_Float32x3.backendIndex = 1632;
    max_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    max_Float32x3.parameters = max_Float32x3_args;
    Symbol::Resolved(&max_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&max_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&max_Float32x3)->signature = "max(f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&max_Float32x3)->name = "max(f32x3,f32x3)"_c;
    Symbol::Resolved(&max_Float32x3)->nameWithVarNames = "max(x : f32x3, y : f32x3)"_c;
    Symbol::Resolved(&max_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// max with Float32x4, Float32x4
    max_Float32x4_x.name = "x"_c;
    max_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    max_Float32x4_y.name = "y"_c;
    max_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    max_Float32x4.documentation = "Returns the maximum of x and y."_c;
    max_Float32x4.name = max_Float32x4_name;
    max_Float32x4.backendIndex = 1633;
    max_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    max_Float32x4.parameters = max_Float32x4_args;
    Symbol::Resolved(&max_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&max_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&max_Float32x4)->signature = "max(f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&max_Float32x4)->name = "max(f32x4,f32x4)"_c;
    Symbol::Resolved(&max_Float32x4)->nameWithVarNames = "max(x : f32x4, y : f32x4)"_c;
    Symbol::Resolved(&max_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// max with Float16, Float16
    max_Float16_x.name = "x"_c;
    max_Float16_x.type = Type::FullType{ Float16Type.name };
    max_Float16_y.name = "y"_c;
    max_Float16_y.type = Type::FullType{ Float16Type.name };
    max_Float16.documentation = "Returns the maximum of x and y."_c;
    max_Float16.name = max_Float16_name;
    max_Float16.backendIndex = 1634;
    max_Float16.returnType = Type::FullType { Float16Type.name };
    max_Float16.parameters = max_Float16_args;
    Symbol::Resolved(&max_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&max_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&max_Float16)->signature = "max(f16,f16) f16"_c;
    Symbol::Resolved(&max_Float16)->name = "max(f16,f16)"_c;
    Symbol::Resolved(&max_Float16)->nameWithVarNames = "max(x : f16, y : f16)"_c;
    Symbol::Resolved(&max_Float16)->returnTypeSymbol = &Float16Type;

    /// max with Float16x2, Float16x2
    max_Float16x2_x.name = "x"_c;
    max_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    max_Float16x2_y.name = "y"_c;
    max_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    max_Float16x2.documentation = "Returns the maximum of x and y."_c;
    max_Float16x2.name = max_Float16x2_name;
    max_Float16x2.backendIndex = 1635;
    max_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    max_Float16x2.parameters = max_Float16x2_args;
    Symbol::Resolved(&max_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&max_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&max_Float16x2)->signature = "max(f16x2,f16x2) f16x2"_c;
    Symbol::Resolved(&max_Float16x2)->name = "max(f16x2,f16x2)"_c;
    Symbol::Resolved(&max_Float16x2)->nameWithVarNames = "max(x : f16x2, y : f16x2)"_c;
    Symbol::Resolved(&max_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// max with Float16x3, Float16x3
    max_Float16x3_x.name = "x"_c;
    max_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    max_Float16x3_y.name = "y"_c;
    max_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    max_Float16x3.documentation = "Returns the maximum of x and y."_c;
    max_Float16x3.name = max_Float16x3_name;
    max_Float16x3.backendIndex = 1636;
    max_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    max_Float16x3.parameters = max_Float16x3_args;
    Symbol::Resolved(&max_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&max_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&max_Float16x3)->signature = "max(f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&max_Float16x3)->name = "max(f16x3,f16x3)"_c;
    Symbol::Resolved(&max_Float16x3)->nameWithVarNames = "max(x : f16x3, y : f16x3)"_c;
    Symbol::Resolved(&max_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// max with Float16x4, Float16x4
    max_Float16x4_x.name = "x"_c;
    max_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    max_Float16x4_y.name = "y"_c;
    max_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    max_Float16x4.documentation = "Returns the maximum of x and y."_c;
    max_Float16x4.name = max_Float16x4_name;
    max_Float16x4.backendIndex = 1637;
    max_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    max_Float16x4.parameters = max_Float16x4_args;
    Symbol::Resolved(&max_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&max_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&max_Float16x4)->signature = "max(f16x4,f16x4) f16x4"_c;
    Symbol::Resolved(&max_Float16x4)->name = "max(f16x4,f16x4)"_c;
    Symbol::Resolved(&max_Float16x4)->nameWithVarNames = "max(x : f16x4, y : f16x4)"_c;
    Symbol::Resolved(&max_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// max with Int32, Int32
    max_Int32_x.name = "x"_c;
    max_Int32_x.type = Type::FullType{ Int32Type.name };
    max_Int32_y.name = "y"_c;
    max_Int32_y.type = Type::FullType{ Int32Type.name };
    max_Int32.documentation = "Returns the maximum of x and y."_c;
    max_Int32.name = max_Int32_name;
    max_Int32.backendIndex = 1638;
    max_Int32.returnType = Type::FullType { Int32Type.name };
    max_Int32.parameters = max_Int32_args;
    Symbol::Resolved(&max_Int32_x)->typeSymbol = &Int32Type;
    Symbol::Resolved(&max_Int32_y)->typeSymbol = &Int32Type;
    Symbol::Resolved(&max_Int32)->signature = "max(i32,i32) i32"_c;
    Symbol::Resolved(&max_Int32)->name = "max(i32,i32)"_c;
    Symbol::Resolved(&max_Int32)->nameWithVarNames = "max(x : i32, y : i32)"_c;
    Symbol::Resolved(&max_Int32)->returnTypeSymbol = &Int32Type;

    /// max with Int32x2, Int32x2
    max_Int32x2_x.name = "x"_c;
    max_Int32x2_x.type = Type::FullType{ Int32x2Type.name };
    max_Int32x2_y.name = "y"_c;
    max_Int32x2_y.type = Type::FullType{ Int32x2Type.name };
    max_Int32x2.documentation = "Returns the maximum of x and y."_c;
    max_Int32x2.name = max_Int32x2_name;
    max_Int32x2.backendIndex = 1639;
    max_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    max_Int32x2.parameters = max_Int32x2_args;
    Symbol::Resolved(&max_Int32x2_x)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&max_Int32x2_y)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&max_Int32x2)->signature = "max(i32x2,i32x2) i32x2"_c;
    Symbol::Resolved(&max_Int32x2)->name = "max(i32x2,i32x2)"_c;
    Symbol::Resolved(&max_Int32x2)->nameWithVarNames = "max(x : i32x2, y : i32x2)"_c;
    Symbol::Resolved(&max_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// max with Int32x3, Int32x3
    max_Int32x3_x.name = "x"_c;
    max_Int32x3_x.type = Type::FullType{ Int32x3Type.name };
    max_Int32x3_y.name = "y"_c;
    max_Int32x3_y.type = Type::FullType{ Int32x3Type.name };
    max_Int32x3.documentation = "Returns the maximum of x and y."_c;
    max_Int32x3.name = max_Int32x3_name;
    max_Int32x3.backendIndex = 1640;
    max_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    max_Int32x3.parameters = max_Int32x3_args;
    Symbol::Resolved(&max_Int32x3_x)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&max_Int32x3_y)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&max_Int32x3)->signature = "max(i32x3,i32x3) i32x3"_c;
    Symbol::Resolved(&max_Int32x3)->name = "max(i32x3,i32x3)"_c;
    Symbol::Resolved(&max_Int32x3)->nameWithVarNames = "max(x : i32x3, y : i32x3)"_c;
    Symbol::Resolved(&max_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// max with Int32x4, Int32x4
    max_Int32x4_x.name = "x"_c;
    max_Int32x4_x.type = Type::FullType{ Int32x4Type.name };
    max_Int32x4_y.name = "y"_c;
    max_Int32x4_y.type = Type::FullType{ Int32x4Type.name };
    max_Int32x4.documentation = "Returns the maximum of x and y."_c;
    max_Int32x4.name = max_Int32x4_name;
    max_Int32x4.backendIndex = 1641;
    max_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    max_Int32x4.parameters = max_Int32x4_args;
    Symbol::Resolved(&max_Int32x4_x)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&max_Int32x4_y)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&max_Int32x4)->signature = "max(i32x4,i32x4) i32x4"_c;
    Symbol::Resolved(&max_Int32x4)->name = "max(i32x4,i32x4)"_c;
    Symbol::Resolved(&max_Int32x4)->nameWithVarNames = "max(x : i32x4, y : i32x4)"_c;
    Symbol::Resolved(&max_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// max with Int16, Int16
    max_Int16_x.name = "x"_c;
    max_Int16_x.type = Type::FullType{ Int16Type.name };
    max_Int16_y.name = "y"_c;
    max_Int16_y.type = Type::FullType{ Int16Type.name };
    max_Int16.documentation = "Returns the maximum of x and y."_c;
    max_Int16.name = max_Int16_name;
    max_Int16.backendIndex = 1642;
    max_Int16.returnType = Type::FullType { Int16Type.name };
    max_Int16.parameters = max_Int16_args;
    Symbol::Resolved(&max_Int16_x)->typeSymbol = &Int16Type;
    Symbol::Resolved(&max_Int16_y)->typeSymbol = &Int16Type;
    Symbol::Resolved(&max_Int16)->signature = "max(i16,i16) i16"_c;
    Symbol::Resolved(&max_Int16)->name = "max(i16,i16)"_c;
    Symbol::Resolved(&max_Int16)->nameWithVarNames = "max(x : i16, y : i16)"_c;
    Symbol::Resolved(&max_Int16)->returnTypeSymbol = &Int16Type;

    /// max with Int16x2, Int16x2
    max_Int16x2_x.name = "x"_c;
    max_Int16x2_x.type = Type::FullType{ Int16x2Type.name };
    max_Int16x2_y.name = "y"_c;
    max_Int16x2_y.type = Type::FullType{ Int16x2Type.name };
    max_Int16x2.documentation = "Returns the maximum of x and y."_c;
    max_Int16x2.name = max_Int16x2_name;
    max_Int16x2.backendIndex = 1643;
    max_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    max_Int16x2.parameters = max_Int16x2_args;
    Symbol::Resolved(&max_Int16x2_x)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&max_Int16x2_y)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&max_Int16x2)->signature = "max(i16x2,i16x2) i16x2"_c;
    Symbol::Resolved(&max_Int16x2)->name = "max(i16x2,i16x2)"_c;
    Symbol::Resolved(&max_Int16x2)->nameWithVarNames = "max(x : i16x2, y : i16x2)"_c;
    Symbol::Resolved(&max_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// max with Int16x3, Int16x3
    max_Int16x3_x.name = "x"_c;
    max_Int16x3_x.type = Type::FullType{ Int16x3Type.name };
    max_Int16x3_y.name = "y"_c;
    max_Int16x3_y.type = Type::FullType{ Int16x3Type.name };
    max_Int16x3.documentation = "Returns the maximum of x and y."_c;
    max_Int16x3.name = max_Int16x3_name;
    max_Int16x3.backendIndex = 1644;
    max_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    max_Int16x3.parameters = max_Int16x3_args;
    Symbol::Resolved(&max_Int16x3_x)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&max_Int16x3_y)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&max_Int16x3)->signature = "max(i16x3,i16x3) i16x3"_c;
    Symbol::Resolved(&max_Int16x3)->name = "max(i16x3,i16x3)"_c;
    Symbol::Resolved(&max_Int16x3)->nameWithVarNames = "max(x : i16x3, y : i16x3)"_c;
    Symbol::Resolved(&max_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// max with Int16x4, Int16x4
    max_Int16x4_x.name = "x"_c;
    max_Int16x4_x.type = Type::FullType{ Int16x4Type.name };
    max_Int16x4_y.name = "y"_c;
    max_Int16x4_y.type = Type::FullType{ Int16x4Type.name };
    max_Int16x4.documentation = "Returns the maximum of x and y."_c;
    max_Int16x4.name = max_Int16x4_name;
    max_Int16x4.backendIndex = 1645;
    max_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    max_Int16x4.parameters = max_Int16x4_args;
    Symbol::Resolved(&max_Int16x4_x)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&max_Int16x4_y)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&max_Int16x4)->signature = "max(i16x4,i16x4) i16x4"_c;
    Symbol::Resolved(&max_Int16x4)->name = "max(i16x4,i16x4)"_c;
    Symbol::Resolved(&max_Int16x4)->nameWithVarNames = "max(x : i16x4, y : i16x4)"_c;
    Symbol::Resolved(&max_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// max with UInt32, UInt32
    max_UInt32_x.name = "x"_c;
    max_UInt32_x.type = Type::FullType{ UInt32Type.name };
    max_UInt32_y.name = "y"_c;
    max_UInt32_y.type = Type::FullType{ UInt32Type.name };
    max_UInt32.documentation = "Returns the maximum of x and y."_c;
    max_UInt32.name = max_UInt32_name;
    max_UInt32.backendIndex = 1646;
    max_UInt32.returnType = Type::FullType { UInt32Type.name };
    max_UInt32.parameters = max_UInt32_args;
    Symbol::Resolved(&max_UInt32_x)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&max_UInt32_y)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&max_UInt32)->signature = "max(u32,u32) u32"_c;
    Symbol::Resolved(&max_UInt32)->name = "max(u32,u32)"_c;
    Symbol::Resolved(&max_UInt32)->nameWithVarNames = "max(x : u32, y : u32)"_c;
    Symbol::Resolved(&max_UInt32)->returnTypeSymbol = &UInt32Type;

    /// max with UInt32x2, UInt32x2
    max_UInt32x2_x.name = "x"_c;
    max_UInt32x2_x.type = Type::FullType{ UInt32x2Type.name };
    max_UInt32x2_y.name = "y"_c;
    max_UInt32x2_y.type = Type::FullType{ UInt32x2Type.name };
    max_UInt32x2.documentation = "Returns the maximum of x and y."_c;
    max_UInt32x2.name = max_UInt32x2_name;
    max_UInt32x2.backendIndex = 1647;
    max_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    max_UInt32x2.parameters = max_UInt32x2_args;
    Symbol::Resolved(&max_UInt32x2_x)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&max_UInt32x2_y)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&max_UInt32x2)->signature = "max(u32x2,u32x2) u32x2"_c;
    Symbol::Resolved(&max_UInt32x2)->name = "max(u32x2,u32x2)"_c;
    Symbol::Resolved(&max_UInt32x2)->nameWithVarNames = "max(x : u32x2, y : u32x2)"_c;
    Symbol::Resolved(&max_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// max with UInt32x3, UInt32x3
    max_UInt32x3_x.name = "x"_c;
    max_UInt32x3_x.type = Type::FullType{ UInt32x3Type.name };
    max_UInt32x3_y.name = "y"_c;
    max_UInt32x3_y.type = Type::FullType{ UInt32x3Type.name };
    max_UInt32x3.documentation = "Returns the maximum of x and y."_c;
    max_UInt32x3.name = max_UInt32x3_name;
    max_UInt32x3.backendIndex = 1648;
    max_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    max_UInt32x3.parameters = max_UInt32x3_args;
    Symbol::Resolved(&max_UInt32x3_x)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&max_UInt32x3_y)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&max_UInt32x3)->signature = "max(u32x3,u32x3) u32x3"_c;
    Symbol::Resolved(&max_UInt32x3)->name = "max(u32x3,u32x3)"_c;
    Symbol::Resolved(&max_UInt32x3)->nameWithVarNames = "max(x : u32x3, y : u32x3)"_c;
    Symbol::Resolved(&max_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// max with UInt32x4, UInt32x4
    max_UInt32x4_x.name = "x"_c;
    max_UInt32x4_x.type = Type::FullType{ UInt32x4Type.name };
    max_UInt32x4_y.name = "y"_c;
    max_UInt32x4_y.type = Type::FullType{ UInt32x4Type.name };
    max_UInt32x4.documentation = "Returns the maximum of x and y."_c;
    max_UInt32x4.name = max_UInt32x4_name;
    max_UInt32x4.backendIndex = 1649;
    max_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    max_UInt32x4.parameters = max_UInt32x4_args;
    Symbol::Resolved(&max_UInt32x4_x)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&max_UInt32x4_y)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&max_UInt32x4)->signature = "max(u32x4,u32x4) u32x4"_c;
    Symbol::Resolved(&max_UInt32x4)->name = "max(u32x4,u32x4)"_c;
    Symbol::Resolved(&max_UInt32x4)->nameWithVarNames = "max(x : u32x4, y : u32x4)"_c;
    Symbol::Resolved(&max_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// max with UInt16, UInt16
    max_UInt16_x.name = "x"_c;
    max_UInt16_x.type = Type::FullType{ UInt16Type.name };
    max_UInt16_y.name = "y"_c;
    max_UInt16_y.type = Type::FullType{ UInt16Type.name };
    max_UInt16.documentation = "Returns the maximum of x and y."_c;
    max_UInt16.name = max_UInt16_name;
    max_UInt16.backendIndex = 1650;
    max_UInt16.returnType = Type::FullType { UInt16Type.name };
    max_UInt16.parameters = max_UInt16_args;
    Symbol::Resolved(&max_UInt16_x)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&max_UInt16_y)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&max_UInt16)->signature = "max(u16,u16) u16"_c;
    Symbol::Resolved(&max_UInt16)->name = "max(u16,u16)"_c;
    Symbol::Resolved(&max_UInt16)->nameWithVarNames = "max(x : u16, y : u16)"_c;
    Symbol::Resolved(&max_UInt16)->returnTypeSymbol = &UInt16Type;

    /// max with UInt16x2, UInt16x2
    max_UInt16x2_x.name = "x"_c;
    max_UInt16x2_x.type = Type::FullType{ UInt16x2Type.name };
    max_UInt16x2_y.name = "y"_c;
    max_UInt16x2_y.type = Type::FullType{ UInt16x2Type.name };
    max_UInt16x2.documentation = "Returns the maximum of x and y."_c;
    max_UInt16x2.name = max_UInt16x2_name;
    max_UInt16x2.backendIndex = 1651;
    max_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    max_UInt16x2.parameters = max_UInt16x2_args;
    Symbol::Resolved(&max_UInt16x2_x)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&max_UInt16x2_y)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&max_UInt16x2)->signature = "max(u16x2,u16x2) u16x2"_c;
    Symbol::Resolved(&max_UInt16x2)->name = "max(u16x2,u16x2)"_c;
    Symbol::Resolved(&max_UInt16x2)->nameWithVarNames = "max(x : u16x2, y : u16x2)"_c;
    Symbol::Resolved(&max_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// max with UInt16x3, UInt16x3
    max_UInt16x3_x.name = "x"_c;
    max_UInt16x3_x.type = Type::FullType{ UInt16x3Type.name };
    max_UInt16x3_y.name = "y"_c;
    max_UInt16x3_y.type = Type::FullType{ UInt16x3Type.name };
    max_UInt16x3.documentation = "Returns the maximum of x and y."_c;
    max_UInt16x3.name = max_UInt16x3_name;
    max_UInt16x3.backendIndex = 1652;
    max_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    max_UInt16x3.parameters = max_UInt16x3_args;
    Symbol::Resolved(&max_UInt16x3_x)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&max_UInt16x3_y)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&max_UInt16x3)->signature = "max(u16x3,u16x3) u16x3"_c;
    Symbol::Resolved(&max_UInt16x3)->name = "max(u16x3,u16x3)"_c;
    Symbol::Resolved(&max_UInt16x3)->nameWithVarNames = "max(x : u16x3, y : u16x3)"_c;
    Symbol::Resolved(&max_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// max with UInt16x4, UInt16x4
    max_UInt16x4_x.name = "x"_c;
    max_UInt16x4_x.type = Type::FullType{ UInt16x4Type.name };
    max_UInt16x4_y.name = "y"_c;
    max_UInt16x4_y.type = Type::FullType{ UInt16x4Type.name };
    max_UInt16x4.documentation = "Returns the maximum of x and y."_c;
    max_UInt16x4.name = max_UInt16x4_name;
    max_UInt16x4.backendIndex = 1653;
    max_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    max_UInt16x4.parameters = max_UInt16x4_args;
    Symbol::Resolved(&max_UInt16x4_x)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&max_UInt16x4_y)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&max_UInt16x4)->signature = "max(u16x4,u16x4) u16x4"_c;
    Symbol::Resolved(&max_UInt16x4)->name = "max(u16x4,u16x4)"_c;
    Symbol::Resolved(&max_UInt16x4)->nameWithVarNames = "max(x : u16x4, y : u16x4)"_c;
    Symbol::Resolved(&max_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// clamp with Float32, Float32, Float32
    clamp_Float32_val.name = "val"_c;
    clamp_Float32_val.type = Type::FullType{ Float32Type.name };
    clamp_Float32_min.name = "min"_c;
    clamp_Float32_min.type = Type::FullType{ Float32Type.name };
    clamp_Float32_max.name = "max"_c;
    clamp_Float32_max.type = Type::FullType{ Float32Type.name };
    clamp_Float32.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float32.name = clamp_Float32_name;
    clamp_Float32.backendIndex = 1654;
    clamp_Float32.returnType = Type::FullType { Float32Type.name };
    clamp_Float32.parameters = clamp_Float32_args;
    Symbol::Resolved(&clamp_Float32_val)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32_min)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32_max)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32)->signature = "clamp(f32,f32,f32) f32"_c;
    Symbol::Resolved(&clamp_Float32)->name = "clamp(f32,f32,f32)"_c;
    Symbol::Resolved(&clamp_Float32)->nameWithVarNames = "clamp(val : f32, min : f32, max : f32)"_c;
    Symbol::Resolved(&clamp_Float32)->returnTypeSymbol = &Float32Type;

    /// clamp with Float32x2, Float32x2, Float32x2
    clamp_Float32x2_val.name = "val"_c;
    clamp_Float32x2_val.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2_min.name = "min"_c;
    clamp_Float32x2_min.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2_max.name = "max"_c;
    clamp_Float32x2_max.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float32x2.name = clamp_Float32x2_name;
    clamp_Float32x2.backendIndex = 1655;
    clamp_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    clamp_Float32x2.parameters = clamp_Float32x2_args;
    Symbol::Resolved(&clamp_Float32x2_val)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2_min)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2_max)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2)->signature = "clamp(f32x2,f32x2,f32x2) f32x2"_c;
    Symbol::Resolved(&clamp_Float32x2)->name = "clamp(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&clamp_Float32x2)->nameWithVarNames = "clamp(val : f32x2, min : f32x2, max : f32x2)"_c;
    Symbol::Resolved(&clamp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// clamp with Float32x3, Float32x3, Float32x3
    clamp_Float32x3_val.name = "val"_c;
    clamp_Float32x3_val.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3_min.name = "min"_c;
    clamp_Float32x3_min.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3_max.name = "max"_c;
    clamp_Float32x3_max.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float32x3.name = clamp_Float32x3_name;
    clamp_Float32x3.backendIndex = 1656;
    clamp_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    clamp_Float32x3.parameters = clamp_Float32x3_args;
    Symbol::Resolved(&clamp_Float32x3_val)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3_min)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3_max)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3)->signature = "clamp(f32x3,f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&clamp_Float32x3)->name = "clamp(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&clamp_Float32x3)->nameWithVarNames = "clamp(val : f32x3, min : f32x3, max : f32x3)"_c;
    Symbol::Resolved(&clamp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// clamp with Float32x4, Float32x4, Float32x4
    clamp_Float32x4_val.name = "val"_c;
    clamp_Float32x4_val.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4_min.name = "min"_c;
    clamp_Float32x4_min.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4_max.name = "max"_c;
    clamp_Float32x4_max.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float32x4.name = clamp_Float32x4_name;
    clamp_Float32x4.backendIndex = 1657;
    clamp_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    clamp_Float32x4.parameters = clamp_Float32x4_args;
    Symbol::Resolved(&clamp_Float32x4_val)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4_min)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4_max)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4)->signature = "clamp(f32x4,f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&clamp_Float32x4)->name = "clamp(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&clamp_Float32x4)->nameWithVarNames = "clamp(val : f32x4, min : f32x4, max : f32x4)"_c;
    Symbol::Resolved(&clamp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// clamp with Float16, Float16, Float16
    clamp_Float16_val.name = "val"_c;
    clamp_Float16_val.type = Type::FullType{ Float16Type.name };
    clamp_Float16_min.name = "min"_c;
    clamp_Float16_min.type = Type::FullType{ Float16Type.name };
    clamp_Float16_max.name = "max"_c;
    clamp_Float16_max.type = Type::FullType{ Float16Type.name };
    clamp_Float16.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float16.name = clamp_Float16_name;
    clamp_Float16.backendIndex = 1658;
    clamp_Float16.returnType = Type::FullType { Float16Type.name };
    clamp_Float16.parameters = clamp_Float16_args;
    Symbol::Resolved(&clamp_Float16_val)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16_min)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16_max)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16)->signature = "clamp(f16,f16,f16) f16"_c;
    Symbol::Resolved(&clamp_Float16)->name = "clamp(f16,f16,f16)"_c;
    Symbol::Resolved(&clamp_Float16)->nameWithVarNames = "clamp(val : f16, min : f16, max : f16)"_c;
    Symbol::Resolved(&clamp_Float16)->returnTypeSymbol = &Float16Type;

    /// clamp with Float16x2, Float16x2, Float16x2
    clamp_Float16x2_val.name = "val"_c;
    clamp_Float16x2_val.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2_min.name = "min"_c;
    clamp_Float16x2_min.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2_max.name = "max"_c;
    clamp_Float16x2_max.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float16x2.name = clamp_Float16x2_name;
    clamp_Float16x2.backendIndex = 1659;
    clamp_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    clamp_Float16x2.parameters = clamp_Float16x2_args;
    Symbol::Resolved(&clamp_Float16x2_val)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2_min)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2_max)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2)->signature = "clamp(f16x2,f16x2,f16x2) f16x2"_c;
    Symbol::Resolved(&clamp_Float16x2)->name = "clamp(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&clamp_Float16x2)->nameWithVarNames = "clamp(val : f16x2, min : f16x2, max : f16x2)"_c;
    Symbol::Resolved(&clamp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// clamp with Float16x3, Float16x3, Float16x3
    clamp_Float16x3_val.name = "val"_c;
    clamp_Float16x3_val.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3_min.name = "min"_c;
    clamp_Float16x3_min.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3_max.name = "max"_c;
    clamp_Float16x3_max.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float16x3.name = clamp_Float16x3_name;
    clamp_Float16x3.backendIndex = 1660;
    clamp_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    clamp_Float16x3.parameters = clamp_Float16x3_args;
    Symbol::Resolved(&clamp_Float16x3_val)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3_min)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3_max)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3)->signature = "clamp(f16x3,f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&clamp_Float16x3)->name = "clamp(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&clamp_Float16x3)->nameWithVarNames = "clamp(val : f16x3, min : f16x3, max : f16x3)"_c;
    Symbol::Resolved(&clamp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// clamp with Float16x4, Float16x4, Float16x4
    clamp_Float16x4_val.name = "val"_c;
    clamp_Float16x4_val.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4_min.name = "min"_c;
    clamp_Float16x4_min.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4_max.name = "max"_c;
    clamp_Float16x4_max.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float16x4.name = clamp_Float16x4_name;
    clamp_Float16x4.backendIndex = 1661;
    clamp_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    clamp_Float16x4.parameters = clamp_Float16x4_args;
    Symbol::Resolved(&clamp_Float16x4_val)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4_min)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4_max)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4)->signature = "clamp(f16x4,f16x4,f16x4) f16x4"_c;
    Symbol::Resolved(&clamp_Float16x4)->name = "clamp(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&clamp_Float16x4)->nameWithVarNames = "clamp(val : f16x4, min : f16x4, max : f16x4)"_c;
    Symbol::Resolved(&clamp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// clamp with Int32, Int32, Int32
    clamp_Int32_val.name = "val"_c;
    clamp_Int32_val.type = Type::FullType{ Int32Type.name };
    clamp_Int32_min.name = "min"_c;
    clamp_Int32_min.type = Type::FullType{ Int32Type.name };
    clamp_Int32_max.name = "max"_c;
    clamp_Int32_max.type = Type::FullType{ Int32Type.name };
    clamp_Int32.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int32.name = clamp_Int32_name;
    clamp_Int32.backendIndex = 1662;
    clamp_Int32.returnType = Type::FullType { Int32Type.name };
    clamp_Int32.parameters = clamp_Int32_args;
    Symbol::Resolved(&clamp_Int32_val)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32_min)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32_max)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32)->signature = "clamp(i32,i32,i32) i32"_c;
    Symbol::Resolved(&clamp_Int32)->name = "clamp(i32,i32,i32)"_c;
    Symbol::Resolved(&clamp_Int32)->nameWithVarNames = "clamp(val : i32, min : i32, max : i32)"_c;
    Symbol::Resolved(&clamp_Int32)->returnTypeSymbol = &Int32Type;

    /// clamp with Int32x2, Int32x2, Int32x2
    clamp_Int32x2_val.name = "val"_c;
    clamp_Int32x2_val.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2_min.name = "min"_c;
    clamp_Int32x2_min.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2_max.name = "max"_c;
    clamp_Int32x2_max.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int32x2.name = clamp_Int32x2_name;
    clamp_Int32x2.backendIndex = 1663;
    clamp_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    clamp_Int32x2.parameters = clamp_Int32x2_args;
    Symbol::Resolved(&clamp_Int32x2_val)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2_min)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2_max)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2)->signature = "clamp(i32x2,i32x2,i32x2) i32x2"_c;
    Symbol::Resolved(&clamp_Int32x2)->name = "clamp(i32x2,i32x2,i32x2)"_c;
    Symbol::Resolved(&clamp_Int32x2)->nameWithVarNames = "clamp(val : i32x2, min : i32x2, max : i32x2)"_c;
    Symbol::Resolved(&clamp_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// clamp with Int32x3, Int32x3, Int32x3
    clamp_Int32x3_val.name = "val"_c;
    clamp_Int32x3_val.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3_min.name = "min"_c;
    clamp_Int32x3_min.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3_max.name = "max"_c;
    clamp_Int32x3_max.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int32x3.name = clamp_Int32x3_name;
    clamp_Int32x3.backendIndex = 1664;
    clamp_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    clamp_Int32x3.parameters = clamp_Int32x3_args;
    Symbol::Resolved(&clamp_Int32x3_val)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3_min)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3_max)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3)->signature = "clamp(i32x3,i32x3,i32x3) i32x3"_c;
    Symbol::Resolved(&clamp_Int32x3)->name = "clamp(i32x3,i32x3,i32x3)"_c;
    Symbol::Resolved(&clamp_Int32x3)->nameWithVarNames = "clamp(val : i32x3, min : i32x3, max : i32x3)"_c;
    Symbol::Resolved(&clamp_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// clamp with Int32x4, Int32x4, Int32x4
    clamp_Int32x4_val.name = "val"_c;
    clamp_Int32x4_val.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4_min.name = "min"_c;
    clamp_Int32x4_min.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4_max.name = "max"_c;
    clamp_Int32x4_max.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int32x4.name = clamp_Int32x4_name;
    clamp_Int32x4.backendIndex = 1665;
    clamp_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    clamp_Int32x4.parameters = clamp_Int32x4_args;
    Symbol::Resolved(&clamp_Int32x4_val)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4_min)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4_max)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4)->signature = "clamp(i32x4,i32x4,i32x4) i32x4"_c;
    Symbol::Resolved(&clamp_Int32x4)->name = "clamp(i32x4,i32x4,i32x4)"_c;
    Symbol::Resolved(&clamp_Int32x4)->nameWithVarNames = "clamp(val : i32x4, min : i32x4, max : i32x4)"_c;
    Symbol::Resolved(&clamp_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// clamp with Int16, Int16, Int16
    clamp_Int16_val.name = "val"_c;
    clamp_Int16_val.type = Type::FullType{ Int16Type.name };
    clamp_Int16_min.name = "min"_c;
    clamp_Int16_min.type = Type::FullType{ Int16Type.name };
    clamp_Int16_max.name = "max"_c;
    clamp_Int16_max.type = Type::FullType{ Int16Type.name };
    clamp_Int16.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int16.name = clamp_Int16_name;
    clamp_Int16.backendIndex = 1666;
    clamp_Int16.returnType = Type::FullType { Int16Type.name };
    clamp_Int16.parameters = clamp_Int16_args;
    Symbol::Resolved(&clamp_Int16_val)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16_min)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16_max)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16)->signature = "clamp(i16,i16,i16) i16"_c;
    Symbol::Resolved(&clamp_Int16)->name = "clamp(i16,i16,i16)"_c;
    Symbol::Resolved(&clamp_Int16)->nameWithVarNames = "clamp(val : i16, min : i16, max : i16)"_c;
    Symbol::Resolved(&clamp_Int16)->returnTypeSymbol = &Int16Type;

    /// clamp with Int16x2, Int16x2, Int16x2
    clamp_Int16x2_val.name = "val"_c;
    clamp_Int16x2_val.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2_min.name = "min"_c;
    clamp_Int16x2_min.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2_max.name = "max"_c;
    clamp_Int16x2_max.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int16x2.name = clamp_Int16x2_name;
    clamp_Int16x2.backendIndex = 1667;
    clamp_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    clamp_Int16x2.parameters = clamp_Int16x2_args;
    Symbol::Resolved(&clamp_Int16x2_val)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2_min)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2_max)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2)->signature = "clamp(i16x2,i16x2,i16x2) i16x2"_c;
    Symbol::Resolved(&clamp_Int16x2)->name = "clamp(i16x2,i16x2,i16x2)"_c;
    Symbol::Resolved(&clamp_Int16x2)->nameWithVarNames = "clamp(val : i16x2, min : i16x2, max : i16x2)"_c;
    Symbol::Resolved(&clamp_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// clamp with Int16x3, Int16x3, Int16x3
    clamp_Int16x3_val.name = "val"_c;
    clamp_Int16x3_val.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3_min.name = "min"_c;
    clamp_Int16x3_min.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3_max.name = "max"_c;
    clamp_Int16x3_max.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int16x3.name = clamp_Int16x3_name;
    clamp_Int16x3.backendIndex = 1668;
    clamp_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    clamp_Int16x3.parameters = clamp_Int16x3_args;
    Symbol::Resolved(&clamp_Int16x3_val)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3_min)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3_max)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3)->signature = "clamp(i16x3,i16x3,i16x3) i16x3"_c;
    Symbol::Resolved(&clamp_Int16x3)->name = "clamp(i16x3,i16x3,i16x3)"_c;
    Symbol::Resolved(&clamp_Int16x3)->nameWithVarNames = "clamp(val : i16x3, min : i16x3, max : i16x3)"_c;
    Symbol::Resolved(&clamp_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// clamp with Int16x4, Int16x4, Int16x4
    clamp_Int16x4_val.name = "val"_c;
    clamp_Int16x4_val.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4_min.name = "min"_c;
    clamp_Int16x4_min.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4_max.name = "max"_c;
    clamp_Int16x4_max.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int16x4.name = clamp_Int16x4_name;
    clamp_Int16x4.backendIndex = 1669;
    clamp_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    clamp_Int16x4.parameters = clamp_Int16x4_args;
    Symbol::Resolved(&clamp_Int16x4_val)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4_min)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4_max)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4)->signature = "clamp(i16x4,i16x4,i16x4) i16x4"_c;
    Symbol::Resolved(&clamp_Int16x4)->name = "clamp(i16x4,i16x4,i16x4)"_c;
    Symbol::Resolved(&clamp_Int16x4)->nameWithVarNames = "clamp(val : i16x4, min : i16x4, max : i16x4)"_c;
    Symbol::Resolved(&clamp_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// clamp with UInt32, UInt32, UInt32
    clamp_UInt32_val.name = "val"_c;
    clamp_UInt32_val.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32_min.name = "min"_c;
    clamp_UInt32_min.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32_max.name = "max"_c;
    clamp_UInt32_max.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt32.name = clamp_UInt32_name;
    clamp_UInt32.backendIndex = 1670;
    clamp_UInt32.returnType = Type::FullType { UInt32Type.name };
    clamp_UInt32.parameters = clamp_UInt32_args;
    Symbol::Resolved(&clamp_UInt32_val)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32_min)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32_max)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32)->signature = "clamp(u32,u32,u32) u32"_c;
    Symbol::Resolved(&clamp_UInt32)->name = "clamp(u32,u32,u32)"_c;
    Symbol::Resolved(&clamp_UInt32)->nameWithVarNames = "clamp(val : u32, min : u32, max : u32)"_c;
    Symbol::Resolved(&clamp_UInt32)->returnTypeSymbol = &UInt32Type;

    /// clamp with UInt32x2, UInt32x2, UInt32x2
    clamp_UInt32x2_val.name = "val"_c;
    clamp_UInt32x2_val.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2_min.name = "min"_c;
    clamp_UInt32x2_min.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2_max.name = "max"_c;
    clamp_UInt32x2_max.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt32x2.name = clamp_UInt32x2_name;
    clamp_UInt32x2.backendIndex = 1671;
    clamp_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    clamp_UInt32x2.parameters = clamp_UInt32x2_args;
    Symbol::Resolved(&clamp_UInt32x2_val)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2_min)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2_max)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2)->signature = "clamp(u32x2,u32x2,u32x2) u32x2"_c;
    Symbol::Resolved(&clamp_UInt32x2)->name = "clamp(u32x2,u32x2,u32x2)"_c;
    Symbol::Resolved(&clamp_UInt32x2)->nameWithVarNames = "clamp(val : u32x2, min : u32x2, max : u32x2)"_c;
    Symbol::Resolved(&clamp_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// clamp with UInt32x3, UInt32x3, UInt32x3
    clamp_UInt32x3_val.name = "val"_c;
    clamp_UInt32x3_val.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3_min.name = "min"_c;
    clamp_UInt32x3_min.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3_max.name = "max"_c;
    clamp_UInt32x3_max.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt32x3.name = clamp_UInt32x3_name;
    clamp_UInt32x3.backendIndex = 1672;
    clamp_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    clamp_UInt32x3.parameters = clamp_UInt32x3_args;
    Symbol::Resolved(&clamp_UInt32x3_val)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3_min)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3_max)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3)->signature = "clamp(u32x3,u32x3,u32x3) u32x3"_c;
    Symbol::Resolved(&clamp_UInt32x3)->name = "clamp(u32x3,u32x3,u32x3)"_c;
    Symbol::Resolved(&clamp_UInt32x3)->nameWithVarNames = "clamp(val : u32x3, min : u32x3, max : u32x3)"_c;
    Symbol::Resolved(&clamp_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// clamp with UInt32x4, UInt32x4, UInt32x4
    clamp_UInt32x4_val.name = "val"_c;
    clamp_UInt32x4_val.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4_min.name = "min"_c;
    clamp_UInt32x4_min.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4_max.name = "max"_c;
    clamp_UInt32x4_max.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt32x4.name = clamp_UInt32x4_name;
    clamp_UInt32x4.backendIndex = 1673;
    clamp_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    clamp_UInt32x4.parameters = clamp_UInt32x4_args;
    Symbol::Resolved(&clamp_UInt32x4_val)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4_min)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4_max)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4)->signature = "clamp(u32x4,u32x4,u32x4) u32x4"_c;
    Symbol::Resolved(&clamp_UInt32x4)->name = "clamp(u32x4,u32x4,u32x4)"_c;
    Symbol::Resolved(&clamp_UInt32x4)->nameWithVarNames = "clamp(val : u32x4, min : u32x4, max : u32x4)"_c;
    Symbol::Resolved(&clamp_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// clamp with UInt16, UInt16, UInt16
    clamp_UInt16_val.name = "val"_c;
    clamp_UInt16_val.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16_min.name = "min"_c;
    clamp_UInt16_min.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16_max.name = "max"_c;
    clamp_UInt16_max.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt16.name = clamp_UInt16_name;
    clamp_UInt16.backendIndex = 1674;
    clamp_UInt16.returnType = Type::FullType { UInt16Type.name };
    clamp_UInt16.parameters = clamp_UInt16_args;
    Symbol::Resolved(&clamp_UInt16_val)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16_min)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16_max)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16)->signature = "clamp(u16,u16,u16) u16"_c;
    Symbol::Resolved(&clamp_UInt16)->name = "clamp(u16,u16,u16)"_c;
    Symbol::Resolved(&clamp_UInt16)->nameWithVarNames = "clamp(val : u16, min : u16, max : u16)"_c;
    Symbol::Resolved(&clamp_UInt16)->returnTypeSymbol = &UInt16Type;

    /// clamp with UInt16x2, UInt16x2, UInt16x2
    clamp_UInt16x2_val.name = "val"_c;
    clamp_UInt16x2_val.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2_min.name = "min"_c;
    clamp_UInt16x2_min.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2_max.name = "max"_c;
    clamp_UInt16x2_max.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt16x2.name = clamp_UInt16x2_name;
    clamp_UInt16x2.backendIndex = 1675;
    clamp_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    clamp_UInt16x2.parameters = clamp_UInt16x2_args;
    Symbol::Resolved(&clamp_UInt16x2_val)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2_min)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2_max)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2)->signature = "clamp(u16x2,u16x2,u16x2) u16x2"_c;
    Symbol::Resolved(&clamp_UInt16x2)->name = "clamp(u16x2,u16x2,u16x2)"_c;
    Symbol::Resolved(&clamp_UInt16x2)->nameWithVarNames = "clamp(val : u16x2, min : u16x2, max : u16x2)"_c;
    Symbol::Resolved(&clamp_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// clamp with UInt16x3, UInt16x3, UInt16x3
    clamp_UInt16x3_val.name = "val"_c;
    clamp_UInt16x3_val.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3_min.name = "min"_c;
    clamp_UInt16x3_min.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3_max.name = "max"_c;
    clamp_UInt16x3_max.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt16x3.name = clamp_UInt16x3_name;
    clamp_UInt16x3.backendIndex = 1676;
    clamp_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    clamp_UInt16x3.parameters = clamp_UInt16x3_args;
    Symbol::Resolved(&clamp_UInt16x3_val)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3_min)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3_max)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3)->signature = "clamp(u16x3,u16x3,u16x3) u16x3"_c;
    Symbol::Resolved(&clamp_UInt16x3)->name = "clamp(u16x3,u16x3,u16x3)"_c;
    Symbol::Resolved(&clamp_UInt16x3)->nameWithVarNames = "clamp(val : u16x3, min : u16x3, max : u16x3)"_c;
    Symbol::Resolved(&clamp_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// clamp with UInt16x4, UInt16x4, UInt16x4
    clamp_UInt16x4_val.name = "val"_c;
    clamp_UInt16x4_val.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4_min.name = "min"_c;
    clamp_UInt16x4_min.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4_max.name = "max"_c;
    clamp_UInt16x4_max.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt16x4.name = clamp_UInt16x4_name;
    clamp_UInt16x4.backendIndex = 1677;
    clamp_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    clamp_UInt16x4.parameters = clamp_UInt16x4_args;
    Symbol::Resolved(&clamp_UInt16x4_val)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4_min)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4_max)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4)->signature = "clamp(u16x4,u16x4,u16x4) u16x4"_c;
    Symbol::Resolved(&clamp_UInt16x4)->name = "clamp(u16x4,u16x4,u16x4)"_c;
    Symbol::Resolved(&clamp_UInt16x4)->nameWithVarNames = "clamp(val : u16x4, min : u16x4, max : u16x4)"_c;
    Symbol::Resolved(&clamp_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// lerp with Float32, Float32, Float32
    lerp_Float32_a.name = "a"_c;
    lerp_Float32_a.type = Type::FullType{ Float32Type.name };
    lerp_Float32_b.name = "b"_c;
    lerp_Float32_b.type = Type::FullType{ Float32Type.name };
    lerp_Float32_t.name = "t"_c;
    lerp_Float32_t.type = Type::FullType{ Float32Type.name };
    lerp_Float32.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float32.name = lerp_Float32_name;
    lerp_Float32.backendIndex = 1678;
    lerp_Float32.returnType = Type::FullType { Float32Type.name };
    lerp_Float32.parameters = lerp_Float32_args;
    Symbol::Resolved(&lerp_Float32_a)->typeSymbol = &Float32Type;
    Symbol::Resolved(&lerp_Float32_b)->typeSymbol = &Float32Type;
    Symbol::Resolved(&lerp_Float32_t)->typeSymbol = &Float32Type;
    Symbol::Resolved(&lerp_Float32)->signature = "lerp(f32,f32,f32) f32"_c;
    Symbol::Resolved(&lerp_Float32)->name = "lerp(f32,f32,f32)"_c;
    Symbol::Resolved(&lerp_Float32)->nameWithVarNames = "lerp(a : f32, b : f32, t : f32)"_c;
    Symbol::Resolved(&lerp_Float32)->returnTypeSymbol = &Float32Type;

    /// lerp with Float32x2, Float32x2, Float32x2
    lerp_Float32x2_a.name = "a"_c;
    lerp_Float32x2_a.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2_b.name = "b"_c;
    lerp_Float32x2_b.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2_t.name = "t"_c;
    lerp_Float32x2_t.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float32x2.name = lerp_Float32x2_name;
    lerp_Float32x2.backendIndex = 1679;
    lerp_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    lerp_Float32x2.parameters = lerp_Float32x2_args;
    Symbol::Resolved(&lerp_Float32x2_a)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2_b)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2_t)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2)->signature = "lerp(f32x2,f32x2,f32x2) f32x2"_c;
    Symbol::Resolved(&lerp_Float32x2)->name = "lerp(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&lerp_Float32x2)->nameWithVarNames = "lerp(a : f32x2, b : f32x2, t : f32x2)"_c;
    Symbol::Resolved(&lerp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// lerp with Float32x3, Float32x3, Float32x3
    lerp_Float32x3_a.name = "a"_c;
    lerp_Float32x3_a.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3_b.name = "b"_c;
    lerp_Float32x3_b.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3_t.name = "t"_c;
    lerp_Float32x3_t.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float32x3.name = lerp_Float32x3_name;
    lerp_Float32x3.backendIndex = 1680;
    lerp_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    lerp_Float32x3.parameters = lerp_Float32x3_args;
    Symbol::Resolved(&lerp_Float32x3_a)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3_b)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3_t)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3)->signature = "lerp(f32x3,f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&lerp_Float32x3)->name = "lerp(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&lerp_Float32x3)->nameWithVarNames = "lerp(a : f32x3, b : f32x3, t : f32x3)"_c;
    Symbol::Resolved(&lerp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// lerp with Float32x4, Float32x4, Float32x4
    lerp_Float32x4_a.name = "a"_c;
    lerp_Float32x4_a.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4_b.name = "b"_c;
    lerp_Float32x4_b.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4_t.name = "t"_c;
    lerp_Float32x4_t.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float32x4.name = lerp_Float32x4_name;
    lerp_Float32x4.backendIndex = 1681;
    lerp_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    lerp_Float32x4.parameters = lerp_Float32x4_args;
    Symbol::Resolved(&lerp_Float32x4_a)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4_b)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4_t)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4)->signature = "lerp(f32x4,f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&lerp_Float32x4)->name = "lerp(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&lerp_Float32x4)->nameWithVarNames = "lerp(a : f32x4, b : f32x4, t : f32x4)"_c;
    Symbol::Resolved(&lerp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// lerp with Float16, Float16, Float16
    lerp_Float16_a.name = "a"_c;
    lerp_Float16_a.type = Type::FullType{ Float16Type.name };
    lerp_Float16_b.name = "b"_c;
    lerp_Float16_b.type = Type::FullType{ Float16Type.name };
    lerp_Float16_t.name = "t"_c;
    lerp_Float16_t.type = Type::FullType{ Float16Type.name };
    lerp_Float16.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float16.name = lerp_Float16_name;
    lerp_Float16.backendIndex = 1682;
    lerp_Float16.returnType = Type::FullType { Float16Type.name };
    lerp_Float16.parameters = lerp_Float16_args;
    Symbol::Resolved(&lerp_Float16_a)->typeSymbol = &Float16Type;
    Symbol::Resolved(&lerp_Float16_b)->typeSymbol = &Float16Type;
    Symbol::Resolved(&lerp_Float16_t)->typeSymbol = &Float16Type;
    Symbol::Resolved(&lerp_Float16)->signature = "lerp(f16,f16,f16) f16"_c;
    Symbol::Resolved(&lerp_Float16)->name = "lerp(f16,f16,f16)"_c;
    Symbol::Resolved(&lerp_Float16)->nameWithVarNames = "lerp(a : f16, b : f16, t : f16)"_c;
    Symbol::Resolved(&lerp_Float16)->returnTypeSymbol = &Float16Type;

    /// lerp with Float16x2, Float16x2, Float16x2
    lerp_Float16x2_a.name = "a"_c;
    lerp_Float16x2_a.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2_b.name = "b"_c;
    lerp_Float16x2_b.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2_t.name = "t"_c;
    lerp_Float16x2_t.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float16x2.name = lerp_Float16x2_name;
    lerp_Float16x2.backendIndex = 1683;
    lerp_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    lerp_Float16x2.parameters = lerp_Float16x2_args;
    Symbol::Resolved(&lerp_Float16x2_a)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2_b)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2_t)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2)->signature = "lerp(f16x2,f16x2,f16x2) f16x2"_c;
    Symbol::Resolved(&lerp_Float16x2)->name = "lerp(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&lerp_Float16x2)->nameWithVarNames = "lerp(a : f16x2, b : f16x2, t : f16x2)"_c;
    Symbol::Resolved(&lerp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// lerp with Float16x3, Float16x3, Float16x3
    lerp_Float16x3_a.name = "a"_c;
    lerp_Float16x3_a.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3_b.name = "b"_c;
    lerp_Float16x3_b.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3_t.name = "t"_c;
    lerp_Float16x3_t.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float16x3.name = lerp_Float16x3_name;
    lerp_Float16x3.backendIndex = 1684;
    lerp_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    lerp_Float16x3.parameters = lerp_Float16x3_args;
    Symbol::Resolved(&lerp_Float16x3_a)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3_b)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3_t)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3)->signature = "lerp(f16x3,f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&lerp_Float16x3)->name = "lerp(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&lerp_Float16x3)->nameWithVarNames = "lerp(a : f16x3, b : f16x3, t : f16x3)"_c;
    Symbol::Resolved(&lerp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// lerp with Float16x4, Float16x4, Float16x4
    lerp_Float16x4_a.name = "a"_c;
    lerp_Float16x4_a.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4_b.name = "b"_c;
    lerp_Float16x4_b.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4_t.name = "t"_c;
    lerp_Float16x4_t.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float16x4.name = lerp_Float16x4_name;
    lerp_Float16x4.backendIndex = 1685;
    lerp_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    lerp_Float16x4.parameters = lerp_Float16x4_args;
    Symbol::Resolved(&lerp_Float16x4_a)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4_b)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4_t)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4)->signature = "lerp(f16x4,f16x4,f16x4) f16x4"_c;
    Symbol::Resolved(&lerp_Float16x4)->name = "lerp(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&lerp_Float16x4)->nameWithVarNames = "lerp(a : f16x4, b : f16x4, t : f16x4)"_c;
    Symbol::Resolved(&lerp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// step with Float32, Float32
    step_Float32_edge.name = "edge"_c;
    step_Float32_edge.type = Type::FullType{ Float32Type.name };
    step_Float32_x.name = "x"_c;
    step_Float32_x.type = Type::FullType{ Float32Type.name };
    step_Float32.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float32.name = step_Float32_name;
    step_Float32.backendIndex = 1686;
    step_Float32.returnType = Type::FullType { Float32Type.name };
    step_Float32.parameters = step_Float32_args;
    Symbol::Resolved(&step_Float32_edge)->typeSymbol = &Float32Type;
    Symbol::Resolved(&step_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&step_Float32)->signature = "step(f32,f32) f32"_c;
    Symbol::Resolved(&step_Float32)->name = "step(f32,f32)"_c;
    Symbol::Resolved(&step_Float32)->nameWithVarNames = "step(edge : f32, x : f32)"_c;
    Symbol::Resolved(&step_Float32)->returnTypeSymbol = &Float32Type;

    /// step with Float32x2, Float32x2
    step_Float32x2_edge.name = "edge"_c;
    step_Float32x2_edge.type = Type::FullType{ Float32x2Type.name };
    step_Float32x2_x.name = "x"_c;
    step_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    step_Float32x2.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float32x2.name = step_Float32x2_name;
    step_Float32x2.backendIndex = 1687;
    step_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    step_Float32x2.parameters = step_Float32x2_args;
    Symbol::Resolved(&step_Float32x2_edge)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&step_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&step_Float32x2)->signature = "step(f32x2,f32x2) f32x2"_c;
    Symbol::Resolved(&step_Float32x2)->name = "step(f32x2,f32x2)"_c;
    Symbol::Resolved(&step_Float32x2)->nameWithVarNames = "step(edge : f32x2, x : f32x2)"_c;
    Symbol::Resolved(&step_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// step with Float32x3, Float32x3
    step_Float32x3_edge.name = "edge"_c;
    step_Float32x3_edge.type = Type::FullType{ Float32x3Type.name };
    step_Float32x3_x.name = "x"_c;
    step_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    step_Float32x3.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float32x3.name = step_Float32x3_name;
    step_Float32x3.backendIndex = 1688;
    step_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    step_Float32x3.parameters = step_Float32x3_args;
    Symbol::Resolved(&step_Float32x3_edge)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&step_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&step_Float32x3)->signature = "step(f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&step_Float32x3)->name = "step(f32x3,f32x3)"_c;
    Symbol::Resolved(&step_Float32x3)->nameWithVarNames = "step(edge : f32x3, x : f32x3)"_c;
    Symbol::Resolved(&step_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// step with Float32x4, Float32x4
    step_Float32x4_edge.name = "edge"_c;
    step_Float32x4_edge.type = Type::FullType{ Float32x4Type.name };
    step_Float32x4_x.name = "x"_c;
    step_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    step_Float32x4.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float32x4.name = step_Float32x4_name;
    step_Float32x4.backendIndex = 1689;
    step_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    step_Float32x4.parameters = step_Float32x4_args;
    Symbol::Resolved(&step_Float32x4_edge)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&step_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&step_Float32x4)->signature = "step(f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&step_Float32x4)->name = "step(f32x4,f32x4)"_c;
    Symbol::Resolved(&step_Float32x4)->nameWithVarNames = "step(edge : f32x4, x : f32x4)"_c;
    Symbol::Resolved(&step_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// step with Float16, Float16
    step_Float16_edge.name = "edge"_c;
    step_Float16_edge.type = Type::FullType{ Float16Type.name };
    step_Float16_x.name = "x"_c;
    step_Float16_x.type = Type::FullType{ Float16Type.name };
    step_Float16.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float16.name = step_Float16_name;
    step_Float16.backendIndex = 1690;
    step_Float16.returnType = Type::FullType { Float16Type.name };
    step_Float16.parameters = step_Float16_args;
    Symbol::Resolved(&step_Float16_edge)->typeSymbol = &Float16Type;
    Symbol::Resolved(&step_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&step_Float16)->signature = "step(f16,f16) f16"_c;
    Symbol::Resolved(&step_Float16)->name = "step(f16,f16)"_c;
    Symbol::Resolved(&step_Float16)->nameWithVarNames = "step(edge : f16, x : f16)"_c;
    Symbol::Resolved(&step_Float16)->returnTypeSymbol = &Float16Type;

    /// step with Float16x2, Float16x2
    step_Float16x2_edge.name = "edge"_c;
    step_Float16x2_edge.type = Type::FullType{ Float16x2Type.name };
    step_Float16x2_x.name = "x"_c;
    step_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    step_Float16x2.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float16x2.name = step_Float16x2_name;
    step_Float16x2.backendIndex = 1691;
    step_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    step_Float16x2.parameters = step_Float16x2_args;
    Symbol::Resolved(&step_Float16x2_edge)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&step_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&step_Float16x2)->signature = "step(f16x2,f16x2) f16x2"_c;
    Symbol::Resolved(&step_Float16x2)->name = "step(f16x2,f16x2)"_c;
    Symbol::Resolved(&step_Float16x2)->nameWithVarNames = "step(edge : f16x2, x : f16x2)"_c;
    Symbol::Resolved(&step_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// step with Float16x3, Float16x3
    step_Float16x3_edge.name = "edge"_c;
    step_Float16x3_edge.type = Type::FullType{ Float16x3Type.name };
    step_Float16x3_x.name = "x"_c;
    step_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    step_Float16x3.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float16x3.name = step_Float16x3_name;
    step_Float16x3.backendIndex = 1692;
    step_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    step_Float16x3.parameters = step_Float16x3_args;
    Symbol::Resolved(&step_Float16x3_edge)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&step_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&step_Float16x3)->signature = "step(f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&step_Float16x3)->name = "step(f16x3,f16x3)"_c;
    Symbol::Resolved(&step_Float16x3)->nameWithVarNames = "step(edge : f16x3, x : f16x3)"_c;
    Symbol::Resolved(&step_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// step with Float16x4, Float16x4
    step_Float16x4_edge.name = "edge"_c;
    step_Float16x4_edge.type = Type::FullType{ Float16x4Type.name };
    step_Float16x4_x.name = "x"_c;
    step_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    step_Float16x4.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float16x4.name = step_Float16x4_name;
    step_Float16x4.backendIndex = 1693;
    step_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    step_Float16x4.parameters = step_Float16x4_args;
    Symbol::Resolved(&step_Float16x4_edge)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&step_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&step_Float16x4)->signature = "step(f16x4,f16x4) f16x4"_c;
    Symbol::Resolved(&step_Float16x4)->name = "step(f16x4,f16x4)"_c;
    Symbol::Resolved(&step_Float16x4)->nameWithVarNames = "step(edge : f16x4, x : f16x4)"_c;
    Symbol::Resolved(&step_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// smoothstep with Float32, Float32, Float32
    smoothstep_Float32_edge0.name = "edge0"_c;
    smoothstep_Float32_edge0.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32_edge1.name = "edge1"_c;
    smoothstep_Float32_edge1.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32_x.name = "x"_c;
    smoothstep_Float32_x.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float32.name = smoothstep_Float32_name;
    smoothstep_Float32.backendIndex = 1694;
    smoothstep_Float32.returnType = Type::FullType { Float32Type.name };
    smoothstep_Float32.parameters = smoothstep_Float32_args;
    Symbol::Resolved(&smoothstep_Float32_edge0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32_edge1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32)->signature = "smoothstep(f32,f32,f32) f32"_c;
    Symbol::Resolved(&smoothstep_Float32)->name = "smoothstep(f32,f32,f32)"_c;
    Symbol::Resolved(&smoothstep_Float32)->nameWithVarNames = "smoothstep(edge0 : f32, edge1 : f32, x : f32)"_c;
    Symbol::Resolved(&smoothstep_Float32)->returnTypeSymbol = &Float32Type;

    /// smoothstep with Float32x2, Float32x2, Float32x2
    smoothstep_Float32x2_edge0.name = "edge0"_c;
    smoothstep_Float32x2_edge0.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2_edge1.name = "edge1"_c;
    smoothstep_Float32x2_edge1.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2_x.name = "x"_c;
    smoothstep_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float32x2.name = smoothstep_Float32x2_name;
    smoothstep_Float32x2.backendIndex = 1695;
    smoothstep_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    smoothstep_Float32x2.parameters = smoothstep_Float32x2_args;
    Symbol::Resolved(&smoothstep_Float32x2_edge0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2_edge1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2)->signature = "smoothstep(f32x2,f32x2,f32x2) f32x2"_c;
    Symbol::Resolved(&smoothstep_Float32x2)->name = "smoothstep(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&smoothstep_Float32x2)->nameWithVarNames = "smoothstep(edge0 : f32x2, edge1 : f32x2, x : f32x2)"_c;
    Symbol::Resolved(&smoothstep_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// smoothstep with Float32x3, Float32x3, Float32x3
    smoothstep_Float32x3_edge0.name = "edge0"_c;
    smoothstep_Float32x3_edge0.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3_edge1.name = "edge1"_c;
    smoothstep_Float32x3_edge1.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3_x.name = "x"_c;
    smoothstep_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float32x3.name = smoothstep_Float32x3_name;
    smoothstep_Float32x3.backendIndex = 1696;
    smoothstep_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    smoothstep_Float32x3.parameters = smoothstep_Float32x3_args;
    Symbol::Resolved(&smoothstep_Float32x3_edge0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3_edge1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3)->signature = "smoothstep(f32x3,f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&smoothstep_Float32x3)->name = "smoothstep(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&smoothstep_Float32x3)->nameWithVarNames = "smoothstep(edge0 : f32x3, edge1 : f32x3, x : f32x3)"_c;
    Symbol::Resolved(&smoothstep_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// smoothstep with Float32x4, Float32x4, Float32x4
    smoothstep_Float32x4_edge0.name = "edge0"_c;
    smoothstep_Float32x4_edge0.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4_edge1.name = "edge1"_c;
    smoothstep_Float32x4_edge1.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4_x.name = "x"_c;
    smoothstep_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float32x4.name = smoothstep_Float32x4_name;
    smoothstep_Float32x4.backendIndex = 1697;
    smoothstep_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    smoothstep_Float32x4.parameters = smoothstep_Float32x4_args;
    Symbol::Resolved(&smoothstep_Float32x4_edge0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4_edge1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4)->signature = "smoothstep(f32x4,f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&smoothstep_Float32x4)->name = "smoothstep(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&smoothstep_Float32x4)->nameWithVarNames = "smoothstep(edge0 : f32x4, edge1 : f32x4, x : f32x4)"_c;
    Symbol::Resolved(&smoothstep_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// smoothstep with Float16, Float16, Float16
    smoothstep_Float16_edge0.name = "edge0"_c;
    smoothstep_Float16_edge0.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16_edge1.name = "edge1"_c;
    smoothstep_Float16_edge1.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16_x.name = "x"_c;
    smoothstep_Float16_x.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float16.name = smoothstep_Float16_name;
    smoothstep_Float16.backendIndex = 1698;
    smoothstep_Float16.returnType = Type::FullType { Float16Type.name };
    smoothstep_Float16.parameters = smoothstep_Float16_args;
    Symbol::Resolved(&smoothstep_Float16_edge0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16_edge1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16)->signature = "smoothstep(f16,f16,f16) f16"_c;
    Symbol::Resolved(&smoothstep_Float16)->name = "smoothstep(f16,f16,f16)"_c;
    Symbol::Resolved(&smoothstep_Float16)->nameWithVarNames = "smoothstep(edge0 : f16, edge1 : f16, x : f16)"_c;
    Symbol::Resolved(&smoothstep_Float16)->returnTypeSymbol = &Float16Type;

    /// smoothstep with Float16x2, Float16x2, Float16x2
    smoothstep_Float16x2_edge0.name = "edge0"_c;
    smoothstep_Float16x2_edge0.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2_edge1.name = "edge1"_c;
    smoothstep_Float16x2_edge1.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2_x.name = "x"_c;
    smoothstep_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float16x2.name = smoothstep_Float16x2_name;
    smoothstep_Float16x2.backendIndex = 1699;
    smoothstep_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    smoothstep_Float16x2.parameters = smoothstep_Float16x2_args;
    Symbol::Resolved(&smoothstep_Float16x2_edge0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2_edge1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2)->signature = "smoothstep(f16x2,f16x2,f16x2) f16x2"_c;
    Symbol::Resolved(&smoothstep_Float16x2)->name = "smoothstep(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&smoothstep_Float16x2)->nameWithVarNames = "smoothstep(edge0 : f16x2, edge1 : f16x2, x : f16x2)"_c;
    Symbol::Resolved(&smoothstep_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// smoothstep with Float16x3, Float16x3, Float16x3
    smoothstep_Float16x3_edge0.name = "edge0"_c;
    smoothstep_Float16x3_edge0.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3_edge1.name = "edge1"_c;
    smoothstep_Float16x3_edge1.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3_x.name = "x"_c;
    smoothstep_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float16x3.name = smoothstep_Float16x3_name;
    smoothstep_Float16x3.backendIndex = 1700;
    smoothstep_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    smoothstep_Float16x3.parameters = smoothstep_Float16x3_args;
    Symbol::Resolved(&smoothstep_Float16x3_edge0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3_edge1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3)->signature = "smoothstep(f16x3,f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&smoothstep_Float16x3)->name = "smoothstep(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&smoothstep_Float16x3)->nameWithVarNames = "smoothstep(edge0 : f16x3, edge1 : f16x3, x : f16x3)"_c;
    Symbol::Resolved(&smoothstep_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// smoothstep with Float16x4, Float16x4, Float16x4
    smoothstep_Float16x4_edge0.name = "edge0"_c;
    smoothstep_Float16x4_edge0.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4_edge1.name = "edge1"_c;
    smoothstep_Float16x4_edge1.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4_x.name = "x"_c;
    smoothstep_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float16x4.name = smoothstep_Float16x4_name;
    smoothstep_Float16x4.backendIndex = 1701;
    smoothstep_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    smoothstep_Float16x4.parameters = smoothstep_Float16x4_args;
    Symbol::Resolved(&smoothstep_Float16x4_edge0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4_edge1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4)->signature = "smoothstep(f16x4,f16x4,f16x4) f16x4"_c;
    Symbol::Resolved(&smoothstep_Float16x4)->name = "smoothstep(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&smoothstep_Float16x4)->nameWithVarNames = "smoothstep(edge0 : f16x4, edge1 : f16x4, x : f16x4)"_c;
    Symbol::Resolved(&smoothstep_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// ceil with Float32
    ceil_Float32_arg.name = "val"_c;
    ceil_Float32_arg.type = Type::FullType{ Float32Type.name };
    ceil_Float32.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float32.name = ceil_Float32_name;
    ceil_Float32.backendIndex = 1702;
    ceil_Float32.returnType = Type::FullType { Float32Type.name };
    ceil_Float32.parameters = ceil_Float32_args;
    Symbol::Resolved(&ceil_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ceil_Float32)->signature = "ceil(f32) f32"_c;
    Symbol::Resolved(&ceil_Float32)->name = "ceil(f32)"_c;
    Symbol::Resolved(&ceil_Float32)->nameWithVarNames = "ceil(val : f32)"_c;
    Symbol::Resolved(&ceil_Float32)->returnTypeSymbol = &Float32Type;

    /// ceil with Float32x2
    ceil_Float32x2_arg.name = "val"_c;
    ceil_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ceil_Float32x2.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float32x2.name = ceil_Float32x2_name;
    ceil_Float32x2.backendIndex = 1703;
    ceil_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    ceil_Float32x2.parameters = ceil_Float32x2_args;
    Symbol::Resolved(&ceil_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ceil_Float32x2)->signature = "ceil(f32x2) f32x2"_c;
    Symbol::Resolved(&ceil_Float32x2)->name = "ceil(f32x2)"_c;
    Symbol::Resolved(&ceil_Float32x2)->nameWithVarNames = "ceil(val : f32x2)"_c;
    Symbol::Resolved(&ceil_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// ceil with Float32x3
    ceil_Float32x3_arg.name = "val"_c;
    ceil_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ceil_Float32x3.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float32x3.name = ceil_Float32x3_name;
    ceil_Float32x3.backendIndex = 1704;
    ceil_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    ceil_Float32x3.parameters = ceil_Float32x3_args;
    Symbol::Resolved(&ceil_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ceil_Float32x3)->signature = "ceil(f32x3) f32x3"_c;
    Symbol::Resolved(&ceil_Float32x3)->name = "ceil(f32x3)"_c;
    Symbol::Resolved(&ceil_Float32x3)->nameWithVarNames = "ceil(val : f32x3)"_c;
    Symbol::Resolved(&ceil_Float32x3)->returnTypeSymbol = &Float32x3Type;

}
} // namespace GPULang
