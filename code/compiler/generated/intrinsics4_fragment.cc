//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// exp with Float32x2
Variable exp_Float32x2_arg;
Function exp_Float32x2;
inline constexpr std::array exp_Float32x2_args = { &exp_Float32x2_arg };

/// exp with Float32x3
Variable exp_Float32x3_arg;
Function exp_Float32x3;
inline constexpr std::array exp_Float32x3_args = { &exp_Float32x3_arg };

/// exp with Float32x4
Variable exp_Float32x4_arg;
Function exp_Float32x4;
inline constexpr std::array exp_Float32x4_args = { &exp_Float32x4_arg };

/// exp with Float16
Variable exp_Float16_arg;
Function exp_Float16;
inline constexpr std::array exp_Float16_args = { &exp_Float16_arg };

/// exp with Float16x2
Variable exp_Float16x2_arg;
Function exp_Float16x2;
inline constexpr std::array exp_Float16x2_args = { &exp_Float16x2_arg };

/// exp with Float16x3
Variable exp_Float16x3_arg;
Function exp_Float16x3;
inline constexpr std::array exp_Float16x3_args = { &exp_Float16x3_arg };

/// exp with Float16x4
Variable exp_Float16x4_arg;
Function exp_Float16x4;
inline constexpr std::array exp_Float16x4_args = { &exp_Float16x4_arg };

/// exp2 with Float32
Variable exp2_Float32_arg;
Function exp2_Float32;
inline constexpr std::array exp2_Float32_args = { &exp2_Float32_arg };

/// exp2 with Float32x2
Variable exp2_Float32x2_arg;
Function exp2_Float32x2;
inline constexpr std::array exp2_Float32x2_args = { &exp2_Float32x2_arg };

/// exp2 with Float32x3
Variable exp2_Float32x3_arg;
Function exp2_Float32x3;
inline constexpr std::array exp2_Float32x3_args = { &exp2_Float32x3_arg };

/// exp2 with Float32x4
Variable exp2_Float32x4_arg;
Function exp2_Float32x4;
inline constexpr std::array exp2_Float32x4_args = { &exp2_Float32x4_arg };

/// exp2 with Float16
Variable exp2_Float16_arg;
Function exp2_Float16;
inline constexpr std::array exp2_Float16_args = { &exp2_Float16_arg };

/// exp2 with Float16x2
Variable exp2_Float16x2_arg;
Function exp2_Float16x2;
inline constexpr std::array exp2_Float16x2_args = { &exp2_Float16x2_arg };

/// exp2 with Float16x3
Variable exp2_Float16x3_arg;
Function exp2_Float16x3;
inline constexpr std::array exp2_Float16x3_args = { &exp2_Float16x3_arg };

/// exp2 with Float16x4
Variable exp2_Float16x4_arg;
Function exp2_Float16x4;
inline constexpr std::array exp2_Float16x4_args = { &exp2_Float16x4_arg };

/// invSqrt with Float32
Variable invSqrt_Float32_arg;
Function invSqrt_Float32;
inline constexpr std::array invSqrt_Float32_args = { &invSqrt_Float32_arg };

/// invSqrt with Float32x2
Variable invSqrt_Float32x2_arg;
Function invSqrt_Float32x2;
inline constexpr std::array invSqrt_Float32x2_args = { &invSqrt_Float32x2_arg };

/// invSqrt with Float32x3
Variable invSqrt_Float32x3_arg;
Function invSqrt_Float32x3;
inline constexpr std::array invSqrt_Float32x3_args = { &invSqrt_Float32x3_arg };

/// invSqrt with Float32x4
Variable invSqrt_Float32x4_arg;
Function invSqrt_Float32x4;
inline constexpr std::array invSqrt_Float32x4_args = { &invSqrt_Float32x4_arg };

/// invSqrt with Float16
Variable invSqrt_Float16_arg;
Function invSqrt_Float16;
inline constexpr std::array invSqrt_Float16_args = { &invSqrt_Float16_arg };

/// invSqrt with Float16x2
Variable invSqrt_Float16x2_arg;
Function invSqrt_Float16x2;
inline constexpr std::array invSqrt_Float16x2_args = { &invSqrt_Float16x2_arg };

/// invSqrt with Float16x3
Variable invSqrt_Float16x3_arg;
Function invSqrt_Float16x3;
inline constexpr std::array invSqrt_Float16x3_args = { &invSqrt_Float16x3_arg };

/// invSqrt with Float16x4
Variable invSqrt_Float16x4_arg;
Function invSqrt_Float16x4;
inline constexpr std::array invSqrt_Float16x4_args = { &invSqrt_Float16x4_arg };

/// log with Float32
Variable log_Float32_arg;
Function log_Float32;
inline constexpr std::array log_Float32_args = { &log_Float32_arg };

/// log with Float32x2
Variable log_Float32x2_arg;
Function log_Float32x2;
inline constexpr std::array log_Float32x2_args = { &log_Float32x2_arg };

/// log with Float32x3
Variable log_Float32x3_arg;
Function log_Float32x3;
inline constexpr std::array log_Float32x3_args = { &log_Float32x3_arg };

/// log with Float32x4
Variable log_Float32x4_arg;
Function log_Float32x4;
inline constexpr std::array log_Float32x4_args = { &log_Float32x4_arg };

/// log with Float16
Variable log_Float16_arg;
Function log_Float16;
inline constexpr std::array log_Float16_args = { &log_Float16_arg };

/// log with Float16x2
Variable log_Float16x2_arg;
Function log_Float16x2;
inline constexpr std::array log_Float16x2_args = { &log_Float16x2_arg };

/// log with Float16x3
Variable log_Float16x3_arg;
Function log_Float16x3;
inline constexpr std::array log_Float16x3_args = { &log_Float16x3_arg };

/// log with Float16x4
Variable log_Float16x4_arg;
Function log_Float16x4;
inline constexpr std::array log_Float16x4_args = { &log_Float16x4_arg };

/// log2 with Float32
Variable log2_Float32_arg;
Function log2_Float32;
inline constexpr std::array log2_Float32_args = { &log2_Float32_arg };

/// log2 with Float32x2
Variable log2_Float32x2_arg;
Function log2_Float32x2;
inline constexpr std::array log2_Float32x2_args = { &log2_Float32x2_arg };

/// log2 with Float32x3
Variable log2_Float32x3_arg;
Function log2_Float32x3;
inline constexpr std::array log2_Float32x3_args = { &log2_Float32x3_arg };

/// log2 with Float32x4
Variable log2_Float32x4_arg;
Function log2_Float32x4;
inline constexpr std::array log2_Float32x4_args = { &log2_Float32x4_arg };

/// log2 with Float16
Variable log2_Float16_arg;
Function log2_Float16;
inline constexpr std::array log2_Float16_args = { &log2_Float16_arg };

/// log2 with Float16x2
Variable log2_Float16x2_arg;
Function log2_Float16x2;
inline constexpr std::array log2_Float16x2_args = { &log2_Float16x2_arg };

/// log2 with Float16x3
Variable log2_Float16x3_arg;
Function log2_Float16x3;
inline constexpr std::array log2_Float16x3_args = { &log2_Float16x3_arg };

/// log2 with Float16x4
Variable log2_Float16x4_arg;
Function log2_Float16x4;
inline constexpr std::array log2_Float16x4_args = { &log2_Float16x4_arg };

/// sin with Float32
Variable sin_Float32_arg;
Function sin_Float32;
inline constexpr std::array sin_Float32_args = { &sin_Float32_arg };

/// sin with Float32x2
Variable sin_Float32x2_arg;
Function sin_Float32x2;
inline constexpr std::array sin_Float32x2_args = { &sin_Float32x2_arg };

/// sin with Float32x3
Variable sin_Float32x3_arg;
Function sin_Float32x3;
inline constexpr std::array sin_Float32x3_args = { &sin_Float32x3_arg };

/// sin with Float32x4
Variable sin_Float32x4_arg;
Function sin_Float32x4;
inline constexpr std::array sin_Float32x4_args = { &sin_Float32x4_arg };

/// sin with Float16
Variable sin_Float16_arg;
Function sin_Float16;
inline constexpr std::array sin_Float16_args = { &sin_Float16_arg };

/// sin with Float16x2
Variable sin_Float16x2_arg;
Function sin_Float16x2;
inline constexpr std::array sin_Float16x2_args = { &sin_Float16x2_arg };

/// sin with Float16x3
Variable sin_Float16x3_arg;
Function sin_Float16x3;
inline constexpr std::array sin_Float16x3_args = { &sin_Float16x3_arg };

/// sin with Float16x4
Variable sin_Float16x4_arg;
Function sin_Float16x4;
inline constexpr std::array sin_Float16x4_args = { &sin_Float16x4_arg };

/// sinh with Float32
Variable sinh_Float32_arg;
Function sinh_Float32;
inline constexpr std::array sinh_Float32_args = { &sinh_Float32_arg };

/// sinh with Float32x2
Variable sinh_Float32x2_arg;
Function sinh_Float32x2;
inline constexpr std::array sinh_Float32x2_args = { &sinh_Float32x2_arg };

/// sinh with Float32x3
Variable sinh_Float32x3_arg;
Function sinh_Float32x3;
inline constexpr std::array sinh_Float32x3_args = { &sinh_Float32x3_arg };

/// sinh with Float32x4
Variable sinh_Float32x4_arg;
Function sinh_Float32x4;
inline constexpr std::array sinh_Float32x4_args = { &sinh_Float32x4_arg };

/// sinh with Float16
Variable sinh_Float16_arg;
Function sinh_Float16;
inline constexpr std::array sinh_Float16_args = { &sinh_Float16_arg };

/// sinh with Float16x2
Variable sinh_Float16x2_arg;
Function sinh_Float16x2;
inline constexpr std::array sinh_Float16x2_args = { &sinh_Float16x2_arg };

/// sinh with Float16x3
Variable sinh_Float16x3_arg;
Function sinh_Float16x3;
inline constexpr std::array sinh_Float16x3_args = { &sinh_Float16x3_arg };

/// sinh with Float16x4
Variable sinh_Float16x4_arg;
Function sinh_Float16x4;
inline constexpr std::array sinh_Float16x4_args = { &sinh_Float16x4_arg };

/// sqrt with Float32
Variable sqrt_Float32_arg;
Function sqrt_Float32;
inline constexpr std::array sqrt_Float32_args = { &sqrt_Float32_arg };

/// sqrt with Float32x2
Variable sqrt_Float32x2_arg;
Function sqrt_Float32x2;
inline constexpr std::array sqrt_Float32x2_args = { &sqrt_Float32x2_arg };

/// sqrt with Float32x3
Variable sqrt_Float32x3_arg;
Function sqrt_Float32x3;
inline constexpr std::array sqrt_Float32x3_args = { &sqrt_Float32x3_arg };

/// sqrt with Float32x4
Variable sqrt_Float32x4_arg;
Function sqrt_Float32x4;
inline constexpr std::array sqrt_Float32x4_args = { &sqrt_Float32x4_arg };

/// sqrt with Float16
Variable sqrt_Float16_arg;
Function sqrt_Float16;
inline constexpr std::array sqrt_Float16_args = { &sqrt_Float16_arg };

/// sqrt with Float16x2
Variable sqrt_Float16x2_arg;
Function sqrt_Float16x2;
inline constexpr std::array sqrt_Float16x2_args = { &sqrt_Float16x2_arg };

/// sqrt with Float16x3
Variable sqrt_Float16x3_arg;
Function sqrt_Float16x3;
inline constexpr std::array sqrt_Float16x3_args = { &sqrt_Float16x3_arg };

/// sqrt with Float16x4
Variable sqrt_Float16x4_arg;
Function sqrt_Float16x4;
inline constexpr std::array sqrt_Float16x4_args = { &sqrt_Float16x4_arg };

/// tan with Float32
Variable tan_Float32_arg;
Function tan_Float32;
inline constexpr std::array tan_Float32_args = { &tan_Float32_arg };

/// tan with Float32x2
Variable tan_Float32x2_arg;
Function tan_Float32x2;
inline constexpr std::array tan_Float32x2_args = { &tan_Float32x2_arg };

/// tan with Float32x3
Variable tan_Float32x3_arg;
Function tan_Float32x3;
inline constexpr std::array tan_Float32x3_args = { &tan_Float32x3_arg };

/// tan with Float32x4
Variable tan_Float32x4_arg;
Function tan_Float32x4;
inline constexpr std::array tan_Float32x4_args = { &tan_Float32x4_arg };

/// tan with Float16
Variable tan_Float16_arg;
Function tan_Float16;
inline constexpr std::array tan_Float16_args = { &tan_Float16_arg };

/// tan with Float16x2
Variable tan_Float16x2_arg;
Function tan_Float16x2;
inline constexpr std::array tan_Float16x2_args = { &tan_Float16x2_arg };

/// tan with Float16x3
Variable tan_Float16x3_arg;
Function tan_Float16x3;
inline constexpr std::array tan_Float16x3_args = { &tan_Float16x3_arg };

/// tan with Float16x4
Variable tan_Float16x4_arg;
Function tan_Float16x4;
inline constexpr std::array tan_Float16x4_args = { &tan_Float16x4_arg };

/// tanh with Float32
Variable tanh_Float32_arg;
Function tanh_Float32;
inline constexpr std::array tanh_Float32_args = { &tanh_Float32_arg };

/// tanh with Float32x2
Variable tanh_Float32x2_arg;
Function tanh_Float32x2;
inline constexpr std::array tanh_Float32x2_args = { &tanh_Float32x2_arg };

/// tanh with Float32x3
Variable tanh_Float32x3_arg;
Function tanh_Float32x3;
inline constexpr std::array tanh_Float32x3_args = { &tanh_Float32x3_arg };

/// tanh with Float32x4
Variable tanh_Float32x4_arg;
Function tanh_Float32x4;
inline constexpr std::array tanh_Float32x4_args = { &tanh_Float32x4_arg };

/// tanh with Float16
Variable tanh_Float16_arg;
Function tanh_Float16;
inline constexpr std::array tanh_Float16_args = { &tanh_Float16_arg };

/// tanh with Float16x2
Variable tanh_Float16x2_arg;
Function tanh_Float16x2;
inline constexpr std::array tanh_Float16x2_args = { &tanh_Float16x2_arg };

/// tanh with Float16x3
Variable tanh_Float16x3_arg;
Function tanh_Float16x3;
inline constexpr std::array tanh_Float16x3_args = { &tanh_Float16x3_arg };

/// tanh with Float16x4
Variable tanh_Float16x4_arg;
Function tanh_Float16x4;
inline constexpr std::array tanh_Float16x4_args = { &tanh_Float16x4_arg };

/// atan2 with Float32, Float32
Variable atan2_Float32_y;
Variable atan2_Float32_x;
Function atan2_Float32;
inline constexpr std::array atan2_Float32_args = { &atan2_Float32_y, &atan2_Float32_x };

/// atan2 with Float32x2, Float32x2
Variable atan2_Float32x2_y;
Variable atan2_Float32x2_x;
Function atan2_Float32x2;
inline constexpr std::array atan2_Float32x2_args = { &atan2_Float32x2_y, &atan2_Float32x2_x };

/// atan2 with Float32x3, Float32x3
Variable atan2_Float32x3_y;
Variable atan2_Float32x3_x;
Function atan2_Float32x3;
inline constexpr std::array atan2_Float32x3_args = { &atan2_Float32x3_y, &atan2_Float32x3_x };

/// atan2 with Float32x4, Float32x4
Variable atan2_Float32x4_y;
Variable atan2_Float32x4_x;
Function atan2_Float32x4;
inline constexpr std::array atan2_Float32x4_args = { &atan2_Float32x4_y, &atan2_Float32x4_x };

/// atan2 with Float16, Float16
Variable atan2_Float16_y;
Variable atan2_Float16_x;
Function atan2_Float16;
inline constexpr std::array atan2_Float16_args = { &atan2_Float16_y, &atan2_Float16_x };

/// atan2 with Float16x2, Float16x2
Variable atan2_Float16x2_y;
Variable atan2_Float16x2_x;
Function atan2_Float16x2;
inline constexpr std::array atan2_Float16x2_args = { &atan2_Float16x2_y, &atan2_Float16x2_x };

/// atan2 with Float16x3, Float16x3
Variable atan2_Float16x3_y;
Variable atan2_Float16x3_x;
Function atan2_Float16x3;
inline constexpr std::array atan2_Float16x3_args = { &atan2_Float16x3_y, &atan2_Float16x3_x };

/// atan2 with Float16x4, Float16x4
Variable atan2_Float16x4_y;
Variable atan2_Float16x4_x;
Function atan2_Float16x4;
inline constexpr std::array atan2_Float16x4_args = { &atan2_Float16x4_y, &atan2_Float16x4_x };

/// pow with Float32, Float32
Variable pow_Float32_arg;
Variable pow_Float32_exp;
Function pow_Float32;
inline constexpr std::array pow_Float32_args = { &pow_Float32_arg, &pow_Float32_exp };

/// pow with Float32x2, Float32x2
Variable pow_Float32x2_arg;
Variable pow_Float32x2_exp;
Function pow_Float32x2;
inline constexpr std::array pow_Float32x2_args = { &pow_Float32x2_arg, &pow_Float32x2_exp };

/// pow with Float32x3, Float32x3
Variable pow_Float32x3_arg;
Variable pow_Float32x3_exp;
Function pow_Float32x3;
inline constexpr std::array pow_Float32x3_args = { &pow_Float32x3_arg, &pow_Float32x3_exp };

/// pow with Float32x4, Float32x4
Variable pow_Float32x4_arg;
Variable pow_Float32x4_exp;
Function pow_Float32x4;
inline constexpr std::array pow_Float32x4_args = { &pow_Float32x4_arg, &pow_Float32x4_exp };

/// pow with Float16, Float16
Variable pow_Float16_arg;
Variable pow_Float16_exp;
Function pow_Float16;
inline constexpr std::array pow_Float16_args = { &pow_Float16_arg, &pow_Float16_exp };

/// pow with Float16x2, Float16x2
Variable pow_Float16x2_arg;
Variable pow_Float16x2_exp;
Function pow_Float16x2;
inline constexpr std::array pow_Float16x2_args = { &pow_Float16x2_arg, &pow_Float16x2_exp };

/// pow with Float16x3, Float16x3
Variable pow_Float16x3_arg;
Variable pow_Float16x3_exp;
Function pow_Float16x3;
inline constexpr std::array pow_Float16x3_args = { &pow_Float16x3_arg, &pow_Float16x3_exp };

/// pow with Float16x4, Float16x4
Variable pow_Float16x4_arg;
Variable pow_Float16x4_exp;
Function pow_Float16x4;
inline constexpr std::array pow_Float16x4_args = { &pow_Float16x4_arg, &pow_Float16x4_exp };

/// mad with Float32, Float32, Float32
Variable mad_Float32_arg;
Variable mad_Float32_mul;
Variable mad_Float32_add;
Function mad_Float32;
inline constexpr std::array mad_Float32_args = { &mad_Float32_arg, &mad_Float32_mul, &mad_Float32_add };

/// mad with Float32x2, Float32x2, Float32x2
Variable mad_Float32x2_arg;
Variable mad_Float32x2_mul;
Variable mad_Float32x2_add;
Function mad_Float32x2;
inline constexpr std::array mad_Float32x2_args = { &mad_Float32x2_arg, &mad_Float32x2_mul, &mad_Float32x2_add };

/// mad with Float32x3, Float32x3, Float32x3
Variable mad_Float32x3_arg;
Variable mad_Float32x3_mul;
Variable mad_Float32x3_add;
Function mad_Float32x3;
inline constexpr std::array mad_Float32x3_args = { &mad_Float32x3_arg, &mad_Float32x3_mul, &mad_Float32x3_add };

/// mad with Float32x4, Float32x4, Float32x4
Variable mad_Float32x4_arg;
Variable mad_Float32x4_mul;
Variable mad_Float32x4_add;
Function mad_Float32x4;
inline constexpr std::array mad_Float32x4_args = { &mad_Float32x4_arg, &mad_Float32x4_mul, &mad_Float32x4_add };

/// mad with Float16, Float16, Float16
Variable mad_Float16_arg;
Variable mad_Float16_mul;
Variable mad_Float16_add;
Function mad_Float16;
inline constexpr std::array mad_Float16_args = { &mad_Float16_arg, &mad_Float16_mul, &mad_Float16_add };

/// mad with Float16x2, Float16x2, Float16x2
Variable mad_Float16x2_arg;
Variable mad_Float16x2_mul;
Variable mad_Float16x2_add;
Function mad_Float16x2;
inline constexpr std::array mad_Float16x2_args = { &mad_Float16x2_arg, &mad_Float16x2_mul, &mad_Float16x2_add };

/// mad with Float16x3, Float16x3, Float16x3
Variable mad_Float16x3_arg;
Variable mad_Float16x3_mul;
Variable mad_Float16x3_add;
Function mad_Float16x3;
inline constexpr std::array mad_Float16x3_args = { &mad_Float16x3_arg, &mad_Float16x3_mul, &mad_Float16x3_add };

/// mad with Float16x4, Float16x4, Float16x4
Variable mad_Float16x4_arg;
Variable mad_Float16x4_mul;
Variable mad_Float16x4_add;
Function mad_Float16x4;
inline constexpr std::array mad_Float16x4_args = { &mad_Float16x4_arg, &mad_Float16x4_mul, &mad_Float16x4_add };

/// mad with Int32, Int32, Int32
Variable mad_Int32_arg;
Variable mad_Int32_mul;
Variable mad_Int32_add;
Function mad_Int32;
inline constexpr std::array mad_Int32_args = { &mad_Int32_arg, &mad_Int32_mul, &mad_Int32_add };

/// mad with Int32x2, Int32x2, Int32x2
Variable mad_Int32x2_arg;
Variable mad_Int32x2_mul;
Variable mad_Int32x2_add;
Function mad_Int32x2;
inline constexpr std::array mad_Int32x2_args = { &mad_Int32x2_arg, &mad_Int32x2_mul, &mad_Int32x2_add };

/// mad with Int32x3, Int32x3, Int32x3
Variable mad_Int32x3_arg;
Variable mad_Int32x3_mul;
Variable mad_Int32x3_add;
Function mad_Int32x3;
inline constexpr std::array mad_Int32x3_args = { &mad_Int32x3_arg, &mad_Int32x3_mul, &mad_Int32x3_add };

/// mad with Int32x4, Int32x4, Int32x4
Variable mad_Int32x4_arg;
Variable mad_Int32x4_mul;
Variable mad_Int32x4_add;
Function mad_Int32x4;
inline constexpr std::array mad_Int32x4_args = { &mad_Int32x4_arg, &mad_Int32x4_mul, &mad_Int32x4_add };

/// mad with Int16, Int16, Int16
Variable mad_Int16_arg;
Variable mad_Int16_mul;
Variable mad_Int16_add;
Function mad_Int16;
inline constexpr std::array mad_Int16_args = { &mad_Int16_arg, &mad_Int16_mul, &mad_Int16_add };

/// mad with Int16x2, Int16x2, Int16x2
Variable mad_Int16x2_arg;
Variable mad_Int16x2_mul;
Variable mad_Int16x2_add;
Function mad_Int16x2;
inline constexpr std::array mad_Int16x2_args = { &mad_Int16x2_arg, &mad_Int16x2_mul, &mad_Int16x2_add };

/// mad with Int16x3, Int16x3, Int16x3
Variable mad_Int16x3_arg;
Variable mad_Int16x3_mul;
Variable mad_Int16x3_add;
Function mad_Int16x3;
inline constexpr std::array mad_Int16x3_args = { &mad_Int16x3_arg, &mad_Int16x3_mul, &mad_Int16x3_add };

/// mad with Int16x4, Int16x4, Int16x4
Variable mad_Int16x4_arg;
Variable mad_Int16x4_mul;
Variable mad_Int16x4_add;
Function mad_Int16x4;
inline constexpr std::array mad_Int16x4_args = { &mad_Int16x4_arg, &mad_Int16x4_mul, &mad_Int16x4_add };

/// mad with UInt32, UInt32, UInt32
Variable mad_UInt32_arg;
Variable mad_UInt32_mul;
Variable mad_UInt32_add;
Function mad_UInt32;
inline constexpr std::array mad_UInt32_args = { &mad_UInt32_arg, &mad_UInt32_mul, &mad_UInt32_add };

/// mad with UInt32x2, UInt32x2, UInt32x2
Variable mad_UInt32x2_arg;
Variable mad_UInt32x2_mul;
Variable mad_UInt32x2_add;
Function mad_UInt32x2;
inline constexpr std::array mad_UInt32x2_args = { &mad_UInt32x2_arg, &mad_UInt32x2_mul, &mad_UInt32x2_add };

/// mad with UInt32x3, UInt32x3, UInt32x3
Variable mad_UInt32x3_arg;
Variable mad_UInt32x3_mul;
Variable mad_UInt32x3_add;
Function mad_UInt32x3;
inline constexpr std::array mad_UInt32x3_args = { &mad_UInt32x3_arg, &mad_UInt32x3_mul, &mad_UInt32x3_add };

/// mad with UInt32x4, UInt32x4, UInt32x4
Variable mad_UInt32x4_arg;
Variable mad_UInt32x4_mul;
Variable mad_UInt32x4_add;
Function mad_UInt32x4;
inline constexpr std::array mad_UInt32x4_args = { &mad_UInt32x4_arg, &mad_UInt32x4_mul, &mad_UInt32x4_add };

/// mad with UInt16, UInt16, UInt16
Variable mad_UInt16_arg;
Variable mad_UInt16_mul;
Variable mad_UInt16_add;
Function mad_UInt16;
inline constexpr std::array mad_UInt16_args = { &mad_UInt16_arg, &mad_UInt16_mul, &mad_UInt16_add };

/// mad with UInt16x2, UInt16x2, UInt16x2
Variable mad_UInt16x2_arg;
Variable mad_UInt16x2_mul;
Variable mad_UInt16x2_add;
Function mad_UInt16x2;
inline constexpr std::array mad_UInt16x2_args = { &mad_UInt16x2_arg, &mad_UInt16x2_mul, &mad_UInt16x2_add };

/// mad with UInt16x3, UInt16x3, UInt16x3
Variable mad_UInt16x3_arg;
Variable mad_UInt16x3_mul;
Variable mad_UInt16x3_add;
Function mad_UInt16x3;
inline constexpr std::array mad_UInt16x3_args = { &mad_UInt16x3_arg, &mad_UInt16x3_mul, &mad_UInt16x3_add };

/// mad with UInt16x4, UInt16x4, UInt16x4
Variable mad_UInt16x4_arg;
Variable mad_UInt16x4_mul;
Variable mad_UInt16x4_add;
Function mad_UInt16x4;
inline constexpr std::array mad_UInt16x4_args = { &mad_UInt16x4_arg, &mad_UInt16x4_mul, &mad_UInt16x4_add };

/// dot with Float32x2, Float32x2
Variable dot_Float32x2_x;
Variable dot_Float32x2_y;
Function dot_Float32x2;
inline constexpr std::array dot_Float32x2_args = { &dot_Float32x2_x, &dot_Float32x2_y };

/// dot with Float32x3, Float32x3
Variable dot_Float32x3_x;
Variable dot_Float32x3_y;
Function dot_Float32x3;
inline constexpr std::array dot_Float32x3_args = { &dot_Float32x3_x, &dot_Float32x3_y };

/// dot with Float32x4, Float32x4
Variable dot_Float32x4_x;
Variable dot_Float32x4_y;
Function dot_Float32x4;
inline constexpr std::array dot_Float32x4_args = { &dot_Float32x4_x, &dot_Float32x4_y };

/// dot with Float16x2, Float16x2
Variable dot_Float16x2_x;
Variable dot_Float16x2_y;
Function dot_Float16x2;
inline constexpr std::array dot_Float16x2_args = { &dot_Float16x2_x, &dot_Float16x2_y };

/// dot with Float16x3, Float16x3
Variable dot_Float16x3_x;
Variable dot_Float16x3_y;
Function dot_Float16x3;
inline constexpr std::array dot_Float16x3_args = { &dot_Float16x3_x, &dot_Float16x3_y };

/// dot with Float16x4, Float16x4
Variable dot_Float16x4_x;
Variable dot_Float16x4_y;
Function dot_Float16x4;
inline constexpr std::array dot_Float16x4_args = { &dot_Float16x4_x, &dot_Float16x4_y };

/// reflect with Float32x2, Float32x2
Variable reflect_Float32x2_incident;
Variable reflect_Float32x2_normal;
Function reflect_Float32x2;
inline constexpr std::array reflect_Float32x2_args = { &reflect_Float32x2_incident, &reflect_Float32x2_normal };

/// reflect with Float32x3, Float32x3
Variable reflect_Float32x3_incident;
Variable reflect_Float32x3_normal;
Function reflect_Float32x3;
inline constexpr std::array reflect_Float32x3_args = { &reflect_Float32x3_incident, &reflect_Float32x3_normal };

/// reflect with Float32x4, Float32x4
Variable reflect_Float32x4_incident;
Variable reflect_Float32x4_normal;
Function reflect_Float32x4;
inline constexpr std::array reflect_Float32x4_args = { &reflect_Float32x4_incident, &reflect_Float32x4_normal };

void SetupIntrinsics4()
{
    /// exp with Float32x2
    exp_Float32x2_arg.name = "val"_c;
    exp_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    exp_Float32x2.documentation = "Returns the exponential of a value."_c;
    exp_Float32x2.name = exp_Float32x2_name;
    exp_Float32x2.backendIndex = 1449;
    exp_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    exp_Float32x2.parameters = exp_Float32x2_args;
    Symbol::Resolved(&exp_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&exp_Float32x2)->signature = "exp(f32x2) f32x2"_c;
    Symbol::Resolved(&exp_Float32x2)->name = "exp(f32x2)"_c;
    Symbol::Resolved(&exp_Float32x2)->nameWithVarNames = "exp(val : f32x2)"_c;
    Symbol::Resolved(&exp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// exp with Float32x3
    exp_Float32x3_arg.name = "val"_c;
    exp_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    exp_Float32x3.documentation = "Returns the exponential of a value."_c;
    exp_Float32x3.name = exp_Float32x3_name;
    exp_Float32x3.backendIndex = 1450;
    exp_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    exp_Float32x3.parameters = exp_Float32x3_args;
    Symbol::Resolved(&exp_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&exp_Float32x3)->signature = "exp(f32x3) f32x3"_c;
    Symbol::Resolved(&exp_Float32x3)->name = "exp(f32x3)"_c;
    Symbol::Resolved(&exp_Float32x3)->nameWithVarNames = "exp(val : f32x3)"_c;
    Symbol::Resolved(&exp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// exp with Float32x4
    exp_Float32x4_arg.name = "val"_c;
    exp_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    exp_Float32x4.documentation = "Returns the exponential of a value."_c;
    exp_Float32x4.name = exp_Float32x4_name;
    exp_Float32x4.backendIndex = 1451;
    exp_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    exp_Float32x4.parameters = exp_Float32x4_args;
    Symbol::Resolved(&exp_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&exp_Float32x4)->signature = "exp(f32x4) f32x4"_c;
    Symbol::Resolved(&exp_Float32x4)->name = "exp(f32x4)"_c;
    Symbol::Resolved(&exp_Float32x4)->nameWithVarNames = "exp(val : f32x4)"_c;
    Symbol::Resolved(&exp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// exp with Float16
    exp_Float16_arg.name = "val"_c;
    exp_Float16_arg.type = Type::FullType{ Float16Type.name };
    exp_Float16.documentation = "Returns the exponential of a value."_c;
    exp_Float16.name = exp_Float16_name;
    exp_Float16.backendIndex = 1452;
    exp_Float16.returnType = Type::FullType { Float16Type.name };
    exp_Float16.parameters = exp_Float16_args;
    Symbol::Resolved(&exp_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&exp_Float16)->signature = "exp(f16) f16"_c;
    Symbol::Resolved(&exp_Float16)->name = "exp(f16)"_c;
    Symbol::Resolved(&exp_Float16)->nameWithVarNames = "exp(val : f16)"_c;
    Symbol::Resolved(&exp_Float16)->returnTypeSymbol = &Float16Type;

    /// exp with Float16x2
    exp_Float16x2_arg.name = "val"_c;
    exp_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    exp_Float16x2.documentation = "Returns the exponential of a value."_c;
    exp_Float16x2.name = exp_Float16x2_name;
    exp_Float16x2.backendIndex = 1453;
    exp_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    exp_Float16x2.parameters = exp_Float16x2_args;
    Symbol::Resolved(&exp_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&exp_Float16x2)->signature = "exp(f16x2) f16x2"_c;
    Symbol::Resolved(&exp_Float16x2)->name = "exp(f16x2)"_c;
    Symbol::Resolved(&exp_Float16x2)->nameWithVarNames = "exp(val : f16x2)"_c;
    Symbol::Resolved(&exp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// exp with Float16x3
    exp_Float16x3_arg.name = "val"_c;
    exp_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    exp_Float16x3.documentation = "Returns the exponential of a value."_c;
    exp_Float16x3.name = exp_Float16x3_name;
    exp_Float16x3.backendIndex = 1454;
    exp_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    exp_Float16x3.parameters = exp_Float16x3_args;
    Symbol::Resolved(&exp_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&exp_Float16x3)->signature = "exp(f16x3) f16x3"_c;
    Symbol::Resolved(&exp_Float16x3)->name = "exp(f16x3)"_c;
    Symbol::Resolved(&exp_Float16x3)->nameWithVarNames = "exp(val : f16x3)"_c;
    Symbol::Resolved(&exp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// exp with Float16x4
    exp_Float16x4_arg.name = "val"_c;
    exp_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    exp_Float16x4.documentation = "Returns the exponential of a value."_c;
    exp_Float16x4.name = exp_Float16x4_name;
    exp_Float16x4.backendIndex = 1455;
    exp_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    exp_Float16x4.parameters = exp_Float16x4_args;
    Symbol::Resolved(&exp_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&exp_Float16x4)->signature = "exp(f16x4) f16x4"_c;
    Symbol::Resolved(&exp_Float16x4)->name = "exp(f16x4)"_c;
    Symbol::Resolved(&exp_Float16x4)->nameWithVarNames = "exp(val : f16x4)"_c;
    Symbol::Resolved(&exp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// exp2 with Float32
    exp2_Float32_arg.name = "val"_c;
    exp2_Float32_arg.type = Type::FullType{ Float32Type.name };
    exp2_Float32.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float32.name = exp2_Float32_name;
    exp2_Float32.backendIndex = 1456;
    exp2_Float32.returnType = Type::FullType { Float32Type.name };
    exp2_Float32.parameters = exp2_Float32_args;
    Symbol::Resolved(&exp2_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&exp2_Float32)->signature = "exp2(f32) f32"_c;
    Symbol::Resolved(&exp2_Float32)->name = "exp2(f32)"_c;
    Symbol::Resolved(&exp2_Float32)->nameWithVarNames = "exp2(val : f32)"_c;
    Symbol::Resolved(&exp2_Float32)->returnTypeSymbol = &Float32Type;

    /// exp2 with Float32x2
    exp2_Float32x2_arg.name = "val"_c;
    exp2_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    exp2_Float32x2.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float32x2.name = exp2_Float32x2_name;
    exp2_Float32x2.backendIndex = 1457;
    exp2_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    exp2_Float32x2.parameters = exp2_Float32x2_args;
    Symbol::Resolved(&exp2_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&exp2_Float32x2)->signature = "exp2(f32x2) f32x2"_c;
    Symbol::Resolved(&exp2_Float32x2)->name = "exp2(f32x2)"_c;
    Symbol::Resolved(&exp2_Float32x2)->nameWithVarNames = "exp2(val : f32x2)"_c;
    Symbol::Resolved(&exp2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// exp2 with Float32x3
    exp2_Float32x3_arg.name = "val"_c;
    exp2_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    exp2_Float32x3.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float32x3.name = exp2_Float32x3_name;
    exp2_Float32x3.backendIndex = 1458;
    exp2_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    exp2_Float32x3.parameters = exp2_Float32x3_args;
    Symbol::Resolved(&exp2_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&exp2_Float32x3)->signature = "exp2(f32x3) f32x3"_c;
    Symbol::Resolved(&exp2_Float32x3)->name = "exp2(f32x3)"_c;
    Symbol::Resolved(&exp2_Float32x3)->nameWithVarNames = "exp2(val : f32x3)"_c;
    Symbol::Resolved(&exp2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// exp2 with Float32x4
    exp2_Float32x4_arg.name = "val"_c;
    exp2_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    exp2_Float32x4.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float32x4.name = exp2_Float32x4_name;
    exp2_Float32x4.backendIndex = 1459;
    exp2_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    exp2_Float32x4.parameters = exp2_Float32x4_args;
    Symbol::Resolved(&exp2_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&exp2_Float32x4)->signature = "exp2(f32x4) f32x4"_c;
    Symbol::Resolved(&exp2_Float32x4)->name = "exp2(f32x4)"_c;
    Symbol::Resolved(&exp2_Float32x4)->nameWithVarNames = "exp2(val : f32x4)"_c;
    Symbol::Resolved(&exp2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// exp2 with Float16
    exp2_Float16_arg.name = "val"_c;
    exp2_Float16_arg.type = Type::FullType{ Float16Type.name };
    exp2_Float16.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float16.name = exp2_Float16_name;
    exp2_Float16.backendIndex = 1460;
    exp2_Float16.returnType = Type::FullType { Float16Type.name };
    exp2_Float16.parameters = exp2_Float16_args;
    Symbol::Resolved(&exp2_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&exp2_Float16)->signature = "exp2(f16) f16"_c;
    Symbol::Resolved(&exp2_Float16)->name = "exp2(f16)"_c;
    Symbol::Resolved(&exp2_Float16)->nameWithVarNames = "exp2(val : f16)"_c;
    Symbol::Resolved(&exp2_Float16)->returnTypeSymbol = &Float16Type;

    /// exp2 with Float16x2
    exp2_Float16x2_arg.name = "val"_c;
    exp2_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    exp2_Float16x2.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float16x2.name = exp2_Float16x2_name;
    exp2_Float16x2.backendIndex = 1461;
    exp2_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    exp2_Float16x2.parameters = exp2_Float16x2_args;
    Symbol::Resolved(&exp2_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&exp2_Float16x2)->signature = "exp2(f16x2) f16x2"_c;
    Symbol::Resolved(&exp2_Float16x2)->name = "exp2(f16x2)"_c;
    Symbol::Resolved(&exp2_Float16x2)->nameWithVarNames = "exp2(val : f16x2)"_c;
    Symbol::Resolved(&exp2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// exp2 with Float16x3
    exp2_Float16x3_arg.name = "val"_c;
    exp2_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    exp2_Float16x3.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float16x3.name = exp2_Float16x3_name;
    exp2_Float16x3.backendIndex = 1462;
    exp2_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    exp2_Float16x3.parameters = exp2_Float16x3_args;
    Symbol::Resolved(&exp2_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&exp2_Float16x3)->signature = "exp2(f16x3) f16x3"_c;
    Symbol::Resolved(&exp2_Float16x3)->name = "exp2(f16x3)"_c;
    Symbol::Resolved(&exp2_Float16x3)->nameWithVarNames = "exp2(val : f16x3)"_c;
    Symbol::Resolved(&exp2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// exp2 with Float16x4
    exp2_Float16x4_arg.name = "val"_c;
    exp2_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    exp2_Float16x4.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float16x4.name = exp2_Float16x4_name;
    exp2_Float16x4.backendIndex = 1463;
    exp2_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    exp2_Float16x4.parameters = exp2_Float16x4_args;
    Symbol::Resolved(&exp2_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&exp2_Float16x4)->signature = "exp2(f16x4) f16x4"_c;
    Symbol::Resolved(&exp2_Float16x4)->name = "exp2(f16x4)"_c;
    Symbol::Resolved(&exp2_Float16x4)->nameWithVarNames = "exp2(val : f16x4)"_c;
    Symbol::Resolved(&exp2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// invSqrt with Float32
    invSqrt_Float32_arg.name = "val"_c;
    invSqrt_Float32_arg.type = Type::FullType{ Float32Type.name };
    invSqrt_Float32.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float32.name = invSqrt_Float32_name;
    invSqrt_Float32.backendIndex = 1464;
    invSqrt_Float32.returnType = Type::FullType { Float32Type.name };
    invSqrt_Float32.parameters = invSqrt_Float32_args;
    Symbol::Resolved(&invSqrt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&invSqrt_Float32)->signature = "invSqrt(f32) f32"_c;
    Symbol::Resolved(&invSqrt_Float32)->name = "invSqrt(f32)"_c;
    Symbol::Resolved(&invSqrt_Float32)->nameWithVarNames = "invSqrt(val : f32)"_c;
    Symbol::Resolved(&invSqrt_Float32)->returnTypeSymbol = &Float32Type;

    /// invSqrt with Float32x2
    invSqrt_Float32x2_arg.name = "val"_c;
    invSqrt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    invSqrt_Float32x2.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float32x2.name = invSqrt_Float32x2_name;
    invSqrt_Float32x2.backendIndex = 1465;
    invSqrt_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    invSqrt_Float32x2.parameters = invSqrt_Float32x2_args;
    Symbol::Resolved(&invSqrt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&invSqrt_Float32x2)->signature = "invSqrt(f32x2) f32x2"_c;
    Symbol::Resolved(&invSqrt_Float32x2)->name = "invSqrt(f32x2)"_c;
    Symbol::Resolved(&invSqrt_Float32x2)->nameWithVarNames = "invSqrt(val : f32x2)"_c;
    Symbol::Resolved(&invSqrt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// invSqrt with Float32x3
    invSqrt_Float32x3_arg.name = "val"_c;
    invSqrt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    invSqrt_Float32x3.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float32x3.name = invSqrt_Float32x3_name;
    invSqrt_Float32x3.backendIndex = 1466;
    invSqrt_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    invSqrt_Float32x3.parameters = invSqrt_Float32x3_args;
    Symbol::Resolved(&invSqrt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&invSqrt_Float32x3)->signature = "invSqrt(f32x3) f32x3"_c;
    Symbol::Resolved(&invSqrt_Float32x3)->name = "invSqrt(f32x3)"_c;
    Symbol::Resolved(&invSqrt_Float32x3)->nameWithVarNames = "invSqrt(val : f32x3)"_c;
    Symbol::Resolved(&invSqrt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// invSqrt with Float32x4
    invSqrt_Float32x4_arg.name = "val"_c;
    invSqrt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    invSqrt_Float32x4.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float32x4.name = invSqrt_Float32x4_name;
    invSqrt_Float32x4.backendIndex = 1467;
    invSqrt_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    invSqrt_Float32x4.parameters = invSqrt_Float32x4_args;
    Symbol::Resolved(&invSqrt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&invSqrt_Float32x4)->signature = "invSqrt(f32x4) f32x4"_c;
    Symbol::Resolved(&invSqrt_Float32x4)->name = "invSqrt(f32x4)"_c;
    Symbol::Resolved(&invSqrt_Float32x4)->nameWithVarNames = "invSqrt(val : f32x4)"_c;
    Symbol::Resolved(&invSqrt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// invSqrt with Float16
    invSqrt_Float16_arg.name = "val"_c;
    invSqrt_Float16_arg.type = Type::FullType{ Float16Type.name };
    invSqrt_Float16.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float16.name = invSqrt_Float16_name;
    invSqrt_Float16.backendIndex = 1468;
    invSqrt_Float16.returnType = Type::FullType { Float16Type.name };
    invSqrt_Float16.parameters = invSqrt_Float16_args;
    Symbol::Resolved(&invSqrt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&invSqrt_Float16)->signature = "invSqrt(f16) f16"_c;
    Symbol::Resolved(&invSqrt_Float16)->name = "invSqrt(f16)"_c;
    Symbol::Resolved(&invSqrt_Float16)->nameWithVarNames = "invSqrt(val : f16)"_c;
    Symbol::Resolved(&invSqrt_Float16)->returnTypeSymbol = &Float16Type;

    /// invSqrt with Float16x2
    invSqrt_Float16x2_arg.name = "val"_c;
    invSqrt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    invSqrt_Float16x2.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float16x2.name = invSqrt_Float16x2_name;
    invSqrt_Float16x2.backendIndex = 1469;
    invSqrt_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    invSqrt_Float16x2.parameters = invSqrt_Float16x2_args;
    Symbol::Resolved(&invSqrt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&invSqrt_Float16x2)->signature = "invSqrt(f16x2) f16x2"_c;
    Symbol::Resolved(&invSqrt_Float16x2)->name = "invSqrt(f16x2)"_c;
    Symbol::Resolved(&invSqrt_Float16x2)->nameWithVarNames = "invSqrt(val : f16x2)"_c;
    Symbol::Resolved(&invSqrt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// invSqrt with Float16x3
    invSqrt_Float16x3_arg.name = "val"_c;
    invSqrt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    invSqrt_Float16x3.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float16x3.name = invSqrt_Float16x3_name;
    invSqrt_Float16x3.backendIndex = 1470;
    invSqrt_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    invSqrt_Float16x3.parameters = invSqrt_Float16x3_args;
    Symbol::Resolved(&invSqrt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&invSqrt_Float16x3)->signature = "invSqrt(f16x3) f16x3"_c;
    Symbol::Resolved(&invSqrt_Float16x3)->name = "invSqrt(f16x3)"_c;
    Symbol::Resolved(&invSqrt_Float16x3)->nameWithVarNames = "invSqrt(val : f16x3)"_c;
    Symbol::Resolved(&invSqrt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// invSqrt with Float16x4
    invSqrt_Float16x4_arg.name = "val"_c;
    invSqrt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    invSqrt_Float16x4.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float16x4.name = invSqrt_Float16x4_name;
    invSqrt_Float16x4.backendIndex = 1471;
    invSqrt_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    invSqrt_Float16x4.parameters = invSqrt_Float16x4_args;
    Symbol::Resolved(&invSqrt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&invSqrt_Float16x4)->signature = "invSqrt(f16x4) f16x4"_c;
    Symbol::Resolved(&invSqrt_Float16x4)->name = "invSqrt(f16x4)"_c;
    Symbol::Resolved(&invSqrt_Float16x4)->nameWithVarNames = "invSqrt(val : f16x4)"_c;
    Symbol::Resolved(&invSqrt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// log with Float32
    log_Float32_arg.name = "val"_c;
    log_Float32_arg.type = Type::FullType{ Float32Type.name };
    log_Float32.documentation = "Returns the natural logarithm of a value."_c;
    log_Float32.name = log_Float32_name;
    log_Float32.backendIndex = 1472;
    log_Float32.returnType = Type::FullType { Float32Type.name };
    log_Float32.parameters = log_Float32_args;
    Symbol::Resolved(&log_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&log_Float32)->signature = "log(f32) f32"_c;
    Symbol::Resolved(&log_Float32)->name = "log(f32)"_c;
    Symbol::Resolved(&log_Float32)->nameWithVarNames = "log(val : f32)"_c;
    Symbol::Resolved(&log_Float32)->returnTypeSymbol = &Float32Type;

    /// log with Float32x2
    log_Float32x2_arg.name = "val"_c;
    log_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    log_Float32x2.documentation = "Returns the natural logarithm of a value."_c;
    log_Float32x2.name = log_Float32x2_name;
    log_Float32x2.backendIndex = 1473;
    log_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    log_Float32x2.parameters = log_Float32x2_args;
    Symbol::Resolved(&log_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&log_Float32x2)->signature = "log(f32x2) f32x2"_c;
    Symbol::Resolved(&log_Float32x2)->name = "log(f32x2)"_c;
    Symbol::Resolved(&log_Float32x2)->nameWithVarNames = "log(val : f32x2)"_c;
    Symbol::Resolved(&log_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// log with Float32x3
    log_Float32x3_arg.name = "val"_c;
    log_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    log_Float32x3.documentation = "Returns the natural logarithm of a value."_c;
    log_Float32x3.name = log_Float32x3_name;
    log_Float32x3.backendIndex = 1474;
    log_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    log_Float32x3.parameters = log_Float32x3_args;
    Symbol::Resolved(&log_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&log_Float32x3)->signature = "log(f32x3) f32x3"_c;
    Symbol::Resolved(&log_Float32x3)->name = "log(f32x3)"_c;
    Symbol::Resolved(&log_Float32x3)->nameWithVarNames = "log(val : f32x3)"_c;
    Symbol::Resolved(&log_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// log with Float32x4
    log_Float32x4_arg.name = "val"_c;
    log_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    log_Float32x4.documentation = "Returns the natural logarithm of a value."_c;
    log_Float32x4.name = log_Float32x4_name;
    log_Float32x4.backendIndex = 1475;
    log_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    log_Float32x4.parameters = log_Float32x4_args;
    Symbol::Resolved(&log_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&log_Float32x4)->signature = "log(f32x4) f32x4"_c;
    Symbol::Resolved(&log_Float32x4)->name = "log(f32x4)"_c;
    Symbol::Resolved(&log_Float32x4)->nameWithVarNames = "log(val : f32x4)"_c;
    Symbol::Resolved(&log_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// log with Float16
    log_Float16_arg.name = "val"_c;
    log_Float16_arg.type = Type::FullType{ Float16Type.name };
    log_Float16.documentation = "Returns the natural logarithm of a value."_c;
    log_Float16.name = log_Float16_name;
    log_Float16.backendIndex = 1476;
    log_Float16.returnType = Type::FullType { Float16Type.name };
    log_Float16.parameters = log_Float16_args;
    Symbol::Resolved(&log_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&log_Float16)->signature = "log(f16) f16"_c;
    Symbol::Resolved(&log_Float16)->name = "log(f16)"_c;
    Symbol::Resolved(&log_Float16)->nameWithVarNames = "log(val : f16)"_c;
    Symbol::Resolved(&log_Float16)->returnTypeSymbol = &Float16Type;

    /// log with Float16x2
    log_Float16x2_arg.name = "val"_c;
    log_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    log_Float16x2.documentation = "Returns the natural logarithm of a value."_c;
    log_Float16x2.name = log_Float16x2_name;
    log_Float16x2.backendIndex = 1477;
    log_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    log_Float16x2.parameters = log_Float16x2_args;
    Symbol::Resolved(&log_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&log_Float16x2)->signature = "log(f16x2) f16x2"_c;
    Symbol::Resolved(&log_Float16x2)->name = "log(f16x2)"_c;
    Symbol::Resolved(&log_Float16x2)->nameWithVarNames = "log(val : f16x2)"_c;
    Symbol::Resolved(&log_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// log with Float16x3
    log_Float16x3_arg.name = "val"_c;
    log_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    log_Float16x3.documentation = "Returns the natural logarithm of a value."_c;
    log_Float16x3.name = log_Float16x3_name;
    log_Float16x3.backendIndex = 1478;
    log_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    log_Float16x3.parameters = log_Float16x3_args;
    Symbol::Resolved(&log_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&log_Float16x3)->signature = "log(f16x3) f16x3"_c;
    Symbol::Resolved(&log_Float16x3)->name = "log(f16x3)"_c;
    Symbol::Resolved(&log_Float16x3)->nameWithVarNames = "log(val : f16x3)"_c;
    Symbol::Resolved(&log_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// log with Float16x4
    log_Float16x4_arg.name = "val"_c;
    log_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    log_Float16x4.documentation = "Returns the natural logarithm of a value."_c;
    log_Float16x4.name = log_Float16x4_name;
    log_Float16x4.backendIndex = 1479;
    log_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    log_Float16x4.parameters = log_Float16x4_args;
    Symbol::Resolved(&log_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&log_Float16x4)->signature = "log(f16x4) f16x4"_c;
    Symbol::Resolved(&log_Float16x4)->name = "log(f16x4)"_c;
    Symbol::Resolved(&log_Float16x4)->nameWithVarNames = "log(val : f16x4)"_c;
    Symbol::Resolved(&log_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// log2 with Float32
    log2_Float32_arg.name = "val"_c;
    log2_Float32_arg.type = Type::FullType{ Float32Type.name };
    log2_Float32.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float32.name = log2_Float32_name;
    log2_Float32.backendIndex = 1480;
    log2_Float32.returnType = Type::FullType { Float32Type.name };
    log2_Float32.parameters = log2_Float32_args;
    Symbol::Resolved(&log2_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&log2_Float32)->signature = "log2(f32) f32"_c;
    Symbol::Resolved(&log2_Float32)->name = "log2(f32)"_c;
    Symbol::Resolved(&log2_Float32)->nameWithVarNames = "log2(val : f32)"_c;
    Symbol::Resolved(&log2_Float32)->returnTypeSymbol = &Float32Type;

    /// log2 with Float32x2
    log2_Float32x2_arg.name = "val"_c;
    log2_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    log2_Float32x2.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float32x2.name = log2_Float32x2_name;
    log2_Float32x2.backendIndex = 1481;
    log2_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    log2_Float32x2.parameters = log2_Float32x2_args;
    Symbol::Resolved(&log2_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&log2_Float32x2)->signature = "log2(f32x2) f32x2"_c;
    Symbol::Resolved(&log2_Float32x2)->name = "log2(f32x2)"_c;
    Symbol::Resolved(&log2_Float32x2)->nameWithVarNames = "log2(val : f32x2)"_c;
    Symbol::Resolved(&log2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// log2 with Float32x3
    log2_Float32x3_arg.name = "val"_c;
    log2_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    log2_Float32x3.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float32x3.name = log2_Float32x3_name;
    log2_Float32x3.backendIndex = 1482;
    log2_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    log2_Float32x3.parameters = log2_Float32x3_args;
    Symbol::Resolved(&log2_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&log2_Float32x3)->signature = "log2(f32x3) f32x3"_c;
    Symbol::Resolved(&log2_Float32x3)->name = "log2(f32x3)"_c;
    Symbol::Resolved(&log2_Float32x3)->nameWithVarNames = "log2(val : f32x3)"_c;
    Symbol::Resolved(&log2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// log2 with Float32x4
    log2_Float32x4_arg.name = "val"_c;
    log2_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    log2_Float32x4.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float32x4.name = log2_Float32x4_name;
    log2_Float32x4.backendIndex = 1483;
    log2_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    log2_Float32x4.parameters = log2_Float32x4_args;
    Symbol::Resolved(&log2_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&log2_Float32x4)->signature = "log2(f32x4) f32x4"_c;
    Symbol::Resolved(&log2_Float32x4)->name = "log2(f32x4)"_c;
    Symbol::Resolved(&log2_Float32x4)->nameWithVarNames = "log2(val : f32x4)"_c;
    Symbol::Resolved(&log2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// log2 with Float16
    log2_Float16_arg.name = "val"_c;
    log2_Float16_arg.type = Type::FullType{ Float16Type.name };
    log2_Float16.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float16.name = log2_Float16_name;
    log2_Float16.backendIndex = 1484;
    log2_Float16.returnType = Type::FullType { Float16Type.name };
    log2_Float16.parameters = log2_Float16_args;
    Symbol::Resolved(&log2_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&log2_Float16)->signature = "log2(f16) f16"_c;
    Symbol::Resolved(&log2_Float16)->name = "log2(f16)"_c;
    Symbol::Resolved(&log2_Float16)->nameWithVarNames = "log2(val : f16)"_c;
    Symbol::Resolved(&log2_Float16)->returnTypeSymbol = &Float16Type;

    /// log2 with Float16x2
    log2_Float16x2_arg.name = "val"_c;
    log2_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    log2_Float16x2.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float16x2.name = log2_Float16x2_name;
    log2_Float16x2.backendIndex = 1485;
    log2_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    log2_Float16x2.parameters = log2_Float16x2_args;
    Symbol::Resolved(&log2_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&log2_Float16x2)->signature = "log2(f16x2) f16x2"_c;
    Symbol::Resolved(&log2_Float16x2)->name = "log2(f16x2)"_c;
    Symbol::Resolved(&log2_Float16x2)->nameWithVarNames = "log2(val : f16x2)"_c;
    Symbol::Resolved(&log2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// log2 with Float16x3
    log2_Float16x3_arg.name = "val"_c;
    log2_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    log2_Float16x3.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float16x3.name = log2_Float16x3_name;
    log2_Float16x3.backendIndex = 1486;
    log2_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    log2_Float16x3.parameters = log2_Float16x3_args;
    Symbol::Resolved(&log2_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&log2_Float16x3)->signature = "log2(f16x3) f16x3"_c;
    Symbol::Resolved(&log2_Float16x3)->name = "log2(f16x3)"_c;
    Symbol::Resolved(&log2_Float16x3)->nameWithVarNames = "log2(val : f16x3)"_c;
    Symbol::Resolved(&log2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// log2 with Float16x4
    log2_Float16x4_arg.name = "val"_c;
    log2_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    log2_Float16x4.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float16x4.name = log2_Float16x4_name;
    log2_Float16x4.backendIndex = 1487;
    log2_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    log2_Float16x4.parameters = log2_Float16x4_args;
    Symbol::Resolved(&log2_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&log2_Float16x4)->signature = "log2(f16x4) f16x4"_c;
    Symbol::Resolved(&log2_Float16x4)->name = "log2(f16x4)"_c;
    Symbol::Resolved(&log2_Float16x4)->nameWithVarNames = "log2(val : f16x4)"_c;
    Symbol::Resolved(&log2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// sin with Float32
    sin_Float32_arg.name = "val"_c;
    sin_Float32_arg.type = Type::FullType{ Float32Type.name };
    sin_Float32.documentation = "Returns the sine of a value."_c;
    sin_Float32.name = sin_Float32_name;
    sin_Float32.backendIndex = 1488;
    sin_Float32.returnType = Type::FullType { Float32Type.name };
    sin_Float32.parameters = sin_Float32_args;
    Symbol::Resolved(&sin_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sin_Float32)->signature = "sin(f32) f32"_c;
    Symbol::Resolved(&sin_Float32)->name = "sin(f32)"_c;
    Symbol::Resolved(&sin_Float32)->nameWithVarNames = "sin(val : f32)"_c;
    Symbol::Resolved(&sin_Float32)->returnTypeSymbol = &Float32Type;

    /// sin with Float32x2
    sin_Float32x2_arg.name = "val"_c;
    sin_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sin_Float32x2.documentation = "Returns the sine of a value."_c;
    sin_Float32x2.name = sin_Float32x2_name;
    sin_Float32x2.backendIndex = 1489;
    sin_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    sin_Float32x2.parameters = sin_Float32x2_args;
    Symbol::Resolved(&sin_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sin_Float32x2)->signature = "sin(f32x2) f32x2"_c;
    Symbol::Resolved(&sin_Float32x2)->name = "sin(f32x2)"_c;
    Symbol::Resolved(&sin_Float32x2)->nameWithVarNames = "sin(val : f32x2)"_c;
    Symbol::Resolved(&sin_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// sin with Float32x3
    sin_Float32x3_arg.name = "val"_c;
    sin_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sin_Float32x3.documentation = "Returns the sine of a value."_c;
    sin_Float32x3.name = sin_Float32x3_name;
    sin_Float32x3.backendIndex = 1490;
    sin_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    sin_Float32x3.parameters = sin_Float32x3_args;
    Symbol::Resolved(&sin_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sin_Float32x3)->signature = "sin(f32x3) f32x3"_c;
    Symbol::Resolved(&sin_Float32x3)->name = "sin(f32x3)"_c;
    Symbol::Resolved(&sin_Float32x3)->nameWithVarNames = "sin(val : f32x3)"_c;
    Symbol::Resolved(&sin_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// sin with Float32x4
    sin_Float32x4_arg.name = "val"_c;
    sin_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sin_Float32x4.documentation = "Returns the sine of a value."_c;
    sin_Float32x4.name = sin_Float32x4_name;
    sin_Float32x4.backendIndex = 1491;
    sin_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    sin_Float32x4.parameters = sin_Float32x4_args;
    Symbol::Resolved(&sin_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sin_Float32x4)->signature = "sin(f32x4) f32x4"_c;
    Symbol::Resolved(&sin_Float32x4)->name = "sin(f32x4)"_c;
    Symbol::Resolved(&sin_Float32x4)->nameWithVarNames = "sin(val : f32x4)"_c;
    Symbol::Resolved(&sin_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// sin with Float16
    sin_Float16_arg.name = "val"_c;
    sin_Float16_arg.type = Type::FullType{ Float16Type.name };
    sin_Float16.documentation = "Returns the sine of a value."_c;
    sin_Float16.name = sin_Float16_name;
    sin_Float16.backendIndex = 1492;
    sin_Float16.returnType = Type::FullType { Float16Type.name };
    sin_Float16.parameters = sin_Float16_args;
    Symbol::Resolved(&sin_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sin_Float16)->signature = "sin(f16) f16"_c;
    Symbol::Resolved(&sin_Float16)->name = "sin(f16)"_c;
    Symbol::Resolved(&sin_Float16)->nameWithVarNames = "sin(val : f16)"_c;
    Symbol::Resolved(&sin_Float16)->returnTypeSymbol = &Float16Type;

    /// sin with Float16x2
    sin_Float16x2_arg.name = "val"_c;
    sin_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sin_Float16x2.documentation = "Returns the sine of a value."_c;
    sin_Float16x2.name = sin_Float16x2_name;
    sin_Float16x2.backendIndex = 1493;
    sin_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    sin_Float16x2.parameters = sin_Float16x2_args;
    Symbol::Resolved(&sin_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sin_Float16x2)->signature = "sin(f16x2) f16x2"_c;
    Symbol::Resolved(&sin_Float16x2)->name = "sin(f16x2)"_c;
    Symbol::Resolved(&sin_Float16x2)->nameWithVarNames = "sin(val : f16x2)"_c;
    Symbol::Resolved(&sin_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// sin with Float16x3
    sin_Float16x3_arg.name = "val"_c;
    sin_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sin_Float16x3.documentation = "Returns the sine of a value."_c;
    sin_Float16x3.name = sin_Float16x3_name;
    sin_Float16x3.backendIndex = 1494;
    sin_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    sin_Float16x3.parameters = sin_Float16x3_args;
    Symbol::Resolved(&sin_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sin_Float16x3)->signature = "sin(f16x3) f16x3"_c;
    Symbol::Resolved(&sin_Float16x3)->name = "sin(f16x3)"_c;
    Symbol::Resolved(&sin_Float16x3)->nameWithVarNames = "sin(val : f16x3)"_c;
    Symbol::Resolved(&sin_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// sin with Float16x4
    sin_Float16x4_arg.name = "val"_c;
    sin_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sin_Float16x4.documentation = "Returns the sine of a value."_c;
    sin_Float16x4.name = sin_Float16x4_name;
    sin_Float16x4.backendIndex = 1495;
    sin_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    sin_Float16x4.parameters = sin_Float16x4_args;
    Symbol::Resolved(&sin_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sin_Float16x4)->signature = "sin(f16x4) f16x4"_c;
    Symbol::Resolved(&sin_Float16x4)->name = "sin(f16x4)"_c;
    Symbol::Resolved(&sin_Float16x4)->nameWithVarNames = "sin(val : f16x4)"_c;
    Symbol::Resolved(&sin_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// sinh with Float32
    sinh_Float32_arg.name = "val"_c;
    sinh_Float32_arg.type = Type::FullType{ Float32Type.name };
    sinh_Float32.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float32.name = sinh_Float32_name;
    sinh_Float32.backendIndex = 1496;
    sinh_Float32.returnType = Type::FullType { Float32Type.name };
    sinh_Float32.parameters = sinh_Float32_args;
    Symbol::Resolved(&sinh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sinh_Float32)->signature = "sinh(f32) f32"_c;
    Symbol::Resolved(&sinh_Float32)->name = "sinh(f32)"_c;
    Symbol::Resolved(&sinh_Float32)->nameWithVarNames = "sinh(val : f32)"_c;
    Symbol::Resolved(&sinh_Float32)->returnTypeSymbol = &Float32Type;

    /// sinh with Float32x2
    sinh_Float32x2_arg.name = "val"_c;
    sinh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sinh_Float32x2.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float32x2.name = sinh_Float32x2_name;
    sinh_Float32x2.backendIndex = 1497;
    sinh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    sinh_Float32x2.parameters = sinh_Float32x2_args;
    Symbol::Resolved(&sinh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sinh_Float32x2)->signature = "sinh(f32x2) f32x2"_c;
    Symbol::Resolved(&sinh_Float32x2)->name = "sinh(f32x2)"_c;
    Symbol::Resolved(&sinh_Float32x2)->nameWithVarNames = "sinh(val : f32x2)"_c;
    Symbol::Resolved(&sinh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// sinh with Float32x3
    sinh_Float32x3_arg.name = "val"_c;
    sinh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sinh_Float32x3.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float32x3.name = sinh_Float32x3_name;
    sinh_Float32x3.backendIndex = 1498;
    sinh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    sinh_Float32x3.parameters = sinh_Float32x3_args;
    Symbol::Resolved(&sinh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sinh_Float32x3)->signature = "sinh(f32x3) f32x3"_c;
    Symbol::Resolved(&sinh_Float32x3)->name = "sinh(f32x3)"_c;
    Symbol::Resolved(&sinh_Float32x3)->nameWithVarNames = "sinh(val : f32x3)"_c;
    Symbol::Resolved(&sinh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// sinh with Float32x4
    sinh_Float32x4_arg.name = "val"_c;
    sinh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sinh_Float32x4.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float32x4.name = sinh_Float32x4_name;
    sinh_Float32x4.backendIndex = 1499;
    sinh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    sinh_Float32x4.parameters = sinh_Float32x4_args;
    Symbol::Resolved(&sinh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sinh_Float32x4)->signature = "sinh(f32x4) f32x4"_c;
    Symbol::Resolved(&sinh_Float32x4)->name = "sinh(f32x4)"_c;
    Symbol::Resolved(&sinh_Float32x4)->nameWithVarNames = "sinh(val : f32x4)"_c;
    Symbol::Resolved(&sinh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// sinh with Float16
    sinh_Float16_arg.name = "val"_c;
    sinh_Float16_arg.type = Type::FullType{ Float16Type.name };
    sinh_Float16.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float16.name = sinh_Float16_name;
    sinh_Float16.backendIndex = 1500;
    sinh_Float16.returnType = Type::FullType { Float16Type.name };
    sinh_Float16.parameters = sinh_Float16_args;
    Symbol::Resolved(&sinh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sinh_Float16)->signature = "sinh(f16) f16"_c;
    Symbol::Resolved(&sinh_Float16)->name = "sinh(f16)"_c;
    Symbol::Resolved(&sinh_Float16)->nameWithVarNames = "sinh(val : f16)"_c;
    Symbol::Resolved(&sinh_Float16)->returnTypeSymbol = &Float16Type;

    /// sinh with Float16x2
    sinh_Float16x2_arg.name = "val"_c;
    sinh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sinh_Float16x2.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float16x2.name = sinh_Float16x2_name;
    sinh_Float16x2.backendIndex = 1501;
    sinh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    sinh_Float16x2.parameters = sinh_Float16x2_args;
    Symbol::Resolved(&sinh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sinh_Float16x2)->signature = "sinh(f16x2) f16x2"_c;
    Symbol::Resolved(&sinh_Float16x2)->name = "sinh(f16x2)"_c;
    Symbol::Resolved(&sinh_Float16x2)->nameWithVarNames = "sinh(val : f16x2)"_c;
    Symbol::Resolved(&sinh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// sinh with Float16x3
    sinh_Float16x3_arg.name = "val"_c;
    sinh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sinh_Float16x3.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float16x3.name = sinh_Float16x3_name;
    sinh_Float16x3.backendIndex = 1502;
    sinh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    sinh_Float16x3.parameters = sinh_Float16x3_args;
    Symbol::Resolved(&sinh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sinh_Float16x3)->signature = "sinh(f16x3) f16x3"_c;
    Symbol::Resolved(&sinh_Float16x3)->name = "sinh(f16x3)"_c;
    Symbol::Resolved(&sinh_Float16x3)->nameWithVarNames = "sinh(val : f16x3)"_c;
    Symbol::Resolved(&sinh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// sinh with Float16x4
    sinh_Float16x4_arg.name = "val"_c;
    sinh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sinh_Float16x4.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float16x4.name = sinh_Float16x4_name;
    sinh_Float16x4.backendIndex = 1503;
    sinh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    sinh_Float16x4.parameters = sinh_Float16x4_args;
    Symbol::Resolved(&sinh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sinh_Float16x4)->signature = "sinh(f16x4) f16x4"_c;
    Symbol::Resolved(&sinh_Float16x4)->name = "sinh(f16x4)"_c;
    Symbol::Resolved(&sinh_Float16x4)->nameWithVarNames = "sinh(val : f16x4)"_c;
    Symbol::Resolved(&sinh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// sqrt with Float32
    sqrt_Float32_arg.name = "val"_c;
    sqrt_Float32_arg.type = Type::FullType{ Float32Type.name };
    sqrt_Float32.documentation = "Returns the square root of a value."_c;
    sqrt_Float32.name = sqrt_Float32_name;
    sqrt_Float32.backendIndex = 1504;
    sqrt_Float32.returnType = Type::FullType { Float32Type.name };
    sqrt_Float32.parameters = sqrt_Float32_args;
    Symbol::Resolved(&sqrt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sqrt_Float32)->signature = "sqrt(f32) f32"_c;
    Symbol::Resolved(&sqrt_Float32)->name = "sqrt(f32)"_c;
    Symbol::Resolved(&sqrt_Float32)->nameWithVarNames = "sqrt(val : f32)"_c;
    Symbol::Resolved(&sqrt_Float32)->returnTypeSymbol = &Float32Type;

    /// sqrt with Float32x2
    sqrt_Float32x2_arg.name = "val"_c;
    sqrt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sqrt_Float32x2.documentation = "Returns the square root of a value."_c;
    sqrt_Float32x2.name = sqrt_Float32x2_name;
    sqrt_Float32x2.backendIndex = 1505;
    sqrt_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    sqrt_Float32x2.parameters = sqrt_Float32x2_args;
    Symbol::Resolved(&sqrt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sqrt_Float32x2)->signature = "sqrt(f32x2) f32x2"_c;
    Symbol::Resolved(&sqrt_Float32x2)->name = "sqrt(f32x2)"_c;
    Symbol::Resolved(&sqrt_Float32x2)->nameWithVarNames = "sqrt(val : f32x2)"_c;
    Symbol::Resolved(&sqrt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// sqrt with Float32x3
    sqrt_Float32x3_arg.name = "val"_c;
    sqrt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sqrt_Float32x3.documentation = "Returns the square root of a value."_c;
    sqrt_Float32x3.name = sqrt_Float32x3_name;
    sqrt_Float32x3.backendIndex = 1506;
    sqrt_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    sqrt_Float32x3.parameters = sqrt_Float32x3_args;
    Symbol::Resolved(&sqrt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sqrt_Float32x3)->signature = "sqrt(f32x3) f32x3"_c;
    Symbol::Resolved(&sqrt_Float32x3)->name = "sqrt(f32x3)"_c;
    Symbol::Resolved(&sqrt_Float32x3)->nameWithVarNames = "sqrt(val : f32x3)"_c;
    Symbol::Resolved(&sqrt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// sqrt with Float32x4
    sqrt_Float32x4_arg.name = "val"_c;
    sqrt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sqrt_Float32x4.documentation = "Returns the square root of a value."_c;
    sqrt_Float32x4.name = sqrt_Float32x4_name;
    sqrt_Float32x4.backendIndex = 1507;
    sqrt_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    sqrt_Float32x4.parameters = sqrt_Float32x4_args;
    Symbol::Resolved(&sqrt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sqrt_Float32x4)->signature = "sqrt(f32x4) f32x4"_c;
    Symbol::Resolved(&sqrt_Float32x4)->name = "sqrt(f32x4)"_c;
    Symbol::Resolved(&sqrt_Float32x4)->nameWithVarNames = "sqrt(val : f32x4)"_c;
    Symbol::Resolved(&sqrt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// sqrt with Float16
    sqrt_Float16_arg.name = "val"_c;
    sqrt_Float16_arg.type = Type::FullType{ Float16Type.name };
    sqrt_Float16.documentation = "Returns the square root of a value."_c;
    sqrt_Float16.name = sqrt_Float16_name;
    sqrt_Float16.backendIndex = 1508;
    sqrt_Float16.returnType = Type::FullType { Float16Type.name };
    sqrt_Float16.parameters = sqrt_Float16_args;
    Symbol::Resolved(&sqrt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sqrt_Float16)->signature = "sqrt(f16) f16"_c;
    Symbol::Resolved(&sqrt_Float16)->name = "sqrt(f16)"_c;
    Symbol::Resolved(&sqrt_Float16)->nameWithVarNames = "sqrt(val : f16)"_c;
    Symbol::Resolved(&sqrt_Float16)->returnTypeSymbol = &Float16Type;

    /// sqrt with Float16x2
    sqrt_Float16x2_arg.name = "val"_c;
    sqrt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sqrt_Float16x2.documentation = "Returns the square root of a value."_c;
    sqrt_Float16x2.name = sqrt_Float16x2_name;
    sqrt_Float16x2.backendIndex = 1509;
    sqrt_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    sqrt_Float16x2.parameters = sqrt_Float16x2_args;
    Symbol::Resolved(&sqrt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sqrt_Float16x2)->signature = "sqrt(f16x2) f16x2"_c;
    Symbol::Resolved(&sqrt_Float16x2)->name = "sqrt(f16x2)"_c;
    Symbol::Resolved(&sqrt_Float16x2)->nameWithVarNames = "sqrt(val : f16x2)"_c;
    Symbol::Resolved(&sqrt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// sqrt with Float16x3
    sqrt_Float16x3_arg.name = "val"_c;
    sqrt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sqrt_Float16x3.documentation = "Returns the square root of a value."_c;
    sqrt_Float16x3.name = sqrt_Float16x3_name;
    sqrt_Float16x3.backendIndex = 1510;
    sqrt_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    sqrt_Float16x3.parameters = sqrt_Float16x3_args;
    Symbol::Resolved(&sqrt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sqrt_Float16x3)->signature = "sqrt(f16x3) f16x3"_c;
    Symbol::Resolved(&sqrt_Float16x3)->name = "sqrt(f16x3)"_c;
    Symbol::Resolved(&sqrt_Float16x3)->nameWithVarNames = "sqrt(val : f16x3)"_c;
    Symbol::Resolved(&sqrt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// sqrt with Float16x4
    sqrt_Float16x4_arg.name = "val"_c;
    sqrt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sqrt_Float16x4.documentation = "Returns the square root of a value."_c;
    sqrt_Float16x4.name = sqrt_Float16x4_name;
    sqrt_Float16x4.backendIndex = 1511;
    sqrt_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    sqrt_Float16x4.parameters = sqrt_Float16x4_args;
    Symbol::Resolved(&sqrt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sqrt_Float16x4)->signature = "sqrt(f16x4) f16x4"_c;
    Symbol::Resolved(&sqrt_Float16x4)->name = "sqrt(f16x4)"_c;
    Symbol::Resolved(&sqrt_Float16x4)->nameWithVarNames = "sqrt(val : f16x4)"_c;
    Symbol::Resolved(&sqrt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// tan with Float32
    tan_Float32_arg.name = "val"_c;
    tan_Float32_arg.type = Type::FullType{ Float32Type.name };
    tan_Float32.documentation = "Returns the tangent of a value."_c;
    tan_Float32.name = tan_Float32_name;
    tan_Float32.backendIndex = 1512;
    tan_Float32.returnType = Type::FullType { Float32Type.name };
    tan_Float32.parameters = tan_Float32_args;
    Symbol::Resolved(&tan_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&tan_Float32)->signature = "tan(f32) f32"_c;
    Symbol::Resolved(&tan_Float32)->name = "tan(f32)"_c;
    Symbol::Resolved(&tan_Float32)->nameWithVarNames = "tan(val : f32)"_c;
    Symbol::Resolved(&tan_Float32)->returnTypeSymbol = &Float32Type;

    /// tan with Float32x2
    tan_Float32x2_arg.name = "val"_c;
    tan_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    tan_Float32x2.documentation = "Returns the tangent of a value."_c;
    tan_Float32x2.name = tan_Float32x2_name;
    tan_Float32x2.backendIndex = 1513;
    tan_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    tan_Float32x2.parameters = tan_Float32x2_args;
    Symbol::Resolved(&tan_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&tan_Float32x2)->signature = "tan(f32x2) f32x2"_c;
    Symbol::Resolved(&tan_Float32x2)->name = "tan(f32x2)"_c;
    Symbol::Resolved(&tan_Float32x2)->nameWithVarNames = "tan(val : f32x2)"_c;
    Symbol::Resolved(&tan_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// tan with Float32x3
    tan_Float32x3_arg.name = "val"_c;
    tan_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    tan_Float32x3.documentation = "Returns the tangent of a value."_c;
    tan_Float32x3.name = tan_Float32x3_name;
    tan_Float32x3.backendIndex = 1514;
    tan_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    tan_Float32x3.parameters = tan_Float32x3_args;
    Symbol::Resolved(&tan_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&tan_Float32x3)->signature = "tan(f32x3) f32x3"_c;
    Symbol::Resolved(&tan_Float32x3)->name = "tan(f32x3)"_c;
    Symbol::Resolved(&tan_Float32x3)->nameWithVarNames = "tan(val : f32x3)"_c;
    Symbol::Resolved(&tan_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// tan with Float32x4
    tan_Float32x4_arg.name = "val"_c;
    tan_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    tan_Float32x4.documentation = "Returns the tangent of a value."_c;
    tan_Float32x4.name = tan_Float32x4_name;
    tan_Float32x4.backendIndex = 1515;
    tan_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    tan_Float32x4.parameters = tan_Float32x4_args;
    Symbol::Resolved(&tan_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&tan_Float32x4)->signature = "tan(f32x4) f32x4"_c;
    Symbol::Resolved(&tan_Float32x4)->name = "tan(f32x4)"_c;
    Symbol::Resolved(&tan_Float32x4)->nameWithVarNames = "tan(val : f32x4)"_c;
    Symbol::Resolved(&tan_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// tan with Float16
    tan_Float16_arg.name = "val"_c;
    tan_Float16_arg.type = Type::FullType{ Float16Type.name };
    tan_Float16.documentation = "Returns the tangent of a value."_c;
    tan_Float16.name = tan_Float16_name;
    tan_Float16.backendIndex = 1516;
    tan_Float16.returnType = Type::FullType { Float16Type.name };
    tan_Float16.parameters = tan_Float16_args;
    Symbol::Resolved(&tan_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&tan_Float16)->signature = "tan(f16) f16"_c;
    Symbol::Resolved(&tan_Float16)->name = "tan(f16)"_c;
    Symbol::Resolved(&tan_Float16)->nameWithVarNames = "tan(val : f16)"_c;
    Symbol::Resolved(&tan_Float16)->returnTypeSymbol = &Float16Type;

    /// tan with Float16x2
    tan_Float16x2_arg.name = "val"_c;
    tan_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    tan_Float16x2.documentation = "Returns the tangent of a value."_c;
    tan_Float16x2.name = tan_Float16x2_name;
    tan_Float16x2.backendIndex = 1517;
    tan_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    tan_Float16x2.parameters = tan_Float16x2_args;
    Symbol::Resolved(&tan_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&tan_Float16x2)->signature = "tan(f16x2) f16x2"_c;
    Symbol::Resolved(&tan_Float16x2)->name = "tan(f16x2)"_c;
    Symbol::Resolved(&tan_Float16x2)->nameWithVarNames = "tan(val : f16x2)"_c;
    Symbol::Resolved(&tan_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// tan with Float16x3
    tan_Float16x3_arg.name = "val"_c;
    tan_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    tan_Float16x3.documentation = "Returns the tangent of a value."_c;
    tan_Float16x3.name = tan_Float16x3_name;
    tan_Float16x3.backendIndex = 1518;
    tan_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    tan_Float16x3.parameters = tan_Float16x3_args;
    Symbol::Resolved(&tan_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&tan_Float16x3)->signature = "tan(f16x3) f16x3"_c;
    Symbol::Resolved(&tan_Float16x3)->name = "tan(f16x3)"_c;
    Symbol::Resolved(&tan_Float16x3)->nameWithVarNames = "tan(val : f16x3)"_c;
    Symbol::Resolved(&tan_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// tan with Float16x4
    tan_Float16x4_arg.name = "val"_c;
    tan_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    tan_Float16x4.documentation = "Returns the tangent of a value."_c;
    tan_Float16x4.name = tan_Float16x4_name;
    tan_Float16x4.backendIndex = 1519;
    tan_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    tan_Float16x4.parameters = tan_Float16x4_args;
    Symbol::Resolved(&tan_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&tan_Float16x4)->signature = "tan(f16x4) f16x4"_c;
    Symbol::Resolved(&tan_Float16x4)->name = "tan(f16x4)"_c;
    Symbol::Resolved(&tan_Float16x4)->nameWithVarNames = "tan(val : f16x4)"_c;
    Symbol::Resolved(&tan_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// tanh with Float32
    tanh_Float32_arg.name = "val"_c;
    tanh_Float32_arg.type = Type::FullType{ Float32Type.name };
    tanh_Float32.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float32.name = tanh_Float32_name;
    tanh_Float32.backendIndex = 1520;
    tanh_Float32.returnType = Type::FullType { Float32Type.name };
    tanh_Float32.parameters = tanh_Float32_args;
    Symbol::Resolved(&tanh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&tanh_Float32)->signature = "tanh(f32) f32"_c;
    Symbol::Resolved(&tanh_Float32)->name = "tanh(f32)"_c;
    Symbol::Resolved(&tanh_Float32)->nameWithVarNames = "tanh(val : f32)"_c;
    Symbol::Resolved(&tanh_Float32)->returnTypeSymbol = &Float32Type;

    /// tanh with Float32x2
    tanh_Float32x2_arg.name = "val"_c;
    tanh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    tanh_Float32x2.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float32x2.name = tanh_Float32x2_name;
    tanh_Float32x2.backendIndex = 1521;
    tanh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    tanh_Float32x2.parameters = tanh_Float32x2_args;
    Symbol::Resolved(&tanh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&tanh_Float32x2)->signature = "tanh(f32x2) f32x2"_c;
    Symbol::Resolved(&tanh_Float32x2)->name = "tanh(f32x2)"_c;
    Symbol::Resolved(&tanh_Float32x2)->nameWithVarNames = "tanh(val : f32x2)"_c;
    Symbol::Resolved(&tanh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// tanh with Float32x3
    tanh_Float32x3_arg.name = "val"_c;
    tanh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    tanh_Float32x3.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float32x3.name = tanh_Float32x3_name;
    tanh_Float32x3.backendIndex = 1522;
    tanh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    tanh_Float32x3.parameters = tanh_Float32x3_args;
    Symbol::Resolved(&tanh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&tanh_Float32x3)->signature = "tanh(f32x3) f32x3"_c;
    Symbol::Resolved(&tanh_Float32x3)->name = "tanh(f32x3)"_c;
    Symbol::Resolved(&tanh_Float32x3)->nameWithVarNames = "tanh(val : f32x3)"_c;
    Symbol::Resolved(&tanh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// tanh with Float32x4
    tanh_Float32x4_arg.name = "val"_c;
    tanh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    tanh_Float32x4.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float32x4.name = tanh_Float32x4_name;
    tanh_Float32x4.backendIndex = 1523;
    tanh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    tanh_Float32x4.parameters = tanh_Float32x4_args;
    Symbol::Resolved(&tanh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&tanh_Float32x4)->signature = "tanh(f32x4) f32x4"_c;
    Symbol::Resolved(&tanh_Float32x4)->name = "tanh(f32x4)"_c;
    Symbol::Resolved(&tanh_Float32x4)->nameWithVarNames = "tanh(val : f32x4)"_c;
    Symbol::Resolved(&tanh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// tanh with Float16
    tanh_Float16_arg.name = "val"_c;
    tanh_Float16_arg.type = Type::FullType{ Float16Type.name };
    tanh_Float16.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float16.name = tanh_Float16_name;
    tanh_Float16.backendIndex = 1524;
    tanh_Float16.returnType = Type::FullType { Float16Type.name };
    tanh_Float16.parameters = tanh_Float16_args;
    Symbol::Resolved(&tanh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&tanh_Float16)->signature = "tanh(f16) f16"_c;
    Symbol::Resolved(&tanh_Float16)->name = "tanh(f16)"_c;
    Symbol::Resolved(&tanh_Float16)->nameWithVarNames = "tanh(val : f16)"_c;
    Symbol::Resolved(&tanh_Float16)->returnTypeSymbol = &Float16Type;

    /// tanh with Float16x2
    tanh_Float16x2_arg.name = "val"_c;
    tanh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    tanh_Float16x2.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float16x2.name = tanh_Float16x2_name;
    tanh_Float16x2.backendIndex = 1525;
    tanh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    tanh_Float16x2.parameters = tanh_Float16x2_args;
    Symbol::Resolved(&tanh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&tanh_Float16x2)->signature = "tanh(f16x2) f16x2"_c;
    Symbol::Resolved(&tanh_Float16x2)->name = "tanh(f16x2)"_c;
    Symbol::Resolved(&tanh_Float16x2)->nameWithVarNames = "tanh(val : f16x2)"_c;
    Symbol::Resolved(&tanh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// tanh with Float16x3
    tanh_Float16x3_arg.name = "val"_c;
    tanh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    tanh_Float16x3.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float16x3.name = tanh_Float16x3_name;
    tanh_Float16x3.backendIndex = 1526;
    tanh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    tanh_Float16x3.parameters = tanh_Float16x3_args;
    Symbol::Resolved(&tanh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&tanh_Float16x3)->signature = "tanh(f16x3) f16x3"_c;
    Symbol::Resolved(&tanh_Float16x3)->name = "tanh(f16x3)"_c;
    Symbol::Resolved(&tanh_Float16x3)->nameWithVarNames = "tanh(val : f16x3)"_c;
    Symbol::Resolved(&tanh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// tanh with Float16x4
    tanh_Float16x4_arg.name = "val"_c;
    tanh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    tanh_Float16x4.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float16x4.name = tanh_Float16x4_name;
    tanh_Float16x4.backendIndex = 1527;
    tanh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    tanh_Float16x4.parameters = tanh_Float16x4_args;
    Symbol::Resolved(&tanh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&tanh_Float16x4)->signature = "tanh(f16x4) f16x4"_c;
    Symbol::Resolved(&tanh_Float16x4)->name = "tanh(f16x4)"_c;
    Symbol::Resolved(&tanh_Float16x4)->nameWithVarNames = "tanh(val : f16x4)"_c;
    Symbol::Resolved(&tanh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// atan2 with Float32, Float32
    atan2_Float32_y.name = "y"_c;
    atan2_Float32_y.type = Type::FullType{ Float32Type.name };
    atan2_Float32_x.name = "x"_c;
    atan2_Float32_x.type = Type::FullType{ Float32Type.name };
    atan2_Float32.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float32.name = atan2_Float32_name;
    atan2_Float32.backendIndex = 1528;
    atan2_Float32.returnType = Type::FullType { Float32Type.name };
    atan2_Float32.parameters = atan2_Float32_args;
    Symbol::Resolved(&atan2_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan2_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan2_Float32)->signature = "atan2(f32,f32) f32"_c;
    Symbol::Resolved(&atan2_Float32)->name = "atan2(f32,f32)"_c;
    Symbol::Resolved(&atan2_Float32)->nameWithVarNames = "atan2(y : f32, x : f32)"_c;
    Symbol::Resolved(&atan2_Float32)->returnTypeSymbol = &Float32Type;

    /// atan2 with Float32x2, Float32x2
    atan2_Float32x2_y.name = "y"_c;
    atan2_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    atan2_Float32x2_x.name = "x"_c;
    atan2_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    atan2_Float32x2.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float32x2.name = atan2_Float32x2_name;
    atan2_Float32x2.backendIndex = 1529;
    atan2_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    atan2_Float32x2.parameters = atan2_Float32x2_args;
    Symbol::Resolved(&atan2_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan2_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan2_Float32x2)->signature = "atan2(f32x2,f32x2) f32x2"_c;
    Symbol::Resolved(&atan2_Float32x2)->name = "atan2(f32x2,f32x2)"_c;
    Symbol::Resolved(&atan2_Float32x2)->nameWithVarNames = "atan2(y : f32x2, x : f32x2)"_c;
    Symbol::Resolved(&atan2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// atan2 with Float32x3, Float32x3
    atan2_Float32x3_y.name = "y"_c;
    atan2_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    atan2_Float32x3_x.name = "x"_c;
    atan2_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    atan2_Float32x3.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float32x3.name = atan2_Float32x3_name;
    atan2_Float32x3.backendIndex = 1530;
    atan2_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    atan2_Float32x3.parameters = atan2_Float32x3_args;
    Symbol::Resolved(&atan2_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan2_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan2_Float32x3)->signature = "atan2(f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&atan2_Float32x3)->name = "atan2(f32x3,f32x3)"_c;
    Symbol::Resolved(&atan2_Float32x3)->nameWithVarNames = "atan2(y : f32x3, x : f32x3)"_c;
    Symbol::Resolved(&atan2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// atan2 with Float32x4, Float32x4
    atan2_Float32x4_y.name = "y"_c;
    atan2_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    atan2_Float32x4_x.name = "x"_c;
    atan2_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    atan2_Float32x4.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float32x4.name = atan2_Float32x4_name;
    atan2_Float32x4.backendIndex = 1531;
    atan2_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    atan2_Float32x4.parameters = atan2_Float32x4_args;
    Symbol::Resolved(&atan2_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan2_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan2_Float32x4)->signature = "atan2(f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&atan2_Float32x4)->name = "atan2(f32x4,f32x4)"_c;
    Symbol::Resolved(&atan2_Float32x4)->nameWithVarNames = "atan2(y : f32x4, x : f32x4)"_c;
    Symbol::Resolved(&atan2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// atan2 with Float16, Float16
    atan2_Float16_y.name = "y"_c;
    atan2_Float16_y.type = Type::FullType{ Float16Type.name };
    atan2_Float16_x.name = "x"_c;
    atan2_Float16_x.type = Type::FullType{ Float16Type.name };
    atan2_Float16.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float16.name = atan2_Float16_name;
    atan2_Float16.backendIndex = 1532;
    atan2_Float16.returnType = Type::FullType { Float16Type.name };
    atan2_Float16.parameters = atan2_Float16_args;
    Symbol::Resolved(&atan2_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan2_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan2_Float16)->signature = "atan2(f16,f16) f16"_c;
    Symbol::Resolved(&atan2_Float16)->name = "atan2(f16,f16)"_c;
    Symbol::Resolved(&atan2_Float16)->nameWithVarNames = "atan2(y : f16, x : f16)"_c;
    Symbol::Resolved(&atan2_Float16)->returnTypeSymbol = &Float16Type;

    /// atan2 with Float16x2, Float16x2
    atan2_Float16x2_y.name = "y"_c;
    atan2_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    atan2_Float16x2_x.name = "x"_c;
    atan2_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    atan2_Float16x2.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float16x2.name = atan2_Float16x2_name;
    atan2_Float16x2.backendIndex = 1533;
    atan2_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    atan2_Float16x2.parameters = atan2_Float16x2_args;
    Symbol::Resolved(&atan2_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan2_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan2_Float16x2)->signature = "atan2(f16x2,f16x2) f16x2"_c;
    Symbol::Resolved(&atan2_Float16x2)->name = "atan2(f16x2,f16x2)"_c;
    Symbol::Resolved(&atan2_Float16x2)->nameWithVarNames = "atan2(y : f16x2, x : f16x2)"_c;
    Symbol::Resolved(&atan2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// atan2 with Float16x3, Float16x3
    atan2_Float16x3_y.name = "y"_c;
    atan2_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    atan2_Float16x3_x.name = "x"_c;
    atan2_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    atan2_Float16x3.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float16x3.name = atan2_Float16x3_name;
    atan2_Float16x3.backendIndex = 1534;
    atan2_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    atan2_Float16x3.parameters = atan2_Float16x3_args;
    Symbol::Resolved(&atan2_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan2_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan2_Float16x3)->signature = "atan2(f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&atan2_Float16x3)->name = "atan2(f16x3,f16x3)"_c;
    Symbol::Resolved(&atan2_Float16x3)->nameWithVarNames = "atan2(y : f16x3, x : f16x3)"_c;
    Symbol::Resolved(&atan2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// atan2 with Float16x4, Float16x4
    atan2_Float16x4_y.name = "y"_c;
    atan2_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    atan2_Float16x4_x.name = "x"_c;
    atan2_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    atan2_Float16x4.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float16x4.name = atan2_Float16x4_name;
    atan2_Float16x4.backendIndex = 1535;
    atan2_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    atan2_Float16x4.parameters = atan2_Float16x4_args;
    Symbol::Resolved(&atan2_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan2_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan2_Float16x4)->signature = "atan2(f16x4,f16x4) f16x4"_c;
    Symbol::Resolved(&atan2_Float16x4)->name = "atan2(f16x4,f16x4)"_c;
    Symbol::Resolved(&atan2_Float16x4)->nameWithVarNames = "atan2(y : f16x4, x : f16x4)"_c;
    Symbol::Resolved(&atan2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// pow with Float32, Float32
    pow_Float32_arg.name = "val"_c;
    pow_Float32_arg.type = Type::FullType{ Float32Type.name };
    pow_Float32_exp.name = "exponent"_c;
    pow_Float32_exp.type = Type::FullType{ Float32Type.name };
    pow_Float32.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float32.name = pow_Float32_name;
    pow_Float32.backendIndex = 1536;
    pow_Float32.returnType = Type::FullType { Float32Type.name };
    pow_Float32.parameters = pow_Float32_args;
    Symbol::Resolved(&pow_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&pow_Float32_exp)->typeSymbol = &Float32Type;
    Symbol::Resolved(&pow_Float32)->signature = "pow(f32,f32) f32"_c;
    Symbol::Resolved(&pow_Float32)->name = "pow(f32,f32)"_c;
    Symbol::Resolved(&pow_Float32)->nameWithVarNames = "pow(val : f32, exponent : f32)"_c;
    Symbol::Resolved(&pow_Float32)->returnTypeSymbol = &Float32Type;

    /// pow with Float32x2, Float32x2
    pow_Float32x2_arg.name = "val"_c;
    pow_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    pow_Float32x2_exp.name = "exponent"_c;
    pow_Float32x2_exp.type = Type::FullType{ Float32x2Type.name };
    pow_Float32x2.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float32x2.name = pow_Float32x2_name;
    pow_Float32x2.backendIndex = 1537;
    pow_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    pow_Float32x2.parameters = pow_Float32x2_args;
    Symbol::Resolved(&pow_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&pow_Float32x2_exp)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&pow_Float32x2)->signature = "pow(f32x2,f32x2) f32x2"_c;
    Symbol::Resolved(&pow_Float32x2)->name = "pow(f32x2,f32x2)"_c;
    Symbol::Resolved(&pow_Float32x2)->nameWithVarNames = "pow(val : f32x2, exponent : f32x2)"_c;
    Symbol::Resolved(&pow_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// pow with Float32x3, Float32x3
    pow_Float32x3_arg.name = "val"_c;
    pow_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    pow_Float32x3_exp.name = "exponent"_c;
    pow_Float32x3_exp.type = Type::FullType{ Float32x3Type.name };
    pow_Float32x3.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float32x3.name = pow_Float32x3_name;
    pow_Float32x3.backendIndex = 1538;
    pow_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    pow_Float32x3.parameters = pow_Float32x3_args;
    Symbol::Resolved(&pow_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&pow_Float32x3_exp)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&pow_Float32x3)->signature = "pow(f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&pow_Float32x3)->name = "pow(f32x3,f32x3)"_c;
    Symbol::Resolved(&pow_Float32x3)->nameWithVarNames = "pow(val : f32x3, exponent : f32x3)"_c;
    Symbol::Resolved(&pow_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// pow with Float32x4, Float32x4
    pow_Float32x4_arg.name = "val"_c;
    pow_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    pow_Float32x4_exp.name = "exponent"_c;
    pow_Float32x4_exp.type = Type::FullType{ Float32x4Type.name };
    pow_Float32x4.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float32x4.name = pow_Float32x4_name;
    pow_Float32x4.backendIndex = 1539;
    pow_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    pow_Float32x4.parameters = pow_Float32x4_args;
    Symbol::Resolved(&pow_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&pow_Float32x4_exp)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&pow_Float32x4)->signature = "pow(f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&pow_Float32x4)->name = "pow(f32x4,f32x4)"_c;
    Symbol::Resolved(&pow_Float32x4)->nameWithVarNames = "pow(val : f32x4, exponent : f32x4)"_c;
    Symbol::Resolved(&pow_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// pow with Float16, Float16
    pow_Float16_arg.name = "val"_c;
    pow_Float16_arg.type = Type::FullType{ Float16Type.name };
    pow_Float16_exp.name = "exponent"_c;
    pow_Float16_exp.type = Type::FullType{ Float16Type.name };
    pow_Float16.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float16.name = pow_Float16_name;
    pow_Float16.backendIndex = 1540;
    pow_Float16.returnType = Type::FullType { Float16Type.name };
    pow_Float16.parameters = pow_Float16_args;
    Symbol::Resolved(&pow_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&pow_Float16_exp)->typeSymbol = &Float16Type;
    Symbol::Resolved(&pow_Float16)->signature = "pow(f16,f16) f16"_c;
    Symbol::Resolved(&pow_Float16)->name = "pow(f16,f16)"_c;
    Symbol::Resolved(&pow_Float16)->nameWithVarNames = "pow(val : f16, exponent : f16)"_c;
    Symbol::Resolved(&pow_Float16)->returnTypeSymbol = &Float16Type;

    /// pow with Float16x2, Float16x2
    pow_Float16x2_arg.name = "val"_c;
    pow_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    pow_Float16x2_exp.name = "exponent"_c;
    pow_Float16x2_exp.type = Type::FullType{ Float16x2Type.name };
    pow_Float16x2.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float16x2.name = pow_Float16x2_name;
    pow_Float16x2.backendIndex = 1541;
    pow_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    pow_Float16x2.parameters = pow_Float16x2_args;
    Symbol::Resolved(&pow_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&pow_Float16x2_exp)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&pow_Float16x2)->signature = "pow(f16x2,f16x2) f16x2"_c;
    Symbol::Resolved(&pow_Float16x2)->name = "pow(f16x2,f16x2)"_c;
    Symbol::Resolved(&pow_Float16x2)->nameWithVarNames = "pow(val : f16x2, exponent : f16x2)"_c;
    Symbol::Resolved(&pow_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// pow with Float16x3, Float16x3
    pow_Float16x3_arg.name = "val"_c;
    pow_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    pow_Float16x3_exp.name = "exponent"_c;
    pow_Float16x3_exp.type = Type::FullType{ Float16x3Type.name };
    pow_Float16x3.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float16x3.name = pow_Float16x3_name;
    pow_Float16x3.backendIndex = 1542;
    pow_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    pow_Float16x3.parameters = pow_Float16x3_args;
    Symbol::Resolved(&pow_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&pow_Float16x3_exp)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&pow_Float16x3)->signature = "pow(f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&pow_Float16x3)->name = "pow(f16x3,f16x3)"_c;
    Symbol::Resolved(&pow_Float16x3)->nameWithVarNames = "pow(val : f16x3, exponent : f16x3)"_c;
    Symbol::Resolved(&pow_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// pow with Float16x4, Float16x4
    pow_Float16x4_arg.name = "val"_c;
    pow_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    pow_Float16x4_exp.name = "exponent"_c;
    pow_Float16x4_exp.type = Type::FullType{ Float16x4Type.name };
    pow_Float16x4.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float16x4.name = pow_Float16x4_name;
    pow_Float16x4.backendIndex = 1543;
    pow_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    pow_Float16x4.parameters = pow_Float16x4_args;
    Symbol::Resolved(&pow_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&pow_Float16x4_exp)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&pow_Float16x4)->signature = "pow(f16x4,f16x4) f16x4"_c;
    Symbol::Resolved(&pow_Float16x4)->name = "pow(f16x4,f16x4)"_c;
    Symbol::Resolved(&pow_Float16x4)->nameWithVarNames = "pow(val : f16x4, exponent : f16x4)"_c;
    Symbol::Resolved(&pow_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// mad with Float32, Float32, Float32
    mad_Float32_arg.name = "val"_c;
    mad_Float32_arg.type = Type::FullType{ Float32Type.name };
    mad_Float32_mul.name = "multiplier"_c;
    mad_Float32_mul.type = Type::FullType{ Float32Type.name };
    mad_Float32_add.name = "addend"_c;
    mad_Float32_add.type = Type::FullType{ Float32Type.name };
    mad_Float32.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float32.name = mad_Float32_name;
    mad_Float32.backendIndex = 1544;
    mad_Float32.returnType = Type::FullType { Float32Type.name };
    mad_Float32.parameters = mad_Float32_args;
    Symbol::Resolved(&mad_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32_mul)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32_add)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32)->signature = "mad(f32,f32,f32) f32"_c;
    Symbol::Resolved(&mad_Float32)->name = "mad(f32,f32,f32)"_c;
    Symbol::Resolved(&mad_Float32)->nameWithVarNames = "mad(val : f32, multiplier : f32, addend : f32)"_c;
    Symbol::Resolved(&mad_Float32)->returnTypeSymbol = &Float32Type;

    /// mad with Float32x2, Float32x2, Float32x2
    mad_Float32x2_arg.name = "val"_c;
    mad_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2_mul.name = "multiplier"_c;
    mad_Float32x2_mul.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2_add.name = "addend"_c;
    mad_Float32x2_add.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float32x2.name = mad_Float32x2_name;
    mad_Float32x2.backendIndex = 1545;
    mad_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    mad_Float32x2.parameters = mad_Float32x2_args;
    Symbol::Resolved(&mad_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2_mul)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2_add)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2)->signature = "mad(f32x2,f32x2,f32x2) f32x2"_c;
    Symbol::Resolved(&mad_Float32x2)->name = "mad(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&mad_Float32x2)->nameWithVarNames = "mad(val : f32x2, multiplier : f32x2, addend : f32x2)"_c;
    Symbol::Resolved(&mad_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// mad with Float32x3, Float32x3, Float32x3
    mad_Float32x3_arg.name = "val"_c;
    mad_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3_mul.name = "multiplier"_c;
    mad_Float32x3_mul.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3_add.name = "addend"_c;
    mad_Float32x3_add.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float32x3.name = mad_Float32x3_name;
    mad_Float32x3.backendIndex = 1546;
    mad_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    mad_Float32x3.parameters = mad_Float32x3_args;
    Symbol::Resolved(&mad_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3_mul)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3_add)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3)->signature = "mad(f32x3,f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&mad_Float32x3)->name = "mad(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&mad_Float32x3)->nameWithVarNames = "mad(val : f32x3, multiplier : f32x3, addend : f32x3)"_c;
    Symbol::Resolved(&mad_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// mad with Float32x4, Float32x4, Float32x4
    mad_Float32x4_arg.name = "val"_c;
    mad_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4_mul.name = "multiplier"_c;
    mad_Float32x4_mul.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4_add.name = "addend"_c;
    mad_Float32x4_add.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float32x4.name = mad_Float32x4_name;
    mad_Float32x4.backendIndex = 1547;
    mad_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    mad_Float32x4.parameters = mad_Float32x4_args;
    Symbol::Resolved(&mad_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4_mul)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4_add)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4)->signature = "mad(f32x4,f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&mad_Float32x4)->name = "mad(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&mad_Float32x4)->nameWithVarNames = "mad(val : f32x4, multiplier : f32x4, addend : f32x4)"_c;
    Symbol::Resolved(&mad_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// mad with Float16, Float16, Float16
    mad_Float16_arg.name = "val"_c;
    mad_Float16_arg.type = Type::FullType{ Float16Type.name };
    mad_Float16_mul.name = "multiplier"_c;
    mad_Float16_mul.type = Type::FullType{ Float16Type.name };
    mad_Float16_add.name = "addend"_c;
    mad_Float16_add.type = Type::FullType{ Float16Type.name };
    mad_Float16.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float16.name = mad_Float16_name;
    mad_Float16.backendIndex = 1548;
    mad_Float16.returnType = Type::FullType { Float16Type.name };
    mad_Float16.parameters = mad_Float16_args;
    Symbol::Resolved(&mad_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16_mul)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16_add)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16)->signature = "mad(f16,f16,f16) f16"_c;
    Symbol::Resolved(&mad_Float16)->name = "mad(f16,f16,f16)"_c;
    Symbol::Resolved(&mad_Float16)->nameWithVarNames = "mad(val : f16, multiplier : f16, addend : f16)"_c;
    Symbol::Resolved(&mad_Float16)->returnTypeSymbol = &Float16Type;

    /// mad with Float16x2, Float16x2, Float16x2
    mad_Float16x2_arg.name = "val"_c;
    mad_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2_mul.name = "multiplier"_c;
    mad_Float16x2_mul.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2_add.name = "addend"_c;
    mad_Float16x2_add.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float16x2.name = mad_Float16x2_name;
    mad_Float16x2.backendIndex = 1549;
    mad_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    mad_Float16x2.parameters = mad_Float16x2_args;
    Symbol::Resolved(&mad_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2_mul)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2_add)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2)->signature = "mad(f16x2,f16x2,f16x2) f16x2"_c;
    Symbol::Resolved(&mad_Float16x2)->name = "mad(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&mad_Float16x2)->nameWithVarNames = "mad(val : f16x2, multiplier : f16x2, addend : f16x2)"_c;
    Symbol::Resolved(&mad_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// mad with Float16x3, Float16x3, Float16x3
    mad_Float16x3_arg.name = "val"_c;
    mad_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3_mul.name = "multiplier"_c;
    mad_Float16x3_mul.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3_add.name = "addend"_c;
    mad_Float16x3_add.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float16x3.name = mad_Float16x3_name;
    mad_Float16x3.backendIndex = 1550;
    mad_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    mad_Float16x3.parameters = mad_Float16x3_args;
    Symbol::Resolved(&mad_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3_mul)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3_add)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3)->signature = "mad(f16x3,f16x3,f16x3) f16x3"_c;
    Symbol::Resolved(&mad_Float16x3)->name = "mad(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&mad_Float16x3)->nameWithVarNames = "mad(val : f16x3, multiplier : f16x3, addend : f16x3)"_c;
    Symbol::Resolved(&mad_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// mad with Float16x4, Float16x4, Float16x4
    mad_Float16x4_arg.name = "val"_c;
    mad_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4_mul.name = "multiplier"_c;
    mad_Float16x4_mul.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4_add.name = "addend"_c;
    mad_Float16x4_add.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float16x4.name = mad_Float16x4_name;
    mad_Float16x4.backendIndex = 1551;
    mad_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    mad_Float16x4.parameters = mad_Float16x4_args;
    Symbol::Resolved(&mad_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4_mul)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4_add)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4)->signature = "mad(f16x4,f16x4,f16x4) f16x4"_c;
    Symbol::Resolved(&mad_Float16x4)->name = "mad(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&mad_Float16x4)->nameWithVarNames = "mad(val : f16x4, multiplier : f16x4, addend : f16x4)"_c;
    Symbol::Resolved(&mad_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// mad with Int32, Int32, Int32
    mad_Int32_arg.name = "val"_c;
    mad_Int32_arg.type = Type::FullType{ Int32Type.name };
    mad_Int32_mul.name = "multiplier"_c;
    mad_Int32_mul.type = Type::FullType{ Int32Type.name };
    mad_Int32_add.name = "addend"_c;
    mad_Int32_add.type = Type::FullType{ Int32Type.name };
    mad_Int32.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int32.name = mad_Int32_name;
    mad_Int32.backendIndex = 1552;
    mad_Int32.returnType = Type::FullType { Int32Type.name };
    mad_Int32.parameters = mad_Int32_args;
    Symbol::Resolved(&mad_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32_mul)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32_add)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32)->signature = "mad(i32,i32,i32) i32"_c;
    Symbol::Resolved(&mad_Int32)->name = "mad(i32,i32,i32)"_c;
    Symbol::Resolved(&mad_Int32)->nameWithVarNames = "mad(val : i32, multiplier : i32, addend : i32)"_c;
    Symbol::Resolved(&mad_Int32)->returnTypeSymbol = &Int32Type;

    /// mad with Int32x2, Int32x2, Int32x2
    mad_Int32x2_arg.name = "val"_c;
    mad_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2_mul.name = "multiplier"_c;
    mad_Int32x2_mul.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2_add.name = "addend"_c;
    mad_Int32x2_add.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int32x2.name = mad_Int32x2_name;
    mad_Int32x2.backendIndex = 1553;
    mad_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    mad_Int32x2.parameters = mad_Int32x2_args;
    Symbol::Resolved(&mad_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2_mul)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2_add)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2)->signature = "mad(i32x2,i32x2,i32x2) i32x2"_c;
    Symbol::Resolved(&mad_Int32x2)->name = "mad(i32x2,i32x2,i32x2)"_c;
    Symbol::Resolved(&mad_Int32x2)->nameWithVarNames = "mad(val : i32x2, multiplier : i32x2, addend : i32x2)"_c;
    Symbol::Resolved(&mad_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// mad with Int32x3, Int32x3, Int32x3
    mad_Int32x3_arg.name = "val"_c;
    mad_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3_mul.name = "multiplier"_c;
    mad_Int32x3_mul.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3_add.name = "addend"_c;
    mad_Int32x3_add.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int32x3.name = mad_Int32x3_name;
    mad_Int32x3.backendIndex = 1554;
    mad_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    mad_Int32x3.parameters = mad_Int32x3_args;
    Symbol::Resolved(&mad_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3_mul)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3_add)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3)->signature = "mad(i32x3,i32x3,i32x3) i32x3"_c;
    Symbol::Resolved(&mad_Int32x3)->name = "mad(i32x3,i32x3,i32x3)"_c;
    Symbol::Resolved(&mad_Int32x3)->nameWithVarNames = "mad(val : i32x3, multiplier : i32x3, addend : i32x3)"_c;
    Symbol::Resolved(&mad_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// mad with Int32x4, Int32x4, Int32x4
    mad_Int32x4_arg.name = "val"_c;
    mad_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4_mul.name = "multiplier"_c;
    mad_Int32x4_mul.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4_add.name = "addend"_c;
    mad_Int32x4_add.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int32x4.name = mad_Int32x4_name;
    mad_Int32x4.backendIndex = 1555;
    mad_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    mad_Int32x4.parameters = mad_Int32x4_args;
    Symbol::Resolved(&mad_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4_mul)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4_add)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4)->signature = "mad(i32x4,i32x4,i32x4) i32x4"_c;
    Symbol::Resolved(&mad_Int32x4)->name = "mad(i32x4,i32x4,i32x4)"_c;
    Symbol::Resolved(&mad_Int32x4)->nameWithVarNames = "mad(val : i32x4, multiplier : i32x4, addend : i32x4)"_c;
    Symbol::Resolved(&mad_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// mad with Int16, Int16, Int16
    mad_Int16_arg.name = "val"_c;
    mad_Int16_arg.type = Type::FullType{ Int16Type.name };
    mad_Int16_mul.name = "multiplier"_c;
    mad_Int16_mul.type = Type::FullType{ Int16Type.name };
    mad_Int16_add.name = "addend"_c;
    mad_Int16_add.type = Type::FullType{ Int16Type.name };
    mad_Int16.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int16.name = mad_Int16_name;
    mad_Int16.backendIndex = 1556;
    mad_Int16.returnType = Type::FullType { Int16Type.name };
    mad_Int16.parameters = mad_Int16_args;
    Symbol::Resolved(&mad_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16_mul)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16_add)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16)->signature = "mad(i16,i16,i16) i16"_c;
    Symbol::Resolved(&mad_Int16)->name = "mad(i16,i16,i16)"_c;
    Symbol::Resolved(&mad_Int16)->nameWithVarNames = "mad(val : i16, multiplier : i16, addend : i16)"_c;
    Symbol::Resolved(&mad_Int16)->returnTypeSymbol = &Int16Type;

    /// mad with Int16x2, Int16x2, Int16x2
    mad_Int16x2_arg.name = "val"_c;
    mad_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2_mul.name = "multiplier"_c;
    mad_Int16x2_mul.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2_add.name = "addend"_c;
    mad_Int16x2_add.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int16x2.name = mad_Int16x2_name;
    mad_Int16x2.backendIndex = 1557;
    mad_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    mad_Int16x2.parameters = mad_Int16x2_args;
    Symbol::Resolved(&mad_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2_mul)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2_add)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2)->signature = "mad(i16x2,i16x2,i16x2) i16x2"_c;
    Symbol::Resolved(&mad_Int16x2)->name = "mad(i16x2,i16x2,i16x2)"_c;
    Symbol::Resolved(&mad_Int16x2)->nameWithVarNames = "mad(val : i16x2, multiplier : i16x2, addend : i16x2)"_c;
    Symbol::Resolved(&mad_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// mad with Int16x3, Int16x3, Int16x3
    mad_Int16x3_arg.name = "val"_c;
    mad_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3_mul.name = "multiplier"_c;
    mad_Int16x3_mul.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3_add.name = "addend"_c;
    mad_Int16x3_add.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int16x3.name = mad_Int16x3_name;
    mad_Int16x3.backendIndex = 1558;
    mad_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    mad_Int16x3.parameters = mad_Int16x3_args;
    Symbol::Resolved(&mad_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3_mul)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3_add)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3)->signature = "mad(i16x3,i16x3,i16x3) i16x3"_c;
    Symbol::Resolved(&mad_Int16x3)->name = "mad(i16x3,i16x3,i16x3)"_c;
    Symbol::Resolved(&mad_Int16x3)->nameWithVarNames = "mad(val : i16x3, multiplier : i16x3, addend : i16x3)"_c;
    Symbol::Resolved(&mad_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// mad with Int16x4, Int16x4, Int16x4
    mad_Int16x4_arg.name = "val"_c;
    mad_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4_mul.name = "multiplier"_c;
    mad_Int16x4_mul.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4_add.name = "addend"_c;
    mad_Int16x4_add.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int16x4.name = mad_Int16x4_name;
    mad_Int16x4.backendIndex = 1559;
    mad_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    mad_Int16x4.parameters = mad_Int16x4_args;
    Symbol::Resolved(&mad_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4_mul)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4_add)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4)->signature = "mad(i16x4,i16x4,i16x4) i16x4"_c;
    Symbol::Resolved(&mad_Int16x4)->name = "mad(i16x4,i16x4,i16x4)"_c;
    Symbol::Resolved(&mad_Int16x4)->nameWithVarNames = "mad(val : i16x4, multiplier : i16x4, addend : i16x4)"_c;
    Symbol::Resolved(&mad_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// mad with UInt32, UInt32, UInt32
    mad_UInt32_arg.name = "val"_c;
    mad_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    mad_UInt32_mul.name = "multiplier"_c;
    mad_UInt32_mul.type = Type::FullType{ UInt32Type.name };
    mad_UInt32_add.name = "addend"_c;
    mad_UInt32_add.type = Type::FullType{ UInt32Type.name };
    mad_UInt32.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt32.name = mad_UInt32_name;
    mad_UInt32.backendIndex = 1560;
    mad_UInt32.returnType = Type::FullType { UInt32Type.name };
    mad_UInt32.parameters = mad_UInt32_args;
    Symbol::Resolved(&mad_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32_mul)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32_add)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32)->signature = "mad(u32,u32,u32) u32"_c;
    Symbol::Resolved(&mad_UInt32)->name = "mad(u32,u32,u32)"_c;
    Symbol::Resolved(&mad_UInt32)->nameWithVarNames = "mad(val : u32, multiplier : u32, addend : u32)"_c;
    Symbol::Resolved(&mad_UInt32)->returnTypeSymbol = &UInt32Type;

    /// mad with UInt32x2, UInt32x2, UInt32x2
    mad_UInt32x2_arg.name = "val"_c;
    mad_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2_mul.name = "multiplier"_c;
    mad_UInt32x2_mul.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2_add.name = "addend"_c;
    mad_UInt32x2_add.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt32x2.name = mad_UInt32x2_name;
    mad_UInt32x2.backendIndex = 1561;
    mad_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    mad_UInt32x2.parameters = mad_UInt32x2_args;
    Symbol::Resolved(&mad_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2_mul)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2_add)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2)->signature = "mad(u32x2,u32x2,u32x2) u32x2"_c;
    Symbol::Resolved(&mad_UInt32x2)->name = "mad(u32x2,u32x2,u32x2)"_c;
    Symbol::Resolved(&mad_UInt32x2)->nameWithVarNames = "mad(val : u32x2, multiplier : u32x2, addend : u32x2)"_c;
    Symbol::Resolved(&mad_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// mad with UInt32x3, UInt32x3, UInt32x3
    mad_UInt32x3_arg.name = "val"_c;
    mad_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3_mul.name = "multiplier"_c;
    mad_UInt32x3_mul.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3_add.name = "addend"_c;
    mad_UInt32x3_add.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt32x3.name = mad_UInt32x3_name;
    mad_UInt32x3.backendIndex = 1562;
    mad_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    mad_UInt32x3.parameters = mad_UInt32x3_args;
    Symbol::Resolved(&mad_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3_mul)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3_add)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3)->signature = "mad(u32x3,u32x3,u32x3) u32x3"_c;
    Symbol::Resolved(&mad_UInt32x3)->name = "mad(u32x3,u32x3,u32x3)"_c;
    Symbol::Resolved(&mad_UInt32x3)->nameWithVarNames = "mad(val : u32x3, multiplier : u32x3, addend : u32x3)"_c;
    Symbol::Resolved(&mad_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// mad with UInt32x4, UInt32x4, UInt32x4
    mad_UInt32x4_arg.name = "val"_c;
    mad_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4_mul.name = "multiplier"_c;
    mad_UInt32x4_mul.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4_add.name = "addend"_c;
    mad_UInt32x4_add.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt32x4.name = mad_UInt32x4_name;
    mad_UInt32x4.backendIndex = 1563;
    mad_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    mad_UInt32x4.parameters = mad_UInt32x4_args;
    Symbol::Resolved(&mad_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4_mul)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4_add)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4)->signature = "mad(u32x4,u32x4,u32x4) u32x4"_c;
    Symbol::Resolved(&mad_UInt32x4)->name = "mad(u32x4,u32x4,u32x4)"_c;
    Symbol::Resolved(&mad_UInt32x4)->nameWithVarNames = "mad(val : u32x4, multiplier : u32x4, addend : u32x4)"_c;
    Symbol::Resolved(&mad_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// mad with UInt16, UInt16, UInt16
    mad_UInt16_arg.name = "val"_c;
    mad_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    mad_UInt16_mul.name = "multiplier"_c;
    mad_UInt16_mul.type = Type::FullType{ UInt16Type.name };
    mad_UInt16_add.name = "addend"_c;
    mad_UInt16_add.type = Type::FullType{ UInt16Type.name };
    mad_UInt16.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt16.name = mad_UInt16_name;
    mad_UInt16.backendIndex = 1564;
    mad_UInt16.returnType = Type::FullType { UInt16Type.name };
    mad_UInt16.parameters = mad_UInt16_args;
    Symbol::Resolved(&mad_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16_mul)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16_add)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16)->signature = "mad(u16,u16,u16) u16"_c;
    Symbol::Resolved(&mad_UInt16)->name = "mad(u16,u16,u16)"_c;
    Symbol::Resolved(&mad_UInt16)->nameWithVarNames = "mad(val : u16, multiplier : u16, addend : u16)"_c;
    Symbol::Resolved(&mad_UInt16)->returnTypeSymbol = &UInt16Type;

    /// mad with UInt16x2, UInt16x2, UInt16x2
    mad_UInt16x2_arg.name = "val"_c;
    mad_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2_mul.name = "multiplier"_c;
    mad_UInt16x2_mul.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2_add.name = "addend"_c;
    mad_UInt16x2_add.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt16x2.name = mad_UInt16x2_name;
    mad_UInt16x2.backendIndex = 1565;
    mad_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    mad_UInt16x2.parameters = mad_UInt16x2_args;
    Symbol::Resolved(&mad_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2_mul)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2_add)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2)->signature = "mad(u16x2,u16x2,u16x2) u16x2"_c;
    Symbol::Resolved(&mad_UInt16x2)->name = "mad(u16x2,u16x2,u16x2)"_c;
    Symbol::Resolved(&mad_UInt16x2)->nameWithVarNames = "mad(val : u16x2, multiplier : u16x2, addend : u16x2)"_c;
    Symbol::Resolved(&mad_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// mad with UInt16x3, UInt16x3, UInt16x3
    mad_UInt16x3_arg.name = "val"_c;
    mad_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3_mul.name = "multiplier"_c;
    mad_UInt16x3_mul.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3_add.name = "addend"_c;
    mad_UInt16x3_add.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt16x3.name = mad_UInt16x3_name;
    mad_UInt16x3.backendIndex = 1566;
    mad_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    mad_UInt16x3.parameters = mad_UInt16x3_args;
    Symbol::Resolved(&mad_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3_mul)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3_add)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3)->signature = "mad(u16x3,u16x3,u16x3) u16x3"_c;
    Symbol::Resolved(&mad_UInt16x3)->name = "mad(u16x3,u16x3,u16x3)"_c;
    Symbol::Resolved(&mad_UInt16x3)->nameWithVarNames = "mad(val : u16x3, multiplier : u16x3, addend : u16x3)"_c;
    Symbol::Resolved(&mad_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// mad with UInt16x4, UInt16x4, UInt16x4
    mad_UInt16x4_arg.name = "val"_c;
    mad_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4_mul.name = "multiplier"_c;
    mad_UInt16x4_mul.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4_add.name = "addend"_c;
    mad_UInt16x4_add.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt16x4.name = mad_UInt16x4_name;
    mad_UInt16x4.backendIndex = 1567;
    mad_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    mad_UInt16x4.parameters = mad_UInt16x4_args;
    Symbol::Resolved(&mad_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4_mul)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4_add)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4)->signature = "mad(u16x4,u16x4,u16x4) u16x4"_c;
    Symbol::Resolved(&mad_UInt16x4)->name = "mad(u16x4,u16x4,u16x4)"_c;
    Symbol::Resolved(&mad_UInt16x4)->nameWithVarNames = "mad(val : u16x4, multiplier : u16x4, addend : u16x4)"_c;
    Symbol::Resolved(&mad_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// dot with Float32x2, Float32x2
    dot_Float32x2_x.name = "x"_c;
    dot_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    dot_Float32x2_y.name = "y"_c;
    dot_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    dot_Float32x2.documentation = "Returns the dot product of two vectors."_c;
    dot_Float32x2.name = dot_Float32x2_name;
    dot_Float32x2.backendIndex = 1568;
    dot_Float32x2.returnType = Type::FullType { Float32Type.name };
    dot_Float32x2.parameters = dot_Float32x2_args;
    Symbol::Resolved(&dot_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&dot_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&dot_Float32x2)->signature = "dot(f32x2,f32x2) f32"_c;
    Symbol::Resolved(&dot_Float32x2)->name = "dot(f32x2,f32x2)"_c;
    Symbol::Resolved(&dot_Float32x2)->nameWithVarNames = "dot(x : f32x2, y : f32x2)"_c;
    Symbol::Resolved(&dot_Float32x2)->returnTypeSymbol = &Float32Type;

    /// dot with Float32x3, Float32x3
    dot_Float32x3_x.name = "x"_c;
    dot_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    dot_Float32x3_y.name = "y"_c;
    dot_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    dot_Float32x3.documentation = "Returns the dot product of two vectors."_c;
    dot_Float32x3.name = dot_Float32x3_name;
    dot_Float32x3.backendIndex = 1569;
    dot_Float32x3.returnType = Type::FullType { Float32Type.name };
    dot_Float32x3.parameters = dot_Float32x3_args;
    Symbol::Resolved(&dot_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&dot_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&dot_Float32x3)->signature = "dot(f32x3,f32x3) f32"_c;
    Symbol::Resolved(&dot_Float32x3)->name = "dot(f32x3,f32x3)"_c;
    Symbol::Resolved(&dot_Float32x3)->nameWithVarNames = "dot(x : f32x3, y : f32x3)"_c;
    Symbol::Resolved(&dot_Float32x3)->returnTypeSymbol = &Float32Type;

    /// dot with Float32x4, Float32x4
    dot_Float32x4_x.name = "x"_c;
    dot_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    dot_Float32x4_y.name = "y"_c;
    dot_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    dot_Float32x4.documentation = "Returns the dot product of two vectors."_c;
    dot_Float32x4.name = dot_Float32x4_name;
    dot_Float32x4.backendIndex = 1570;
    dot_Float32x4.returnType = Type::FullType { Float32Type.name };
    dot_Float32x4.parameters = dot_Float32x4_args;
    Symbol::Resolved(&dot_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&dot_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&dot_Float32x4)->signature = "dot(f32x4,f32x4) f32"_c;
    Symbol::Resolved(&dot_Float32x4)->name = "dot(f32x4,f32x4)"_c;
    Symbol::Resolved(&dot_Float32x4)->nameWithVarNames = "dot(x : f32x4, y : f32x4)"_c;
    Symbol::Resolved(&dot_Float32x4)->returnTypeSymbol = &Float32Type;

    /// dot with Float16x2, Float16x2
    dot_Float16x2_x.name = "x"_c;
    dot_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    dot_Float16x2_y.name = "y"_c;
    dot_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    dot_Float16x2.documentation = "Returns the dot product of two vectors."_c;
    dot_Float16x2.name = dot_Float16x2_name;
    dot_Float16x2.backendIndex = 1571;
    dot_Float16x2.returnType = Type::FullType { Float16Type.name };
    dot_Float16x2.parameters = dot_Float16x2_args;
    Symbol::Resolved(&dot_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&dot_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&dot_Float16x2)->signature = "dot(f16x2,f16x2) f16"_c;
    Symbol::Resolved(&dot_Float16x2)->name = "dot(f16x2,f16x2)"_c;
    Symbol::Resolved(&dot_Float16x2)->nameWithVarNames = "dot(x : f16x2, y : f16x2)"_c;
    Symbol::Resolved(&dot_Float16x2)->returnTypeSymbol = &Float16Type;

    /// dot with Float16x3, Float16x3
    dot_Float16x3_x.name = "x"_c;
    dot_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    dot_Float16x3_y.name = "y"_c;
    dot_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    dot_Float16x3.documentation = "Returns the dot product of two vectors."_c;
    dot_Float16x3.name = dot_Float16x3_name;
    dot_Float16x3.backendIndex = 1572;
    dot_Float16x3.returnType = Type::FullType { Float16Type.name };
    dot_Float16x3.parameters = dot_Float16x3_args;
    Symbol::Resolved(&dot_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&dot_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&dot_Float16x3)->signature = "dot(f16x3,f16x3) f16"_c;
    Symbol::Resolved(&dot_Float16x3)->name = "dot(f16x3,f16x3)"_c;
    Symbol::Resolved(&dot_Float16x3)->nameWithVarNames = "dot(x : f16x3, y : f16x3)"_c;
    Symbol::Resolved(&dot_Float16x3)->returnTypeSymbol = &Float16Type;

    /// dot with Float16x4, Float16x4
    dot_Float16x4_x.name = "x"_c;
    dot_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    dot_Float16x4_y.name = "y"_c;
    dot_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    dot_Float16x4.documentation = "Returns the dot product of two vectors."_c;
    dot_Float16x4.name = dot_Float16x4_name;
    dot_Float16x4.backendIndex = 1573;
    dot_Float16x4.returnType = Type::FullType { Float16Type.name };
    dot_Float16x4.parameters = dot_Float16x4_args;
    Symbol::Resolved(&dot_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&dot_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&dot_Float16x4)->signature = "dot(f16x4,f16x4) f16"_c;
    Symbol::Resolved(&dot_Float16x4)->name = "dot(f16x4,f16x4)"_c;
    Symbol::Resolved(&dot_Float16x4)->nameWithVarNames = "dot(x : f16x4, y : f16x4)"_c;
    Symbol::Resolved(&dot_Float16x4)->returnTypeSymbol = &Float16Type;

    /// reflect with Float32x2, Float32x2
    reflect_Float32x2_incident.name = "incident"_c;
    reflect_Float32x2_incident.type = Type::FullType{ Float32x2Type.name };
    reflect_Float32x2_normal.name = "normal"_c;
    reflect_Float32x2_normal.type = Type::FullType{ Float32x2Type.name };
    reflect_Float32x2.documentation = "Returns the reflection of a vector through a surface using an incident vector and normal."_c;
    reflect_Float32x2.name = reflect_Float32x2_name;
    reflect_Float32x2.backendIndex = 1574;
    reflect_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    reflect_Float32x2.parameters = reflect_Float32x2_args;
    Symbol::Resolved(&reflect_Float32x2_incident)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&reflect_Float32x2_normal)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&reflect_Float32x2)->signature = "reflect(f32x2,f32x2) f32x2"_c;
    Symbol::Resolved(&reflect_Float32x2)->name = "reflect(f32x2,f32x2)"_c;
    Symbol::Resolved(&reflect_Float32x2)->nameWithVarNames = "reflect(incident : f32x2, normal : f32x2)"_c;
    Symbol::Resolved(&reflect_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// reflect with Float32x3, Float32x3
    reflect_Float32x3_incident.name = "incident"_c;
    reflect_Float32x3_incident.type = Type::FullType{ Float32x3Type.name };
    reflect_Float32x3_normal.name = "normal"_c;
    reflect_Float32x3_normal.type = Type::FullType{ Float32x3Type.name };
    reflect_Float32x3.documentation = "Returns the reflection of a vector through a surface using an incident vector and normal."_c;
    reflect_Float32x3.name = reflect_Float32x3_name;
    reflect_Float32x3.backendIndex = 1575;
    reflect_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    reflect_Float32x3.parameters = reflect_Float32x3_args;
    Symbol::Resolved(&reflect_Float32x3_incident)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&reflect_Float32x3_normal)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&reflect_Float32x3)->signature = "reflect(f32x3,f32x3) f32x3"_c;
    Symbol::Resolved(&reflect_Float32x3)->name = "reflect(f32x3,f32x3)"_c;
    Symbol::Resolved(&reflect_Float32x3)->nameWithVarNames = "reflect(incident : f32x3, normal : f32x3)"_c;
    Symbol::Resolved(&reflect_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// reflect with Float32x4, Float32x4
    reflect_Float32x4_incident.name = "incident"_c;
    reflect_Float32x4_incident.type = Type::FullType{ Float32x4Type.name };
    reflect_Float32x4_normal.name = "normal"_c;
    reflect_Float32x4_normal.type = Type::FullType{ Float32x4Type.name };
    reflect_Float32x4.documentation = "Returns the reflection of a vector through a surface using an incident vector and normal."_c;
    reflect_Float32x4.name = reflect_Float32x4_name;
    reflect_Float32x4.backendIndex = 1576;
    reflect_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    reflect_Float32x4.parameters = reflect_Float32x4_args;
    Symbol::Resolved(&reflect_Float32x4_incident)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&reflect_Float32x4_normal)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&reflect_Float32x4)->signature = "reflect(f32x4,f32x4) f32x4"_c;
    Symbol::Resolved(&reflect_Float32x4)->name = "reflect(f32x4,f32x4)"_c;
    Symbol::Resolved(&reflect_Float32x4)->nameWithVarNames = "reflect(incident : f32x4, normal : f32x4)"_c;
    Symbol::Resolved(&reflect_Float32x4)->returnTypeSymbol = &Float32x4Type;

}
} // namespace GPULang
