//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// transpose with Float16x4x3
Variable transpose_Float16x4x3_arg;
Function transpose_Float16x4x3;
inline constexpr std::array transpose_Float16x4x3_args = { &transpose_Float16x4x3_arg };

/// transpose with Float32x4x4
Variable transpose_Float32x4x4_arg;
Function transpose_Float32x4x4;
inline constexpr std::array transpose_Float32x4x4_args = { &transpose_Float32x4x4_arg };

/// transpose with Float16x4x4
Variable transpose_Float16x4x4_arg;
Function transpose_Float16x4x4;
inline constexpr std::array transpose_Float16x4x4_args = { &transpose_Float16x4x4_arg };

/// inverse with Float32x2x2
Variable inverse_Float32x2x2_arg;
Function inverse_Float32x2x2;
inline constexpr std::array inverse_Float32x2x2_args = { &inverse_Float32x2x2_arg };

/// inverse with Float16x2x2
Variable inverse_Float16x2x2_arg;
Function inverse_Float16x2x2;
inline constexpr std::array inverse_Float16x2x2_args = { &inverse_Float16x2x2_arg };

/// inverse with Float32x2x3
Variable inverse_Float32x2x3_arg;
Function inverse_Float32x2x3;
inline constexpr std::array inverse_Float32x2x3_args = { &inverse_Float32x2x3_arg };

/// inverse with Float16x2x3
Variable inverse_Float16x2x3_arg;
Function inverse_Float16x2x3;
inline constexpr std::array inverse_Float16x2x3_args = { &inverse_Float16x2x3_arg };

/// inverse with Float32x2x4
Variable inverse_Float32x2x4_arg;
Function inverse_Float32x2x4;
inline constexpr std::array inverse_Float32x2x4_args = { &inverse_Float32x2x4_arg };

/// inverse with Float16x2x4
Variable inverse_Float16x2x4_arg;
Function inverse_Float16x2x4;
inline constexpr std::array inverse_Float16x2x4_args = { &inverse_Float16x2x4_arg };

/// inverse with Float32x3x2
Variable inverse_Float32x3x2_arg;
Function inverse_Float32x3x2;
inline constexpr std::array inverse_Float32x3x2_args = { &inverse_Float32x3x2_arg };

/// inverse with Float16x3x2
Variable inverse_Float16x3x2_arg;
Function inverse_Float16x3x2;
inline constexpr std::array inverse_Float16x3x2_args = { &inverse_Float16x3x2_arg };

/// inverse with Float32x3x3
Variable inverse_Float32x3x3_arg;
Function inverse_Float32x3x3;
inline constexpr std::array inverse_Float32x3x3_args = { &inverse_Float32x3x3_arg };

/// inverse with Float16x3x3
Variable inverse_Float16x3x3_arg;
Function inverse_Float16x3x3;
inline constexpr std::array inverse_Float16x3x3_args = { &inverse_Float16x3x3_arg };

/// inverse with Float32x3x4
Variable inverse_Float32x3x4_arg;
Function inverse_Float32x3x4;
inline constexpr std::array inverse_Float32x3x4_args = { &inverse_Float32x3x4_arg };

/// inverse with Float16x3x4
Variable inverse_Float16x3x4_arg;
Function inverse_Float16x3x4;
inline constexpr std::array inverse_Float16x3x4_args = { &inverse_Float16x3x4_arg };

/// inverse with Float32x4x2
Variable inverse_Float32x4x2_arg;
Function inverse_Float32x4x2;
inline constexpr std::array inverse_Float32x4x2_args = { &inverse_Float32x4x2_arg };

/// inverse with Float16x4x2
Variable inverse_Float16x4x2_arg;
Function inverse_Float16x4x2;
inline constexpr std::array inverse_Float16x4x2_args = { &inverse_Float16x4x2_arg };

/// inverse with Float32x4x3
Variable inverse_Float32x4x3_arg;
Function inverse_Float32x4x3;
inline constexpr std::array inverse_Float32x4x3_args = { &inverse_Float32x4x3_arg };

/// inverse with Float16x4x3
Variable inverse_Float16x4x3_arg;
Function inverse_Float16x4x3;
inline constexpr std::array inverse_Float16x4x3_args = { &inverse_Float16x4x3_arg };

/// inverse with Float32x4x4
Variable inverse_Float32x4x4_arg;
Function inverse_Float32x4x4;
inline constexpr std::array inverse_Float32x4x4_args = { &inverse_Float32x4x4_arg };

/// inverse with Float16x4x4
Variable inverse_Float16x4x4_arg;
Function inverse_Float16x4x4;
inline constexpr std::array inverse_Float16x4x4_args = { &inverse_Float16x4x4_arg };

/// vertexGetOutputLayer
Function VertexGetOutputLayer;

/// vertexGetOutputViewport
Function VertexGetOutputViewport;

/// vertexGetIndex
Function VertexGetIndex;

/// vertexGetInstanceIndex
Function VertexGetInstanceIndex;

/// vertexGetBaseIndex
Function VertexGetBaseIndex;

/// vertexGetBaseInstanceIndex
Function VertexGetBaseInstanceIndex;

/// vertexGetDrawIndex
Function VertexGetDrawIndex;

/// vertexSetOutputLayer with UInt16
Variable VertexSetOutputLayer_UInt16_arg;
Function VertexSetOutputLayer_UInt16;
inline constexpr std::array VertexSetOutputLayer_UInt16_args = { &VertexSetOutputLayer_UInt16_arg };

/// vertexSetOutputLayer with UInt32
Variable VertexSetOutputLayer_UInt32_arg;
Function VertexSetOutputLayer_UInt32;
inline constexpr std::array VertexSetOutputLayer_UInt32_args = { &VertexSetOutputLayer_UInt32_arg };

/// vertexSetOutputViewport with UInt16
Variable VertexSetOutputViewport_UInt16_arg;
Function VertexSetOutputViewport_UInt16;
inline constexpr std::array VertexSetOutputViewport_UInt16_args = { &VertexSetOutputViewport_UInt16_arg };

/// vertexSetOutputViewport with UInt32
Variable VertexSetOutputViewport_UInt32_arg;
Function VertexSetOutputViewport_UInt32;
inline constexpr std::array VertexSetOutputViewport_UInt32_args = { &VertexSetOutputViewport_UInt32_arg };

/// vertexExportCoordinates with Float32x4
Variable VertexExportCoordinates_Float32x4_arg;
Function VertexExportCoordinates_Float32x4;
inline constexpr std::array VertexExportCoordinates_Float32x4_args = { &VertexExportCoordinates_Float32x4_arg };

/// vertexExportCoordinates with Float16x4
Variable VertexExportCoordinates_Float16x4_arg;
Function VertexExportCoordinates_Float16x4;
inline constexpr std::array VertexExportCoordinates_Float16x4_args = { &VertexExportCoordinates_Float16x4_arg };

/// geometryExportVertex with Float32x4
Variable GeometryExportVertex_Float32x4_arg;
Function GeometryExportVertex_Float32x4;
inline constexpr std::array GeometryExportVertex_Float32x4_args = { &GeometryExportVertex_Float32x4_arg };

/// geometryExportVertex with Float16x4
Variable GeometryExportVertex_Float16x4_arg;
Function GeometryExportVertex_Float16x4;
inline constexpr std::array GeometryExportVertex_Float16x4_args = { &GeometryExportVertex_Float16x4_arg };

/// geometryExportPrimitive
Function GeometryExportPrimitive;

/// geometryGetPoint
Function GeometryGetPoint;

/// geometryGetLine
Function GeometryGetLine;

/// geometryGetTriangle
Function GeometryGetTriangle;

/// pixelGetCoordinates
Function PixelGetCoordinates_Float32x4;

/// pixelGetCoordinates
Function PixelGetCoordinates_Float16x4;

/// pixelGetFrontFacing
Function PixelGetFrontFacing;

/// pixelGetDepth
Function PixelGetDepth;

/// pixelSetDepth with Float32
Variable PixelSetDepth_val;
Function PixelSetDepth;
inline constexpr std::array PixelSetDepth_args = { &PixelSetDepth_val };

/// pixelExportColor with Float32, Int32
Variable PixelExportColor_Float32_Int32_color;
Variable PixelExportColor_Float32_Int32_index;
Function PixelExportColor_Float32_Int32;
inline constexpr std::array PixelExportColor_Float32_Int32_args = { &PixelExportColor_Float32_Int32_color, &PixelExportColor_Float32_Int32_index };

/// pixelExportColor with Float32, UInt32
Variable PixelExportColor_Float32_UInt32_color;
Variable PixelExportColor_Float32_UInt32_index;
Function PixelExportColor_Float32_UInt32;
inline constexpr std::array PixelExportColor_Float32_UInt32_args = { &PixelExportColor_Float32_UInt32_color, &PixelExportColor_Float32_UInt32_index };

/// pixelExportColor with Float32, Int16
Variable PixelExportColor_Float32_Int16_color;
Variable PixelExportColor_Float32_Int16_index;
Function PixelExportColor_Float32_Int16;
inline constexpr std::array PixelExportColor_Float32_Int16_args = { &PixelExportColor_Float32_Int16_color, &PixelExportColor_Float32_Int16_index };

/// pixelExportColor with Float32, UInt16
Variable PixelExportColor_Float32_UInt16_color;
Variable PixelExportColor_Float32_UInt16_index;
Function PixelExportColor_Float32_UInt16;
inline constexpr std::array PixelExportColor_Float32_UInt16_args = { &PixelExportColor_Float32_UInt16_color, &PixelExportColor_Float32_UInt16_index };

/// pixelExportColor with Float32x2, Int32
Variable PixelExportColor_Float32x2_Int32_color;
Variable PixelExportColor_Float32x2_Int32_index;
Function PixelExportColor_Float32x2_Int32;
inline constexpr std::array PixelExportColor_Float32x2_Int32_args = { &PixelExportColor_Float32x2_Int32_color, &PixelExportColor_Float32x2_Int32_index };

/// pixelExportColor with Float32x2, UInt32
Variable PixelExportColor_Float32x2_UInt32_color;
Variable PixelExportColor_Float32x2_UInt32_index;
Function PixelExportColor_Float32x2_UInt32;
inline constexpr std::array PixelExportColor_Float32x2_UInt32_args = { &PixelExportColor_Float32x2_UInt32_color, &PixelExportColor_Float32x2_UInt32_index };

/// pixelExportColor with Float32x2, Int16
Variable PixelExportColor_Float32x2_Int16_color;
Variable PixelExportColor_Float32x2_Int16_index;
Function PixelExportColor_Float32x2_Int16;
inline constexpr std::array PixelExportColor_Float32x2_Int16_args = { &PixelExportColor_Float32x2_Int16_color, &PixelExportColor_Float32x2_Int16_index };

/// pixelExportColor with Float32x2, UInt16
Variable PixelExportColor_Float32x2_UInt16_color;
Variable PixelExportColor_Float32x2_UInt16_index;
Function PixelExportColor_Float32x2_UInt16;
inline constexpr std::array PixelExportColor_Float32x2_UInt16_args = { &PixelExportColor_Float32x2_UInt16_color, &PixelExportColor_Float32x2_UInt16_index };

/// pixelExportColor with Float32x3, Int32
Variable PixelExportColor_Float32x3_Int32_color;
Variable PixelExportColor_Float32x3_Int32_index;
Function PixelExportColor_Float32x3_Int32;
inline constexpr std::array PixelExportColor_Float32x3_Int32_args = { &PixelExportColor_Float32x3_Int32_color, &PixelExportColor_Float32x3_Int32_index };

/// pixelExportColor with Float32x3, UInt32
Variable PixelExportColor_Float32x3_UInt32_color;
Variable PixelExportColor_Float32x3_UInt32_index;
Function PixelExportColor_Float32x3_UInt32;
inline constexpr std::array PixelExportColor_Float32x3_UInt32_args = { &PixelExportColor_Float32x3_UInt32_color, &PixelExportColor_Float32x3_UInt32_index };

/// pixelExportColor with Float32x3, Int16
Variable PixelExportColor_Float32x3_Int16_color;
Variable PixelExportColor_Float32x3_Int16_index;
Function PixelExportColor_Float32x3_Int16;
inline constexpr std::array PixelExportColor_Float32x3_Int16_args = { &PixelExportColor_Float32x3_Int16_color, &PixelExportColor_Float32x3_Int16_index };

/// pixelExportColor with Float32x3, UInt16
Variable PixelExportColor_Float32x3_UInt16_color;
Variable PixelExportColor_Float32x3_UInt16_index;
Function PixelExportColor_Float32x3_UInt16;
inline constexpr std::array PixelExportColor_Float32x3_UInt16_args = { &PixelExportColor_Float32x3_UInt16_color, &PixelExportColor_Float32x3_UInt16_index };

/// pixelExportColor with Float32x4, Int32
Variable PixelExportColor_Float32x4_Int32_color;
Variable PixelExportColor_Float32x4_Int32_index;
Function PixelExportColor_Float32x4_Int32;
inline constexpr std::array PixelExportColor_Float32x4_Int32_args = { &PixelExportColor_Float32x4_Int32_color, &PixelExportColor_Float32x4_Int32_index };

/// pixelExportColor with Float32x4, UInt32
Variable PixelExportColor_Float32x4_UInt32_color;
Variable PixelExportColor_Float32x4_UInt32_index;
Function PixelExportColor_Float32x4_UInt32;
inline constexpr std::array PixelExportColor_Float32x4_UInt32_args = { &PixelExportColor_Float32x4_UInt32_color, &PixelExportColor_Float32x4_UInt32_index };

/// pixelExportColor with Float32x4, Int16
Variable PixelExportColor_Float32x4_Int16_color;
Variable PixelExportColor_Float32x4_Int16_index;
Function PixelExportColor_Float32x4_Int16;
inline constexpr std::array PixelExportColor_Float32x4_Int16_args = { &PixelExportColor_Float32x4_Int16_color, &PixelExportColor_Float32x4_Int16_index };

/// pixelExportColor with Float32x4, UInt16
Variable PixelExportColor_Float32x4_UInt16_color;
Variable PixelExportColor_Float32x4_UInt16_index;
Function PixelExportColor_Float32x4_UInt16;
inline constexpr std::array PixelExportColor_Float32x4_UInt16_args = { &PixelExportColor_Float32x4_UInt16_color, &PixelExportColor_Float32x4_UInt16_index };

/// pixelExportColor with Float16, Int32
Variable PixelExportColor_Float16_Int32_color;
Variable PixelExportColor_Float16_Int32_index;
Function PixelExportColor_Float16_Int32;
inline constexpr std::array PixelExportColor_Float16_Int32_args = { &PixelExportColor_Float16_Int32_color, &PixelExportColor_Float16_Int32_index };

/// pixelExportColor with Float16, UInt32
Variable PixelExportColor_Float16_UInt32_color;
Variable PixelExportColor_Float16_UInt32_index;
Function PixelExportColor_Float16_UInt32;
inline constexpr std::array PixelExportColor_Float16_UInt32_args = { &PixelExportColor_Float16_UInt32_color, &PixelExportColor_Float16_UInt32_index };

/// pixelExportColor with Float16, Int16
Variable PixelExportColor_Float16_Int16_color;
Variable PixelExportColor_Float16_Int16_index;
Function PixelExportColor_Float16_Int16;
inline constexpr std::array PixelExportColor_Float16_Int16_args = { &PixelExportColor_Float16_Int16_color, &PixelExportColor_Float16_Int16_index };

/// pixelExportColor with Float16, UInt16
Variable PixelExportColor_Float16_UInt16_color;
Variable PixelExportColor_Float16_UInt16_index;
Function PixelExportColor_Float16_UInt16;
inline constexpr std::array PixelExportColor_Float16_UInt16_args = { &PixelExportColor_Float16_UInt16_color, &PixelExportColor_Float16_UInt16_index };

/// pixelExportColor with Float16x2, Int32
Variable PixelExportColor_Float16x2_Int32_color;
Variable PixelExportColor_Float16x2_Int32_index;
Function PixelExportColor_Float16x2_Int32;
inline constexpr std::array PixelExportColor_Float16x2_Int32_args = { &PixelExportColor_Float16x2_Int32_color, &PixelExportColor_Float16x2_Int32_index };

/// pixelExportColor with Float16x2, UInt32
Variable PixelExportColor_Float16x2_UInt32_color;
Variable PixelExportColor_Float16x2_UInt32_index;
Function PixelExportColor_Float16x2_UInt32;
inline constexpr std::array PixelExportColor_Float16x2_UInt32_args = { &PixelExportColor_Float16x2_UInt32_color, &PixelExportColor_Float16x2_UInt32_index };

/// pixelExportColor with Float16x2, Int16
Variable PixelExportColor_Float16x2_Int16_color;
Variable PixelExportColor_Float16x2_Int16_index;
Function PixelExportColor_Float16x2_Int16;
inline constexpr std::array PixelExportColor_Float16x2_Int16_args = { &PixelExportColor_Float16x2_Int16_color, &PixelExportColor_Float16x2_Int16_index };

/// pixelExportColor with Float16x2, UInt16
Variable PixelExportColor_Float16x2_UInt16_color;
Variable PixelExportColor_Float16x2_UInt16_index;
Function PixelExportColor_Float16x2_UInt16;
inline constexpr std::array PixelExportColor_Float16x2_UInt16_args = { &PixelExportColor_Float16x2_UInt16_color, &PixelExportColor_Float16x2_UInt16_index };

/// pixelExportColor with Float16x3, Int32
Variable PixelExportColor_Float16x3_Int32_color;
Variable PixelExportColor_Float16x3_Int32_index;
Function PixelExportColor_Float16x3_Int32;
inline constexpr std::array PixelExportColor_Float16x3_Int32_args = { &PixelExportColor_Float16x3_Int32_color, &PixelExportColor_Float16x3_Int32_index };

/// pixelExportColor with Float16x3, UInt32
Variable PixelExportColor_Float16x3_UInt32_color;
Variable PixelExportColor_Float16x3_UInt32_index;
Function PixelExportColor_Float16x3_UInt32;
inline constexpr std::array PixelExportColor_Float16x3_UInt32_args = { &PixelExportColor_Float16x3_UInt32_color, &PixelExportColor_Float16x3_UInt32_index };

/// pixelExportColor with Float16x3, Int16
Variable PixelExportColor_Float16x3_Int16_color;
Variable PixelExportColor_Float16x3_Int16_index;
Function PixelExportColor_Float16x3_Int16;
inline constexpr std::array PixelExportColor_Float16x3_Int16_args = { &PixelExportColor_Float16x3_Int16_color, &PixelExportColor_Float16x3_Int16_index };

/// pixelExportColor with Float16x3, UInt16
Variable PixelExportColor_Float16x3_UInt16_color;
Variable PixelExportColor_Float16x3_UInt16_index;
Function PixelExportColor_Float16x3_UInt16;
inline constexpr std::array PixelExportColor_Float16x3_UInt16_args = { &PixelExportColor_Float16x3_UInt16_color, &PixelExportColor_Float16x3_UInt16_index };

/// pixelExportColor with Float16x4, Int32
Variable PixelExportColor_Float16x4_Int32_color;
Variable PixelExportColor_Float16x4_Int32_index;
Function PixelExportColor_Float16x4_Int32;
inline constexpr std::array PixelExportColor_Float16x4_Int32_args = { &PixelExportColor_Float16x4_Int32_color, &PixelExportColor_Float16x4_Int32_index };

/// pixelExportColor with Float16x4, UInt32
Variable PixelExportColor_Float16x4_UInt32_color;
Variable PixelExportColor_Float16x4_UInt32_index;
Function PixelExportColor_Float16x4_UInt32;
inline constexpr std::array PixelExportColor_Float16x4_UInt32_args = { &PixelExportColor_Float16x4_UInt32_color, &PixelExportColor_Float16x4_UInt32_index };

/// pixelExportColor with Float16x4, Int16
Variable PixelExportColor_Float16x4_Int16_color;
Variable PixelExportColor_Float16x4_Int16_index;
Function PixelExportColor_Float16x4_Int16;
inline constexpr std::array PixelExportColor_Float16x4_Int16_args = { &PixelExportColor_Float16x4_Int16_color, &PixelExportColor_Float16x4_Int16_index };

/// pixelExportColor with Float16x4, UInt16
Variable PixelExportColor_Float16x4_UInt16_color;
Variable PixelExportColor_Float16x4_UInt16_index;
Function PixelExportColor_Float16x4_UInt16;
inline constexpr std::array PixelExportColor_Float16x4_UInt16_args = { &PixelExportColor_Float16x4_UInt16_color, &PixelExportColor_Float16x4_UInt16_index };

/// pixelExportColor with Int32, Int32
Variable PixelExportColor_Int32_Int32_color;
Variable PixelExportColor_Int32_Int32_index;
Function PixelExportColor_Int32_Int32;
inline constexpr std::array PixelExportColor_Int32_Int32_args = { &PixelExportColor_Int32_Int32_color, &PixelExportColor_Int32_Int32_index };

/// pixelExportColor with Int32, UInt32
Variable PixelExportColor_Int32_UInt32_color;
Variable PixelExportColor_Int32_UInt32_index;
Function PixelExportColor_Int32_UInt32;
inline constexpr std::array PixelExportColor_Int32_UInt32_args = { &PixelExportColor_Int32_UInt32_color, &PixelExportColor_Int32_UInt32_index };

/// pixelExportColor with Int32, Int16
Variable PixelExportColor_Int32_Int16_color;
Variable PixelExportColor_Int32_Int16_index;
Function PixelExportColor_Int32_Int16;
inline constexpr std::array PixelExportColor_Int32_Int16_args = { &PixelExportColor_Int32_Int16_color, &PixelExportColor_Int32_Int16_index };

/// pixelExportColor with Int32, UInt16
Variable PixelExportColor_Int32_UInt16_color;
Variable PixelExportColor_Int32_UInt16_index;
Function PixelExportColor_Int32_UInt16;
inline constexpr std::array PixelExportColor_Int32_UInt16_args = { &PixelExportColor_Int32_UInt16_color, &PixelExportColor_Int32_UInt16_index };

/// pixelExportColor with Int32x2, Int32
Variable PixelExportColor_Int32x2_Int32_color;
Variable PixelExportColor_Int32x2_Int32_index;
Function PixelExportColor_Int32x2_Int32;
inline constexpr std::array PixelExportColor_Int32x2_Int32_args = { &PixelExportColor_Int32x2_Int32_color, &PixelExportColor_Int32x2_Int32_index };

/// pixelExportColor with Int32x2, UInt32
Variable PixelExportColor_Int32x2_UInt32_color;
Variable PixelExportColor_Int32x2_UInt32_index;
Function PixelExportColor_Int32x2_UInt32;
inline constexpr std::array PixelExportColor_Int32x2_UInt32_args = { &PixelExportColor_Int32x2_UInt32_color, &PixelExportColor_Int32x2_UInt32_index };

/// pixelExportColor with Int32x2, Int16
Variable PixelExportColor_Int32x2_Int16_color;
Variable PixelExportColor_Int32x2_Int16_index;
Function PixelExportColor_Int32x2_Int16;
inline constexpr std::array PixelExportColor_Int32x2_Int16_args = { &PixelExportColor_Int32x2_Int16_color, &PixelExportColor_Int32x2_Int16_index };

/// pixelExportColor with Int32x2, UInt16
Variable PixelExportColor_Int32x2_UInt16_color;
Variable PixelExportColor_Int32x2_UInt16_index;
Function PixelExportColor_Int32x2_UInt16;
inline constexpr std::array PixelExportColor_Int32x2_UInt16_args = { &PixelExportColor_Int32x2_UInt16_color, &PixelExportColor_Int32x2_UInt16_index };

/// pixelExportColor with Int32x3, Int32
Variable PixelExportColor_Int32x3_Int32_color;
Variable PixelExportColor_Int32x3_Int32_index;
Function PixelExportColor_Int32x3_Int32;
inline constexpr std::array PixelExportColor_Int32x3_Int32_args = { &PixelExportColor_Int32x3_Int32_color, &PixelExportColor_Int32x3_Int32_index };

/// pixelExportColor with Int32x3, UInt32
Variable PixelExportColor_Int32x3_UInt32_color;
Variable PixelExportColor_Int32x3_UInt32_index;
Function PixelExportColor_Int32x3_UInt32;
inline constexpr std::array PixelExportColor_Int32x3_UInt32_args = { &PixelExportColor_Int32x3_UInt32_color, &PixelExportColor_Int32x3_UInt32_index };

/// pixelExportColor with Int32x3, Int16
Variable PixelExportColor_Int32x3_Int16_color;
Variable PixelExportColor_Int32x3_Int16_index;
Function PixelExportColor_Int32x3_Int16;
inline constexpr std::array PixelExportColor_Int32x3_Int16_args = { &PixelExportColor_Int32x3_Int16_color, &PixelExportColor_Int32x3_Int16_index };

/// pixelExportColor with Int32x3, UInt16
Variable PixelExportColor_Int32x3_UInt16_color;
Variable PixelExportColor_Int32x3_UInt16_index;
Function PixelExportColor_Int32x3_UInt16;
inline constexpr std::array PixelExportColor_Int32x3_UInt16_args = { &PixelExportColor_Int32x3_UInt16_color, &PixelExportColor_Int32x3_UInt16_index };

/// pixelExportColor with Int32x4, Int32
Variable PixelExportColor_Int32x4_Int32_color;
Variable PixelExportColor_Int32x4_Int32_index;
Function PixelExportColor_Int32x4_Int32;
inline constexpr std::array PixelExportColor_Int32x4_Int32_args = { &PixelExportColor_Int32x4_Int32_color, &PixelExportColor_Int32x4_Int32_index };

/// pixelExportColor with Int32x4, UInt32
Variable PixelExportColor_Int32x4_UInt32_color;
Variable PixelExportColor_Int32x4_UInt32_index;
Function PixelExportColor_Int32x4_UInt32;
inline constexpr std::array PixelExportColor_Int32x4_UInt32_args = { &PixelExportColor_Int32x4_UInt32_color, &PixelExportColor_Int32x4_UInt32_index };

/// pixelExportColor with Int32x4, Int16
Variable PixelExportColor_Int32x4_Int16_color;
Variable PixelExportColor_Int32x4_Int16_index;
Function PixelExportColor_Int32x4_Int16;
inline constexpr std::array PixelExportColor_Int32x4_Int16_args = { &PixelExportColor_Int32x4_Int16_color, &PixelExportColor_Int32x4_Int16_index };

/// pixelExportColor with Int32x4, UInt16
Variable PixelExportColor_Int32x4_UInt16_color;
Variable PixelExportColor_Int32x4_UInt16_index;
Function PixelExportColor_Int32x4_UInt16;
inline constexpr std::array PixelExportColor_Int32x4_UInt16_args = { &PixelExportColor_Int32x4_UInt16_color, &PixelExportColor_Int32x4_UInt16_index };

/// pixelExportColor with Int16, Int32
Variable PixelExportColor_Int16_Int32_color;
Variable PixelExportColor_Int16_Int32_index;
Function PixelExportColor_Int16_Int32;
inline constexpr std::array PixelExportColor_Int16_Int32_args = { &PixelExportColor_Int16_Int32_color, &PixelExportColor_Int16_Int32_index };

/// pixelExportColor with Int16, UInt32
Variable PixelExportColor_Int16_UInt32_color;
Variable PixelExportColor_Int16_UInt32_index;
Function PixelExportColor_Int16_UInt32;
inline constexpr std::array PixelExportColor_Int16_UInt32_args = { &PixelExportColor_Int16_UInt32_color, &PixelExportColor_Int16_UInt32_index };

/// pixelExportColor with Int16, Int16
Variable PixelExportColor_Int16_Int16_color;
Variable PixelExportColor_Int16_Int16_index;
Function PixelExportColor_Int16_Int16;
inline constexpr std::array PixelExportColor_Int16_Int16_args = { &PixelExportColor_Int16_Int16_color, &PixelExportColor_Int16_Int16_index };

/// pixelExportColor with Int16, UInt16
Variable PixelExportColor_Int16_UInt16_color;
Variable PixelExportColor_Int16_UInt16_index;
Function PixelExportColor_Int16_UInt16;
inline constexpr std::array PixelExportColor_Int16_UInt16_args = { &PixelExportColor_Int16_UInt16_color, &PixelExportColor_Int16_UInt16_index };

/// pixelExportColor with Int16x2, Int32
Variable PixelExportColor_Int16x2_Int32_color;
Variable PixelExportColor_Int16x2_Int32_index;
Function PixelExportColor_Int16x2_Int32;
inline constexpr std::array PixelExportColor_Int16x2_Int32_args = { &PixelExportColor_Int16x2_Int32_color, &PixelExportColor_Int16x2_Int32_index };

/// pixelExportColor with Int16x2, UInt32
Variable PixelExportColor_Int16x2_UInt32_color;
Variable PixelExportColor_Int16x2_UInt32_index;
Function PixelExportColor_Int16x2_UInt32;
inline constexpr std::array PixelExportColor_Int16x2_UInt32_args = { &PixelExportColor_Int16x2_UInt32_color, &PixelExportColor_Int16x2_UInt32_index };

/// pixelExportColor with Int16x2, Int16
Variable PixelExportColor_Int16x2_Int16_color;
Variable PixelExportColor_Int16x2_Int16_index;
Function PixelExportColor_Int16x2_Int16;
inline constexpr std::array PixelExportColor_Int16x2_Int16_args = { &PixelExportColor_Int16x2_Int16_color, &PixelExportColor_Int16x2_Int16_index };

/// pixelExportColor with Int16x2, UInt16
Variable PixelExportColor_Int16x2_UInt16_color;
Variable PixelExportColor_Int16x2_UInt16_index;
Function PixelExportColor_Int16x2_UInt16;
inline constexpr std::array PixelExportColor_Int16x2_UInt16_args = { &PixelExportColor_Int16x2_UInt16_color, &PixelExportColor_Int16x2_UInt16_index };

/// pixelExportColor with Int16x3, Int32
Variable PixelExportColor_Int16x3_Int32_color;
Variable PixelExportColor_Int16x3_Int32_index;
Function PixelExportColor_Int16x3_Int32;
inline constexpr std::array PixelExportColor_Int16x3_Int32_args = { &PixelExportColor_Int16x3_Int32_color, &PixelExportColor_Int16x3_Int32_index };

/// pixelExportColor with Int16x3, UInt32
Variable PixelExportColor_Int16x3_UInt32_color;
Variable PixelExportColor_Int16x3_UInt32_index;
Function PixelExportColor_Int16x3_UInt32;
inline constexpr std::array PixelExportColor_Int16x3_UInt32_args = { &PixelExportColor_Int16x3_UInt32_color, &PixelExportColor_Int16x3_UInt32_index };

/// pixelExportColor with Int16x3, Int16
Variable PixelExportColor_Int16x3_Int16_color;
Variable PixelExportColor_Int16x3_Int16_index;
Function PixelExportColor_Int16x3_Int16;
inline constexpr std::array PixelExportColor_Int16x3_Int16_args = { &PixelExportColor_Int16x3_Int16_color, &PixelExportColor_Int16x3_Int16_index };

/// pixelExportColor with Int16x3, UInt16
Variable PixelExportColor_Int16x3_UInt16_color;
Variable PixelExportColor_Int16x3_UInt16_index;
Function PixelExportColor_Int16x3_UInt16;
inline constexpr std::array PixelExportColor_Int16x3_UInt16_args = { &PixelExportColor_Int16x3_UInt16_color, &PixelExportColor_Int16x3_UInt16_index };

/// pixelExportColor with Int16x4, Int32
Variable PixelExportColor_Int16x4_Int32_color;
Variable PixelExportColor_Int16x4_Int32_index;
Function PixelExportColor_Int16x4_Int32;
inline constexpr std::array PixelExportColor_Int16x4_Int32_args = { &PixelExportColor_Int16x4_Int32_color, &PixelExportColor_Int16x4_Int32_index };

/// pixelExportColor with Int16x4, UInt32
Variable PixelExportColor_Int16x4_UInt32_color;
Variable PixelExportColor_Int16x4_UInt32_index;
Function PixelExportColor_Int16x4_UInt32;
inline constexpr std::array PixelExportColor_Int16x4_UInt32_args = { &PixelExportColor_Int16x4_UInt32_color, &PixelExportColor_Int16x4_UInt32_index };

/// pixelExportColor with Int16x4, Int16
Variable PixelExportColor_Int16x4_Int16_color;
Variable PixelExportColor_Int16x4_Int16_index;
Function PixelExportColor_Int16x4_Int16;
inline constexpr std::array PixelExportColor_Int16x4_Int16_args = { &PixelExportColor_Int16x4_Int16_color, &PixelExportColor_Int16x4_Int16_index };

/// pixelExportColor with Int16x4, UInt16
Variable PixelExportColor_Int16x4_UInt16_color;
Variable PixelExportColor_Int16x4_UInt16_index;
Function PixelExportColor_Int16x4_UInt16;
inline constexpr std::array PixelExportColor_Int16x4_UInt16_args = { &PixelExportColor_Int16x4_UInt16_color, &PixelExportColor_Int16x4_UInt16_index };

/// pixelExportColor with UInt32, Int32
Variable PixelExportColor_UInt32_Int32_color;
Variable PixelExportColor_UInt32_Int32_index;
Function PixelExportColor_UInt32_Int32;
inline constexpr std::array PixelExportColor_UInt32_Int32_args = { &PixelExportColor_UInt32_Int32_color, &PixelExportColor_UInt32_Int32_index };

/// pixelExportColor with UInt32, UInt32
Variable PixelExportColor_UInt32_UInt32_color;
Variable PixelExportColor_UInt32_UInt32_index;
Function PixelExportColor_UInt32_UInt32;
inline constexpr std::array PixelExportColor_UInt32_UInt32_args = { &PixelExportColor_UInt32_UInt32_color, &PixelExportColor_UInt32_UInt32_index };

/// pixelExportColor with UInt32, Int16
Variable PixelExportColor_UInt32_Int16_color;
Variable PixelExportColor_UInt32_Int16_index;
Function PixelExportColor_UInt32_Int16;
inline constexpr std::array PixelExportColor_UInt32_Int16_args = { &PixelExportColor_UInt32_Int16_color, &PixelExportColor_UInt32_Int16_index };

/// pixelExportColor with UInt32, UInt16
Variable PixelExportColor_UInt32_UInt16_color;
Variable PixelExportColor_UInt32_UInt16_index;
Function PixelExportColor_UInt32_UInt16;
inline constexpr std::array PixelExportColor_UInt32_UInt16_args = { &PixelExportColor_UInt32_UInt16_color, &PixelExportColor_UInt32_UInt16_index };

/// pixelExportColor with UInt32x2, Int32
Variable PixelExportColor_UInt32x2_Int32_color;
Variable PixelExportColor_UInt32x2_Int32_index;
Function PixelExportColor_UInt32x2_Int32;
inline constexpr std::array PixelExportColor_UInt32x2_Int32_args = { &PixelExportColor_UInt32x2_Int32_color, &PixelExportColor_UInt32x2_Int32_index };

/// pixelExportColor with UInt32x2, UInt32
Variable PixelExportColor_UInt32x2_UInt32_color;
Variable PixelExportColor_UInt32x2_UInt32_index;
Function PixelExportColor_UInt32x2_UInt32;
inline constexpr std::array PixelExportColor_UInt32x2_UInt32_args = { &PixelExportColor_UInt32x2_UInt32_color, &PixelExportColor_UInt32x2_UInt32_index };

/// pixelExportColor with UInt32x2, Int16
Variable PixelExportColor_UInt32x2_Int16_color;
Variable PixelExportColor_UInt32x2_Int16_index;
Function PixelExportColor_UInt32x2_Int16;
inline constexpr std::array PixelExportColor_UInt32x2_Int16_args = { &PixelExportColor_UInt32x2_Int16_color, &PixelExportColor_UInt32x2_Int16_index };

/// pixelExportColor with UInt32x2, UInt16
Variable PixelExportColor_UInt32x2_UInt16_color;
Variable PixelExportColor_UInt32x2_UInt16_index;
Function PixelExportColor_UInt32x2_UInt16;
inline constexpr std::array PixelExportColor_UInt32x2_UInt16_args = { &PixelExportColor_UInt32x2_UInt16_color, &PixelExportColor_UInt32x2_UInt16_index };

/// pixelExportColor with UInt32x3, Int32
Variable PixelExportColor_UInt32x3_Int32_color;
Variable PixelExportColor_UInt32x3_Int32_index;
Function PixelExportColor_UInt32x3_Int32;
inline constexpr std::array PixelExportColor_UInt32x3_Int32_args = { &PixelExportColor_UInt32x3_Int32_color, &PixelExportColor_UInt32x3_Int32_index };

/// pixelExportColor with UInt32x3, UInt32
Variable PixelExportColor_UInt32x3_UInt32_color;
Variable PixelExportColor_UInt32x3_UInt32_index;
Function PixelExportColor_UInt32x3_UInt32;
inline constexpr std::array PixelExportColor_UInt32x3_UInt32_args = { &PixelExportColor_UInt32x3_UInt32_color, &PixelExportColor_UInt32x3_UInt32_index };

/// pixelExportColor with UInt32x3, Int16
Variable PixelExportColor_UInt32x3_Int16_color;
Variable PixelExportColor_UInt32x3_Int16_index;
Function PixelExportColor_UInt32x3_Int16;
inline constexpr std::array PixelExportColor_UInt32x3_Int16_args = { &PixelExportColor_UInt32x3_Int16_color, &PixelExportColor_UInt32x3_Int16_index };

/// pixelExportColor with UInt32x3, UInt16
Variable PixelExportColor_UInt32x3_UInt16_color;
Variable PixelExportColor_UInt32x3_UInt16_index;
Function PixelExportColor_UInt32x3_UInt16;
inline constexpr std::array PixelExportColor_UInt32x3_UInt16_args = { &PixelExportColor_UInt32x3_UInt16_color, &PixelExportColor_UInt32x3_UInt16_index };

/// pixelExportColor with UInt32x4, Int32
Variable PixelExportColor_UInt32x4_Int32_color;
Variable PixelExportColor_UInt32x4_Int32_index;
Function PixelExportColor_UInt32x4_Int32;
inline constexpr std::array PixelExportColor_UInt32x4_Int32_args = { &PixelExportColor_UInt32x4_Int32_color, &PixelExportColor_UInt32x4_Int32_index };

/// pixelExportColor with UInt32x4, UInt32
Variable PixelExportColor_UInt32x4_UInt32_color;
Variable PixelExportColor_UInt32x4_UInt32_index;
Function PixelExportColor_UInt32x4_UInt32;
inline constexpr std::array PixelExportColor_UInt32x4_UInt32_args = { &PixelExportColor_UInt32x4_UInt32_color, &PixelExportColor_UInt32x4_UInt32_index };

/// pixelExportColor with UInt32x4, Int16
Variable PixelExportColor_UInt32x4_Int16_color;
Variable PixelExportColor_UInt32x4_Int16_index;
Function PixelExportColor_UInt32x4_Int16;
inline constexpr std::array PixelExportColor_UInt32x4_Int16_args = { &PixelExportColor_UInt32x4_Int16_color, &PixelExportColor_UInt32x4_Int16_index };

/// pixelExportColor with UInt32x4, UInt16
Variable PixelExportColor_UInt32x4_UInt16_color;
Variable PixelExportColor_UInt32x4_UInt16_index;
Function PixelExportColor_UInt32x4_UInt16;
inline constexpr std::array PixelExportColor_UInt32x4_UInt16_args = { &PixelExportColor_UInt32x4_UInt16_color, &PixelExportColor_UInt32x4_UInt16_index };

/// pixelExportColor with UInt16, Int32
Variable PixelExportColor_UInt16_Int32_color;
Variable PixelExportColor_UInt16_Int32_index;
Function PixelExportColor_UInt16_Int32;
inline constexpr std::array PixelExportColor_UInt16_Int32_args = { &PixelExportColor_UInt16_Int32_color, &PixelExportColor_UInt16_Int32_index };

/// pixelExportColor with UInt16, UInt32
Variable PixelExportColor_UInt16_UInt32_color;
Variable PixelExportColor_UInt16_UInt32_index;
Function PixelExportColor_UInt16_UInt32;
inline constexpr std::array PixelExportColor_UInt16_UInt32_args = { &PixelExportColor_UInt16_UInt32_color, &PixelExportColor_UInt16_UInt32_index };

/// pixelExportColor with UInt16, Int16
Variable PixelExportColor_UInt16_Int16_color;
Variable PixelExportColor_UInt16_Int16_index;
Function PixelExportColor_UInt16_Int16;
inline constexpr std::array PixelExportColor_UInt16_Int16_args = { &PixelExportColor_UInt16_Int16_color, &PixelExportColor_UInt16_Int16_index };

void SetupIntrinsics7()
{
    /// transpose with Float16x4x3
    transpose_Float16x4x3_arg.name = "val"_c;
    transpose_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    transpose_Float16x4x3.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x4x3.name = transpose_Float16x4x3_name;
    transpose_Float16x4x3.backendIndex = 1833;
    transpose_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    transpose_Float16x4x3.parameters = transpose_Float16x4x3_args;
    Symbol::Resolved(&transpose_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&transpose_Float16x4x3)->signature = "transpose(f16x4x3) f16x4x3"_c;
    Symbol::Resolved(&transpose_Float16x4x3)->name = "transpose(f16x4x3)"_c;
    Symbol::Resolved(&transpose_Float16x4x3)->nameWithVarNames = "transpose(val : f16x4x3)"_c;
    Symbol::Resolved(&transpose_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// transpose with Float32x4x4
    transpose_Float32x4x4_arg.name = "val"_c;
    transpose_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    transpose_Float32x4x4.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x4x4.name = transpose_Float32x4x4_name;
    transpose_Float32x4x4.backendIndex = 1834;
    transpose_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    transpose_Float32x4x4.parameters = transpose_Float32x4x4_args;
    Symbol::Resolved(&transpose_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&transpose_Float32x4x4)->signature = "transpose(f32x4x4) f32x4x4"_c;
    Symbol::Resolved(&transpose_Float32x4x4)->name = "transpose(f32x4x4)"_c;
    Symbol::Resolved(&transpose_Float32x4x4)->nameWithVarNames = "transpose(val : f32x4x4)"_c;
    Symbol::Resolved(&transpose_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// transpose with Float16x4x4
    transpose_Float16x4x4_arg.name = "val"_c;
    transpose_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    transpose_Float16x4x4.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x4x4.name = transpose_Float16x4x4_name;
    transpose_Float16x4x4.backendIndex = 1835;
    transpose_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    transpose_Float16x4x4.parameters = transpose_Float16x4x4_args;
    Symbol::Resolved(&transpose_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&transpose_Float16x4x4)->signature = "transpose(f16x4x4) f16x4x4"_c;
    Symbol::Resolved(&transpose_Float16x4x4)->name = "transpose(f16x4x4)"_c;
    Symbol::Resolved(&transpose_Float16x4x4)->nameWithVarNames = "transpose(val : f16x4x4)"_c;
    Symbol::Resolved(&transpose_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// inverse with Float32x2x2
    inverse_Float32x2x2_arg.name = "val"_c;
    inverse_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    inverse_Float32x2x2.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x2x2.name = inverse_Float32x2x2_name;
    inverse_Float32x2x2.backendIndex = 1836;
    inverse_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    inverse_Float32x2x2.parameters = inverse_Float32x2x2_args;
    Symbol::Resolved(&inverse_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&inverse_Float32x2x2)->signature = "inverse(f32x2x2) f32x2x2"_c;
    Symbol::Resolved(&inverse_Float32x2x2)->name = "inverse(f32x2x2)"_c;
    Symbol::Resolved(&inverse_Float32x2x2)->nameWithVarNames = "inverse(val : f32x2x2)"_c;
    Symbol::Resolved(&inverse_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// inverse with Float16x2x2
    inverse_Float16x2x2_arg.name = "val"_c;
    inverse_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    inverse_Float16x2x2.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x2x2.name = inverse_Float16x2x2_name;
    inverse_Float16x2x2.backendIndex = 1837;
    inverse_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    inverse_Float16x2x2.parameters = inverse_Float16x2x2_args;
    Symbol::Resolved(&inverse_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&inverse_Float16x2x2)->signature = "inverse(f16x2x2) f16x2x2"_c;
    Symbol::Resolved(&inverse_Float16x2x2)->name = "inverse(f16x2x2)"_c;
    Symbol::Resolved(&inverse_Float16x2x2)->nameWithVarNames = "inverse(val : f16x2x2)"_c;
    Symbol::Resolved(&inverse_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// inverse with Float32x2x3
    inverse_Float32x2x3_arg.name = "val"_c;
    inverse_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    inverse_Float32x2x3.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x2x3.name = inverse_Float32x2x3_name;
    inverse_Float32x2x3.backendIndex = 1838;
    inverse_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    inverse_Float32x2x3.parameters = inverse_Float32x2x3_args;
    Symbol::Resolved(&inverse_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&inverse_Float32x2x3)->signature = "inverse(f32x2x3) f32x2x3"_c;
    Symbol::Resolved(&inverse_Float32x2x3)->name = "inverse(f32x2x3)"_c;
    Symbol::Resolved(&inverse_Float32x2x3)->nameWithVarNames = "inverse(val : f32x2x3)"_c;
    Symbol::Resolved(&inverse_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// inverse with Float16x2x3
    inverse_Float16x2x3_arg.name = "val"_c;
    inverse_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    inverse_Float16x2x3.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x2x3.name = inverse_Float16x2x3_name;
    inverse_Float16x2x3.backendIndex = 1839;
    inverse_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    inverse_Float16x2x3.parameters = inverse_Float16x2x3_args;
    Symbol::Resolved(&inverse_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&inverse_Float16x2x3)->signature = "inverse(f16x2x3) f16x2x3"_c;
    Symbol::Resolved(&inverse_Float16x2x3)->name = "inverse(f16x2x3)"_c;
    Symbol::Resolved(&inverse_Float16x2x3)->nameWithVarNames = "inverse(val : f16x2x3)"_c;
    Symbol::Resolved(&inverse_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// inverse with Float32x2x4
    inverse_Float32x2x4_arg.name = "val"_c;
    inverse_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    inverse_Float32x2x4.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x2x4.name = inverse_Float32x2x4_name;
    inverse_Float32x2x4.backendIndex = 1840;
    inverse_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    inverse_Float32x2x4.parameters = inverse_Float32x2x4_args;
    Symbol::Resolved(&inverse_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&inverse_Float32x2x4)->signature = "inverse(f32x2x4) f32x2x4"_c;
    Symbol::Resolved(&inverse_Float32x2x4)->name = "inverse(f32x2x4)"_c;
    Symbol::Resolved(&inverse_Float32x2x4)->nameWithVarNames = "inverse(val : f32x2x4)"_c;
    Symbol::Resolved(&inverse_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// inverse with Float16x2x4
    inverse_Float16x2x4_arg.name = "val"_c;
    inverse_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    inverse_Float16x2x4.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x2x4.name = inverse_Float16x2x4_name;
    inverse_Float16x2x4.backendIndex = 1841;
    inverse_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    inverse_Float16x2x4.parameters = inverse_Float16x2x4_args;
    Symbol::Resolved(&inverse_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&inverse_Float16x2x4)->signature = "inverse(f16x2x4) f16x2x4"_c;
    Symbol::Resolved(&inverse_Float16x2x4)->name = "inverse(f16x2x4)"_c;
    Symbol::Resolved(&inverse_Float16x2x4)->nameWithVarNames = "inverse(val : f16x2x4)"_c;
    Symbol::Resolved(&inverse_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// inverse with Float32x3x2
    inverse_Float32x3x2_arg.name = "val"_c;
    inverse_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    inverse_Float32x3x2.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x3x2.name = inverse_Float32x3x2_name;
    inverse_Float32x3x2.backendIndex = 1842;
    inverse_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    inverse_Float32x3x2.parameters = inverse_Float32x3x2_args;
    Symbol::Resolved(&inverse_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&inverse_Float32x3x2)->signature = "inverse(f32x3x2) f32x3x2"_c;
    Symbol::Resolved(&inverse_Float32x3x2)->name = "inverse(f32x3x2)"_c;
    Symbol::Resolved(&inverse_Float32x3x2)->nameWithVarNames = "inverse(val : f32x3x2)"_c;
    Symbol::Resolved(&inverse_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// inverse with Float16x3x2
    inverse_Float16x3x2_arg.name = "val"_c;
    inverse_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    inverse_Float16x3x2.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x3x2.name = inverse_Float16x3x2_name;
    inverse_Float16x3x2.backendIndex = 1843;
    inverse_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    inverse_Float16x3x2.parameters = inverse_Float16x3x2_args;
    Symbol::Resolved(&inverse_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&inverse_Float16x3x2)->signature = "inverse(f16x3x2) f16x3x2"_c;
    Symbol::Resolved(&inverse_Float16x3x2)->name = "inverse(f16x3x2)"_c;
    Symbol::Resolved(&inverse_Float16x3x2)->nameWithVarNames = "inverse(val : f16x3x2)"_c;
    Symbol::Resolved(&inverse_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// inverse with Float32x3x3
    inverse_Float32x3x3_arg.name = "val"_c;
    inverse_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    inverse_Float32x3x3.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x3x3.name = inverse_Float32x3x3_name;
    inverse_Float32x3x3.backendIndex = 1844;
    inverse_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    inverse_Float32x3x3.parameters = inverse_Float32x3x3_args;
    Symbol::Resolved(&inverse_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&inverse_Float32x3x3)->signature = "inverse(f32x3x3) f32x3x3"_c;
    Symbol::Resolved(&inverse_Float32x3x3)->name = "inverse(f32x3x3)"_c;
    Symbol::Resolved(&inverse_Float32x3x3)->nameWithVarNames = "inverse(val : f32x3x3)"_c;
    Symbol::Resolved(&inverse_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// inverse with Float16x3x3
    inverse_Float16x3x3_arg.name = "val"_c;
    inverse_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    inverse_Float16x3x3.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x3x3.name = inverse_Float16x3x3_name;
    inverse_Float16x3x3.backendIndex = 1845;
    inverse_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    inverse_Float16x3x3.parameters = inverse_Float16x3x3_args;
    Symbol::Resolved(&inverse_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&inverse_Float16x3x3)->signature = "inverse(f16x3x3) f16x3x3"_c;
    Symbol::Resolved(&inverse_Float16x3x3)->name = "inverse(f16x3x3)"_c;
    Symbol::Resolved(&inverse_Float16x3x3)->nameWithVarNames = "inverse(val : f16x3x3)"_c;
    Symbol::Resolved(&inverse_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// inverse with Float32x3x4
    inverse_Float32x3x4_arg.name = "val"_c;
    inverse_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    inverse_Float32x3x4.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x3x4.name = inverse_Float32x3x4_name;
    inverse_Float32x3x4.backendIndex = 1846;
    inverse_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    inverse_Float32x3x4.parameters = inverse_Float32x3x4_args;
    Symbol::Resolved(&inverse_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&inverse_Float32x3x4)->signature = "inverse(f32x3x4) f32x3x4"_c;
    Symbol::Resolved(&inverse_Float32x3x4)->name = "inverse(f32x3x4)"_c;
    Symbol::Resolved(&inverse_Float32x3x4)->nameWithVarNames = "inverse(val : f32x3x4)"_c;
    Symbol::Resolved(&inverse_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// inverse with Float16x3x4
    inverse_Float16x3x4_arg.name = "val"_c;
    inverse_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    inverse_Float16x3x4.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x3x4.name = inverse_Float16x3x4_name;
    inverse_Float16x3x4.backendIndex = 1847;
    inverse_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    inverse_Float16x3x4.parameters = inverse_Float16x3x4_args;
    Symbol::Resolved(&inverse_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&inverse_Float16x3x4)->signature = "inverse(f16x3x4) f16x3x4"_c;
    Symbol::Resolved(&inverse_Float16x3x4)->name = "inverse(f16x3x4)"_c;
    Symbol::Resolved(&inverse_Float16x3x4)->nameWithVarNames = "inverse(val : f16x3x4)"_c;
    Symbol::Resolved(&inverse_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// inverse with Float32x4x2
    inverse_Float32x4x2_arg.name = "val"_c;
    inverse_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    inverse_Float32x4x2.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x4x2.name = inverse_Float32x4x2_name;
    inverse_Float32x4x2.backendIndex = 1848;
    inverse_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    inverse_Float32x4x2.parameters = inverse_Float32x4x2_args;
    Symbol::Resolved(&inverse_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&inverse_Float32x4x2)->signature = "inverse(f32x4x2) f32x4x2"_c;
    Symbol::Resolved(&inverse_Float32x4x2)->name = "inverse(f32x4x2)"_c;
    Symbol::Resolved(&inverse_Float32x4x2)->nameWithVarNames = "inverse(val : f32x4x2)"_c;
    Symbol::Resolved(&inverse_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// inverse with Float16x4x2
    inverse_Float16x4x2_arg.name = "val"_c;
    inverse_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    inverse_Float16x4x2.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x4x2.name = inverse_Float16x4x2_name;
    inverse_Float16x4x2.backendIndex = 1849;
    inverse_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    inverse_Float16x4x2.parameters = inverse_Float16x4x2_args;
    Symbol::Resolved(&inverse_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&inverse_Float16x4x2)->signature = "inverse(f16x4x2) f16x4x2"_c;
    Symbol::Resolved(&inverse_Float16x4x2)->name = "inverse(f16x4x2)"_c;
    Symbol::Resolved(&inverse_Float16x4x2)->nameWithVarNames = "inverse(val : f16x4x2)"_c;
    Symbol::Resolved(&inverse_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// inverse with Float32x4x3
    inverse_Float32x4x3_arg.name = "val"_c;
    inverse_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    inverse_Float32x4x3.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x4x3.name = inverse_Float32x4x3_name;
    inverse_Float32x4x3.backendIndex = 1850;
    inverse_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    inverse_Float32x4x3.parameters = inverse_Float32x4x3_args;
    Symbol::Resolved(&inverse_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&inverse_Float32x4x3)->signature = "inverse(f32x4x3) f32x4x3"_c;
    Symbol::Resolved(&inverse_Float32x4x3)->name = "inverse(f32x4x3)"_c;
    Symbol::Resolved(&inverse_Float32x4x3)->nameWithVarNames = "inverse(val : f32x4x3)"_c;
    Symbol::Resolved(&inverse_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// inverse with Float16x4x3
    inverse_Float16x4x3_arg.name = "val"_c;
    inverse_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    inverse_Float16x4x3.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x4x3.name = inverse_Float16x4x3_name;
    inverse_Float16x4x3.backendIndex = 1851;
    inverse_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    inverse_Float16x4x3.parameters = inverse_Float16x4x3_args;
    Symbol::Resolved(&inverse_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&inverse_Float16x4x3)->signature = "inverse(f16x4x3) f16x4x3"_c;
    Symbol::Resolved(&inverse_Float16x4x3)->name = "inverse(f16x4x3)"_c;
    Symbol::Resolved(&inverse_Float16x4x3)->nameWithVarNames = "inverse(val : f16x4x3)"_c;
    Symbol::Resolved(&inverse_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// inverse with Float32x4x4
    inverse_Float32x4x4_arg.name = "val"_c;
    inverse_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    inverse_Float32x4x4.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x4x4.name = inverse_Float32x4x4_name;
    inverse_Float32x4x4.backendIndex = 1852;
    inverse_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    inverse_Float32x4x4.parameters = inverse_Float32x4x4_args;
    Symbol::Resolved(&inverse_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&inverse_Float32x4x4)->signature = "inverse(f32x4x4) f32x4x4"_c;
    Symbol::Resolved(&inverse_Float32x4x4)->name = "inverse(f32x4x4)"_c;
    Symbol::Resolved(&inverse_Float32x4x4)->nameWithVarNames = "inverse(val : f32x4x4)"_c;
    Symbol::Resolved(&inverse_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// inverse with Float16x4x4
    inverse_Float16x4x4_arg.name = "val"_c;
    inverse_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    inverse_Float16x4x4.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x4x4.name = inverse_Float16x4x4_name;
    inverse_Float16x4x4.backendIndex = 1853;
    inverse_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    inverse_Float16x4x4.parameters = inverse_Float16x4x4_args;
    Symbol::Resolved(&inverse_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&inverse_Float16x4x4)->signature = "inverse(f16x4x4) f16x4x4"_c;
    Symbol::Resolved(&inverse_Float16x4x4)->name = "inverse(f16x4x4)"_c;
    Symbol::Resolved(&inverse_Float16x4x4)->nameWithVarNames = "inverse(val : f16x4x4)"_c;
    Symbol::Resolved(&inverse_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// vertexGetOutputLayer
    VertexGetOutputLayer.documentation = "Returns the output layer for the current vertex."_c;
    VertexGetOutputLayer.name = VertexGetOutputLayer_name;
    VertexGetOutputLayer.backendIndex = 1854;
    VertexGetOutputLayer.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetOutputLayer)->signature = "vertexGetOutputLayer() u32"_c;
    Symbol::Resolved(&VertexGetOutputLayer)->name = "vertexGetOutputLayer()"_c;
    Symbol::Resolved(&VertexGetOutputLayer)->nameWithVarNames = "vertexGetOutputLayer()"_c;
    Symbol::Resolved(&VertexGetOutputLayer)->returnTypeSymbol = &UInt32Type;

    /// vertexGetOutputViewport
    VertexGetOutputViewport.documentation = "Returns the output viewport for the current vertex."_c;
    VertexGetOutputViewport.name = VertexGetOutputViewport_name;
    VertexGetOutputViewport.backendIndex = 1855;
    VertexGetOutputViewport.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetOutputViewport)->signature = "vertexGetOutputViewport() u32"_c;
    Symbol::Resolved(&VertexGetOutputViewport)->name = "vertexGetOutputViewport()"_c;
    Symbol::Resolved(&VertexGetOutputViewport)->nameWithVarNames = "vertexGetOutputViewport()"_c;
    Symbol::Resolved(&VertexGetOutputViewport)->returnTypeSymbol = &UInt32Type;

    /// vertexGetIndex
    VertexGetIndex.documentation = "Returns the index of the current vertex."_c;
    VertexGetIndex.name = VertexGetIndex_name;
    VertexGetIndex.backendIndex = 1856;
    VertexGetIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetIndex)->signature = "vertexGetIndex() u32"_c;
    Symbol::Resolved(&VertexGetIndex)->name = "vertexGetIndex()"_c;
    Symbol::Resolved(&VertexGetIndex)->nameWithVarNames = "vertexGetIndex()"_c;
    Symbol::Resolved(&VertexGetIndex)->returnTypeSymbol = &UInt32Type;

    /// vertexGetInstanceIndex
    VertexGetInstanceIndex.documentation = "Returns the instance index of the current vertex."_c;
    VertexGetInstanceIndex.name = VertexGetInstanceIndex_name;
    VertexGetInstanceIndex.backendIndex = 1857;
    VertexGetInstanceIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetInstanceIndex)->signature = "vertexGetInstanceIndex() u32"_c;
    Symbol::Resolved(&VertexGetInstanceIndex)->name = "vertexGetInstanceIndex()"_c;
    Symbol::Resolved(&VertexGetInstanceIndex)->nameWithVarNames = "vertexGetInstanceIndex()"_c;
    Symbol::Resolved(&VertexGetInstanceIndex)->returnTypeSymbol = &UInt32Type;

    /// vertexGetBaseIndex
    VertexGetBaseIndex.documentation = "Returns the base index of the current vertex."_c;
    VertexGetBaseIndex.name = VertexGetBaseIndex_name;
    VertexGetBaseIndex.backendIndex = 1858;
    VertexGetBaseIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetBaseIndex)->signature = "vertexGetBaseIndex() u32"_c;
    Symbol::Resolved(&VertexGetBaseIndex)->name = "vertexGetBaseIndex()"_c;
    Symbol::Resolved(&VertexGetBaseIndex)->nameWithVarNames = "vertexGetBaseIndex()"_c;
    Symbol::Resolved(&VertexGetBaseIndex)->returnTypeSymbol = &UInt32Type;

    /// vertexGetBaseInstanceIndex
    VertexGetBaseInstanceIndex.documentation = "Returns the base instance index of the current vertex."_c;
    VertexGetBaseInstanceIndex.name = VertexGetBaseInstanceIndex_name;
    VertexGetBaseInstanceIndex.backendIndex = 1859;
    VertexGetBaseInstanceIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetBaseInstanceIndex)->signature = "vertexGetBaseInstanceIndex() u32"_c;
    Symbol::Resolved(&VertexGetBaseInstanceIndex)->name = "vertexGetBaseInstanceIndex()"_c;
    Symbol::Resolved(&VertexGetBaseInstanceIndex)->nameWithVarNames = "vertexGetBaseInstanceIndex()"_c;
    Symbol::Resolved(&VertexGetBaseInstanceIndex)->returnTypeSymbol = &UInt32Type;

    /// vertexGetDrawIndex
    VertexGetDrawIndex.documentation = "Returns the draw index of the current vertex."_c;
    VertexGetDrawIndex.name = VertexGetDrawIndex_name;
    VertexGetDrawIndex.backendIndex = 1860;
    VertexGetDrawIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetDrawIndex)->signature = "vertexGetDrawIndex() u32"_c;
    Symbol::Resolved(&VertexGetDrawIndex)->name = "vertexGetDrawIndex()"_c;
    Symbol::Resolved(&VertexGetDrawIndex)->nameWithVarNames = "vertexGetDrawIndex()"_c;
    Symbol::Resolved(&VertexGetDrawIndex)->returnTypeSymbol = &UInt32Type;

    /// vertexSetOutputLayer with UInt16
    VertexSetOutputLayer_UInt16_arg.name = "val"_c;
    VertexSetOutputLayer_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    VertexSetOutputLayer_UInt16.documentation = "Sets the output layer for the current vertex."_c;
    VertexSetOutputLayer_UInt16.name = VertexSetOutputLayer_UInt16_name;
    VertexSetOutputLayer_UInt16.backendIndex = 1861;
    VertexSetOutputLayer_UInt16.returnType = Type::FullType { VoidType.name };
    VertexSetOutputLayer_UInt16.parameters = VertexSetOutputLayer_UInt16_args;
    Symbol::Resolved(&VertexSetOutputLayer_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&VertexSetOutputLayer_UInt16)->signature = "vertexSetOutputLayer(u16) void"_c;
    Symbol::Resolved(&VertexSetOutputLayer_UInt16)->name = "vertexSetOutputLayer(u16)"_c;
    Symbol::Resolved(&VertexSetOutputLayer_UInt16)->nameWithVarNames = "vertexSetOutputLayer(val : u16)"_c;
    Symbol::Resolved(&VertexSetOutputLayer_UInt16)->returnTypeSymbol = &VoidType;

    /// vertexSetOutputLayer with UInt32
    VertexSetOutputLayer_UInt32_arg.name = "val"_c;
    VertexSetOutputLayer_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    VertexSetOutputLayer_UInt32.documentation = "Sets the output layer for the current vertex."_c;
    VertexSetOutputLayer_UInt32.name = VertexSetOutputLayer_UInt32_name;
    VertexSetOutputLayer_UInt32.backendIndex = 1862;
    VertexSetOutputLayer_UInt32.returnType = Type::FullType { VoidType.name };
    VertexSetOutputLayer_UInt32.parameters = VertexSetOutputLayer_UInt32_args;
    Symbol::Resolved(&VertexSetOutputLayer_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&VertexSetOutputLayer_UInt32)->signature = "vertexSetOutputLayer(u32) void"_c;
    Symbol::Resolved(&VertexSetOutputLayer_UInt32)->name = "vertexSetOutputLayer(u32)"_c;
    Symbol::Resolved(&VertexSetOutputLayer_UInt32)->nameWithVarNames = "vertexSetOutputLayer(val : u32)"_c;
    Symbol::Resolved(&VertexSetOutputLayer_UInt32)->returnTypeSymbol = &VoidType;

    /// vertexSetOutputViewport with UInt16
    VertexSetOutputViewport_UInt16_arg.name = "val"_c;
    VertexSetOutputViewport_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    VertexSetOutputViewport_UInt16.documentation = "Sets the output viewport for the current vertex."_c;
    VertexSetOutputViewport_UInt16.name = VertexSetOutputViewport_UInt16_name;
    VertexSetOutputViewport_UInt16.backendIndex = 1863;
    VertexSetOutputViewport_UInt16.returnType = Type::FullType { VoidType.name };
    VertexSetOutputViewport_UInt16.parameters = VertexSetOutputViewport_UInt16_args;
    Symbol::Resolved(&VertexSetOutputViewport_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&VertexSetOutputViewport_UInt16)->signature = "vertexSetOutputViewport(u16) void"_c;
    Symbol::Resolved(&VertexSetOutputViewport_UInt16)->name = "vertexSetOutputViewport(u16)"_c;
    Symbol::Resolved(&VertexSetOutputViewport_UInt16)->nameWithVarNames = "vertexSetOutputViewport(val : u16)"_c;
    Symbol::Resolved(&VertexSetOutputViewport_UInt16)->returnTypeSymbol = &VoidType;

    /// vertexSetOutputViewport with UInt32
    VertexSetOutputViewport_UInt32_arg.name = "val"_c;
    VertexSetOutputViewport_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    VertexSetOutputViewport_UInt32.documentation = "Sets the output viewport for the current vertex."_c;
    VertexSetOutputViewport_UInt32.name = VertexSetOutputViewport_UInt32_name;
    VertexSetOutputViewport_UInt32.backendIndex = 1864;
    VertexSetOutputViewport_UInt32.returnType = Type::FullType { VoidType.name };
    VertexSetOutputViewport_UInt32.parameters = VertexSetOutputViewport_UInt32_args;
    Symbol::Resolved(&VertexSetOutputViewport_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&VertexSetOutputViewport_UInt32)->signature = "vertexSetOutputViewport(u32) void"_c;
    Symbol::Resolved(&VertexSetOutputViewport_UInt32)->name = "vertexSetOutputViewport(u32)"_c;
    Symbol::Resolved(&VertexSetOutputViewport_UInt32)->nameWithVarNames = "vertexSetOutputViewport(val : u32)"_c;
    Symbol::Resolved(&VertexSetOutputViewport_UInt32)->returnTypeSymbol = &VoidType;

    /// vertexExportCoordinates with Float32x4
    VertexExportCoordinates_Float32x4_arg.name = "val"_c;
    VertexExportCoordinates_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    VertexExportCoordinates_Float32x4.documentation = "Exports the value as the vertex position to the rasterizer. This function must be called at least once in a vertex shader. This is the same as the `SV_POSITION` in HLSL or `gl_Position` in GLSL."_c;
    VertexExportCoordinates_Float32x4.name = VertexExportCoordinates_Float32x4_name;
    VertexExportCoordinates_Float32x4.backendIndex = 1865;
    VertexExportCoordinates_Float32x4.returnType = Type::FullType { VoidType.name };
    VertexExportCoordinates_Float32x4.parameters = VertexExportCoordinates_Float32x4_args;
    Symbol::Resolved(&VertexExportCoordinates_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&VertexExportCoordinates_Float32x4)->signature = "vertexExportCoordinates(f32x4) void"_c;
    Symbol::Resolved(&VertexExportCoordinates_Float32x4)->name = "vertexExportCoordinates(f32x4)"_c;
    Symbol::Resolved(&VertexExportCoordinates_Float32x4)->nameWithVarNames = "vertexExportCoordinates(val : f32x4)"_c;
    Symbol::Resolved(&VertexExportCoordinates_Float32x4)->returnTypeSymbol = &VoidType;

    /// vertexExportCoordinates with Float16x4
    VertexExportCoordinates_Float16x4_arg.name = "val"_c;
    VertexExportCoordinates_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    VertexExportCoordinates_Float16x4.documentation = "Exports the value as the vertex position to the rasterizer. This function must be called at least once in a vertex shader. This is the same as the `SV_POSITION` in HLSL or `gl_Position` in GLSL."_c;
    VertexExportCoordinates_Float16x4.name = VertexExportCoordinates_Float16x4_name;
    VertexExportCoordinates_Float16x4.backendIndex = 1866;
    VertexExportCoordinates_Float16x4.returnType = Type::FullType { VoidType.name };
    VertexExportCoordinates_Float16x4.parameters = VertexExportCoordinates_Float16x4_args;
    Symbol::Resolved(&VertexExportCoordinates_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&VertexExportCoordinates_Float16x4)->signature = "vertexExportCoordinates(f16x4) void"_c;
    Symbol::Resolved(&VertexExportCoordinates_Float16x4)->name = "vertexExportCoordinates(f16x4)"_c;
    Symbol::Resolved(&VertexExportCoordinates_Float16x4)->nameWithVarNames = "vertexExportCoordinates(val : f16x4)"_c;
    Symbol::Resolved(&VertexExportCoordinates_Float16x4)->returnTypeSymbol = &VoidType;

    /// geometryExportVertex with Float32x4
    GeometryExportVertex_Float32x4_arg.name = "val"_c;
    GeometryExportVertex_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    GeometryExportVertex_Float32x4.documentation = "Exports the value as a vertex for the current primitive. This function must be called for each point in the topology given by output_primitive. This is the same as writing `gl_Position` followed by calling EmitVertex() in GLSL."_c;
    GeometryExportVertex_Float32x4.name = GeometryExportVertex_Float32x4_name;
    GeometryExportVertex_Float32x4.backendIndex = 1867;
    GeometryExportVertex_Float32x4.returnType = Type::FullType { VoidType.name };
    GeometryExportVertex_Float32x4.parameters = GeometryExportVertex_Float32x4_args;
    Symbol::Resolved(&GeometryExportVertex_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&GeometryExportVertex_Float32x4)->signature = "geometryExportVertex(f32x4) void"_c;
    Symbol::Resolved(&GeometryExportVertex_Float32x4)->name = "geometryExportVertex(f32x4)"_c;
    Symbol::Resolved(&GeometryExportVertex_Float32x4)->nameWithVarNames = "geometryExportVertex(val : f32x4)"_c;
    Symbol::Resolved(&GeometryExportVertex_Float32x4)->returnTypeSymbol = &VoidType;

    /// geometryExportVertex with Float16x4
    GeometryExportVertex_Float16x4_arg.name = "val"_c;
    GeometryExportVertex_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    GeometryExportVertex_Float16x4.documentation = "Exports the value as a vertex for the current primitive. This function must be called for each point in the topology given by output_primitive. This is the same as writing `gl_Position` followed by calling EmitVertex() in GLSL."_c;
    GeometryExportVertex_Float16x4.name = GeometryExportVertex_Float16x4_name;
    GeometryExportVertex_Float16x4.backendIndex = 1868;
    GeometryExportVertex_Float16x4.returnType = Type::FullType { VoidType.name };
    GeometryExportVertex_Float16x4.parameters = GeometryExportVertex_Float16x4_args;
    Symbol::Resolved(&GeometryExportVertex_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&GeometryExportVertex_Float16x4)->signature = "geometryExportVertex(f16x4) void"_c;
    Symbol::Resolved(&GeometryExportVertex_Float16x4)->name = "geometryExportVertex(f16x4)"_c;
    Symbol::Resolved(&GeometryExportVertex_Float16x4)->nameWithVarNames = "geometryExportVertex(val : f16x4)"_c;
    Symbol::Resolved(&GeometryExportVertex_Float16x4)->returnTypeSymbol = &VoidType;

    /// geometryExportPrimitive
    GeometryExportPrimitive.documentation = "Sets the output viewport for the current vertex."_c;
    GeometryExportPrimitive.name = GeometryExportPrimitive_name;
    GeometryExportPrimitive.backendIndex = 1869;
    GeometryExportPrimitive.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&GeometryExportPrimitive)->signature = "geometryExportPrimitive() void"_c;
    Symbol::Resolved(&GeometryExportPrimitive)->name = "geometryExportPrimitive()"_c;
    Symbol::Resolved(&GeometryExportPrimitive)->nameWithVarNames = "geometryExportPrimitive()"_c;
    Symbol::Resolved(&GeometryExportPrimitive)->returnTypeSymbol = &VoidType;

    /// geometryGetPoint
    GeometryGetPoint.documentation = "Returns a struct of the current point."_c;
    GeometryGetPoint.name = GeometryGetPoint_name;
    GeometryGetPoint.backendIndex = 1870;
    GeometryGetPoint.returnType = Type::FullType { GeometryPointType.name };
    Symbol::Resolved(&GeometryGetPoint)->signature = "geometryGetPoint() GeometryPoint"_c;
    Symbol::Resolved(&GeometryGetPoint)->name = "geometryGetPoint()"_c;
    Symbol::Resolved(&GeometryGetPoint)->nameWithVarNames = "geometryGetPoint()"_c;
    Symbol::Resolved(&GeometryGetPoint)->returnTypeSymbol = &GeometryPointType;

    /// geometryGetLine
    GeometryGetLine.documentation = "Returns a struct of the current line."_c;
    GeometryGetLine.name = GeometryGetLine_name;
    GeometryGetLine.backendIndex = 1871;
    GeometryGetLine.returnType = Type::FullType { GeometryLineType.name };
    Symbol::Resolved(&GeometryGetLine)->signature = "geometryGetLine() GeometryLine"_c;
    Symbol::Resolved(&GeometryGetLine)->name = "geometryGetLine()"_c;
    Symbol::Resolved(&GeometryGetLine)->nameWithVarNames = "geometryGetLine()"_c;
    Symbol::Resolved(&GeometryGetLine)->returnTypeSymbol = &GeometryLineType;

    /// geometryGetTriangle
    GeometryGetTriangle.documentation = "Returns a struct of the current triangle."_c;
    GeometryGetTriangle.name = GeometryGetTriangle_name;
    GeometryGetTriangle.backendIndex = 1872;
    GeometryGetTriangle.returnType = Type::FullType { GeometryTriangleType.name };
    Symbol::Resolved(&GeometryGetTriangle)->signature = "geometryGetTriangle() GeometryTriangle"_c;
    Symbol::Resolved(&GeometryGetTriangle)->name = "geometryGetTriangle()"_c;
    Symbol::Resolved(&GeometryGetTriangle)->nameWithVarNames = "geometryGetTriangle()"_c;
    Symbol::Resolved(&GeometryGetTriangle)->returnTypeSymbol = &GeometryTriangleType;

    /// pixelGetCoordinates
    PixelGetCoordinates_Float32x4.documentation = "Returns the post transformation coordinates of the current pixel. xy is the pixel position in non-normalized coordinates, z is the depth in the range [0, 1] or [-1, 1] based on the graphics API."_c;
    PixelGetCoordinates_Float32x4.name = PixelGetCoordinates_Float32x4_name;
    PixelGetCoordinates_Float32x4.backendIndex = 1873;
    PixelGetCoordinates_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&PixelGetCoordinates_Float32x4)->signature = "pixelGetCoordinates() f32x4"_c;
    Symbol::Resolved(&PixelGetCoordinates_Float32x4)->name = "pixelGetCoordinates()"_c;
    Symbol::Resolved(&PixelGetCoordinates_Float32x4)->nameWithVarNames = "pixelGetCoordinates()"_c;
    Symbol::Resolved(&PixelGetCoordinates_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// pixelGetCoordinates
    PixelGetCoordinates_Float16x4.documentation = "Returns the post transformation coordinates of the current pixel. xy is the pixel position in non-normalized coordinates, z is the depth in the range [0, 1] or [-1, 1] based on the graphics API."_c;
    PixelGetCoordinates_Float16x4.name = PixelGetCoordinates_Float16x4_name;
    PixelGetCoordinates_Float16x4.backendIndex = 1874;
    PixelGetCoordinates_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&PixelGetCoordinates_Float16x4)->signature = "pixelGetCoordinates() f16x4"_c;
    Symbol::Resolved(&PixelGetCoordinates_Float16x4)->name = "pixelGetCoordinates()"_c;
    Symbol::Resolved(&PixelGetCoordinates_Float16x4)->nameWithVarNames = "pixelGetCoordinates()"_c;
    Symbol::Resolved(&PixelGetCoordinates_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// pixelGetFrontFacing
    PixelGetFrontFacing.documentation = "Returns the facing direction of the current pixel"_c;
    PixelGetFrontFacing.name = PixelGetFrontFacing_name;
    PixelGetFrontFacing.backendIndex = 1875;
    PixelGetFrontFacing.returnType = Type::FullType { Bool8Type.name };
    Symbol::Resolved(&PixelGetFrontFacing)->signature = "pixelGetFrontFacing() b8"_c;
    Symbol::Resolved(&PixelGetFrontFacing)->name = "pixelGetFrontFacing()"_c;
    Symbol::Resolved(&PixelGetFrontFacing)->nameWithVarNames = "pixelGetFrontFacing()"_c;
    Symbol::Resolved(&PixelGetFrontFacing)->returnTypeSymbol = &Bool8Type;

    /// pixelGetDepth
    PixelGetDepth.documentation = "Returns the depth value for the current pixel"_c;
    PixelGetDepth.name = PixelGetDepth_name;
    PixelGetDepth.backendIndex = 1876;
    PixelGetDepth.returnType = Type::FullType { Float32Type.name };
    Symbol::Resolved(&PixelGetDepth)->signature = "pixelGetDepth() f32"_c;
    Symbol::Resolved(&PixelGetDepth)->name = "pixelGetDepth()"_c;
    Symbol::Resolved(&PixelGetDepth)->nameWithVarNames = "pixelGetDepth()"_c;
    Symbol::Resolved(&PixelGetDepth)->returnTypeSymbol = &Float32Type;

    /// pixelSetDepth with Float32
    PixelSetDepth_val.name = "val"_c;
    PixelSetDepth_val.type = Type::FullType{ Float32Type.name };
    PixelSetDepth.documentation = "Sets the depth value for the current pixel"_c;
    PixelSetDepth.name = PixelSetDepth_name;
    PixelSetDepth.backendIndex = 1877;
    PixelSetDepth.returnType = Type::FullType { VoidType.name };
    PixelSetDepth.parameters = PixelSetDepth_args;
    Symbol::Resolved(&PixelSetDepth_val)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelSetDepth)->signature = "pixelSetDepth(f32) void"_c;
    Symbol::Resolved(&PixelSetDepth)->name = "pixelSetDepth(f32)"_c;
    Symbol::Resolved(&PixelSetDepth)->nameWithVarNames = "pixelSetDepth(val : f32)"_c;
    Symbol::Resolved(&PixelSetDepth)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32, Int32
    PixelExportColor_Float32_Int32_color.name = "color"_c;
    PixelExportColor_Float32_Int32_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_Int32_index.name = "index"_c;
    PixelExportColor_Float32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32_Int32_index.type.literal = true;
    PixelExportColor_Float32_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32_Int32.name = PixelExportColor_Float32_Int32_name;
    PixelExportColor_Float32_Int32.backendIndex = 1878;
    PixelExportColor_Float32_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32_Int32.parameters = PixelExportColor_Float32_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float32_Int32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int32)->signature = "pixelExportColor(f32,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32_Int32)->name = "pixelExportColor(f32,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_Int32)->nameWithVarNames = "pixelExportColor(color : f32, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32, UInt32
    PixelExportColor_Float32_UInt32_color.name = "color"_c;
    PixelExportColor_Float32_UInt32_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_UInt32_index.name = "index"_c;
    PixelExportColor_Float32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32_UInt32_index.type.literal = true;
    PixelExportColor_Float32_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32_UInt32.name = PixelExportColor_Float32_UInt32_name;
    PixelExportColor_Float32_UInt32.backendIndex = 1879;
    PixelExportColor_Float32_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32_UInt32.parameters = PixelExportColor_Float32_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32)->signature = "pixelExportColor(f32,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32)->name = "pixelExportColor(f32,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32)->nameWithVarNames = "pixelExportColor(color : f32, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32, Int16
    PixelExportColor_Float32_Int16_color.name = "color"_c;
    PixelExportColor_Float32_Int16_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_Int16_index.name = "index"_c;
    PixelExportColor_Float32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32_Int16_index.type.literal = true;
    PixelExportColor_Float32_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32_Int16.name = PixelExportColor_Float32_Int16_name;
    PixelExportColor_Float32_Int16.backendIndex = 1880;
    PixelExportColor_Float32_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32_Int16.parameters = PixelExportColor_Float32_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float32_Int16_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int16)->signature = "pixelExportColor(f32,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32_Int16)->name = "pixelExportColor(f32,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_Int16)->nameWithVarNames = "pixelExportColor(color : f32, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32, UInt16
    PixelExportColor_Float32_UInt16_color.name = "color"_c;
    PixelExportColor_Float32_UInt16_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_UInt16_index.name = "index"_c;
    PixelExportColor_Float32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32_UInt16_index.type.literal = true;
    PixelExportColor_Float32_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32_UInt16.name = PixelExportColor_Float32_UInt16_name;
    PixelExportColor_Float32_UInt16.backendIndex = 1881;
    PixelExportColor_Float32_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32_UInt16.parameters = PixelExportColor_Float32_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16)->signature = "pixelExportColor(f32,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16)->name = "pixelExportColor(f32,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16)->nameWithVarNames = "pixelExportColor(color : f32, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x2, Int32
    PixelExportColor_Float32x2_Int32_color.name = "color"_c;
    PixelExportColor_Float32x2_Int32_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_Int32_index.name = "index"_c;
    PixelExportColor_Float32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x2_Int32_index.type.literal = true;
    PixelExportColor_Float32x2_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x2_Int32.name = PixelExportColor_Float32x2_Int32_name;
    PixelExportColor_Float32x2_Int32.backendIndex = 1882;
    PixelExportColor_Float32x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x2_Int32.parameters = PixelExportColor_Float32x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32)->signature = "pixelExportColor(f32x2,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32)->name = "pixelExportColor(f32x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32)->nameWithVarNames = "pixelExportColor(color : f32x2, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x2, UInt32
    PixelExportColor_Float32x2_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x2_UInt32_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x2_UInt32_index.type.literal = true;
    PixelExportColor_Float32x2_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x2_UInt32.name = PixelExportColor_Float32x2_UInt32_name;
    PixelExportColor_Float32x2_UInt32.backendIndex = 1883;
    PixelExportColor_Float32x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x2_UInt32.parameters = PixelExportColor_Float32x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32)->signature = "pixelExportColor(f32x2,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32)->name = "pixelExportColor(f32x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32)->nameWithVarNames = "pixelExportColor(color : f32x2, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x2, Int16
    PixelExportColor_Float32x2_Int16_color.name = "color"_c;
    PixelExportColor_Float32x2_Int16_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_Int16_index.name = "index"_c;
    PixelExportColor_Float32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x2_Int16_index.type.literal = true;
    PixelExportColor_Float32x2_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x2_Int16.name = PixelExportColor_Float32x2_Int16_name;
    PixelExportColor_Float32x2_Int16.backendIndex = 1884;
    PixelExportColor_Float32x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x2_Int16.parameters = PixelExportColor_Float32x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16)->signature = "pixelExportColor(f32x2,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16)->name = "pixelExportColor(f32x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16)->nameWithVarNames = "pixelExportColor(color : f32x2, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x2, UInt16
    PixelExportColor_Float32x2_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x2_UInt16_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x2_UInt16_index.type.literal = true;
    PixelExportColor_Float32x2_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x2_UInt16.name = PixelExportColor_Float32x2_UInt16_name;
    PixelExportColor_Float32x2_UInt16.backendIndex = 1885;
    PixelExportColor_Float32x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x2_UInt16.parameters = PixelExportColor_Float32x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16)->signature = "pixelExportColor(f32x2,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16)->name = "pixelExportColor(f32x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16)->nameWithVarNames = "pixelExportColor(color : f32x2, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x3, Int32
    PixelExportColor_Float32x3_Int32_color.name = "color"_c;
    PixelExportColor_Float32x3_Int32_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_Int32_index.name = "index"_c;
    PixelExportColor_Float32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x3_Int32_index.type.literal = true;
    PixelExportColor_Float32x3_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x3_Int32.name = PixelExportColor_Float32x3_Int32_name;
    PixelExportColor_Float32x3_Int32.backendIndex = 1886;
    PixelExportColor_Float32x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x3_Int32.parameters = PixelExportColor_Float32x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32)->signature = "pixelExportColor(f32x3,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32)->name = "pixelExportColor(f32x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32)->nameWithVarNames = "pixelExportColor(color : f32x3, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x3, UInt32
    PixelExportColor_Float32x3_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x3_UInt32_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x3_UInt32_index.type.literal = true;
    PixelExportColor_Float32x3_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x3_UInt32.name = PixelExportColor_Float32x3_UInt32_name;
    PixelExportColor_Float32x3_UInt32.backendIndex = 1887;
    PixelExportColor_Float32x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x3_UInt32.parameters = PixelExportColor_Float32x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32)->signature = "pixelExportColor(f32x3,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32)->name = "pixelExportColor(f32x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32)->nameWithVarNames = "pixelExportColor(color : f32x3, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x3, Int16
    PixelExportColor_Float32x3_Int16_color.name = "color"_c;
    PixelExportColor_Float32x3_Int16_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_Int16_index.name = "index"_c;
    PixelExportColor_Float32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x3_Int16_index.type.literal = true;
    PixelExportColor_Float32x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x3_Int16.name = PixelExportColor_Float32x3_Int16_name;
    PixelExportColor_Float32x3_Int16.backendIndex = 1888;
    PixelExportColor_Float32x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x3_Int16.parameters = PixelExportColor_Float32x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16)->signature = "pixelExportColor(f32x3,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16)->name = "pixelExportColor(f32x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16)->nameWithVarNames = "pixelExportColor(color : f32x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x3, UInt16
    PixelExportColor_Float32x3_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x3_UInt16_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x3_UInt16_index.type.literal = true;
    PixelExportColor_Float32x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x3_UInt16.name = PixelExportColor_Float32x3_UInt16_name;
    PixelExportColor_Float32x3_UInt16.backendIndex = 1889;
    PixelExportColor_Float32x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x3_UInt16.parameters = PixelExportColor_Float32x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16)->signature = "pixelExportColor(f32x3,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16)->name = "pixelExportColor(f32x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16)->nameWithVarNames = "pixelExportColor(color : f32x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x4, Int32
    PixelExportColor_Float32x4_Int32_color.name = "color"_c;
    PixelExportColor_Float32x4_Int32_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_Int32_index.name = "index"_c;
    PixelExportColor_Float32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x4_Int32_index.type.literal = true;
    PixelExportColor_Float32x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x4_Int32.name = PixelExportColor_Float32x4_Int32_name;
    PixelExportColor_Float32x4_Int32.backendIndex = 1890;
    PixelExportColor_Float32x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x4_Int32.parameters = PixelExportColor_Float32x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32)->signature = "pixelExportColor(f32x4,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32)->name = "pixelExportColor(f32x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32)->nameWithVarNames = "pixelExportColor(color : f32x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x4, UInt32
    PixelExportColor_Float32x4_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x4_UInt32_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x4_UInt32_index.type.literal = true;
    PixelExportColor_Float32x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x4_UInt32.name = PixelExportColor_Float32x4_UInt32_name;
    PixelExportColor_Float32x4_UInt32.backendIndex = 1891;
    PixelExportColor_Float32x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x4_UInt32.parameters = PixelExportColor_Float32x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32)->signature = "pixelExportColor(f32x4,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32)->name = "pixelExportColor(f32x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32)->nameWithVarNames = "pixelExportColor(color : f32x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x4, Int16
    PixelExportColor_Float32x4_Int16_color.name = "color"_c;
    PixelExportColor_Float32x4_Int16_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_Int16_index.name = "index"_c;
    PixelExportColor_Float32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x4_Int16_index.type.literal = true;
    PixelExportColor_Float32x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x4_Int16.name = PixelExportColor_Float32x4_Int16_name;
    PixelExportColor_Float32x4_Int16.backendIndex = 1892;
    PixelExportColor_Float32x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x4_Int16.parameters = PixelExportColor_Float32x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16)->signature = "pixelExportColor(f32x4,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16)->name = "pixelExportColor(f32x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16)->nameWithVarNames = "pixelExportColor(color : f32x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x4, UInt16
    PixelExportColor_Float32x4_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x4_UInt16_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x4_UInt16_index.type.literal = true;
    PixelExportColor_Float32x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x4_UInt16.name = PixelExportColor_Float32x4_UInt16_name;
    PixelExportColor_Float32x4_UInt16.backendIndex = 1893;
    PixelExportColor_Float32x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x4_UInt16.parameters = PixelExportColor_Float32x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16)->signature = "pixelExportColor(f32x4,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16)->name = "pixelExportColor(f32x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16)->nameWithVarNames = "pixelExportColor(color : f32x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16, Int32
    PixelExportColor_Float16_Int32_color.name = "color"_c;
    PixelExportColor_Float16_Int32_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_Int32_index.name = "index"_c;
    PixelExportColor_Float16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16_Int32_index.type.literal = true;
    PixelExportColor_Float16_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16_Int32.name = PixelExportColor_Float16_Int32_name;
    PixelExportColor_Float16_Int32.backendIndex = 1894;
    PixelExportColor_Float16_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16_Int32.parameters = PixelExportColor_Float16_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float16_Int32_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int32)->signature = "pixelExportColor(f16,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16_Int32)->name = "pixelExportColor(f16,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_Int32)->nameWithVarNames = "pixelExportColor(color : f16, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16, UInt32
    PixelExportColor_Float16_UInt32_color.name = "color"_c;
    PixelExportColor_Float16_UInt32_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_UInt32_index.name = "index"_c;
    PixelExportColor_Float16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16_UInt32_index.type.literal = true;
    PixelExportColor_Float16_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16_UInt32.name = PixelExportColor_Float16_UInt32_name;
    PixelExportColor_Float16_UInt32.backendIndex = 1895;
    PixelExportColor_Float16_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16_UInt32.parameters = PixelExportColor_Float16_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32)->signature = "pixelExportColor(f16,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32)->name = "pixelExportColor(f16,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32)->nameWithVarNames = "pixelExportColor(color : f16, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16, Int16
    PixelExportColor_Float16_Int16_color.name = "color"_c;
    PixelExportColor_Float16_Int16_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_Int16_index.name = "index"_c;
    PixelExportColor_Float16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16_Int16_index.type.literal = true;
    PixelExportColor_Float16_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16_Int16.name = PixelExportColor_Float16_Int16_name;
    PixelExportColor_Float16_Int16.backendIndex = 1896;
    PixelExportColor_Float16_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16_Int16.parameters = PixelExportColor_Float16_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float16_Int16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int16)->signature = "pixelExportColor(f16,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16_Int16)->name = "pixelExportColor(f16,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_Int16)->nameWithVarNames = "pixelExportColor(color : f16, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16, UInt16
    PixelExportColor_Float16_UInt16_color.name = "color"_c;
    PixelExportColor_Float16_UInt16_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_UInt16_index.name = "index"_c;
    PixelExportColor_Float16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16_UInt16_index.type.literal = true;
    PixelExportColor_Float16_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16_UInt16.name = PixelExportColor_Float16_UInt16_name;
    PixelExportColor_Float16_UInt16.backendIndex = 1897;
    PixelExportColor_Float16_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16_UInt16.parameters = PixelExportColor_Float16_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16)->signature = "pixelExportColor(f16,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16)->name = "pixelExportColor(f16,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16)->nameWithVarNames = "pixelExportColor(color : f16, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x2, Int32
    PixelExportColor_Float16x2_Int32_color.name = "color"_c;
    PixelExportColor_Float16x2_Int32_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_Int32_index.name = "index"_c;
    PixelExportColor_Float16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x2_Int32_index.type.literal = true;
    PixelExportColor_Float16x2_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x2_Int32.name = PixelExportColor_Float16x2_Int32_name;
    PixelExportColor_Float16x2_Int32.backendIndex = 1898;
    PixelExportColor_Float16x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x2_Int32.parameters = PixelExportColor_Float16x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32)->signature = "pixelExportColor(f16x2,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32)->name = "pixelExportColor(f16x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32)->nameWithVarNames = "pixelExportColor(color : f16x2, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x2, UInt32
    PixelExportColor_Float16x2_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x2_UInt32_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x2_UInt32_index.type.literal = true;
    PixelExportColor_Float16x2_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x2_UInt32.name = PixelExportColor_Float16x2_UInt32_name;
    PixelExportColor_Float16x2_UInt32.backendIndex = 1899;
    PixelExportColor_Float16x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x2_UInt32.parameters = PixelExportColor_Float16x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32)->signature = "pixelExportColor(f16x2,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32)->name = "pixelExportColor(f16x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32)->nameWithVarNames = "pixelExportColor(color : f16x2, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x2, Int16
    PixelExportColor_Float16x2_Int16_color.name = "color"_c;
    PixelExportColor_Float16x2_Int16_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_Int16_index.name = "index"_c;
    PixelExportColor_Float16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x2_Int16_index.type.literal = true;
    PixelExportColor_Float16x2_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x2_Int16.name = PixelExportColor_Float16x2_Int16_name;
    PixelExportColor_Float16x2_Int16.backendIndex = 1900;
    PixelExportColor_Float16x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x2_Int16.parameters = PixelExportColor_Float16x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16)->signature = "pixelExportColor(f16x2,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16)->name = "pixelExportColor(f16x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16)->nameWithVarNames = "pixelExportColor(color : f16x2, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x2, UInt16
    PixelExportColor_Float16x2_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x2_UInt16_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x2_UInt16_index.type.literal = true;
    PixelExportColor_Float16x2_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x2_UInt16.name = PixelExportColor_Float16x2_UInt16_name;
    PixelExportColor_Float16x2_UInt16.backendIndex = 1901;
    PixelExportColor_Float16x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x2_UInt16.parameters = PixelExportColor_Float16x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16)->signature = "pixelExportColor(f16x2,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16)->name = "pixelExportColor(f16x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16)->nameWithVarNames = "pixelExportColor(color : f16x2, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x3, Int32
    PixelExportColor_Float16x3_Int32_color.name = "color"_c;
    PixelExportColor_Float16x3_Int32_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_Int32_index.name = "index"_c;
    PixelExportColor_Float16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x3_Int32_index.type.literal = true;
    PixelExportColor_Float16x3_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x3_Int32.name = PixelExportColor_Float16x3_Int32_name;
    PixelExportColor_Float16x3_Int32.backendIndex = 1902;
    PixelExportColor_Float16x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x3_Int32.parameters = PixelExportColor_Float16x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32)->signature = "pixelExportColor(f16x3,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32)->name = "pixelExportColor(f16x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32)->nameWithVarNames = "pixelExportColor(color : f16x3, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x3, UInt32
    PixelExportColor_Float16x3_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x3_UInt32_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x3_UInt32_index.type.literal = true;
    PixelExportColor_Float16x3_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x3_UInt32.name = PixelExportColor_Float16x3_UInt32_name;
    PixelExportColor_Float16x3_UInt32.backendIndex = 1903;
    PixelExportColor_Float16x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x3_UInt32.parameters = PixelExportColor_Float16x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32)->signature = "pixelExportColor(f16x3,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32)->name = "pixelExportColor(f16x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32)->nameWithVarNames = "pixelExportColor(color : f16x3, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x3, Int16
    PixelExportColor_Float16x3_Int16_color.name = "color"_c;
    PixelExportColor_Float16x3_Int16_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_Int16_index.name = "index"_c;
    PixelExportColor_Float16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x3_Int16_index.type.literal = true;
    PixelExportColor_Float16x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x3_Int16.name = PixelExportColor_Float16x3_Int16_name;
    PixelExportColor_Float16x3_Int16.backendIndex = 1904;
    PixelExportColor_Float16x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x3_Int16.parameters = PixelExportColor_Float16x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16)->signature = "pixelExportColor(f16x3,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16)->name = "pixelExportColor(f16x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16)->nameWithVarNames = "pixelExportColor(color : f16x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x3, UInt16
    PixelExportColor_Float16x3_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x3_UInt16_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x3_UInt16_index.type.literal = true;
    PixelExportColor_Float16x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x3_UInt16.name = PixelExportColor_Float16x3_UInt16_name;
    PixelExportColor_Float16x3_UInt16.backendIndex = 1905;
    PixelExportColor_Float16x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x3_UInt16.parameters = PixelExportColor_Float16x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16)->signature = "pixelExportColor(f16x3,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16)->name = "pixelExportColor(f16x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16)->nameWithVarNames = "pixelExportColor(color : f16x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x4, Int32
    PixelExportColor_Float16x4_Int32_color.name = "color"_c;
    PixelExportColor_Float16x4_Int32_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_Int32_index.name = "index"_c;
    PixelExportColor_Float16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x4_Int32_index.type.literal = true;
    PixelExportColor_Float16x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x4_Int32.name = PixelExportColor_Float16x4_Int32_name;
    PixelExportColor_Float16x4_Int32.backendIndex = 1906;
    PixelExportColor_Float16x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x4_Int32.parameters = PixelExportColor_Float16x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32)->signature = "pixelExportColor(f16x4,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32)->name = "pixelExportColor(f16x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32)->nameWithVarNames = "pixelExportColor(color : f16x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x4, UInt32
    PixelExportColor_Float16x4_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x4_UInt32_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x4_UInt32_index.type.literal = true;
    PixelExportColor_Float16x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x4_UInt32.name = PixelExportColor_Float16x4_UInt32_name;
    PixelExportColor_Float16x4_UInt32.backendIndex = 1907;
    PixelExportColor_Float16x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x4_UInt32.parameters = PixelExportColor_Float16x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32)->signature = "pixelExportColor(f16x4,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32)->name = "pixelExportColor(f16x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32)->nameWithVarNames = "pixelExportColor(color : f16x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x4, Int16
    PixelExportColor_Float16x4_Int16_color.name = "color"_c;
    PixelExportColor_Float16x4_Int16_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_Int16_index.name = "index"_c;
    PixelExportColor_Float16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x4_Int16_index.type.literal = true;
    PixelExportColor_Float16x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x4_Int16.name = PixelExportColor_Float16x4_Int16_name;
    PixelExportColor_Float16x4_Int16.backendIndex = 1908;
    PixelExportColor_Float16x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x4_Int16.parameters = PixelExportColor_Float16x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16)->signature = "pixelExportColor(f16x4,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16)->name = "pixelExportColor(f16x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16)->nameWithVarNames = "pixelExportColor(color : f16x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x4, UInt16
    PixelExportColor_Float16x4_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x4_UInt16_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x4_UInt16_index.type.literal = true;
    PixelExportColor_Float16x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x4_UInt16.name = PixelExportColor_Float16x4_UInt16_name;
    PixelExportColor_Float16x4_UInt16.backendIndex = 1909;
    PixelExportColor_Float16x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x4_UInt16.parameters = PixelExportColor_Float16x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16)->signature = "pixelExportColor(f16x4,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16)->name = "pixelExportColor(f16x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16)->nameWithVarNames = "pixelExportColor(color : f16x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32, Int32
    PixelExportColor_Int32_Int32_color.name = "color"_c;
    PixelExportColor_Int32_Int32_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int32_index.name = "index"_c;
    PixelExportColor_Int32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int32_index.type.literal = true;
    PixelExportColor_Int32_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32_Int32.name = PixelExportColor_Int32_Int32_name;
    PixelExportColor_Int32_Int32.backendIndex = 1910;
    PixelExportColor_Int32_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32_Int32.parameters = PixelExportColor_Int32_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int32_Int32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int32)->signature = "pixelExportColor(i32,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32_Int32)->name = "pixelExportColor(i32,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_Int32)->nameWithVarNames = "pixelExportColor(color : i32, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32, UInt32
    PixelExportColor_Int32_UInt32_color.name = "color"_c;
    PixelExportColor_Int32_UInt32_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_UInt32_index.name = "index"_c;
    PixelExportColor_Int32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32_UInt32_index.type.literal = true;
    PixelExportColor_Int32_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32_UInt32.name = PixelExportColor_Int32_UInt32_name;
    PixelExportColor_Int32_UInt32.backendIndex = 1911;
    PixelExportColor_Int32_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32_UInt32.parameters = PixelExportColor_Int32_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32)->signature = "pixelExportColor(i32,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32)->name = "pixelExportColor(i32,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32)->nameWithVarNames = "pixelExportColor(color : i32, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32, Int16
    PixelExportColor_Int32_Int16_color.name = "color"_c;
    PixelExportColor_Int32_Int16_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int16_index.name = "index"_c;
    PixelExportColor_Int32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32_Int16_index.type.literal = true;
    PixelExportColor_Int32_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32_Int16.name = PixelExportColor_Int32_Int16_name;
    PixelExportColor_Int32_Int16.backendIndex = 1912;
    PixelExportColor_Int32_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32_Int16.parameters = PixelExportColor_Int32_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int32_Int16_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int16)->signature = "pixelExportColor(i32,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32_Int16)->name = "pixelExportColor(i32,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_Int16)->nameWithVarNames = "pixelExportColor(color : i32, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32, UInt16
    PixelExportColor_Int32_UInt16_color.name = "color"_c;
    PixelExportColor_Int32_UInt16_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_UInt16_index.name = "index"_c;
    PixelExportColor_Int32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32_UInt16_index.type.literal = true;
    PixelExportColor_Int32_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32_UInt16.name = PixelExportColor_Int32_UInt16_name;
    PixelExportColor_Int32_UInt16.backendIndex = 1913;
    PixelExportColor_Int32_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32_UInt16.parameters = PixelExportColor_Int32_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16)->signature = "pixelExportColor(i32,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16)->name = "pixelExportColor(i32,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16)->nameWithVarNames = "pixelExportColor(color : i32, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x2, Int32
    PixelExportColor_Int32x2_Int32_color.name = "color"_c;
    PixelExportColor_Int32x2_Int32_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_Int32_index.name = "index"_c;
    PixelExportColor_Int32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x2_Int32_index.type.literal = true;
    PixelExportColor_Int32x2_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x2_Int32.name = PixelExportColor_Int32x2_Int32_name;
    PixelExportColor_Int32x2_Int32.backendIndex = 1914;
    PixelExportColor_Int32x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x2_Int32.parameters = PixelExportColor_Int32x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32)->signature = "pixelExportColor(i32x2,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32)->name = "pixelExportColor(i32x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32)->nameWithVarNames = "pixelExportColor(color : i32x2, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x2, UInt32
    PixelExportColor_Int32x2_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x2_UInt32_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x2_UInt32_index.type.literal = true;
    PixelExportColor_Int32x2_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x2_UInt32.name = PixelExportColor_Int32x2_UInt32_name;
    PixelExportColor_Int32x2_UInt32.backendIndex = 1915;
    PixelExportColor_Int32x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x2_UInt32.parameters = PixelExportColor_Int32x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32)->signature = "pixelExportColor(i32x2,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32)->name = "pixelExportColor(i32x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32)->nameWithVarNames = "pixelExportColor(color : i32x2, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x2, Int16
    PixelExportColor_Int32x2_Int16_color.name = "color"_c;
    PixelExportColor_Int32x2_Int16_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_Int16_index.name = "index"_c;
    PixelExportColor_Int32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x2_Int16_index.type.literal = true;
    PixelExportColor_Int32x2_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x2_Int16.name = PixelExportColor_Int32x2_Int16_name;
    PixelExportColor_Int32x2_Int16.backendIndex = 1916;
    PixelExportColor_Int32x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x2_Int16.parameters = PixelExportColor_Int32x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16)->signature = "pixelExportColor(i32x2,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16)->name = "pixelExportColor(i32x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16)->nameWithVarNames = "pixelExportColor(color : i32x2, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x2, UInt16
    PixelExportColor_Int32x2_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x2_UInt16_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x2_UInt16_index.type.literal = true;
    PixelExportColor_Int32x2_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x2_UInt16.name = PixelExportColor_Int32x2_UInt16_name;
    PixelExportColor_Int32x2_UInt16.backendIndex = 1917;
    PixelExportColor_Int32x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x2_UInt16.parameters = PixelExportColor_Int32x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16)->signature = "pixelExportColor(i32x2,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16)->name = "pixelExportColor(i32x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16)->nameWithVarNames = "pixelExportColor(color : i32x2, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x3, Int32
    PixelExportColor_Int32x3_Int32_color.name = "color"_c;
    PixelExportColor_Int32x3_Int32_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_Int32_index.name = "index"_c;
    PixelExportColor_Int32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x3_Int32_index.type.literal = true;
    PixelExportColor_Int32x3_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x3_Int32.name = PixelExportColor_Int32x3_Int32_name;
    PixelExportColor_Int32x3_Int32.backendIndex = 1918;
    PixelExportColor_Int32x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x3_Int32.parameters = PixelExportColor_Int32x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32)->signature = "pixelExportColor(i32x3,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32)->name = "pixelExportColor(i32x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32)->nameWithVarNames = "pixelExportColor(color : i32x3, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x3, UInt32
    PixelExportColor_Int32x3_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x3_UInt32_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x3_UInt32_index.type.literal = true;
    PixelExportColor_Int32x3_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x3_UInt32.name = PixelExportColor_Int32x3_UInt32_name;
    PixelExportColor_Int32x3_UInt32.backendIndex = 1919;
    PixelExportColor_Int32x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x3_UInt32.parameters = PixelExportColor_Int32x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32)->signature = "pixelExportColor(i32x3,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32)->name = "pixelExportColor(i32x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32)->nameWithVarNames = "pixelExportColor(color : i32x3, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x3, Int16
    PixelExportColor_Int32x3_Int16_color.name = "color"_c;
    PixelExportColor_Int32x3_Int16_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_Int16_index.name = "index"_c;
    PixelExportColor_Int32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x3_Int16_index.type.literal = true;
    PixelExportColor_Int32x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x3_Int16.name = PixelExportColor_Int32x3_Int16_name;
    PixelExportColor_Int32x3_Int16.backendIndex = 1920;
    PixelExportColor_Int32x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x3_Int16.parameters = PixelExportColor_Int32x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16)->signature = "pixelExportColor(i32x3,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16)->name = "pixelExportColor(i32x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16)->nameWithVarNames = "pixelExportColor(color : i32x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x3, UInt16
    PixelExportColor_Int32x3_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x3_UInt16_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x3_UInt16_index.type.literal = true;
    PixelExportColor_Int32x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x3_UInt16.name = PixelExportColor_Int32x3_UInt16_name;
    PixelExportColor_Int32x3_UInt16.backendIndex = 1921;
    PixelExportColor_Int32x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x3_UInt16.parameters = PixelExportColor_Int32x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16)->signature = "pixelExportColor(i32x3,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16)->name = "pixelExportColor(i32x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16)->nameWithVarNames = "pixelExportColor(color : i32x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x4, Int32
    PixelExportColor_Int32x4_Int32_color.name = "color"_c;
    PixelExportColor_Int32x4_Int32_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_Int32_index.name = "index"_c;
    PixelExportColor_Int32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x4_Int32_index.type.literal = true;
    PixelExportColor_Int32x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x4_Int32.name = PixelExportColor_Int32x4_Int32_name;
    PixelExportColor_Int32x4_Int32.backendIndex = 1922;
    PixelExportColor_Int32x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x4_Int32.parameters = PixelExportColor_Int32x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32)->signature = "pixelExportColor(i32x4,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32)->name = "pixelExportColor(i32x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32)->nameWithVarNames = "pixelExportColor(color : i32x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x4, UInt32
    PixelExportColor_Int32x4_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x4_UInt32_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x4_UInt32_index.type.literal = true;
    PixelExportColor_Int32x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x4_UInt32.name = PixelExportColor_Int32x4_UInt32_name;
    PixelExportColor_Int32x4_UInt32.backendIndex = 1923;
    PixelExportColor_Int32x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x4_UInt32.parameters = PixelExportColor_Int32x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32)->signature = "pixelExportColor(i32x4,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32)->name = "pixelExportColor(i32x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32)->nameWithVarNames = "pixelExportColor(color : i32x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x4, Int16
    PixelExportColor_Int32x4_Int16_color.name = "color"_c;
    PixelExportColor_Int32x4_Int16_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_Int16_index.name = "index"_c;
    PixelExportColor_Int32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x4_Int16_index.type.literal = true;
    PixelExportColor_Int32x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x4_Int16.name = PixelExportColor_Int32x4_Int16_name;
    PixelExportColor_Int32x4_Int16.backendIndex = 1924;
    PixelExportColor_Int32x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x4_Int16.parameters = PixelExportColor_Int32x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16)->signature = "pixelExportColor(i32x4,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16)->name = "pixelExportColor(i32x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16)->nameWithVarNames = "pixelExportColor(color : i32x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x4, UInt16
    PixelExportColor_Int32x4_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x4_UInt16_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x4_UInt16_index.type.literal = true;
    PixelExportColor_Int32x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x4_UInt16.name = PixelExportColor_Int32x4_UInt16_name;
    PixelExportColor_Int32x4_UInt16.backendIndex = 1925;
    PixelExportColor_Int32x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x4_UInt16.parameters = PixelExportColor_Int32x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16)->signature = "pixelExportColor(i32x4,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16)->name = "pixelExportColor(i32x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16)->nameWithVarNames = "pixelExportColor(color : i32x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16, Int32
    PixelExportColor_Int16_Int32_color.name = "color"_c;
    PixelExportColor_Int16_Int32_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int32_index.name = "index"_c;
    PixelExportColor_Int16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16_Int32_index.type.literal = true;
    PixelExportColor_Int16_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16_Int32.name = PixelExportColor_Int16_Int32_name;
    PixelExportColor_Int16_Int32.backendIndex = 1926;
    PixelExportColor_Int16_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16_Int32.parameters = PixelExportColor_Int16_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int16_Int32_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int32)->signature = "pixelExportColor(i16,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16_Int32)->name = "pixelExportColor(i16,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_Int32)->nameWithVarNames = "pixelExportColor(color : i16, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16, UInt32
    PixelExportColor_Int16_UInt32_color.name = "color"_c;
    PixelExportColor_Int16_UInt32_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_UInt32_index.name = "index"_c;
    PixelExportColor_Int16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16_UInt32_index.type.literal = true;
    PixelExportColor_Int16_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16_UInt32.name = PixelExportColor_Int16_UInt32_name;
    PixelExportColor_Int16_UInt32.backendIndex = 1927;
    PixelExportColor_Int16_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16_UInt32.parameters = PixelExportColor_Int16_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32)->signature = "pixelExportColor(i16,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32)->name = "pixelExportColor(i16,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32)->nameWithVarNames = "pixelExportColor(color : i16, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16, Int16
    PixelExportColor_Int16_Int16_color.name = "color"_c;
    PixelExportColor_Int16_Int16_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int16_index.name = "index"_c;
    PixelExportColor_Int16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int16_index.type.literal = true;
    PixelExportColor_Int16_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16_Int16.name = PixelExportColor_Int16_Int16_name;
    PixelExportColor_Int16_Int16.backendIndex = 1928;
    PixelExportColor_Int16_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16_Int16.parameters = PixelExportColor_Int16_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int16_Int16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int16)->signature = "pixelExportColor(i16,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16_Int16)->name = "pixelExportColor(i16,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_Int16)->nameWithVarNames = "pixelExportColor(color : i16, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16, UInt16
    PixelExportColor_Int16_UInt16_color.name = "color"_c;
    PixelExportColor_Int16_UInt16_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_UInt16_index.name = "index"_c;
    PixelExportColor_Int16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16_UInt16_index.type.literal = true;
    PixelExportColor_Int16_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16_UInt16.name = PixelExportColor_Int16_UInt16_name;
    PixelExportColor_Int16_UInt16.backendIndex = 1929;
    PixelExportColor_Int16_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16_UInt16.parameters = PixelExportColor_Int16_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16)->signature = "pixelExportColor(i16,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16)->name = "pixelExportColor(i16,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16)->nameWithVarNames = "pixelExportColor(color : i16, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x2, Int32
    PixelExportColor_Int16x2_Int32_color.name = "color"_c;
    PixelExportColor_Int16x2_Int32_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_Int32_index.name = "index"_c;
    PixelExportColor_Int16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x2_Int32_index.type.literal = true;
    PixelExportColor_Int16x2_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x2_Int32.name = PixelExportColor_Int16x2_Int32_name;
    PixelExportColor_Int16x2_Int32.backendIndex = 1930;
    PixelExportColor_Int16x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x2_Int32.parameters = PixelExportColor_Int16x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32)->signature = "pixelExportColor(i16x2,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32)->name = "pixelExportColor(i16x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32)->nameWithVarNames = "pixelExportColor(color : i16x2, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x2, UInt32
    PixelExportColor_Int16x2_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x2_UInt32_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x2_UInt32_index.type.literal = true;
    PixelExportColor_Int16x2_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x2_UInt32.name = PixelExportColor_Int16x2_UInt32_name;
    PixelExportColor_Int16x2_UInt32.backendIndex = 1931;
    PixelExportColor_Int16x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x2_UInt32.parameters = PixelExportColor_Int16x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32)->signature = "pixelExportColor(i16x2,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32)->name = "pixelExportColor(i16x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32)->nameWithVarNames = "pixelExportColor(color : i16x2, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x2, Int16
    PixelExportColor_Int16x2_Int16_color.name = "color"_c;
    PixelExportColor_Int16x2_Int16_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_Int16_index.name = "index"_c;
    PixelExportColor_Int16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x2_Int16_index.type.literal = true;
    PixelExportColor_Int16x2_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x2_Int16.name = PixelExportColor_Int16x2_Int16_name;
    PixelExportColor_Int16x2_Int16.backendIndex = 1932;
    PixelExportColor_Int16x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x2_Int16.parameters = PixelExportColor_Int16x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16)->signature = "pixelExportColor(i16x2,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16)->name = "pixelExportColor(i16x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16)->nameWithVarNames = "pixelExportColor(color : i16x2, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x2, UInt16
    PixelExportColor_Int16x2_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x2_UInt16_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x2_UInt16_index.type.literal = true;
    PixelExportColor_Int16x2_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x2_UInt16.name = PixelExportColor_Int16x2_UInt16_name;
    PixelExportColor_Int16x2_UInt16.backendIndex = 1933;
    PixelExportColor_Int16x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x2_UInt16.parameters = PixelExportColor_Int16x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16)->signature = "pixelExportColor(i16x2,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16)->name = "pixelExportColor(i16x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16)->nameWithVarNames = "pixelExportColor(color : i16x2, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x3, Int32
    PixelExportColor_Int16x3_Int32_color.name = "color"_c;
    PixelExportColor_Int16x3_Int32_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_Int32_index.name = "index"_c;
    PixelExportColor_Int16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x3_Int32_index.type.literal = true;
    PixelExportColor_Int16x3_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x3_Int32.name = PixelExportColor_Int16x3_Int32_name;
    PixelExportColor_Int16x3_Int32.backendIndex = 1934;
    PixelExportColor_Int16x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x3_Int32.parameters = PixelExportColor_Int16x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32)->signature = "pixelExportColor(i16x3,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32)->name = "pixelExportColor(i16x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32)->nameWithVarNames = "pixelExportColor(color : i16x3, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x3, UInt32
    PixelExportColor_Int16x3_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x3_UInt32_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x3_UInt32_index.type.literal = true;
    PixelExportColor_Int16x3_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x3_UInt32.name = PixelExportColor_Int16x3_UInt32_name;
    PixelExportColor_Int16x3_UInt32.backendIndex = 1935;
    PixelExportColor_Int16x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x3_UInt32.parameters = PixelExportColor_Int16x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32)->signature = "pixelExportColor(i16x3,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32)->name = "pixelExportColor(i16x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32)->nameWithVarNames = "pixelExportColor(color : i16x3, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x3, Int16
    PixelExportColor_Int16x3_Int16_color.name = "color"_c;
    PixelExportColor_Int16x3_Int16_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_Int16_index.name = "index"_c;
    PixelExportColor_Int16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x3_Int16_index.type.literal = true;
    PixelExportColor_Int16x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x3_Int16.name = PixelExportColor_Int16x3_Int16_name;
    PixelExportColor_Int16x3_Int16.backendIndex = 1936;
    PixelExportColor_Int16x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x3_Int16.parameters = PixelExportColor_Int16x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16)->signature = "pixelExportColor(i16x3,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16)->name = "pixelExportColor(i16x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16)->nameWithVarNames = "pixelExportColor(color : i16x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x3, UInt16
    PixelExportColor_Int16x3_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x3_UInt16_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x3_UInt16_index.type.literal = true;
    PixelExportColor_Int16x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x3_UInt16.name = PixelExportColor_Int16x3_UInt16_name;
    PixelExportColor_Int16x3_UInt16.backendIndex = 1937;
    PixelExportColor_Int16x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x3_UInt16.parameters = PixelExportColor_Int16x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16)->signature = "pixelExportColor(i16x3,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16)->name = "pixelExportColor(i16x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16)->nameWithVarNames = "pixelExportColor(color : i16x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x4, Int32
    PixelExportColor_Int16x4_Int32_color.name = "color"_c;
    PixelExportColor_Int16x4_Int32_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_Int32_index.name = "index"_c;
    PixelExportColor_Int16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x4_Int32_index.type.literal = true;
    PixelExportColor_Int16x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x4_Int32.name = PixelExportColor_Int16x4_Int32_name;
    PixelExportColor_Int16x4_Int32.backendIndex = 1938;
    PixelExportColor_Int16x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x4_Int32.parameters = PixelExportColor_Int16x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32)->signature = "pixelExportColor(i16x4,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32)->name = "pixelExportColor(i16x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32)->nameWithVarNames = "pixelExportColor(color : i16x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x4, UInt32
    PixelExportColor_Int16x4_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x4_UInt32_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x4_UInt32_index.type.literal = true;
    PixelExportColor_Int16x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x4_UInt32.name = PixelExportColor_Int16x4_UInt32_name;
    PixelExportColor_Int16x4_UInt32.backendIndex = 1939;
    PixelExportColor_Int16x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x4_UInt32.parameters = PixelExportColor_Int16x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32)->signature = "pixelExportColor(i16x4,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32)->name = "pixelExportColor(i16x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32)->nameWithVarNames = "pixelExportColor(color : i16x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x4, Int16
    PixelExportColor_Int16x4_Int16_color.name = "color"_c;
    PixelExportColor_Int16x4_Int16_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_Int16_index.name = "index"_c;
    PixelExportColor_Int16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x4_Int16_index.type.literal = true;
    PixelExportColor_Int16x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x4_Int16.name = PixelExportColor_Int16x4_Int16_name;
    PixelExportColor_Int16x4_Int16.backendIndex = 1940;
    PixelExportColor_Int16x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x4_Int16.parameters = PixelExportColor_Int16x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16)->signature = "pixelExportColor(i16x4,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16)->name = "pixelExportColor(i16x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16)->nameWithVarNames = "pixelExportColor(color : i16x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x4, UInt16
    PixelExportColor_Int16x4_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x4_UInt16_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x4_UInt16_index.type.literal = true;
    PixelExportColor_Int16x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x4_UInt16.name = PixelExportColor_Int16x4_UInt16_name;
    PixelExportColor_Int16x4_UInt16.backendIndex = 1941;
    PixelExportColor_Int16x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x4_UInt16.parameters = PixelExportColor_Int16x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16)->signature = "pixelExportColor(i16x4,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16)->name = "pixelExportColor(i16x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16)->nameWithVarNames = "pixelExportColor(color : i16x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32, Int32
    PixelExportColor_UInt32_Int32_color.name = "color"_c;
    PixelExportColor_UInt32_Int32_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_Int32_index.name = "index"_c;
    PixelExportColor_UInt32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32_Int32_index.type.literal = true;
    PixelExportColor_UInt32_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32_Int32.name = PixelExportColor_UInt32_Int32_name;
    PixelExportColor_UInt32_Int32.backendIndex = 1942;
    PixelExportColor_UInt32_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32_Int32.parameters = PixelExportColor_UInt32_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32)->signature = "pixelExportColor(u32,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32)->name = "pixelExportColor(u32,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32)->nameWithVarNames = "pixelExportColor(color : u32, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32, UInt32
    PixelExportColor_UInt32_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32_UInt32_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt32_index.type.literal = true;
    PixelExportColor_UInt32_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32_UInt32.name = PixelExportColor_UInt32_UInt32_name;
    PixelExportColor_UInt32_UInt32.backendIndex = 1943;
    PixelExportColor_UInt32_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32_UInt32.parameters = PixelExportColor_UInt32_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32)->signature = "pixelExportColor(u32,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32)->name = "pixelExportColor(u32,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32)->nameWithVarNames = "pixelExportColor(color : u32, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32, Int16
    PixelExportColor_UInt32_Int16_color.name = "color"_c;
    PixelExportColor_UInt32_Int16_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_Int16_index.name = "index"_c;
    PixelExportColor_UInt32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32_Int16_index.type.literal = true;
    PixelExportColor_UInt32_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32_Int16.name = PixelExportColor_UInt32_Int16_name;
    PixelExportColor_UInt32_Int16.backendIndex = 1944;
    PixelExportColor_UInt32_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32_Int16.parameters = PixelExportColor_UInt32_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16)->signature = "pixelExportColor(u32,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16)->name = "pixelExportColor(u32,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16)->nameWithVarNames = "pixelExportColor(color : u32, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32, UInt16
    PixelExportColor_UInt32_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32_UInt16_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32_UInt16_index.type.literal = true;
    PixelExportColor_UInt32_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32_UInt16.name = PixelExportColor_UInt32_UInt16_name;
    PixelExportColor_UInt32_UInt16.backendIndex = 1945;
    PixelExportColor_UInt32_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32_UInt16.parameters = PixelExportColor_UInt32_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16)->signature = "pixelExportColor(u32,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16)->name = "pixelExportColor(u32,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16)->nameWithVarNames = "pixelExportColor(color : u32, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x2, Int32
    PixelExportColor_UInt32x2_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x2_Int32_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x2_Int32_index.type.literal = true;
    PixelExportColor_UInt32x2_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x2_Int32.name = PixelExportColor_UInt32x2_Int32_name;
    PixelExportColor_UInt32x2_Int32.backendIndex = 1946;
    PixelExportColor_UInt32x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x2_Int32.parameters = PixelExportColor_UInt32x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32)->signature = "pixelExportColor(u32x2,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32)->name = "pixelExportColor(u32x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32)->nameWithVarNames = "pixelExportColor(color : u32x2, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x2, UInt32
    PixelExportColor_UInt32x2_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x2_UInt32_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x2_UInt32_index.type.literal = true;
    PixelExportColor_UInt32x2_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x2_UInt32.name = PixelExportColor_UInt32x2_UInt32_name;
    PixelExportColor_UInt32x2_UInt32.backendIndex = 1947;
    PixelExportColor_UInt32x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x2_UInt32.parameters = PixelExportColor_UInt32x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32)->signature = "pixelExportColor(u32x2,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32)->name = "pixelExportColor(u32x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32)->nameWithVarNames = "pixelExportColor(color : u32x2, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x2, Int16
    PixelExportColor_UInt32x2_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x2_Int16_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x2_Int16_index.type.literal = true;
    PixelExportColor_UInt32x2_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x2_Int16.name = PixelExportColor_UInt32x2_Int16_name;
    PixelExportColor_UInt32x2_Int16.backendIndex = 1948;
    PixelExportColor_UInt32x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x2_Int16.parameters = PixelExportColor_UInt32x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16)->signature = "pixelExportColor(u32x2,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16)->name = "pixelExportColor(u32x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16)->nameWithVarNames = "pixelExportColor(color : u32x2, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x2, UInt16
    PixelExportColor_UInt32x2_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x2_UInt16_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x2_UInt16_index.type.literal = true;
    PixelExportColor_UInt32x2_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x2_UInt16.name = PixelExportColor_UInt32x2_UInt16_name;
    PixelExportColor_UInt32x2_UInt16.backendIndex = 1949;
    PixelExportColor_UInt32x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x2_UInt16.parameters = PixelExportColor_UInt32x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16)->signature = "pixelExportColor(u32x2,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16)->name = "pixelExportColor(u32x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16)->nameWithVarNames = "pixelExportColor(color : u32x2, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, Int32
    PixelExportColor_UInt32x3_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x3_Int32_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x3_Int32_index.type.literal = true;
    PixelExportColor_UInt32x3_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x3_Int32.name = PixelExportColor_UInt32x3_Int32_name;
    PixelExportColor_UInt32x3_Int32.backendIndex = 1950;
    PixelExportColor_UInt32x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_Int32.parameters = PixelExportColor_UInt32x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32)->signature = "pixelExportColor(u32x3,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32)->name = "pixelExportColor(u32x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32)->nameWithVarNames = "pixelExportColor(color : u32x3, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, UInt32
    PixelExportColor_UInt32x3_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x3_UInt32_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x3_UInt32_index.type.literal = true;
    PixelExportColor_UInt32x3_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x3_UInt32.name = PixelExportColor_UInt32x3_UInt32_name;
    PixelExportColor_UInt32x3_UInt32.backendIndex = 1951;
    PixelExportColor_UInt32x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_UInt32.parameters = PixelExportColor_UInt32x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32)->signature = "pixelExportColor(u32x3,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32)->name = "pixelExportColor(u32x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32)->nameWithVarNames = "pixelExportColor(color : u32x3, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, Int16
    PixelExportColor_UInt32x3_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x3_Int16_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x3_Int16_index.type.literal = true;
    PixelExportColor_UInt32x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x3_Int16.name = PixelExportColor_UInt32x3_Int16_name;
    PixelExportColor_UInt32x3_Int16.backendIndex = 1952;
    PixelExportColor_UInt32x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_Int16.parameters = PixelExportColor_UInt32x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->signature = "pixelExportColor(u32x3,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->name = "pixelExportColor(u32x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->nameWithVarNames = "pixelExportColor(color : u32x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, UInt16
    PixelExportColor_UInt32x3_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x3_UInt16_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x3_UInt16_index.type.literal = true;
    PixelExportColor_UInt32x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x3_UInt16.name = PixelExportColor_UInt32x3_UInt16_name;
    PixelExportColor_UInt32x3_UInt16.backendIndex = 1953;
    PixelExportColor_UInt32x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_UInt16.parameters = PixelExportColor_UInt32x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->signature = "pixelExportColor(u32x3,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->name = "pixelExportColor(u32x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->nameWithVarNames = "pixelExportColor(color : u32x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, Int32
    PixelExportColor_UInt32x4_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x4_Int32_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x4_Int32_index.type.literal = true;
    PixelExportColor_UInt32x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x4_Int32.name = PixelExportColor_UInt32x4_Int32_name;
    PixelExportColor_UInt32x4_Int32.backendIndex = 1954;
    PixelExportColor_UInt32x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_Int32.parameters = PixelExportColor_UInt32x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->signature = "pixelExportColor(u32x4,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->name = "pixelExportColor(u32x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->nameWithVarNames = "pixelExportColor(color : u32x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, UInt32
    PixelExportColor_UInt32x4_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x4_UInt32_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x4_UInt32_index.type.literal = true;
    PixelExportColor_UInt32x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x4_UInt32.name = PixelExportColor_UInt32x4_UInt32_name;
    PixelExportColor_UInt32x4_UInt32.backendIndex = 1955;
    PixelExportColor_UInt32x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_UInt32.parameters = PixelExportColor_UInt32x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->signature = "pixelExportColor(u32x4,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->name = "pixelExportColor(u32x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->nameWithVarNames = "pixelExportColor(color : u32x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, Int16
    PixelExportColor_UInt32x4_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x4_Int16_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x4_Int16_index.type.literal = true;
    PixelExportColor_UInt32x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x4_Int16.name = PixelExportColor_UInt32x4_Int16_name;
    PixelExportColor_UInt32x4_Int16.backendIndex = 1956;
    PixelExportColor_UInt32x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_Int16.parameters = PixelExportColor_UInt32x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->signature = "pixelExportColor(u32x4,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->name = "pixelExportColor(u32x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->nameWithVarNames = "pixelExportColor(color : u32x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, UInt16
    PixelExportColor_UInt32x4_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x4_UInt16_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x4_UInt16_index.type.literal = true;
    PixelExportColor_UInt32x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x4_UInt16.name = PixelExportColor_UInt32x4_UInt16_name;
    PixelExportColor_UInt32x4_UInt16.backendIndex = 1957;
    PixelExportColor_UInt32x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_UInt16.parameters = PixelExportColor_UInt32x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->signature = "pixelExportColor(u32x4,literal u16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->name = "pixelExportColor(u32x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->nameWithVarNames = "pixelExportColor(color : u32x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, Int32
    PixelExportColor_UInt16_Int32_color.name = "color"_c;
    PixelExportColor_UInt16_Int32_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_Int32_index.name = "index"_c;
    PixelExportColor_UInt16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16_Int32_index.type.literal = true;
    PixelExportColor_UInt16_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16_Int32.name = PixelExportColor_UInt16_Int32_name;
    PixelExportColor_UInt16_Int32.backendIndex = 1958;
    PixelExportColor_UInt16_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_Int32.parameters = PixelExportColor_UInt16_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->signature = "pixelExportColor(u16,literal i32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->name = "pixelExportColor(u16,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->nameWithVarNames = "pixelExportColor(color : u16, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, UInt32
    PixelExportColor_UInt16_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16_UInt32_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16_UInt32_index.type.literal = true;
    PixelExportColor_UInt16_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16_UInt32.name = PixelExportColor_UInt16_UInt32_name;
    PixelExportColor_UInt16_UInt32.backendIndex = 1959;
    PixelExportColor_UInt16_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_UInt32.parameters = PixelExportColor_UInt16_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->signature = "pixelExportColor(u16,literal u32) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->name = "pixelExportColor(u16,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->nameWithVarNames = "pixelExportColor(color : u16, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, Int16
    PixelExportColor_UInt16_Int16_color.name = "color"_c;
    PixelExportColor_UInt16_Int16_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_Int16_index.name = "index"_c;
    PixelExportColor_UInt16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16_Int16_index.type.literal = true;
    PixelExportColor_UInt16_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16_Int16.name = PixelExportColor_UInt16_Int16_name;
    PixelExportColor_UInt16_Int16.backendIndex = 1960;
    PixelExportColor_UInt16_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_Int16.parameters = PixelExportColor_UInt16_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->signature = "pixelExportColor(u16,literal i16) void"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->name = "pixelExportColor(u16,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->nameWithVarNames = "pixelExportColor(color : u16, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->returnTypeSymbol = &VoidType;

}
} // namespace GPULang
