//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
namespace GPULang
{
Variable acos_Float32_arg;
Function acos_Float32;
Variable acos_Float32x2_arg;
Function acos_Float32x2;
Variable acos_Float32x3_arg;
Function acos_Float32x3;
Variable acos_Float32x4_arg;
Function acos_Float32x4;
Variable acos_Float16_arg;
Function acos_Float16;
Variable acos_Float16x2_arg;
Function acos_Float16x2;
Variable acos_Float16x3_arg;
Function acos_Float16x3;
Variable acos_Float16x4_arg;
Function acos_Float16x4;
Variable acosh_Float32_arg;
Function acosh_Float32;
Variable acosh_Float32x2_arg;
Function acosh_Float32x2;
Variable acosh_Float32x3_arg;
Function acosh_Float32x3;
Variable acosh_Float32x4_arg;
Function acosh_Float32x4;
Variable acosh_Float16_arg;
Function acosh_Float16;
Variable acosh_Float16x2_arg;
Function acosh_Float16x2;
Variable acosh_Float16x3_arg;
Function acosh_Float16x3;
Variable acosh_Float16x4_arg;
Function acosh_Float16x4;
Variable asin_Float32_arg;
Function asin_Float32;
Variable asin_Float32x2_arg;
Function asin_Float32x2;
Variable asin_Float32x3_arg;
Function asin_Float32x3;
Variable asin_Float32x4_arg;
Function asin_Float32x4;
Variable asin_Float16_arg;
Function asin_Float16;
Variable asin_Float16x2_arg;
Function asin_Float16x2;
Variable asin_Float16x3_arg;
Function asin_Float16x3;
Variable asin_Float16x4_arg;
Function asin_Float16x4;
Variable asinh_Float32_arg;
Function asinh_Float32;
Variable asinh_Float32x2_arg;
Function asinh_Float32x2;
Variable asinh_Float32x3_arg;
Function asinh_Float32x3;
Variable asinh_Float32x4_arg;
Function asinh_Float32x4;
Variable asinh_Float16_arg;
Function asinh_Float16;
Variable asinh_Float16x2_arg;
Function asinh_Float16x2;
Variable asinh_Float16x3_arg;
Function asinh_Float16x3;
Variable asinh_Float16x4_arg;
Function asinh_Float16x4;
Variable atan_Float32_arg;
Function atan_Float32;
Variable atan_Float32x2_arg;
Function atan_Float32x2;
Variable atan_Float32x3_arg;
Function atan_Float32x3;
Variable atan_Float32x4_arg;
Function atan_Float32x4;
Variable atan_Float16_arg;
Function atan_Float16;
Variable atan_Float16x2_arg;
Function atan_Float16x2;
Variable atan_Float16x3_arg;
Function atan_Float16x3;
Variable atan_Float16x4_arg;
Function atan_Float16x4;
Variable atanh_Float32_arg;
Function atanh_Float32;
Variable atanh_Float32x2_arg;
Function atanh_Float32x2;
Variable atanh_Float32x3_arg;
Function atanh_Float32x3;
Variable atanh_Float32x4_arg;
Function atanh_Float32x4;
Variable atanh_Float16_arg;
Function atanh_Float16;
Variable atanh_Float16x2_arg;
Function atanh_Float16x2;
Variable atanh_Float16x3_arg;
Function atanh_Float16x3;
Variable atanh_Float16x4_arg;
Function atanh_Float16x4;
Variable cos_Float32_arg;
Function cos_Float32;
Variable cos_Float32x2_arg;
Function cos_Float32x2;
Variable cos_Float32x3_arg;
Function cos_Float32x3;
Variable cos_Float32x4_arg;
Function cos_Float32x4;
Variable cos_Float16_arg;
Function cos_Float16;
Variable cos_Float16x2_arg;
Function cos_Float16x2;
Variable cos_Float16x3_arg;
Function cos_Float16x3;
Variable cos_Float16x4_arg;
Function cos_Float16x4;
Variable cosh_Float32_arg;
Function cosh_Float32;
Variable cosh_Float32x2_arg;
Function cosh_Float32x2;
Variable cosh_Float32x3_arg;
Function cosh_Float32x3;
Variable cosh_Float32x4_arg;
Function cosh_Float32x4;
Variable cosh_Float16_arg;
Function cosh_Float16;
Variable cosh_Float16x2_arg;
Function cosh_Float16x2;
Variable cosh_Float16x3_arg;
Function cosh_Float16x3;
Variable cosh_Float16x4_arg;
Function cosh_Float16x4;
Variable exp_Float32_arg;
Function exp_Float32;
Variable exp_Float32x2_arg;
Function exp_Float32x2;
Variable exp_Float32x3_arg;
Function exp_Float32x3;
Variable exp_Float32x4_arg;
Function exp_Float32x4;
Variable exp_Float16_arg;
Function exp_Float16;
Variable exp_Float16x2_arg;
Function exp_Float16x2;
Variable exp_Float16x3_arg;
Function exp_Float16x3;
Variable exp_Float16x4_arg;
Function exp_Float16x4;
Variable exp2_Float32_arg;
Function exp2_Float32;
Variable exp2_Float32x2_arg;
Function exp2_Float32x2;
Variable exp2_Float32x3_arg;
Function exp2_Float32x3;
Variable exp2_Float32x4_arg;
Function exp2_Float32x4;
Variable exp2_Float16_arg;
Function exp2_Float16;
Variable exp2_Float16x2_arg;
Function exp2_Float16x2;
Variable exp2_Float16x3_arg;
Function exp2_Float16x3;
Variable exp2_Float16x4_arg;
Function exp2_Float16x4;
Variable invSqrt_Float32_arg;
Function invSqrt_Float32;
Variable invSqrt_Float32x2_arg;
Function invSqrt_Float32x2;
Variable invSqrt_Float32x3_arg;
Function invSqrt_Float32x3;
Variable invSqrt_Float32x4_arg;
Function invSqrt_Float32x4;
Variable invSqrt_Float16_arg;
Function invSqrt_Float16;
Variable invSqrt_Float16x2_arg;
Function invSqrt_Float16x2;
Variable invSqrt_Float16x3_arg;
Function invSqrt_Float16x3;
Variable invSqrt_Float16x4_arg;
Function invSqrt_Float16x4;
Variable log_Float32_arg;
Function log_Float32;
Variable log_Float32x2_arg;
Function log_Float32x2;
Variable log_Float32x3_arg;
Function log_Float32x3;
Variable log_Float32x4_arg;
Function log_Float32x4;
Variable log_Float16_arg;
Function log_Float16;
Variable log_Float16x2_arg;
Function log_Float16x2;
Variable log_Float16x3_arg;
Function log_Float16x3;
Variable log_Float16x4_arg;
Function log_Float16x4;
Variable log2_Float32_arg;
Function log2_Float32;
Variable log2_Float32x2_arg;
Function log2_Float32x2;
Variable log2_Float32x3_arg;
Function log2_Float32x3;
Variable log2_Float32x4_arg;
Function log2_Float32x4;
Variable log2_Float16_arg;
Function log2_Float16;
Variable log2_Float16x2_arg;
Function log2_Float16x2;
Variable log2_Float16x3_arg;
Function log2_Float16x3;
Variable log2_Float16x4_arg;
Function log2_Float16x4;
Variable sin_Float32_arg;
Function sin_Float32;
Variable sin_Float32x2_arg;
Function sin_Float32x2;
Variable sin_Float32x3_arg;
Function sin_Float32x3;
Variable sin_Float32x4_arg;
Function sin_Float32x4;
Variable sin_Float16_arg;
Function sin_Float16;
Variable sin_Float16x2_arg;
Function sin_Float16x2;
Variable sin_Float16x3_arg;
Function sin_Float16x3;
Variable sin_Float16x4_arg;
Function sin_Float16x4;
Variable sinh_Float32_arg;
Function sinh_Float32;
Variable sinh_Float32x2_arg;
Function sinh_Float32x2;
Variable sinh_Float32x3_arg;
Function sinh_Float32x3;
Variable sinh_Float32x4_arg;
Function sinh_Float32x4;
Variable sinh_Float16_arg;
Function sinh_Float16;
Variable sinh_Float16x2_arg;
Function sinh_Float16x2;
Variable sinh_Float16x3_arg;
Function sinh_Float16x3;
Variable sinh_Float16x4_arg;
Function sinh_Float16x4;
Variable sqrt_Float32_arg;
Function sqrt_Float32;
Variable sqrt_Float32x2_arg;
Function sqrt_Float32x2;
Variable sqrt_Float32x3_arg;
Function sqrt_Float32x3;
Variable sqrt_Float32x4_arg;
Function sqrt_Float32x4;
Variable sqrt_Float16_arg;
Function sqrt_Float16;
Variable sqrt_Float16x2_arg;
Function sqrt_Float16x2;
Variable sqrt_Float16x3_arg;
Function sqrt_Float16x3;
Variable sqrt_Float16x4_arg;
Function sqrt_Float16x4;
Variable tan_Float32_arg;
Function tan_Float32;
Variable tan_Float32x2_arg;
Function tan_Float32x2;
Variable tan_Float32x3_arg;
Function tan_Float32x3;
Variable tan_Float32x4_arg;
Function tan_Float32x4;
Variable tan_Float16_arg;
Function tan_Float16;
Variable tan_Float16x2_arg;
Function tan_Float16x2;
Variable tan_Float16x3_arg;
Function tan_Float16x3;
Variable tan_Float16x4_arg;
Function tan_Float16x4;
Variable tanh_Float32_arg;
Function tanh_Float32;
Variable tanh_Float32x2_arg;
Function tanh_Float32x2;
Variable tanh_Float32x3_arg;
Function tanh_Float32x3;
Variable tanh_Float32x4_arg;
Function tanh_Float32x4;
Variable tanh_Float16_arg;
Function tanh_Float16;
Variable tanh_Float16x2_arg;
Function tanh_Float16x2;
Variable tanh_Float16x3_arg;
Function tanh_Float16x3;
Variable tanh_Float16x4_arg;
Function tanh_Float16x4;
Variable atan2_Float32_y;
Variable atan2_Float32_x;
Function atan2_Float32;
Variable atan2_Float32x2_y;
Variable atan2_Float32x2_x;
Function atan2_Float32x2;
Variable atan2_Float32x3_y;
Variable atan2_Float32x3_x;
Function atan2_Float32x3;
Variable atan2_Float32x4_y;
Variable atan2_Float32x4_x;
Function atan2_Float32x4;
Variable atan2_Float16_y;
Variable atan2_Float16_x;
Function atan2_Float16;
Variable atan2_Float16x2_y;
Variable atan2_Float16x2_x;
Function atan2_Float16x2;
Variable atan2_Float16x3_y;
Variable atan2_Float16x3_x;
Function atan2_Float16x3;
Variable atan2_Float16x4_y;
Variable atan2_Float16x4_x;
Function atan2_Float16x4;
Variable pow_Float32_arg;
Variable pow_Float32_exp;
Function pow_Float32;
Variable pow_Float32x2_arg;
Variable pow_Float32x2_exp;
Function pow_Float32x2;
Variable pow_Float32x3_arg;
Variable pow_Float32x3_exp;
Function pow_Float32x3;
Variable pow_Float32x4_arg;
Variable pow_Float32x4_exp;
Function pow_Float32x4;
Variable pow_Float16_arg;
Variable pow_Float16_exp;
Function pow_Float16;
Variable pow_Float16x2_arg;
Variable pow_Float16x2_exp;
Function pow_Float16x2;
Variable pow_Float16x3_arg;
Variable pow_Float16x3_exp;
Function pow_Float16x3;
Variable pow_Float16x4_arg;
Variable pow_Float16x4_exp;
Function pow_Float16x4;
Variable mad_Float32_arg;
Variable mad_Float32_mul;
Variable mad_Float32_add;
Function mad_Float32;
Variable mad_Float32x2_arg;
Variable mad_Float32x2_mul;
Variable mad_Float32x2_add;
Function mad_Float32x2;
Variable mad_Float32x3_arg;
Variable mad_Float32x3_mul;
Variable mad_Float32x3_add;
Function mad_Float32x3;
Variable mad_Float32x4_arg;
Variable mad_Float32x4_mul;
Variable mad_Float32x4_add;
Function mad_Float32x4;
Variable mad_Float16_arg;
Variable mad_Float16_mul;
Variable mad_Float16_add;
Function mad_Float16;
Variable mad_Float16x2_arg;
Variable mad_Float16x2_mul;
Variable mad_Float16x2_add;
Function mad_Float16x2;
Variable mad_Float16x3_arg;
Variable mad_Float16x3_mul;
Variable mad_Float16x3_add;
Function mad_Float16x3;
Variable mad_Float16x4_arg;
Variable mad_Float16x4_mul;
Variable mad_Float16x4_add;
Function mad_Float16x4;
Variable mad_Int32_arg;
Variable mad_Int32_mul;
Variable mad_Int32_add;
Function mad_Int32;
Variable mad_Int32x2_arg;
Variable mad_Int32x2_mul;
Variable mad_Int32x2_add;
Function mad_Int32x2;
Variable mad_Int32x3_arg;
Variable mad_Int32x3_mul;
Variable mad_Int32x3_add;
Function mad_Int32x3;
Variable mad_Int32x4_arg;
Variable mad_Int32x4_mul;
Variable mad_Int32x4_add;
Function mad_Int32x4;
Variable mad_Int16_arg;
Variable mad_Int16_mul;
Variable mad_Int16_add;
Function mad_Int16;
Variable mad_Int16x2_arg;
Variable mad_Int16x2_mul;
Variable mad_Int16x2_add;
Function mad_Int16x2;
Variable mad_Int16x3_arg;
Variable mad_Int16x3_mul;
Variable mad_Int16x3_add;
Function mad_Int16x3;
Variable mad_Int16x4_arg;
Variable mad_Int16x4_mul;
Variable mad_Int16x4_add;
Function mad_Int16x4;
Variable mad_UInt32_arg;
Variable mad_UInt32_mul;
Variable mad_UInt32_add;
Function mad_UInt32;
Variable mad_UInt32x2_arg;
Variable mad_UInt32x2_mul;
Variable mad_UInt32x2_add;
Function mad_UInt32x2;
Variable mad_UInt32x3_arg;
Variable mad_UInt32x3_mul;
Variable mad_UInt32x3_add;
Function mad_UInt32x3;
Variable mad_UInt32x4_arg;
Variable mad_UInt32x4_mul;
Variable mad_UInt32x4_add;
Function mad_UInt32x4;
Variable mad_UInt16_arg;
Variable mad_UInt16_mul;
Variable mad_UInt16_add;
Function mad_UInt16;
Variable mad_UInt16x2_arg;
Variable mad_UInt16x2_mul;
Variable mad_UInt16x2_add;
Function mad_UInt16x2;
Variable mad_UInt16x3_arg;
Variable mad_UInt16x3_mul;
Variable mad_UInt16x3_add;
Function mad_UInt16x3;
Variable mad_UInt16x4_arg;
Variable mad_UInt16x4_mul;
Variable mad_UInt16x4_add;
Function mad_UInt16x4;
Variable dot_Float32x2_x;
Variable dot_Float32x2_y;
Function dot_Float32x2;
Variable dot_Float32x3_x;
Variable dot_Float32x3_y;
Function dot_Float32x3;
Variable dot_Float32x4_x;
Variable dot_Float32x4_y;
Function dot_Float32x4;
Variable dot_Float16x2_x;
Variable dot_Float16x2_y;
Function dot_Float16x2;
Variable dot_Float16x3_x;
Variable dot_Float16x3_y;
Function dot_Float16x3;
Variable dot_Float16x4_x;
Variable dot_Float16x4_y;
Function dot_Float16x4;
Variable reflect_Float32x2_incident;
Variable reflect_Float32x2_normal;
Function reflect_Float32x2;
Variable reflect_Float32x3_incident;
Variable reflect_Float32x3_normal;
Function reflect_Float32x3;
Variable reflect_Float32x4_incident;
Variable reflect_Float32x4_normal;
Function reflect_Float32x4;
Variable reflect_Float16x2_incident;
Variable reflect_Float16x2_normal;
Function reflect_Float16x2;
Variable reflect_Float16x3_incident;
Variable reflect_Float16x3_normal;
Function reflect_Float16x3;
Variable reflect_Float16x4_incident;
Variable reflect_Float16x4_normal;
Function reflect_Float16x4;
Variable refract_Float32x2_incident;
Variable refract_Float32x2_normal;
Variable refract_Float32x2_ior;
Function refract_Float32x2;
Variable refract_Float32x3_incident;
Variable refract_Float32x3_normal;
Variable refract_Float32x3_ior;
Function refract_Float32x3;
Variable refract_Float32x4_incident;
Variable refract_Float32x4_normal;
Variable refract_Float32x4_ior;
Function refract_Float32x4;
Variable refract_Float16x2_incident;
Variable refract_Float16x2_normal;
Variable refract_Float16x2_ior;
Function refract_Float16x2;
Variable refract_Float16x3_incident;
Variable refract_Float16x3_normal;
Variable refract_Float16x3_ior;
Function refract_Float16x3;
Variable refract_Float16x4_incident;
Variable refract_Float16x4_normal;
Variable refract_Float16x4_ior;
Function refract_Float16x4;
Variable cross_Float32x3_v0;
Variable cross_Float32x3_v1;
Function cross_Float32x3;
Variable cross_Float16x3_v0;
Variable cross_Float16x3_v1;
Function cross_Float16x3;
Variable length_Float32x2_arg;
Function length_Float32x2;
Variable length_Float32x3_arg;
Function length_Float32x3;
Variable length_Float32x4_arg;
Function length_Float32x4;
Variable length_Float16x2_arg;
Function length_Float16x2;
Variable length_Float16x3_arg;
Function length_Float16x3;
Variable length_Float16x4_arg;
Function length_Float16x4;
Variable normalize_Float32x2_arg;
Function normalize_Float32x2;
Variable normalize_Float32x3_arg;
Function normalize_Float32x3;
Variable normalize_Float32x4_arg;
Function normalize_Float32x4;
Variable normalize_Float16x2_arg;
Function normalize_Float16x2;
Variable normalize_Float16x3_arg;
Function normalize_Float16x3;
Variable normalize_Float16x4_arg;
Function normalize_Float16x4;
Variable distance_Float32x2_p0;
Variable distance_Float32x2_p1;
Function distance_Float32x2;
Variable distance_Float32x3_p0;
Variable distance_Float32x3_p1;
Function distance_Float32x3;
Variable distance_Float32x4_p0;
Variable distance_Float32x4_p1;
Function distance_Float32x4;
Variable distance_Float16x2_p0;
Variable distance_Float16x2_p1;
Function distance_Float16x2;
Variable distance_Float16x3_p0;
Variable distance_Float16x3_p1;
Function distance_Float16x3;
Variable distance_Float16x4_p0;
Variable distance_Float16x4_p1;
Function distance_Float16x4;
Variable min_Float32_x;
Variable min_Float32_y;
Function min_Float32;
Variable min_Float32x2_x;
Variable min_Float32x2_y;
Function min_Float32x2;
Variable min_Float32x3_x;
Variable min_Float32x3_y;
Function min_Float32x3;
Variable min_Float32x4_x;
Variable min_Float32x4_y;
Function min_Float32x4;
Variable min_Float16_x;
Variable min_Float16_y;
Function min_Float16;
Variable min_Float16x2_x;
Variable min_Float16x2_y;
Function min_Float16x2;
Variable min_Float16x3_x;
Variable min_Float16x3_y;
Function min_Float16x3;
Variable min_Float16x4_x;
Variable min_Float16x4_y;
Function min_Float16x4;
Variable min_Int32_x;
Variable min_Int32_y;
Function min_Int32;
Variable min_Int32x2_x;
Variable min_Int32x2_y;
Function min_Int32x2;
Variable min_Int32x3_x;
Variable min_Int32x3_y;
Function min_Int32x3;
Variable min_Int32x4_x;
Variable min_Int32x4_y;
Function min_Int32x4;
Variable min_Int16_x;
Variable min_Int16_y;
Function min_Int16;
Variable min_Int16x2_x;
Variable min_Int16x2_y;
Function min_Int16x2;
Variable min_Int16x3_x;
Variable min_Int16x3_y;
Function min_Int16x3;
Variable min_Int16x4_x;
Variable min_Int16x4_y;
Function min_Int16x4;
Variable min_UInt32_x;
Variable min_UInt32_y;
Function min_UInt32;
Variable min_UInt32x2_x;
Variable min_UInt32x2_y;
Function min_UInt32x2;
Variable min_UInt32x3_x;
Variable min_UInt32x3_y;
Function min_UInt32x3;
Variable min_UInt32x4_x;
Variable min_UInt32x4_y;
Function min_UInt32x4;
Variable min_UInt16_x;
Variable min_UInt16_y;
Function min_UInt16;
Variable min_UInt16x2_x;
Variable min_UInt16x2_y;
Function min_UInt16x2;
Variable min_UInt16x3_x;
Variable min_UInt16x3_y;
Function min_UInt16x3;
Variable min_UInt16x4_x;
Variable min_UInt16x4_y;
Function min_UInt16x4;
Variable max_Float32_x;
Variable max_Float32_y;
Function max_Float32;
Variable max_Float32x2_x;
Variable max_Float32x2_y;
Function max_Float32x2;
Variable max_Float32x3_x;
Variable max_Float32x3_y;
Function max_Float32x3;
Variable max_Float32x4_x;
Variable max_Float32x4_y;
Function max_Float32x4;
Variable max_Float16_x;
Variable max_Float16_y;
Function max_Float16;
Variable max_Float16x2_x;
Variable max_Float16x2_y;
Function max_Float16x2;
Variable max_Float16x3_x;
Variable max_Float16x3_y;
Function max_Float16x3;
Variable max_Float16x4_x;
Variable max_Float16x4_y;
Function max_Float16x4;
Variable max_Int32_x;
Variable max_Int32_y;
Function max_Int32;
Variable max_Int32x2_x;
Variable max_Int32x2_y;
Function max_Int32x2;
Variable max_Int32x3_x;
Variable max_Int32x3_y;
Function max_Int32x3;
Variable max_Int32x4_x;
Variable max_Int32x4_y;
Function max_Int32x4;
Variable max_Int16_x;
Variable max_Int16_y;
Function max_Int16;
Variable max_Int16x2_x;
Variable max_Int16x2_y;
Function max_Int16x2;
Variable max_Int16x3_x;
Variable max_Int16x3_y;
Function max_Int16x3;
Variable max_Int16x4_x;
Variable max_Int16x4_y;
Function max_Int16x4;
Variable max_UInt32_x;
Variable max_UInt32_y;
Function max_UInt32;
Variable max_UInt32x2_x;
Variable max_UInt32x2_y;
Function max_UInt32x2;
Variable max_UInt32x3_x;
Variable max_UInt32x3_y;
Function max_UInt32x3;
Variable max_UInt32x4_x;
Variable max_UInt32x4_y;
Function max_UInt32x4;
Variable max_UInt16_x;
Variable max_UInt16_y;
Function max_UInt16;
Variable max_UInt16x2_x;
Variable max_UInt16x2_y;
Function max_UInt16x2;
Variable max_UInt16x3_x;
Variable max_UInt16x3_y;
Function max_UInt16x3;
Variable max_UInt16x4_x;
Variable max_UInt16x4_y;
Function max_UInt16x4;
Variable clamp_Float32_val;
Variable clamp_Float32_min;
Variable clamp_Float32_max;
Function clamp_Float32;
Variable clamp_Float32x2_val;
Variable clamp_Float32x2_min;
Variable clamp_Float32x2_max;
Function clamp_Float32x2;
Variable clamp_Float32x3_val;
Variable clamp_Float32x3_min;
Variable clamp_Float32x3_max;
Function clamp_Float32x3;
Variable clamp_Float32x4_val;
Variable clamp_Float32x4_min;
Variable clamp_Float32x4_max;
Function clamp_Float32x4;
Variable clamp_Float16_val;
Variable clamp_Float16_min;
Variable clamp_Float16_max;
Function clamp_Float16;
Variable clamp_Float16x2_val;
Variable clamp_Float16x2_min;
Variable clamp_Float16x2_max;
Function clamp_Float16x2;
Variable clamp_Float16x3_val;
Variable clamp_Float16x3_min;
Variable clamp_Float16x3_max;
Function clamp_Float16x3;
Variable clamp_Float16x4_val;
Variable clamp_Float16x4_min;
Variable clamp_Float16x4_max;
Function clamp_Float16x4;
Variable clamp_Int32_val;
Variable clamp_Int32_min;
Variable clamp_Int32_max;
Function clamp_Int32;
Variable clamp_Int32x2_val;
Variable clamp_Int32x2_min;
Variable clamp_Int32x2_max;
Function clamp_Int32x2;
Variable clamp_Int32x3_val;
Variable clamp_Int32x3_min;
Variable clamp_Int32x3_max;
Function clamp_Int32x3;
Variable clamp_Int32x4_val;
Variable clamp_Int32x4_min;
Variable clamp_Int32x4_max;
Function clamp_Int32x4;
Variable clamp_Int16_val;
Variable clamp_Int16_min;
Variable clamp_Int16_max;
Function clamp_Int16;
Variable clamp_Int16x2_val;
Variable clamp_Int16x2_min;
Variable clamp_Int16x2_max;
Function clamp_Int16x2;
Variable clamp_Int16x3_val;
Variable clamp_Int16x3_min;
Variable clamp_Int16x3_max;
Function clamp_Int16x3;
Variable clamp_Int16x4_val;
Variable clamp_Int16x4_min;
Variable clamp_Int16x4_max;
Function clamp_Int16x4;
Variable clamp_UInt32_val;
Variable clamp_UInt32_min;
Variable clamp_UInt32_max;
Function clamp_UInt32;
Variable clamp_UInt32x2_val;
Variable clamp_UInt32x2_min;
Variable clamp_UInt32x2_max;
Function clamp_UInt32x2;
Variable clamp_UInt32x3_val;
Variable clamp_UInt32x3_min;
Variable clamp_UInt32x3_max;
Function clamp_UInt32x3;
Variable clamp_UInt32x4_val;
Variable clamp_UInt32x4_min;
Variable clamp_UInt32x4_max;
Function clamp_UInt32x4;
Variable clamp_UInt16_val;
Variable clamp_UInt16_min;
Variable clamp_UInt16_max;
Function clamp_UInt16;
Variable clamp_UInt16x2_val;
Variable clamp_UInt16x2_min;
Variable clamp_UInt16x2_max;
Function clamp_UInt16x2;
Variable clamp_UInt16x3_val;
Variable clamp_UInt16x3_min;
Variable clamp_UInt16x3_max;
Function clamp_UInt16x3;
Variable clamp_UInt16x4_val;
Variable clamp_UInt16x4_min;
Variable clamp_UInt16x4_max;
Function clamp_UInt16x4;
Variable lerp_Float32x2_a;
Variable lerp_Float32x2_b;
Variable lerp_Float32x2_t;
Function lerp_Float32x2;
Variable lerp_Float32x3_a;
Variable lerp_Float32x3_b;
Variable lerp_Float32x3_t;
Function lerp_Float32x3;
Variable lerp_Float32x4_a;
Variable lerp_Float32x4_b;
Variable lerp_Float32x4_t;
Function lerp_Float32x4;
Variable lerp_Float16x2_a;
Variable lerp_Float16x2_b;
Variable lerp_Float16x2_t;
Function lerp_Float16x2;
Variable lerp_Float16x3_a;
Variable lerp_Float16x3_b;
Variable lerp_Float16x3_t;
Function lerp_Float16x3;
Variable lerp_Float16x4_a;
Variable lerp_Float16x4_b;
Variable lerp_Float16x4_t;
Function lerp_Float16x4;
Variable step_Float32_edge;
Variable step_Float32_x;
Function step_Float32;
Variable step_Float32x2_edge;
Variable step_Float32x2_x;
Function step_Float32x2;
Variable step_Float32x3_edge;
Variable step_Float32x3_x;
Function step_Float32x3;
Variable step_Float32x4_edge;
Variable step_Float32x4_x;
Function step_Float32x4;
Variable step_Float16_edge;
Variable step_Float16_x;
Function step_Float16;
Variable step_Float16x2_edge;
Variable step_Float16x2_x;
Function step_Float16x2;
Variable step_Float16x3_edge;
Variable step_Float16x3_x;
Function step_Float16x3;
Variable step_Float16x4_edge;
Variable step_Float16x4_x;
Function step_Float16x4;
Variable smoothstep_Float32_edge0;
Variable smoothstep_Float32_edge1;
Variable smoothstep_Float32_x;
Function smoothstep_Float32;
Variable smoothstep_Float32x2_edge0;
Variable smoothstep_Float32x2_edge1;
Variable smoothstep_Float32x2_x;
Function smoothstep_Float32x2;
Variable smoothstep_Float32x3_edge0;
Variable smoothstep_Float32x3_edge1;
Variable smoothstep_Float32x3_x;
Function smoothstep_Float32x3;
Variable smoothstep_Float32x4_edge0;
Variable smoothstep_Float32x4_edge1;
Variable smoothstep_Float32x4_x;
Function smoothstep_Float32x4;
Variable smoothstep_Float16_edge0;
Variable smoothstep_Float16_edge1;
Variable smoothstep_Float16_x;
Function smoothstep_Float16;
Variable smoothstep_Float16x2_edge0;
Variable smoothstep_Float16x2_edge1;
Variable smoothstep_Float16x2_x;
Function smoothstep_Float16x2;
Variable smoothstep_Float16x3_edge0;
Variable smoothstep_Float16x3_edge1;
Variable smoothstep_Float16x3_x;
Function smoothstep_Float16x3;
Variable smoothstep_Float16x4_edge0;
Variable smoothstep_Float16x4_edge1;
Variable smoothstep_Float16x4_x;
Function smoothstep_Float16x4;
Variable ceil_Float32_arg;
Function ceil_Float32;
Variable ceil_Float32x2_arg;
Function ceil_Float32x2;
Variable ceil_Float32x3_arg;
Function ceil_Float32x3;
Variable ceil_Float32x4_arg;
Function ceil_Float32x4;
Variable ceil_Float16_arg;
Function ceil_Float16;
Variable ceil_Float16x2_arg;
Function ceil_Float16x2;
Variable ceil_Float16x3_arg;
Function ceil_Float16x3;
Variable ceil_Float16x4_arg;
Function ceil_Float16x4;
Variable floor_Float32_arg;
Function floor_Float32;
Variable floor_Float32x2_arg;
Function floor_Float32x2;
Variable floor_Float32x3_arg;
Function floor_Float32x3;
Variable floor_Float32x4_arg;
Function floor_Float32x4;
Variable floor_Float16_arg;
Function floor_Float16;
Variable floor_Float16x2_arg;
Function floor_Float16x2;
Variable floor_Float16x3_arg;
Function floor_Float16x3;
Variable floor_Float16x4_arg;
Function floor_Float16x4;
Variable fract_Float32_arg;
Function fract_Float32;
Variable fract_Float32x2_arg;
Function fract_Float32x2;
Variable fract_Float32x3_arg;
Function fract_Float32x3;
Variable fract_Float32x4_arg;
Function fract_Float32x4;
Variable fract_Float16_arg;
Function fract_Float16;
Variable fract_Float16x2_arg;
Function fract_Float16x2;
Variable fract_Float16x3_arg;
Function fract_Float16x3;
Variable fract_Float16x4_arg;
Function fract_Float16x4;
Variable saturate_Float32_arg;
Function saturate_Float32;
Variable saturate_Float32x2_arg;
Function saturate_Float32x2;
Variable saturate_Float32x3_arg;
Function saturate_Float32x3;
Variable saturate_Float32x4_arg;
Function saturate_Float32x4;
Variable saturate_Float16_arg;
Function saturate_Float16;
Variable saturate_Float16x2_arg;
Function saturate_Float16x2;
Variable saturate_Float16x3_arg;
Function saturate_Float16x3;
Variable saturate_Float16x4_arg;
Function saturate_Float16x4;
Variable trunc_Float32_arg;
Function trunc_Float32;
Variable trunc_Float32x2_arg;
Function trunc_Float32x2;
Variable trunc_Float32x3_arg;
Function trunc_Float32x3;
Variable trunc_Float32x4_arg;
Function trunc_Float32x4;
Variable trunc_Float16_arg;
Function trunc_Float16;
Variable trunc_Float16x2_arg;
Function trunc_Float16x2;
Variable trunc_Float16x3_arg;
Function trunc_Float16x3;
Variable trunc_Float16x4_arg;
Function trunc_Float16x4;
Variable ddx_Float32_arg;
Function ddx_Float32;
Variable ddx_Float32x2_arg;
Function ddx_Float32x2;
Variable ddx_Float32x3_arg;
Function ddx_Float32x3;
Variable ddx_Float32x4_arg;
Function ddx_Float32x4;
Variable ddx_Float16_arg;
Function ddx_Float16;
Variable ddx_Float16x2_arg;
Function ddx_Float16x2;
Variable ddx_Float16x3_arg;
Function ddx_Float16x3;
Variable ddx_Float16x4_arg;
Function ddx_Float16x4;
Variable ddy_Float32_arg;
Function ddy_Float32;
Variable ddy_Float32x2_arg;
Function ddy_Float32x2;
Variable ddy_Float32x3_arg;
Function ddy_Float32x3;
Variable ddy_Float32x4_arg;
Function ddy_Float32x4;
Variable ddy_Float16_arg;
Function ddy_Float16;
Variable ddy_Float16x2_arg;
Function ddy_Float16x2;
Variable ddy_Float16x3_arg;
Function ddy_Float16x3;
Variable ddy_Float16x4_arg;
Function ddy_Float16x4;
Variable fwidth_Float32_arg;
Function fwidth_Float32;
Variable fwidth_Float32x2_arg;
Function fwidth_Float32x2;
Variable fwidth_Float32x3_arg;
Function fwidth_Float32x3;
Variable fwidth_Float32x4_arg;
Function fwidth_Float32x4;
Variable fwidth_Float16_arg;
Function fwidth_Float16;
Variable fwidth_Float16x2_arg;
Function fwidth_Float16x2;
Variable fwidth_Float16x3_arg;
Function fwidth_Float16x3;
Variable fwidth_Float16x4_arg;
Function fwidth_Float16x4;
Variable sign_Int32_arg;
Function sign_Int32;
Variable sign_Int32x2_arg;
Function sign_Int32x2;
Variable sign_Int32x3_arg;
Function sign_Int32x3;
Variable sign_Int32x4_arg;
Function sign_Int32x4;
Variable sign_Int16_arg;
Function sign_Int16;
Variable sign_Int16x2_arg;
Function sign_Int16x2;
Variable sign_Int16x3_arg;
Function sign_Int16x3;
Variable sign_Int16x4_arg;
Function sign_Int16x4;
Variable sign_Float32_arg;
Function sign_Float32;
Variable sign_Float32x2_arg;
Function sign_Float32x2;
Variable sign_Float32x3_arg;
Function sign_Float32x3;
Variable sign_Float32x4_arg;
Function sign_Float32x4;
Variable sign_Float16_arg;
Function sign_Float16;
Variable sign_Float16x2_arg;
Function sign_Float16x2;
Variable sign_Float16x3_arg;
Function sign_Float16x3;
Variable sign_Float16x4_arg;
Function sign_Float16x4;
Variable abs_Int32_arg;
Function abs_Int32;
Variable abs_Int32x2_arg;
Function abs_Int32x2;
Variable abs_Int32x3_arg;
Function abs_Int32x3;
Variable abs_Int32x4_arg;
Function abs_Int32x4;
Variable abs_Int16_arg;
Function abs_Int16;
Variable abs_Int16x2_arg;
Function abs_Int16x2;
Variable abs_Int16x3_arg;
Function abs_Int16x3;
Variable abs_Int16x4_arg;
Function abs_Int16x4;
Variable abs_Float32_arg;
Function abs_Float32;
Variable abs_Float32x2_arg;
Function abs_Float32x2;
Variable abs_Float32x3_arg;
Function abs_Float32x3;
Variable abs_Float32x4_arg;
Function abs_Float32x4;
Variable abs_Float16_arg;
Function abs_Float16;
Variable abs_Float16x2_arg;
Function abs_Float16x2;
Variable abs_Float16x3_arg;
Function abs_Float16x3;
Variable abs_Float16x4_arg;
Function abs_Float16x4;
Variable castToF16_UInt16_arg;
Function castToF16_UInt16;
Variable castToF16_Int16_arg;
Function castToF16_Int16;
Variable castToU16_Float16_arg;
Function castToU16_Float16;
Variable castToU16_Int16_arg;
Function castToU16_Int16;
Variable castToI16_Float16_arg;
Function castToI16_Float16;
Variable castToI16_UInt16_arg;
Function castToI16_UInt16;
Variable castToF32_UInt32_arg;
Function castToF32_UInt32;
Variable castToF32_Int32_arg;
Function castToF32_Int32;
Variable castToU32_Float32_arg;
Function castToU32_Float32;
Variable castToU32_Int32_arg;
Function castToU32_Int32;
Variable castToI32_Float32_arg;
Function castToI32_Float32;
Variable castToI32_UInt32_arg;
Function castToI32_UInt32;
Variable any_Bool8_arg;
Function any_Bool8;
Variable any_Bool8x2_arg;
Function any_Bool8x2;
Variable any_Bool8x3_arg;
Function any_Bool8x3;
Variable any_Bool8x4_arg;
Function any_Bool8x4;
Variable all_Bool8_arg;
Function all_Bool8;
Variable all_Bool8x2_arg;
Function all_Bool8x2;
Variable all_Bool8x3_arg;
Function all_Bool8x3;
Variable all_Bool8x4_arg;
Function all_Bool8x4;
Variable transpose_Float32x2x2_arg;
Function transpose_Float32x2x2;
Variable transpose_Float16x2x2_arg;
Function transpose_Float16x2x2;
Variable transpose_Float32x2x3_arg;
Function transpose_Float32x2x3;
Variable transpose_Float16x2x3_arg;
Function transpose_Float16x2x3;
Variable transpose_Float32x2x4_arg;
Function transpose_Float32x2x4;
Variable transpose_Float16x2x4_arg;
Function transpose_Float16x2x4;
Variable transpose_Float32x3x2_arg;
Function transpose_Float32x3x2;
Variable transpose_Float16x3x2_arg;
Function transpose_Float16x3x2;
Variable transpose_Float32x3x3_arg;
Function transpose_Float32x3x3;
Variable transpose_Float16x3x3_arg;
Function transpose_Float16x3x3;
Variable transpose_Float32x3x4_arg;
Function transpose_Float32x3x4;
Variable transpose_Float16x3x4_arg;
Function transpose_Float16x3x4;
Variable transpose_Float32x4x2_arg;
Function transpose_Float32x4x2;
Variable transpose_Float16x4x2_arg;
Function transpose_Float16x4x2;
Variable transpose_Float32x4x3_arg;
Function transpose_Float32x4x3;
Variable transpose_Float16x4x3_arg;
Function transpose_Float16x4x3;
Variable transpose_Float32x4x4_arg;
Function transpose_Float32x4x4;
Variable transpose_Float16x4x4_arg;
Function transpose_Float16x4x4;
Variable inverse_Float32x2x2_arg;
Function inverse_Float32x2x2;
Variable inverse_Float16x2x2_arg;
Function inverse_Float16x2x2;
Variable inverse_Float32x2x3_arg;
Function inverse_Float32x2x3;
Variable inverse_Float16x2x3_arg;
Function inverse_Float16x2x3;
Variable inverse_Float32x2x4_arg;
Function inverse_Float32x2x4;
Variable inverse_Float16x2x4_arg;
Function inverse_Float16x2x4;
Variable inverse_Float32x3x2_arg;
Function inverse_Float32x3x2;
Variable inverse_Float16x3x2_arg;
Function inverse_Float16x3x2;
Variable inverse_Float32x3x3_arg;
Function inverse_Float32x3x3;
Variable inverse_Float16x3x3_arg;
Function inverse_Float16x3x3;
Variable inverse_Float32x3x4_arg;
Function inverse_Float32x3x4;
Variable inverse_Float16x3x4_arg;
Function inverse_Float16x3x4;
Variable inverse_Float32x4x2_arg;
Function inverse_Float32x4x2;
Variable inverse_Float16x4x2_arg;
Function inverse_Float16x4x2;
Variable inverse_Float32x4x3_arg;
Function inverse_Float32x4x3;
Variable inverse_Float16x4x3_arg;
Function inverse_Float16x4x3;
Variable inverse_Float32x4x4_arg;
Function inverse_Float32x4x4;
Variable inverse_Float16x4x4_arg;
Function inverse_Float16x4x4;
Function VertexGetOutputLayer;
Function VertexGetOutputViewport;
Function VertexGetIndex;
Function VertexGetInstanceIndex;
Function VertexGetBaseIndex;
Function VertexGetBaseInstanceIndex;
Function VertexGetDrawIndex;
Variable VertexSetOutputLayer_UInt16_arg;
Function VertexSetOutputLayer_UInt16;
Variable VertexSetOutputLayer_UInt32_arg;
Function VertexSetOutputLayer_UInt32;
Variable VertexSetOutputViewport_UInt16_arg;
Function VertexSetOutputViewport_UInt16;
Variable VertexSetOutputViewport_UInt32_arg;
Function VertexSetOutputViewport_UInt32;
Variable VertexExportCoordinates_Float32x4_arg;
Function VertexExportCoordinates_Float32x4;
Variable VertexExportCoordinates_Float16x4_arg;
Function VertexExportCoordinates_Float16x4;
Function GeometryExportVertex;
Function GeometryExportPrimitive;
Function PixelGetCoordinates_Float32x4;
Function PixelGetCoordinates_Float16x4;
Function PixelGetDepth;
Variable PixelExportColor_Float32_Int32_color;
Variable PixelExportColor_Float32_Int32_index;
Function PixelExportColor_Float32_Int32;
Variable PixelExportColor_Float32_UInt32_color;
Variable PixelExportColor_Float32_UInt32_index;
Function PixelExportColor_Float32_UInt32;
Variable PixelExportColor_Float32_Int16_color;
Variable PixelExportColor_Float32_Int16_index;
Function PixelExportColor_Float32_Int16;
Variable PixelExportColor_Float32_UInt16_color;
Variable PixelExportColor_Float32_UInt16_index;
Function PixelExportColor_Float32_UInt16;
Variable PixelExportColor_Float32x2_Int32_color;
Variable PixelExportColor_Float32x2_Int32_index;
Function PixelExportColor_Float32x2_Int32;
Variable PixelExportColor_Float32x2_UInt32_color;
Variable PixelExportColor_Float32x2_UInt32_index;
Function PixelExportColor_Float32x2_UInt32;
Variable PixelExportColor_Float32x2_Int16_color;
Variable PixelExportColor_Float32x2_Int16_index;
Function PixelExportColor_Float32x2_Int16;
Variable PixelExportColor_Float32x2_UInt16_color;
Variable PixelExportColor_Float32x2_UInt16_index;
Function PixelExportColor_Float32x2_UInt16;
Variable PixelExportColor_Float32x3_Int32_color;
Variable PixelExportColor_Float32x3_Int32_index;
Function PixelExportColor_Float32x3_Int32;
Variable PixelExportColor_Float32x3_UInt32_color;
Variable PixelExportColor_Float32x3_UInt32_index;
Function PixelExportColor_Float32x3_UInt32;
Variable PixelExportColor_Float32x3_Int16_color;
Variable PixelExportColor_Float32x3_Int16_index;
Function PixelExportColor_Float32x3_Int16;
Variable PixelExportColor_Float32x3_UInt16_color;
Variable PixelExportColor_Float32x3_UInt16_index;
Function PixelExportColor_Float32x3_UInt16;
Variable PixelExportColor_Float32x4_Int32_color;
Variable PixelExportColor_Float32x4_Int32_index;
Function PixelExportColor_Float32x4_Int32;
Variable PixelExportColor_Float32x4_UInt32_color;
Variable PixelExportColor_Float32x4_UInt32_index;
Function PixelExportColor_Float32x4_UInt32;
Variable PixelExportColor_Float32x4_Int16_color;
Variable PixelExportColor_Float32x4_Int16_index;
Function PixelExportColor_Float32x4_Int16;
Variable PixelExportColor_Float32x4_UInt16_color;
Variable PixelExportColor_Float32x4_UInt16_index;
Function PixelExportColor_Float32x4_UInt16;
Variable PixelExportColor_Float16_Int32_color;
Variable PixelExportColor_Float16_Int32_index;
Function PixelExportColor_Float16_Int32;
Variable PixelExportColor_Float16_UInt32_color;
Variable PixelExportColor_Float16_UInt32_index;
Function PixelExportColor_Float16_UInt32;
Variable PixelExportColor_Float16_Int16_color;
Variable PixelExportColor_Float16_Int16_index;
Function PixelExportColor_Float16_Int16;
Variable PixelExportColor_Float16_UInt16_color;
Variable PixelExportColor_Float16_UInt16_index;
Function PixelExportColor_Float16_UInt16;
Variable PixelExportColor_Float16x2_Int32_color;
Variable PixelExportColor_Float16x2_Int32_index;
Function PixelExportColor_Float16x2_Int32;
Variable PixelExportColor_Float16x2_UInt32_color;
Variable PixelExportColor_Float16x2_UInt32_index;
Function PixelExportColor_Float16x2_UInt32;
Variable PixelExportColor_Float16x2_Int16_color;
Variable PixelExportColor_Float16x2_Int16_index;
Function PixelExportColor_Float16x2_Int16;
Variable PixelExportColor_Float16x2_UInt16_color;
Variable PixelExportColor_Float16x2_UInt16_index;
Function PixelExportColor_Float16x2_UInt16;
Variable PixelExportColor_Float16x3_Int32_color;
Variable PixelExportColor_Float16x3_Int32_index;
Function PixelExportColor_Float16x3_Int32;
Variable PixelExportColor_Float16x3_UInt32_color;
Variable PixelExportColor_Float16x3_UInt32_index;
Function PixelExportColor_Float16x3_UInt32;
Variable PixelExportColor_Float16x3_Int16_color;
Variable PixelExportColor_Float16x3_Int16_index;
Function PixelExportColor_Float16x3_Int16;
Variable PixelExportColor_Float16x3_UInt16_color;
Variable PixelExportColor_Float16x3_UInt16_index;
Function PixelExportColor_Float16x3_UInt16;
Variable PixelExportColor_Float16x4_Int32_color;
Variable PixelExportColor_Float16x4_Int32_index;
Function PixelExportColor_Float16x4_Int32;
Variable PixelExportColor_Float16x4_UInt32_color;
Variable PixelExportColor_Float16x4_UInt32_index;
Function PixelExportColor_Float16x4_UInt32;
Variable PixelExportColor_Float16x4_Int16_color;
Variable PixelExportColor_Float16x4_Int16_index;
Function PixelExportColor_Float16x4_Int16;
Variable PixelExportColor_Float16x4_UInt16_color;
Variable PixelExportColor_Float16x4_UInt16_index;
Function PixelExportColor_Float16x4_UInt16;
Variable PixelExportColor_Int32_Int32_color;
Variable PixelExportColor_Int32_Int32_index;
Function PixelExportColor_Int32_Int32;
Variable PixelExportColor_Int32_UInt32_color;
Variable PixelExportColor_Int32_UInt32_index;
Function PixelExportColor_Int32_UInt32;
Variable PixelExportColor_Int32_Int16_color;
Variable PixelExportColor_Int32_Int16_index;
Function PixelExportColor_Int32_Int16;
Variable PixelExportColor_Int32_UInt16_color;
Variable PixelExportColor_Int32_UInt16_index;
Function PixelExportColor_Int32_UInt16;
Variable PixelExportColor_Int32x2_Int32_color;
Variable PixelExportColor_Int32x2_Int32_index;
Function PixelExportColor_Int32x2_Int32;
Variable PixelExportColor_Int32x2_UInt32_color;
Variable PixelExportColor_Int32x2_UInt32_index;
Function PixelExportColor_Int32x2_UInt32;
Variable PixelExportColor_Int32x2_Int16_color;
Variable PixelExportColor_Int32x2_Int16_index;
Function PixelExportColor_Int32x2_Int16;
Variable PixelExportColor_Int32x2_UInt16_color;
Variable PixelExportColor_Int32x2_UInt16_index;
Function PixelExportColor_Int32x2_UInt16;
Variable PixelExportColor_Int32x3_Int32_color;
Variable PixelExportColor_Int32x3_Int32_index;
Function PixelExportColor_Int32x3_Int32;
Variable PixelExportColor_Int32x3_UInt32_color;
Variable PixelExportColor_Int32x3_UInt32_index;
Function PixelExportColor_Int32x3_UInt32;
Variable PixelExportColor_Int32x3_Int16_color;
Variable PixelExportColor_Int32x3_Int16_index;
Function PixelExportColor_Int32x3_Int16;
Variable PixelExportColor_Int32x3_UInt16_color;
Variable PixelExportColor_Int32x3_UInt16_index;
Function PixelExportColor_Int32x3_UInt16;
Variable PixelExportColor_Int32x4_Int32_color;
Variable PixelExportColor_Int32x4_Int32_index;
Function PixelExportColor_Int32x4_Int32;
Variable PixelExportColor_Int32x4_UInt32_color;
Variable PixelExportColor_Int32x4_UInt32_index;
Function PixelExportColor_Int32x4_UInt32;
Variable PixelExportColor_Int32x4_Int16_color;
Variable PixelExportColor_Int32x4_Int16_index;
Function PixelExportColor_Int32x4_Int16;
Variable PixelExportColor_Int32x4_UInt16_color;
Variable PixelExportColor_Int32x4_UInt16_index;
Function PixelExportColor_Int32x4_UInt16;
Variable PixelExportColor_Int16_Int32_color;
Variable PixelExportColor_Int16_Int32_index;
Function PixelExportColor_Int16_Int32;
Variable PixelExportColor_Int16_UInt32_color;
Variable PixelExportColor_Int16_UInt32_index;
Function PixelExportColor_Int16_UInt32;
Variable PixelExportColor_Int16_Int16_color;
Variable PixelExportColor_Int16_Int16_index;
Function PixelExportColor_Int16_Int16;
Variable PixelExportColor_Int16_UInt16_color;
Variable PixelExportColor_Int16_UInt16_index;
Function PixelExportColor_Int16_UInt16;
Variable PixelExportColor_Int16x2_Int32_color;
Variable PixelExportColor_Int16x2_Int32_index;
Function PixelExportColor_Int16x2_Int32;
Variable PixelExportColor_Int16x2_UInt32_color;
Variable PixelExportColor_Int16x2_UInt32_index;
Function PixelExportColor_Int16x2_UInt32;
Variable PixelExportColor_Int16x2_Int16_color;
Variable PixelExportColor_Int16x2_Int16_index;
Function PixelExportColor_Int16x2_Int16;
Variable PixelExportColor_Int16x2_UInt16_color;
Variable PixelExportColor_Int16x2_UInt16_index;
Function PixelExportColor_Int16x2_UInt16;
Variable PixelExportColor_Int16x3_Int32_color;
Variable PixelExportColor_Int16x3_Int32_index;
Function PixelExportColor_Int16x3_Int32;
Variable PixelExportColor_Int16x3_UInt32_color;
Variable PixelExportColor_Int16x3_UInt32_index;
Function PixelExportColor_Int16x3_UInt32;
Variable PixelExportColor_Int16x3_Int16_color;
Variable PixelExportColor_Int16x3_Int16_index;
Function PixelExportColor_Int16x3_Int16;
Variable PixelExportColor_Int16x3_UInt16_color;
Variable PixelExportColor_Int16x3_UInt16_index;
Function PixelExportColor_Int16x3_UInt16;
Variable PixelExportColor_Int16x4_Int32_color;
Variable PixelExportColor_Int16x4_Int32_index;
Function PixelExportColor_Int16x4_Int32;
Variable PixelExportColor_Int16x4_UInt32_color;
Variable PixelExportColor_Int16x4_UInt32_index;
Function PixelExportColor_Int16x4_UInt32;
Variable PixelExportColor_Int16x4_Int16_color;
Variable PixelExportColor_Int16x4_Int16_index;
Function PixelExportColor_Int16x4_Int16;
Variable PixelExportColor_Int16x4_UInt16_color;
Variable PixelExportColor_Int16x4_UInt16_index;
Function PixelExportColor_Int16x4_UInt16;
Variable PixelExportColor_UInt32_Int32_color;
Variable PixelExportColor_UInt32_Int32_index;
Function PixelExportColor_UInt32_Int32;
Variable PixelExportColor_UInt32_UInt32_color;
Variable PixelExportColor_UInt32_UInt32_index;
Function PixelExportColor_UInt32_UInt32;
Variable PixelExportColor_UInt32_Int16_color;
Variable PixelExportColor_UInt32_Int16_index;
Function PixelExportColor_UInt32_Int16;
Variable PixelExportColor_UInt32_UInt16_color;
Variable PixelExportColor_UInt32_UInt16_index;
Function PixelExportColor_UInt32_UInt16;
Variable PixelExportColor_UInt32x2_Int32_color;
Variable PixelExportColor_UInt32x2_Int32_index;
Function PixelExportColor_UInt32x2_Int32;
Variable PixelExportColor_UInt32x2_UInt32_color;
Variable PixelExportColor_UInt32x2_UInt32_index;
Function PixelExportColor_UInt32x2_UInt32;
Variable PixelExportColor_UInt32x2_Int16_color;
Variable PixelExportColor_UInt32x2_Int16_index;
Function PixelExportColor_UInt32x2_Int16;
Variable PixelExportColor_UInt32x2_UInt16_color;
Variable PixelExportColor_UInt32x2_UInt16_index;
Function PixelExportColor_UInt32x2_UInt16;
Variable PixelExportColor_UInt32x3_Int32_color;
Variable PixelExportColor_UInt32x3_Int32_index;
Function PixelExportColor_UInt32x3_Int32;
Variable PixelExportColor_UInt32x3_UInt32_color;
Variable PixelExportColor_UInt32x3_UInt32_index;
Function PixelExportColor_UInt32x3_UInt32;
Variable PixelExportColor_UInt32x3_Int16_color;
Variable PixelExportColor_UInt32x3_Int16_index;
Function PixelExportColor_UInt32x3_Int16;
Variable PixelExportColor_UInt32x3_UInt16_color;
Variable PixelExportColor_UInt32x3_UInt16_index;
Function PixelExportColor_UInt32x3_UInt16;
Variable PixelExportColor_UInt32x4_Int32_color;
Variable PixelExportColor_UInt32x4_Int32_index;
Function PixelExportColor_UInt32x4_Int32;
Variable PixelExportColor_UInt32x4_UInt32_color;
Variable PixelExportColor_UInt32x4_UInt32_index;
Function PixelExportColor_UInt32x4_UInt32;
Variable PixelExportColor_UInt32x4_Int16_color;
Variable PixelExportColor_UInt32x4_Int16_index;
Function PixelExportColor_UInt32x4_Int16;
Variable PixelExportColor_UInt32x4_UInt16_color;
Variable PixelExportColor_UInt32x4_UInt16_index;
Function PixelExportColor_UInt32x4_UInt16;
Variable PixelExportColor_UInt16_Int32_color;
Variable PixelExportColor_UInt16_Int32_index;
Function PixelExportColor_UInt16_Int32;
Variable PixelExportColor_UInt16_UInt32_color;
Variable PixelExportColor_UInt16_UInt32_index;
Function PixelExportColor_UInt16_UInt32;
Variable PixelExportColor_UInt16_Int16_color;
Variable PixelExportColor_UInt16_Int16_index;
Function PixelExportColor_UInt16_Int16;
Variable PixelExportColor_UInt16_UInt16_color;
Variable PixelExportColor_UInt16_UInt16_index;
Function PixelExportColor_UInt16_UInt16;
Variable PixelExportColor_UInt16x2_Int32_color;
Variable PixelExportColor_UInt16x2_Int32_index;
Function PixelExportColor_UInt16x2_Int32;
Variable PixelExportColor_UInt16x2_UInt32_color;
Variable PixelExportColor_UInt16x2_UInt32_index;
Function PixelExportColor_UInt16x2_UInt32;
Variable PixelExportColor_UInt16x2_Int16_color;
Variable PixelExportColor_UInt16x2_Int16_index;
Function PixelExportColor_UInt16x2_Int16;
Variable PixelExportColor_UInt16x2_UInt16_color;
Variable PixelExportColor_UInt16x2_UInt16_index;
Function PixelExportColor_UInt16x2_UInt16;
Variable PixelExportColor_UInt16x3_Int32_color;
Variable PixelExportColor_UInt16x3_Int32_index;
Function PixelExportColor_UInt16x3_Int32;
Variable PixelExportColor_UInt16x3_UInt32_color;
Variable PixelExportColor_UInt16x3_UInt32_index;
Function PixelExportColor_UInt16x3_UInt32;
Variable PixelExportColor_UInt16x3_Int16_color;
Variable PixelExportColor_UInt16x3_Int16_index;
Function PixelExportColor_UInt16x3_Int16;
Variable PixelExportColor_UInt16x3_UInt16_color;
Variable PixelExportColor_UInt16x3_UInt16_index;
Function PixelExportColor_UInt16x3_UInt16;
Variable PixelExportColor_UInt16x4_Int32_color;
Variable PixelExportColor_UInt16x4_Int32_index;
Function PixelExportColor_UInt16x4_Int32;
Variable PixelExportColor_UInt16x4_UInt32_color;
Variable PixelExportColor_UInt16x4_UInt32_index;
Function PixelExportColor_UInt16x4_UInt32;
Variable PixelExportColor_UInt16x4_Int16_color;
Variable PixelExportColor_UInt16x4_Int16_index;
Function PixelExportColor_UInt16x4_Int16;
Variable PixelExportColor_UInt16x4_UInt16_color;
Variable PixelExportColor_UInt16x4_UInt16_index;
Function PixelExportColor_UInt16x4_UInt16;
Function ComputeGetLocalInvocationIndices;
Function ComputeGetGlobalInvocationIndices;
Function ComputeGetWorkgroupIndices;
Function ComputeGetWorkGroupDimensions;
Function ComputeGetIndexInWorkgroup;
Function SubgroupGetId;
Function SubgroupGetSize;
Function SubgroupGetNum;
Function SubgroupGetInvocationMask;
Function SubgroupGetInvocationAndLowerMask;
Function SubgroupGetLowerMask;
Function SubgroupGetInvocationAndGreaterMask;
Function SubgroupGetGreaterMask;
Function SubgroupFirstInvocation;
Variable Read_UInt32_value;
Function SubgroupRead;
Variable SubgroupBallot_Bool8_predicate;
Function SubgroupBallot;
Variable SubgroupInverseBallot_Bool8_predicate;
Function SubgroupInverseBallot;
Variable SubgroupBallotBitCount_UInt32x4_mask;
Function SubgroupBallotBitCount;
Variable SubgroupBallotFirstOne_UInt32x4_mask;
Function SubgroupBallotFirstOne;
Variable SubgroupBallotLastOne_UInt32x4_mask;
Function SubgroupBallotLastOne;
Variable SubgroupBallotBit_UInt32x4_mask;
Variable SubgroupBallotBit_UInt32_index;
Function SubgroupBallotBit;
Variable SubgroupSwapDiagonal_Float32_color;
Function SubgroupSwapDiagonal_Float32;
Variable SubgroupSwapDiagonal_Float32x2_color;
Function SubgroupSwapDiagonal_Float32x2;
Variable SubgroupSwapDiagonal_Float32x3_color;
Function SubgroupSwapDiagonal_Float32x3;
Variable SubgroupSwapDiagonal_Float32x4_color;
Function SubgroupSwapDiagonal_Float32x4;
Variable SubgroupSwapDiagonal_Float16_color;
Function SubgroupSwapDiagonal_Float16;
Variable SubgroupSwapDiagonal_Float16x2_color;
Function SubgroupSwapDiagonal_Float16x2;
Variable SubgroupSwapDiagonal_Float16x3_color;
Function SubgroupSwapDiagonal_Float16x3;
Variable SubgroupSwapDiagonal_Float16x4_color;
Function SubgroupSwapDiagonal_Float16x4;
Variable SubgroupSwapDiagonal_Int32_color;
Function SubgroupSwapDiagonal_Int32;
Variable SubgroupSwapDiagonal_Int32x2_color;
Function SubgroupSwapDiagonal_Int32x2;
Variable SubgroupSwapDiagonal_Int32x3_color;
Function SubgroupSwapDiagonal_Int32x3;
Variable SubgroupSwapDiagonal_Int32x4_color;
Function SubgroupSwapDiagonal_Int32x4;
Variable SubgroupSwapDiagonal_Int16_color;
Function SubgroupSwapDiagonal_Int16;
Variable SubgroupSwapDiagonal_Int16x2_color;
Function SubgroupSwapDiagonal_Int16x2;
Variable SubgroupSwapDiagonal_Int16x3_color;
Function SubgroupSwapDiagonal_Int16x3;
Variable SubgroupSwapDiagonal_Int16x4_color;
Function SubgroupSwapDiagonal_Int16x4;
Variable SubgroupSwapDiagonal_UInt32_color;
Function SubgroupSwapDiagonal_UInt32;
Variable SubgroupSwapDiagonal_UInt32x2_color;
Function SubgroupSwapDiagonal_UInt32x2;
Variable SubgroupSwapDiagonal_UInt32x3_color;
Function SubgroupSwapDiagonal_UInt32x3;
Variable SubgroupSwapDiagonal_UInt32x4_color;
Function SubgroupSwapDiagonal_UInt32x4;
Variable SubgroupSwapDiagonal_UInt16_color;
Function SubgroupSwapDiagonal_UInt16;
Variable SubgroupSwapDiagonal_UInt16x2_color;
Function SubgroupSwapDiagonal_UInt16x2;
Variable SubgroupSwapDiagonal_UInt16x3_color;
Function SubgroupSwapDiagonal_UInt16x3;
Variable SubgroupSwapDiagonal_UInt16x4_color;
Function SubgroupSwapDiagonal_UInt16x4;
Variable SubgroupSwapVertical_Float32_color;
Function SubgroupSwapVertical_Float32;
Variable SubgroupSwapVertical_Float32x2_color;
Function SubgroupSwapVertical_Float32x2;
Variable SubgroupSwapVertical_Float32x3_color;
Function SubgroupSwapVertical_Float32x3;
Variable SubgroupSwapVertical_Float32x4_color;
Function SubgroupSwapVertical_Float32x4;
Variable SubgroupSwapVertical_Float16_color;
Function SubgroupSwapVertical_Float16;
Variable SubgroupSwapVertical_Float16x2_color;
Function SubgroupSwapVertical_Float16x2;
Variable SubgroupSwapVertical_Float16x3_color;
Function SubgroupSwapVertical_Float16x3;
Variable SubgroupSwapVertical_Float16x4_color;
Function SubgroupSwapVertical_Float16x4;
Variable SubgroupSwapVertical_Int32_color;
Function SubgroupSwapVertical_Int32;
Variable SubgroupSwapVertical_Int32x2_color;
Function SubgroupSwapVertical_Int32x2;
Variable SubgroupSwapVertical_Int32x3_color;
Function SubgroupSwapVertical_Int32x3;
Variable SubgroupSwapVertical_Int32x4_color;
Function SubgroupSwapVertical_Int32x4;
Variable SubgroupSwapVertical_Int16_color;
Function SubgroupSwapVertical_Int16;
Variable SubgroupSwapVertical_Int16x2_color;
Function SubgroupSwapVertical_Int16x2;
Variable SubgroupSwapVertical_Int16x3_color;
Function SubgroupSwapVertical_Int16x3;
Variable SubgroupSwapVertical_Int16x4_color;
Function SubgroupSwapVertical_Int16x4;
Variable SubgroupSwapVertical_UInt32_color;
Function SubgroupSwapVertical_UInt32;
Variable SubgroupSwapVertical_UInt32x2_color;
Function SubgroupSwapVertical_UInt32x2;
Variable SubgroupSwapVertical_UInt32x3_color;
Function SubgroupSwapVertical_UInt32x3;
Variable SubgroupSwapVertical_UInt32x4_color;
Function SubgroupSwapVertical_UInt32x4;
Variable SubgroupSwapVertical_UInt16_color;
Function SubgroupSwapVertical_UInt16;
Variable SubgroupSwapVertical_UInt16x2_color;
Function SubgroupSwapVertical_UInt16x2;
Variable SubgroupSwapVertical_UInt16x3_color;
Function SubgroupSwapVertical_UInt16x3;
Variable SubgroupSwapVertical_UInt16x4_color;
Function SubgroupSwapVertical_UInt16x4;
Variable SubgroupSwapHorizontal_Float32_color;
Function SubgroupSwapHorizontal_Float32;
Variable SubgroupSwapHorizontal_Float32x2_color;
Function SubgroupSwapHorizontal_Float32x2;
Variable SubgroupSwapHorizontal_Float32x3_color;
Function SubgroupSwapHorizontal_Float32x3;
Variable SubgroupSwapHorizontal_Float32x4_color;
Function SubgroupSwapHorizontal_Float32x4;
Variable SubgroupSwapHorizontal_Float16_color;
Function SubgroupSwapHorizontal_Float16;
Variable SubgroupSwapHorizontal_Float16x2_color;
Function SubgroupSwapHorizontal_Float16x2;
Variable SubgroupSwapHorizontal_Float16x3_color;
Function SubgroupSwapHorizontal_Float16x3;
Variable SubgroupSwapHorizontal_Float16x4_color;
Function SubgroupSwapHorizontal_Float16x4;
Variable SubgroupSwapHorizontal_Int32_color;
Function SubgroupSwapHorizontal_Int32;
Variable SubgroupSwapHorizontal_Int32x2_color;
Function SubgroupSwapHorizontal_Int32x2;
Variable SubgroupSwapHorizontal_Int32x3_color;
Function SubgroupSwapHorizontal_Int32x3;
Variable SubgroupSwapHorizontal_Int32x4_color;
Function SubgroupSwapHorizontal_Int32x4;
Variable SubgroupSwapHorizontal_Int16_color;
Function SubgroupSwapHorizontal_Int16;
Variable SubgroupSwapHorizontal_Int16x2_color;
Function SubgroupSwapHorizontal_Int16x2;
Variable SubgroupSwapHorizontal_Int16x3_color;
Function SubgroupSwapHorizontal_Int16x3;
Variable SubgroupSwapHorizontal_Int16x4_color;
Function SubgroupSwapHorizontal_Int16x4;
Variable SubgroupSwapHorizontal_UInt32_color;
Function SubgroupSwapHorizontal_UInt32;
Variable SubgroupSwapHorizontal_UInt32x2_color;
Function SubgroupSwapHorizontal_UInt32x2;
Variable SubgroupSwapHorizontal_UInt32x3_color;
Function SubgroupSwapHorizontal_UInt32x3;
Variable SubgroupSwapHorizontal_UInt32x4_color;
Function SubgroupSwapHorizontal_UInt32x4;
Variable SubgroupSwapHorizontal_UInt16_color;
Function SubgroupSwapHorizontal_UInt16;
Variable SubgroupSwapHorizontal_UInt16x2_color;
Function SubgroupSwapHorizontal_UInt16x2;
Variable SubgroupSwapHorizontal_UInt16x3_color;
Function SubgroupSwapHorizontal_UInt16x3;
Variable SubgroupSwapHorizontal_UInt16x4_color;
Function SubgroupSwapHorizontal_UInt16x4;
void SetupIntrinsics()
{
    acos_Float32_arg.name = "val"_c;
    acos_Float32_arg.type = Type::FullType{ Float32Type.name };
    acos_Float32.name = "acos"_c;
    acos_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&acos_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&acos_Float32)->returnTypeSymbol = &Float32Type;

    acos_Float32x2_arg.name = "val"_c;
    acos_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    acos_Float32x2.name = "acos"_c;
    acos_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&acos_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&acos_Float32x2)->returnTypeSymbol = &Float32x2Type;

    acos_Float32x3_arg.name = "val"_c;
    acos_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    acos_Float32x3.name = "acos"_c;
    acos_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&acos_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&acos_Float32x3)->returnTypeSymbol = &Float32x3Type;

    acos_Float32x4_arg.name = "val"_c;
    acos_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    acos_Float32x4.name = "acos"_c;
    acos_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&acos_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&acos_Float32x4)->returnTypeSymbol = &Float32x4Type;

    acos_Float16_arg.name = "val"_c;
    acos_Float16_arg.type = Type::FullType{ Float16Type.name };
    acos_Float16.name = "acos"_c;
    acos_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&acos_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&acos_Float16)->returnTypeSymbol = &Float16Type;

    acos_Float16x2_arg.name = "val"_c;
    acos_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    acos_Float16x2.name = "acos"_c;
    acos_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&acos_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&acos_Float16x2)->returnTypeSymbol = &Float16x2Type;

    acos_Float16x3_arg.name = "val"_c;
    acos_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    acos_Float16x3.name = "acos"_c;
    acos_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&acos_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&acos_Float16x3)->returnTypeSymbol = &Float16x3Type;

    acos_Float16x4_arg.name = "val"_c;
    acos_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    acos_Float16x4.name = "acos"_c;
    acos_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&acos_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&acos_Float16x4)->returnTypeSymbol = &Float16x4Type;

    acosh_Float32_arg.name = "val"_c;
    acosh_Float32_arg.type = Type::FullType{ Float32Type.name };
    acosh_Float32.name = "acosh"_c;
    acosh_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&acosh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&acosh_Float32)->returnTypeSymbol = &Float32Type;

    acosh_Float32x2_arg.name = "val"_c;
    acosh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    acosh_Float32x2.name = "acosh"_c;
    acosh_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&acosh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&acosh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    acosh_Float32x3_arg.name = "val"_c;
    acosh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    acosh_Float32x3.name = "acosh"_c;
    acosh_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&acosh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&acosh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    acosh_Float32x4_arg.name = "val"_c;
    acosh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    acosh_Float32x4.name = "acosh"_c;
    acosh_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&acosh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&acosh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    acosh_Float16_arg.name = "val"_c;
    acosh_Float16_arg.type = Type::FullType{ Float16Type.name };
    acosh_Float16.name = "acosh"_c;
    acosh_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&acosh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&acosh_Float16)->returnTypeSymbol = &Float16Type;

    acosh_Float16x2_arg.name = "val"_c;
    acosh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    acosh_Float16x2.name = "acosh"_c;
    acosh_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&acosh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&acosh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    acosh_Float16x3_arg.name = "val"_c;
    acosh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    acosh_Float16x3.name = "acosh"_c;
    acosh_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&acosh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&acosh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    acosh_Float16x4_arg.name = "val"_c;
    acosh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    acosh_Float16x4.name = "acosh"_c;
    acosh_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&acosh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&acosh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    asin_Float32_arg.name = "val"_c;
    asin_Float32_arg.type = Type::FullType{ Float32Type.name };
    asin_Float32.name = "asin"_c;
    asin_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&asin_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&asin_Float32)->returnTypeSymbol = &Float32Type;

    asin_Float32x2_arg.name = "val"_c;
    asin_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    asin_Float32x2.name = "asin"_c;
    asin_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&asin_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&asin_Float32x2)->returnTypeSymbol = &Float32x2Type;

    asin_Float32x3_arg.name = "val"_c;
    asin_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    asin_Float32x3.name = "asin"_c;
    asin_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&asin_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&asin_Float32x3)->returnTypeSymbol = &Float32x3Type;

    asin_Float32x4_arg.name = "val"_c;
    asin_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    asin_Float32x4.name = "asin"_c;
    asin_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&asin_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&asin_Float32x4)->returnTypeSymbol = &Float32x4Type;

    asin_Float16_arg.name = "val"_c;
    asin_Float16_arg.type = Type::FullType{ Float16Type.name };
    asin_Float16.name = "asin"_c;
    asin_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&asin_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&asin_Float16)->returnTypeSymbol = &Float16Type;

    asin_Float16x2_arg.name = "val"_c;
    asin_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    asin_Float16x2.name = "asin"_c;
    asin_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&asin_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&asin_Float16x2)->returnTypeSymbol = &Float16x2Type;

    asin_Float16x3_arg.name = "val"_c;
    asin_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    asin_Float16x3.name = "asin"_c;
    asin_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&asin_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&asin_Float16x3)->returnTypeSymbol = &Float16x3Type;

    asin_Float16x4_arg.name = "val"_c;
    asin_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    asin_Float16x4.name = "asin"_c;
    asin_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&asin_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&asin_Float16x4)->returnTypeSymbol = &Float16x4Type;

    asinh_Float32_arg.name = "val"_c;
    asinh_Float32_arg.type = Type::FullType{ Float32Type.name };
    asinh_Float32.name = "asinh"_c;
    asinh_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&asinh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&asinh_Float32)->returnTypeSymbol = &Float32Type;

    asinh_Float32x2_arg.name = "val"_c;
    asinh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    asinh_Float32x2.name = "asinh"_c;
    asinh_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&asinh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&asinh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    asinh_Float32x3_arg.name = "val"_c;
    asinh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    asinh_Float32x3.name = "asinh"_c;
    asinh_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&asinh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&asinh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    asinh_Float32x4_arg.name = "val"_c;
    asinh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    asinh_Float32x4.name = "asinh"_c;
    asinh_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&asinh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&asinh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    asinh_Float16_arg.name = "val"_c;
    asinh_Float16_arg.type = Type::FullType{ Float16Type.name };
    asinh_Float16.name = "asinh"_c;
    asinh_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&asinh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&asinh_Float16)->returnTypeSymbol = &Float16Type;

    asinh_Float16x2_arg.name = "val"_c;
    asinh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    asinh_Float16x2.name = "asinh"_c;
    asinh_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&asinh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&asinh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    asinh_Float16x3_arg.name = "val"_c;
    asinh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    asinh_Float16x3.name = "asinh"_c;
    asinh_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&asinh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&asinh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    asinh_Float16x4_arg.name = "val"_c;
    asinh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    asinh_Float16x4.name = "asinh"_c;
    asinh_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&asinh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&asinh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    atan_Float32_arg.name = "val"_c;
    atan_Float32_arg.type = Type::FullType{ Float32Type.name };
    atan_Float32.name = "atan"_c;
    atan_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&atan_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan_Float32)->returnTypeSymbol = &Float32Type;

    atan_Float32x2_arg.name = "val"_c;
    atan_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    atan_Float32x2.name = "atan"_c;
    atan_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&atan_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan_Float32x2)->returnTypeSymbol = &Float32x2Type;

    atan_Float32x3_arg.name = "val"_c;
    atan_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    atan_Float32x3.name = "atan"_c;
    atan_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&atan_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan_Float32x3)->returnTypeSymbol = &Float32x3Type;

    atan_Float32x4_arg.name = "val"_c;
    atan_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    atan_Float32x4.name = "atan"_c;
    atan_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&atan_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan_Float32x4)->returnTypeSymbol = &Float32x4Type;

    atan_Float16_arg.name = "val"_c;
    atan_Float16_arg.type = Type::FullType{ Float16Type.name };
    atan_Float16.name = "atan"_c;
    atan_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&atan_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan_Float16)->returnTypeSymbol = &Float16Type;

    atan_Float16x2_arg.name = "val"_c;
    atan_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    atan_Float16x2.name = "atan"_c;
    atan_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&atan_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan_Float16x2)->returnTypeSymbol = &Float16x2Type;

    atan_Float16x3_arg.name = "val"_c;
    atan_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    atan_Float16x3.name = "atan"_c;
    atan_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&atan_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan_Float16x3)->returnTypeSymbol = &Float16x3Type;

    atan_Float16x4_arg.name = "val"_c;
    atan_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    atan_Float16x4.name = "atan"_c;
    atan_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&atan_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan_Float16x4)->returnTypeSymbol = &Float16x4Type;

    atanh_Float32_arg.name = "val"_c;
    atanh_Float32_arg.type = Type::FullType{ Float32Type.name };
    atanh_Float32.name = "atanh"_c;
    atanh_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&atanh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atanh_Float32)->returnTypeSymbol = &Float32Type;

    atanh_Float32x2_arg.name = "val"_c;
    atanh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    atanh_Float32x2.name = "atanh"_c;
    atanh_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&atanh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atanh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    atanh_Float32x3_arg.name = "val"_c;
    atanh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    atanh_Float32x3.name = "atanh"_c;
    atanh_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&atanh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atanh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    atanh_Float32x4_arg.name = "val"_c;
    atanh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    atanh_Float32x4.name = "atanh"_c;
    atanh_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&atanh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atanh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    atanh_Float16_arg.name = "val"_c;
    atanh_Float16_arg.type = Type::FullType{ Float16Type.name };
    atanh_Float16.name = "atanh"_c;
    atanh_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&atanh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atanh_Float16)->returnTypeSymbol = &Float16Type;

    atanh_Float16x2_arg.name = "val"_c;
    atanh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    atanh_Float16x2.name = "atanh"_c;
    atanh_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&atanh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atanh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    atanh_Float16x3_arg.name = "val"_c;
    atanh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    atanh_Float16x3.name = "atanh"_c;
    atanh_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&atanh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atanh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    atanh_Float16x4_arg.name = "val"_c;
    atanh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    atanh_Float16x4.name = "atanh"_c;
    atanh_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&atanh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atanh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    cos_Float32_arg.name = "val"_c;
    cos_Float32_arg.type = Type::FullType{ Float32Type.name };
    cos_Float32.name = "cos"_c;
    cos_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&cos_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&cos_Float32)->returnTypeSymbol = &Float32Type;

    cos_Float32x2_arg.name = "val"_c;
    cos_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    cos_Float32x2.name = "cos"_c;
    cos_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&cos_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&cos_Float32x2)->returnTypeSymbol = &Float32x2Type;

    cos_Float32x3_arg.name = "val"_c;
    cos_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    cos_Float32x3.name = "cos"_c;
    cos_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&cos_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cos_Float32x3)->returnTypeSymbol = &Float32x3Type;

    cos_Float32x4_arg.name = "val"_c;
    cos_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    cos_Float32x4.name = "cos"_c;
    cos_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&cos_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&cos_Float32x4)->returnTypeSymbol = &Float32x4Type;

    cos_Float16_arg.name = "val"_c;
    cos_Float16_arg.type = Type::FullType{ Float16Type.name };
    cos_Float16.name = "cos"_c;
    cos_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&cos_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&cos_Float16)->returnTypeSymbol = &Float16Type;

    cos_Float16x2_arg.name = "val"_c;
    cos_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    cos_Float16x2.name = "cos"_c;
    cos_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&cos_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&cos_Float16x2)->returnTypeSymbol = &Float16x2Type;

    cos_Float16x3_arg.name = "val"_c;
    cos_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    cos_Float16x3.name = "cos"_c;
    cos_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&cos_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cos_Float16x3)->returnTypeSymbol = &Float16x3Type;

    cos_Float16x4_arg.name = "val"_c;
    cos_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    cos_Float16x4.name = "cos"_c;
    cos_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&cos_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&cos_Float16x4)->returnTypeSymbol = &Float16x4Type;

    cosh_Float32_arg.name = "val"_c;
    cosh_Float32_arg.type = Type::FullType{ Float32Type.name };
    cosh_Float32.name = "cosh"_c;
    cosh_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&cosh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&cosh_Float32)->returnTypeSymbol = &Float32Type;

    cosh_Float32x2_arg.name = "val"_c;
    cosh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    cosh_Float32x2.name = "cosh"_c;
    cosh_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&cosh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&cosh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    cosh_Float32x3_arg.name = "val"_c;
    cosh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    cosh_Float32x3.name = "cosh"_c;
    cosh_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&cosh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cosh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    cosh_Float32x4_arg.name = "val"_c;
    cosh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    cosh_Float32x4.name = "cosh"_c;
    cosh_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&cosh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&cosh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    cosh_Float16_arg.name = "val"_c;
    cosh_Float16_arg.type = Type::FullType{ Float16Type.name };
    cosh_Float16.name = "cosh"_c;
    cosh_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&cosh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&cosh_Float16)->returnTypeSymbol = &Float16Type;

    cosh_Float16x2_arg.name = "val"_c;
    cosh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    cosh_Float16x2.name = "cosh"_c;
    cosh_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&cosh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&cosh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    cosh_Float16x3_arg.name = "val"_c;
    cosh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    cosh_Float16x3.name = "cosh"_c;
    cosh_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&cosh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cosh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    cosh_Float16x4_arg.name = "val"_c;
    cosh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    cosh_Float16x4.name = "cosh"_c;
    cosh_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&cosh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&cosh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    exp_Float32_arg.name = "val"_c;
    exp_Float32_arg.type = Type::FullType{ Float32Type.name };
    exp_Float32.name = "exp"_c;
    exp_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&exp_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&exp_Float32)->returnTypeSymbol = &Float32Type;

    exp_Float32x2_arg.name = "val"_c;
    exp_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    exp_Float32x2.name = "exp"_c;
    exp_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&exp_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&exp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    exp_Float32x3_arg.name = "val"_c;
    exp_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    exp_Float32x3.name = "exp"_c;
    exp_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&exp_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&exp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    exp_Float32x4_arg.name = "val"_c;
    exp_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    exp_Float32x4.name = "exp"_c;
    exp_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&exp_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&exp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    exp_Float16_arg.name = "val"_c;
    exp_Float16_arg.type = Type::FullType{ Float16Type.name };
    exp_Float16.name = "exp"_c;
    exp_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&exp_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&exp_Float16)->returnTypeSymbol = &Float16Type;

    exp_Float16x2_arg.name = "val"_c;
    exp_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    exp_Float16x2.name = "exp"_c;
    exp_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&exp_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&exp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    exp_Float16x3_arg.name = "val"_c;
    exp_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    exp_Float16x3.name = "exp"_c;
    exp_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&exp_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&exp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    exp_Float16x4_arg.name = "val"_c;
    exp_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    exp_Float16x4.name = "exp"_c;
    exp_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&exp_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&exp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    exp2_Float32_arg.name = "val"_c;
    exp2_Float32_arg.type = Type::FullType{ Float32Type.name };
    exp2_Float32.name = "exp2"_c;
    exp2_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&exp2_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&exp2_Float32)->returnTypeSymbol = &Float32Type;

    exp2_Float32x2_arg.name = "val"_c;
    exp2_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    exp2_Float32x2.name = "exp2"_c;
    exp2_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&exp2_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&exp2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    exp2_Float32x3_arg.name = "val"_c;
    exp2_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    exp2_Float32x3.name = "exp2"_c;
    exp2_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&exp2_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&exp2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    exp2_Float32x4_arg.name = "val"_c;
    exp2_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    exp2_Float32x4.name = "exp2"_c;
    exp2_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&exp2_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&exp2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    exp2_Float16_arg.name = "val"_c;
    exp2_Float16_arg.type = Type::FullType{ Float16Type.name };
    exp2_Float16.name = "exp2"_c;
    exp2_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&exp2_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&exp2_Float16)->returnTypeSymbol = &Float16Type;

    exp2_Float16x2_arg.name = "val"_c;
    exp2_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    exp2_Float16x2.name = "exp2"_c;
    exp2_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&exp2_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&exp2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    exp2_Float16x3_arg.name = "val"_c;
    exp2_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    exp2_Float16x3.name = "exp2"_c;
    exp2_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&exp2_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&exp2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    exp2_Float16x4_arg.name = "val"_c;
    exp2_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    exp2_Float16x4.name = "exp2"_c;
    exp2_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&exp2_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&exp2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    invSqrt_Float32_arg.name = "val"_c;
    invSqrt_Float32_arg.type = Type::FullType{ Float32Type.name };
    invSqrt_Float32.name = "invSqrt"_c;
    invSqrt_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&invSqrt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&invSqrt_Float32)->returnTypeSymbol = &Float32Type;

    invSqrt_Float32x2_arg.name = "val"_c;
    invSqrt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    invSqrt_Float32x2.name = "invSqrt"_c;
    invSqrt_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&invSqrt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&invSqrt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    invSqrt_Float32x3_arg.name = "val"_c;
    invSqrt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    invSqrt_Float32x3.name = "invSqrt"_c;
    invSqrt_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&invSqrt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&invSqrt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    invSqrt_Float32x4_arg.name = "val"_c;
    invSqrt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    invSqrt_Float32x4.name = "invSqrt"_c;
    invSqrt_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&invSqrt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&invSqrt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    invSqrt_Float16_arg.name = "val"_c;
    invSqrt_Float16_arg.type = Type::FullType{ Float16Type.name };
    invSqrt_Float16.name = "invSqrt"_c;
    invSqrt_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&invSqrt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&invSqrt_Float16)->returnTypeSymbol = &Float16Type;

    invSqrt_Float16x2_arg.name = "val"_c;
    invSqrt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    invSqrt_Float16x2.name = "invSqrt"_c;
    invSqrt_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&invSqrt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&invSqrt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    invSqrt_Float16x3_arg.name = "val"_c;
    invSqrt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    invSqrt_Float16x3.name = "invSqrt"_c;
    invSqrt_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&invSqrt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&invSqrt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    invSqrt_Float16x4_arg.name = "val"_c;
    invSqrt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    invSqrt_Float16x4.name = "invSqrt"_c;
    invSqrt_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&invSqrt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&invSqrt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    log_Float32_arg.name = "val"_c;
    log_Float32_arg.type = Type::FullType{ Float32Type.name };
    log_Float32.name = "log"_c;
    log_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&log_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&log_Float32)->returnTypeSymbol = &Float32Type;

    log_Float32x2_arg.name = "val"_c;
    log_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    log_Float32x2.name = "log"_c;
    log_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&log_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&log_Float32x2)->returnTypeSymbol = &Float32x2Type;

    log_Float32x3_arg.name = "val"_c;
    log_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    log_Float32x3.name = "log"_c;
    log_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&log_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&log_Float32x3)->returnTypeSymbol = &Float32x3Type;

    log_Float32x4_arg.name = "val"_c;
    log_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    log_Float32x4.name = "log"_c;
    log_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&log_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&log_Float32x4)->returnTypeSymbol = &Float32x4Type;

    log_Float16_arg.name = "val"_c;
    log_Float16_arg.type = Type::FullType{ Float16Type.name };
    log_Float16.name = "log"_c;
    log_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&log_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&log_Float16)->returnTypeSymbol = &Float16Type;

    log_Float16x2_arg.name = "val"_c;
    log_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    log_Float16x2.name = "log"_c;
    log_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&log_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&log_Float16x2)->returnTypeSymbol = &Float16x2Type;

    log_Float16x3_arg.name = "val"_c;
    log_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    log_Float16x3.name = "log"_c;
    log_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&log_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&log_Float16x3)->returnTypeSymbol = &Float16x3Type;

    log_Float16x4_arg.name = "val"_c;
    log_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    log_Float16x4.name = "log"_c;
    log_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&log_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&log_Float16x4)->returnTypeSymbol = &Float16x4Type;

    log2_Float32_arg.name = "val"_c;
    log2_Float32_arg.type = Type::FullType{ Float32Type.name };
    log2_Float32.name = "log2"_c;
    log2_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&log2_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&log2_Float32)->returnTypeSymbol = &Float32Type;

    log2_Float32x2_arg.name = "val"_c;
    log2_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    log2_Float32x2.name = "log2"_c;
    log2_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&log2_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&log2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    log2_Float32x3_arg.name = "val"_c;
    log2_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    log2_Float32x3.name = "log2"_c;
    log2_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&log2_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&log2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    log2_Float32x4_arg.name = "val"_c;
    log2_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    log2_Float32x4.name = "log2"_c;
    log2_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&log2_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&log2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    log2_Float16_arg.name = "val"_c;
    log2_Float16_arg.type = Type::FullType{ Float16Type.name };
    log2_Float16.name = "log2"_c;
    log2_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&log2_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&log2_Float16)->returnTypeSymbol = &Float16Type;

    log2_Float16x2_arg.name = "val"_c;
    log2_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    log2_Float16x2.name = "log2"_c;
    log2_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&log2_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&log2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    log2_Float16x3_arg.name = "val"_c;
    log2_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    log2_Float16x3.name = "log2"_c;
    log2_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&log2_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&log2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    log2_Float16x4_arg.name = "val"_c;
    log2_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    log2_Float16x4.name = "log2"_c;
    log2_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&log2_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&log2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    sin_Float32_arg.name = "val"_c;
    sin_Float32_arg.type = Type::FullType{ Float32Type.name };
    sin_Float32.name = "sin"_c;
    sin_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&sin_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sin_Float32)->returnTypeSymbol = &Float32Type;

    sin_Float32x2_arg.name = "val"_c;
    sin_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sin_Float32x2.name = "sin"_c;
    sin_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&sin_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sin_Float32x2)->returnTypeSymbol = &Float32x2Type;

    sin_Float32x3_arg.name = "val"_c;
    sin_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sin_Float32x3.name = "sin"_c;
    sin_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&sin_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sin_Float32x3)->returnTypeSymbol = &Float32x3Type;

    sin_Float32x4_arg.name = "val"_c;
    sin_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sin_Float32x4.name = "sin"_c;
    sin_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&sin_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sin_Float32x4)->returnTypeSymbol = &Float32x4Type;

    sin_Float16_arg.name = "val"_c;
    sin_Float16_arg.type = Type::FullType{ Float16Type.name };
    sin_Float16.name = "sin"_c;
    sin_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&sin_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sin_Float16)->returnTypeSymbol = &Float16Type;

    sin_Float16x2_arg.name = "val"_c;
    sin_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sin_Float16x2.name = "sin"_c;
    sin_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&sin_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sin_Float16x2)->returnTypeSymbol = &Float16x2Type;

    sin_Float16x3_arg.name = "val"_c;
    sin_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sin_Float16x3.name = "sin"_c;
    sin_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&sin_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sin_Float16x3)->returnTypeSymbol = &Float16x3Type;

    sin_Float16x4_arg.name = "val"_c;
    sin_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sin_Float16x4.name = "sin"_c;
    sin_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&sin_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sin_Float16x4)->returnTypeSymbol = &Float16x4Type;

    sinh_Float32_arg.name = "val"_c;
    sinh_Float32_arg.type = Type::FullType{ Float32Type.name };
    sinh_Float32.name = "sinh"_c;
    sinh_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&sinh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sinh_Float32)->returnTypeSymbol = &Float32Type;

    sinh_Float32x2_arg.name = "val"_c;
    sinh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sinh_Float32x2.name = "sinh"_c;
    sinh_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&sinh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sinh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    sinh_Float32x3_arg.name = "val"_c;
    sinh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sinh_Float32x3.name = "sinh"_c;
    sinh_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&sinh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sinh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    sinh_Float32x4_arg.name = "val"_c;
    sinh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sinh_Float32x4.name = "sinh"_c;
    sinh_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&sinh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sinh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    sinh_Float16_arg.name = "val"_c;
    sinh_Float16_arg.type = Type::FullType{ Float16Type.name };
    sinh_Float16.name = "sinh"_c;
    sinh_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&sinh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sinh_Float16)->returnTypeSymbol = &Float16Type;

    sinh_Float16x2_arg.name = "val"_c;
    sinh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sinh_Float16x2.name = "sinh"_c;
    sinh_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&sinh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sinh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    sinh_Float16x3_arg.name = "val"_c;
    sinh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sinh_Float16x3.name = "sinh"_c;
    sinh_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&sinh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sinh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    sinh_Float16x4_arg.name = "val"_c;
    sinh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sinh_Float16x4.name = "sinh"_c;
    sinh_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&sinh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sinh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    sqrt_Float32_arg.name = "val"_c;
    sqrt_Float32_arg.type = Type::FullType{ Float32Type.name };
    sqrt_Float32.name = "sqrt"_c;
    sqrt_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&sqrt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sqrt_Float32)->returnTypeSymbol = &Float32Type;

    sqrt_Float32x2_arg.name = "val"_c;
    sqrt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sqrt_Float32x2.name = "sqrt"_c;
    sqrt_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&sqrt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sqrt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    sqrt_Float32x3_arg.name = "val"_c;
    sqrt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sqrt_Float32x3.name = "sqrt"_c;
    sqrt_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&sqrt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sqrt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    sqrt_Float32x4_arg.name = "val"_c;
    sqrt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sqrt_Float32x4.name = "sqrt"_c;
    sqrt_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&sqrt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sqrt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    sqrt_Float16_arg.name = "val"_c;
    sqrt_Float16_arg.type = Type::FullType{ Float16Type.name };
    sqrt_Float16.name = "sqrt"_c;
    sqrt_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&sqrt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sqrt_Float16)->returnTypeSymbol = &Float16Type;

    sqrt_Float16x2_arg.name = "val"_c;
    sqrt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sqrt_Float16x2.name = "sqrt"_c;
    sqrt_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&sqrt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sqrt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    sqrt_Float16x3_arg.name = "val"_c;
    sqrt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sqrt_Float16x3.name = "sqrt"_c;
    sqrt_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&sqrt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sqrt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    sqrt_Float16x4_arg.name = "val"_c;
    sqrt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sqrt_Float16x4.name = "sqrt"_c;
    sqrt_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&sqrt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sqrt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    tan_Float32_arg.name = "val"_c;
    tan_Float32_arg.type = Type::FullType{ Float32Type.name };
    tan_Float32.name = "tan"_c;
    tan_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&tan_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&tan_Float32)->returnTypeSymbol = &Float32Type;

    tan_Float32x2_arg.name = "val"_c;
    tan_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    tan_Float32x2.name = "tan"_c;
    tan_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&tan_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&tan_Float32x2)->returnTypeSymbol = &Float32x2Type;

    tan_Float32x3_arg.name = "val"_c;
    tan_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    tan_Float32x3.name = "tan"_c;
    tan_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&tan_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&tan_Float32x3)->returnTypeSymbol = &Float32x3Type;

    tan_Float32x4_arg.name = "val"_c;
    tan_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    tan_Float32x4.name = "tan"_c;
    tan_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&tan_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&tan_Float32x4)->returnTypeSymbol = &Float32x4Type;

    tan_Float16_arg.name = "val"_c;
    tan_Float16_arg.type = Type::FullType{ Float16Type.name };
    tan_Float16.name = "tan"_c;
    tan_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&tan_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&tan_Float16)->returnTypeSymbol = &Float16Type;

    tan_Float16x2_arg.name = "val"_c;
    tan_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    tan_Float16x2.name = "tan"_c;
    tan_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&tan_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&tan_Float16x2)->returnTypeSymbol = &Float16x2Type;

    tan_Float16x3_arg.name = "val"_c;
    tan_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    tan_Float16x3.name = "tan"_c;
    tan_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&tan_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&tan_Float16x3)->returnTypeSymbol = &Float16x3Type;

    tan_Float16x4_arg.name = "val"_c;
    tan_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    tan_Float16x4.name = "tan"_c;
    tan_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&tan_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&tan_Float16x4)->returnTypeSymbol = &Float16x4Type;

    tanh_Float32_arg.name = "val"_c;
    tanh_Float32_arg.type = Type::FullType{ Float32Type.name };
    tanh_Float32.name = "tanh"_c;
    tanh_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&tanh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&tanh_Float32)->returnTypeSymbol = &Float32Type;

    tanh_Float32x2_arg.name = "val"_c;
    tanh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    tanh_Float32x2.name = "tanh"_c;
    tanh_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&tanh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&tanh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    tanh_Float32x3_arg.name = "val"_c;
    tanh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    tanh_Float32x3.name = "tanh"_c;
    tanh_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&tanh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&tanh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    tanh_Float32x4_arg.name = "val"_c;
    tanh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    tanh_Float32x4.name = "tanh"_c;
    tanh_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&tanh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&tanh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    tanh_Float16_arg.name = "val"_c;
    tanh_Float16_arg.type = Type::FullType{ Float16Type.name };
    tanh_Float16.name = "tanh"_c;
    tanh_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&tanh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&tanh_Float16)->returnTypeSymbol = &Float16Type;

    tanh_Float16x2_arg.name = "val"_c;
    tanh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    tanh_Float16x2.name = "tanh"_c;
    tanh_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&tanh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&tanh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    tanh_Float16x3_arg.name = "val"_c;
    tanh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    tanh_Float16x3.name = "tanh"_c;
    tanh_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&tanh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&tanh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    tanh_Float16x4_arg.name = "val"_c;
    tanh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    tanh_Float16x4.name = "tanh"_c;
    tanh_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&tanh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&tanh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    atan2_Float32_y.name = "y"_c;
    atan2_Float32_y.type = Type::FullType{ Float32Type.name };
    atan2_Float32_x.name = "x"_c;
    atan2_Float32_x.type = Type::FullType{ Float32Type.name };
    atan2_Float32.name = "tanh"_c;
    atan2_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&atan2_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan2_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan2_Float32)->returnTypeSymbol = &Float32Type;

    atan2_Float32x2_y.name = "y"_c;
    atan2_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    atan2_Float32x2_x.name = "x"_c;
    atan2_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    atan2_Float32x2.name = "tanh"_c;
    atan2_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&atan2_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan2_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    atan2_Float32x3_y.name = "y"_c;
    atan2_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    atan2_Float32x3_x.name = "x"_c;
    atan2_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    atan2_Float32x3.name = "tanh"_c;
    atan2_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&atan2_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan2_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    atan2_Float32x4_y.name = "y"_c;
    atan2_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    atan2_Float32x4_x.name = "x"_c;
    atan2_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    atan2_Float32x4.name = "tanh"_c;
    atan2_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&atan2_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan2_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    atan2_Float16_y.name = "y"_c;
    atan2_Float16_y.type = Type::FullType{ Float16Type.name };
    atan2_Float16_x.name = "x"_c;
    atan2_Float16_x.type = Type::FullType{ Float16Type.name };
    atan2_Float16.name = "tanh"_c;
    atan2_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&atan2_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan2_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan2_Float16)->returnTypeSymbol = &Float16Type;

    atan2_Float16x2_y.name = "y"_c;
    atan2_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    atan2_Float16x2_x.name = "x"_c;
    atan2_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    atan2_Float16x2.name = "tanh"_c;
    atan2_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&atan2_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan2_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    atan2_Float16x3_y.name = "y"_c;
    atan2_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    atan2_Float16x3_x.name = "x"_c;
    atan2_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    atan2_Float16x3.name = "tanh"_c;
    atan2_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&atan2_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan2_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    atan2_Float16x4_y.name = "y"_c;
    atan2_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    atan2_Float16x4_x.name = "x"_c;
    atan2_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    atan2_Float16x4.name = "tanh"_c;
    atan2_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&atan2_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan2_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    pow_Float32_arg.name = "val"_c;
    pow_Float32_arg.type = Type::FullType{ Float32Type.name };
    pow_Float32_exp.name = "exponent"_c;
    pow_Float32_exp.type = Type::FullType{ Float32Type.name };
    pow_Float32.name = "pow"_c;
    pow_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&pow_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&pow_Float32_exp)->typeSymbol = &Float32Type;
    Symbol::Resolved(&pow_Float32)->returnTypeSymbol = &Float32Type;

    pow_Float32x2_arg.name = "val"_c;
    pow_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    pow_Float32x2_exp.name = "exponent"_c;
    pow_Float32x2_exp.type = Type::FullType{ Float32x2Type.name };
    pow_Float32x2.name = "pow"_c;
    pow_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&pow_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&pow_Float32x2_exp)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&pow_Float32x2)->returnTypeSymbol = &Float32x2Type;

    pow_Float32x3_arg.name = "val"_c;
    pow_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    pow_Float32x3_exp.name = "exponent"_c;
    pow_Float32x3_exp.type = Type::FullType{ Float32x3Type.name };
    pow_Float32x3.name = "pow"_c;
    pow_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&pow_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&pow_Float32x3_exp)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&pow_Float32x3)->returnTypeSymbol = &Float32x3Type;

    pow_Float32x4_arg.name = "val"_c;
    pow_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    pow_Float32x4_exp.name = "exponent"_c;
    pow_Float32x4_exp.type = Type::FullType{ Float32x4Type.name };
    pow_Float32x4.name = "pow"_c;
    pow_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&pow_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&pow_Float32x4_exp)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&pow_Float32x4)->returnTypeSymbol = &Float32x4Type;

    pow_Float16_arg.name = "val"_c;
    pow_Float16_arg.type = Type::FullType{ Float16Type.name };
    pow_Float16_exp.name = "exponent"_c;
    pow_Float16_exp.type = Type::FullType{ Float16Type.name };
    pow_Float16.name = "pow"_c;
    pow_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&pow_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&pow_Float16_exp)->typeSymbol = &Float16Type;
    Symbol::Resolved(&pow_Float16)->returnTypeSymbol = &Float16Type;

    pow_Float16x2_arg.name = "val"_c;
    pow_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    pow_Float16x2_exp.name = "exponent"_c;
    pow_Float16x2_exp.type = Type::FullType{ Float16x2Type.name };
    pow_Float16x2.name = "pow"_c;
    pow_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&pow_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&pow_Float16x2_exp)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&pow_Float16x2)->returnTypeSymbol = &Float16x2Type;

    pow_Float16x3_arg.name = "val"_c;
    pow_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    pow_Float16x3_exp.name = "exponent"_c;
    pow_Float16x3_exp.type = Type::FullType{ Float16x3Type.name };
    pow_Float16x3.name = "pow"_c;
    pow_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&pow_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&pow_Float16x3_exp)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&pow_Float16x3)->returnTypeSymbol = &Float16x3Type;

    pow_Float16x4_arg.name = "val"_c;
    pow_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    pow_Float16x4_exp.name = "exponent"_c;
    pow_Float16x4_exp.type = Type::FullType{ Float16x4Type.name };
    pow_Float16x4.name = "pow"_c;
    pow_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&pow_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&pow_Float16x4_exp)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&pow_Float16x4)->returnTypeSymbol = &Float16x4Type;

    mad_Float32_arg.name = "val"_c;
    mad_Float32_arg.type = Type::FullType{ Float32Type.name };
    mad_Float32_mul.name = "multiplier"_c;
    mad_Float32_mul.type = Type::FullType{ Float32Type.name };
    mad_Float32_add.name = "addend"_c;
    mad_Float32_add.type = Type::FullType{ Float32Type.name };
    mad_Float32.name = "mad"_c;
    mad_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&mad_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32_mul)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32_add)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32)->returnTypeSymbol = &Float32Type;

    mad_Float32x2_arg.name = "val"_c;
    mad_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2_mul.name = "multiplier"_c;
    mad_Float32x2_mul.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2_add.name = "addend"_c;
    mad_Float32x2_add.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2.name = "mad"_c;
    mad_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&mad_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2_mul)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2_add)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2)->returnTypeSymbol = &Float32x2Type;

    mad_Float32x3_arg.name = "val"_c;
    mad_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3_mul.name = "multiplier"_c;
    mad_Float32x3_mul.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3_add.name = "addend"_c;
    mad_Float32x3_add.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3.name = "mad"_c;
    mad_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&mad_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3_mul)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3_add)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3)->returnTypeSymbol = &Float32x3Type;

    mad_Float32x4_arg.name = "val"_c;
    mad_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4_mul.name = "multiplier"_c;
    mad_Float32x4_mul.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4_add.name = "addend"_c;
    mad_Float32x4_add.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4.name = "mad"_c;
    mad_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&mad_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4_mul)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4_add)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4)->returnTypeSymbol = &Float32x4Type;

    mad_Float16_arg.name = "val"_c;
    mad_Float16_arg.type = Type::FullType{ Float16Type.name };
    mad_Float16_mul.name = "multiplier"_c;
    mad_Float16_mul.type = Type::FullType{ Float16Type.name };
    mad_Float16_add.name = "addend"_c;
    mad_Float16_add.type = Type::FullType{ Float16Type.name };
    mad_Float16.name = "mad"_c;
    mad_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&mad_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16_mul)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16_add)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16)->returnTypeSymbol = &Float16Type;

    mad_Float16x2_arg.name = "val"_c;
    mad_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2_mul.name = "multiplier"_c;
    mad_Float16x2_mul.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2_add.name = "addend"_c;
    mad_Float16x2_add.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2.name = "mad"_c;
    mad_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&mad_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2_mul)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2_add)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2)->returnTypeSymbol = &Float16x2Type;

    mad_Float16x3_arg.name = "val"_c;
    mad_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3_mul.name = "multiplier"_c;
    mad_Float16x3_mul.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3_add.name = "addend"_c;
    mad_Float16x3_add.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3.name = "mad"_c;
    mad_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&mad_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3_mul)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3_add)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3)->returnTypeSymbol = &Float16x3Type;

    mad_Float16x4_arg.name = "val"_c;
    mad_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4_mul.name = "multiplier"_c;
    mad_Float16x4_mul.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4_add.name = "addend"_c;
    mad_Float16x4_add.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4.name = "mad"_c;
    mad_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&mad_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4_mul)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4_add)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4)->returnTypeSymbol = &Float16x4Type;

    mad_Int32_arg.name = "val"_c;
    mad_Int32_arg.type = Type::FullType{ Int32Type.name };
    mad_Int32_mul.name = "multiplier"_c;
    mad_Int32_mul.type = Type::FullType{ Int32Type.name };
    mad_Int32_add.name = "addend"_c;
    mad_Int32_add.type = Type::FullType{ Int32Type.name };
    mad_Int32.name = "mad"_c;
    mad_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&mad_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32_mul)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32_add)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32)->returnTypeSymbol = &Int32Type;

    mad_Int32x2_arg.name = "val"_c;
    mad_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2_mul.name = "multiplier"_c;
    mad_Int32x2_mul.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2_add.name = "addend"_c;
    mad_Int32x2_add.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2.name = "mad"_c;
    mad_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&mad_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2_mul)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2_add)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2)->returnTypeSymbol = &Int32x2Type;

    mad_Int32x3_arg.name = "val"_c;
    mad_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3_mul.name = "multiplier"_c;
    mad_Int32x3_mul.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3_add.name = "addend"_c;
    mad_Int32x3_add.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3.name = "mad"_c;
    mad_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&mad_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3_mul)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3_add)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3)->returnTypeSymbol = &Int32x3Type;

    mad_Int32x4_arg.name = "val"_c;
    mad_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4_mul.name = "multiplier"_c;
    mad_Int32x4_mul.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4_add.name = "addend"_c;
    mad_Int32x4_add.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4.name = "mad"_c;
    mad_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&mad_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4_mul)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4_add)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4)->returnTypeSymbol = &Int32x4Type;

    mad_Int16_arg.name = "val"_c;
    mad_Int16_arg.type = Type::FullType{ Int16Type.name };
    mad_Int16_mul.name = "multiplier"_c;
    mad_Int16_mul.type = Type::FullType{ Int16Type.name };
    mad_Int16_add.name = "addend"_c;
    mad_Int16_add.type = Type::FullType{ Int16Type.name };
    mad_Int16.name = "mad"_c;
    mad_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&mad_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16_mul)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16_add)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16)->returnTypeSymbol = &Int16Type;

    mad_Int16x2_arg.name = "val"_c;
    mad_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2_mul.name = "multiplier"_c;
    mad_Int16x2_mul.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2_add.name = "addend"_c;
    mad_Int16x2_add.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2.name = "mad"_c;
    mad_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&mad_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2_mul)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2_add)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2)->returnTypeSymbol = &Int16x2Type;

    mad_Int16x3_arg.name = "val"_c;
    mad_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3_mul.name = "multiplier"_c;
    mad_Int16x3_mul.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3_add.name = "addend"_c;
    mad_Int16x3_add.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3.name = "mad"_c;
    mad_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&mad_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3_mul)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3_add)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3)->returnTypeSymbol = &Int16x3Type;

    mad_Int16x4_arg.name = "val"_c;
    mad_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4_mul.name = "multiplier"_c;
    mad_Int16x4_mul.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4_add.name = "addend"_c;
    mad_Int16x4_add.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4.name = "mad"_c;
    mad_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&mad_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4_mul)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4_add)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4)->returnTypeSymbol = &Int16x4Type;

    mad_UInt32_arg.name = "val"_c;
    mad_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    mad_UInt32_mul.name = "multiplier"_c;
    mad_UInt32_mul.type = Type::FullType{ UInt32Type.name };
    mad_UInt32_add.name = "addend"_c;
    mad_UInt32_add.type = Type::FullType{ UInt32Type.name };
    mad_UInt32.name = "mad"_c;
    mad_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&mad_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32_mul)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32_add)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32)->returnTypeSymbol = &UInt32Type;

    mad_UInt32x2_arg.name = "val"_c;
    mad_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2_mul.name = "multiplier"_c;
    mad_UInt32x2_mul.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2_add.name = "addend"_c;
    mad_UInt32x2_add.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2.name = "mad"_c;
    mad_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&mad_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2_mul)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2_add)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    mad_UInt32x3_arg.name = "val"_c;
    mad_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3_mul.name = "multiplier"_c;
    mad_UInt32x3_mul.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3_add.name = "addend"_c;
    mad_UInt32x3_add.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3.name = "mad"_c;
    mad_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&mad_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3_mul)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3_add)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    mad_UInt32x4_arg.name = "val"_c;
    mad_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4_mul.name = "multiplier"_c;
    mad_UInt32x4_mul.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4_add.name = "addend"_c;
    mad_UInt32x4_add.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4.name = "mad"_c;
    mad_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&mad_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4_mul)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4_add)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    mad_UInt16_arg.name = "val"_c;
    mad_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    mad_UInt16_mul.name = "multiplier"_c;
    mad_UInt16_mul.type = Type::FullType{ UInt16Type.name };
    mad_UInt16_add.name = "addend"_c;
    mad_UInt16_add.type = Type::FullType{ UInt16Type.name };
    mad_UInt16.name = "mad"_c;
    mad_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&mad_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16_mul)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16_add)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16)->returnTypeSymbol = &UInt16Type;

    mad_UInt16x2_arg.name = "val"_c;
    mad_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2_mul.name = "multiplier"_c;
    mad_UInt16x2_mul.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2_add.name = "addend"_c;
    mad_UInt16x2_add.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2.name = "mad"_c;
    mad_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&mad_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2_mul)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2_add)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    mad_UInt16x3_arg.name = "val"_c;
    mad_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3_mul.name = "multiplier"_c;
    mad_UInt16x3_mul.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3_add.name = "addend"_c;
    mad_UInt16x3_add.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3.name = "mad"_c;
    mad_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&mad_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3_mul)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3_add)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    mad_UInt16x4_arg.name = "val"_c;
    mad_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4_mul.name = "multiplier"_c;
    mad_UInt16x4_mul.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4_add.name = "addend"_c;
    mad_UInt16x4_add.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4.name = "mad"_c;
    mad_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&mad_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4_mul)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4_add)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    dot_Float32x2_x.name = "x"_c;
    dot_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    dot_Float32x2_y.name = "y"_c;
    dot_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    dot_Float32x2.name = "dot"_c;
    dot_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&dot_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&dot_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&dot_Float32x2)->returnTypeSymbol = &Float32Type;

    dot_Float32x3_x.name = "x"_c;
    dot_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    dot_Float32x3_y.name = "y"_c;
    dot_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    dot_Float32x3.name = "dot"_c;
    dot_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&dot_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&dot_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&dot_Float32x3)->returnTypeSymbol = &Float32Type;

    dot_Float32x4_x.name = "x"_c;
    dot_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    dot_Float32x4_y.name = "y"_c;
    dot_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    dot_Float32x4.name = "dot"_c;
    dot_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&dot_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&dot_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&dot_Float32x4)->returnTypeSymbol = &Float32Type;

    dot_Float16x2_x.name = "x"_c;
    dot_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    dot_Float16x2_y.name = "y"_c;
    dot_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    dot_Float16x2.name = "dot"_c;
    dot_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&dot_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&dot_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&dot_Float16x2)->returnTypeSymbol = &Float16Type;

    dot_Float16x3_x.name = "x"_c;
    dot_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    dot_Float16x3_y.name = "y"_c;
    dot_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    dot_Float16x3.name = "dot"_c;
    dot_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&dot_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&dot_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&dot_Float16x3)->returnTypeSymbol = &Float16Type;

    dot_Float16x4_x.name = "x"_c;
    dot_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    dot_Float16x4_y.name = "y"_c;
    dot_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    dot_Float16x4.name = "dot"_c;
    dot_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&dot_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&dot_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&dot_Float16x4)->returnTypeSymbol = &Float16Type;

    reflect_Float32x2_incident.name = "incident"_c;
    reflect_Float32x2_incident.type = Type::FullType{ Float32x2Type.name };
    reflect_Float32x2_normal.name = "normal"_c;
    reflect_Float32x2_normal.type = Type::FullType{ Float32x2Type.name };
    reflect_Float32x2.name = "reflect"_c;
    reflect_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&reflect_Float32x2_incident)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&reflect_Float32x2_normal)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&reflect_Float32x2)->returnTypeSymbol = &Float32x2Type;

    reflect_Float32x3_incident.name = "incident"_c;
    reflect_Float32x3_incident.type = Type::FullType{ Float32x3Type.name };
    reflect_Float32x3_normal.name = "normal"_c;
    reflect_Float32x3_normal.type = Type::FullType{ Float32x3Type.name };
    reflect_Float32x3.name = "reflect"_c;
    reflect_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&reflect_Float32x3_incident)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&reflect_Float32x3_normal)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&reflect_Float32x3)->returnTypeSymbol = &Float32x3Type;

    reflect_Float32x4_incident.name = "incident"_c;
    reflect_Float32x4_incident.type = Type::FullType{ Float32x4Type.name };
    reflect_Float32x4_normal.name = "normal"_c;
    reflect_Float32x4_normal.type = Type::FullType{ Float32x4Type.name };
    reflect_Float32x4.name = "reflect"_c;
    reflect_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&reflect_Float32x4_incident)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&reflect_Float32x4_normal)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&reflect_Float32x4)->returnTypeSymbol = &Float32x4Type;

    reflect_Float16x2_incident.name = "incident"_c;
    reflect_Float16x2_incident.type = Type::FullType{ Float16x2Type.name };
    reflect_Float16x2_normal.name = "normal"_c;
    reflect_Float16x2_normal.type = Type::FullType{ Float16x2Type.name };
    reflect_Float16x2.name = "reflect"_c;
    reflect_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&reflect_Float16x2_incident)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&reflect_Float16x2_normal)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&reflect_Float16x2)->returnTypeSymbol = &Float16x2Type;

    reflect_Float16x3_incident.name = "incident"_c;
    reflect_Float16x3_incident.type = Type::FullType{ Float16x3Type.name };
    reflect_Float16x3_normal.name = "normal"_c;
    reflect_Float16x3_normal.type = Type::FullType{ Float16x3Type.name };
    reflect_Float16x3.name = "reflect"_c;
    reflect_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&reflect_Float16x3_incident)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&reflect_Float16x3_normal)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&reflect_Float16x3)->returnTypeSymbol = &Float16x3Type;

    reflect_Float16x4_incident.name = "incident"_c;
    reflect_Float16x4_incident.type = Type::FullType{ Float16x4Type.name };
    reflect_Float16x4_normal.name = "normal"_c;
    reflect_Float16x4_normal.type = Type::FullType{ Float16x4Type.name };
    reflect_Float16x4.name = "reflect"_c;
    reflect_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&reflect_Float16x4_incident)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&reflect_Float16x4_normal)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&reflect_Float16x4)->returnTypeSymbol = &Float16x4Type;

    refract_Float32x2_incident.name = "incident"_c;
    refract_Float32x2_incident.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2_normal.name = "normal"_c;
    refract_Float32x2_normal.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2_ior.name = "ior"_c;
    refract_Float32x2_ior.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2.name = "refract"_c;
    refract_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&refract_Float32x2_incident)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2_normal)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2_ior)->typeSymbol = &Float32Type;
    Symbol::Resolved(&refract_Float32x2)->returnTypeSymbol = &Float32x2Type;

    refract_Float32x3_incident.name = "incident"_c;
    refract_Float32x3_incident.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3_normal.name = "normal"_c;
    refract_Float32x3_normal.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3_ior.name = "ior"_c;
    refract_Float32x3_ior.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3.name = "refract"_c;
    refract_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&refract_Float32x3_incident)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3_normal)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3_ior)->typeSymbol = &Float32Type;
    Symbol::Resolved(&refract_Float32x3)->returnTypeSymbol = &Float32x3Type;

    refract_Float32x4_incident.name = "incident"_c;
    refract_Float32x4_incident.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4_normal.name = "normal"_c;
    refract_Float32x4_normal.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4_ior.name = "ior"_c;
    refract_Float32x4_ior.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4.name = "refract"_c;
    refract_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&refract_Float32x4_incident)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4_normal)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4_ior)->typeSymbol = &Float32Type;
    Symbol::Resolved(&refract_Float32x4)->returnTypeSymbol = &Float32x4Type;

    refract_Float16x2_incident.name = "incident"_c;
    refract_Float16x2_incident.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2_normal.name = "normal"_c;
    refract_Float16x2_normal.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2_ior.name = "ior"_c;
    refract_Float16x2_ior.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2.name = "refract"_c;
    refract_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&refract_Float16x2_incident)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2_normal)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2_ior)->typeSymbol = &Float16Type;
    Symbol::Resolved(&refract_Float16x2)->returnTypeSymbol = &Float16x2Type;

    refract_Float16x3_incident.name = "incident"_c;
    refract_Float16x3_incident.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3_normal.name = "normal"_c;
    refract_Float16x3_normal.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3_ior.name = "ior"_c;
    refract_Float16x3_ior.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3.name = "refract"_c;
    refract_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&refract_Float16x3_incident)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3_normal)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3_ior)->typeSymbol = &Float16Type;
    Symbol::Resolved(&refract_Float16x3)->returnTypeSymbol = &Float16x3Type;

    refract_Float16x4_incident.name = "incident"_c;
    refract_Float16x4_incident.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4_normal.name = "normal"_c;
    refract_Float16x4_normal.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4_ior.name = "ior"_c;
    refract_Float16x4_ior.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4.name = "refract"_c;
    refract_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&refract_Float16x4_incident)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4_normal)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4_ior)->typeSymbol = &Float16Type;
    Symbol::Resolved(&refract_Float16x4)->returnTypeSymbol = &Float16x4Type;

    cross_Float32x3_v0.name = "v0"_c;
    cross_Float32x3_v0.type = Type::FullType{ Float32x3Type.name };
    cross_Float32x3_v1.name = "v1"_c;
    cross_Float32x3_v1.type = Type::FullType{ Float32x3Type.name };
    cross_Float32x3.name = "cross"_c;
    cross_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&cross_Float32x3_v0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cross_Float32x3_v1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cross_Float32x3)->returnTypeSymbol = &Float32x3Type;

    cross_Float16x3_v0.name = "v0"_c;
    cross_Float16x3_v0.type = Type::FullType{ Float16x3Type.name };
    cross_Float16x3_v1.name = "v1"_c;
    cross_Float16x3_v1.type = Type::FullType{ Float16x3Type.name };
    cross_Float16x3.name = "cross"_c;
    cross_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&cross_Float16x3_v0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cross_Float16x3_v1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cross_Float16x3)->returnTypeSymbol = &Float16x3Type;

    length_Float32x2_arg.name = "val"_c;
    length_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    length_Float32x2.name = "length"_c;
    length_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&length_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&length_Float32x2)->returnTypeSymbol = &Float32x2Type;

    length_Float32x3_arg.name = "val"_c;
    length_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    length_Float32x3.name = "length"_c;
    length_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&length_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&length_Float32x3)->returnTypeSymbol = &Float32x3Type;

    length_Float32x4_arg.name = "val"_c;
    length_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    length_Float32x4.name = "length"_c;
    length_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&length_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&length_Float32x4)->returnTypeSymbol = &Float32x4Type;

    length_Float16x2_arg.name = "val"_c;
    length_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    length_Float16x2.name = "length"_c;
    length_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&length_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&length_Float16x2)->returnTypeSymbol = &Float16x2Type;

    length_Float16x3_arg.name = "val"_c;
    length_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    length_Float16x3.name = "length"_c;
    length_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&length_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&length_Float16x3)->returnTypeSymbol = &Float16x3Type;

    length_Float16x4_arg.name = "val"_c;
    length_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    length_Float16x4.name = "length"_c;
    length_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&length_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&length_Float16x4)->returnTypeSymbol = &Float16x4Type;

    normalize_Float32x2_arg.name = "val"_c;
    normalize_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    normalize_Float32x2.name = "normalize"_c;
    normalize_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&normalize_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&normalize_Float32x2)->returnTypeSymbol = &Float32x2Type;

    normalize_Float32x3_arg.name = "val"_c;
    normalize_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    normalize_Float32x3.name = "normalize"_c;
    normalize_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&normalize_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&normalize_Float32x3)->returnTypeSymbol = &Float32x3Type;

    normalize_Float32x4_arg.name = "val"_c;
    normalize_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    normalize_Float32x4.name = "normalize"_c;
    normalize_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&normalize_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&normalize_Float32x4)->returnTypeSymbol = &Float32x4Type;

    normalize_Float16x2_arg.name = "val"_c;
    normalize_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    normalize_Float16x2.name = "normalize"_c;
    normalize_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&normalize_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&normalize_Float16x2)->returnTypeSymbol = &Float16x2Type;

    normalize_Float16x3_arg.name = "val"_c;
    normalize_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    normalize_Float16x3.name = "normalize"_c;
    normalize_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&normalize_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&normalize_Float16x3)->returnTypeSymbol = &Float16x3Type;

    normalize_Float16x4_arg.name = "val"_c;
    normalize_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    normalize_Float16x4.name = "normalize"_c;
    normalize_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&normalize_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&normalize_Float16x4)->returnTypeSymbol = &Float16x4Type;

    distance_Float32x2_p0.name = "p0"_c;
    distance_Float32x2_p0.type = Type::FullType{ Float32x2Type.name };
    distance_Float32x2_p1.name = "p1"_c;
    distance_Float32x2_p1.type = Type::FullType{ Float32x2Type.name };
    distance_Float32x2.name = "distance"_c;
    distance_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&distance_Float32x2_p0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&distance_Float32x2_p1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&distance_Float32x2)->returnTypeSymbol = &Float32Type;

    distance_Float32x3_p0.name = "p0"_c;
    distance_Float32x3_p0.type = Type::FullType{ Float32x3Type.name };
    distance_Float32x3_p1.name = "p1"_c;
    distance_Float32x3_p1.type = Type::FullType{ Float32x3Type.name };
    distance_Float32x3.name = "distance"_c;
    distance_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&distance_Float32x3_p0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&distance_Float32x3_p1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&distance_Float32x3)->returnTypeSymbol = &Float32Type;

    distance_Float32x4_p0.name = "p0"_c;
    distance_Float32x4_p0.type = Type::FullType{ Float32x4Type.name };
    distance_Float32x4_p1.name = "p1"_c;
    distance_Float32x4_p1.type = Type::FullType{ Float32x4Type.name };
    distance_Float32x4.name = "distance"_c;
    distance_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&distance_Float32x4_p0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&distance_Float32x4_p1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&distance_Float32x4)->returnTypeSymbol = &Float32Type;

    distance_Float16x2_p0.name = "p0"_c;
    distance_Float16x2_p0.type = Type::FullType{ Float16x2Type.name };
    distance_Float16x2_p1.name = "p1"_c;
    distance_Float16x2_p1.type = Type::FullType{ Float16x2Type.name };
    distance_Float16x2.name = "distance"_c;
    distance_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&distance_Float16x2_p0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&distance_Float16x2_p1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&distance_Float16x2)->returnTypeSymbol = &Float16Type;

    distance_Float16x3_p0.name = "p0"_c;
    distance_Float16x3_p0.type = Type::FullType{ Float16x3Type.name };
    distance_Float16x3_p1.name = "p1"_c;
    distance_Float16x3_p1.type = Type::FullType{ Float16x3Type.name };
    distance_Float16x3.name = "distance"_c;
    distance_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&distance_Float16x3_p0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&distance_Float16x3_p1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&distance_Float16x3)->returnTypeSymbol = &Float16Type;

    distance_Float16x4_p0.name = "p0"_c;
    distance_Float16x4_p0.type = Type::FullType{ Float16x4Type.name };
    distance_Float16x4_p1.name = "p1"_c;
    distance_Float16x4_p1.type = Type::FullType{ Float16x4Type.name };
    distance_Float16x4.name = "distance"_c;
    distance_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&distance_Float16x4_p0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&distance_Float16x4_p1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&distance_Float16x4)->returnTypeSymbol = &Float16Type;

    min_Float32_x.name = "x"_c;
    min_Float32_x.type = Type::FullType{ Float32Type.name };
    min_Float32_y.name = "y"_c;
    min_Float32_y.type = Type::FullType{ Float32Type.name };
    min_Float32.name = "min"_c;
    min_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&min_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&min_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&min_Float32)->returnTypeSymbol = &Float32Type;

    min_Float32x2_x.name = "x"_c;
    min_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    min_Float32x2_y.name = "y"_c;
    min_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    min_Float32x2.name = "min"_c;
    min_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&min_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&min_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&min_Float32x2)->returnTypeSymbol = &Float32x2Type;

    min_Float32x3_x.name = "x"_c;
    min_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    min_Float32x3_y.name = "y"_c;
    min_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    min_Float32x3.name = "min"_c;
    min_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&min_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&min_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&min_Float32x3)->returnTypeSymbol = &Float32x3Type;

    min_Float32x4_x.name = "x"_c;
    min_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    min_Float32x4_y.name = "y"_c;
    min_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    min_Float32x4.name = "min"_c;
    min_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&min_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&min_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&min_Float32x4)->returnTypeSymbol = &Float32x4Type;

    min_Float16_x.name = "x"_c;
    min_Float16_x.type = Type::FullType{ Float16Type.name };
    min_Float16_y.name = "y"_c;
    min_Float16_y.type = Type::FullType{ Float16Type.name };
    min_Float16.name = "min"_c;
    min_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&min_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&min_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&min_Float16)->returnTypeSymbol = &Float16Type;

    min_Float16x2_x.name = "x"_c;
    min_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    min_Float16x2_y.name = "y"_c;
    min_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    min_Float16x2.name = "min"_c;
    min_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&min_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&min_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&min_Float16x2)->returnTypeSymbol = &Float16x2Type;

    min_Float16x3_x.name = "x"_c;
    min_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    min_Float16x3_y.name = "y"_c;
    min_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    min_Float16x3.name = "min"_c;
    min_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&min_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&min_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&min_Float16x3)->returnTypeSymbol = &Float16x3Type;

    min_Float16x4_x.name = "x"_c;
    min_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    min_Float16x4_y.name = "y"_c;
    min_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    min_Float16x4.name = "min"_c;
    min_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&min_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&min_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&min_Float16x4)->returnTypeSymbol = &Float16x4Type;

    min_Int32_x.name = "x"_c;
    min_Int32_x.type = Type::FullType{ Int32Type.name };
    min_Int32_y.name = "y"_c;
    min_Int32_y.type = Type::FullType{ Int32Type.name };
    min_Int32.name = "min"_c;
    min_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&min_Int32_x)->typeSymbol = &Int32Type;
    Symbol::Resolved(&min_Int32_y)->typeSymbol = &Int32Type;
    Symbol::Resolved(&min_Int32)->returnTypeSymbol = &Int32Type;

    min_Int32x2_x.name = "x"_c;
    min_Int32x2_x.type = Type::FullType{ Int32x2Type.name };
    min_Int32x2_y.name = "y"_c;
    min_Int32x2_y.type = Type::FullType{ Int32x2Type.name };
    min_Int32x2.name = "min"_c;
    min_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&min_Int32x2_x)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&min_Int32x2_y)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&min_Int32x2)->returnTypeSymbol = &Int32x2Type;

    min_Int32x3_x.name = "x"_c;
    min_Int32x3_x.type = Type::FullType{ Int32x3Type.name };
    min_Int32x3_y.name = "y"_c;
    min_Int32x3_y.type = Type::FullType{ Int32x3Type.name };
    min_Int32x3.name = "min"_c;
    min_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&min_Int32x3_x)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&min_Int32x3_y)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&min_Int32x3)->returnTypeSymbol = &Int32x3Type;

    min_Int32x4_x.name = "x"_c;
    min_Int32x4_x.type = Type::FullType{ Int32x4Type.name };
    min_Int32x4_y.name = "y"_c;
    min_Int32x4_y.type = Type::FullType{ Int32x4Type.name };
    min_Int32x4.name = "min"_c;
    min_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&min_Int32x4_x)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&min_Int32x4_y)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&min_Int32x4)->returnTypeSymbol = &Int32x4Type;

    min_Int16_x.name = "x"_c;
    min_Int16_x.type = Type::FullType{ Int16Type.name };
    min_Int16_y.name = "y"_c;
    min_Int16_y.type = Type::FullType{ Int16Type.name };
    min_Int16.name = "min"_c;
    min_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&min_Int16_x)->typeSymbol = &Int16Type;
    Symbol::Resolved(&min_Int16_y)->typeSymbol = &Int16Type;
    Symbol::Resolved(&min_Int16)->returnTypeSymbol = &Int16Type;

    min_Int16x2_x.name = "x"_c;
    min_Int16x2_x.type = Type::FullType{ Int16x2Type.name };
    min_Int16x2_y.name = "y"_c;
    min_Int16x2_y.type = Type::FullType{ Int16x2Type.name };
    min_Int16x2.name = "min"_c;
    min_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&min_Int16x2_x)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&min_Int16x2_y)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&min_Int16x2)->returnTypeSymbol = &Int16x2Type;

    min_Int16x3_x.name = "x"_c;
    min_Int16x3_x.type = Type::FullType{ Int16x3Type.name };
    min_Int16x3_y.name = "y"_c;
    min_Int16x3_y.type = Type::FullType{ Int16x3Type.name };
    min_Int16x3.name = "min"_c;
    min_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&min_Int16x3_x)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&min_Int16x3_y)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&min_Int16x3)->returnTypeSymbol = &Int16x3Type;

    min_Int16x4_x.name = "x"_c;
    min_Int16x4_x.type = Type::FullType{ Int16x4Type.name };
    min_Int16x4_y.name = "y"_c;
    min_Int16x4_y.type = Type::FullType{ Int16x4Type.name };
    min_Int16x4.name = "min"_c;
    min_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&min_Int16x4_x)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&min_Int16x4_y)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&min_Int16x4)->returnTypeSymbol = &Int16x4Type;

    min_UInt32_x.name = "x"_c;
    min_UInt32_x.type = Type::FullType{ UInt32Type.name };
    min_UInt32_y.name = "y"_c;
    min_UInt32_y.type = Type::FullType{ UInt32Type.name };
    min_UInt32.name = "min"_c;
    min_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&min_UInt32_x)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&min_UInt32_y)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&min_UInt32)->returnTypeSymbol = &UInt32Type;

    min_UInt32x2_x.name = "x"_c;
    min_UInt32x2_x.type = Type::FullType{ UInt32x2Type.name };
    min_UInt32x2_y.name = "y"_c;
    min_UInt32x2_y.type = Type::FullType{ UInt32x2Type.name };
    min_UInt32x2.name = "min"_c;
    min_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&min_UInt32x2_x)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&min_UInt32x2_y)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&min_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    min_UInt32x3_x.name = "x"_c;
    min_UInt32x3_x.type = Type::FullType{ UInt32x3Type.name };
    min_UInt32x3_y.name = "y"_c;
    min_UInt32x3_y.type = Type::FullType{ UInt32x3Type.name };
    min_UInt32x3.name = "min"_c;
    min_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&min_UInt32x3_x)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&min_UInt32x3_y)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&min_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    min_UInt32x4_x.name = "x"_c;
    min_UInt32x4_x.type = Type::FullType{ UInt32x4Type.name };
    min_UInt32x4_y.name = "y"_c;
    min_UInt32x4_y.type = Type::FullType{ UInt32x4Type.name };
    min_UInt32x4.name = "min"_c;
    min_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&min_UInt32x4_x)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&min_UInt32x4_y)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&min_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    min_UInt16_x.name = "x"_c;
    min_UInt16_x.type = Type::FullType{ UInt16Type.name };
    min_UInt16_y.name = "y"_c;
    min_UInt16_y.type = Type::FullType{ UInt16Type.name };
    min_UInt16.name = "min"_c;
    min_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&min_UInt16_x)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&min_UInt16_y)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&min_UInt16)->returnTypeSymbol = &UInt16Type;

    min_UInt16x2_x.name = "x"_c;
    min_UInt16x2_x.type = Type::FullType{ UInt16x2Type.name };
    min_UInt16x2_y.name = "y"_c;
    min_UInt16x2_y.type = Type::FullType{ UInt16x2Type.name };
    min_UInt16x2.name = "min"_c;
    min_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&min_UInt16x2_x)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&min_UInt16x2_y)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&min_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    min_UInt16x3_x.name = "x"_c;
    min_UInt16x3_x.type = Type::FullType{ UInt16x3Type.name };
    min_UInt16x3_y.name = "y"_c;
    min_UInt16x3_y.type = Type::FullType{ UInt16x3Type.name };
    min_UInt16x3.name = "min"_c;
    min_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&min_UInt16x3_x)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&min_UInt16x3_y)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&min_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    min_UInt16x4_x.name = "x"_c;
    min_UInt16x4_x.type = Type::FullType{ UInt16x4Type.name };
    min_UInt16x4_y.name = "y"_c;
    min_UInt16x4_y.type = Type::FullType{ UInt16x4Type.name };
    min_UInt16x4.name = "min"_c;
    min_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&min_UInt16x4_x)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&min_UInt16x4_y)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&min_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    max_Float32_x.name = "x"_c;
    max_Float32_x.type = Type::FullType{ Float32Type.name };
    max_Float32_y.name = "y"_c;
    max_Float32_y.type = Type::FullType{ Float32Type.name };
    max_Float32.name = "max"_c;
    max_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&max_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&max_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&max_Float32)->returnTypeSymbol = &Float32Type;

    max_Float32x2_x.name = "x"_c;
    max_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    max_Float32x2_y.name = "y"_c;
    max_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    max_Float32x2.name = "max"_c;
    max_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&max_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&max_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&max_Float32x2)->returnTypeSymbol = &Float32x2Type;

    max_Float32x3_x.name = "x"_c;
    max_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    max_Float32x3_y.name = "y"_c;
    max_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    max_Float32x3.name = "max"_c;
    max_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&max_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&max_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&max_Float32x3)->returnTypeSymbol = &Float32x3Type;

    max_Float32x4_x.name = "x"_c;
    max_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    max_Float32x4_y.name = "y"_c;
    max_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    max_Float32x4.name = "max"_c;
    max_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&max_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&max_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&max_Float32x4)->returnTypeSymbol = &Float32x4Type;

    max_Float16_x.name = "x"_c;
    max_Float16_x.type = Type::FullType{ Float16Type.name };
    max_Float16_y.name = "y"_c;
    max_Float16_y.type = Type::FullType{ Float16Type.name };
    max_Float16.name = "max"_c;
    max_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&max_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&max_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&max_Float16)->returnTypeSymbol = &Float16Type;

    max_Float16x2_x.name = "x"_c;
    max_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    max_Float16x2_y.name = "y"_c;
    max_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    max_Float16x2.name = "max"_c;
    max_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&max_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&max_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&max_Float16x2)->returnTypeSymbol = &Float16x2Type;

    max_Float16x3_x.name = "x"_c;
    max_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    max_Float16x3_y.name = "y"_c;
    max_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    max_Float16x3.name = "max"_c;
    max_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&max_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&max_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&max_Float16x3)->returnTypeSymbol = &Float16x3Type;

    max_Float16x4_x.name = "x"_c;
    max_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    max_Float16x4_y.name = "y"_c;
    max_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    max_Float16x4.name = "max"_c;
    max_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&max_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&max_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&max_Float16x4)->returnTypeSymbol = &Float16x4Type;

    max_Int32_x.name = "x"_c;
    max_Int32_x.type = Type::FullType{ Int32Type.name };
    max_Int32_y.name = "y"_c;
    max_Int32_y.type = Type::FullType{ Int32Type.name };
    max_Int32.name = "max"_c;
    max_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&max_Int32_x)->typeSymbol = &Int32Type;
    Symbol::Resolved(&max_Int32_y)->typeSymbol = &Int32Type;
    Symbol::Resolved(&max_Int32)->returnTypeSymbol = &Int32Type;

    max_Int32x2_x.name = "x"_c;
    max_Int32x2_x.type = Type::FullType{ Int32x2Type.name };
    max_Int32x2_y.name = "y"_c;
    max_Int32x2_y.type = Type::FullType{ Int32x2Type.name };
    max_Int32x2.name = "max"_c;
    max_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&max_Int32x2_x)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&max_Int32x2_y)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&max_Int32x2)->returnTypeSymbol = &Int32x2Type;

    max_Int32x3_x.name = "x"_c;
    max_Int32x3_x.type = Type::FullType{ Int32x3Type.name };
    max_Int32x3_y.name = "y"_c;
    max_Int32x3_y.type = Type::FullType{ Int32x3Type.name };
    max_Int32x3.name = "max"_c;
    max_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&max_Int32x3_x)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&max_Int32x3_y)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&max_Int32x3)->returnTypeSymbol = &Int32x3Type;

    max_Int32x4_x.name = "x"_c;
    max_Int32x4_x.type = Type::FullType{ Int32x4Type.name };
    max_Int32x4_y.name = "y"_c;
    max_Int32x4_y.type = Type::FullType{ Int32x4Type.name };
    max_Int32x4.name = "max"_c;
    max_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&max_Int32x4_x)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&max_Int32x4_y)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&max_Int32x4)->returnTypeSymbol = &Int32x4Type;

    max_Int16_x.name = "x"_c;
    max_Int16_x.type = Type::FullType{ Int16Type.name };
    max_Int16_y.name = "y"_c;
    max_Int16_y.type = Type::FullType{ Int16Type.name };
    max_Int16.name = "max"_c;
    max_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&max_Int16_x)->typeSymbol = &Int16Type;
    Symbol::Resolved(&max_Int16_y)->typeSymbol = &Int16Type;
    Symbol::Resolved(&max_Int16)->returnTypeSymbol = &Int16Type;

    max_Int16x2_x.name = "x"_c;
    max_Int16x2_x.type = Type::FullType{ Int16x2Type.name };
    max_Int16x2_y.name = "y"_c;
    max_Int16x2_y.type = Type::FullType{ Int16x2Type.name };
    max_Int16x2.name = "max"_c;
    max_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&max_Int16x2_x)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&max_Int16x2_y)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&max_Int16x2)->returnTypeSymbol = &Int16x2Type;

    max_Int16x3_x.name = "x"_c;
    max_Int16x3_x.type = Type::FullType{ Int16x3Type.name };
    max_Int16x3_y.name = "y"_c;
    max_Int16x3_y.type = Type::FullType{ Int16x3Type.name };
    max_Int16x3.name = "max"_c;
    max_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&max_Int16x3_x)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&max_Int16x3_y)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&max_Int16x3)->returnTypeSymbol = &Int16x3Type;

    max_Int16x4_x.name = "x"_c;
    max_Int16x4_x.type = Type::FullType{ Int16x4Type.name };
    max_Int16x4_y.name = "y"_c;
    max_Int16x4_y.type = Type::FullType{ Int16x4Type.name };
    max_Int16x4.name = "max"_c;
    max_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&max_Int16x4_x)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&max_Int16x4_y)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&max_Int16x4)->returnTypeSymbol = &Int16x4Type;

    max_UInt32_x.name = "x"_c;
    max_UInt32_x.type = Type::FullType{ UInt32Type.name };
    max_UInt32_y.name = "y"_c;
    max_UInt32_y.type = Type::FullType{ UInt32Type.name };
    max_UInt32.name = "max"_c;
    max_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&max_UInt32_x)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&max_UInt32_y)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&max_UInt32)->returnTypeSymbol = &UInt32Type;

    max_UInt32x2_x.name = "x"_c;
    max_UInt32x2_x.type = Type::FullType{ UInt32x2Type.name };
    max_UInt32x2_y.name = "y"_c;
    max_UInt32x2_y.type = Type::FullType{ UInt32x2Type.name };
    max_UInt32x2.name = "max"_c;
    max_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&max_UInt32x2_x)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&max_UInt32x2_y)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&max_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    max_UInt32x3_x.name = "x"_c;
    max_UInt32x3_x.type = Type::FullType{ UInt32x3Type.name };
    max_UInt32x3_y.name = "y"_c;
    max_UInt32x3_y.type = Type::FullType{ UInt32x3Type.name };
    max_UInt32x3.name = "max"_c;
    max_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&max_UInt32x3_x)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&max_UInt32x3_y)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&max_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    max_UInt32x4_x.name = "x"_c;
    max_UInt32x4_x.type = Type::FullType{ UInt32x4Type.name };
    max_UInt32x4_y.name = "y"_c;
    max_UInt32x4_y.type = Type::FullType{ UInt32x4Type.name };
    max_UInt32x4.name = "max"_c;
    max_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&max_UInt32x4_x)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&max_UInt32x4_y)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&max_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    max_UInt16_x.name = "x"_c;
    max_UInt16_x.type = Type::FullType{ UInt16Type.name };
    max_UInt16_y.name = "y"_c;
    max_UInt16_y.type = Type::FullType{ UInt16Type.name };
    max_UInt16.name = "max"_c;
    max_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&max_UInt16_x)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&max_UInt16_y)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&max_UInt16)->returnTypeSymbol = &UInt16Type;

    max_UInt16x2_x.name = "x"_c;
    max_UInt16x2_x.type = Type::FullType{ UInt16x2Type.name };
    max_UInt16x2_y.name = "y"_c;
    max_UInt16x2_y.type = Type::FullType{ UInt16x2Type.name };
    max_UInt16x2.name = "max"_c;
    max_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&max_UInt16x2_x)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&max_UInt16x2_y)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&max_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    max_UInt16x3_x.name = "x"_c;
    max_UInt16x3_x.type = Type::FullType{ UInt16x3Type.name };
    max_UInt16x3_y.name = "y"_c;
    max_UInt16x3_y.type = Type::FullType{ UInt16x3Type.name };
    max_UInt16x3.name = "max"_c;
    max_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&max_UInt16x3_x)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&max_UInt16x3_y)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&max_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    max_UInt16x4_x.name = "x"_c;
    max_UInt16x4_x.type = Type::FullType{ UInt16x4Type.name };
    max_UInt16x4_y.name = "y"_c;
    max_UInt16x4_y.type = Type::FullType{ UInt16x4Type.name };
    max_UInt16x4.name = "max"_c;
    max_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&max_UInt16x4_x)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&max_UInt16x4_y)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&max_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    clamp_Float32_val.name = "val"_c;
    clamp_Float32_val.type = Type::FullType{ Float32Type.name };
    clamp_Float32_min.name = "min"_c;
    clamp_Float32_min.type = Type::FullType{ Float32Type.name };
    clamp_Float32_max.name = "max"_c;
    clamp_Float32_max.type = Type::FullType{ Float32Type.name };
    clamp_Float32.name = "clamp"_c;
    clamp_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&clamp_Float32_val)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32_min)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32_max)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32)->returnTypeSymbol = &Float32Type;

    clamp_Float32x2_val.name = "val"_c;
    clamp_Float32x2_val.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2_min.name = "min"_c;
    clamp_Float32x2_min.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2_max.name = "max"_c;
    clamp_Float32x2_max.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2.name = "clamp"_c;
    clamp_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&clamp_Float32x2_val)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2_min)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2_max)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    clamp_Float32x3_val.name = "val"_c;
    clamp_Float32x3_val.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3_min.name = "min"_c;
    clamp_Float32x3_min.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3_max.name = "max"_c;
    clamp_Float32x3_max.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3.name = "clamp"_c;
    clamp_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&clamp_Float32x3_val)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3_min)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3_max)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    clamp_Float32x4_val.name = "val"_c;
    clamp_Float32x4_val.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4_min.name = "min"_c;
    clamp_Float32x4_min.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4_max.name = "max"_c;
    clamp_Float32x4_max.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4.name = "clamp"_c;
    clamp_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&clamp_Float32x4_val)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4_min)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4_max)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    clamp_Float16_val.name = "val"_c;
    clamp_Float16_val.type = Type::FullType{ Float16Type.name };
    clamp_Float16_min.name = "min"_c;
    clamp_Float16_min.type = Type::FullType{ Float16Type.name };
    clamp_Float16_max.name = "max"_c;
    clamp_Float16_max.type = Type::FullType{ Float16Type.name };
    clamp_Float16.name = "clamp"_c;
    clamp_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&clamp_Float16_val)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16_min)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16_max)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16)->returnTypeSymbol = &Float16Type;

    clamp_Float16x2_val.name = "val"_c;
    clamp_Float16x2_val.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2_min.name = "min"_c;
    clamp_Float16x2_min.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2_max.name = "max"_c;
    clamp_Float16x2_max.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2.name = "clamp"_c;
    clamp_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&clamp_Float16x2_val)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2_min)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2_max)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    clamp_Float16x3_val.name = "val"_c;
    clamp_Float16x3_val.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3_min.name = "min"_c;
    clamp_Float16x3_min.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3_max.name = "max"_c;
    clamp_Float16x3_max.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3.name = "clamp"_c;
    clamp_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&clamp_Float16x3_val)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3_min)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3_max)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    clamp_Float16x4_val.name = "val"_c;
    clamp_Float16x4_val.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4_min.name = "min"_c;
    clamp_Float16x4_min.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4_max.name = "max"_c;
    clamp_Float16x4_max.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4.name = "clamp"_c;
    clamp_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&clamp_Float16x4_val)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4_min)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4_max)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    clamp_Int32_val.name = "val"_c;
    clamp_Int32_val.type = Type::FullType{ Int32Type.name };
    clamp_Int32_min.name = "min"_c;
    clamp_Int32_min.type = Type::FullType{ Int32Type.name };
    clamp_Int32_max.name = "max"_c;
    clamp_Int32_max.type = Type::FullType{ Int32Type.name };
    clamp_Int32.name = "clamp"_c;
    clamp_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&clamp_Int32_val)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32_min)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32_max)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32)->returnTypeSymbol = &Int32Type;

    clamp_Int32x2_val.name = "val"_c;
    clamp_Int32x2_val.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2_min.name = "min"_c;
    clamp_Int32x2_min.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2_max.name = "max"_c;
    clamp_Int32x2_max.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2.name = "clamp"_c;
    clamp_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&clamp_Int32x2_val)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2_min)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2_max)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32x2)->returnTypeSymbol = &Int32x2Type;

    clamp_Int32x3_val.name = "val"_c;
    clamp_Int32x3_val.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3_min.name = "min"_c;
    clamp_Int32x3_min.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3_max.name = "max"_c;
    clamp_Int32x3_max.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3.name = "clamp"_c;
    clamp_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&clamp_Int32x3_val)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3_min)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3_max)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32x3)->returnTypeSymbol = &Int32x3Type;

    clamp_Int32x4_val.name = "val"_c;
    clamp_Int32x4_val.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4_min.name = "min"_c;
    clamp_Int32x4_min.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4_max.name = "max"_c;
    clamp_Int32x4_max.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4.name = "clamp"_c;
    clamp_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&clamp_Int32x4_val)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4_min)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4_max)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32x4)->returnTypeSymbol = &Int32x4Type;

    clamp_Int16_val.name = "val"_c;
    clamp_Int16_val.type = Type::FullType{ Int16Type.name };
    clamp_Int16_min.name = "min"_c;
    clamp_Int16_min.type = Type::FullType{ Int16Type.name };
    clamp_Int16_max.name = "max"_c;
    clamp_Int16_max.type = Type::FullType{ Int16Type.name };
    clamp_Int16.name = "clamp"_c;
    clamp_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&clamp_Int16_val)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16_min)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16_max)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16)->returnTypeSymbol = &Int16Type;

    clamp_Int16x2_val.name = "val"_c;
    clamp_Int16x2_val.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2_min.name = "min"_c;
    clamp_Int16x2_min.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2_max.name = "max"_c;
    clamp_Int16x2_max.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2.name = "clamp"_c;
    clamp_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&clamp_Int16x2_val)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2_min)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2_max)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16x2)->returnTypeSymbol = &Int16x2Type;

    clamp_Int16x3_val.name = "val"_c;
    clamp_Int16x3_val.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3_min.name = "min"_c;
    clamp_Int16x3_min.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3_max.name = "max"_c;
    clamp_Int16x3_max.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3.name = "clamp"_c;
    clamp_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&clamp_Int16x3_val)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3_min)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3_max)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16x3)->returnTypeSymbol = &Int16x3Type;

    clamp_Int16x4_val.name = "val"_c;
    clamp_Int16x4_val.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4_min.name = "min"_c;
    clamp_Int16x4_min.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4_max.name = "max"_c;
    clamp_Int16x4_max.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4.name = "clamp"_c;
    clamp_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&clamp_Int16x4_val)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4_min)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4_max)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16x4)->returnTypeSymbol = &Int16x4Type;

    clamp_UInt32_val.name = "val"_c;
    clamp_UInt32_val.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32_min.name = "min"_c;
    clamp_UInt32_min.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32_max.name = "max"_c;
    clamp_UInt32_max.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32.name = "clamp"_c;
    clamp_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&clamp_UInt32_val)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32_min)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32_max)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32)->returnTypeSymbol = &UInt32Type;

    clamp_UInt32x2_val.name = "val"_c;
    clamp_UInt32x2_val.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2_min.name = "min"_c;
    clamp_UInt32x2_min.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2_max.name = "max"_c;
    clamp_UInt32x2_max.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2.name = "clamp"_c;
    clamp_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&clamp_UInt32x2_val)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2_min)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2_max)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    clamp_UInt32x3_val.name = "val"_c;
    clamp_UInt32x3_val.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3_min.name = "min"_c;
    clamp_UInt32x3_min.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3_max.name = "max"_c;
    clamp_UInt32x3_max.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3.name = "clamp"_c;
    clamp_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&clamp_UInt32x3_val)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3_min)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3_max)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    clamp_UInt32x4_val.name = "val"_c;
    clamp_UInt32x4_val.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4_min.name = "min"_c;
    clamp_UInt32x4_min.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4_max.name = "max"_c;
    clamp_UInt32x4_max.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4.name = "clamp"_c;
    clamp_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&clamp_UInt32x4_val)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4_min)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4_max)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    clamp_UInt16_val.name = "val"_c;
    clamp_UInt16_val.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16_min.name = "min"_c;
    clamp_UInt16_min.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16_max.name = "max"_c;
    clamp_UInt16_max.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16.name = "clamp"_c;
    clamp_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&clamp_UInt16_val)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16_min)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16_max)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16)->returnTypeSymbol = &UInt16Type;

    clamp_UInt16x2_val.name = "val"_c;
    clamp_UInt16x2_val.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2_min.name = "min"_c;
    clamp_UInt16x2_min.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2_max.name = "max"_c;
    clamp_UInt16x2_max.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2.name = "clamp"_c;
    clamp_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&clamp_UInt16x2_val)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2_min)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2_max)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    clamp_UInt16x3_val.name = "val"_c;
    clamp_UInt16x3_val.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3_min.name = "min"_c;
    clamp_UInt16x3_min.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3_max.name = "max"_c;
    clamp_UInt16x3_max.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3.name = "clamp"_c;
    clamp_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&clamp_UInt16x3_val)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3_min)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3_max)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    clamp_UInt16x4_val.name = "val"_c;
    clamp_UInt16x4_val.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4_min.name = "min"_c;
    clamp_UInt16x4_min.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4_max.name = "max"_c;
    clamp_UInt16x4_max.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4.name = "clamp"_c;
    clamp_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&clamp_UInt16x4_val)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4_min)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4_max)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    lerp_Float32x2_a.name = "a"_c;
    lerp_Float32x2_a.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2_b.name = "b"_c;
    lerp_Float32x2_b.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2_t.name = "t"_c;
    lerp_Float32x2_t.type = Type::FullType{ Float32Type.name };
    lerp_Float32x2.name = "lerp"_c;
    lerp_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&lerp_Float32x2_a)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2_b)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2_t)->typeSymbol = &Float32Type;
    Symbol::Resolved(&lerp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    lerp_Float32x3_a.name = "a"_c;
    lerp_Float32x3_a.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3_b.name = "b"_c;
    lerp_Float32x3_b.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3_t.name = "t"_c;
    lerp_Float32x3_t.type = Type::FullType{ Float32Type.name };
    lerp_Float32x3.name = "lerp"_c;
    lerp_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&lerp_Float32x3_a)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3_b)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3_t)->typeSymbol = &Float32Type;
    Symbol::Resolved(&lerp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    lerp_Float32x4_a.name = "a"_c;
    lerp_Float32x4_a.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4_b.name = "b"_c;
    lerp_Float32x4_b.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4_t.name = "t"_c;
    lerp_Float32x4_t.type = Type::FullType{ Float32Type.name };
    lerp_Float32x4.name = "lerp"_c;
    lerp_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&lerp_Float32x4_a)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4_b)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4_t)->typeSymbol = &Float32Type;
    Symbol::Resolved(&lerp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    lerp_Float16x2_a.name = "a"_c;
    lerp_Float16x2_a.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2_b.name = "b"_c;
    lerp_Float16x2_b.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2_t.name = "t"_c;
    lerp_Float16x2_t.type = Type::FullType{ Float16Type.name };
    lerp_Float16x2.name = "lerp"_c;
    lerp_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&lerp_Float16x2_a)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2_b)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2_t)->typeSymbol = &Float16Type;
    Symbol::Resolved(&lerp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    lerp_Float16x3_a.name = "a"_c;
    lerp_Float16x3_a.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3_b.name = "b"_c;
    lerp_Float16x3_b.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3_t.name = "t"_c;
    lerp_Float16x3_t.type = Type::FullType{ Float16Type.name };
    lerp_Float16x3.name = "lerp"_c;
    lerp_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&lerp_Float16x3_a)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3_b)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3_t)->typeSymbol = &Float16Type;
    Symbol::Resolved(&lerp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    lerp_Float16x4_a.name = "a"_c;
    lerp_Float16x4_a.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4_b.name = "b"_c;
    lerp_Float16x4_b.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4_t.name = "t"_c;
    lerp_Float16x4_t.type = Type::FullType{ Float16Type.name };
    lerp_Float16x4.name = "lerp"_c;
    lerp_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&lerp_Float16x4_a)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4_b)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4_t)->typeSymbol = &Float16Type;
    Symbol::Resolved(&lerp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    step_Float32_edge.name = "edge"_c;
    step_Float32_edge.type = Type::FullType{ Float32Type.name };
    step_Float32_x.name = "x"_c;
    step_Float32_x.type = Type::FullType{ Float32Type.name };
    step_Float32.name = "step"_c;
    step_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&step_Float32_edge)->typeSymbol = &Float32Type;
    Symbol::Resolved(&step_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&step_Float32)->returnTypeSymbol = &Float32Type;

    step_Float32x2_edge.name = "edge"_c;
    step_Float32x2_edge.type = Type::FullType{ Float32x2Type.name };
    step_Float32x2_x.name = "x"_c;
    step_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    step_Float32x2.name = "step"_c;
    step_Float32x2.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&step_Float32x2_edge)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&step_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&step_Float32x2)->returnTypeSymbol = &Float32x2Type;

    step_Float32x3_edge.name = "edge"_c;
    step_Float32x3_edge.type = Type::FullType{ Float32x3Type.name };
    step_Float32x3_x.name = "x"_c;
    step_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    step_Float32x3.name = "step"_c;
    step_Float32x3.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&step_Float32x3_edge)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&step_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&step_Float32x3)->returnTypeSymbol = &Float32x3Type;

    step_Float32x4_edge.name = "edge"_c;
    step_Float32x4_edge.type = Type::FullType{ Float32x4Type.name };
    step_Float32x4_x.name = "x"_c;
    step_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    step_Float32x4.name = "step"_c;
    step_Float32x4.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&step_Float32x4_edge)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&step_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&step_Float32x4)->returnTypeSymbol = &Float32x4Type;

    step_Float16_edge.name = "edge"_c;
    step_Float16_edge.type = Type::FullType{ Float16Type.name };
    step_Float16_x.name = "x"_c;
    step_Float16_x.type = Type::FullType{ Float16Type.name };
    step_Float16.name = "step"_c;
    step_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&step_Float16_edge)->typeSymbol = &Float16Type;
    Symbol::Resolved(&step_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&step_Float16)->returnTypeSymbol = &Float16Type;

    step_Float16x2_edge.name = "edge"_c;
    step_Float16x2_edge.type = Type::FullType{ Float16x2Type.name };
    step_Float16x2_x.name = "x"_c;
    step_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    step_Float16x2.name = "step"_c;
    step_Float16x2.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&step_Float16x2_edge)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&step_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&step_Float16x2)->returnTypeSymbol = &Float16x2Type;

    step_Float16x3_edge.name = "edge"_c;
    step_Float16x3_edge.type = Type::FullType{ Float16x3Type.name };
    step_Float16x3_x.name = "x"_c;
    step_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    step_Float16x3.name = "step"_c;
    step_Float16x3.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&step_Float16x3_edge)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&step_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&step_Float16x3)->returnTypeSymbol = &Float16x3Type;

    step_Float16x4_edge.name = "edge"_c;
    step_Float16x4_edge.type = Type::FullType{ Float16x4Type.name };
    step_Float16x4_x.name = "x"_c;
    step_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    step_Float16x4.name = "step"_c;
    step_Float16x4.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&step_Float16x4_edge)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&step_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&step_Float16x4)->returnTypeSymbol = &Float16x4Type;

    smoothstep_Float32_edge0.name = "edge0"_c;
    smoothstep_Float32_edge0.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32_edge1.name = "edge1"_c;
    smoothstep_Float32_edge1.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32_x.name = "x"_c;
    smoothstep_Float32_x.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32.name = "smoothstep"_c;
    smoothstep_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&smoothstep_Float32_edge0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32_edge1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32)->returnTypeSymbol = &Float32Type;

    smoothstep_Float32x2_edge0.name = "edge0"_c;
    smoothstep_Float32x2_edge0.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2_edge1.name = "edge1"_c;
    smoothstep_Float32x2_edge1.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2_x.name = "x"_c;
    smoothstep_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2.name = "smoothstep"_c;
    smoothstep_Float32x2.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&smoothstep_Float32x2_edge0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2_edge1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2)->returnTypeSymbol = &Float32x2Type;

    smoothstep_Float32x3_edge0.name = "edge0"_c;
    smoothstep_Float32x3_edge0.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3_edge1.name = "edge1"_c;
    smoothstep_Float32x3_edge1.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3_x.name = "x"_c;
    smoothstep_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3.name = "smoothstep"_c;
    smoothstep_Float32x3.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&smoothstep_Float32x3_edge0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3_edge1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3)->returnTypeSymbol = &Float32x3Type;

    smoothstep_Float32x4_edge0.name = "edge0"_c;
    smoothstep_Float32x4_edge0.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4_edge1.name = "edge1"_c;
    smoothstep_Float32x4_edge1.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4_x.name = "x"_c;
    smoothstep_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4.name = "smoothstep"_c;
    smoothstep_Float32x4.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&smoothstep_Float32x4_edge0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4_edge1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4)->returnTypeSymbol = &Float32x4Type;

    smoothstep_Float16_edge0.name = "edge0"_c;
    smoothstep_Float16_edge0.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16_edge1.name = "edge1"_c;
    smoothstep_Float16_edge1.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16_x.name = "x"_c;
    smoothstep_Float16_x.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16.name = "smoothstep"_c;
    smoothstep_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&smoothstep_Float16_edge0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16_edge1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16)->returnTypeSymbol = &Float16Type;

    smoothstep_Float16x2_edge0.name = "edge0"_c;
    smoothstep_Float16x2_edge0.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2_edge1.name = "edge1"_c;
    smoothstep_Float16x2_edge1.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2_x.name = "x"_c;
    smoothstep_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2.name = "smoothstep"_c;
    smoothstep_Float16x2.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&smoothstep_Float16x2_edge0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2_edge1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2)->returnTypeSymbol = &Float16x2Type;

    smoothstep_Float16x3_edge0.name = "edge0"_c;
    smoothstep_Float16x3_edge0.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3_edge1.name = "edge1"_c;
    smoothstep_Float16x3_edge1.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3_x.name = "x"_c;
    smoothstep_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3.name = "smoothstep"_c;
    smoothstep_Float16x3.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&smoothstep_Float16x3_edge0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3_edge1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3)->returnTypeSymbol = &Float16x3Type;

    smoothstep_Float16x4_edge0.name = "edge0"_c;
    smoothstep_Float16x4_edge0.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4_edge1.name = "edge1"_c;
    smoothstep_Float16x4_edge1.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4_x.name = "x"_c;
    smoothstep_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4.name = "smoothstep"_c;
    smoothstep_Float16x4.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&smoothstep_Float16x4_edge0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4_edge1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4)->returnTypeSymbol = &Float16x4Type;

    ceil_Float32_arg.name = "val"_c;
    ceil_Float32_arg.type = Type::FullType{ Float32Type.name };
    ceil_Float32.name = "ceil"_c;
    ceil_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&ceil_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ceil_Float32)->returnTypeSymbol = &Float32Type;

    ceil_Float32x2_arg.name = "val"_c;
    ceil_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ceil_Float32x2.name = "ceil"_c;
    ceil_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&ceil_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ceil_Float32x2)->returnTypeSymbol = &Float32x2Type;

    ceil_Float32x3_arg.name = "val"_c;
    ceil_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ceil_Float32x3.name = "ceil"_c;
    ceil_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&ceil_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ceil_Float32x3)->returnTypeSymbol = &Float32x3Type;

    ceil_Float32x4_arg.name = "val"_c;
    ceil_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ceil_Float32x4.name = "ceil"_c;
    ceil_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&ceil_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ceil_Float32x4)->returnTypeSymbol = &Float32x4Type;

    ceil_Float16_arg.name = "val"_c;
    ceil_Float16_arg.type = Type::FullType{ Float16Type.name };
    ceil_Float16.name = "ceil"_c;
    ceil_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&ceil_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ceil_Float16)->returnTypeSymbol = &Float16Type;

    ceil_Float16x2_arg.name = "val"_c;
    ceil_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ceil_Float16x2.name = "ceil"_c;
    ceil_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&ceil_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ceil_Float16x2)->returnTypeSymbol = &Float16x2Type;

    ceil_Float16x3_arg.name = "val"_c;
    ceil_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ceil_Float16x3.name = "ceil"_c;
    ceil_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&ceil_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ceil_Float16x3)->returnTypeSymbol = &Float16x3Type;

    ceil_Float16x4_arg.name = "val"_c;
    ceil_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ceil_Float16x4.name = "ceil"_c;
    ceil_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&ceil_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ceil_Float16x4)->returnTypeSymbol = &Float16x4Type;

    floor_Float32_arg.name = "val"_c;
    floor_Float32_arg.type = Type::FullType{ Float32Type.name };
    floor_Float32.name = "floor"_c;
    floor_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&floor_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&floor_Float32)->returnTypeSymbol = &Float32Type;

    floor_Float32x2_arg.name = "val"_c;
    floor_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    floor_Float32x2.name = "floor"_c;
    floor_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&floor_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&floor_Float32x2)->returnTypeSymbol = &Float32x2Type;

    floor_Float32x3_arg.name = "val"_c;
    floor_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    floor_Float32x3.name = "floor"_c;
    floor_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&floor_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&floor_Float32x3)->returnTypeSymbol = &Float32x3Type;

    floor_Float32x4_arg.name = "val"_c;
    floor_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    floor_Float32x4.name = "floor"_c;
    floor_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&floor_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&floor_Float32x4)->returnTypeSymbol = &Float32x4Type;

    floor_Float16_arg.name = "val"_c;
    floor_Float16_arg.type = Type::FullType{ Float16Type.name };
    floor_Float16.name = "floor"_c;
    floor_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&floor_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&floor_Float16)->returnTypeSymbol = &Float16Type;

    floor_Float16x2_arg.name = "val"_c;
    floor_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    floor_Float16x2.name = "floor"_c;
    floor_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&floor_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&floor_Float16x2)->returnTypeSymbol = &Float16x2Type;

    floor_Float16x3_arg.name = "val"_c;
    floor_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    floor_Float16x3.name = "floor"_c;
    floor_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&floor_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&floor_Float16x3)->returnTypeSymbol = &Float16x3Type;

    floor_Float16x4_arg.name = "val"_c;
    floor_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    floor_Float16x4.name = "floor"_c;
    floor_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&floor_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&floor_Float16x4)->returnTypeSymbol = &Float16x4Type;

    fract_Float32_arg.name = "val"_c;
    fract_Float32_arg.type = Type::FullType{ Float32Type.name };
    fract_Float32.name = "fract"_c;
    fract_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&fract_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&fract_Float32)->returnTypeSymbol = &Float32Type;

    fract_Float32x2_arg.name = "val"_c;
    fract_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    fract_Float32x2.name = "fract"_c;
    fract_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&fract_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&fract_Float32x2)->returnTypeSymbol = &Float32x2Type;

    fract_Float32x3_arg.name = "val"_c;
    fract_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    fract_Float32x3.name = "fract"_c;
    fract_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&fract_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&fract_Float32x3)->returnTypeSymbol = &Float32x3Type;

    fract_Float32x4_arg.name = "val"_c;
    fract_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    fract_Float32x4.name = "fract"_c;
    fract_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&fract_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&fract_Float32x4)->returnTypeSymbol = &Float32x4Type;

    fract_Float16_arg.name = "val"_c;
    fract_Float16_arg.type = Type::FullType{ Float16Type.name };
    fract_Float16.name = "fract"_c;
    fract_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&fract_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&fract_Float16)->returnTypeSymbol = &Float16Type;

    fract_Float16x2_arg.name = "val"_c;
    fract_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    fract_Float16x2.name = "fract"_c;
    fract_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&fract_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&fract_Float16x2)->returnTypeSymbol = &Float16x2Type;

    fract_Float16x3_arg.name = "val"_c;
    fract_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    fract_Float16x3.name = "fract"_c;
    fract_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&fract_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&fract_Float16x3)->returnTypeSymbol = &Float16x3Type;

    fract_Float16x4_arg.name = "val"_c;
    fract_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    fract_Float16x4.name = "fract"_c;
    fract_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&fract_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&fract_Float16x4)->returnTypeSymbol = &Float16x4Type;

    saturate_Float32_arg.name = "val"_c;
    saturate_Float32_arg.type = Type::FullType{ Float32Type.name };
    saturate_Float32.name = "saturate"_c;
    saturate_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&saturate_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&saturate_Float32)->returnTypeSymbol = &Float32Type;

    saturate_Float32x2_arg.name = "val"_c;
    saturate_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    saturate_Float32x2.name = "saturate"_c;
    saturate_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&saturate_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&saturate_Float32x2)->returnTypeSymbol = &Float32x2Type;

    saturate_Float32x3_arg.name = "val"_c;
    saturate_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    saturate_Float32x3.name = "saturate"_c;
    saturate_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&saturate_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&saturate_Float32x3)->returnTypeSymbol = &Float32x3Type;

    saturate_Float32x4_arg.name = "val"_c;
    saturate_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    saturate_Float32x4.name = "saturate"_c;
    saturate_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&saturate_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&saturate_Float32x4)->returnTypeSymbol = &Float32x4Type;

    saturate_Float16_arg.name = "val"_c;
    saturate_Float16_arg.type = Type::FullType{ Float16Type.name };
    saturate_Float16.name = "saturate"_c;
    saturate_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&saturate_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&saturate_Float16)->returnTypeSymbol = &Float16Type;

    saturate_Float16x2_arg.name = "val"_c;
    saturate_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    saturate_Float16x2.name = "saturate"_c;
    saturate_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&saturate_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&saturate_Float16x2)->returnTypeSymbol = &Float16x2Type;

    saturate_Float16x3_arg.name = "val"_c;
    saturate_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    saturate_Float16x3.name = "saturate"_c;
    saturate_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&saturate_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&saturate_Float16x3)->returnTypeSymbol = &Float16x3Type;

    saturate_Float16x4_arg.name = "val"_c;
    saturate_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    saturate_Float16x4.name = "saturate"_c;
    saturate_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&saturate_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&saturate_Float16x4)->returnTypeSymbol = &Float16x4Type;

    trunc_Float32_arg.name = "val"_c;
    trunc_Float32_arg.type = Type::FullType{ Float32Type.name };
    trunc_Float32.name = "trunc"_c;
    trunc_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&trunc_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&trunc_Float32)->returnTypeSymbol = &Float32Type;

    trunc_Float32x2_arg.name = "val"_c;
    trunc_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    trunc_Float32x2.name = "trunc"_c;
    trunc_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&trunc_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&trunc_Float32x2)->returnTypeSymbol = &Float32x2Type;

    trunc_Float32x3_arg.name = "val"_c;
    trunc_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    trunc_Float32x3.name = "trunc"_c;
    trunc_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&trunc_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&trunc_Float32x3)->returnTypeSymbol = &Float32x3Type;

    trunc_Float32x4_arg.name = "val"_c;
    trunc_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    trunc_Float32x4.name = "trunc"_c;
    trunc_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&trunc_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&trunc_Float32x4)->returnTypeSymbol = &Float32x4Type;

    trunc_Float16_arg.name = "val"_c;
    trunc_Float16_arg.type = Type::FullType{ Float16Type.name };
    trunc_Float16.name = "trunc"_c;
    trunc_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&trunc_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&trunc_Float16)->returnTypeSymbol = &Float16Type;

    trunc_Float16x2_arg.name = "val"_c;
    trunc_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    trunc_Float16x2.name = "trunc"_c;
    trunc_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&trunc_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&trunc_Float16x2)->returnTypeSymbol = &Float16x2Type;

    trunc_Float16x3_arg.name = "val"_c;
    trunc_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    trunc_Float16x3.name = "trunc"_c;
    trunc_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&trunc_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&trunc_Float16x3)->returnTypeSymbol = &Float16x3Type;

    trunc_Float16x4_arg.name = "val"_c;
    trunc_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    trunc_Float16x4.name = "trunc"_c;
    trunc_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&trunc_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&trunc_Float16x4)->returnTypeSymbol = &Float16x4Type;

    ddx_Float32_arg.name = "val"_c;
    ddx_Float32_arg.type = Type::FullType{ Float32Type.name };
    ddx_Float32.name = "ddx"_c;
    ddx_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&ddx_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ddx_Float32)->returnTypeSymbol = &Float32Type;

    ddx_Float32x2_arg.name = "val"_c;
    ddx_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ddx_Float32x2.name = "ddx"_c;
    ddx_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&ddx_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ddx_Float32x2)->returnTypeSymbol = &Float32x2Type;

    ddx_Float32x3_arg.name = "val"_c;
    ddx_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ddx_Float32x3.name = "ddx"_c;
    ddx_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&ddx_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ddx_Float32x3)->returnTypeSymbol = &Float32x3Type;

    ddx_Float32x4_arg.name = "val"_c;
    ddx_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ddx_Float32x4.name = "ddx"_c;
    ddx_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&ddx_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ddx_Float32x4)->returnTypeSymbol = &Float32x4Type;

    ddx_Float16_arg.name = "val"_c;
    ddx_Float16_arg.type = Type::FullType{ Float16Type.name };
    ddx_Float16.name = "ddx"_c;
    ddx_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&ddx_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ddx_Float16)->returnTypeSymbol = &Float16Type;

    ddx_Float16x2_arg.name = "val"_c;
    ddx_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ddx_Float16x2.name = "ddx"_c;
    ddx_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&ddx_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ddx_Float16x2)->returnTypeSymbol = &Float16x2Type;

    ddx_Float16x3_arg.name = "val"_c;
    ddx_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ddx_Float16x3.name = "ddx"_c;
    ddx_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&ddx_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ddx_Float16x3)->returnTypeSymbol = &Float16x3Type;

    ddx_Float16x4_arg.name = "val"_c;
    ddx_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ddx_Float16x4.name = "ddx"_c;
    ddx_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&ddx_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ddx_Float16x4)->returnTypeSymbol = &Float16x4Type;

    ddy_Float32_arg.name = "val"_c;
    ddy_Float32_arg.type = Type::FullType{ Float32Type.name };
    ddy_Float32.name = "ddy"_c;
    ddy_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&ddy_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ddy_Float32)->returnTypeSymbol = &Float32Type;

    ddy_Float32x2_arg.name = "val"_c;
    ddy_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ddy_Float32x2.name = "ddy"_c;
    ddy_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&ddy_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ddy_Float32x2)->returnTypeSymbol = &Float32x2Type;

    ddy_Float32x3_arg.name = "val"_c;
    ddy_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ddy_Float32x3.name = "ddy"_c;
    ddy_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&ddy_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ddy_Float32x3)->returnTypeSymbol = &Float32x3Type;

    ddy_Float32x4_arg.name = "val"_c;
    ddy_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ddy_Float32x4.name = "ddy"_c;
    ddy_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&ddy_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ddy_Float32x4)->returnTypeSymbol = &Float32x4Type;

    ddy_Float16_arg.name = "val"_c;
    ddy_Float16_arg.type = Type::FullType{ Float16Type.name };
    ddy_Float16.name = "ddy"_c;
    ddy_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&ddy_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ddy_Float16)->returnTypeSymbol = &Float16Type;

    ddy_Float16x2_arg.name = "val"_c;
    ddy_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ddy_Float16x2.name = "ddy"_c;
    ddy_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&ddy_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ddy_Float16x2)->returnTypeSymbol = &Float16x2Type;

    ddy_Float16x3_arg.name = "val"_c;
    ddy_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ddy_Float16x3.name = "ddy"_c;
    ddy_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&ddy_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ddy_Float16x3)->returnTypeSymbol = &Float16x3Type;

    ddy_Float16x4_arg.name = "val"_c;
    ddy_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ddy_Float16x4.name = "ddy"_c;
    ddy_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&ddy_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ddy_Float16x4)->returnTypeSymbol = &Float16x4Type;

    fwidth_Float32_arg.name = "val"_c;
    fwidth_Float32_arg.type = Type::FullType{ Float32Type.name };
    fwidth_Float32.name = "fwidth"_c;
    fwidth_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&fwidth_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&fwidth_Float32)->returnTypeSymbol = &Float32Type;

    fwidth_Float32x2_arg.name = "val"_c;
    fwidth_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    fwidth_Float32x2.name = "fwidth"_c;
    fwidth_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&fwidth_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&fwidth_Float32x2)->returnTypeSymbol = &Float32x2Type;

    fwidth_Float32x3_arg.name = "val"_c;
    fwidth_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    fwidth_Float32x3.name = "fwidth"_c;
    fwidth_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&fwidth_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&fwidth_Float32x3)->returnTypeSymbol = &Float32x3Type;

    fwidth_Float32x4_arg.name = "val"_c;
    fwidth_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    fwidth_Float32x4.name = "fwidth"_c;
    fwidth_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&fwidth_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&fwidth_Float32x4)->returnTypeSymbol = &Float32x4Type;

    fwidth_Float16_arg.name = "val"_c;
    fwidth_Float16_arg.type = Type::FullType{ Float16Type.name };
    fwidth_Float16.name = "fwidth"_c;
    fwidth_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&fwidth_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&fwidth_Float16)->returnTypeSymbol = &Float16Type;

    fwidth_Float16x2_arg.name = "val"_c;
    fwidth_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    fwidth_Float16x2.name = "fwidth"_c;
    fwidth_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&fwidth_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&fwidth_Float16x2)->returnTypeSymbol = &Float16x2Type;

    fwidth_Float16x3_arg.name = "val"_c;
    fwidth_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    fwidth_Float16x3.name = "fwidth"_c;
    fwidth_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&fwidth_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&fwidth_Float16x3)->returnTypeSymbol = &Float16x3Type;

    fwidth_Float16x4_arg.name = "val"_c;
    fwidth_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    fwidth_Float16x4.name = "fwidth"_c;
    fwidth_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&fwidth_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&fwidth_Float16x4)->returnTypeSymbol = &Float16x4Type;

    sign_Int32_arg.name = "val"_c;
    sign_Int32_arg.type = Type::FullType{ Int32Type.name };
    sign_Int32.name = "sign"_c;
    sign_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&sign_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&sign_Int32)->returnTypeSymbol = &Int32Type;

    sign_Int32x2_arg.name = "val"_c;
    sign_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    sign_Int32x2.name = "sign"_c;
    sign_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&sign_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&sign_Int32x2)->returnTypeSymbol = &Int32x2Type;

    sign_Int32x3_arg.name = "val"_c;
    sign_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    sign_Int32x3.name = "sign"_c;
    sign_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&sign_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&sign_Int32x3)->returnTypeSymbol = &Int32x3Type;

    sign_Int32x4_arg.name = "val"_c;
    sign_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    sign_Int32x4.name = "sign"_c;
    sign_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&sign_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&sign_Int32x4)->returnTypeSymbol = &Int32x4Type;

    sign_Int16_arg.name = "val"_c;
    sign_Int16_arg.type = Type::FullType{ Int16Type.name };
    sign_Int16.name = "sign"_c;
    sign_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&sign_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&sign_Int16)->returnTypeSymbol = &Int16Type;

    sign_Int16x2_arg.name = "val"_c;
    sign_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    sign_Int16x2.name = "sign"_c;
    sign_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&sign_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&sign_Int16x2)->returnTypeSymbol = &Int16x2Type;

    sign_Int16x3_arg.name = "val"_c;
    sign_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    sign_Int16x3.name = "sign"_c;
    sign_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&sign_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&sign_Int16x3)->returnTypeSymbol = &Int16x3Type;

    sign_Int16x4_arg.name = "val"_c;
    sign_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    sign_Int16x4.name = "sign"_c;
    sign_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&sign_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&sign_Int16x4)->returnTypeSymbol = &Int16x4Type;

    sign_Float32_arg.name = "val"_c;
    sign_Float32_arg.type = Type::FullType{ Float32Type.name };
    sign_Float32.name = "sign"_c;
    sign_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&sign_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sign_Float32)->returnTypeSymbol = &Float32Type;

    sign_Float32x2_arg.name = "val"_c;
    sign_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sign_Float32x2.name = "sign"_c;
    sign_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&sign_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sign_Float32x2)->returnTypeSymbol = &Float32x2Type;

    sign_Float32x3_arg.name = "val"_c;
    sign_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sign_Float32x3.name = "sign"_c;
    sign_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&sign_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sign_Float32x3)->returnTypeSymbol = &Float32x3Type;

    sign_Float32x4_arg.name = "val"_c;
    sign_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sign_Float32x4.name = "sign"_c;
    sign_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&sign_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sign_Float32x4)->returnTypeSymbol = &Float32x4Type;

    sign_Float16_arg.name = "val"_c;
    sign_Float16_arg.type = Type::FullType{ Float16Type.name };
    sign_Float16.name = "sign"_c;
    sign_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&sign_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sign_Float16)->returnTypeSymbol = &Float16Type;

    sign_Float16x2_arg.name = "val"_c;
    sign_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sign_Float16x2.name = "sign"_c;
    sign_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&sign_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sign_Float16x2)->returnTypeSymbol = &Float16x2Type;

    sign_Float16x3_arg.name = "val"_c;
    sign_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sign_Float16x3.name = "sign"_c;
    sign_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&sign_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sign_Float16x3)->returnTypeSymbol = &Float16x3Type;

    sign_Float16x4_arg.name = "val"_c;
    sign_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sign_Float16x4.name = "sign"_c;
    sign_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&sign_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sign_Float16x4)->returnTypeSymbol = &Float16x4Type;

    abs_Int32_arg.name = "val"_c;
    abs_Int32_arg.type = Type::FullType{ Int32Type.name };
    abs_Int32.name = "abs"_c;
    abs_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&abs_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&abs_Int32)->returnTypeSymbol = &Int32Type;

    abs_Int32x2_arg.name = "val"_c;
    abs_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    abs_Int32x2.name = "abs"_c;
    abs_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&abs_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&abs_Int32x2)->returnTypeSymbol = &Int32x2Type;

    abs_Int32x3_arg.name = "val"_c;
    abs_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    abs_Int32x3.name = "abs"_c;
    abs_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&abs_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&abs_Int32x3)->returnTypeSymbol = &Int32x3Type;

    abs_Int32x4_arg.name = "val"_c;
    abs_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    abs_Int32x4.name = "abs"_c;
    abs_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&abs_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&abs_Int32x4)->returnTypeSymbol = &Int32x4Type;

    abs_Int16_arg.name = "val"_c;
    abs_Int16_arg.type = Type::FullType{ Int16Type.name };
    abs_Int16.name = "abs"_c;
    abs_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&abs_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&abs_Int16)->returnTypeSymbol = &Int16Type;

    abs_Int16x2_arg.name = "val"_c;
    abs_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    abs_Int16x2.name = "abs"_c;
    abs_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&abs_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&abs_Int16x2)->returnTypeSymbol = &Int16x2Type;

    abs_Int16x3_arg.name = "val"_c;
    abs_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    abs_Int16x3.name = "abs"_c;
    abs_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&abs_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&abs_Int16x3)->returnTypeSymbol = &Int16x3Type;

    abs_Int16x4_arg.name = "val"_c;
    abs_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    abs_Int16x4.name = "abs"_c;
    abs_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&abs_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&abs_Int16x4)->returnTypeSymbol = &Int16x4Type;

    abs_Float32_arg.name = "val"_c;
    abs_Float32_arg.type = Type::FullType{ Float32Type.name };
    abs_Float32.name = "abs"_c;
    abs_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&abs_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&abs_Float32)->returnTypeSymbol = &Float32Type;

    abs_Float32x2_arg.name = "val"_c;
    abs_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    abs_Float32x2.name = "abs"_c;
    abs_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&abs_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&abs_Float32x2)->returnTypeSymbol = &Float32x2Type;

    abs_Float32x3_arg.name = "val"_c;
    abs_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    abs_Float32x3.name = "abs"_c;
    abs_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&abs_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&abs_Float32x3)->returnTypeSymbol = &Float32x3Type;

    abs_Float32x4_arg.name = "val"_c;
    abs_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    abs_Float32x4.name = "abs"_c;
    abs_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&abs_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&abs_Float32x4)->returnTypeSymbol = &Float32x4Type;

    abs_Float16_arg.name = "val"_c;
    abs_Float16_arg.type = Type::FullType{ Float16Type.name };
    abs_Float16.name = "abs"_c;
    abs_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&abs_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&abs_Float16)->returnTypeSymbol = &Float16Type;

    abs_Float16x2_arg.name = "val"_c;
    abs_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    abs_Float16x2.name = "abs"_c;
    abs_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&abs_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&abs_Float16x2)->returnTypeSymbol = &Float16x2Type;

    abs_Float16x3_arg.name = "val"_c;
    abs_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    abs_Float16x3.name = "abs"_c;
    abs_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&abs_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&abs_Float16x3)->returnTypeSymbol = &Float16x3Type;

    abs_Float16x4_arg.name = "val"_c;
    abs_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    abs_Float16x4.name = "abs"_c;
    abs_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&abs_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&abs_Float16x4)->returnTypeSymbol = &Float16x4Type;

    castToF16_UInt16_arg.name = "val"_c;
    castToF16_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    castToF16_UInt16.name = "castToF16"_c;
    castToF16_UInt16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&castToF16_UInt16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&castToF16_UInt16)->returnTypeSymbol = &Float16Type;

    castToF16_Int16_arg.name = "val"_c;
    castToF16_Int16_arg.type = Type::FullType{ Int16Type.name };
    castToF16_Int16.name = "castToF16"_c;
    castToF16_Int16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&castToF16_Int16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&castToF16_Int16)->returnTypeSymbol = &Float16Type;

    castToU16_Float16_arg.name = "val"_c;
    castToU16_Float16_arg.type = Type::FullType{ Float16Type.name };
    castToU16_Float16.name = "castToU16"_c;
    castToU16_Float16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&castToU16_Float16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&castToU16_Float16)->returnTypeSymbol = &UInt16Type;

    castToU16_Int16_arg.name = "val"_c;
    castToU16_Int16_arg.type = Type::FullType{ Int16Type.name };
    castToU16_Int16.name = "castToU16"_c;
    castToU16_Int16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&castToU16_Int16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&castToU16_Int16)->returnTypeSymbol = &UInt16Type;

    castToI16_Float16_arg.name = "val"_c;
    castToI16_Float16_arg.type = Type::FullType{ Float16Type.name };
    castToI16_Float16.name = "castToI16"_c;
    castToI16_Float16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&castToI16_Float16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&castToI16_Float16)->returnTypeSymbol = &Int16Type;

    castToI16_UInt16_arg.name = "val"_c;
    castToI16_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    castToI16_UInt16.name = "castToI16"_c;
    castToI16_UInt16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&castToI16_UInt16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&castToI16_UInt16)->returnTypeSymbol = &Int16Type;

    castToF32_UInt32_arg.name = "val"_c;
    castToF32_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    castToF32_UInt32.name = "castToF32"_c;
    castToF32_UInt32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&castToF32_UInt32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&castToF32_UInt32)->returnTypeSymbol = &Float32Type;

    castToF32_Int32_arg.name = "val"_c;
    castToF32_Int32_arg.type = Type::FullType{ Int32Type.name };
    castToF32_Int32.name = "castToF32"_c;
    castToF32_Int32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&castToF32_Int32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&castToF32_Int32)->returnTypeSymbol = &Float32Type;

    castToU32_Float32_arg.name = "val"_c;
    castToU32_Float32_arg.type = Type::FullType{ Float32Type.name };
    castToU32_Float32.name = "castToU32"_c;
    castToU32_Float32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&castToU32_Float32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&castToU32_Float32)->returnTypeSymbol = &UInt32Type;

    castToU32_Int32_arg.name = "val"_c;
    castToU32_Int32_arg.type = Type::FullType{ Int32Type.name };
    castToU32_Int32.name = "castToU32"_c;
    castToU32_Int32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&castToU32_Int32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&castToU32_Int32)->returnTypeSymbol = &UInt32Type;

    castToI32_Float32_arg.name = "val"_c;
    castToI32_Float32_arg.type = Type::FullType{ Float32Type.name };
    castToI32_Float32.name = "castToI32"_c;
    castToI32_Float32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&castToI32_Float32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&castToI32_Float32)->returnTypeSymbol = &Int32Type;

    castToI32_UInt32_arg.name = "val"_c;
    castToI32_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    castToI32_UInt32.name = "castToI32"_c;
    castToI32_UInt32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&castToI32_UInt32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&castToI32_UInt32)->returnTypeSymbol = &Int32Type;

    any_Bool8_arg.name = "val"_c;
    any_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    any_Bool8.name = "any"_c;
    any_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&any_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&any_Bool8)->returnTypeSymbol = &Bool8Type;

    any_Bool8x2_arg.name = "val"_c;
    any_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    any_Bool8x2.name = "any"_c;
    any_Bool8x2.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&any_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&any_Bool8x2)->returnTypeSymbol = &Bool8Type;

    any_Bool8x3_arg.name = "val"_c;
    any_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    any_Bool8x3.name = "any"_c;
    any_Bool8x3.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&any_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&any_Bool8x3)->returnTypeSymbol = &Bool8Type;

    any_Bool8x4_arg.name = "val"_c;
    any_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    any_Bool8x4.name = "any"_c;
    any_Bool8x4.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&any_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&any_Bool8x4)->returnTypeSymbol = &Bool8Type;

    all_Bool8_arg.name = "val"_c;
    all_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    all_Bool8.name = "all"_c;
    all_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&all_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&all_Bool8)->returnTypeSymbol = &Bool8Type;

    all_Bool8x2_arg.name = "val"_c;
    all_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    all_Bool8x2.name = "all"_c;
    all_Bool8x2.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&all_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&all_Bool8x2)->returnTypeSymbol = &Bool8Type;

    all_Bool8x3_arg.name = "val"_c;
    all_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    all_Bool8x3.name = "all"_c;
    all_Bool8x3.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&all_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&all_Bool8x3)->returnTypeSymbol = &Bool8Type;

    all_Bool8x4_arg.name = "val"_c;
    all_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    all_Bool8x4.name = "all"_c;
    all_Bool8x4.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&all_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&all_Bool8x4)->returnTypeSymbol = &Bool8Type;

    transpose_Float32x2x2_arg.name = "val"_c;
    transpose_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    transpose_Float32x2x2.name = "transpose"_c;
    transpose_Float32x2x2.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&transpose_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&transpose_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    transpose_Float16x2x2_arg.name = "val"_c;
    transpose_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    transpose_Float16x2x2.name = "transpose"_c;
    transpose_Float16x2x2.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&transpose_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&transpose_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    transpose_Float32x2x3_arg.name = "val"_c;
    transpose_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    transpose_Float32x2x3.name = "transpose"_c;
    transpose_Float32x2x3.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&transpose_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&transpose_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    transpose_Float16x2x3_arg.name = "val"_c;
    transpose_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    transpose_Float16x2x3.name = "transpose"_c;
    transpose_Float16x2x3.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&transpose_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&transpose_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    transpose_Float32x2x4_arg.name = "val"_c;
    transpose_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    transpose_Float32x2x4.name = "transpose"_c;
    transpose_Float32x2x4.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&transpose_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&transpose_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    transpose_Float16x2x4_arg.name = "val"_c;
    transpose_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    transpose_Float16x2x4.name = "transpose"_c;
    transpose_Float16x2x4.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&transpose_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&transpose_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    transpose_Float32x3x2_arg.name = "val"_c;
    transpose_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    transpose_Float32x3x2.name = "transpose"_c;
    transpose_Float32x3x2.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&transpose_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&transpose_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    transpose_Float16x3x2_arg.name = "val"_c;
    transpose_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    transpose_Float16x3x2.name = "transpose"_c;
    transpose_Float16x3x2.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&transpose_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&transpose_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    transpose_Float32x3x3_arg.name = "val"_c;
    transpose_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    transpose_Float32x3x3.name = "transpose"_c;
    transpose_Float32x3x3.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&transpose_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&transpose_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    transpose_Float16x3x3_arg.name = "val"_c;
    transpose_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    transpose_Float16x3x3.name = "transpose"_c;
    transpose_Float16x3x3.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&transpose_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&transpose_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    transpose_Float32x3x4_arg.name = "val"_c;
    transpose_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    transpose_Float32x3x4.name = "transpose"_c;
    transpose_Float32x3x4.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&transpose_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&transpose_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    transpose_Float16x3x4_arg.name = "val"_c;
    transpose_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    transpose_Float16x3x4.name = "transpose"_c;
    transpose_Float16x3x4.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&transpose_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&transpose_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    transpose_Float32x4x2_arg.name = "val"_c;
    transpose_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    transpose_Float32x4x2.name = "transpose"_c;
    transpose_Float32x4x2.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&transpose_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&transpose_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    transpose_Float16x4x2_arg.name = "val"_c;
    transpose_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    transpose_Float16x4x2.name = "transpose"_c;
    transpose_Float16x4x2.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&transpose_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&transpose_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    transpose_Float32x4x3_arg.name = "val"_c;
    transpose_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    transpose_Float32x4x3.name = "transpose"_c;
    transpose_Float32x4x3.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&transpose_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&transpose_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    transpose_Float16x4x3_arg.name = "val"_c;
    transpose_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    transpose_Float16x4x3.name = "transpose"_c;
    transpose_Float16x4x3.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&transpose_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&transpose_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    transpose_Float32x4x4_arg.name = "val"_c;
    transpose_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    transpose_Float32x4x4.name = "transpose"_c;
    transpose_Float32x4x4.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&transpose_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&transpose_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    transpose_Float16x4x4_arg.name = "val"_c;
    transpose_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    transpose_Float16x4x4.name = "transpose"_c;
    transpose_Float16x4x4.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&transpose_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&transpose_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    inverse_Float32x2x2_arg.name = "val"_c;
    inverse_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    inverse_Float32x2x2.name = "inverse"_c;
    inverse_Float32x2x2.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&inverse_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&inverse_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    inverse_Float16x2x2_arg.name = "val"_c;
    inverse_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    inverse_Float16x2x2.name = "inverse"_c;
    inverse_Float16x2x2.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&inverse_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&inverse_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    inverse_Float32x2x3_arg.name = "val"_c;
    inverse_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    inverse_Float32x2x3.name = "inverse"_c;
    inverse_Float32x2x3.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&inverse_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&inverse_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    inverse_Float16x2x3_arg.name = "val"_c;
    inverse_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    inverse_Float16x2x3.name = "inverse"_c;
    inverse_Float16x2x3.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&inverse_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&inverse_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    inverse_Float32x2x4_arg.name = "val"_c;
    inverse_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    inverse_Float32x2x4.name = "inverse"_c;
    inverse_Float32x2x4.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&inverse_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&inverse_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    inverse_Float16x2x4_arg.name = "val"_c;
    inverse_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    inverse_Float16x2x4.name = "inverse"_c;
    inverse_Float16x2x4.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&inverse_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&inverse_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    inverse_Float32x3x2_arg.name = "val"_c;
    inverse_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    inverse_Float32x3x2.name = "inverse"_c;
    inverse_Float32x3x2.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&inverse_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&inverse_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    inverse_Float16x3x2_arg.name = "val"_c;
    inverse_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    inverse_Float16x3x2.name = "inverse"_c;
    inverse_Float16x3x2.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&inverse_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&inverse_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    inverse_Float32x3x3_arg.name = "val"_c;
    inverse_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    inverse_Float32x3x3.name = "inverse"_c;
    inverse_Float32x3x3.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&inverse_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&inverse_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    inverse_Float16x3x3_arg.name = "val"_c;
    inverse_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    inverse_Float16x3x3.name = "inverse"_c;
    inverse_Float16x3x3.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&inverse_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&inverse_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    inverse_Float32x3x4_arg.name = "val"_c;
    inverse_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    inverse_Float32x3x4.name = "inverse"_c;
    inverse_Float32x3x4.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&inverse_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&inverse_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    inverse_Float16x3x4_arg.name = "val"_c;
    inverse_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    inverse_Float16x3x4.name = "inverse"_c;
    inverse_Float16x3x4.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&inverse_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&inverse_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    inverse_Float32x4x2_arg.name = "val"_c;
    inverse_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    inverse_Float32x4x2.name = "inverse"_c;
    inverse_Float32x4x2.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&inverse_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&inverse_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    inverse_Float16x4x2_arg.name = "val"_c;
    inverse_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    inverse_Float16x4x2.name = "inverse"_c;
    inverse_Float16x4x2.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&inverse_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&inverse_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    inverse_Float32x4x3_arg.name = "val"_c;
    inverse_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    inverse_Float32x4x3.name = "inverse"_c;
    inverse_Float32x4x3.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&inverse_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&inverse_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    inverse_Float16x4x3_arg.name = "val"_c;
    inverse_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    inverse_Float16x4x3.name = "inverse"_c;
    inverse_Float16x4x3.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&inverse_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&inverse_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    inverse_Float32x4x4_arg.name = "val"_c;
    inverse_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    inverse_Float32x4x4.name = "inverse"_c;
    inverse_Float32x4x4.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&inverse_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&inverse_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    inverse_Float16x4x4_arg.name = "val"_c;
    inverse_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    inverse_Float16x4x4.name = "inverse"_c;
    inverse_Float16x4x4.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&inverse_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&inverse_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    VertexGetOutputLayer.name = "vertexGetOutputLayer"_c;
    VertexGetOutputLayer.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetOutputLayer)->returnTypeSymbol = &UInt32Type;

    VertexGetOutputViewport.name = "vertexGetOutputViewport"_c;
    VertexGetOutputViewport.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetOutputViewport)->returnTypeSymbol = &UInt32Type;

    VertexGetIndex.name = "vertexGetIndex"_c;
    VertexGetIndex.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetIndex)->returnTypeSymbol = &UInt32Type;

    VertexGetInstanceIndex.name = "vertexGetInstanceIndex"_c;
    VertexGetInstanceIndex.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetInstanceIndex)->returnTypeSymbol = &UInt32Type;

    VertexGetBaseIndex.name = "vertexGetBaseIndex"_c;
    VertexGetBaseIndex.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetBaseIndex)->returnTypeSymbol = &UInt32Type;

    VertexGetBaseInstanceIndex.name = "vertexGetBaseInstanceIndex"_c;
    VertexGetBaseInstanceIndex.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetBaseInstanceIndex)->returnTypeSymbol = &UInt32Type;

    VertexGetDrawIndex.name = "vertexGetDrawIndex"_c;
    VertexGetDrawIndex.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetDrawIndex)->returnTypeSymbol = &UInt32Type;

    VertexSetOutputLayer_UInt16_arg.name = "val"_c;
    VertexSetOutputLayer_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    VertexSetOutputLayer_UInt16.name = "vertexSetOutputLayer"_c;
    VertexSetOutputLayer_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&VertexSetOutputLayer_UInt16_arg)->typeSymbol = &UInt16Type;

    Symbol::Resolved(&VertexSetOutputLayer_UInt16)->returnTypeSymbol = &VoidType;

    VertexSetOutputLayer_UInt32_arg.name = "val"_c;
    VertexSetOutputLayer_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    VertexSetOutputLayer_UInt32.name = "vertexSetOutputLayer"_c;
    VertexSetOutputLayer_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&VertexSetOutputLayer_UInt32_arg)->typeSymbol = &UInt32Type;

    Symbol::Resolved(&VertexSetOutputLayer_UInt32)->returnTypeSymbol = &VoidType;

    VertexSetOutputViewport_UInt16_arg.name = "val"_c;
    VertexSetOutputViewport_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    VertexSetOutputViewport_UInt16.name = "vertexSetOutputViewport"_c;
    VertexSetOutputViewport_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&VertexSetOutputViewport_UInt16_arg)->typeSymbol = &UInt16Type;

    Symbol::Resolved(&VertexSetOutputViewport_UInt16)->returnTypeSymbol = &VoidType;

    VertexSetOutputViewport_UInt32_arg.name = "val"_c;
    VertexSetOutputViewport_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    VertexSetOutputViewport_UInt32.name = "vertexSetOutputViewport"_c;
    VertexSetOutputViewport_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&VertexSetOutputViewport_UInt32_arg)->typeSymbol = &UInt32Type;

    Symbol::Resolved(&VertexSetOutputViewport_UInt32)->returnTypeSymbol = &VoidType;

    VertexExportCoordinates_Float32x4_arg.name = "coordinate"_c;
    VertexExportCoordinates_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    VertexExportCoordinates_Float32x4.name = "vertexExportCoordinates"_c;
    VertexExportCoordinates_Float32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&VertexExportCoordinates_Float32x4_arg)->typeSymbol = &Float32x4Type;

    Symbol::Resolved(&VertexExportCoordinates_Float32x4)->returnTypeSymbol = &VoidType;

    VertexExportCoordinates_Float16x4_arg.name = "coordinate"_c;
    VertexExportCoordinates_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    VertexExportCoordinates_Float16x4.name = "vertexExportCoordinates"_c;
    VertexExportCoordinates_Float16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&VertexExportCoordinates_Float16x4_arg)->typeSymbol = &Float16x4Type;

    Symbol::Resolved(&VertexExportCoordinates_Float16x4)->returnTypeSymbol = &VoidType;

    GeometryExportVertex.name = "geometryExportVertex"_c;
    GeometryExportVertex.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&GeometryExportVertex)->returnTypeSymbol = &VoidType;

    GeometryExportPrimitive.name = "geometryExportPrimitive"_c;
    GeometryExportPrimitive.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&GeometryExportPrimitive)->returnTypeSymbol = &VoidType;

    PixelGetCoordinates_Float32x4.name = "pixelGetCoordinates"_c;
    PixelGetCoordinates_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&PixelGetCoordinates_Float32x4)->returnTypeSymbol = &Float32x4Type;

    PixelGetCoordinates_Float16x4.name = "pixelGetCoordinates"_c;
    PixelGetCoordinates_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&PixelGetCoordinates_Float16x4)->returnTypeSymbol = &Float16x4Type;

    PixelGetDepth.name = "pixelGetDepth"_c;
    PixelGetDepth.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&PixelGetDepth)->returnTypeSymbol = &Float32Type;

    PixelExportColor_Float32_Int32_color.name = "color"_c;
    PixelExportColor_Float32_Int32_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_Int32_index.name = "index"_c;
    PixelExportColor_Float32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32_Int32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32_UInt32_color.name = "color"_c;
    PixelExportColor_Float32_UInt32_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_UInt32_index.name = "index"_c;
    PixelExportColor_Float32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32_UInt32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32_Int16_color.name = "color"_c;
    PixelExportColor_Float32_Int16_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_Int16_index.name = "index"_c;
    PixelExportColor_Float32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32_Int16_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32_UInt16_color.name = "color"_c;
    PixelExportColor_Float32_UInt16_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_UInt16_index.name = "index"_c;
    PixelExportColor_Float32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32_UInt16_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x2_Int32_color.name = "color"_c;
    PixelExportColor_Float32x2_Int32_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_Int32_index.name = "index"_c;
    PixelExportColor_Float32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x2_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x2_UInt32_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x2_Int16_color.name = "color"_c;
    PixelExportColor_Float32x2_Int16_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_Int16_index.name = "index"_c;
    PixelExportColor_Float32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x2_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x2_UInt16_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x3_Int32_color.name = "color"_c;
    PixelExportColor_Float32x3_Int32_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_Int32_index.name = "index"_c;
    PixelExportColor_Float32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x3_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x3_UInt32_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x3_Int16_color.name = "color"_c;
    PixelExportColor_Float32x3_Int16_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_Int16_index.name = "index"_c;
    PixelExportColor_Float32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x3_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x3_UInt16_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x4_Int32_color.name = "color"_c;
    PixelExportColor_Float32x4_Int32_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_Int32_index.name = "index"_c;
    PixelExportColor_Float32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x4_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x4_UInt32_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x4_Int16_color.name = "color"_c;
    PixelExportColor_Float32x4_Int16_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_Int16_index.name = "index"_c;
    PixelExportColor_Float32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x4_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x4_UInt16_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16_Int32_color.name = "color"_c;
    PixelExportColor_Float16_Int32_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_Int32_index.name = "index"_c;
    PixelExportColor_Float16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16_Int32_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16_UInt32_color.name = "color"_c;
    PixelExportColor_Float16_UInt32_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_UInt32_index.name = "index"_c;
    PixelExportColor_Float16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16_UInt32_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16_Int16_color.name = "color"_c;
    PixelExportColor_Float16_Int16_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_Int16_index.name = "index"_c;
    PixelExportColor_Float16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16_Int16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16_UInt16_color.name = "color"_c;
    PixelExportColor_Float16_UInt16_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_UInt16_index.name = "index"_c;
    PixelExportColor_Float16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16_UInt16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x2_Int32_color.name = "color"_c;
    PixelExportColor_Float16x2_Int32_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_Int32_index.name = "index"_c;
    PixelExportColor_Float16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x2_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x2_UInt32_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x2_Int16_color.name = "color"_c;
    PixelExportColor_Float16x2_Int16_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_Int16_index.name = "index"_c;
    PixelExportColor_Float16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x2_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x2_UInt16_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x3_Int32_color.name = "color"_c;
    PixelExportColor_Float16x3_Int32_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_Int32_index.name = "index"_c;
    PixelExportColor_Float16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x3_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x3_UInt32_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x3_Int16_color.name = "color"_c;
    PixelExportColor_Float16x3_Int16_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_Int16_index.name = "index"_c;
    PixelExportColor_Float16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x3_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x3_UInt16_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x4_Int32_color.name = "color"_c;
    PixelExportColor_Float16x4_Int32_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_Int32_index.name = "index"_c;
    PixelExportColor_Float16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x4_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x4_UInt32_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x4_Int16_color.name = "color"_c;
    PixelExportColor_Float16x4_Int16_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_Int16_index.name = "index"_c;
    PixelExportColor_Float16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x4_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x4_UInt16_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32_Int32_color.name = "color"_c;
    PixelExportColor_Int32_Int32_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int32_index.name = "index"_c;
    PixelExportColor_Int32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32_Int32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32_UInt32_color.name = "color"_c;
    PixelExportColor_Int32_UInt32_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_UInt32_index.name = "index"_c;
    PixelExportColor_Int32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32_UInt32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32_Int16_color.name = "color"_c;
    PixelExportColor_Int32_Int16_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int16_index.name = "index"_c;
    PixelExportColor_Int32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32_Int16_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32_UInt16_color.name = "color"_c;
    PixelExportColor_Int32_UInt16_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_UInt16_index.name = "index"_c;
    PixelExportColor_Int32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32_UInt16_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x2_Int32_color.name = "color"_c;
    PixelExportColor_Int32x2_Int32_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_Int32_index.name = "index"_c;
    PixelExportColor_Int32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x2_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x2_UInt32_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x2_Int16_color.name = "color"_c;
    PixelExportColor_Int32x2_Int16_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_Int16_index.name = "index"_c;
    PixelExportColor_Int32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x2_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x2_UInt16_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x3_Int32_color.name = "color"_c;
    PixelExportColor_Int32x3_Int32_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_Int32_index.name = "index"_c;
    PixelExportColor_Int32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x3_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x3_UInt32_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x3_Int16_color.name = "color"_c;
    PixelExportColor_Int32x3_Int16_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_Int16_index.name = "index"_c;
    PixelExportColor_Int32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x3_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x3_UInt16_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x4_Int32_color.name = "color"_c;
    PixelExportColor_Int32x4_Int32_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_Int32_index.name = "index"_c;
    PixelExportColor_Int32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x4_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x4_UInt32_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x4_Int16_color.name = "color"_c;
    PixelExportColor_Int32x4_Int16_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_Int16_index.name = "index"_c;
    PixelExportColor_Int32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x4_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x4_UInt16_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16_Int32_color.name = "color"_c;
    PixelExportColor_Int16_Int32_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int32_index.name = "index"_c;
    PixelExportColor_Int16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16_Int32_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16_UInt32_color.name = "color"_c;
    PixelExportColor_Int16_UInt32_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_UInt32_index.name = "index"_c;
    PixelExportColor_Int16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16_UInt32_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16_Int16_color.name = "color"_c;
    PixelExportColor_Int16_Int16_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int16_index.name = "index"_c;
    PixelExportColor_Int16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16_Int16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16_UInt16_color.name = "color"_c;
    PixelExportColor_Int16_UInt16_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_UInt16_index.name = "index"_c;
    PixelExportColor_Int16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16_UInt16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x2_Int32_color.name = "color"_c;
    PixelExportColor_Int16x2_Int32_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_Int32_index.name = "index"_c;
    PixelExportColor_Int16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x2_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x2_UInt32_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x2_Int16_color.name = "color"_c;
    PixelExportColor_Int16x2_Int16_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_Int16_index.name = "index"_c;
    PixelExportColor_Int16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x2_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x2_UInt16_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x3_Int32_color.name = "color"_c;
    PixelExportColor_Int16x3_Int32_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_Int32_index.name = "index"_c;
    PixelExportColor_Int16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x3_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x3_UInt32_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x3_Int16_color.name = "color"_c;
    PixelExportColor_Int16x3_Int16_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_Int16_index.name = "index"_c;
    PixelExportColor_Int16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x3_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x3_UInt16_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x4_Int32_color.name = "color"_c;
    PixelExportColor_Int16x4_Int32_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_Int32_index.name = "index"_c;
    PixelExportColor_Int16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x4_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x4_UInt32_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x4_Int16_color.name = "color"_c;
    PixelExportColor_Int16x4_Int16_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_Int16_index.name = "index"_c;
    PixelExportColor_Int16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x4_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x4_UInt16_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32_Int32_color.name = "color"_c;
    PixelExportColor_UInt32_Int32_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_Int32_index.name = "index"_c;
    PixelExportColor_UInt32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32_Int32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32_UInt32_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32_Int16_color.name = "color"_c;
    PixelExportColor_UInt32_Int16_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_Int16_index.name = "index"_c;
    PixelExportColor_UInt32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32_Int16_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32_UInt16_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x2_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x2_Int32_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x2_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x2_UInt32_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x2_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x2_Int16_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x2_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x2_UInt16_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x3_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x3_Int32_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x3_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x3_UInt32_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x3_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x3_Int16_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x3_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x3_UInt16_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x4_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x4_Int32_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x4_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x4_UInt32_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x4_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x4_Int16_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x4_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x4_UInt16_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16_Int32_color.name = "color"_c;
    PixelExportColor_UInt16_Int32_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_Int32_index.name = "index"_c;
    PixelExportColor_UInt16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16_Int32_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16_UInt32_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16_Int16_color.name = "color"_c;
    PixelExportColor_UInt16_Int16_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_Int16_index.name = "index"_c;
    PixelExportColor_UInt16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16_Int16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16_UInt16_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x2_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x2_Int32_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x2_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x2_UInt32_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x2_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x2_Int16_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x2_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x2_UInt16_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x3_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x3_Int32_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x3_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x3_UInt32_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x3_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x3_Int16_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x3_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x3_UInt16_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x4_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x4_Int32_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x4_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x4_UInt32_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x4_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x4_Int16_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x4_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x4_UInt16_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16)->returnTypeSymbol = &VoidType;

    ComputeGetLocalInvocationIndices.name = "computeGetLocalInvocationIndices"_c;
    ComputeGetLocalInvocationIndices.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetLocalInvocationIndices)->returnTypeSymbol = &UInt32x3Type;

    ComputeGetGlobalInvocationIndices.name = "computeGetGlobalInvocationIndices"_c;
    ComputeGetGlobalInvocationIndices.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetGlobalInvocationIndices)->returnTypeSymbol = &UInt32x3Type;

    ComputeGetWorkgroupIndices.name = "computeGetWorkgroupIndices"_c;
    ComputeGetWorkgroupIndices.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetWorkgroupIndices)->returnTypeSymbol = &UInt32x3Type;

    ComputeGetWorkGroupDimensions.name = "computeGetWorkGroupDimensions"_c;
    ComputeGetWorkGroupDimensions.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetWorkGroupDimensions)->returnTypeSymbol = &UInt32x3Type;

    ComputeGetIndexInWorkgroup.name = "computeGetIndexInWorkgroup"_c;
    ComputeGetIndexInWorkgroup.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ComputeGetIndexInWorkgroup)->returnTypeSymbol = &UInt32Type;

    SubgroupGetId.name = "subgroupGetId"_c;
    SubgroupGetId.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupGetId)->returnTypeSymbol = &UInt32Type;

    SubgroupGetSize.name = "subgroupGetSize"_c;
    SubgroupGetSize.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupGetSize)->returnTypeSymbol = &UInt32Type;

    SubgroupGetNum.name = "subgroupGetNum"_c;
    SubgroupGetNum.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupGetNum)->returnTypeSymbol = &UInt32Type;

    SubgroupGetInvocationMask.name = "subgroupGetInvocationMask"_c;
    SubgroupGetInvocationMask.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetInvocationMask)->returnTypeSymbol = &UInt32x4Type;

    SubgroupGetInvocationAndLowerMask.name = "subgroupGetInvocationAndLowerMask"_c;
    SubgroupGetInvocationAndLowerMask.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetInvocationAndLowerMask)->returnTypeSymbol = &UInt32x4Type;

    SubgroupGetLowerMask.name = "subgroupGetLowerMask"_c;
    SubgroupGetLowerMask.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetLowerMask)->returnTypeSymbol = &UInt32x4Type;

    SubgroupGetInvocationAndGreaterMask.name = "subgroupGetInvocationAndGreaterMask"_c;
    SubgroupGetInvocationAndGreaterMask.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetInvocationAndGreaterMask)->returnTypeSymbol = &UInt32x4Type;

    SubgroupGetGreaterMask.name = "subgroupGetGreaterMask"_c;
    SubgroupGetGreaterMask.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetGreaterMask)->returnTypeSymbol = &UInt32x4Type;

    SubgroupFirstInvocation.name = "subgroupFirstInvocation"_c;
    SubgroupFirstInvocation.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupFirstInvocation)->returnTypeSymbol = &UInt32Type;

    Read_UInt32_value.name = "value"_c;
    Read_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupRead.name = "subgroupRead"_c;
    SubgroupRead.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupRead)->returnTypeSymbol = &UInt32Type;

    SubgroupBallot_Bool8_predicate.name = "value"_c;
    SubgroupBallot_Bool8_predicate.type = Type::FullType{ Bool8Type.name };
    SubgroupBallot.name = "subgroupBallot"_c;
    SubgroupBallot.documentation = "Constructs a subgroup mask within the workgroup where predicate is true"_c;
    SubgroupBallot.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupBallot)->returnTypeSymbol = &UInt32x4Type;

    SubgroupInverseBallot_Bool8_predicate.name = "value"_c;
    SubgroupInverseBallot_Bool8_predicate.type = Type::FullType{ Bool8Type.name };
    SubgroupInverseBallot.name = "subgroupInverseBallot"_c;
    SubgroupInverseBallot.documentation = "Constructs a subgroup mask within the workgroup where predicate is false"_c;
    SubgroupInverseBallot.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupInverseBallot)->returnTypeSymbol = &UInt32x4Type;

    SubgroupBallotBitCount_UInt32x4_mask.name = "value"_c;
    SubgroupBallotBitCount_UInt32x4_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotBitCount.name = "subgroupBallotBitCount"_c;
    SubgroupBallotBitCount.documentation = "Returns the number of bits in the mask set to 1."_c;
    SubgroupBallotBitCount.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupBallotBitCount)->returnTypeSymbol = &UInt32Type;

    SubgroupBallotFirstOne_UInt32x4_mask.name = "value"_c;
    SubgroupBallotFirstOne_UInt32x4_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotFirstOne.name = "subgroupBallotFirstOne"_c;
    SubgroupBallotFirstOne.documentation = "Returns the first one (ctz) in a subgroup thread mask."_c;
    SubgroupBallotFirstOne.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupBallotFirstOne)->returnTypeSymbol = &UInt32Type;

    SubgroupBallotLastOne_UInt32x4_mask.name = "value"_c;
    SubgroupBallotLastOne_UInt32x4_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotLastOne.name = "subgroupBallotLastOne"_c;
    SubgroupBallotLastOne.documentation = "Returns the first one (clz) in a subgroup thread mask."_c;
    SubgroupBallotLastOne.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupBallotLastOne)->returnTypeSymbol = &UInt32Type;

    SubgroupBallotBit_UInt32x4_mask.name = "value"_c;
    SubgroupBallotBit_UInt32x4_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotBit_UInt32_index.name = "value"_c;
    SubgroupBallotBit_UInt32_index.type = Type::FullType{ UInt32Type.name };
    SubgroupBallotBit.name = "subgroupBallotBit"_c;
    SubgroupBallotBit.documentation = "Returns true if bit at index in mask is 1."_c;
    SubgroupBallotBit.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&SubgroupBallotBit)->returnTypeSymbol = &Bool8Type;

    SubgroupSwapDiagonal_Float32_color.name = "color"_c;
    SubgroupSwapDiagonal_Float32_color.type = Type::FullType{ Float32Type.name };
    SubgroupSwapDiagonal_Float32.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float32x2_color.name = "color"_c;
    SubgroupSwapDiagonal_Float32x2_color.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapDiagonal_Float32x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float32x3_color.name = "color"_c;
    SubgroupSwapDiagonal_Float32x3_color.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapDiagonal_Float32x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float32x4_color.name = "color"_c;
    SubgroupSwapDiagonal_Float32x4_color.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapDiagonal_Float32x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float16_color.name = "color"_c;
    SubgroupSwapDiagonal_Float16_color.type = Type::FullType{ Float16Type.name };
    SubgroupSwapDiagonal_Float16.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float16x2_color.name = "color"_c;
    SubgroupSwapDiagonal_Float16x2_color.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapDiagonal_Float16x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float16x3_color.name = "color"_c;
    SubgroupSwapDiagonal_Float16x3_color.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapDiagonal_Float16x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float16x4_color.name = "color"_c;
    SubgroupSwapDiagonal_Float16x4_color.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapDiagonal_Float16x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int32_color.name = "color"_c;
    SubgroupSwapDiagonal_Int32_color.type = Type::FullType{ Int32Type.name };
    SubgroupSwapDiagonal_Int32.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int32x2_color.name = "color"_c;
    SubgroupSwapDiagonal_Int32x2_color.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapDiagonal_Int32x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int32x3_color.name = "color"_c;
    SubgroupSwapDiagonal_Int32x3_color.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapDiagonal_Int32x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int32x4_color.name = "color"_c;
    SubgroupSwapDiagonal_Int32x4_color.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapDiagonal_Int32x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int16_color.name = "color"_c;
    SubgroupSwapDiagonal_Int16_color.type = Type::FullType{ Int16Type.name };
    SubgroupSwapDiagonal_Int16.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int16x2_color.name = "color"_c;
    SubgroupSwapDiagonal_Int16x2_color.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapDiagonal_Int16x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int16x3_color.name = "color"_c;
    SubgroupSwapDiagonal_Int16x3_color.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapDiagonal_Int16x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int16x4_color.name = "color"_c;
    SubgroupSwapDiagonal_Int16x4_color.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapDiagonal_Int16x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt32_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt32_color.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapDiagonal_UInt32.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt32x2_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt32x2_color.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapDiagonal_UInt32x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt32x3_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt32x3_color.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapDiagonal_UInt32x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt32x4_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt32x4_color.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapDiagonal_UInt32x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt16_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt16_color.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapDiagonal_UInt16.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt16x2_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt16x2_color.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapDiagonal_UInt16x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt16x3_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt16x3_color.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapDiagonal_UInt16x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt16x4_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt16x4_color.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapDiagonal_UInt16x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float32_color.name = "color"_c;
    SubgroupSwapVertical_Float32_color.type = Type::FullType{ Float32Type.name };
    SubgroupSwapVertical_Float32.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float32x2_color.name = "color"_c;
    SubgroupSwapVertical_Float32x2_color.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapVertical_Float32x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float32x3_color.name = "color"_c;
    SubgroupSwapVertical_Float32x3_color.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapVertical_Float32x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float32x4_color.name = "color"_c;
    SubgroupSwapVertical_Float32x4_color.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapVertical_Float32x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float16_color.name = "color"_c;
    SubgroupSwapVertical_Float16_color.type = Type::FullType{ Float16Type.name };
    SubgroupSwapVertical_Float16.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float16x2_color.name = "color"_c;
    SubgroupSwapVertical_Float16x2_color.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapVertical_Float16x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float16x3_color.name = "color"_c;
    SubgroupSwapVertical_Float16x3_color.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapVertical_Float16x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float16x4_color.name = "color"_c;
    SubgroupSwapVertical_Float16x4_color.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapVertical_Float16x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int32_color.name = "color"_c;
    SubgroupSwapVertical_Int32_color.type = Type::FullType{ Int32Type.name };
    SubgroupSwapVertical_Int32.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int32x2_color.name = "color"_c;
    SubgroupSwapVertical_Int32x2_color.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapVertical_Int32x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int32x3_color.name = "color"_c;
    SubgroupSwapVertical_Int32x3_color.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapVertical_Int32x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int32x4_color.name = "color"_c;
    SubgroupSwapVertical_Int32x4_color.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapVertical_Int32x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int16_color.name = "color"_c;
    SubgroupSwapVertical_Int16_color.type = Type::FullType{ Int16Type.name };
    SubgroupSwapVertical_Int16.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int16x2_color.name = "color"_c;
    SubgroupSwapVertical_Int16x2_color.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapVertical_Int16x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int16x3_color.name = "color"_c;
    SubgroupSwapVertical_Int16x3_color.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapVertical_Int16x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int16x4_color.name = "color"_c;
    SubgroupSwapVertical_Int16x4_color.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapVertical_Int16x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt32_color.name = "color"_c;
    SubgroupSwapVertical_UInt32_color.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapVertical_UInt32.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt32x2_color.name = "color"_c;
    SubgroupSwapVertical_UInt32x2_color.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapVertical_UInt32x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt32x3_color.name = "color"_c;
    SubgroupSwapVertical_UInt32x3_color.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapVertical_UInt32x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt32x4_color.name = "color"_c;
    SubgroupSwapVertical_UInt32x4_color.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapVertical_UInt32x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt16_color.name = "color"_c;
    SubgroupSwapVertical_UInt16_color.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapVertical_UInt16.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt16x2_color.name = "color"_c;
    SubgroupSwapVertical_UInt16x2_color.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapVertical_UInt16x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt16x3_color.name = "color"_c;
    SubgroupSwapVertical_UInt16x3_color.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapVertical_UInt16x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt16x4_color.name = "color"_c;
    SubgroupSwapVertical_UInt16x4_color.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapVertical_UInt16x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float32_color.name = "color"_c;
    SubgroupSwapHorizontal_Float32_color.type = Type::FullType{ Float32Type.name };
    SubgroupSwapHorizontal_Float32.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float32x2_color.name = "color"_c;
    SubgroupSwapHorizontal_Float32x2_color.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapHorizontal_Float32x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float32x3_color.name = "color"_c;
    SubgroupSwapHorizontal_Float32x3_color.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapHorizontal_Float32x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float32x4_color.name = "color"_c;
    SubgroupSwapHorizontal_Float32x4_color.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapHorizontal_Float32x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float16_color.name = "color"_c;
    SubgroupSwapHorizontal_Float16_color.type = Type::FullType{ Float16Type.name };
    SubgroupSwapHorizontal_Float16.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float16x2_color.name = "color"_c;
    SubgroupSwapHorizontal_Float16x2_color.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapHorizontal_Float16x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float16x3_color.name = "color"_c;
    SubgroupSwapHorizontal_Float16x3_color.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapHorizontal_Float16x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float16x4_color.name = "color"_c;
    SubgroupSwapHorizontal_Float16x4_color.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapHorizontal_Float16x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int32_color.name = "color"_c;
    SubgroupSwapHorizontal_Int32_color.type = Type::FullType{ Int32Type.name };
    SubgroupSwapHorizontal_Int32.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int32x2_color.name = "color"_c;
    SubgroupSwapHorizontal_Int32x2_color.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapHorizontal_Int32x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int32x3_color.name = "color"_c;
    SubgroupSwapHorizontal_Int32x3_color.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapHorizontal_Int32x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int32x4_color.name = "color"_c;
    SubgroupSwapHorizontal_Int32x4_color.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapHorizontal_Int32x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int16_color.name = "color"_c;
    SubgroupSwapHorizontal_Int16_color.type = Type::FullType{ Int16Type.name };
    SubgroupSwapHorizontal_Int16.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int16x2_color.name = "color"_c;
    SubgroupSwapHorizontal_Int16x2_color.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapHorizontal_Int16x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int16x3_color.name = "color"_c;
    SubgroupSwapHorizontal_Int16x3_color.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapHorizontal_Int16x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int16x4_color.name = "color"_c;
    SubgroupSwapHorizontal_Int16x4_color.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapHorizontal_Int16x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt32_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt32_color.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapHorizontal_UInt32.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt32x2_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt32x2_color.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapHorizontal_UInt32x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt32x3_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt32x3_color.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapHorizontal_UInt32x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt32x4_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt32x4_color.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapHorizontal_UInt32x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt16_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt16_color.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapHorizontal_UInt16.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt16x2_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt16x2_color.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapHorizontal_UInt16x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt16x3_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt16x3_color.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapHorizontal_UInt16x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt16x4_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt16x4_color.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapHorizontal_UInt16x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4)->returnTypeSymbol = &VoidType;

}
} // namespace GPULang
