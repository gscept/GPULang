//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "compiler.h"
namespace GPULang
{
Compiler::Timer StaticIntrinsicTimer;
struct StaticIntrinsicTimerStart
{
    StaticIntrinsicTimerStart()
    {
        StaticIntrinsicTimer.Start();
    }
};
StaticIntrinsicTimerStart StaticIntrinsicTimerStartInstance;

/// f32 with UInt32
Variable Float32_from_UInt32_arg;
Function Float32_from_UInt32;
inline constexpr std::array Float32_from_UInt32_args = { &Float32_from_UInt32_arg };

/// f32 with Int32
Variable Float32_from_Int32_arg;
Function Float32_from_Int32;
inline constexpr std::array Float32_from_Int32_args = { &Float32_from_Int32_arg };

/// f32 with Bool8
Variable Float32_from_Bool8_arg;
Function Float32_from_Bool8;
inline constexpr std::array Float32_from_Bool8_args = { &Float32_from_Bool8_arg };

/// f32 with Float16
Variable Float32_from_Float16_arg;
Function Float32_from_Float16;
inline constexpr std::array Float32_from_Float16_args = { &Float32_from_Float16_arg };

/// f32 with UInt16
Variable Float32_from_UInt16_arg;
Function Float32_from_UInt16;
inline constexpr std::array Float32_from_UInt16_args = { &Float32_from_UInt16_arg };

/// f32 with Int16
Variable Float32_from_Int16_arg;
Function Float32_from_Int16;
inline constexpr std::array Float32_from_Int16_args = { &Float32_from_Int16_arg };

/// f32 with Float32
Variable Float32_ctor0_arg0_Float32;
Function Float32_ctor0;
inline constexpr std::array Float32_ctor0_args = { &Float32_ctor0_arg0_Float32 };

/// u32 with Float32
Variable UInt32_from_Float32_arg;
Function UInt32_from_Float32;
inline constexpr std::array UInt32_from_Float32_args = { &UInt32_from_Float32_arg };

/// u32 with Int32
Variable UInt32_from_Int32_arg;
Function UInt32_from_Int32;
inline constexpr std::array UInt32_from_Int32_args = { &UInt32_from_Int32_arg };

/// u32 with Bool8
Variable UInt32_from_Bool8_arg;
Function UInt32_from_Bool8;
inline constexpr std::array UInt32_from_Bool8_args = { &UInt32_from_Bool8_arg };

/// u32 with Float16
Variable UInt32_from_Float16_arg;
Function UInt32_from_Float16;
inline constexpr std::array UInt32_from_Float16_args = { &UInt32_from_Float16_arg };

/// u32 with UInt16
Variable UInt32_from_UInt16_arg;
Function UInt32_from_UInt16;
inline constexpr std::array UInt32_from_UInt16_args = { &UInt32_from_UInt16_arg };

/// u32 with Int16
Variable UInt32_from_Int16_arg;
Function UInt32_from_Int16;
inline constexpr std::array UInt32_from_Int16_args = { &UInt32_from_Int16_arg };

/// u32 with UInt32
Variable UInt32_ctor0_arg0_UInt32;
Function UInt32_ctor0;
inline constexpr std::array UInt32_ctor0_args = { &UInt32_ctor0_arg0_UInt32 };

/// i32 with Float32
Variable Int32_from_Float32_arg;
Function Int32_from_Float32;
inline constexpr std::array Int32_from_Float32_args = { &Int32_from_Float32_arg };

/// i32 with UInt32
Variable Int32_from_UInt32_arg;
Function Int32_from_UInt32;
inline constexpr std::array Int32_from_UInt32_args = { &Int32_from_UInt32_arg };

/// i32 with Bool8
Variable Int32_from_Bool8_arg;
Function Int32_from_Bool8;
inline constexpr std::array Int32_from_Bool8_args = { &Int32_from_Bool8_arg };

/// i32 with Float16
Variable Int32_from_Float16_arg;
Function Int32_from_Float16;
inline constexpr std::array Int32_from_Float16_args = { &Int32_from_Float16_arg };

/// i32 with UInt16
Variable Int32_from_UInt16_arg;
Function Int32_from_UInt16;
inline constexpr std::array Int32_from_UInt16_args = { &Int32_from_UInt16_arg };

/// i32 with Int16
Variable Int32_from_Int16_arg;
Function Int32_from_Int16;
inline constexpr std::array Int32_from_Int16_args = { &Int32_from_Int16_arg };

/// i32 with Int32
Variable Int32_ctor0_arg0_Int32;
Function Int32_ctor0;
inline constexpr std::array Int32_ctor0_args = { &Int32_ctor0_arg0_Int32 };

/// b8 with UInt32
Variable Bool8_from_UInt32_arg;
Function Bool8_from_UInt32;
inline constexpr std::array Bool8_from_UInt32_args = { &Bool8_from_UInt32_arg };

/// b8 with Int32
Variable Bool8_from_Int32_arg;
Function Bool8_from_Int32;
inline constexpr std::array Bool8_from_Int32_args = { &Bool8_from_Int32_arg };

/// b8 with UInt16
Variable Bool8_from_UInt16_arg;
Function Bool8_from_UInt16;
inline constexpr std::array Bool8_from_UInt16_args = { &Bool8_from_UInt16_arg };

/// b8 with Int16
Variable Bool8_from_Int16_arg;
Function Bool8_from_Int16;
inline constexpr std::array Bool8_from_Int16_args = { &Bool8_from_Int16_arg };

/// b8 with Bool8
Variable Bool8_ctor0_arg0_Bool8;
Function Bool8_ctor0;
inline constexpr std::array Bool8_ctor0_args = { &Bool8_ctor0_arg0_Bool8 };

/// f16 with Float32
Variable Float16_from_Float32_arg;
Function Float16_from_Float32;
inline constexpr std::array Float16_from_Float32_args = { &Float16_from_Float32_arg };

/// f16 with UInt32
Variable Float16_from_UInt32_arg;
Function Float16_from_UInt32;
inline constexpr std::array Float16_from_UInt32_args = { &Float16_from_UInt32_arg };

/// f16 with Int32
Variable Float16_from_Int32_arg;
Function Float16_from_Int32;
inline constexpr std::array Float16_from_Int32_args = { &Float16_from_Int32_arg };

/// f16 with Bool8
Variable Float16_from_Bool8_arg;
Function Float16_from_Bool8;
inline constexpr std::array Float16_from_Bool8_args = { &Float16_from_Bool8_arg };

/// f16 with UInt16
Variable Float16_from_UInt16_arg;
Function Float16_from_UInt16;
inline constexpr std::array Float16_from_UInt16_args = { &Float16_from_UInt16_arg };

/// f16 with Int16
Variable Float16_from_Int16_arg;
Function Float16_from_Int16;
inline constexpr std::array Float16_from_Int16_args = { &Float16_from_Int16_arg };

/// f16 with Float16
Variable Float16_ctor0_arg0_Float16;
Function Float16_ctor0;
inline constexpr std::array Float16_ctor0_args = { &Float16_ctor0_arg0_Float16 };

/// u16 with Float32
Variable UInt16_from_Float32_arg;
Function UInt16_from_Float32;
inline constexpr std::array UInt16_from_Float32_args = { &UInt16_from_Float32_arg };

/// u16 with UInt32
Variable UInt16_from_UInt32_arg;
Function UInt16_from_UInt32;
inline constexpr std::array UInt16_from_UInt32_args = { &UInt16_from_UInt32_arg };

/// u16 with Int32
Variable UInt16_from_Int32_arg;
Function UInt16_from_Int32;
inline constexpr std::array UInt16_from_Int32_args = { &UInt16_from_Int32_arg };

/// u16 with Bool8
Variable UInt16_from_Bool8_arg;
Function UInt16_from_Bool8;
inline constexpr std::array UInt16_from_Bool8_args = { &UInt16_from_Bool8_arg };

/// u16 with Float16
Variable UInt16_from_Float16_arg;
Function UInt16_from_Float16;
inline constexpr std::array UInt16_from_Float16_args = { &UInt16_from_Float16_arg };

/// u16 with Int16
Variable UInt16_from_Int16_arg;
Function UInt16_from_Int16;
inline constexpr std::array UInt16_from_Int16_args = { &UInt16_from_Int16_arg };

/// u16 with UInt16
Variable UInt16_ctor0_arg0_UInt16;
Function UInt16_ctor0;
inline constexpr std::array UInt16_ctor0_args = { &UInt16_ctor0_arg0_UInt16 };

/// i16 with Float32
Variable Int16_from_Float32_arg;
Function Int16_from_Float32;
inline constexpr std::array Int16_from_Float32_args = { &Int16_from_Float32_arg };

/// i16 with UInt32
Variable Int16_from_UInt32_arg;
Function Int16_from_UInt32;
inline constexpr std::array Int16_from_UInt32_args = { &Int16_from_UInt32_arg };

/// i16 with Int32
Variable Int16_from_Int32_arg;
Function Int16_from_Int32;
inline constexpr std::array Int16_from_Int32_args = { &Int16_from_Int32_arg };

/// i16 with Bool8
Variable Int16_from_Bool8_arg;
Function Int16_from_Bool8;
inline constexpr std::array Int16_from_Bool8_args = { &Int16_from_Bool8_arg };

/// i16 with Float16
Variable Int16_from_Float16_arg;
Function Int16_from_Float16;
inline constexpr std::array Int16_from_Float16_args = { &Int16_from_Float16_arg };

/// i16 with UInt16
Variable Int16_from_UInt16_arg;
Function Int16_from_UInt16;
inline constexpr std::array Int16_from_UInt16_args = { &Int16_from_UInt16_arg };

/// i16 with Int16
Variable Int16_ctor0_arg0_Int16;
Function Int16_ctor0;
inline constexpr std::array Int16_ctor0_args = { &Int16_ctor0_arg0_Int16 };

/// f32x2 with Float32x2
Variable Float32x2_from_Float32x2_arg;
Function Float32x2_from_Float32x2;
inline constexpr std::array Float32x2_from_Float32x2_args = { &Float32x2_from_Float32x2_arg };

/// f32x2 with Float32
Variable Float32x2_splat_Float32_arg;
Function Float32x2_splat_Float32;
inline constexpr std::array Float32x2_splat_Float32_args = { &Float32x2_splat_Float32_arg };

/// f32x2 with UInt32x2
Variable Float32x2_from_UInt32x2_arg;
Function Float32x2_from_UInt32x2;
inline constexpr std::array Float32x2_from_UInt32x2_args = { &Float32x2_from_UInt32x2_arg };

/// f32x2 with UInt32
Variable Float32x2_splat_UInt32_arg;
Function Float32x2_splat_UInt32;
inline constexpr std::array Float32x2_splat_UInt32_args = { &Float32x2_splat_UInt32_arg };

/// f32x2 with Int32x2
Variable Float32x2_from_Int32x2_arg;
Function Float32x2_from_Int32x2;
inline constexpr std::array Float32x2_from_Int32x2_args = { &Float32x2_from_Int32x2_arg };

/// f32x2 with Int32
Variable Float32x2_splat_Int32_arg;
Function Float32x2_splat_Int32;
inline constexpr std::array Float32x2_splat_Int32_args = { &Float32x2_splat_Int32_arg };

/// f32x2 with Bool8x2
Variable Float32x2_from_Bool8x2_arg;
Function Float32x2_from_Bool8x2;
inline constexpr std::array Float32x2_from_Bool8x2_args = { &Float32x2_from_Bool8x2_arg };

/// f32x2 with Bool8
Variable Float32x2_splat_Bool8_arg;
Function Float32x2_splat_Bool8;
inline constexpr std::array Float32x2_splat_Bool8_args = { &Float32x2_splat_Bool8_arg };

/// f32x2 with Float16x2
Variable Float32x2_from_Float16x2_arg;
Function Float32x2_from_Float16x2;
inline constexpr std::array Float32x2_from_Float16x2_args = { &Float32x2_from_Float16x2_arg };

/// f32x2 with Float16
Variable Float32x2_splat_Float16_arg;
Function Float32x2_splat_Float16;
inline constexpr std::array Float32x2_splat_Float16_args = { &Float32x2_splat_Float16_arg };

/// f32x2 with UInt16x2
Variable Float32x2_from_UInt16x2_arg;
Function Float32x2_from_UInt16x2;
inline constexpr std::array Float32x2_from_UInt16x2_args = { &Float32x2_from_UInt16x2_arg };

/// f32x2 with UInt16
Variable Float32x2_splat_UInt16_arg;
Function Float32x2_splat_UInt16;
inline constexpr std::array Float32x2_splat_UInt16_args = { &Float32x2_splat_UInt16_arg };

/// f32x2 with Int16x2
Variable Float32x2_from_Int16x2_arg;
Function Float32x2_from_Int16x2;
inline constexpr std::array Float32x2_from_Int16x2_args = { &Float32x2_from_Int16x2_arg };

/// f32x2 with Int16
Variable Float32x2_splat_Int16_arg;
Function Float32x2_splat_Int16;
inline constexpr std::array Float32x2_splat_Int16_args = { &Float32x2_splat_Int16_arg };

/// f32x2 with Float32, Float32
Variable Float32x2_ctor0_arg0_Float32;
Variable Float32x2_ctor0_arg1_Float32;
Function Float32x2_ctor0;
inline constexpr std::array Float32x2_ctor0_args = { &Float32x2_ctor0_arg0_Float32, &Float32x2_ctor0_arg1_Float32 };

/// u32x2 with Float32x2
Variable UInt32x2_from_Float32x2_arg;
Function UInt32x2_from_Float32x2;
inline constexpr std::array UInt32x2_from_Float32x2_args = { &UInt32x2_from_Float32x2_arg };

/// u32x2 with Float32
Variable UInt32x2_splat_Float32_arg;
Function UInt32x2_splat_Float32;
inline constexpr std::array UInt32x2_splat_Float32_args = { &UInt32x2_splat_Float32_arg };

/// u32x2 with UInt32x2
Variable UInt32x2_from_UInt32x2_arg;
Function UInt32x2_from_UInt32x2;
inline constexpr std::array UInt32x2_from_UInt32x2_args = { &UInt32x2_from_UInt32x2_arg };

/// u32x2 with UInt32
Variable UInt32x2_splat_UInt32_arg;
Function UInt32x2_splat_UInt32;
inline constexpr std::array UInt32x2_splat_UInt32_args = { &UInt32x2_splat_UInt32_arg };

/// u32x2 with Int32x2
Variable UInt32x2_from_Int32x2_arg;
Function UInt32x2_from_Int32x2;
inline constexpr std::array UInt32x2_from_Int32x2_args = { &UInt32x2_from_Int32x2_arg };

/// u32x2 with Int32
Variable UInt32x2_splat_Int32_arg;
Function UInt32x2_splat_Int32;
inline constexpr std::array UInt32x2_splat_Int32_args = { &UInt32x2_splat_Int32_arg };

/// u32x2 with Bool8x2
Variable UInt32x2_from_Bool8x2_arg;
Function UInt32x2_from_Bool8x2;
inline constexpr std::array UInt32x2_from_Bool8x2_args = { &UInt32x2_from_Bool8x2_arg };

/// u32x2 with Bool8
Variable UInt32x2_splat_Bool8_arg;
Function UInt32x2_splat_Bool8;
inline constexpr std::array UInt32x2_splat_Bool8_args = { &UInt32x2_splat_Bool8_arg };

/// u32x2 with Float16x2
Variable UInt32x2_from_Float16x2_arg;
Function UInt32x2_from_Float16x2;
inline constexpr std::array UInt32x2_from_Float16x2_args = { &UInt32x2_from_Float16x2_arg };

/// u32x2 with Float16
Variable UInt32x2_splat_Float16_arg;
Function UInt32x2_splat_Float16;
inline constexpr std::array UInt32x2_splat_Float16_args = { &UInt32x2_splat_Float16_arg };

/// u32x2 with UInt16x2
Variable UInt32x2_from_UInt16x2_arg;
Function UInt32x2_from_UInt16x2;
inline constexpr std::array UInt32x2_from_UInt16x2_args = { &UInt32x2_from_UInt16x2_arg };

/// u32x2 with UInt16
Variable UInt32x2_splat_UInt16_arg;
Function UInt32x2_splat_UInt16;
inline constexpr std::array UInt32x2_splat_UInt16_args = { &UInt32x2_splat_UInt16_arg };

/// u32x2 with Int16x2
Variable UInt32x2_from_Int16x2_arg;
Function UInt32x2_from_Int16x2;
inline constexpr std::array UInt32x2_from_Int16x2_args = { &UInt32x2_from_Int16x2_arg };

/// u32x2 with Int16
Variable UInt32x2_splat_Int16_arg;
Function UInt32x2_splat_Int16;
inline constexpr std::array UInt32x2_splat_Int16_args = { &UInt32x2_splat_Int16_arg };

/// u32x2 with UInt32, UInt32
Variable UInt32x2_ctor0_arg0_UInt32;
Variable UInt32x2_ctor0_arg1_UInt32;
Function UInt32x2_ctor0;
inline constexpr std::array UInt32x2_ctor0_args = { &UInt32x2_ctor0_arg0_UInt32, &UInt32x2_ctor0_arg1_UInt32 };

/// i32x2 with Float32x2
Variable Int32x2_from_Float32x2_arg;
Function Int32x2_from_Float32x2;
inline constexpr std::array Int32x2_from_Float32x2_args = { &Int32x2_from_Float32x2_arg };

/// i32x2 with Float32
Variable Int32x2_splat_Float32_arg;
Function Int32x2_splat_Float32;
inline constexpr std::array Int32x2_splat_Float32_args = { &Int32x2_splat_Float32_arg };

/// i32x2 with UInt32x2
Variable Int32x2_from_UInt32x2_arg;
Function Int32x2_from_UInt32x2;
inline constexpr std::array Int32x2_from_UInt32x2_args = { &Int32x2_from_UInt32x2_arg };

/// i32x2 with UInt32
Variable Int32x2_splat_UInt32_arg;
Function Int32x2_splat_UInt32;
inline constexpr std::array Int32x2_splat_UInt32_args = { &Int32x2_splat_UInt32_arg };

/// i32x2 with Int32x2
Variable Int32x2_from_Int32x2_arg;
Function Int32x2_from_Int32x2;
inline constexpr std::array Int32x2_from_Int32x2_args = { &Int32x2_from_Int32x2_arg };

/// i32x2 with Int32
Variable Int32x2_splat_Int32_arg;
Function Int32x2_splat_Int32;
inline constexpr std::array Int32x2_splat_Int32_args = { &Int32x2_splat_Int32_arg };

/// i32x2 with Bool8x2
Variable Int32x2_from_Bool8x2_arg;
Function Int32x2_from_Bool8x2;
inline constexpr std::array Int32x2_from_Bool8x2_args = { &Int32x2_from_Bool8x2_arg };

/// i32x2 with Bool8
Variable Int32x2_splat_Bool8_arg;
Function Int32x2_splat_Bool8;
inline constexpr std::array Int32x2_splat_Bool8_args = { &Int32x2_splat_Bool8_arg };

/// i32x2 with Float16x2
Variable Int32x2_from_Float16x2_arg;
Function Int32x2_from_Float16x2;
inline constexpr std::array Int32x2_from_Float16x2_args = { &Int32x2_from_Float16x2_arg };

/// i32x2 with Float16
Variable Int32x2_splat_Float16_arg;
Function Int32x2_splat_Float16;
inline constexpr std::array Int32x2_splat_Float16_args = { &Int32x2_splat_Float16_arg };

/// i32x2 with UInt16x2
Variable Int32x2_from_UInt16x2_arg;
Function Int32x2_from_UInt16x2;
inline constexpr std::array Int32x2_from_UInt16x2_args = { &Int32x2_from_UInt16x2_arg };

/// i32x2 with UInt16
Variable Int32x2_splat_UInt16_arg;
Function Int32x2_splat_UInt16;
inline constexpr std::array Int32x2_splat_UInt16_args = { &Int32x2_splat_UInt16_arg };

/// i32x2 with Int16x2
Variable Int32x2_from_Int16x2_arg;
Function Int32x2_from_Int16x2;
inline constexpr std::array Int32x2_from_Int16x2_args = { &Int32x2_from_Int16x2_arg };

/// i32x2 with Int16
Variable Int32x2_splat_Int16_arg;
Function Int32x2_splat_Int16;
inline constexpr std::array Int32x2_splat_Int16_args = { &Int32x2_splat_Int16_arg };

/// i32x2 with Int32, Int32
Variable Int32x2_ctor0_arg0_Int32;
Variable Int32x2_ctor0_arg1_Int32;
Function Int32x2_ctor0;
inline constexpr std::array Int32x2_ctor0_args = { &Int32x2_ctor0_arg0_Int32, &Int32x2_ctor0_arg1_Int32 };

/// b8x2 with UInt32x2
Variable Bool8x2_from_UInt32x2_arg;
Function Bool8x2_from_UInt32x2;
inline constexpr std::array Bool8x2_from_UInt32x2_args = { &Bool8x2_from_UInt32x2_arg };

/// b8x2 with UInt32
Variable Bool8x2_splat_UInt32_arg;
Function Bool8x2_splat_UInt32;
inline constexpr std::array Bool8x2_splat_UInt32_args = { &Bool8x2_splat_UInt32_arg };

/// b8x2 with Int32x2
Variable Bool8x2_from_Int32x2_arg;
Function Bool8x2_from_Int32x2;
inline constexpr std::array Bool8x2_from_Int32x2_args = { &Bool8x2_from_Int32x2_arg };

/// b8x2 with Int32
Variable Bool8x2_splat_Int32_arg;
Function Bool8x2_splat_Int32;
inline constexpr std::array Bool8x2_splat_Int32_args = { &Bool8x2_splat_Int32_arg };

/// b8x2 with Bool8x2
Variable Bool8x2_from_Bool8x2_arg;
Function Bool8x2_from_Bool8x2;
inline constexpr std::array Bool8x2_from_Bool8x2_args = { &Bool8x2_from_Bool8x2_arg };

/// b8x2 with Bool8
Variable Bool8x2_splat_Bool8_arg;
Function Bool8x2_splat_Bool8;
inline constexpr std::array Bool8x2_splat_Bool8_args = { &Bool8x2_splat_Bool8_arg };

/// b8x2 with UInt16x2
Variable Bool8x2_from_UInt16x2_arg;
Function Bool8x2_from_UInt16x2;
inline constexpr std::array Bool8x2_from_UInt16x2_args = { &Bool8x2_from_UInt16x2_arg };

/// b8x2 with UInt16
Variable Bool8x2_splat_UInt16_arg;
Function Bool8x2_splat_UInt16;
inline constexpr std::array Bool8x2_splat_UInt16_args = { &Bool8x2_splat_UInt16_arg };

/// b8x2 with Int16x2
Variable Bool8x2_from_Int16x2_arg;
Function Bool8x2_from_Int16x2;
inline constexpr std::array Bool8x2_from_Int16x2_args = { &Bool8x2_from_Int16x2_arg };

/// b8x2 with Int16
Variable Bool8x2_splat_Int16_arg;
Function Bool8x2_splat_Int16;
inline constexpr std::array Bool8x2_splat_Int16_args = { &Bool8x2_splat_Int16_arg };

/// b8x2 with Bool8, Bool8
Variable Bool8x2_ctor0_arg0_Bool8;
Variable Bool8x2_ctor0_arg1_Bool8;
Function Bool8x2_ctor0;
inline constexpr std::array Bool8x2_ctor0_args = { &Bool8x2_ctor0_arg0_Bool8, &Bool8x2_ctor0_arg1_Bool8 };

/// f16x2 with Float32x2
Variable Float16x2_from_Float32x2_arg;
Function Float16x2_from_Float32x2;
inline constexpr std::array Float16x2_from_Float32x2_args = { &Float16x2_from_Float32x2_arg };

/// f16x2 with Float32
Variable Float16x2_splat_Float32_arg;
Function Float16x2_splat_Float32;
inline constexpr std::array Float16x2_splat_Float32_args = { &Float16x2_splat_Float32_arg };

/// f16x2 with UInt32x2
Variable Float16x2_from_UInt32x2_arg;
Function Float16x2_from_UInt32x2;
inline constexpr std::array Float16x2_from_UInt32x2_args = { &Float16x2_from_UInt32x2_arg };

/// f16x2 with UInt32
Variable Float16x2_splat_UInt32_arg;
Function Float16x2_splat_UInt32;
inline constexpr std::array Float16x2_splat_UInt32_args = { &Float16x2_splat_UInt32_arg };

/// f16x2 with Int32x2
Variable Float16x2_from_Int32x2_arg;
Function Float16x2_from_Int32x2;
inline constexpr std::array Float16x2_from_Int32x2_args = { &Float16x2_from_Int32x2_arg };

/// f16x2 with Int32
Variable Float16x2_splat_Int32_arg;
Function Float16x2_splat_Int32;
inline constexpr std::array Float16x2_splat_Int32_args = { &Float16x2_splat_Int32_arg };

/// f16x2 with Bool8x2
Variable Float16x2_from_Bool8x2_arg;
Function Float16x2_from_Bool8x2;
inline constexpr std::array Float16x2_from_Bool8x2_args = { &Float16x2_from_Bool8x2_arg };

/// f16x2 with Bool8
Variable Float16x2_splat_Bool8_arg;
Function Float16x2_splat_Bool8;
inline constexpr std::array Float16x2_splat_Bool8_args = { &Float16x2_splat_Bool8_arg };

/// f16x2 with Float16x2
Variable Float16x2_from_Float16x2_arg;
Function Float16x2_from_Float16x2;
inline constexpr std::array Float16x2_from_Float16x2_args = { &Float16x2_from_Float16x2_arg };

/// f16x2 with Float16
Variable Float16x2_splat_Float16_arg;
Function Float16x2_splat_Float16;
inline constexpr std::array Float16x2_splat_Float16_args = { &Float16x2_splat_Float16_arg };

/// f16x2 with UInt16x2
Variable Float16x2_from_UInt16x2_arg;
Function Float16x2_from_UInt16x2;
inline constexpr std::array Float16x2_from_UInt16x2_args = { &Float16x2_from_UInt16x2_arg };

/// f16x2 with UInt16
Variable Float16x2_splat_UInt16_arg;
Function Float16x2_splat_UInt16;
inline constexpr std::array Float16x2_splat_UInt16_args = { &Float16x2_splat_UInt16_arg };

/// f16x2 with Int16x2
Variable Float16x2_from_Int16x2_arg;
Function Float16x2_from_Int16x2;
inline constexpr std::array Float16x2_from_Int16x2_args = { &Float16x2_from_Int16x2_arg };

/// f16x2 with Int16
Variable Float16x2_splat_Int16_arg;
Function Float16x2_splat_Int16;
inline constexpr std::array Float16x2_splat_Int16_args = { &Float16x2_splat_Int16_arg };

/// f16x2 with Float16, Float16
Variable Float16x2_ctor0_arg0_Float16;
Variable Float16x2_ctor0_arg1_Float16;
Function Float16x2_ctor0;
inline constexpr std::array Float16x2_ctor0_args = { &Float16x2_ctor0_arg0_Float16, &Float16x2_ctor0_arg1_Float16 };

/// u16x2 with Float32x2
Variable UInt16x2_from_Float32x2_arg;
Function UInt16x2_from_Float32x2;
inline constexpr std::array UInt16x2_from_Float32x2_args = { &UInt16x2_from_Float32x2_arg };

/// u16x2 with Float32
Variable UInt16x2_splat_Float32_arg;
Function UInt16x2_splat_Float32;
inline constexpr std::array UInt16x2_splat_Float32_args = { &UInt16x2_splat_Float32_arg };

/// u16x2 with UInt32x2
Variable UInt16x2_from_UInt32x2_arg;
Function UInt16x2_from_UInt32x2;
inline constexpr std::array UInt16x2_from_UInt32x2_args = { &UInt16x2_from_UInt32x2_arg };

/// u16x2 with UInt32
Variable UInt16x2_splat_UInt32_arg;
Function UInt16x2_splat_UInt32;
inline constexpr std::array UInt16x2_splat_UInt32_args = { &UInt16x2_splat_UInt32_arg };

/// u16x2 with Int32x2
Variable UInt16x2_from_Int32x2_arg;
Function UInt16x2_from_Int32x2;
inline constexpr std::array UInt16x2_from_Int32x2_args = { &UInt16x2_from_Int32x2_arg };

/// u16x2 with Int32
Variable UInt16x2_splat_Int32_arg;
Function UInt16x2_splat_Int32;
inline constexpr std::array UInt16x2_splat_Int32_args = { &UInt16x2_splat_Int32_arg };

/// u16x2 with Bool8x2
Variable UInt16x2_from_Bool8x2_arg;
Function UInt16x2_from_Bool8x2;
inline constexpr std::array UInt16x2_from_Bool8x2_args = { &UInt16x2_from_Bool8x2_arg };

/// u16x2 with Bool8
Variable UInt16x2_splat_Bool8_arg;
Function UInt16x2_splat_Bool8;
inline constexpr std::array UInt16x2_splat_Bool8_args = { &UInt16x2_splat_Bool8_arg };

/// u16x2 with Float16x2
Variable UInt16x2_from_Float16x2_arg;
Function UInt16x2_from_Float16x2;
inline constexpr std::array UInt16x2_from_Float16x2_args = { &UInt16x2_from_Float16x2_arg };

/// u16x2 with Float16
Variable UInt16x2_splat_Float16_arg;
Function UInt16x2_splat_Float16;
inline constexpr std::array UInt16x2_splat_Float16_args = { &UInt16x2_splat_Float16_arg };

/// u16x2 with UInt16x2
Variable UInt16x2_from_UInt16x2_arg;
Function UInt16x2_from_UInt16x2;
inline constexpr std::array UInt16x2_from_UInt16x2_args = { &UInt16x2_from_UInt16x2_arg };

/// u16x2 with UInt16
Variable UInt16x2_splat_UInt16_arg;
Function UInt16x2_splat_UInt16;
inline constexpr std::array UInt16x2_splat_UInt16_args = { &UInt16x2_splat_UInt16_arg };

/// u16x2 with Int16x2
Variable UInt16x2_from_Int16x2_arg;
Function UInt16x2_from_Int16x2;
inline constexpr std::array UInt16x2_from_Int16x2_args = { &UInt16x2_from_Int16x2_arg };

/// u16x2 with Int16
Variable UInt16x2_splat_Int16_arg;
Function UInt16x2_splat_Int16;
inline constexpr std::array UInt16x2_splat_Int16_args = { &UInt16x2_splat_Int16_arg };

/// u16x2 with UInt16, UInt16
Variable UInt16x2_ctor0_arg0_UInt16;
Variable UInt16x2_ctor0_arg1_UInt16;
Function UInt16x2_ctor0;
inline constexpr std::array UInt16x2_ctor0_args = { &UInt16x2_ctor0_arg0_UInt16, &UInt16x2_ctor0_arg1_UInt16 };

/// i16x2 with Float32x2
Variable Int16x2_from_Float32x2_arg;
Function Int16x2_from_Float32x2;
inline constexpr std::array Int16x2_from_Float32x2_args = { &Int16x2_from_Float32x2_arg };

/// i16x2 with Float32
Variable Int16x2_splat_Float32_arg;
Function Int16x2_splat_Float32;
inline constexpr std::array Int16x2_splat_Float32_args = { &Int16x2_splat_Float32_arg };

/// i16x2 with UInt32x2
Variable Int16x2_from_UInt32x2_arg;
Function Int16x2_from_UInt32x2;
inline constexpr std::array Int16x2_from_UInt32x2_args = { &Int16x2_from_UInt32x2_arg };

/// i16x2 with UInt32
Variable Int16x2_splat_UInt32_arg;
Function Int16x2_splat_UInt32;
inline constexpr std::array Int16x2_splat_UInt32_args = { &Int16x2_splat_UInt32_arg };

/// i16x2 with Int32x2
Variable Int16x2_from_Int32x2_arg;
Function Int16x2_from_Int32x2;
inline constexpr std::array Int16x2_from_Int32x2_args = { &Int16x2_from_Int32x2_arg };

/// i16x2 with Int32
Variable Int16x2_splat_Int32_arg;
Function Int16x2_splat_Int32;
inline constexpr std::array Int16x2_splat_Int32_args = { &Int16x2_splat_Int32_arg };

/// i16x2 with Bool8x2
Variable Int16x2_from_Bool8x2_arg;
Function Int16x2_from_Bool8x2;
inline constexpr std::array Int16x2_from_Bool8x2_args = { &Int16x2_from_Bool8x2_arg };

/// i16x2 with Bool8
Variable Int16x2_splat_Bool8_arg;
Function Int16x2_splat_Bool8;
inline constexpr std::array Int16x2_splat_Bool8_args = { &Int16x2_splat_Bool8_arg };

/// i16x2 with Float16x2
Variable Int16x2_from_Float16x2_arg;
Function Int16x2_from_Float16x2;
inline constexpr std::array Int16x2_from_Float16x2_args = { &Int16x2_from_Float16x2_arg };

/// i16x2 with Float16
Variable Int16x2_splat_Float16_arg;
Function Int16x2_splat_Float16;
inline constexpr std::array Int16x2_splat_Float16_args = { &Int16x2_splat_Float16_arg };

/// i16x2 with UInt16x2
Variable Int16x2_from_UInt16x2_arg;
Function Int16x2_from_UInt16x2;
inline constexpr std::array Int16x2_from_UInt16x2_args = { &Int16x2_from_UInt16x2_arg };

/// i16x2 with UInt16
Variable Int16x2_splat_UInt16_arg;
Function Int16x2_splat_UInt16;
inline constexpr std::array Int16x2_splat_UInt16_args = { &Int16x2_splat_UInt16_arg };

/// i16x2 with Int16x2
Variable Int16x2_from_Int16x2_arg;
Function Int16x2_from_Int16x2;
inline constexpr std::array Int16x2_from_Int16x2_args = { &Int16x2_from_Int16x2_arg };

/// i16x2 with Int16
Variable Int16x2_splat_Int16_arg;
Function Int16x2_splat_Int16;
inline constexpr std::array Int16x2_splat_Int16_args = { &Int16x2_splat_Int16_arg };

/// i16x2 with Int16, Int16
Variable Int16x2_ctor0_arg0_Int16;
Variable Int16x2_ctor0_arg1_Int16;
Function Int16x2_ctor0;
inline constexpr std::array Int16x2_ctor0_args = { &Int16x2_ctor0_arg0_Int16, &Int16x2_ctor0_arg1_Int16 };

/// f32x3 with Float32x3
Variable Float32x3_from_Float32x3_arg;
Function Float32x3_from_Float32x3;
inline constexpr std::array Float32x3_from_Float32x3_args = { &Float32x3_from_Float32x3_arg };

/// f32x3 with Float32
Variable Float32x3_splat_Float32_arg;
Function Float32x3_splat_Float32;
inline constexpr std::array Float32x3_splat_Float32_args = { &Float32x3_splat_Float32_arg };

/// f32x3 with UInt32x3
Variable Float32x3_from_UInt32x3_arg;
Function Float32x3_from_UInt32x3;
inline constexpr std::array Float32x3_from_UInt32x3_args = { &Float32x3_from_UInt32x3_arg };

/// f32x3 with UInt32
Variable Float32x3_splat_UInt32_arg;
Function Float32x3_splat_UInt32;
inline constexpr std::array Float32x3_splat_UInt32_args = { &Float32x3_splat_UInt32_arg };

/// f32x3 with Int32x3
Variable Float32x3_from_Int32x3_arg;
Function Float32x3_from_Int32x3;
inline constexpr std::array Float32x3_from_Int32x3_args = { &Float32x3_from_Int32x3_arg };

/// f32x3 with Int32
Variable Float32x3_splat_Int32_arg;
Function Float32x3_splat_Int32;
inline constexpr std::array Float32x3_splat_Int32_args = { &Float32x3_splat_Int32_arg };

/// f32x3 with Bool8x3
Variable Float32x3_from_Bool8x3_arg;
Function Float32x3_from_Bool8x3;
inline constexpr std::array Float32x3_from_Bool8x3_args = { &Float32x3_from_Bool8x3_arg };

/// f32x3 with Bool8
Variable Float32x3_splat_Bool8_arg;
Function Float32x3_splat_Bool8;
inline constexpr std::array Float32x3_splat_Bool8_args = { &Float32x3_splat_Bool8_arg };

/// f32x3 with Float16x3
Variable Float32x3_from_Float16x3_arg;
Function Float32x3_from_Float16x3;
inline constexpr std::array Float32x3_from_Float16x3_args = { &Float32x3_from_Float16x3_arg };

/// f32x3 with Float16
Variable Float32x3_splat_Float16_arg;
Function Float32x3_splat_Float16;
inline constexpr std::array Float32x3_splat_Float16_args = { &Float32x3_splat_Float16_arg };

/// f32x3 with UInt16x3
Variable Float32x3_from_UInt16x3_arg;
Function Float32x3_from_UInt16x3;
inline constexpr std::array Float32x3_from_UInt16x3_args = { &Float32x3_from_UInt16x3_arg };

/// f32x3 with UInt16
Variable Float32x3_splat_UInt16_arg;
Function Float32x3_splat_UInt16;
inline constexpr std::array Float32x3_splat_UInt16_args = { &Float32x3_splat_UInt16_arg };

/// f32x3 with Int16x3
Variable Float32x3_from_Int16x3_arg;
Function Float32x3_from_Int16x3;
inline constexpr std::array Float32x3_from_Int16x3_args = { &Float32x3_from_Int16x3_arg };

/// f32x3 with Int16
Variable Float32x3_splat_Int16_arg;
Function Float32x3_splat_Int16;
inline constexpr std::array Float32x3_splat_Int16_args = { &Float32x3_splat_Int16_arg };

/// f32x3 with Float32, Float32, Float32
Variable Float32x3_ctor0_arg0_Float32;
Variable Float32x3_ctor0_arg1_Float32;
Variable Float32x3_ctor0_arg2_Float32;
Function Float32x3_ctor0;
inline constexpr std::array Float32x3_ctor0_args = { &Float32x3_ctor0_arg0_Float32, &Float32x3_ctor0_arg1_Float32, &Float32x3_ctor0_arg2_Float32 };

/// f32x3 with Float32x2, Float32
Variable Float32x3_ctor1_arg0_Float32x2;
Variable Float32x3_ctor1_arg1_Float32;
Function Float32x3_ctor1;
inline constexpr std::array Float32x3_ctor1_args = { &Float32x3_ctor1_arg0_Float32x2, &Float32x3_ctor1_arg1_Float32 };

/// f32x3 with Float32, Float32x2
Variable Float32x3_ctor2_arg0_Float32;
Variable Float32x3_ctor2_arg1_Float32x2;
Function Float32x3_ctor2;
inline constexpr std::array Float32x3_ctor2_args = { &Float32x3_ctor2_arg0_Float32, &Float32x3_ctor2_arg1_Float32x2 };

/// u32x3 with Float32x3
Variable UInt32x3_from_Float32x3_arg;
Function UInt32x3_from_Float32x3;
inline constexpr std::array UInt32x3_from_Float32x3_args = { &UInt32x3_from_Float32x3_arg };

/// u32x3 with Float32
Variable UInt32x3_splat_Float32_arg;
Function UInt32x3_splat_Float32;
inline constexpr std::array UInt32x3_splat_Float32_args = { &UInt32x3_splat_Float32_arg };

/// u32x3 with UInt32x3
Variable UInt32x3_from_UInt32x3_arg;
Function UInt32x3_from_UInt32x3;
inline constexpr std::array UInt32x3_from_UInt32x3_args = { &UInt32x3_from_UInt32x3_arg };

/// u32x3 with UInt32
Variable UInt32x3_splat_UInt32_arg;
Function UInt32x3_splat_UInt32;
inline constexpr std::array UInt32x3_splat_UInt32_args = { &UInt32x3_splat_UInt32_arg };

/// u32x3 with Int32x3
Variable UInt32x3_from_Int32x3_arg;
Function UInt32x3_from_Int32x3;
inline constexpr std::array UInt32x3_from_Int32x3_args = { &UInt32x3_from_Int32x3_arg };

/// u32x3 with Int32
Variable UInt32x3_splat_Int32_arg;
Function UInt32x3_splat_Int32;
inline constexpr std::array UInt32x3_splat_Int32_args = { &UInt32x3_splat_Int32_arg };

/// u32x3 with Bool8x3
Variable UInt32x3_from_Bool8x3_arg;
Function UInt32x3_from_Bool8x3;
inline constexpr std::array UInt32x3_from_Bool8x3_args = { &UInt32x3_from_Bool8x3_arg };

/// u32x3 with Bool8
Variable UInt32x3_splat_Bool8_arg;
Function UInt32x3_splat_Bool8;
inline constexpr std::array UInt32x3_splat_Bool8_args = { &UInt32x3_splat_Bool8_arg };

/// u32x3 with Float16x3
Variable UInt32x3_from_Float16x3_arg;
Function UInt32x3_from_Float16x3;
inline constexpr std::array UInt32x3_from_Float16x3_args = { &UInt32x3_from_Float16x3_arg };

/// u32x3 with Float16
Variable UInt32x3_splat_Float16_arg;
Function UInt32x3_splat_Float16;
inline constexpr std::array UInt32x3_splat_Float16_args = { &UInt32x3_splat_Float16_arg };

/// u32x3 with UInt16x3
Variable UInt32x3_from_UInt16x3_arg;
Function UInt32x3_from_UInt16x3;
inline constexpr std::array UInt32x3_from_UInt16x3_args = { &UInt32x3_from_UInt16x3_arg };

/// u32x3 with UInt16
Variable UInt32x3_splat_UInt16_arg;
Function UInt32x3_splat_UInt16;
inline constexpr std::array UInt32x3_splat_UInt16_args = { &UInt32x3_splat_UInt16_arg };

/// u32x3 with Int16x3
Variable UInt32x3_from_Int16x3_arg;
Function UInt32x3_from_Int16x3;
inline constexpr std::array UInt32x3_from_Int16x3_args = { &UInt32x3_from_Int16x3_arg };

/// u32x3 with Int16
Variable UInt32x3_splat_Int16_arg;
Function UInt32x3_splat_Int16;
inline constexpr std::array UInt32x3_splat_Int16_args = { &UInt32x3_splat_Int16_arg };

/// u32x3 with UInt32, UInt32, UInt32
Variable UInt32x3_ctor0_arg0_UInt32;
Variable UInt32x3_ctor0_arg1_UInt32;
Variable UInt32x3_ctor0_arg2_UInt32;
Function UInt32x3_ctor0;
inline constexpr std::array UInt32x3_ctor0_args = { &UInt32x3_ctor0_arg0_UInt32, &UInt32x3_ctor0_arg1_UInt32, &UInt32x3_ctor0_arg2_UInt32 };

/// u32x3 with UInt32x2, UInt32
Variable UInt32x3_ctor1_arg0_UInt32x2;
Variable UInt32x3_ctor1_arg1_UInt32;
Function UInt32x3_ctor1;
inline constexpr std::array UInt32x3_ctor1_args = { &UInt32x3_ctor1_arg0_UInt32x2, &UInt32x3_ctor1_arg1_UInt32 };

/// u32x3 with UInt32, UInt32x2
Variable UInt32x3_ctor2_arg0_UInt32;
Variable UInt32x3_ctor2_arg1_UInt32x2;
Function UInt32x3_ctor2;
inline constexpr std::array UInt32x3_ctor2_args = { &UInt32x3_ctor2_arg0_UInt32, &UInt32x3_ctor2_arg1_UInt32x2 };

/// i32x3 with Float32x3
Variable Int32x3_from_Float32x3_arg;
Function Int32x3_from_Float32x3;
inline constexpr std::array Int32x3_from_Float32x3_args = { &Int32x3_from_Float32x3_arg };

/// i32x3 with Float32
Variable Int32x3_splat_Float32_arg;
Function Int32x3_splat_Float32;
inline constexpr std::array Int32x3_splat_Float32_args = { &Int32x3_splat_Float32_arg };

/// i32x3 with UInt32x3
Variable Int32x3_from_UInt32x3_arg;
Function Int32x3_from_UInt32x3;
inline constexpr std::array Int32x3_from_UInt32x3_args = { &Int32x3_from_UInt32x3_arg };

/// i32x3 with UInt32
Variable Int32x3_splat_UInt32_arg;
Function Int32x3_splat_UInt32;
inline constexpr std::array Int32x3_splat_UInt32_args = { &Int32x3_splat_UInt32_arg };

/// i32x3 with Int32x3
Variable Int32x3_from_Int32x3_arg;
Function Int32x3_from_Int32x3;
inline constexpr std::array Int32x3_from_Int32x3_args = { &Int32x3_from_Int32x3_arg };

/// i32x3 with Int32
Variable Int32x3_splat_Int32_arg;
Function Int32x3_splat_Int32;
inline constexpr std::array Int32x3_splat_Int32_args = { &Int32x3_splat_Int32_arg };

/// i32x3 with Bool8x3
Variable Int32x3_from_Bool8x3_arg;
Function Int32x3_from_Bool8x3;
inline constexpr std::array Int32x3_from_Bool8x3_args = { &Int32x3_from_Bool8x3_arg };

/// i32x3 with Bool8
Variable Int32x3_splat_Bool8_arg;
Function Int32x3_splat_Bool8;
inline constexpr std::array Int32x3_splat_Bool8_args = { &Int32x3_splat_Bool8_arg };

/// i32x3 with Float16x3
Variable Int32x3_from_Float16x3_arg;
Function Int32x3_from_Float16x3;
inline constexpr std::array Int32x3_from_Float16x3_args = { &Int32x3_from_Float16x3_arg };

/// i32x3 with Float16
Variable Int32x3_splat_Float16_arg;
Function Int32x3_splat_Float16;
inline constexpr std::array Int32x3_splat_Float16_args = { &Int32x3_splat_Float16_arg };

/// i32x3 with UInt16x3
Variable Int32x3_from_UInt16x3_arg;
Function Int32x3_from_UInt16x3;
inline constexpr std::array Int32x3_from_UInt16x3_args = { &Int32x3_from_UInt16x3_arg };

/// i32x3 with UInt16
Variable Int32x3_splat_UInt16_arg;
Function Int32x3_splat_UInt16;
inline constexpr std::array Int32x3_splat_UInt16_args = { &Int32x3_splat_UInt16_arg };

/// i32x3 with Int16x3
Variable Int32x3_from_Int16x3_arg;
Function Int32x3_from_Int16x3;
inline constexpr std::array Int32x3_from_Int16x3_args = { &Int32x3_from_Int16x3_arg };

/// i32x3 with Int16
Variable Int32x3_splat_Int16_arg;
Function Int32x3_splat_Int16;
inline constexpr std::array Int32x3_splat_Int16_args = { &Int32x3_splat_Int16_arg };

/// i32x3 with Int32, Int32, Int32
Variable Int32x3_ctor0_arg0_Int32;
Variable Int32x3_ctor0_arg1_Int32;
Variable Int32x3_ctor0_arg2_Int32;
Function Int32x3_ctor0;
inline constexpr std::array Int32x3_ctor0_args = { &Int32x3_ctor0_arg0_Int32, &Int32x3_ctor0_arg1_Int32, &Int32x3_ctor0_arg2_Int32 };

/// i32x3 with Int32x2, Int32
Variable Int32x3_ctor1_arg0_Int32x2;
Variable Int32x3_ctor1_arg1_Int32;
Function Int32x3_ctor1;
inline constexpr std::array Int32x3_ctor1_args = { &Int32x3_ctor1_arg0_Int32x2, &Int32x3_ctor1_arg1_Int32 };

/// i32x3 with Int32, Int32x2
Variable Int32x3_ctor2_arg0_Int32;
Variable Int32x3_ctor2_arg1_Int32x2;
Function Int32x3_ctor2;
inline constexpr std::array Int32x3_ctor2_args = { &Int32x3_ctor2_arg0_Int32, &Int32x3_ctor2_arg1_Int32x2 };

/// b8x3 with UInt32x3
Variable Bool8x3_from_UInt32x3_arg;
Function Bool8x3_from_UInt32x3;
inline constexpr std::array Bool8x3_from_UInt32x3_args = { &Bool8x3_from_UInt32x3_arg };

/// b8x3 with UInt32
Variable Bool8x3_splat_UInt32_arg;
Function Bool8x3_splat_UInt32;
inline constexpr std::array Bool8x3_splat_UInt32_args = { &Bool8x3_splat_UInt32_arg };

/// b8x3 with Int32x3
Variable Bool8x3_from_Int32x3_arg;
Function Bool8x3_from_Int32x3;
inline constexpr std::array Bool8x3_from_Int32x3_args = { &Bool8x3_from_Int32x3_arg };

/// b8x3 with Int32
Variable Bool8x3_splat_Int32_arg;
Function Bool8x3_splat_Int32;
inline constexpr std::array Bool8x3_splat_Int32_args = { &Bool8x3_splat_Int32_arg };

/// b8x3 with Bool8x3
Variable Bool8x3_from_Bool8x3_arg;
Function Bool8x3_from_Bool8x3;
inline constexpr std::array Bool8x3_from_Bool8x3_args = { &Bool8x3_from_Bool8x3_arg };

/// b8x3 with Bool8
Variable Bool8x3_splat_Bool8_arg;
Function Bool8x3_splat_Bool8;
inline constexpr std::array Bool8x3_splat_Bool8_args = { &Bool8x3_splat_Bool8_arg };

/// b8x3 with UInt16x3
Variable Bool8x3_from_UInt16x3_arg;
Function Bool8x3_from_UInt16x3;
inline constexpr std::array Bool8x3_from_UInt16x3_args = { &Bool8x3_from_UInt16x3_arg };

/// b8x3 with UInt16
Variable Bool8x3_splat_UInt16_arg;
Function Bool8x3_splat_UInt16;
inline constexpr std::array Bool8x3_splat_UInt16_args = { &Bool8x3_splat_UInt16_arg };

/// b8x3 with Int16x3
Variable Bool8x3_from_Int16x3_arg;
Function Bool8x3_from_Int16x3;
inline constexpr std::array Bool8x3_from_Int16x3_args = { &Bool8x3_from_Int16x3_arg };

/// b8x3 with Int16
Variable Bool8x3_splat_Int16_arg;
Function Bool8x3_splat_Int16;
inline constexpr std::array Bool8x3_splat_Int16_args = { &Bool8x3_splat_Int16_arg };

/// b8x3 with Bool8, Bool8, Bool8
Variable Bool8x3_ctor0_arg0_Bool8;
Variable Bool8x3_ctor0_arg1_Bool8;
Variable Bool8x3_ctor0_arg2_Bool8;
Function Bool8x3_ctor0;
inline constexpr std::array Bool8x3_ctor0_args = { &Bool8x3_ctor0_arg0_Bool8, &Bool8x3_ctor0_arg1_Bool8, &Bool8x3_ctor0_arg2_Bool8 };

/// b8x3 with Bool8x2, Bool8
Variable Bool8x3_ctor1_arg0_Bool8x2;
Variable Bool8x3_ctor1_arg1_Bool8;
Function Bool8x3_ctor1;
inline constexpr std::array Bool8x3_ctor1_args = { &Bool8x3_ctor1_arg0_Bool8x2, &Bool8x3_ctor1_arg1_Bool8 };

/// b8x3 with Bool8, Bool8x2
Variable Bool8x3_ctor2_arg0_Bool8;
Variable Bool8x3_ctor2_arg1_Bool8x2;
Function Bool8x3_ctor2;
inline constexpr std::array Bool8x3_ctor2_args = { &Bool8x3_ctor2_arg0_Bool8, &Bool8x3_ctor2_arg1_Bool8x2 };

/// f16x3 with Float32x3
Variable Float16x3_from_Float32x3_arg;
Function Float16x3_from_Float32x3;
inline constexpr std::array Float16x3_from_Float32x3_args = { &Float16x3_from_Float32x3_arg };

/// f16x3 with Float32
Variable Float16x3_splat_Float32_arg;
Function Float16x3_splat_Float32;
inline constexpr std::array Float16x3_splat_Float32_args = { &Float16x3_splat_Float32_arg };

/// f16x3 with UInt32x3
Variable Float16x3_from_UInt32x3_arg;
Function Float16x3_from_UInt32x3;
inline constexpr std::array Float16x3_from_UInt32x3_args = { &Float16x3_from_UInt32x3_arg };

/// f16x3 with UInt32
Variable Float16x3_splat_UInt32_arg;
Function Float16x3_splat_UInt32;
inline constexpr std::array Float16x3_splat_UInt32_args = { &Float16x3_splat_UInt32_arg };

/// f16x3 with Int32x3
Variable Float16x3_from_Int32x3_arg;
Function Float16x3_from_Int32x3;
inline constexpr std::array Float16x3_from_Int32x3_args = { &Float16x3_from_Int32x3_arg };

/// f16x3 with Int32
Variable Float16x3_splat_Int32_arg;
Function Float16x3_splat_Int32;
inline constexpr std::array Float16x3_splat_Int32_args = { &Float16x3_splat_Int32_arg };

/// f16x3 with Bool8x3
Variable Float16x3_from_Bool8x3_arg;
Function Float16x3_from_Bool8x3;
inline constexpr std::array Float16x3_from_Bool8x3_args = { &Float16x3_from_Bool8x3_arg };

/// f16x3 with Bool8
Variable Float16x3_splat_Bool8_arg;
Function Float16x3_splat_Bool8;
inline constexpr std::array Float16x3_splat_Bool8_args = { &Float16x3_splat_Bool8_arg };

/// f16x3 with Float16x3
Variable Float16x3_from_Float16x3_arg;
Function Float16x3_from_Float16x3;
inline constexpr std::array Float16x3_from_Float16x3_args = { &Float16x3_from_Float16x3_arg };

/// f16x3 with Float16
Variable Float16x3_splat_Float16_arg;
Function Float16x3_splat_Float16;
inline constexpr std::array Float16x3_splat_Float16_args = { &Float16x3_splat_Float16_arg };

/// f16x3 with UInt16x3
Variable Float16x3_from_UInt16x3_arg;
Function Float16x3_from_UInt16x3;
inline constexpr std::array Float16x3_from_UInt16x3_args = { &Float16x3_from_UInt16x3_arg };

/// f16x3 with UInt16
Variable Float16x3_splat_UInt16_arg;
Function Float16x3_splat_UInt16;
inline constexpr std::array Float16x3_splat_UInt16_args = { &Float16x3_splat_UInt16_arg };

/// f16x3 with Int16x3
Variable Float16x3_from_Int16x3_arg;
Function Float16x3_from_Int16x3;
inline constexpr std::array Float16x3_from_Int16x3_args = { &Float16x3_from_Int16x3_arg };

/// f16x3 with Int16
Variable Float16x3_splat_Int16_arg;
Function Float16x3_splat_Int16;
inline constexpr std::array Float16x3_splat_Int16_args = { &Float16x3_splat_Int16_arg };

/// f16x3 with Float16, Float16, Float16
Variable Float16x3_ctor0_arg0_Float16;
Variable Float16x3_ctor0_arg1_Float16;
Variable Float16x3_ctor0_arg2_Float16;
Function Float16x3_ctor0;
inline constexpr std::array Float16x3_ctor0_args = { &Float16x3_ctor0_arg0_Float16, &Float16x3_ctor0_arg1_Float16, &Float16x3_ctor0_arg2_Float16 };

/// f16x3 with Float16x2, Float16
Variable Float16x3_ctor1_arg0_Float16x2;
Variable Float16x3_ctor1_arg1_Float16;
Function Float16x3_ctor1;
inline constexpr std::array Float16x3_ctor1_args = { &Float16x3_ctor1_arg0_Float16x2, &Float16x3_ctor1_arg1_Float16 };

/// f16x3 with Float16, Float16x2
Variable Float16x3_ctor2_arg0_Float16;
Variable Float16x3_ctor2_arg1_Float16x2;
Function Float16x3_ctor2;
inline constexpr std::array Float16x3_ctor2_args = { &Float16x3_ctor2_arg0_Float16, &Float16x3_ctor2_arg1_Float16x2 };

/// u16x3 with Float32x3
Variable UInt16x3_from_Float32x3_arg;
Function UInt16x3_from_Float32x3;
inline constexpr std::array UInt16x3_from_Float32x3_args = { &UInt16x3_from_Float32x3_arg };

/// u16x3 with Float32
Variable UInt16x3_splat_Float32_arg;
Function UInt16x3_splat_Float32;
inline constexpr std::array UInt16x3_splat_Float32_args = { &UInt16x3_splat_Float32_arg };

/// u16x3 with UInt32x3
Variable UInt16x3_from_UInt32x3_arg;
Function UInt16x3_from_UInt32x3;
inline constexpr std::array UInt16x3_from_UInt32x3_args = { &UInt16x3_from_UInt32x3_arg };

/// u16x3 with UInt32
Variable UInt16x3_splat_UInt32_arg;
Function UInt16x3_splat_UInt32;
inline constexpr std::array UInt16x3_splat_UInt32_args = { &UInt16x3_splat_UInt32_arg };

/// u16x3 with Int32x3
Variable UInt16x3_from_Int32x3_arg;
Function UInt16x3_from_Int32x3;
inline constexpr std::array UInt16x3_from_Int32x3_args = { &UInt16x3_from_Int32x3_arg };

/// u16x3 with Int32
Variable UInt16x3_splat_Int32_arg;
Function UInt16x3_splat_Int32;
inline constexpr std::array UInt16x3_splat_Int32_args = { &UInt16x3_splat_Int32_arg };

/// u16x3 with Bool8x3
Variable UInt16x3_from_Bool8x3_arg;
Function UInt16x3_from_Bool8x3;
inline constexpr std::array UInt16x3_from_Bool8x3_args = { &UInt16x3_from_Bool8x3_arg };

/// u16x3 with Bool8
Variable UInt16x3_splat_Bool8_arg;
Function UInt16x3_splat_Bool8;
inline constexpr std::array UInt16x3_splat_Bool8_args = { &UInt16x3_splat_Bool8_arg };

/// u16x3 with Float16x3
Variable UInt16x3_from_Float16x3_arg;
Function UInt16x3_from_Float16x3;
inline constexpr std::array UInt16x3_from_Float16x3_args = { &UInt16x3_from_Float16x3_arg };

/// u16x3 with Float16
Variable UInt16x3_splat_Float16_arg;
Function UInt16x3_splat_Float16;
inline constexpr std::array UInt16x3_splat_Float16_args = { &UInt16x3_splat_Float16_arg };

/// u16x3 with UInt16x3
Variable UInt16x3_from_UInt16x3_arg;
Function UInt16x3_from_UInt16x3;
inline constexpr std::array UInt16x3_from_UInt16x3_args = { &UInt16x3_from_UInt16x3_arg };

/// u16x3 with UInt16
Variable UInt16x3_splat_UInt16_arg;
Function UInt16x3_splat_UInt16;
inline constexpr std::array UInt16x3_splat_UInt16_args = { &UInt16x3_splat_UInt16_arg };

/// u16x3 with Int16x3
Variable UInt16x3_from_Int16x3_arg;
Function UInt16x3_from_Int16x3;
inline constexpr std::array UInt16x3_from_Int16x3_args = { &UInt16x3_from_Int16x3_arg };

/// u16x3 with Int16
Variable UInt16x3_splat_Int16_arg;
Function UInt16x3_splat_Int16;
inline constexpr std::array UInt16x3_splat_Int16_args = { &UInt16x3_splat_Int16_arg };

/// u16x3 with UInt16, UInt16, UInt16
Variable UInt16x3_ctor0_arg0_UInt16;
Variable UInt16x3_ctor0_arg1_UInt16;
Variable UInt16x3_ctor0_arg2_UInt16;
Function UInt16x3_ctor0;
inline constexpr std::array UInt16x3_ctor0_args = { &UInt16x3_ctor0_arg0_UInt16, &UInt16x3_ctor0_arg1_UInt16, &UInt16x3_ctor0_arg2_UInt16 };

/// u16x3 with UInt16x2, UInt16
Variable UInt16x3_ctor1_arg0_UInt16x2;
Variable UInt16x3_ctor1_arg1_UInt16;
Function UInt16x3_ctor1;
inline constexpr std::array UInt16x3_ctor1_args = { &UInt16x3_ctor1_arg0_UInt16x2, &UInt16x3_ctor1_arg1_UInt16 };

/// u16x3 with UInt16, UInt16x2
Variable UInt16x3_ctor2_arg0_UInt16;
Variable UInt16x3_ctor2_arg1_UInt16x2;
Function UInt16x3_ctor2;
inline constexpr std::array UInt16x3_ctor2_args = { &UInt16x3_ctor2_arg0_UInt16, &UInt16x3_ctor2_arg1_UInt16x2 };

/// i16x3 with Float32x3
Variable Int16x3_from_Float32x3_arg;
Function Int16x3_from_Float32x3;
inline constexpr std::array Int16x3_from_Float32x3_args = { &Int16x3_from_Float32x3_arg };

/// i16x3 with Float32
Variable Int16x3_splat_Float32_arg;
Function Int16x3_splat_Float32;
inline constexpr std::array Int16x3_splat_Float32_args = { &Int16x3_splat_Float32_arg };

/// i16x3 with UInt32x3
Variable Int16x3_from_UInt32x3_arg;
Function Int16x3_from_UInt32x3;
inline constexpr std::array Int16x3_from_UInt32x3_args = { &Int16x3_from_UInt32x3_arg };

/// i16x3 with UInt32
Variable Int16x3_splat_UInt32_arg;
Function Int16x3_splat_UInt32;
inline constexpr std::array Int16x3_splat_UInt32_args = { &Int16x3_splat_UInt32_arg };

/// i16x3 with Int32x3
Variable Int16x3_from_Int32x3_arg;
Function Int16x3_from_Int32x3;
inline constexpr std::array Int16x3_from_Int32x3_args = { &Int16x3_from_Int32x3_arg };

/// i16x3 with Int32
Variable Int16x3_splat_Int32_arg;
Function Int16x3_splat_Int32;
inline constexpr std::array Int16x3_splat_Int32_args = { &Int16x3_splat_Int32_arg };

/// i16x3 with Bool8x3
Variable Int16x3_from_Bool8x3_arg;
Function Int16x3_from_Bool8x3;
inline constexpr std::array Int16x3_from_Bool8x3_args = { &Int16x3_from_Bool8x3_arg };

/// i16x3 with Bool8
Variable Int16x3_splat_Bool8_arg;
Function Int16x3_splat_Bool8;
inline constexpr std::array Int16x3_splat_Bool8_args = { &Int16x3_splat_Bool8_arg };

/// i16x3 with Float16x3
Variable Int16x3_from_Float16x3_arg;
Function Int16x3_from_Float16x3;
inline constexpr std::array Int16x3_from_Float16x3_args = { &Int16x3_from_Float16x3_arg };

/// i16x3 with Float16
Variable Int16x3_splat_Float16_arg;
Function Int16x3_splat_Float16;
inline constexpr std::array Int16x3_splat_Float16_args = { &Int16x3_splat_Float16_arg };

/// i16x3 with UInt16x3
Variable Int16x3_from_UInt16x3_arg;
Function Int16x3_from_UInt16x3;
inline constexpr std::array Int16x3_from_UInt16x3_args = { &Int16x3_from_UInt16x3_arg };

/// i16x3 with UInt16
Variable Int16x3_splat_UInt16_arg;
Function Int16x3_splat_UInt16;
inline constexpr std::array Int16x3_splat_UInt16_args = { &Int16x3_splat_UInt16_arg };

/// i16x3 with Int16x3
Variable Int16x3_from_Int16x3_arg;
Function Int16x3_from_Int16x3;
inline constexpr std::array Int16x3_from_Int16x3_args = { &Int16x3_from_Int16x3_arg };

/// i16x3 with Int16
Variable Int16x3_splat_Int16_arg;
Function Int16x3_splat_Int16;
inline constexpr std::array Int16x3_splat_Int16_args = { &Int16x3_splat_Int16_arg };

/// i16x3 with Int16, Int16, Int16
Variable Int16x3_ctor0_arg0_Int16;
Variable Int16x3_ctor0_arg1_Int16;
Variable Int16x3_ctor0_arg2_Int16;
Function Int16x3_ctor0;
inline constexpr std::array Int16x3_ctor0_args = { &Int16x3_ctor0_arg0_Int16, &Int16x3_ctor0_arg1_Int16, &Int16x3_ctor0_arg2_Int16 };

/// i16x3 with Int16x2, Int16
Variable Int16x3_ctor1_arg0_Int16x2;
Variable Int16x3_ctor1_arg1_Int16;
Function Int16x3_ctor1;
inline constexpr std::array Int16x3_ctor1_args = { &Int16x3_ctor1_arg0_Int16x2, &Int16x3_ctor1_arg1_Int16 };

/// i16x3 with Int16, Int16x2
Variable Int16x3_ctor2_arg0_Int16;
Variable Int16x3_ctor2_arg1_Int16x2;
Function Int16x3_ctor2;
inline constexpr std::array Int16x3_ctor2_args = { &Int16x3_ctor2_arg0_Int16, &Int16x3_ctor2_arg1_Int16x2 };

/// f32x4 with Float32x4
Variable Float32x4_from_Float32x4_arg;
Function Float32x4_from_Float32x4;
inline constexpr std::array Float32x4_from_Float32x4_args = { &Float32x4_from_Float32x4_arg };

/// f32x4 with Float32
Variable Float32x4_splat_Float32_arg;
Function Float32x4_splat_Float32;
inline constexpr std::array Float32x4_splat_Float32_args = { &Float32x4_splat_Float32_arg };

/// f32x4 with UInt32x4
Variable Float32x4_from_UInt32x4_arg;
Function Float32x4_from_UInt32x4;
inline constexpr std::array Float32x4_from_UInt32x4_args = { &Float32x4_from_UInt32x4_arg };

/// f32x4 with UInt32
Variable Float32x4_splat_UInt32_arg;
Function Float32x4_splat_UInt32;
inline constexpr std::array Float32x4_splat_UInt32_args = { &Float32x4_splat_UInt32_arg };

/// f32x4 with Int32x4
Variable Float32x4_from_Int32x4_arg;
Function Float32x4_from_Int32x4;
inline constexpr std::array Float32x4_from_Int32x4_args = { &Float32x4_from_Int32x4_arg };

/// f32x4 with Int32
Variable Float32x4_splat_Int32_arg;
Function Float32x4_splat_Int32;
inline constexpr std::array Float32x4_splat_Int32_args = { &Float32x4_splat_Int32_arg };

/// f32x4 with Bool8x4
Variable Float32x4_from_Bool8x4_arg;
Function Float32x4_from_Bool8x4;
inline constexpr std::array Float32x4_from_Bool8x4_args = { &Float32x4_from_Bool8x4_arg };

/// f32x4 with Bool8
Variable Float32x4_splat_Bool8_arg;
Function Float32x4_splat_Bool8;
inline constexpr std::array Float32x4_splat_Bool8_args = { &Float32x4_splat_Bool8_arg };

/// f32x4 with Float16x4
Variable Float32x4_from_Float16x4_arg;
Function Float32x4_from_Float16x4;
inline constexpr std::array Float32x4_from_Float16x4_args = { &Float32x4_from_Float16x4_arg };

/// f32x4 with Float16
Variable Float32x4_splat_Float16_arg;
Function Float32x4_splat_Float16;
inline constexpr std::array Float32x4_splat_Float16_args = { &Float32x4_splat_Float16_arg };

/// f32x4 with UInt16x4
Variable Float32x4_from_UInt16x4_arg;
Function Float32x4_from_UInt16x4;
inline constexpr std::array Float32x4_from_UInt16x4_args = { &Float32x4_from_UInt16x4_arg };

/// f32x4 with UInt16
Variable Float32x4_splat_UInt16_arg;
Function Float32x4_splat_UInt16;
inline constexpr std::array Float32x4_splat_UInt16_args = { &Float32x4_splat_UInt16_arg };

/// f32x4 with Int16x4
Variable Float32x4_from_Int16x4_arg;
Function Float32x4_from_Int16x4;
inline constexpr std::array Float32x4_from_Int16x4_args = { &Float32x4_from_Int16x4_arg };

/// f32x4 with Int16
Variable Float32x4_splat_Int16_arg;
Function Float32x4_splat_Int16;
inline constexpr std::array Float32x4_splat_Int16_args = { &Float32x4_splat_Int16_arg };

/// f32x4 with Float32, Float32, Float32, Float32
Variable Float32x4_ctor0_arg0_Float32;
Variable Float32x4_ctor0_arg1_Float32;
Variable Float32x4_ctor0_arg2_Float32;
Variable Float32x4_ctor0_arg3_Float32;
Function Float32x4_ctor0;
inline constexpr std::array Float32x4_ctor0_args = { &Float32x4_ctor0_arg0_Float32, &Float32x4_ctor0_arg1_Float32, &Float32x4_ctor0_arg2_Float32, &Float32x4_ctor0_arg3_Float32 };

/// f32x4 with Float32x2, Float32, Float32
Variable Float32x4_ctor1_arg0_Float32x2;
Variable Float32x4_ctor1_arg1_Float32;
Variable Float32x4_ctor1_arg2_Float32;
Function Float32x4_ctor1;
inline constexpr std::array Float32x4_ctor1_args = { &Float32x4_ctor1_arg0_Float32x2, &Float32x4_ctor1_arg1_Float32, &Float32x4_ctor1_arg2_Float32 };

/// f32x4 with Float32, Float32x2, Float32
Variable Float32x4_ctor2_arg0_Float32;
Variable Float32x4_ctor2_arg1_Float32x2;
Variable Float32x4_ctor2_arg2_Float32;
Function Float32x4_ctor2;
inline constexpr std::array Float32x4_ctor2_args = { &Float32x4_ctor2_arg0_Float32, &Float32x4_ctor2_arg1_Float32x2, &Float32x4_ctor2_arg2_Float32 };

/// f32x4 with Float32, Float32, Float32x2
Variable Float32x4_ctor3_arg0_Float32;
Variable Float32x4_ctor3_arg1_Float32;
Variable Float32x4_ctor3_arg2_Float32x2;
Function Float32x4_ctor3;
inline constexpr std::array Float32x4_ctor3_args = { &Float32x4_ctor3_arg0_Float32, &Float32x4_ctor3_arg1_Float32, &Float32x4_ctor3_arg2_Float32x2 };

/// f32x4 with Float32x2, Float32x2
Variable Float32x4_ctor4_arg0_Float32x2;
Variable Float32x4_ctor4_arg1_Float32x2;
Function Float32x4_ctor4;
inline constexpr std::array Float32x4_ctor4_args = { &Float32x4_ctor4_arg0_Float32x2, &Float32x4_ctor4_arg1_Float32x2 };

/// f32x4 with Float32x3, Float32
Variable Float32x4_ctor5_arg0_Float32x3;
Variable Float32x4_ctor5_arg1_Float32;
Function Float32x4_ctor5;
inline constexpr std::array Float32x4_ctor5_args = { &Float32x4_ctor5_arg0_Float32x3, &Float32x4_ctor5_arg1_Float32 };

/// f32x4 with Float32, Float32x3
Variable Float32x4_ctor6_arg0_Float32;
Variable Float32x4_ctor6_arg1_Float32x3;
Function Float32x4_ctor6;
inline constexpr std::array Float32x4_ctor6_args = { &Float32x4_ctor6_arg0_Float32, &Float32x4_ctor6_arg1_Float32x3 };

/// u32x4 with Float32x4
Variable UInt32x4_from_Float32x4_arg;
Function UInt32x4_from_Float32x4;
inline constexpr std::array UInt32x4_from_Float32x4_args = { &UInt32x4_from_Float32x4_arg };

/// u32x4 with Float32
Variable UInt32x4_splat_Float32_arg;
Function UInt32x4_splat_Float32;
inline constexpr std::array UInt32x4_splat_Float32_args = { &UInt32x4_splat_Float32_arg };

/// u32x4 with UInt32x4
Variable UInt32x4_from_UInt32x4_arg;
Function UInt32x4_from_UInt32x4;
inline constexpr std::array UInt32x4_from_UInt32x4_args = { &UInt32x4_from_UInt32x4_arg };

/// u32x4 with UInt32
Variable UInt32x4_splat_UInt32_arg;
Function UInt32x4_splat_UInt32;
inline constexpr std::array UInt32x4_splat_UInt32_args = { &UInt32x4_splat_UInt32_arg };

/// u32x4 with Int32x4
Variable UInt32x4_from_Int32x4_arg;
Function UInt32x4_from_Int32x4;
inline constexpr std::array UInt32x4_from_Int32x4_args = { &UInt32x4_from_Int32x4_arg };

/// u32x4 with Int32
Variable UInt32x4_splat_Int32_arg;
Function UInt32x4_splat_Int32;
inline constexpr std::array UInt32x4_splat_Int32_args = { &UInt32x4_splat_Int32_arg };

/// u32x4 with Bool8x4
Variable UInt32x4_from_Bool8x4_arg;
Function UInt32x4_from_Bool8x4;
inline constexpr std::array UInt32x4_from_Bool8x4_args = { &UInt32x4_from_Bool8x4_arg };

/// u32x4 with Bool8
Variable UInt32x4_splat_Bool8_arg;
Function UInt32x4_splat_Bool8;
inline constexpr std::array UInt32x4_splat_Bool8_args = { &UInt32x4_splat_Bool8_arg };

/// u32x4 with Float16x4
Variable UInt32x4_from_Float16x4_arg;
Function UInt32x4_from_Float16x4;
inline constexpr std::array UInt32x4_from_Float16x4_args = { &UInt32x4_from_Float16x4_arg };

/// u32x4 with Float16
Variable UInt32x4_splat_Float16_arg;
Function UInt32x4_splat_Float16;
inline constexpr std::array UInt32x4_splat_Float16_args = { &UInt32x4_splat_Float16_arg };

/// u32x4 with UInt16x4
Variable UInt32x4_from_UInt16x4_arg;
Function UInt32x4_from_UInt16x4;
inline constexpr std::array UInt32x4_from_UInt16x4_args = { &UInt32x4_from_UInt16x4_arg };

/// u32x4 with UInt16
Variable UInt32x4_splat_UInt16_arg;
Function UInt32x4_splat_UInt16;
inline constexpr std::array UInt32x4_splat_UInt16_args = { &UInt32x4_splat_UInt16_arg };

/// u32x4 with Int16x4
Variable UInt32x4_from_Int16x4_arg;
Function UInt32x4_from_Int16x4;
inline constexpr std::array UInt32x4_from_Int16x4_args = { &UInt32x4_from_Int16x4_arg };

/// u32x4 with Int16
Variable UInt32x4_splat_Int16_arg;
Function UInt32x4_splat_Int16;
inline constexpr std::array UInt32x4_splat_Int16_args = { &UInt32x4_splat_Int16_arg };

/// u32x4 with UInt32, UInt32, UInt32, UInt32
Variable UInt32x4_ctor0_arg0_UInt32;
Variable UInt32x4_ctor0_arg1_UInt32;
Variable UInt32x4_ctor0_arg2_UInt32;
Variable UInt32x4_ctor0_arg3_UInt32;
Function UInt32x4_ctor0;
inline constexpr std::array UInt32x4_ctor0_args = { &UInt32x4_ctor0_arg0_UInt32, &UInt32x4_ctor0_arg1_UInt32, &UInt32x4_ctor0_arg2_UInt32, &UInt32x4_ctor0_arg3_UInt32 };

/// u32x4 with UInt32x2, UInt32, UInt32
Variable UInt32x4_ctor1_arg0_UInt32x2;
Variable UInt32x4_ctor1_arg1_UInt32;
Variable UInt32x4_ctor1_arg2_UInt32;
Function UInt32x4_ctor1;
inline constexpr std::array UInt32x4_ctor1_args = { &UInt32x4_ctor1_arg0_UInt32x2, &UInt32x4_ctor1_arg1_UInt32, &UInt32x4_ctor1_arg2_UInt32 };

/// u32x4 with UInt32, UInt32x2, UInt32
Variable UInt32x4_ctor2_arg0_UInt32;
Variable UInt32x4_ctor2_arg1_UInt32x2;
Variable UInt32x4_ctor2_arg2_UInt32;
Function UInt32x4_ctor2;
inline constexpr std::array UInt32x4_ctor2_args = { &UInt32x4_ctor2_arg0_UInt32, &UInt32x4_ctor2_arg1_UInt32x2, &UInt32x4_ctor2_arg2_UInt32 };

/// u32x4 with UInt32, UInt32, UInt32x2
Variable UInt32x4_ctor3_arg0_UInt32;
Variable UInt32x4_ctor3_arg1_UInt32;
Variable UInt32x4_ctor3_arg2_UInt32x2;
Function UInt32x4_ctor3;
inline constexpr std::array UInt32x4_ctor3_args = { &UInt32x4_ctor3_arg0_UInt32, &UInt32x4_ctor3_arg1_UInt32, &UInt32x4_ctor3_arg2_UInt32x2 };

/// u32x4 with UInt32x2, UInt32x2
Variable UInt32x4_ctor4_arg0_UInt32x2;
Variable UInt32x4_ctor4_arg1_UInt32x2;
Function UInt32x4_ctor4;
inline constexpr std::array UInt32x4_ctor4_args = { &UInt32x4_ctor4_arg0_UInt32x2, &UInt32x4_ctor4_arg1_UInt32x2 };

/// u32x4 with UInt32x3, UInt32
Variable UInt32x4_ctor5_arg0_UInt32x3;
Variable UInt32x4_ctor5_arg1_UInt32;
Function UInt32x4_ctor5;
inline constexpr std::array UInt32x4_ctor5_args = { &UInt32x4_ctor5_arg0_UInt32x3, &UInt32x4_ctor5_arg1_UInt32 };

/// u32x4 with UInt32, UInt32x3
Variable UInt32x4_ctor6_arg0_UInt32;
Variable UInt32x4_ctor6_arg1_UInt32x3;
Function UInt32x4_ctor6;
inline constexpr std::array UInt32x4_ctor6_args = { &UInt32x4_ctor6_arg0_UInt32, &UInt32x4_ctor6_arg1_UInt32x3 };

/// i32x4 with Float32x4
Variable Int32x4_from_Float32x4_arg;
Function Int32x4_from_Float32x4;
inline constexpr std::array Int32x4_from_Float32x4_args = { &Int32x4_from_Float32x4_arg };

/// i32x4 with Float32
Variable Int32x4_splat_Float32_arg;
Function Int32x4_splat_Float32;
inline constexpr std::array Int32x4_splat_Float32_args = { &Int32x4_splat_Float32_arg };

/// i32x4 with UInt32x4
Variable Int32x4_from_UInt32x4_arg;
Function Int32x4_from_UInt32x4;
inline constexpr std::array Int32x4_from_UInt32x4_args = { &Int32x4_from_UInt32x4_arg };

/// i32x4 with UInt32
Variable Int32x4_splat_UInt32_arg;
Function Int32x4_splat_UInt32;
inline constexpr std::array Int32x4_splat_UInt32_args = { &Int32x4_splat_UInt32_arg };

/// i32x4 with Int32x4
Variable Int32x4_from_Int32x4_arg;
Function Int32x4_from_Int32x4;
inline constexpr std::array Int32x4_from_Int32x4_args = { &Int32x4_from_Int32x4_arg };

/// i32x4 with Int32
Variable Int32x4_splat_Int32_arg;
Function Int32x4_splat_Int32;
inline constexpr std::array Int32x4_splat_Int32_args = { &Int32x4_splat_Int32_arg };

/// i32x4 with Bool8x4
Variable Int32x4_from_Bool8x4_arg;
Function Int32x4_from_Bool8x4;
inline constexpr std::array Int32x4_from_Bool8x4_args = { &Int32x4_from_Bool8x4_arg };

/// i32x4 with Bool8
Variable Int32x4_splat_Bool8_arg;
Function Int32x4_splat_Bool8;
inline constexpr std::array Int32x4_splat_Bool8_args = { &Int32x4_splat_Bool8_arg };

/// i32x4 with Float16x4
Variable Int32x4_from_Float16x4_arg;
Function Int32x4_from_Float16x4;
inline constexpr std::array Int32x4_from_Float16x4_args = { &Int32x4_from_Float16x4_arg };

/// i32x4 with Float16
Variable Int32x4_splat_Float16_arg;
Function Int32x4_splat_Float16;
inline constexpr std::array Int32x4_splat_Float16_args = { &Int32x4_splat_Float16_arg };

/// i32x4 with UInt16x4
Variable Int32x4_from_UInt16x4_arg;
Function Int32x4_from_UInt16x4;
inline constexpr std::array Int32x4_from_UInt16x4_args = { &Int32x4_from_UInt16x4_arg };

/// i32x4 with UInt16
Variable Int32x4_splat_UInt16_arg;
Function Int32x4_splat_UInt16;
inline constexpr std::array Int32x4_splat_UInt16_args = { &Int32x4_splat_UInt16_arg };

/// i32x4 with Int16x4
Variable Int32x4_from_Int16x4_arg;
Function Int32x4_from_Int16x4;
inline constexpr std::array Int32x4_from_Int16x4_args = { &Int32x4_from_Int16x4_arg };

/// i32x4 with Int16
Variable Int32x4_splat_Int16_arg;
Function Int32x4_splat_Int16;
inline constexpr std::array Int32x4_splat_Int16_args = { &Int32x4_splat_Int16_arg };

/// i32x4 with Int32, Int32, Int32, Int32
Variable Int32x4_ctor0_arg0_Int32;
Variable Int32x4_ctor0_arg1_Int32;
Variable Int32x4_ctor0_arg2_Int32;
Variable Int32x4_ctor0_arg3_Int32;
Function Int32x4_ctor0;
inline constexpr std::array Int32x4_ctor0_args = { &Int32x4_ctor0_arg0_Int32, &Int32x4_ctor0_arg1_Int32, &Int32x4_ctor0_arg2_Int32, &Int32x4_ctor0_arg3_Int32 };

/// i32x4 with Int32x2, Int32, Int32
Variable Int32x4_ctor1_arg0_Int32x2;
Variable Int32x4_ctor1_arg1_Int32;
Variable Int32x4_ctor1_arg2_Int32;
Function Int32x4_ctor1;
inline constexpr std::array Int32x4_ctor1_args = { &Int32x4_ctor1_arg0_Int32x2, &Int32x4_ctor1_arg1_Int32, &Int32x4_ctor1_arg2_Int32 };

/// i32x4 with Int32, Int32x2, Int32
Variable Int32x4_ctor2_arg0_Int32;
Variable Int32x4_ctor2_arg1_Int32x2;
Variable Int32x4_ctor2_arg2_Int32;
Function Int32x4_ctor2;
inline constexpr std::array Int32x4_ctor2_args = { &Int32x4_ctor2_arg0_Int32, &Int32x4_ctor2_arg1_Int32x2, &Int32x4_ctor2_arg2_Int32 };

/// i32x4 with Int32, Int32, Int32x2
Variable Int32x4_ctor3_arg0_Int32;
Variable Int32x4_ctor3_arg1_Int32;
Variable Int32x4_ctor3_arg2_Int32x2;
Function Int32x4_ctor3;
inline constexpr std::array Int32x4_ctor3_args = { &Int32x4_ctor3_arg0_Int32, &Int32x4_ctor3_arg1_Int32, &Int32x4_ctor3_arg2_Int32x2 };

/// i32x4 with Int32x2, Int32x2
Variable Int32x4_ctor4_arg0_Int32x2;
Variable Int32x4_ctor4_arg1_Int32x2;
Function Int32x4_ctor4;
inline constexpr std::array Int32x4_ctor4_args = { &Int32x4_ctor4_arg0_Int32x2, &Int32x4_ctor4_arg1_Int32x2 };

/// i32x4 with Int32x3, Int32
Variable Int32x4_ctor5_arg0_Int32x3;
Variable Int32x4_ctor5_arg1_Int32;
Function Int32x4_ctor5;
inline constexpr std::array Int32x4_ctor5_args = { &Int32x4_ctor5_arg0_Int32x3, &Int32x4_ctor5_arg1_Int32 };

/// i32x4 with Int32, Int32x3
Variable Int32x4_ctor6_arg0_Int32;
Variable Int32x4_ctor6_arg1_Int32x3;
Function Int32x4_ctor6;
inline constexpr std::array Int32x4_ctor6_args = { &Int32x4_ctor6_arg0_Int32, &Int32x4_ctor6_arg1_Int32x3 };

/// b8x4 with UInt32x4
Variable Bool8x4_from_UInt32x4_arg;
Function Bool8x4_from_UInt32x4;
inline constexpr std::array Bool8x4_from_UInt32x4_args = { &Bool8x4_from_UInt32x4_arg };

/// b8x4 with UInt32
Variable Bool8x4_splat_UInt32_arg;
Function Bool8x4_splat_UInt32;
inline constexpr std::array Bool8x4_splat_UInt32_args = { &Bool8x4_splat_UInt32_arg };

/// b8x4 with Int32x4
Variable Bool8x4_from_Int32x4_arg;
Function Bool8x4_from_Int32x4;
inline constexpr std::array Bool8x4_from_Int32x4_args = { &Bool8x4_from_Int32x4_arg };

/// b8x4 with Int32
Variable Bool8x4_splat_Int32_arg;
Function Bool8x4_splat_Int32;
inline constexpr std::array Bool8x4_splat_Int32_args = { &Bool8x4_splat_Int32_arg };

/// b8x4 with Bool8x4
Variable Bool8x4_from_Bool8x4_arg;
Function Bool8x4_from_Bool8x4;
inline constexpr std::array Bool8x4_from_Bool8x4_args = { &Bool8x4_from_Bool8x4_arg };

/// b8x4 with Bool8
Variable Bool8x4_splat_Bool8_arg;
Function Bool8x4_splat_Bool8;
inline constexpr std::array Bool8x4_splat_Bool8_args = { &Bool8x4_splat_Bool8_arg };

/// b8x4 with UInt16x4
Variable Bool8x4_from_UInt16x4_arg;
Function Bool8x4_from_UInt16x4;
inline constexpr std::array Bool8x4_from_UInt16x4_args = { &Bool8x4_from_UInt16x4_arg };

/// b8x4 with UInt16
Variable Bool8x4_splat_UInt16_arg;
Function Bool8x4_splat_UInt16;
inline constexpr std::array Bool8x4_splat_UInt16_args = { &Bool8x4_splat_UInt16_arg };

/// b8x4 with Int16x4
Variable Bool8x4_from_Int16x4_arg;
Function Bool8x4_from_Int16x4;
inline constexpr std::array Bool8x4_from_Int16x4_args = { &Bool8x4_from_Int16x4_arg };

/// b8x4 with Int16
Variable Bool8x4_splat_Int16_arg;
Function Bool8x4_splat_Int16;
inline constexpr std::array Bool8x4_splat_Int16_args = { &Bool8x4_splat_Int16_arg };

/// b8x4 with Bool8, Bool8, Bool8, Bool8
Variable Bool8x4_ctor0_arg0_Bool8;
Variable Bool8x4_ctor0_arg1_Bool8;
Variable Bool8x4_ctor0_arg2_Bool8;
Variable Bool8x4_ctor0_arg3_Bool8;
Function Bool8x4_ctor0;
inline constexpr std::array Bool8x4_ctor0_args = { &Bool8x4_ctor0_arg0_Bool8, &Bool8x4_ctor0_arg1_Bool8, &Bool8x4_ctor0_arg2_Bool8, &Bool8x4_ctor0_arg3_Bool8 };

/// b8x4 with Bool8x2, Bool8, Bool8
Variable Bool8x4_ctor1_arg0_Bool8x2;
Variable Bool8x4_ctor1_arg1_Bool8;
Variable Bool8x4_ctor1_arg2_Bool8;
Function Bool8x4_ctor1;
inline constexpr std::array Bool8x4_ctor1_args = { &Bool8x4_ctor1_arg0_Bool8x2, &Bool8x4_ctor1_arg1_Bool8, &Bool8x4_ctor1_arg2_Bool8 };

/// b8x4 with Bool8, Bool8x2, Bool8
Variable Bool8x4_ctor2_arg0_Bool8;
Variable Bool8x4_ctor2_arg1_Bool8x2;
Variable Bool8x4_ctor2_arg2_Bool8;
Function Bool8x4_ctor2;
inline constexpr std::array Bool8x4_ctor2_args = { &Bool8x4_ctor2_arg0_Bool8, &Bool8x4_ctor2_arg1_Bool8x2, &Bool8x4_ctor2_arg2_Bool8 };

/// b8x4 with Bool8, Bool8, Bool8x2
Variable Bool8x4_ctor3_arg0_Bool8;
Variable Bool8x4_ctor3_arg1_Bool8;
Variable Bool8x4_ctor3_arg2_Bool8x2;
Function Bool8x4_ctor3;
inline constexpr std::array Bool8x4_ctor3_args = { &Bool8x4_ctor3_arg0_Bool8, &Bool8x4_ctor3_arg1_Bool8, &Bool8x4_ctor3_arg2_Bool8x2 };

/// b8x4 with Bool8x2, Bool8x2
Variable Bool8x4_ctor4_arg0_Bool8x2;
Variable Bool8x4_ctor4_arg1_Bool8x2;
Function Bool8x4_ctor4;
inline constexpr std::array Bool8x4_ctor4_args = { &Bool8x4_ctor4_arg0_Bool8x2, &Bool8x4_ctor4_arg1_Bool8x2 };

/// b8x4 with Bool8x3, Bool8
Variable Bool8x4_ctor5_arg0_Bool8x3;
Variable Bool8x4_ctor5_arg1_Bool8;
Function Bool8x4_ctor5;
inline constexpr std::array Bool8x4_ctor5_args = { &Bool8x4_ctor5_arg0_Bool8x3, &Bool8x4_ctor5_arg1_Bool8 };

/// b8x4 with Bool8, Bool8x3
Variable Bool8x4_ctor6_arg0_Bool8;
Variable Bool8x4_ctor6_arg1_Bool8x3;
Function Bool8x4_ctor6;
inline constexpr std::array Bool8x4_ctor6_args = { &Bool8x4_ctor6_arg0_Bool8, &Bool8x4_ctor6_arg1_Bool8x3 };

/// f16x4 with Float32x4
Variable Float16x4_from_Float32x4_arg;
Function Float16x4_from_Float32x4;
inline constexpr std::array Float16x4_from_Float32x4_args = { &Float16x4_from_Float32x4_arg };

/// f16x4 with Float32
Variable Float16x4_splat_Float32_arg;
Function Float16x4_splat_Float32;
inline constexpr std::array Float16x4_splat_Float32_args = { &Float16x4_splat_Float32_arg };

/// f16x4 with UInt32x4
Variable Float16x4_from_UInt32x4_arg;
Function Float16x4_from_UInt32x4;
inline constexpr std::array Float16x4_from_UInt32x4_args = { &Float16x4_from_UInt32x4_arg };

/// f16x4 with UInt32
Variable Float16x4_splat_UInt32_arg;
Function Float16x4_splat_UInt32;
inline constexpr std::array Float16x4_splat_UInt32_args = { &Float16x4_splat_UInt32_arg };

/// f16x4 with Int32x4
Variable Float16x4_from_Int32x4_arg;
Function Float16x4_from_Int32x4;
inline constexpr std::array Float16x4_from_Int32x4_args = { &Float16x4_from_Int32x4_arg };

/// f16x4 with Int32
Variable Float16x4_splat_Int32_arg;
Function Float16x4_splat_Int32;
inline constexpr std::array Float16x4_splat_Int32_args = { &Float16x4_splat_Int32_arg };

/// f16x4 with Bool8x4
Variable Float16x4_from_Bool8x4_arg;
Function Float16x4_from_Bool8x4;
inline constexpr std::array Float16x4_from_Bool8x4_args = { &Float16x4_from_Bool8x4_arg };

/// f16x4 with Bool8
Variable Float16x4_splat_Bool8_arg;
Function Float16x4_splat_Bool8;
inline constexpr std::array Float16x4_splat_Bool8_args = { &Float16x4_splat_Bool8_arg };

/// f16x4 with Float16x4
Variable Float16x4_from_Float16x4_arg;
Function Float16x4_from_Float16x4;
inline constexpr std::array Float16x4_from_Float16x4_args = { &Float16x4_from_Float16x4_arg };

/// f16x4 with Float16
Variable Float16x4_splat_Float16_arg;
Function Float16x4_splat_Float16;
inline constexpr std::array Float16x4_splat_Float16_args = { &Float16x4_splat_Float16_arg };

/// f16x4 with UInt16x4
Variable Float16x4_from_UInt16x4_arg;
Function Float16x4_from_UInt16x4;
inline constexpr std::array Float16x4_from_UInt16x4_args = { &Float16x4_from_UInt16x4_arg };

/// f16x4 with UInt16
Variable Float16x4_splat_UInt16_arg;
Function Float16x4_splat_UInt16;
inline constexpr std::array Float16x4_splat_UInt16_args = { &Float16x4_splat_UInt16_arg };

/// f16x4 with Int16x4
Variable Float16x4_from_Int16x4_arg;
Function Float16x4_from_Int16x4;
inline constexpr std::array Float16x4_from_Int16x4_args = { &Float16x4_from_Int16x4_arg };

/// f16x4 with Int16
Variable Float16x4_splat_Int16_arg;
Function Float16x4_splat_Int16;
inline constexpr std::array Float16x4_splat_Int16_args = { &Float16x4_splat_Int16_arg };

/// f16x4 with Float16, Float16, Float16, Float16
Variable Float16x4_ctor0_arg0_Float16;
Variable Float16x4_ctor0_arg1_Float16;
Variable Float16x4_ctor0_arg2_Float16;
Variable Float16x4_ctor0_arg3_Float16;
Function Float16x4_ctor0;
inline constexpr std::array Float16x4_ctor0_args = { &Float16x4_ctor0_arg0_Float16, &Float16x4_ctor0_arg1_Float16, &Float16x4_ctor0_arg2_Float16, &Float16x4_ctor0_arg3_Float16 };

/// f16x4 with Float16x2, Float16, Float16
Variable Float16x4_ctor1_arg0_Float16x2;
Variable Float16x4_ctor1_arg1_Float16;
Variable Float16x4_ctor1_arg2_Float16;
Function Float16x4_ctor1;
inline constexpr std::array Float16x4_ctor1_args = { &Float16x4_ctor1_arg0_Float16x2, &Float16x4_ctor1_arg1_Float16, &Float16x4_ctor1_arg2_Float16 };

/// f16x4 with Float16, Float16x2, Float16
Variable Float16x4_ctor2_arg0_Float16;
Variable Float16x4_ctor2_arg1_Float16x2;
Variable Float16x4_ctor2_arg2_Float16;
Function Float16x4_ctor2;
inline constexpr std::array Float16x4_ctor2_args = { &Float16x4_ctor2_arg0_Float16, &Float16x4_ctor2_arg1_Float16x2, &Float16x4_ctor2_arg2_Float16 };

/// f16x4 with Float16, Float16, Float16x2
Variable Float16x4_ctor3_arg0_Float16;
Variable Float16x4_ctor3_arg1_Float16;
Variable Float16x4_ctor3_arg2_Float16x2;
Function Float16x4_ctor3;
inline constexpr std::array Float16x4_ctor3_args = { &Float16x4_ctor3_arg0_Float16, &Float16x4_ctor3_arg1_Float16, &Float16x4_ctor3_arg2_Float16x2 };

/// f16x4 with Float16x2, Float16x2
Variable Float16x4_ctor4_arg0_Float16x2;
Variable Float16x4_ctor4_arg1_Float16x2;
Function Float16x4_ctor4;
inline constexpr std::array Float16x4_ctor4_args = { &Float16x4_ctor4_arg0_Float16x2, &Float16x4_ctor4_arg1_Float16x2 };

/// f16x4 with Float16x3, Float16
Variable Float16x4_ctor5_arg0_Float16x3;
Variable Float16x4_ctor5_arg1_Float16;
Function Float16x4_ctor5;
inline constexpr std::array Float16x4_ctor5_args = { &Float16x4_ctor5_arg0_Float16x3, &Float16x4_ctor5_arg1_Float16 };

/// f16x4 with Float16, Float16x3
Variable Float16x4_ctor6_arg0_Float16;
Variable Float16x4_ctor6_arg1_Float16x3;
Function Float16x4_ctor6;
inline constexpr std::array Float16x4_ctor6_args = { &Float16x4_ctor6_arg0_Float16, &Float16x4_ctor6_arg1_Float16x3 };

/// u16x4 with Float32x4
Variable UInt16x4_from_Float32x4_arg;
Function UInt16x4_from_Float32x4;
inline constexpr std::array UInt16x4_from_Float32x4_args = { &UInt16x4_from_Float32x4_arg };

/// u16x4 with Float32
Variable UInt16x4_splat_Float32_arg;
Function UInt16x4_splat_Float32;
inline constexpr std::array UInt16x4_splat_Float32_args = { &UInt16x4_splat_Float32_arg };

/// u16x4 with UInt32x4
Variable UInt16x4_from_UInt32x4_arg;
Function UInt16x4_from_UInt32x4;
inline constexpr std::array UInt16x4_from_UInt32x4_args = { &UInt16x4_from_UInt32x4_arg };

/// u16x4 with UInt32
Variable UInt16x4_splat_UInt32_arg;
Function UInt16x4_splat_UInt32;
inline constexpr std::array UInt16x4_splat_UInt32_args = { &UInt16x4_splat_UInt32_arg };

/// u16x4 with Int32x4
Variable UInt16x4_from_Int32x4_arg;
Function UInt16x4_from_Int32x4;
inline constexpr std::array UInt16x4_from_Int32x4_args = { &UInt16x4_from_Int32x4_arg };

/// u16x4 with Int32
Variable UInt16x4_splat_Int32_arg;
Function UInt16x4_splat_Int32;
inline constexpr std::array UInt16x4_splat_Int32_args = { &UInt16x4_splat_Int32_arg };

/// u16x4 with Bool8x4
Variable UInt16x4_from_Bool8x4_arg;
Function UInt16x4_from_Bool8x4;
inline constexpr std::array UInt16x4_from_Bool8x4_args = { &UInt16x4_from_Bool8x4_arg };

/// u16x4 with Bool8
Variable UInt16x4_splat_Bool8_arg;
Function UInt16x4_splat_Bool8;
inline constexpr std::array UInt16x4_splat_Bool8_args = { &UInt16x4_splat_Bool8_arg };

/// u16x4 with Float16x4
Variable UInt16x4_from_Float16x4_arg;
Function UInt16x4_from_Float16x4;
inline constexpr std::array UInt16x4_from_Float16x4_args = { &UInt16x4_from_Float16x4_arg };

/// u16x4 with Float16
Variable UInt16x4_splat_Float16_arg;
Function UInt16x4_splat_Float16;
inline constexpr std::array UInt16x4_splat_Float16_args = { &UInt16x4_splat_Float16_arg };

/// u16x4 with UInt16x4
Variable UInt16x4_from_UInt16x4_arg;
Function UInt16x4_from_UInt16x4;
inline constexpr std::array UInt16x4_from_UInt16x4_args = { &UInt16x4_from_UInt16x4_arg };

/// u16x4 with UInt16
Variable UInt16x4_splat_UInt16_arg;
Function UInt16x4_splat_UInt16;
inline constexpr std::array UInt16x4_splat_UInt16_args = { &UInt16x4_splat_UInt16_arg };

/// u16x4 with Int16x4
Variable UInt16x4_from_Int16x4_arg;
Function UInt16x4_from_Int16x4;
inline constexpr std::array UInt16x4_from_Int16x4_args = { &UInt16x4_from_Int16x4_arg };

/// u16x4 with Int16
Variable UInt16x4_splat_Int16_arg;
Function UInt16x4_splat_Int16;
inline constexpr std::array UInt16x4_splat_Int16_args = { &UInt16x4_splat_Int16_arg };

/// u16x4 with UInt16, UInt16, UInt16, UInt16
Variable UInt16x4_ctor0_arg0_UInt16;
Variable UInt16x4_ctor0_arg1_UInt16;
Variable UInt16x4_ctor0_arg2_UInt16;
Variable UInt16x4_ctor0_arg3_UInt16;
Function UInt16x4_ctor0;
inline constexpr std::array UInt16x4_ctor0_args = { &UInt16x4_ctor0_arg0_UInt16, &UInt16x4_ctor0_arg1_UInt16, &UInt16x4_ctor0_arg2_UInt16, &UInt16x4_ctor0_arg3_UInt16 };

/// u16x4 with UInt16x2, UInt16, UInt16
Variable UInt16x4_ctor1_arg0_UInt16x2;
Variable UInt16x4_ctor1_arg1_UInt16;
Variable UInt16x4_ctor1_arg2_UInt16;
Function UInt16x4_ctor1;
inline constexpr std::array UInt16x4_ctor1_args = { &UInt16x4_ctor1_arg0_UInt16x2, &UInt16x4_ctor1_arg1_UInt16, &UInt16x4_ctor1_arg2_UInt16 };

/// u16x4 with UInt16, UInt16x2, UInt16
Variable UInt16x4_ctor2_arg0_UInt16;
Variable UInt16x4_ctor2_arg1_UInt16x2;
Variable UInt16x4_ctor2_arg2_UInt16;
Function UInt16x4_ctor2;
inline constexpr std::array UInt16x4_ctor2_args = { &UInt16x4_ctor2_arg0_UInt16, &UInt16x4_ctor2_arg1_UInt16x2, &UInt16x4_ctor2_arg2_UInt16 };

/// u16x4 with UInt16, UInt16, UInt16x2
Variable UInt16x4_ctor3_arg0_UInt16;
Variable UInt16x4_ctor3_arg1_UInt16;
Variable UInt16x4_ctor3_arg2_UInt16x2;
Function UInt16x4_ctor3;
inline constexpr std::array UInt16x4_ctor3_args = { &UInt16x4_ctor3_arg0_UInt16, &UInt16x4_ctor3_arg1_UInt16, &UInt16x4_ctor3_arg2_UInt16x2 };

/// u16x4 with UInt16x2, UInt16x2
Variable UInt16x4_ctor4_arg0_UInt16x2;
Variable UInt16x4_ctor4_arg1_UInt16x2;
Function UInt16x4_ctor4;
inline constexpr std::array UInt16x4_ctor4_args = { &UInt16x4_ctor4_arg0_UInt16x2, &UInt16x4_ctor4_arg1_UInt16x2 };

/// u16x4 with UInt16x3, UInt16
Variable UInt16x4_ctor5_arg0_UInt16x3;
Variable UInt16x4_ctor5_arg1_UInt16;
Function UInt16x4_ctor5;
inline constexpr std::array UInt16x4_ctor5_args = { &UInt16x4_ctor5_arg0_UInt16x3, &UInt16x4_ctor5_arg1_UInt16 };

/// u16x4 with UInt16, UInt16x3
Variable UInt16x4_ctor6_arg0_UInt16;
Variable UInt16x4_ctor6_arg1_UInt16x3;
Function UInt16x4_ctor6;
inline constexpr std::array UInt16x4_ctor6_args = { &UInt16x4_ctor6_arg0_UInt16, &UInt16x4_ctor6_arg1_UInt16x3 };

/// i16x4 with Float32x4
Variable Int16x4_from_Float32x4_arg;
Function Int16x4_from_Float32x4;
inline constexpr std::array Int16x4_from_Float32x4_args = { &Int16x4_from_Float32x4_arg };

/// i16x4 with Float32
Variable Int16x4_splat_Float32_arg;
Function Int16x4_splat_Float32;
inline constexpr std::array Int16x4_splat_Float32_args = { &Int16x4_splat_Float32_arg };

/// i16x4 with UInt32x4
Variable Int16x4_from_UInt32x4_arg;
Function Int16x4_from_UInt32x4;
inline constexpr std::array Int16x4_from_UInt32x4_args = { &Int16x4_from_UInt32x4_arg };

/// i16x4 with UInt32
Variable Int16x4_splat_UInt32_arg;
Function Int16x4_splat_UInt32;
inline constexpr std::array Int16x4_splat_UInt32_args = { &Int16x4_splat_UInt32_arg };

/// i16x4 with Int32x4
Variable Int16x4_from_Int32x4_arg;
Function Int16x4_from_Int32x4;
inline constexpr std::array Int16x4_from_Int32x4_args = { &Int16x4_from_Int32x4_arg };

/// i16x4 with Int32
Variable Int16x4_splat_Int32_arg;
Function Int16x4_splat_Int32;
inline constexpr std::array Int16x4_splat_Int32_args = { &Int16x4_splat_Int32_arg };

/// i16x4 with Bool8x4
Variable Int16x4_from_Bool8x4_arg;
Function Int16x4_from_Bool8x4;
inline constexpr std::array Int16x4_from_Bool8x4_args = { &Int16x4_from_Bool8x4_arg };

/// i16x4 with Bool8
Variable Int16x4_splat_Bool8_arg;
Function Int16x4_splat_Bool8;
inline constexpr std::array Int16x4_splat_Bool8_args = { &Int16x4_splat_Bool8_arg };

/// i16x4 with Float16x4
Variable Int16x4_from_Float16x4_arg;
Function Int16x4_from_Float16x4;
inline constexpr std::array Int16x4_from_Float16x4_args = { &Int16x4_from_Float16x4_arg };

/// i16x4 with Float16
Variable Int16x4_splat_Float16_arg;
Function Int16x4_splat_Float16;
inline constexpr std::array Int16x4_splat_Float16_args = { &Int16x4_splat_Float16_arg };

/// i16x4 with UInt16x4
Variable Int16x4_from_UInt16x4_arg;
Function Int16x4_from_UInt16x4;
inline constexpr std::array Int16x4_from_UInt16x4_args = { &Int16x4_from_UInt16x4_arg };

/// i16x4 with UInt16
Variable Int16x4_splat_UInt16_arg;
Function Int16x4_splat_UInt16;
inline constexpr std::array Int16x4_splat_UInt16_args = { &Int16x4_splat_UInt16_arg };

/// i16x4 with Int16x4
Variable Int16x4_from_Int16x4_arg;
Function Int16x4_from_Int16x4;
inline constexpr std::array Int16x4_from_Int16x4_args = { &Int16x4_from_Int16x4_arg };

/// i16x4 with Int16
Variable Int16x4_splat_Int16_arg;
Function Int16x4_splat_Int16;
inline constexpr std::array Int16x4_splat_Int16_args = { &Int16x4_splat_Int16_arg };

/// i16x4 with Int16, Int16, Int16, Int16
Variable Int16x4_ctor0_arg0_Int16;
Variable Int16x4_ctor0_arg1_Int16;
Variable Int16x4_ctor0_arg2_Int16;
Variable Int16x4_ctor0_arg3_Int16;
Function Int16x4_ctor0;
inline constexpr std::array Int16x4_ctor0_args = { &Int16x4_ctor0_arg0_Int16, &Int16x4_ctor0_arg1_Int16, &Int16x4_ctor0_arg2_Int16, &Int16x4_ctor0_arg3_Int16 };

/// i16x4 with Int16x2, Int16, Int16
Variable Int16x4_ctor1_arg0_Int16x2;
Variable Int16x4_ctor1_arg1_Int16;
Variable Int16x4_ctor1_arg2_Int16;
Function Int16x4_ctor1;
inline constexpr std::array Int16x4_ctor1_args = { &Int16x4_ctor1_arg0_Int16x2, &Int16x4_ctor1_arg1_Int16, &Int16x4_ctor1_arg2_Int16 };

/// i16x4 with Int16, Int16x2, Int16
Variable Int16x4_ctor2_arg0_Int16;
Variable Int16x4_ctor2_arg1_Int16x2;
Variable Int16x4_ctor2_arg2_Int16;
Function Int16x4_ctor2;
inline constexpr std::array Int16x4_ctor2_args = { &Int16x4_ctor2_arg0_Int16, &Int16x4_ctor2_arg1_Int16x2, &Int16x4_ctor2_arg2_Int16 };

/// i16x4 with Int16, Int16, Int16x2
Variable Int16x4_ctor3_arg0_Int16;
Variable Int16x4_ctor3_arg1_Int16;
Variable Int16x4_ctor3_arg2_Int16x2;
Function Int16x4_ctor3;
inline constexpr std::array Int16x4_ctor3_args = { &Int16x4_ctor3_arg0_Int16, &Int16x4_ctor3_arg1_Int16, &Int16x4_ctor3_arg2_Int16x2 };

/// i16x4 with Int16x2, Int16x2
Variable Int16x4_ctor4_arg0_Int16x2;
Variable Int16x4_ctor4_arg1_Int16x2;
Function Int16x4_ctor4;
inline constexpr std::array Int16x4_ctor4_args = { &Int16x4_ctor4_arg0_Int16x2, &Int16x4_ctor4_arg1_Int16x2 };

/// i16x4 with Int16x3, Int16
Variable Int16x4_ctor5_arg0_Int16x3;
Variable Int16x4_ctor5_arg1_Int16;
Function Int16x4_ctor5;
inline constexpr std::array Int16x4_ctor5_args = { &Int16x4_ctor5_arg0_Int16x3, &Int16x4_ctor5_arg1_Int16 };

/// i16x4 with Int16, Int16x3
Variable Int16x4_ctor6_arg0_Int16;
Variable Int16x4_ctor6_arg1_Int16x3;
Function Int16x4_ctor6;
inline constexpr std::array Int16x4_ctor6_args = { &Int16x4_ctor6_arg0_Int16, &Int16x4_ctor6_arg1_Int16x3 };

/// f32x2x2 with Float32x2, Float32x2
Variable Float32x2x2_Float32_2_ctor_arg0;
Variable Float32x2x2_Float32_2_ctor_arg1;
Function Float32x2x2_Float32_2_ctor;
inline constexpr std::array Float32x2x2_Float32_2_ctor_args = { &Float32x2x2_Float32_2_ctor_arg0, &Float32x2x2_Float32_2_ctor_arg1 };

/// f32x2x2
Function Float32x2x2_identity;

/// f32x2x2 with Float32, Float32, Float32, Float32
Variable Float32x2x2_raw_list_arg0;
Variable Float32x2x2_raw_list_arg1;
Variable Float32x2x2_raw_list_arg2;
Variable Float32x2x2_raw_list_arg3;
Function Float32x2x2_raw_list;
inline constexpr std::array Float32x2x2_raw_list_args = { &Float32x2x2_raw_list_arg0, &Float32x2x2_raw_list_arg1, &Float32x2x2_raw_list_arg2, &Float32x2x2_raw_list_arg3 };

/// f32x3x2 with Float32x2, Float32x2, Float32x2
Variable Float32x3x2_Float32_2_ctor_arg0;
Variable Float32x3x2_Float32_2_ctor_arg1;
Variable Float32x3x2_Float32_2_ctor_arg2;
Function Float32x3x2_Float32_2_ctor;
inline constexpr std::array Float32x3x2_Float32_2_ctor_args = { &Float32x3x2_Float32_2_ctor_arg0, &Float32x3x2_Float32_2_ctor_arg1, &Float32x3x2_Float32_2_ctor_arg2 };

/// f32x3x2 with Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x3x2_raw_list_arg0;
Variable Float32x3x2_raw_list_arg1;
Variable Float32x3x2_raw_list_arg2;
Variable Float32x3x2_raw_list_arg3;
Variable Float32x3x2_raw_list_arg4;
Variable Float32x3x2_raw_list_arg5;
Function Float32x3x2_raw_list;
inline constexpr std::array Float32x3x2_raw_list_args = { &Float32x3x2_raw_list_arg0, &Float32x3x2_raw_list_arg1, &Float32x3x2_raw_list_arg2, &Float32x3x2_raw_list_arg3, &Float32x3x2_raw_list_arg4, &Float32x3x2_raw_list_arg5 };

/// f32x4x2 with Float32x2, Float32x2, Float32x2, Float32x2
Variable Float32x4x2_Float32_2_ctor_arg0;
Variable Float32x4x2_Float32_2_ctor_arg1;
Variable Float32x4x2_Float32_2_ctor_arg2;
Variable Float32x4x2_Float32_2_ctor_arg3;
Function Float32x4x2_Float32_2_ctor;
inline constexpr std::array Float32x4x2_Float32_2_ctor_args = { &Float32x4x2_Float32_2_ctor_arg0, &Float32x4x2_Float32_2_ctor_arg1, &Float32x4x2_Float32_2_ctor_arg2, &Float32x4x2_Float32_2_ctor_arg3 };

/// f32x4x2 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x4x2_raw_list_arg0;
Variable Float32x4x2_raw_list_arg1;
Variable Float32x4x2_raw_list_arg2;
Variable Float32x4x2_raw_list_arg3;
Variable Float32x4x2_raw_list_arg4;
Variable Float32x4x2_raw_list_arg5;
Variable Float32x4x2_raw_list_arg6;
Variable Float32x4x2_raw_list_arg7;
Function Float32x4x2_raw_list;
inline constexpr std::array Float32x4x2_raw_list_args = { &Float32x4x2_raw_list_arg0, &Float32x4x2_raw_list_arg1, &Float32x4x2_raw_list_arg2, &Float32x4x2_raw_list_arg3, &Float32x4x2_raw_list_arg4, &Float32x4x2_raw_list_arg5, &Float32x4x2_raw_list_arg6, &Float32x4x2_raw_list_arg7 };

/// f32x2x3 with Float32x3, Float32x3
Variable Float32x2x3_Float32_3_ctor_arg0;
Variable Float32x2x3_Float32_3_ctor_arg1;
Function Float32x2x3_Float32_3_ctor;
inline constexpr std::array Float32x2x3_Float32_3_ctor_args = { &Float32x2x3_Float32_3_ctor_arg0, &Float32x2x3_Float32_3_ctor_arg1 };

/// f32x2x3 with Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x2x3_raw_list_arg0;
Variable Float32x2x3_raw_list_arg1;
Variable Float32x2x3_raw_list_arg2;
Variable Float32x2x3_raw_list_arg3;
Variable Float32x2x3_raw_list_arg4;
Variable Float32x2x3_raw_list_arg5;
Function Float32x2x3_raw_list;
inline constexpr std::array Float32x2x3_raw_list_args = { &Float32x2x3_raw_list_arg0, &Float32x2x3_raw_list_arg1, &Float32x2x3_raw_list_arg2, &Float32x2x3_raw_list_arg3, &Float32x2x3_raw_list_arg4, &Float32x2x3_raw_list_arg5 };

/// f32x3x3 with Float32x3, Float32x3, Float32x3
Variable Float32x3x3_Float32_3_ctor_arg0;
Variable Float32x3x3_Float32_3_ctor_arg1;
Variable Float32x3x3_Float32_3_ctor_arg2;
Function Float32x3x3_Float32_3_ctor;
inline constexpr std::array Float32x3x3_Float32_3_ctor_args = { &Float32x3x3_Float32_3_ctor_arg0, &Float32x3x3_Float32_3_ctor_arg1, &Float32x3x3_Float32_3_ctor_arg2 };

/// f32x3x3
Function Float32x3x3_identity;

/// f32x3x3 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x3x3_raw_list_arg0;
Variable Float32x3x3_raw_list_arg1;
Variable Float32x3x3_raw_list_arg2;
Variable Float32x3x3_raw_list_arg3;
Variable Float32x3x3_raw_list_arg4;
Variable Float32x3x3_raw_list_arg5;
Variable Float32x3x3_raw_list_arg6;
Variable Float32x3x3_raw_list_arg7;
Variable Float32x3x3_raw_list_arg8;
Function Float32x3x3_raw_list;
inline constexpr std::array Float32x3x3_raw_list_args = { &Float32x3x3_raw_list_arg0, &Float32x3x3_raw_list_arg1, &Float32x3x3_raw_list_arg2, &Float32x3x3_raw_list_arg3, &Float32x3x3_raw_list_arg4, &Float32x3x3_raw_list_arg5, &Float32x3x3_raw_list_arg6, &Float32x3x3_raw_list_arg7, &Float32x3x3_raw_list_arg8 };

/// f32x4x3 with Float32x3, Float32x3, Float32x3, Float32x3
Variable Float32x4x3_Float32_3_ctor_arg0;
Variable Float32x4x3_Float32_3_ctor_arg1;
Variable Float32x4x3_Float32_3_ctor_arg2;
Variable Float32x4x3_Float32_3_ctor_arg3;
Function Float32x4x3_Float32_3_ctor;
inline constexpr std::array Float32x4x3_Float32_3_ctor_args = { &Float32x4x3_Float32_3_ctor_arg0, &Float32x4x3_Float32_3_ctor_arg1, &Float32x4x3_Float32_3_ctor_arg2, &Float32x4x3_Float32_3_ctor_arg3 };

/// f32x4x3 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x4x3_raw_list_arg0;
Variable Float32x4x3_raw_list_arg1;
Variable Float32x4x3_raw_list_arg2;
Variable Float32x4x3_raw_list_arg3;
Variable Float32x4x3_raw_list_arg4;
Variable Float32x4x3_raw_list_arg5;
Variable Float32x4x3_raw_list_arg6;
Variable Float32x4x3_raw_list_arg7;
Variable Float32x4x3_raw_list_arg8;
Variable Float32x4x3_raw_list_arg9;
Variable Float32x4x3_raw_list_arg10;
Variable Float32x4x3_raw_list_arg11;
Function Float32x4x3_raw_list;
inline constexpr std::array Float32x4x3_raw_list_args = { &Float32x4x3_raw_list_arg0, &Float32x4x3_raw_list_arg1, &Float32x4x3_raw_list_arg2, &Float32x4x3_raw_list_arg3, &Float32x4x3_raw_list_arg4, &Float32x4x3_raw_list_arg5, &Float32x4x3_raw_list_arg6, &Float32x4x3_raw_list_arg7, &Float32x4x3_raw_list_arg8, &Float32x4x3_raw_list_arg9, &Float32x4x3_raw_list_arg10, &Float32x4x3_raw_list_arg11 };

/// f32x2x4 with Float32x4, Float32x4
Variable Float32x2x4_Float32_4_ctor_arg0;
Variable Float32x2x4_Float32_4_ctor_arg1;
Function Float32x2x4_Float32_4_ctor;
inline constexpr std::array Float32x2x4_Float32_4_ctor_args = { &Float32x2x4_Float32_4_ctor_arg0, &Float32x2x4_Float32_4_ctor_arg1 };

/// f32x2x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x2x4_raw_list_arg0;
Variable Float32x2x4_raw_list_arg1;
Variable Float32x2x4_raw_list_arg2;
Variable Float32x2x4_raw_list_arg3;
Variable Float32x2x4_raw_list_arg4;
Variable Float32x2x4_raw_list_arg5;
Variable Float32x2x4_raw_list_arg6;
Variable Float32x2x4_raw_list_arg7;
Function Float32x2x4_raw_list;
inline constexpr std::array Float32x2x4_raw_list_args = { &Float32x2x4_raw_list_arg0, &Float32x2x4_raw_list_arg1, &Float32x2x4_raw_list_arg2, &Float32x2x4_raw_list_arg3, &Float32x2x4_raw_list_arg4, &Float32x2x4_raw_list_arg5, &Float32x2x4_raw_list_arg6, &Float32x2x4_raw_list_arg7 };

/// f32x3x4 with Float32x4, Float32x4, Float32x4
Variable Float32x3x4_Float32_4_ctor_arg0;
Variable Float32x3x4_Float32_4_ctor_arg1;
Variable Float32x3x4_Float32_4_ctor_arg2;
Function Float32x3x4_Float32_4_ctor;
inline constexpr std::array Float32x3x4_Float32_4_ctor_args = { &Float32x3x4_Float32_4_ctor_arg0, &Float32x3x4_Float32_4_ctor_arg1, &Float32x3x4_Float32_4_ctor_arg2 };

/// f32x3x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x3x4_raw_list_arg0;
Variable Float32x3x4_raw_list_arg1;
Variable Float32x3x4_raw_list_arg2;
Variable Float32x3x4_raw_list_arg3;
Variable Float32x3x4_raw_list_arg4;
Variable Float32x3x4_raw_list_arg5;
Variable Float32x3x4_raw_list_arg6;
Variable Float32x3x4_raw_list_arg7;
Variable Float32x3x4_raw_list_arg8;
Variable Float32x3x4_raw_list_arg9;
Variable Float32x3x4_raw_list_arg10;
Variable Float32x3x4_raw_list_arg11;
Function Float32x3x4_raw_list;
inline constexpr std::array Float32x3x4_raw_list_args = { &Float32x3x4_raw_list_arg0, &Float32x3x4_raw_list_arg1, &Float32x3x4_raw_list_arg2, &Float32x3x4_raw_list_arg3, &Float32x3x4_raw_list_arg4, &Float32x3x4_raw_list_arg5, &Float32x3x4_raw_list_arg6, &Float32x3x4_raw_list_arg7, &Float32x3x4_raw_list_arg8, &Float32x3x4_raw_list_arg9, &Float32x3x4_raw_list_arg10, &Float32x3x4_raw_list_arg11 };

/// f32x4x4 with Float32x4, Float32x4, Float32x4, Float32x4
Variable Float32x4x4_Float32_4_ctor_arg0;
Variable Float32x4x4_Float32_4_ctor_arg1;
Variable Float32x4x4_Float32_4_ctor_arg2;
Variable Float32x4x4_Float32_4_ctor_arg3;
Function Float32x4x4_Float32_4_ctor;
inline constexpr std::array Float32x4x4_Float32_4_ctor_args = { &Float32x4x4_Float32_4_ctor_arg0, &Float32x4x4_Float32_4_ctor_arg1, &Float32x4x4_Float32_4_ctor_arg2, &Float32x4x4_Float32_4_ctor_arg3 };

/// f32x4x4
Function Float32x4x4_identity;

/// f32x4x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
Variable Float32x4x4_raw_list_arg0;
Variable Float32x4x4_raw_list_arg1;
Variable Float32x4x4_raw_list_arg2;
Variable Float32x4x4_raw_list_arg3;
Variable Float32x4x4_raw_list_arg4;
Variable Float32x4x4_raw_list_arg5;
Variable Float32x4x4_raw_list_arg6;
Variable Float32x4x4_raw_list_arg7;
Variable Float32x4x4_raw_list_arg8;
Variable Float32x4x4_raw_list_arg9;
Variable Float32x4x4_raw_list_arg10;
Variable Float32x4x4_raw_list_arg11;
Variable Float32x4x4_raw_list_arg12;
Variable Float32x4x4_raw_list_arg13;
Variable Float32x4x4_raw_list_arg14;
Variable Float32x4x4_raw_list_arg15;
Function Float32x4x4_raw_list;
inline constexpr std::array Float32x4x4_raw_list_args = { &Float32x4x4_raw_list_arg0, &Float32x4x4_raw_list_arg1, &Float32x4x4_raw_list_arg2, &Float32x4x4_raw_list_arg3, &Float32x4x4_raw_list_arg4, &Float32x4x4_raw_list_arg5, &Float32x4x4_raw_list_arg6, &Float32x4x4_raw_list_arg7, &Float32x4x4_raw_list_arg8, &Float32x4x4_raw_list_arg9, &Float32x4x4_raw_list_arg10, &Float32x4x4_raw_list_arg11, &Float32x4x4_raw_list_arg12, &Float32x4x4_raw_list_arg13, &Float32x4x4_raw_list_arg14, &Float32x4x4_raw_list_arg15 };

/// f16x2x2 with Float16x2, Float16x2
Variable Float16x2x2_Float16_2_ctor_arg0;
Variable Float16x2x2_Float16_2_ctor_arg1;
Function Float16x2x2_Float16_2_ctor;
inline constexpr std::array Float16x2x2_Float16_2_ctor_args = { &Float16x2x2_Float16_2_ctor_arg0, &Float16x2x2_Float16_2_ctor_arg1 };

/// f16x2x2
Function Float16x2x2_identity;

/// f16x2x2 with Float16, Float16, Float16, Float16
Variable Float16x2x2_raw_list_arg0;
Variable Float16x2x2_raw_list_arg1;
Variable Float16x2x2_raw_list_arg2;
Variable Float16x2x2_raw_list_arg3;
Function Float16x2x2_raw_list;
inline constexpr std::array Float16x2x2_raw_list_args = { &Float16x2x2_raw_list_arg0, &Float16x2x2_raw_list_arg1, &Float16x2x2_raw_list_arg2, &Float16x2x2_raw_list_arg3 };

/// f16x3x2 with Float16x2, Float16x2, Float16x2
Variable Float16x3x2_Float16_2_ctor_arg0;
Variable Float16x3x2_Float16_2_ctor_arg1;
Variable Float16x3x2_Float16_2_ctor_arg2;
Function Float16x3x2_Float16_2_ctor;
inline constexpr std::array Float16x3x2_Float16_2_ctor_args = { &Float16x3x2_Float16_2_ctor_arg0, &Float16x3x2_Float16_2_ctor_arg1, &Float16x3x2_Float16_2_ctor_arg2 };

/// f16x3x2 with Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x3x2_raw_list_arg0;
Variable Float16x3x2_raw_list_arg1;
Variable Float16x3x2_raw_list_arg2;
Variable Float16x3x2_raw_list_arg3;
Variable Float16x3x2_raw_list_arg4;
Variable Float16x3x2_raw_list_arg5;
Function Float16x3x2_raw_list;
inline constexpr std::array Float16x3x2_raw_list_args = { &Float16x3x2_raw_list_arg0, &Float16x3x2_raw_list_arg1, &Float16x3x2_raw_list_arg2, &Float16x3x2_raw_list_arg3, &Float16x3x2_raw_list_arg4, &Float16x3x2_raw_list_arg5 };

/// f16x4x2 with Float16x2, Float16x2, Float16x2, Float16x2
Variable Float16x4x2_Float16_2_ctor_arg0;
Variable Float16x4x2_Float16_2_ctor_arg1;
Variable Float16x4x2_Float16_2_ctor_arg2;
Variable Float16x4x2_Float16_2_ctor_arg3;
Function Float16x4x2_Float16_2_ctor;
inline constexpr std::array Float16x4x2_Float16_2_ctor_args = { &Float16x4x2_Float16_2_ctor_arg0, &Float16x4x2_Float16_2_ctor_arg1, &Float16x4x2_Float16_2_ctor_arg2, &Float16x4x2_Float16_2_ctor_arg3 };

/// f16x4x2 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x4x2_raw_list_arg0;
Variable Float16x4x2_raw_list_arg1;
Variable Float16x4x2_raw_list_arg2;
Variable Float16x4x2_raw_list_arg3;
Variable Float16x4x2_raw_list_arg4;
Variable Float16x4x2_raw_list_arg5;
Variable Float16x4x2_raw_list_arg6;
Variable Float16x4x2_raw_list_arg7;
Function Float16x4x2_raw_list;
inline constexpr std::array Float16x4x2_raw_list_args = { &Float16x4x2_raw_list_arg0, &Float16x4x2_raw_list_arg1, &Float16x4x2_raw_list_arg2, &Float16x4x2_raw_list_arg3, &Float16x4x2_raw_list_arg4, &Float16x4x2_raw_list_arg5, &Float16x4x2_raw_list_arg6, &Float16x4x2_raw_list_arg7 };

/// f16x2x3 with Float16x3, Float16x3
Variable Float16x2x3_Float16_3_ctor_arg0;
Variable Float16x2x3_Float16_3_ctor_arg1;
Function Float16x2x3_Float16_3_ctor;
inline constexpr std::array Float16x2x3_Float16_3_ctor_args = { &Float16x2x3_Float16_3_ctor_arg0, &Float16x2x3_Float16_3_ctor_arg1 };

/// f16x2x3 with Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x2x3_raw_list_arg0;
Variable Float16x2x3_raw_list_arg1;
Variable Float16x2x3_raw_list_arg2;
Variable Float16x2x3_raw_list_arg3;
Variable Float16x2x3_raw_list_arg4;
Variable Float16x2x3_raw_list_arg5;
Function Float16x2x3_raw_list;
inline constexpr std::array Float16x2x3_raw_list_args = { &Float16x2x3_raw_list_arg0, &Float16x2x3_raw_list_arg1, &Float16x2x3_raw_list_arg2, &Float16x2x3_raw_list_arg3, &Float16x2x3_raw_list_arg4, &Float16x2x3_raw_list_arg5 };

/// f16x3x3 with Float16x3, Float16x3, Float16x3
Variable Float16x3x3_Float16_3_ctor_arg0;
Variable Float16x3x3_Float16_3_ctor_arg1;
Variable Float16x3x3_Float16_3_ctor_arg2;
Function Float16x3x3_Float16_3_ctor;
inline constexpr std::array Float16x3x3_Float16_3_ctor_args = { &Float16x3x3_Float16_3_ctor_arg0, &Float16x3x3_Float16_3_ctor_arg1, &Float16x3x3_Float16_3_ctor_arg2 };

/// f16x3x3
Function Float16x3x3_identity;

/// f16x3x3 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x3x3_raw_list_arg0;
Variable Float16x3x3_raw_list_arg1;
Variable Float16x3x3_raw_list_arg2;
Variable Float16x3x3_raw_list_arg3;
Variable Float16x3x3_raw_list_arg4;
Variable Float16x3x3_raw_list_arg5;
Variable Float16x3x3_raw_list_arg6;
Variable Float16x3x3_raw_list_arg7;
Variable Float16x3x3_raw_list_arg8;
Function Float16x3x3_raw_list;
inline constexpr std::array Float16x3x3_raw_list_args = { &Float16x3x3_raw_list_arg0, &Float16x3x3_raw_list_arg1, &Float16x3x3_raw_list_arg2, &Float16x3x3_raw_list_arg3, &Float16x3x3_raw_list_arg4, &Float16x3x3_raw_list_arg5, &Float16x3x3_raw_list_arg6, &Float16x3x3_raw_list_arg7, &Float16x3x3_raw_list_arg8 };

/// f16x4x3 with Float16x3, Float16x3, Float16x3, Float16x3
Variable Float16x4x3_Float16_3_ctor_arg0;
Variable Float16x4x3_Float16_3_ctor_arg1;
Variable Float16x4x3_Float16_3_ctor_arg2;
Variable Float16x4x3_Float16_3_ctor_arg3;
Function Float16x4x3_Float16_3_ctor;
inline constexpr std::array Float16x4x3_Float16_3_ctor_args = { &Float16x4x3_Float16_3_ctor_arg0, &Float16x4x3_Float16_3_ctor_arg1, &Float16x4x3_Float16_3_ctor_arg2, &Float16x4x3_Float16_3_ctor_arg3 };

/// f16x4x3 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x4x3_raw_list_arg0;
Variable Float16x4x3_raw_list_arg1;
Variable Float16x4x3_raw_list_arg2;
Variable Float16x4x3_raw_list_arg3;
Variable Float16x4x3_raw_list_arg4;
Variable Float16x4x3_raw_list_arg5;
Variable Float16x4x3_raw_list_arg6;
Variable Float16x4x3_raw_list_arg7;
Variable Float16x4x3_raw_list_arg8;
Variable Float16x4x3_raw_list_arg9;
Variable Float16x4x3_raw_list_arg10;
Variable Float16x4x3_raw_list_arg11;
Function Float16x4x3_raw_list;
inline constexpr std::array Float16x4x3_raw_list_args = { &Float16x4x3_raw_list_arg0, &Float16x4x3_raw_list_arg1, &Float16x4x3_raw_list_arg2, &Float16x4x3_raw_list_arg3, &Float16x4x3_raw_list_arg4, &Float16x4x3_raw_list_arg5, &Float16x4x3_raw_list_arg6, &Float16x4x3_raw_list_arg7, &Float16x4x3_raw_list_arg8, &Float16x4x3_raw_list_arg9, &Float16x4x3_raw_list_arg10, &Float16x4x3_raw_list_arg11 };

/// f16x2x4 with Float16x4, Float16x4
Variable Float16x2x4_Float16_4_ctor_arg0;
Variable Float16x2x4_Float16_4_ctor_arg1;
Function Float16x2x4_Float16_4_ctor;
inline constexpr std::array Float16x2x4_Float16_4_ctor_args = { &Float16x2x4_Float16_4_ctor_arg0, &Float16x2x4_Float16_4_ctor_arg1 };

/// f16x2x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x2x4_raw_list_arg0;
Variable Float16x2x4_raw_list_arg1;
Variable Float16x2x4_raw_list_arg2;
Variable Float16x2x4_raw_list_arg3;
Variable Float16x2x4_raw_list_arg4;
Variable Float16x2x4_raw_list_arg5;
Variable Float16x2x4_raw_list_arg6;
Variable Float16x2x4_raw_list_arg7;
Function Float16x2x4_raw_list;
inline constexpr std::array Float16x2x4_raw_list_args = { &Float16x2x4_raw_list_arg0, &Float16x2x4_raw_list_arg1, &Float16x2x4_raw_list_arg2, &Float16x2x4_raw_list_arg3, &Float16x2x4_raw_list_arg4, &Float16x2x4_raw_list_arg5, &Float16x2x4_raw_list_arg6, &Float16x2x4_raw_list_arg7 };

/// f16x3x4 with Float16x4, Float16x4, Float16x4
Variable Float16x3x4_Float16_4_ctor_arg0;
Variable Float16x3x4_Float16_4_ctor_arg1;
Variable Float16x3x4_Float16_4_ctor_arg2;
Function Float16x3x4_Float16_4_ctor;
inline constexpr std::array Float16x3x4_Float16_4_ctor_args = { &Float16x3x4_Float16_4_ctor_arg0, &Float16x3x4_Float16_4_ctor_arg1, &Float16x3x4_Float16_4_ctor_arg2 };

/// f16x3x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x3x4_raw_list_arg0;
Variable Float16x3x4_raw_list_arg1;
Variable Float16x3x4_raw_list_arg2;
Variable Float16x3x4_raw_list_arg3;
Variable Float16x3x4_raw_list_arg4;
Variable Float16x3x4_raw_list_arg5;
Variable Float16x3x4_raw_list_arg6;
Variable Float16x3x4_raw_list_arg7;
Variable Float16x3x4_raw_list_arg8;
Variable Float16x3x4_raw_list_arg9;
Variable Float16x3x4_raw_list_arg10;
Variable Float16x3x4_raw_list_arg11;
Function Float16x3x4_raw_list;
inline constexpr std::array Float16x3x4_raw_list_args = { &Float16x3x4_raw_list_arg0, &Float16x3x4_raw_list_arg1, &Float16x3x4_raw_list_arg2, &Float16x3x4_raw_list_arg3, &Float16x3x4_raw_list_arg4, &Float16x3x4_raw_list_arg5, &Float16x3x4_raw_list_arg6, &Float16x3x4_raw_list_arg7, &Float16x3x4_raw_list_arg8, &Float16x3x4_raw_list_arg9, &Float16x3x4_raw_list_arg10, &Float16x3x4_raw_list_arg11 };

/// f16x4x4 with Float16x4, Float16x4, Float16x4, Float16x4
Variable Float16x4x4_Float16_4_ctor_arg0;
Variable Float16x4x4_Float16_4_ctor_arg1;
Variable Float16x4x4_Float16_4_ctor_arg2;
Variable Float16x4x4_Float16_4_ctor_arg3;
Function Float16x4x4_Float16_4_ctor;
inline constexpr std::array Float16x4x4_Float16_4_ctor_args = { &Float16x4x4_Float16_4_ctor_arg0, &Float16x4x4_Float16_4_ctor_arg1, &Float16x4x4_Float16_4_ctor_arg2, &Float16x4x4_Float16_4_ctor_arg3 };

/// f16x4x4
Function Float16x4x4_identity;

/// f16x4x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
Variable Float16x4x4_raw_list_arg0;
Variable Float16x4x4_raw_list_arg1;
Variable Float16x4x4_raw_list_arg2;
Variable Float16x4x4_raw_list_arg3;
Variable Float16x4x4_raw_list_arg4;
Variable Float16x4x4_raw_list_arg5;
Variable Float16x4x4_raw_list_arg6;
Variable Float16x4x4_raw_list_arg7;
Variable Float16x4x4_raw_list_arg8;
Variable Float16x4x4_raw_list_arg9;
Variable Float16x4x4_raw_list_arg10;
Variable Float16x4x4_raw_list_arg11;
Variable Float16x4x4_raw_list_arg12;
Variable Float16x4x4_raw_list_arg13;
Variable Float16x4x4_raw_list_arg14;
Variable Float16x4x4_raw_list_arg15;
Function Float16x4x4_raw_list;
inline constexpr std::array Float16x4x4_raw_list_args = { &Float16x4x4_raw_list_arg0, &Float16x4x4_raw_list_arg1, &Float16x4x4_raw_list_arg2, &Float16x4x4_raw_list_arg3, &Float16x4x4_raw_list_arg4, &Float16x4x4_raw_list_arg5, &Float16x4x4_raw_list_arg6, &Float16x4x4_raw_list_arg7, &Float16x4x4_raw_list_arg8, &Float16x4x4_raw_list_arg9, &Float16x4x4_raw_list_arg10, &Float16x4x4_raw_list_arg11, &Float16x4x4_raw_list_arg12, &Float16x4x4_raw_list_arg13, &Float16x4x4_raw_list_arg14, &Float16x4x4_raw_list_arg15 };

/// acos with Float32
Variable acos_Float32_arg;
Function acos_Float32;
inline constexpr std::array acos_Float32_args = { &acos_Float32_arg };

/// acos with Float32x2
Variable acos_Float32x2_arg;
Function acos_Float32x2;
inline constexpr std::array acos_Float32x2_args = { &acos_Float32x2_arg };

/// acos with Float32x3
Variable acos_Float32x3_arg;
Function acos_Float32x3;
inline constexpr std::array acos_Float32x3_args = { &acos_Float32x3_arg };

/// acos with Float32x4
Variable acos_Float32x4_arg;
Function acos_Float32x4;
inline constexpr std::array acos_Float32x4_args = { &acos_Float32x4_arg };

/// acos with Float16
Variable acos_Float16_arg;
Function acos_Float16;
inline constexpr std::array acos_Float16_args = { &acos_Float16_arg };

/// acos with Float16x2
Variable acos_Float16x2_arg;
Function acos_Float16x2;
inline constexpr std::array acos_Float16x2_args = { &acos_Float16x2_arg };

/// acos with Float16x3
Variable acos_Float16x3_arg;
Function acos_Float16x3;
inline constexpr std::array acos_Float16x3_args = { &acos_Float16x3_arg };

/// acos with Float16x4
Variable acos_Float16x4_arg;
Function acos_Float16x4;
inline constexpr std::array acos_Float16x4_args = { &acos_Float16x4_arg };

/// acosh with Float32
Variable acosh_Float32_arg;
Function acosh_Float32;
inline constexpr std::array acosh_Float32_args = { &acosh_Float32_arg };

/// acosh with Float32x2
Variable acosh_Float32x2_arg;
Function acosh_Float32x2;
inline constexpr std::array acosh_Float32x2_args = { &acosh_Float32x2_arg };

/// acosh with Float32x3
Variable acosh_Float32x3_arg;
Function acosh_Float32x3;
inline constexpr std::array acosh_Float32x3_args = { &acosh_Float32x3_arg };

/// acosh with Float32x4
Variable acosh_Float32x4_arg;
Function acosh_Float32x4;
inline constexpr std::array acosh_Float32x4_args = { &acosh_Float32x4_arg };

/// acosh with Float16
Variable acosh_Float16_arg;
Function acosh_Float16;
inline constexpr std::array acosh_Float16_args = { &acosh_Float16_arg };

/// acosh with Float16x2
Variable acosh_Float16x2_arg;
Function acosh_Float16x2;
inline constexpr std::array acosh_Float16x2_args = { &acosh_Float16x2_arg };

/// acosh with Float16x3
Variable acosh_Float16x3_arg;
Function acosh_Float16x3;
inline constexpr std::array acosh_Float16x3_args = { &acosh_Float16x3_arg };

/// acosh with Float16x4
Variable acosh_Float16x4_arg;
Function acosh_Float16x4;
inline constexpr std::array acosh_Float16x4_args = { &acosh_Float16x4_arg };

/// asin with Float32
Variable asin_Float32_arg;
Function asin_Float32;
inline constexpr std::array asin_Float32_args = { &asin_Float32_arg };

/// asin with Float32x2
Variable asin_Float32x2_arg;
Function asin_Float32x2;
inline constexpr std::array asin_Float32x2_args = { &asin_Float32x2_arg };

/// asin with Float32x3
Variable asin_Float32x3_arg;
Function asin_Float32x3;
inline constexpr std::array asin_Float32x3_args = { &asin_Float32x3_arg };

/// asin with Float32x4
Variable asin_Float32x4_arg;
Function asin_Float32x4;
inline constexpr std::array asin_Float32x4_args = { &asin_Float32x4_arg };

/// asin with Float16
Variable asin_Float16_arg;
Function asin_Float16;
inline constexpr std::array asin_Float16_args = { &asin_Float16_arg };

/// asin with Float16x2
Variable asin_Float16x2_arg;
Function asin_Float16x2;
inline constexpr std::array asin_Float16x2_args = { &asin_Float16x2_arg };

/// asin with Float16x3
Variable asin_Float16x3_arg;
Function asin_Float16x3;
inline constexpr std::array asin_Float16x3_args = { &asin_Float16x3_arg };

/// asin with Float16x4
Variable asin_Float16x4_arg;
Function asin_Float16x4;
inline constexpr std::array asin_Float16x4_args = { &asin_Float16x4_arg };

/// asinh with Float32
Variable asinh_Float32_arg;
Function asinh_Float32;
inline constexpr std::array asinh_Float32_args = { &asinh_Float32_arg };

/// asinh with Float32x2
Variable asinh_Float32x2_arg;
Function asinh_Float32x2;
inline constexpr std::array asinh_Float32x2_args = { &asinh_Float32x2_arg };

/// asinh with Float32x3
Variable asinh_Float32x3_arg;
Function asinh_Float32x3;
inline constexpr std::array asinh_Float32x3_args = { &asinh_Float32x3_arg };

/// asinh with Float32x4
Variable asinh_Float32x4_arg;
Function asinh_Float32x4;
inline constexpr std::array asinh_Float32x4_args = { &asinh_Float32x4_arg };

/// asinh with Float16
Variable asinh_Float16_arg;
Function asinh_Float16;
inline constexpr std::array asinh_Float16_args = { &asinh_Float16_arg };

/// asinh with Float16x2
Variable asinh_Float16x2_arg;
Function asinh_Float16x2;
inline constexpr std::array asinh_Float16x2_args = { &asinh_Float16x2_arg };

/// asinh with Float16x3
Variable asinh_Float16x3_arg;
Function asinh_Float16x3;
inline constexpr std::array asinh_Float16x3_args = { &asinh_Float16x3_arg };

/// asinh with Float16x4
Variable asinh_Float16x4_arg;
Function asinh_Float16x4;
inline constexpr std::array asinh_Float16x4_args = { &asinh_Float16x4_arg };

/// atan with Float32
Variable atan_Float32_arg;
Function atan_Float32;
inline constexpr std::array atan_Float32_args = { &atan_Float32_arg };

/// atan with Float32x2
Variable atan_Float32x2_arg;
Function atan_Float32x2;
inline constexpr std::array atan_Float32x2_args = { &atan_Float32x2_arg };

/// atan with Float32x3
Variable atan_Float32x3_arg;
Function atan_Float32x3;
inline constexpr std::array atan_Float32x3_args = { &atan_Float32x3_arg };

/// atan with Float32x4
Variable atan_Float32x4_arg;
Function atan_Float32x4;
inline constexpr std::array atan_Float32x4_args = { &atan_Float32x4_arg };

/// atan with Float16
Variable atan_Float16_arg;
Function atan_Float16;
inline constexpr std::array atan_Float16_args = { &atan_Float16_arg };

/// atan with Float16x2
Variable atan_Float16x2_arg;
Function atan_Float16x2;
inline constexpr std::array atan_Float16x2_args = { &atan_Float16x2_arg };

/// atan with Float16x3
Variable atan_Float16x3_arg;
Function atan_Float16x3;
inline constexpr std::array atan_Float16x3_args = { &atan_Float16x3_arg };

/// atan with Float16x4
Variable atan_Float16x4_arg;
Function atan_Float16x4;
inline constexpr std::array atan_Float16x4_args = { &atan_Float16x4_arg };

/// atanh with Float32
Variable atanh_Float32_arg;
Function atanh_Float32;
inline constexpr std::array atanh_Float32_args = { &atanh_Float32_arg };

/// atanh with Float32x2
Variable atanh_Float32x2_arg;
Function atanh_Float32x2;
inline constexpr std::array atanh_Float32x2_args = { &atanh_Float32x2_arg };

/// atanh with Float32x3
Variable atanh_Float32x3_arg;
Function atanh_Float32x3;
inline constexpr std::array atanh_Float32x3_args = { &atanh_Float32x3_arg };

/// atanh with Float32x4
Variable atanh_Float32x4_arg;
Function atanh_Float32x4;
inline constexpr std::array atanh_Float32x4_args = { &atanh_Float32x4_arg };

/// atanh with Float16
Variable atanh_Float16_arg;
Function atanh_Float16;
inline constexpr std::array atanh_Float16_args = { &atanh_Float16_arg };

/// atanh with Float16x2
Variable atanh_Float16x2_arg;
Function atanh_Float16x2;
inline constexpr std::array atanh_Float16x2_args = { &atanh_Float16x2_arg };

/// atanh with Float16x3
Variable atanh_Float16x3_arg;
Function atanh_Float16x3;
inline constexpr std::array atanh_Float16x3_args = { &atanh_Float16x3_arg };

/// atanh with Float16x4
Variable atanh_Float16x4_arg;
Function atanh_Float16x4;
inline constexpr std::array atanh_Float16x4_args = { &atanh_Float16x4_arg };

/// cos with Float32
Variable cos_Float32_arg;
Function cos_Float32;
inline constexpr std::array cos_Float32_args = { &cos_Float32_arg };

/// cos with Float32x2
Variable cos_Float32x2_arg;
Function cos_Float32x2;
inline constexpr std::array cos_Float32x2_args = { &cos_Float32x2_arg };

/// cos with Float32x3
Variable cos_Float32x3_arg;
Function cos_Float32x3;
inline constexpr std::array cos_Float32x3_args = { &cos_Float32x3_arg };

/// cos with Float32x4
Variable cos_Float32x4_arg;
Function cos_Float32x4;
inline constexpr std::array cos_Float32x4_args = { &cos_Float32x4_arg };

/// cos with Float16
Variable cos_Float16_arg;
Function cos_Float16;
inline constexpr std::array cos_Float16_args = { &cos_Float16_arg };

/// cos with Float16x2
Variable cos_Float16x2_arg;
Function cos_Float16x2;
inline constexpr std::array cos_Float16x2_args = { &cos_Float16x2_arg };

/// cos with Float16x3
Variable cos_Float16x3_arg;
Function cos_Float16x3;
inline constexpr std::array cos_Float16x3_args = { &cos_Float16x3_arg };

/// cos with Float16x4
Variable cos_Float16x4_arg;
Function cos_Float16x4;
inline constexpr std::array cos_Float16x4_args = { &cos_Float16x4_arg };

/// cosh with Float32
Variable cosh_Float32_arg;
Function cosh_Float32;
inline constexpr std::array cosh_Float32_args = { &cosh_Float32_arg };

/// cosh with Float32x2
Variable cosh_Float32x2_arg;
Function cosh_Float32x2;
inline constexpr std::array cosh_Float32x2_args = { &cosh_Float32x2_arg };

/// cosh with Float32x3
Variable cosh_Float32x3_arg;
Function cosh_Float32x3;
inline constexpr std::array cosh_Float32x3_args = { &cosh_Float32x3_arg };

/// cosh with Float32x4
Variable cosh_Float32x4_arg;
Function cosh_Float32x4;
inline constexpr std::array cosh_Float32x4_args = { &cosh_Float32x4_arg };

/// cosh with Float16
Variable cosh_Float16_arg;
Function cosh_Float16;
inline constexpr std::array cosh_Float16_args = { &cosh_Float16_arg };

/// cosh with Float16x2
Variable cosh_Float16x2_arg;
Function cosh_Float16x2;
inline constexpr std::array cosh_Float16x2_args = { &cosh_Float16x2_arg };

/// cosh with Float16x3
Variable cosh_Float16x3_arg;
Function cosh_Float16x3;
inline constexpr std::array cosh_Float16x3_args = { &cosh_Float16x3_arg };

/// cosh with Float16x4
Variable cosh_Float16x4_arg;
Function cosh_Float16x4;
inline constexpr std::array cosh_Float16x4_args = { &cosh_Float16x4_arg };

/// exp with Float32
Variable exp_Float32_arg;
Function exp_Float32;
inline constexpr std::array exp_Float32_args = { &exp_Float32_arg };

/// exp with Float32x2
Variable exp_Float32x2_arg;
Function exp_Float32x2;
inline constexpr std::array exp_Float32x2_args = { &exp_Float32x2_arg };

/// exp with Float32x3
Variable exp_Float32x3_arg;
Function exp_Float32x3;
inline constexpr std::array exp_Float32x3_args = { &exp_Float32x3_arg };

/// exp with Float32x4
Variable exp_Float32x4_arg;
Function exp_Float32x4;
inline constexpr std::array exp_Float32x4_args = { &exp_Float32x4_arg };

/// exp with Float16
Variable exp_Float16_arg;
Function exp_Float16;
inline constexpr std::array exp_Float16_args = { &exp_Float16_arg };

/// exp with Float16x2
Variable exp_Float16x2_arg;
Function exp_Float16x2;
inline constexpr std::array exp_Float16x2_args = { &exp_Float16x2_arg };

/// exp with Float16x3
Variable exp_Float16x3_arg;
Function exp_Float16x3;
inline constexpr std::array exp_Float16x3_args = { &exp_Float16x3_arg };

/// exp with Float16x4
Variable exp_Float16x4_arg;
Function exp_Float16x4;
inline constexpr std::array exp_Float16x4_args = { &exp_Float16x4_arg };

/// exp2 with Float32
Variable exp2_Float32_arg;
Function exp2_Float32;
inline constexpr std::array exp2_Float32_args = { &exp2_Float32_arg };

/// exp2 with Float32x2
Variable exp2_Float32x2_arg;
Function exp2_Float32x2;
inline constexpr std::array exp2_Float32x2_args = { &exp2_Float32x2_arg };

/// exp2 with Float32x3
Variable exp2_Float32x3_arg;
Function exp2_Float32x3;
inline constexpr std::array exp2_Float32x3_args = { &exp2_Float32x3_arg };

/// exp2 with Float32x4
Variable exp2_Float32x4_arg;
Function exp2_Float32x4;
inline constexpr std::array exp2_Float32x4_args = { &exp2_Float32x4_arg };

/// exp2 with Float16
Variable exp2_Float16_arg;
Function exp2_Float16;
inline constexpr std::array exp2_Float16_args = { &exp2_Float16_arg };

/// exp2 with Float16x2
Variable exp2_Float16x2_arg;
Function exp2_Float16x2;
inline constexpr std::array exp2_Float16x2_args = { &exp2_Float16x2_arg };

/// exp2 with Float16x3
Variable exp2_Float16x3_arg;
Function exp2_Float16x3;
inline constexpr std::array exp2_Float16x3_args = { &exp2_Float16x3_arg };

/// exp2 with Float16x4
Variable exp2_Float16x4_arg;
Function exp2_Float16x4;
inline constexpr std::array exp2_Float16x4_args = { &exp2_Float16x4_arg };

/// invSqrt with Float32
Variable invSqrt_Float32_arg;
Function invSqrt_Float32;
inline constexpr std::array invSqrt_Float32_args = { &invSqrt_Float32_arg };

/// invSqrt with Float32x2
Variable invSqrt_Float32x2_arg;
Function invSqrt_Float32x2;
inline constexpr std::array invSqrt_Float32x2_args = { &invSqrt_Float32x2_arg };

/// invSqrt with Float32x3
Variable invSqrt_Float32x3_arg;
Function invSqrt_Float32x3;
inline constexpr std::array invSqrt_Float32x3_args = { &invSqrt_Float32x3_arg };

/// invSqrt with Float32x4
Variable invSqrt_Float32x4_arg;
Function invSqrt_Float32x4;
inline constexpr std::array invSqrt_Float32x4_args = { &invSqrt_Float32x4_arg };

/// invSqrt with Float16
Variable invSqrt_Float16_arg;
Function invSqrt_Float16;
inline constexpr std::array invSqrt_Float16_args = { &invSqrt_Float16_arg };

/// invSqrt with Float16x2
Variable invSqrt_Float16x2_arg;
Function invSqrt_Float16x2;
inline constexpr std::array invSqrt_Float16x2_args = { &invSqrt_Float16x2_arg };

/// invSqrt with Float16x3
Variable invSqrt_Float16x3_arg;
Function invSqrt_Float16x3;
inline constexpr std::array invSqrt_Float16x3_args = { &invSqrt_Float16x3_arg };

/// invSqrt with Float16x4
Variable invSqrt_Float16x4_arg;
Function invSqrt_Float16x4;
inline constexpr std::array invSqrt_Float16x4_args = { &invSqrt_Float16x4_arg };

/// log with Float32
Variable log_Float32_arg;
Function log_Float32;
inline constexpr std::array log_Float32_args = { &log_Float32_arg };

/// log with Float32x2
Variable log_Float32x2_arg;
Function log_Float32x2;
inline constexpr std::array log_Float32x2_args = { &log_Float32x2_arg };

/// log with Float32x3
Variable log_Float32x3_arg;
Function log_Float32x3;
inline constexpr std::array log_Float32x3_args = { &log_Float32x3_arg };

/// log with Float32x4
Variable log_Float32x4_arg;
Function log_Float32x4;
inline constexpr std::array log_Float32x4_args = { &log_Float32x4_arg };

/// log with Float16
Variable log_Float16_arg;
Function log_Float16;
inline constexpr std::array log_Float16_args = { &log_Float16_arg };

/// log with Float16x2
Variable log_Float16x2_arg;
Function log_Float16x2;
inline constexpr std::array log_Float16x2_args = { &log_Float16x2_arg };

/// log with Float16x3
Variable log_Float16x3_arg;
Function log_Float16x3;
inline constexpr std::array log_Float16x3_args = { &log_Float16x3_arg };

/// log with Float16x4
Variable log_Float16x4_arg;
Function log_Float16x4;
inline constexpr std::array log_Float16x4_args = { &log_Float16x4_arg };

/// log2 with Float32
Variable log2_Float32_arg;
Function log2_Float32;
inline constexpr std::array log2_Float32_args = { &log2_Float32_arg };

/// log2 with Float32x2
Variable log2_Float32x2_arg;
Function log2_Float32x2;
inline constexpr std::array log2_Float32x2_args = { &log2_Float32x2_arg };

/// log2 with Float32x3
Variable log2_Float32x3_arg;
Function log2_Float32x3;
inline constexpr std::array log2_Float32x3_args = { &log2_Float32x3_arg };

/// log2 with Float32x4
Variable log2_Float32x4_arg;
Function log2_Float32x4;
inline constexpr std::array log2_Float32x4_args = { &log2_Float32x4_arg };

/// log2 with Float16
Variable log2_Float16_arg;
Function log2_Float16;
inline constexpr std::array log2_Float16_args = { &log2_Float16_arg };

/// log2 with Float16x2
Variable log2_Float16x2_arg;
Function log2_Float16x2;
inline constexpr std::array log2_Float16x2_args = { &log2_Float16x2_arg };

/// log2 with Float16x3
Variable log2_Float16x3_arg;
Function log2_Float16x3;
inline constexpr std::array log2_Float16x3_args = { &log2_Float16x3_arg };

/// log2 with Float16x4
Variable log2_Float16x4_arg;
Function log2_Float16x4;
inline constexpr std::array log2_Float16x4_args = { &log2_Float16x4_arg };

/// sin with Float32
Variable sin_Float32_arg;
Function sin_Float32;
inline constexpr std::array sin_Float32_args = { &sin_Float32_arg };

/// sin with Float32x2
Variable sin_Float32x2_arg;
Function sin_Float32x2;
inline constexpr std::array sin_Float32x2_args = { &sin_Float32x2_arg };

/// sin with Float32x3
Variable sin_Float32x3_arg;
Function sin_Float32x3;
inline constexpr std::array sin_Float32x3_args = { &sin_Float32x3_arg };

/// sin with Float32x4
Variable sin_Float32x4_arg;
Function sin_Float32x4;
inline constexpr std::array sin_Float32x4_args = { &sin_Float32x4_arg };

/// sin with Float16
Variable sin_Float16_arg;
Function sin_Float16;
inline constexpr std::array sin_Float16_args = { &sin_Float16_arg };

/// sin with Float16x2
Variable sin_Float16x2_arg;
Function sin_Float16x2;
inline constexpr std::array sin_Float16x2_args = { &sin_Float16x2_arg };

/// sin with Float16x3
Variable sin_Float16x3_arg;
Function sin_Float16x3;
inline constexpr std::array sin_Float16x3_args = { &sin_Float16x3_arg };

/// sin with Float16x4
Variable sin_Float16x4_arg;
Function sin_Float16x4;
inline constexpr std::array sin_Float16x4_args = { &sin_Float16x4_arg };

/// sinh with Float32
Variable sinh_Float32_arg;
Function sinh_Float32;
inline constexpr std::array sinh_Float32_args = { &sinh_Float32_arg };

/// sinh with Float32x2
Variable sinh_Float32x2_arg;
Function sinh_Float32x2;
inline constexpr std::array sinh_Float32x2_args = { &sinh_Float32x2_arg };

/// sinh with Float32x3
Variable sinh_Float32x3_arg;
Function sinh_Float32x3;
inline constexpr std::array sinh_Float32x3_args = { &sinh_Float32x3_arg };

/// sinh with Float32x4
Variable sinh_Float32x4_arg;
Function sinh_Float32x4;
inline constexpr std::array sinh_Float32x4_args = { &sinh_Float32x4_arg };

/// sinh with Float16
Variable sinh_Float16_arg;
Function sinh_Float16;
inline constexpr std::array sinh_Float16_args = { &sinh_Float16_arg };

/// sinh with Float16x2
Variable sinh_Float16x2_arg;
Function sinh_Float16x2;
inline constexpr std::array sinh_Float16x2_args = { &sinh_Float16x2_arg };

/// sinh with Float16x3
Variable sinh_Float16x3_arg;
Function sinh_Float16x3;
inline constexpr std::array sinh_Float16x3_args = { &sinh_Float16x3_arg };

/// sinh with Float16x4
Variable sinh_Float16x4_arg;
Function sinh_Float16x4;
inline constexpr std::array sinh_Float16x4_args = { &sinh_Float16x4_arg };

/// sqrt with Float32
Variable sqrt_Float32_arg;
Function sqrt_Float32;
inline constexpr std::array sqrt_Float32_args = { &sqrt_Float32_arg };

/// sqrt with Float32x2
Variable sqrt_Float32x2_arg;
Function sqrt_Float32x2;
inline constexpr std::array sqrt_Float32x2_args = { &sqrt_Float32x2_arg };

/// sqrt with Float32x3
Variable sqrt_Float32x3_arg;
Function sqrt_Float32x3;
inline constexpr std::array sqrt_Float32x3_args = { &sqrt_Float32x3_arg };

/// sqrt with Float32x4
Variable sqrt_Float32x4_arg;
Function sqrt_Float32x4;
inline constexpr std::array sqrt_Float32x4_args = { &sqrt_Float32x4_arg };

/// sqrt with Float16
Variable sqrt_Float16_arg;
Function sqrt_Float16;
inline constexpr std::array sqrt_Float16_args = { &sqrt_Float16_arg };

/// sqrt with Float16x2
Variable sqrt_Float16x2_arg;
Function sqrt_Float16x2;
inline constexpr std::array sqrt_Float16x2_args = { &sqrt_Float16x2_arg };

/// sqrt with Float16x3
Variable sqrt_Float16x3_arg;
Function sqrt_Float16x3;
inline constexpr std::array sqrt_Float16x3_args = { &sqrt_Float16x3_arg };

/// sqrt with Float16x4
Variable sqrt_Float16x4_arg;
Function sqrt_Float16x4;
inline constexpr std::array sqrt_Float16x4_args = { &sqrt_Float16x4_arg };

/// tan with Float32
Variable tan_Float32_arg;
Function tan_Float32;
inline constexpr std::array tan_Float32_args = { &tan_Float32_arg };

/// tan with Float32x2
Variable tan_Float32x2_arg;
Function tan_Float32x2;
inline constexpr std::array tan_Float32x2_args = { &tan_Float32x2_arg };

/// tan with Float32x3
Variable tan_Float32x3_arg;
Function tan_Float32x3;
inline constexpr std::array tan_Float32x3_args = { &tan_Float32x3_arg };

/// tan with Float32x4
Variable tan_Float32x4_arg;
Function tan_Float32x4;
inline constexpr std::array tan_Float32x4_args = { &tan_Float32x4_arg };

/// tan with Float16
Variable tan_Float16_arg;
Function tan_Float16;
inline constexpr std::array tan_Float16_args = { &tan_Float16_arg };

/// tan with Float16x2
Variable tan_Float16x2_arg;
Function tan_Float16x2;
inline constexpr std::array tan_Float16x2_args = { &tan_Float16x2_arg };

/// tan with Float16x3
Variable tan_Float16x3_arg;
Function tan_Float16x3;
inline constexpr std::array tan_Float16x3_args = { &tan_Float16x3_arg };

/// tan with Float16x4
Variable tan_Float16x4_arg;
Function tan_Float16x4;
inline constexpr std::array tan_Float16x4_args = { &tan_Float16x4_arg };

/// tanh with Float32
Variable tanh_Float32_arg;
Function tanh_Float32;
inline constexpr std::array tanh_Float32_args = { &tanh_Float32_arg };

/// tanh with Float32x2
Variable tanh_Float32x2_arg;
Function tanh_Float32x2;
inline constexpr std::array tanh_Float32x2_args = { &tanh_Float32x2_arg };

/// tanh with Float32x3
Variable tanh_Float32x3_arg;
Function tanh_Float32x3;
inline constexpr std::array tanh_Float32x3_args = { &tanh_Float32x3_arg };

/// tanh with Float32x4
Variable tanh_Float32x4_arg;
Function tanh_Float32x4;
inline constexpr std::array tanh_Float32x4_args = { &tanh_Float32x4_arg };

/// tanh with Float16
Variable tanh_Float16_arg;
Function tanh_Float16;
inline constexpr std::array tanh_Float16_args = { &tanh_Float16_arg };

/// tanh with Float16x2
Variable tanh_Float16x2_arg;
Function tanh_Float16x2;
inline constexpr std::array tanh_Float16x2_args = { &tanh_Float16x2_arg };

/// tanh with Float16x3
Variable tanh_Float16x3_arg;
Function tanh_Float16x3;
inline constexpr std::array tanh_Float16x3_args = { &tanh_Float16x3_arg };

/// tanh with Float16x4
Variable tanh_Float16x4_arg;
Function tanh_Float16x4;
inline constexpr std::array tanh_Float16x4_args = { &tanh_Float16x4_arg };

/// atan2 with Float32, Float32
Variable atan2_Float32_y;
Variable atan2_Float32_x;
Function atan2_Float32;
inline constexpr std::array atan2_Float32_args = { &atan2_Float32_y, &atan2_Float32_x };

/// atan2 with Float32x2, Float32x2
Variable atan2_Float32x2_y;
Variable atan2_Float32x2_x;
Function atan2_Float32x2;
inline constexpr std::array atan2_Float32x2_args = { &atan2_Float32x2_y, &atan2_Float32x2_x };

/// atan2 with Float32x3, Float32x3
Variable atan2_Float32x3_y;
Variable atan2_Float32x3_x;
Function atan2_Float32x3;
inline constexpr std::array atan2_Float32x3_args = { &atan2_Float32x3_y, &atan2_Float32x3_x };

/// atan2 with Float32x4, Float32x4
Variable atan2_Float32x4_y;
Variable atan2_Float32x4_x;
Function atan2_Float32x4;
inline constexpr std::array atan2_Float32x4_args = { &atan2_Float32x4_y, &atan2_Float32x4_x };

/// atan2 with Float16, Float16
Variable atan2_Float16_y;
Variable atan2_Float16_x;
Function atan2_Float16;
inline constexpr std::array atan2_Float16_args = { &atan2_Float16_y, &atan2_Float16_x };

/// atan2 with Float16x2, Float16x2
Variable atan2_Float16x2_y;
Variable atan2_Float16x2_x;
Function atan2_Float16x2;
inline constexpr std::array atan2_Float16x2_args = { &atan2_Float16x2_y, &atan2_Float16x2_x };

/// atan2 with Float16x3, Float16x3
Variable atan2_Float16x3_y;
Variable atan2_Float16x3_x;
Function atan2_Float16x3;
inline constexpr std::array atan2_Float16x3_args = { &atan2_Float16x3_y, &atan2_Float16x3_x };

/// atan2 with Float16x4, Float16x4
Variable atan2_Float16x4_y;
Variable atan2_Float16x4_x;
Function atan2_Float16x4;
inline constexpr std::array atan2_Float16x4_args = { &atan2_Float16x4_y, &atan2_Float16x4_x };

/// pow with Float32, Float32
Variable pow_Float32_arg;
Variable pow_Float32_exp;
Function pow_Float32;
inline constexpr std::array pow_Float32_args = { &pow_Float32_arg, &pow_Float32_exp };

/// pow with Float32x2, Float32x2
Variable pow_Float32x2_arg;
Variable pow_Float32x2_exp;
Function pow_Float32x2;
inline constexpr std::array pow_Float32x2_args = { &pow_Float32x2_arg, &pow_Float32x2_exp };

/// pow with Float32x3, Float32x3
Variable pow_Float32x3_arg;
Variable pow_Float32x3_exp;
Function pow_Float32x3;
inline constexpr std::array pow_Float32x3_args = { &pow_Float32x3_arg, &pow_Float32x3_exp };

/// pow with Float32x4, Float32x4
Variable pow_Float32x4_arg;
Variable pow_Float32x4_exp;
Function pow_Float32x4;
inline constexpr std::array pow_Float32x4_args = { &pow_Float32x4_arg, &pow_Float32x4_exp };

/// pow with Float16, Float16
Variable pow_Float16_arg;
Variable pow_Float16_exp;
Function pow_Float16;
inline constexpr std::array pow_Float16_args = { &pow_Float16_arg, &pow_Float16_exp };

/// pow with Float16x2, Float16x2
Variable pow_Float16x2_arg;
Variable pow_Float16x2_exp;
Function pow_Float16x2;
inline constexpr std::array pow_Float16x2_args = { &pow_Float16x2_arg, &pow_Float16x2_exp };

/// pow with Float16x3, Float16x3
Variable pow_Float16x3_arg;
Variable pow_Float16x3_exp;
Function pow_Float16x3;
inline constexpr std::array pow_Float16x3_args = { &pow_Float16x3_arg, &pow_Float16x3_exp };

/// pow with Float16x4, Float16x4
Variable pow_Float16x4_arg;
Variable pow_Float16x4_exp;
Function pow_Float16x4;
inline constexpr std::array pow_Float16x4_args = { &pow_Float16x4_arg, &pow_Float16x4_exp };

/// mad with Float32, Float32, Float32
Variable mad_Float32_arg;
Variable mad_Float32_mul;
Variable mad_Float32_add;
Function mad_Float32;
inline constexpr std::array mad_Float32_args = { &mad_Float32_arg, &mad_Float32_mul, &mad_Float32_add };

/// mad with Float32x2, Float32x2, Float32x2
Variable mad_Float32x2_arg;
Variable mad_Float32x2_mul;
Variable mad_Float32x2_add;
Function mad_Float32x2;
inline constexpr std::array mad_Float32x2_args = { &mad_Float32x2_arg, &mad_Float32x2_mul, &mad_Float32x2_add };

/// mad with Float32x3, Float32x3, Float32x3
Variable mad_Float32x3_arg;
Variable mad_Float32x3_mul;
Variable mad_Float32x3_add;
Function mad_Float32x3;
inline constexpr std::array mad_Float32x3_args = { &mad_Float32x3_arg, &mad_Float32x3_mul, &mad_Float32x3_add };

/// mad with Float32x4, Float32x4, Float32x4
Variable mad_Float32x4_arg;
Variable mad_Float32x4_mul;
Variable mad_Float32x4_add;
Function mad_Float32x4;
inline constexpr std::array mad_Float32x4_args = { &mad_Float32x4_arg, &mad_Float32x4_mul, &mad_Float32x4_add };

/// mad with Float16, Float16, Float16
Variable mad_Float16_arg;
Variable mad_Float16_mul;
Variable mad_Float16_add;
Function mad_Float16;
inline constexpr std::array mad_Float16_args = { &mad_Float16_arg, &mad_Float16_mul, &mad_Float16_add };

/// mad with Float16x2, Float16x2, Float16x2
Variable mad_Float16x2_arg;
Variable mad_Float16x2_mul;
Variable mad_Float16x2_add;
Function mad_Float16x2;
inline constexpr std::array mad_Float16x2_args = { &mad_Float16x2_arg, &mad_Float16x2_mul, &mad_Float16x2_add };

/// mad with Float16x3, Float16x3, Float16x3
Variable mad_Float16x3_arg;
Variable mad_Float16x3_mul;
Variable mad_Float16x3_add;
Function mad_Float16x3;
inline constexpr std::array mad_Float16x3_args = { &mad_Float16x3_arg, &mad_Float16x3_mul, &mad_Float16x3_add };

/// mad with Float16x4, Float16x4, Float16x4
Variable mad_Float16x4_arg;
Variable mad_Float16x4_mul;
Variable mad_Float16x4_add;
Function mad_Float16x4;
inline constexpr std::array mad_Float16x4_args = { &mad_Float16x4_arg, &mad_Float16x4_mul, &mad_Float16x4_add };

/// mad with Int32, Int32, Int32
Variable mad_Int32_arg;
Variable mad_Int32_mul;
Variable mad_Int32_add;
Function mad_Int32;
inline constexpr std::array mad_Int32_args = { &mad_Int32_arg, &mad_Int32_mul, &mad_Int32_add };

/// mad with Int32x2, Int32x2, Int32x2
Variable mad_Int32x2_arg;
Variable mad_Int32x2_mul;
Variable mad_Int32x2_add;
Function mad_Int32x2;
inline constexpr std::array mad_Int32x2_args = { &mad_Int32x2_arg, &mad_Int32x2_mul, &mad_Int32x2_add };

/// mad with Int32x3, Int32x3, Int32x3
Variable mad_Int32x3_arg;
Variable mad_Int32x3_mul;
Variable mad_Int32x3_add;
Function mad_Int32x3;
inline constexpr std::array mad_Int32x3_args = { &mad_Int32x3_arg, &mad_Int32x3_mul, &mad_Int32x3_add };

/// mad with Int32x4, Int32x4, Int32x4
Variable mad_Int32x4_arg;
Variable mad_Int32x4_mul;
Variable mad_Int32x4_add;
Function mad_Int32x4;
inline constexpr std::array mad_Int32x4_args = { &mad_Int32x4_arg, &mad_Int32x4_mul, &mad_Int32x4_add };

/// mad with Int16, Int16, Int16
Variable mad_Int16_arg;
Variable mad_Int16_mul;
Variable mad_Int16_add;
Function mad_Int16;
inline constexpr std::array mad_Int16_args = { &mad_Int16_arg, &mad_Int16_mul, &mad_Int16_add };

/// mad with Int16x2, Int16x2, Int16x2
Variable mad_Int16x2_arg;
Variable mad_Int16x2_mul;
Variable mad_Int16x2_add;
Function mad_Int16x2;
inline constexpr std::array mad_Int16x2_args = { &mad_Int16x2_arg, &mad_Int16x2_mul, &mad_Int16x2_add };

/// mad with Int16x3, Int16x3, Int16x3
Variable mad_Int16x3_arg;
Variable mad_Int16x3_mul;
Variable mad_Int16x3_add;
Function mad_Int16x3;
inline constexpr std::array mad_Int16x3_args = { &mad_Int16x3_arg, &mad_Int16x3_mul, &mad_Int16x3_add };

/// mad with Int16x4, Int16x4, Int16x4
Variable mad_Int16x4_arg;
Variable mad_Int16x4_mul;
Variable mad_Int16x4_add;
Function mad_Int16x4;
inline constexpr std::array mad_Int16x4_args = { &mad_Int16x4_arg, &mad_Int16x4_mul, &mad_Int16x4_add };

/// mad with UInt32, UInt32, UInt32
Variable mad_UInt32_arg;
Variable mad_UInt32_mul;
Variable mad_UInt32_add;
Function mad_UInt32;
inline constexpr std::array mad_UInt32_args = { &mad_UInt32_arg, &mad_UInt32_mul, &mad_UInt32_add };

/// mad with UInt32x2, UInt32x2, UInt32x2
Variable mad_UInt32x2_arg;
Variable mad_UInt32x2_mul;
Variable mad_UInt32x2_add;
Function mad_UInt32x2;
inline constexpr std::array mad_UInt32x2_args = { &mad_UInt32x2_arg, &mad_UInt32x2_mul, &mad_UInt32x2_add };

/// mad with UInt32x3, UInt32x3, UInt32x3
Variable mad_UInt32x3_arg;
Variable mad_UInt32x3_mul;
Variable mad_UInt32x3_add;
Function mad_UInt32x3;
inline constexpr std::array mad_UInt32x3_args = { &mad_UInt32x3_arg, &mad_UInt32x3_mul, &mad_UInt32x3_add };

/// mad with UInt32x4, UInt32x4, UInt32x4
Variable mad_UInt32x4_arg;
Variable mad_UInt32x4_mul;
Variable mad_UInt32x4_add;
Function mad_UInt32x4;
inline constexpr std::array mad_UInt32x4_args = { &mad_UInt32x4_arg, &mad_UInt32x4_mul, &mad_UInt32x4_add };

/// mad with UInt16, UInt16, UInt16
Variable mad_UInt16_arg;
Variable mad_UInt16_mul;
Variable mad_UInt16_add;
Function mad_UInt16;
inline constexpr std::array mad_UInt16_args = { &mad_UInt16_arg, &mad_UInt16_mul, &mad_UInt16_add };

/// mad with UInt16x2, UInt16x2, UInt16x2
Variable mad_UInt16x2_arg;
Variable mad_UInt16x2_mul;
Variable mad_UInt16x2_add;
Function mad_UInt16x2;
inline constexpr std::array mad_UInt16x2_args = { &mad_UInt16x2_arg, &mad_UInt16x2_mul, &mad_UInt16x2_add };

/// mad with UInt16x3, UInt16x3, UInt16x3
Variable mad_UInt16x3_arg;
Variable mad_UInt16x3_mul;
Variable mad_UInt16x3_add;
Function mad_UInt16x3;
inline constexpr std::array mad_UInt16x3_args = { &mad_UInt16x3_arg, &mad_UInt16x3_mul, &mad_UInt16x3_add };

/// mad with UInt16x4, UInt16x4, UInt16x4
Variable mad_UInt16x4_arg;
Variable mad_UInt16x4_mul;
Variable mad_UInt16x4_add;
Function mad_UInt16x4;
inline constexpr std::array mad_UInt16x4_args = { &mad_UInt16x4_arg, &mad_UInt16x4_mul, &mad_UInt16x4_add };

/// dot with Float32x2, Float32x2
Variable dot_Float32x2_x;
Variable dot_Float32x2_y;
Function dot_Float32x2;
inline constexpr std::array dot_Float32x2_args = { &dot_Float32x2_x, &dot_Float32x2_y };

/// dot with Float32x3, Float32x3
Variable dot_Float32x3_x;
Variable dot_Float32x3_y;
Function dot_Float32x3;
inline constexpr std::array dot_Float32x3_args = { &dot_Float32x3_x, &dot_Float32x3_y };

/// dot with Float32x4, Float32x4
Variable dot_Float32x4_x;
Variable dot_Float32x4_y;
Function dot_Float32x4;
inline constexpr std::array dot_Float32x4_args = { &dot_Float32x4_x, &dot_Float32x4_y };

/// dot with Float16x2, Float16x2
Variable dot_Float16x2_x;
Variable dot_Float16x2_y;
Function dot_Float16x2;
inline constexpr std::array dot_Float16x2_args = { &dot_Float16x2_x, &dot_Float16x2_y };

/// dot with Float16x3, Float16x3
Variable dot_Float16x3_x;
Variable dot_Float16x3_y;
Function dot_Float16x3;
inline constexpr std::array dot_Float16x3_args = { &dot_Float16x3_x, &dot_Float16x3_y };

/// dot with Float16x4, Float16x4
Variable dot_Float16x4_x;
Variable dot_Float16x4_y;
Function dot_Float16x4;
inline constexpr std::array dot_Float16x4_args = { &dot_Float16x4_x, &dot_Float16x4_y };

/// reflect with Float32x2, Float32x2
Variable reflect_Float32x2_incident;
Variable reflect_Float32x2_normal;
Function reflect_Float32x2;
inline constexpr std::array reflect_Float32x2_args = { &reflect_Float32x2_incident, &reflect_Float32x2_normal };

/// reflect with Float32x3, Float32x3
Variable reflect_Float32x3_incident;
Variable reflect_Float32x3_normal;
Function reflect_Float32x3;
inline constexpr std::array reflect_Float32x3_args = { &reflect_Float32x3_incident, &reflect_Float32x3_normal };

/// reflect with Float32x4, Float32x4
Variable reflect_Float32x4_incident;
Variable reflect_Float32x4_normal;
Function reflect_Float32x4;
inline constexpr std::array reflect_Float32x4_args = { &reflect_Float32x4_incident, &reflect_Float32x4_normal };

/// reflect with Float16x2, Float16x2
Variable reflect_Float16x2_incident;
Variable reflect_Float16x2_normal;
Function reflect_Float16x2;
inline constexpr std::array reflect_Float16x2_args = { &reflect_Float16x2_incident, &reflect_Float16x2_normal };

/// reflect with Float16x3, Float16x3
Variable reflect_Float16x3_incident;
Variable reflect_Float16x3_normal;
Function reflect_Float16x3;
inline constexpr std::array reflect_Float16x3_args = { &reflect_Float16x3_incident, &reflect_Float16x3_normal };

/// reflect with Float16x4, Float16x4
Variable reflect_Float16x4_incident;
Variable reflect_Float16x4_normal;
Function reflect_Float16x4;
inline constexpr std::array reflect_Float16x4_args = { &reflect_Float16x4_incident, &reflect_Float16x4_normal };

/// refract with Float32x2, Float32x2, Float32x2
Variable refract_Float32x2_incident;
Variable refract_Float32x2_normal;
Variable refract_Float32x2_ior;
Function refract_Float32x2;
inline constexpr std::array refract_Float32x2_args = { &refract_Float32x2_incident, &refract_Float32x2_normal, &refract_Float32x2_ior };

/// refract with Float32x3, Float32x3, Float32x3
Variable refract_Float32x3_incident;
Variable refract_Float32x3_normal;
Variable refract_Float32x3_ior;
Function refract_Float32x3;
inline constexpr std::array refract_Float32x3_args = { &refract_Float32x3_incident, &refract_Float32x3_normal, &refract_Float32x3_ior };

/// refract with Float32x4, Float32x4, Float32x4
Variable refract_Float32x4_incident;
Variable refract_Float32x4_normal;
Variable refract_Float32x4_ior;
Function refract_Float32x4;
inline constexpr std::array refract_Float32x4_args = { &refract_Float32x4_incident, &refract_Float32x4_normal, &refract_Float32x4_ior };

/// refract with Float16x2, Float16x2, Float16x2
Variable refract_Float16x2_incident;
Variable refract_Float16x2_normal;
Variable refract_Float16x2_ior;
Function refract_Float16x2;
inline constexpr std::array refract_Float16x2_args = { &refract_Float16x2_incident, &refract_Float16x2_normal, &refract_Float16x2_ior };

/// refract with Float16x3, Float16x3, Float16x3
Variable refract_Float16x3_incident;
Variable refract_Float16x3_normal;
Variable refract_Float16x3_ior;
Function refract_Float16x3;
inline constexpr std::array refract_Float16x3_args = { &refract_Float16x3_incident, &refract_Float16x3_normal, &refract_Float16x3_ior };

/// refract with Float16x4, Float16x4, Float16x4
Variable refract_Float16x4_incident;
Variable refract_Float16x4_normal;
Variable refract_Float16x4_ior;
Function refract_Float16x4;
inline constexpr std::array refract_Float16x4_args = { &refract_Float16x4_incident, &refract_Float16x4_normal, &refract_Float16x4_ior };

/// cross with Float32x3, Float32x3
Variable cross_Float32x3_v0;
Variable cross_Float32x3_v1;
Function cross_Float32x3;
inline constexpr std::array cross_Float32x3_args = { &cross_Float32x3_v0, &cross_Float32x3_v1 };

/// cross with Float16x3, Float16x3
Variable cross_Float16x3_v0;
Variable cross_Float16x3_v1;
Function cross_Float16x3;
inline constexpr std::array cross_Float16x3_args = { &cross_Float16x3_v0, &cross_Float16x3_v1 };

/// length with Float32x2
Variable length_Float32x2_arg;
Function length_Float32x2;
inline constexpr std::array length_Float32x2_args = { &length_Float32x2_arg };

/// length with Float32x3
Variable length_Float32x3_arg;
Function length_Float32x3;
inline constexpr std::array length_Float32x3_args = { &length_Float32x3_arg };

/// length with Float32x4
Variable length_Float32x4_arg;
Function length_Float32x4;
inline constexpr std::array length_Float32x4_args = { &length_Float32x4_arg };

/// length with Float16x2
Variable length_Float16x2_arg;
Function length_Float16x2;
inline constexpr std::array length_Float16x2_args = { &length_Float16x2_arg };

/// length with Float16x3
Variable length_Float16x3_arg;
Function length_Float16x3;
inline constexpr std::array length_Float16x3_args = { &length_Float16x3_arg };

/// length with Float16x4
Variable length_Float16x4_arg;
Function length_Float16x4;
inline constexpr std::array length_Float16x4_args = { &length_Float16x4_arg };

/// normalize with Float32x2
Variable normalize_Float32x2_arg;
Function normalize_Float32x2;
inline constexpr std::array normalize_Float32x2_args = { &normalize_Float32x2_arg };

/// normalize with Float32x3
Variable normalize_Float32x3_arg;
Function normalize_Float32x3;
inline constexpr std::array normalize_Float32x3_args = { &normalize_Float32x3_arg };

/// normalize with Float32x4
Variable normalize_Float32x4_arg;
Function normalize_Float32x4;
inline constexpr std::array normalize_Float32x4_args = { &normalize_Float32x4_arg };

/// normalize with Float16x2
Variable normalize_Float16x2_arg;
Function normalize_Float16x2;
inline constexpr std::array normalize_Float16x2_args = { &normalize_Float16x2_arg };

/// normalize with Float16x3
Variable normalize_Float16x3_arg;
Function normalize_Float16x3;
inline constexpr std::array normalize_Float16x3_args = { &normalize_Float16x3_arg };

/// normalize with Float16x4
Variable normalize_Float16x4_arg;
Function normalize_Float16x4;
inline constexpr std::array normalize_Float16x4_args = { &normalize_Float16x4_arg };

/// distance with Float32x2, Float32x2
Variable distance_Float32x2_p0;
Variable distance_Float32x2_p1;
Function distance_Float32x2;
inline constexpr std::array distance_Float32x2_args = { &distance_Float32x2_p0, &distance_Float32x2_p1 };

/// distance with Float32x3, Float32x3
Variable distance_Float32x3_p0;
Variable distance_Float32x3_p1;
Function distance_Float32x3;
inline constexpr std::array distance_Float32x3_args = { &distance_Float32x3_p0, &distance_Float32x3_p1 };

/// distance with Float32x4, Float32x4
Variable distance_Float32x4_p0;
Variable distance_Float32x4_p1;
Function distance_Float32x4;
inline constexpr std::array distance_Float32x4_args = { &distance_Float32x4_p0, &distance_Float32x4_p1 };

/// distance with Float16x2, Float16x2
Variable distance_Float16x2_p0;
Variable distance_Float16x2_p1;
Function distance_Float16x2;
inline constexpr std::array distance_Float16x2_args = { &distance_Float16x2_p0, &distance_Float16x2_p1 };

/// distance with Float16x3, Float16x3
Variable distance_Float16x3_p0;
Variable distance_Float16x3_p1;
Function distance_Float16x3;
inline constexpr std::array distance_Float16x3_args = { &distance_Float16x3_p0, &distance_Float16x3_p1 };

/// distance with Float16x4, Float16x4
Variable distance_Float16x4_p0;
Variable distance_Float16x4_p1;
Function distance_Float16x4;
inline constexpr std::array distance_Float16x4_args = { &distance_Float16x4_p0, &distance_Float16x4_p1 };

/// min with Float32, Float32
Variable min_Float32_x;
Variable min_Float32_y;
Function min_Float32;
inline constexpr std::array min_Float32_args = { &min_Float32_x, &min_Float32_y };

/// min with Float32x2, Float32x2
Variable min_Float32x2_x;
Variable min_Float32x2_y;
Function min_Float32x2;
inline constexpr std::array min_Float32x2_args = { &min_Float32x2_x, &min_Float32x2_y };

/// min with Float32x3, Float32x3
Variable min_Float32x3_x;
Variable min_Float32x3_y;
Function min_Float32x3;
inline constexpr std::array min_Float32x3_args = { &min_Float32x3_x, &min_Float32x3_y };

/// min with Float32x4, Float32x4
Variable min_Float32x4_x;
Variable min_Float32x4_y;
Function min_Float32x4;
inline constexpr std::array min_Float32x4_args = { &min_Float32x4_x, &min_Float32x4_y };

/// min with Float16, Float16
Variable min_Float16_x;
Variable min_Float16_y;
Function min_Float16;
inline constexpr std::array min_Float16_args = { &min_Float16_x, &min_Float16_y };

/// min with Float16x2, Float16x2
Variable min_Float16x2_x;
Variable min_Float16x2_y;
Function min_Float16x2;
inline constexpr std::array min_Float16x2_args = { &min_Float16x2_x, &min_Float16x2_y };

/// min with Float16x3, Float16x3
Variable min_Float16x3_x;
Variable min_Float16x3_y;
Function min_Float16x3;
inline constexpr std::array min_Float16x3_args = { &min_Float16x3_x, &min_Float16x3_y };

/// min with Float16x4, Float16x4
Variable min_Float16x4_x;
Variable min_Float16x4_y;
Function min_Float16x4;
inline constexpr std::array min_Float16x4_args = { &min_Float16x4_x, &min_Float16x4_y };

/// min with Int32, Int32
Variable min_Int32_x;
Variable min_Int32_y;
Function min_Int32;
inline constexpr std::array min_Int32_args = { &min_Int32_x, &min_Int32_y };

/// min with Int32x2, Int32x2
Variable min_Int32x2_x;
Variable min_Int32x2_y;
Function min_Int32x2;
inline constexpr std::array min_Int32x2_args = { &min_Int32x2_x, &min_Int32x2_y };

/// min with Int32x3, Int32x3
Variable min_Int32x3_x;
Variable min_Int32x3_y;
Function min_Int32x3;
inline constexpr std::array min_Int32x3_args = { &min_Int32x3_x, &min_Int32x3_y };

/// min with Int32x4, Int32x4
Variable min_Int32x4_x;
Variable min_Int32x4_y;
Function min_Int32x4;
inline constexpr std::array min_Int32x4_args = { &min_Int32x4_x, &min_Int32x4_y };

/// min with Int16, Int16
Variable min_Int16_x;
Variable min_Int16_y;
Function min_Int16;
inline constexpr std::array min_Int16_args = { &min_Int16_x, &min_Int16_y };

/// min with Int16x2, Int16x2
Variable min_Int16x2_x;
Variable min_Int16x2_y;
Function min_Int16x2;
inline constexpr std::array min_Int16x2_args = { &min_Int16x2_x, &min_Int16x2_y };

/// min with Int16x3, Int16x3
Variable min_Int16x3_x;
Variable min_Int16x3_y;
Function min_Int16x3;
inline constexpr std::array min_Int16x3_args = { &min_Int16x3_x, &min_Int16x3_y };

/// min with Int16x4, Int16x4
Variable min_Int16x4_x;
Variable min_Int16x4_y;
Function min_Int16x4;
inline constexpr std::array min_Int16x4_args = { &min_Int16x4_x, &min_Int16x4_y };

/// min with UInt32, UInt32
Variable min_UInt32_x;
Variable min_UInt32_y;
Function min_UInt32;
inline constexpr std::array min_UInt32_args = { &min_UInt32_x, &min_UInt32_y };

/// min with UInt32x2, UInt32x2
Variable min_UInt32x2_x;
Variable min_UInt32x2_y;
Function min_UInt32x2;
inline constexpr std::array min_UInt32x2_args = { &min_UInt32x2_x, &min_UInt32x2_y };

/// min with UInt32x3, UInt32x3
Variable min_UInt32x3_x;
Variable min_UInt32x3_y;
Function min_UInt32x3;
inline constexpr std::array min_UInt32x3_args = { &min_UInt32x3_x, &min_UInt32x3_y };

/// min with UInt32x4, UInt32x4
Variable min_UInt32x4_x;
Variable min_UInt32x4_y;
Function min_UInt32x4;
inline constexpr std::array min_UInt32x4_args = { &min_UInt32x4_x, &min_UInt32x4_y };

/// min with UInt16, UInt16
Variable min_UInt16_x;
Variable min_UInt16_y;
Function min_UInt16;
inline constexpr std::array min_UInt16_args = { &min_UInt16_x, &min_UInt16_y };

/// min with UInt16x2, UInt16x2
Variable min_UInt16x2_x;
Variable min_UInt16x2_y;
Function min_UInt16x2;
inline constexpr std::array min_UInt16x2_args = { &min_UInt16x2_x, &min_UInt16x2_y };

/// min with UInt16x3, UInt16x3
Variable min_UInt16x3_x;
Variable min_UInt16x3_y;
Function min_UInt16x3;
inline constexpr std::array min_UInt16x3_args = { &min_UInt16x3_x, &min_UInt16x3_y };

/// min with UInt16x4, UInt16x4
Variable min_UInt16x4_x;
Variable min_UInt16x4_y;
Function min_UInt16x4;
inline constexpr std::array min_UInt16x4_args = { &min_UInt16x4_x, &min_UInt16x4_y };

/// max with Float32, Float32
Variable max_Float32_x;
Variable max_Float32_y;
Function max_Float32;
inline constexpr std::array max_Float32_args = { &max_Float32_x, &max_Float32_y };

/// max with Float32x2, Float32x2
Variable max_Float32x2_x;
Variable max_Float32x2_y;
Function max_Float32x2;
inline constexpr std::array max_Float32x2_args = { &max_Float32x2_x, &max_Float32x2_y };

/// max with Float32x3, Float32x3
Variable max_Float32x3_x;
Variable max_Float32x3_y;
Function max_Float32x3;
inline constexpr std::array max_Float32x3_args = { &max_Float32x3_x, &max_Float32x3_y };

/// max with Float32x4, Float32x4
Variable max_Float32x4_x;
Variable max_Float32x4_y;
Function max_Float32x4;
inline constexpr std::array max_Float32x4_args = { &max_Float32x4_x, &max_Float32x4_y };

/// max with Float16, Float16
Variable max_Float16_x;
Variable max_Float16_y;
Function max_Float16;
inline constexpr std::array max_Float16_args = { &max_Float16_x, &max_Float16_y };

/// max with Float16x2, Float16x2
Variable max_Float16x2_x;
Variable max_Float16x2_y;
Function max_Float16x2;
inline constexpr std::array max_Float16x2_args = { &max_Float16x2_x, &max_Float16x2_y };

/// max with Float16x3, Float16x3
Variable max_Float16x3_x;
Variable max_Float16x3_y;
Function max_Float16x3;
inline constexpr std::array max_Float16x3_args = { &max_Float16x3_x, &max_Float16x3_y };

/// max with Float16x4, Float16x4
Variable max_Float16x4_x;
Variable max_Float16x4_y;
Function max_Float16x4;
inline constexpr std::array max_Float16x4_args = { &max_Float16x4_x, &max_Float16x4_y };

/// max with Int32, Int32
Variable max_Int32_x;
Variable max_Int32_y;
Function max_Int32;
inline constexpr std::array max_Int32_args = { &max_Int32_x, &max_Int32_y };

/// max with Int32x2, Int32x2
Variable max_Int32x2_x;
Variable max_Int32x2_y;
Function max_Int32x2;
inline constexpr std::array max_Int32x2_args = { &max_Int32x2_x, &max_Int32x2_y };

/// max with Int32x3, Int32x3
Variable max_Int32x3_x;
Variable max_Int32x3_y;
Function max_Int32x3;
inline constexpr std::array max_Int32x3_args = { &max_Int32x3_x, &max_Int32x3_y };

/// max with Int32x4, Int32x4
Variable max_Int32x4_x;
Variable max_Int32x4_y;
Function max_Int32x4;
inline constexpr std::array max_Int32x4_args = { &max_Int32x4_x, &max_Int32x4_y };

/// max with Int16, Int16
Variable max_Int16_x;
Variable max_Int16_y;
Function max_Int16;
inline constexpr std::array max_Int16_args = { &max_Int16_x, &max_Int16_y };

/// max with Int16x2, Int16x2
Variable max_Int16x2_x;
Variable max_Int16x2_y;
Function max_Int16x2;
inline constexpr std::array max_Int16x2_args = { &max_Int16x2_x, &max_Int16x2_y };

/// max with Int16x3, Int16x3
Variable max_Int16x3_x;
Variable max_Int16x3_y;
Function max_Int16x3;
inline constexpr std::array max_Int16x3_args = { &max_Int16x3_x, &max_Int16x3_y };

/// max with Int16x4, Int16x4
Variable max_Int16x4_x;
Variable max_Int16x4_y;
Function max_Int16x4;
inline constexpr std::array max_Int16x4_args = { &max_Int16x4_x, &max_Int16x4_y };

/// max with UInt32, UInt32
Variable max_UInt32_x;
Variable max_UInt32_y;
Function max_UInt32;
inline constexpr std::array max_UInt32_args = { &max_UInt32_x, &max_UInt32_y };

/// max with UInt32x2, UInt32x2
Variable max_UInt32x2_x;
Variable max_UInt32x2_y;
Function max_UInt32x2;
inline constexpr std::array max_UInt32x2_args = { &max_UInt32x2_x, &max_UInt32x2_y };

/// max with UInt32x3, UInt32x3
Variable max_UInt32x3_x;
Variable max_UInt32x3_y;
Function max_UInt32x3;
inline constexpr std::array max_UInt32x3_args = { &max_UInt32x3_x, &max_UInt32x3_y };

/// max with UInt32x4, UInt32x4
Variable max_UInt32x4_x;
Variable max_UInt32x4_y;
Function max_UInt32x4;
inline constexpr std::array max_UInt32x4_args = { &max_UInt32x4_x, &max_UInt32x4_y };

/// max with UInt16, UInt16
Variable max_UInt16_x;
Variable max_UInt16_y;
Function max_UInt16;
inline constexpr std::array max_UInt16_args = { &max_UInt16_x, &max_UInt16_y };

/// max with UInt16x2, UInt16x2
Variable max_UInt16x2_x;
Variable max_UInt16x2_y;
Function max_UInt16x2;
inline constexpr std::array max_UInt16x2_args = { &max_UInt16x2_x, &max_UInt16x2_y };

/// max with UInt16x3, UInt16x3
Variable max_UInt16x3_x;
Variable max_UInt16x3_y;
Function max_UInt16x3;
inline constexpr std::array max_UInt16x3_args = { &max_UInt16x3_x, &max_UInt16x3_y };

/// max with UInt16x4, UInt16x4
Variable max_UInt16x4_x;
Variable max_UInt16x4_y;
Function max_UInt16x4;
inline constexpr std::array max_UInt16x4_args = { &max_UInt16x4_x, &max_UInt16x4_y };

/// clamp with Float32, Float32, Float32
Variable clamp_Float32_val;
Variable clamp_Float32_min;
Variable clamp_Float32_max;
Function clamp_Float32;
inline constexpr std::array clamp_Float32_args = { &clamp_Float32_val, &clamp_Float32_min, &clamp_Float32_max };

/// clamp with Float32x2, Float32x2, Float32x2
Variable clamp_Float32x2_val;
Variable clamp_Float32x2_min;
Variable clamp_Float32x2_max;
Function clamp_Float32x2;
inline constexpr std::array clamp_Float32x2_args = { &clamp_Float32x2_val, &clamp_Float32x2_min, &clamp_Float32x2_max };

/// clamp with Float32x3, Float32x3, Float32x3
Variable clamp_Float32x3_val;
Variable clamp_Float32x3_min;
Variable clamp_Float32x3_max;
Function clamp_Float32x3;
inline constexpr std::array clamp_Float32x3_args = { &clamp_Float32x3_val, &clamp_Float32x3_min, &clamp_Float32x3_max };

/// clamp with Float32x4, Float32x4, Float32x4
Variable clamp_Float32x4_val;
Variable clamp_Float32x4_min;
Variable clamp_Float32x4_max;
Function clamp_Float32x4;
inline constexpr std::array clamp_Float32x4_args = { &clamp_Float32x4_val, &clamp_Float32x4_min, &clamp_Float32x4_max };

/// clamp with Float16, Float16, Float16
Variable clamp_Float16_val;
Variable clamp_Float16_min;
Variable clamp_Float16_max;
Function clamp_Float16;
inline constexpr std::array clamp_Float16_args = { &clamp_Float16_val, &clamp_Float16_min, &clamp_Float16_max };

/// clamp with Float16x2, Float16x2, Float16x2
Variable clamp_Float16x2_val;
Variable clamp_Float16x2_min;
Variable clamp_Float16x2_max;
Function clamp_Float16x2;
inline constexpr std::array clamp_Float16x2_args = { &clamp_Float16x2_val, &clamp_Float16x2_min, &clamp_Float16x2_max };

/// clamp with Float16x3, Float16x3, Float16x3
Variable clamp_Float16x3_val;
Variable clamp_Float16x3_min;
Variable clamp_Float16x3_max;
Function clamp_Float16x3;
inline constexpr std::array clamp_Float16x3_args = { &clamp_Float16x3_val, &clamp_Float16x3_min, &clamp_Float16x3_max };

/// clamp with Float16x4, Float16x4, Float16x4
Variable clamp_Float16x4_val;
Variable clamp_Float16x4_min;
Variable clamp_Float16x4_max;
Function clamp_Float16x4;
inline constexpr std::array clamp_Float16x4_args = { &clamp_Float16x4_val, &clamp_Float16x4_min, &clamp_Float16x4_max };

/// clamp with Int32, Int32, Int32
Variable clamp_Int32_val;
Variable clamp_Int32_min;
Variable clamp_Int32_max;
Function clamp_Int32;
inline constexpr std::array clamp_Int32_args = { &clamp_Int32_val, &clamp_Int32_min, &clamp_Int32_max };

/// clamp with Int32x2, Int32x2, Int32x2
Variable clamp_Int32x2_val;
Variable clamp_Int32x2_min;
Variable clamp_Int32x2_max;
Function clamp_Int32x2;
inline constexpr std::array clamp_Int32x2_args = { &clamp_Int32x2_val, &clamp_Int32x2_min, &clamp_Int32x2_max };

/// clamp with Int32x3, Int32x3, Int32x3
Variable clamp_Int32x3_val;
Variable clamp_Int32x3_min;
Variable clamp_Int32x3_max;
Function clamp_Int32x3;
inline constexpr std::array clamp_Int32x3_args = { &clamp_Int32x3_val, &clamp_Int32x3_min, &clamp_Int32x3_max };

/// clamp with Int32x4, Int32x4, Int32x4
Variable clamp_Int32x4_val;
Variable clamp_Int32x4_min;
Variable clamp_Int32x4_max;
Function clamp_Int32x4;
inline constexpr std::array clamp_Int32x4_args = { &clamp_Int32x4_val, &clamp_Int32x4_min, &clamp_Int32x4_max };

/// clamp with Int16, Int16, Int16
Variable clamp_Int16_val;
Variable clamp_Int16_min;
Variable clamp_Int16_max;
Function clamp_Int16;
inline constexpr std::array clamp_Int16_args = { &clamp_Int16_val, &clamp_Int16_min, &clamp_Int16_max };

/// clamp with Int16x2, Int16x2, Int16x2
Variable clamp_Int16x2_val;
Variable clamp_Int16x2_min;
Variable clamp_Int16x2_max;
Function clamp_Int16x2;
inline constexpr std::array clamp_Int16x2_args = { &clamp_Int16x2_val, &clamp_Int16x2_min, &clamp_Int16x2_max };

/// clamp with Int16x3, Int16x3, Int16x3
Variable clamp_Int16x3_val;
Variable clamp_Int16x3_min;
Variable clamp_Int16x3_max;
Function clamp_Int16x3;
inline constexpr std::array clamp_Int16x3_args = { &clamp_Int16x3_val, &clamp_Int16x3_min, &clamp_Int16x3_max };

/// clamp with Int16x4, Int16x4, Int16x4
Variable clamp_Int16x4_val;
Variable clamp_Int16x4_min;
Variable clamp_Int16x4_max;
Function clamp_Int16x4;
inline constexpr std::array clamp_Int16x4_args = { &clamp_Int16x4_val, &clamp_Int16x4_min, &clamp_Int16x4_max };

/// clamp with UInt32, UInt32, UInt32
Variable clamp_UInt32_val;
Variable clamp_UInt32_min;
Variable clamp_UInt32_max;
Function clamp_UInt32;
inline constexpr std::array clamp_UInt32_args = { &clamp_UInt32_val, &clamp_UInt32_min, &clamp_UInt32_max };

/// clamp with UInt32x2, UInt32x2, UInt32x2
Variable clamp_UInt32x2_val;
Variable clamp_UInt32x2_min;
Variable clamp_UInt32x2_max;
Function clamp_UInt32x2;
inline constexpr std::array clamp_UInt32x2_args = { &clamp_UInt32x2_val, &clamp_UInt32x2_min, &clamp_UInt32x2_max };

/// clamp with UInt32x3, UInt32x3, UInt32x3
Variable clamp_UInt32x3_val;
Variable clamp_UInt32x3_min;
Variable clamp_UInt32x3_max;
Function clamp_UInt32x3;
inline constexpr std::array clamp_UInt32x3_args = { &clamp_UInt32x3_val, &clamp_UInt32x3_min, &clamp_UInt32x3_max };

/// clamp with UInt32x4, UInt32x4, UInt32x4
Variable clamp_UInt32x4_val;
Variable clamp_UInt32x4_min;
Variable clamp_UInt32x4_max;
Function clamp_UInt32x4;
inline constexpr std::array clamp_UInt32x4_args = { &clamp_UInt32x4_val, &clamp_UInt32x4_min, &clamp_UInt32x4_max };

/// clamp with UInt16, UInt16, UInt16
Variable clamp_UInt16_val;
Variable clamp_UInt16_min;
Variable clamp_UInt16_max;
Function clamp_UInt16;
inline constexpr std::array clamp_UInt16_args = { &clamp_UInt16_val, &clamp_UInt16_min, &clamp_UInt16_max };

/// clamp with UInt16x2, UInt16x2, UInt16x2
Variable clamp_UInt16x2_val;
Variable clamp_UInt16x2_min;
Variable clamp_UInt16x2_max;
Function clamp_UInt16x2;
inline constexpr std::array clamp_UInt16x2_args = { &clamp_UInt16x2_val, &clamp_UInt16x2_min, &clamp_UInt16x2_max };

/// clamp with UInt16x3, UInt16x3, UInt16x3
Variable clamp_UInt16x3_val;
Variable clamp_UInt16x3_min;
Variable clamp_UInt16x3_max;
Function clamp_UInt16x3;
inline constexpr std::array clamp_UInt16x3_args = { &clamp_UInt16x3_val, &clamp_UInt16x3_min, &clamp_UInt16x3_max };

/// clamp with UInt16x4, UInt16x4, UInt16x4
Variable clamp_UInt16x4_val;
Variable clamp_UInt16x4_min;
Variable clamp_UInt16x4_max;
Function clamp_UInt16x4;
inline constexpr std::array clamp_UInt16x4_args = { &clamp_UInt16x4_val, &clamp_UInt16x4_min, &clamp_UInt16x4_max };

/// lerp with Float32, Float32, Float32
Variable lerp_Float32_a;
Variable lerp_Float32_b;
Variable lerp_Float32_t;
Function lerp_Float32;
inline constexpr std::array lerp_Float32_args = { &lerp_Float32_a, &lerp_Float32_b, &lerp_Float32_t };

/// lerp with Float32x2, Float32x2, Float32x2
Variable lerp_Float32x2_a;
Variable lerp_Float32x2_b;
Variable lerp_Float32x2_t;
Function lerp_Float32x2;
inline constexpr std::array lerp_Float32x2_args = { &lerp_Float32x2_a, &lerp_Float32x2_b, &lerp_Float32x2_t };

/// lerp with Float32x3, Float32x3, Float32x3
Variable lerp_Float32x3_a;
Variable lerp_Float32x3_b;
Variable lerp_Float32x3_t;
Function lerp_Float32x3;
inline constexpr std::array lerp_Float32x3_args = { &lerp_Float32x3_a, &lerp_Float32x3_b, &lerp_Float32x3_t };

/// lerp with Float32x4, Float32x4, Float32x4
Variable lerp_Float32x4_a;
Variable lerp_Float32x4_b;
Variable lerp_Float32x4_t;
Function lerp_Float32x4;
inline constexpr std::array lerp_Float32x4_args = { &lerp_Float32x4_a, &lerp_Float32x4_b, &lerp_Float32x4_t };

/// lerp with Float16, Float16, Float16
Variable lerp_Float16_a;
Variable lerp_Float16_b;
Variable lerp_Float16_t;
Function lerp_Float16;
inline constexpr std::array lerp_Float16_args = { &lerp_Float16_a, &lerp_Float16_b, &lerp_Float16_t };

/// lerp with Float16x2, Float16x2, Float16x2
Variable lerp_Float16x2_a;
Variable lerp_Float16x2_b;
Variable lerp_Float16x2_t;
Function lerp_Float16x2;
inline constexpr std::array lerp_Float16x2_args = { &lerp_Float16x2_a, &lerp_Float16x2_b, &lerp_Float16x2_t };

/// lerp with Float16x3, Float16x3, Float16x3
Variable lerp_Float16x3_a;
Variable lerp_Float16x3_b;
Variable lerp_Float16x3_t;
Function lerp_Float16x3;
inline constexpr std::array lerp_Float16x3_args = { &lerp_Float16x3_a, &lerp_Float16x3_b, &lerp_Float16x3_t };

/// lerp with Float16x4, Float16x4, Float16x4
Variable lerp_Float16x4_a;
Variable lerp_Float16x4_b;
Variable lerp_Float16x4_t;
Function lerp_Float16x4;
inline constexpr std::array lerp_Float16x4_args = { &lerp_Float16x4_a, &lerp_Float16x4_b, &lerp_Float16x4_t };

/// step with Float32, Float32
Variable step_Float32_edge;
Variable step_Float32_x;
Function step_Float32;
inline constexpr std::array step_Float32_args = { &step_Float32_edge, &step_Float32_x };

/// step with Float32x2, Float32x2
Variable step_Float32x2_edge;
Variable step_Float32x2_x;
Function step_Float32x2;
inline constexpr std::array step_Float32x2_args = { &step_Float32x2_edge, &step_Float32x2_x };

/// step with Float32x3, Float32x3
Variable step_Float32x3_edge;
Variable step_Float32x3_x;
Function step_Float32x3;
inline constexpr std::array step_Float32x3_args = { &step_Float32x3_edge, &step_Float32x3_x };

/// step with Float32x4, Float32x4
Variable step_Float32x4_edge;
Variable step_Float32x4_x;
Function step_Float32x4;
inline constexpr std::array step_Float32x4_args = { &step_Float32x4_edge, &step_Float32x4_x };

/// step with Float16, Float16
Variable step_Float16_edge;
Variable step_Float16_x;
Function step_Float16;
inline constexpr std::array step_Float16_args = { &step_Float16_edge, &step_Float16_x };

/// step with Float16x2, Float16x2
Variable step_Float16x2_edge;
Variable step_Float16x2_x;
Function step_Float16x2;
inline constexpr std::array step_Float16x2_args = { &step_Float16x2_edge, &step_Float16x2_x };

/// step with Float16x3, Float16x3
Variable step_Float16x3_edge;
Variable step_Float16x3_x;
Function step_Float16x3;
inline constexpr std::array step_Float16x3_args = { &step_Float16x3_edge, &step_Float16x3_x };

/// step with Float16x4, Float16x4
Variable step_Float16x4_edge;
Variable step_Float16x4_x;
Function step_Float16x4;
inline constexpr std::array step_Float16x4_args = { &step_Float16x4_edge, &step_Float16x4_x };

/// smoothstep with Float32, Float32, Float32
Variable smoothstep_Float32_edge0;
Variable smoothstep_Float32_edge1;
Variable smoothstep_Float32_x;
Function smoothstep_Float32;
inline constexpr std::array smoothstep_Float32_args = { &smoothstep_Float32_edge0, &smoothstep_Float32_edge1, &smoothstep_Float32_x };

/// smoothstep with Float32x2, Float32x2, Float32x2
Variable smoothstep_Float32x2_edge0;
Variable smoothstep_Float32x2_edge1;
Variable smoothstep_Float32x2_x;
Function smoothstep_Float32x2;
inline constexpr std::array smoothstep_Float32x2_args = { &smoothstep_Float32x2_edge0, &smoothstep_Float32x2_edge1, &smoothstep_Float32x2_x };

/// smoothstep with Float32x3, Float32x3, Float32x3
Variable smoothstep_Float32x3_edge0;
Variable smoothstep_Float32x3_edge1;
Variable smoothstep_Float32x3_x;
Function smoothstep_Float32x3;
inline constexpr std::array smoothstep_Float32x3_args = { &smoothstep_Float32x3_edge0, &smoothstep_Float32x3_edge1, &smoothstep_Float32x3_x };

/// smoothstep with Float32x4, Float32x4, Float32x4
Variable smoothstep_Float32x4_edge0;
Variable smoothstep_Float32x4_edge1;
Variable smoothstep_Float32x4_x;
Function smoothstep_Float32x4;
inline constexpr std::array smoothstep_Float32x4_args = { &smoothstep_Float32x4_edge0, &smoothstep_Float32x4_edge1, &smoothstep_Float32x4_x };

/// smoothstep with Float16, Float16, Float16
Variable smoothstep_Float16_edge0;
Variable smoothstep_Float16_edge1;
Variable smoothstep_Float16_x;
Function smoothstep_Float16;
inline constexpr std::array smoothstep_Float16_args = { &smoothstep_Float16_edge0, &smoothstep_Float16_edge1, &smoothstep_Float16_x };

/// smoothstep with Float16x2, Float16x2, Float16x2
Variable smoothstep_Float16x2_edge0;
Variable smoothstep_Float16x2_edge1;
Variable smoothstep_Float16x2_x;
Function smoothstep_Float16x2;
inline constexpr std::array smoothstep_Float16x2_args = { &smoothstep_Float16x2_edge0, &smoothstep_Float16x2_edge1, &smoothstep_Float16x2_x };

/// smoothstep with Float16x3, Float16x3, Float16x3
Variable smoothstep_Float16x3_edge0;
Variable smoothstep_Float16x3_edge1;
Variable smoothstep_Float16x3_x;
Function smoothstep_Float16x3;
inline constexpr std::array smoothstep_Float16x3_args = { &smoothstep_Float16x3_edge0, &smoothstep_Float16x3_edge1, &smoothstep_Float16x3_x };

/// smoothstep with Float16x4, Float16x4, Float16x4
Variable smoothstep_Float16x4_edge0;
Variable smoothstep_Float16x4_edge1;
Variable smoothstep_Float16x4_x;
Function smoothstep_Float16x4;
inline constexpr std::array smoothstep_Float16x4_args = { &smoothstep_Float16x4_edge0, &smoothstep_Float16x4_edge1, &smoothstep_Float16x4_x };

/// ceil with Float32
Variable ceil_Float32_arg;
Function ceil_Float32;
inline constexpr std::array ceil_Float32_args = { &ceil_Float32_arg };

/// ceil with Float32x2
Variable ceil_Float32x2_arg;
Function ceil_Float32x2;
inline constexpr std::array ceil_Float32x2_args = { &ceil_Float32x2_arg };

/// ceil with Float32x3
Variable ceil_Float32x3_arg;
Function ceil_Float32x3;
inline constexpr std::array ceil_Float32x3_args = { &ceil_Float32x3_arg };

/// ceil with Float32x4
Variable ceil_Float32x4_arg;
Function ceil_Float32x4;
inline constexpr std::array ceil_Float32x4_args = { &ceil_Float32x4_arg };

/// ceil with Float16
Variable ceil_Float16_arg;
Function ceil_Float16;
inline constexpr std::array ceil_Float16_args = { &ceil_Float16_arg };

/// ceil with Float16x2
Variable ceil_Float16x2_arg;
Function ceil_Float16x2;
inline constexpr std::array ceil_Float16x2_args = { &ceil_Float16x2_arg };

/// ceil with Float16x3
Variable ceil_Float16x3_arg;
Function ceil_Float16x3;
inline constexpr std::array ceil_Float16x3_args = { &ceil_Float16x3_arg };

/// ceil with Float16x4
Variable ceil_Float16x4_arg;
Function ceil_Float16x4;
inline constexpr std::array ceil_Float16x4_args = { &ceil_Float16x4_arg };

/// floor with Float32
Variable floor_Float32_arg;
Function floor_Float32;
inline constexpr std::array floor_Float32_args = { &floor_Float32_arg };

/// floor with Float32x2
Variable floor_Float32x2_arg;
Function floor_Float32x2;
inline constexpr std::array floor_Float32x2_args = { &floor_Float32x2_arg };

/// floor with Float32x3
Variable floor_Float32x3_arg;
Function floor_Float32x3;
inline constexpr std::array floor_Float32x3_args = { &floor_Float32x3_arg };

/// floor with Float32x4
Variable floor_Float32x4_arg;
Function floor_Float32x4;
inline constexpr std::array floor_Float32x4_args = { &floor_Float32x4_arg };

/// floor with Float16
Variable floor_Float16_arg;
Function floor_Float16;
inline constexpr std::array floor_Float16_args = { &floor_Float16_arg };

/// floor with Float16x2
Variable floor_Float16x2_arg;
Function floor_Float16x2;
inline constexpr std::array floor_Float16x2_args = { &floor_Float16x2_arg };

/// floor with Float16x3
Variable floor_Float16x3_arg;
Function floor_Float16x3;
inline constexpr std::array floor_Float16x3_args = { &floor_Float16x3_arg };

/// floor with Float16x4
Variable floor_Float16x4_arg;
Function floor_Float16x4;
inline constexpr std::array floor_Float16x4_args = { &floor_Float16x4_arg };

/// fract with Float32
Variable fract_Float32_arg;
Function fract_Float32;
inline constexpr std::array fract_Float32_args = { &fract_Float32_arg };

/// fract with Float32x2
Variable fract_Float32x2_arg;
Function fract_Float32x2;
inline constexpr std::array fract_Float32x2_args = { &fract_Float32x2_arg };

/// fract with Float32x3
Variable fract_Float32x3_arg;
Function fract_Float32x3;
inline constexpr std::array fract_Float32x3_args = { &fract_Float32x3_arg };

/// fract with Float32x4
Variable fract_Float32x4_arg;
Function fract_Float32x4;
inline constexpr std::array fract_Float32x4_args = { &fract_Float32x4_arg };

/// fract with Float16
Variable fract_Float16_arg;
Function fract_Float16;
inline constexpr std::array fract_Float16_args = { &fract_Float16_arg };

/// fract with Float16x2
Variable fract_Float16x2_arg;
Function fract_Float16x2;
inline constexpr std::array fract_Float16x2_args = { &fract_Float16x2_arg };

/// fract with Float16x3
Variable fract_Float16x3_arg;
Function fract_Float16x3;
inline constexpr std::array fract_Float16x3_args = { &fract_Float16x3_arg };

/// fract with Float16x4
Variable fract_Float16x4_arg;
Function fract_Float16x4;
inline constexpr std::array fract_Float16x4_args = { &fract_Float16x4_arg };

/// saturate with Float32
Variable saturate_Float32_arg;
Function saturate_Float32;
inline constexpr std::array saturate_Float32_args = { &saturate_Float32_arg };

/// saturate with Float32x2
Variable saturate_Float32x2_arg;
Function saturate_Float32x2;
inline constexpr std::array saturate_Float32x2_args = { &saturate_Float32x2_arg };

/// saturate with Float32x3
Variable saturate_Float32x3_arg;
Function saturate_Float32x3;
inline constexpr std::array saturate_Float32x3_args = { &saturate_Float32x3_arg };

/// saturate with Float32x4
Variable saturate_Float32x4_arg;
Function saturate_Float32x4;
inline constexpr std::array saturate_Float32x4_args = { &saturate_Float32x4_arg };

/// saturate with Float16
Variable saturate_Float16_arg;
Function saturate_Float16;
inline constexpr std::array saturate_Float16_args = { &saturate_Float16_arg };

/// saturate with Float16x2
Variable saturate_Float16x2_arg;
Function saturate_Float16x2;
inline constexpr std::array saturate_Float16x2_args = { &saturate_Float16x2_arg };

/// saturate with Float16x3
Variable saturate_Float16x3_arg;
Function saturate_Float16x3;
inline constexpr std::array saturate_Float16x3_args = { &saturate_Float16x3_arg };

/// saturate with Float16x4
Variable saturate_Float16x4_arg;
Function saturate_Float16x4;
inline constexpr std::array saturate_Float16x4_args = { &saturate_Float16x4_arg };

/// trunc with Float32
Variable trunc_Float32_arg;
Function trunc_Float32;
inline constexpr std::array trunc_Float32_args = { &trunc_Float32_arg };

/// trunc with Float32x2
Variable trunc_Float32x2_arg;
Function trunc_Float32x2;
inline constexpr std::array trunc_Float32x2_args = { &trunc_Float32x2_arg };

/// trunc with Float32x3
Variable trunc_Float32x3_arg;
Function trunc_Float32x3;
inline constexpr std::array trunc_Float32x3_args = { &trunc_Float32x3_arg };

/// trunc with Float32x4
Variable trunc_Float32x4_arg;
Function trunc_Float32x4;
inline constexpr std::array trunc_Float32x4_args = { &trunc_Float32x4_arg };

/// trunc with Float16
Variable trunc_Float16_arg;
Function trunc_Float16;
inline constexpr std::array trunc_Float16_args = { &trunc_Float16_arg };

/// trunc with Float16x2
Variable trunc_Float16x2_arg;
Function trunc_Float16x2;
inline constexpr std::array trunc_Float16x2_args = { &trunc_Float16x2_arg };

/// trunc with Float16x3
Variable trunc_Float16x3_arg;
Function trunc_Float16x3;
inline constexpr std::array trunc_Float16x3_args = { &trunc_Float16x3_arg };

/// trunc with Float16x4
Variable trunc_Float16x4_arg;
Function trunc_Float16x4;
inline constexpr std::array trunc_Float16x4_args = { &trunc_Float16x4_arg };

/// ddx with Float32
Variable ddx_Float32_arg;
Function ddx_Float32;
inline constexpr std::array ddx_Float32_args = { &ddx_Float32_arg };

/// ddx with Float32x2
Variable ddx_Float32x2_arg;
Function ddx_Float32x2;
inline constexpr std::array ddx_Float32x2_args = { &ddx_Float32x2_arg };

/// ddx with Float32x3
Variable ddx_Float32x3_arg;
Function ddx_Float32x3;
inline constexpr std::array ddx_Float32x3_args = { &ddx_Float32x3_arg };

/// ddx with Float32x4
Variable ddx_Float32x4_arg;
Function ddx_Float32x4;
inline constexpr std::array ddx_Float32x4_args = { &ddx_Float32x4_arg };

/// ddx with Float16
Variable ddx_Float16_arg;
Function ddx_Float16;
inline constexpr std::array ddx_Float16_args = { &ddx_Float16_arg };

/// ddx with Float16x2
Variable ddx_Float16x2_arg;
Function ddx_Float16x2;
inline constexpr std::array ddx_Float16x2_args = { &ddx_Float16x2_arg };

/// ddx with Float16x3
Variable ddx_Float16x3_arg;
Function ddx_Float16x3;
inline constexpr std::array ddx_Float16x3_args = { &ddx_Float16x3_arg };

/// ddx with Float16x4
Variable ddx_Float16x4_arg;
Function ddx_Float16x4;
inline constexpr std::array ddx_Float16x4_args = { &ddx_Float16x4_arg };

/// ddy with Float32
Variable ddy_Float32_arg;
Function ddy_Float32;
inline constexpr std::array ddy_Float32_args = { &ddy_Float32_arg };

/// ddy with Float32x2
Variable ddy_Float32x2_arg;
Function ddy_Float32x2;
inline constexpr std::array ddy_Float32x2_args = { &ddy_Float32x2_arg };

/// ddy with Float32x3
Variable ddy_Float32x3_arg;
Function ddy_Float32x3;
inline constexpr std::array ddy_Float32x3_args = { &ddy_Float32x3_arg };

/// ddy with Float32x4
Variable ddy_Float32x4_arg;
Function ddy_Float32x4;
inline constexpr std::array ddy_Float32x4_args = { &ddy_Float32x4_arg };

/// ddy with Float16
Variable ddy_Float16_arg;
Function ddy_Float16;
inline constexpr std::array ddy_Float16_args = { &ddy_Float16_arg };

/// ddy with Float16x2
Variable ddy_Float16x2_arg;
Function ddy_Float16x2;
inline constexpr std::array ddy_Float16x2_args = { &ddy_Float16x2_arg };

/// ddy with Float16x3
Variable ddy_Float16x3_arg;
Function ddy_Float16x3;
inline constexpr std::array ddy_Float16x3_args = { &ddy_Float16x3_arg };

/// ddy with Float16x4
Variable ddy_Float16x4_arg;
Function ddy_Float16x4;
inline constexpr std::array ddy_Float16x4_args = { &ddy_Float16x4_arg };

/// fwidth with Float32
Variable fwidth_Float32_arg;
Function fwidth_Float32;
inline constexpr std::array fwidth_Float32_args = { &fwidth_Float32_arg };

/// fwidth with Float32x2
Variable fwidth_Float32x2_arg;
Function fwidth_Float32x2;
inline constexpr std::array fwidth_Float32x2_args = { &fwidth_Float32x2_arg };

/// fwidth with Float32x3
Variable fwidth_Float32x3_arg;
Function fwidth_Float32x3;
inline constexpr std::array fwidth_Float32x3_args = { &fwidth_Float32x3_arg };

/// fwidth with Float32x4
Variable fwidth_Float32x4_arg;
Function fwidth_Float32x4;
inline constexpr std::array fwidth_Float32x4_args = { &fwidth_Float32x4_arg };

/// fwidth with Float16
Variable fwidth_Float16_arg;
Function fwidth_Float16;
inline constexpr std::array fwidth_Float16_args = { &fwidth_Float16_arg };

/// fwidth with Float16x2
Variable fwidth_Float16x2_arg;
Function fwidth_Float16x2;
inline constexpr std::array fwidth_Float16x2_args = { &fwidth_Float16x2_arg };

/// fwidth with Float16x3
Variable fwidth_Float16x3_arg;
Function fwidth_Float16x3;
inline constexpr std::array fwidth_Float16x3_args = { &fwidth_Float16x3_arg };

/// fwidth with Float16x4
Variable fwidth_Float16x4_arg;
Function fwidth_Float16x4;
inline constexpr std::array fwidth_Float16x4_args = { &fwidth_Float16x4_arg };

/// sign with Int32
Variable sign_Int32_arg;
Function sign_Int32;
inline constexpr std::array sign_Int32_args = { &sign_Int32_arg };

/// sign with Int32x2
Variable sign_Int32x2_arg;
Function sign_Int32x2;
inline constexpr std::array sign_Int32x2_args = { &sign_Int32x2_arg };

/// sign with Int32x3
Variable sign_Int32x3_arg;
Function sign_Int32x3;
inline constexpr std::array sign_Int32x3_args = { &sign_Int32x3_arg };

/// sign with Int32x4
Variable sign_Int32x4_arg;
Function sign_Int32x4;
inline constexpr std::array sign_Int32x4_args = { &sign_Int32x4_arg };

/// sign with Int16
Variable sign_Int16_arg;
Function sign_Int16;
inline constexpr std::array sign_Int16_args = { &sign_Int16_arg };

/// sign with Int16x2
Variable sign_Int16x2_arg;
Function sign_Int16x2;
inline constexpr std::array sign_Int16x2_args = { &sign_Int16x2_arg };

/// sign with Int16x3
Variable sign_Int16x3_arg;
Function sign_Int16x3;
inline constexpr std::array sign_Int16x3_args = { &sign_Int16x3_arg };

/// sign with Int16x4
Variable sign_Int16x4_arg;
Function sign_Int16x4;
inline constexpr std::array sign_Int16x4_args = { &sign_Int16x4_arg };

/// sign with Float32
Variable sign_Float32_arg;
Function sign_Float32;
inline constexpr std::array sign_Float32_args = { &sign_Float32_arg };

/// sign with Float32x2
Variable sign_Float32x2_arg;
Function sign_Float32x2;
inline constexpr std::array sign_Float32x2_args = { &sign_Float32x2_arg };

/// sign with Float32x3
Variable sign_Float32x3_arg;
Function sign_Float32x3;
inline constexpr std::array sign_Float32x3_args = { &sign_Float32x3_arg };

/// sign with Float32x4
Variable sign_Float32x4_arg;
Function sign_Float32x4;
inline constexpr std::array sign_Float32x4_args = { &sign_Float32x4_arg };

/// sign with Float16
Variable sign_Float16_arg;
Function sign_Float16;
inline constexpr std::array sign_Float16_args = { &sign_Float16_arg };

/// sign with Float16x2
Variable sign_Float16x2_arg;
Function sign_Float16x2;
inline constexpr std::array sign_Float16x2_args = { &sign_Float16x2_arg };

/// sign with Float16x3
Variable sign_Float16x3_arg;
Function sign_Float16x3;
inline constexpr std::array sign_Float16x3_args = { &sign_Float16x3_arg };

/// sign with Float16x4
Variable sign_Float16x4_arg;
Function sign_Float16x4;
inline constexpr std::array sign_Float16x4_args = { &sign_Float16x4_arg };

/// abs with Int32
Variable abs_Int32_arg;
Function abs_Int32;
inline constexpr std::array abs_Int32_args = { &abs_Int32_arg };

/// abs with Int32x2
Variable abs_Int32x2_arg;
Function abs_Int32x2;
inline constexpr std::array abs_Int32x2_args = { &abs_Int32x2_arg };

/// abs with Int32x3
Variable abs_Int32x3_arg;
Function abs_Int32x3;
inline constexpr std::array abs_Int32x3_args = { &abs_Int32x3_arg };

/// abs with Int32x4
Variable abs_Int32x4_arg;
Function abs_Int32x4;
inline constexpr std::array abs_Int32x4_args = { &abs_Int32x4_arg };

/// abs with Int16
Variable abs_Int16_arg;
Function abs_Int16;
inline constexpr std::array abs_Int16_args = { &abs_Int16_arg };

/// abs with Int16x2
Variable abs_Int16x2_arg;
Function abs_Int16x2;
inline constexpr std::array abs_Int16x2_args = { &abs_Int16x2_arg };

/// abs with Int16x3
Variable abs_Int16x3_arg;
Function abs_Int16x3;
inline constexpr std::array abs_Int16x3_args = { &abs_Int16x3_arg };

/// abs with Int16x4
Variable abs_Int16x4_arg;
Function abs_Int16x4;
inline constexpr std::array abs_Int16x4_args = { &abs_Int16x4_arg };

/// abs with Float32
Variable abs_Float32_arg;
Function abs_Float32;
inline constexpr std::array abs_Float32_args = { &abs_Float32_arg };

/// abs with Float32x2
Variable abs_Float32x2_arg;
Function abs_Float32x2;
inline constexpr std::array abs_Float32x2_args = { &abs_Float32x2_arg };

/// abs with Float32x3
Variable abs_Float32x3_arg;
Function abs_Float32x3;
inline constexpr std::array abs_Float32x3_args = { &abs_Float32x3_arg };

/// abs with Float32x4
Variable abs_Float32x4_arg;
Function abs_Float32x4;
inline constexpr std::array abs_Float32x4_args = { &abs_Float32x4_arg };

/// abs with Float16
Variable abs_Float16_arg;
Function abs_Float16;
inline constexpr std::array abs_Float16_args = { &abs_Float16_arg };

/// abs with Float16x2
Variable abs_Float16x2_arg;
Function abs_Float16x2;
inline constexpr std::array abs_Float16x2_args = { &abs_Float16x2_arg };

/// abs with Float16x3
Variable abs_Float16x3_arg;
Function abs_Float16x3;
inline constexpr std::array abs_Float16x3_args = { &abs_Float16x3_arg };

/// abs with Float16x4
Variable abs_Float16x4_arg;
Function abs_Float16x4;
inline constexpr std::array abs_Float16x4_args = { &abs_Float16x4_arg };

/// castToF16 with UInt16
Variable castToF16_UInt16_arg;
Function castToF16_UInt16;
inline constexpr std::array castToF16_UInt16_args = { &castToF16_UInt16_arg };

/// castToF16 with Int16
Variable castToF16_Int16_arg;
Function castToF16_Int16;
inline constexpr std::array castToF16_Int16_args = { &castToF16_Int16_arg };

/// castToU16 with Float16
Variable castToU16_Float16_arg;
Function castToU16_Float16;
inline constexpr std::array castToU16_Float16_args = { &castToU16_Float16_arg };

/// castToU16 with Int16
Variable castToU16_Int16_arg;
Function castToU16_Int16;
inline constexpr std::array castToU16_Int16_args = { &castToU16_Int16_arg };

/// castToI16 with Float16
Variable castToI16_Float16_arg;
Function castToI16_Float16;
inline constexpr std::array castToI16_Float16_args = { &castToI16_Float16_arg };

/// castToI16 with UInt16
Variable castToI16_UInt16_arg;
Function castToI16_UInt16;
inline constexpr std::array castToI16_UInt16_args = { &castToI16_UInt16_arg };

/// castToF32 with UInt32
Variable castToF32_UInt32_arg;
Function castToF32_UInt32;
inline constexpr std::array castToF32_UInt32_args = { &castToF32_UInt32_arg };

/// castToF32 with Int32
Variable castToF32_Int32_arg;
Function castToF32_Int32;
inline constexpr std::array castToF32_Int32_args = { &castToF32_Int32_arg };

/// castToU32 with Float32
Variable castToU32_Float32_arg;
Function castToU32_Float32;
inline constexpr std::array castToU32_Float32_args = { &castToU32_Float32_arg };

/// castToU32 with Int32
Variable castToU32_Int32_arg;
Function castToU32_Int32;
inline constexpr std::array castToU32_Int32_args = { &castToU32_Int32_arg };

/// castToI32 with Float32
Variable castToI32_Float32_arg;
Function castToI32_Float32;
inline constexpr std::array castToI32_Float32_args = { &castToI32_Float32_arg };

/// castToI32 with UInt32
Variable castToI32_UInt32_arg;
Function castToI32_UInt32;
inline constexpr std::array castToI32_UInt32_args = { &castToI32_UInt32_arg };

/// any with Bool8
Variable any_Bool8_arg;
Function any_Bool8;
inline constexpr std::array any_Bool8_args = { &any_Bool8_arg };

/// any with Bool8x2
Variable any_Bool8x2_arg;
Function any_Bool8x2;
inline constexpr std::array any_Bool8x2_args = { &any_Bool8x2_arg };

/// any with Bool8x3
Variable any_Bool8x3_arg;
Function any_Bool8x3;
inline constexpr std::array any_Bool8x3_args = { &any_Bool8x3_arg };

/// any with Bool8x4
Variable any_Bool8x4_arg;
Function any_Bool8x4;
inline constexpr std::array any_Bool8x4_args = { &any_Bool8x4_arg };

/// all with Bool8
Variable all_Bool8_arg;
Function all_Bool8;
inline constexpr std::array all_Bool8_args = { &all_Bool8_arg };

/// all with Bool8x2
Variable all_Bool8x2_arg;
Function all_Bool8x2;
inline constexpr std::array all_Bool8x2_args = { &all_Bool8x2_arg };

/// all with Bool8x3
Variable all_Bool8x3_arg;
Function all_Bool8x3;
inline constexpr std::array all_Bool8x3_args = { &all_Bool8x3_arg };

/// all with Bool8x4
Variable all_Bool8x4_arg;
Function all_Bool8x4;
inline constexpr std::array all_Bool8x4_args = { &all_Bool8x4_arg };

/// transpose with Float32x2x2
Variable transpose_Float32x2x2_arg;
Function transpose_Float32x2x2;
inline constexpr std::array transpose_Float32x2x2_args = { &transpose_Float32x2x2_arg };

/// transpose with Float16x2x2
Variable transpose_Float16x2x2_arg;
Function transpose_Float16x2x2;
inline constexpr std::array transpose_Float16x2x2_args = { &transpose_Float16x2x2_arg };

/// transpose with Float32x2x3
Variable transpose_Float32x2x3_arg;
Function transpose_Float32x2x3;
inline constexpr std::array transpose_Float32x2x3_args = { &transpose_Float32x2x3_arg };

/// transpose with Float16x2x3
Variable transpose_Float16x2x3_arg;
Function transpose_Float16x2x3;
inline constexpr std::array transpose_Float16x2x3_args = { &transpose_Float16x2x3_arg };

/// transpose with Float32x2x4
Variable transpose_Float32x2x4_arg;
Function transpose_Float32x2x4;
inline constexpr std::array transpose_Float32x2x4_args = { &transpose_Float32x2x4_arg };

/// transpose with Float16x2x4
Variable transpose_Float16x2x4_arg;
Function transpose_Float16x2x4;
inline constexpr std::array transpose_Float16x2x4_args = { &transpose_Float16x2x4_arg };

/// transpose with Float32x3x2
Variable transpose_Float32x3x2_arg;
Function transpose_Float32x3x2;
inline constexpr std::array transpose_Float32x3x2_args = { &transpose_Float32x3x2_arg };

/// transpose with Float16x3x2
Variable transpose_Float16x3x2_arg;
Function transpose_Float16x3x2;
inline constexpr std::array transpose_Float16x3x2_args = { &transpose_Float16x3x2_arg };

/// transpose with Float32x3x3
Variable transpose_Float32x3x3_arg;
Function transpose_Float32x3x3;
inline constexpr std::array transpose_Float32x3x3_args = { &transpose_Float32x3x3_arg };

/// transpose with Float16x3x3
Variable transpose_Float16x3x3_arg;
Function transpose_Float16x3x3;
inline constexpr std::array transpose_Float16x3x3_args = { &transpose_Float16x3x3_arg };

/// transpose with Float32x3x4
Variable transpose_Float32x3x4_arg;
Function transpose_Float32x3x4;
inline constexpr std::array transpose_Float32x3x4_args = { &transpose_Float32x3x4_arg };

/// transpose with Float16x3x4
Variable transpose_Float16x3x4_arg;
Function transpose_Float16x3x4;
inline constexpr std::array transpose_Float16x3x4_args = { &transpose_Float16x3x4_arg };

/// transpose with Float32x4x2
Variable transpose_Float32x4x2_arg;
Function transpose_Float32x4x2;
inline constexpr std::array transpose_Float32x4x2_args = { &transpose_Float32x4x2_arg };

/// transpose with Float16x4x2
Variable transpose_Float16x4x2_arg;
Function transpose_Float16x4x2;
inline constexpr std::array transpose_Float16x4x2_args = { &transpose_Float16x4x2_arg };

/// transpose with Float32x4x3
Variable transpose_Float32x4x3_arg;
Function transpose_Float32x4x3;
inline constexpr std::array transpose_Float32x4x3_args = { &transpose_Float32x4x3_arg };

/// transpose with Float16x4x3
Variable transpose_Float16x4x3_arg;
Function transpose_Float16x4x3;
inline constexpr std::array transpose_Float16x4x3_args = { &transpose_Float16x4x3_arg };

/// transpose with Float32x4x4
Variable transpose_Float32x4x4_arg;
Function transpose_Float32x4x4;
inline constexpr std::array transpose_Float32x4x4_args = { &transpose_Float32x4x4_arg };

/// transpose with Float16x4x4
Variable transpose_Float16x4x4_arg;
Function transpose_Float16x4x4;
inline constexpr std::array transpose_Float16x4x4_args = { &transpose_Float16x4x4_arg };

/// inverse with Float32x2x2
Variable inverse_Float32x2x2_arg;
Function inverse_Float32x2x2;
inline constexpr std::array inverse_Float32x2x2_args = { &inverse_Float32x2x2_arg };

/// inverse with Float16x2x2
Variable inverse_Float16x2x2_arg;
Function inverse_Float16x2x2;
inline constexpr std::array inverse_Float16x2x2_args = { &inverse_Float16x2x2_arg };

/// inverse with Float32x2x3
Variable inverse_Float32x2x3_arg;
Function inverse_Float32x2x3;
inline constexpr std::array inverse_Float32x2x3_args = { &inverse_Float32x2x3_arg };

/// inverse with Float16x2x3
Variable inverse_Float16x2x3_arg;
Function inverse_Float16x2x3;
inline constexpr std::array inverse_Float16x2x3_args = { &inverse_Float16x2x3_arg };

/// inverse with Float32x2x4
Variable inverse_Float32x2x4_arg;
Function inverse_Float32x2x4;
inline constexpr std::array inverse_Float32x2x4_args = { &inverse_Float32x2x4_arg };

/// inverse with Float16x2x4
Variable inverse_Float16x2x4_arg;
Function inverse_Float16x2x4;
inline constexpr std::array inverse_Float16x2x4_args = { &inverse_Float16x2x4_arg };

/// inverse with Float32x3x2
Variable inverse_Float32x3x2_arg;
Function inverse_Float32x3x2;
inline constexpr std::array inverse_Float32x3x2_args = { &inverse_Float32x3x2_arg };

/// inverse with Float16x3x2
Variable inverse_Float16x3x2_arg;
Function inverse_Float16x3x2;
inline constexpr std::array inverse_Float16x3x2_args = { &inverse_Float16x3x2_arg };

/// inverse with Float32x3x3
Variable inverse_Float32x3x3_arg;
Function inverse_Float32x3x3;
inline constexpr std::array inverse_Float32x3x3_args = { &inverse_Float32x3x3_arg };

/// inverse with Float16x3x3
Variable inverse_Float16x3x3_arg;
Function inverse_Float16x3x3;
inline constexpr std::array inverse_Float16x3x3_args = { &inverse_Float16x3x3_arg };

/// inverse with Float32x3x4
Variable inverse_Float32x3x4_arg;
Function inverse_Float32x3x4;
inline constexpr std::array inverse_Float32x3x4_args = { &inverse_Float32x3x4_arg };

/// inverse with Float16x3x4
Variable inverse_Float16x3x4_arg;
Function inverse_Float16x3x4;
inline constexpr std::array inverse_Float16x3x4_args = { &inverse_Float16x3x4_arg };

/// inverse with Float32x4x2
Variable inverse_Float32x4x2_arg;
Function inverse_Float32x4x2;
inline constexpr std::array inverse_Float32x4x2_args = { &inverse_Float32x4x2_arg };

/// inverse with Float16x4x2
Variable inverse_Float16x4x2_arg;
Function inverse_Float16x4x2;
inline constexpr std::array inverse_Float16x4x2_args = { &inverse_Float16x4x2_arg };

/// inverse with Float32x4x3
Variable inverse_Float32x4x3_arg;
Function inverse_Float32x4x3;
inline constexpr std::array inverse_Float32x4x3_args = { &inverse_Float32x4x3_arg };

/// inverse with Float16x4x3
Variable inverse_Float16x4x3_arg;
Function inverse_Float16x4x3;
inline constexpr std::array inverse_Float16x4x3_args = { &inverse_Float16x4x3_arg };

/// inverse with Float32x4x4
Variable inverse_Float32x4x4_arg;
Function inverse_Float32x4x4;
inline constexpr std::array inverse_Float32x4x4_args = { &inverse_Float32x4x4_arg };

/// inverse with Float16x4x4
Variable inverse_Float16x4x4_arg;
Function inverse_Float16x4x4;
inline constexpr std::array inverse_Float16x4x4_args = { &inverse_Float16x4x4_arg };

/// vertexGetOutputLayer
Function VertexGetOutputLayer;

/// vertexGetOutputViewport
Function VertexGetOutputViewport;

/// vertexGetIndex
Function VertexGetIndex;

/// vertexGetInstanceIndex
Function VertexGetInstanceIndex;

/// vertexGetBaseIndex
Function VertexGetBaseIndex;

/// vertexGetBaseInstanceIndex
Function VertexGetBaseInstanceIndex;

/// vertexGetDrawIndex
Function VertexGetDrawIndex;

/// vertexSetOutputLayer with UInt16
Variable VertexSetOutputLayer_UInt16_arg;
Function VertexSetOutputLayer_UInt16;
inline constexpr std::array VertexSetOutputLayer_UInt16_args = { &VertexSetOutputLayer_UInt16_arg };

/// vertexSetOutputLayer with UInt32
Variable VertexSetOutputLayer_UInt32_arg;
Function VertexSetOutputLayer_UInt32;
inline constexpr std::array VertexSetOutputLayer_UInt32_args = { &VertexSetOutputLayer_UInt32_arg };

/// vertexSetOutputViewport with UInt16
Variable VertexSetOutputViewport_UInt16_arg;
Function VertexSetOutputViewport_UInt16;
inline constexpr std::array VertexSetOutputViewport_UInt16_args = { &VertexSetOutputViewport_UInt16_arg };

/// vertexSetOutputViewport with UInt32
Variable VertexSetOutputViewport_UInt32_arg;
Function VertexSetOutputViewport_UInt32;
inline constexpr std::array VertexSetOutputViewport_UInt32_args = { &VertexSetOutputViewport_UInt32_arg };

/// vertexExportCoordinates with Float32x4
Variable VertexExportCoordinates_Float32x4_arg;
Function VertexExportCoordinates_Float32x4;
inline constexpr std::array VertexExportCoordinates_Float32x4_args = { &VertexExportCoordinates_Float32x4_arg };

/// vertexExportCoordinates with Float16x4
Variable VertexExportCoordinates_Float16x4_arg;
Function VertexExportCoordinates_Float16x4;
inline constexpr std::array VertexExportCoordinates_Float16x4_args = { &VertexExportCoordinates_Float16x4_arg };

/// geometryExportVertex
Function GeometryExportVertex;

/// geometryExportPrimitive
Function GeometryExportPrimitive;

/// pixelGetCoordinates
Function PixelGetCoordinates_Float32x4;

/// pixelGetCoordinates
Function PixelGetCoordinates_Float16x4;

/// pixelGetDepth
Function PixelGetDepth;

/// pixelSetDepth with Float32
Variable PixelSetDepth_val;
Function PixelSetDepth;
inline constexpr std::array PixelSetDepth_args = { &PixelSetDepth_val };

/// pixelExportColor with Float32, Int32
Variable PixelExportColor_Float32_Int32_color;
Variable PixelExportColor_Float32_Int32_index;
Function PixelExportColor_Float32_Int32;
inline constexpr std::array PixelExportColor_Float32_Int32_args = { &PixelExportColor_Float32_Int32_color, &PixelExportColor_Float32_Int32_index };

/// pixelExportColor with Float32, UInt32
Variable PixelExportColor_Float32_UInt32_color;
Variable PixelExportColor_Float32_UInt32_index;
Function PixelExportColor_Float32_UInt32;
inline constexpr std::array PixelExportColor_Float32_UInt32_args = { &PixelExportColor_Float32_UInt32_color, &PixelExportColor_Float32_UInt32_index };

/// pixelExportColor with Float32, Int16
Variable PixelExportColor_Float32_Int16_color;
Variable PixelExportColor_Float32_Int16_index;
Function PixelExportColor_Float32_Int16;
inline constexpr std::array PixelExportColor_Float32_Int16_args = { &PixelExportColor_Float32_Int16_color, &PixelExportColor_Float32_Int16_index };

/// pixelExportColor with Float32, UInt16
Variable PixelExportColor_Float32_UInt16_color;
Variable PixelExportColor_Float32_UInt16_index;
Function PixelExportColor_Float32_UInt16;
inline constexpr std::array PixelExportColor_Float32_UInt16_args = { &PixelExportColor_Float32_UInt16_color, &PixelExportColor_Float32_UInt16_index };

/// pixelExportColor with Float32x2, Int32
Variable PixelExportColor_Float32x2_Int32_color;
Variable PixelExportColor_Float32x2_Int32_index;
Function PixelExportColor_Float32x2_Int32;
inline constexpr std::array PixelExportColor_Float32x2_Int32_args = { &PixelExportColor_Float32x2_Int32_color, &PixelExportColor_Float32x2_Int32_index };

/// pixelExportColor with Float32x2, UInt32
Variable PixelExportColor_Float32x2_UInt32_color;
Variable PixelExportColor_Float32x2_UInt32_index;
Function PixelExportColor_Float32x2_UInt32;
inline constexpr std::array PixelExportColor_Float32x2_UInt32_args = { &PixelExportColor_Float32x2_UInt32_color, &PixelExportColor_Float32x2_UInt32_index };

/// pixelExportColor with Float32x2, Int16
Variable PixelExportColor_Float32x2_Int16_color;
Variable PixelExportColor_Float32x2_Int16_index;
Function PixelExportColor_Float32x2_Int16;
inline constexpr std::array PixelExportColor_Float32x2_Int16_args = { &PixelExportColor_Float32x2_Int16_color, &PixelExportColor_Float32x2_Int16_index };

/// pixelExportColor with Float32x2, UInt16
Variable PixelExportColor_Float32x2_UInt16_color;
Variable PixelExportColor_Float32x2_UInt16_index;
Function PixelExportColor_Float32x2_UInt16;
inline constexpr std::array PixelExportColor_Float32x2_UInt16_args = { &PixelExportColor_Float32x2_UInt16_color, &PixelExportColor_Float32x2_UInt16_index };

/// pixelExportColor with Float32x3, Int32
Variable PixelExportColor_Float32x3_Int32_color;
Variable PixelExportColor_Float32x3_Int32_index;
Function PixelExportColor_Float32x3_Int32;
inline constexpr std::array PixelExportColor_Float32x3_Int32_args = { &PixelExportColor_Float32x3_Int32_color, &PixelExportColor_Float32x3_Int32_index };

/// pixelExportColor with Float32x3, UInt32
Variable PixelExportColor_Float32x3_UInt32_color;
Variable PixelExportColor_Float32x3_UInt32_index;
Function PixelExportColor_Float32x3_UInt32;
inline constexpr std::array PixelExportColor_Float32x3_UInt32_args = { &PixelExportColor_Float32x3_UInt32_color, &PixelExportColor_Float32x3_UInt32_index };

/// pixelExportColor with Float32x3, Int16
Variable PixelExportColor_Float32x3_Int16_color;
Variable PixelExportColor_Float32x3_Int16_index;
Function PixelExportColor_Float32x3_Int16;
inline constexpr std::array PixelExportColor_Float32x3_Int16_args = { &PixelExportColor_Float32x3_Int16_color, &PixelExportColor_Float32x3_Int16_index };

/// pixelExportColor with Float32x3, UInt16
Variable PixelExportColor_Float32x3_UInt16_color;
Variable PixelExportColor_Float32x3_UInt16_index;
Function PixelExportColor_Float32x3_UInt16;
inline constexpr std::array PixelExportColor_Float32x3_UInt16_args = { &PixelExportColor_Float32x3_UInt16_color, &PixelExportColor_Float32x3_UInt16_index };

/// pixelExportColor with Float32x4, Int32
Variable PixelExportColor_Float32x4_Int32_color;
Variable PixelExportColor_Float32x4_Int32_index;
Function PixelExportColor_Float32x4_Int32;
inline constexpr std::array PixelExportColor_Float32x4_Int32_args = { &PixelExportColor_Float32x4_Int32_color, &PixelExportColor_Float32x4_Int32_index };

/// pixelExportColor with Float32x4, UInt32
Variable PixelExportColor_Float32x4_UInt32_color;
Variable PixelExportColor_Float32x4_UInt32_index;
Function PixelExportColor_Float32x4_UInt32;
inline constexpr std::array PixelExportColor_Float32x4_UInt32_args = { &PixelExportColor_Float32x4_UInt32_color, &PixelExportColor_Float32x4_UInt32_index };

/// pixelExportColor with Float32x4, Int16
Variable PixelExportColor_Float32x4_Int16_color;
Variable PixelExportColor_Float32x4_Int16_index;
Function PixelExportColor_Float32x4_Int16;
inline constexpr std::array PixelExportColor_Float32x4_Int16_args = { &PixelExportColor_Float32x4_Int16_color, &PixelExportColor_Float32x4_Int16_index };

/// pixelExportColor with Float32x4, UInt16
Variable PixelExportColor_Float32x4_UInt16_color;
Variable PixelExportColor_Float32x4_UInt16_index;
Function PixelExportColor_Float32x4_UInt16;
inline constexpr std::array PixelExportColor_Float32x4_UInt16_args = { &PixelExportColor_Float32x4_UInt16_color, &PixelExportColor_Float32x4_UInt16_index };

/// pixelExportColor with Float16, Int32
Variable PixelExportColor_Float16_Int32_color;
Variable PixelExportColor_Float16_Int32_index;
Function PixelExportColor_Float16_Int32;
inline constexpr std::array PixelExportColor_Float16_Int32_args = { &PixelExportColor_Float16_Int32_color, &PixelExportColor_Float16_Int32_index };

/// pixelExportColor with Float16, UInt32
Variable PixelExportColor_Float16_UInt32_color;
Variable PixelExportColor_Float16_UInt32_index;
Function PixelExportColor_Float16_UInt32;
inline constexpr std::array PixelExportColor_Float16_UInt32_args = { &PixelExportColor_Float16_UInt32_color, &PixelExportColor_Float16_UInt32_index };

/// pixelExportColor with Float16, Int16
Variable PixelExportColor_Float16_Int16_color;
Variable PixelExportColor_Float16_Int16_index;
Function PixelExportColor_Float16_Int16;
inline constexpr std::array PixelExportColor_Float16_Int16_args = { &PixelExportColor_Float16_Int16_color, &PixelExportColor_Float16_Int16_index };

/// pixelExportColor with Float16, UInt16
Variable PixelExportColor_Float16_UInt16_color;
Variable PixelExportColor_Float16_UInt16_index;
Function PixelExportColor_Float16_UInt16;
inline constexpr std::array PixelExportColor_Float16_UInt16_args = { &PixelExportColor_Float16_UInt16_color, &PixelExportColor_Float16_UInt16_index };

/// pixelExportColor with Float16x2, Int32
Variable PixelExportColor_Float16x2_Int32_color;
Variable PixelExportColor_Float16x2_Int32_index;
Function PixelExportColor_Float16x2_Int32;
inline constexpr std::array PixelExportColor_Float16x2_Int32_args = { &PixelExportColor_Float16x2_Int32_color, &PixelExportColor_Float16x2_Int32_index };

/// pixelExportColor with Float16x2, UInt32
Variable PixelExportColor_Float16x2_UInt32_color;
Variable PixelExportColor_Float16x2_UInt32_index;
Function PixelExportColor_Float16x2_UInt32;
inline constexpr std::array PixelExportColor_Float16x2_UInt32_args = { &PixelExportColor_Float16x2_UInt32_color, &PixelExportColor_Float16x2_UInt32_index };

/// pixelExportColor with Float16x2, Int16
Variable PixelExportColor_Float16x2_Int16_color;
Variable PixelExportColor_Float16x2_Int16_index;
Function PixelExportColor_Float16x2_Int16;
inline constexpr std::array PixelExportColor_Float16x2_Int16_args = { &PixelExportColor_Float16x2_Int16_color, &PixelExportColor_Float16x2_Int16_index };

/// pixelExportColor with Float16x2, UInt16
Variable PixelExportColor_Float16x2_UInt16_color;
Variable PixelExportColor_Float16x2_UInt16_index;
Function PixelExportColor_Float16x2_UInt16;
inline constexpr std::array PixelExportColor_Float16x2_UInt16_args = { &PixelExportColor_Float16x2_UInt16_color, &PixelExportColor_Float16x2_UInt16_index };

/// pixelExportColor with Float16x3, Int32
Variable PixelExportColor_Float16x3_Int32_color;
Variable PixelExportColor_Float16x3_Int32_index;
Function PixelExportColor_Float16x3_Int32;
inline constexpr std::array PixelExportColor_Float16x3_Int32_args = { &PixelExportColor_Float16x3_Int32_color, &PixelExportColor_Float16x3_Int32_index };

/// pixelExportColor with Float16x3, UInt32
Variable PixelExportColor_Float16x3_UInt32_color;
Variable PixelExportColor_Float16x3_UInt32_index;
Function PixelExportColor_Float16x3_UInt32;
inline constexpr std::array PixelExportColor_Float16x3_UInt32_args = { &PixelExportColor_Float16x3_UInt32_color, &PixelExportColor_Float16x3_UInt32_index };

/// pixelExportColor with Float16x3, Int16
Variable PixelExportColor_Float16x3_Int16_color;
Variable PixelExportColor_Float16x3_Int16_index;
Function PixelExportColor_Float16x3_Int16;
inline constexpr std::array PixelExportColor_Float16x3_Int16_args = { &PixelExportColor_Float16x3_Int16_color, &PixelExportColor_Float16x3_Int16_index };

/// pixelExportColor with Float16x3, UInt16
Variable PixelExportColor_Float16x3_UInt16_color;
Variable PixelExportColor_Float16x3_UInt16_index;
Function PixelExportColor_Float16x3_UInt16;
inline constexpr std::array PixelExportColor_Float16x3_UInt16_args = { &PixelExportColor_Float16x3_UInt16_color, &PixelExportColor_Float16x3_UInt16_index };

/// pixelExportColor with Float16x4, Int32
Variable PixelExportColor_Float16x4_Int32_color;
Variable PixelExportColor_Float16x4_Int32_index;
Function PixelExportColor_Float16x4_Int32;
inline constexpr std::array PixelExportColor_Float16x4_Int32_args = { &PixelExportColor_Float16x4_Int32_color, &PixelExportColor_Float16x4_Int32_index };

/// pixelExportColor with Float16x4, UInt32
Variable PixelExportColor_Float16x4_UInt32_color;
Variable PixelExportColor_Float16x4_UInt32_index;
Function PixelExportColor_Float16x4_UInt32;
inline constexpr std::array PixelExportColor_Float16x4_UInt32_args = { &PixelExportColor_Float16x4_UInt32_color, &PixelExportColor_Float16x4_UInt32_index };

/// pixelExportColor with Float16x4, Int16
Variable PixelExportColor_Float16x4_Int16_color;
Variable PixelExportColor_Float16x4_Int16_index;
Function PixelExportColor_Float16x4_Int16;
inline constexpr std::array PixelExportColor_Float16x4_Int16_args = { &PixelExportColor_Float16x4_Int16_color, &PixelExportColor_Float16x4_Int16_index };

/// pixelExportColor with Float16x4, UInt16
Variable PixelExportColor_Float16x4_UInt16_color;
Variable PixelExportColor_Float16x4_UInt16_index;
Function PixelExportColor_Float16x4_UInt16;
inline constexpr std::array PixelExportColor_Float16x4_UInt16_args = { &PixelExportColor_Float16x4_UInt16_color, &PixelExportColor_Float16x4_UInt16_index };

/// pixelExportColor with Int32, Int32
Variable PixelExportColor_Int32_Int32_color;
Variable PixelExportColor_Int32_Int32_index;
Function PixelExportColor_Int32_Int32;
inline constexpr std::array PixelExportColor_Int32_Int32_args = { &PixelExportColor_Int32_Int32_color, &PixelExportColor_Int32_Int32_index };

/// pixelExportColor with Int32, UInt32
Variable PixelExportColor_Int32_UInt32_color;
Variable PixelExportColor_Int32_UInt32_index;
Function PixelExportColor_Int32_UInt32;
inline constexpr std::array PixelExportColor_Int32_UInt32_args = { &PixelExportColor_Int32_UInt32_color, &PixelExportColor_Int32_UInt32_index };

/// pixelExportColor with Int32, Int16
Variable PixelExportColor_Int32_Int16_color;
Variable PixelExportColor_Int32_Int16_index;
Function PixelExportColor_Int32_Int16;
inline constexpr std::array PixelExportColor_Int32_Int16_args = { &PixelExportColor_Int32_Int16_color, &PixelExportColor_Int32_Int16_index };

/// pixelExportColor with Int32, UInt16
Variable PixelExportColor_Int32_UInt16_color;
Variable PixelExportColor_Int32_UInt16_index;
Function PixelExportColor_Int32_UInt16;
inline constexpr std::array PixelExportColor_Int32_UInt16_args = { &PixelExportColor_Int32_UInt16_color, &PixelExportColor_Int32_UInt16_index };

/// pixelExportColor with Int32x2, Int32
Variable PixelExportColor_Int32x2_Int32_color;
Variable PixelExportColor_Int32x2_Int32_index;
Function PixelExportColor_Int32x2_Int32;
inline constexpr std::array PixelExportColor_Int32x2_Int32_args = { &PixelExportColor_Int32x2_Int32_color, &PixelExportColor_Int32x2_Int32_index };

/// pixelExportColor with Int32x2, UInt32
Variable PixelExportColor_Int32x2_UInt32_color;
Variable PixelExportColor_Int32x2_UInt32_index;
Function PixelExportColor_Int32x2_UInt32;
inline constexpr std::array PixelExportColor_Int32x2_UInt32_args = { &PixelExportColor_Int32x2_UInt32_color, &PixelExportColor_Int32x2_UInt32_index };

/// pixelExportColor with Int32x2, Int16
Variable PixelExportColor_Int32x2_Int16_color;
Variable PixelExportColor_Int32x2_Int16_index;
Function PixelExportColor_Int32x2_Int16;
inline constexpr std::array PixelExportColor_Int32x2_Int16_args = { &PixelExportColor_Int32x2_Int16_color, &PixelExportColor_Int32x2_Int16_index };

/// pixelExportColor with Int32x2, UInt16
Variable PixelExportColor_Int32x2_UInt16_color;
Variable PixelExportColor_Int32x2_UInt16_index;
Function PixelExportColor_Int32x2_UInt16;
inline constexpr std::array PixelExportColor_Int32x2_UInt16_args = { &PixelExportColor_Int32x2_UInt16_color, &PixelExportColor_Int32x2_UInt16_index };

/// pixelExportColor with Int32x3, Int32
Variable PixelExportColor_Int32x3_Int32_color;
Variable PixelExportColor_Int32x3_Int32_index;
Function PixelExportColor_Int32x3_Int32;
inline constexpr std::array PixelExportColor_Int32x3_Int32_args = { &PixelExportColor_Int32x3_Int32_color, &PixelExportColor_Int32x3_Int32_index };

/// pixelExportColor with Int32x3, UInt32
Variable PixelExportColor_Int32x3_UInt32_color;
Variable PixelExportColor_Int32x3_UInt32_index;
Function PixelExportColor_Int32x3_UInt32;
inline constexpr std::array PixelExportColor_Int32x3_UInt32_args = { &PixelExportColor_Int32x3_UInt32_color, &PixelExportColor_Int32x3_UInt32_index };

/// pixelExportColor with Int32x3, Int16
Variable PixelExportColor_Int32x3_Int16_color;
Variable PixelExportColor_Int32x3_Int16_index;
Function PixelExportColor_Int32x3_Int16;
inline constexpr std::array PixelExportColor_Int32x3_Int16_args = { &PixelExportColor_Int32x3_Int16_color, &PixelExportColor_Int32x3_Int16_index };

/// pixelExportColor with Int32x3, UInt16
Variable PixelExportColor_Int32x3_UInt16_color;
Variable PixelExportColor_Int32x3_UInt16_index;
Function PixelExportColor_Int32x3_UInt16;
inline constexpr std::array PixelExportColor_Int32x3_UInt16_args = { &PixelExportColor_Int32x3_UInt16_color, &PixelExportColor_Int32x3_UInt16_index };

/// pixelExportColor with Int32x4, Int32
Variable PixelExportColor_Int32x4_Int32_color;
Variable PixelExportColor_Int32x4_Int32_index;
Function PixelExportColor_Int32x4_Int32;
inline constexpr std::array PixelExportColor_Int32x4_Int32_args = { &PixelExportColor_Int32x4_Int32_color, &PixelExportColor_Int32x4_Int32_index };

/// pixelExportColor with Int32x4, UInt32
Variable PixelExportColor_Int32x4_UInt32_color;
Variable PixelExportColor_Int32x4_UInt32_index;
Function PixelExportColor_Int32x4_UInt32;
inline constexpr std::array PixelExportColor_Int32x4_UInt32_args = { &PixelExportColor_Int32x4_UInt32_color, &PixelExportColor_Int32x4_UInt32_index };

/// pixelExportColor with Int32x4, Int16
Variable PixelExportColor_Int32x4_Int16_color;
Variable PixelExportColor_Int32x4_Int16_index;
Function PixelExportColor_Int32x4_Int16;
inline constexpr std::array PixelExportColor_Int32x4_Int16_args = { &PixelExportColor_Int32x4_Int16_color, &PixelExportColor_Int32x4_Int16_index };

/// pixelExportColor with Int32x4, UInt16
Variable PixelExportColor_Int32x4_UInt16_color;
Variable PixelExportColor_Int32x4_UInt16_index;
Function PixelExportColor_Int32x4_UInt16;
inline constexpr std::array PixelExportColor_Int32x4_UInt16_args = { &PixelExportColor_Int32x4_UInt16_color, &PixelExportColor_Int32x4_UInt16_index };

/// pixelExportColor with Int16, Int32
Variable PixelExportColor_Int16_Int32_color;
Variable PixelExportColor_Int16_Int32_index;
Function PixelExportColor_Int16_Int32;
inline constexpr std::array PixelExportColor_Int16_Int32_args = { &PixelExportColor_Int16_Int32_color, &PixelExportColor_Int16_Int32_index };

/// pixelExportColor with Int16, UInt32
Variable PixelExportColor_Int16_UInt32_color;
Variable PixelExportColor_Int16_UInt32_index;
Function PixelExportColor_Int16_UInt32;
inline constexpr std::array PixelExportColor_Int16_UInt32_args = { &PixelExportColor_Int16_UInt32_color, &PixelExportColor_Int16_UInt32_index };

/// pixelExportColor with Int16, Int16
Variable PixelExportColor_Int16_Int16_color;
Variable PixelExportColor_Int16_Int16_index;
Function PixelExportColor_Int16_Int16;
inline constexpr std::array PixelExportColor_Int16_Int16_args = { &PixelExportColor_Int16_Int16_color, &PixelExportColor_Int16_Int16_index };

/// pixelExportColor with Int16, UInt16
Variable PixelExportColor_Int16_UInt16_color;
Variable PixelExportColor_Int16_UInt16_index;
Function PixelExportColor_Int16_UInt16;
inline constexpr std::array PixelExportColor_Int16_UInt16_args = { &PixelExportColor_Int16_UInt16_color, &PixelExportColor_Int16_UInt16_index };

/// pixelExportColor with Int16x2, Int32
Variable PixelExportColor_Int16x2_Int32_color;
Variable PixelExportColor_Int16x2_Int32_index;
Function PixelExportColor_Int16x2_Int32;
inline constexpr std::array PixelExportColor_Int16x2_Int32_args = { &PixelExportColor_Int16x2_Int32_color, &PixelExportColor_Int16x2_Int32_index };

/// pixelExportColor with Int16x2, UInt32
Variable PixelExportColor_Int16x2_UInt32_color;
Variable PixelExportColor_Int16x2_UInt32_index;
Function PixelExportColor_Int16x2_UInt32;
inline constexpr std::array PixelExportColor_Int16x2_UInt32_args = { &PixelExportColor_Int16x2_UInt32_color, &PixelExportColor_Int16x2_UInt32_index };

/// pixelExportColor with Int16x2, Int16
Variable PixelExportColor_Int16x2_Int16_color;
Variable PixelExportColor_Int16x2_Int16_index;
Function PixelExportColor_Int16x2_Int16;
inline constexpr std::array PixelExportColor_Int16x2_Int16_args = { &PixelExportColor_Int16x2_Int16_color, &PixelExportColor_Int16x2_Int16_index };

/// pixelExportColor with Int16x2, UInt16
Variable PixelExportColor_Int16x2_UInt16_color;
Variable PixelExportColor_Int16x2_UInt16_index;
Function PixelExportColor_Int16x2_UInt16;
inline constexpr std::array PixelExportColor_Int16x2_UInt16_args = { &PixelExportColor_Int16x2_UInt16_color, &PixelExportColor_Int16x2_UInt16_index };

/// pixelExportColor with Int16x3, Int32
Variable PixelExportColor_Int16x3_Int32_color;
Variable PixelExportColor_Int16x3_Int32_index;
Function PixelExportColor_Int16x3_Int32;
inline constexpr std::array PixelExportColor_Int16x3_Int32_args = { &PixelExportColor_Int16x3_Int32_color, &PixelExportColor_Int16x3_Int32_index };

/// pixelExportColor with Int16x3, UInt32
Variable PixelExportColor_Int16x3_UInt32_color;
Variable PixelExportColor_Int16x3_UInt32_index;
Function PixelExportColor_Int16x3_UInt32;
inline constexpr std::array PixelExportColor_Int16x3_UInt32_args = { &PixelExportColor_Int16x3_UInt32_color, &PixelExportColor_Int16x3_UInt32_index };

/// pixelExportColor with Int16x3, Int16
Variable PixelExportColor_Int16x3_Int16_color;
Variable PixelExportColor_Int16x3_Int16_index;
Function PixelExportColor_Int16x3_Int16;
inline constexpr std::array PixelExportColor_Int16x3_Int16_args = { &PixelExportColor_Int16x3_Int16_color, &PixelExportColor_Int16x3_Int16_index };

/// pixelExportColor with Int16x3, UInt16
Variable PixelExportColor_Int16x3_UInt16_color;
Variable PixelExportColor_Int16x3_UInt16_index;
Function PixelExportColor_Int16x3_UInt16;
inline constexpr std::array PixelExportColor_Int16x3_UInt16_args = { &PixelExportColor_Int16x3_UInt16_color, &PixelExportColor_Int16x3_UInt16_index };

/// pixelExportColor with Int16x4, Int32
Variable PixelExportColor_Int16x4_Int32_color;
Variable PixelExportColor_Int16x4_Int32_index;
Function PixelExportColor_Int16x4_Int32;
inline constexpr std::array PixelExportColor_Int16x4_Int32_args = { &PixelExportColor_Int16x4_Int32_color, &PixelExportColor_Int16x4_Int32_index };

/// pixelExportColor with Int16x4, UInt32
Variable PixelExportColor_Int16x4_UInt32_color;
Variable PixelExportColor_Int16x4_UInt32_index;
Function PixelExportColor_Int16x4_UInt32;
inline constexpr std::array PixelExportColor_Int16x4_UInt32_args = { &PixelExportColor_Int16x4_UInt32_color, &PixelExportColor_Int16x4_UInt32_index };

/// pixelExportColor with Int16x4, Int16
Variable PixelExportColor_Int16x4_Int16_color;
Variable PixelExportColor_Int16x4_Int16_index;
Function PixelExportColor_Int16x4_Int16;
inline constexpr std::array PixelExportColor_Int16x4_Int16_args = { &PixelExportColor_Int16x4_Int16_color, &PixelExportColor_Int16x4_Int16_index };

/// pixelExportColor with Int16x4, UInt16
Variable PixelExportColor_Int16x4_UInt16_color;
Variable PixelExportColor_Int16x4_UInt16_index;
Function PixelExportColor_Int16x4_UInt16;
inline constexpr std::array PixelExportColor_Int16x4_UInt16_args = { &PixelExportColor_Int16x4_UInt16_color, &PixelExportColor_Int16x4_UInt16_index };

/// pixelExportColor with UInt32, Int32
Variable PixelExportColor_UInt32_Int32_color;
Variable PixelExportColor_UInt32_Int32_index;
Function PixelExportColor_UInt32_Int32;
inline constexpr std::array PixelExportColor_UInt32_Int32_args = { &PixelExportColor_UInt32_Int32_color, &PixelExportColor_UInt32_Int32_index };

/// pixelExportColor with UInt32, UInt32
Variable PixelExportColor_UInt32_UInt32_color;
Variable PixelExportColor_UInt32_UInt32_index;
Function PixelExportColor_UInt32_UInt32;
inline constexpr std::array PixelExportColor_UInt32_UInt32_args = { &PixelExportColor_UInt32_UInt32_color, &PixelExportColor_UInt32_UInt32_index };

/// pixelExportColor with UInt32, Int16
Variable PixelExportColor_UInt32_Int16_color;
Variable PixelExportColor_UInt32_Int16_index;
Function PixelExportColor_UInt32_Int16;
inline constexpr std::array PixelExportColor_UInt32_Int16_args = { &PixelExportColor_UInt32_Int16_color, &PixelExportColor_UInt32_Int16_index };

/// pixelExportColor with UInt32, UInt16
Variable PixelExportColor_UInt32_UInt16_color;
Variable PixelExportColor_UInt32_UInt16_index;
Function PixelExportColor_UInt32_UInt16;
inline constexpr std::array PixelExportColor_UInt32_UInt16_args = { &PixelExportColor_UInt32_UInt16_color, &PixelExportColor_UInt32_UInt16_index };

/// pixelExportColor with UInt32x2, Int32
Variable PixelExportColor_UInt32x2_Int32_color;
Variable PixelExportColor_UInt32x2_Int32_index;
Function PixelExportColor_UInt32x2_Int32;
inline constexpr std::array PixelExportColor_UInt32x2_Int32_args = { &PixelExportColor_UInt32x2_Int32_color, &PixelExportColor_UInt32x2_Int32_index };

/// pixelExportColor with UInt32x2, UInt32
Variable PixelExportColor_UInt32x2_UInt32_color;
Variable PixelExportColor_UInt32x2_UInt32_index;
Function PixelExportColor_UInt32x2_UInt32;
inline constexpr std::array PixelExportColor_UInt32x2_UInt32_args = { &PixelExportColor_UInt32x2_UInt32_color, &PixelExportColor_UInt32x2_UInt32_index };

/// pixelExportColor with UInt32x2, Int16
Variable PixelExportColor_UInt32x2_Int16_color;
Variable PixelExportColor_UInt32x2_Int16_index;
Function PixelExportColor_UInt32x2_Int16;
inline constexpr std::array PixelExportColor_UInt32x2_Int16_args = { &PixelExportColor_UInt32x2_Int16_color, &PixelExportColor_UInt32x2_Int16_index };

/// pixelExportColor with UInt32x2, UInt16
Variable PixelExportColor_UInt32x2_UInt16_color;
Variable PixelExportColor_UInt32x2_UInt16_index;
Function PixelExportColor_UInt32x2_UInt16;
inline constexpr std::array PixelExportColor_UInt32x2_UInt16_args = { &PixelExportColor_UInt32x2_UInt16_color, &PixelExportColor_UInt32x2_UInt16_index };

/// pixelExportColor with UInt32x3, Int32
Variable PixelExportColor_UInt32x3_Int32_color;
Variable PixelExportColor_UInt32x3_Int32_index;
Function PixelExportColor_UInt32x3_Int32;
inline constexpr std::array PixelExportColor_UInt32x3_Int32_args = { &PixelExportColor_UInt32x3_Int32_color, &PixelExportColor_UInt32x3_Int32_index };

/// pixelExportColor with UInt32x3, UInt32
Variable PixelExportColor_UInt32x3_UInt32_color;
Variable PixelExportColor_UInt32x3_UInt32_index;
Function PixelExportColor_UInt32x3_UInt32;
inline constexpr std::array PixelExportColor_UInt32x3_UInt32_args = { &PixelExportColor_UInt32x3_UInt32_color, &PixelExportColor_UInt32x3_UInt32_index };

/// pixelExportColor with UInt32x3, Int16
Variable PixelExportColor_UInt32x3_Int16_color;
Variable PixelExportColor_UInt32x3_Int16_index;
Function PixelExportColor_UInt32x3_Int16;
inline constexpr std::array PixelExportColor_UInt32x3_Int16_args = { &PixelExportColor_UInt32x3_Int16_color, &PixelExportColor_UInt32x3_Int16_index };

/// pixelExportColor with UInt32x3, UInt16
Variable PixelExportColor_UInt32x3_UInt16_color;
Variable PixelExportColor_UInt32x3_UInt16_index;
Function PixelExportColor_UInt32x3_UInt16;
inline constexpr std::array PixelExportColor_UInt32x3_UInt16_args = { &PixelExportColor_UInt32x3_UInt16_color, &PixelExportColor_UInt32x3_UInt16_index };

/// pixelExportColor with UInt32x4, Int32
Variable PixelExportColor_UInt32x4_Int32_color;
Variable PixelExportColor_UInt32x4_Int32_index;
Function PixelExportColor_UInt32x4_Int32;
inline constexpr std::array PixelExportColor_UInt32x4_Int32_args = { &PixelExportColor_UInt32x4_Int32_color, &PixelExportColor_UInt32x4_Int32_index };

/// pixelExportColor with UInt32x4, UInt32
Variable PixelExportColor_UInt32x4_UInt32_color;
Variable PixelExportColor_UInt32x4_UInt32_index;
Function PixelExportColor_UInt32x4_UInt32;
inline constexpr std::array PixelExportColor_UInt32x4_UInt32_args = { &PixelExportColor_UInt32x4_UInt32_color, &PixelExportColor_UInt32x4_UInt32_index };

/// pixelExportColor with UInt32x4, Int16
Variable PixelExportColor_UInt32x4_Int16_color;
Variable PixelExportColor_UInt32x4_Int16_index;
Function PixelExportColor_UInt32x4_Int16;
inline constexpr std::array PixelExportColor_UInt32x4_Int16_args = { &PixelExportColor_UInt32x4_Int16_color, &PixelExportColor_UInt32x4_Int16_index };

/// pixelExportColor with UInt32x4, UInt16
Variable PixelExportColor_UInt32x4_UInt16_color;
Variable PixelExportColor_UInt32x4_UInt16_index;
Function PixelExportColor_UInt32x4_UInt16;
inline constexpr std::array PixelExportColor_UInt32x4_UInt16_args = { &PixelExportColor_UInt32x4_UInt16_color, &PixelExportColor_UInt32x4_UInt16_index };

/// pixelExportColor with UInt16, Int32
Variable PixelExportColor_UInt16_Int32_color;
Variable PixelExportColor_UInt16_Int32_index;
Function PixelExportColor_UInt16_Int32;
inline constexpr std::array PixelExportColor_UInt16_Int32_args = { &PixelExportColor_UInt16_Int32_color, &PixelExportColor_UInt16_Int32_index };

/// pixelExportColor with UInt16, UInt32
Variable PixelExportColor_UInt16_UInt32_color;
Variable PixelExportColor_UInt16_UInt32_index;
Function PixelExportColor_UInt16_UInt32;
inline constexpr std::array PixelExportColor_UInt16_UInt32_args = { &PixelExportColor_UInt16_UInt32_color, &PixelExportColor_UInt16_UInt32_index };

/// pixelExportColor with UInt16, Int16
Variable PixelExportColor_UInt16_Int16_color;
Variable PixelExportColor_UInt16_Int16_index;
Function PixelExportColor_UInt16_Int16;
inline constexpr std::array PixelExportColor_UInt16_Int16_args = { &PixelExportColor_UInt16_Int16_color, &PixelExportColor_UInt16_Int16_index };

/// pixelExportColor with UInt16, UInt16
Variable PixelExportColor_UInt16_UInt16_color;
Variable PixelExportColor_UInt16_UInt16_index;
Function PixelExportColor_UInt16_UInt16;
inline constexpr std::array PixelExportColor_UInt16_UInt16_args = { &PixelExportColor_UInt16_UInt16_color, &PixelExportColor_UInt16_UInt16_index };

/// pixelExportColor with UInt16x2, Int32
Variable PixelExportColor_UInt16x2_Int32_color;
Variable PixelExportColor_UInt16x2_Int32_index;
Function PixelExportColor_UInt16x2_Int32;
inline constexpr std::array PixelExportColor_UInt16x2_Int32_args = { &PixelExportColor_UInt16x2_Int32_color, &PixelExportColor_UInt16x2_Int32_index };

/// pixelExportColor with UInt16x2, UInt32
Variable PixelExportColor_UInt16x2_UInt32_color;
Variable PixelExportColor_UInt16x2_UInt32_index;
Function PixelExportColor_UInt16x2_UInt32;
inline constexpr std::array PixelExportColor_UInt16x2_UInt32_args = { &PixelExportColor_UInt16x2_UInt32_color, &PixelExportColor_UInt16x2_UInt32_index };

/// pixelExportColor with UInt16x2, Int16
Variable PixelExportColor_UInt16x2_Int16_color;
Variable PixelExportColor_UInt16x2_Int16_index;
Function PixelExportColor_UInt16x2_Int16;
inline constexpr std::array PixelExportColor_UInt16x2_Int16_args = { &PixelExportColor_UInt16x2_Int16_color, &PixelExportColor_UInt16x2_Int16_index };

/// pixelExportColor with UInt16x2, UInt16
Variable PixelExportColor_UInt16x2_UInt16_color;
Variable PixelExportColor_UInt16x2_UInt16_index;
Function PixelExportColor_UInt16x2_UInt16;
inline constexpr std::array PixelExportColor_UInt16x2_UInt16_args = { &PixelExportColor_UInt16x2_UInt16_color, &PixelExportColor_UInt16x2_UInt16_index };

/// pixelExportColor with UInt16x3, Int32
Variable PixelExportColor_UInt16x3_Int32_color;
Variable PixelExportColor_UInt16x3_Int32_index;
Function PixelExportColor_UInt16x3_Int32;
inline constexpr std::array PixelExportColor_UInt16x3_Int32_args = { &PixelExportColor_UInt16x3_Int32_color, &PixelExportColor_UInt16x3_Int32_index };

/// pixelExportColor with UInt16x3, UInt32
Variable PixelExportColor_UInt16x3_UInt32_color;
Variable PixelExportColor_UInt16x3_UInt32_index;
Function PixelExportColor_UInt16x3_UInt32;
inline constexpr std::array PixelExportColor_UInt16x3_UInt32_args = { &PixelExportColor_UInt16x3_UInt32_color, &PixelExportColor_UInt16x3_UInt32_index };

/// pixelExportColor with UInt16x3, Int16
Variable PixelExportColor_UInt16x3_Int16_color;
Variable PixelExportColor_UInt16x3_Int16_index;
Function PixelExportColor_UInt16x3_Int16;
inline constexpr std::array PixelExportColor_UInt16x3_Int16_args = { &PixelExportColor_UInt16x3_Int16_color, &PixelExportColor_UInt16x3_Int16_index };

/// pixelExportColor with UInt16x3, UInt16
Variable PixelExportColor_UInt16x3_UInt16_color;
Variable PixelExportColor_UInt16x3_UInt16_index;
Function PixelExportColor_UInt16x3_UInt16;
inline constexpr std::array PixelExportColor_UInt16x3_UInt16_args = { &PixelExportColor_UInt16x3_UInt16_color, &PixelExportColor_UInt16x3_UInt16_index };

/// pixelExportColor with UInt16x4, Int32
Variable PixelExportColor_UInt16x4_Int32_color;
Variable PixelExportColor_UInt16x4_Int32_index;
Function PixelExportColor_UInt16x4_Int32;
inline constexpr std::array PixelExportColor_UInt16x4_Int32_args = { &PixelExportColor_UInt16x4_Int32_color, &PixelExportColor_UInt16x4_Int32_index };

/// pixelExportColor with UInt16x4, UInt32
Variable PixelExportColor_UInt16x4_UInt32_color;
Variable PixelExportColor_UInt16x4_UInt32_index;
Function PixelExportColor_UInt16x4_UInt32;
inline constexpr std::array PixelExportColor_UInt16x4_UInt32_args = { &PixelExportColor_UInt16x4_UInt32_color, &PixelExportColor_UInt16x4_UInt32_index };

/// pixelExportColor with UInt16x4, Int16
Variable PixelExportColor_UInt16x4_Int16_color;
Variable PixelExportColor_UInt16x4_Int16_index;
Function PixelExportColor_UInt16x4_Int16;
inline constexpr std::array PixelExportColor_UInt16x4_Int16_args = { &PixelExportColor_UInt16x4_Int16_color, &PixelExportColor_UInt16x4_Int16_index };

/// pixelExportColor with UInt16x4, UInt16
Variable PixelExportColor_UInt16x4_UInt16_color;
Variable PixelExportColor_UInt16x4_UInt16_index;
Function PixelExportColor_UInt16x4_UInt16;
inline constexpr std::array PixelExportColor_UInt16x4_UInt16_args = { &PixelExportColor_UInt16x4_UInt16_color, &PixelExportColor_UInt16x4_UInt16_index };

/// computeGetLocalThreadIndices
Function ComputeGetLocalThreadIndices;

/// computeGetGlobalThreadIndices
Function ComputeGetGlobalThreadIndices;

/// computeGetWorkgroupIndices
Function ComputeGetWorkgroupIndices;

/// computeGetWorkGroupDimensions
Function ComputeGetWorkGroupDimensions;

/// computeGetIndexInWorkgroup
Function ComputeGetIndexInWorkgroup;

/// subgroupGetId
Function SubgroupGetId;

/// subgroupGetSize
Function SubgroupGetSize;

/// subgroupGetNum
Function SubgroupGetNum;

/// subgroupGetThreadMask
Function SubgroupGetThreadMask;

/// subgroupGetThreadAndLowerMask
Function SubgroupGetThreadAndLowerMask;

/// subgroupGetLowerMask
Function SubgroupGetLowerMask;

/// subgroupGetThreadAndGreaterMask
Function SubgroupGetThreadAndGreaterMask;

/// subgroupGetGreaterMask
Function SubgroupGetGreaterMask;

/// subgroupGetFirstActiveThread
Function SubgroupGetFirstActiveThread;

/// subgroupBroadcastFirstActiveThread with Float32
Variable SubgroupBroadcastFirstActiveThread_Float32_value;
Function SubgroupBroadcastFirstActiveThread_Float32;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float32_args = { &SubgroupBroadcastFirstActiveThread_Float32_value };

/// subgroupBroadcastFirstActiveThread with Float32x2
Variable SubgroupBroadcastFirstActiveThread_Float32x2_value;
Function SubgroupBroadcastFirstActiveThread_Float32x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float32x2_args = { &SubgroupBroadcastFirstActiveThread_Float32x2_value };

/// subgroupBroadcastFirstActiveThread with Float32x3
Variable SubgroupBroadcastFirstActiveThread_Float32x3_value;
Function SubgroupBroadcastFirstActiveThread_Float32x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float32x3_args = { &SubgroupBroadcastFirstActiveThread_Float32x3_value };

/// subgroupBroadcastFirstActiveThread with Float32x4
Variable SubgroupBroadcastFirstActiveThread_Float32x4_value;
Function SubgroupBroadcastFirstActiveThread_Float32x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float32x4_args = { &SubgroupBroadcastFirstActiveThread_Float32x4_value };

/// subgroupBroadcastFirstActiveThread with Float16
Variable SubgroupBroadcastFirstActiveThread_Float16_value;
Function SubgroupBroadcastFirstActiveThread_Float16;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float16_args = { &SubgroupBroadcastFirstActiveThread_Float16_value };

/// subgroupBroadcastFirstActiveThread with Float16x2
Variable SubgroupBroadcastFirstActiveThread_Float16x2_value;
Function SubgroupBroadcastFirstActiveThread_Float16x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float16x2_args = { &SubgroupBroadcastFirstActiveThread_Float16x2_value };

/// subgroupBroadcastFirstActiveThread with Float16x3
Variable SubgroupBroadcastFirstActiveThread_Float16x3_value;
Function SubgroupBroadcastFirstActiveThread_Float16x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float16x3_args = { &SubgroupBroadcastFirstActiveThread_Float16x3_value };

/// subgroupBroadcastFirstActiveThread with Float16x4
Variable SubgroupBroadcastFirstActiveThread_Float16x4_value;
Function SubgroupBroadcastFirstActiveThread_Float16x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float16x4_args = { &SubgroupBroadcastFirstActiveThread_Float16x4_value };

/// subgroupBroadcastFirstActiveThread with Int32
Variable SubgroupBroadcastFirstActiveThread_Int32_value;
Function SubgroupBroadcastFirstActiveThread_Int32;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int32_args = { &SubgroupBroadcastFirstActiveThread_Int32_value };

/// subgroupBroadcastFirstActiveThread with Int32x2
Variable SubgroupBroadcastFirstActiveThread_Int32x2_value;
Function SubgroupBroadcastFirstActiveThread_Int32x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int32x2_args = { &SubgroupBroadcastFirstActiveThread_Int32x2_value };

/// subgroupBroadcastFirstActiveThread with Int32x3
Variable SubgroupBroadcastFirstActiveThread_Int32x3_value;
Function SubgroupBroadcastFirstActiveThread_Int32x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int32x3_args = { &SubgroupBroadcastFirstActiveThread_Int32x3_value };

/// subgroupBroadcastFirstActiveThread with Int32x4
Variable SubgroupBroadcastFirstActiveThread_Int32x4_value;
Function SubgroupBroadcastFirstActiveThread_Int32x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int32x4_args = { &SubgroupBroadcastFirstActiveThread_Int32x4_value };

/// subgroupBroadcastFirstActiveThread with Int16
Variable SubgroupBroadcastFirstActiveThread_Int16_value;
Function SubgroupBroadcastFirstActiveThread_Int16;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int16_args = { &SubgroupBroadcastFirstActiveThread_Int16_value };

/// subgroupBroadcastFirstActiveThread with Int16x2
Variable SubgroupBroadcastFirstActiveThread_Int16x2_value;
Function SubgroupBroadcastFirstActiveThread_Int16x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int16x2_args = { &SubgroupBroadcastFirstActiveThread_Int16x2_value };

/// subgroupBroadcastFirstActiveThread with Int16x3
Variable SubgroupBroadcastFirstActiveThread_Int16x3_value;
Function SubgroupBroadcastFirstActiveThread_Int16x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int16x3_args = { &SubgroupBroadcastFirstActiveThread_Int16x3_value };

/// subgroupBroadcastFirstActiveThread with Int16x4
Variable SubgroupBroadcastFirstActiveThread_Int16x4_value;
Function SubgroupBroadcastFirstActiveThread_Int16x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int16x4_args = { &SubgroupBroadcastFirstActiveThread_Int16x4_value };

/// subgroupBroadcastFirstActiveThread with UInt32
Variable SubgroupBroadcastFirstActiveThread_UInt32_value;
Function SubgroupBroadcastFirstActiveThread_UInt32;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt32_args = { &SubgroupBroadcastFirstActiveThread_UInt32_value };

/// subgroupBroadcastFirstActiveThread with UInt32x2
Variable SubgroupBroadcastFirstActiveThread_UInt32x2_value;
Function SubgroupBroadcastFirstActiveThread_UInt32x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt32x2_args = { &SubgroupBroadcastFirstActiveThread_UInt32x2_value };

/// subgroupBroadcastFirstActiveThread with UInt32x3
Variable SubgroupBroadcastFirstActiveThread_UInt32x3_value;
Function SubgroupBroadcastFirstActiveThread_UInt32x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt32x3_args = { &SubgroupBroadcastFirstActiveThread_UInt32x3_value };

/// subgroupBroadcastFirstActiveThread with UInt32x4
Variable SubgroupBroadcastFirstActiveThread_UInt32x4_value;
Function SubgroupBroadcastFirstActiveThread_UInt32x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt32x4_args = { &SubgroupBroadcastFirstActiveThread_UInt32x4_value };

/// subgroupBroadcastFirstActiveThread with UInt16
Variable SubgroupBroadcastFirstActiveThread_UInt16_value;
Function SubgroupBroadcastFirstActiveThread_UInt16;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt16_args = { &SubgroupBroadcastFirstActiveThread_UInt16_value };

/// subgroupBroadcastFirstActiveThread with UInt16x2
Variable SubgroupBroadcastFirstActiveThread_UInt16x2_value;
Function SubgroupBroadcastFirstActiveThread_UInt16x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt16x2_args = { &SubgroupBroadcastFirstActiveThread_UInt16x2_value };

/// subgroupBroadcastFirstActiveThread with UInt16x3
Variable SubgroupBroadcastFirstActiveThread_UInt16x3_value;
Function SubgroupBroadcastFirstActiveThread_UInt16x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt16x3_args = { &SubgroupBroadcastFirstActiveThread_UInt16x3_value };

/// subgroupBroadcastFirstActiveThread with UInt16x4
Variable SubgroupBroadcastFirstActiveThread_UInt16x4_value;
Function SubgroupBroadcastFirstActiveThread_UInt16x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt16x4_args = { &SubgroupBroadcastFirstActiveThread_UInt16x4_value };

/// subgroupBallot with Bool8
Variable SubgroupBallot_predicate;
Function SubgroupBallot;
inline constexpr std::array SubgroupBallot_args = { &SubgroupBallot_predicate };

/// subgroupInverseBallot with Bool8
Variable SubgroupInverseBallot_predicate;
Function SubgroupInverseBallot;
inline constexpr std::array SubgroupInverseBallot_args = { &SubgroupInverseBallot_predicate };

/// subgroupBallotBitCount with UInt32x4
Variable SubgroupBallotBitCount_mask;
Function SubgroupBallotBitCount;
inline constexpr std::array SubgroupBallotBitCount_args = { &SubgroupBallotBitCount_mask };

/// subgroupBallotFirstOne with UInt32x4
Variable SubgroupBallotFirstOne_mask;
Function SubgroupBallotFirstOne;
inline constexpr std::array SubgroupBallotFirstOne_args = { &SubgroupBallotFirstOne_mask };

/// subgroupBallotLastOne with UInt32x4
Variable SubgroupBallotLastOne_mask;
Function SubgroupBallotLastOne;
inline constexpr std::array SubgroupBallotLastOne_args = { &SubgroupBallotLastOne_mask };

/// subgroupBallotBit with UInt32x4, UInt32
Variable SubgroupBallotBit_mask;
Variable SubgroupBallotBit_index;
Function SubgroupBallotBit;
inline constexpr std::array SubgroupBallotBit_args = { &SubgroupBallotBit_mask, &SubgroupBallotBit_index };

/// subgroupSwapDiagonal with Float32
Variable SubgroupSwapDiagonal_Float32_value;
Function SubgroupSwapDiagonal_Float32;
inline constexpr std::array SubgroupSwapDiagonal_Float32_args = { &SubgroupSwapDiagonal_Float32_value };

/// subgroupSwapDiagonal with Float32x2
Variable SubgroupSwapDiagonal_Float32x2_value;
Function SubgroupSwapDiagonal_Float32x2;
inline constexpr std::array SubgroupSwapDiagonal_Float32x2_args = { &SubgroupSwapDiagonal_Float32x2_value };

/// subgroupSwapDiagonal with Float32x3
Variable SubgroupSwapDiagonal_Float32x3_value;
Function SubgroupSwapDiagonal_Float32x3;
inline constexpr std::array SubgroupSwapDiagonal_Float32x3_args = { &SubgroupSwapDiagonal_Float32x3_value };

/// subgroupSwapDiagonal with Float32x4
Variable SubgroupSwapDiagonal_Float32x4_value;
Function SubgroupSwapDiagonal_Float32x4;
inline constexpr std::array SubgroupSwapDiagonal_Float32x4_args = { &SubgroupSwapDiagonal_Float32x4_value };

/// subgroupSwapDiagonal with Float16
Variable SubgroupSwapDiagonal_Float16_value;
Function SubgroupSwapDiagonal_Float16;
inline constexpr std::array SubgroupSwapDiagonal_Float16_args = { &SubgroupSwapDiagonal_Float16_value };

/// subgroupSwapDiagonal with Float16x2
Variable SubgroupSwapDiagonal_Float16x2_value;
Function SubgroupSwapDiagonal_Float16x2;
inline constexpr std::array SubgroupSwapDiagonal_Float16x2_args = { &SubgroupSwapDiagonal_Float16x2_value };

/// subgroupSwapDiagonal with Float16x3
Variable SubgroupSwapDiagonal_Float16x3_value;
Function SubgroupSwapDiagonal_Float16x3;
inline constexpr std::array SubgroupSwapDiagonal_Float16x3_args = { &SubgroupSwapDiagonal_Float16x3_value };

/// subgroupSwapDiagonal with Float16x4
Variable SubgroupSwapDiagonal_Float16x4_value;
Function SubgroupSwapDiagonal_Float16x4;
inline constexpr std::array SubgroupSwapDiagonal_Float16x4_args = { &SubgroupSwapDiagonal_Float16x4_value };

/// subgroupSwapDiagonal with Int32
Variable SubgroupSwapDiagonal_Int32_value;
Function SubgroupSwapDiagonal_Int32;
inline constexpr std::array SubgroupSwapDiagonal_Int32_args = { &SubgroupSwapDiagonal_Int32_value };

/// subgroupSwapDiagonal with Int32x2
Variable SubgroupSwapDiagonal_Int32x2_value;
Function SubgroupSwapDiagonal_Int32x2;
inline constexpr std::array SubgroupSwapDiagonal_Int32x2_args = { &SubgroupSwapDiagonal_Int32x2_value };

/// subgroupSwapDiagonal with Int32x3
Variable SubgroupSwapDiagonal_Int32x3_value;
Function SubgroupSwapDiagonal_Int32x3;
inline constexpr std::array SubgroupSwapDiagonal_Int32x3_args = { &SubgroupSwapDiagonal_Int32x3_value };

/// subgroupSwapDiagonal with Int32x4
Variable SubgroupSwapDiagonal_Int32x4_value;
Function SubgroupSwapDiagonal_Int32x4;
inline constexpr std::array SubgroupSwapDiagonal_Int32x4_args = { &SubgroupSwapDiagonal_Int32x4_value };

/// subgroupSwapDiagonal with Int16
Variable SubgroupSwapDiagonal_Int16_value;
Function SubgroupSwapDiagonal_Int16;
inline constexpr std::array SubgroupSwapDiagonal_Int16_args = { &SubgroupSwapDiagonal_Int16_value };

/// subgroupSwapDiagonal with Int16x2
Variable SubgroupSwapDiagonal_Int16x2_value;
Function SubgroupSwapDiagonal_Int16x2;
inline constexpr std::array SubgroupSwapDiagonal_Int16x2_args = { &SubgroupSwapDiagonal_Int16x2_value };

/// subgroupSwapDiagonal with Int16x3
Variable SubgroupSwapDiagonal_Int16x3_value;
Function SubgroupSwapDiagonal_Int16x3;
inline constexpr std::array SubgroupSwapDiagonal_Int16x3_args = { &SubgroupSwapDiagonal_Int16x3_value };

/// subgroupSwapDiagonal with Int16x4
Variable SubgroupSwapDiagonal_Int16x4_value;
Function SubgroupSwapDiagonal_Int16x4;
inline constexpr std::array SubgroupSwapDiagonal_Int16x4_args = { &SubgroupSwapDiagonal_Int16x4_value };

/// subgroupSwapDiagonal with UInt32
Variable SubgroupSwapDiagonal_UInt32_value;
Function SubgroupSwapDiagonal_UInt32;
inline constexpr std::array SubgroupSwapDiagonal_UInt32_args = { &SubgroupSwapDiagonal_UInt32_value };

/// subgroupSwapDiagonal with UInt32x2
Variable SubgroupSwapDiagonal_UInt32x2_value;
Function SubgroupSwapDiagonal_UInt32x2;
inline constexpr std::array SubgroupSwapDiagonal_UInt32x2_args = { &SubgroupSwapDiagonal_UInt32x2_value };

/// subgroupSwapDiagonal with UInt32x3
Variable SubgroupSwapDiagonal_UInt32x3_value;
Function SubgroupSwapDiagonal_UInt32x3;
inline constexpr std::array SubgroupSwapDiagonal_UInt32x3_args = { &SubgroupSwapDiagonal_UInt32x3_value };

/// subgroupSwapDiagonal with UInt32x4
Variable SubgroupSwapDiagonal_UInt32x4_value;
Function SubgroupSwapDiagonal_UInt32x4;
inline constexpr std::array SubgroupSwapDiagonal_UInt32x4_args = { &SubgroupSwapDiagonal_UInt32x4_value };

/// subgroupSwapDiagonal with UInt16
Variable SubgroupSwapDiagonal_UInt16_value;
Function SubgroupSwapDiagonal_UInt16;
inline constexpr std::array SubgroupSwapDiagonal_UInt16_args = { &SubgroupSwapDiagonal_UInt16_value };

/// subgroupSwapDiagonal with UInt16x2
Variable SubgroupSwapDiagonal_UInt16x2_value;
Function SubgroupSwapDiagonal_UInt16x2;
inline constexpr std::array SubgroupSwapDiagonal_UInt16x2_args = { &SubgroupSwapDiagonal_UInt16x2_value };

/// subgroupSwapDiagonal with UInt16x3
Variable SubgroupSwapDiagonal_UInt16x3_value;
Function SubgroupSwapDiagonal_UInt16x3;
inline constexpr std::array SubgroupSwapDiagonal_UInt16x3_args = { &SubgroupSwapDiagonal_UInt16x3_value };

/// subgroupSwapDiagonal with UInt16x4
Variable SubgroupSwapDiagonal_UInt16x4_value;
Function SubgroupSwapDiagonal_UInt16x4;
inline constexpr std::array SubgroupSwapDiagonal_UInt16x4_args = { &SubgroupSwapDiagonal_UInt16x4_value };

/// subgroupSwapVertical with Float32
Variable SubgroupSwapVertical_Float32_value;
Function SubgroupSwapVertical_Float32;
inline constexpr std::array SubgroupSwapVertical_Float32_args = { &SubgroupSwapVertical_Float32_value };

/// subgroupSwapVertical with Float32x2
Variable SubgroupSwapVertical_Float32x2_value;
Function SubgroupSwapVertical_Float32x2;
inline constexpr std::array SubgroupSwapVertical_Float32x2_args = { &SubgroupSwapVertical_Float32x2_value };

/// subgroupSwapVertical with Float32x3
Variable SubgroupSwapVertical_Float32x3_value;
Function SubgroupSwapVertical_Float32x3;
inline constexpr std::array SubgroupSwapVertical_Float32x3_args = { &SubgroupSwapVertical_Float32x3_value };

/// subgroupSwapVertical with Float32x4
Variable SubgroupSwapVertical_Float32x4_value;
Function SubgroupSwapVertical_Float32x4;
inline constexpr std::array SubgroupSwapVertical_Float32x4_args = { &SubgroupSwapVertical_Float32x4_value };

/// subgroupSwapVertical with Float16
Variable SubgroupSwapVertical_Float16_value;
Function SubgroupSwapVertical_Float16;
inline constexpr std::array SubgroupSwapVertical_Float16_args = { &SubgroupSwapVertical_Float16_value };

/// subgroupSwapVertical with Float16x2
Variable SubgroupSwapVertical_Float16x2_value;
Function SubgroupSwapVertical_Float16x2;
inline constexpr std::array SubgroupSwapVertical_Float16x2_args = { &SubgroupSwapVertical_Float16x2_value };

/// subgroupSwapVertical with Float16x3
Variable SubgroupSwapVertical_Float16x3_value;
Function SubgroupSwapVertical_Float16x3;
inline constexpr std::array SubgroupSwapVertical_Float16x3_args = { &SubgroupSwapVertical_Float16x3_value };

/// subgroupSwapVertical with Float16x4
Variable SubgroupSwapVertical_Float16x4_value;
Function SubgroupSwapVertical_Float16x4;
inline constexpr std::array SubgroupSwapVertical_Float16x4_args = { &SubgroupSwapVertical_Float16x4_value };

/// subgroupSwapVertical with Int32
Variable SubgroupSwapVertical_Int32_value;
Function SubgroupSwapVertical_Int32;
inline constexpr std::array SubgroupSwapVertical_Int32_args = { &SubgroupSwapVertical_Int32_value };

/// subgroupSwapVertical with Int32x2
Variable SubgroupSwapVertical_Int32x2_value;
Function SubgroupSwapVertical_Int32x2;
inline constexpr std::array SubgroupSwapVertical_Int32x2_args = { &SubgroupSwapVertical_Int32x2_value };

/// subgroupSwapVertical with Int32x3
Variable SubgroupSwapVertical_Int32x3_value;
Function SubgroupSwapVertical_Int32x3;
inline constexpr std::array SubgroupSwapVertical_Int32x3_args = { &SubgroupSwapVertical_Int32x3_value };

/// subgroupSwapVertical with Int32x4
Variable SubgroupSwapVertical_Int32x4_value;
Function SubgroupSwapVertical_Int32x4;
inline constexpr std::array SubgroupSwapVertical_Int32x4_args = { &SubgroupSwapVertical_Int32x4_value };

/// subgroupSwapVertical with Int16
Variable SubgroupSwapVertical_Int16_value;
Function SubgroupSwapVertical_Int16;
inline constexpr std::array SubgroupSwapVertical_Int16_args = { &SubgroupSwapVertical_Int16_value };

/// subgroupSwapVertical with Int16x2
Variable SubgroupSwapVertical_Int16x2_value;
Function SubgroupSwapVertical_Int16x2;
inline constexpr std::array SubgroupSwapVertical_Int16x2_args = { &SubgroupSwapVertical_Int16x2_value };

/// subgroupSwapVertical with Int16x3
Variable SubgroupSwapVertical_Int16x3_value;
Function SubgroupSwapVertical_Int16x3;
inline constexpr std::array SubgroupSwapVertical_Int16x3_args = { &SubgroupSwapVertical_Int16x3_value };

/// subgroupSwapVertical with Int16x4
Variable SubgroupSwapVertical_Int16x4_value;
Function SubgroupSwapVertical_Int16x4;
inline constexpr std::array SubgroupSwapVertical_Int16x4_args = { &SubgroupSwapVertical_Int16x4_value };

/// subgroupSwapVertical with UInt32
Variable SubgroupSwapVertical_UInt32_value;
Function SubgroupSwapVertical_UInt32;
inline constexpr std::array SubgroupSwapVertical_UInt32_args = { &SubgroupSwapVertical_UInt32_value };

/// subgroupSwapVertical with UInt32x2
Variable SubgroupSwapVertical_UInt32x2_value;
Function SubgroupSwapVertical_UInt32x2;
inline constexpr std::array SubgroupSwapVertical_UInt32x2_args = { &SubgroupSwapVertical_UInt32x2_value };

/// subgroupSwapVertical with UInt32x3
Variable SubgroupSwapVertical_UInt32x3_value;
Function SubgroupSwapVertical_UInt32x3;
inline constexpr std::array SubgroupSwapVertical_UInt32x3_args = { &SubgroupSwapVertical_UInt32x3_value };

/// subgroupSwapVertical with UInt32x4
Variable SubgroupSwapVertical_UInt32x4_value;
Function SubgroupSwapVertical_UInt32x4;
inline constexpr std::array SubgroupSwapVertical_UInt32x4_args = { &SubgroupSwapVertical_UInt32x4_value };

/// subgroupSwapVertical with UInt16
Variable SubgroupSwapVertical_UInt16_value;
Function SubgroupSwapVertical_UInt16;
inline constexpr std::array SubgroupSwapVertical_UInt16_args = { &SubgroupSwapVertical_UInt16_value };

/// subgroupSwapVertical with UInt16x2
Variable SubgroupSwapVertical_UInt16x2_value;
Function SubgroupSwapVertical_UInt16x2;
inline constexpr std::array SubgroupSwapVertical_UInt16x2_args = { &SubgroupSwapVertical_UInt16x2_value };

/// subgroupSwapVertical with UInt16x3
Variable SubgroupSwapVertical_UInt16x3_value;
Function SubgroupSwapVertical_UInt16x3;
inline constexpr std::array SubgroupSwapVertical_UInt16x3_args = { &SubgroupSwapVertical_UInt16x3_value };

/// subgroupSwapVertical with UInt16x4
Variable SubgroupSwapVertical_UInt16x4_value;
Function SubgroupSwapVertical_UInt16x4;
inline constexpr std::array SubgroupSwapVertical_UInt16x4_args = { &SubgroupSwapVertical_UInt16x4_value };

/// subgroupSwapHorizontal with Float32
Variable SubgroupSwapHorizontal_Float32_value;
Function SubgroupSwapHorizontal_Float32;
inline constexpr std::array SubgroupSwapHorizontal_Float32_args = { &SubgroupSwapHorizontal_Float32_value };

/// subgroupSwapHorizontal with Float32x2
Variable SubgroupSwapHorizontal_Float32x2_value;
Function SubgroupSwapHorizontal_Float32x2;
inline constexpr std::array SubgroupSwapHorizontal_Float32x2_args = { &SubgroupSwapHorizontal_Float32x2_value };

/// subgroupSwapHorizontal with Float32x3
Variable SubgroupSwapHorizontal_Float32x3_value;
Function SubgroupSwapHorizontal_Float32x3;
inline constexpr std::array SubgroupSwapHorizontal_Float32x3_args = { &SubgroupSwapHorizontal_Float32x3_value };

/// subgroupSwapHorizontal with Float32x4
Variable SubgroupSwapHorizontal_Float32x4_value;
Function SubgroupSwapHorizontal_Float32x4;
inline constexpr std::array SubgroupSwapHorizontal_Float32x4_args = { &SubgroupSwapHorizontal_Float32x4_value };

/// subgroupSwapHorizontal with Float16
Variable SubgroupSwapHorizontal_Float16_value;
Function SubgroupSwapHorizontal_Float16;
inline constexpr std::array SubgroupSwapHorizontal_Float16_args = { &SubgroupSwapHorizontal_Float16_value };

/// subgroupSwapHorizontal with Float16x2
Variable SubgroupSwapHorizontal_Float16x2_value;
Function SubgroupSwapHorizontal_Float16x2;
inline constexpr std::array SubgroupSwapHorizontal_Float16x2_args = { &SubgroupSwapHorizontal_Float16x2_value };

/// subgroupSwapHorizontal with Float16x3
Variable SubgroupSwapHorizontal_Float16x3_value;
Function SubgroupSwapHorizontal_Float16x3;
inline constexpr std::array SubgroupSwapHorizontal_Float16x3_args = { &SubgroupSwapHorizontal_Float16x3_value };

/// subgroupSwapHorizontal with Float16x4
Variable SubgroupSwapHorizontal_Float16x4_value;
Function SubgroupSwapHorizontal_Float16x4;
inline constexpr std::array SubgroupSwapHorizontal_Float16x4_args = { &SubgroupSwapHorizontal_Float16x4_value };

/// subgroupSwapHorizontal with Int32
Variable SubgroupSwapHorizontal_Int32_value;
Function SubgroupSwapHorizontal_Int32;
inline constexpr std::array SubgroupSwapHorizontal_Int32_args = { &SubgroupSwapHorizontal_Int32_value };

/// subgroupSwapHorizontal with Int32x2
Variable SubgroupSwapHorizontal_Int32x2_value;
Function SubgroupSwapHorizontal_Int32x2;
inline constexpr std::array SubgroupSwapHorizontal_Int32x2_args = { &SubgroupSwapHorizontal_Int32x2_value };

/// subgroupSwapHorizontal with Int32x3
Variable SubgroupSwapHorizontal_Int32x3_value;
Function SubgroupSwapHorizontal_Int32x3;
inline constexpr std::array SubgroupSwapHorizontal_Int32x3_args = { &SubgroupSwapHorizontal_Int32x3_value };

/// subgroupSwapHorizontal with Int32x4
Variable SubgroupSwapHorizontal_Int32x4_value;
Function SubgroupSwapHorizontal_Int32x4;
inline constexpr std::array SubgroupSwapHorizontal_Int32x4_args = { &SubgroupSwapHorizontal_Int32x4_value };

/// subgroupSwapHorizontal with Int16
Variable SubgroupSwapHorizontal_Int16_value;
Function SubgroupSwapHorizontal_Int16;
inline constexpr std::array SubgroupSwapHorizontal_Int16_args = { &SubgroupSwapHorizontal_Int16_value };

/// subgroupSwapHorizontal with Int16x2
Variable SubgroupSwapHorizontal_Int16x2_value;
Function SubgroupSwapHorizontal_Int16x2;
inline constexpr std::array SubgroupSwapHorizontal_Int16x2_args = { &SubgroupSwapHorizontal_Int16x2_value };

/// subgroupSwapHorizontal with Int16x3
Variable SubgroupSwapHorizontal_Int16x3_value;
Function SubgroupSwapHorizontal_Int16x3;
inline constexpr std::array SubgroupSwapHorizontal_Int16x3_args = { &SubgroupSwapHorizontal_Int16x3_value };

/// subgroupSwapHorizontal with Int16x4
Variable SubgroupSwapHorizontal_Int16x4_value;
Function SubgroupSwapHorizontal_Int16x4;
inline constexpr std::array SubgroupSwapHorizontal_Int16x4_args = { &SubgroupSwapHorizontal_Int16x4_value };

/// subgroupSwapHorizontal with UInt32
Variable SubgroupSwapHorizontal_UInt32_value;
Function SubgroupSwapHorizontal_UInt32;
inline constexpr std::array SubgroupSwapHorizontal_UInt32_args = { &SubgroupSwapHorizontal_UInt32_value };

/// subgroupSwapHorizontal with UInt32x2
Variable SubgroupSwapHorizontal_UInt32x2_value;
Function SubgroupSwapHorizontal_UInt32x2;
inline constexpr std::array SubgroupSwapHorizontal_UInt32x2_args = { &SubgroupSwapHorizontal_UInt32x2_value };

/// subgroupSwapHorizontal with UInt32x3
Variable SubgroupSwapHorizontal_UInt32x3_value;
Function SubgroupSwapHorizontal_UInt32x3;
inline constexpr std::array SubgroupSwapHorizontal_UInt32x3_args = { &SubgroupSwapHorizontal_UInt32x3_value };

/// subgroupSwapHorizontal with UInt32x4
Variable SubgroupSwapHorizontal_UInt32x4_value;
Function SubgroupSwapHorizontal_UInt32x4;
inline constexpr std::array SubgroupSwapHorizontal_UInt32x4_args = { &SubgroupSwapHorizontal_UInt32x4_value };

/// subgroupSwapHorizontal with UInt16
Variable SubgroupSwapHorizontal_UInt16_value;
Function SubgroupSwapHorizontal_UInt16;
inline constexpr std::array SubgroupSwapHorizontal_UInt16_args = { &SubgroupSwapHorizontal_UInt16_value };

/// subgroupSwapHorizontal with UInt16x2
Variable SubgroupSwapHorizontal_UInt16x2_value;
Function SubgroupSwapHorizontal_UInt16x2;
inline constexpr std::array SubgroupSwapHorizontal_UInt16x2_args = { &SubgroupSwapHorizontal_UInt16x2_value };

/// subgroupSwapHorizontal with UInt16x3
Variable SubgroupSwapHorizontal_UInt16x3_value;
Function SubgroupSwapHorizontal_UInt16x3;
inline constexpr std::array SubgroupSwapHorizontal_UInt16x3_args = { &SubgroupSwapHorizontal_UInt16x3_value };

/// subgroupSwapHorizontal with UInt16x4
Variable SubgroupSwapHorizontal_UInt16x4_value;
Function SubgroupSwapHorizontal_UInt16x4;
inline constexpr std::array SubgroupSwapHorizontal_UInt16x4_args = { &SubgroupSwapHorizontal_UInt16x4_value };

/// atomicLoad with UInt32, MemorySemantics
Variable AtomicLoad_UInt32_ptr;
inline constexpr std::array AtomicLoad_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_UInt32_semantics;
Function AtomicLoad_UInt32;
inline constexpr std::array AtomicLoad_UInt32_args = { &AtomicLoad_UInt32_ptr, &AtomicLoad_UInt32_semantics };

/// atomicIncrement with UInt32, MemorySemantics
Variable AtomicIncrement_UInt32_ptr;
inline constexpr std::array AtomicIncrement_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicIncrement_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicIncrement_UInt32_semantics;
Function AtomicIncrement_UInt32;
inline constexpr std::array AtomicIncrement_UInt32_args = { &AtomicIncrement_UInt32_ptr, &AtomicIncrement_UInt32_semantics };

/// atomicDecrement with UInt32, MemorySemantics
Variable AtomicDecrement_UInt32_ptr;
inline constexpr std::array AtomicDecrement_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicDecrement_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicDecrement_UInt32_semantics;
Function AtomicDecrement_UInt32;
inline constexpr std::array AtomicDecrement_UInt32_args = { &AtomicDecrement_UInt32_ptr, &AtomicDecrement_UInt32_semantics };

/// atomicLoad with Int32, MemorySemantics
Variable AtomicLoad_Int32_ptr;
inline constexpr std::array AtomicLoad_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Int32_semantics;
Function AtomicLoad_Int32;
inline constexpr std::array AtomicLoad_Int32_args = { &AtomicLoad_Int32_ptr, &AtomicLoad_Int32_semantics };

/// atomicIncrement with Int32, MemorySemantics
Variable AtomicIncrement_Int32_ptr;
inline constexpr std::array AtomicIncrement_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicIncrement_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicIncrement_Int32_semantics;
Function AtomicIncrement_Int32;
inline constexpr std::array AtomicIncrement_Int32_args = { &AtomicIncrement_Int32_ptr, &AtomicIncrement_Int32_semantics };

/// atomicDecrement with Int32, MemorySemantics
Variable AtomicDecrement_Int32_ptr;
inline constexpr std::array AtomicDecrement_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicDecrement_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicDecrement_Int32_semantics;
Function AtomicDecrement_Int32;
inline constexpr std::array AtomicDecrement_Int32_args = { &AtomicDecrement_Int32_ptr, &AtomicDecrement_Int32_semantics };

/// atomicLoad with UInt16, MemorySemantics
Variable AtomicLoad_UInt16_ptr;
inline constexpr std::array AtomicLoad_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_UInt16_semantics;
Function AtomicLoad_UInt16;
inline constexpr std::array AtomicLoad_UInt16_args = { &AtomicLoad_UInt16_ptr, &AtomicLoad_UInt16_semantics };

/// atomicIncrement with UInt16, MemorySemantics
Variable AtomicIncrement_UInt16_ptr;
inline constexpr std::array AtomicIncrement_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicIncrement_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicIncrement_UInt16_semantics;
Function AtomicIncrement_UInt16;
inline constexpr std::array AtomicIncrement_UInt16_args = { &AtomicIncrement_UInt16_ptr, &AtomicIncrement_UInt16_semantics };

/// atomicDecrement with UInt16, MemorySemantics
Variable AtomicDecrement_UInt16_ptr;
inline constexpr std::array AtomicDecrement_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicDecrement_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicDecrement_UInt16_semantics;
Function AtomicDecrement_UInt16;
inline constexpr std::array AtomicDecrement_UInt16_args = { &AtomicDecrement_UInt16_ptr, &AtomicDecrement_UInt16_semantics };

/// atomicLoad with Int16, MemorySemantics
Variable AtomicLoad_Int16_ptr;
inline constexpr std::array AtomicLoad_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Int16_semantics;
Function AtomicLoad_Int16;
inline constexpr std::array AtomicLoad_Int16_args = { &AtomicLoad_Int16_ptr, &AtomicLoad_Int16_semantics };

/// atomicIncrement with Int16, MemorySemantics
Variable AtomicIncrement_Int16_ptr;
inline constexpr std::array AtomicIncrement_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicIncrement_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicIncrement_Int16_semantics;
Function AtomicIncrement_Int16;
inline constexpr std::array AtomicIncrement_Int16_args = { &AtomicIncrement_Int16_ptr, &AtomicIncrement_Int16_semantics };

/// atomicDecrement with Int16, MemorySemantics
Variable AtomicDecrement_Int16_ptr;
inline constexpr std::array AtomicDecrement_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicDecrement_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicDecrement_Int16_semantics;
Function AtomicDecrement_Int16;
inline constexpr std::array AtomicDecrement_Int16_args = { &AtomicDecrement_Int16_ptr, &AtomicDecrement_Int16_semantics };

/// atomicStore with UInt32, UInt32, MemorySemantics
Variable AtomicStore_UInt32_ptr;
inline constexpr std::array AtomicStore_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_UInt32_value;
Variable AtomicStore_UInt32_semantics;
Function AtomicStore_UInt32;
inline constexpr std::array AtomicStore_UInt32_args = { &AtomicStore_UInt32_ptr, &AtomicStore_UInt32_value, &AtomicStore_UInt32_semantics };

/// atomicExchange with UInt32, UInt32, MemorySemantics
Variable AtomicExchange_UInt32_ptr;
inline constexpr std::array AtomicExchange_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_UInt32_value;
Variable AtomicExchange_UInt32_semantics;
Function AtomicExchange_UInt32;
inline constexpr std::array AtomicExchange_UInt32_args = { &AtomicExchange_UInt32_ptr, &AtomicExchange_UInt32_value, &AtomicExchange_UInt32_semantics };

/// atomicAdd with UInt32, UInt32, MemorySemantics
Variable AtomicAdd_UInt32_ptr;
inline constexpr std::array AtomicAdd_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAdd_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAdd_UInt32_value;
Variable AtomicAdd_UInt32_semantics;
Function AtomicAdd_UInt32;
inline constexpr std::array AtomicAdd_UInt32_args = { &AtomicAdd_UInt32_ptr, &AtomicAdd_UInt32_value, &AtomicAdd_UInt32_semantics };

/// atomicSubtract with UInt32, UInt32, MemorySemantics
Variable AtomicSubtract_UInt32_ptr;
inline constexpr std::array AtomicSubtract_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicSubtract_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicSubtract_UInt32_value;
Variable AtomicSubtract_UInt32_semantics;
Function AtomicSubtract_UInt32;
inline constexpr std::array AtomicSubtract_UInt32_args = { &AtomicSubtract_UInt32_ptr, &AtomicSubtract_UInt32_value, &AtomicSubtract_UInt32_semantics };

/// atomicAnd with UInt32, UInt32, MemorySemantics
Variable AtomicAnd_UInt32_ptr;
inline constexpr std::array AtomicAnd_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAnd_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAnd_UInt32_value;
Variable AtomicAnd_UInt32_semantics;
Function AtomicAnd_UInt32;
inline constexpr std::array AtomicAnd_UInt32_args = { &AtomicAnd_UInt32_ptr, &AtomicAnd_UInt32_value, &AtomicAnd_UInt32_semantics };

/// atomicOr with UInt32, UInt32, MemorySemantics
Variable AtomicOr_UInt32_ptr;
inline constexpr std::array AtomicOr_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicOr_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicOr_UInt32_value;
Variable AtomicOr_UInt32_semantics;
Function AtomicOr_UInt32;
inline constexpr std::array AtomicOr_UInt32_args = { &AtomicOr_UInt32_ptr, &AtomicOr_UInt32_value, &AtomicOr_UInt32_semantics };

/// atomicXor with UInt32, UInt32, MemorySemantics
Variable AtomicXor_UInt32_ptr;
inline constexpr std::array AtomicXor_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicXor_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicXor_UInt32_value;
Variable AtomicXor_UInt32_semantics;
Function AtomicXor_UInt32;
inline constexpr std::array AtomicXor_UInt32_args = { &AtomicXor_UInt32_ptr, &AtomicXor_UInt32_value, &AtomicXor_UInt32_semantics };

/// atomicStore with Int32, Int32, MemorySemantics
Variable AtomicStore_Int32_ptr;
inline constexpr std::array AtomicStore_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Int32_value;
Variable AtomicStore_Int32_semantics;
Function AtomicStore_Int32;
inline constexpr std::array AtomicStore_Int32_args = { &AtomicStore_Int32_ptr, &AtomicStore_Int32_value, &AtomicStore_Int32_semantics };

/// atomicExchange with Int32, Int32, MemorySemantics
Variable AtomicExchange_Int32_ptr;
inline constexpr std::array AtomicExchange_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Int32_value;
Variable AtomicExchange_Int32_semantics;
Function AtomicExchange_Int32;
inline constexpr std::array AtomicExchange_Int32_args = { &AtomicExchange_Int32_ptr, &AtomicExchange_Int32_value, &AtomicExchange_Int32_semantics };

/// atomicAdd with Int32, Int32, MemorySemantics
Variable AtomicAdd_Int32_ptr;
inline constexpr std::array AtomicAdd_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAdd_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAdd_Int32_value;
Variable AtomicAdd_Int32_semantics;
Function AtomicAdd_Int32;
inline constexpr std::array AtomicAdd_Int32_args = { &AtomicAdd_Int32_ptr, &AtomicAdd_Int32_value, &AtomicAdd_Int32_semantics };

/// atomicSubtract with Int32, Int32, MemorySemantics
Variable AtomicSubtract_Int32_ptr;
inline constexpr std::array AtomicSubtract_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicSubtract_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicSubtract_Int32_value;
Variable AtomicSubtract_Int32_semantics;
Function AtomicSubtract_Int32;
inline constexpr std::array AtomicSubtract_Int32_args = { &AtomicSubtract_Int32_ptr, &AtomicSubtract_Int32_value, &AtomicSubtract_Int32_semantics };

/// atomicAnd with Int32, Int32, MemorySemantics
Variable AtomicAnd_Int32_ptr;
inline constexpr std::array AtomicAnd_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAnd_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAnd_Int32_value;
Variable AtomicAnd_Int32_semantics;
Function AtomicAnd_Int32;
inline constexpr std::array AtomicAnd_Int32_args = { &AtomicAnd_Int32_ptr, &AtomicAnd_Int32_value, &AtomicAnd_Int32_semantics };

/// atomicOr with Int32, Int32, MemorySemantics
Variable AtomicOr_Int32_ptr;
inline constexpr std::array AtomicOr_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicOr_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicOr_Int32_value;
Variable AtomicOr_Int32_semantics;
Function AtomicOr_Int32;
inline constexpr std::array AtomicOr_Int32_args = { &AtomicOr_Int32_ptr, &AtomicOr_Int32_value, &AtomicOr_Int32_semantics };

/// atomicXor with Int32, Int32, MemorySemantics
Variable AtomicXor_Int32_ptr;
inline constexpr std::array AtomicXor_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicXor_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicXor_Int32_value;
Variable AtomicXor_Int32_semantics;
Function AtomicXor_Int32;
inline constexpr std::array AtomicXor_Int32_args = { &AtomicXor_Int32_ptr, &AtomicXor_Int32_value, &AtomicXor_Int32_semantics };

/// atomicStore with UInt16, UInt16, MemorySemantics
Variable AtomicStore_UInt16_ptr;
inline constexpr std::array AtomicStore_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_UInt16_value;
Variable AtomicStore_UInt16_semantics;
Function AtomicStore_UInt16;
inline constexpr std::array AtomicStore_UInt16_args = { &AtomicStore_UInt16_ptr, &AtomicStore_UInt16_value, &AtomicStore_UInt16_semantics };

/// atomicExchange with UInt16, UInt16, MemorySemantics
Variable AtomicExchange_UInt16_ptr;
inline constexpr std::array AtomicExchange_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_UInt16_value;
Variable AtomicExchange_UInt16_semantics;
Function AtomicExchange_UInt16;
inline constexpr std::array AtomicExchange_UInt16_args = { &AtomicExchange_UInt16_ptr, &AtomicExchange_UInt16_value, &AtomicExchange_UInt16_semantics };

/// atomicAdd with UInt16, UInt16, MemorySemantics
Variable AtomicAdd_UInt16_ptr;
inline constexpr std::array AtomicAdd_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAdd_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAdd_UInt16_value;
Variable AtomicAdd_UInt16_semantics;
Function AtomicAdd_UInt16;
inline constexpr std::array AtomicAdd_UInt16_args = { &AtomicAdd_UInt16_ptr, &AtomicAdd_UInt16_value, &AtomicAdd_UInt16_semantics };

/// atomicSubtract with UInt16, UInt16, MemorySemantics
Variable AtomicSubtract_UInt16_ptr;
inline constexpr std::array AtomicSubtract_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicSubtract_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicSubtract_UInt16_value;
Variable AtomicSubtract_UInt16_semantics;
Function AtomicSubtract_UInt16;
inline constexpr std::array AtomicSubtract_UInt16_args = { &AtomicSubtract_UInt16_ptr, &AtomicSubtract_UInt16_value, &AtomicSubtract_UInt16_semantics };

/// atomicAnd with UInt16, UInt16, MemorySemantics
Variable AtomicAnd_UInt16_ptr;
inline constexpr std::array AtomicAnd_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAnd_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAnd_UInt16_value;
Variable AtomicAnd_UInt16_semantics;
Function AtomicAnd_UInt16;
inline constexpr std::array AtomicAnd_UInt16_args = { &AtomicAnd_UInt16_ptr, &AtomicAnd_UInt16_value, &AtomicAnd_UInt16_semantics };

/// atomicOr with UInt16, UInt16, MemorySemantics
Variable AtomicOr_UInt16_ptr;
inline constexpr std::array AtomicOr_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicOr_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicOr_UInt16_value;
Variable AtomicOr_UInt16_semantics;
Function AtomicOr_UInt16;
inline constexpr std::array AtomicOr_UInt16_args = { &AtomicOr_UInt16_ptr, &AtomicOr_UInt16_value, &AtomicOr_UInt16_semantics };

/// atomicXor with UInt16, UInt16, MemorySemantics
Variable AtomicXor_UInt16_ptr;
inline constexpr std::array AtomicXor_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicXor_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicXor_UInt16_value;
Variable AtomicXor_UInt16_semantics;
Function AtomicXor_UInt16;
inline constexpr std::array AtomicXor_UInt16_args = { &AtomicXor_UInt16_ptr, &AtomicXor_UInt16_value, &AtomicXor_UInt16_semantics };

/// atomicStore with Int16, Int16, MemorySemantics
Variable AtomicStore_Int16_ptr;
inline constexpr std::array AtomicStore_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Int16_value;
Variable AtomicStore_Int16_semantics;
Function AtomicStore_Int16;
inline constexpr std::array AtomicStore_Int16_args = { &AtomicStore_Int16_ptr, &AtomicStore_Int16_value, &AtomicStore_Int16_semantics };

/// atomicExchange with Int16, Int16, MemorySemantics
Variable AtomicExchange_Int16_ptr;
inline constexpr std::array AtomicExchange_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Int16_value;
Variable AtomicExchange_Int16_semantics;
Function AtomicExchange_Int16;
inline constexpr std::array AtomicExchange_Int16_args = { &AtomicExchange_Int16_ptr, &AtomicExchange_Int16_value, &AtomicExchange_Int16_semantics };

/// atomicAdd with Int16, Int16, MemorySemantics
Variable AtomicAdd_Int16_ptr;
inline constexpr std::array AtomicAdd_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAdd_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAdd_Int16_value;
Variable AtomicAdd_Int16_semantics;
Function AtomicAdd_Int16;
inline constexpr std::array AtomicAdd_Int16_args = { &AtomicAdd_Int16_ptr, &AtomicAdd_Int16_value, &AtomicAdd_Int16_semantics };

/// atomicSubtract with Int16, Int16, MemorySemantics
Variable AtomicSubtract_Int16_ptr;
inline constexpr std::array AtomicSubtract_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicSubtract_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicSubtract_Int16_value;
Variable AtomicSubtract_Int16_semantics;
Function AtomicSubtract_Int16;
inline constexpr std::array AtomicSubtract_Int16_args = { &AtomicSubtract_Int16_ptr, &AtomicSubtract_Int16_value, &AtomicSubtract_Int16_semantics };

/// atomicAnd with Int16, Int16, MemorySemantics
Variable AtomicAnd_Int16_ptr;
inline constexpr std::array AtomicAnd_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAnd_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAnd_Int16_value;
Variable AtomicAnd_Int16_semantics;
Function AtomicAnd_Int16;
inline constexpr std::array AtomicAnd_Int16_args = { &AtomicAnd_Int16_ptr, &AtomicAnd_Int16_value, &AtomicAnd_Int16_semantics };

/// atomicOr with Int16, Int16, MemorySemantics
Variable AtomicOr_Int16_ptr;
inline constexpr std::array AtomicOr_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicOr_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicOr_Int16_value;
Variable AtomicOr_Int16_semantics;
Function AtomicOr_Int16;
inline constexpr std::array AtomicOr_Int16_args = { &AtomicOr_Int16_ptr, &AtomicOr_Int16_value, &AtomicOr_Int16_semantics };

/// atomicXor with Int16, Int16, MemorySemantics
Variable AtomicXor_Int16_ptr;
inline constexpr std::array AtomicXor_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicXor_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicXor_Int16_value;
Variable AtomicXor_Int16_semantics;
Function AtomicXor_Int16;
inline constexpr std::array AtomicXor_Int16_args = { &AtomicXor_Int16_ptr, &AtomicXor_Int16_value, &AtomicXor_Int16_semantics };

/// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
Variable AtomicCompareExchange_UInt32_ptr;
inline constexpr std::array AtomicCompareExchange_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicCompareExchange_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicCompareExchange_UInt32_value;
Variable AtomicCompareExchange_UInt32_compare;
Variable AtomicCompareExchange_UInt32_semantics;
Function AtomicCompareExchange_UInt32;
inline constexpr std::array AtomicCompareExchange_UInt32_args = { &AtomicCompareExchange_UInt32_ptr, &AtomicCompareExchange_UInt32_value, &AtomicCompareExchange_UInt32_compare, &AtomicCompareExchange_UInt32_semantics };

/// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
Variable AtomicCompareExchange_Int32_ptr;
inline constexpr std::array AtomicCompareExchange_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicCompareExchange_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicCompareExchange_Int32_value;
Variable AtomicCompareExchange_Int32_compare;
Variable AtomicCompareExchange_Int32_semantics;
Function AtomicCompareExchange_Int32;
inline constexpr std::array AtomicCompareExchange_Int32_args = { &AtomicCompareExchange_Int32_ptr, &AtomicCompareExchange_Int32_value, &AtomicCompareExchange_Int32_compare, &AtomicCompareExchange_Int32_semantics };

/// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
Variable AtomicCompareExchange_UInt16_ptr;
inline constexpr std::array AtomicCompareExchange_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicCompareExchange_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicCompareExchange_UInt16_value;
Variable AtomicCompareExchange_UInt16_compare;
Variable AtomicCompareExchange_UInt16_semantics;
Function AtomicCompareExchange_UInt16;
inline constexpr std::array AtomicCompareExchange_UInt16_args = { &AtomicCompareExchange_UInt16_ptr, &AtomicCompareExchange_UInt16_value, &AtomicCompareExchange_UInt16_compare, &AtomicCompareExchange_UInt16_semantics };

/// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
Variable AtomicCompareExchange_Int16_ptr;
inline constexpr std::array AtomicCompareExchange_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicCompareExchange_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicCompareExchange_Int16_value;
Variable AtomicCompareExchange_Int16_compare;
Variable AtomicCompareExchange_Int16_semantics;
Function AtomicCompareExchange_Int16;
inline constexpr std::array AtomicCompareExchange_Int16_args = { &AtomicCompareExchange_Int16_ptr, &AtomicCompareExchange_Int16_value, &AtomicCompareExchange_Int16_compare, &AtomicCompareExchange_Int16_semantics };

/// bitInsert with UInt16, UInt16, UInt16, UInt16
Variable BitInsert_UInt16_base;
Variable BitInsert_UInt16_value;
Variable BitInsert_UInt16_offset;
Variable BitInsert_UInt16_count;
Function BitInsert_UInt16;
inline constexpr std::array BitInsert_UInt16_args = { &BitInsert_UInt16_base, &BitInsert_UInt16_value, &BitInsert_UInt16_offset, &BitInsert_UInt16_count };

/// bitInsert with UInt32, UInt32, UInt32, UInt32
Variable BitInsert_UInt32_base;
Variable BitInsert_UInt32_value;
Variable BitInsert_UInt32_offset;
Variable BitInsert_UInt32_count;
Function BitInsert_UInt32;
inline constexpr std::array BitInsert_UInt32_args = { &BitInsert_UInt32_base, &BitInsert_UInt32_value, &BitInsert_UInt32_offset, &BitInsert_UInt32_count };

/// bitExtract with UInt32, UInt32, UInt32
Variable BitExtract_UInt32_base;
Variable BitExtract_UInt32_offset;
Variable BitExtract_UInt32_count;
Function BitExtract_UInt32;
inline constexpr std::array BitExtract_UInt32_args = { &BitExtract_UInt32_base, &BitExtract_UInt32_offset, &BitExtract_UInt32_count };

/// bitExtract with Int32, Int32, Int32
Variable BitExtract_Int32_base;
Variable BitExtract_Int32_offset;
Variable BitExtract_Int32_count;
Function BitExtract_Int32;
inline constexpr std::array BitExtract_Int32_args = { &BitExtract_Int32_base, &BitExtract_Int32_offset, &BitExtract_Int32_count };

/// bitExtract with UInt16, UInt16, UInt16
Variable BitExtract_UInt16_base;
Variable BitExtract_UInt16_offset;
Variable BitExtract_UInt16_count;
Function BitExtract_UInt16;
inline constexpr std::array BitExtract_UInt16_args = { &BitExtract_UInt16_base, &BitExtract_UInt16_offset, &BitExtract_UInt16_count };

/// bitExtract with Int16, Int16, Int16
Variable BitExtract_Int16_base;
Variable BitExtract_Int16_offset;
Variable BitExtract_Int16_count;
Function BitExtract_Int16;
inline constexpr std::array BitExtract_Int16_args = { &BitExtract_Int16_base, &BitExtract_Int16_offset, &BitExtract_Int16_count };

/// bitReverse with UInt32
Variable BitReverse_UInt32_base;
Function BitReverse_UInt32;
inline constexpr std::array BitReverse_UInt32_args = { &BitReverse_UInt32_base };

/// bitReverse with Int32
Variable BitReverse_Int32_base;
Function BitReverse_Int32;
inline constexpr std::array BitReverse_Int32_args = { &BitReverse_Int32_base };

/// bitReverse with UInt16
Variable BitReverse_UInt16_base;
Function BitReverse_UInt16;
inline constexpr std::array BitReverse_UInt16_args = { &BitReverse_UInt16_base };

/// bitReverse with Int16
Variable BitReverse_Int16_base;
Function BitReverse_Int16;
inline constexpr std::array BitReverse_Int16_args = { &BitReverse_Int16_base };

/// bitCount with UInt32
Variable BitCount_UInt32_base;
Function BitCount_UInt32;
inline constexpr std::array BitCount_UInt32_args = { &BitCount_UInt32_base };

/// bitCount with Int32
Variable BitCount_Int32_base;
Function BitCount_Int32;
inline constexpr std::array BitCount_Int32_args = { &BitCount_Int32_base };

/// bitCount with UInt16
Variable BitCount_UInt16_base;
Function BitCount_UInt16;
inline constexpr std::array BitCount_UInt16_args = { &BitCount_UInt16_base };

/// bitCount with Int16
Variable BitCount_Int16_base;
Function BitCount_Int16;
inline constexpr std::array BitCount_Int16_args = { &BitCount_Int16_base };

/// executionBarrier
Function ExecutionBarrier;

/// executionBarrierSubgroup
Function ExecutionBarrierSubgroup;

/// executionBarrierWorkgroup
Function ExecutionBarrierWorkgroup;

/// memoryBarrier
Function MemoryBarrier;

/// memoryBarrierBuffer
Function MemoryBarrierBuffer;

/// memoryBarrierTexture
Function MemoryBarrierTexture;

/// memoryBarrierAtomic
Function MemoryBarrierAtomic;

/// memoryBarrierSubgroup
Function MemoryBarrierSubgroup;

/// memoryBarrierWorkgroup
Function MemoryBarrierWorkgroup;

/// textureGetSize with Texture1D
Variable TextureGetSize_Texture1D_texture;
inline constexpr std::array TextureGetSize_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_Texture1D;
inline constexpr std::array TextureGetSize_Texture1D_args = { &TextureGetSize_Texture1D_texture };

/// textureGetSize with Texture2D
Variable TextureGetSize_Texture2D_texture;
inline constexpr std::array TextureGetSize_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_Texture2D;
inline constexpr std::array TextureGetSize_Texture2D_args = { &TextureGetSize_Texture2D_texture };

/// textureGetSize with Texture3D
Variable TextureGetSize_Texture3D_texture;
inline constexpr std::array TextureGetSize_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_Texture3D;
inline constexpr std::array TextureGetSize_Texture3D_args = { &TextureGetSize_Texture3D_texture };

/// textureGetSize with TextureCube
Variable TextureGetSize_TextureCube_texture;
inline constexpr std::array TextureGetSize_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_TextureCube;
inline constexpr std::array TextureGetSize_TextureCube_args = { &TextureGetSize_TextureCube_texture };

/// textureGetSize with Texture1DArray
Variable TextureGetSize_Texture1DArray_texture;
inline constexpr std::array TextureGetSize_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_Texture1DArray;
inline constexpr std::array TextureGetSize_Texture1DArray_args = { &TextureGetSize_Texture1DArray_texture };

/// textureGetSize with Texture2DArray
Variable TextureGetSize_Texture2DArray_texture;
inline constexpr std::array TextureGetSize_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_Texture2DArray;
inline constexpr std::array TextureGetSize_Texture2DArray_args = { &TextureGetSize_Texture2DArray_texture };

/// textureGetSize with TextureCubeArray
Variable TextureGetSize_TextureCubeArray_texture;
inline constexpr std::array TextureGetSize_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSize_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSize_TextureCubeArray;
inline constexpr std::array TextureGetSize_TextureCubeArray_args = { &TextureGetSize_TextureCubeArray_texture };

/// textureGetSizeMip with Texture1D, UInt32
Variable TextureGetSizeMip_Texture1D_texture;
inline constexpr std::array TextureGetSizeMip_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_Texture1D_mip;
Function TextureGetSizeMip_Texture1D;
inline constexpr std::array TextureGetSizeMip_Texture1D_args = { &TextureGetSizeMip_Texture1D_texture, &TextureGetSizeMip_Texture1D_mip };

/// textureGetSizeMip with Texture2D, UInt32
Variable TextureGetSizeMip_Texture2D_texture;
inline constexpr std::array TextureGetSizeMip_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_Texture2D_mip;
Function TextureGetSizeMip_Texture2D;
inline constexpr std::array TextureGetSizeMip_Texture2D_args = { &TextureGetSizeMip_Texture2D_texture, &TextureGetSizeMip_Texture2D_mip };

/// textureGetSizeMip with Texture3D, UInt32
Variable TextureGetSizeMip_Texture3D_texture;
inline constexpr std::array TextureGetSizeMip_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_Texture3D_mip;
Function TextureGetSizeMip_Texture3D;
inline constexpr std::array TextureGetSizeMip_Texture3D_args = { &TextureGetSizeMip_Texture3D_texture, &TextureGetSizeMip_Texture3D_mip };

/// textureGetSizeMip with TextureCube, UInt32
Variable TextureGetSizeMip_TextureCube_texture;
inline constexpr std::array TextureGetSizeMip_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_TextureCube_mip;
Function TextureGetSizeMip_TextureCube;
inline constexpr std::array TextureGetSizeMip_TextureCube_args = { &TextureGetSizeMip_TextureCube_texture, &TextureGetSizeMip_TextureCube_mip };

/// textureGetSizeMip with Texture1DArray, UInt32
Variable TextureGetSizeMip_Texture1DArray_texture;
inline constexpr std::array TextureGetSizeMip_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_Texture1DArray_mip;
Function TextureGetSizeMip_Texture1DArray;
inline constexpr std::array TextureGetSizeMip_Texture1DArray_args = { &TextureGetSizeMip_Texture1DArray_texture, &TextureGetSizeMip_Texture1DArray_mip };

/// textureGetSizeMip with Texture2DArray, UInt32
Variable TextureGetSizeMip_Texture2DArray_texture;
inline constexpr std::array TextureGetSizeMip_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_Texture2DArray_mip;
Function TextureGetSizeMip_Texture2DArray;
inline constexpr std::array TextureGetSizeMip_Texture2DArray_args = { &TextureGetSizeMip_Texture2DArray_texture, &TextureGetSizeMip_Texture2DArray_mip };

/// textureGetSizeMip with TextureCubeArray, UInt32
Variable TextureGetSizeMip_TextureCubeArray_texture;
inline constexpr std::array TextureGetSizeMip_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSizeMip_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSizeMip_TextureCubeArray_mip;
Function TextureGetSizeMip_TextureCubeArray;
inline constexpr std::array TextureGetSizeMip_TextureCubeArray_args = { &TextureGetSizeMip_TextureCubeArray_texture, &TextureGetSizeMip_TextureCubeArray_mip };

/// textureGetMips with Texture1D
Variable TextureGetMips_Texture1D_texture;
inline constexpr std::array TextureGetMips_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_Texture1D;
inline constexpr std::array TextureGetMips_Texture1D_args = { &TextureGetMips_Texture1D_texture };

/// textureGetMips with Texture2D
Variable TextureGetMips_Texture2D_texture;
inline constexpr std::array TextureGetMips_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_Texture2D;
inline constexpr std::array TextureGetMips_Texture2D_args = { &TextureGetMips_Texture2D_texture };

/// textureGetMips with Texture3D
Variable TextureGetMips_Texture3D_texture;
inline constexpr std::array TextureGetMips_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_Texture3D;
inline constexpr std::array TextureGetMips_Texture3D_args = { &TextureGetMips_Texture3D_texture };

/// textureGetMips with TextureCube
Variable TextureGetMips_TextureCube_texture;
inline constexpr std::array TextureGetMips_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_TextureCube;
inline constexpr std::array TextureGetMips_TextureCube_args = { &TextureGetMips_TextureCube_texture };

/// textureGetMips with Texture1DArray
Variable TextureGetMips_Texture1DArray_texture;
inline constexpr std::array TextureGetMips_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_Texture1DArray;
inline constexpr std::array TextureGetMips_Texture1DArray_args = { &TextureGetMips_Texture1DArray_texture };

/// textureGetMips with Texture2DArray
Variable TextureGetMips_Texture2DArray_texture;
inline constexpr std::array TextureGetMips_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_Texture2DArray;
inline constexpr std::array TextureGetMips_Texture2DArray_args = { &TextureGetMips_Texture2DArray_texture };

/// textureGetMips with TextureCubeArray
Variable TextureGetMips_TextureCubeArray_texture;
inline constexpr std::array TextureGetMips_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetMips_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetMips_TextureCubeArray;
inline constexpr std::array TextureGetMips_TextureCubeArray_args = { &TextureGetMips_TextureCubeArray_texture };

/// textureGetSamples with Texture2DMS
Variable TextureGetSamples_Texture2DMS_texture;
inline constexpr std::array TextureGetSamples_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSamples_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSamples_Texture2DMS;
inline constexpr std::array TextureGetSamples_Texture2DMS_args = { &TextureGetSamples_Texture2DMS_texture };

/// textureGetSamples with Texture2DMSArray
Variable TextureGetSamples_Texture2DMSArray_texture;
inline constexpr std::array TextureGetSamples_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSamples_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Function TextureGetSamples_Texture2DMSArray;
inline constexpr std::array TextureGetSamples_Texture2DMSArray_args = { &TextureGetSamples_Texture2DMSArray_texture };

/// textureGetSampledMip with Texture1D, Sampler, Float32
Variable TextureGetSampledMip_Texture1D_texture;
inline constexpr std::array TextureGetSampledMip_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture1D_sampler;
inline constexpr std::array TextureGetSampledMip_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture1D_coordinate;
Function TextureGetSampledMip_Texture1D;
inline constexpr std::array TextureGetSampledMip_Texture1D_args = { &TextureGetSampledMip_Texture1D_texture, &TextureGetSampledMip_Texture1D_sampler, &TextureGetSampledMip_Texture1D_coordinate };

/// textureGetSampledMip with SampledTexture1D, Float32
Variable SampledTextureGetSampledMip_Texture1D_texture;
inline constexpr std::array SampledTextureGetSampledMip_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_Texture1D_coordinate;
Function SampledTextureGetSampledMip_Texture1D;
inline constexpr std::array SampledTextureGetSampledMip_Texture1D_args = { &SampledTextureGetSampledMip_Texture1D_texture, &SampledTextureGetSampledMip_Texture1D_coordinate };

/// textureGetSampledMip with Texture2D, Sampler, Float32x2
Variable TextureGetSampledMip_Texture2D_texture;
inline constexpr std::array TextureGetSampledMip_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture2D_sampler;
inline constexpr std::array TextureGetSampledMip_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture2D_coordinate;
Function TextureGetSampledMip_Texture2D;
inline constexpr std::array TextureGetSampledMip_Texture2D_args = { &TextureGetSampledMip_Texture2D_texture, &TextureGetSampledMip_Texture2D_sampler, &TextureGetSampledMip_Texture2D_coordinate };

/// textureGetSampledMip with SampledTexture2D, Float32x2
Variable SampledTextureGetSampledMip_Texture2D_texture;
inline constexpr std::array SampledTextureGetSampledMip_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_Texture2D_coordinate;
Function SampledTextureGetSampledMip_Texture2D;
inline constexpr std::array SampledTextureGetSampledMip_Texture2D_args = { &SampledTextureGetSampledMip_Texture2D_texture, &SampledTextureGetSampledMip_Texture2D_coordinate };

/// textureGetSampledMip with Texture3D, Sampler, Float32x3
Variable TextureGetSampledMip_Texture3D_texture;
inline constexpr std::array TextureGetSampledMip_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture3D_sampler;
inline constexpr std::array TextureGetSampledMip_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture3D_coordinate;
Function TextureGetSampledMip_Texture3D;
inline constexpr std::array TextureGetSampledMip_Texture3D_args = { &TextureGetSampledMip_Texture3D_texture, &TextureGetSampledMip_Texture3D_sampler, &TextureGetSampledMip_Texture3D_coordinate };

/// textureGetSampledMip with SampledTexture3D, Float32x3
Variable SampledTextureGetSampledMip_Texture3D_texture;
inline constexpr std::array SampledTextureGetSampledMip_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_Texture3D_coordinate;
Function SampledTextureGetSampledMip_Texture3D;
inline constexpr std::array SampledTextureGetSampledMip_Texture3D_args = { &SampledTextureGetSampledMip_Texture3D_texture, &SampledTextureGetSampledMip_Texture3D_coordinate };

/// textureGetSampledMip with TextureCube, Sampler, Float32x3
Variable TextureGetSampledMip_TextureCube_texture;
inline constexpr std::array TextureGetSampledMip_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_TextureCube_sampler;
inline constexpr std::array TextureGetSampledMip_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_TextureCube_coordinate;
Function TextureGetSampledMip_TextureCube;
inline constexpr std::array TextureGetSampledMip_TextureCube_args = { &TextureGetSampledMip_TextureCube_texture, &TextureGetSampledMip_TextureCube_sampler, &TextureGetSampledMip_TextureCube_coordinate };

/// textureGetSampledMip with SampledTextureCube, Float32x3
Variable SampledTextureGetSampledMip_TextureCube_texture;
inline constexpr std::array SampledTextureGetSampledMip_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_TextureCube_coordinate;
Function SampledTextureGetSampledMip_TextureCube;
inline constexpr std::array SampledTextureGetSampledMip_TextureCube_args = { &SampledTextureGetSampledMip_TextureCube_texture, &SampledTextureGetSampledMip_TextureCube_coordinate };

/// textureGetSampledMip with Texture1DArray, Sampler, Float32x2
Variable TextureGetSampledMip_Texture1DArray_texture;
inline constexpr std::array TextureGetSampledMip_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture1DArray_sampler;
inline constexpr std::array TextureGetSampledMip_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture1DArray_coordinate;
Function TextureGetSampledMip_Texture1DArray;
inline constexpr std::array TextureGetSampledMip_Texture1DArray_args = { &TextureGetSampledMip_Texture1DArray_texture, &TextureGetSampledMip_Texture1DArray_sampler, &TextureGetSampledMip_Texture1DArray_coordinate };

/// textureGetSampledMip with SampledTexture1DArray, Float32x2
Variable SampledTextureGetSampledMip_Texture1DArray_texture;
inline constexpr std::array SampledTextureGetSampledMip_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_Texture1DArray_coordinate;
Function SampledTextureGetSampledMip_Texture1DArray;
inline constexpr std::array SampledTextureGetSampledMip_Texture1DArray_args = { &SampledTextureGetSampledMip_Texture1DArray_texture, &SampledTextureGetSampledMip_Texture1DArray_coordinate };

/// textureGetSampledMip with Texture2DArray, Sampler, Float32x3
Variable TextureGetSampledMip_Texture2DArray_texture;
inline constexpr std::array TextureGetSampledMip_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture2DArray_sampler;
inline constexpr std::array TextureGetSampledMip_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_Texture2DArray_coordinate;
Function TextureGetSampledMip_Texture2DArray;
inline constexpr std::array TextureGetSampledMip_Texture2DArray_args = { &TextureGetSampledMip_Texture2DArray_texture, &TextureGetSampledMip_Texture2DArray_sampler, &TextureGetSampledMip_Texture2DArray_coordinate };

/// textureGetSampledMip with SampledTexture2DArray, Float32x3
Variable SampledTextureGetSampledMip_Texture2DArray_texture;
inline constexpr std::array SampledTextureGetSampledMip_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_Texture2DArray_coordinate;
Function SampledTextureGetSampledMip_Texture2DArray;
inline constexpr std::array SampledTextureGetSampledMip_Texture2DArray_args = { &SampledTextureGetSampledMip_Texture2DArray_texture, &SampledTextureGetSampledMip_Texture2DArray_coordinate };

/// textureGetSampledMip with TextureCubeArray, Sampler, Float32x4
Variable TextureGetSampledMip_TextureCubeArray_texture;
inline constexpr std::array TextureGetSampledMip_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_TextureCubeArray_sampler;
inline constexpr std::array TextureGetSampledMip_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGetSampledMip_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGetSampledMip_TextureCubeArray_coordinate;
Function TextureGetSampledMip_TextureCubeArray;
inline constexpr std::array TextureGetSampledMip_TextureCubeArray_args = { &TextureGetSampledMip_TextureCubeArray_texture, &TextureGetSampledMip_TextureCubeArray_sampler, &TextureGetSampledMip_TextureCubeArray_coordinate };

/// textureGetSampledMip with SampledTextureCubeArray, Float32x4
Variable SampledTextureGetSampledMip_TextureCubeArray_texture;
inline constexpr std::array SampledTextureGetSampledMip_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGetSampledMip_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGetSampledMip_TextureCubeArray_coordinate;
Function SampledTextureGetSampledMip_TextureCubeArray;
inline constexpr std::array SampledTextureGetSampledMip_TextureCubeArray_args = { &SampledTextureGetSampledMip_TextureCubeArray_texture, &SampledTextureGetSampledMip_TextureCubeArray_coordinate };

/// textureLoad with Texture1D, Int32
Variable TextureLoad_Texture1D_texture;
inline constexpr std::array TextureLoad_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture1D_coordinate;
Function TextureLoad_Texture1D;
inline constexpr std::array TextureLoad_Texture1D_args = { &TextureLoad_Texture1D_texture, &TextureLoad_Texture1D_coordinate };

/// textureLoadMip with Texture1D, Int32, Int32
Variable TextureLoadMip_Texture1D_texture;
inline constexpr std::array TextureLoadMip_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture1D_coordinate;
Variable TextureLoadMip_Texture1D_mip;
Function TextureLoadMip_Texture1D;
inline constexpr std::array TextureLoadMip_Texture1D_args = { &TextureLoadMip_Texture1D_texture, &TextureLoadMip_Texture1D_coordinate, &TextureLoadMip_Texture1D_mip };

/// textureStore with Texture1D, Int32, Float32x4
Variable TextureStore_Texture1D_texture;
inline constexpr std::array TextureStore_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture1D_coordinate;
Variable TextureStore_Texture1D_value;
Function TextureStore_Texture1D;
inline constexpr std::array TextureStore_Texture1D_args = { &TextureStore_Texture1D_texture, &TextureStore_Texture1D_coordinate, &TextureStore_Texture1D_value };

/// textureStoreMip with Texture1D, Int32, Int32, Float32x4
Variable TextureStoreMip_Texture1D_texture;
inline constexpr std::array TextureStoreMip_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture1D_coordinate;
Variable TextureStoreMip_Texture1D_mip;
Variable TextureStoreMip_Texture1D_value;
Function TextureStoreMip_Texture1D;
inline constexpr std::array TextureStoreMip_Texture1D_args = { &TextureStoreMip_Texture1D_texture, &TextureStoreMip_Texture1D_coordinate, &TextureStoreMip_Texture1D_mip, &TextureStoreMip_Texture1D_value };

/// textureLoad with Texture2D, Int32x2
Variable TextureLoad_Texture2D_texture;
inline constexpr std::array TextureLoad_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture2D_coordinate;
Function TextureLoad_Texture2D;
inline constexpr std::array TextureLoad_Texture2D_args = { &TextureLoad_Texture2D_texture, &TextureLoad_Texture2D_coordinate };

/// textureLoadMip with Texture2D, Int32x2, Int32
Variable TextureLoadMip_Texture2D_texture;
inline constexpr std::array TextureLoadMip_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture2D_coordinate;
Variable TextureLoadMip_Texture2D_mip;
Function TextureLoadMip_Texture2D;
inline constexpr std::array TextureLoadMip_Texture2D_args = { &TextureLoadMip_Texture2D_texture, &TextureLoadMip_Texture2D_coordinate, &TextureLoadMip_Texture2D_mip };

/// textureStore with Texture2D, Int32x2, Float32x4
Variable TextureStore_Texture2D_texture;
inline constexpr std::array TextureStore_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture2D_coordinate;
Variable TextureStore_Texture2D_value;
Function TextureStore_Texture2D;
inline constexpr std::array TextureStore_Texture2D_args = { &TextureStore_Texture2D_texture, &TextureStore_Texture2D_coordinate, &TextureStore_Texture2D_value };

/// textureStoreMip with Texture2D, Int32x2, Int32, Float32x4
Variable TextureStoreMip_Texture2D_texture;
inline constexpr std::array TextureStoreMip_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture2D_coordinate;
Variable TextureStoreMip_Texture2D_mip;
Variable TextureStoreMip_Texture2D_value;
Function TextureStoreMip_Texture2D;
inline constexpr std::array TextureStoreMip_Texture2D_args = { &TextureStoreMip_Texture2D_texture, &TextureStoreMip_Texture2D_coordinate, &TextureStoreMip_Texture2D_mip, &TextureStoreMip_Texture2D_value };

/// textureLoad with Texture3D, Int32x3
Variable TextureLoad_Texture3D_texture;
inline constexpr std::array TextureLoad_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture3D_coordinate;
Function TextureLoad_Texture3D;
inline constexpr std::array TextureLoad_Texture3D_args = { &TextureLoad_Texture3D_texture, &TextureLoad_Texture3D_coordinate };

/// textureLoadMip with Texture3D, Int32x3, Int32
Variable TextureLoadMip_Texture3D_texture;
inline constexpr std::array TextureLoadMip_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture3D_coordinate;
Variable TextureLoadMip_Texture3D_mip;
Function TextureLoadMip_Texture3D;
inline constexpr std::array TextureLoadMip_Texture3D_args = { &TextureLoadMip_Texture3D_texture, &TextureLoadMip_Texture3D_coordinate, &TextureLoadMip_Texture3D_mip };

/// textureStore with Texture3D, Int32x3, Float32x4
Variable TextureStore_Texture3D_texture;
inline constexpr std::array TextureStore_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture3D_coordinate;
Variable TextureStore_Texture3D_value;
Function TextureStore_Texture3D;
inline constexpr std::array TextureStore_Texture3D_args = { &TextureStore_Texture3D_texture, &TextureStore_Texture3D_coordinate, &TextureStore_Texture3D_value };

/// textureStoreMip with Texture3D, Int32x3, Int32, Float32x4
Variable TextureStoreMip_Texture3D_texture;
inline constexpr std::array TextureStoreMip_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture3D_coordinate;
Variable TextureStoreMip_Texture3D_mip;
Variable TextureStoreMip_Texture3D_value;
Function TextureStoreMip_Texture3D;
inline constexpr std::array TextureStoreMip_Texture3D_args = { &TextureStoreMip_Texture3D_texture, &TextureStoreMip_Texture3D_coordinate, &TextureStoreMip_Texture3D_mip, &TextureStoreMip_Texture3D_value };

/// textureLoad with TextureCube, Int32x3
Variable TextureLoad_TextureCube_texture;
inline constexpr std::array TextureLoad_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_TextureCube_coordinate;
Function TextureLoad_TextureCube;
inline constexpr std::array TextureLoad_TextureCube_args = { &TextureLoad_TextureCube_texture, &TextureLoad_TextureCube_coordinate };

/// textureLoadMip with TextureCube, Int32x3, Int32
Variable TextureLoadMip_TextureCube_texture;
inline constexpr std::array TextureLoadMip_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_TextureCube_coordinate;
Variable TextureLoadMip_TextureCube_mip;
Function TextureLoadMip_TextureCube;
inline constexpr std::array TextureLoadMip_TextureCube_args = { &TextureLoadMip_TextureCube_texture, &TextureLoadMip_TextureCube_coordinate, &TextureLoadMip_TextureCube_mip };

/// textureStore with TextureCube, Int32x3, Float32x4
Variable TextureStore_TextureCube_texture;
inline constexpr std::array TextureStore_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_TextureCube_coordinate;
Variable TextureStore_TextureCube_value;
Function TextureStore_TextureCube;
inline constexpr std::array TextureStore_TextureCube_args = { &TextureStore_TextureCube_texture, &TextureStore_TextureCube_coordinate, &TextureStore_TextureCube_value };

/// textureStoreMip with TextureCube, Int32x3, Int32, Float32x4
Variable TextureStoreMip_TextureCube_texture;
inline constexpr std::array TextureStoreMip_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_TextureCube_coordinate;
Variable TextureStoreMip_TextureCube_mip;
Variable TextureStoreMip_TextureCube_value;
Function TextureStoreMip_TextureCube;
inline constexpr std::array TextureStoreMip_TextureCube_args = { &TextureStoreMip_TextureCube_texture, &TextureStoreMip_TextureCube_coordinate, &TextureStoreMip_TextureCube_mip, &TextureStoreMip_TextureCube_value };

/// textureLoad with Texture1DArray, Int32x2
Variable TextureLoad_Texture1DArray_texture;
inline constexpr std::array TextureLoad_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture1DArray_coordinate;
Function TextureLoad_Texture1DArray;
inline constexpr std::array TextureLoad_Texture1DArray_args = { &TextureLoad_Texture1DArray_texture, &TextureLoad_Texture1DArray_coordinate };

/// textureLoadMip with Texture1DArray, Int32x2, Int32
Variable TextureLoadMip_Texture1DArray_texture;
inline constexpr std::array TextureLoadMip_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture1DArray_coordinate;
Variable TextureLoadMip_Texture1DArray_mip;
Function TextureLoadMip_Texture1DArray;
inline constexpr std::array TextureLoadMip_Texture1DArray_args = { &TextureLoadMip_Texture1DArray_texture, &TextureLoadMip_Texture1DArray_coordinate, &TextureLoadMip_Texture1DArray_mip };

/// textureStore with Texture1DArray, Int32x2, Float32x4
Variable TextureStore_Texture1DArray_texture;
inline constexpr std::array TextureStore_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture1DArray_coordinate;
Variable TextureStore_Texture1DArray_value;
Function TextureStore_Texture1DArray;
inline constexpr std::array TextureStore_Texture1DArray_args = { &TextureStore_Texture1DArray_texture, &TextureStore_Texture1DArray_coordinate, &TextureStore_Texture1DArray_value };

/// textureStoreMip with Texture1DArray, Int32x2, Int32, Float32x4
Variable TextureStoreMip_Texture1DArray_texture;
inline constexpr std::array TextureStoreMip_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture1DArray_coordinate;
Variable TextureStoreMip_Texture1DArray_mip;
Variable TextureStoreMip_Texture1DArray_value;
Function TextureStoreMip_Texture1DArray;
inline constexpr std::array TextureStoreMip_Texture1DArray_args = { &TextureStoreMip_Texture1DArray_texture, &TextureStoreMip_Texture1DArray_coordinate, &TextureStoreMip_Texture1DArray_mip, &TextureStoreMip_Texture1DArray_value };

/// textureLoad with Texture2DArray, Int32x3
Variable TextureLoad_Texture2DArray_texture;
inline constexpr std::array TextureLoad_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture2DArray_coordinate;
Function TextureLoad_Texture2DArray;
inline constexpr std::array TextureLoad_Texture2DArray_args = { &TextureLoad_Texture2DArray_texture, &TextureLoad_Texture2DArray_coordinate };

/// textureLoadMip with Texture2DArray, Int32x3, Int32
Variable TextureLoadMip_Texture2DArray_texture;
inline constexpr std::array TextureLoadMip_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture2DArray_coordinate;
Variable TextureLoadMip_Texture2DArray_mip;
Function TextureLoadMip_Texture2DArray;
inline constexpr std::array TextureLoadMip_Texture2DArray_args = { &TextureLoadMip_Texture2DArray_texture, &TextureLoadMip_Texture2DArray_coordinate, &TextureLoadMip_Texture2DArray_mip };

/// textureStore with Texture2DArray, Int32x3, Float32x4
Variable TextureStore_Texture2DArray_texture;
inline constexpr std::array TextureStore_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture2DArray_coordinate;
Variable TextureStore_Texture2DArray_value;
Function TextureStore_Texture2DArray;
inline constexpr std::array TextureStore_Texture2DArray_args = { &TextureStore_Texture2DArray_texture, &TextureStore_Texture2DArray_coordinate, &TextureStore_Texture2DArray_value };

/// textureStoreMip with Texture2DArray, Int32x3, Int32, Float32x4
Variable TextureStoreMip_Texture2DArray_texture;
inline constexpr std::array TextureStoreMip_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture2DArray_coordinate;
Variable TextureStoreMip_Texture2DArray_mip;
Variable TextureStoreMip_Texture2DArray_value;
Function TextureStoreMip_Texture2DArray;
inline constexpr std::array TextureStoreMip_Texture2DArray_args = { &TextureStoreMip_Texture2DArray_texture, &TextureStoreMip_Texture2DArray_coordinate, &TextureStoreMip_Texture2DArray_mip, &TextureStoreMip_Texture2DArray_value };

/// textureLoad with TextureCubeArray, Int32x4
Variable TextureLoad_TextureCubeArray_texture;
inline constexpr std::array TextureLoad_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_TextureCubeArray_coordinate;
Function TextureLoad_TextureCubeArray;
inline constexpr std::array TextureLoad_TextureCubeArray_args = { &TextureLoad_TextureCubeArray_texture, &TextureLoad_TextureCubeArray_coordinate };

/// textureLoadMip with TextureCubeArray, Int32x4, Int32
Variable TextureLoadMip_TextureCubeArray_texture;
inline constexpr std::array TextureLoadMip_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_TextureCubeArray_coordinate;
Variable TextureLoadMip_TextureCubeArray_mip;
Function TextureLoadMip_TextureCubeArray;
inline constexpr std::array TextureLoadMip_TextureCubeArray_args = { &TextureLoadMip_TextureCubeArray_texture, &TextureLoadMip_TextureCubeArray_coordinate, &TextureLoadMip_TextureCubeArray_mip };

/// textureStore with TextureCubeArray, Int32x4, Float32x4
Variable TextureStore_TextureCubeArray_texture;
inline constexpr std::array TextureStore_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_TextureCubeArray_coordinate;
Variable TextureStore_TextureCubeArray_value;
Function TextureStore_TextureCubeArray;
inline constexpr std::array TextureStore_TextureCubeArray_args = { &TextureStore_TextureCubeArray_texture, &TextureStore_TextureCubeArray_coordinate, &TextureStore_TextureCubeArray_value };

/// textureStoreMip with TextureCubeArray, Int32x4, Int32, Float32x4
Variable TextureStoreMip_TextureCubeArray_texture;
inline constexpr std::array TextureStoreMip_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_TextureCubeArray_coordinate;
Variable TextureStoreMip_TextureCubeArray_mip;
Variable TextureStoreMip_TextureCubeArray_value;
Function TextureStoreMip_TextureCubeArray;
inline constexpr std::array TextureStoreMip_TextureCubeArray_args = { &TextureStoreMip_TextureCubeArray_texture, &TextureStoreMip_TextureCubeArray_coordinate, &TextureStoreMip_TextureCubeArray_mip, &TextureStoreMip_TextureCubeArray_value };

/// textureLoad with Texture2DMS, Int32x2
Variable TextureLoad_Texture2DMS_texture;
inline constexpr std::array TextureLoad_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture2DMS_coordinate;
Function TextureLoad_Texture2DMS;
inline constexpr std::array TextureLoad_Texture2DMS_args = { &TextureLoad_Texture2DMS_texture, &TextureLoad_Texture2DMS_coordinate };

/// textureLoadMip with Texture2DMS, Int32x2, Int32
Variable TextureLoadMip_Texture2DMS_texture;
inline constexpr std::array TextureLoadMip_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture2DMS_coordinate;
Variable TextureLoadMip_Texture2DMS_mip;
Function TextureLoadMip_Texture2DMS;
inline constexpr std::array TextureLoadMip_Texture2DMS_args = { &TextureLoadMip_Texture2DMS_texture, &TextureLoadMip_Texture2DMS_coordinate, &TextureLoadMip_Texture2DMS_mip };

/// textureStore with Texture2DMS, Int32x2, Float32x4
Variable TextureStore_Texture2DMS_texture;
inline constexpr std::array TextureStore_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture2DMS_coordinate;
Variable TextureStore_Texture2DMS_value;
Function TextureStore_Texture2DMS;
inline constexpr std::array TextureStore_Texture2DMS_args = { &TextureStore_Texture2DMS_texture, &TextureStore_Texture2DMS_coordinate, &TextureStore_Texture2DMS_value };

/// textureStoreMip with Texture2DMS, Int32x2, Int32, Float32x4
Variable TextureStoreMip_Texture2DMS_texture;
inline constexpr std::array TextureStoreMip_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture2DMS_coordinate;
Variable TextureStoreMip_Texture2DMS_mip;
Variable TextureStoreMip_Texture2DMS_value;
Function TextureStoreMip_Texture2DMS;
inline constexpr std::array TextureStoreMip_Texture2DMS_args = { &TextureStoreMip_Texture2DMS_texture, &TextureStoreMip_Texture2DMS_coordinate, &TextureStoreMip_Texture2DMS_mip, &TextureStoreMip_Texture2DMS_value };

/// textureLoad with Texture2DMSArray, Int32x3
Variable TextureLoad_Texture2DMSArray_texture;
inline constexpr std::array TextureLoad_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoad_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoad_Texture2DMSArray_coordinate;
Function TextureLoad_Texture2DMSArray;
inline constexpr std::array TextureLoad_Texture2DMSArray_args = { &TextureLoad_Texture2DMSArray_texture, &TextureLoad_Texture2DMSArray_coordinate };

/// textureLoadMip with Texture2DMSArray, Int32x3, Int32
Variable TextureLoadMip_Texture2DMSArray_texture;
inline constexpr std::array TextureLoadMip_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureLoadMip_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureLoadMip_Texture2DMSArray_coordinate;
Variable TextureLoadMip_Texture2DMSArray_mip;
Function TextureLoadMip_Texture2DMSArray;
inline constexpr std::array TextureLoadMip_Texture2DMSArray_args = { &TextureLoadMip_Texture2DMSArray_texture, &TextureLoadMip_Texture2DMSArray_coordinate, &TextureLoadMip_Texture2DMSArray_mip };

/// textureStore with Texture2DMSArray, Int32x3, Float32x4
Variable TextureStore_Texture2DMSArray_texture;
inline constexpr std::array TextureStore_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStore_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStore_Texture2DMSArray_coordinate;
Variable TextureStore_Texture2DMSArray_value;
Function TextureStore_Texture2DMSArray;
inline constexpr std::array TextureStore_Texture2DMSArray_args = { &TextureStore_Texture2DMSArray_texture, &TextureStore_Texture2DMSArray_coordinate, &TextureStore_Texture2DMSArray_value };

/// textureStoreMip with Texture2DMSArray, Int32x3, Int32, Float32x4
Variable TextureStoreMip_Texture2DMSArray_texture;
inline constexpr std::array TextureStoreMip_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureStoreMip_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureStoreMip_Texture2DMSArray_coordinate;
Variable TextureStoreMip_Texture2DMSArray_mip;
Variable TextureStoreMip_Texture2DMSArray_value;
Function TextureStoreMip_Texture2DMSArray;
inline constexpr std::array TextureStoreMip_Texture2DMSArray_args = { &TextureStoreMip_Texture2DMSArray_texture, &TextureStoreMip_Texture2DMSArray_coordinate, &TextureStoreMip_Texture2DMSArray_mip, &TextureStoreMip_Texture2DMSArray_value };

/// textureFetch with Texture1D, Int32, UInt32
Variable TextureFetch_Texture1D_texture;
inline constexpr std::array TextureFetch_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture1D_coordinate;
Variable TextureFetch_Texture1D_lod;
Function TextureFetch_Texture1D;
inline constexpr std::array TextureFetch_Texture1D_args = { &TextureFetch_Texture1D_texture, &TextureFetch_Texture1D_coordinate, &TextureFetch_Texture1D_lod };

/// textureFetchSample with Texture1D, Int32, UInt32, UInt32
Variable TextureFetchSample_Texture1D_texture;
inline constexpr std::array TextureFetchSample_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture1D_coordinate;
Variable TextureFetchSample_Texture1D_lod;
Variable TextureFetchSample_Texture1D_sample;
Function TextureFetchSample_Texture1D;
inline constexpr std::array TextureFetchSample_Texture1D_args = { &TextureFetchSample_Texture1D_texture, &TextureFetchSample_Texture1D_coordinate, &TextureFetchSample_Texture1D_lod, &TextureFetchSample_Texture1D_sample };

/// textureFetch with Texture2D, Int32x2, UInt32
Variable TextureFetch_Texture2D_texture;
inline constexpr std::array TextureFetch_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture2D_coordinate;
Variable TextureFetch_Texture2D_lod;
Function TextureFetch_Texture2D;
inline constexpr std::array TextureFetch_Texture2D_args = { &TextureFetch_Texture2D_texture, &TextureFetch_Texture2D_coordinate, &TextureFetch_Texture2D_lod };

/// textureFetchSample with Texture2D, Int32x2, UInt32, UInt32
Variable TextureFetchSample_Texture2D_texture;
inline constexpr std::array TextureFetchSample_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture2D_coordinate;
Variable TextureFetchSample_Texture2D_lod;
Variable TextureFetchSample_Texture2D_sample;
Function TextureFetchSample_Texture2D;
inline constexpr std::array TextureFetchSample_Texture2D_args = { &TextureFetchSample_Texture2D_texture, &TextureFetchSample_Texture2D_coordinate, &TextureFetchSample_Texture2D_lod, &TextureFetchSample_Texture2D_sample };

/// textureFetch with Texture3D, Int32x3, UInt32
Variable TextureFetch_Texture3D_texture;
inline constexpr std::array TextureFetch_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture3D_coordinate;
Variable TextureFetch_Texture3D_lod;
Function TextureFetch_Texture3D;
inline constexpr std::array TextureFetch_Texture3D_args = { &TextureFetch_Texture3D_texture, &TextureFetch_Texture3D_coordinate, &TextureFetch_Texture3D_lod };

/// textureFetchSample with Texture3D, Int32x3, UInt32, UInt32
Variable TextureFetchSample_Texture3D_texture;
inline constexpr std::array TextureFetchSample_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture3D_coordinate;
Variable TextureFetchSample_Texture3D_lod;
Variable TextureFetchSample_Texture3D_sample;
Function TextureFetchSample_Texture3D;
inline constexpr std::array TextureFetchSample_Texture3D_args = { &TextureFetchSample_Texture3D_texture, &TextureFetchSample_Texture3D_coordinate, &TextureFetchSample_Texture3D_lod, &TextureFetchSample_Texture3D_sample };

/// textureFetch with Texture1DArray, Int32x2, UInt32
Variable TextureFetch_Texture1DArray_texture;
inline constexpr std::array TextureFetch_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture1DArray_coordinate;
Variable TextureFetch_Texture1DArray_lod;
Function TextureFetch_Texture1DArray;
inline constexpr std::array TextureFetch_Texture1DArray_args = { &TextureFetch_Texture1DArray_texture, &TextureFetch_Texture1DArray_coordinate, &TextureFetch_Texture1DArray_lod };

/// textureFetchSample with Texture1DArray, Int32x2, UInt32, UInt32
Variable TextureFetchSample_Texture1DArray_texture;
inline constexpr std::array TextureFetchSample_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture1DArray_coordinate;
Variable TextureFetchSample_Texture1DArray_lod;
Variable TextureFetchSample_Texture1DArray_sample;
Function TextureFetchSample_Texture1DArray;
inline constexpr std::array TextureFetchSample_Texture1DArray_args = { &TextureFetchSample_Texture1DArray_texture, &TextureFetchSample_Texture1DArray_coordinate, &TextureFetchSample_Texture1DArray_lod, &TextureFetchSample_Texture1DArray_sample };

/// textureFetch with Texture2DArray, Int32x3, UInt32
Variable TextureFetch_Texture2DArray_texture;
inline constexpr std::array TextureFetch_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture2DArray_coordinate;
Variable TextureFetch_Texture2DArray_lod;
Function TextureFetch_Texture2DArray;
inline constexpr std::array TextureFetch_Texture2DArray_args = { &TextureFetch_Texture2DArray_texture, &TextureFetch_Texture2DArray_coordinate, &TextureFetch_Texture2DArray_lod };

/// textureFetchSample with Texture2DArray, Int32x3, UInt32, UInt32
Variable TextureFetchSample_Texture2DArray_texture;
inline constexpr std::array TextureFetchSample_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture2DArray_coordinate;
Variable TextureFetchSample_Texture2DArray_lod;
Variable TextureFetchSample_Texture2DArray_sample;
Function TextureFetchSample_Texture2DArray;
inline constexpr std::array TextureFetchSample_Texture2DArray_args = { &TextureFetchSample_Texture2DArray_texture, &TextureFetchSample_Texture2DArray_coordinate, &TextureFetchSample_Texture2DArray_lod, &TextureFetchSample_Texture2DArray_sample };

/// textureFetch with Texture2DMS, Int32x2, UInt32
Variable TextureFetch_Texture2DMS_texture;
inline constexpr std::array TextureFetch_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture2DMS_coordinate;
Variable TextureFetch_Texture2DMS_lod;
Function TextureFetch_Texture2DMS;
inline constexpr std::array TextureFetch_Texture2DMS_args = { &TextureFetch_Texture2DMS_texture, &TextureFetch_Texture2DMS_coordinate, &TextureFetch_Texture2DMS_lod };

/// textureFetchSample with Texture2DMS, Int32x2, UInt32, UInt32
Variable TextureFetchSample_Texture2DMS_texture;
inline constexpr std::array TextureFetchSample_Texture2DMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture2DMS_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture2DMS_coordinate;
Variable TextureFetchSample_Texture2DMS_lod;
Variable TextureFetchSample_Texture2DMS_sample;
Function TextureFetchSample_Texture2DMS;
inline constexpr std::array TextureFetchSample_Texture2DMS_args = { &TextureFetchSample_Texture2DMS_texture, &TextureFetchSample_Texture2DMS_coordinate, &TextureFetchSample_Texture2DMS_lod, &TextureFetchSample_Texture2DMS_sample };

/// textureFetch with Texture2DMSArray, Int32x3, UInt32
Variable TextureFetch_Texture2DMSArray_texture;
inline constexpr std::array TextureFetch_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetch_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetch_Texture2DMSArray_coordinate;
Variable TextureFetch_Texture2DMSArray_lod;
Function TextureFetch_Texture2DMSArray;
inline constexpr std::array TextureFetch_Texture2DMSArray_args = { &TextureFetch_Texture2DMSArray_texture, &TextureFetch_Texture2DMSArray_coordinate, &TextureFetch_Texture2DMSArray_lod };

/// textureFetchSample with Texture2DMSArray, Int32x3, UInt32, UInt32
Variable TextureFetchSample_Texture2DMSArray_texture;
inline constexpr std::array TextureFetchSample_Texture2DMSArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureFetchSample_Texture2DMSArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureFetchSample_Texture2DMSArray_coordinate;
Variable TextureFetchSample_Texture2DMSArray_lod;
Variable TextureFetchSample_Texture2DMSArray_sample;
Function TextureFetchSample_Texture2DMSArray;
inline constexpr std::array TextureFetchSample_Texture2DMSArray_args = { &TextureFetchSample_Texture2DMSArray_texture, &TextureFetchSample_Texture2DMSArray_coordinate, &TextureFetchSample_Texture2DMSArray_lod, &TextureFetchSample_Texture2DMSArray_sample };

/// textureGather with Texture2D, Sampler, Int32x2, Int32
Variable TextureGather_Texture2D_texture;
inline constexpr std::array TextureGather_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGather_Texture2D_sampler;
inline constexpr std::array TextureGather_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGather_Texture2D_coordinate;
Variable TextureGather_Texture2D_component;
Function TextureGather_Texture2D;
inline constexpr std::array TextureGather_Texture2D_args = { &TextureGather_Texture2D_texture, &TextureGather_Texture2D_sampler, &TextureGather_Texture2D_coordinate, &TextureGather_Texture2D_component };

/// textureGather with SampledTexture2D, Int32x2, Int32
Variable SampledTextureGather_Texture2D_texture;
inline constexpr std::array SampledTextureGather_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGather_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGather_Texture2D_coordinate;
Variable SampledTextureGather_Texture2D_component;
Function SampledTextureGather_Texture2D;
inline constexpr std::array SampledTextureGather_Texture2D_args = { &SampledTextureGather_Texture2D_texture, &SampledTextureGather_Texture2D_coordinate, &SampledTextureGather_Texture2D_component };

/// textureGatherOffset with Texture2D, Sampler, Int32x2, Int32, UInt32
Variable TextureGatherOffset_Texture2D_texture;
inline constexpr std::array TextureGatherOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_Texture2D_sampler;
inline constexpr std::array TextureGatherOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_Texture2D_coordinate;
Variable TextureGatherOffset_Texture2D_component;
Variable TextureGatherOffset_Texture2D_offset;
Function TextureGatherOffset_Texture2D;
inline constexpr std::array TextureGatherOffset_Texture2D_args = { &TextureGatherOffset_Texture2D_texture, &TextureGatherOffset_Texture2D_sampler, &TextureGatherOffset_Texture2D_coordinate, &TextureGatherOffset_Texture2D_component, &TextureGatherOffset_Texture2D_offset };

/// textureGatherOffset with SampledTexture2D, Int32x2, Int32, UInt32
Variable SampledTextureGatherOffset_Texture2D_texture;
inline constexpr std::array SampledTextureGatherOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGatherOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGatherOffset_Texture2D_coordinate;
Variable SampledTextureGatherOffset_Texture2D_component;
Variable SampledTextureGatherOffset_Texture2D_offset;
Function SampledTextureGatherOffset_Texture2D;
inline constexpr std::array SampledTextureGatherOffset_Texture2D_args = { &SampledTextureGatherOffset_Texture2D_texture, &SampledTextureGatherOffset_Texture2D_coordinate, &SampledTextureGatherOffset_Texture2D_component, &SampledTextureGatherOffset_Texture2D_offset };

/// textureGather with TextureCube, Sampler, Int32x3, Int32
Variable TextureGather_TextureCube_texture;
inline constexpr std::array TextureGather_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGather_TextureCube_sampler;
inline constexpr std::array TextureGather_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGather_TextureCube_coordinate;
Variable TextureGather_TextureCube_component;
Function TextureGather_TextureCube;
inline constexpr std::array TextureGather_TextureCube_args = { &TextureGather_TextureCube_texture, &TextureGather_TextureCube_sampler, &TextureGather_TextureCube_coordinate, &TextureGather_TextureCube_component };

/// textureGather with SampledTextureCube, Int32x3, Int32
Variable SampledTextureGather_TextureCube_texture;
inline constexpr std::array SampledTextureGather_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGather_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGather_TextureCube_coordinate;
Variable SampledTextureGather_TextureCube_component;
Function SampledTextureGather_TextureCube;
inline constexpr std::array SampledTextureGather_TextureCube_args = { &SampledTextureGather_TextureCube_texture, &SampledTextureGather_TextureCube_coordinate, &SampledTextureGather_TextureCube_component };

/// textureGatherOffset with TextureCube, Sampler, Int32x3, Int32, UInt32
Variable TextureGatherOffset_TextureCube_texture;
inline constexpr std::array TextureGatherOffset_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_TextureCube_sampler;
inline constexpr std::array TextureGatherOffset_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_TextureCube_coordinate;
Variable TextureGatherOffset_TextureCube_component;
Variable TextureGatherOffset_TextureCube_offset;
Function TextureGatherOffset_TextureCube;
inline constexpr std::array TextureGatherOffset_TextureCube_args = { &TextureGatherOffset_TextureCube_texture, &TextureGatherOffset_TextureCube_sampler, &TextureGatherOffset_TextureCube_coordinate, &TextureGatherOffset_TextureCube_component, &TextureGatherOffset_TextureCube_offset };

/// textureGatherOffset with SampledTextureCube, Int32x3, Int32, UInt32
Variable SampledTextureGatherOffset_TextureCube_texture;
inline constexpr std::array SampledTextureGatherOffset_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGatherOffset_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGatherOffset_TextureCube_coordinate;
Variable SampledTextureGatherOffset_TextureCube_component;
Variable SampledTextureGatherOffset_TextureCube_offset;
Function SampledTextureGatherOffset_TextureCube;
inline constexpr std::array SampledTextureGatherOffset_TextureCube_args = { &SampledTextureGatherOffset_TextureCube_texture, &SampledTextureGatherOffset_TextureCube_coordinate, &SampledTextureGatherOffset_TextureCube_component, &SampledTextureGatherOffset_TextureCube_offset };

/// textureGather with Texture2DArray, Sampler, Int32x3, Int32
Variable TextureGather_Texture2DArray_texture;
inline constexpr std::array TextureGather_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGather_Texture2DArray_sampler;
inline constexpr std::array TextureGather_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGather_Texture2DArray_coordinate;
Variable TextureGather_Texture2DArray_component;
Function TextureGather_Texture2DArray;
inline constexpr std::array TextureGather_Texture2DArray_args = { &TextureGather_Texture2DArray_texture, &TextureGather_Texture2DArray_sampler, &TextureGather_Texture2DArray_coordinate, &TextureGather_Texture2DArray_component };

/// textureGather with SampledTexture2DArray, Int32x3, Int32
Variable SampledTextureGather_Texture2DArray_texture;
inline constexpr std::array SampledTextureGather_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGather_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGather_Texture2DArray_coordinate;
Variable SampledTextureGather_Texture2DArray_component;
Function SampledTextureGather_Texture2DArray;
inline constexpr std::array SampledTextureGather_Texture2DArray_args = { &SampledTextureGather_Texture2DArray_texture, &SampledTextureGather_Texture2DArray_coordinate, &SampledTextureGather_Texture2DArray_component };

/// textureGatherOffset with Texture2DArray, Sampler, Int32x3, Int32, UInt32
Variable TextureGatherOffset_Texture2DArray_texture;
inline constexpr std::array TextureGatherOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_Texture2DArray_sampler;
inline constexpr std::array TextureGatherOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_Texture2DArray_coordinate;
Variable TextureGatherOffset_Texture2DArray_component;
Variable TextureGatherOffset_Texture2DArray_offset;
Function TextureGatherOffset_Texture2DArray;
inline constexpr std::array TextureGatherOffset_Texture2DArray_args = { &TextureGatherOffset_Texture2DArray_texture, &TextureGatherOffset_Texture2DArray_sampler, &TextureGatherOffset_Texture2DArray_coordinate, &TextureGatherOffset_Texture2DArray_component, &TextureGatherOffset_Texture2DArray_offset };

/// textureGatherOffset with SampledTexture2DArray, Int32x3, Int32, UInt32
Variable SampledTextureGatherOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureGatherOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGatherOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGatherOffset_Texture2DArray_coordinate;
Variable SampledTextureGatherOffset_Texture2DArray_component;
Variable SampledTextureGatherOffset_Texture2DArray_offset;
Function SampledTextureGatherOffset_Texture2DArray;
inline constexpr std::array SampledTextureGatherOffset_Texture2DArray_args = { &SampledTextureGatherOffset_Texture2DArray_texture, &SampledTextureGatherOffset_Texture2DArray_coordinate, &SampledTextureGatherOffset_Texture2DArray_component, &SampledTextureGatherOffset_Texture2DArray_offset };

/// textureGather with TextureCubeArray, Sampler, Int32x4, Int32
Variable TextureGather_TextureCubeArray_texture;
inline constexpr std::array TextureGather_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGather_TextureCubeArray_sampler;
inline constexpr std::array TextureGather_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGather_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGather_TextureCubeArray_coordinate;
Variable TextureGather_TextureCubeArray_component;
Function TextureGather_TextureCubeArray;
inline constexpr std::array TextureGather_TextureCubeArray_args = { &TextureGather_TextureCubeArray_texture, &TextureGather_TextureCubeArray_sampler, &TextureGather_TextureCubeArray_coordinate, &TextureGather_TextureCubeArray_component };

/// textureGather with SampledTextureCubeArray, Int32x4, Int32
Variable SampledTextureGather_TextureCubeArray_texture;
inline constexpr std::array SampledTextureGather_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGather_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGather_TextureCubeArray_coordinate;
Variable SampledTextureGather_TextureCubeArray_component;
Function SampledTextureGather_TextureCubeArray;
inline constexpr std::array SampledTextureGather_TextureCubeArray_args = { &SampledTextureGather_TextureCubeArray_texture, &SampledTextureGather_TextureCubeArray_coordinate, &SampledTextureGather_TextureCubeArray_component };

/// textureGatherOffset with TextureCubeArray, Sampler, Int32x4, Int32, UInt32
Variable TextureGatherOffset_TextureCubeArray_texture;
inline constexpr std::array TextureGatherOffset_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_TextureCubeArray_sampler;
inline constexpr std::array TextureGatherOffset_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureGatherOffset_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureGatherOffset_TextureCubeArray_coordinate;
Variable TextureGatherOffset_TextureCubeArray_component;
Variable TextureGatherOffset_TextureCubeArray_offset;
Function TextureGatherOffset_TextureCubeArray;
inline constexpr std::array TextureGatherOffset_TextureCubeArray_args = { &TextureGatherOffset_TextureCubeArray_texture, &TextureGatherOffset_TextureCubeArray_sampler, &TextureGatherOffset_TextureCubeArray_coordinate, &TextureGatherOffset_TextureCubeArray_component, &TextureGatherOffset_TextureCubeArray_offset };

/// textureGatherOffset with SampledTextureCubeArray, Int32x4, Int32, UInt32
Variable SampledTextureGatherOffset_TextureCubeArray_texture;
inline constexpr std::array SampledTextureGatherOffset_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureGatherOffset_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureGatherOffset_TextureCubeArray_coordinate;
Variable SampledTextureGatherOffset_TextureCubeArray_component;
Variable SampledTextureGatherOffset_TextureCubeArray_offset;
Function SampledTextureGatherOffset_TextureCubeArray;
inline constexpr std::array SampledTextureGatherOffset_TextureCubeArray_args = { &SampledTextureGatherOffset_TextureCubeArray_texture, &SampledTextureGatherOffset_TextureCubeArray_coordinate, &SampledTextureGatherOffset_TextureCubeArray_component, &SampledTextureGatherOffset_TextureCubeArray_offset };

/// texturePixelCacheLoad with PixelCache
Variable TexturePixelCacheLoad_PixelCache_texture;
inline constexpr std::array TexturePixelCacheLoad_PixelCache_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TexturePixelCacheLoad_PixelCache_texture_modifierValues = {(Expression*)nullptr};
Function TexturePixelCacheLoad_PixelCache;
inline constexpr std::array TexturePixelCacheLoad_PixelCache_args = { &TexturePixelCacheLoad_PixelCache_texture };

/// texturePixelCacheLoad with PixelCacheMS, UInt32
Variable TexturePixelCacheLoad_PixelCacheMS_texture;
inline constexpr std::array TexturePixelCacheLoad_PixelCacheMS_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TexturePixelCacheLoad_PixelCacheMS_texture_modifierValues = {(Expression*)nullptr};
Variable TexturePixelCacheLoad_PixelCacheMS_sample;
Function TexturePixelCacheLoad_PixelCacheMS;
inline constexpr std::array TexturePixelCacheLoad_PixelCacheMS_args = { &TexturePixelCacheLoad_PixelCacheMS_texture, &TexturePixelCacheLoad_PixelCacheMS_sample };

/// textureSample with Texture1D, Sampler, Float32
Variable TextureSample_Texture1D_texture;
inline constexpr std::array TextureSample_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture1D_sampler;
inline constexpr std::array TextureSample_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture1D_coordinate;
Function TextureSample_Texture1D;
inline constexpr std::array TextureSample_Texture1D_args = { &TextureSample_Texture1D_texture, &TextureSample_Texture1D_sampler, &TextureSample_Texture1D_coordinate };

/// textureSample with SampledTexture1D, Float32
Variable SampledTextureSample_Texture1D_texture;
inline constexpr std::array SampledTextureSample_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture1D_coordinate;
Function SampledTextureSample_Texture1D;
inline constexpr std::array SampledTextureSample_Texture1D_args = { &SampledTextureSample_Texture1D_texture, &SampledTextureSample_Texture1D_coordinate };

/// textureSample with Texture2D, Sampler, Float32x2
Variable TextureSample_Texture2D_texture;
inline constexpr std::array TextureSample_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture2D_sampler;
inline constexpr std::array TextureSample_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture2D_coordinate;
Function TextureSample_Texture2D;
inline constexpr std::array TextureSample_Texture2D_args = { &TextureSample_Texture2D_texture, &TextureSample_Texture2D_sampler, &TextureSample_Texture2D_coordinate };

/// textureSample with SampledTexture2D, Float32x2
Variable SampledTextureSample_Texture2D_texture;
inline constexpr std::array SampledTextureSample_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture2D_coordinate;
Function SampledTextureSample_Texture2D;
inline constexpr std::array SampledTextureSample_Texture2D_args = { &SampledTextureSample_Texture2D_texture, &SampledTextureSample_Texture2D_coordinate };

/// textureSample with Texture3D, Sampler, Float32x3
Variable TextureSample_Texture3D_texture;
inline constexpr std::array TextureSample_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture3D_sampler;
inline constexpr std::array TextureSample_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture3D_coordinate;
Function TextureSample_Texture3D;
inline constexpr std::array TextureSample_Texture3D_args = { &TextureSample_Texture3D_texture, &TextureSample_Texture3D_sampler, &TextureSample_Texture3D_coordinate };

/// textureSample with SampledTexture3D, Float32x3
Variable SampledTextureSample_Texture3D_texture;
inline constexpr std::array SampledTextureSample_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture3D_coordinate;
Function SampledTextureSample_Texture3D;
inline constexpr std::array SampledTextureSample_Texture3D_args = { &SampledTextureSample_Texture3D_texture, &SampledTextureSample_Texture3D_coordinate };

/// textureSample with TextureCube, Sampler, Float32x3
Variable TextureSample_TextureCube_texture;
inline constexpr std::array TextureSample_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_TextureCube_sampler;
inline constexpr std::array TextureSample_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_TextureCube_coordinate;
Function TextureSample_TextureCube;
inline constexpr std::array TextureSample_TextureCube_args = { &TextureSample_TextureCube_texture, &TextureSample_TextureCube_sampler, &TextureSample_TextureCube_coordinate };

/// textureSample with SampledTextureCube, Float32x3
Variable SampledTextureSample_TextureCube_texture;
inline constexpr std::array SampledTextureSample_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_TextureCube_coordinate;
Function SampledTextureSample_TextureCube;
inline constexpr std::array SampledTextureSample_TextureCube_args = { &SampledTextureSample_TextureCube_texture, &SampledTextureSample_TextureCube_coordinate };

/// textureSample with Texture1DArray, Sampler, Float32x2
Variable TextureSample_Texture1DArray_texture;
inline constexpr std::array TextureSample_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture1DArray_sampler;
inline constexpr std::array TextureSample_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture1DArray_coordinate;
Function TextureSample_Texture1DArray;
inline constexpr std::array TextureSample_Texture1DArray_args = { &TextureSample_Texture1DArray_texture, &TextureSample_Texture1DArray_sampler, &TextureSample_Texture1DArray_coordinate };

/// textureSample with SampledTexture1DArray, Float32x2
Variable SampledTextureSample_Texture1DArray_texture;
inline constexpr std::array SampledTextureSample_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture1DArray_coordinate;
Function SampledTextureSample_Texture1DArray;
inline constexpr std::array SampledTextureSample_Texture1DArray_args = { &SampledTextureSample_Texture1DArray_texture, &SampledTextureSample_Texture1DArray_coordinate };

/// textureSample with Texture2DArray, Sampler, Float32x3
Variable TextureSample_Texture2DArray_texture;
inline constexpr std::array TextureSample_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture2DArray_sampler;
inline constexpr std::array TextureSample_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_Texture2DArray_coordinate;
Function TextureSample_Texture2DArray;
inline constexpr std::array TextureSample_Texture2DArray_args = { &TextureSample_Texture2DArray_texture, &TextureSample_Texture2DArray_sampler, &TextureSample_Texture2DArray_coordinate };

/// textureSample with SampledTexture2DArray, Float32x3
Variable SampledTextureSample_Texture2DArray_texture;
inline constexpr std::array SampledTextureSample_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_Texture2DArray_coordinate;
Function SampledTextureSample_Texture2DArray;
inline constexpr std::array SampledTextureSample_Texture2DArray_args = { &SampledTextureSample_Texture2DArray_texture, &SampledTextureSample_Texture2DArray_coordinate };

/// textureSample with TextureCubeArray, Sampler, Float32x4
Variable TextureSample_TextureCubeArray_texture;
inline constexpr std::array TextureSample_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSample_TextureCubeArray_sampler;
inline constexpr std::array TextureSample_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSample_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSample_TextureCubeArray_coordinate;
Function TextureSample_TextureCubeArray;
inline constexpr std::array TextureSample_TextureCubeArray_args = { &TextureSample_TextureCubeArray_texture, &TextureSample_TextureCubeArray_sampler, &TextureSample_TextureCubeArray_coordinate };

/// textureSample with SampledTextureCubeArray, Float32x4
Variable SampledTextureSample_TextureCubeArray_texture;
inline constexpr std::array SampledTextureSample_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSample_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSample_TextureCubeArray_coordinate;
Function SampledTextureSample_TextureCubeArray;
inline constexpr std::array SampledTextureSample_TextureCubeArray_args = { &SampledTextureSample_TextureCubeArray_texture, &SampledTextureSample_TextureCubeArray_coordinate };

/// textureSampleOffset with Texture1D, Sampler, Float32, Float32
Variable TextureSampleOffset_Texture1D_texture;
inline constexpr std::array TextureSampleOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture1D_coordinate;
Variable TextureSampleOffset_Texture1D_offset;
Function TextureSampleOffset_Texture1D;
inline constexpr std::array TextureSampleOffset_Texture1D_args = { &TextureSampleOffset_Texture1D_texture, &TextureSampleOffset_Texture1D_sampler, &TextureSampleOffset_Texture1D_coordinate, &TextureSampleOffset_Texture1D_offset };

/// textureSampleOffset with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture1D_coordinate;
Variable SampledTextureSampleOffset_Texture1D_offset;
Function SampledTextureSampleOffset_Texture1D;
inline constexpr std::array SampledTextureSampleOffset_Texture1D_args = { &SampledTextureSampleOffset_Texture1D_texture, &SampledTextureSampleOffset_Texture1D_coordinate, &SampledTextureSampleOffset_Texture1D_offset };

/// textureSampleOffset with Texture2D, Sampler, Float32x2, Float32x2
Variable TextureSampleOffset_Texture2D_texture;
inline constexpr std::array TextureSampleOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture2D_coordinate;
Variable TextureSampleOffset_Texture2D_offset;
Function TextureSampleOffset_Texture2D;
inline constexpr std::array TextureSampleOffset_Texture2D_args = { &TextureSampleOffset_Texture2D_texture, &TextureSampleOffset_Texture2D_sampler, &TextureSampleOffset_Texture2D_coordinate, &TextureSampleOffset_Texture2D_offset };

/// textureSampleOffset with SampledTexture2D, Float32x2, Float32x2
Variable SampledTextureSampleOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture2D_coordinate;
Variable SampledTextureSampleOffset_Texture2D_offset;
Function SampledTextureSampleOffset_Texture2D;
inline constexpr std::array SampledTextureSampleOffset_Texture2D_args = { &SampledTextureSampleOffset_Texture2D_texture, &SampledTextureSampleOffset_Texture2D_coordinate, &SampledTextureSampleOffset_Texture2D_offset };

/// textureSampleOffset with Texture3D, Sampler, Float32x3, Float32x3
Variable TextureSampleOffset_Texture3D_texture;
inline constexpr std::array TextureSampleOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture3D_coordinate;
Variable TextureSampleOffset_Texture3D_offset;
Function TextureSampleOffset_Texture3D;
inline constexpr std::array TextureSampleOffset_Texture3D_args = { &TextureSampleOffset_Texture3D_texture, &TextureSampleOffset_Texture3D_sampler, &TextureSampleOffset_Texture3D_coordinate, &TextureSampleOffset_Texture3D_offset };

/// textureSampleOffset with SampledTexture3D, Float32x3, Float32x3
Variable SampledTextureSampleOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture3D_coordinate;
Variable SampledTextureSampleOffset_Texture3D_offset;
Function SampledTextureSampleOffset_Texture3D;
inline constexpr std::array SampledTextureSampleOffset_Texture3D_args = { &SampledTextureSampleOffset_Texture3D_texture, &SampledTextureSampleOffset_Texture3D_coordinate, &SampledTextureSampleOffset_Texture3D_offset };

/// textureSampleOffset with Texture1DArray, Sampler, Float32x2, Float32x2
Variable TextureSampleOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture1DArray_coordinate;
Variable TextureSampleOffset_Texture1DArray_offset;
Function TextureSampleOffset_Texture1DArray;
inline constexpr std::array TextureSampleOffset_Texture1DArray_args = { &TextureSampleOffset_Texture1DArray_texture, &TextureSampleOffset_Texture1DArray_sampler, &TextureSampleOffset_Texture1DArray_coordinate, &TextureSampleOffset_Texture1DArray_offset };

/// textureSampleOffset with SampledTexture1DArray, Float32x2, Float32x2
Variable SampledTextureSampleOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleOffset_Texture1DArray_offset;
Function SampledTextureSampleOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleOffset_Texture1DArray_args = { &SampledTextureSampleOffset_Texture1DArray_texture, &SampledTextureSampleOffset_Texture1DArray_coordinate, &SampledTextureSampleOffset_Texture1DArray_offset };

/// textureSampleOffset with Texture2DArray, Sampler, Float32x3, Float32x3
Variable TextureSampleOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleOffset_Texture2DArray_coordinate;
Variable TextureSampleOffset_Texture2DArray_offset;
Function TextureSampleOffset_Texture2DArray;
inline constexpr std::array TextureSampleOffset_Texture2DArray_args = { &TextureSampleOffset_Texture2DArray_texture, &TextureSampleOffset_Texture2DArray_sampler, &TextureSampleOffset_Texture2DArray_coordinate, &TextureSampleOffset_Texture2DArray_offset };

/// textureSampleOffset with SampledTexture2DArray, Float32x3, Float32x3
Variable SampledTextureSampleOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleOffset_Texture2DArray_offset;
Function SampledTextureSampleOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleOffset_Texture2DArray_args = { &SampledTextureSampleOffset_Texture2DArray_texture, &SampledTextureSampleOffset_Texture2DArray_coordinate, &SampledTextureSampleOffset_Texture2DArray_offset };

/// textureSampleProj with Texture1D, Sampler, Float32, Float32
Variable TextureSampleProj_Texture1D_texture;
inline constexpr std::array TextureSampleProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture1D_sampler;
inline constexpr std::array TextureSampleProj_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture1D_coordinate;
Variable TextureSampleProj_Texture1D_proj;
Function TextureSampleProj_Texture1D;
inline constexpr std::array TextureSampleProj_Texture1D_args = { &TextureSampleProj_Texture1D_texture, &TextureSampleProj_Texture1D_sampler, &TextureSampleProj_Texture1D_coordinate, &TextureSampleProj_Texture1D_proj };

/// textureSampleProj with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleProj_Texture1D_texture;
inline constexpr std::array SampledTextureSampleProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProj_Texture1D_coordinate;
Variable SampledTextureSampleProj_Texture1D_proj;
Function SampledTextureSampleProj_Texture1D;
inline constexpr std::array SampledTextureSampleProj_Texture1D_args = { &SampledTextureSampleProj_Texture1D_texture, &SampledTextureSampleProj_Texture1D_coordinate, &SampledTextureSampleProj_Texture1D_proj };

/// textureSampleProj with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleProj_Texture2D_texture;
inline constexpr std::array TextureSampleProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture2D_sampler;
inline constexpr std::array TextureSampleProj_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture2D_coordinate;
Variable TextureSampleProj_Texture2D_proj;
Function TextureSampleProj_Texture2D;
inline constexpr std::array TextureSampleProj_Texture2D_args = { &TextureSampleProj_Texture2D_texture, &TextureSampleProj_Texture2D_sampler, &TextureSampleProj_Texture2D_coordinate, &TextureSampleProj_Texture2D_proj };

/// textureSampleProj with SampledTexture2D, Float32x2, Float32
Variable SampledTextureSampleProj_Texture2D_texture;
inline constexpr std::array SampledTextureSampleProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProj_Texture2D_coordinate;
Variable SampledTextureSampleProj_Texture2D_proj;
Function SampledTextureSampleProj_Texture2D;
inline constexpr std::array SampledTextureSampleProj_Texture2D_args = { &SampledTextureSampleProj_Texture2D_texture, &SampledTextureSampleProj_Texture2D_coordinate, &SampledTextureSampleProj_Texture2D_proj };

/// textureSampleProj with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleProj_Texture3D_texture;
inline constexpr std::array TextureSampleProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture3D_sampler;
inline constexpr std::array TextureSampleProj_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProj_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProj_Texture3D_coordinate;
Variable TextureSampleProj_Texture3D_proj;
Function TextureSampleProj_Texture3D;
inline constexpr std::array TextureSampleProj_Texture3D_args = { &TextureSampleProj_Texture3D_texture, &TextureSampleProj_Texture3D_sampler, &TextureSampleProj_Texture3D_coordinate, &TextureSampleProj_Texture3D_proj };

/// textureSampleProj with SampledTexture3D, Float32x3, Float32
Variable SampledTextureSampleProj_Texture3D_texture;
inline constexpr std::array SampledTextureSampleProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProj_Texture3D_coordinate;
Variable SampledTextureSampleProj_Texture3D_proj;
Function SampledTextureSampleProj_Texture3D;
inline constexpr std::array SampledTextureSampleProj_Texture3D_args = { &SampledTextureSampleProj_Texture3D_texture, &SampledTextureSampleProj_Texture3D_coordinate, &SampledTextureSampleProj_Texture3D_proj };

/// textureSampleProjOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleProjOffset_Texture1D_texture;
inline constexpr std::array TextureSampleProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleProjOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture1D_coordinate;
Variable TextureSampleProjOffset_Texture1D_proj;
Variable TextureSampleProjOffset_Texture1D_offset;
Function TextureSampleProjOffset_Texture1D;
inline constexpr std::array TextureSampleProjOffset_Texture1D_args = { &TextureSampleProjOffset_Texture1D_texture, &TextureSampleProjOffset_Texture1D_sampler, &TextureSampleProjOffset_Texture1D_coordinate, &TextureSampleProjOffset_Texture1D_proj, &TextureSampleProjOffset_Texture1D_offset };

/// textureSampleProjOffset with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleProjOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleProjOffset_Texture1D_proj;
Variable SampledTextureSampleProjOffset_Texture1D_offset;
Function SampledTextureSampleProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleProjOffset_Texture1D_args = { &SampledTextureSampleProjOffset_Texture1D_texture, &SampledTextureSampleProjOffset_Texture1D_coordinate, &SampledTextureSampleProjOffset_Texture1D_proj, &SampledTextureSampleProjOffset_Texture1D_offset };

/// textureSampleProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleProjOffset_Texture2D_texture;
inline constexpr std::array TextureSampleProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleProjOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture2D_coordinate;
Variable TextureSampleProjOffset_Texture2D_proj;
Variable TextureSampleProjOffset_Texture2D_offset;
Function TextureSampleProjOffset_Texture2D;
inline constexpr std::array TextureSampleProjOffset_Texture2D_args = { &TextureSampleProjOffset_Texture2D_texture, &TextureSampleProjOffset_Texture2D_sampler, &TextureSampleProjOffset_Texture2D_coordinate, &TextureSampleProjOffset_Texture2D_proj, &TextureSampleProjOffset_Texture2D_offset };

/// textureSampleProjOffset with SampledTexture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleProjOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleProjOffset_Texture2D_proj;
Variable SampledTextureSampleProjOffset_Texture2D_offset;
Function SampledTextureSampleProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleProjOffset_Texture2D_args = { &SampledTextureSampleProjOffset_Texture2D_texture, &SampledTextureSampleProjOffset_Texture2D_coordinate, &SampledTextureSampleProjOffset_Texture2D_proj, &SampledTextureSampleProjOffset_Texture2D_offset };

/// textureSampleProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleProjOffset_Texture3D_texture;
inline constexpr std::array TextureSampleProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleProjOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjOffset_Texture3D_coordinate;
Variable TextureSampleProjOffset_Texture3D_proj;
Variable TextureSampleProjOffset_Texture3D_offset;
Function TextureSampleProjOffset_Texture3D;
inline constexpr std::array TextureSampleProjOffset_Texture3D_args = { &TextureSampleProjOffset_Texture3D_texture, &TextureSampleProjOffset_Texture3D_sampler, &TextureSampleProjOffset_Texture3D_coordinate, &TextureSampleProjOffset_Texture3D_proj, &TextureSampleProjOffset_Texture3D_offset };

/// textureSampleProjOffset with SampledTexture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleProjOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleProjOffset_Texture3D_proj;
Variable SampledTextureSampleProjOffset_Texture3D_offset;
Function SampledTextureSampleProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleProjOffset_Texture3D_args = { &SampledTextureSampleProjOffset_Texture3D_texture, &SampledTextureSampleProjOffset_Texture3D_coordinate, &SampledTextureSampleProjOffset_Texture3D_proj, &SampledTextureSampleProjOffset_Texture3D_offset };

/// textureSampleCompare with Texture1D, Sampler, Float32, Float32
Variable TextureSampleCompare_Texture1D_texture;
inline constexpr std::array TextureSampleCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture1D_coordinate;
Variable TextureSampleCompare_Texture1D_compare;
Function TextureSampleCompare_Texture1D;
inline constexpr std::array TextureSampleCompare_Texture1D_args = { &TextureSampleCompare_Texture1D_texture, &TextureSampleCompare_Texture1D_sampler, &TextureSampleCompare_Texture1D_coordinate, &TextureSampleCompare_Texture1D_compare };

/// textureSampleCompare with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture1D_coordinate;
Variable SampledTextureSampleCompare_Texture1D_compare;
Function SampledTextureSampleCompare_Texture1D;
inline constexpr std::array SampledTextureSampleCompare_Texture1D_args = { &SampledTextureSampleCompare_Texture1D_texture, &SampledTextureSampleCompare_Texture1D_coordinate, &SampledTextureSampleCompare_Texture1D_compare };

/// textureSampleCompare with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleCompare_Texture2D_texture;
inline constexpr std::array TextureSampleCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture2D_coordinate;
Variable TextureSampleCompare_Texture2D_compare;
Function TextureSampleCompare_Texture2D;
inline constexpr std::array TextureSampleCompare_Texture2D_args = { &TextureSampleCompare_Texture2D_texture, &TextureSampleCompare_Texture2D_sampler, &TextureSampleCompare_Texture2D_coordinate, &TextureSampleCompare_Texture2D_compare };

/// textureSampleCompare with SampledTexture2D, Float32x2, Float32
Variable SampledTextureSampleCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture2D_coordinate;
Variable SampledTextureSampleCompare_Texture2D_compare;
Function SampledTextureSampleCompare_Texture2D;
inline constexpr std::array SampledTextureSampleCompare_Texture2D_args = { &SampledTextureSampleCompare_Texture2D_texture, &SampledTextureSampleCompare_Texture2D_coordinate, &SampledTextureSampleCompare_Texture2D_compare };

/// textureSampleCompare with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleCompare_Texture3D_texture;
inline constexpr std::array TextureSampleCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture3D_coordinate;
Variable TextureSampleCompare_Texture3D_compare;
Function TextureSampleCompare_Texture3D;
inline constexpr std::array TextureSampleCompare_Texture3D_args = { &TextureSampleCompare_Texture3D_texture, &TextureSampleCompare_Texture3D_sampler, &TextureSampleCompare_Texture3D_coordinate, &TextureSampleCompare_Texture3D_compare };

/// textureSampleCompare with SampledTexture3D, Float32x3, Float32
Variable SampledTextureSampleCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture3D_coordinate;
Variable SampledTextureSampleCompare_Texture3D_compare;
Function SampledTextureSampleCompare_Texture3D;
inline constexpr std::array SampledTextureSampleCompare_Texture3D_args = { &SampledTextureSampleCompare_Texture3D_texture, &SampledTextureSampleCompare_Texture3D_coordinate, &SampledTextureSampleCompare_Texture3D_compare };

/// textureSampleCompare with Texture1DArray, Sampler, Float32x2, Float32
Variable TextureSampleCompare_Texture1DArray_texture;
inline constexpr std::array TextureSampleCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture1DArray_sampler;
inline constexpr std::array TextureSampleCompare_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture1DArray_coordinate;
Variable TextureSampleCompare_Texture1DArray_compare;
Function TextureSampleCompare_Texture1DArray;
inline constexpr std::array TextureSampleCompare_Texture1DArray_args = { &TextureSampleCompare_Texture1DArray_texture, &TextureSampleCompare_Texture1DArray_sampler, &TextureSampleCompare_Texture1DArray_coordinate, &TextureSampleCompare_Texture1DArray_compare };

/// textureSampleCompare with SampledTexture1DArray, Float32x2, Float32
Variable SampledTextureSampleCompare_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleCompare_Texture1DArray_compare;
Function SampledTextureSampleCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleCompare_Texture1DArray_args = { &SampledTextureSampleCompare_Texture1DArray_texture, &SampledTextureSampleCompare_Texture1DArray_coordinate, &SampledTextureSampleCompare_Texture1DArray_compare };

/// textureSampleCompare with Texture2DArray, Sampler, Float32x3, Float32
Variable TextureSampleCompare_Texture2DArray_texture;
inline constexpr std::array TextureSampleCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture2DArray_sampler;
inline constexpr std::array TextureSampleCompare_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompare_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompare_Texture2DArray_coordinate;
Variable TextureSampleCompare_Texture2DArray_compare;
Function TextureSampleCompare_Texture2DArray;
inline constexpr std::array TextureSampleCompare_Texture2DArray_args = { &TextureSampleCompare_Texture2DArray_texture, &TextureSampleCompare_Texture2DArray_sampler, &TextureSampleCompare_Texture2DArray_coordinate, &TextureSampleCompare_Texture2DArray_compare };

/// textureSampleCompare with SampledTexture2DArray, Float32x3, Float32
Variable SampledTextureSampleCompare_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleCompare_Texture2DArray_compare;
Function SampledTextureSampleCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleCompare_Texture2DArray_args = { &SampledTextureSampleCompare_Texture2DArray_texture, &SampledTextureSampleCompare_Texture2DArray_coordinate, &SampledTextureSampleCompare_Texture2DArray_compare };

/// textureSampleCompareOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture1D_coordinate;
Variable TextureSampleCompareOffset_Texture1D_compare;
Variable TextureSampleCompareOffset_Texture1D_offset;
Function TextureSampleCompareOffset_Texture1D;
inline constexpr std::array TextureSampleCompareOffset_Texture1D_args = { &TextureSampleCompareOffset_Texture1D_texture, &TextureSampleCompareOffset_Texture1D_sampler, &TextureSampleCompareOffset_Texture1D_coordinate, &TextureSampleCompareOffset_Texture1D_compare, &TextureSampleCompareOffset_Texture1D_offset };

/// textureSampleCompareOffset with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleCompareOffset_Texture1D_compare;
Variable SampledTextureSampleCompareOffset_Texture1D_offset;
Function SampledTextureSampleCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1D_args = { &SampledTextureSampleCompareOffset_Texture1D_texture, &SampledTextureSampleCompareOffset_Texture1D_coordinate, &SampledTextureSampleCompareOffset_Texture1D_compare, &SampledTextureSampleCompareOffset_Texture1D_offset };

/// textureSampleCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture2D_coordinate;
Variable TextureSampleCompareOffset_Texture2D_compare;
Variable TextureSampleCompareOffset_Texture2D_offset;
Function TextureSampleCompareOffset_Texture2D;
inline constexpr std::array TextureSampleCompareOffset_Texture2D_args = { &TextureSampleCompareOffset_Texture2D_texture, &TextureSampleCompareOffset_Texture2D_sampler, &TextureSampleCompareOffset_Texture2D_coordinate, &TextureSampleCompareOffset_Texture2D_compare, &TextureSampleCompareOffset_Texture2D_offset };

/// textureSampleCompareOffset with SampledTexture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleCompareOffset_Texture2D_compare;
Variable SampledTextureSampleCompareOffset_Texture2D_offset;
Function SampledTextureSampleCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2D_args = { &SampledTextureSampleCompareOffset_Texture2D_texture, &SampledTextureSampleCompareOffset_Texture2D_coordinate, &SampledTextureSampleCompareOffset_Texture2D_compare, &SampledTextureSampleCompareOffset_Texture2D_offset };

/// textureSampleCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture3D_coordinate;
Variable TextureSampleCompareOffset_Texture3D_compare;
Variable TextureSampleCompareOffset_Texture3D_offset;
Function TextureSampleCompareOffset_Texture3D;
inline constexpr std::array TextureSampleCompareOffset_Texture3D_args = { &TextureSampleCompareOffset_Texture3D_texture, &TextureSampleCompareOffset_Texture3D_sampler, &TextureSampleCompareOffset_Texture3D_coordinate, &TextureSampleCompareOffset_Texture3D_compare, &TextureSampleCompareOffset_Texture3D_offset };

/// textureSampleCompareOffset with SampledTexture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleCompareOffset_Texture3D_compare;
Variable SampledTextureSampleCompareOffset_Texture3D_offset;
Function SampledTextureSampleCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture3D_args = { &SampledTextureSampleCompareOffset_Texture3D_texture, &SampledTextureSampleCompareOffset_Texture3D_coordinate, &SampledTextureSampleCompareOffset_Texture3D_compare, &SampledTextureSampleCompareOffset_Texture3D_offset };

/// textureSampleCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleCompareOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture1DArray_coordinate;
Variable TextureSampleCompareOffset_Texture1DArray_compare;
Variable TextureSampleCompareOffset_Texture1DArray_offset;
Function TextureSampleCompareOffset_Texture1DArray;
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_args = { &TextureSampleCompareOffset_Texture1DArray_texture, &TextureSampleCompareOffset_Texture1DArray_sampler, &TextureSampleCompareOffset_Texture1DArray_coordinate, &TextureSampleCompareOffset_Texture1DArray_compare, &TextureSampleCompareOffset_Texture1DArray_offset };

/// textureSampleCompareOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
Variable SampledTextureSampleCompareOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleCompareOffset_Texture1DArray_compare;
Variable SampledTextureSampleCompareOffset_Texture1DArray_offset;
Function SampledTextureSampleCompareOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1DArray_args = { &SampledTextureSampleCompareOffset_Texture1DArray_texture, &SampledTextureSampleCompareOffset_Texture1DArray_coordinate, &SampledTextureSampleCompareOffset_Texture1DArray_compare, &SampledTextureSampleCompareOffset_Texture1DArray_offset };

/// textureSampleCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleCompareOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleCompareOffset_Texture2DArray_coordinate;
Variable TextureSampleCompareOffset_Texture2DArray_compare;
Variable TextureSampleCompareOffset_Texture2DArray_offset;
Function TextureSampleCompareOffset_Texture2DArray;
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_args = { &TextureSampleCompareOffset_Texture2DArray_texture, &TextureSampleCompareOffset_Texture2DArray_sampler, &TextureSampleCompareOffset_Texture2DArray_coordinate, &TextureSampleCompareOffset_Texture2DArray_compare, &TextureSampleCompareOffset_Texture2DArray_offset };

/// textureSampleCompareOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
Variable SampledTextureSampleCompareOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleCompareOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleCompareOffset_Texture2DArray_compare;
Variable SampledTextureSampleCompareOffset_Texture2DArray_offset;
Function SampledTextureSampleCompareOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2DArray_args = { &SampledTextureSampleCompareOffset_Texture2DArray_texture, &SampledTextureSampleCompareOffset_Texture2DArray_coordinate, &SampledTextureSampleCompareOffset_Texture2DArray_compare, &SampledTextureSampleCompareOffset_Texture2DArray_offset };

/// textureSampleProjCompare with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleProjCompare_Texture1D_texture;
inline constexpr std::array TextureSampleProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleProjCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture1D_coordinate;
Variable TextureSampleProjCompare_Texture1D_proj;
Variable TextureSampleProjCompare_Texture1D_compare;
Function TextureSampleProjCompare_Texture1D;
inline constexpr std::array TextureSampleProjCompare_Texture1D_args = { &TextureSampleProjCompare_Texture1D_texture, &TextureSampleProjCompare_Texture1D_sampler, &TextureSampleProjCompare_Texture1D_coordinate, &TextureSampleProjCompare_Texture1D_proj, &TextureSampleProjCompare_Texture1D_compare };

/// textureSampleProjCompare with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleProjCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleProjCompare_Texture1D_proj;
Variable SampledTextureSampleProjCompare_Texture1D_compare;
Function SampledTextureSampleProjCompare_Texture1D;
inline constexpr std::array SampledTextureSampleProjCompare_Texture1D_args = { &SampledTextureSampleProjCompare_Texture1D_texture, &SampledTextureSampleProjCompare_Texture1D_coordinate, &SampledTextureSampleProjCompare_Texture1D_proj, &SampledTextureSampleProjCompare_Texture1D_compare };

/// textureSampleProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleProjCompare_Texture2D_texture;
inline constexpr std::array TextureSampleProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleProjCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture2D_coordinate;
Variable TextureSampleProjCompare_Texture2D_proj;
Variable TextureSampleProjCompare_Texture2D_compare;
Function TextureSampleProjCompare_Texture2D;
inline constexpr std::array TextureSampleProjCompare_Texture2D_args = { &TextureSampleProjCompare_Texture2D_texture, &TextureSampleProjCompare_Texture2D_sampler, &TextureSampleProjCompare_Texture2D_coordinate, &TextureSampleProjCompare_Texture2D_proj, &TextureSampleProjCompare_Texture2D_compare };

/// textureSampleProjCompare with SampledTexture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleProjCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleProjCompare_Texture2D_proj;
Variable SampledTextureSampleProjCompare_Texture2D_compare;
Function SampledTextureSampleProjCompare_Texture2D;
inline constexpr std::array SampledTextureSampleProjCompare_Texture2D_args = { &SampledTextureSampleProjCompare_Texture2D_texture, &SampledTextureSampleProjCompare_Texture2D_coordinate, &SampledTextureSampleProjCompare_Texture2D_proj, &SampledTextureSampleProjCompare_Texture2D_compare };

/// textureSampleProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleProjCompare_Texture3D_texture;
inline constexpr std::array TextureSampleProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleProjCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompare_Texture3D_coordinate;
Variable TextureSampleProjCompare_Texture3D_proj;
Variable TextureSampleProjCompare_Texture3D_compare;
Function TextureSampleProjCompare_Texture3D;
inline constexpr std::array TextureSampleProjCompare_Texture3D_args = { &TextureSampleProjCompare_Texture3D_texture, &TextureSampleProjCompare_Texture3D_sampler, &TextureSampleProjCompare_Texture3D_coordinate, &TextureSampleProjCompare_Texture3D_proj, &TextureSampleProjCompare_Texture3D_compare };

/// textureSampleProjCompare with SampledTexture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleProjCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleProjCompare_Texture3D_proj;
Variable SampledTextureSampleProjCompare_Texture3D_compare;
Function SampledTextureSampleProjCompare_Texture3D;
inline constexpr std::array SampledTextureSampleProjCompare_Texture3D_args = { &SampledTextureSampleProjCompare_Texture3D_texture, &SampledTextureSampleProjCompare_Texture3D_coordinate, &SampledTextureSampleProjCompare_Texture3D_proj, &SampledTextureSampleProjCompare_Texture3D_compare };

/// textureSampleProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleProjCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleProjCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompareOffset_Texture1D_coordinate;
Variable TextureSampleProjCompareOffset_Texture1D_proj;
Variable TextureSampleProjCompareOffset_Texture1D_compare;
Variable TextureSampleProjCompareOffset_Texture1D_offset;
Function TextureSampleProjCompareOffset_Texture1D;
inline constexpr std::array TextureSampleProjCompareOffset_Texture1D_args = { &TextureSampleProjCompareOffset_Texture1D_texture, &TextureSampleProjCompareOffset_Texture1D_sampler, &TextureSampleProjCompareOffset_Texture1D_coordinate, &TextureSampleProjCompareOffset_Texture1D_proj, &TextureSampleProjCompareOffset_Texture1D_compare, &TextureSampleProjCompareOffset_Texture1D_offset };

/// textureSampleProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleProjCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleProjCompareOffset_Texture1D_proj;
Variable SampledTextureSampleProjCompareOffset_Texture1D_compare;
Variable SampledTextureSampleProjCompareOffset_Texture1D_offset;
Function SampledTextureSampleProjCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture1D_args = { &SampledTextureSampleProjCompareOffset_Texture1D_texture, &SampledTextureSampleProjCompareOffset_Texture1D_coordinate, &SampledTextureSampleProjCompareOffset_Texture1D_proj, &SampledTextureSampleProjCompareOffset_Texture1D_compare, &SampledTextureSampleProjCompareOffset_Texture1D_offset };

/// textureSampleProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleProjCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleProjCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompareOffset_Texture2D_coordinate;
Variable TextureSampleProjCompareOffset_Texture2D_proj;
Variable TextureSampleProjCompareOffset_Texture2D_compare;
Variable TextureSampleProjCompareOffset_Texture2D_offset;
Function TextureSampleProjCompareOffset_Texture2D;
inline constexpr std::array TextureSampleProjCompareOffset_Texture2D_args = { &TextureSampleProjCompareOffset_Texture2D_texture, &TextureSampleProjCompareOffset_Texture2D_sampler, &TextureSampleProjCompareOffset_Texture2D_coordinate, &TextureSampleProjCompareOffset_Texture2D_proj, &TextureSampleProjCompareOffset_Texture2D_compare, &TextureSampleProjCompareOffset_Texture2D_offset };

/// textureSampleProjCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleProjCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleProjCompareOffset_Texture2D_proj;
Variable SampledTextureSampleProjCompareOffset_Texture2D_compare;
Variable SampledTextureSampleProjCompareOffset_Texture2D_offset;
Function SampledTextureSampleProjCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture2D_args = { &SampledTextureSampleProjCompareOffset_Texture2D_texture, &SampledTextureSampleProjCompareOffset_Texture2D_coordinate, &SampledTextureSampleProjCompareOffset_Texture2D_proj, &SampledTextureSampleProjCompareOffset_Texture2D_compare, &SampledTextureSampleProjCompareOffset_Texture2D_offset };

/// textureSampleProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleProjCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleProjCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleProjCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleProjCompareOffset_Texture3D_coordinate;
Variable TextureSampleProjCompareOffset_Texture3D_proj;
Variable TextureSampleProjCompareOffset_Texture3D_compare;
Variable TextureSampleProjCompareOffset_Texture3D_offset;
Function TextureSampleProjCompareOffset_Texture3D;
inline constexpr std::array TextureSampleProjCompareOffset_Texture3D_args = { &TextureSampleProjCompareOffset_Texture3D_texture, &TextureSampleProjCompareOffset_Texture3D_sampler, &TextureSampleProjCompareOffset_Texture3D_coordinate, &TextureSampleProjCompareOffset_Texture3D_proj, &TextureSampleProjCompareOffset_Texture3D_compare, &TextureSampleProjCompareOffset_Texture3D_offset };

/// textureSampleProjCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleProjCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleProjCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleProjCompareOffset_Texture3D_proj;
Variable SampledTextureSampleProjCompareOffset_Texture3D_compare;
Variable SampledTextureSampleProjCompareOffset_Texture3D_offset;
Function SampledTextureSampleProjCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture3D_args = { &SampledTextureSampleProjCompareOffset_Texture3D_texture, &SampledTextureSampleProjCompareOffset_Texture3D_coordinate, &SampledTextureSampleProjCompareOffset_Texture3D_proj, &SampledTextureSampleProjCompareOffset_Texture3D_compare, &SampledTextureSampleProjCompareOffset_Texture3D_offset };

/// textureSampleLod with Texture1D, Sampler, Float32, Float32
Variable TextureSampleLod_Texture1D_texture;
inline constexpr std::array TextureSampleLod_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture1D_sampler;
inline constexpr std::array TextureSampleLod_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture1D_coordinate;
Variable TextureSampleLod_Texture1D_lod;
Function TextureSampleLod_Texture1D;
inline constexpr std::array TextureSampleLod_Texture1D_args = { &TextureSampleLod_Texture1D_texture, &TextureSampleLod_Texture1D_sampler, &TextureSampleLod_Texture1D_coordinate, &TextureSampleLod_Texture1D_lod };

/// textureSampleLod with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleLod_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLod_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_Texture1D_coordinate;
Variable SampledTextureSampleLod_Texture1D_lod;
Function SampledTextureSampleLod_Texture1D;
inline constexpr std::array SampledTextureSampleLod_Texture1D_args = { &SampledTextureSampleLod_Texture1D_texture, &SampledTextureSampleLod_Texture1D_coordinate, &SampledTextureSampleLod_Texture1D_lod };

/// textureSampleLod with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleLod_Texture2D_texture;
inline constexpr std::array TextureSampleLod_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture2D_sampler;
inline constexpr std::array TextureSampleLod_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture2D_coordinate;
Variable TextureSampleLod_Texture2D_lod;
Function TextureSampleLod_Texture2D;
inline constexpr std::array TextureSampleLod_Texture2D_args = { &TextureSampleLod_Texture2D_texture, &TextureSampleLod_Texture2D_sampler, &TextureSampleLod_Texture2D_coordinate, &TextureSampleLod_Texture2D_lod };

/// textureSampleLod with SampledTexture2D, Float32x2, Float32
Variable SampledTextureSampleLod_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLod_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_Texture2D_coordinate;
Variable SampledTextureSampleLod_Texture2D_lod;
Function SampledTextureSampleLod_Texture2D;
inline constexpr std::array SampledTextureSampleLod_Texture2D_args = { &SampledTextureSampleLod_Texture2D_texture, &SampledTextureSampleLod_Texture2D_coordinate, &SampledTextureSampleLod_Texture2D_lod };

/// textureSampleLod with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleLod_Texture3D_texture;
inline constexpr std::array TextureSampleLod_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture3D_sampler;
inline constexpr std::array TextureSampleLod_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture3D_coordinate;
Variable TextureSampleLod_Texture3D_lod;
Function TextureSampleLod_Texture3D;
inline constexpr std::array TextureSampleLod_Texture3D_args = { &TextureSampleLod_Texture3D_texture, &TextureSampleLod_Texture3D_sampler, &TextureSampleLod_Texture3D_coordinate, &TextureSampleLod_Texture3D_lod };

/// textureSampleLod with SampledTexture3D, Float32x3, Float32
Variable SampledTextureSampleLod_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLod_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_Texture3D_coordinate;
Variable SampledTextureSampleLod_Texture3D_lod;
Function SampledTextureSampleLod_Texture3D;
inline constexpr std::array SampledTextureSampleLod_Texture3D_args = { &SampledTextureSampleLod_Texture3D_texture, &SampledTextureSampleLod_Texture3D_coordinate, &SampledTextureSampleLod_Texture3D_lod };

/// textureSampleLod with TextureCube, Sampler, Float32x3, Float32
Variable TextureSampleLod_TextureCube_texture;
inline constexpr std::array TextureSampleLod_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_TextureCube_sampler;
inline constexpr std::array TextureSampleLod_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_TextureCube_coordinate;
Variable TextureSampleLod_TextureCube_lod;
Function TextureSampleLod_TextureCube;
inline constexpr std::array TextureSampleLod_TextureCube_args = { &TextureSampleLod_TextureCube_texture, &TextureSampleLod_TextureCube_sampler, &TextureSampleLod_TextureCube_coordinate, &TextureSampleLod_TextureCube_lod };

/// textureSampleLod with SampledTextureCube, Float32x3, Float32
Variable SampledTextureSampleLod_TextureCube_texture;
inline constexpr std::array SampledTextureSampleLod_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_TextureCube_coordinate;
Variable SampledTextureSampleLod_TextureCube_lod;
Function SampledTextureSampleLod_TextureCube;
inline constexpr std::array SampledTextureSampleLod_TextureCube_args = { &SampledTextureSampleLod_TextureCube_texture, &SampledTextureSampleLod_TextureCube_coordinate, &SampledTextureSampleLod_TextureCube_lod };

/// textureSampleLod with Texture1DArray, Sampler, Float32x2, Float32
Variable TextureSampleLod_Texture1DArray_texture;
inline constexpr std::array TextureSampleLod_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture1DArray_sampler;
inline constexpr std::array TextureSampleLod_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture1DArray_coordinate;
Variable TextureSampleLod_Texture1DArray_lod;
Function TextureSampleLod_Texture1DArray;
inline constexpr std::array TextureSampleLod_Texture1DArray_args = { &TextureSampleLod_Texture1DArray_texture, &TextureSampleLod_Texture1DArray_sampler, &TextureSampleLod_Texture1DArray_coordinate, &TextureSampleLod_Texture1DArray_lod };

/// textureSampleLod with SampledTexture1DArray, Float32x2, Float32
Variable SampledTextureSampleLod_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleLod_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_Texture1DArray_coordinate;
Variable SampledTextureSampleLod_Texture1DArray_lod;
Function SampledTextureSampleLod_Texture1DArray;
inline constexpr std::array SampledTextureSampleLod_Texture1DArray_args = { &SampledTextureSampleLod_Texture1DArray_texture, &SampledTextureSampleLod_Texture1DArray_coordinate, &SampledTextureSampleLod_Texture1DArray_lod };

/// textureSampleLod with Texture2DArray, Sampler, Float32x3, Float32
Variable TextureSampleLod_Texture2DArray_texture;
inline constexpr std::array TextureSampleLod_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture2DArray_sampler;
inline constexpr std::array TextureSampleLod_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_Texture2DArray_coordinate;
Variable TextureSampleLod_Texture2DArray_lod;
Function TextureSampleLod_Texture2DArray;
inline constexpr std::array TextureSampleLod_Texture2DArray_args = { &TextureSampleLod_Texture2DArray_texture, &TextureSampleLod_Texture2DArray_sampler, &TextureSampleLod_Texture2DArray_coordinate, &TextureSampleLod_Texture2DArray_lod };

/// textureSampleLod with SampledTexture2DArray, Float32x3, Float32
Variable SampledTextureSampleLod_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleLod_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_Texture2DArray_coordinate;
Variable SampledTextureSampleLod_Texture2DArray_lod;
Function SampledTextureSampleLod_Texture2DArray;
inline constexpr std::array SampledTextureSampleLod_Texture2DArray_args = { &SampledTextureSampleLod_Texture2DArray_texture, &SampledTextureSampleLod_Texture2DArray_coordinate, &SampledTextureSampleLod_Texture2DArray_lod };

/// textureSampleLod with TextureCubeArray, Sampler, Float32x4, Float32
Variable TextureSampleLod_TextureCubeArray_texture;
inline constexpr std::array TextureSampleLod_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_TextureCubeArray_sampler;
inline constexpr std::array TextureSampleLod_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLod_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLod_TextureCubeArray_coordinate;
Variable TextureSampleLod_TextureCubeArray_lod;
Function TextureSampleLod_TextureCubeArray;
inline constexpr std::array TextureSampleLod_TextureCubeArray_args = { &TextureSampleLod_TextureCubeArray_texture, &TextureSampleLod_TextureCubeArray_sampler, &TextureSampleLod_TextureCubeArray_coordinate, &TextureSampleLod_TextureCubeArray_lod };

/// textureSampleLod with SampledTextureCubeArray, Float32x4, Float32
Variable SampledTextureSampleLod_TextureCubeArray_texture;
inline constexpr std::array SampledTextureSampleLod_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLod_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLod_TextureCubeArray_coordinate;
Variable SampledTextureSampleLod_TextureCubeArray_lod;
Function SampledTextureSampleLod_TextureCubeArray;
inline constexpr std::array SampledTextureSampleLod_TextureCubeArray_args = { &SampledTextureSampleLod_TextureCubeArray_texture, &SampledTextureSampleLod_TextureCubeArray_coordinate, &SampledTextureSampleLod_TextureCubeArray_lod };

/// textureSampleLodOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleLodOffset_Texture1D_texture;
inline constexpr std::array TextureSampleLodOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleLodOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture1D_coordinate;
Variable TextureSampleLodOffset_Texture1D_lod;
Variable TextureSampleLodOffset_Texture1D_offset;
Function TextureSampleLodOffset_Texture1D;
inline constexpr std::array TextureSampleLodOffset_Texture1D_args = { &TextureSampleLodOffset_Texture1D_texture, &TextureSampleLodOffset_Texture1D_sampler, &TextureSampleLodOffset_Texture1D_coordinate, &TextureSampleLodOffset_Texture1D_lod, &TextureSampleLodOffset_Texture1D_offset };

/// textureSampleLodOffset with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleLodOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodOffset_Texture1D_coordinate;
Variable SampledTextureSampleLodOffset_Texture1D_lod;
Variable SampledTextureSampleLodOffset_Texture1D_offset;
Function SampledTextureSampleLodOffset_Texture1D;
inline constexpr std::array SampledTextureSampleLodOffset_Texture1D_args = { &SampledTextureSampleLodOffset_Texture1D_texture, &SampledTextureSampleLodOffset_Texture1D_coordinate, &SampledTextureSampleLodOffset_Texture1D_lod, &SampledTextureSampleLodOffset_Texture1D_offset };

/// textureSampleLodOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleLodOffset_Texture2D_texture;
inline constexpr std::array TextureSampleLodOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleLodOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture2D_coordinate;
Variable TextureSampleLodOffset_Texture2D_lod;
Variable TextureSampleLodOffset_Texture2D_offset;
Function TextureSampleLodOffset_Texture2D;
inline constexpr std::array TextureSampleLodOffset_Texture2D_args = { &TextureSampleLodOffset_Texture2D_texture, &TextureSampleLodOffset_Texture2D_sampler, &TextureSampleLodOffset_Texture2D_coordinate, &TextureSampleLodOffset_Texture2D_lod, &TextureSampleLodOffset_Texture2D_offset };

/// textureSampleLodOffset with SampledTexture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleLodOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodOffset_Texture2D_coordinate;
Variable SampledTextureSampleLodOffset_Texture2D_lod;
Variable SampledTextureSampleLodOffset_Texture2D_offset;
Function SampledTextureSampleLodOffset_Texture2D;
inline constexpr std::array SampledTextureSampleLodOffset_Texture2D_args = { &SampledTextureSampleLodOffset_Texture2D_texture, &SampledTextureSampleLodOffset_Texture2D_coordinate, &SampledTextureSampleLodOffset_Texture2D_lod, &SampledTextureSampleLodOffset_Texture2D_offset };

/// textureSampleLodOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleLodOffset_Texture3D_texture;
inline constexpr std::array TextureSampleLodOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleLodOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture3D_coordinate;
Variable TextureSampleLodOffset_Texture3D_lod;
Variable TextureSampleLodOffset_Texture3D_offset;
Function TextureSampleLodOffset_Texture3D;
inline constexpr std::array TextureSampleLodOffset_Texture3D_args = { &TextureSampleLodOffset_Texture3D_texture, &TextureSampleLodOffset_Texture3D_sampler, &TextureSampleLodOffset_Texture3D_coordinate, &TextureSampleLodOffset_Texture3D_lod, &TextureSampleLodOffset_Texture3D_offset };

/// textureSampleLodOffset with SampledTexture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleLodOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodOffset_Texture3D_coordinate;
Variable SampledTextureSampleLodOffset_Texture3D_lod;
Variable SampledTextureSampleLodOffset_Texture3D_offset;
Function SampledTextureSampleLodOffset_Texture3D;
inline constexpr std::array SampledTextureSampleLodOffset_Texture3D_args = { &SampledTextureSampleLodOffset_Texture3D_texture, &SampledTextureSampleLodOffset_Texture3D_coordinate, &SampledTextureSampleLodOffset_Texture3D_lod, &SampledTextureSampleLodOffset_Texture3D_offset };

/// textureSampleLodOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleLodOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleLodOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleLodOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture1DArray_coordinate;
Variable TextureSampleLodOffset_Texture1DArray_lod;
Variable TextureSampleLodOffset_Texture1DArray_offset;
Function TextureSampleLodOffset_Texture1DArray;
inline constexpr std::array TextureSampleLodOffset_Texture1DArray_args = { &TextureSampleLodOffset_Texture1DArray_texture, &TextureSampleLodOffset_Texture1DArray_sampler, &TextureSampleLodOffset_Texture1DArray_coordinate, &TextureSampleLodOffset_Texture1DArray_lod, &TextureSampleLodOffset_Texture1DArray_offset };

/// textureSampleLodOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
Variable SampledTextureSampleLodOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleLodOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleLodOffset_Texture1DArray_lod;
Variable SampledTextureSampleLodOffset_Texture1DArray_offset;
Function SampledTextureSampleLodOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleLodOffset_Texture1DArray_args = { &SampledTextureSampleLodOffset_Texture1DArray_texture, &SampledTextureSampleLodOffset_Texture1DArray_coordinate, &SampledTextureSampleLodOffset_Texture1DArray_lod, &SampledTextureSampleLodOffset_Texture1DArray_offset };

/// textureSampleLodOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleLodOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleLodOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleLodOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodOffset_Texture2DArray_coordinate;
Variable TextureSampleLodOffset_Texture2DArray_lod;
Variable TextureSampleLodOffset_Texture2DArray_offset;
Function TextureSampleLodOffset_Texture2DArray;
inline constexpr std::array TextureSampleLodOffset_Texture2DArray_args = { &TextureSampleLodOffset_Texture2DArray_texture, &TextureSampleLodOffset_Texture2DArray_sampler, &TextureSampleLodOffset_Texture2DArray_coordinate, &TextureSampleLodOffset_Texture2DArray_lod, &TextureSampleLodOffset_Texture2DArray_offset };

/// textureSampleLodOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
Variable SampledTextureSampleLodOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleLodOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleLodOffset_Texture2DArray_lod;
Variable SampledTextureSampleLodOffset_Texture2DArray_offset;
Function SampledTextureSampleLodOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleLodOffset_Texture2DArray_args = { &SampledTextureSampleLodOffset_Texture2DArray_texture, &SampledTextureSampleLodOffset_Texture2DArray_coordinate, &SampledTextureSampleLodOffset_Texture2DArray_lod, &SampledTextureSampleLodOffset_Texture2DArray_offset };

/// textureSampleLodProj with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleLodProj_Texture1D_texture;
inline constexpr std::array TextureSampleLodProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProj_Texture1D_sampler;
inline constexpr std::array TextureSampleLodProj_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProj_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProj_Texture1D_coordinate;
Variable TextureSampleLodProj_Texture1D_lod;
Variable TextureSampleLodProj_Texture1D_proj;
Function TextureSampleLodProj_Texture1D;
inline constexpr std::array TextureSampleLodProj_Texture1D_args = { &TextureSampleLodProj_Texture1D_texture, &TextureSampleLodProj_Texture1D_sampler, &TextureSampleLodProj_Texture1D_coordinate, &TextureSampleLodProj_Texture1D_lod, &TextureSampleLodProj_Texture1D_proj };

/// textureSampleLodProj with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleLodProj_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProj_Texture1D_coordinate;
Variable SampledTextureSampleLodProj_Texture1D_lod;
Variable SampledTextureSampleLodProj_Texture1D_proj;
Function SampledTextureSampleLodProj_Texture1D;
inline constexpr std::array SampledTextureSampleLodProj_Texture1D_args = { &SampledTextureSampleLodProj_Texture1D_texture, &SampledTextureSampleLodProj_Texture1D_coordinate, &SampledTextureSampleLodProj_Texture1D_lod, &SampledTextureSampleLodProj_Texture1D_proj };

/// textureSampleLodProj with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleLodProj_Texture2D_texture;
inline constexpr std::array TextureSampleLodProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProj_Texture2D_sampler;
inline constexpr std::array TextureSampleLodProj_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProj_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProj_Texture2D_coordinate;
Variable TextureSampleLodProj_Texture2D_lod;
Variable TextureSampleLodProj_Texture2D_proj;
Function TextureSampleLodProj_Texture2D;
inline constexpr std::array TextureSampleLodProj_Texture2D_args = { &TextureSampleLodProj_Texture2D_texture, &TextureSampleLodProj_Texture2D_sampler, &TextureSampleLodProj_Texture2D_coordinate, &TextureSampleLodProj_Texture2D_lod, &TextureSampleLodProj_Texture2D_proj };

/// textureSampleLodProj with SampledTexture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleLodProj_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProj_Texture2D_coordinate;
Variable SampledTextureSampleLodProj_Texture2D_lod;
Variable SampledTextureSampleLodProj_Texture2D_proj;
Function SampledTextureSampleLodProj_Texture2D;
inline constexpr std::array SampledTextureSampleLodProj_Texture2D_args = { &SampledTextureSampleLodProj_Texture2D_texture, &SampledTextureSampleLodProj_Texture2D_coordinate, &SampledTextureSampleLodProj_Texture2D_lod, &SampledTextureSampleLodProj_Texture2D_proj };

/// textureSampleLodProj with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleLodProj_Texture3D_texture;
inline constexpr std::array TextureSampleLodProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProj_Texture3D_sampler;
inline constexpr std::array TextureSampleLodProj_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProj_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProj_Texture3D_coordinate;
Variable TextureSampleLodProj_Texture3D_lod;
Variable TextureSampleLodProj_Texture3D_proj;
Function TextureSampleLodProj_Texture3D;
inline constexpr std::array TextureSampleLodProj_Texture3D_args = { &TextureSampleLodProj_Texture3D_texture, &TextureSampleLodProj_Texture3D_sampler, &TextureSampleLodProj_Texture3D_coordinate, &TextureSampleLodProj_Texture3D_lod, &TextureSampleLodProj_Texture3D_proj };

/// textureSampleLodProj with SampledTexture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleLodProj_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProj_Texture3D_coordinate;
Variable SampledTextureSampleLodProj_Texture3D_lod;
Variable SampledTextureSampleLodProj_Texture3D_proj;
Function SampledTextureSampleLodProj_Texture3D;
inline constexpr std::array SampledTextureSampleLodProj_Texture3D_args = { &SampledTextureSampleLodProj_Texture3D_texture, &SampledTextureSampleLodProj_Texture3D_coordinate, &SampledTextureSampleLodProj_Texture3D_lod, &SampledTextureSampleLodProj_Texture3D_proj };

/// textureSampleLodProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleLodProjOffset_Texture1D_texture;
inline constexpr std::array TextureSampleLodProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleLodProjOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjOffset_Texture1D_coordinate;
Variable TextureSampleLodProjOffset_Texture1D_lod;
Variable TextureSampleLodProjOffset_Texture1D_proj;
Variable TextureSampleLodProjOffset_Texture1D_offset;
Function TextureSampleLodProjOffset_Texture1D;
inline constexpr std::array TextureSampleLodProjOffset_Texture1D_args = { &TextureSampleLodProjOffset_Texture1D_texture, &TextureSampleLodProjOffset_Texture1D_sampler, &TextureSampleLodProjOffset_Texture1D_coordinate, &TextureSampleLodProjOffset_Texture1D_lod, &TextureSampleLodProjOffset_Texture1D_proj, &TextureSampleLodProjOffset_Texture1D_offset };

/// textureSampleLodProjOffset with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleLodProjOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleLodProjOffset_Texture1D_lod;
Variable SampledTextureSampleLodProjOffset_Texture1D_proj;
Variable SampledTextureSampleLodProjOffset_Texture1D_offset;
Function SampledTextureSampleLodProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture1D_args = { &SampledTextureSampleLodProjOffset_Texture1D_texture, &SampledTextureSampleLodProjOffset_Texture1D_coordinate, &SampledTextureSampleLodProjOffset_Texture1D_lod, &SampledTextureSampleLodProjOffset_Texture1D_proj, &SampledTextureSampleLodProjOffset_Texture1D_offset };

/// textureSampleLodProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleLodProjOffset_Texture2D_texture;
inline constexpr std::array TextureSampleLodProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleLodProjOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjOffset_Texture2D_coordinate;
Variable TextureSampleLodProjOffset_Texture2D_lod;
Variable TextureSampleLodProjOffset_Texture2D_proj;
Variable TextureSampleLodProjOffset_Texture2D_offset;
Function TextureSampleLodProjOffset_Texture2D;
inline constexpr std::array TextureSampleLodProjOffset_Texture2D_args = { &TextureSampleLodProjOffset_Texture2D_texture, &TextureSampleLodProjOffset_Texture2D_sampler, &TextureSampleLodProjOffset_Texture2D_coordinate, &TextureSampleLodProjOffset_Texture2D_lod, &TextureSampleLodProjOffset_Texture2D_proj, &TextureSampleLodProjOffset_Texture2D_offset };

/// textureSampleLodProjOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleLodProjOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleLodProjOffset_Texture2D_lod;
Variable SampledTextureSampleLodProjOffset_Texture2D_proj;
Variable SampledTextureSampleLodProjOffset_Texture2D_offset;
Function SampledTextureSampleLodProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture2D_args = { &SampledTextureSampleLodProjOffset_Texture2D_texture, &SampledTextureSampleLodProjOffset_Texture2D_coordinate, &SampledTextureSampleLodProjOffset_Texture2D_lod, &SampledTextureSampleLodProjOffset_Texture2D_proj, &SampledTextureSampleLodProjOffset_Texture2D_offset };

/// textureSampleLodProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleLodProjOffset_Texture3D_texture;
inline constexpr std::array TextureSampleLodProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleLodProjOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjOffset_Texture3D_coordinate;
Variable TextureSampleLodProjOffset_Texture3D_lod;
Variable TextureSampleLodProjOffset_Texture3D_proj;
Variable TextureSampleLodProjOffset_Texture3D_offset;
Function TextureSampleLodProjOffset_Texture3D;
inline constexpr std::array TextureSampleLodProjOffset_Texture3D_args = { &TextureSampleLodProjOffset_Texture3D_texture, &TextureSampleLodProjOffset_Texture3D_sampler, &TextureSampleLodProjOffset_Texture3D_coordinate, &TextureSampleLodProjOffset_Texture3D_lod, &TextureSampleLodProjOffset_Texture3D_proj, &TextureSampleLodProjOffset_Texture3D_offset };

/// textureSampleLodProjOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleLodProjOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleLodProjOffset_Texture3D_lod;
Variable SampledTextureSampleLodProjOffset_Texture3D_proj;
Variable SampledTextureSampleLodProjOffset_Texture3D_offset;
Function SampledTextureSampleLodProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture3D_args = { &SampledTextureSampleLodProjOffset_Texture3D_texture, &SampledTextureSampleLodProjOffset_Texture3D_coordinate, &SampledTextureSampleLodProjOffset_Texture3D_lod, &SampledTextureSampleLodProjOffset_Texture3D_proj, &SampledTextureSampleLodProjOffset_Texture3D_offset };

/// textureSampleLodCompare with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleLodCompare_Texture1D_texture;
inline constexpr std::array TextureSampleLodCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleLodCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture1D_coordinate;
Variable TextureSampleLodCompare_Texture1D_lod;
Variable TextureSampleLodCompare_Texture1D_compare;
Function TextureSampleLodCompare_Texture1D;
inline constexpr std::array TextureSampleLodCompare_Texture1D_args = { &TextureSampleLodCompare_Texture1D_texture, &TextureSampleLodCompare_Texture1D_sampler, &TextureSampleLodCompare_Texture1D_coordinate, &TextureSampleLodCompare_Texture1D_lod, &TextureSampleLodCompare_Texture1D_compare };

/// textureSampleLodCompare with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompare_Texture1D_coordinate;
Variable SampledTextureSampleLodCompare_Texture1D_lod;
Variable SampledTextureSampleLodCompare_Texture1D_compare;
Function SampledTextureSampleLodCompare_Texture1D;
inline constexpr std::array SampledTextureSampleLodCompare_Texture1D_args = { &SampledTextureSampleLodCompare_Texture1D_texture, &SampledTextureSampleLodCompare_Texture1D_coordinate, &SampledTextureSampleLodCompare_Texture1D_lod, &SampledTextureSampleLodCompare_Texture1D_compare };

/// textureSampleLodCompare with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleLodCompare_Texture2D_texture;
inline constexpr std::array TextureSampleLodCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleLodCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture2D_coordinate;
Variable TextureSampleLodCompare_Texture2D_lod;
Variable TextureSampleLodCompare_Texture2D_compare;
Function TextureSampleLodCompare_Texture2D;
inline constexpr std::array TextureSampleLodCompare_Texture2D_args = { &TextureSampleLodCompare_Texture2D_texture, &TextureSampleLodCompare_Texture2D_sampler, &TextureSampleLodCompare_Texture2D_coordinate, &TextureSampleLodCompare_Texture2D_lod, &TextureSampleLodCompare_Texture2D_compare };

/// textureSampleLodCompare with SampledTexture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompare_Texture2D_coordinate;
Variable SampledTextureSampleLodCompare_Texture2D_lod;
Variable SampledTextureSampleLodCompare_Texture2D_compare;
Function SampledTextureSampleLodCompare_Texture2D;
inline constexpr std::array SampledTextureSampleLodCompare_Texture2D_args = { &SampledTextureSampleLodCompare_Texture2D_texture, &SampledTextureSampleLodCompare_Texture2D_coordinate, &SampledTextureSampleLodCompare_Texture2D_lod, &SampledTextureSampleLodCompare_Texture2D_compare };

/// textureSampleLodCompare with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleLodCompare_Texture3D_texture;
inline constexpr std::array TextureSampleLodCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleLodCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture3D_coordinate;
Variable TextureSampleLodCompare_Texture3D_lod;
Variable TextureSampleLodCompare_Texture3D_compare;
Function TextureSampleLodCompare_Texture3D;
inline constexpr std::array TextureSampleLodCompare_Texture3D_args = { &TextureSampleLodCompare_Texture3D_texture, &TextureSampleLodCompare_Texture3D_sampler, &TextureSampleLodCompare_Texture3D_coordinate, &TextureSampleLodCompare_Texture3D_lod, &TextureSampleLodCompare_Texture3D_compare };

/// textureSampleLodCompare with SampledTexture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompare_Texture3D_coordinate;
Variable SampledTextureSampleLodCompare_Texture3D_lod;
Variable SampledTextureSampleLodCompare_Texture3D_compare;
Function SampledTextureSampleLodCompare_Texture3D;
inline constexpr std::array SampledTextureSampleLodCompare_Texture3D_args = { &SampledTextureSampleLodCompare_Texture3D_texture, &SampledTextureSampleLodCompare_Texture3D_coordinate, &SampledTextureSampleLodCompare_Texture3D_lod, &SampledTextureSampleLodCompare_Texture3D_compare };

/// textureSampleLodCompare with Texture1DArray, Sampler, Float32x2, Float32, Float32
Variable TextureSampleLodCompare_Texture1DArray_texture;
inline constexpr std::array TextureSampleLodCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture1DArray_sampler;
inline constexpr std::array TextureSampleLodCompare_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture1DArray_coordinate;
Variable TextureSampleLodCompare_Texture1DArray_lod;
Variable TextureSampleLodCompare_Texture1DArray_compare;
Function TextureSampleLodCompare_Texture1DArray;
inline constexpr std::array TextureSampleLodCompare_Texture1DArray_args = { &TextureSampleLodCompare_Texture1DArray_texture, &TextureSampleLodCompare_Texture1DArray_sampler, &TextureSampleLodCompare_Texture1DArray_coordinate, &TextureSampleLodCompare_Texture1DArray_lod, &TextureSampleLodCompare_Texture1DArray_compare };

/// textureSampleLodCompare with SampledTexture1DArray, Float32x2, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleLodCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleLodCompare_Texture1DArray_lod;
Variable SampledTextureSampleLodCompare_Texture1DArray_compare;
Function SampledTextureSampleLodCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleLodCompare_Texture1DArray_args = { &SampledTextureSampleLodCompare_Texture1DArray_texture, &SampledTextureSampleLodCompare_Texture1DArray_coordinate, &SampledTextureSampleLodCompare_Texture1DArray_lod, &SampledTextureSampleLodCompare_Texture1DArray_compare };

/// textureSampleLodCompare with Texture2DArray, Sampler, Float32x3, Float32, Float32
Variable TextureSampleLodCompare_Texture2DArray_texture;
inline constexpr std::array TextureSampleLodCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture2DArray_sampler;
inline constexpr std::array TextureSampleLodCompare_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompare_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompare_Texture2DArray_coordinate;
Variable TextureSampleLodCompare_Texture2DArray_lod;
Variable TextureSampleLodCompare_Texture2DArray_compare;
Function TextureSampleLodCompare_Texture2DArray;
inline constexpr std::array TextureSampleLodCompare_Texture2DArray_args = { &TextureSampleLodCompare_Texture2DArray_texture, &TextureSampleLodCompare_Texture2DArray_sampler, &TextureSampleLodCompare_Texture2DArray_coordinate, &TextureSampleLodCompare_Texture2DArray_lod, &TextureSampleLodCompare_Texture2DArray_compare };

/// textureSampleLodCompare with SampledTexture2DArray, Float32x3, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleLodCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleLodCompare_Texture2DArray_lod;
Variable SampledTextureSampleLodCompare_Texture2DArray_compare;
Function SampledTextureSampleLodCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleLodCompare_Texture2DArray_args = { &SampledTextureSampleLodCompare_Texture2DArray_texture, &SampledTextureSampleLodCompare_Texture2DArray_coordinate, &SampledTextureSampleLodCompare_Texture2DArray_lod, &SampledTextureSampleLodCompare_Texture2DArray_compare };

/// textureSampleLodCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleLodCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture1D_coordinate;
Variable TextureSampleLodCompareOffset_Texture1D_lod;
Variable TextureSampleLodCompareOffset_Texture1D_compare;
Variable TextureSampleLodCompareOffset_Texture1D_offset;
Function TextureSampleLodCompareOffset_Texture1D;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1D_args = { &TextureSampleLodCompareOffset_Texture1D_texture, &TextureSampleLodCompareOffset_Texture1D_sampler, &TextureSampleLodCompareOffset_Texture1D_coordinate, &TextureSampleLodCompareOffset_Texture1D_lod, &TextureSampleLodCompareOffset_Texture1D_compare, &TextureSampleLodCompareOffset_Texture1D_offset };

/// textureSampleLodCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleLodCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture1D_lod;
Variable SampledTextureSampleLodCompareOffset_Texture1D_compare;
Variable SampledTextureSampleLodCompareOffset_Texture1D_offset;
Function SampledTextureSampleLodCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1D_args = { &SampledTextureSampleLodCompareOffset_Texture1D_texture, &SampledTextureSampleLodCompareOffset_Texture1D_coordinate, &SampledTextureSampleLodCompareOffset_Texture1D_lod, &SampledTextureSampleLodCompareOffset_Texture1D_compare, &SampledTextureSampleLodCompareOffset_Texture1D_offset };

/// textureSampleLodCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleLodCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture2D_coordinate;
Variable TextureSampleLodCompareOffset_Texture2D_lod;
Variable TextureSampleLodCompareOffset_Texture2D_compare;
Variable TextureSampleLodCompareOffset_Texture2D_offset;
Function TextureSampleLodCompareOffset_Texture2D;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2D_args = { &TextureSampleLodCompareOffset_Texture2D_texture, &TextureSampleLodCompareOffset_Texture2D_sampler, &TextureSampleLodCompareOffset_Texture2D_coordinate, &TextureSampleLodCompareOffset_Texture2D_lod, &TextureSampleLodCompareOffset_Texture2D_compare, &TextureSampleLodCompareOffset_Texture2D_offset };

/// textureSampleLodCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleLodCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture2D_lod;
Variable SampledTextureSampleLodCompareOffset_Texture2D_compare;
Variable SampledTextureSampleLodCompareOffset_Texture2D_offset;
Function SampledTextureSampleLodCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2D_args = { &SampledTextureSampleLodCompareOffset_Texture2D_texture, &SampledTextureSampleLodCompareOffset_Texture2D_coordinate, &SampledTextureSampleLodCompareOffset_Texture2D_lod, &SampledTextureSampleLodCompareOffset_Texture2D_compare, &SampledTextureSampleLodCompareOffset_Texture2D_offset };

/// textureSampleLodCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleLodCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleLodCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleLodCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture3D_coordinate;
Variable TextureSampleLodCompareOffset_Texture3D_lod;
Variable TextureSampleLodCompareOffset_Texture3D_compare;
Variable TextureSampleLodCompareOffset_Texture3D_offset;
Function TextureSampleLodCompareOffset_Texture3D;
inline constexpr std::array TextureSampleLodCompareOffset_Texture3D_args = { &TextureSampleLodCompareOffset_Texture3D_texture, &TextureSampleLodCompareOffset_Texture3D_sampler, &TextureSampleLodCompareOffset_Texture3D_coordinate, &TextureSampleLodCompareOffset_Texture3D_lod, &TextureSampleLodCompareOffset_Texture3D_compare, &TextureSampleLodCompareOffset_Texture3D_offset };

/// textureSampleLodCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleLodCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture3D_lod;
Variable SampledTextureSampleLodCompareOffset_Texture3D_compare;
Variable SampledTextureSampleLodCompareOffset_Texture3D_offset;
Function SampledTextureSampleLodCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture3D_args = { &SampledTextureSampleLodCompareOffset_Texture3D_texture, &SampledTextureSampleLodCompareOffset_Texture3D_coordinate, &SampledTextureSampleLodCompareOffset_Texture3D_lod, &SampledTextureSampleLodCompareOffset_Texture3D_compare, &SampledTextureSampleLodCompareOffset_Texture3D_offset };

/// textureSampleLodCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleLodCompareOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture1DArray_coordinate;
Variable TextureSampleLodCompareOffset_Texture1DArray_lod;
Variable TextureSampleLodCompareOffset_Texture1DArray_compare;
Variable TextureSampleLodCompareOffset_Texture1DArray_offset;
Function TextureSampleLodCompareOffset_Texture1DArray;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1DArray_args = { &TextureSampleLodCompareOffset_Texture1DArray_texture, &TextureSampleLodCompareOffset_Texture1DArray_sampler, &TextureSampleLodCompareOffset_Texture1DArray_coordinate, &TextureSampleLodCompareOffset_Texture1DArray_lod, &TextureSampleLodCompareOffset_Texture1DArray_compare, &TextureSampleLodCompareOffset_Texture1DArray_offset };

/// textureSampleLodCompareOffset with SampledTexture1DArray, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_lod;
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_compare;
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_offset;
Function SampledTextureSampleLodCompareOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1DArray_args = { &SampledTextureSampleLodCompareOffset_Texture1DArray_texture, &SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate, &SampledTextureSampleLodCompareOffset_Texture1DArray_lod, &SampledTextureSampleLodCompareOffset_Texture1DArray_compare, &SampledTextureSampleLodCompareOffset_Texture1DArray_offset };

/// textureSampleLodCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleLodCompareOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodCompareOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodCompareOffset_Texture2DArray_coordinate;
Variable TextureSampleLodCompareOffset_Texture2DArray_lod;
Variable TextureSampleLodCompareOffset_Texture2DArray_compare;
Variable TextureSampleLodCompareOffset_Texture2DArray_offset;
Function TextureSampleLodCompareOffset_Texture2DArray;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2DArray_args = { &TextureSampleLodCompareOffset_Texture2DArray_texture, &TextureSampleLodCompareOffset_Texture2DArray_sampler, &TextureSampleLodCompareOffset_Texture2DArray_coordinate, &TextureSampleLodCompareOffset_Texture2DArray_lod, &TextureSampleLodCompareOffset_Texture2DArray_compare, &TextureSampleLodCompareOffset_Texture2DArray_offset };

/// textureSampleLodCompareOffset with SampledTexture2DArray, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_lod;
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_compare;
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_offset;
Function SampledTextureSampleLodCompareOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2DArray_args = { &SampledTextureSampleLodCompareOffset_Texture2DArray_texture, &SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate, &SampledTextureSampleLodCompareOffset_Texture2DArray_lod, &SampledTextureSampleLodCompareOffset_Texture2DArray_compare, &SampledTextureSampleLodCompareOffset_Texture2DArray_offset };

/// textureSampleLodProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleLodProjCompare_Texture1D_texture;
inline constexpr std::array TextureSampleLodProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleLodProjCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture1D_coordinate;
Variable TextureSampleLodProjCompare_Texture1D_lod;
Variable TextureSampleLodProjCompare_Texture1D_proj;
Variable TextureSampleLodProjCompare_Texture1D_compare;
Function TextureSampleLodProjCompare_Texture1D;
inline constexpr std::array TextureSampleLodProjCompare_Texture1D_args = { &TextureSampleLodProjCompare_Texture1D_texture, &TextureSampleLodProjCompare_Texture1D_sampler, &TextureSampleLodProjCompare_Texture1D_coordinate, &TextureSampleLodProjCompare_Texture1D_lod, &TextureSampleLodProjCompare_Texture1D_proj, &TextureSampleLodProjCompare_Texture1D_compare };

/// textureSampleLodProjCompare with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture1D_lod;
Variable SampledTextureSampleLodProjCompare_Texture1D_proj;
Variable SampledTextureSampleLodProjCompare_Texture1D_compare;
Function SampledTextureSampleLodProjCompare_Texture1D;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture1D_args = { &SampledTextureSampleLodProjCompare_Texture1D_texture, &SampledTextureSampleLodProjCompare_Texture1D_coordinate, &SampledTextureSampleLodProjCompare_Texture1D_lod, &SampledTextureSampleLodProjCompare_Texture1D_proj, &SampledTextureSampleLodProjCompare_Texture1D_compare };

/// textureSampleLodProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32, Float32
Variable TextureSampleLodProjCompare_Texture2D_texture;
inline constexpr std::array TextureSampleLodProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleLodProjCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture2D_coordinate;
Variable TextureSampleLodProjCompare_Texture2D_lod;
Variable TextureSampleLodProjCompare_Texture2D_proj;
Variable TextureSampleLodProjCompare_Texture2D_compare;
Function TextureSampleLodProjCompare_Texture2D;
inline constexpr std::array TextureSampleLodProjCompare_Texture2D_args = { &TextureSampleLodProjCompare_Texture2D_texture, &TextureSampleLodProjCompare_Texture2D_sampler, &TextureSampleLodProjCompare_Texture2D_coordinate, &TextureSampleLodProjCompare_Texture2D_lod, &TextureSampleLodProjCompare_Texture2D_proj, &TextureSampleLodProjCompare_Texture2D_compare };

/// textureSampleLodProjCompare with SampledTexture2D, Float32x2, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture2D_lod;
Variable SampledTextureSampleLodProjCompare_Texture2D_proj;
Variable SampledTextureSampleLodProjCompare_Texture2D_compare;
Function SampledTextureSampleLodProjCompare_Texture2D;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture2D_args = { &SampledTextureSampleLodProjCompare_Texture2D_texture, &SampledTextureSampleLodProjCompare_Texture2D_coordinate, &SampledTextureSampleLodProjCompare_Texture2D_lod, &SampledTextureSampleLodProjCompare_Texture2D_proj, &SampledTextureSampleLodProjCompare_Texture2D_compare };

/// textureSampleLodProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32, Float32
Variable TextureSampleLodProjCompare_Texture3D_texture;
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompare_Texture3D_coordinate;
Variable TextureSampleLodProjCompare_Texture3D_lod;
Variable TextureSampleLodProjCompare_Texture3D_proj;
Variable TextureSampleLodProjCompare_Texture3D_compare;
Function TextureSampleLodProjCompare_Texture3D;
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_args = { &TextureSampleLodProjCompare_Texture3D_texture, &TextureSampleLodProjCompare_Texture3D_sampler, &TextureSampleLodProjCompare_Texture3D_coordinate, &TextureSampleLodProjCompare_Texture3D_lod, &TextureSampleLodProjCompare_Texture3D_proj, &TextureSampleLodProjCompare_Texture3D_compare };

/// textureSampleLodProjCompare with SampledTexture3D, Float32x3, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture3D_lod;
Variable SampledTextureSampleLodProjCompare_Texture3D_proj;
Variable SampledTextureSampleLodProjCompare_Texture3D_compare;
Function SampledTextureSampleLodProjCompare_Texture3D;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture3D_args = { &SampledTextureSampleLodProjCompare_Texture3D_texture, &SampledTextureSampleLodProjCompare_Texture3D_coordinate, &SampledTextureSampleLodProjCompare_Texture3D_lod, &SampledTextureSampleLodProjCompare_Texture3D_proj, &SampledTextureSampleLodProjCompare_Texture3D_compare };

/// textureSampleLodProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleLodProjCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompareOffset_Texture1D_coordinate;
Variable TextureSampleLodProjCompareOffset_Texture1D_lod;
Variable TextureSampleLodProjCompareOffset_Texture1D_proj;
Variable TextureSampleLodProjCompareOffset_Texture1D_compare;
Variable TextureSampleLodProjCompareOffset_Texture1D_offset;
Function TextureSampleLodProjCompareOffset_Texture1D;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture1D_args = { &TextureSampleLodProjCompareOffset_Texture1D_texture, &TextureSampleLodProjCompareOffset_Texture1D_sampler, &TextureSampleLodProjCompareOffset_Texture1D_coordinate, &TextureSampleLodProjCompareOffset_Texture1D_lod, &TextureSampleLodProjCompareOffset_Texture1D_proj, &TextureSampleLodProjCompareOffset_Texture1D_compare, &TextureSampleLodProjCompareOffset_Texture1D_offset };

/// textureSampleLodProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_lod;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_proj;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_compare;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_offset;
Function SampledTextureSampleLodProjCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture1D_args = { &SampledTextureSampleLodProjCompareOffset_Texture1D_texture, &SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate, &SampledTextureSampleLodProjCompareOffset_Texture1D_lod, &SampledTextureSampleLodProjCompareOffset_Texture1D_proj, &SampledTextureSampleLodProjCompareOffset_Texture1D_compare, &SampledTextureSampleLodProjCompareOffset_Texture1D_offset };

/// textureSampleLodProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32, Float32x2
Variable TextureSampleLodProjCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompareOffset_Texture2D_coordinate;
Variable TextureSampleLodProjCompareOffset_Texture2D_lod;
Variable TextureSampleLodProjCompareOffset_Texture2D_proj;
Variable TextureSampleLodProjCompareOffset_Texture2D_compare;
Variable TextureSampleLodProjCompareOffset_Texture2D_offset;
Function TextureSampleLodProjCompareOffset_Texture2D;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture2D_args = { &TextureSampleLodProjCompareOffset_Texture2D_texture, &TextureSampleLodProjCompareOffset_Texture2D_sampler, &TextureSampleLodProjCompareOffset_Texture2D_coordinate, &TextureSampleLodProjCompareOffset_Texture2D_lod, &TextureSampleLodProjCompareOffset_Texture2D_proj, &TextureSampleLodProjCompareOffset_Texture2D_compare, &TextureSampleLodProjCompareOffset_Texture2D_offset };

/// textureSampleLodProjCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32, Float32x2
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_lod;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_proj;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_compare;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_offset;
Function SampledTextureSampleLodProjCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture2D_args = { &SampledTextureSampleLodProjCompareOffset_Texture2D_texture, &SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate, &SampledTextureSampleLodProjCompareOffset_Texture2D_lod, &SampledTextureSampleLodProjCompareOffset_Texture2D_proj, &SampledTextureSampleLodProjCompareOffset_Texture2D_compare, &SampledTextureSampleLodProjCompareOffset_Texture2D_offset };

/// textureSampleLodProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32, Float32x3
Variable TextureSampleLodProjCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleLodProjCompareOffset_Texture3D_coordinate;
Variable TextureSampleLodProjCompareOffset_Texture3D_lod;
Variable TextureSampleLodProjCompareOffset_Texture3D_proj;
Variable TextureSampleLodProjCompareOffset_Texture3D_compare;
Variable TextureSampleLodProjCompareOffset_Texture3D_offset;
Function TextureSampleLodProjCompareOffset_Texture3D;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture3D_args = { &TextureSampleLodProjCompareOffset_Texture3D_texture, &TextureSampleLodProjCompareOffset_Texture3D_sampler, &TextureSampleLodProjCompareOffset_Texture3D_coordinate, &TextureSampleLodProjCompareOffset_Texture3D_lod, &TextureSampleLodProjCompareOffset_Texture3D_proj, &TextureSampleLodProjCompareOffset_Texture3D_compare, &TextureSampleLodProjCompareOffset_Texture3D_offset };

/// textureSampleLodProjCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32, Float32x3
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_lod;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_proj;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_compare;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_offset;
Function SampledTextureSampleLodProjCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture3D_args = { &SampledTextureSampleLodProjCompareOffset_Texture3D_texture, &SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate, &SampledTextureSampleLodProjCompareOffset_Texture3D_lod, &SampledTextureSampleLodProjCompareOffset_Texture3D_proj, &SampledTextureSampleLodProjCompareOffset_Texture3D_compare, &SampledTextureSampleLodProjCompareOffset_Texture3D_offset };

/// textureSampleGrad with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleGrad_Texture1D_texture;
inline constexpr std::array TextureSampleGrad_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture1D_sampler;
inline constexpr std::array TextureSampleGrad_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture1D_coordinate;
Variable TextureSampleGrad_Texture1D_grad_x;
Variable TextureSampleGrad_Texture1D_grad_y;
Function TextureSampleGrad_Texture1D;
inline constexpr std::array TextureSampleGrad_Texture1D_args = { &TextureSampleGrad_Texture1D_texture, &TextureSampleGrad_Texture1D_sampler, &TextureSampleGrad_Texture1D_coordinate, &TextureSampleGrad_Texture1D_grad_x, &TextureSampleGrad_Texture1D_grad_y };

/// textureSampleGrad with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleGrad_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGrad_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_Texture1D_coordinate;
Variable SampledTextureSampleGrad_Texture1D_grad_x;
Variable SampledTextureSampleGrad_Texture1D_grad_y;
Function SampledTextureSampleGrad_Texture1D;
inline constexpr std::array SampledTextureSampleGrad_Texture1D_args = { &SampledTextureSampleGrad_Texture1D_texture, &SampledTextureSampleGrad_Texture1D_coordinate, &SampledTextureSampleGrad_Texture1D_grad_x, &SampledTextureSampleGrad_Texture1D_grad_y };

/// textureSampleGrad with Texture2D, Sampler, Float32x2, Float32x2, Float32x2
Variable TextureSampleGrad_Texture2D_texture;
inline constexpr std::array TextureSampleGrad_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture2D_sampler;
inline constexpr std::array TextureSampleGrad_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture2D_coordinate;
Variable TextureSampleGrad_Texture2D_grad_x;
Variable TextureSampleGrad_Texture2D_grad_y;
Function TextureSampleGrad_Texture2D;
inline constexpr std::array TextureSampleGrad_Texture2D_args = { &TextureSampleGrad_Texture2D_texture, &TextureSampleGrad_Texture2D_sampler, &TextureSampleGrad_Texture2D_coordinate, &TextureSampleGrad_Texture2D_grad_x, &TextureSampleGrad_Texture2D_grad_y };

/// textureSampleGrad with SampledTexture2D, Float32x2, Float32x2, Float32x2
Variable SampledTextureSampleGrad_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGrad_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_Texture2D_coordinate;
Variable SampledTextureSampleGrad_Texture2D_grad_x;
Variable SampledTextureSampleGrad_Texture2D_grad_y;
Function SampledTextureSampleGrad_Texture2D;
inline constexpr std::array SampledTextureSampleGrad_Texture2D_args = { &SampledTextureSampleGrad_Texture2D_texture, &SampledTextureSampleGrad_Texture2D_coordinate, &SampledTextureSampleGrad_Texture2D_grad_x, &SampledTextureSampleGrad_Texture2D_grad_y };

/// textureSampleGrad with Texture3D, Sampler, Float32x3, Float32x3, Float32x3
Variable TextureSampleGrad_Texture3D_texture;
inline constexpr std::array TextureSampleGrad_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture3D_sampler;
inline constexpr std::array TextureSampleGrad_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture3D_coordinate;
Variable TextureSampleGrad_Texture3D_grad_x;
Variable TextureSampleGrad_Texture3D_grad_y;
Function TextureSampleGrad_Texture3D;
inline constexpr std::array TextureSampleGrad_Texture3D_args = { &TextureSampleGrad_Texture3D_texture, &TextureSampleGrad_Texture3D_sampler, &TextureSampleGrad_Texture3D_coordinate, &TextureSampleGrad_Texture3D_grad_x, &TextureSampleGrad_Texture3D_grad_y };

/// textureSampleGrad with SampledTexture3D, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGrad_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGrad_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_Texture3D_coordinate;
Variable SampledTextureSampleGrad_Texture3D_grad_x;
Variable SampledTextureSampleGrad_Texture3D_grad_y;
Function SampledTextureSampleGrad_Texture3D;
inline constexpr std::array SampledTextureSampleGrad_Texture3D_args = { &SampledTextureSampleGrad_Texture3D_texture, &SampledTextureSampleGrad_Texture3D_coordinate, &SampledTextureSampleGrad_Texture3D_grad_x, &SampledTextureSampleGrad_Texture3D_grad_y };

/// textureSampleGrad with TextureCube, Sampler, Float32x3, Float32x3, Float32x3
Variable TextureSampleGrad_TextureCube_texture;
inline constexpr std::array TextureSampleGrad_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_TextureCube_sampler;
inline constexpr std::array TextureSampleGrad_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_TextureCube_coordinate;
Variable TextureSampleGrad_TextureCube_grad_x;
Variable TextureSampleGrad_TextureCube_grad_y;
Function TextureSampleGrad_TextureCube;
inline constexpr std::array TextureSampleGrad_TextureCube_args = { &TextureSampleGrad_TextureCube_texture, &TextureSampleGrad_TextureCube_sampler, &TextureSampleGrad_TextureCube_coordinate, &TextureSampleGrad_TextureCube_grad_x, &TextureSampleGrad_TextureCube_grad_y };

/// textureSampleGrad with SampledTextureCube, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGrad_TextureCube_texture;
inline constexpr std::array SampledTextureSampleGrad_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_TextureCube_coordinate;
Variable SampledTextureSampleGrad_TextureCube_grad_x;
Variable SampledTextureSampleGrad_TextureCube_grad_y;
Function SampledTextureSampleGrad_TextureCube;
inline constexpr std::array SampledTextureSampleGrad_TextureCube_args = { &SampledTextureSampleGrad_TextureCube_texture, &SampledTextureSampleGrad_TextureCube_coordinate, &SampledTextureSampleGrad_TextureCube_grad_x, &SampledTextureSampleGrad_TextureCube_grad_y };

/// textureSampleGrad with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2
Variable TextureSampleGrad_Texture1DArray_texture;
inline constexpr std::array TextureSampleGrad_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture1DArray_sampler;
inline constexpr std::array TextureSampleGrad_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture1DArray_coordinate;
Variable TextureSampleGrad_Texture1DArray_grad_x;
Variable TextureSampleGrad_Texture1DArray_grad_y;
Function TextureSampleGrad_Texture1DArray;
inline constexpr std::array TextureSampleGrad_Texture1DArray_args = { &TextureSampleGrad_Texture1DArray_texture, &TextureSampleGrad_Texture1DArray_sampler, &TextureSampleGrad_Texture1DArray_coordinate, &TextureSampleGrad_Texture1DArray_grad_x, &TextureSampleGrad_Texture1DArray_grad_y };

/// textureSampleGrad with SampledTexture1DArray, Float32x2, Float32x2, Float32x2
Variable SampledTextureSampleGrad_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleGrad_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_Texture1DArray_coordinate;
Variable SampledTextureSampleGrad_Texture1DArray_grad_x;
Variable SampledTextureSampleGrad_Texture1DArray_grad_y;
Function SampledTextureSampleGrad_Texture1DArray;
inline constexpr std::array SampledTextureSampleGrad_Texture1DArray_args = { &SampledTextureSampleGrad_Texture1DArray_texture, &SampledTextureSampleGrad_Texture1DArray_coordinate, &SampledTextureSampleGrad_Texture1DArray_grad_x, &SampledTextureSampleGrad_Texture1DArray_grad_y };

/// textureSampleGrad with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3
Variable TextureSampleGrad_Texture2DArray_texture;
inline constexpr std::array TextureSampleGrad_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture2DArray_sampler;
inline constexpr std::array TextureSampleGrad_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_Texture2DArray_coordinate;
Variable TextureSampleGrad_Texture2DArray_grad_x;
Variable TextureSampleGrad_Texture2DArray_grad_y;
Function TextureSampleGrad_Texture2DArray;
inline constexpr std::array TextureSampleGrad_Texture2DArray_args = { &TextureSampleGrad_Texture2DArray_texture, &TextureSampleGrad_Texture2DArray_sampler, &TextureSampleGrad_Texture2DArray_coordinate, &TextureSampleGrad_Texture2DArray_grad_x, &TextureSampleGrad_Texture2DArray_grad_y };

/// textureSampleGrad with SampledTexture2DArray, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGrad_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleGrad_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_Texture2DArray_coordinate;
Variable SampledTextureSampleGrad_Texture2DArray_grad_x;
Variable SampledTextureSampleGrad_Texture2DArray_grad_y;
Function SampledTextureSampleGrad_Texture2DArray;
inline constexpr std::array SampledTextureSampleGrad_Texture2DArray_args = { &SampledTextureSampleGrad_Texture2DArray_texture, &SampledTextureSampleGrad_Texture2DArray_coordinate, &SampledTextureSampleGrad_Texture2DArray_grad_x, &SampledTextureSampleGrad_Texture2DArray_grad_y };

/// textureSampleGrad with TextureCubeArray, Sampler, Float32x4, Float32x4, Float32x4
Variable TextureSampleGrad_TextureCubeArray_texture;
inline constexpr std::array TextureSampleGrad_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_TextureCubeArray_sampler;
inline constexpr std::array TextureSampleGrad_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGrad_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGrad_TextureCubeArray_coordinate;
Variable TextureSampleGrad_TextureCubeArray_grad_x;
Variable TextureSampleGrad_TextureCubeArray_grad_y;
Function TextureSampleGrad_TextureCubeArray;
inline constexpr std::array TextureSampleGrad_TextureCubeArray_args = { &TextureSampleGrad_TextureCubeArray_texture, &TextureSampleGrad_TextureCubeArray_sampler, &TextureSampleGrad_TextureCubeArray_coordinate, &TextureSampleGrad_TextureCubeArray_grad_x, &TextureSampleGrad_TextureCubeArray_grad_y };

/// textureSampleGrad with SampledTextureCubeArray, Float32x4, Float32x4, Float32x4
Variable SampledTextureSampleGrad_TextureCubeArray_texture;
inline constexpr std::array SampledTextureSampleGrad_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGrad_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGrad_TextureCubeArray_coordinate;
Variable SampledTextureSampleGrad_TextureCubeArray_grad_x;
Variable SampledTextureSampleGrad_TextureCubeArray_grad_y;
Function SampledTextureSampleGrad_TextureCubeArray;
inline constexpr std::array SampledTextureSampleGrad_TextureCubeArray_args = { &SampledTextureSampleGrad_TextureCubeArray_texture, &SampledTextureSampleGrad_TextureCubeArray_coordinate, &SampledTextureSampleGrad_TextureCubeArray_grad_x, &SampledTextureSampleGrad_TextureCubeArray_grad_y };

/// textureSampleGradOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleGradOffset_Texture1D_texture;
inline constexpr std::array TextureSampleGradOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleGradOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture1D_coordinate;
Variable TextureSampleGradOffset_Texture1D_grad_x;
Variable TextureSampleGradOffset_Texture1D_grad_y;
Variable TextureSampleGradOffset_Texture1D_offset;
Function TextureSampleGradOffset_Texture1D;
inline constexpr std::array TextureSampleGradOffset_Texture1D_args = { &TextureSampleGradOffset_Texture1D_texture, &TextureSampleGradOffset_Texture1D_sampler, &TextureSampleGradOffset_Texture1D_coordinate, &TextureSampleGradOffset_Texture1D_grad_x, &TextureSampleGradOffset_Texture1D_grad_y, &TextureSampleGradOffset_Texture1D_offset };

/// textureSampleGradOffset with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradOffset_Texture1D_coordinate;
Variable SampledTextureSampleGradOffset_Texture1D_grad_x;
Variable SampledTextureSampleGradOffset_Texture1D_grad_y;
Variable SampledTextureSampleGradOffset_Texture1D_offset;
Function SampledTextureSampleGradOffset_Texture1D;
inline constexpr std::array SampledTextureSampleGradOffset_Texture1D_args = { &SampledTextureSampleGradOffset_Texture1D_texture, &SampledTextureSampleGradOffset_Texture1D_coordinate, &SampledTextureSampleGradOffset_Texture1D_grad_x, &SampledTextureSampleGradOffset_Texture1D_grad_y, &SampledTextureSampleGradOffset_Texture1D_offset };

/// textureSampleGradOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32x2
Variable TextureSampleGradOffset_Texture2D_texture;
inline constexpr std::array TextureSampleGradOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleGradOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture2D_coordinate;
Variable TextureSampleGradOffset_Texture2D_grad_x;
Variable TextureSampleGradOffset_Texture2D_grad_y;
Variable TextureSampleGradOffset_Texture2D_offset;
Function TextureSampleGradOffset_Texture2D;
inline constexpr std::array TextureSampleGradOffset_Texture2D_args = { &TextureSampleGradOffset_Texture2D_texture, &TextureSampleGradOffset_Texture2D_sampler, &TextureSampleGradOffset_Texture2D_coordinate, &TextureSampleGradOffset_Texture2D_grad_x, &TextureSampleGradOffset_Texture2D_grad_y, &TextureSampleGradOffset_Texture2D_offset };

/// textureSampleGradOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32x2
Variable SampledTextureSampleGradOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradOffset_Texture2D_coordinate;
Variable SampledTextureSampleGradOffset_Texture2D_grad_x;
Variable SampledTextureSampleGradOffset_Texture2D_grad_y;
Variable SampledTextureSampleGradOffset_Texture2D_offset;
Function SampledTextureSampleGradOffset_Texture2D;
inline constexpr std::array SampledTextureSampleGradOffset_Texture2D_args = { &SampledTextureSampleGradOffset_Texture2D_texture, &SampledTextureSampleGradOffset_Texture2D_coordinate, &SampledTextureSampleGradOffset_Texture2D_grad_x, &SampledTextureSampleGradOffset_Texture2D_grad_y, &SampledTextureSampleGradOffset_Texture2D_offset };

/// textureSampleGradOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32x3
Variable TextureSampleGradOffset_Texture3D_texture;
inline constexpr std::array TextureSampleGradOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleGradOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture3D_coordinate;
Variable TextureSampleGradOffset_Texture3D_grad_x;
Variable TextureSampleGradOffset_Texture3D_grad_y;
Variable TextureSampleGradOffset_Texture3D_offset;
Function TextureSampleGradOffset_Texture3D;
inline constexpr std::array TextureSampleGradOffset_Texture3D_args = { &TextureSampleGradOffset_Texture3D_texture, &TextureSampleGradOffset_Texture3D_sampler, &TextureSampleGradOffset_Texture3D_coordinate, &TextureSampleGradOffset_Texture3D_grad_x, &TextureSampleGradOffset_Texture3D_grad_y, &TextureSampleGradOffset_Texture3D_offset };

/// textureSampleGradOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGradOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradOffset_Texture3D_coordinate;
Variable SampledTextureSampleGradOffset_Texture3D_grad_x;
Variable SampledTextureSampleGradOffset_Texture3D_grad_y;
Variable SampledTextureSampleGradOffset_Texture3D_offset;
Function SampledTextureSampleGradOffset_Texture3D;
inline constexpr std::array SampledTextureSampleGradOffset_Texture3D_args = { &SampledTextureSampleGradOffset_Texture3D_texture, &SampledTextureSampleGradOffset_Texture3D_coordinate, &SampledTextureSampleGradOffset_Texture3D_grad_x, &SampledTextureSampleGradOffset_Texture3D_grad_y, &SampledTextureSampleGradOffset_Texture3D_offset };

/// textureSampleGradOffset with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32x2
Variable TextureSampleGradOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleGradOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleGradOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture1DArray_coordinate;
Variable TextureSampleGradOffset_Texture1DArray_grad_x;
Variable TextureSampleGradOffset_Texture1DArray_grad_y;
Variable TextureSampleGradOffset_Texture1DArray_offset;
Function TextureSampleGradOffset_Texture1DArray;
inline constexpr std::array TextureSampleGradOffset_Texture1DArray_args = { &TextureSampleGradOffset_Texture1DArray_texture, &TextureSampleGradOffset_Texture1DArray_sampler, &TextureSampleGradOffset_Texture1DArray_coordinate, &TextureSampleGradOffset_Texture1DArray_grad_x, &TextureSampleGradOffset_Texture1DArray_grad_y, &TextureSampleGradOffset_Texture1DArray_offset };

/// textureSampleGradOffset with SampledTexture1DArray, Float32x2, Float32x2, Float32x2, Float32x2
Variable SampledTextureSampleGradOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleGradOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleGradOffset_Texture1DArray_grad_x;
Variable SampledTextureSampleGradOffset_Texture1DArray_grad_y;
Variable SampledTextureSampleGradOffset_Texture1DArray_offset;
Function SampledTextureSampleGradOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleGradOffset_Texture1DArray_args = { &SampledTextureSampleGradOffset_Texture1DArray_texture, &SampledTextureSampleGradOffset_Texture1DArray_coordinate, &SampledTextureSampleGradOffset_Texture1DArray_grad_x, &SampledTextureSampleGradOffset_Texture1DArray_grad_y, &SampledTextureSampleGradOffset_Texture1DArray_offset };

/// textureSampleGradOffset with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32x3
Variable TextureSampleGradOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleGradOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleGradOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradOffset_Texture2DArray_coordinate;
Variable TextureSampleGradOffset_Texture2DArray_grad_x;
Variable TextureSampleGradOffset_Texture2DArray_grad_y;
Variable TextureSampleGradOffset_Texture2DArray_offset;
Function TextureSampleGradOffset_Texture2DArray;
inline constexpr std::array TextureSampleGradOffset_Texture2DArray_args = { &TextureSampleGradOffset_Texture2DArray_texture, &TextureSampleGradOffset_Texture2DArray_sampler, &TextureSampleGradOffset_Texture2DArray_coordinate, &TextureSampleGradOffset_Texture2DArray_grad_x, &TextureSampleGradOffset_Texture2DArray_grad_y, &TextureSampleGradOffset_Texture2DArray_offset };

/// textureSampleGradOffset with SampledTexture2DArray, Float32x3, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGradOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleGradOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleGradOffset_Texture2DArray_grad_x;
Variable SampledTextureSampleGradOffset_Texture2DArray_grad_y;
Variable SampledTextureSampleGradOffset_Texture2DArray_offset;
Function SampledTextureSampleGradOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleGradOffset_Texture2DArray_args = { &SampledTextureSampleGradOffset_Texture2DArray_texture, &SampledTextureSampleGradOffset_Texture2DArray_coordinate, &SampledTextureSampleGradOffset_Texture2DArray_grad_x, &SampledTextureSampleGradOffset_Texture2DArray_grad_y, &SampledTextureSampleGradOffset_Texture2DArray_offset };

/// textureSampleGradProj with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleGradProj_Texture1D_texture;
inline constexpr std::array TextureSampleGradProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProj_Texture1D_sampler;
inline constexpr std::array TextureSampleGradProj_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProj_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProj_Texture1D_coordinate;
Variable TextureSampleGradProj_Texture1D_grad_x;
Variable TextureSampleGradProj_Texture1D_grad_y;
Variable TextureSampleGradProj_Texture1D_proj;
Function TextureSampleGradProj_Texture1D;
inline constexpr std::array TextureSampleGradProj_Texture1D_args = { &TextureSampleGradProj_Texture1D_texture, &TextureSampleGradProj_Texture1D_sampler, &TextureSampleGradProj_Texture1D_coordinate, &TextureSampleGradProj_Texture1D_grad_x, &TextureSampleGradProj_Texture1D_grad_y, &TextureSampleGradProj_Texture1D_proj };

/// textureSampleGradProj with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradProj_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProj_Texture1D_coordinate;
Variable SampledTextureSampleGradProj_Texture1D_grad_x;
Variable SampledTextureSampleGradProj_Texture1D_grad_y;
Variable SampledTextureSampleGradProj_Texture1D_proj;
Function SampledTextureSampleGradProj_Texture1D;
inline constexpr std::array SampledTextureSampleGradProj_Texture1D_args = { &SampledTextureSampleGradProj_Texture1D_texture, &SampledTextureSampleGradProj_Texture1D_coordinate, &SampledTextureSampleGradProj_Texture1D_grad_x, &SampledTextureSampleGradProj_Texture1D_grad_y, &SampledTextureSampleGradProj_Texture1D_proj };

/// textureSampleGradProj with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32
Variable TextureSampleGradProj_Texture2D_texture;
inline constexpr std::array TextureSampleGradProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProj_Texture2D_sampler;
inline constexpr std::array TextureSampleGradProj_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProj_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProj_Texture2D_coordinate;
Variable TextureSampleGradProj_Texture2D_grad_x;
Variable TextureSampleGradProj_Texture2D_grad_y;
Variable TextureSampleGradProj_Texture2D_proj;
Function TextureSampleGradProj_Texture2D;
inline constexpr std::array TextureSampleGradProj_Texture2D_args = { &TextureSampleGradProj_Texture2D_texture, &TextureSampleGradProj_Texture2D_sampler, &TextureSampleGradProj_Texture2D_coordinate, &TextureSampleGradProj_Texture2D_grad_x, &TextureSampleGradProj_Texture2D_grad_y, &TextureSampleGradProj_Texture2D_proj };

/// textureSampleGradProj with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32
Variable SampledTextureSampleGradProj_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProj_Texture2D_coordinate;
Variable SampledTextureSampleGradProj_Texture2D_grad_x;
Variable SampledTextureSampleGradProj_Texture2D_grad_y;
Variable SampledTextureSampleGradProj_Texture2D_proj;
Function SampledTextureSampleGradProj_Texture2D;
inline constexpr std::array SampledTextureSampleGradProj_Texture2D_args = { &SampledTextureSampleGradProj_Texture2D_texture, &SampledTextureSampleGradProj_Texture2D_coordinate, &SampledTextureSampleGradProj_Texture2D_grad_x, &SampledTextureSampleGradProj_Texture2D_grad_y, &SampledTextureSampleGradProj_Texture2D_proj };

/// textureSampleGradProj with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32
Variable TextureSampleGradProj_Texture3D_texture;
inline constexpr std::array TextureSampleGradProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProj_Texture3D_sampler;
inline constexpr std::array TextureSampleGradProj_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProj_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProj_Texture3D_coordinate;
Variable TextureSampleGradProj_Texture3D_grad_x;
Variable TextureSampleGradProj_Texture3D_grad_y;
Variable TextureSampleGradProj_Texture3D_proj;
Function TextureSampleGradProj_Texture3D;
inline constexpr std::array TextureSampleGradProj_Texture3D_args = { &TextureSampleGradProj_Texture3D_texture, &TextureSampleGradProj_Texture3D_sampler, &TextureSampleGradProj_Texture3D_coordinate, &TextureSampleGradProj_Texture3D_grad_x, &TextureSampleGradProj_Texture3D_grad_y, &TextureSampleGradProj_Texture3D_proj };

/// textureSampleGradProj with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32
Variable SampledTextureSampleGradProj_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProj_Texture3D_coordinate;
Variable SampledTextureSampleGradProj_Texture3D_grad_x;
Variable SampledTextureSampleGradProj_Texture3D_grad_y;
Variable SampledTextureSampleGradProj_Texture3D_proj;
Function SampledTextureSampleGradProj_Texture3D;
inline constexpr std::array SampledTextureSampleGradProj_Texture3D_args = { &SampledTextureSampleGradProj_Texture3D_texture, &SampledTextureSampleGradProj_Texture3D_coordinate, &SampledTextureSampleGradProj_Texture3D_grad_x, &SampledTextureSampleGradProj_Texture3D_grad_y, &SampledTextureSampleGradProj_Texture3D_proj };

/// textureSampleGradProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleGradProjOffset_Texture1D_texture;
inline constexpr std::array TextureSampleGradProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleGradProjOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjOffset_Texture1D_coordinate;
Variable TextureSampleGradProjOffset_Texture1D_grad_x;
Variable TextureSampleGradProjOffset_Texture1D_grad_y;
Variable TextureSampleGradProjOffset_Texture1D_proj;
Variable TextureSampleGradProjOffset_Texture1D_offset;
Function TextureSampleGradProjOffset_Texture1D;
inline constexpr std::array TextureSampleGradProjOffset_Texture1D_args = { &TextureSampleGradProjOffset_Texture1D_texture, &TextureSampleGradProjOffset_Texture1D_sampler, &TextureSampleGradProjOffset_Texture1D_coordinate, &TextureSampleGradProjOffset_Texture1D_grad_x, &TextureSampleGradProjOffset_Texture1D_grad_y, &TextureSampleGradProjOffset_Texture1D_proj, &TextureSampleGradProjOffset_Texture1D_offset };

/// textureSampleGradProjOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradProjOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleGradProjOffset_Texture1D_grad_x;
Variable SampledTextureSampleGradProjOffset_Texture1D_grad_y;
Variable SampledTextureSampleGradProjOffset_Texture1D_proj;
Variable SampledTextureSampleGradProjOffset_Texture1D_offset;
Function SampledTextureSampleGradProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture1D_args = { &SampledTextureSampleGradProjOffset_Texture1D_texture, &SampledTextureSampleGradProjOffset_Texture1D_coordinate, &SampledTextureSampleGradProjOffset_Texture1D_grad_x, &SampledTextureSampleGradProjOffset_Texture1D_grad_y, &SampledTextureSampleGradProjOffset_Texture1D_proj, &SampledTextureSampleGradProjOffset_Texture1D_offset };

/// textureSampleGradProjOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable TextureSampleGradProjOffset_Texture2D_texture;
inline constexpr std::array TextureSampleGradProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleGradProjOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjOffset_Texture2D_coordinate;
Variable TextureSampleGradProjOffset_Texture2D_grad_x;
Variable TextureSampleGradProjOffset_Texture2D_grad_y;
Variable TextureSampleGradProjOffset_Texture2D_proj;
Variable TextureSampleGradProjOffset_Texture2D_offset;
Function TextureSampleGradProjOffset_Texture2D;
inline constexpr std::array TextureSampleGradProjOffset_Texture2D_args = { &TextureSampleGradProjOffset_Texture2D_texture, &TextureSampleGradProjOffset_Texture2D_sampler, &TextureSampleGradProjOffset_Texture2D_coordinate, &TextureSampleGradProjOffset_Texture2D_grad_x, &TextureSampleGradProjOffset_Texture2D_grad_y, &TextureSampleGradProjOffset_Texture2D_proj, &TextureSampleGradProjOffset_Texture2D_offset };

/// textureSampleGradProjOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable SampledTextureSampleGradProjOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleGradProjOffset_Texture2D_grad_x;
Variable SampledTextureSampleGradProjOffset_Texture2D_grad_y;
Variable SampledTextureSampleGradProjOffset_Texture2D_proj;
Variable SampledTextureSampleGradProjOffset_Texture2D_offset;
Function SampledTextureSampleGradProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture2D_args = { &SampledTextureSampleGradProjOffset_Texture2D_texture, &SampledTextureSampleGradProjOffset_Texture2D_coordinate, &SampledTextureSampleGradProjOffset_Texture2D_grad_x, &SampledTextureSampleGradProjOffset_Texture2D_grad_y, &SampledTextureSampleGradProjOffset_Texture2D_proj, &SampledTextureSampleGradProjOffset_Texture2D_offset };

/// textureSampleGradProjOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable TextureSampleGradProjOffset_Texture3D_texture;
inline constexpr std::array TextureSampleGradProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleGradProjOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjOffset_Texture3D_coordinate;
Variable TextureSampleGradProjOffset_Texture3D_grad_x;
Variable TextureSampleGradProjOffset_Texture3D_grad_y;
Variable TextureSampleGradProjOffset_Texture3D_proj;
Variable TextureSampleGradProjOffset_Texture3D_offset;
Function TextureSampleGradProjOffset_Texture3D;
inline constexpr std::array TextureSampleGradProjOffset_Texture3D_args = { &TextureSampleGradProjOffset_Texture3D_texture, &TextureSampleGradProjOffset_Texture3D_sampler, &TextureSampleGradProjOffset_Texture3D_coordinate, &TextureSampleGradProjOffset_Texture3D_grad_x, &TextureSampleGradProjOffset_Texture3D_grad_y, &TextureSampleGradProjOffset_Texture3D_proj, &TextureSampleGradProjOffset_Texture3D_offset };

/// textureSampleGradProjOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable SampledTextureSampleGradProjOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleGradProjOffset_Texture3D_grad_x;
Variable SampledTextureSampleGradProjOffset_Texture3D_grad_y;
Variable SampledTextureSampleGradProjOffset_Texture3D_proj;
Variable SampledTextureSampleGradProjOffset_Texture3D_offset;
Function SampledTextureSampleGradProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture3D_args = { &SampledTextureSampleGradProjOffset_Texture3D_texture, &SampledTextureSampleGradProjOffset_Texture3D_coordinate, &SampledTextureSampleGradProjOffset_Texture3D_grad_x, &SampledTextureSampleGradProjOffset_Texture3D_grad_y, &SampledTextureSampleGradProjOffset_Texture3D_proj, &SampledTextureSampleGradProjOffset_Texture3D_offset };

/// textureSampleGradCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleGradCompare_Texture1D_texture;
inline constexpr std::array TextureSampleGradCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleGradCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture1D_coordinate;
Variable TextureSampleGradCompare_Texture1D_grad_x;
Variable TextureSampleGradCompare_Texture1D_grad_y;
Variable TextureSampleGradCompare_Texture1D_compare;
Function TextureSampleGradCompare_Texture1D;
inline constexpr std::array TextureSampleGradCompare_Texture1D_args = { &TextureSampleGradCompare_Texture1D_texture, &TextureSampleGradCompare_Texture1D_sampler, &TextureSampleGradCompare_Texture1D_coordinate, &TextureSampleGradCompare_Texture1D_grad_x, &TextureSampleGradCompare_Texture1D_grad_y, &TextureSampleGradCompare_Texture1D_compare };

/// textureSampleGradCompare with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompare_Texture1D_coordinate;
Variable SampledTextureSampleGradCompare_Texture1D_grad_x;
Variable SampledTextureSampleGradCompare_Texture1D_grad_y;
Variable SampledTextureSampleGradCompare_Texture1D_compare;
Function SampledTextureSampleGradCompare_Texture1D;
inline constexpr std::array SampledTextureSampleGradCompare_Texture1D_args = { &SampledTextureSampleGradCompare_Texture1D_texture, &SampledTextureSampleGradCompare_Texture1D_coordinate, &SampledTextureSampleGradCompare_Texture1D_grad_x, &SampledTextureSampleGradCompare_Texture1D_grad_y, &SampledTextureSampleGradCompare_Texture1D_compare };

/// textureSampleGradCompare with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32
Variable TextureSampleGradCompare_Texture2D_texture;
inline constexpr std::array TextureSampleGradCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleGradCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture2D_coordinate;
Variable TextureSampleGradCompare_Texture2D_grad_x;
Variable TextureSampleGradCompare_Texture2D_grad_y;
Variable TextureSampleGradCompare_Texture2D_compare;
Function TextureSampleGradCompare_Texture2D;
inline constexpr std::array TextureSampleGradCompare_Texture2D_args = { &TextureSampleGradCompare_Texture2D_texture, &TextureSampleGradCompare_Texture2D_sampler, &TextureSampleGradCompare_Texture2D_coordinate, &TextureSampleGradCompare_Texture2D_grad_x, &TextureSampleGradCompare_Texture2D_grad_y, &TextureSampleGradCompare_Texture2D_compare };

/// textureSampleGradCompare with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32
Variable SampledTextureSampleGradCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompare_Texture2D_coordinate;
Variable SampledTextureSampleGradCompare_Texture2D_grad_x;
Variable SampledTextureSampleGradCompare_Texture2D_grad_y;
Variable SampledTextureSampleGradCompare_Texture2D_compare;
Function SampledTextureSampleGradCompare_Texture2D;
inline constexpr std::array SampledTextureSampleGradCompare_Texture2D_args = { &SampledTextureSampleGradCompare_Texture2D_texture, &SampledTextureSampleGradCompare_Texture2D_coordinate, &SampledTextureSampleGradCompare_Texture2D_grad_x, &SampledTextureSampleGradCompare_Texture2D_grad_y, &SampledTextureSampleGradCompare_Texture2D_compare };

/// textureSampleGradCompare with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32
Variable TextureSampleGradCompare_Texture3D_texture;
inline constexpr std::array TextureSampleGradCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleGradCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture3D_coordinate;
Variable TextureSampleGradCompare_Texture3D_grad_x;
Variable TextureSampleGradCompare_Texture3D_grad_y;
Variable TextureSampleGradCompare_Texture3D_compare;
Function TextureSampleGradCompare_Texture3D;
inline constexpr std::array TextureSampleGradCompare_Texture3D_args = { &TextureSampleGradCompare_Texture3D_texture, &TextureSampleGradCompare_Texture3D_sampler, &TextureSampleGradCompare_Texture3D_coordinate, &TextureSampleGradCompare_Texture3D_grad_x, &TextureSampleGradCompare_Texture3D_grad_y, &TextureSampleGradCompare_Texture3D_compare };

/// textureSampleGradCompare with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32
Variable SampledTextureSampleGradCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompare_Texture3D_coordinate;
Variable SampledTextureSampleGradCompare_Texture3D_grad_x;
Variable SampledTextureSampleGradCompare_Texture3D_grad_y;
Variable SampledTextureSampleGradCompare_Texture3D_compare;
Function SampledTextureSampleGradCompare_Texture3D;
inline constexpr std::array SampledTextureSampleGradCompare_Texture3D_args = { &SampledTextureSampleGradCompare_Texture3D_texture, &SampledTextureSampleGradCompare_Texture3D_coordinate, &SampledTextureSampleGradCompare_Texture3D_grad_x, &SampledTextureSampleGradCompare_Texture3D_grad_y, &SampledTextureSampleGradCompare_Texture3D_compare };

/// textureSampleGradCompare with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32
Variable TextureSampleGradCompare_Texture1DArray_texture;
inline constexpr std::array TextureSampleGradCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture1DArray_sampler;
inline constexpr std::array TextureSampleGradCompare_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture1DArray_coordinate;
Variable TextureSampleGradCompare_Texture1DArray_grad_x;
Variable TextureSampleGradCompare_Texture1DArray_grad_y;
Variable TextureSampleGradCompare_Texture1DArray_compare;
Function TextureSampleGradCompare_Texture1DArray;
inline constexpr std::array TextureSampleGradCompare_Texture1DArray_args = { &TextureSampleGradCompare_Texture1DArray_texture, &TextureSampleGradCompare_Texture1DArray_sampler, &TextureSampleGradCompare_Texture1DArray_coordinate, &TextureSampleGradCompare_Texture1DArray_grad_x, &TextureSampleGradCompare_Texture1DArray_grad_y, &TextureSampleGradCompare_Texture1DArray_compare };

/// textureSampleGradCompare with SampledTexture1DArray, Float32x2, Float32x2, Float32x2, Float32
Variable SampledTextureSampleGradCompare_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleGradCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleGradCompare_Texture1DArray_grad_x;
Variable SampledTextureSampleGradCompare_Texture1DArray_grad_y;
Variable SampledTextureSampleGradCompare_Texture1DArray_compare;
Function SampledTextureSampleGradCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleGradCompare_Texture1DArray_args = { &SampledTextureSampleGradCompare_Texture1DArray_texture, &SampledTextureSampleGradCompare_Texture1DArray_coordinate, &SampledTextureSampleGradCompare_Texture1DArray_grad_x, &SampledTextureSampleGradCompare_Texture1DArray_grad_y, &SampledTextureSampleGradCompare_Texture1DArray_compare };

/// textureSampleGradCompare with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32
Variable TextureSampleGradCompare_Texture2DArray_texture;
inline constexpr std::array TextureSampleGradCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture2DArray_sampler;
inline constexpr std::array TextureSampleGradCompare_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompare_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompare_Texture2DArray_coordinate;
Variable TextureSampleGradCompare_Texture2DArray_grad_x;
Variable TextureSampleGradCompare_Texture2DArray_grad_y;
Variable TextureSampleGradCompare_Texture2DArray_compare;
Function TextureSampleGradCompare_Texture2DArray;
inline constexpr std::array TextureSampleGradCompare_Texture2DArray_args = { &TextureSampleGradCompare_Texture2DArray_texture, &TextureSampleGradCompare_Texture2DArray_sampler, &TextureSampleGradCompare_Texture2DArray_coordinate, &TextureSampleGradCompare_Texture2DArray_grad_x, &TextureSampleGradCompare_Texture2DArray_grad_y, &TextureSampleGradCompare_Texture2DArray_compare };

/// textureSampleGradCompare with SampledTexture2DArray, Float32x3, Float32x3, Float32x3, Float32
Variable SampledTextureSampleGradCompare_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleGradCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleGradCompare_Texture2DArray_grad_x;
Variable SampledTextureSampleGradCompare_Texture2DArray_grad_y;
Variable SampledTextureSampleGradCompare_Texture2DArray_compare;
Function SampledTextureSampleGradCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleGradCompare_Texture2DArray_args = { &SampledTextureSampleGradCompare_Texture2DArray_texture, &SampledTextureSampleGradCompare_Texture2DArray_coordinate, &SampledTextureSampleGradCompare_Texture2DArray_grad_x, &SampledTextureSampleGradCompare_Texture2DArray_grad_y, &SampledTextureSampleGradCompare_Texture2DArray_compare };

/// textureSampleGradCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleGradCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture1D_coordinate;
Variable TextureSampleGradCompareOffset_Texture1D_grad_x;
Variable TextureSampleGradCompareOffset_Texture1D_grad_y;
Variable TextureSampleGradCompareOffset_Texture1D_compare;
Variable TextureSampleGradCompareOffset_Texture1D_offset;
Function TextureSampleGradCompareOffset_Texture1D;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1D_args = { &TextureSampleGradCompareOffset_Texture1D_texture, &TextureSampleGradCompareOffset_Texture1D_sampler, &TextureSampleGradCompareOffset_Texture1D_coordinate, &TextureSampleGradCompareOffset_Texture1D_grad_x, &TextureSampleGradCompareOffset_Texture1D_grad_y, &TextureSampleGradCompareOffset_Texture1D_compare, &TextureSampleGradCompareOffset_Texture1D_offset };

/// textureSampleGradCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture1D_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture1D_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture1D_compare;
Variable SampledTextureSampleGradCompareOffset_Texture1D_offset;
Function SampledTextureSampleGradCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1D_args = { &SampledTextureSampleGradCompareOffset_Texture1D_texture, &SampledTextureSampleGradCompareOffset_Texture1D_coordinate, &SampledTextureSampleGradCompareOffset_Texture1D_grad_x, &SampledTextureSampleGradCompareOffset_Texture1D_grad_y, &SampledTextureSampleGradCompareOffset_Texture1D_compare, &SampledTextureSampleGradCompareOffset_Texture1D_offset };

/// textureSampleGradCompareOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable TextureSampleGradCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture2D_coordinate;
Variable TextureSampleGradCompareOffset_Texture2D_grad_x;
Variable TextureSampleGradCompareOffset_Texture2D_grad_y;
Variable TextureSampleGradCompareOffset_Texture2D_compare;
Variable TextureSampleGradCompareOffset_Texture2D_offset;
Function TextureSampleGradCompareOffset_Texture2D;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2D_args = { &TextureSampleGradCompareOffset_Texture2D_texture, &TextureSampleGradCompareOffset_Texture2D_sampler, &TextureSampleGradCompareOffset_Texture2D_coordinate, &TextureSampleGradCompareOffset_Texture2D_grad_x, &TextureSampleGradCompareOffset_Texture2D_grad_y, &TextureSampleGradCompareOffset_Texture2D_compare, &TextureSampleGradCompareOffset_Texture2D_offset };

/// textureSampleGradCompareOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable SampledTextureSampleGradCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture2D_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture2D_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture2D_compare;
Variable SampledTextureSampleGradCompareOffset_Texture2D_offset;
Function SampledTextureSampleGradCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2D_args = { &SampledTextureSampleGradCompareOffset_Texture2D_texture, &SampledTextureSampleGradCompareOffset_Texture2D_coordinate, &SampledTextureSampleGradCompareOffset_Texture2D_grad_x, &SampledTextureSampleGradCompareOffset_Texture2D_grad_y, &SampledTextureSampleGradCompareOffset_Texture2D_compare, &SampledTextureSampleGradCompareOffset_Texture2D_offset };

/// textureSampleGradCompareOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable TextureSampleGradCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleGradCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleGradCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture3D_coordinate;
Variable TextureSampleGradCompareOffset_Texture3D_grad_x;
Variable TextureSampleGradCompareOffset_Texture3D_grad_y;
Variable TextureSampleGradCompareOffset_Texture3D_compare;
Variable TextureSampleGradCompareOffset_Texture3D_offset;
Function TextureSampleGradCompareOffset_Texture3D;
inline constexpr std::array TextureSampleGradCompareOffset_Texture3D_args = { &TextureSampleGradCompareOffset_Texture3D_texture, &TextureSampleGradCompareOffset_Texture3D_sampler, &TextureSampleGradCompareOffset_Texture3D_coordinate, &TextureSampleGradCompareOffset_Texture3D_grad_x, &TextureSampleGradCompareOffset_Texture3D_grad_y, &TextureSampleGradCompareOffset_Texture3D_compare, &TextureSampleGradCompareOffset_Texture3D_offset };

/// textureSampleGradCompareOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable SampledTextureSampleGradCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture3D_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture3D_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture3D_compare;
Variable SampledTextureSampleGradCompareOffset_Texture3D_offset;
Function SampledTextureSampleGradCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture3D_args = { &SampledTextureSampleGradCompareOffset_Texture3D_texture, &SampledTextureSampleGradCompareOffset_Texture3D_coordinate, &SampledTextureSampleGradCompareOffset_Texture3D_grad_x, &SampledTextureSampleGradCompareOffset_Texture3D_grad_y, &SampledTextureSampleGradCompareOffset_Texture3D_compare, &SampledTextureSampleGradCompareOffset_Texture3D_offset };

/// textureSampleGradCompareOffset with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable TextureSampleGradCompareOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture1DArray_coordinate;
Variable TextureSampleGradCompareOffset_Texture1DArray_grad_x;
Variable TextureSampleGradCompareOffset_Texture1DArray_grad_y;
Variable TextureSampleGradCompareOffset_Texture1DArray_compare;
Variable TextureSampleGradCompareOffset_Texture1DArray_offset;
Function TextureSampleGradCompareOffset_Texture1DArray;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1DArray_args = { &TextureSampleGradCompareOffset_Texture1DArray_texture, &TextureSampleGradCompareOffset_Texture1DArray_sampler, &TextureSampleGradCompareOffset_Texture1DArray_coordinate, &TextureSampleGradCompareOffset_Texture1DArray_grad_x, &TextureSampleGradCompareOffset_Texture1DArray_grad_y, &TextureSampleGradCompareOffset_Texture1DArray_compare, &TextureSampleGradCompareOffset_Texture1DArray_offset };

/// textureSampleGradCompareOffset with SampledTexture1DArray, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_compare;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_offset;
Function SampledTextureSampleGradCompareOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1DArray_args = { &SampledTextureSampleGradCompareOffset_Texture1DArray_texture, &SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate, &SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x, &SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y, &SampledTextureSampleGradCompareOffset_Texture1DArray_compare, &SampledTextureSampleGradCompareOffset_Texture1DArray_offset };

/// textureSampleGradCompareOffset with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable TextureSampleGradCompareOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradCompareOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradCompareOffset_Texture2DArray_coordinate;
Variable TextureSampleGradCompareOffset_Texture2DArray_grad_x;
Variable TextureSampleGradCompareOffset_Texture2DArray_grad_y;
Variable TextureSampleGradCompareOffset_Texture2DArray_compare;
Variable TextureSampleGradCompareOffset_Texture2DArray_offset;
Function TextureSampleGradCompareOffset_Texture2DArray;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2DArray_args = { &TextureSampleGradCompareOffset_Texture2DArray_texture, &TextureSampleGradCompareOffset_Texture2DArray_sampler, &TextureSampleGradCompareOffset_Texture2DArray_coordinate, &TextureSampleGradCompareOffset_Texture2DArray_grad_x, &TextureSampleGradCompareOffset_Texture2DArray_grad_y, &TextureSampleGradCompareOffset_Texture2DArray_compare, &TextureSampleGradCompareOffset_Texture2DArray_offset };

/// textureSampleGradCompareOffset with SampledTexture2DArray, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_compare;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_offset;
Function SampledTextureSampleGradCompareOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2DArray_args = { &SampledTextureSampleGradCompareOffset_Texture2DArray_texture, &SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate, &SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x, &SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y, &SampledTextureSampleGradCompareOffset_Texture2DArray_compare, &SampledTextureSampleGradCompareOffset_Texture2DArray_offset };

/// textureSampleGradProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleGradProjCompare_Texture1D_texture;
inline constexpr std::array TextureSampleGradProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleGradProjCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompare_Texture1D_coordinate;
Variable TextureSampleGradProjCompare_Texture1D_grad_x;
Variable TextureSampleGradProjCompare_Texture1D_grad_y;
Variable TextureSampleGradProjCompare_Texture1D_proj;
Variable TextureSampleGradProjCompare_Texture1D_compare;
Function TextureSampleGradProjCompare_Texture1D;
inline constexpr std::array TextureSampleGradProjCompare_Texture1D_args = { &TextureSampleGradProjCompare_Texture1D_texture, &TextureSampleGradProjCompare_Texture1D_sampler, &TextureSampleGradProjCompare_Texture1D_coordinate, &TextureSampleGradProjCompare_Texture1D_grad_x, &TextureSampleGradProjCompare_Texture1D_grad_y, &TextureSampleGradProjCompare_Texture1D_proj, &TextureSampleGradProjCompare_Texture1D_compare };

/// textureSampleGradProjCompare with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradProjCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleGradProjCompare_Texture1D_grad_x;
Variable SampledTextureSampleGradProjCompare_Texture1D_grad_y;
Variable SampledTextureSampleGradProjCompare_Texture1D_proj;
Variable SampledTextureSampleGradProjCompare_Texture1D_compare;
Function SampledTextureSampleGradProjCompare_Texture1D;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture1D_args = { &SampledTextureSampleGradProjCompare_Texture1D_texture, &SampledTextureSampleGradProjCompare_Texture1D_coordinate, &SampledTextureSampleGradProjCompare_Texture1D_grad_x, &SampledTextureSampleGradProjCompare_Texture1D_grad_y, &SampledTextureSampleGradProjCompare_Texture1D_proj, &SampledTextureSampleGradProjCompare_Texture1D_compare };

/// textureSampleGradProjCompare with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32
Variable TextureSampleGradProjCompare_Texture2D_texture;
inline constexpr std::array TextureSampleGradProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleGradProjCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompare_Texture2D_coordinate;
Variable TextureSampleGradProjCompare_Texture2D_grad_x;
Variable TextureSampleGradProjCompare_Texture2D_grad_y;
Variable TextureSampleGradProjCompare_Texture2D_proj;
Variable TextureSampleGradProjCompare_Texture2D_compare;
Function TextureSampleGradProjCompare_Texture2D;
inline constexpr std::array TextureSampleGradProjCompare_Texture2D_args = { &TextureSampleGradProjCompare_Texture2D_texture, &TextureSampleGradProjCompare_Texture2D_sampler, &TextureSampleGradProjCompare_Texture2D_coordinate, &TextureSampleGradProjCompare_Texture2D_grad_x, &TextureSampleGradProjCompare_Texture2D_grad_y, &TextureSampleGradProjCompare_Texture2D_proj, &TextureSampleGradProjCompare_Texture2D_compare };

/// textureSampleGradProjCompare with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32
Variable SampledTextureSampleGradProjCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleGradProjCompare_Texture2D_grad_x;
Variable SampledTextureSampleGradProjCompare_Texture2D_grad_y;
Variable SampledTextureSampleGradProjCompare_Texture2D_proj;
Variable SampledTextureSampleGradProjCompare_Texture2D_compare;
Function SampledTextureSampleGradProjCompare_Texture2D;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture2D_args = { &SampledTextureSampleGradProjCompare_Texture2D_texture, &SampledTextureSampleGradProjCompare_Texture2D_coordinate, &SampledTextureSampleGradProjCompare_Texture2D_grad_x, &SampledTextureSampleGradProjCompare_Texture2D_grad_y, &SampledTextureSampleGradProjCompare_Texture2D_proj, &SampledTextureSampleGradProjCompare_Texture2D_compare };

/// textureSampleGradProjCompare with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32
Variable TextureSampleGradProjCompare_Texture3D_texture;
inline constexpr std::array TextureSampleGradProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleGradProjCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompare_Texture3D_coordinate;
Variable TextureSampleGradProjCompare_Texture3D_grad_x;
Variable TextureSampleGradProjCompare_Texture3D_grad_y;
Variable TextureSampleGradProjCompare_Texture3D_proj;
Variable TextureSampleGradProjCompare_Texture3D_compare;
Function TextureSampleGradProjCompare_Texture3D;
inline constexpr std::array TextureSampleGradProjCompare_Texture3D_args = { &TextureSampleGradProjCompare_Texture3D_texture, &TextureSampleGradProjCompare_Texture3D_sampler, &TextureSampleGradProjCompare_Texture3D_coordinate, &TextureSampleGradProjCompare_Texture3D_grad_x, &TextureSampleGradProjCompare_Texture3D_grad_y, &TextureSampleGradProjCompare_Texture3D_proj, &TextureSampleGradProjCompare_Texture3D_compare };

/// textureSampleGradProjCompare with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32
Variable SampledTextureSampleGradProjCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleGradProjCompare_Texture3D_grad_x;
Variable SampledTextureSampleGradProjCompare_Texture3D_grad_y;
Variable SampledTextureSampleGradProjCompare_Texture3D_proj;
Variable SampledTextureSampleGradProjCompare_Texture3D_compare;
Function SampledTextureSampleGradProjCompare_Texture3D;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture3D_args = { &SampledTextureSampleGradProjCompare_Texture3D_texture, &SampledTextureSampleGradProjCompare_Texture3D_coordinate, &SampledTextureSampleGradProjCompare_Texture3D_grad_x, &SampledTextureSampleGradProjCompare_Texture3D_grad_y, &SampledTextureSampleGradProjCompare_Texture3D_proj, &SampledTextureSampleGradProjCompare_Texture3D_compare };

/// textureSampleGradProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleGradProjCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompareOffset_Texture1D_coordinate;
Variable TextureSampleGradProjCompareOffset_Texture1D_grad_x;
Variable TextureSampleGradProjCompareOffset_Texture1D_grad_y;
Variable TextureSampleGradProjCompareOffset_Texture1D_proj;
Variable TextureSampleGradProjCompareOffset_Texture1D_compare;
Variable TextureSampleGradProjCompareOffset_Texture1D_offset;
Function TextureSampleGradProjCompareOffset_Texture1D;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture1D_args = { &TextureSampleGradProjCompareOffset_Texture1D_texture, &TextureSampleGradProjCompareOffset_Texture1D_sampler, &TextureSampleGradProjCompareOffset_Texture1D_coordinate, &TextureSampleGradProjCompareOffset_Texture1D_grad_x, &TextureSampleGradProjCompareOffset_Texture1D_grad_y, &TextureSampleGradProjCompareOffset_Texture1D_proj, &TextureSampleGradProjCompareOffset_Texture1D_compare, &TextureSampleGradProjCompareOffset_Texture1D_offset };

/// textureSampleGradProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_proj;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_compare;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_offset;
Function SampledTextureSampleGradProjCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture1D_args = { &SampledTextureSampleGradProjCompareOffset_Texture1D_texture, &SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate, &SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x, &SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y, &SampledTextureSampleGradProjCompareOffset_Texture1D_proj, &SampledTextureSampleGradProjCompareOffset_Texture1D_compare, &SampledTextureSampleGradProjCompareOffset_Texture1D_offset };

/// textureSampleGradProjCompareOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleGradProjCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompareOffset_Texture2D_coordinate;
Variable TextureSampleGradProjCompareOffset_Texture2D_grad_x;
Variable TextureSampleGradProjCompareOffset_Texture2D_grad_y;
Variable TextureSampleGradProjCompareOffset_Texture2D_proj;
Variable TextureSampleGradProjCompareOffset_Texture2D_compare;
Variable TextureSampleGradProjCompareOffset_Texture2D_offset;
Function TextureSampleGradProjCompareOffset_Texture2D;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture2D_args = { &TextureSampleGradProjCompareOffset_Texture2D_texture, &TextureSampleGradProjCompareOffset_Texture2D_sampler, &TextureSampleGradProjCompareOffset_Texture2D_coordinate, &TextureSampleGradProjCompareOffset_Texture2D_grad_x, &TextureSampleGradProjCompareOffset_Texture2D_grad_y, &TextureSampleGradProjCompareOffset_Texture2D_proj, &TextureSampleGradProjCompareOffset_Texture2D_compare, &TextureSampleGradProjCompareOffset_Texture2D_offset };

/// textureSampleGradProjCompareOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_proj;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_compare;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_offset;
Function SampledTextureSampleGradProjCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture2D_args = { &SampledTextureSampleGradProjCompareOffset_Texture2D_texture, &SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate, &SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x, &SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y, &SampledTextureSampleGradProjCompareOffset_Texture2D_proj, &SampledTextureSampleGradProjCompareOffset_Texture2D_compare, &SampledTextureSampleGradProjCompareOffset_Texture2D_offset };

/// textureSampleGradProjCompareOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleGradProjCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleGradProjCompareOffset_Texture3D_coordinate;
Variable TextureSampleGradProjCompareOffset_Texture3D_grad_x;
Variable TextureSampleGradProjCompareOffset_Texture3D_grad_y;
Variable TextureSampleGradProjCompareOffset_Texture3D_proj;
Variable TextureSampleGradProjCompareOffset_Texture3D_compare;
Variable TextureSampleGradProjCompareOffset_Texture3D_offset;
Function TextureSampleGradProjCompareOffset_Texture3D;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture3D_args = { &TextureSampleGradProjCompareOffset_Texture3D_texture, &TextureSampleGradProjCompareOffset_Texture3D_sampler, &TextureSampleGradProjCompareOffset_Texture3D_coordinate, &TextureSampleGradProjCompareOffset_Texture3D_grad_x, &TextureSampleGradProjCompareOffset_Texture3D_grad_y, &TextureSampleGradProjCompareOffset_Texture3D_proj, &TextureSampleGradProjCompareOffset_Texture3D_compare, &TextureSampleGradProjCompareOffset_Texture3D_offset };

/// textureSampleGradProjCompareOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_proj;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_compare;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_offset;
Function SampledTextureSampleGradProjCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture3D_args = { &SampledTextureSampleGradProjCompareOffset_Texture3D_texture, &SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate, &SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x, &SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y, &SampledTextureSampleGradProjCompareOffset_Texture3D_proj, &SampledTextureSampleGradProjCompareOffset_Texture3D_compare, &SampledTextureSampleGradProjCompareOffset_Texture3D_offset };

/// textureSampleBias with Texture1D, Sampler, Float32, Float32
Variable TextureSampleBias_Texture1D_texture;
inline constexpr std::array TextureSampleBias_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture1D_sampler;
inline constexpr std::array TextureSampleBias_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture1D_coordinate;
Variable TextureSampleBias_Texture1D_bias;
Function TextureSampleBias_Texture1D;
inline constexpr std::array TextureSampleBias_Texture1D_args = { &TextureSampleBias_Texture1D_texture, &TextureSampleBias_Texture1D_sampler, &TextureSampleBias_Texture1D_coordinate, &TextureSampleBias_Texture1D_bias };

/// textureSampleBias with SampledTexture1D, Float32, Float32
Variable SampledTextureSampleBias_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBias_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_Texture1D_coordinate;
Variable SampledTextureSampleBias_Texture1D_bias;
Function SampledTextureSampleBias_Texture1D;
inline constexpr std::array SampledTextureSampleBias_Texture1D_args = { &SampledTextureSampleBias_Texture1D_texture, &SampledTextureSampleBias_Texture1D_coordinate, &SampledTextureSampleBias_Texture1D_bias };

/// textureSampleBias with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleBias_Texture2D_texture;
inline constexpr std::array TextureSampleBias_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture2D_sampler;
inline constexpr std::array TextureSampleBias_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture2D_coordinate;
Variable TextureSampleBias_Texture2D_bias;
Function TextureSampleBias_Texture2D;
inline constexpr std::array TextureSampleBias_Texture2D_args = { &TextureSampleBias_Texture2D_texture, &TextureSampleBias_Texture2D_sampler, &TextureSampleBias_Texture2D_coordinate, &TextureSampleBias_Texture2D_bias };

/// textureSampleBias with SampledTexture2D, Float32x2, Float32
Variable SampledTextureSampleBias_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBias_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_Texture2D_coordinate;
Variable SampledTextureSampleBias_Texture2D_bias;
Function SampledTextureSampleBias_Texture2D;
inline constexpr std::array SampledTextureSampleBias_Texture2D_args = { &SampledTextureSampleBias_Texture2D_texture, &SampledTextureSampleBias_Texture2D_coordinate, &SampledTextureSampleBias_Texture2D_bias };

/// textureSampleBias with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleBias_Texture3D_texture;
inline constexpr std::array TextureSampleBias_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture3D_sampler;
inline constexpr std::array TextureSampleBias_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture3D_coordinate;
Variable TextureSampleBias_Texture3D_bias;
Function TextureSampleBias_Texture3D;
inline constexpr std::array TextureSampleBias_Texture3D_args = { &TextureSampleBias_Texture3D_texture, &TextureSampleBias_Texture3D_sampler, &TextureSampleBias_Texture3D_coordinate, &TextureSampleBias_Texture3D_bias };

/// textureSampleBias with SampledTexture3D, Float32x3, Float32
Variable SampledTextureSampleBias_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBias_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_Texture3D_coordinate;
Variable SampledTextureSampleBias_Texture3D_bias;
Function SampledTextureSampleBias_Texture3D;
inline constexpr std::array SampledTextureSampleBias_Texture3D_args = { &SampledTextureSampleBias_Texture3D_texture, &SampledTextureSampleBias_Texture3D_coordinate, &SampledTextureSampleBias_Texture3D_bias };

/// textureSampleBias with TextureCube, Sampler, Float32x3, Float32
Variable TextureSampleBias_TextureCube_texture;
inline constexpr std::array TextureSampleBias_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_TextureCube_sampler;
inline constexpr std::array TextureSampleBias_TextureCube_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_TextureCube_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_TextureCube_coordinate;
Variable TextureSampleBias_TextureCube_bias;
Function TextureSampleBias_TextureCube;
inline constexpr std::array TextureSampleBias_TextureCube_args = { &TextureSampleBias_TextureCube_texture, &TextureSampleBias_TextureCube_sampler, &TextureSampleBias_TextureCube_coordinate, &TextureSampleBias_TextureCube_bias };

/// textureSampleBias with SampledTextureCube, Float32x3, Float32
Variable SampledTextureSampleBias_TextureCube_texture;
inline constexpr std::array SampledTextureSampleBias_TextureCube_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_TextureCube_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_TextureCube_coordinate;
Variable SampledTextureSampleBias_TextureCube_bias;
Function SampledTextureSampleBias_TextureCube;
inline constexpr std::array SampledTextureSampleBias_TextureCube_args = { &SampledTextureSampleBias_TextureCube_texture, &SampledTextureSampleBias_TextureCube_coordinate, &SampledTextureSampleBias_TextureCube_bias };

/// textureSampleBias with Texture1DArray, Sampler, Float32x2, Float32
Variable TextureSampleBias_Texture1DArray_texture;
inline constexpr std::array TextureSampleBias_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture1DArray_sampler;
inline constexpr std::array TextureSampleBias_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture1DArray_coordinate;
Variable TextureSampleBias_Texture1DArray_bias;
Function TextureSampleBias_Texture1DArray;
inline constexpr std::array TextureSampleBias_Texture1DArray_args = { &TextureSampleBias_Texture1DArray_texture, &TextureSampleBias_Texture1DArray_sampler, &TextureSampleBias_Texture1DArray_coordinate, &TextureSampleBias_Texture1DArray_bias };

/// textureSampleBias with SampledTexture1DArray, Float32x2, Float32
Variable SampledTextureSampleBias_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleBias_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_Texture1DArray_coordinate;
Variable SampledTextureSampleBias_Texture1DArray_bias;
Function SampledTextureSampleBias_Texture1DArray;
inline constexpr std::array SampledTextureSampleBias_Texture1DArray_args = { &SampledTextureSampleBias_Texture1DArray_texture, &SampledTextureSampleBias_Texture1DArray_coordinate, &SampledTextureSampleBias_Texture1DArray_bias };

/// textureSampleBias with Texture2DArray, Sampler, Float32x3, Float32
Variable TextureSampleBias_Texture2DArray_texture;
inline constexpr std::array TextureSampleBias_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture2DArray_sampler;
inline constexpr std::array TextureSampleBias_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_Texture2DArray_coordinate;
Variable TextureSampleBias_Texture2DArray_bias;
Function TextureSampleBias_Texture2DArray;
inline constexpr std::array TextureSampleBias_Texture2DArray_args = { &TextureSampleBias_Texture2DArray_texture, &TextureSampleBias_Texture2DArray_sampler, &TextureSampleBias_Texture2DArray_coordinate, &TextureSampleBias_Texture2DArray_bias };

/// textureSampleBias with SampledTexture2DArray, Float32x3, Float32
Variable SampledTextureSampleBias_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleBias_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_Texture2DArray_coordinate;
Variable SampledTextureSampleBias_Texture2DArray_bias;
Function SampledTextureSampleBias_Texture2DArray;
inline constexpr std::array SampledTextureSampleBias_Texture2DArray_args = { &SampledTextureSampleBias_Texture2DArray_texture, &SampledTextureSampleBias_Texture2DArray_coordinate, &SampledTextureSampleBias_Texture2DArray_bias };

/// textureSampleBias with TextureCubeArray, Sampler, Float32x4, Float32
Variable TextureSampleBias_TextureCubeArray_texture;
inline constexpr std::array TextureSampleBias_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_TextureCubeArray_sampler;
inline constexpr std::array TextureSampleBias_TextureCubeArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBias_TextureCubeArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBias_TextureCubeArray_coordinate;
Variable TextureSampleBias_TextureCubeArray_bias;
Function TextureSampleBias_TextureCubeArray;
inline constexpr std::array TextureSampleBias_TextureCubeArray_args = { &TextureSampleBias_TextureCubeArray_texture, &TextureSampleBias_TextureCubeArray_sampler, &TextureSampleBias_TextureCubeArray_coordinate, &TextureSampleBias_TextureCubeArray_bias };

/// textureSampleBias with SampledTextureCubeArray, Float32x4, Float32
Variable SampledTextureSampleBias_TextureCubeArray_texture;
inline constexpr std::array SampledTextureSampleBias_TextureCubeArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBias_TextureCubeArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBias_TextureCubeArray_coordinate;
Variable SampledTextureSampleBias_TextureCubeArray_bias;
Function SampledTextureSampleBias_TextureCubeArray;
inline constexpr std::array SampledTextureSampleBias_TextureCubeArray_args = { &SampledTextureSampleBias_TextureCubeArray_texture, &SampledTextureSampleBias_TextureCubeArray_coordinate, &SampledTextureSampleBias_TextureCubeArray_bias };

/// textureSampleBiasOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleBiasOffset_Texture1D_texture;
inline constexpr std::array TextureSampleBiasOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleBiasOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture1D_coordinate;
Variable TextureSampleBiasOffset_Texture1D_bias;
Variable TextureSampleBiasOffset_Texture1D_offset;
Function TextureSampleBiasOffset_Texture1D;
inline constexpr std::array TextureSampleBiasOffset_Texture1D_args = { &TextureSampleBiasOffset_Texture1D_texture, &TextureSampleBiasOffset_Texture1D_sampler, &TextureSampleBiasOffset_Texture1D_coordinate, &TextureSampleBiasOffset_Texture1D_bias, &TextureSampleBiasOffset_Texture1D_offset };

/// textureSampleBiasOffset with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleBiasOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasOffset_Texture1D_coordinate;
Variable SampledTextureSampleBiasOffset_Texture1D_bias;
Variable SampledTextureSampleBiasOffset_Texture1D_offset;
Function SampledTextureSampleBiasOffset_Texture1D;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1D_args = { &SampledTextureSampleBiasOffset_Texture1D_texture, &SampledTextureSampleBiasOffset_Texture1D_coordinate, &SampledTextureSampleBiasOffset_Texture1D_bias, &SampledTextureSampleBiasOffset_Texture1D_offset };

/// textureSampleBiasOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleBiasOffset_Texture2D_texture;
inline constexpr std::array TextureSampleBiasOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleBiasOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture2D_coordinate;
Variable TextureSampleBiasOffset_Texture2D_bias;
Variable TextureSampleBiasOffset_Texture2D_offset;
Function TextureSampleBiasOffset_Texture2D;
inline constexpr std::array TextureSampleBiasOffset_Texture2D_args = { &TextureSampleBiasOffset_Texture2D_texture, &TextureSampleBiasOffset_Texture2D_sampler, &TextureSampleBiasOffset_Texture2D_coordinate, &TextureSampleBiasOffset_Texture2D_bias, &TextureSampleBiasOffset_Texture2D_offset };

/// textureSampleBiasOffset with SampledTexture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleBiasOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasOffset_Texture2D_coordinate;
Variable SampledTextureSampleBiasOffset_Texture2D_bias;
Variable SampledTextureSampleBiasOffset_Texture2D_offset;
Function SampledTextureSampleBiasOffset_Texture2D;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2D_args = { &SampledTextureSampleBiasOffset_Texture2D_texture, &SampledTextureSampleBiasOffset_Texture2D_coordinate, &SampledTextureSampleBiasOffset_Texture2D_bias, &SampledTextureSampleBiasOffset_Texture2D_offset };

/// textureSampleBiasOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleBiasOffset_Texture3D_texture;
inline constexpr std::array TextureSampleBiasOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleBiasOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture3D_coordinate;
Variable TextureSampleBiasOffset_Texture3D_bias;
Variable TextureSampleBiasOffset_Texture3D_offset;
Function TextureSampleBiasOffset_Texture3D;
inline constexpr std::array TextureSampleBiasOffset_Texture3D_args = { &TextureSampleBiasOffset_Texture3D_texture, &TextureSampleBiasOffset_Texture3D_sampler, &TextureSampleBiasOffset_Texture3D_coordinate, &TextureSampleBiasOffset_Texture3D_bias, &TextureSampleBiasOffset_Texture3D_offset };

/// textureSampleBiasOffset with SampledTexture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleBiasOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasOffset_Texture3D_coordinate;
Variable SampledTextureSampleBiasOffset_Texture3D_bias;
Variable SampledTextureSampleBiasOffset_Texture3D_offset;
Function SampledTextureSampleBiasOffset_Texture3D;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture3D_args = { &SampledTextureSampleBiasOffset_Texture3D_texture, &SampledTextureSampleBiasOffset_Texture3D_coordinate, &SampledTextureSampleBiasOffset_Texture3D_bias, &SampledTextureSampleBiasOffset_Texture3D_offset };

/// textureSampleBiasOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleBiasOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleBiasOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleBiasOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture1DArray_coordinate;
Variable TextureSampleBiasOffset_Texture1DArray_bias;
Variable TextureSampleBiasOffset_Texture1DArray_offset;
Function TextureSampleBiasOffset_Texture1DArray;
inline constexpr std::array TextureSampleBiasOffset_Texture1DArray_args = { &TextureSampleBiasOffset_Texture1DArray_texture, &TextureSampleBiasOffset_Texture1DArray_sampler, &TextureSampleBiasOffset_Texture1DArray_coordinate, &TextureSampleBiasOffset_Texture1DArray_bias, &TextureSampleBiasOffset_Texture1DArray_offset };

/// textureSampleBiasOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
Variable SampledTextureSampleBiasOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleBiasOffset_Texture1DArray_bias;
Variable SampledTextureSampleBiasOffset_Texture1DArray_offset;
Function SampledTextureSampleBiasOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1DArray_args = { &SampledTextureSampleBiasOffset_Texture1DArray_texture, &SampledTextureSampleBiasOffset_Texture1DArray_coordinate, &SampledTextureSampleBiasOffset_Texture1DArray_bias, &SampledTextureSampleBiasOffset_Texture1DArray_offset };

/// textureSampleBiasOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleBiasOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleBiasOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleBiasOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasOffset_Texture2DArray_coordinate;
Variable TextureSampleBiasOffset_Texture2DArray_bias;
Variable TextureSampleBiasOffset_Texture2DArray_offset;
Function TextureSampleBiasOffset_Texture2DArray;
inline constexpr std::array TextureSampleBiasOffset_Texture2DArray_args = { &TextureSampleBiasOffset_Texture2DArray_texture, &TextureSampleBiasOffset_Texture2DArray_sampler, &TextureSampleBiasOffset_Texture2DArray_coordinate, &TextureSampleBiasOffset_Texture2DArray_bias, &TextureSampleBiasOffset_Texture2DArray_offset };

/// textureSampleBiasOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
Variable SampledTextureSampleBiasOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleBiasOffset_Texture2DArray_bias;
Variable SampledTextureSampleBiasOffset_Texture2DArray_offset;
Function SampledTextureSampleBiasOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2DArray_args = { &SampledTextureSampleBiasOffset_Texture2DArray_texture, &SampledTextureSampleBiasOffset_Texture2DArray_coordinate, &SampledTextureSampleBiasOffset_Texture2DArray_bias, &SampledTextureSampleBiasOffset_Texture2DArray_offset };

/// textureSampleBiasProj with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleBiasProj_Texture1D_texture;
inline constexpr std::array TextureSampleBiasProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProj_Texture1D_sampler;
inline constexpr std::array TextureSampleBiasProj_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProj_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProj_Texture1D_coordinate;
Variable TextureSampleBiasProj_Texture1D_bias;
Variable TextureSampleBiasProj_Texture1D_proj;
Function TextureSampleBiasProj_Texture1D;
inline constexpr std::array TextureSampleBiasProj_Texture1D_args = { &TextureSampleBiasProj_Texture1D_texture, &TextureSampleBiasProj_Texture1D_sampler, &TextureSampleBiasProj_Texture1D_coordinate, &TextureSampleBiasProj_Texture1D_bias, &TextureSampleBiasProj_Texture1D_proj };

/// textureSampleBiasProj with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleBiasProj_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBiasProj_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProj_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProj_Texture1D_coordinate;
Variable SampledTextureSampleBiasProj_Texture1D_bias;
Variable SampledTextureSampleBiasProj_Texture1D_proj;
Function SampledTextureSampleBiasProj_Texture1D;
inline constexpr std::array SampledTextureSampleBiasProj_Texture1D_args = { &SampledTextureSampleBiasProj_Texture1D_texture, &SampledTextureSampleBiasProj_Texture1D_coordinate, &SampledTextureSampleBiasProj_Texture1D_bias, &SampledTextureSampleBiasProj_Texture1D_proj };

/// textureSampleBiasProj with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleBiasProj_Texture2D_texture;
inline constexpr std::array TextureSampleBiasProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProj_Texture2D_sampler;
inline constexpr std::array TextureSampleBiasProj_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProj_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProj_Texture2D_coordinate;
Variable TextureSampleBiasProj_Texture2D_bias;
Variable TextureSampleBiasProj_Texture2D_proj;
Function TextureSampleBiasProj_Texture2D;
inline constexpr std::array TextureSampleBiasProj_Texture2D_args = { &TextureSampleBiasProj_Texture2D_texture, &TextureSampleBiasProj_Texture2D_sampler, &TextureSampleBiasProj_Texture2D_coordinate, &TextureSampleBiasProj_Texture2D_bias, &TextureSampleBiasProj_Texture2D_proj };

/// textureSampleBiasProj with SampledTexture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleBiasProj_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBiasProj_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProj_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProj_Texture2D_coordinate;
Variable SampledTextureSampleBiasProj_Texture2D_bias;
Variable SampledTextureSampleBiasProj_Texture2D_proj;
Function SampledTextureSampleBiasProj_Texture2D;
inline constexpr std::array SampledTextureSampleBiasProj_Texture2D_args = { &SampledTextureSampleBiasProj_Texture2D_texture, &SampledTextureSampleBiasProj_Texture2D_coordinate, &SampledTextureSampleBiasProj_Texture2D_bias, &SampledTextureSampleBiasProj_Texture2D_proj };

/// textureSampleBiasProj with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleBiasProj_Texture3D_texture;
inline constexpr std::array TextureSampleBiasProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProj_Texture3D_sampler;
inline constexpr std::array TextureSampleBiasProj_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProj_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProj_Texture3D_coordinate;
Variable TextureSampleBiasProj_Texture3D_bias;
Variable TextureSampleBiasProj_Texture3D_proj;
Function TextureSampleBiasProj_Texture3D;
inline constexpr std::array TextureSampleBiasProj_Texture3D_args = { &TextureSampleBiasProj_Texture3D_texture, &TextureSampleBiasProj_Texture3D_sampler, &TextureSampleBiasProj_Texture3D_coordinate, &TextureSampleBiasProj_Texture3D_bias, &TextureSampleBiasProj_Texture3D_proj };

/// textureSampleBiasProj with SampledTexture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleBiasProj_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBiasProj_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProj_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProj_Texture3D_coordinate;
Variable SampledTextureSampleBiasProj_Texture3D_bias;
Variable SampledTextureSampleBiasProj_Texture3D_proj;
Function SampledTextureSampleBiasProj_Texture3D;
inline constexpr std::array SampledTextureSampleBiasProj_Texture3D_args = { &SampledTextureSampleBiasProj_Texture3D_texture, &SampledTextureSampleBiasProj_Texture3D_coordinate, &SampledTextureSampleBiasProj_Texture3D_bias, &SampledTextureSampleBiasProj_Texture3D_proj };

/// textureSampleBiasProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleBiasProjOffset_Texture1D_texture;
inline constexpr std::array TextureSampleBiasProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleBiasProjOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjOffset_Texture1D_coordinate;
Variable TextureSampleBiasProjOffset_Texture1D_bias;
Variable TextureSampleBiasProjOffset_Texture1D_proj;
Variable TextureSampleBiasProjOffset_Texture1D_offset;
Function TextureSampleBiasProjOffset_Texture1D;
inline constexpr std::array TextureSampleBiasProjOffset_Texture1D_args = { &TextureSampleBiasProjOffset_Texture1D_texture, &TextureSampleBiasProjOffset_Texture1D_sampler, &TextureSampleBiasProjOffset_Texture1D_coordinate, &TextureSampleBiasProjOffset_Texture1D_bias, &TextureSampleBiasProjOffset_Texture1D_proj, &TextureSampleBiasProjOffset_Texture1D_offset };

/// textureSampleBiasProjOffset with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleBiasProjOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleBiasProjOffset_Texture1D_bias;
Variable SampledTextureSampleBiasProjOffset_Texture1D_proj;
Variable SampledTextureSampleBiasProjOffset_Texture1D_offset;
Function SampledTextureSampleBiasProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture1D_args = { &SampledTextureSampleBiasProjOffset_Texture1D_texture, &SampledTextureSampleBiasProjOffset_Texture1D_coordinate, &SampledTextureSampleBiasProjOffset_Texture1D_bias, &SampledTextureSampleBiasProjOffset_Texture1D_proj, &SampledTextureSampleBiasProjOffset_Texture1D_offset };

/// textureSampleBiasProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleBiasProjOffset_Texture2D_texture;
inline constexpr std::array TextureSampleBiasProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleBiasProjOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjOffset_Texture2D_coordinate;
Variable TextureSampleBiasProjOffset_Texture2D_bias;
Variable TextureSampleBiasProjOffset_Texture2D_proj;
Variable TextureSampleBiasProjOffset_Texture2D_offset;
Function TextureSampleBiasProjOffset_Texture2D;
inline constexpr std::array TextureSampleBiasProjOffset_Texture2D_args = { &TextureSampleBiasProjOffset_Texture2D_texture, &TextureSampleBiasProjOffset_Texture2D_sampler, &TextureSampleBiasProjOffset_Texture2D_coordinate, &TextureSampleBiasProjOffset_Texture2D_bias, &TextureSampleBiasProjOffset_Texture2D_proj, &TextureSampleBiasProjOffset_Texture2D_offset };

/// textureSampleBiasProjOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleBiasProjOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleBiasProjOffset_Texture2D_bias;
Variable SampledTextureSampleBiasProjOffset_Texture2D_proj;
Variable SampledTextureSampleBiasProjOffset_Texture2D_offset;
Function SampledTextureSampleBiasProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture2D_args = { &SampledTextureSampleBiasProjOffset_Texture2D_texture, &SampledTextureSampleBiasProjOffset_Texture2D_coordinate, &SampledTextureSampleBiasProjOffset_Texture2D_bias, &SampledTextureSampleBiasProjOffset_Texture2D_proj, &SampledTextureSampleBiasProjOffset_Texture2D_offset };

/// textureSampleBiasProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleBiasProjOffset_Texture3D_texture;
inline constexpr std::array TextureSampleBiasProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleBiasProjOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjOffset_Texture3D_coordinate;
Variable TextureSampleBiasProjOffset_Texture3D_bias;
Variable TextureSampleBiasProjOffset_Texture3D_proj;
Variable TextureSampleBiasProjOffset_Texture3D_offset;
Function TextureSampleBiasProjOffset_Texture3D;
inline constexpr std::array TextureSampleBiasProjOffset_Texture3D_args = { &TextureSampleBiasProjOffset_Texture3D_texture, &TextureSampleBiasProjOffset_Texture3D_sampler, &TextureSampleBiasProjOffset_Texture3D_coordinate, &TextureSampleBiasProjOffset_Texture3D_bias, &TextureSampleBiasProjOffset_Texture3D_proj, &TextureSampleBiasProjOffset_Texture3D_offset };

/// textureSampleBiasProjOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleBiasProjOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleBiasProjOffset_Texture3D_bias;
Variable SampledTextureSampleBiasProjOffset_Texture3D_proj;
Variable SampledTextureSampleBiasProjOffset_Texture3D_offset;
Function SampledTextureSampleBiasProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture3D_args = { &SampledTextureSampleBiasProjOffset_Texture3D_texture, &SampledTextureSampleBiasProjOffset_Texture3D_coordinate, &SampledTextureSampleBiasProjOffset_Texture3D_bias, &SampledTextureSampleBiasProjOffset_Texture3D_proj, &SampledTextureSampleBiasProjOffset_Texture3D_offset };

/// textureSampleBiasCompare with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleBiasCompare_Texture1D_texture;
inline constexpr std::array TextureSampleBiasCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleBiasCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture1D_coordinate;
Variable TextureSampleBiasCompare_Texture1D_bias;
Variable TextureSampleBiasCompare_Texture1D_compare;
Function TextureSampleBiasCompare_Texture1D;
inline constexpr std::array TextureSampleBiasCompare_Texture1D_args = { &TextureSampleBiasCompare_Texture1D_texture, &TextureSampleBiasCompare_Texture1D_sampler, &TextureSampleBiasCompare_Texture1D_coordinate, &TextureSampleBiasCompare_Texture1D_bias, &TextureSampleBiasCompare_Texture1D_compare };

/// textureSampleBiasCompare with SampledTexture1D, Float32, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompare_Texture1D_coordinate;
Variable SampledTextureSampleBiasCompare_Texture1D_bias;
Variable SampledTextureSampleBiasCompare_Texture1D_compare;
Function SampledTextureSampleBiasCompare_Texture1D;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1D_args = { &SampledTextureSampleBiasCompare_Texture1D_texture, &SampledTextureSampleBiasCompare_Texture1D_coordinate, &SampledTextureSampleBiasCompare_Texture1D_bias, &SampledTextureSampleBiasCompare_Texture1D_compare };

/// textureSampleBiasCompare with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleBiasCompare_Texture2D_texture;
inline constexpr std::array TextureSampleBiasCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleBiasCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture2D_coordinate;
Variable TextureSampleBiasCompare_Texture2D_bias;
Variable TextureSampleBiasCompare_Texture2D_compare;
Function TextureSampleBiasCompare_Texture2D;
inline constexpr std::array TextureSampleBiasCompare_Texture2D_args = { &TextureSampleBiasCompare_Texture2D_texture, &TextureSampleBiasCompare_Texture2D_sampler, &TextureSampleBiasCompare_Texture2D_coordinate, &TextureSampleBiasCompare_Texture2D_bias, &TextureSampleBiasCompare_Texture2D_compare };

/// textureSampleBiasCompare with SampledTexture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompare_Texture2D_coordinate;
Variable SampledTextureSampleBiasCompare_Texture2D_bias;
Variable SampledTextureSampleBiasCompare_Texture2D_compare;
Function SampledTextureSampleBiasCompare_Texture2D;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2D_args = { &SampledTextureSampleBiasCompare_Texture2D_texture, &SampledTextureSampleBiasCompare_Texture2D_coordinate, &SampledTextureSampleBiasCompare_Texture2D_bias, &SampledTextureSampleBiasCompare_Texture2D_compare };

/// textureSampleBiasCompare with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleBiasCompare_Texture3D_texture;
inline constexpr std::array TextureSampleBiasCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleBiasCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture3D_coordinate;
Variable TextureSampleBiasCompare_Texture3D_bias;
Variable TextureSampleBiasCompare_Texture3D_compare;
Function TextureSampleBiasCompare_Texture3D;
inline constexpr std::array TextureSampleBiasCompare_Texture3D_args = { &TextureSampleBiasCompare_Texture3D_texture, &TextureSampleBiasCompare_Texture3D_sampler, &TextureSampleBiasCompare_Texture3D_coordinate, &TextureSampleBiasCompare_Texture3D_bias, &TextureSampleBiasCompare_Texture3D_compare };

/// textureSampleBiasCompare with SampledTexture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompare_Texture3D_coordinate;
Variable SampledTextureSampleBiasCompare_Texture3D_bias;
Variable SampledTextureSampleBiasCompare_Texture3D_compare;
Function SampledTextureSampleBiasCompare_Texture3D;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture3D_args = { &SampledTextureSampleBiasCompare_Texture3D_texture, &SampledTextureSampleBiasCompare_Texture3D_coordinate, &SampledTextureSampleBiasCompare_Texture3D_bias, &SampledTextureSampleBiasCompare_Texture3D_compare };

/// textureSampleBiasCompare with Texture1DArray, Sampler, Float32x2, Float32, Float32
Variable TextureSampleBiasCompare_Texture1DArray_texture;
inline constexpr std::array TextureSampleBiasCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture1DArray_sampler;
inline constexpr std::array TextureSampleBiasCompare_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture1DArray_coordinate;
Variable TextureSampleBiasCompare_Texture1DArray_bias;
Variable TextureSampleBiasCompare_Texture1DArray_compare;
Function TextureSampleBiasCompare_Texture1DArray;
inline constexpr std::array TextureSampleBiasCompare_Texture1DArray_args = { &TextureSampleBiasCompare_Texture1DArray_texture, &TextureSampleBiasCompare_Texture1DArray_sampler, &TextureSampleBiasCompare_Texture1DArray_coordinate, &TextureSampleBiasCompare_Texture1DArray_bias, &TextureSampleBiasCompare_Texture1DArray_compare };

/// textureSampleBiasCompare with SampledTexture1DArray, Float32x2, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleBiasCompare_Texture1DArray_bias;
Variable SampledTextureSampleBiasCompare_Texture1DArray_compare;
Function SampledTextureSampleBiasCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1DArray_args = { &SampledTextureSampleBiasCompare_Texture1DArray_texture, &SampledTextureSampleBiasCompare_Texture1DArray_coordinate, &SampledTextureSampleBiasCompare_Texture1DArray_bias, &SampledTextureSampleBiasCompare_Texture1DArray_compare };

/// textureSampleBiasCompare with Texture2DArray, Sampler, Float32x3, Float32, Float32
Variable TextureSampleBiasCompare_Texture2DArray_texture;
inline constexpr std::array TextureSampleBiasCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture2DArray_sampler;
inline constexpr std::array TextureSampleBiasCompare_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompare_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompare_Texture2DArray_coordinate;
Variable TextureSampleBiasCompare_Texture2DArray_bias;
Variable TextureSampleBiasCompare_Texture2DArray_compare;
Function TextureSampleBiasCompare_Texture2DArray;
inline constexpr std::array TextureSampleBiasCompare_Texture2DArray_args = { &TextureSampleBiasCompare_Texture2DArray_texture, &TextureSampleBiasCompare_Texture2DArray_sampler, &TextureSampleBiasCompare_Texture2DArray_coordinate, &TextureSampleBiasCompare_Texture2DArray_bias, &TextureSampleBiasCompare_Texture2DArray_compare };

/// textureSampleBiasCompare with SampledTexture2DArray, Float32x3, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleBiasCompare_Texture2DArray_bias;
Variable SampledTextureSampleBiasCompare_Texture2DArray_compare;
Function SampledTextureSampleBiasCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2DArray_args = { &SampledTextureSampleBiasCompare_Texture2DArray_texture, &SampledTextureSampleBiasCompare_Texture2DArray_coordinate, &SampledTextureSampleBiasCompare_Texture2DArray_bias, &SampledTextureSampleBiasCompare_Texture2DArray_compare };

/// textureSampleBiasCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleBiasCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture1D_coordinate;
Variable TextureSampleBiasCompareOffset_Texture1D_bias;
Variable TextureSampleBiasCompareOffset_Texture1D_compare;
Variable TextureSampleBiasCompareOffset_Texture1D_offset;
Function TextureSampleBiasCompareOffset_Texture1D;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1D_args = { &TextureSampleBiasCompareOffset_Texture1D_texture, &TextureSampleBiasCompareOffset_Texture1D_sampler, &TextureSampleBiasCompareOffset_Texture1D_coordinate, &TextureSampleBiasCompareOffset_Texture1D_bias, &TextureSampleBiasCompareOffset_Texture1D_compare, &TextureSampleBiasCompareOffset_Texture1D_offset };

/// textureSampleBiasCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleBiasCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture1D_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture1D_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture1D_offset;
Function SampledTextureSampleBiasCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture1D_args = { &SampledTextureSampleBiasCompareOffset_Texture1D_texture, &SampledTextureSampleBiasCompareOffset_Texture1D_coordinate, &SampledTextureSampleBiasCompareOffset_Texture1D_bias, &SampledTextureSampleBiasCompareOffset_Texture1D_compare, &SampledTextureSampleBiasCompareOffset_Texture1D_offset };

/// textureSampleBiasCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleBiasCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture2D_coordinate;
Variable TextureSampleBiasCompareOffset_Texture2D_bias;
Variable TextureSampleBiasCompareOffset_Texture2D_compare;
Variable TextureSampleBiasCompareOffset_Texture2D_offset;
Function TextureSampleBiasCompareOffset_Texture2D;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2D_args = { &TextureSampleBiasCompareOffset_Texture2D_texture, &TextureSampleBiasCompareOffset_Texture2D_sampler, &TextureSampleBiasCompareOffset_Texture2D_coordinate, &TextureSampleBiasCompareOffset_Texture2D_bias, &TextureSampleBiasCompareOffset_Texture2D_compare, &TextureSampleBiasCompareOffset_Texture2D_offset };

/// textureSampleBiasCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleBiasCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture2D_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture2D_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture2D_offset;
Function SampledTextureSampleBiasCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture2D_args = { &SampledTextureSampleBiasCompareOffset_Texture2D_texture, &SampledTextureSampleBiasCompareOffset_Texture2D_coordinate, &SampledTextureSampleBiasCompareOffset_Texture2D_bias, &SampledTextureSampleBiasCompareOffset_Texture2D_compare, &SampledTextureSampleBiasCompareOffset_Texture2D_offset };

/// textureSampleBiasCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleBiasCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture3D_coordinate;
Variable TextureSampleBiasCompareOffset_Texture3D_bias;
Variable TextureSampleBiasCompareOffset_Texture3D_compare;
Variable TextureSampleBiasCompareOffset_Texture3D_offset;
Function TextureSampleBiasCompareOffset_Texture3D;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture3D_args = { &TextureSampleBiasCompareOffset_Texture3D_texture, &TextureSampleBiasCompareOffset_Texture3D_sampler, &TextureSampleBiasCompareOffset_Texture3D_coordinate, &TextureSampleBiasCompareOffset_Texture3D_bias, &TextureSampleBiasCompareOffset_Texture3D_compare, &TextureSampleBiasCompareOffset_Texture3D_offset };

/// textureSampleBiasCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleBiasCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture3D_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture3D_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture3D_offset;
Function SampledTextureSampleBiasCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture3D_args = { &SampledTextureSampleBiasCompareOffset_Texture3D_texture, &SampledTextureSampleBiasCompareOffset_Texture3D_coordinate, &SampledTextureSampleBiasCompareOffset_Texture3D_bias, &SampledTextureSampleBiasCompareOffset_Texture3D_compare, &SampledTextureSampleBiasCompareOffset_Texture3D_offset };

/// textureSampleBiasCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleBiasCompareOffset_Texture1DArray_texture;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture1DArray_sampler;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture1DArray_coordinate;
Variable TextureSampleBiasCompareOffset_Texture1DArray_bias;
Variable TextureSampleBiasCompareOffset_Texture1DArray_compare;
Variable TextureSampleBiasCompareOffset_Texture1DArray_offset;
Function TextureSampleBiasCompareOffset_Texture1DArray;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1DArray_args = { &TextureSampleBiasCompareOffset_Texture1DArray_texture, &TextureSampleBiasCompareOffset_Texture1DArray_sampler, &TextureSampleBiasCompareOffset_Texture1DArray_coordinate, &TextureSampleBiasCompareOffset_Texture1DArray_bias, &TextureSampleBiasCompareOffset_Texture1DArray_compare, &TextureSampleBiasCompareOffset_Texture1DArray_offset };

/// textureSampleBiasCompareOffset with SampledTexture1DArray, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleBiasCompareOffset_Texture1DArray_texture;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture1DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture1DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompareOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture1DArray_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture1DArray_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture1DArray_offset;
Function SampledTextureSampleBiasCompareOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture1DArray_args = { &SampledTextureSampleBiasCompareOffset_Texture1DArray_texture, &SampledTextureSampleBiasCompareOffset_Texture1DArray_coordinate, &SampledTextureSampleBiasCompareOffset_Texture1DArray_bias, &SampledTextureSampleBiasCompareOffset_Texture1DArray_compare, &SampledTextureSampleBiasCompareOffset_Texture1DArray_offset };

/// textureSampleBiasCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleBiasCompareOffset_Texture2DArray_texture;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture2DArray_sampler;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2DArray_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2DArray_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasCompareOffset_Texture2DArray_coordinate;
Variable TextureSampleBiasCompareOffset_Texture2DArray_bias;
Variable TextureSampleBiasCompareOffset_Texture2DArray_compare;
Variable TextureSampleBiasCompareOffset_Texture2DArray_offset;
Function TextureSampleBiasCompareOffset_Texture2DArray;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2DArray_args = { &TextureSampleBiasCompareOffset_Texture2DArray_texture, &TextureSampleBiasCompareOffset_Texture2DArray_sampler, &TextureSampleBiasCompareOffset_Texture2DArray_coordinate, &TextureSampleBiasCompareOffset_Texture2DArray_bias, &TextureSampleBiasCompareOffset_Texture2DArray_compare, &TextureSampleBiasCompareOffset_Texture2DArray_offset };

/// textureSampleBiasCompareOffset with SampledTexture2DArray, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleBiasCompareOffset_Texture2DArray_texture;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture2DArray_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture2DArray_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasCompareOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture2DArray_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture2DArray_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture2DArray_offset;
Function SampledTextureSampleBiasCompareOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture2DArray_args = { &SampledTextureSampleBiasCompareOffset_Texture2DArray_texture, &SampledTextureSampleBiasCompareOffset_Texture2DArray_coordinate, &SampledTextureSampleBiasCompareOffset_Texture2DArray_bias, &SampledTextureSampleBiasCompareOffset_Texture2DArray_compare, &SampledTextureSampleBiasCompareOffset_Texture2DArray_offset };

/// textureSampleBiasProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleBiasProjCompare_Texture1D_texture;
inline constexpr std::array TextureSampleBiasProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjCompare_Texture1D_sampler;
inline constexpr std::array TextureSampleBiasProjCompare_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjCompare_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjCompare_Texture1D_coordinate;
Variable TextureSampleBiasProjCompare_Texture1D_bias;
Variable TextureSampleBiasProjCompare_Texture1D_proj;
Variable TextureSampleBiasProjCompare_Texture1D_compare;
Function TextureSampleBiasProjCompare_Texture1D;
inline constexpr std::array TextureSampleBiasProjCompare_Texture1D_args = { &TextureSampleBiasProjCompare_Texture1D_texture, &TextureSampleBiasProjCompare_Texture1D_sampler, &TextureSampleBiasProjCompare_Texture1D_coordinate, &TextureSampleBiasProjCompare_Texture1D_bias, &TextureSampleBiasProjCompare_Texture1D_proj, &TextureSampleBiasProjCompare_Texture1D_compare };

/// textureSampleBiasProjCompare with SampledTexture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleBiasProjCompare_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBiasProjCompare_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProjCompare_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleBiasProjCompare_Texture1D_bias;
Variable SampledTextureSampleBiasProjCompare_Texture1D_proj;
Variable SampledTextureSampleBiasProjCompare_Texture1D_compare;
Function SampledTextureSampleBiasProjCompare_Texture1D;
inline constexpr std::array SampledTextureSampleBiasProjCompare_Texture1D_args = { &SampledTextureSampleBiasProjCompare_Texture1D_texture, &SampledTextureSampleBiasProjCompare_Texture1D_coordinate, &SampledTextureSampleBiasProjCompare_Texture1D_bias, &SampledTextureSampleBiasProjCompare_Texture1D_proj, &SampledTextureSampleBiasProjCompare_Texture1D_compare };

/// textureSampleBiasProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32, Float32
Variable TextureSampleBiasProjCompare_Texture2D_texture;
inline constexpr std::array TextureSampleBiasProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjCompare_Texture2D_sampler;
inline constexpr std::array TextureSampleBiasProjCompare_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjCompare_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjCompare_Texture2D_coordinate;
Variable TextureSampleBiasProjCompare_Texture2D_bias;
Variable TextureSampleBiasProjCompare_Texture2D_proj;
Variable TextureSampleBiasProjCompare_Texture2D_compare;
Function TextureSampleBiasProjCompare_Texture2D;
inline constexpr std::array TextureSampleBiasProjCompare_Texture2D_args = { &TextureSampleBiasProjCompare_Texture2D_texture, &TextureSampleBiasProjCompare_Texture2D_sampler, &TextureSampleBiasProjCompare_Texture2D_coordinate, &TextureSampleBiasProjCompare_Texture2D_bias, &TextureSampleBiasProjCompare_Texture2D_proj, &TextureSampleBiasProjCompare_Texture2D_compare };

/// textureSampleBiasProjCompare with SampledTexture2D, Float32x2, Float32, Float32, Float32
Variable SampledTextureSampleBiasProjCompare_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBiasProjCompare_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProjCompare_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleBiasProjCompare_Texture2D_bias;
Variable SampledTextureSampleBiasProjCompare_Texture2D_proj;
Variable SampledTextureSampleBiasProjCompare_Texture2D_compare;
Function SampledTextureSampleBiasProjCompare_Texture2D;
inline constexpr std::array SampledTextureSampleBiasProjCompare_Texture2D_args = { &SampledTextureSampleBiasProjCompare_Texture2D_texture, &SampledTextureSampleBiasProjCompare_Texture2D_coordinate, &SampledTextureSampleBiasProjCompare_Texture2D_bias, &SampledTextureSampleBiasProjCompare_Texture2D_proj, &SampledTextureSampleBiasProjCompare_Texture2D_compare };

/// textureSampleBiasProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32, Float32
Variable TextureSampleBiasProjCompare_Texture3D_texture;
inline constexpr std::array TextureSampleBiasProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjCompare_Texture3D_sampler;
inline constexpr std::array TextureSampleBiasProjCompare_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjCompare_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjCompare_Texture3D_coordinate;
Variable TextureSampleBiasProjCompare_Texture3D_bias;
Variable TextureSampleBiasProjCompare_Texture3D_proj;
Variable TextureSampleBiasProjCompare_Texture3D_compare;
Function TextureSampleBiasProjCompare_Texture3D;
inline constexpr std::array TextureSampleBiasProjCompare_Texture3D_args = { &TextureSampleBiasProjCompare_Texture3D_texture, &TextureSampleBiasProjCompare_Texture3D_sampler, &TextureSampleBiasProjCompare_Texture3D_coordinate, &TextureSampleBiasProjCompare_Texture3D_bias, &TextureSampleBiasProjCompare_Texture3D_proj, &TextureSampleBiasProjCompare_Texture3D_compare };

/// textureSampleBiasProjCompare with SampledTexture3D, Float32x3, Float32, Float32, Float32
Variable SampledTextureSampleBiasProjCompare_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBiasProjCompare_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProjCompare_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleBiasProjCompare_Texture3D_bias;
Variable SampledTextureSampleBiasProjCompare_Texture3D_proj;
Variable SampledTextureSampleBiasProjCompare_Texture3D_compare;
Function SampledTextureSampleBiasProjCompare_Texture3D;
inline constexpr std::array SampledTextureSampleBiasProjCompare_Texture3D_args = { &SampledTextureSampleBiasProjCompare_Texture3D_texture, &SampledTextureSampleBiasProjCompare_Texture3D_coordinate, &SampledTextureSampleBiasProjCompare_Texture3D_bias, &SampledTextureSampleBiasProjCompare_Texture3D_proj, &SampledTextureSampleBiasProjCompare_Texture3D_compare };

/// textureSampleBiasProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleBiasProjCompareOffset_Texture1D_texture;
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjCompareOffset_Texture1D_sampler;
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture1D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture1D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjCompareOffset_Texture1D_coordinate;
Variable TextureSampleBiasProjCompareOffset_Texture1D_bias;
Variable TextureSampleBiasProjCompareOffset_Texture1D_proj;
Variable TextureSampleBiasProjCompareOffset_Texture1D_compare;
Variable TextureSampleBiasProjCompareOffset_Texture1D_offset;
Function TextureSampleBiasProjCompareOffset_Texture1D;
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture1D_args = { &TextureSampleBiasProjCompareOffset_Texture1D_texture, &TextureSampleBiasProjCompareOffset_Texture1D_sampler, &TextureSampleBiasProjCompareOffset_Texture1D_coordinate, &TextureSampleBiasProjCompareOffset_Texture1D_bias, &TextureSampleBiasProjCompareOffset_Texture1D_proj, &TextureSampleBiasProjCompareOffset_Texture1D_compare, &TextureSampleBiasProjCompareOffset_Texture1D_offset };

/// textureSampleBiasProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleBiasProjCompareOffset_Texture1D_texture;
inline constexpr std::array SampledTextureSampleBiasProjCompareOffset_Texture1D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProjCompareOffset_Texture1D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProjCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleBiasProjCompareOffset_Texture1D_bias;
Variable SampledTextureSampleBiasProjCompareOffset_Texture1D_proj;
Variable SampledTextureSampleBiasProjCompareOffset_Texture1D_compare;
Variable SampledTextureSampleBiasProjCompareOffset_Texture1D_offset;
Function SampledTextureSampleBiasProjCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleBiasProjCompareOffset_Texture1D_args = { &SampledTextureSampleBiasProjCompareOffset_Texture1D_texture, &SampledTextureSampleBiasProjCompareOffset_Texture1D_coordinate, &SampledTextureSampleBiasProjCompareOffset_Texture1D_bias, &SampledTextureSampleBiasProjCompareOffset_Texture1D_proj, &SampledTextureSampleBiasProjCompareOffset_Texture1D_compare, &SampledTextureSampleBiasProjCompareOffset_Texture1D_offset };

/// textureSampleBiasProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32, Float32x2
Variable TextureSampleBiasProjCompareOffset_Texture2D_texture;
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjCompareOffset_Texture2D_sampler;
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture2D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture2D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjCompareOffset_Texture2D_coordinate;
Variable TextureSampleBiasProjCompareOffset_Texture2D_bias;
Variable TextureSampleBiasProjCompareOffset_Texture2D_proj;
Variable TextureSampleBiasProjCompareOffset_Texture2D_compare;
Variable TextureSampleBiasProjCompareOffset_Texture2D_offset;
Function TextureSampleBiasProjCompareOffset_Texture2D;
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture2D_args = { &TextureSampleBiasProjCompareOffset_Texture2D_texture, &TextureSampleBiasProjCompareOffset_Texture2D_sampler, &TextureSampleBiasProjCompareOffset_Texture2D_coordinate, &TextureSampleBiasProjCompareOffset_Texture2D_bias, &TextureSampleBiasProjCompareOffset_Texture2D_proj, &TextureSampleBiasProjCompareOffset_Texture2D_compare, &TextureSampleBiasProjCompareOffset_Texture2D_offset };

/// textureSampleBiasProjCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32, Float32x2
Variable SampledTextureSampleBiasProjCompareOffset_Texture2D_texture;
inline constexpr std::array SampledTextureSampleBiasProjCompareOffset_Texture2D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProjCompareOffset_Texture2D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProjCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleBiasProjCompareOffset_Texture2D_bias;
Variable SampledTextureSampleBiasProjCompareOffset_Texture2D_proj;
Variable SampledTextureSampleBiasProjCompareOffset_Texture2D_compare;
Variable SampledTextureSampleBiasProjCompareOffset_Texture2D_offset;
Function SampledTextureSampleBiasProjCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleBiasProjCompareOffset_Texture2D_args = { &SampledTextureSampleBiasProjCompareOffset_Texture2D_texture, &SampledTextureSampleBiasProjCompareOffset_Texture2D_coordinate, &SampledTextureSampleBiasProjCompareOffset_Texture2D_bias, &SampledTextureSampleBiasProjCompareOffset_Texture2D_proj, &SampledTextureSampleBiasProjCompareOffset_Texture2D_compare, &SampledTextureSampleBiasProjCompareOffset_Texture2D_offset };

/// textureSampleBiasProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32, Float32x3
Variable TextureSampleBiasProjCompareOffset_Texture3D_texture;
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjCompareOffset_Texture3D_sampler;
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture3D_sampler_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture3D_sampler_modifierValues = {(Expression*)nullptr};
Variable TextureSampleBiasProjCompareOffset_Texture3D_coordinate;
Variable TextureSampleBiasProjCompareOffset_Texture3D_bias;
Variable TextureSampleBiasProjCompareOffset_Texture3D_proj;
Variable TextureSampleBiasProjCompareOffset_Texture3D_compare;
Variable TextureSampleBiasProjCompareOffset_Texture3D_offset;
Function TextureSampleBiasProjCompareOffset_Texture3D;
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture3D_args = { &TextureSampleBiasProjCompareOffset_Texture3D_texture, &TextureSampleBiasProjCompareOffset_Texture3D_sampler, &TextureSampleBiasProjCompareOffset_Texture3D_coordinate, &TextureSampleBiasProjCompareOffset_Texture3D_bias, &TextureSampleBiasProjCompareOffset_Texture3D_proj, &TextureSampleBiasProjCompareOffset_Texture3D_compare, &TextureSampleBiasProjCompareOffset_Texture3D_offset };

/// textureSampleBiasProjCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32, Float32x3
Variable SampledTextureSampleBiasProjCompareOffset_Texture3D_texture;
inline constexpr std::array SampledTextureSampleBiasProjCompareOffset_Texture3D_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array SampledTextureSampleBiasProjCompareOffset_Texture3D_texture_modifierValues = {(Expression*)nullptr};
Variable SampledTextureSampleBiasProjCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleBiasProjCompareOffset_Texture3D_bias;
Variable SampledTextureSampleBiasProjCompareOffset_Texture3D_proj;
Variable SampledTextureSampleBiasProjCompareOffset_Texture3D_compare;
Variable SampledTextureSampleBiasProjCompareOffset_Texture3D_offset;
Function SampledTextureSampleBiasProjCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleBiasProjCompareOffset_Texture3D_args = { &SampledTextureSampleBiasProjCompareOffset_Texture3D_texture, &SampledTextureSampleBiasProjCompareOffset_Texture3D_coordinate, &SampledTextureSampleBiasProjCompareOffset_Texture3D_bias, &SampledTextureSampleBiasProjCompareOffset_Texture3D_proj, &SampledTextureSampleBiasProjCompareOffset_Texture3D_compare, &SampledTextureSampleBiasProjCompareOffset_Texture3D_offset };

void SetupIntrinsics()
{
    static bool IsSetup = false;
    if (IsSetup)
        return;
    IsSetup = true;

    /// f32 with UInt32
    Float32_from_UInt32_arg.name = "val"_c;
    Float32_from_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32_from_UInt32.documentation = "Convert from u32 to f32"_c;
    Float32_from_UInt32.name = "f32"_c;
    Float32_from_UInt32.compileTime = true;
    Float32_from_UInt32.backendIndex = 0;
    Float32_from_UInt32.returnType = Type::FullType { Float32Type.name };
    Float32_from_UInt32.parameters = Float32_from_UInt32_args;
    Symbol::Resolved(&Float32_from_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32_from_UInt32)->signature = "f32 f32(u32)"_c;
    Symbol::Resolved(&Float32_from_UInt32)->name = "f32(u32)"_c;
    Symbol::Resolved(&Float32_from_UInt32)->nameWithVarNames = "f32(val : u32)"_c;
    Symbol::Resolved(&Float32_from_UInt32)->returnTypeSymbol = &Float32Type;

    /// f32 with Int32
    Float32_from_Int32_arg.name = "val"_c;
    Float32_from_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32_from_Int32.documentation = "Convert from i32 to f32"_c;
    Float32_from_Int32.name = "f32"_c;
    Float32_from_Int32.compileTime = true;
    Float32_from_Int32.backendIndex = 1;
    Float32_from_Int32.returnType = Type::FullType { Float32Type.name };
    Float32_from_Int32.parameters = Float32_from_Int32_args;
    Symbol::Resolved(&Float32_from_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32_from_Int32)->signature = "f32 f32(i32)"_c;
    Symbol::Resolved(&Float32_from_Int32)->name = "f32(i32)"_c;
    Symbol::Resolved(&Float32_from_Int32)->nameWithVarNames = "f32(val : i32)"_c;
    Symbol::Resolved(&Float32_from_Int32)->returnTypeSymbol = &Float32Type;

    /// f32 with Bool8
    Float32_from_Bool8_arg.name = "val"_c;
    Float32_from_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Float32_from_Bool8.documentation = "Convert from b8 to f32"_c;
    Float32_from_Bool8.name = "f32"_c;
    Float32_from_Bool8.compileTime = true;
    Float32_from_Bool8.backendIndex = 2;
    Float32_from_Bool8.returnType = Type::FullType { Float32Type.name };
    Float32_from_Bool8.parameters = Float32_from_Bool8_args;
    Symbol::Resolved(&Float32_from_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Float32_from_Bool8)->signature = "f32 f32(b8)"_c;
    Symbol::Resolved(&Float32_from_Bool8)->name = "f32(b8)"_c;
    Symbol::Resolved(&Float32_from_Bool8)->nameWithVarNames = "f32(val : b8)"_c;
    Symbol::Resolved(&Float32_from_Bool8)->returnTypeSymbol = &Float32Type;

    /// f32 with Float16
    Float32_from_Float16_arg.name = "val"_c;
    Float32_from_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float32_from_Float16.documentation = "Convert from f16 to f32"_c;
    Float32_from_Float16.name = "f32"_c;
    Float32_from_Float16.compileTime = true;
    Float32_from_Float16.backendIndex = 3;
    Float32_from_Float16.returnType = Type::FullType { Float32Type.name };
    Float32_from_Float16.parameters = Float32_from_Float16_args;
    Symbol::Resolved(&Float32_from_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32_from_Float16)->signature = "f32 f32(f16)"_c;
    Symbol::Resolved(&Float32_from_Float16)->name = "f32(f16)"_c;
    Symbol::Resolved(&Float32_from_Float16)->nameWithVarNames = "f32(val : f16)"_c;
    Symbol::Resolved(&Float32_from_Float16)->returnTypeSymbol = &Float32Type;

    /// f32 with UInt16
    Float32_from_UInt16_arg.name = "val"_c;
    Float32_from_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32_from_UInt16.documentation = "Convert from u16 to f32"_c;
    Float32_from_UInt16.name = "f32"_c;
    Float32_from_UInt16.compileTime = true;
    Float32_from_UInt16.backendIndex = 4;
    Float32_from_UInt16.returnType = Type::FullType { Float32Type.name };
    Float32_from_UInt16.parameters = Float32_from_UInt16_args;
    Symbol::Resolved(&Float32_from_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32_from_UInt16)->signature = "f32 f32(u16)"_c;
    Symbol::Resolved(&Float32_from_UInt16)->name = "f32(u16)"_c;
    Symbol::Resolved(&Float32_from_UInt16)->nameWithVarNames = "f32(val : u16)"_c;
    Symbol::Resolved(&Float32_from_UInt16)->returnTypeSymbol = &Float32Type;

    /// f32 with Int16
    Float32_from_Int16_arg.name = "val"_c;
    Float32_from_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32_from_Int16.documentation = "Convert from i16 to f32"_c;
    Float32_from_Int16.name = "f32"_c;
    Float32_from_Int16.compileTime = true;
    Float32_from_Int16.backendIndex = 5;
    Float32_from_Int16.returnType = Type::FullType { Float32Type.name };
    Float32_from_Int16.parameters = Float32_from_Int16_args;
    Symbol::Resolved(&Float32_from_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32_from_Int16)->signature = "f32 f32(i16)"_c;
    Symbol::Resolved(&Float32_from_Int16)->name = "f32(i16)"_c;
    Symbol::Resolved(&Float32_from_Int16)->nameWithVarNames = "f32(val : i16)"_c;
    Symbol::Resolved(&Float32_from_Int16)->returnTypeSymbol = &Float32Type;

    /// f32 with Float32
    Float32_ctor0_arg0_Float32.name = "arg0"_c;
    Float32_ctor0_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32_ctor0.name = "f32"_c;
    Float32_ctor0.compileTime = true;
    Float32_ctor0.backendIndex = 6;
    Float32_ctor0.returnType = Type::FullType { Float32Type.name };
    Float32_ctor0.parameters = Float32_ctor0_args;
    Symbol::Resolved(&Float32_ctor0_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32_ctor0)->signature = "f32 f32(f32)"_c;
    Symbol::Resolved(&Float32_ctor0)->name = "f32(f32)"_c;
    Symbol::Resolved(&Float32_ctor0)->nameWithVarNames = "f32(arg0 : f32)"_c;
    Symbol::Resolved(&Float32_ctor0)->returnTypeSymbol = &Float32Type;

    /// u32 with Float32
    UInt32_from_Float32_arg.name = "val"_c;
    UInt32_from_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt32_from_Float32.documentation = "Convert from f32 to u32"_c;
    UInt32_from_Float32.name = "u32"_c;
    UInt32_from_Float32.compileTime = true;
    UInt32_from_Float32.backendIndex = 26;
    UInt32_from_Float32.returnType = Type::FullType { UInt32Type.name };
    UInt32_from_Float32.parameters = UInt32_from_Float32_args;
    Symbol::Resolved(&UInt32_from_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32_from_Float32)->signature = "u32 u32(f32)"_c;
    Symbol::Resolved(&UInt32_from_Float32)->name = "u32(f32)"_c;
    Symbol::Resolved(&UInt32_from_Float32)->nameWithVarNames = "u32(val : f32)"_c;
    Symbol::Resolved(&UInt32_from_Float32)->returnTypeSymbol = &UInt32Type;

    /// u32 with Int32
    UInt32_from_Int32_arg.name = "val"_c;
    UInt32_from_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32_from_Int32.documentation = "Convert from i32 to u32"_c;
    UInt32_from_Int32.name = "u32"_c;
    UInt32_from_Int32.compileTime = true;
    UInt32_from_Int32.backendIndex = 27;
    UInt32_from_Int32.returnType = Type::FullType { UInt32Type.name };
    UInt32_from_Int32.parameters = UInt32_from_Int32_args;
    Symbol::Resolved(&UInt32_from_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32_from_Int32)->signature = "u32 u32(i32)"_c;
    Symbol::Resolved(&UInt32_from_Int32)->name = "u32(i32)"_c;
    Symbol::Resolved(&UInt32_from_Int32)->nameWithVarNames = "u32(val : i32)"_c;
    Symbol::Resolved(&UInt32_from_Int32)->returnTypeSymbol = &UInt32Type;

    /// u32 with Bool8
    UInt32_from_Bool8_arg.name = "val"_c;
    UInt32_from_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    UInt32_from_Bool8.documentation = "Convert from b8 to u32"_c;
    UInt32_from_Bool8.name = "u32"_c;
    UInt32_from_Bool8.compileTime = true;
    UInt32_from_Bool8.backendIndex = 28;
    UInt32_from_Bool8.returnType = Type::FullType { UInt32Type.name };
    UInt32_from_Bool8.parameters = UInt32_from_Bool8_args;
    Symbol::Resolved(&UInt32_from_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&UInt32_from_Bool8)->signature = "u32 u32(b8)"_c;
    Symbol::Resolved(&UInt32_from_Bool8)->name = "u32(b8)"_c;
    Symbol::Resolved(&UInt32_from_Bool8)->nameWithVarNames = "u32(val : b8)"_c;
    Symbol::Resolved(&UInt32_from_Bool8)->returnTypeSymbol = &UInt32Type;

    /// u32 with Float16
    UInt32_from_Float16_arg.name = "val"_c;
    UInt32_from_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt32_from_Float16.documentation = "Convert from f16 to u32"_c;
    UInt32_from_Float16.name = "u32"_c;
    UInt32_from_Float16.compileTime = true;
    UInt32_from_Float16.backendIndex = 29;
    UInt32_from_Float16.returnType = Type::FullType { UInt32Type.name };
    UInt32_from_Float16.parameters = UInt32_from_Float16_args;
    Symbol::Resolved(&UInt32_from_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32_from_Float16)->signature = "u32 u32(f16)"_c;
    Symbol::Resolved(&UInt32_from_Float16)->name = "u32(f16)"_c;
    Symbol::Resolved(&UInt32_from_Float16)->nameWithVarNames = "u32(val : f16)"_c;
    Symbol::Resolved(&UInt32_from_Float16)->returnTypeSymbol = &UInt32Type;

    /// u32 with UInt16
    UInt32_from_UInt16_arg.name = "val"_c;
    UInt32_from_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32_from_UInt16.documentation = "Convert from u16 to u32"_c;
    UInt32_from_UInt16.name = "u32"_c;
    UInt32_from_UInt16.compileTime = true;
    UInt32_from_UInt16.backendIndex = 30;
    UInt32_from_UInt16.returnType = Type::FullType { UInt32Type.name };
    UInt32_from_UInt16.parameters = UInt32_from_UInt16_args;
    Symbol::Resolved(&UInt32_from_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32_from_UInt16)->signature = "u32 u32(u16)"_c;
    Symbol::Resolved(&UInt32_from_UInt16)->name = "u32(u16)"_c;
    Symbol::Resolved(&UInt32_from_UInt16)->nameWithVarNames = "u32(val : u16)"_c;
    Symbol::Resolved(&UInt32_from_UInt16)->returnTypeSymbol = &UInt32Type;

    /// u32 with Int16
    UInt32_from_Int16_arg.name = "val"_c;
    UInt32_from_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32_from_Int16.documentation = "Convert from i16 to u32"_c;
    UInt32_from_Int16.name = "u32"_c;
    UInt32_from_Int16.compileTime = true;
    UInt32_from_Int16.backendIndex = 31;
    UInt32_from_Int16.returnType = Type::FullType { UInt32Type.name };
    UInt32_from_Int16.parameters = UInt32_from_Int16_args;
    Symbol::Resolved(&UInt32_from_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32_from_Int16)->signature = "u32 u32(i16)"_c;
    Symbol::Resolved(&UInt32_from_Int16)->name = "u32(i16)"_c;
    Symbol::Resolved(&UInt32_from_Int16)->nameWithVarNames = "u32(val : i16)"_c;
    Symbol::Resolved(&UInt32_from_Int16)->returnTypeSymbol = &UInt32Type;

    /// u32 with UInt32
    UInt32_ctor0_arg0_UInt32.name = "arg0"_c;
    UInt32_ctor0_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32_ctor0.name = "u32"_c;
    UInt32_ctor0.compileTime = true;
    UInt32_ctor0.backendIndex = 32;
    UInt32_ctor0.returnType = Type::FullType { UInt32Type.name };
    UInt32_ctor0.parameters = UInt32_ctor0_args;
    Symbol::Resolved(&UInt32_ctor0_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32_ctor0)->signature = "u32 u32(u32)"_c;
    Symbol::Resolved(&UInt32_ctor0)->name = "u32(u32)"_c;
    Symbol::Resolved(&UInt32_ctor0)->nameWithVarNames = "u32(arg0 : u32)"_c;
    Symbol::Resolved(&UInt32_ctor0)->returnTypeSymbol = &UInt32Type;

    /// i32 with Float32
    Int32_from_Float32_arg.name = "val"_c;
    Int32_from_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int32_from_Float32.documentation = "Convert from f32 to i32"_c;
    Int32_from_Float32.name = "i32"_c;
    Int32_from_Float32.compileTime = true;
    Int32_from_Float32.backendIndex = 62;
    Int32_from_Float32.returnType = Type::FullType { Int32Type.name };
    Int32_from_Float32.parameters = Int32_from_Float32_args;
    Symbol::Resolved(&Int32_from_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32_from_Float32)->signature = "i32 i32(f32)"_c;
    Symbol::Resolved(&Int32_from_Float32)->name = "i32(f32)"_c;
    Symbol::Resolved(&Int32_from_Float32)->nameWithVarNames = "i32(val : f32)"_c;
    Symbol::Resolved(&Int32_from_Float32)->returnTypeSymbol = &Int32Type;

    /// i32 with UInt32
    Int32_from_UInt32_arg.name = "val"_c;
    Int32_from_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32_from_UInt32.documentation = "Convert from u32 to i32"_c;
    Int32_from_UInt32.name = "i32"_c;
    Int32_from_UInt32.compileTime = true;
    Int32_from_UInt32.backendIndex = 63;
    Int32_from_UInt32.returnType = Type::FullType { Int32Type.name };
    Int32_from_UInt32.parameters = Int32_from_UInt32_args;
    Symbol::Resolved(&Int32_from_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32_from_UInt32)->signature = "i32 i32(u32)"_c;
    Symbol::Resolved(&Int32_from_UInt32)->name = "i32(u32)"_c;
    Symbol::Resolved(&Int32_from_UInt32)->nameWithVarNames = "i32(val : u32)"_c;
    Symbol::Resolved(&Int32_from_UInt32)->returnTypeSymbol = &Int32Type;

    /// i32 with Bool8
    Int32_from_Bool8_arg.name = "val"_c;
    Int32_from_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Int32_from_Bool8.documentation = "Convert from b8 to i32"_c;
    Int32_from_Bool8.name = "i32"_c;
    Int32_from_Bool8.compileTime = true;
    Int32_from_Bool8.backendIndex = 64;
    Int32_from_Bool8.returnType = Type::FullType { Int32Type.name };
    Int32_from_Bool8.parameters = Int32_from_Bool8_args;
    Symbol::Resolved(&Int32_from_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Int32_from_Bool8)->signature = "i32 i32(b8)"_c;
    Symbol::Resolved(&Int32_from_Bool8)->name = "i32(b8)"_c;
    Symbol::Resolved(&Int32_from_Bool8)->nameWithVarNames = "i32(val : b8)"_c;
    Symbol::Resolved(&Int32_from_Bool8)->returnTypeSymbol = &Int32Type;

    /// i32 with Float16
    Int32_from_Float16_arg.name = "val"_c;
    Int32_from_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int32_from_Float16.documentation = "Convert from f16 to i32"_c;
    Int32_from_Float16.name = "i32"_c;
    Int32_from_Float16.compileTime = true;
    Int32_from_Float16.backendIndex = 65;
    Int32_from_Float16.returnType = Type::FullType { Int32Type.name };
    Int32_from_Float16.parameters = Int32_from_Float16_args;
    Symbol::Resolved(&Int32_from_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32_from_Float16)->signature = "i32 i32(f16)"_c;
    Symbol::Resolved(&Int32_from_Float16)->name = "i32(f16)"_c;
    Symbol::Resolved(&Int32_from_Float16)->nameWithVarNames = "i32(val : f16)"_c;
    Symbol::Resolved(&Int32_from_Float16)->returnTypeSymbol = &Int32Type;

    /// i32 with UInt16
    Int32_from_UInt16_arg.name = "val"_c;
    Int32_from_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32_from_UInt16.documentation = "Convert from u16 to i32"_c;
    Int32_from_UInt16.name = "i32"_c;
    Int32_from_UInt16.compileTime = true;
    Int32_from_UInt16.backendIndex = 66;
    Int32_from_UInt16.returnType = Type::FullType { Int32Type.name };
    Int32_from_UInt16.parameters = Int32_from_UInt16_args;
    Symbol::Resolved(&Int32_from_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32_from_UInt16)->signature = "i32 i32(u16)"_c;
    Symbol::Resolved(&Int32_from_UInt16)->name = "i32(u16)"_c;
    Symbol::Resolved(&Int32_from_UInt16)->nameWithVarNames = "i32(val : u16)"_c;
    Symbol::Resolved(&Int32_from_UInt16)->returnTypeSymbol = &Int32Type;

    /// i32 with Int16
    Int32_from_Int16_arg.name = "val"_c;
    Int32_from_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32_from_Int16.documentation = "Convert from i16 to i32"_c;
    Int32_from_Int16.name = "i32"_c;
    Int32_from_Int16.compileTime = true;
    Int32_from_Int16.backendIndex = 67;
    Int32_from_Int16.returnType = Type::FullType { Int32Type.name };
    Int32_from_Int16.parameters = Int32_from_Int16_args;
    Symbol::Resolved(&Int32_from_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32_from_Int16)->signature = "i32 i32(i16)"_c;
    Symbol::Resolved(&Int32_from_Int16)->name = "i32(i16)"_c;
    Symbol::Resolved(&Int32_from_Int16)->nameWithVarNames = "i32(val : i16)"_c;
    Symbol::Resolved(&Int32_from_Int16)->returnTypeSymbol = &Int32Type;

    /// i32 with Int32
    Int32_ctor0_arg0_Int32.name = "arg0"_c;
    Int32_ctor0_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32_ctor0.name = "i32"_c;
    Int32_ctor0.compileTime = true;
    Int32_ctor0.backendIndex = 68;
    Int32_ctor0.returnType = Type::FullType { Int32Type.name };
    Int32_ctor0.parameters = Int32_ctor0_args;
    Symbol::Resolved(&Int32_ctor0_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32_ctor0)->signature = "i32 i32(i32)"_c;
    Symbol::Resolved(&Int32_ctor0)->name = "i32(i32)"_c;
    Symbol::Resolved(&Int32_ctor0)->nameWithVarNames = "i32(arg0 : i32)"_c;
    Symbol::Resolved(&Int32_ctor0)->returnTypeSymbol = &Int32Type;

    /// b8 with UInt32
    Bool8_from_UInt32_arg.name = "val"_c;
    Bool8_from_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8_from_UInt32.documentation = "Convert from u32 to b8"_c;
    Bool8_from_UInt32.name = "b8"_c;
    Bool8_from_UInt32.compileTime = true;
    Bool8_from_UInt32.backendIndex = 98;
    Bool8_from_UInt32.returnType = Type::FullType { Bool8Type.name };
    Bool8_from_UInt32.parameters = Bool8_from_UInt32_args;
    Symbol::Resolved(&Bool8_from_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8_from_UInt32)->signature = "b8 b8(u32)"_c;
    Symbol::Resolved(&Bool8_from_UInt32)->name = "b8(u32)"_c;
    Symbol::Resolved(&Bool8_from_UInt32)->nameWithVarNames = "b8(val : u32)"_c;
    Symbol::Resolved(&Bool8_from_UInt32)->returnTypeSymbol = &Bool8Type;

    /// b8 with Int32
    Bool8_from_Int32_arg.name = "val"_c;
    Bool8_from_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8_from_Int32.documentation = "Convert from i32 to b8"_c;
    Bool8_from_Int32.name = "b8"_c;
    Bool8_from_Int32.compileTime = true;
    Bool8_from_Int32.backendIndex = 99;
    Bool8_from_Int32.returnType = Type::FullType { Bool8Type.name };
    Bool8_from_Int32.parameters = Bool8_from_Int32_args;
    Symbol::Resolved(&Bool8_from_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8_from_Int32)->signature = "b8 b8(i32)"_c;
    Symbol::Resolved(&Bool8_from_Int32)->name = "b8(i32)"_c;
    Symbol::Resolved(&Bool8_from_Int32)->nameWithVarNames = "b8(val : i32)"_c;
    Symbol::Resolved(&Bool8_from_Int32)->returnTypeSymbol = &Bool8Type;

    /// b8 with UInt16
    Bool8_from_UInt16_arg.name = "val"_c;
    Bool8_from_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8_from_UInt16.documentation = "Convert from u16 to b8"_c;
    Bool8_from_UInt16.name = "b8"_c;
    Bool8_from_UInt16.compileTime = true;
    Bool8_from_UInt16.backendIndex = 100;
    Bool8_from_UInt16.returnType = Type::FullType { Bool8Type.name };
    Bool8_from_UInt16.parameters = Bool8_from_UInt16_args;
    Symbol::Resolved(&Bool8_from_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8_from_UInt16)->signature = "b8 b8(u16)"_c;
    Symbol::Resolved(&Bool8_from_UInt16)->name = "b8(u16)"_c;
    Symbol::Resolved(&Bool8_from_UInt16)->nameWithVarNames = "b8(val : u16)"_c;
    Symbol::Resolved(&Bool8_from_UInt16)->returnTypeSymbol = &Bool8Type;

    /// b8 with Int16
    Bool8_from_Int16_arg.name = "val"_c;
    Bool8_from_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8_from_Int16.documentation = "Convert from i16 to b8"_c;
    Bool8_from_Int16.name = "b8"_c;
    Bool8_from_Int16.compileTime = true;
    Bool8_from_Int16.backendIndex = 101;
    Bool8_from_Int16.returnType = Type::FullType { Bool8Type.name };
    Bool8_from_Int16.parameters = Bool8_from_Int16_args;
    Symbol::Resolved(&Bool8_from_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8_from_Int16)->signature = "b8 b8(i16)"_c;
    Symbol::Resolved(&Bool8_from_Int16)->name = "b8(i16)"_c;
    Symbol::Resolved(&Bool8_from_Int16)->nameWithVarNames = "b8(val : i16)"_c;
    Symbol::Resolved(&Bool8_from_Int16)->returnTypeSymbol = &Bool8Type;

    /// b8 with Bool8
    Bool8_ctor0_arg0_Bool8.name = "arg0"_c;
    Bool8_ctor0_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8_ctor0.name = "b8"_c;
    Bool8_ctor0.compileTime = true;
    Bool8_ctor0.backendIndex = 102;
    Bool8_ctor0.returnType = Type::FullType { Bool8Type.name };
    Bool8_ctor0.parameters = Bool8_ctor0_args;
    Symbol::Resolved(&Bool8_ctor0_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8_ctor0)->signature = "b8 b8(b8)"_c;
    Symbol::Resolved(&Bool8_ctor0)->name = "b8(b8)"_c;
    Symbol::Resolved(&Bool8_ctor0)->nameWithVarNames = "b8(arg0 : b8)"_c;
    Symbol::Resolved(&Bool8_ctor0)->returnTypeSymbol = &Bool8Type;

    /// f16 with Float32
    Float16_from_Float32_arg.name = "val"_c;
    Float16_from_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float16_from_Float32.documentation = "Convert from f32 to f16"_c;
    Float16_from_Float32.name = "f16"_c;
    Float16_from_Float32.compileTime = true;
    Float16_from_Float32.backendIndex = 111;
    Float16_from_Float32.returnType = Type::FullType { Float16Type.name };
    Float16_from_Float32.parameters = Float16_from_Float32_args;
    Symbol::Resolved(&Float16_from_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16_from_Float32)->signature = "f16 f16(f32)"_c;
    Symbol::Resolved(&Float16_from_Float32)->name = "f16(f32)"_c;
    Symbol::Resolved(&Float16_from_Float32)->nameWithVarNames = "f16(val : f32)"_c;
    Symbol::Resolved(&Float16_from_Float32)->returnTypeSymbol = &Float16Type;

    /// f16 with UInt32
    Float16_from_UInt32_arg.name = "val"_c;
    Float16_from_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16_from_UInt32.documentation = "Convert from u32 to f16"_c;
    Float16_from_UInt32.name = "f16"_c;
    Float16_from_UInt32.compileTime = true;
    Float16_from_UInt32.backendIndex = 112;
    Float16_from_UInt32.returnType = Type::FullType { Float16Type.name };
    Float16_from_UInt32.parameters = Float16_from_UInt32_args;
    Symbol::Resolved(&Float16_from_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16_from_UInt32)->signature = "f16 f16(u32)"_c;
    Symbol::Resolved(&Float16_from_UInt32)->name = "f16(u32)"_c;
    Symbol::Resolved(&Float16_from_UInt32)->nameWithVarNames = "f16(val : u32)"_c;
    Symbol::Resolved(&Float16_from_UInt32)->returnTypeSymbol = &Float16Type;

    /// f16 with Int32
    Float16_from_Int32_arg.name = "val"_c;
    Float16_from_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16_from_Int32.documentation = "Convert from i32 to f16"_c;
    Float16_from_Int32.name = "f16"_c;
    Float16_from_Int32.compileTime = true;
    Float16_from_Int32.backendIndex = 113;
    Float16_from_Int32.returnType = Type::FullType { Float16Type.name };
    Float16_from_Int32.parameters = Float16_from_Int32_args;
    Symbol::Resolved(&Float16_from_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16_from_Int32)->signature = "f16 f16(i32)"_c;
    Symbol::Resolved(&Float16_from_Int32)->name = "f16(i32)"_c;
    Symbol::Resolved(&Float16_from_Int32)->nameWithVarNames = "f16(val : i32)"_c;
    Symbol::Resolved(&Float16_from_Int32)->returnTypeSymbol = &Float16Type;

    /// f16 with Bool8
    Float16_from_Bool8_arg.name = "val"_c;
    Float16_from_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Float16_from_Bool8.documentation = "Convert from b8 to f16"_c;
    Float16_from_Bool8.name = "f16"_c;
    Float16_from_Bool8.compileTime = true;
    Float16_from_Bool8.backendIndex = 114;
    Float16_from_Bool8.returnType = Type::FullType { Float16Type.name };
    Float16_from_Bool8.parameters = Float16_from_Bool8_args;
    Symbol::Resolved(&Float16_from_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Float16_from_Bool8)->signature = "f16 f16(b8)"_c;
    Symbol::Resolved(&Float16_from_Bool8)->name = "f16(b8)"_c;
    Symbol::Resolved(&Float16_from_Bool8)->nameWithVarNames = "f16(val : b8)"_c;
    Symbol::Resolved(&Float16_from_Bool8)->returnTypeSymbol = &Float16Type;

    /// f16 with UInt16
    Float16_from_UInt16_arg.name = "val"_c;
    Float16_from_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16_from_UInt16.documentation = "Convert from u16 to f16"_c;
    Float16_from_UInt16.name = "f16"_c;
    Float16_from_UInt16.compileTime = true;
    Float16_from_UInt16.backendIndex = 115;
    Float16_from_UInt16.returnType = Type::FullType { Float16Type.name };
    Float16_from_UInt16.parameters = Float16_from_UInt16_args;
    Symbol::Resolved(&Float16_from_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16_from_UInt16)->signature = "f16 f16(u16)"_c;
    Symbol::Resolved(&Float16_from_UInt16)->name = "f16(u16)"_c;
    Symbol::Resolved(&Float16_from_UInt16)->nameWithVarNames = "f16(val : u16)"_c;
    Symbol::Resolved(&Float16_from_UInt16)->returnTypeSymbol = &Float16Type;

    /// f16 with Int16
    Float16_from_Int16_arg.name = "val"_c;
    Float16_from_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16_from_Int16.documentation = "Convert from i16 to f16"_c;
    Float16_from_Int16.name = "f16"_c;
    Float16_from_Int16.compileTime = true;
    Float16_from_Int16.backendIndex = 116;
    Float16_from_Int16.returnType = Type::FullType { Float16Type.name };
    Float16_from_Int16.parameters = Float16_from_Int16_args;
    Symbol::Resolved(&Float16_from_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16_from_Int16)->signature = "f16 f16(i16)"_c;
    Symbol::Resolved(&Float16_from_Int16)->name = "f16(i16)"_c;
    Symbol::Resolved(&Float16_from_Int16)->nameWithVarNames = "f16(val : i16)"_c;
    Symbol::Resolved(&Float16_from_Int16)->returnTypeSymbol = &Float16Type;

    /// f16 with Float16
    Float16_ctor0_arg0_Float16.name = "arg0"_c;
    Float16_ctor0_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16_ctor0.name = "f16"_c;
    Float16_ctor0.compileTime = true;
    Float16_ctor0.backendIndex = 117;
    Float16_ctor0.returnType = Type::FullType { Float16Type.name };
    Float16_ctor0.parameters = Float16_ctor0_args;
    Symbol::Resolved(&Float16_ctor0_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16_ctor0)->signature = "f16 f16(f16)"_c;
    Symbol::Resolved(&Float16_ctor0)->name = "f16(f16)"_c;
    Symbol::Resolved(&Float16_ctor0)->nameWithVarNames = "f16(arg0 : f16)"_c;
    Symbol::Resolved(&Float16_ctor0)->returnTypeSymbol = &Float16Type;

    /// u16 with Float32
    UInt16_from_Float32_arg.name = "val"_c;
    UInt16_from_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt16_from_Float32.documentation = "Convert from f32 to u16"_c;
    UInt16_from_Float32.name = "u16"_c;
    UInt16_from_Float32.compileTime = true;
    UInt16_from_Float32.backendIndex = 137;
    UInt16_from_Float32.returnType = Type::FullType { UInt16Type.name };
    UInt16_from_Float32.parameters = UInt16_from_Float32_args;
    Symbol::Resolved(&UInt16_from_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16_from_Float32)->signature = "u16 u16(f32)"_c;
    Symbol::Resolved(&UInt16_from_Float32)->name = "u16(f32)"_c;
    Symbol::Resolved(&UInt16_from_Float32)->nameWithVarNames = "u16(val : f32)"_c;
    Symbol::Resolved(&UInt16_from_Float32)->returnTypeSymbol = &UInt16Type;

    /// u16 with UInt32
    UInt16_from_UInt32_arg.name = "val"_c;
    UInt16_from_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16_from_UInt32.documentation = "Convert from u32 to u16"_c;
    UInt16_from_UInt32.name = "u16"_c;
    UInt16_from_UInt32.compileTime = true;
    UInt16_from_UInt32.backendIndex = 138;
    UInt16_from_UInt32.returnType = Type::FullType { UInt16Type.name };
    UInt16_from_UInt32.parameters = UInt16_from_UInt32_args;
    Symbol::Resolved(&UInt16_from_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16_from_UInt32)->signature = "u16 u16(u32)"_c;
    Symbol::Resolved(&UInt16_from_UInt32)->name = "u16(u32)"_c;
    Symbol::Resolved(&UInt16_from_UInt32)->nameWithVarNames = "u16(val : u32)"_c;
    Symbol::Resolved(&UInt16_from_UInt32)->returnTypeSymbol = &UInt16Type;

    /// u16 with Int32
    UInt16_from_Int32_arg.name = "val"_c;
    UInt16_from_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16_from_Int32.documentation = "Convert from i32 to u16"_c;
    UInt16_from_Int32.name = "u16"_c;
    UInt16_from_Int32.compileTime = true;
    UInt16_from_Int32.backendIndex = 139;
    UInt16_from_Int32.returnType = Type::FullType { UInt16Type.name };
    UInt16_from_Int32.parameters = UInt16_from_Int32_args;
    Symbol::Resolved(&UInt16_from_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16_from_Int32)->signature = "u16 u16(i32)"_c;
    Symbol::Resolved(&UInt16_from_Int32)->name = "u16(i32)"_c;
    Symbol::Resolved(&UInt16_from_Int32)->nameWithVarNames = "u16(val : i32)"_c;
    Symbol::Resolved(&UInt16_from_Int32)->returnTypeSymbol = &UInt16Type;

    /// u16 with Bool8
    UInt16_from_Bool8_arg.name = "val"_c;
    UInt16_from_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    UInt16_from_Bool8.documentation = "Convert from b8 to u16"_c;
    UInt16_from_Bool8.name = "u16"_c;
    UInt16_from_Bool8.compileTime = true;
    UInt16_from_Bool8.backendIndex = 140;
    UInt16_from_Bool8.returnType = Type::FullType { UInt16Type.name };
    UInt16_from_Bool8.parameters = UInt16_from_Bool8_args;
    Symbol::Resolved(&UInt16_from_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&UInt16_from_Bool8)->signature = "u16 u16(b8)"_c;
    Symbol::Resolved(&UInt16_from_Bool8)->name = "u16(b8)"_c;
    Symbol::Resolved(&UInt16_from_Bool8)->nameWithVarNames = "u16(val : b8)"_c;
    Symbol::Resolved(&UInt16_from_Bool8)->returnTypeSymbol = &UInt16Type;

    /// u16 with Float16
    UInt16_from_Float16_arg.name = "val"_c;
    UInt16_from_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt16_from_Float16.documentation = "Convert from f16 to u16"_c;
    UInt16_from_Float16.name = "u16"_c;
    UInt16_from_Float16.compileTime = true;
    UInt16_from_Float16.backendIndex = 141;
    UInt16_from_Float16.returnType = Type::FullType { UInt16Type.name };
    UInt16_from_Float16.parameters = UInt16_from_Float16_args;
    Symbol::Resolved(&UInt16_from_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16_from_Float16)->signature = "u16 u16(f16)"_c;
    Symbol::Resolved(&UInt16_from_Float16)->name = "u16(f16)"_c;
    Symbol::Resolved(&UInt16_from_Float16)->nameWithVarNames = "u16(val : f16)"_c;
    Symbol::Resolved(&UInt16_from_Float16)->returnTypeSymbol = &UInt16Type;

    /// u16 with Int16
    UInt16_from_Int16_arg.name = "val"_c;
    UInt16_from_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16_from_Int16.documentation = "Convert from i16 to u16"_c;
    UInt16_from_Int16.name = "u16"_c;
    UInt16_from_Int16.compileTime = true;
    UInt16_from_Int16.backendIndex = 142;
    UInt16_from_Int16.returnType = Type::FullType { UInt16Type.name };
    UInt16_from_Int16.parameters = UInt16_from_Int16_args;
    Symbol::Resolved(&UInt16_from_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16_from_Int16)->signature = "u16 u16(i16)"_c;
    Symbol::Resolved(&UInt16_from_Int16)->name = "u16(i16)"_c;
    Symbol::Resolved(&UInt16_from_Int16)->nameWithVarNames = "u16(val : i16)"_c;
    Symbol::Resolved(&UInt16_from_Int16)->returnTypeSymbol = &UInt16Type;

    /// u16 with UInt16
    UInt16_ctor0_arg0_UInt16.name = "arg0"_c;
    UInt16_ctor0_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16_ctor0.name = "u16"_c;
    UInt16_ctor0.compileTime = true;
    UInt16_ctor0.backendIndex = 143;
    UInt16_ctor0.returnType = Type::FullType { UInt16Type.name };
    UInt16_ctor0.parameters = UInt16_ctor0_args;
    Symbol::Resolved(&UInt16_ctor0_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16_ctor0)->signature = "u16 u16(u16)"_c;
    Symbol::Resolved(&UInt16_ctor0)->name = "u16(u16)"_c;
    Symbol::Resolved(&UInt16_ctor0)->nameWithVarNames = "u16(arg0 : u16)"_c;
    Symbol::Resolved(&UInt16_ctor0)->returnTypeSymbol = &UInt16Type;

    /// i16 with Float32
    Int16_from_Float32_arg.name = "val"_c;
    Int16_from_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int16_from_Float32.documentation = "Convert from f32 to i16"_c;
    Int16_from_Float32.name = "i16"_c;
    Int16_from_Float32.compileTime = true;
    Int16_from_Float32.backendIndex = 173;
    Int16_from_Float32.returnType = Type::FullType { Int16Type.name };
    Int16_from_Float32.parameters = Int16_from_Float32_args;
    Symbol::Resolved(&Int16_from_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16_from_Float32)->signature = "i16 i16(f32)"_c;
    Symbol::Resolved(&Int16_from_Float32)->name = "i16(f32)"_c;
    Symbol::Resolved(&Int16_from_Float32)->nameWithVarNames = "i16(val : f32)"_c;
    Symbol::Resolved(&Int16_from_Float32)->returnTypeSymbol = &Int16Type;

    /// i16 with UInt32
    Int16_from_UInt32_arg.name = "val"_c;
    Int16_from_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16_from_UInt32.documentation = "Convert from u32 to i16"_c;
    Int16_from_UInt32.name = "i16"_c;
    Int16_from_UInt32.compileTime = true;
    Int16_from_UInt32.backendIndex = 174;
    Int16_from_UInt32.returnType = Type::FullType { Int16Type.name };
    Int16_from_UInt32.parameters = Int16_from_UInt32_args;
    Symbol::Resolved(&Int16_from_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16_from_UInt32)->signature = "i16 i16(u32)"_c;
    Symbol::Resolved(&Int16_from_UInt32)->name = "i16(u32)"_c;
    Symbol::Resolved(&Int16_from_UInt32)->nameWithVarNames = "i16(val : u32)"_c;
    Symbol::Resolved(&Int16_from_UInt32)->returnTypeSymbol = &Int16Type;

    /// i16 with Int32
    Int16_from_Int32_arg.name = "val"_c;
    Int16_from_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16_from_Int32.documentation = "Convert from i32 to i16"_c;
    Int16_from_Int32.name = "i16"_c;
    Int16_from_Int32.compileTime = true;
    Int16_from_Int32.backendIndex = 175;
    Int16_from_Int32.returnType = Type::FullType { Int16Type.name };
    Int16_from_Int32.parameters = Int16_from_Int32_args;
    Symbol::Resolved(&Int16_from_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16_from_Int32)->signature = "i16 i16(i32)"_c;
    Symbol::Resolved(&Int16_from_Int32)->name = "i16(i32)"_c;
    Symbol::Resolved(&Int16_from_Int32)->nameWithVarNames = "i16(val : i32)"_c;
    Symbol::Resolved(&Int16_from_Int32)->returnTypeSymbol = &Int16Type;

    /// i16 with Bool8
    Int16_from_Bool8_arg.name = "val"_c;
    Int16_from_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Int16_from_Bool8.documentation = "Convert from b8 to i16"_c;
    Int16_from_Bool8.name = "i16"_c;
    Int16_from_Bool8.compileTime = true;
    Int16_from_Bool8.backendIndex = 176;
    Int16_from_Bool8.returnType = Type::FullType { Int16Type.name };
    Int16_from_Bool8.parameters = Int16_from_Bool8_args;
    Symbol::Resolved(&Int16_from_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Int16_from_Bool8)->signature = "i16 i16(b8)"_c;
    Symbol::Resolved(&Int16_from_Bool8)->name = "i16(b8)"_c;
    Symbol::Resolved(&Int16_from_Bool8)->nameWithVarNames = "i16(val : b8)"_c;
    Symbol::Resolved(&Int16_from_Bool8)->returnTypeSymbol = &Int16Type;

    /// i16 with Float16
    Int16_from_Float16_arg.name = "val"_c;
    Int16_from_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int16_from_Float16.documentation = "Convert from f16 to i16"_c;
    Int16_from_Float16.name = "i16"_c;
    Int16_from_Float16.compileTime = true;
    Int16_from_Float16.backendIndex = 177;
    Int16_from_Float16.returnType = Type::FullType { Int16Type.name };
    Int16_from_Float16.parameters = Int16_from_Float16_args;
    Symbol::Resolved(&Int16_from_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16_from_Float16)->signature = "i16 i16(f16)"_c;
    Symbol::Resolved(&Int16_from_Float16)->name = "i16(f16)"_c;
    Symbol::Resolved(&Int16_from_Float16)->nameWithVarNames = "i16(val : f16)"_c;
    Symbol::Resolved(&Int16_from_Float16)->returnTypeSymbol = &Int16Type;

    /// i16 with UInt16
    Int16_from_UInt16_arg.name = "val"_c;
    Int16_from_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16_from_UInt16.documentation = "Convert from u16 to i16"_c;
    Int16_from_UInt16.name = "i16"_c;
    Int16_from_UInt16.compileTime = true;
    Int16_from_UInt16.backendIndex = 178;
    Int16_from_UInt16.returnType = Type::FullType { Int16Type.name };
    Int16_from_UInt16.parameters = Int16_from_UInt16_args;
    Symbol::Resolved(&Int16_from_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16_from_UInt16)->signature = "i16 i16(u16)"_c;
    Symbol::Resolved(&Int16_from_UInt16)->name = "i16(u16)"_c;
    Symbol::Resolved(&Int16_from_UInt16)->nameWithVarNames = "i16(val : u16)"_c;
    Symbol::Resolved(&Int16_from_UInt16)->returnTypeSymbol = &Int16Type;

    /// i16 with Int16
    Int16_ctor0_arg0_Int16.name = "arg0"_c;
    Int16_ctor0_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16_ctor0.name = "i16"_c;
    Int16_ctor0.compileTime = true;
    Int16_ctor0.backendIndex = 179;
    Int16_ctor0.returnType = Type::FullType { Int16Type.name };
    Int16_ctor0.parameters = Int16_ctor0_args;
    Symbol::Resolved(&Int16_ctor0_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16_ctor0)->signature = "i16 i16(i16)"_c;
    Symbol::Resolved(&Int16_ctor0)->name = "i16(i16)"_c;
    Symbol::Resolved(&Int16_ctor0)->nameWithVarNames = "i16(arg0 : i16)"_c;
    Symbol::Resolved(&Int16_ctor0)->returnTypeSymbol = &Int16Type;

    /// f32x2 with Float32x2
    Float32x2_from_Float32x2_arg.name = "val"_c;
    Float32x2_from_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float32x2_from_Float32x2.documentation = "Convert from f32x2 to f32x2"_c;
    Float32x2_from_Float32x2.name = "f32x2"_c;
    Float32x2_from_Float32x2.compileTime = true;
    Float32x2_from_Float32x2.backendIndex = 209;
    Float32x2_from_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_Float32x2.parameters = Float32x2_from_Float32x2_args;
    Symbol::Resolved(&Float32x2_from_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2_from_Float32x2)->signature = "f32x2 f32x2(f32x2)"_c;
    Symbol::Resolved(&Float32x2_from_Float32x2)->name = "f32x2(f32x2)"_c;
    Symbol::Resolved(&Float32x2_from_Float32x2)->nameWithVarNames = "f32x2(val : f32x2)"_c;
    Symbol::Resolved(&Float32x2_from_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Float32
    Float32x2_splat_Float32_arg.name = "val"_c;
    Float32x2_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x2_splat_Float32.documentation = "Splat f32 to f32x2"_c;
    Float32x2_splat_Float32.name = "f32x2"_c;
    Float32x2_splat_Float32.compileTime = true;
    Float32x2_splat_Float32.backendIndex = 210;
    Float32x2_splat_Float32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Float32.parameters = Float32x2_splat_Float32_args;
    Symbol::Resolved(&Float32x2_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2_splat_Float32)->signature = "f32x2 f32x2(f32)"_c;
    Symbol::Resolved(&Float32x2_splat_Float32)->name = "f32x2(f32)"_c;
    Symbol::Resolved(&Float32x2_splat_Float32)->nameWithVarNames = "f32x2(val : f32)"_c;
    Symbol::Resolved(&Float32x2_splat_Float32)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with UInt32x2
    Float32x2_from_UInt32x2_arg.name = "val"_c;
    Float32x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    Float32x2_from_UInt32x2.documentation = "Convert from u32x2 to f32x2"_c;
    Float32x2_from_UInt32x2.name = "f32x2"_c;
    Float32x2_from_UInt32x2.compileTime = true;
    Float32x2_from_UInt32x2.backendIndex = 211;
    Float32x2_from_UInt32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_UInt32x2.parameters = Float32x2_from_UInt32x2_args;
    Symbol::Resolved(&Float32x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Float32x2_from_UInt32x2)->signature = "f32x2 f32x2(u32x2)"_c;
    Symbol::Resolved(&Float32x2_from_UInt32x2)->name = "f32x2(u32x2)"_c;
    Symbol::Resolved(&Float32x2_from_UInt32x2)->nameWithVarNames = "f32x2(val : u32x2)"_c;
    Symbol::Resolved(&Float32x2_from_UInt32x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with UInt32
    Float32x2_splat_UInt32_arg.name = "val"_c;
    Float32x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x2_splat_UInt32.documentation = "Splat u32 to f32x2"_c;
    Float32x2_splat_UInt32.name = "f32x2"_c;
    Float32x2_splat_UInt32.compileTime = true;
    Float32x2_splat_UInt32.backendIndex = 212;
    Float32x2_splat_UInt32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_UInt32.parameters = Float32x2_splat_UInt32_args;
    Symbol::Resolved(&Float32x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x2_splat_UInt32)->signature = "f32x2 f32x2(u32)"_c;
    Symbol::Resolved(&Float32x2_splat_UInt32)->name = "f32x2(u32)"_c;
    Symbol::Resolved(&Float32x2_splat_UInt32)->nameWithVarNames = "f32x2(val : u32)"_c;
    Symbol::Resolved(&Float32x2_splat_UInt32)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Int32x2
    Float32x2_from_Int32x2_arg.name = "val"_c;
    Float32x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Float32x2_from_Int32x2.documentation = "Convert from i32x2 to f32x2"_c;
    Float32x2_from_Int32x2.name = "f32x2"_c;
    Float32x2_from_Int32x2.compileTime = true;
    Float32x2_from_Int32x2.backendIndex = 213;
    Float32x2_from_Int32x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_Int32x2.parameters = Float32x2_from_Int32x2_args;
    Symbol::Resolved(&Float32x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Float32x2_from_Int32x2)->signature = "f32x2 f32x2(i32x2)"_c;
    Symbol::Resolved(&Float32x2_from_Int32x2)->name = "f32x2(i32x2)"_c;
    Symbol::Resolved(&Float32x2_from_Int32x2)->nameWithVarNames = "f32x2(val : i32x2)"_c;
    Symbol::Resolved(&Float32x2_from_Int32x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Int32
    Float32x2_splat_Int32_arg.name = "val"_c;
    Float32x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x2_splat_Int32.documentation = "Splat i32 to f32x2"_c;
    Float32x2_splat_Int32.name = "f32x2"_c;
    Float32x2_splat_Int32.compileTime = true;
    Float32x2_splat_Int32.backendIndex = 214;
    Float32x2_splat_Int32.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Int32.parameters = Float32x2_splat_Int32_args;
    Symbol::Resolved(&Float32x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x2_splat_Int32)->signature = "f32x2 f32x2(i32)"_c;
    Symbol::Resolved(&Float32x2_splat_Int32)->name = "f32x2(i32)"_c;
    Symbol::Resolved(&Float32x2_splat_Int32)->nameWithVarNames = "f32x2(val : i32)"_c;
    Symbol::Resolved(&Float32x2_splat_Int32)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Bool8x2
    Float32x2_from_Bool8x2_arg.name = "val"_c;
    Float32x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Float32x2_from_Bool8x2.documentation = "Convert from b8x2 to f32x2"_c;
    Float32x2_from_Bool8x2.name = "f32x2"_c;
    Float32x2_from_Bool8x2.compileTime = true;
    Float32x2_from_Bool8x2.backendIndex = 215;
    Float32x2_from_Bool8x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_Bool8x2.parameters = Float32x2_from_Bool8x2_args;
    Symbol::Resolved(&Float32x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Float32x2_from_Bool8x2)->signature = "f32x2 f32x2(b8x2)"_c;
    Symbol::Resolved(&Float32x2_from_Bool8x2)->name = "f32x2(b8x2)"_c;
    Symbol::Resolved(&Float32x2_from_Bool8x2)->nameWithVarNames = "f32x2(val : b8x2)"_c;
    Symbol::Resolved(&Float32x2_from_Bool8x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Bool8
    Float32x2_splat_Bool8_arg.name = "val"_c;
    Float32x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Float32x2_splat_Bool8.documentation = "Splat b8 to f32x2"_c;
    Float32x2_splat_Bool8.name = "f32x2"_c;
    Float32x2_splat_Bool8.compileTime = true;
    Float32x2_splat_Bool8.backendIndex = 216;
    Float32x2_splat_Bool8.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Bool8.parameters = Float32x2_splat_Bool8_args;
    Symbol::Resolved(&Float32x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Float32x2_splat_Bool8)->signature = "f32x2 f32x2(b8)"_c;
    Symbol::Resolved(&Float32x2_splat_Bool8)->name = "f32x2(b8)"_c;
    Symbol::Resolved(&Float32x2_splat_Bool8)->nameWithVarNames = "f32x2(val : b8)"_c;
    Symbol::Resolved(&Float32x2_splat_Bool8)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Float16x2
    Float32x2_from_Float16x2_arg.name = "val"_c;
    Float32x2_from_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float32x2_from_Float16x2.documentation = "Convert from f16x2 to f32x2"_c;
    Float32x2_from_Float16x2.name = "f32x2"_c;
    Float32x2_from_Float16x2.compileTime = true;
    Float32x2_from_Float16x2.backendIndex = 217;
    Float32x2_from_Float16x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_Float16x2.parameters = Float32x2_from_Float16x2_args;
    Symbol::Resolved(&Float32x2_from_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float32x2_from_Float16x2)->signature = "f32x2 f32x2(f16x2)"_c;
    Symbol::Resolved(&Float32x2_from_Float16x2)->name = "f32x2(f16x2)"_c;
    Symbol::Resolved(&Float32x2_from_Float16x2)->nameWithVarNames = "f32x2(val : f16x2)"_c;
    Symbol::Resolved(&Float32x2_from_Float16x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Float16
    Float32x2_splat_Float16_arg.name = "val"_c;
    Float32x2_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float32x2_splat_Float16.documentation = "Splat f16 to f32x2"_c;
    Float32x2_splat_Float16.name = "f32x2"_c;
    Float32x2_splat_Float16.compileTime = true;
    Float32x2_splat_Float16.backendIndex = 218;
    Float32x2_splat_Float16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Float16.parameters = Float32x2_splat_Float16_args;
    Symbol::Resolved(&Float32x2_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32x2_splat_Float16)->signature = "f32x2 f32x2(f16)"_c;
    Symbol::Resolved(&Float32x2_splat_Float16)->name = "f32x2(f16)"_c;
    Symbol::Resolved(&Float32x2_splat_Float16)->nameWithVarNames = "f32x2(val : f16)"_c;
    Symbol::Resolved(&Float32x2_splat_Float16)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with UInt16x2
    Float32x2_from_UInt16x2_arg.name = "val"_c;
    Float32x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    Float32x2_from_UInt16x2.documentation = "Convert from u16x2 to f32x2"_c;
    Float32x2_from_UInt16x2.name = "f32x2"_c;
    Float32x2_from_UInt16x2.compileTime = true;
    Float32x2_from_UInt16x2.backendIndex = 219;
    Float32x2_from_UInt16x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_UInt16x2.parameters = Float32x2_from_UInt16x2_args;
    Symbol::Resolved(&Float32x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Float32x2_from_UInt16x2)->signature = "f32x2 f32x2(u16x2)"_c;
    Symbol::Resolved(&Float32x2_from_UInt16x2)->name = "f32x2(u16x2)"_c;
    Symbol::Resolved(&Float32x2_from_UInt16x2)->nameWithVarNames = "f32x2(val : u16x2)"_c;
    Symbol::Resolved(&Float32x2_from_UInt16x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with UInt16
    Float32x2_splat_UInt16_arg.name = "val"_c;
    Float32x2_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x2_splat_UInt16.documentation = "Splat u16 to f32x2"_c;
    Float32x2_splat_UInt16.name = "f32x2"_c;
    Float32x2_splat_UInt16.compileTime = true;
    Float32x2_splat_UInt16.backendIndex = 220;
    Float32x2_splat_UInt16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_UInt16.parameters = Float32x2_splat_UInt16_args;
    Symbol::Resolved(&Float32x2_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x2_splat_UInt16)->signature = "f32x2 f32x2(u16)"_c;
    Symbol::Resolved(&Float32x2_splat_UInt16)->name = "f32x2(u16)"_c;
    Symbol::Resolved(&Float32x2_splat_UInt16)->nameWithVarNames = "f32x2(val : u16)"_c;
    Symbol::Resolved(&Float32x2_splat_UInt16)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Int16x2
    Float32x2_from_Int16x2_arg.name = "val"_c;
    Float32x2_from_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Float32x2_from_Int16x2.documentation = "Convert from i16x2 to f32x2"_c;
    Float32x2_from_Int16x2.name = "f32x2"_c;
    Float32x2_from_Int16x2.compileTime = true;
    Float32x2_from_Int16x2.backendIndex = 221;
    Float32x2_from_Int16x2.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_from_Int16x2.parameters = Float32x2_from_Int16x2_args;
    Symbol::Resolved(&Float32x2_from_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Float32x2_from_Int16x2)->signature = "f32x2 f32x2(i16x2)"_c;
    Symbol::Resolved(&Float32x2_from_Int16x2)->name = "f32x2(i16x2)"_c;
    Symbol::Resolved(&Float32x2_from_Int16x2)->nameWithVarNames = "f32x2(val : i16x2)"_c;
    Symbol::Resolved(&Float32x2_from_Int16x2)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Int16
    Float32x2_splat_Int16_arg.name = "val"_c;
    Float32x2_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x2_splat_Int16.documentation = "Splat i16 to f32x2"_c;
    Float32x2_splat_Int16.name = "f32x2"_c;
    Float32x2_splat_Int16.compileTime = true;
    Float32x2_splat_Int16.backendIndex = 222;
    Float32x2_splat_Int16.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_splat_Int16.parameters = Float32x2_splat_Int16_args;
    Symbol::Resolved(&Float32x2_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x2_splat_Int16)->signature = "f32x2 f32x2(i16)"_c;
    Symbol::Resolved(&Float32x2_splat_Int16)->name = "f32x2(i16)"_c;
    Symbol::Resolved(&Float32x2_splat_Int16)->nameWithVarNames = "f32x2(val : i16)"_c;
    Symbol::Resolved(&Float32x2_splat_Int16)->returnTypeSymbol = &Float32x2Type;

    /// f32x2 with Float32, Float32
    Float32x2_ctor0_arg0_Float32.name = "arg0"_c;
    Float32x2_ctor0_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x2_ctor0_arg1_Float32.name = "arg1"_c;
    Float32x2_ctor0_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x2_ctor0.name = "f32x2"_c;
    Float32x2_ctor0.compileTime = true;
    Float32x2_ctor0.backendIndex = 223;
    Float32x2_ctor0.returnType = Type::FullType { Float32x2Type.name };
    Float32x2_ctor0.parameters = Float32x2_ctor0_args;
    Symbol::Resolved(&Float32x2_ctor0_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2_ctor0_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2_ctor0)->signature = "f32x2 f32x2(f32,f32)"_c;
    Symbol::Resolved(&Float32x2_ctor0)->name = "f32x2(f32,f32)"_c;
    Symbol::Resolved(&Float32x2_ctor0)->nameWithVarNames = "f32x2(arg0 : f32, arg1 : f32)"_c;
    Symbol::Resolved(&Float32x2_ctor0)->returnTypeSymbol = &Float32x2Type;

    /// u32x2 with Float32x2
    UInt32x2_from_Float32x2_arg.name = "val"_c;
    UInt32x2_from_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    UInt32x2_from_Float32x2.documentation = "Convert from f32x2 to u32x2"_c;
    UInt32x2_from_Float32x2.name = "u32x2"_c;
    UInt32x2_from_Float32x2.compileTime = true;
    UInt32x2_from_Float32x2.backendIndex = 249;
    UInt32x2_from_Float32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_Float32x2.parameters = UInt32x2_from_Float32x2_args;
    Symbol::Resolved(&UInt32x2_from_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&UInt32x2_from_Float32x2)->signature = "u32x2 u32x2(f32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Float32x2)->name = "u32x2(f32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Float32x2)->nameWithVarNames = "u32x2(val : f32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Float32x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Float32
    UInt32x2_splat_Float32_arg.name = "val"_c;
    UInt32x2_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt32x2_splat_Float32.documentation = "Splat f32 to u32x2"_c;
    UInt32x2_splat_Float32.name = "u32x2"_c;
    UInt32x2_splat_Float32.compileTime = true;
    UInt32x2_splat_Float32.backendIndex = 250;
    UInt32x2_splat_Float32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Float32.parameters = UInt32x2_splat_Float32_args;
    Symbol::Resolved(&UInt32x2_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x2_splat_Float32)->signature = "u32x2 u32x2(f32)"_c;
    Symbol::Resolved(&UInt32x2_splat_Float32)->name = "u32x2(f32)"_c;
    Symbol::Resolved(&UInt32x2_splat_Float32)->nameWithVarNames = "u32x2(val : f32)"_c;
    Symbol::Resolved(&UInt32x2_splat_Float32)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt32x2
    UInt32x2_from_UInt32x2_arg.name = "val"_c;
    UInt32x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt32x2_from_UInt32x2.documentation = "Convert from u32x2 to u32x2"_c;
    UInt32x2_from_UInt32x2.name = "u32x2"_c;
    UInt32x2_from_UInt32x2.compileTime = true;
    UInt32x2_from_UInt32x2.backendIndex = 251;
    UInt32x2_from_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_UInt32x2.parameters = UInt32x2_from_UInt32x2_args;
    Symbol::Resolved(&UInt32x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x2_from_UInt32x2)->signature = "u32x2 u32x2(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_UInt32x2)->name = "u32x2(u32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_UInt32x2)->nameWithVarNames = "u32x2(val : u32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt32
    UInt32x2_splat_UInt32_arg.name = "val"_c;
    UInt32x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x2_splat_UInt32.documentation = "Splat u32 to u32x2"_c;
    UInt32x2_splat_UInt32.name = "u32x2"_c;
    UInt32x2_splat_UInt32.compileTime = true;
    UInt32x2_splat_UInt32.backendIndex = 252;
    UInt32x2_splat_UInt32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_UInt32.parameters = UInt32x2_splat_UInt32_args;
    Symbol::Resolved(&UInt32x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_splat_UInt32)->signature = "u32x2 u32x2(u32)"_c;
    Symbol::Resolved(&UInt32x2_splat_UInt32)->name = "u32x2(u32)"_c;
    Symbol::Resolved(&UInt32x2_splat_UInt32)->nameWithVarNames = "u32x2(val : u32)"_c;
    Symbol::Resolved(&UInt32x2_splat_UInt32)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Int32x2
    UInt32x2_from_Int32x2_arg.name = "val"_c;
    UInt32x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    UInt32x2_from_Int32x2.documentation = "Convert from i32x2 to u32x2"_c;
    UInt32x2_from_Int32x2.name = "u32x2"_c;
    UInt32x2_from_Int32x2.compileTime = true;
    UInt32x2_from_Int32x2.backendIndex = 253;
    UInt32x2_from_Int32x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_Int32x2.parameters = UInt32x2_from_Int32x2_args;
    Symbol::Resolved(&UInt32x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&UInt32x2_from_Int32x2)->signature = "u32x2 u32x2(i32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Int32x2)->name = "u32x2(i32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Int32x2)->nameWithVarNames = "u32x2(val : i32x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Int32x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Int32
    UInt32x2_splat_Int32_arg.name = "val"_c;
    UInt32x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x2_splat_Int32.documentation = "Splat i32 to u32x2"_c;
    UInt32x2_splat_Int32.name = "u32x2"_c;
    UInt32x2_splat_Int32.compileTime = true;
    UInt32x2_splat_Int32.backendIndex = 254;
    UInt32x2_splat_Int32.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Int32.parameters = UInt32x2_splat_Int32_args;
    Symbol::Resolved(&UInt32x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x2_splat_Int32)->signature = "u32x2 u32x2(i32)"_c;
    Symbol::Resolved(&UInt32x2_splat_Int32)->name = "u32x2(i32)"_c;
    Symbol::Resolved(&UInt32x2_splat_Int32)->nameWithVarNames = "u32x2(val : i32)"_c;
    Symbol::Resolved(&UInt32x2_splat_Int32)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Bool8x2
    UInt32x2_from_Bool8x2_arg.name = "val"_c;
    UInt32x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    UInt32x2_from_Bool8x2.documentation = "Convert from b8x2 to u32x2"_c;
    UInt32x2_from_Bool8x2.name = "u32x2"_c;
    UInt32x2_from_Bool8x2.compileTime = true;
    UInt32x2_from_Bool8x2.backendIndex = 255;
    UInt32x2_from_Bool8x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_Bool8x2.parameters = UInt32x2_from_Bool8x2_args;
    Symbol::Resolved(&UInt32x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&UInt32x2_from_Bool8x2)->signature = "u32x2 u32x2(b8x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Bool8x2)->name = "u32x2(b8x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Bool8x2)->nameWithVarNames = "u32x2(val : b8x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Bool8x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Bool8
    UInt32x2_splat_Bool8_arg.name = "val"_c;
    UInt32x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    UInt32x2_splat_Bool8.documentation = "Splat b8 to u32x2"_c;
    UInt32x2_splat_Bool8.name = "u32x2"_c;
    UInt32x2_splat_Bool8.compileTime = true;
    UInt32x2_splat_Bool8.backendIndex = 256;
    UInt32x2_splat_Bool8.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Bool8.parameters = UInt32x2_splat_Bool8_args;
    Symbol::Resolved(&UInt32x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&UInt32x2_splat_Bool8)->signature = "u32x2 u32x2(b8)"_c;
    Symbol::Resolved(&UInt32x2_splat_Bool8)->name = "u32x2(b8)"_c;
    Symbol::Resolved(&UInt32x2_splat_Bool8)->nameWithVarNames = "u32x2(val : b8)"_c;
    Symbol::Resolved(&UInt32x2_splat_Bool8)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Float16x2
    UInt32x2_from_Float16x2_arg.name = "val"_c;
    UInt32x2_from_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    UInt32x2_from_Float16x2.documentation = "Convert from f16x2 to u32x2"_c;
    UInt32x2_from_Float16x2.name = "u32x2"_c;
    UInt32x2_from_Float16x2.compileTime = true;
    UInt32x2_from_Float16x2.backendIndex = 257;
    UInt32x2_from_Float16x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_Float16x2.parameters = UInt32x2_from_Float16x2_args;
    Symbol::Resolved(&UInt32x2_from_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&UInt32x2_from_Float16x2)->signature = "u32x2 u32x2(f16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Float16x2)->name = "u32x2(f16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Float16x2)->nameWithVarNames = "u32x2(val : f16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Float16x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Float16
    UInt32x2_splat_Float16_arg.name = "val"_c;
    UInt32x2_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt32x2_splat_Float16.documentation = "Splat f16 to u32x2"_c;
    UInt32x2_splat_Float16.name = "u32x2"_c;
    UInt32x2_splat_Float16.compileTime = true;
    UInt32x2_splat_Float16.backendIndex = 258;
    UInt32x2_splat_Float16.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Float16.parameters = UInt32x2_splat_Float16_args;
    Symbol::Resolved(&UInt32x2_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32x2_splat_Float16)->signature = "u32x2 u32x2(f16)"_c;
    Symbol::Resolved(&UInt32x2_splat_Float16)->name = "u32x2(f16)"_c;
    Symbol::Resolved(&UInt32x2_splat_Float16)->nameWithVarNames = "u32x2(val : f16)"_c;
    Symbol::Resolved(&UInt32x2_splat_Float16)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt16x2
    UInt32x2_from_UInt16x2_arg.name = "val"_c;
    UInt32x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt32x2_from_UInt16x2.documentation = "Convert from u16x2 to u32x2"_c;
    UInt32x2_from_UInt16x2.name = "u32x2"_c;
    UInt32x2_from_UInt16x2.compileTime = true;
    UInt32x2_from_UInt16x2.backendIndex = 259;
    UInt32x2_from_UInt16x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_UInt16x2.parameters = UInt32x2_from_UInt16x2_args;
    Symbol::Resolved(&UInt32x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt32x2_from_UInt16x2)->signature = "u32x2 u32x2(u16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_UInt16x2)->name = "u32x2(u16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_UInt16x2)->nameWithVarNames = "u32x2(val : u16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_UInt16x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt16
    UInt32x2_splat_UInt16_arg.name = "val"_c;
    UInt32x2_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32x2_splat_UInt16.documentation = "Splat u16 to u32x2"_c;
    UInt32x2_splat_UInt16.name = "u32x2"_c;
    UInt32x2_splat_UInt16.compileTime = true;
    UInt32x2_splat_UInt16.backendIndex = 260;
    UInt32x2_splat_UInt16.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_UInt16.parameters = UInt32x2_splat_UInt16_args;
    Symbol::Resolved(&UInt32x2_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x2_splat_UInt16)->signature = "u32x2 u32x2(u16)"_c;
    Symbol::Resolved(&UInt32x2_splat_UInt16)->name = "u32x2(u16)"_c;
    Symbol::Resolved(&UInt32x2_splat_UInt16)->nameWithVarNames = "u32x2(val : u16)"_c;
    Symbol::Resolved(&UInt32x2_splat_UInt16)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Int16x2
    UInt32x2_from_Int16x2_arg.name = "val"_c;
    UInt32x2_from_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    UInt32x2_from_Int16x2.documentation = "Convert from i16x2 to u32x2"_c;
    UInt32x2_from_Int16x2.name = "u32x2"_c;
    UInt32x2_from_Int16x2.compileTime = true;
    UInt32x2_from_Int16x2.backendIndex = 261;
    UInt32x2_from_Int16x2.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_from_Int16x2.parameters = UInt32x2_from_Int16x2_args;
    Symbol::Resolved(&UInt32x2_from_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&UInt32x2_from_Int16x2)->signature = "u32x2 u32x2(i16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Int16x2)->name = "u32x2(i16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Int16x2)->nameWithVarNames = "u32x2(val : i16x2)"_c;
    Symbol::Resolved(&UInt32x2_from_Int16x2)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with Int16
    UInt32x2_splat_Int16_arg.name = "val"_c;
    UInt32x2_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32x2_splat_Int16.documentation = "Splat i16 to u32x2"_c;
    UInt32x2_splat_Int16.name = "u32x2"_c;
    UInt32x2_splat_Int16.compileTime = true;
    UInt32x2_splat_Int16.backendIndex = 262;
    UInt32x2_splat_Int16.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_splat_Int16.parameters = UInt32x2_splat_Int16_args;
    Symbol::Resolved(&UInt32x2_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x2_splat_Int16)->signature = "u32x2 u32x2(i16)"_c;
    Symbol::Resolved(&UInt32x2_splat_Int16)->name = "u32x2(i16)"_c;
    Symbol::Resolved(&UInt32x2_splat_Int16)->nameWithVarNames = "u32x2(val : i16)"_c;
    Symbol::Resolved(&UInt32x2_splat_Int16)->returnTypeSymbol = &UInt32x2Type;

    /// u32x2 with UInt32, UInt32
    UInt32x2_ctor0_arg0_UInt32.name = "arg0"_c;
    UInt32x2_ctor0_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x2_ctor0_arg1_UInt32.name = "arg1"_c;
    UInt32x2_ctor0_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x2_ctor0.name = "u32x2"_c;
    UInt32x2_ctor0.compileTime = true;
    UInt32x2_ctor0.backendIndex = 263;
    UInt32x2_ctor0.returnType = Type::FullType { UInt32x2Type.name };
    UInt32x2_ctor0.parameters = UInt32x2_ctor0_args;
    Symbol::Resolved(&UInt32x2_ctor0_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_ctor0_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x2_ctor0)->signature = "u32x2 u32x2(u32,u32)"_c;
    Symbol::Resolved(&UInt32x2_ctor0)->name = "u32x2(u32,u32)"_c;
    Symbol::Resolved(&UInt32x2_ctor0)->nameWithVarNames = "u32x2(arg0 : u32, arg1 : u32)"_c;
    Symbol::Resolved(&UInt32x2_ctor0)->returnTypeSymbol = &UInt32x2Type;

    /// i32x2 with Float32x2
    Int32x2_from_Float32x2_arg.name = "val"_c;
    Int32x2_from_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Int32x2_from_Float32x2.documentation = "Convert from f32x2 to i32x2"_c;
    Int32x2_from_Float32x2.name = "i32x2"_c;
    Int32x2_from_Float32x2.compileTime = true;
    Int32x2_from_Float32x2.backendIndex = 296;
    Int32x2_from_Float32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_Float32x2.parameters = Int32x2_from_Float32x2_args;
    Symbol::Resolved(&Int32x2_from_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Int32x2_from_Float32x2)->signature = "i32x2 i32x2(f32x2)"_c;
    Symbol::Resolved(&Int32x2_from_Float32x2)->name = "i32x2(f32x2)"_c;
    Symbol::Resolved(&Int32x2_from_Float32x2)->nameWithVarNames = "i32x2(val : f32x2)"_c;
    Symbol::Resolved(&Int32x2_from_Float32x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Float32
    Int32x2_splat_Float32_arg.name = "val"_c;
    Int32x2_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int32x2_splat_Float32.documentation = "Splat f32 to i32x2"_c;
    Int32x2_splat_Float32.name = "i32x2"_c;
    Int32x2_splat_Float32.compileTime = true;
    Int32x2_splat_Float32.backendIndex = 297;
    Int32x2_splat_Float32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Float32.parameters = Int32x2_splat_Float32_args;
    Symbol::Resolved(&Int32x2_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x2_splat_Float32)->signature = "i32x2 i32x2(f32)"_c;
    Symbol::Resolved(&Int32x2_splat_Float32)->name = "i32x2(f32)"_c;
    Symbol::Resolved(&Int32x2_splat_Float32)->nameWithVarNames = "i32x2(val : f32)"_c;
    Symbol::Resolved(&Int32x2_splat_Float32)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with UInt32x2
    Int32x2_from_UInt32x2_arg.name = "val"_c;
    Int32x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    Int32x2_from_UInt32x2.documentation = "Convert from u32x2 to i32x2"_c;
    Int32x2_from_UInt32x2.name = "i32x2"_c;
    Int32x2_from_UInt32x2.compileTime = true;
    Int32x2_from_UInt32x2.backendIndex = 298;
    Int32x2_from_UInt32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_UInt32x2.parameters = Int32x2_from_UInt32x2_args;
    Symbol::Resolved(&Int32x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Int32x2_from_UInt32x2)->signature = "i32x2 i32x2(u32x2)"_c;
    Symbol::Resolved(&Int32x2_from_UInt32x2)->name = "i32x2(u32x2)"_c;
    Symbol::Resolved(&Int32x2_from_UInt32x2)->nameWithVarNames = "i32x2(val : u32x2)"_c;
    Symbol::Resolved(&Int32x2_from_UInt32x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with UInt32
    Int32x2_splat_UInt32_arg.name = "val"_c;
    Int32x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x2_splat_UInt32.documentation = "Splat u32 to i32x2"_c;
    Int32x2_splat_UInt32.name = "i32x2"_c;
    Int32x2_splat_UInt32.compileTime = true;
    Int32x2_splat_UInt32.backendIndex = 299;
    Int32x2_splat_UInt32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_UInt32.parameters = Int32x2_splat_UInt32_args;
    Symbol::Resolved(&Int32x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x2_splat_UInt32)->signature = "i32x2 i32x2(u32)"_c;
    Symbol::Resolved(&Int32x2_splat_UInt32)->name = "i32x2(u32)"_c;
    Symbol::Resolved(&Int32x2_splat_UInt32)->nameWithVarNames = "i32x2(val : u32)"_c;
    Symbol::Resolved(&Int32x2_splat_UInt32)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int32x2
    Int32x2_from_Int32x2_arg.name = "val"_c;
    Int32x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int32x2_from_Int32x2.documentation = "Convert from i32x2 to i32x2"_c;
    Int32x2_from_Int32x2.name = "i32x2"_c;
    Int32x2_from_Int32x2.compileTime = true;
    Int32x2_from_Int32x2.backendIndex = 300;
    Int32x2_from_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_Int32x2.parameters = Int32x2_from_Int32x2_args;
    Symbol::Resolved(&Int32x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x2_from_Int32x2)->signature = "i32x2 i32x2(i32x2)"_c;
    Symbol::Resolved(&Int32x2_from_Int32x2)->name = "i32x2(i32x2)"_c;
    Symbol::Resolved(&Int32x2_from_Int32x2)->nameWithVarNames = "i32x2(val : i32x2)"_c;
    Symbol::Resolved(&Int32x2_from_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int32
    Int32x2_splat_Int32_arg.name = "val"_c;
    Int32x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x2_splat_Int32.documentation = "Splat i32 to i32x2"_c;
    Int32x2_splat_Int32.name = "i32x2"_c;
    Int32x2_splat_Int32.compileTime = true;
    Int32x2_splat_Int32.backendIndex = 301;
    Int32x2_splat_Int32.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Int32.parameters = Int32x2_splat_Int32_args;
    Symbol::Resolved(&Int32x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_splat_Int32)->signature = "i32x2 i32x2(i32)"_c;
    Symbol::Resolved(&Int32x2_splat_Int32)->name = "i32x2(i32)"_c;
    Symbol::Resolved(&Int32x2_splat_Int32)->nameWithVarNames = "i32x2(val : i32)"_c;
    Symbol::Resolved(&Int32x2_splat_Int32)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Bool8x2
    Int32x2_from_Bool8x2_arg.name = "val"_c;
    Int32x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Int32x2_from_Bool8x2.documentation = "Convert from b8x2 to i32x2"_c;
    Int32x2_from_Bool8x2.name = "i32x2"_c;
    Int32x2_from_Bool8x2.compileTime = true;
    Int32x2_from_Bool8x2.backendIndex = 302;
    Int32x2_from_Bool8x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_Bool8x2.parameters = Int32x2_from_Bool8x2_args;
    Symbol::Resolved(&Int32x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Int32x2_from_Bool8x2)->signature = "i32x2 i32x2(b8x2)"_c;
    Symbol::Resolved(&Int32x2_from_Bool8x2)->name = "i32x2(b8x2)"_c;
    Symbol::Resolved(&Int32x2_from_Bool8x2)->nameWithVarNames = "i32x2(val : b8x2)"_c;
    Symbol::Resolved(&Int32x2_from_Bool8x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Bool8
    Int32x2_splat_Bool8_arg.name = "val"_c;
    Int32x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Int32x2_splat_Bool8.documentation = "Splat b8 to i32x2"_c;
    Int32x2_splat_Bool8.name = "i32x2"_c;
    Int32x2_splat_Bool8.compileTime = true;
    Int32x2_splat_Bool8.backendIndex = 303;
    Int32x2_splat_Bool8.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Bool8.parameters = Int32x2_splat_Bool8_args;
    Symbol::Resolved(&Int32x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Int32x2_splat_Bool8)->signature = "i32x2 i32x2(b8)"_c;
    Symbol::Resolved(&Int32x2_splat_Bool8)->name = "i32x2(b8)"_c;
    Symbol::Resolved(&Int32x2_splat_Bool8)->nameWithVarNames = "i32x2(val : b8)"_c;
    Symbol::Resolved(&Int32x2_splat_Bool8)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Float16x2
    Int32x2_from_Float16x2_arg.name = "val"_c;
    Int32x2_from_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Int32x2_from_Float16x2.documentation = "Convert from f16x2 to i32x2"_c;
    Int32x2_from_Float16x2.name = "i32x2"_c;
    Int32x2_from_Float16x2.compileTime = true;
    Int32x2_from_Float16x2.backendIndex = 304;
    Int32x2_from_Float16x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_Float16x2.parameters = Int32x2_from_Float16x2_args;
    Symbol::Resolved(&Int32x2_from_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Int32x2_from_Float16x2)->signature = "i32x2 i32x2(f16x2)"_c;
    Symbol::Resolved(&Int32x2_from_Float16x2)->name = "i32x2(f16x2)"_c;
    Symbol::Resolved(&Int32x2_from_Float16x2)->nameWithVarNames = "i32x2(val : f16x2)"_c;
    Symbol::Resolved(&Int32x2_from_Float16x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Float16
    Int32x2_splat_Float16_arg.name = "val"_c;
    Int32x2_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int32x2_splat_Float16.documentation = "Splat f16 to i32x2"_c;
    Int32x2_splat_Float16.name = "i32x2"_c;
    Int32x2_splat_Float16.compileTime = true;
    Int32x2_splat_Float16.backendIndex = 305;
    Int32x2_splat_Float16.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Float16.parameters = Int32x2_splat_Float16_args;
    Symbol::Resolved(&Int32x2_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32x2_splat_Float16)->signature = "i32x2 i32x2(f16)"_c;
    Symbol::Resolved(&Int32x2_splat_Float16)->name = "i32x2(f16)"_c;
    Symbol::Resolved(&Int32x2_splat_Float16)->nameWithVarNames = "i32x2(val : f16)"_c;
    Symbol::Resolved(&Int32x2_splat_Float16)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with UInt16x2
    Int32x2_from_UInt16x2_arg.name = "val"_c;
    Int32x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    Int32x2_from_UInt16x2.documentation = "Convert from u16x2 to i32x2"_c;
    Int32x2_from_UInt16x2.name = "i32x2"_c;
    Int32x2_from_UInt16x2.compileTime = true;
    Int32x2_from_UInt16x2.backendIndex = 306;
    Int32x2_from_UInt16x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_UInt16x2.parameters = Int32x2_from_UInt16x2_args;
    Symbol::Resolved(&Int32x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Int32x2_from_UInt16x2)->signature = "i32x2 i32x2(u16x2)"_c;
    Symbol::Resolved(&Int32x2_from_UInt16x2)->name = "i32x2(u16x2)"_c;
    Symbol::Resolved(&Int32x2_from_UInt16x2)->nameWithVarNames = "i32x2(val : u16x2)"_c;
    Symbol::Resolved(&Int32x2_from_UInt16x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with UInt16
    Int32x2_splat_UInt16_arg.name = "val"_c;
    Int32x2_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32x2_splat_UInt16.documentation = "Splat u16 to i32x2"_c;
    Int32x2_splat_UInt16.name = "i32x2"_c;
    Int32x2_splat_UInt16.compileTime = true;
    Int32x2_splat_UInt16.backendIndex = 307;
    Int32x2_splat_UInt16.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_UInt16.parameters = Int32x2_splat_UInt16_args;
    Symbol::Resolved(&Int32x2_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x2_splat_UInt16)->signature = "i32x2 i32x2(u16)"_c;
    Symbol::Resolved(&Int32x2_splat_UInt16)->name = "i32x2(u16)"_c;
    Symbol::Resolved(&Int32x2_splat_UInt16)->nameWithVarNames = "i32x2(val : u16)"_c;
    Symbol::Resolved(&Int32x2_splat_UInt16)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int16x2
    Int32x2_from_Int16x2_arg.name = "val"_c;
    Int32x2_from_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int32x2_from_Int16x2.documentation = "Convert from i16x2 to i32x2"_c;
    Int32x2_from_Int16x2.name = "i32x2"_c;
    Int32x2_from_Int16x2.compileTime = true;
    Int32x2_from_Int16x2.backendIndex = 308;
    Int32x2_from_Int16x2.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_from_Int16x2.parameters = Int32x2_from_Int16x2_args;
    Symbol::Resolved(&Int32x2_from_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int32x2_from_Int16x2)->signature = "i32x2 i32x2(i16x2)"_c;
    Symbol::Resolved(&Int32x2_from_Int16x2)->name = "i32x2(i16x2)"_c;
    Symbol::Resolved(&Int32x2_from_Int16x2)->nameWithVarNames = "i32x2(val : i16x2)"_c;
    Symbol::Resolved(&Int32x2_from_Int16x2)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int16
    Int32x2_splat_Int16_arg.name = "val"_c;
    Int32x2_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32x2_splat_Int16.documentation = "Splat i16 to i32x2"_c;
    Int32x2_splat_Int16.name = "i32x2"_c;
    Int32x2_splat_Int16.compileTime = true;
    Int32x2_splat_Int16.backendIndex = 309;
    Int32x2_splat_Int16.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_splat_Int16.parameters = Int32x2_splat_Int16_args;
    Symbol::Resolved(&Int32x2_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x2_splat_Int16)->signature = "i32x2 i32x2(i16)"_c;
    Symbol::Resolved(&Int32x2_splat_Int16)->name = "i32x2(i16)"_c;
    Symbol::Resolved(&Int32x2_splat_Int16)->nameWithVarNames = "i32x2(val : i16)"_c;
    Symbol::Resolved(&Int32x2_splat_Int16)->returnTypeSymbol = &Int32x2Type;

    /// i32x2 with Int32, Int32
    Int32x2_ctor0_arg0_Int32.name = "arg0"_c;
    Int32x2_ctor0_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x2_ctor0_arg1_Int32.name = "arg1"_c;
    Int32x2_ctor0_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x2_ctor0.name = "i32x2"_c;
    Int32x2_ctor0.compileTime = true;
    Int32x2_ctor0.backendIndex = 310;
    Int32x2_ctor0.returnType = Type::FullType { Int32x2Type.name };
    Int32x2_ctor0.parameters = Int32x2_ctor0_args;
    Symbol::Resolved(&Int32x2_ctor0_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_ctor0_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x2_ctor0)->signature = "i32x2 i32x2(i32,i32)"_c;
    Symbol::Resolved(&Int32x2_ctor0)->name = "i32x2(i32,i32)"_c;
    Symbol::Resolved(&Int32x2_ctor0)->nameWithVarNames = "i32x2(arg0 : i32, arg1 : i32)"_c;
    Symbol::Resolved(&Int32x2_ctor0)->returnTypeSymbol = &Int32x2Type;

    /// b8x2 with UInt32x2
    Bool8x2_from_UInt32x2_arg.name = "val"_c;
    Bool8x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    Bool8x2_from_UInt32x2.documentation = "Convert from u32x2 to b8x2"_c;
    Bool8x2_from_UInt32x2.name = "b8x2"_c;
    Bool8x2_from_UInt32x2.compileTime = true;
    Bool8x2_from_UInt32x2.backendIndex = 343;
    Bool8x2_from_UInt32x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_from_UInt32x2.parameters = Bool8x2_from_UInt32x2_args;
    Symbol::Resolved(&Bool8x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Bool8x2_from_UInt32x2)->signature = "b8x2 b8x2(u32x2)"_c;
    Symbol::Resolved(&Bool8x2_from_UInt32x2)->name = "b8x2(u32x2)"_c;
    Symbol::Resolved(&Bool8x2_from_UInt32x2)->nameWithVarNames = "b8x2(val : u32x2)"_c;
    Symbol::Resolved(&Bool8x2_from_UInt32x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with UInt32
    Bool8x2_splat_UInt32_arg.name = "val"_c;
    Bool8x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8x2_splat_UInt32.documentation = "Splat u32 to b8x2"_c;
    Bool8x2_splat_UInt32.name = "b8x2"_c;
    Bool8x2_splat_UInt32.compileTime = true;
    Bool8x2_splat_UInt32.backendIndex = 344;
    Bool8x2_splat_UInt32.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_UInt32.parameters = Bool8x2_splat_UInt32_args;
    Symbol::Resolved(&Bool8x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x2_splat_UInt32)->signature = "b8x2 b8x2(u32)"_c;
    Symbol::Resolved(&Bool8x2_splat_UInt32)->name = "b8x2(u32)"_c;
    Symbol::Resolved(&Bool8x2_splat_UInt32)->nameWithVarNames = "b8x2(val : u32)"_c;
    Symbol::Resolved(&Bool8x2_splat_UInt32)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Int32x2
    Bool8x2_from_Int32x2_arg.name = "val"_c;
    Bool8x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Bool8x2_from_Int32x2.documentation = "Convert from i32x2 to b8x2"_c;
    Bool8x2_from_Int32x2.name = "b8x2"_c;
    Bool8x2_from_Int32x2.compileTime = true;
    Bool8x2_from_Int32x2.backendIndex = 345;
    Bool8x2_from_Int32x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_from_Int32x2.parameters = Bool8x2_from_Int32x2_args;
    Symbol::Resolved(&Bool8x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Bool8x2_from_Int32x2)->signature = "b8x2 b8x2(i32x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Int32x2)->name = "b8x2(i32x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Int32x2)->nameWithVarNames = "b8x2(val : i32x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Int32x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Int32
    Bool8x2_splat_Int32_arg.name = "val"_c;
    Bool8x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8x2_splat_Int32.documentation = "Splat i32 to b8x2"_c;
    Bool8x2_splat_Int32.name = "b8x2"_c;
    Bool8x2_splat_Int32.compileTime = true;
    Bool8x2_splat_Int32.backendIndex = 346;
    Bool8x2_splat_Int32.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_Int32.parameters = Bool8x2_splat_Int32_args;
    Symbol::Resolved(&Bool8x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x2_splat_Int32)->signature = "b8x2 b8x2(i32)"_c;
    Symbol::Resolved(&Bool8x2_splat_Int32)->name = "b8x2(i32)"_c;
    Symbol::Resolved(&Bool8x2_splat_Int32)->nameWithVarNames = "b8x2(val : i32)"_c;
    Symbol::Resolved(&Bool8x2_splat_Int32)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Bool8x2
    Bool8x2_from_Bool8x2_arg.name = "val"_c;
    Bool8x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Bool8x2_from_Bool8x2.documentation = "Convert from b8x2 to b8x2"_c;
    Bool8x2_from_Bool8x2.name = "b8x2"_c;
    Bool8x2_from_Bool8x2.compileTime = true;
    Bool8x2_from_Bool8x2.backendIndex = 347;
    Bool8x2_from_Bool8x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_from_Bool8x2.parameters = Bool8x2_from_Bool8x2_args;
    Symbol::Resolved(&Bool8x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x2_from_Bool8x2)->signature = "b8x2 b8x2(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Bool8x2)->name = "b8x2(b8x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Bool8x2)->nameWithVarNames = "b8x2(val : b8x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Bool8
    Bool8x2_splat_Bool8_arg.name = "val"_c;
    Bool8x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Bool8x2_splat_Bool8.documentation = "Splat b8 to b8x2"_c;
    Bool8x2_splat_Bool8.name = "b8x2"_c;
    Bool8x2_splat_Bool8.compileTime = true;
    Bool8x2_splat_Bool8.backendIndex = 348;
    Bool8x2_splat_Bool8.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_Bool8.parameters = Bool8x2_splat_Bool8_args;
    Symbol::Resolved(&Bool8x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x2_splat_Bool8)->signature = "b8x2 b8x2(b8)"_c;
    Symbol::Resolved(&Bool8x2_splat_Bool8)->name = "b8x2(b8)"_c;
    Symbol::Resolved(&Bool8x2_splat_Bool8)->nameWithVarNames = "b8x2(val : b8)"_c;
    Symbol::Resolved(&Bool8x2_splat_Bool8)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with UInt16x2
    Bool8x2_from_UInt16x2_arg.name = "val"_c;
    Bool8x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    Bool8x2_from_UInt16x2.documentation = "Convert from u16x2 to b8x2"_c;
    Bool8x2_from_UInt16x2.name = "b8x2"_c;
    Bool8x2_from_UInt16x2.compileTime = true;
    Bool8x2_from_UInt16x2.backendIndex = 349;
    Bool8x2_from_UInt16x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_from_UInt16x2.parameters = Bool8x2_from_UInt16x2_args;
    Symbol::Resolved(&Bool8x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Bool8x2_from_UInt16x2)->signature = "b8x2 b8x2(u16x2)"_c;
    Symbol::Resolved(&Bool8x2_from_UInt16x2)->name = "b8x2(u16x2)"_c;
    Symbol::Resolved(&Bool8x2_from_UInt16x2)->nameWithVarNames = "b8x2(val : u16x2)"_c;
    Symbol::Resolved(&Bool8x2_from_UInt16x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with UInt16
    Bool8x2_splat_UInt16_arg.name = "val"_c;
    Bool8x2_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8x2_splat_UInt16.documentation = "Splat u16 to b8x2"_c;
    Bool8x2_splat_UInt16.name = "b8x2"_c;
    Bool8x2_splat_UInt16.compileTime = true;
    Bool8x2_splat_UInt16.backendIndex = 350;
    Bool8x2_splat_UInt16.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_UInt16.parameters = Bool8x2_splat_UInt16_args;
    Symbol::Resolved(&Bool8x2_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x2_splat_UInt16)->signature = "b8x2 b8x2(u16)"_c;
    Symbol::Resolved(&Bool8x2_splat_UInt16)->name = "b8x2(u16)"_c;
    Symbol::Resolved(&Bool8x2_splat_UInt16)->nameWithVarNames = "b8x2(val : u16)"_c;
    Symbol::Resolved(&Bool8x2_splat_UInt16)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Int16x2
    Bool8x2_from_Int16x2_arg.name = "val"_c;
    Bool8x2_from_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Bool8x2_from_Int16x2.documentation = "Convert from i16x2 to b8x2"_c;
    Bool8x2_from_Int16x2.name = "b8x2"_c;
    Bool8x2_from_Int16x2.compileTime = true;
    Bool8x2_from_Int16x2.backendIndex = 351;
    Bool8x2_from_Int16x2.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_from_Int16x2.parameters = Bool8x2_from_Int16x2_args;
    Symbol::Resolved(&Bool8x2_from_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Bool8x2_from_Int16x2)->signature = "b8x2 b8x2(i16x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Int16x2)->name = "b8x2(i16x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Int16x2)->nameWithVarNames = "b8x2(val : i16x2)"_c;
    Symbol::Resolved(&Bool8x2_from_Int16x2)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Int16
    Bool8x2_splat_Int16_arg.name = "val"_c;
    Bool8x2_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8x2_splat_Int16.documentation = "Splat i16 to b8x2"_c;
    Bool8x2_splat_Int16.name = "b8x2"_c;
    Bool8x2_splat_Int16.compileTime = true;
    Bool8x2_splat_Int16.backendIndex = 352;
    Bool8x2_splat_Int16.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_splat_Int16.parameters = Bool8x2_splat_Int16_args;
    Symbol::Resolved(&Bool8x2_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x2_splat_Int16)->signature = "b8x2 b8x2(i16)"_c;
    Symbol::Resolved(&Bool8x2_splat_Int16)->name = "b8x2(i16)"_c;
    Symbol::Resolved(&Bool8x2_splat_Int16)->nameWithVarNames = "b8x2(val : i16)"_c;
    Symbol::Resolved(&Bool8x2_splat_Int16)->returnTypeSymbol = &Bool8x2Type;

    /// b8x2 with Bool8, Bool8
    Bool8x2_ctor0_arg0_Bool8.name = "arg0"_c;
    Bool8x2_ctor0_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x2_ctor0_arg1_Bool8.name = "arg1"_c;
    Bool8x2_ctor0_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x2_ctor0.name = "b8x2"_c;
    Bool8x2_ctor0.compileTime = true;
    Bool8x2_ctor0.backendIndex = 353;
    Bool8x2_ctor0.returnType = Type::FullType { Bool8x2Type.name };
    Bool8x2_ctor0.parameters = Bool8x2_ctor0_args;
    Symbol::Resolved(&Bool8x2_ctor0_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x2_ctor0_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x2_ctor0)->signature = "b8x2 b8x2(b8,b8)"_c;
    Symbol::Resolved(&Bool8x2_ctor0)->name = "b8x2(b8,b8)"_c;
    Symbol::Resolved(&Bool8x2_ctor0)->nameWithVarNames = "b8x2(arg0 : b8, arg1 : b8)"_c;
    Symbol::Resolved(&Bool8x2_ctor0)->returnTypeSymbol = &Bool8x2Type;

    /// f16x2 with Float32x2
    Float16x2_from_Float32x2_arg.name = "val"_c;
    Float16x2_from_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Float16x2_from_Float32x2.documentation = "Convert from f32x2 to f16x2"_c;
    Float16x2_from_Float32x2.name = "f16x2"_c;
    Float16x2_from_Float32x2.compileTime = true;
    Float16x2_from_Float32x2.backendIndex = 362;
    Float16x2_from_Float32x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_Float32x2.parameters = Float16x2_from_Float32x2_args;
    Symbol::Resolved(&Float16x2_from_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float16x2_from_Float32x2)->signature = "f16x2 f16x2(f32x2)"_c;
    Symbol::Resolved(&Float16x2_from_Float32x2)->name = "f16x2(f32x2)"_c;
    Symbol::Resolved(&Float16x2_from_Float32x2)->nameWithVarNames = "f16x2(val : f32x2)"_c;
    Symbol::Resolved(&Float16x2_from_Float32x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Float32
    Float16x2_splat_Float32_arg.name = "val"_c;
    Float16x2_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float16x2_splat_Float32.documentation = "Splat f32 to f16x2"_c;
    Float16x2_splat_Float32.name = "f16x2"_c;
    Float16x2_splat_Float32.compileTime = true;
    Float16x2_splat_Float32.backendIndex = 363;
    Float16x2_splat_Float32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Float32.parameters = Float16x2_splat_Float32_args;
    Symbol::Resolved(&Float16x2_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16x2_splat_Float32)->signature = "f16x2 f16x2(f32)"_c;
    Symbol::Resolved(&Float16x2_splat_Float32)->name = "f16x2(f32)"_c;
    Symbol::Resolved(&Float16x2_splat_Float32)->nameWithVarNames = "f16x2(val : f32)"_c;
    Symbol::Resolved(&Float16x2_splat_Float32)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with UInt32x2
    Float16x2_from_UInt32x2_arg.name = "val"_c;
    Float16x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    Float16x2_from_UInt32x2.documentation = "Convert from u32x2 to f16x2"_c;
    Float16x2_from_UInt32x2.name = "f16x2"_c;
    Float16x2_from_UInt32x2.compileTime = true;
    Float16x2_from_UInt32x2.backendIndex = 364;
    Float16x2_from_UInt32x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_UInt32x2.parameters = Float16x2_from_UInt32x2_args;
    Symbol::Resolved(&Float16x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Float16x2_from_UInt32x2)->signature = "f16x2 f16x2(u32x2)"_c;
    Symbol::Resolved(&Float16x2_from_UInt32x2)->name = "f16x2(u32x2)"_c;
    Symbol::Resolved(&Float16x2_from_UInt32x2)->nameWithVarNames = "f16x2(val : u32x2)"_c;
    Symbol::Resolved(&Float16x2_from_UInt32x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with UInt32
    Float16x2_splat_UInt32_arg.name = "val"_c;
    Float16x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x2_splat_UInt32.documentation = "Splat u32 to f16x2"_c;
    Float16x2_splat_UInt32.name = "f16x2"_c;
    Float16x2_splat_UInt32.compileTime = true;
    Float16x2_splat_UInt32.backendIndex = 365;
    Float16x2_splat_UInt32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_UInt32.parameters = Float16x2_splat_UInt32_args;
    Symbol::Resolved(&Float16x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x2_splat_UInt32)->signature = "f16x2 f16x2(u32)"_c;
    Symbol::Resolved(&Float16x2_splat_UInt32)->name = "f16x2(u32)"_c;
    Symbol::Resolved(&Float16x2_splat_UInt32)->nameWithVarNames = "f16x2(val : u32)"_c;
    Symbol::Resolved(&Float16x2_splat_UInt32)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Int32x2
    Float16x2_from_Int32x2_arg.name = "val"_c;
    Float16x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Float16x2_from_Int32x2.documentation = "Convert from i32x2 to f16x2"_c;
    Float16x2_from_Int32x2.name = "f16x2"_c;
    Float16x2_from_Int32x2.compileTime = true;
    Float16x2_from_Int32x2.backendIndex = 366;
    Float16x2_from_Int32x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_Int32x2.parameters = Float16x2_from_Int32x2_args;
    Symbol::Resolved(&Float16x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Float16x2_from_Int32x2)->signature = "f16x2 f16x2(i32x2)"_c;
    Symbol::Resolved(&Float16x2_from_Int32x2)->name = "f16x2(i32x2)"_c;
    Symbol::Resolved(&Float16x2_from_Int32x2)->nameWithVarNames = "f16x2(val : i32x2)"_c;
    Symbol::Resolved(&Float16x2_from_Int32x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Int32
    Float16x2_splat_Int32_arg.name = "val"_c;
    Float16x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x2_splat_Int32.documentation = "Splat i32 to f16x2"_c;
    Float16x2_splat_Int32.name = "f16x2"_c;
    Float16x2_splat_Int32.compileTime = true;
    Float16x2_splat_Int32.backendIndex = 367;
    Float16x2_splat_Int32.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Int32.parameters = Float16x2_splat_Int32_args;
    Symbol::Resolved(&Float16x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x2_splat_Int32)->signature = "f16x2 f16x2(i32)"_c;
    Symbol::Resolved(&Float16x2_splat_Int32)->name = "f16x2(i32)"_c;
    Symbol::Resolved(&Float16x2_splat_Int32)->nameWithVarNames = "f16x2(val : i32)"_c;
    Symbol::Resolved(&Float16x2_splat_Int32)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Bool8x2
    Float16x2_from_Bool8x2_arg.name = "val"_c;
    Float16x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Float16x2_from_Bool8x2.documentation = "Convert from b8x2 to f16x2"_c;
    Float16x2_from_Bool8x2.name = "f16x2"_c;
    Float16x2_from_Bool8x2.compileTime = true;
    Float16x2_from_Bool8x2.backendIndex = 368;
    Float16x2_from_Bool8x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_Bool8x2.parameters = Float16x2_from_Bool8x2_args;
    Symbol::Resolved(&Float16x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Float16x2_from_Bool8x2)->signature = "f16x2 f16x2(b8x2)"_c;
    Symbol::Resolved(&Float16x2_from_Bool8x2)->name = "f16x2(b8x2)"_c;
    Symbol::Resolved(&Float16x2_from_Bool8x2)->nameWithVarNames = "f16x2(val : b8x2)"_c;
    Symbol::Resolved(&Float16x2_from_Bool8x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Bool8
    Float16x2_splat_Bool8_arg.name = "val"_c;
    Float16x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Float16x2_splat_Bool8.documentation = "Splat b8 to f16x2"_c;
    Float16x2_splat_Bool8.name = "f16x2"_c;
    Float16x2_splat_Bool8.compileTime = true;
    Float16x2_splat_Bool8.backendIndex = 369;
    Float16x2_splat_Bool8.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Bool8.parameters = Float16x2_splat_Bool8_args;
    Symbol::Resolved(&Float16x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Float16x2_splat_Bool8)->signature = "f16x2 f16x2(b8)"_c;
    Symbol::Resolved(&Float16x2_splat_Bool8)->name = "f16x2(b8)"_c;
    Symbol::Resolved(&Float16x2_splat_Bool8)->nameWithVarNames = "f16x2(val : b8)"_c;
    Symbol::Resolved(&Float16x2_splat_Bool8)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Float16x2
    Float16x2_from_Float16x2_arg.name = "val"_c;
    Float16x2_from_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Float16x2_from_Float16x2.documentation = "Convert from f16x2 to f16x2"_c;
    Float16x2_from_Float16x2.name = "f16x2"_c;
    Float16x2_from_Float16x2.compileTime = true;
    Float16x2_from_Float16x2.backendIndex = 370;
    Float16x2_from_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_Float16x2.parameters = Float16x2_from_Float16x2_args;
    Symbol::Resolved(&Float16x2_from_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2_from_Float16x2)->signature = "f16x2 f16x2(f16x2)"_c;
    Symbol::Resolved(&Float16x2_from_Float16x2)->name = "f16x2(f16x2)"_c;
    Symbol::Resolved(&Float16x2_from_Float16x2)->nameWithVarNames = "f16x2(val : f16x2)"_c;
    Symbol::Resolved(&Float16x2_from_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Float16
    Float16x2_splat_Float16_arg.name = "val"_c;
    Float16x2_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x2_splat_Float16.documentation = "Splat f16 to f16x2"_c;
    Float16x2_splat_Float16.name = "f16x2"_c;
    Float16x2_splat_Float16.compileTime = true;
    Float16x2_splat_Float16.backendIndex = 371;
    Float16x2_splat_Float16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Float16.parameters = Float16x2_splat_Float16_args;
    Symbol::Resolved(&Float16x2_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2_splat_Float16)->signature = "f16x2 f16x2(f16)"_c;
    Symbol::Resolved(&Float16x2_splat_Float16)->name = "f16x2(f16)"_c;
    Symbol::Resolved(&Float16x2_splat_Float16)->nameWithVarNames = "f16x2(val : f16)"_c;
    Symbol::Resolved(&Float16x2_splat_Float16)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with UInt16x2
    Float16x2_from_UInt16x2_arg.name = "val"_c;
    Float16x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    Float16x2_from_UInt16x2.documentation = "Convert from u16x2 to f16x2"_c;
    Float16x2_from_UInt16x2.name = "f16x2"_c;
    Float16x2_from_UInt16x2.compileTime = true;
    Float16x2_from_UInt16x2.backendIndex = 372;
    Float16x2_from_UInt16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_UInt16x2.parameters = Float16x2_from_UInt16x2_args;
    Symbol::Resolved(&Float16x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Float16x2_from_UInt16x2)->signature = "f16x2 f16x2(u16x2)"_c;
    Symbol::Resolved(&Float16x2_from_UInt16x2)->name = "f16x2(u16x2)"_c;
    Symbol::Resolved(&Float16x2_from_UInt16x2)->nameWithVarNames = "f16x2(val : u16x2)"_c;
    Symbol::Resolved(&Float16x2_from_UInt16x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with UInt16
    Float16x2_splat_UInt16_arg.name = "val"_c;
    Float16x2_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x2_splat_UInt16.documentation = "Splat u16 to f16x2"_c;
    Float16x2_splat_UInt16.name = "f16x2"_c;
    Float16x2_splat_UInt16.compileTime = true;
    Float16x2_splat_UInt16.backendIndex = 373;
    Float16x2_splat_UInt16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_UInt16.parameters = Float16x2_splat_UInt16_args;
    Symbol::Resolved(&Float16x2_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x2_splat_UInt16)->signature = "f16x2 f16x2(u16)"_c;
    Symbol::Resolved(&Float16x2_splat_UInt16)->name = "f16x2(u16)"_c;
    Symbol::Resolved(&Float16x2_splat_UInt16)->nameWithVarNames = "f16x2(val : u16)"_c;
    Symbol::Resolved(&Float16x2_splat_UInt16)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Int16x2
    Float16x2_from_Int16x2_arg.name = "val"_c;
    Float16x2_from_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Float16x2_from_Int16x2.documentation = "Convert from i16x2 to f16x2"_c;
    Float16x2_from_Int16x2.name = "f16x2"_c;
    Float16x2_from_Int16x2.compileTime = true;
    Float16x2_from_Int16x2.backendIndex = 374;
    Float16x2_from_Int16x2.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_from_Int16x2.parameters = Float16x2_from_Int16x2_args;
    Symbol::Resolved(&Float16x2_from_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Float16x2_from_Int16x2)->signature = "f16x2 f16x2(i16x2)"_c;
    Symbol::Resolved(&Float16x2_from_Int16x2)->name = "f16x2(i16x2)"_c;
    Symbol::Resolved(&Float16x2_from_Int16x2)->nameWithVarNames = "f16x2(val : i16x2)"_c;
    Symbol::Resolved(&Float16x2_from_Int16x2)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Int16
    Float16x2_splat_Int16_arg.name = "val"_c;
    Float16x2_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x2_splat_Int16.documentation = "Splat i16 to f16x2"_c;
    Float16x2_splat_Int16.name = "f16x2"_c;
    Float16x2_splat_Int16.compileTime = true;
    Float16x2_splat_Int16.backendIndex = 375;
    Float16x2_splat_Int16.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_splat_Int16.parameters = Float16x2_splat_Int16_args;
    Symbol::Resolved(&Float16x2_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x2_splat_Int16)->signature = "f16x2 f16x2(i16)"_c;
    Symbol::Resolved(&Float16x2_splat_Int16)->name = "f16x2(i16)"_c;
    Symbol::Resolved(&Float16x2_splat_Int16)->nameWithVarNames = "f16x2(val : i16)"_c;
    Symbol::Resolved(&Float16x2_splat_Int16)->returnTypeSymbol = &Float16x2Type;

    /// f16x2 with Float16, Float16
    Float16x2_ctor0_arg0_Float16.name = "arg0"_c;
    Float16x2_ctor0_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x2_ctor0_arg1_Float16.name = "arg1"_c;
    Float16x2_ctor0_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x2_ctor0.name = "f16x2"_c;
    Float16x2_ctor0.compileTime = true;
    Float16x2_ctor0.backendIndex = 376;
    Float16x2_ctor0.returnType = Type::FullType { Float16x2Type.name };
    Float16x2_ctor0.parameters = Float16x2_ctor0_args;
    Symbol::Resolved(&Float16x2_ctor0_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2_ctor0_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2_ctor0)->signature = "f16x2 f16x2(f16,f16)"_c;
    Symbol::Resolved(&Float16x2_ctor0)->name = "f16x2(f16,f16)"_c;
    Symbol::Resolved(&Float16x2_ctor0)->nameWithVarNames = "f16x2(arg0 : f16, arg1 : f16)"_c;
    Symbol::Resolved(&Float16x2_ctor0)->returnTypeSymbol = &Float16x2Type;

    /// u16x2 with Float32x2
    UInt16x2_from_Float32x2_arg.name = "val"_c;
    UInt16x2_from_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    UInt16x2_from_Float32x2.documentation = "Convert from f32x2 to u16x2"_c;
    UInt16x2_from_Float32x2.name = "u16x2"_c;
    UInt16x2_from_Float32x2.compileTime = true;
    UInt16x2_from_Float32x2.backendIndex = 402;
    UInt16x2_from_Float32x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_Float32x2.parameters = UInt16x2_from_Float32x2_args;
    Symbol::Resolved(&UInt16x2_from_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&UInt16x2_from_Float32x2)->signature = "u16x2 u16x2(f32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Float32x2)->name = "u16x2(f32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Float32x2)->nameWithVarNames = "u16x2(val : f32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Float32x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Float32
    UInt16x2_splat_Float32_arg.name = "val"_c;
    UInt16x2_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt16x2_splat_Float32.documentation = "Splat f32 to u16x2"_c;
    UInt16x2_splat_Float32.name = "u16x2"_c;
    UInt16x2_splat_Float32.compileTime = true;
    UInt16x2_splat_Float32.backendIndex = 403;
    UInt16x2_splat_Float32.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Float32.parameters = UInt16x2_splat_Float32_args;
    Symbol::Resolved(&UInt16x2_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16x2_splat_Float32)->signature = "u16x2 u16x2(f32)"_c;
    Symbol::Resolved(&UInt16x2_splat_Float32)->name = "u16x2(f32)"_c;
    Symbol::Resolved(&UInt16x2_splat_Float32)->nameWithVarNames = "u16x2(val : f32)"_c;
    Symbol::Resolved(&UInt16x2_splat_Float32)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt32x2
    UInt16x2_from_UInt32x2_arg.name = "val"_c;
    UInt16x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    UInt16x2_from_UInt32x2.documentation = "Convert from u32x2 to u16x2"_c;
    UInt16x2_from_UInt32x2.name = "u16x2"_c;
    UInt16x2_from_UInt32x2.compileTime = true;
    UInt16x2_from_UInt32x2.backendIndex = 404;
    UInt16x2_from_UInt32x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_UInt32x2.parameters = UInt16x2_from_UInt32x2_args;
    Symbol::Resolved(&UInt16x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt16x2_from_UInt32x2)->signature = "u16x2 u16x2(u32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_UInt32x2)->name = "u16x2(u32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_UInt32x2)->nameWithVarNames = "u16x2(val : u32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_UInt32x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt32
    UInt16x2_splat_UInt32_arg.name = "val"_c;
    UInt16x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16x2_splat_UInt32.documentation = "Splat u32 to u16x2"_c;
    UInt16x2_splat_UInt32.name = "u16x2"_c;
    UInt16x2_splat_UInt32.compileTime = true;
    UInt16x2_splat_UInt32.backendIndex = 405;
    UInt16x2_splat_UInt32.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_UInt32.parameters = UInt16x2_splat_UInt32_args;
    Symbol::Resolved(&UInt16x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x2_splat_UInt32)->signature = "u16x2 u16x2(u32)"_c;
    Symbol::Resolved(&UInt16x2_splat_UInt32)->name = "u16x2(u32)"_c;
    Symbol::Resolved(&UInt16x2_splat_UInt32)->nameWithVarNames = "u16x2(val : u32)"_c;
    Symbol::Resolved(&UInt16x2_splat_UInt32)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Int32x2
    UInt16x2_from_Int32x2_arg.name = "val"_c;
    UInt16x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    UInt16x2_from_Int32x2.documentation = "Convert from i32x2 to u16x2"_c;
    UInt16x2_from_Int32x2.name = "u16x2"_c;
    UInt16x2_from_Int32x2.compileTime = true;
    UInt16x2_from_Int32x2.backendIndex = 406;
    UInt16x2_from_Int32x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_Int32x2.parameters = UInt16x2_from_Int32x2_args;
    Symbol::Resolved(&UInt16x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&UInt16x2_from_Int32x2)->signature = "u16x2 u16x2(i32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Int32x2)->name = "u16x2(i32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Int32x2)->nameWithVarNames = "u16x2(val : i32x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Int32x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Int32
    UInt16x2_splat_Int32_arg.name = "val"_c;
    UInt16x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16x2_splat_Int32.documentation = "Splat i32 to u16x2"_c;
    UInt16x2_splat_Int32.name = "u16x2"_c;
    UInt16x2_splat_Int32.compileTime = true;
    UInt16x2_splat_Int32.backendIndex = 407;
    UInt16x2_splat_Int32.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Int32.parameters = UInt16x2_splat_Int32_args;
    Symbol::Resolved(&UInt16x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x2_splat_Int32)->signature = "u16x2 u16x2(i32)"_c;
    Symbol::Resolved(&UInt16x2_splat_Int32)->name = "u16x2(i32)"_c;
    Symbol::Resolved(&UInt16x2_splat_Int32)->nameWithVarNames = "u16x2(val : i32)"_c;
    Symbol::Resolved(&UInt16x2_splat_Int32)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Bool8x2
    UInt16x2_from_Bool8x2_arg.name = "val"_c;
    UInt16x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    UInt16x2_from_Bool8x2.documentation = "Convert from b8x2 to u16x2"_c;
    UInt16x2_from_Bool8x2.name = "u16x2"_c;
    UInt16x2_from_Bool8x2.compileTime = true;
    UInt16x2_from_Bool8x2.backendIndex = 408;
    UInt16x2_from_Bool8x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_Bool8x2.parameters = UInt16x2_from_Bool8x2_args;
    Symbol::Resolved(&UInt16x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&UInt16x2_from_Bool8x2)->signature = "u16x2 u16x2(b8x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Bool8x2)->name = "u16x2(b8x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Bool8x2)->nameWithVarNames = "u16x2(val : b8x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Bool8x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Bool8
    UInt16x2_splat_Bool8_arg.name = "val"_c;
    UInt16x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    UInt16x2_splat_Bool8.documentation = "Splat b8 to u16x2"_c;
    UInt16x2_splat_Bool8.name = "u16x2"_c;
    UInt16x2_splat_Bool8.compileTime = true;
    UInt16x2_splat_Bool8.backendIndex = 409;
    UInt16x2_splat_Bool8.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Bool8.parameters = UInt16x2_splat_Bool8_args;
    Symbol::Resolved(&UInt16x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&UInt16x2_splat_Bool8)->signature = "u16x2 u16x2(b8)"_c;
    Symbol::Resolved(&UInt16x2_splat_Bool8)->name = "u16x2(b8)"_c;
    Symbol::Resolved(&UInt16x2_splat_Bool8)->nameWithVarNames = "u16x2(val : b8)"_c;
    Symbol::Resolved(&UInt16x2_splat_Bool8)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Float16x2
    UInt16x2_from_Float16x2_arg.name = "val"_c;
    UInt16x2_from_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    UInt16x2_from_Float16x2.documentation = "Convert from f16x2 to u16x2"_c;
    UInt16x2_from_Float16x2.name = "u16x2"_c;
    UInt16x2_from_Float16x2.compileTime = true;
    UInt16x2_from_Float16x2.backendIndex = 410;
    UInt16x2_from_Float16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_Float16x2.parameters = UInt16x2_from_Float16x2_args;
    Symbol::Resolved(&UInt16x2_from_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&UInt16x2_from_Float16x2)->signature = "u16x2 u16x2(f16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Float16x2)->name = "u16x2(f16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Float16x2)->nameWithVarNames = "u16x2(val : f16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Float16x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Float16
    UInt16x2_splat_Float16_arg.name = "val"_c;
    UInt16x2_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt16x2_splat_Float16.documentation = "Splat f16 to u16x2"_c;
    UInt16x2_splat_Float16.name = "u16x2"_c;
    UInt16x2_splat_Float16.compileTime = true;
    UInt16x2_splat_Float16.backendIndex = 411;
    UInt16x2_splat_Float16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Float16.parameters = UInt16x2_splat_Float16_args;
    Symbol::Resolved(&UInt16x2_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x2_splat_Float16)->signature = "u16x2 u16x2(f16)"_c;
    Symbol::Resolved(&UInt16x2_splat_Float16)->name = "u16x2(f16)"_c;
    Symbol::Resolved(&UInt16x2_splat_Float16)->nameWithVarNames = "u16x2(val : f16)"_c;
    Symbol::Resolved(&UInt16x2_splat_Float16)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt16x2
    UInt16x2_from_UInt16x2_arg.name = "val"_c;
    UInt16x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    UInt16x2_from_UInt16x2.documentation = "Convert from u16x2 to u16x2"_c;
    UInt16x2_from_UInt16x2.name = "u16x2"_c;
    UInt16x2_from_UInt16x2.compileTime = true;
    UInt16x2_from_UInt16x2.backendIndex = 412;
    UInt16x2_from_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_UInt16x2.parameters = UInt16x2_from_UInt16x2_args;
    Symbol::Resolved(&UInt16x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x2_from_UInt16x2)->signature = "u16x2 u16x2(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_UInt16x2)->name = "u16x2(u16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_UInt16x2)->nameWithVarNames = "u16x2(val : u16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt16
    UInt16x2_splat_UInt16_arg.name = "val"_c;
    UInt16x2_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x2_splat_UInt16.documentation = "Splat u16 to u16x2"_c;
    UInt16x2_splat_UInt16.name = "u16x2"_c;
    UInt16x2_splat_UInt16.compileTime = true;
    UInt16x2_splat_UInt16.backendIndex = 413;
    UInt16x2_splat_UInt16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_UInt16.parameters = UInt16x2_splat_UInt16_args;
    Symbol::Resolved(&UInt16x2_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x2_splat_UInt16)->signature = "u16x2 u16x2(u16)"_c;
    Symbol::Resolved(&UInt16x2_splat_UInt16)->name = "u16x2(u16)"_c;
    Symbol::Resolved(&UInt16x2_splat_UInt16)->nameWithVarNames = "u16x2(val : u16)"_c;
    Symbol::Resolved(&UInt16x2_splat_UInt16)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Int16x2
    UInt16x2_from_Int16x2_arg.name = "val"_c;
    UInt16x2_from_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    UInt16x2_from_Int16x2.documentation = "Convert from i16x2 to u16x2"_c;
    UInt16x2_from_Int16x2.name = "u16x2"_c;
    UInt16x2_from_Int16x2.compileTime = true;
    UInt16x2_from_Int16x2.backendIndex = 414;
    UInt16x2_from_Int16x2.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_from_Int16x2.parameters = UInt16x2_from_Int16x2_args;
    Symbol::Resolved(&UInt16x2_from_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&UInt16x2_from_Int16x2)->signature = "u16x2 u16x2(i16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Int16x2)->name = "u16x2(i16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Int16x2)->nameWithVarNames = "u16x2(val : i16x2)"_c;
    Symbol::Resolved(&UInt16x2_from_Int16x2)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with Int16
    UInt16x2_splat_Int16_arg.name = "val"_c;
    UInt16x2_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x2_splat_Int16.documentation = "Splat i16 to u16x2"_c;
    UInt16x2_splat_Int16.name = "u16x2"_c;
    UInt16x2_splat_Int16.compileTime = true;
    UInt16x2_splat_Int16.backendIndex = 415;
    UInt16x2_splat_Int16.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_splat_Int16.parameters = UInt16x2_splat_Int16_args;
    Symbol::Resolved(&UInt16x2_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x2_splat_Int16)->signature = "u16x2 u16x2(i16)"_c;
    Symbol::Resolved(&UInt16x2_splat_Int16)->name = "u16x2(i16)"_c;
    Symbol::Resolved(&UInt16x2_splat_Int16)->nameWithVarNames = "u16x2(val : i16)"_c;
    Symbol::Resolved(&UInt16x2_splat_Int16)->returnTypeSymbol = &UInt16x2Type;

    /// u16x2 with UInt16, UInt16
    UInt16x2_ctor0_arg0_UInt16.name = "arg0"_c;
    UInt16x2_ctor0_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x2_ctor0_arg1_UInt16.name = "arg1"_c;
    UInt16x2_ctor0_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x2_ctor0.name = "u16x2"_c;
    UInt16x2_ctor0.compileTime = true;
    UInt16x2_ctor0.backendIndex = 416;
    UInt16x2_ctor0.returnType = Type::FullType { UInt16x2Type.name };
    UInt16x2_ctor0.parameters = UInt16x2_ctor0_args;
    Symbol::Resolved(&UInt16x2_ctor0_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x2_ctor0_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x2_ctor0)->signature = "u16x2 u16x2(u16,u16)"_c;
    Symbol::Resolved(&UInt16x2_ctor0)->name = "u16x2(u16,u16)"_c;
    Symbol::Resolved(&UInt16x2_ctor0)->nameWithVarNames = "u16x2(arg0 : u16, arg1 : u16)"_c;
    Symbol::Resolved(&UInt16x2_ctor0)->returnTypeSymbol = &UInt16x2Type;

    /// i16x2 with Float32x2
    Int16x2_from_Float32x2_arg.name = "val"_c;
    Int16x2_from_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    Int16x2_from_Float32x2.documentation = "Convert from f32x2 to i16x2"_c;
    Int16x2_from_Float32x2.name = "i16x2"_c;
    Int16x2_from_Float32x2.compileTime = true;
    Int16x2_from_Float32x2.backendIndex = 449;
    Int16x2_from_Float32x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_from_Float32x2.parameters = Int16x2_from_Float32x2_args;
    Symbol::Resolved(&Int16x2_from_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Int16x2_from_Float32x2)->signature = "i16x2 i16x2(f32x2)"_c;
    Symbol::Resolved(&Int16x2_from_Float32x2)->name = "i16x2(f32x2)"_c;
    Symbol::Resolved(&Int16x2_from_Float32x2)->nameWithVarNames = "i16x2(val : f32x2)"_c;
    Symbol::Resolved(&Int16x2_from_Float32x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Float32
    Int16x2_splat_Float32_arg.name = "val"_c;
    Int16x2_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int16x2_splat_Float32.documentation = "Splat f32 to i16x2"_c;
    Int16x2_splat_Float32.name = "i16x2"_c;
    Int16x2_splat_Float32.compileTime = true;
    Int16x2_splat_Float32.backendIndex = 450;
    Int16x2_splat_Float32.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_Float32.parameters = Int16x2_splat_Float32_args;
    Symbol::Resolved(&Int16x2_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16x2_splat_Float32)->signature = "i16x2 i16x2(f32)"_c;
    Symbol::Resolved(&Int16x2_splat_Float32)->name = "i16x2(f32)"_c;
    Symbol::Resolved(&Int16x2_splat_Float32)->nameWithVarNames = "i16x2(val : f32)"_c;
    Symbol::Resolved(&Int16x2_splat_Float32)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with UInt32x2
    Int16x2_from_UInt32x2_arg.name = "val"_c;
    Int16x2_from_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    Int16x2_from_UInt32x2.documentation = "Convert from u32x2 to i16x2"_c;
    Int16x2_from_UInt32x2.name = "i16x2"_c;
    Int16x2_from_UInt32x2.compileTime = true;
    Int16x2_from_UInt32x2.backendIndex = 451;
    Int16x2_from_UInt32x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_from_UInt32x2.parameters = Int16x2_from_UInt32x2_args;
    Symbol::Resolved(&Int16x2_from_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&Int16x2_from_UInt32x2)->signature = "i16x2 i16x2(u32x2)"_c;
    Symbol::Resolved(&Int16x2_from_UInt32x2)->name = "i16x2(u32x2)"_c;
    Symbol::Resolved(&Int16x2_from_UInt32x2)->nameWithVarNames = "i16x2(val : u32x2)"_c;
    Symbol::Resolved(&Int16x2_from_UInt32x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with UInt32
    Int16x2_splat_UInt32_arg.name = "val"_c;
    Int16x2_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16x2_splat_UInt32.documentation = "Splat u32 to i16x2"_c;
    Int16x2_splat_UInt32.name = "i16x2"_c;
    Int16x2_splat_UInt32.compileTime = true;
    Int16x2_splat_UInt32.backendIndex = 452;
    Int16x2_splat_UInt32.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_UInt32.parameters = Int16x2_splat_UInt32_args;
    Symbol::Resolved(&Int16x2_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x2_splat_UInt32)->signature = "i16x2 i16x2(u32)"_c;
    Symbol::Resolved(&Int16x2_splat_UInt32)->name = "i16x2(u32)"_c;
    Symbol::Resolved(&Int16x2_splat_UInt32)->nameWithVarNames = "i16x2(val : u32)"_c;
    Symbol::Resolved(&Int16x2_splat_UInt32)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Int32x2
    Int16x2_from_Int32x2_arg.name = "val"_c;
    Int16x2_from_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    Int16x2_from_Int32x2.documentation = "Convert from i32x2 to i16x2"_c;
    Int16x2_from_Int32x2.name = "i16x2"_c;
    Int16x2_from_Int32x2.compileTime = true;
    Int16x2_from_Int32x2.backendIndex = 453;
    Int16x2_from_Int32x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_from_Int32x2.parameters = Int16x2_from_Int32x2_args;
    Symbol::Resolved(&Int16x2_from_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int16x2_from_Int32x2)->signature = "i16x2 i16x2(i32x2)"_c;
    Symbol::Resolved(&Int16x2_from_Int32x2)->name = "i16x2(i32x2)"_c;
    Symbol::Resolved(&Int16x2_from_Int32x2)->nameWithVarNames = "i16x2(val : i32x2)"_c;
    Symbol::Resolved(&Int16x2_from_Int32x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Int32
    Int16x2_splat_Int32_arg.name = "val"_c;
    Int16x2_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16x2_splat_Int32.documentation = "Splat i32 to i16x2"_c;
    Int16x2_splat_Int32.name = "i16x2"_c;
    Int16x2_splat_Int32.compileTime = true;
    Int16x2_splat_Int32.backendIndex = 454;
    Int16x2_splat_Int32.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_Int32.parameters = Int16x2_splat_Int32_args;
    Symbol::Resolved(&Int16x2_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x2_splat_Int32)->signature = "i16x2 i16x2(i32)"_c;
    Symbol::Resolved(&Int16x2_splat_Int32)->name = "i16x2(i32)"_c;
    Symbol::Resolved(&Int16x2_splat_Int32)->nameWithVarNames = "i16x2(val : i32)"_c;
    Symbol::Resolved(&Int16x2_splat_Int32)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Bool8x2
    Int16x2_from_Bool8x2_arg.name = "val"_c;
    Int16x2_from_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    Int16x2_from_Bool8x2.documentation = "Convert from b8x2 to i16x2"_c;
    Int16x2_from_Bool8x2.name = "i16x2"_c;
    Int16x2_from_Bool8x2.compileTime = true;
    Int16x2_from_Bool8x2.backendIndex = 455;
    Int16x2_from_Bool8x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_from_Bool8x2.parameters = Int16x2_from_Bool8x2_args;
    Symbol::Resolved(&Int16x2_from_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Int16x2_from_Bool8x2)->signature = "i16x2 i16x2(b8x2)"_c;
    Symbol::Resolved(&Int16x2_from_Bool8x2)->name = "i16x2(b8x2)"_c;
    Symbol::Resolved(&Int16x2_from_Bool8x2)->nameWithVarNames = "i16x2(val : b8x2)"_c;
    Symbol::Resolved(&Int16x2_from_Bool8x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Bool8
    Int16x2_splat_Bool8_arg.name = "val"_c;
    Int16x2_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Int16x2_splat_Bool8.documentation = "Splat b8 to i16x2"_c;
    Int16x2_splat_Bool8.name = "i16x2"_c;
    Int16x2_splat_Bool8.compileTime = true;
    Int16x2_splat_Bool8.backendIndex = 456;
    Int16x2_splat_Bool8.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_Bool8.parameters = Int16x2_splat_Bool8_args;
    Symbol::Resolved(&Int16x2_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Int16x2_splat_Bool8)->signature = "i16x2 i16x2(b8)"_c;
    Symbol::Resolved(&Int16x2_splat_Bool8)->name = "i16x2(b8)"_c;
    Symbol::Resolved(&Int16x2_splat_Bool8)->nameWithVarNames = "i16x2(val : b8)"_c;
    Symbol::Resolved(&Int16x2_splat_Bool8)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Float16x2
    Int16x2_from_Float16x2_arg.name = "val"_c;
    Int16x2_from_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    Int16x2_from_Float16x2.documentation = "Convert from f16x2 to i16x2"_c;
    Int16x2_from_Float16x2.name = "i16x2"_c;
    Int16x2_from_Float16x2.compileTime = true;
    Int16x2_from_Float16x2.backendIndex = 457;
    Int16x2_from_Float16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_from_Float16x2.parameters = Int16x2_from_Float16x2_args;
    Symbol::Resolved(&Int16x2_from_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Int16x2_from_Float16x2)->signature = "i16x2 i16x2(f16x2)"_c;
    Symbol::Resolved(&Int16x2_from_Float16x2)->name = "i16x2(f16x2)"_c;
    Symbol::Resolved(&Int16x2_from_Float16x2)->nameWithVarNames = "i16x2(val : f16x2)"_c;
    Symbol::Resolved(&Int16x2_from_Float16x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Float16
    Int16x2_splat_Float16_arg.name = "val"_c;
    Int16x2_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int16x2_splat_Float16.documentation = "Splat f16 to i16x2"_c;
    Int16x2_splat_Float16.name = "i16x2"_c;
    Int16x2_splat_Float16.compileTime = true;
    Int16x2_splat_Float16.backendIndex = 458;
    Int16x2_splat_Float16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_Float16.parameters = Int16x2_splat_Float16_args;
    Symbol::Resolved(&Int16x2_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x2_splat_Float16)->signature = "i16x2 i16x2(f16)"_c;
    Symbol::Resolved(&Int16x2_splat_Float16)->name = "i16x2(f16)"_c;
    Symbol::Resolved(&Int16x2_splat_Float16)->nameWithVarNames = "i16x2(val : f16)"_c;
    Symbol::Resolved(&Int16x2_splat_Float16)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with UInt16x2
    Int16x2_from_UInt16x2_arg.name = "val"_c;
    Int16x2_from_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    Int16x2_from_UInt16x2.documentation = "Convert from u16x2 to i16x2"_c;
    Int16x2_from_UInt16x2.name = "i16x2"_c;
    Int16x2_from_UInt16x2.compileTime = true;
    Int16x2_from_UInt16x2.backendIndex = 459;
    Int16x2_from_UInt16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_from_UInt16x2.parameters = Int16x2_from_UInt16x2_args;
    Symbol::Resolved(&Int16x2_from_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&Int16x2_from_UInt16x2)->signature = "i16x2 i16x2(u16x2)"_c;
    Symbol::Resolved(&Int16x2_from_UInt16x2)->name = "i16x2(u16x2)"_c;
    Symbol::Resolved(&Int16x2_from_UInt16x2)->nameWithVarNames = "i16x2(val : u16x2)"_c;
    Symbol::Resolved(&Int16x2_from_UInt16x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with UInt16
    Int16x2_splat_UInt16_arg.name = "val"_c;
    Int16x2_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x2_splat_UInt16.documentation = "Splat u16 to i16x2"_c;
    Int16x2_splat_UInt16.name = "i16x2"_c;
    Int16x2_splat_UInt16.compileTime = true;
    Int16x2_splat_UInt16.backendIndex = 460;
    Int16x2_splat_UInt16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_UInt16.parameters = Int16x2_splat_UInt16_args;
    Symbol::Resolved(&Int16x2_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x2_splat_UInt16)->signature = "i16x2 i16x2(u16)"_c;
    Symbol::Resolved(&Int16x2_splat_UInt16)->name = "i16x2(u16)"_c;
    Symbol::Resolved(&Int16x2_splat_UInt16)->nameWithVarNames = "i16x2(val : u16)"_c;
    Symbol::Resolved(&Int16x2_splat_UInt16)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Int16x2
    Int16x2_from_Int16x2_arg.name = "val"_c;
    Int16x2_from_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    Int16x2_from_Int16x2.documentation = "Convert from i16x2 to i16x2"_c;
    Int16x2_from_Int16x2.name = "i16x2"_c;
    Int16x2_from_Int16x2.compileTime = true;
    Int16x2_from_Int16x2.backendIndex = 461;
    Int16x2_from_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_from_Int16x2.parameters = Int16x2_from_Int16x2_args;
    Symbol::Resolved(&Int16x2_from_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x2_from_Int16x2)->signature = "i16x2 i16x2(i16x2)"_c;
    Symbol::Resolved(&Int16x2_from_Int16x2)->name = "i16x2(i16x2)"_c;
    Symbol::Resolved(&Int16x2_from_Int16x2)->nameWithVarNames = "i16x2(val : i16x2)"_c;
    Symbol::Resolved(&Int16x2_from_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Int16
    Int16x2_splat_Int16_arg.name = "val"_c;
    Int16x2_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x2_splat_Int16.documentation = "Splat i16 to i16x2"_c;
    Int16x2_splat_Int16.name = "i16x2"_c;
    Int16x2_splat_Int16.compileTime = true;
    Int16x2_splat_Int16.backendIndex = 462;
    Int16x2_splat_Int16.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_splat_Int16.parameters = Int16x2_splat_Int16_args;
    Symbol::Resolved(&Int16x2_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x2_splat_Int16)->signature = "i16x2 i16x2(i16)"_c;
    Symbol::Resolved(&Int16x2_splat_Int16)->name = "i16x2(i16)"_c;
    Symbol::Resolved(&Int16x2_splat_Int16)->nameWithVarNames = "i16x2(val : i16)"_c;
    Symbol::Resolved(&Int16x2_splat_Int16)->returnTypeSymbol = &Int16x2Type;

    /// i16x2 with Int16, Int16
    Int16x2_ctor0_arg0_Int16.name = "arg0"_c;
    Int16x2_ctor0_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x2_ctor0_arg1_Int16.name = "arg1"_c;
    Int16x2_ctor0_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x2_ctor0.name = "i16x2"_c;
    Int16x2_ctor0.compileTime = true;
    Int16x2_ctor0.backendIndex = 463;
    Int16x2_ctor0.returnType = Type::FullType { Int16x2Type.name };
    Int16x2_ctor0.parameters = Int16x2_ctor0_args;
    Symbol::Resolved(&Int16x2_ctor0_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x2_ctor0_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x2_ctor0)->signature = "i16x2 i16x2(i16,i16)"_c;
    Symbol::Resolved(&Int16x2_ctor0)->name = "i16x2(i16,i16)"_c;
    Symbol::Resolved(&Int16x2_ctor0)->nameWithVarNames = "i16x2(arg0 : i16, arg1 : i16)"_c;
    Symbol::Resolved(&Int16x2_ctor0)->returnTypeSymbol = &Int16x2Type;

    /// f32x3 with Float32x3
    Float32x3_from_Float32x3_arg.name = "val"_c;
    Float32x3_from_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float32x3_from_Float32x3.documentation = "Convert from f32x3 to f32x3"_c;
    Float32x3_from_Float32x3.name = "f32x3"_c;
    Float32x3_from_Float32x3.compileTime = true;
    Float32x3_from_Float32x3.backendIndex = 496;
    Float32x3_from_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_from_Float32x3.parameters = Float32x3_from_Float32x3_args;
    Symbol::Resolved(&Float32x3_from_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3_from_Float32x3)->signature = "f32x3 f32x3(f32x3)"_c;
    Symbol::Resolved(&Float32x3_from_Float32x3)->name = "f32x3(f32x3)"_c;
    Symbol::Resolved(&Float32x3_from_Float32x3)->nameWithVarNames = "f32x3(val : f32x3)"_c;
    Symbol::Resolved(&Float32x3_from_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Float32
    Float32x3_splat_Float32_arg.name = "val"_c;
    Float32x3_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x3_splat_Float32.documentation = "Splat f32 to f32x3"_c;
    Float32x3_splat_Float32.name = "f32x3"_c;
    Float32x3_splat_Float32.compileTime = true;
    Float32x3_splat_Float32.backendIndex = 497;
    Float32x3_splat_Float32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_Float32.parameters = Float32x3_splat_Float32_args;
    Symbol::Resolved(&Float32x3_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_splat_Float32)->signature = "f32x3 f32x3(f32)"_c;
    Symbol::Resolved(&Float32x3_splat_Float32)->name = "f32x3(f32)"_c;
    Symbol::Resolved(&Float32x3_splat_Float32)->nameWithVarNames = "f32x3(val : f32)"_c;
    Symbol::Resolved(&Float32x3_splat_Float32)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with UInt32x3
    Float32x3_from_UInt32x3_arg.name = "val"_c;
    Float32x3_from_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    Float32x3_from_UInt32x3.documentation = "Convert from u32x3 to f32x3"_c;
    Float32x3_from_UInt32x3.name = "f32x3"_c;
    Float32x3_from_UInt32x3.compileTime = true;
    Float32x3_from_UInt32x3.backendIndex = 498;
    Float32x3_from_UInt32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_from_UInt32x3.parameters = Float32x3_from_UInt32x3_args;
    Symbol::Resolved(&Float32x3_from_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&Float32x3_from_UInt32x3)->signature = "f32x3 f32x3(u32x3)"_c;
    Symbol::Resolved(&Float32x3_from_UInt32x3)->name = "f32x3(u32x3)"_c;
    Symbol::Resolved(&Float32x3_from_UInt32x3)->nameWithVarNames = "f32x3(val : u32x3)"_c;
    Symbol::Resolved(&Float32x3_from_UInt32x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with UInt32
    Float32x3_splat_UInt32_arg.name = "val"_c;
    Float32x3_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x3_splat_UInt32.documentation = "Splat u32 to f32x3"_c;
    Float32x3_splat_UInt32.name = "f32x3"_c;
    Float32x3_splat_UInt32.compileTime = true;
    Float32x3_splat_UInt32.backendIndex = 499;
    Float32x3_splat_UInt32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_UInt32.parameters = Float32x3_splat_UInt32_args;
    Symbol::Resolved(&Float32x3_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x3_splat_UInt32)->signature = "f32x3 f32x3(u32)"_c;
    Symbol::Resolved(&Float32x3_splat_UInt32)->name = "f32x3(u32)"_c;
    Symbol::Resolved(&Float32x3_splat_UInt32)->nameWithVarNames = "f32x3(val : u32)"_c;
    Symbol::Resolved(&Float32x3_splat_UInt32)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Int32x3
    Float32x3_from_Int32x3_arg.name = "val"_c;
    Float32x3_from_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Float32x3_from_Int32x3.documentation = "Convert from i32x3 to f32x3"_c;
    Float32x3_from_Int32x3.name = "f32x3"_c;
    Float32x3_from_Int32x3.compileTime = true;
    Float32x3_from_Int32x3.backendIndex = 500;
    Float32x3_from_Int32x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_from_Int32x3.parameters = Float32x3_from_Int32x3_args;
    Symbol::Resolved(&Float32x3_from_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Float32x3_from_Int32x3)->signature = "f32x3 f32x3(i32x3)"_c;
    Symbol::Resolved(&Float32x3_from_Int32x3)->name = "f32x3(i32x3)"_c;
    Symbol::Resolved(&Float32x3_from_Int32x3)->nameWithVarNames = "f32x3(val : i32x3)"_c;
    Symbol::Resolved(&Float32x3_from_Int32x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Int32
    Float32x3_splat_Int32_arg.name = "val"_c;
    Float32x3_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x3_splat_Int32.documentation = "Splat i32 to f32x3"_c;
    Float32x3_splat_Int32.name = "f32x3"_c;
    Float32x3_splat_Int32.compileTime = true;
    Float32x3_splat_Int32.backendIndex = 501;
    Float32x3_splat_Int32.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_Int32.parameters = Float32x3_splat_Int32_args;
    Symbol::Resolved(&Float32x3_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x3_splat_Int32)->signature = "f32x3 f32x3(i32)"_c;
    Symbol::Resolved(&Float32x3_splat_Int32)->name = "f32x3(i32)"_c;
    Symbol::Resolved(&Float32x3_splat_Int32)->nameWithVarNames = "f32x3(val : i32)"_c;
    Symbol::Resolved(&Float32x3_splat_Int32)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Bool8x3
    Float32x3_from_Bool8x3_arg.name = "val"_c;
    Float32x3_from_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Float32x3_from_Bool8x3.documentation = "Convert from b8x3 to f32x3"_c;
    Float32x3_from_Bool8x3.name = "f32x3"_c;
    Float32x3_from_Bool8x3.compileTime = true;
    Float32x3_from_Bool8x3.backendIndex = 502;
    Float32x3_from_Bool8x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_from_Bool8x3.parameters = Float32x3_from_Bool8x3_args;
    Symbol::Resolved(&Float32x3_from_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Float32x3_from_Bool8x3)->signature = "f32x3 f32x3(b8x3)"_c;
    Symbol::Resolved(&Float32x3_from_Bool8x3)->name = "f32x3(b8x3)"_c;
    Symbol::Resolved(&Float32x3_from_Bool8x3)->nameWithVarNames = "f32x3(val : b8x3)"_c;
    Symbol::Resolved(&Float32x3_from_Bool8x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Bool8
    Float32x3_splat_Bool8_arg.name = "val"_c;
    Float32x3_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Float32x3_splat_Bool8.documentation = "Splat b8 to f32x3"_c;
    Float32x3_splat_Bool8.name = "f32x3"_c;
    Float32x3_splat_Bool8.compileTime = true;
    Float32x3_splat_Bool8.backendIndex = 503;
    Float32x3_splat_Bool8.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_Bool8.parameters = Float32x3_splat_Bool8_args;
    Symbol::Resolved(&Float32x3_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Float32x3_splat_Bool8)->signature = "f32x3 f32x3(b8)"_c;
    Symbol::Resolved(&Float32x3_splat_Bool8)->name = "f32x3(b8)"_c;
    Symbol::Resolved(&Float32x3_splat_Bool8)->nameWithVarNames = "f32x3(val : b8)"_c;
    Symbol::Resolved(&Float32x3_splat_Bool8)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Float16x3
    Float32x3_from_Float16x3_arg.name = "val"_c;
    Float32x3_from_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float32x3_from_Float16x3.documentation = "Convert from f16x3 to f32x3"_c;
    Float32x3_from_Float16x3.name = "f32x3"_c;
    Float32x3_from_Float16x3.compileTime = true;
    Float32x3_from_Float16x3.backendIndex = 504;
    Float32x3_from_Float16x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_from_Float16x3.parameters = Float32x3_from_Float16x3_args;
    Symbol::Resolved(&Float32x3_from_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float32x3_from_Float16x3)->signature = "f32x3 f32x3(f16x3)"_c;
    Symbol::Resolved(&Float32x3_from_Float16x3)->name = "f32x3(f16x3)"_c;
    Symbol::Resolved(&Float32x3_from_Float16x3)->nameWithVarNames = "f32x3(val : f16x3)"_c;
    Symbol::Resolved(&Float32x3_from_Float16x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Float16
    Float32x3_splat_Float16_arg.name = "val"_c;
    Float32x3_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float32x3_splat_Float16.documentation = "Splat f16 to f32x3"_c;
    Float32x3_splat_Float16.name = "f32x3"_c;
    Float32x3_splat_Float16.compileTime = true;
    Float32x3_splat_Float16.backendIndex = 505;
    Float32x3_splat_Float16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_Float16.parameters = Float32x3_splat_Float16_args;
    Symbol::Resolved(&Float32x3_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32x3_splat_Float16)->signature = "f32x3 f32x3(f16)"_c;
    Symbol::Resolved(&Float32x3_splat_Float16)->name = "f32x3(f16)"_c;
    Symbol::Resolved(&Float32x3_splat_Float16)->nameWithVarNames = "f32x3(val : f16)"_c;
    Symbol::Resolved(&Float32x3_splat_Float16)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with UInt16x3
    Float32x3_from_UInt16x3_arg.name = "val"_c;
    Float32x3_from_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    Float32x3_from_UInt16x3.documentation = "Convert from u16x3 to f32x3"_c;
    Float32x3_from_UInt16x3.name = "f32x3"_c;
    Float32x3_from_UInt16x3.compileTime = true;
    Float32x3_from_UInt16x3.backendIndex = 506;
    Float32x3_from_UInt16x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_from_UInt16x3.parameters = Float32x3_from_UInt16x3_args;
    Symbol::Resolved(&Float32x3_from_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&Float32x3_from_UInt16x3)->signature = "f32x3 f32x3(u16x3)"_c;
    Symbol::Resolved(&Float32x3_from_UInt16x3)->name = "f32x3(u16x3)"_c;
    Symbol::Resolved(&Float32x3_from_UInt16x3)->nameWithVarNames = "f32x3(val : u16x3)"_c;
    Symbol::Resolved(&Float32x3_from_UInt16x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with UInt16
    Float32x3_splat_UInt16_arg.name = "val"_c;
    Float32x3_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x3_splat_UInt16.documentation = "Splat u16 to f32x3"_c;
    Float32x3_splat_UInt16.name = "f32x3"_c;
    Float32x3_splat_UInt16.compileTime = true;
    Float32x3_splat_UInt16.backendIndex = 507;
    Float32x3_splat_UInt16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_UInt16.parameters = Float32x3_splat_UInt16_args;
    Symbol::Resolved(&Float32x3_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x3_splat_UInt16)->signature = "f32x3 f32x3(u16)"_c;
    Symbol::Resolved(&Float32x3_splat_UInt16)->name = "f32x3(u16)"_c;
    Symbol::Resolved(&Float32x3_splat_UInt16)->nameWithVarNames = "f32x3(val : u16)"_c;
    Symbol::Resolved(&Float32x3_splat_UInt16)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Int16x3
    Float32x3_from_Int16x3_arg.name = "val"_c;
    Float32x3_from_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Float32x3_from_Int16x3.documentation = "Convert from i16x3 to f32x3"_c;
    Float32x3_from_Int16x3.name = "f32x3"_c;
    Float32x3_from_Int16x3.compileTime = true;
    Float32x3_from_Int16x3.backendIndex = 508;
    Float32x3_from_Int16x3.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_from_Int16x3.parameters = Float32x3_from_Int16x3_args;
    Symbol::Resolved(&Float32x3_from_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Float32x3_from_Int16x3)->signature = "f32x3 f32x3(i16x3)"_c;
    Symbol::Resolved(&Float32x3_from_Int16x3)->name = "f32x3(i16x3)"_c;
    Symbol::Resolved(&Float32x3_from_Int16x3)->nameWithVarNames = "f32x3(val : i16x3)"_c;
    Symbol::Resolved(&Float32x3_from_Int16x3)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Int16
    Float32x3_splat_Int16_arg.name = "val"_c;
    Float32x3_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x3_splat_Int16.documentation = "Splat i16 to f32x3"_c;
    Float32x3_splat_Int16.name = "f32x3"_c;
    Float32x3_splat_Int16.compileTime = true;
    Float32x3_splat_Int16.backendIndex = 509;
    Float32x3_splat_Int16.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_splat_Int16.parameters = Float32x3_splat_Int16_args;
    Symbol::Resolved(&Float32x3_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x3_splat_Int16)->signature = "f32x3 f32x3(i16)"_c;
    Symbol::Resolved(&Float32x3_splat_Int16)->name = "f32x3(i16)"_c;
    Symbol::Resolved(&Float32x3_splat_Int16)->nameWithVarNames = "f32x3(val : i16)"_c;
    Symbol::Resolved(&Float32x3_splat_Int16)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Float32, Float32, Float32
    Float32x3_ctor0_arg0_Float32.name = "arg0"_c;
    Float32x3_ctor0_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x3_ctor0_arg1_Float32.name = "arg1"_c;
    Float32x3_ctor0_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x3_ctor0_arg2_Float32.name = "arg2"_c;
    Float32x3_ctor0_arg2_Float32.type = Type::FullType{ Float32Type.name };
    Float32x3_ctor0.name = "f32x3"_c;
    Float32x3_ctor0.compileTime = true;
    Float32x3_ctor0.backendIndex = 510;
    Float32x3_ctor0.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_ctor0.parameters = Float32x3_ctor0_args;
    Symbol::Resolved(&Float32x3_ctor0_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_ctor0_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_ctor0_arg2_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_ctor0)->signature = "f32x3 f32x3(f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x3_ctor0)->name = "f32x3(f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x3_ctor0)->nameWithVarNames = "f32x3(arg0 : f32, arg1 : f32, arg2 : f32)"_c;
    Symbol::Resolved(&Float32x3_ctor0)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Float32x2, Float32
    Float32x3_ctor1_arg0_Float32x2.name = "arg0"_c;
    Float32x3_ctor1_arg0_Float32x2.type = Type::FullType{ Float32x2Type.name };
    Float32x3_ctor1_arg1_Float32.name = "arg1"_c;
    Float32x3_ctor1_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x3_ctor1.name = "f32x3"_c;
    Float32x3_ctor1.compileTime = true;
    Float32x3_ctor1.backendIndex = 511;
    Float32x3_ctor1.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_ctor1.parameters = Float32x3_ctor1_args;
    Symbol::Resolved(&Float32x3_ctor1_arg0_Float32x2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3_ctor1_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_ctor1)->signature = "f32x3 f32x3(f32x2,f32)"_c;
    Symbol::Resolved(&Float32x3_ctor1)->name = "f32x3(f32x2,f32)"_c;
    Symbol::Resolved(&Float32x3_ctor1)->nameWithVarNames = "f32x3(arg0 : f32x2, arg1 : f32)"_c;
    Symbol::Resolved(&Float32x3_ctor1)->returnTypeSymbol = &Float32x3Type;

    /// f32x3 with Float32, Float32x2
    Float32x3_ctor2_arg0_Float32.name = "arg0"_c;
    Float32x3_ctor2_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x3_ctor2_arg1_Float32x2.name = "arg1"_c;
    Float32x3_ctor2_arg1_Float32x2.type = Type::FullType{ Float32x2Type.name };
    Float32x3_ctor2.name = "f32x3"_c;
    Float32x3_ctor2.compileTime = true;
    Float32x3_ctor2.backendIndex = 512;
    Float32x3_ctor2.returnType = Type::FullType { Float32x3Type.name };
    Float32x3_ctor2.parameters = Float32x3_ctor2_args;
    Symbol::Resolved(&Float32x3_ctor2_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3_ctor2_arg1_Float32x2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3_ctor2)->signature = "f32x3 f32x3(f32,f32x2)"_c;
    Symbol::Resolved(&Float32x3_ctor2)->name = "f32x3(f32,f32x2)"_c;
    Symbol::Resolved(&Float32x3_ctor2)->nameWithVarNames = "f32x3(arg0 : f32, arg1 : f32x2)"_c;
    Symbol::Resolved(&Float32x3_ctor2)->returnTypeSymbol = &Float32x3Type;

    /// u32x3 with Float32x3
    UInt32x3_from_Float32x3_arg.name = "val"_c;
    UInt32x3_from_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    UInt32x3_from_Float32x3.documentation = "Convert from f32x3 to u32x3"_c;
    UInt32x3_from_Float32x3.name = "u32x3"_c;
    UInt32x3_from_Float32x3.compileTime = true;
    UInt32x3_from_Float32x3.backendIndex = 538;
    UInt32x3_from_Float32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_from_Float32x3.parameters = UInt32x3_from_Float32x3_args;
    Symbol::Resolved(&UInt32x3_from_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&UInt32x3_from_Float32x3)->signature = "u32x3 u32x3(f32x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Float32x3)->name = "u32x3(f32x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Float32x3)->nameWithVarNames = "u32x3(val : f32x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Float32x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Float32
    UInt32x3_splat_Float32_arg.name = "val"_c;
    UInt32x3_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt32x3_splat_Float32.documentation = "Splat f32 to u32x3"_c;
    UInt32x3_splat_Float32.name = "u32x3"_c;
    UInt32x3_splat_Float32.compileTime = true;
    UInt32x3_splat_Float32.backendIndex = 539;
    UInt32x3_splat_Float32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_Float32.parameters = UInt32x3_splat_Float32_args;
    Symbol::Resolved(&UInt32x3_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x3_splat_Float32)->signature = "u32x3 u32x3(f32)"_c;
    Symbol::Resolved(&UInt32x3_splat_Float32)->name = "u32x3(f32)"_c;
    Symbol::Resolved(&UInt32x3_splat_Float32)->nameWithVarNames = "u32x3(val : f32)"_c;
    Symbol::Resolved(&UInt32x3_splat_Float32)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt32x3
    UInt32x3_from_UInt32x3_arg.name = "val"_c;
    UInt32x3_from_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt32x3_from_UInt32x3.documentation = "Convert from u32x3 to u32x3"_c;
    UInt32x3_from_UInt32x3.name = "u32x3"_c;
    UInt32x3_from_UInt32x3.compileTime = true;
    UInt32x3_from_UInt32x3.backendIndex = 540;
    UInt32x3_from_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_from_UInt32x3.parameters = UInt32x3_from_UInt32x3_args;
    Symbol::Resolved(&UInt32x3_from_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x3_from_UInt32x3)->signature = "u32x3 u32x3(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_from_UInt32x3)->name = "u32x3(u32x3)"_c;
    Symbol::Resolved(&UInt32x3_from_UInt32x3)->nameWithVarNames = "u32x3(val : u32x3)"_c;
    Symbol::Resolved(&UInt32x3_from_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt32
    UInt32x3_splat_UInt32_arg.name = "val"_c;
    UInt32x3_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x3_splat_UInt32.documentation = "Splat u32 to u32x3"_c;
    UInt32x3_splat_UInt32.name = "u32x3"_c;
    UInt32x3_splat_UInt32.compileTime = true;
    UInt32x3_splat_UInt32.backendIndex = 541;
    UInt32x3_splat_UInt32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_UInt32.parameters = UInt32x3_splat_UInt32_args;
    Symbol::Resolved(&UInt32x3_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_splat_UInt32)->signature = "u32x3 u32x3(u32)"_c;
    Symbol::Resolved(&UInt32x3_splat_UInt32)->name = "u32x3(u32)"_c;
    Symbol::Resolved(&UInt32x3_splat_UInt32)->nameWithVarNames = "u32x3(val : u32)"_c;
    Symbol::Resolved(&UInt32x3_splat_UInt32)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Int32x3
    UInt32x3_from_Int32x3_arg.name = "val"_c;
    UInt32x3_from_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    UInt32x3_from_Int32x3.documentation = "Convert from i32x3 to u32x3"_c;
    UInt32x3_from_Int32x3.name = "u32x3"_c;
    UInt32x3_from_Int32x3.compileTime = true;
    UInt32x3_from_Int32x3.backendIndex = 542;
    UInt32x3_from_Int32x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_from_Int32x3.parameters = UInt32x3_from_Int32x3_args;
    Symbol::Resolved(&UInt32x3_from_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&UInt32x3_from_Int32x3)->signature = "u32x3 u32x3(i32x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Int32x3)->name = "u32x3(i32x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Int32x3)->nameWithVarNames = "u32x3(val : i32x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Int32x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Int32
    UInt32x3_splat_Int32_arg.name = "val"_c;
    UInt32x3_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x3_splat_Int32.documentation = "Splat i32 to u32x3"_c;
    UInt32x3_splat_Int32.name = "u32x3"_c;
    UInt32x3_splat_Int32.compileTime = true;
    UInt32x3_splat_Int32.backendIndex = 543;
    UInt32x3_splat_Int32.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_Int32.parameters = UInt32x3_splat_Int32_args;
    Symbol::Resolved(&UInt32x3_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x3_splat_Int32)->signature = "u32x3 u32x3(i32)"_c;
    Symbol::Resolved(&UInt32x3_splat_Int32)->name = "u32x3(i32)"_c;
    Symbol::Resolved(&UInt32x3_splat_Int32)->nameWithVarNames = "u32x3(val : i32)"_c;
    Symbol::Resolved(&UInt32x3_splat_Int32)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Bool8x3
    UInt32x3_from_Bool8x3_arg.name = "val"_c;
    UInt32x3_from_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    UInt32x3_from_Bool8x3.documentation = "Convert from b8x3 to u32x3"_c;
    UInt32x3_from_Bool8x3.name = "u32x3"_c;
    UInt32x3_from_Bool8x3.compileTime = true;
    UInt32x3_from_Bool8x3.backendIndex = 544;
    UInt32x3_from_Bool8x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_from_Bool8x3.parameters = UInt32x3_from_Bool8x3_args;
    Symbol::Resolved(&UInt32x3_from_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&UInt32x3_from_Bool8x3)->signature = "u32x3 u32x3(b8x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Bool8x3)->name = "u32x3(b8x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Bool8x3)->nameWithVarNames = "u32x3(val : b8x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Bool8x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Bool8
    UInt32x3_splat_Bool8_arg.name = "val"_c;
    UInt32x3_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    UInt32x3_splat_Bool8.documentation = "Splat b8 to u32x3"_c;
    UInt32x3_splat_Bool8.name = "u32x3"_c;
    UInt32x3_splat_Bool8.compileTime = true;
    UInt32x3_splat_Bool8.backendIndex = 545;
    UInt32x3_splat_Bool8.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_Bool8.parameters = UInt32x3_splat_Bool8_args;
    Symbol::Resolved(&UInt32x3_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&UInt32x3_splat_Bool8)->signature = "u32x3 u32x3(b8)"_c;
    Symbol::Resolved(&UInt32x3_splat_Bool8)->name = "u32x3(b8)"_c;
    Symbol::Resolved(&UInt32x3_splat_Bool8)->nameWithVarNames = "u32x3(val : b8)"_c;
    Symbol::Resolved(&UInt32x3_splat_Bool8)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Float16x3
    UInt32x3_from_Float16x3_arg.name = "val"_c;
    UInt32x3_from_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    UInt32x3_from_Float16x3.documentation = "Convert from f16x3 to u32x3"_c;
    UInt32x3_from_Float16x3.name = "u32x3"_c;
    UInt32x3_from_Float16x3.compileTime = true;
    UInt32x3_from_Float16x3.backendIndex = 546;
    UInt32x3_from_Float16x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_from_Float16x3.parameters = UInt32x3_from_Float16x3_args;
    Symbol::Resolved(&UInt32x3_from_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&UInt32x3_from_Float16x3)->signature = "u32x3 u32x3(f16x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Float16x3)->name = "u32x3(f16x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Float16x3)->nameWithVarNames = "u32x3(val : f16x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Float16x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Float16
    UInt32x3_splat_Float16_arg.name = "val"_c;
    UInt32x3_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt32x3_splat_Float16.documentation = "Splat f16 to u32x3"_c;
    UInt32x3_splat_Float16.name = "u32x3"_c;
    UInt32x3_splat_Float16.compileTime = true;
    UInt32x3_splat_Float16.backendIndex = 547;
    UInt32x3_splat_Float16.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_Float16.parameters = UInt32x3_splat_Float16_args;
    Symbol::Resolved(&UInt32x3_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32x3_splat_Float16)->signature = "u32x3 u32x3(f16)"_c;
    Symbol::Resolved(&UInt32x3_splat_Float16)->name = "u32x3(f16)"_c;
    Symbol::Resolved(&UInt32x3_splat_Float16)->nameWithVarNames = "u32x3(val : f16)"_c;
    Symbol::Resolved(&UInt32x3_splat_Float16)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt16x3
    UInt32x3_from_UInt16x3_arg.name = "val"_c;
    UInt32x3_from_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt32x3_from_UInt16x3.documentation = "Convert from u16x3 to u32x3"_c;
    UInt32x3_from_UInt16x3.name = "u32x3"_c;
    UInt32x3_from_UInt16x3.compileTime = true;
    UInt32x3_from_UInt16x3.backendIndex = 548;
    UInt32x3_from_UInt16x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_from_UInt16x3.parameters = UInt32x3_from_UInt16x3_args;
    Symbol::Resolved(&UInt32x3_from_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt32x3_from_UInt16x3)->signature = "u32x3 u32x3(u16x3)"_c;
    Symbol::Resolved(&UInt32x3_from_UInt16x3)->name = "u32x3(u16x3)"_c;
    Symbol::Resolved(&UInt32x3_from_UInt16x3)->nameWithVarNames = "u32x3(val : u16x3)"_c;
    Symbol::Resolved(&UInt32x3_from_UInt16x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt16
    UInt32x3_splat_UInt16_arg.name = "val"_c;
    UInt32x3_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32x3_splat_UInt16.documentation = "Splat u16 to u32x3"_c;
    UInt32x3_splat_UInt16.name = "u32x3"_c;
    UInt32x3_splat_UInt16.compileTime = true;
    UInt32x3_splat_UInt16.backendIndex = 549;
    UInt32x3_splat_UInt16.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_UInt16.parameters = UInt32x3_splat_UInt16_args;
    Symbol::Resolved(&UInt32x3_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x3_splat_UInt16)->signature = "u32x3 u32x3(u16)"_c;
    Symbol::Resolved(&UInt32x3_splat_UInt16)->name = "u32x3(u16)"_c;
    Symbol::Resolved(&UInt32x3_splat_UInt16)->nameWithVarNames = "u32x3(val : u16)"_c;
    Symbol::Resolved(&UInt32x3_splat_UInt16)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Int16x3
    UInt32x3_from_Int16x3_arg.name = "val"_c;
    UInt32x3_from_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    UInt32x3_from_Int16x3.documentation = "Convert from i16x3 to u32x3"_c;
    UInt32x3_from_Int16x3.name = "u32x3"_c;
    UInt32x3_from_Int16x3.compileTime = true;
    UInt32x3_from_Int16x3.backendIndex = 550;
    UInt32x3_from_Int16x3.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_from_Int16x3.parameters = UInt32x3_from_Int16x3_args;
    Symbol::Resolved(&UInt32x3_from_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&UInt32x3_from_Int16x3)->signature = "u32x3 u32x3(i16x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Int16x3)->name = "u32x3(i16x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Int16x3)->nameWithVarNames = "u32x3(val : i16x3)"_c;
    Symbol::Resolved(&UInt32x3_from_Int16x3)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with Int16
    UInt32x3_splat_Int16_arg.name = "val"_c;
    UInt32x3_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32x3_splat_Int16.documentation = "Splat i16 to u32x3"_c;
    UInt32x3_splat_Int16.name = "u32x3"_c;
    UInt32x3_splat_Int16.compileTime = true;
    UInt32x3_splat_Int16.backendIndex = 551;
    UInt32x3_splat_Int16.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_splat_Int16.parameters = UInt32x3_splat_Int16_args;
    Symbol::Resolved(&UInt32x3_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x3_splat_Int16)->signature = "u32x3 u32x3(i16)"_c;
    Symbol::Resolved(&UInt32x3_splat_Int16)->name = "u32x3(i16)"_c;
    Symbol::Resolved(&UInt32x3_splat_Int16)->nameWithVarNames = "u32x3(val : i16)"_c;
    Symbol::Resolved(&UInt32x3_splat_Int16)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt32, UInt32, UInt32
    UInt32x3_ctor0_arg0_UInt32.name = "arg0"_c;
    UInt32x3_ctor0_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x3_ctor0_arg1_UInt32.name = "arg1"_c;
    UInt32x3_ctor0_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x3_ctor0_arg2_UInt32.name = "arg2"_c;
    UInt32x3_ctor0_arg2_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x3_ctor0.name = "u32x3"_c;
    UInt32x3_ctor0.compileTime = true;
    UInt32x3_ctor0.backendIndex = 552;
    UInt32x3_ctor0.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_ctor0.parameters = UInt32x3_ctor0_args;
    Symbol::Resolved(&UInt32x3_ctor0_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_ctor0_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_ctor0_arg2_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_ctor0)->signature = "u32x3 u32x3(u32,u32,u32)"_c;
    Symbol::Resolved(&UInt32x3_ctor0)->name = "u32x3(u32,u32,u32)"_c;
    Symbol::Resolved(&UInt32x3_ctor0)->nameWithVarNames = "u32x3(arg0 : u32, arg1 : u32, arg2 : u32)"_c;
    Symbol::Resolved(&UInt32x3_ctor0)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt32x2, UInt32
    UInt32x3_ctor1_arg0_UInt32x2.name = "arg0"_c;
    UInt32x3_ctor1_arg0_UInt32x2.type = Type::FullType{ UInt32x2Type.name };
    UInt32x3_ctor1_arg1_UInt32.name = "arg1"_c;
    UInt32x3_ctor1_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x3_ctor1.name = "u32x3"_c;
    UInt32x3_ctor1.compileTime = true;
    UInt32x3_ctor1.backendIndex = 553;
    UInt32x3_ctor1.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_ctor1.parameters = UInt32x3_ctor1_args;
    Symbol::Resolved(&UInt32x3_ctor1_arg0_UInt32x2)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x3_ctor1_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_ctor1)->signature = "u32x3 u32x3(u32x2,u32)"_c;
    Symbol::Resolved(&UInt32x3_ctor1)->name = "u32x3(u32x2,u32)"_c;
    Symbol::Resolved(&UInt32x3_ctor1)->nameWithVarNames = "u32x3(arg0 : u32x2, arg1 : u32)"_c;
    Symbol::Resolved(&UInt32x3_ctor1)->returnTypeSymbol = &UInt32x3Type;

    /// u32x3 with UInt32, UInt32x2
    UInt32x3_ctor2_arg0_UInt32.name = "arg0"_c;
    UInt32x3_ctor2_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x3_ctor2_arg1_UInt32x2.name = "arg1"_c;
    UInt32x3_ctor2_arg1_UInt32x2.type = Type::FullType{ UInt32x2Type.name };
    UInt32x3_ctor2.name = "u32x3"_c;
    UInt32x3_ctor2.compileTime = true;
    UInt32x3_ctor2.backendIndex = 554;
    UInt32x3_ctor2.returnType = Type::FullType { UInt32x3Type.name };
    UInt32x3_ctor2.parameters = UInt32x3_ctor2_args;
    Symbol::Resolved(&UInt32x3_ctor2_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x3_ctor2_arg1_UInt32x2)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x3_ctor2)->signature = "u32x3 u32x3(u32,u32x2)"_c;
    Symbol::Resolved(&UInt32x3_ctor2)->name = "u32x3(u32,u32x2)"_c;
    Symbol::Resolved(&UInt32x3_ctor2)->nameWithVarNames = "u32x3(arg0 : u32, arg1 : u32x2)"_c;
    Symbol::Resolved(&UInt32x3_ctor2)->returnTypeSymbol = &UInt32x3Type;

    /// i32x3 with Float32x3
    Int32x3_from_Float32x3_arg.name = "val"_c;
    Int32x3_from_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Int32x3_from_Float32x3.documentation = "Convert from f32x3 to i32x3"_c;
    Int32x3_from_Float32x3.name = "i32x3"_c;
    Int32x3_from_Float32x3.compileTime = true;
    Int32x3_from_Float32x3.backendIndex = 587;
    Int32x3_from_Float32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_from_Float32x3.parameters = Int32x3_from_Float32x3_args;
    Symbol::Resolved(&Int32x3_from_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Int32x3_from_Float32x3)->signature = "i32x3 i32x3(f32x3)"_c;
    Symbol::Resolved(&Int32x3_from_Float32x3)->name = "i32x3(f32x3)"_c;
    Symbol::Resolved(&Int32x3_from_Float32x3)->nameWithVarNames = "i32x3(val : f32x3)"_c;
    Symbol::Resolved(&Int32x3_from_Float32x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Float32
    Int32x3_splat_Float32_arg.name = "val"_c;
    Int32x3_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int32x3_splat_Float32.documentation = "Splat f32 to i32x3"_c;
    Int32x3_splat_Float32.name = "i32x3"_c;
    Int32x3_splat_Float32.compileTime = true;
    Int32x3_splat_Float32.backendIndex = 588;
    Int32x3_splat_Float32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_Float32.parameters = Int32x3_splat_Float32_args;
    Symbol::Resolved(&Int32x3_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x3_splat_Float32)->signature = "i32x3 i32x3(f32)"_c;
    Symbol::Resolved(&Int32x3_splat_Float32)->name = "i32x3(f32)"_c;
    Symbol::Resolved(&Int32x3_splat_Float32)->nameWithVarNames = "i32x3(val : f32)"_c;
    Symbol::Resolved(&Int32x3_splat_Float32)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with UInt32x3
    Int32x3_from_UInt32x3_arg.name = "val"_c;
    Int32x3_from_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    Int32x3_from_UInt32x3.documentation = "Convert from u32x3 to i32x3"_c;
    Int32x3_from_UInt32x3.name = "i32x3"_c;
    Int32x3_from_UInt32x3.compileTime = true;
    Int32x3_from_UInt32x3.backendIndex = 589;
    Int32x3_from_UInt32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_from_UInt32x3.parameters = Int32x3_from_UInt32x3_args;
    Symbol::Resolved(&Int32x3_from_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&Int32x3_from_UInt32x3)->signature = "i32x3 i32x3(u32x3)"_c;
    Symbol::Resolved(&Int32x3_from_UInt32x3)->name = "i32x3(u32x3)"_c;
    Symbol::Resolved(&Int32x3_from_UInt32x3)->nameWithVarNames = "i32x3(val : u32x3)"_c;
    Symbol::Resolved(&Int32x3_from_UInt32x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with UInt32
    Int32x3_splat_UInt32_arg.name = "val"_c;
    Int32x3_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x3_splat_UInt32.documentation = "Splat u32 to i32x3"_c;
    Int32x3_splat_UInt32.name = "i32x3"_c;
    Int32x3_splat_UInt32.compileTime = true;
    Int32x3_splat_UInt32.backendIndex = 590;
    Int32x3_splat_UInt32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_UInt32.parameters = Int32x3_splat_UInt32_args;
    Symbol::Resolved(&Int32x3_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x3_splat_UInt32)->signature = "i32x3 i32x3(u32)"_c;
    Symbol::Resolved(&Int32x3_splat_UInt32)->name = "i32x3(u32)"_c;
    Symbol::Resolved(&Int32x3_splat_UInt32)->nameWithVarNames = "i32x3(val : u32)"_c;
    Symbol::Resolved(&Int32x3_splat_UInt32)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int32x3
    Int32x3_from_Int32x3_arg.name = "val"_c;
    Int32x3_from_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int32x3_from_Int32x3.documentation = "Convert from i32x3 to i32x3"_c;
    Int32x3_from_Int32x3.name = "i32x3"_c;
    Int32x3_from_Int32x3.compileTime = true;
    Int32x3_from_Int32x3.backendIndex = 591;
    Int32x3_from_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_from_Int32x3.parameters = Int32x3_from_Int32x3_args;
    Symbol::Resolved(&Int32x3_from_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x3_from_Int32x3)->signature = "i32x3 i32x3(i32x3)"_c;
    Symbol::Resolved(&Int32x3_from_Int32x3)->name = "i32x3(i32x3)"_c;
    Symbol::Resolved(&Int32x3_from_Int32x3)->nameWithVarNames = "i32x3(val : i32x3)"_c;
    Symbol::Resolved(&Int32x3_from_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int32
    Int32x3_splat_Int32_arg.name = "val"_c;
    Int32x3_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x3_splat_Int32.documentation = "Splat i32 to i32x3"_c;
    Int32x3_splat_Int32.name = "i32x3"_c;
    Int32x3_splat_Int32.compileTime = true;
    Int32x3_splat_Int32.backendIndex = 592;
    Int32x3_splat_Int32.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_Int32.parameters = Int32x3_splat_Int32_args;
    Symbol::Resolved(&Int32x3_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_splat_Int32)->signature = "i32x3 i32x3(i32)"_c;
    Symbol::Resolved(&Int32x3_splat_Int32)->name = "i32x3(i32)"_c;
    Symbol::Resolved(&Int32x3_splat_Int32)->nameWithVarNames = "i32x3(val : i32)"_c;
    Symbol::Resolved(&Int32x3_splat_Int32)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Bool8x3
    Int32x3_from_Bool8x3_arg.name = "val"_c;
    Int32x3_from_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Int32x3_from_Bool8x3.documentation = "Convert from b8x3 to i32x3"_c;
    Int32x3_from_Bool8x3.name = "i32x3"_c;
    Int32x3_from_Bool8x3.compileTime = true;
    Int32x3_from_Bool8x3.backendIndex = 593;
    Int32x3_from_Bool8x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_from_Bool8x3.parameters = Int32x3_from_Bool8x3_args;
    Symbol::Resolved(&Int32x3_from_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Int32x3_from_Bool8x3)->signature = "i32x3 i32x3(b8x3)"_c;
    Symbol::Resolved(&Int32x3_from_Bool8x3)->name = "i32x3(b8x3)"_c;
    Symbol::Resolved(&Int32x3_from_Bool8x3)->nameWithVarNames = "i32x3(val : b8x3)"_c;
    Symbol::Resolved(&Int32x3_from_Bool8x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Bool8
    Int32x3_splat_Bool8_arg.name = "val"_c;
    Int32x3_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Int32x3_splat_Bool8.documentation = "Splat b8 to i32x3"_c;
    Int32x3_splat_Bool8.name = "i32x3"_c;
    Int32x3_splat_Bool8.compileTime = true;
    Int32x3_splat_Bool8.backendIndex = 594;
    Int32x3_splat_Bool8.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_Bool8.parameters = Int32x3_splat_Bool8_args;
    Symbol::Resolved(&Int32x3_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Int32x3_splat_Bool8)->signature = "i32x3 i32x3(b8)"_c;
    Symbol::Resolved(&Int32x3_splat_Bool8)->name = "i32x3(b8)"_c;
    Symbol::Resolved(&Int32x3_splat_Bool8)->nameWithVarNames = "i32x3(val : b8)"_c;
    Symbol::Resolved(&Int32x3_splat_Bool8)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Float16x3
    Int32x3_from_Float16x3_arg.name = "val"_c;
    Int32x3_from_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Int32x3_from_Float16x3.documentation = "Convert from f16x3 to i32x3"_c;
    Int32x3_from_Float16x3.name = "i32x3"_c;
    Int32x3_from_Float16x3.compileTime = true;
    Int32x3_from_Float16x3.backendIndex = 595;
    Int32x3_from_Float16x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_from_Float16x3.parameters = Int32x3_from_Float16x3_args;
    Symbol::Resolved(&Int32x3_from_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Int32x3_from_Float16x3)->signature = "i32x3 i32x3(f16x3)"_c;
    Symbol::Resolved(&Int32x3_from_Float16x3)->name = "i32x3(f16x3)"_c;
    Symbol::Resolved(&Int32x3_from_Float16x3)->nameWithVarNames = "i32x3(val : f16x3)"_c;
    Symbol::Resolved(&Int32x3_from_Float16x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Float16
    Int32x3_splat_Float16_arg.name = "val"_c;
    Int32x3_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int32x3_splat_Float16.documentation = "Splat f16 to i32x3"_c;
    Int32x3_splat_Float16.name = "i32x3"_c;
    Int32x3_splat_Float16.compileTime = true;
    Int32x3_splat_Float16.backendIndex = 596;
    Int32x3_splat_Float16.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_Float16.parameters = Int32x3_splat_Float16_args;
    Symbol::Resolved(&Int32x3_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32x3_splat_Float16)->signature = "i32x3 i32x3(f16)"_c;
    Symbol::Resolved(&Int32x3_splat_Float16)->name = "i32x3(f16)"_c;
    Symbol::Resolved(&Int32x3_splat_Float16)->nameWithVarNames = "i32x3(val : f16)"_c;
    Symbol::Resolved(&Int32x3_splat_Float16)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with UInt16x3
    Int32x3_from_UInt16x3_arg.name = "val"_c;
    Int32x3_from_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    Int32x3_from_UInt16x3.documentation = "Convert from u16x3 to i32x3"_c;
    Int32x3_from_UInt16x3.name = "i32x3"_c;
    Int32x3_from_UInt16x3.compileTime = true;
    Int32x3_from_UInt16x3.backendIndex = 597;
    Int32x3_from_UInt16x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_from_UInt16x3.parameters = Int32x3_from_UInt16x3_args;
    Symbol::Resolved(&Int32x3_from_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&Int32x3_from_UInt16x3)->signature = "i32x3 i32x3(u16x3)"_c;
    Symbol::Resolved(&Int32x3_from_UInt16x3)->name = "i32x3(u16x3)"_c;
    Symbol::Resolved(&Int32x3_from_UInt16x3)->nameWithVarNames = "i32x3(val : u16x3)"_c;
    Symbol::Resolved(&Int32x3_from_UInt16x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with UInt16
    Int32x3_splat_UInt16_arg.name = "val"_c;
    Int32x3_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32x3_splat_UInt16.documentation = "Splat u16 to i32x3"_c;
    Int32x3_splat_UInt16.name = "i32x3"_c;
    Int32x3_splat_UInt16.compileTime = true;
    Int32x3_splat_UInt16.backendIndex = 598;
    Int32x3_splat_UInt16.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_UInt16.parameters = Int32x3_splat_UInt16_args;
    Symbol::Resolved(&Int32x3_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x3_splat_UInt16)->signature = "i32x3 i32x3(u16)"_c;
    Symbol::Resolved(&Int32x3_splat_UInt16)->name = "i32x3(u16)"_c;
    Symbol::Resolved(&Int32x3_splat_UInt16)->nameWithVarNames = "i32x3(val : u16)"_c;
    Symbol::Resolved(&Int32x3_splat_UInt16)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int16x3
    Int32x3_from_Int16x3_arg.name = "val"_c;
    Int32x3_from_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int32x3_from_Int16x3.documentation = "Convert from i16x3 to i32x3"_c;
    Int32x3_from_Int16x3.name = "i32x3"_c;
    Int32x3_from_Int16x3.compileTime = true;
    Int32x3_from_Int16x3.backendIndex = 599;
    Int32x3_from_Int16x3.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_from_Int16x3.parameters = Int32x3_from_Int16x3_args;
    Symbol::Resolved(&Int32x3_from_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int32x3_from_Int16x3)->signature = "i32x3 i32x3(i16x3)"_c;
    Symbol::Resolved(&Int32x3_from_Int16x3)->name = "i32x3(i16x3)"_c;
    Symbol::Resolved(&Int32x3_from_Int16x3)->nameWithVarNames = "i32x3(val : i16x3)"_c;
    Symbol::Resolved(&Int32x3_from_Int16x3)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int16
    Int32x3_splat_Int16_arg.name = "val"_c;
    Int32x3_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32x3_splat_Int16.documentation = "Splat i16 to i32x3"_c;
    Int32x3_splat_Int16.name = "i32x3"_c;
    Int32x3_splat_Int16.compileTime = true;
    Int32x3_splat_Int16.backendIndex = 600;
    Int32x3_splat_Int16.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_splat_Int16.parameters = Int32x3_splat_Int16_args;
    Symbol::Resolved(&Int32x3_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x3_splat_Int16)->signature = "i32x3 i32x3(i16)"_c;
    Symbol::Resolved(&Int32x3_splat_Int16)->name = "i32x3(i16)"_c;
    Symbol::Resolved(&Int32x3_splat_Int16)->nameWithVarNames = "i32x3(val : i16)"_c;
    Symbol::Resolved(&Int32x3_splat_Int16)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int32, Int32, Int32
    Int32x3_ctor0_arg0_Int32.name = "arg0"_c;
    Int32x3_ctor0_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x3_ctor0_arg1_Int32.name = "arg1"_c;
    Int32x3_ctor0_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x3_ctor0_arg2_Int32.name = "arg2"_c;
    Int32x3_ctor0_arg2_Int32.type = Type::FullType{ Int32Type.name };
    Int32x3_ctor0.name = "i32x3"_c;
    Int32x3_ctor0.compileTime = true;
    Int32x3_ctor0.backendIndex = 601;
    Int32x3_ctor0.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_ctor0.parameters = Int32x3_ctor0_args;
    Symbol::Resolved(&Int32x3_ctor0_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_ctor0_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_ctor0_arg2_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_ctor0)->signature = "i32x3 i32x3(i32,i32,i32)"_c;
    Symbol::Resolved(&Int32x3_ctor0)->name = "i32x3(i32,i32,i32)"_c;
    Symbol::Resolved(&Int32x3_ctor0)->nameWithVarNames = "i32x3(arg0 : i32, arg1 : i32, arg2 : i32)"_c;
    Symbol::Resolved(&Int32x3_ctor0)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int32x2, Int32
    Int32x3_ctor1_arg0_Int32x2.name = "arg0"_c;
    Int32x3_ctor1_arg0_Int32x2.type = Type::FullType{ Int32x2Type.name };
    Int32x3_ctor1_arg1_Int32.name = "arg1"_c;
    Int32x3_ctor1_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x3_ctor1.name = "i32x3"_c;
    Int32x3_ctor1.compileTime = true;
    Int32x3_ctor1.backendIndex = 602;
    Int32x3_ctor1.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_ctor1.parameters = Int32x3_ctor1_args;
    Symbol::Resolved(&Int32x3_ctor1_arg0_Int32x2)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x3_ctor1_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_ctor1)->signature = "i32x3 i32x3(i32x2,i32)"_c;
    Symbol::Resolved(&Int32x3_ctor1)->name = "i32x3(i32x2,i32)"_c;
    Symbol::Resolved(&Int32x3_ctor1)->nameWithVarNames = "i32x3(arg0 : i32x2, arg1 : i32)"_c;
    Symbol::Resolved(&Int32x3_ctor1)->returnTypeSymbol = &Int32x3Type;

    /// i32x3 with Int32, Int32x2
    Int32x3_ctor2_arg0_Int32.name = "arg0"_c;
    Int32x3_ctor2_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x3_ctor2_arg1_Int32x2.name = "arg1"_c;
    Int32x3_ctor2_arg1_Int32x2.type = Type::FullType{ Int32x2Type.name };
    Int32x3_ctor2.name = "i32x3"_c;
    Int32x3_ctor2.compileTime = true;
    Int32x3_ctor2.backendIndex = 603;
    Int32x3_ctor2.returnType = Type::FullType { Int32x3Type.name };
    Int32x3_ctor2.parameters = Int32x3_ctor2_args;
    Symbol::Resolved(&Int32x3_ctor2_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x3_ctor2_arg1_Int32x2)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x3_ctor2)->signature = "i32x3 i32x3(i32,i32x2)"_c;
    Symbol::Resolved(&Int32x3_ctor2)->name = "i32x3(i32,i32x2)"_c;
    Symbol::Resolved(&Int32x3_ctor2)->nameWithVarNames = "i32x3(arg0 : i32, arg1 : i32x2)"_c;
    Symbol::Resolved(&Int32x3_ctor2)->returnTypeSymbol = &Int32x3Type;

    /// b8x3 with UInt32x3
    Bool8x3_from_UInt32x3_arg.name = "val"_c;
    Bool8x3_from_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    Bool8x3_from_UInt32x3.documentation = "Convert from u32x3 to b8x3"_c;
    Bool8x3_from_UInt32x3.name = "b8x3"_c;
    Bool8x3_from_UInt32x3.compileTime = true;
    Bool8x3_from_UInt32x3.backendIndex = 636;
    Bool8x3_from_UInt32x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_from_UInt32x3.parameters = Bool8x3_from_UInt32x3_args;
    Symbol::Resolved(&Bool8x3_from_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&Bool8x3_from_UInt32x3)->signature = "b8x3 b8x3(u32x3)"_c;
    Symbol::Resolved(&Bool8x3_from_UInt32x3)->name = "b8x3(u32x3)"_c;
    Symbol::Resolved(&Bool8x3_from_UInt32x3)->nameWithVarNames = "b8x3(val : u32x3)"_c;
    Symbol::Resolved(&Bool8x3_from_UInt32x3)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with UInt32
    Bool8x3_splat_UInt32_arg.name = "val"_c;
    Bool8x3_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8x3_splat_UInt32.documentation = "Splat u32 to b8x3"_c;
    Bool8x3_splat_UInt32.name = "b8x3"_c;
    Bool8x3_splat_UInt32.compileTime = true;
    Bool8x3_splat_UInt32.backendIndex = 637;
    Bool8x3_splat_UInt32.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_splat_UInt32.parameters = Bool8x3_splat_UInt32_args;
    Symbol::Resolved(&Bool8x3_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x3_splat_UInt32)->signature = "b8x3 b8x3(u32)"_c;
    Symbol::Resolved(&Bool8x3_splat_UInt32)->name = "b8x3(u32)"_c;
    Symbol::Resolved(&Bool8x3_splat_UInt32)->nameWithVarNames = "b8x3(val : u32)"_c;
    Symbol::Resolved(&Bool8x3_splat_UInt32)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Int32x3
    Bool8x3_from_Int32x3_arg.name = "val"_c;
    Bool8x3_from_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Bool8x3_from_Int32x3.documentation = "Convert from i32x3 to b8x3"_c;
    Bool8x3_from_Int32x3.name = "b8x3"_c;
    Bool8x3_from_Int32x3.compileTime = true;
    Bool8x3_from_Int32x3.backendIndex = 638;
    Bool8x3_from_Int32x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_from_Int32x3.parameters = Bool8x3_from_Int32x3_args;
    Symbol::Resolved(&Bool8x3_from_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Bool8x3_from_Int32x3)->signature = "b8x3 b8x3(i32x3)"_c;
    Symbol::Resolved(&Bool8x3_from_Int32x3)->name = "b8x3(i32x3)"_c;
    Symbol::Resolved(&Bool8x3_from_Int32x3)->nameWithVarNames = "b8x3(val : i32x3)"_c;
    Symbol::Resolved(&Bool8x3_from_Int32x3)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Int32
    Bool8x3_splat_Int32_arg.name = "val"_c;
    Bool8x3_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8x3_splat_Int32.documentation = "Splat i32 to b8x3"_c;
    Bool8x3_splat_Int32.name = "b8x3"_c;
    Bool8x3_splat_Int32.compileTime = true;
    Bool8x3_splat_Int32.backendIndex = 639;
    Bool8x3_splat_Int32.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_splat_Int32.parameters = Bool8x3_splat_Int32_args;
    Symbol::Resolved(&Bool8x3_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x3_splat_Int32)->signature = "b8x3 b8x3(i32)"_c;
    Symbol::Resolved(&Bool8x3_splat_Int32)->name = "b8x3(i32)"_c;
    Symbol::Resolved(&Bool8x3_splat_Int32)->nameWithVarNames = "b8x3(val : i32)"_c;
    Symbol::Resolved(&Bool8x3_splat_Int32)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Bool8x3
    Bool8x3_from_Bool8x3_arg.name = "val"_c;
    Bool8x3_from_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Bool8x3_from_Bool8x3.documentation = "Convert from b8x3 to b8x3"_c;
    Bool8x3_from_Bool8x3.name = "b8x3"_c;
    Bool8x3_from_Bool8x3.compileTime = true;
    Bool8x3_from_Bool8x3.backendIndex = 640;
    Bool8x3_from_Bool8x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_from_Bool8x3.parameters = Bool8x3_from_Bool8x3_args;
    Symbol::Resolved(&Bool8x3_from_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x3_from_Bool8x3)->signature = "b8x3 b8x3(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_from_Bool8x3)->name = "b8x3(b8x3)"_c;
    Symbol::Resolved(&Bool8x3_from_Bool8x3)->nameWithVarNames = "b8x3(val : b8x3)"_c;
    Symbol::Resolved(&Bool8x3_from_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Bool8
    Bool8x3_splat_Bool8_arg.name = "val"_c;
    Bool8x3_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Bool8x3_splat_Bool8.documentation = "Splat b8 to b8x3"_c;
    Bool8x3_splat_Bool8.name = "b8x3"_c;
    Bool8x3_splat_Bool8.compileTime = true;
    Bool8x3_splat_Bool8.backendIndex = 641;
    Bool8x3_splat_Bool8.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_splat_Bool8.parameters = Bool8x3_splat_Bool8_args;
    Symbol::Resolved(&Bool8x3_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x3_splat_Bool8)->signature = "b8x3 b8x3(b8)"_c;
    Symbol::Resolved(&Bool8x3_splat_Bool8)->name = "b8x3(b8)"_c;
    Symbol::Resolved(&Bool8x3_splat_Bool8)->nameWithVarNames = "b8x3(val : b8)"_c;
    Symbol::Resolved(&Bool8x3_splat_Bool8)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with UInt16x3
    Bool8x3_from_UInt16x3_arg.name = "val"_c;
    Bool8x3_from_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    Bool8x3_from_UInt16x3.documentation = "Convert from u16x3 to b8x3"_c;
    Bool8x3_from_UInt16x3.name = "b8x3"_c;
    Bool8x3_from_UInt16x3.compileTime = true;
    Bool8x3_from_UInt16x3.backendIndex = 642;
    Bool8x3_from_UInt16x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_from_UInt16x3.parameters = Bool8x3_from_UInt16x3_args;
    Symbol::Resolved(&Bool8x3_from_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&Bool8x3_from_UInt16x3)->signature = "b8x3 b8x3(u16x3)"_c;
    Symbol::Resolved(&Bool8x3_from_UInt16x3)->name = "b8x3(u16x3)"_c;
    Symbol::Resolved(&Bool8x3_from_UInt16x3)->nameWithVarNames = "b8x3(val : u16x3)"_c;
    Symbol::Resolved(&Bool8x3_from_UInt16x3)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with UInt16
    Bool8x3_splat_UInt16_arg.name = "val"_c;
    Bool8x3_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8x3_splat_UInt16.documentation = "Splat u16 to b8x3"_c;
    Bool8x3_splat_UInt16.name = "b8x3"_c;
    Bool8x3_splat_UInt16.compileTime = true;
    Bool8x3_splat_UInt16.backendIndex = 643;
    Bool8x3_splat_UInt16.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_splat_UInt16.parameters = Bool8x3_splat_UInt16_args;
    Symbol::Resolved(&Bool8x3_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x3_splat_UInt16)->signature = "b8x3 b8x3(u16)"_c;
    Symbol::Resolved(&Bool8x3_splat_UInt16)->name = "b8x3(u16)"_c;
    Symbol::Resolved(&Bool8x3_splat_UInt16)->nameWithVarNames = "b8x3(val : u16)"_c;
    Symbol::Resolved(&Bool8x3_splat_UInt16)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Int16x3
    Bool8x3_from_Int16x3_arg.name = "val"_c;
    Bool8x3_from_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Bool8x3_from_Int16x3.documentation = "Convert from i16x3 to b8x3"_c;
    Bool8x3_from_Int16x3.name = "b8x3"_c;
    Bool8x3_from_Int16x3.compileTime = true;
    Bool8x3_from_Int16x3.backendIndex = 644;
    Bool8x3_from_Int16x3.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_from_Int16x3.parameters = Bool8x3_from_Int16x3_args;
    Symbol::Resolved(&Bool8x3_from_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Bool8x3_from_Int16x3)->signature = "b8x3 b8x3(i16x3)"_c;
    Symbol::Resolved(&Bool8x3_from_Int16x3)->name = "b8x3(i16x3)"_c;
    Symbol::Resolved(&Bool8x3_from_Int16x3)->nameWithVarNames = "b8x3(val : i16x3)"_c;
    Symbol::Resolved(&Bool8x3_from_Int16x3)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Int16
    Bool8x3_splat_Int16_arg.name = "val"_c;
    Bool8x3_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8x3_splat_Int16.documentation = "Splat i16 to b8x3"_c;
    Bool8x3_splat_Int16.name = "b8x3"_c;
    Bool8x3_splat_Int16.compileTime = true;
    Bool8x3_splat_Int16.backendIndex = 645;
    Bool8x3_splat_Int16.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_splat_Int16.parameters = Bool8x3_splat_Int16_args;
    Symbol::Resolved(&Bool8x3_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x3_splat_Int16)->signature = "b8x3 b8x3(i16)"_c;
    Symbol::Resolved(&Bool8x3_splat_Int16)->name = "b8x3(i16)"_c;
    Symbol::Resolved(&Bool8x3_splat_Int16)->nameWithVarNames = "b8x3(val : i16)"_c;
    Symbol::Resolved(&Bool8x3_splat_Int16)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Bool8, Bool8, Bool8
    Bool8x3_ctor0_arg0_Bool8.name = "arg0"_c;
    Bool8x3_ctor0_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x3_ctor0_arg1_Bool8.name = "arg1"_c;
    Bool8x3_ctor0_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x3_ctor0_arg2_Bool8.name = "arg2"_c;
    Bool8x3_ctor0_arg2_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x3_ctor0.name = "b8x3"_c;
    Bool8x3_ctor0.compileTime = true;
    Bool8x3_ctor0.backendIndex = 646;
    Bool8x3_ctor0.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_ctor0.parameters = Bool8x3_ctor0_args;
    Symbol::Resolved(&Bool8x3_ctor0_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x3_ctor0_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x3_ctor0_arg2_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x3_ctor0)->signature = "b8x3 b8x3(b8,b8,b8)"_c;
    Symbol::Resolved(&Bool8x3_ctor0)->name = "b8x3(b8,b8,b8)"_c;
    Symbol::Resolved(&Bool8x3_ctor0)->nameWithVarNames = "b8x3(arg0 : b8, arg1 : b8, arg2 : b8)"_c;
    Symbol::Resolved(&Bool8x3_ctor0)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Bool8x2, Bool8
    Bool8x3_ctor1_arg0_Bool8x2.name = "arg0"_c;
    Bool8x3_ctor1_arg0_Bool8x2.type = Type::FullType{ Bool8x2Type.name };
    Bool8x3_ctor1_arg1_Bool8.name = "arg1"_c;
    Bool8x3_ctor1_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x3_ctor1.name = "b8x3"_c;
    Bool8x3_ctor1.compileTime = true;
    Bool8x3_ctor1.backendIndex = 647;
    Bool8x3_ctor1.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_ctor1.parameters = Bool8x3_ctor1_args;
    Symbol::Resolved(&Bool8x3_ctor1_arg0_Bool8x2)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x3_ctor1_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x3_ctor1)->signature = "b8x3 b8x3(b8x2,b8)"_c;
    Symbol::Resolved(&Bool8x3_ctor1)->name = "b8x3(b8x2,b8)"_c;
    Symbol::Resolved(&Bool8x3_ctor1)->nameWithVarNames = "b8x3(arg0 : b8x2, arg1 : b8)"_c;
    Symbol::Resolved(&Bool8x3_ctor1)->returnTypeSymbol = &Bool8x3Type;

    /// b8x3 with Bool8, Bool8x2
    Bool8x3_ctor2_arg0_Bool8.name = "arg0"_c;
    Bool8x3_ctor2_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x3_ctor2_arg1_Bool8x2.name = "arg1"_c;
    Bool8x3_ctor2_arg1_Bool8x2.type = Type::FullType{ Bool8x2Type.name };
    Bool8x3_ctor2.name = "b8x3"_c;
    Bool8x3_ctor2.compileTime = true;
    Bool8x3_ctor2.backendIndex = 648;
    Bool8x3_ctor2.returnType = Type::FullType { Bool8x3Type.name };
    Bool8x3_ctor2.parameters = Bool8x3_ctor2_args;
    Symbol::Resolved(&Bool8x3_ctor2_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x3_ctor2_arg1_Bool8x2)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x3_ctor2)->signature = "b8x3 b8x3(b8,b8x2)"_c;
    Symbol::Resolved(&Bool8x3_ctor2)->name = "b8x3(b8,b8x2)"_c;
    Symbol::Resolved(&Bool8x3_ctor2)->nameWithVarNames = "b8x3(arg0 : b8, arg1 : b8x2)"_c;
    Symbol::Resolved(&Bool8x3_ctor2)->returnTypeSymbol = &Bool8x3Type;

    /// f16x3 with Float32x3
    Float16x3_from_Float32x3_arg.name = "val"_c;
    Float16x3_from_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Float16x3_from_Float32x3.documentation = "Convert from f32x3 to f16x3"_c;
    Float16x3_from_Float32x3.name = "f16x3"_c;
    Float16x3_from_Float32x3.compileTime = true;
    Float16x3_from_Float32x3.backendIndex = 657;
    Float16x3_from_Float32x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_from_Float32x3.parameters = Float16x3_from_Float32x3_args;
    Symbol::Resolved(&Float16x3_from_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float16x3_from_Float32x3)->signature = "f16x3 f16x3(f32x3)"_c;
    Symbol::Resolved(&Float16x3_from_Float32x3)->name = "f16x3(f32x3)"_c;
    Symbol::Resolved(&Float16x3_from_Float32x3)->nameWithVarNames = "f16x3(val : f32x3)"_c;
    Symbol::Resolved(&Float16x3_from_Float32x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Float32
    Float16x3_splat_Float32_arg.name = "val"_c;
    Float16x3_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float16x3_splat_Float32.documentation = "Splat f32 to f16x3"_c;
    Float16x3_splat_Float32.name = "f16x3"_c;
    Float16x3_splat_Float32.compileTime = true;
    Float16x3_splat_Float32.backendIndex = 658;
    Float16x3_splat_Float32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_Float32.parameters = Float16x3_splat_Float32_args;
    Symbol::Resolved(&Float16x3_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16x3_splat_Float32)->signature = "f16x3 f16x3(f32)"_c;
    Symbol::Resolved(&Float16x3_splat_Float32)->name = "f16x3(f32)"_c;
    Symbol::Resolved(&Float16x3_splat_Float32)->nameWithVarNames = "f16x3(val : f32)"_c;
    Symbol::Resolved(&Float16x3_splat_Float32)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with UInt32x3
    Float16x3_from_UInt32x3_arg.name = "val"_c;
    Float16x3_from_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    Float16x3_from_UInt32x3.documentation = "Convert from u32x3 to f16x3"_c;
    Float16x3_from_UInt32x3.name = "f16x3"_c;
    Float16x3_from_UInt32x3.compileTime = true;
    Float16x3_from_UInt32x3.backendIndex = 659;
    Float16x3_from_UInt32x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_from_UInt32x3.parameters = Float16x3_from_UInt32x3_args;
    Symbol::Resolved(&Float16x3_from_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&Float16x3_from_UInt32x3)->signature = "f16x3 f16x3(u32x3)"_c;
    Symbol::Resolved(&Float16x3_from_UInt32x3)->name = "f16x3(u32x3)"_c;
    Symbol::Resolved(&Float16x3_from_UInt32x3)->nameWithVarNames = "f16x3(val : u32x3)"_c;
    Symbol::Resolved(&Float16x3_from_UInt32x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with UInt32
    Float16x3_splat_UInt32_arg.name = "val"_c;
    Float16x3_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x3_splat_UInt32.documentation = "Splat u32 to f16x3"_c;
    Float16x3_splat_UInt32.name = "f16x3"_c;
    Float16x3_splat_UInt32.compileTime = true;
    Float16x3_splat_UInt32.backendIndex = 660;
    Float16x3_splat_UInt32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_UInt32.parameters = Float16x3_splat_UInt32_args;
    Symbol::Resolved(&Float16x3_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x3_splat_UInt32)->signature = "f16x3 f16x3(u32)"_c;
    Symbol::Resolved(&Float16x3_splat_UInt32)->name = "f16x3(u32)"_c;
    Symbol::Resolved(&Float16x3_splat_UInt32)->nameWithVarNames = "f16x3(val : u32)"_c;
    Symbol::Resolved(&Float16x3_splat_UInt32)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Int32x3
    Float16x3_from_Int32x3_arg.name = "val"_c;
    Float16x3_from_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Float16x3_from_Int32x3.documentation = "Convert from i32x3 to f16x3"_c;
    Float16x3_from_Int32x3.name = "f16x3"_c;
    Float16x3_from_Int32x3.compileTime = true;
    Float16x3_from_Int32x3.backendIndex = 661;
    Float16x3_from_Int32x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_from_Int32x3.parameters = Float16x3_from_Int32x3_args;
    Symbol::Resolved(&Float16x3_from_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Float16x3_from_Int32x3)->signature = "f16x3 f16x3(i32x3)"_c;
    Symbol::Resolved(&Float16x3_from_Int32x3)->name = "f16x3(i32x3)"_c;
    Symbol::Resolved(&Float16x3_from_Int32x3)->nameWithVarNames = "f16x3(val : i32x3)"_c;
    Symbol::Resolved(&Float16x3_from_Int32x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Int32
    Float16x3_splat_Int32_arg.name = "val"_c;
    Float16x3_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x3_splat_Int32.documentation = "Splat i32 to f16x3"_c;
    Float16x3_splat_Int32.name = "f16x3"_c;
    Float16x3_splat_Int32.compileTime = true;
    Float16x3_splat_Int32.backendIndex = 662;
    Float16x3_splat_Int32.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_Int32.parameters = Float16x3_splat_Int32_args;
    Symbol::Resolved(&Float16x3_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x3_splat_Int32)->signature = "f16x3 f16x3(i32)"_c;
    Symbol::Resolved(&Float16x3_splat_Int32)->name = "f16x3(i32)"_c;
    Symbol::Resolved(&Float16x3_splat_Int32)->nameWithVarNames = "f16x3(val : i32)"_c;
    Symbol::Resolved(&Float16x3_splat_Int32)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Bool8x3
    Float16x3_from_Bool8x3_arg.name = "val"_c;
    Float16x3_from_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Float16x3_from_Bool8x3.documentation = "Convert from b8x3 to f16x3"_c;
    Float16x3_from_Bool8x3.name = "f16x3"_c;
    Float16x3_from_Bool8x3.compileTime = true;
    Float16x3_from_Bool8x3.backendIndex = 663;
    Float16x3_from_Bool8x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_from_Bool8x3.parameters = Float16x3_from_Bool8x3_args;
    Symbol::Resolved(&Float16x3_from_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Float16x3_from_Bool8x3)->signature = "f16x3 f16x3(b8x3)"_c;
    Symbol::Resolved(&Float16x3_from_Bool8x3)->name = "f16x3(b8x3)"_c;
    Symbol::Resolved(&Float16x3_from_Bool8x3)->nameWithVarNames = "f16x3(val : b8x3)"_c;
    Symbol::Resolved(&Float16x3_from_Bool8x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Bool8
    Float16x3_splat_Bool8_arg.name = "val"_c;
    Float16x3_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Float16x3_splat_Bool8.documentation = "Splat b8 to f16x3"_c;
    Float16x3_splat_Bool8.name = "f16x3"_c;
    Float16x3_splat_Bool8.compileTime = true;
    Float16x3_splat_Bool8.backendIndex = 664;
    Float16x3_splat_Bool8.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_Bool8.parameters = Float16x3_splat_Bool8_args;
    Symbol::Resolved(&Float16x3_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Float16x3_splat_Bool8)->signature = "f16x3 f16x3(b8)"_c;
    Symbol::Resolved(&Float16x3_splat_Bool8)->name = "f16x3(b8)"_c;
    Symbol::Resolved(&Float16x3_splat_Bool8)->nameWithVarNames = "f16x3(val : b8)"_c;
    Symbol::Resolved(&Float16x3_splat_Bool8)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Float16x3
    Float16x3_from_Float16x3_arg.name = "val"_c;
    Float16x3_from_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Float16x3_from_Float16x3.documentation = "Convert from f16x3 to f16x3"_c;
    Float16x3_from_Float16x3.name = "f16x3"_c;
    Float16x3_from_Float16x3.compileTime = true;
    Float16x3_from_Float16x3.backendIndex = 665;
    Float16x3_from_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_from_Float16x3.parameters = Float16x3_from_Float16x3_args;
    Symbol::Resolved(&Float16x3_from_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3_from_Float16x3)->signature = "f16x3 f16x3(f16x3)"_c;
    Symbol::Resolved(&Float16x3_from_Float16x3)->name = "f16x3(f16x3)"_c;
    Symbol::Resolved(&Float16x3_from_Float16x3)->nameWithVarNames = "f16x3(val : f16x3)"_c;
    Symbol::Resolved(&Float16x3_from_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Float16
    Float16x3_splat_Float16_arg.name = "val"_c;
    Float16x3_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x3_splat_Float16.documentation = "Splat f16 to f16x3"_c;
    Float16x3_splat_Float16.name = "f16x3"_c;
    Float16x3_splat_Float16.compileTime = true;
    Float16x3_splat_Float16.backendIndex = 666;
    Float16x3_splat_Float16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_Float16.parameters = Float16x3_splat_Float16_args;
    Symbol::Resolved(&Float16x3_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_splat_Float16)->signature = "f16x3 f16x3(f16)"_c;
    Symbol::Resolved(&Float16x3_splat_Float16)->name = "f16x3(f16)"_c;
    Symbol::Resolved(&Float16x3_splat_Float16)->nameWithVarNames = "f16x3(val : f16)"_c;
    Symbol::Resolved(&Float16x3_splat_Float16)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with UInt16x3
    Float16x3_from_UInt16x3_arg.name = "val"_c;
    Float16x3_from_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    Float16x3_from_UInt16x3.documentation = "Convert from u16x3 to f16x3"_c;
    Float16x3_from_UInt16x3.name = "f16x3"_c;
    Float16x3_from_UInt16x3.compileTime = true;
    Float16x3_from_UInt16x3.backendIndex = 667;
    Float16x3_from_UInt16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_from_UInt16x3.parameters = Float16x3_from_UInt16x3_args;
    Symbol::Resolved(&Float16x3_from_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&Float16x3_from_UInt16x3)->signature = "f16x3 f16x3(u16x3)"_c;
    Symbol::Resolved(&Float16x3_from_UInt16x3)->name = "f16x3(u16x3)"_c;
    Symbol::Resolved(&Float16x3_from_UInt16x3)->nameWithVarNames = "f16x3(val : u16x3)"_c;
    Symbol::Resolved(&Float16x3_from_UInt16x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with UInt16
    Float16x3_splat_UInt16_arg.name = "val"_c;
    Float16x3_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x3_splat_UInt16.documentation = "Splat u16 to f16x3"_c;
    Float16x3_splat_UInt16.name = "f16x3"_c;
    Float16x3_splat_UInt16.compileTime = true;
    Float16x3_splat_UInt16.backendIndex = 668;
    Float16x3_splat_UInt16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_UInt16.parameters = Float16x3_splat_UInt16_args;
    Symbol::Resolved(&Float16x3_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x3_splat_UInt16)->signature = "f16x3 f16x3(u16)"_c;
    Symbol::Resolved(&Float16x3_splat_UInt16)->name = "f16x3(u16)"_c;
    Symbol::Resolved(&Float16x3_splat_UInt16)->nameWithVarNames = "f16x3(val : u16)"_c;
    Symbol::Resolved(&Float16x3_splat_UInt16)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Int16x3
    Float16x3_from_Int16x3_arg.name = "val"_c;
    Float16x3_from_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Float16x3_from_Int16x3.documentation = "Convert from i16x3 to f16x3"_c;
    Float16x3_from_Int16x3.name = "f16x3"_c;
    Float16x3_from_Int16x3.compileTime = true;
    Float16x3_from_Int16x3.backendIndex = 669;
    Float16x3_from_Int16x3.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_from_Int16x3.parameters = Float16x3_from_Int16x3_args;
    Symbol::Resolved(&Float16x3_from_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Float16x3_from_Int16x3)->signature = "f16x3 f16x3(i16x3)"_c;
    Symbol::Resolved(&Float16x3_from_Int16x3)->name = "f16x3(i16x3)"_c;
    Symbol::Resolved(&Float16x3_from_Int16x3)->nameWithVarNames = "f16x3(val : i16x3)"_c;
    Symbol::Resolved(&Float16x3_from_Int16x3)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Int16
    Float16x3_splat_Int16_arg.name = "val"_c;
    Float16x3_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x3_splat_Int16.documentation = "Splat i16 to f16x3"_c;
    Float16x3_splat_Int16.name = "f16x3"_c;
    Float16x3_splat_Int16.compileTime = true;
    Float16x3_splat_Int16.backendIndex = 670;
    Float16x3_splat_Int16.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_splat_Int16.parameters = Float16x3_splat_Int16_args;
    Symbol::Resolved(&Float16x3_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x3_splat_Int16)->signature = "f16x3 f16x3(i16)"_c;
    Symbol::Resolved(&Float16x3_splat_Int16)->name = "f16x3(i16)"_c;
    Symbol::Resolved(&Float16x3_splat_Int16)->nameWithVarNames = "f16x3(val : i16)"_c;
    Symbol::Resolved(&Float16x3_splat_Int16)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Float16, Float16, Float16
    Float16x3_ctor0_arg0_Float16.name = "arg0"_c;
    Float16x3_ctor0_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x3_ctor0_arg1_Float16.name = "arg1"_c;
    Float16x3_ctor0_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x3_ctor0_arg2_Float16.name = "arg2"_c;
    Float16x3_ctor0_arg2_Float16.type = Type::FullType{ Float16Type.name };
    Float16x3_ctor0.name = "f16x3"_c;
    Float16x3_ctor0.compileTime = true;
    Float16x3_ctor0.backendIndex = 671;
    Float16x3_ctor0.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_ctor0.parameters = Float16x3_ctor0_args;
    Symbol::Resolved(&Float16x3_ctor0_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_ctor0_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_ctor0_arg2_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_ctor0)->signature = "f16x3 f16x3(f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x3_ctor0)->name = "f16x3(f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x3_ctor0)->nameWithVarNames = "f16x3(arg0 : f16, arg1 : f16, arg2 : f16)"_c;
    Symbol::Resolved(&Float16x3_ctor0)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Float16x2, Float16
    Float16x3_ctor1_arg0_Float16x2.name = "arg0"_c;
    Float16x3_ctor1_arg0_Float16x2.type = Type::FullType{ Float16x2Type.name };
    Float16x3_ctor1_arg1_Float16.name = "arg1"_c;
    Float16x3_ctor1_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x3_ctor1.name = "f16x3"_c;
    Float16x3_ctor1.compileTime = true;
    Float16x3_ctor1.backendIndex = 672;
    Float16x3_ctor1.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_ctor1.parameters = Float16x3_ctor1_args;
    Symbol::Resolved(&Float16x3_ctor1_arg0_Float16x2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3_ctor1_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_ctor1)->signature = "f16x3 f16x3(f16x2,f16)"_c;
    Symbol::Resolved(&Float16x3_ctor1)->name = "f16x3(f16x2,f16)"_c;
    Symbol::Resolved(&Float16x3_ctor1)->nameWithVarNames = "f16x3(arg0 : f16x2, arg1 : f16)"_c;
    Symbol::Resolved(&Float16x3_ctor1)->returnTypeSymbol = &Float16x3Type;

    /// f16x3 with Float16, Float16x2
    Float16x3_ctor2_arg0_Float16.name = "arg0"_c;
    Float16x3_ctor2_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x3_ctor2_arg1_Float16x2.name = "arg1"_c;
    Float16x3_ctor2_arg1_Float16x2.type = Type::FullType{ Float16x2Type.name };
    Float16x3_ctor2.name = "f16x3"_c;
    Float16x3_ctor2.compileTime = true;
    Float16x3_ctor2.backendIndex = 673;
    Float16x3_ctor2.returnType = Type::FullType { Float16x3Type.name };
    Float16x3_ctor2.parameters = Float16x3_ctor2_args;
    Symbol::Resolved(&Float16x3_ctor2_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3_ctor2_arg1_Float16x2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3_ctor2)->signature = "f16x3 f16x3(f16,f16x2)"_c;
    Symbol::Resolved(&Float16x3_ctor2)->name = "f16x3(f16,f16x2)"_c;
    Symbol::Resolved(&Float16x3_ctor2)->nameWithVarNames = "f16x3(arg0 : f16, arg1 : f16x2)"_c;
    Symbol::Resolved(&Float16x3_ctor2)->returnTypeSymbol = &Float16x3Type;

    /// u16x3 with Float32x3
    UInt16x3_from_Float32x3_arg.name = "val"_c;
    UInt16x3_from_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    UInt16x3_from_Float32x3.documentation = "Convert from f32x3 to u16x3"_c;
    UInt16x3_from_Float32x3.name = "u16x3"_c;
    UInt16x3_from_Float32x3.compileTime = true;
    UInt16x3_from_Float32x3.backendIndex = 699;
    UInt16x3_from_Float32x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_from_Float32x3.parameters = UInt16x3_from_Float32x3_args;
    Symbol::Resolved(&UInt16x3_from_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&UInt16x3_from_Float32x3)->signature = "u16x3 u16x3(f32x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Float32x3)->name = "u16x3(f32x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Float32x3)->nameWithVarNames = "u16x3(val : f32x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Float32x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Float32
    UInt16x3_splat_Float32_arg.name = "val"_c;
    UInt16x3_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt16x3_splat_Float32.documentation = "Splat f32 to u16x3"_c;
    UInt16x3_splat_Float32.name = "u16x3"_c;
    UInt16x3_splat_Float32.compileTime = true;
    UInt16x3_splat_Float32.backendIndex = 700;
    UInt16x3_splat_Float32.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_Float32.parameters = UInt16x3_splat_Float32_args;
    Symbol::Resolved(&UInt16x3_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16x3_splat_Float32)->signature = "u16x3 u16x3(f32)"_c;
    Symbol::Resolved(&UInt16x3_splat_Float32)->name = "u16x3(f32)"_c;
    Symbol::Resolved(&UInt16x3_splat_Float32)->nameWithVarNames = "u16x3(val : f32)"_c;
    Symbol::Resolved(&UInt16x3_splat_Float32)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt32x3
    UInt16x3_from_UInt32x3_arg.name = "val"_c;
    UInt16x3_from_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    UInt16x3_from_UInt32x3.documentation = "Convert from u32x3 to u16x3"_c;
    UInt16x3_from_UInt32x3.name = "u16x3"_c;
    UInt16x3_from_UInt32x3.compileTime = true;
    UInt16x3_from_UInt32x3.backendIndex = 701;
    UInt16x3_from_UInt32x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_from_UInt32x3.parameters = UInt16x3_from_UInt32x3_args;
    Symbol::Resolved(&UInt16x3_from_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt16x3_from_UInt32x3)->signature = "u16x3 u16x3(u32x3)"_c;
    Symbol::Resolved(&UInt16x3_from_UInt32x3)->name = "u16x3(u32x3)"_c;
    Symbol::Resolved(&UInt16x3_from_UInt32x3)->nameWithVarNames = "u16x3(val : u32x3)"_c;
    Symbol::Resolved(&UInt16x3_from_UInt32x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt32
    UInt16x3_splat_UInt32_arg.name = "val"_c;
    UInt16x3_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16x3_splat_UInt32.documentation = "Splat u32 to u16x3"_c;
    UInt16x3_splat_UInt32.name = "u16x3"_c;
    UInt16x3_splat_UInt32.compileTime = true;
    UInt16x3_splat_UInt32.backendIndex = 702;
    UInt16x3_splat_UInt32.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_UInt32.parameters = UInt16x3_splat_UInt32_args;
    Symbol::Resolved(&UInt16x3_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x3_splat_UInt32)->signature = "u16x3 u16x3(u32)"_c;
    Symbol::Resolved(&UInt16x3_splat_UInt32)->name = "u16x3(u32)"_c;
    Symbol::Resolved(&UInt16x3_splat_UInt32)->nameWithVarNames = "u16x3(val : u32)"_c;
    Symbol::Resolved(&UInt16x3_splat_UInt32)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Int32x3
    UInt16x3_from_Int32x3_arg.name = "val"_c;
    UInt16x3_from_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    UInt16x3_from_Int32x3.documentation = "Convert from i32x3 to u16x3"_c;
    UInt16x3_from_Int32x3.name = "u16x3"_c;
    UInt16x3_from_Int32x3.compileTime = true;
    UInt16x3_from_Int32x3.backendIndex = 703;
    UInt16x3_from_Int32x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_from_Int32x3.parameters = UInt16x3_from_Int32x3_args;
    Symbol::Resolved(&UInt16x3_from_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&UInt16x3_from_Int32x3)->signature = "u16x3 u16x3(i32x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Int32x3)->name = "u16x3(i32x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Int32x3)->nameWithVarNames = "u16x3(val : i32x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Int32x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Int32
    UInt16x3_splat_Int32_arg.name = "val"_c;
    UInt16x3_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16x3_splat_Int32.documentation = "Splat i32 to u16x3"_c;
    UInt16x3_splat_Int32.name = "u16x3"_c;
    UInt16x3_splat_Int32.compileTime = true;
    UInt16x3_splat_Int32.backendIndex = 704;
    UInt16x3_splat_Int32.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_Int32.parameters = UInt16x3_splat_Int32_args;
    Symbol::Resolved(&UInt16x3_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x3_splat_Int32)->signature = "u16x3 u16x3(i32)"_c;
    Symbol::Resolved(&UInt16x3_splat_Int32)->name = "u16x3(i32)"_c;
    Symbol::Resolved(&UInt16x3_splat_Int32)->nameWithVarNames = "u16x3(val : i32)"_c;
    Symbol::Resolved(&UInt16x3_splat_Int32)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Bool8x3
    UInt16x3_from_Bool8x3_arg.name = "val"_c;
    UInt16x3_from_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    UInt16x3_from_Bool8x3.documentation = "Convert from b8x3 to u16x3"_c;
    UInt16x3_from_Bool8x3.name = "u16x3"_c;
    UInt16x3_from_Bool8x3.compileTime = true;
    UInt16x3_from_Bool8x3.backendIndex = 705;
    UInt16x3_from_Bool8x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_from_Bool8x3.parameters = UInt16x3_from_Bool8x3_args;
    Symbol::Resolved(&UInt16x3_from_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&UInt16x3_from_Bool8x3)->signature = "u16x3 u16x3(b8x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Bool8x3)->name = "u16x3(b8x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Bool8x3)->nameWithVarNames = "u16x3(val : b8x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Bool8x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Bool8
    UInt16x3_splat_Bool8_arg.name = "val"_c;
    UInt16x3_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    UInt16x3_splat_Bool8.documentation = "Splat b8 to u16x3"_c;
    UInt16x3_splat_Bool8.name = "u16x3"_c;
    UInt16x3_splat_Bool8.compileTime = true;
    UInt16x3_splat_Bool8.backendIndex = 706;
    UInt16x3_splat_Bool8.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_Bool8.parameters = UInt16x3_splat_Bool8_args;
    Symbol::Resolved(&UInt16x3_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&UInt16x3_splat_Bool8)->signature = "u16x3 u16x3(b8)"_c;
    Symbol::Resolved(&UInt16x3_splat_Bool8)->name = "u16x3(b8)"_c;
    Symbol::Resolved(&UInt16x3_splat_Bool8)->nameWithVarNames = "u16x3(val : b8)"_c;
    Symbol::Resolved(&UInt16x3_splat_Bool8)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Float16x3
    UInt16x3_from_Float16x3_arg.name = "val"_c;
    UInt16x3_from_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    UInt16x3_from_Float16x3.documentation = "Convert from f16x3 to u16x3"_c;
    UInt16x3_from_Float16x3.name = "u16x3"_c;
    UInt16x3_from_Float16x3.compileTime = true;
    UInt16x3_from_Float16x3.backendIndex = 707;
    UInt16x3_from_Float16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_from_Float16x3.parameters = UInt16x3_from_Float16x3_args;
    Symbol::Resolved(&UInt16x3_from_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&UInt16x3_from_Float16x3)->signature = "u16x3 u16x3(f16x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Float16x3)->name = "u16x3(f16x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Float16x3)->nameWithVarNames = "u16x3(val : f16x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Float16x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Float16
    UInt16x3_splat_Float16_arg.name = "val"_c;
    UInt16x3_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt16x3_splat_Float16.documentation = "Splat f16 to u16x3"_c;
    UInt16x3_splat_Float16.name = "u16x3"_c;
    UInt16x3_splat_Float16.compileTime = true;
    UInt16x3_splat_Float16.backendIndex = 708;
    UInt16x3_splat_Float16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_Float16.parameters = UInt16x3_splat_Float16_args;
    Symbol::Resolved(&UInt16x3_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x3_splat_Float16)->signature = "u16x3 u16x3(f16)"_c;
    Symbol::Resolved(&UInt16x3_splat_Float16)->name = "u16x3(f16)"_c;
    Symbol::Resolved(&UInt16x3_splat_Float16)->nameWithVarNames = "u16x3(val : f16)"_c;
    Symbol::Resolved(&UInt16x3_splat_Float16)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt16x3
    UInt16x3_from_UInt16x3_arg.name = "val"_c;
    UInt16x3_from_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    UInt16x3_from_UInt16x3.documentation = "Convert from u16x3 to u16x3"_c;
    UInt16x3_from_UInt16x3.name = "u16x3"_c;
    UInt16x3_from_UInt16x3.compileTime = true;
    UInt16x3_from_UInt16x3.backendIndex = 709;
    UInt16x3_from_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_from_UInt16x3.parameters = UInt16x3_from_UInt16x3_args;
    Symbol::Resolved(&UInt16x3_from_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x3_from_UInt16x3)->signature = "u16x3 u16x3(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_from_UInt16x3)->name = "u16x3(u16x3)"_c;
    Symbol::Resolved(&UInt16x3_from_UInt16x3)->nameWithVarNames = "u16x3(val : u16x3)"_c;
    Symbol::Resolved(&UInt16x3_from_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt16
    UInt16x3_splat_UInt16_arg.name = "val"_c;
    UInt16x3_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x3_splat_UInt16.documentation = "Splat u16 to u16x3"_c;
    UInt16x3_splat_UInt16.name = "u16x3"_c;
    UInt16x3_splat_UInt16.compileTime = true;
    UInt16x3_splat_UInt16.backendIndex = 710;
    UInt16x3_splat_UInt16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_UInt16.parameters = UInt16x3_splat_UInt16_args;
    Symbol::Resolved(&UInt16x3_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_splat_UInt16)->signature = "u16x3 u16x3(u16)"_c;
    Symbol::Resolved(&UInt16x3_splat_UInt16)->name = "u16x3(u16)"_c;
    Symbol::Resolved(&UInt16x3_splat_UInt16)->nameWithVarNames = "u16x3(val : u16)"_c;
    Symbol::Resolved(&UInt16x3_splat_UInt16)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Int16x3
    UInt16x3_from_Int16x3_arg.name = "val"_c;
    UInt16x3_from_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    UInt16x3_from_Int16x3.documentation = "Convert from i16x3 to u16x3"_c;
    UInt16x3_from_Int16x3.name = "u16x3"_c;
    UInt16x3_from_Int16x3.compileTime = true;
    UInt16x3_from_Int16x3.backendIndex = 711;
    UInt16x3_from_Int16x3.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_from_Int16x3.parameters = UInt16x3_from_Int16x3_args;
    Symbol::Resolved(&UInt16x3_from_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&UInt16x3_from_Int16x3)->signature = "u16x3 u16x3(i16x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Int16x3)->name = "u16x3(i16x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Int16x3)->nameWithVarNames = "u16x3(val : i16x3)"_c;
    Symbol::Resolved(&UInt16x3_from_Int16x3)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with Int16
    UInt16x3_splat_Int16_arg.name = "val"_c;
    UInt16x3_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x3_splat_Int16.documentation = "Splat i16 to u16x3"_c;
    UInt16x3_splat_Int16.name = "u16x3"_c;
    UInt16x3_splat_Int16.compileTime = true;
    UInt16x3_splat_Int16.backendIndex = 712;
    UInt16x3_splat_Int16.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_splat_Int16.parameters = UInt16x3_splat_Int16_args;
    Symbol::Resolved(&UInt16x3_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x3_splat_Int16)->signature = "u16x3 u16x3(i16)"_c;
    Symbol::Resolved(&UInt16x3_splat_Int16)->name = "u16x3(i16)"_c;
    Symbol::Resolved(&UInt16x3_splat_Int16)->nameWithVarNames = "u16x3(val : i16)"_c;
    Symbol::Resolved(&UInt16x3_splat_Int16)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt16, UInt16, UInt16
    UInt16x3_ctor0_arg0_UInt16.name = "arg0"_c;
    UInt16x3_ctor0_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x3_ctor0_arg1_UInt16.name = "arg1"_c;
    UInt16x3_ctor0_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x3_ctor0_arg2_UInt16.name = "arg2"_c;
    UInt16x3_ctor0_arg2_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x3_ctor0.name = "u16x3"_c;
    UInt16x3_ctor0.compileTime = true;
    UInt16x3_ctor0.backendIndex = 713;
    UInt16x3_ctor0.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_ctor0.parameters = UInt16x3_ctor0_args;
    Symbol::Resolved(&UInt16x3_ctor0_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_ctor0_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_ctor0_arg2_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_ctor0)->signature = "u16x3 u16x3(u16,u16,u16)"_c;
    Symbol::Resolved(&UInt16x3_ctor0)->name = "u16x3(u16,u16,u16)"_c;
    Symbol::Resolved(&UInt16x3_ctor0)->nameWithVarNames = "u16x3(arg0 : u16, arg1 : u16, arg2 : u16)"_c;
    Symbol::Resolved(&UInt16x3_ctor0)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt16x2, UInt16
    UInt16x3_ctor1_arg0_UInt16x2.name = "arg0"_c;
    UInt16x3_ctor1_arg0_UInt16x2.type = Type::FullType{ UInt16x2Type.name };
    UInt16x3_ctor1_arg1_UInt16.name = "arg1"_c;
    UInt16x3_ctor1_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x3_ctor1.name = "u16x3"_c;
    UInt16x3_ctor1.compileTime = true;
    UInt16x3_ctor1.backendIndex = 714;
    UInt16x3_ctor1.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_ctor1.parameters = UInt16x3_ctor1_args;
    Symbol::Resolved(&UInt16x3_ctor1_arg0_UInt16x2)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x3_ctor1_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_ctor1)->signature = "u16x3 u16x3(u16x2,u16)"_c;
    Symbol::Resolved(&UInt16x3_ctor1)->name = "u16x3(u16x2,u16)"_c;
    Symbol::Resolved(&UInt16x3_ctor1)->nameWithVarNames = "u16x3(arg0 : u16x2, arg1 : u16)"_c;
    Symbol::Resolved(&UInt16x3_ctor1)->returnTypeSymbol = &UInt16x3Type;

    /// u16x3 with UInt16, UInt16x2
    UInt16x3_ctor2_arg0_UInt16.name = "arg0"_c;
    UInt16x3_ctor2_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x3_ctor2_arg1_UInt16x2.name = "arg1"_c;
    UInt16x3_ctor2_arg1_UInt16x2.type = Type::FullType{ UInt16x2Type.name };
    UInt16x3_ctor2.name = "u16x3"_c;
    UInt16x3_ctor2.compileTime = true;
    UInt16x3_ctor2.backendIndex = 715;
    UInt16x3_ctor2.returnType = Type::FullType { UInt16x3Type.name };
    UInt16x3_ctor2.parameters = UInt16x3_ctor2_args;
    Symbol::Resolved(&UInt16x3_ctor2_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x3_ctor2_arg1_UInt16x2)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x3_ctor2)->signature = "u16x3 u16x3(u16,u16x2)"_c;
    Symbol::Resolved(&UInt16x3_ctor2)->name = "u16x3(u16,u16x2)"_c;
    Symbol::Resolved(&UInt16x3_ctor2)->nameWithVarNames = "u16x3(arg0 : u16, arg1 : u16x2)"_c;
    Symbol::Resolved(&UInt16x3_ctor2)->returnTypeSymbol = &UInt16x3Type;

    /// i16x3 with Float32x3
    Int16x3_from_Float32x3_arg.name = "val"_c;
    Int16x3_from_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    Int16x3_from_Float32x3.documentation = "Convert from f32x3 to i16x3"_c;
    Int16x3_from_Float32x3.name = "i16x3"_c;
    Int16x3_from_Float32x3.compileTime = true;
    Int16x3_from_Float32x3.backendIndex = 748;
    Int16x3_from_Float32x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_from_Float32x3.parameters = Int16x3_from_Float32x3_args;
    Symbol::Resolved(&Int16x3_from_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Int16x3_from_Float32x3)->signature = "i16x3 i16x3(f32x3)"_c;
    Symbol::Resolved(&Int16x3_from_Float32x3)->name = "i16x3(f32x3)"_c;
    Symbol::Resolved(&Int16x3_from_Float32x3)->nameWithVarNames = "i16x3(val : f32x3)"_c;
    Symbol::Resolved(&Int16x3_from_Float32x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Float32
    Int16x3_splat_Float32_arg.name = "val"_c;
    Int16x3_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int16x3_splat_Float32.documentation = "Splat f32 to i16x3"_c;
    Int16x3_splat_Float32.name = "i16x3"_c;
    Int16x3_splat_Float32.compileTime = true;
    Int16x3_splat_Float32.backendIndex = 749;
    Int16x3_splat_Float32.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_Float32.parameters = Int16x3_splat_Float32_args;
    Symbol::Resolved(&Int16x3_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16x3_splat_Float32)->signature = "i16x3 i16x3(f32)"_c;
    Symbol::Resolved(&Int16x3_splat_Float32)->name = "i16x3(f32)"_c;
    Symbol::Resolved(&Int16x3_splat_Float32)->nameWithVarNames = "i16x3(val : f32)"_c;
    Symbol::Resolved(&Int16x3_splat_Float32)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with UInt32x3
    Int16x3_from_UInt32x3_arg.name = "val"_c;
    Int16x3_from_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    Int16x3_from_UInt32x3.documentation = "Convert from u32x3 to i16x3"_c;
    Int16x3_from_UInt32x3.name = "i16x3"_c;
    Int16x3_from_UInt32x3.compileTime = true;
    Int16x3_from_UInt32x3.backendIndex = 750;
    Int16x3_from_UInt32x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_from_UInt32x3.parameters = Int16x3_from_UInt32x3_args;
    Symbol::Resolved(&Int16x3_from_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&Int16x3_from_UInt32x3)->signature = "i16x3 i16x3(u32x3)"_c;
    Symbol::Resolved(&Int16x3_from_UInt32x3)->name = "i16x3(u32x3)"_c;
    Symbol::Resolved(&Int16x3_from_UInt32x3)->nameWithVarNames = "i16x3(val : u32x3)"_c;
    Symbol::Resolved(&Int16x3_from_UInt32x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with UInt32
    Int16x3_splat_UInt32_arg.name = "val"_c;
    Int16x3_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16x3_splat_UInt32.documentation = "Splat u32 to i16x3"_c;
    Int16x3_splat_UInt32.name = "i16x3"_c;
    Int16x3_splat_UInt32.compileTime = true;
    Int16x3_splat_UInt32.backendIndex = 751;
    Int16x3_splat_UInt32.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_UInt32.parameters = Int16x3_splat_UInt32_args;
    Symbol::Resolved(&Int16x3_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x3_splat_UInt32)->signature = "i16x3 i16x3(u32)"_c;
    Symbol::Resolved(&Int16x3_splat_UInt32)->name = "i16x3(u32)"_c;
    Symbol::Resolved(&Int16x3_splat_UInt32)->nameWithVarNames = "i16x3(val : u32)"_c;
    Symbol::Resolved(&Int16x3_splat_UInt32)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int32x3
    Int16x3_from_Int32x3_arg.name = "val"_c;
    Int16x3_from_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    Int16x3_from_Int32x3.documentation = "Convert from i32x3 to i16x3"_c;
    Int16x3_from_Int32x3.name = "i16x3"_c;
    Int16x3_from_Int32x3.compileTime = true;
    Int16x3_from_Int32x3.backendIndex = 752;
    Int16x3_from_Int32x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_from_Int32x3.parameters = Int16x3_from_Int32x3_args;
    Symbol::Resolved(&Int16x3_from_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int16x3_from_Int32x3)->signature = "i16x3 i16x3(i32x3)"_c;
    Symbol::Resolved(&Int16x3_from_Int32x3)->name = "i16x3(i32x3)"_c;
    Symbol::Resolved(&Int16x3_from_Int32x3)->nameWithVarNames = "i16x3(val : i32x3)"_c;
    Symbol::Resolved(&Int16x3_from_Int32x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int32
    Int16x3_splat_Int32_arg.name = "val"_c;
    Int16x3_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16x3_splat_Int32.documentation = "Splat i32 to i16x3"_c;
    Int16x3_splat_Int32.name = "i16x3"_c;
    Int16x3_splat_Int32.compileTime = true;
    Int16x3_splat_Int32.backendIndex = 753;
    Int16x3_splat_Int32.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_Int32.parameters = Int16x3_splat_Int32_args;
    Symbol::Resolved(&Int16x3_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x3_splat_Int32)->signature = "i16x3 i16x3(i32)"_c;
    Symbol::Resolved(&Int16x3_splat_Int32)->name = "i16x3(i32)"_c;
    Symbol::Resolved(&Int16x3_splat_Int32)->nameWithVarNames = "i16x3(val : i32)"_c;
    Symbol::Resolved(&Int16x3_splat_Int32)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Bool8x3
    Int16x3_from_Bool8x3_arg.name = "val"_c;
    Int16x3_from_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    Int16x3_from_Bool8x3.documentation = "Convert from b8x3 to i16x3"_c;
    Int16x3_from_Bool8x3.name = "i16x3"_c;
    Int16x3_from_Bool8x3.compileTime = true;
    Int16x3_from_Bool8x3.backendIndex = 754;
    Int16x3_from_Bool8x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_from_Bool8x3.parameters = Int16x3_from_Bool8x3_args;
    Symbol::Resolved(&Int16x3_from_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Int16x3_from_Bool8x3)->signature = "i16x3 i16x3(b8x3)"_c;
    Symbol::Resolved(&Int16x3_from_Bool8x3)->name = "i16x3(b8x3)"_c;
    Symbol::Resolved(&Int16x3_from_Bool8x3)->nameWithVarNames = "i16x3(val : b8x3)"_c;
    Symbol::Resolved(&Int16x3_from_Bool8x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Bool8
    Int16x3_splat_Bool8_arg.name = "val"_c;
    Int16x3_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Int16x3_splat_Bool8.documentation = "Splat b8 to i16x3"_c;
    Int16x3_splat_Bool8.name = "i16x3"_c;
    Int16x3_splat_Bool8.compileTime = true;
    Int16x3_splat_Bool8.backendIndex = 755;
    Int16x3_splat_Bool8.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_Bool8.parameters = Int16x3_splat_Bool8_args;
    Symbol::Resolved(&Int16x3_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Int16x3_splat_Bool8)->signature = "i16x3 i16x3(b8)"_c;
    Symbol::Resolved(&Int16x3_splat_Bool8)->name = "i16x3(b8)"_c;
    Symbol::Resolved(&Int16x3_splat_Bool8)->nameWithVarNames = "i16x3(val : b8)"_c;
    Symbol::Resolved(&Int16x3_splat_Bool8)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Float16x3
    Int16x3_from_Float16x3_arg.name = "val"_c;
    Int16x3_from_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    Int16x3_from_Float16x3.documentation = "Convert from f16x3 to i16x3"_c;
    Int16x3_from_Float16x3.name = "i16x3"_c;
    Int16x3_from_Float16x3.compileTime = true;
    Int16x3_from_Float16x3.backendIndex = 756;
    Int16x3_from_Float16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_from_Float16x3.parameters = Int16x3_from_Float16x3_args;
    Symbol::Resolved(&Int16x3_from_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Int16x3_from_Float16x3)->signature = "i16x3 i16x3(f16x3)"_c;
    Symbol::Resolved(&Int16x3_from_Float16x3)->name = "i16x3(f16x3)"_c;
    Symbol::Resolved(&Int16x3_from_Float16x3)->nameWithVarNames = "i16x3(val : f16x3)"_c;
    Symbol::Resolved(&Int16x3_from_Float16x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Float16
    Int16x3_splat_Float16_arg.name = "val"_c;
    Int16x3_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int16x3_splat_Float16.documentation = "Splat f16 to i16x3"_c;
    Int16x3_splat_Float16.name = "i16x3"_c;
    Int16x3_splat_Float16.compileTime = true;
    Int16x3_splat_Float16.backendIndex = 757;
    Int16x3_splat_Float16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_Float16.parameters = Int16x3_splat_Float16_args;
    Symbol::Resolved(&Int16x3_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x3_splat_Float16)->signature = "i16x3 i16x3(f16)"_c;
    Symbol::Resolved(&Int16x3_splat_Float16)->name = "i16x3(f16)"_c;
    Symbol::Resolved(&Int16x3_splat_Float16)->nameWithVarNames = "i16x3(val : f16)"_c;
    Symbol::Resolved(&Int16x3_splat_Float16)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with UInt16x3
    Int16x3_from_UInt16x3_arg.name = "val"_c;
    Int16x3_from_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    Int16x3_from_UInt16x3.documentation = "Convert from u16x3 to i16x3"_c;
    Int16x3_from_UInt16x3.name = "i16x3"_c;
    Int16x3_from_UInt16x3.compileTime = true;
    Int16x3_from_UInt16x3.backendIndex = 758;
    Int16x3_from_UInt16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_from_UInt16x3.parameters = Int16x3_from_UInt16x3_args;
    Symbol::Resolved(&Int16x3_from_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&Int16x3_from_UInt16x3)->signature = "i16x3 i16x3(u16x3)"_c;
    Symbol::Resolved(&Int16x3_from_UInt16x3)->name = "i16x3(u16x3)"_c;
    Symbol::Resolved(&Int16x3_from_UInt16x3)->nameWithVarNames = "i16x3(val : u16x3)"_c;
    Symbol::Resolved(&Int16x3_from_UInt16x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with UInt16
    Int16x3_splat_UInt16_arg.name = "val"_c;
    Int16x3_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x3_splat_UInt16.documentation = "Splat u16 to i16x3"_c;
    Int16x3_splat_UInt16.name = "i16x3"_c;
    Int16x3_splat_UInt16.compileTime = true;
    Int16x3_splat_UInt16.backendIndex = 759;
    Int16x3_splat_UInt16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_UInt16.parameters = Int16x3_splat_UInt16_args;
    Symbol::Resolved(&Int16x3_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x3_splat_UInt16)->signature = "i16x3 i16x3(u16)"_c;
    Symbol::Resolved(&Int16x3_splat_UInt16)->name = "i16x3(u16)"_c;
    Symbol::Resolved(&Int16x3_splat_UInt16)->nameWithVarNames = "i16x3(val : u16)"_c;
    Symbol::Resolved(&Int16x3_splat_UInt16)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int16x3
    Int16x3_from_Int16x3_arg.name = "val"_c;
    Int16x3_from_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    Int16x3_from_Int16x3.documentation = "Convert from i16x3 to i16x3"_c;
    Int16x3_from_Int16x3.name = "i16x3"_c;
    Int16x3_from_Int16x3.compileTime = true;
    Int16x3_from_Int16x3.backendIndex = 760;
    Int16x3_from_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_from_Int16x3.parameters = Int16x3_from_Int16x3_args;
    Symbol::Resolved(&Int16x3_from_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x3_from_Int16x3)->signature = "i16x3 i16x3(i16x3)"_c;
    Symbol::Resolved(&Int16x3_from_Int16x3)->name = "i16x3(i16x3)"_c;
    Symbol::Resolved(&Int16x3_from_Int16x3)->nameWithVarNames = "i16x3(val : i16x3)"_c;
    Symbol::Resolved(&Int16x3_from_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int16
    Int16x3_splat_Int16_arg.name = "val"_c;
    Int16x3_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x3_splat_Int16.documentation = "Splat i16 to i16x3"_c;
    Int16x3_splat_Int16.name = "i16x3"_c;
    Int16x3_splat_Int16.compileTime = true;
    Int16x3_splat_Int16.backendIndex = 761;
    Int16x3_splat_Int16.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_splat_Int16.parameters = Int16x3_splat_Int16_args;
    Symbol::Resolved(&Int16x3_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_splat_Int16)->signature = "i16x3 i16x3(i16)"_c;
    Symbol::Resolved(&Int16x3_splat_Int16)->name = "i16x3(i16)"_c;
    Symbol::Resolved(&Int16x3_splat_Int16)->nameWithVarNames = "i16x3(val : i16)"_c;
    Symbol::Resolved(&Int16x3_splat_Int16)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int16, Int16, Int16
    Int16x3_ctor0_arg0_Int16.name = "arg0"_c;
    Int16x3_ctor0_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x3_ctor0_arg1_Int16.name = "arg1"_c;
    Int16x3_ctor0_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x3_ctor0_arg2_Int16.name = "arg2"_c;
    Int16x3_ctor0_arg2_Int16.type = Type::FullType{ Int16Type.name };
    Int16x3_ctor0.name = "i16x3"_c;
    Int16x3_ctor0.compileTime = true;
    Int16x3_ctor0.backendIndex = 762;
    Int16x3_ctor0.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_ctor0.parameters = Int16x3_ctor0_args;
    Symbol::Resolved(&Int16x3_ctor0_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_ctor0_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_ctor0_arg2_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_ctor0)->signature = "i16x3 i16x3(i16,i16,i16)"_c;
    Symbol::Resolved(&Int16x3_ctor0)->name = "i16x3(i16,i16,i16)"_c;
    Symbol::Resolved(&Int16x3_ctor0)->nameWithVarNames = "i16x3(arg0 : i16, arg1 : i16, arg2 : i16)"_c;
    Symbol::Resolved(&Int16x3_ctor0)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int16x2, Int16
    Int16x3_ctor1_arg0_Int16x2.name = "arg0"_c;
    Int16x3_ctor1_arg0_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x3_ctor1_arg1_Int16.name = "arg1"_c;
    Int16x3_ctor1_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x3_ctor1.name = "i16x3"_c;
    Int16x3_ctor1.compileTime = true;
    Int16x3_ctor1.backendIndex = 763;
    Int16x3_ctor1.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_ctor1.parameters = Int16x3_ctor1_args;
    Symbol::Resolved(&Int16x3_ctor1_arg0_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x3_ctor1_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_ctor1)->signature = "i16x3 i16x3(i16x2,i16)"_c;
    Symbol::Resolved(&Int16x3_ctor1)->name = "i16x3(i16x2,i16)"_c;
    Symbol::Resolved(&Int16x3_ctor1)->nameWithVarNames = "i16x3(arg0 : i16x2, arg1 : i16)"_c;
    Symbol::Resolved(&Int16x3_ctor1)->returnTypeSymbol = &Int16x3Type;

    /// i16x3 with Int16, Int16x2
    Int16x3_ctor2_arg0_Int16.name = "arg0"_c;
    Int16x3_ctor2_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x3_ctor2_arg1_Int16x2.name = "arg1"_c;
    Int16x3_ctor2_arg1_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x3_ctor2.name = "i16x3"_c;
    Int16x3_ctor2.compileTime = true;
    Int16x3_ctor2.backendIndex = 764;
    Int16x3_ctor2.returnType = Type::FullType { Int16x3Type.name };
    Int16x3_ctor2.parameters = Int16x3_ctor2_args;
    Symbol::Resolved(&Int16x3_ctor2_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x3_ctor2_arg1_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x3_ctor2)->signature = "i16x3 i16x3(i16,i16x2)"_c;
    Symbol::Resolved(&Int16x3_ctor2)->name = "i16x3(i16,i16x2)"_c;
    Symbol::Resolved(&Int16x3_ctor2)->nameWithVarNames = "i16x3(arg0 : i16, arg1 : i16x2)"_c;
    Symbol::Resolved(&Int16x3_ctor2)->returnTypeSymbol = &Int16x3Type;

    /// f32x4 with Float32x4
    Float32x4_from_Float32x4_arg.name = "val"_c;
    Float32x4_from_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float32x4_from_Float32x4.documentation = "Convert from f32x4 to f32x4"_c;
    Float32x4_from_Float32x4.name = "f32x4"_c;
    Float32x4_from_Float32x4.compileTime = true;
    Float32x4_from_Float32x4.backendIndex = 797;
    Float32x4_from_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_from_Float32x4.parameters = Float32x4_from_Float32x4_args;
    Symbol::Resolved(&Float32x4_from_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4_from_Float32x4)->signature = "f32x4 f32x4(f32x4)"_c;
    Symbol::Resolved(&Float32x4_from_Float32x4)->name = "f32x4(f32x4)"_c;
    Symbol::Resolved(&Float32x4_from_Float32x4)->nameWithVarNames = "f32x4(val : f32x4)"_c;
    Symbol::Resolved(&Float32x4_from_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32
    Float32x4_splat_Float32_arg.name = "val"_c;
    Float32x4_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float32x4_splat_Float32.documentation = "Splat f32 to f32x4"_c;
    Float32x4_splat_Float32.name = "f32x4"_c;
    Float32x4_splat_Float32.compileTime = true;
    Float32x4_splat_Float32.backendIndex = 798;
    Float32x4_splat_Float32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_Float32.parameters = Float32x4_splat_Float32_args;
    Symbol::Resolved(&Float32x4_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_splat_Float32)->signature = "f32x4 f32x4(f32)"_c;
    Symbol::Resolved(&Float32x4_splat_Float32)->name = "f32x4(f32)"_c;
    Symbol::Resolved(&Float32x4_splat_Float32)->nameWithVarNames = "f32x4(val : f32)"_c;
    Symbol::Resolved(&Float32x4_splat_Float32)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with UInt32x4
    Float32x4_from_UInt32x4_arg.name = "val"_c;
    Float32x4_from_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    Float32x4_from_UInt32x4.documentation = "Convert from u32x4 to f32x4"_c;
    Float32x4_from_UInt32x4.name = "f32x4"_c;
    Float32x4_from_UInt32x4.compileTime = true;
    Float32x4_from_UInt32x4.backendIndex = 799;
    Float32x4_from_UInt32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_from_UInt32x4.parameters = Float32x4_from_UInt32x4_args;
    Symbol::Resolved(&Float32x4_from_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&Float32x4_from_UInt32x4)->signature = "f32x4 f32x4(u32x4)"_c;
    Symbol::Resolved(&Float32x4_from_UInt32x4)->name = "f32x4(u32x4)"_c;
    Symbol::Resolved(&Float32x4_from_UInt32x4)->nameWithVarNames = "f32x4(val : u32x4)"_c;
    Symbol::Resolved(&Float32x4_from_UInt32x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with UInt32
    Float32x4_splat_UInt32_arg.name = "val"_c;
    Float32x4_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float32x4_splat_UInt32.documentation = "Splat u32 to f32x4"_c;
    Float32x4_splat_UInt32.name = "f32x4"_c;
    Float32x4_splat_UInt32.compileTime = true;
    Float32x4_splat_UInt32.backendIndex = 800;
    Float32x4_splat_UInt32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_UInt32.parameters = Float32x4_splat_UInt32_args;
    Symbol::Resolved(&Float32x4_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float32x4_splat_UInt32)->signature = "f32x4 f32x4(u32)"_c;
    Symbol::Resolved(&Float32x4_splat_UInt32)->name = "f32x4(u32)"_c;
    Symbol::Resolved(&Float32x4_splat_UInt32)->nameWithVarNames = "f32x4(val : u32)"_c;
    Symbol::Resolved(&Float32x4_splat_UInt32)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Int32x4
    Float32x4_from_Int32x4_arg.name = "val"_c;
    Float32x4_from_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Float32x4_from_Int32x4.documentation = "Convert from i32x4 to f32x4"_c;
    Float32x4_from_Int32x4.name = "f32x4"_c;
    Float32x4_from_Int32x4.compileTime = true;
    Float32x4_from_Int32x4.backendIndex = 801;
    Float32x4_from_Int32x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_from_Int32x4.parameters = Float32x4_from_Int32x4_args;
    Symbol::Resolved(&Float32x4_from_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Float32x4_from_Int32x4)->signature = "f32x4 f32x4(i32x4)"_c;
    Symbol::Resolved(&Float32x4_from_Int32x4)->name = "f32x4(i32x4)"_c;
    Symbol::Resolved(&Float32x4_from_Int32x4)->nameWithVarNames = "f32x4(val : i32x4)"_c;
    Symbol::Resolved(&Float32x4_from_Int32x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Int32
    Float32x4_splat_Int32_arg.name = "val"_c;
    Float32x4_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float32x4_splat_Int32.documentation = "Splat i32 to f32x4"_c;
    Float32x4_splat_Int32.name = "f32x4"_c;
    Float32x4_splat_Int32.compileTime = true;
    Float32x4_splat_Int32.backendIndex = 802;
    Float32x4_splat_Int32.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_Int32.parameters = Float32x4_splat_Int32_args;
    Symbol::Resolved(&Float32x4_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float32x4_splat_Int32)->signature = "f32x4 f32x4(i32)"_c;
    Symbol::Resolved(&Float32x4_splat_Int32)->name = "f32x4(i32)"_c;
    Symbol::Resolved(&Float32x4_splat_Int32)->nameWithVarNames = "f32x4(val : i32)"_c;
    Symbol::Resolved(&Float32x4_splat_Int32)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Bool8x4
    Float32x4_from_Bool8x4_arg.name = "val"_c;
    Float32x4_from_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Float32x4_from_Bool8x4.documentation = "Convert from b8x4 to f32x4"_c;
    Float32x4_from_Bool8x4.name = "f32x4"_c;
    Float32x4_from_Bool8x4.compileTime = true;
    Float32x4_from_Bool8x4.backendIndex = 803;
    Float32x4_from_Bool8x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_from_Bool8x4.parameters = Float32x4_from_Bool8x4_args;
    Symbol::Resolved(&Float32x4_from_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Float32x4_from_Bool8x4)->signature = "f32x4 f32x4(b8x4)"_c;
    Symbol::Resolved(&Float32x4_from_Bool8x4)->name = "f32x4(b8x4)"_c;
    Symbol::Resolved(&Float32x4_from_Bool8x4)->nameWithVarNames = "f32x4(val : b8x4)"_c;
    Symbol::Resolved(&Float32x4_from_Bool8x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Bool8
    Float32x4_splat_Bool8_arg.name = "val"_c;
    Float32x4_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Float32x4_splat_Bool8.documentation = "Splat b8 to f32x4"_c;
    Float32x4_splat_Bool8.name = "f32x4"_c;
    Float32x4_splat_Bool8.compileTime = true;
    Float32x4_splat_Bool8.backendIndex = 804;
    Float32x4_splat_Bool8.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_Bool8.parameters = Float32x4_splat_Bool8_args;
    Symbol::Resolved(&Float32x4_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Float32x4_splat_Bool8)->signature = "f32x4 f32x4(b8)"_c;
    Symbol::Resolved(&Float32x4_splat_Bool8)->name = "f32x4(b8)"_c;
    Symbol::Resolved(&Float32x4_splat_Bool8)->nameWithVarNames = "f32x4(val : b8)"_c;
    Symbol::Resolved(&Float32x4_splat_Bool8)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float16x4
    Float32x4_from_Float16x4_arg.name = "val"_c;
    Float32x4_from_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float32x4_from_Float16x4.documentation = "Convert from f16x4 to f32x4"_c;
    Float32x4_from_Float16x4.name = "f32x4"_c;
    Float32x4_from_Float16x4.compileTime = true;
    Float32x4_from_Float16x4.backendIndex = 805;
    Float32x4_from_Float16x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_from_Float16x4.parameters = Float32x4_from_Float16x4_args;
    Symbol::Resolved(&Float32x4_from_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float32x4_from_Float16x4)->signature = "f32x4 f32x4(f16x4)"_c;
    Symbol::Resolved(&Float32x4_from_Float16x4)->name = "f32x4(f16x4)"_c;
    Symbol::Resolved(&Float32x4_from_Float16x4)->nameWithVarNames = "f32x4(val : f16x4)"_c;
    Symbol::Resolved(&Float32x4_from_Float16x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float16
    Float32x4_splat_Float16_arg.name = "val"_c;
    Float32x4_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float32x4_splat_Float16.documentation = "Splat f16 to f32x4"_c;
    Float32x4_splat_Float16.name = "f32x4"_c;
    Float32x4_splat_Float16.compileTime = true;
    Float32x4_splat_Float16.backendIndex = 806;
    Float32x4_splat_Float16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_Float16.parameters = Float32x4_splat_Float16_args;
    Symbol::Resolved(&Float32x4_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float32x4_splat_Float16)->signature = "f32x4 f32x4(f16)"_c;
    Symbol::Resolved(&Float32x4_splat_Float16)->name = "f32x4(f16)"_c;
    Symbol::Resolved(&Float32x4_splat_Float16)->nameWithVarNames = "f32x4(val : f16)"_c;
    Symbol::Resolved(&Float32x4_splat_Float16)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with UInt16x4
    Float32x4_from_UInt16x4_arg.name = "val"_c;
    Float32x4_from_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    Float32x4_from_UInt16x4.documentation = "Convert from u16x4 to f32x4"_c;
    Float32x4_from_UInt16x4.name = "f32x4"_c;
    Float32x4_from_UInt16x4.compileTime = true;
    Float32x4_from_UInt16x4.backendIndex = 807;
    Float32x4_from_UInt16x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_from_UInt16x4.parameters = Float32x4_from_UInt16x4_args;
    Symbol::Resolved(&Float32x4_from_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&Float32x4_from_UInt16x4)->signature = "f32x4 f32x4(u16x4)"_c;
    Symbol::Resolved(&Float32x4_from_UInt16x4)->name = "f32x4(u16x4)"_c;
    Symbol::Resolved(&Float32x4_from_UInt16x4)->nameWithVarNames = "f32x4(val : u16x4)"_c;
    Symbol::Resolved(&Float32x4_from_UInt16x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with UInt16
    Float32x4_splat_UInt16_arg.name = "val"_c;
    Float32x4_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float32x4_splat_UInt16.documentation = "Splat u16 to f32x4"_c;
    Float32x4_splat_UInt16.name = "f32x4"_c;
    Float32x4_splat_UInt16.compileTime = true;
    Float32x4_splat_UInt16.backendIndex = 808;
    Float32x4_splat_UInt16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_UInt16.parameters = Float32x4_splat_UInt16_args;
    Symbol::Resolved(&Float32x4_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float32x4_splat_UInt16)->signature = "f32x4 f32x4(u16)"_c;
    Symbol::Resolved(&Float32x4_splat_UInt16)->name = "f32x4(u16)"_c;
    Symbol::Resolved(&Float32x4_splat_UInt16)->nameWithVarNames = "f32x4(val : u16)"_c;
    Symbol::Resolved(&Float32x4_splat_UInt16)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Int16x4
    Float32x4_from_Int16x4_arg.name = "val"_c;
    Float32x4_from_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Float32x4_from_Int16x4.documentation = "Convert from i16x4 to f32x4"_c;
    Float32x4_from_Int16x4.name = "f32x4"_c;
    Float32x4_from_Int16x4.compileTime = true;
    Float32x4_from_Int16x4.backendIndex = 809;
    Float32x4_from_Int16x4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_from_Int16x4.parameters = Float32x4_from_Int16x4_args;
    Symbol::Resolved(&Float32x4_from_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Float32x4_from_Int16x4)->signature = "f32x4 f32x4(i16x4)"_c;
    Symbol::Resolved(&Float32x4_from_Int16x4)->name = "f32x4(i16x4)"_c;
    Symbol::Resolved(&Float32x4_from_Int16x4)->nameWithVarNames = "f32x4(val : i16x4)"_c;
    Symbol::Resolved(&Float32x4_from_Int16x4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Int16
    Float32x4_splat_Int16_arg.name = "val"_c;
    Float32x4_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float32x4_splat_Int16.documentation = "Splat i16 to f32x4"_c;
    Float32x4_splat_Int16.name = "f32x4"_c;
    Float32x4_splat_Int16.compileTime = true;
    Float32x4_splat_Int16.backendIndex = 810;
    Float32x4_splat_Int16.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_splat_Int16.parameters = Float32x4_splat_Int16_args;
    Symbol::Resolved(&Float32x4_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float32x4_splat_Int16)->signature = "f32x4 f32x4(i16)"_c;
    Symbol::Resolved(&Float32x4_splat_Int16)->name = "f32x4(i16)"_c;
    Symbol::Resolved(&Float32x4_splat_Int16)->nameWithVarNames = "f32x4(val : i16)"_c;
    Symbol::Resolved(&Float32x4_splat_Int16)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32, Float32, Float32, Float32
    Float32x4_ctor0_arg0_Float32.name = "arg0"_c;
    Float32x4_ctor0_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor0_arg1_Float32.name = "arg1"_c;
    Float32x4_ctor0_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor0_arg2_Float32.name = "arg2"_c;
    Float32x4_ctor0_arg2_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor0_arg3_Float32.name = "arg3"_c;
    Float32x4_ctor0_arg3_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor0.name = "f32x4"_c;
    Float32x4_ctor0.compileTime = true;
    Float32x4_ctor0.backendIndex = 811;
    Float32x4_ctor0.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor0.parameters = Float32x4_ctor0_args;
    Symbol::Resolved(&Float32x4_ctor0_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor0_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor0_arg2_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor0_arg3_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor0)->signature = "f32x4 f32x4(f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x4_ctor0)->name = "f32x4(f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x4_ctor0)->nameWithVarNames = "f32x4(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32)"_c;
    Symbol::Resolved(&Float32x4_ctor0)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32x2, Float32, Float32
    Float32x4_ctor1_arg0_Float32x2.name = "arg0"_c;
    Float32x4_ctor1_arg0_Float32x2.type = Type::FullType{ Float32x2Type.name };
    Float32x4_ctor1_arg1_Float32.name = "arg1"_c;
    Float32x4_ctor1_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor1_arg2_Float32.name = "arg2"_c;
    Float32x4_ctor1_arg2_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor1.name = "f32x4"_c;
    Float32x4_ctor1.compileTime = true;
    Float32x4_ctor1.backendIndex = 812;
    Float32x4_ctor1.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor1.parameters = Float32x4_ctor1_args;
    Symbol::Resolved(&Float32x4_ctor1_arg0_Float32x2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4_ctor1_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor1_arg2_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor1)->signature = "f32x4 f32x4(f32x2,f32,f32)"_c;
    Symbol::Resolved(&Float32x4_ctor1)->name = "f32x4(f32x2,f32,f32)"_c;
    Symbol::Resolved(&Float32x4_ctor1)->nameWithVarNames = "f32x4(arg0 : f32x2, arg1 : f32, arg2 : f32)"_c;
    Symbol::Resolved(&Float32x4_ctor1)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32, Float32x2, Float32
    Float32x4_ctor2_arg0_Float32.name = "arg0"_c;
    Float32x4_ctor2_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor2_arg1_Float32x2.name = "arg1"_c;
    Float32x4_ctor2_arg1_Float32x2.type = Type::FullType{ Float32x2Type.name };
    Float32x4_ctor2_arg2_Float32.name = "arg2"_c;
    Float32x4_ctor2_arg2_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor2.name = "f32x4"_c;
    Float32x4_ctor2.compileTime = true;
    Float32x4_ctor2.backendIndex = 813;
    Float32x4_ctor2.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor2.parameters = Float32x4_ctor2_args;
    Symbol::Resolved(&Float32x4_ctor2_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor2_arg1_Float32x2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4_ctor2_arg2_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor2)->signature = "f32x4 f32x4(f32,f32x2,f32)"_c;
    Symbol::Resolved(&Float32x4_ctor2)->name = "f32x4(f32,f32x2,f32)"_c;
    Symbol::Resolved(&Float32x4_ctor2)->nameWithVarNames = "f32x4(arg0 : f32, arg1 : f32x2, arg2 : f32)"_c;
    Symbol::Resolved(&Float32x4_ctor2)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32, Float32, Float32x2
    Float32x4_ctor3_arg0_Float32.name = "arg0"_c;
    Float32x4_ctor3_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor3_arg1_Float32.name = "arg1"_c;
    Float32x4_ctor3_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor3_arg2_Float32x2.name = "arg2"_c;
    Float32x4_ctor3_arg2_Float32x2.type = Type::FullType{ Float32x2Type.name };
    Float32x4_ctor3.name = "f32x4"_c;
    Float32x4_ctor3.compileTime = true;
    Float32x4_ctor3.backendIndex = 814;
    Float32x4_ctor3.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor3.parameters = Float32x4_ctor3_args;
    Symbol::Resolved(&Float32x4_ctor3_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor3_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor3_arg2_Float32x2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4_ctor3)->signature = "f32x4 f32x4(f32,f32,f32x2)"_c;
    Symbol::Resolved(&Float32x4_ctor3)->name = "f32x4(f32,f32,f32x2)"_c;
    Symbol::Resolved(&Float32x4_ctor3)->nameWithVarNames = "f32x4(arg0 : f32, arg1 : f32, arg2 : f32x2)"_c;
    Symbol::Resolved(&Float32x4_ctor3)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32x2, Float32x2
    Float32x4_ctor4_arg0_Float32x2.name = "arg0"_c;
    Float32x4_ctor4_arg0_Float32x2.type = Type::FullType{ Float32x2Type.name };
    Float32x4_ctor4_arg1_Float32x2.name = "arg1"_c;
    Float32x4_ctor4_arg1_Float32x2.type = Type::FullType{ Float32x2Type.name };
    Float32x4_ctor4.name = "f32x4"_c;
    Float32x4_ctor4.compileTime = true;
    Float32x4_ctor4.backendIndex = 815;
    Float32x4_ctor4.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor4.parameters = Float32x4_ctor4_args;
    Symbol::Resolved(&Float32x4_ctor4_arg0_Float32x2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4_ctor4_arg1_Float32x2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4_ctor4)->signature = "f32x4 f32x4(f32x2,f32x2)"_c;
    Symbol::Resolved(&Float32x4_ctor4)->name = "f32x4(f32x2,f32x2)"_c;
    Symbol::Resolved(&Float32x4_ctor4)->nameWithVarNames = "f32x4(arg0 : f32x2, arg1 : f32x2)"_c;
    Symbol::Resolved(&Float32x4_ctor4)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32x3, Float32
    Float32x4_ctor5_arg0_Float32x3.name = "arg0"_c;
    Float32x4_ctor5_arg0_Float32x3.type = Type::FullType{ Float32x3Type.name };
    Float32x4_ctor5_arg1_Float32.name = "arg1"_c;
    Float32x4_ctor5_arg1_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor5.name = "f32x4"_c;
    Float32x4_ctor5.compileTime = true;
    Float32x4_ctor5.backendIndex = 816;
    Float32x4_ctor5.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor5.parameters = Float32x4_ctor5_args;
    Symbol::Resolved(&Float32x4_ctor5_arg0_Float32x3)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4_ctor5_arg1_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor5)->signature = "f32x4 f32x4(f32x3,f32)"_c;
    Symbol::Resolved(&Float32x4_ctor5)->name = "f32x4(f32x3,f32)"_c;
    Symbol::Resolved(&Float32x4_ctor5)->nameWithVarNames = "f32x4(arg0 : f32x3, arg1 : f32)"_c;
    Symbol::Resolved(&Float32x4_ctor5)->returnTypeSymbol = &Float32x4Type;

    /// f32x4 with Float32, Float32x3
    Float32x4_ctor6_arg0_Float32.name = "arg0"_c;
    Float32x4_ctor6_arg0_Float32.type = Type::FullType{ Float32Type.name };
    Float32x4_ctor6_arg1_Float32x3.name = "arg1"_c;
    Float32x4_ctor6_arg1_Float32x3.type = Type::FullType{ Float32x3Type.name };
    Float32x4_ctor6.name = "f32x4"_c;
    Float32x4_ctor6.compileTime = true;
    Float32x4_ctor6.backendIndex = 817;
    Float32x4_ctor6.returnType = Type::FullType { Float32x4Type.name };
    Float32x4_ctor6.parameters = Float32x4_ctor6_args;
    Symbol::Resolved(&Float32x4_ctor6_arg0_Float32)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4_ctor6_arg1_Float32x3)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4_ctor6)->signature = "f32x4 f32x4(f32,f32x3)"_c;
    Symbol::Resolved(&Float32x4_ctor6)->name = "f32x4(f32,f32x3)"_c;
    Symbol::Resolved(&Float32x4_ctor6)->nameWithVarNames = "f32x4(arg0 : f32, arg1 : f32x3)"_c;
    Symbol::Resolved(&Float32x4_ctor6)->returnTypeSymbol = &Float32x4Type;

    /// u32x4 with Float32x4
    UInt32x4_from_Float32x4_arg.name = "val"_c;
    UInt32x4_from_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    UInt32x4_from_Float32x4.documentation = "Convert from f32x4 to u32x4"_c;
    UInt32x4_from_Float32x4.name = "u32x4"_c;
    UInt32x4_from_Float32x4.compileTime = true;
    UInt32x4_from_Float32x4.backendIndex = 843;
    UInt32x4_from_Float32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_from_Float32x4.parameters = UInt32x4_from_Float32x4_args;
    Symbol::Resolved(&UInt32x4_from_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&UInt32x4_from_Float32x4)->signature = "u32x4 u32x4(f32x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Float32x4)->name = "u32x4(f32x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Float32x4)->nameWithVarNames = "u32x4(val : f32x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Float32x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Float32
    UInt32x4_splat_Float32_arg.name = "val"_c;
    UInt32x4_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt32x4_splat_Float32.documentation = "Splat f32 to u32x4"_c;
    UInt32x4_splat_Float32.name = "u32x4"_c;
    UInt32x4_splat_Float32.compileTime = true;
    UInt32x4_splat_Float32.backendIndex = 844;
    UInt32x4_splat_Float32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_Float32.parameters = UInt32x4_splat_Float32_args;
    Symbol::Resolved(&UInt32x4_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt32x4_splat_Float32)->signature = "u32x4 u32x4(f32)"_c;
    Symbol::Resolved(&UInt32x4_splat_Float32)->name = "u32x4(f32)"_c;
    Symbol::Resolved(&UInt32x4_splat_Float32)->nameWithVarNames = "u32x4(val : f32)"_c;
    Symbol::Resolved(&UInt32x4_splat_Float32)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32x4
    UInt32x4_from_UInt32x4_arg.name = "val"_c;
    UInt32x4_from_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt32x4_from_UInt32x4.documentation = "Convert from u32x4 to u32x4"_c;
    UInt32x4_from_UInt32x4.name = "u32x4"_c;
    UInt32x4_from_UInt32x4.compileTime = true;
    UInt32x4_from_UInt32x4.backendIndex = 845;
    UInt32x4_from_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_from_UInt32x4.parameters = UInt32x4_from_UInt32x4_args;
    Symbol::Resolved(&UInt32x4_from_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt32x4_from_UInt32x4)->signature = "u32x4 u32x4(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_from_UInt32x4)->name = "u32x4(u32x4)"_c;
    Symbol::Resolved(&UInt32x4_from_UInt32x4)->nameWithVarNames = "u32x4(val : u32x4)"_c;
    Symbol::Resolved(&UInt32x4_from_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32
    UInt32x4_splat_UInt32_arg.name = "val"_c;
    UInt32x4_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt32x4_splat_UInt32.documentation = "Splat u32 to u32x4"_c;
    UInt32x4_splat_UInt32.name = "u32x4"_c;
    UInt32x4_splat_UInt32.compileTime = true;
    UInt32x4_splat_UInt32.backendIndex = 846;
    UInt32x4_splat_UInt32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_UInt32.parameters = UInt32x4_splat_UInt32_args;
    Symbol::Resolved(&UInt32x4_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_splat_UInt32)->signature = "u32x4 u32x4(u32)"_c;
    Symbol::Resolved(&UInt32x4_splat_UInt32)->name = "u32x4(u32)"_c;
    Symbol::Resolved(&UInt32x4_splat_UInt32)->nameWithVarNames = "u32x4(val : u32)"_c;
    Symbol::Resolved(&UInt32x4_splat_UInt32)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Int32x4
    UInt32x4_from_Int32x4_arg.name = "val"_c;
    UInt32x4_from_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    UInt32x4_from_Int32x4.documentation = "Convert from i32x4 to u32x4"_c;
    UInt32x4_from_Int32x4.name = "u32x4"_c;
    UInt32x4_from_Int32x4.compileTime = true;
    UInt32x4_from_Int32x4.backendIndex = 847;
    UInt32x4_from_Int32x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_from_Int32x4.parameters = UInt32x4_from_Int32x4_args;
    Symbol::Resolved(&UInt32x4_from_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&UInt32x4_from_Int32x4)->signature = "u32x4 u32x4(i32x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Int32x4)->name = "u32x4(i32x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Int32x4)->nameWithVarNames = "u32x4(val : i32x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Int32x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Int32
    UInt32x4_splat_Int32_arg.name = "val"_c;
    UInt32x4_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt32x4_splat_Int32.documentation = "Splat i32 to u32x4"_c;
    UInt32x4_splat_Int32.name = "u32x4"_c;
    UInt32x4_splat_Int32.compileTime = true;
    UInt32x4_splat_Int32.backendIndex = 848;
    UInt32x4_splat_Int32.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_Int32.parameters = UInt32x4_splat_Int32_args;
    Symbol::Resolved(&UInt32x4_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt32x4_splat_Int32)->signature = "u32x4 u32x4(i32)"_c;
    Symbol::Resolved(&UInt32x4_splat_Int32)->name = "u32x4(i32)"_c;
    Symbol::Resolved(&UInt32x4_splat_Int32)->nameWithVarNames = "u32x4(val : i32)"_c;
    Symbol::Resolved(&UInt32x4_splat_Int32)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Bool8x4
    UInt32x4_from_Bool8x4_arg.name = "val"_c;
    UInt32x4_from_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    UInt32x4_from_Bool8x4.documentation = "Convert from b8x4 to u32x4"_c;
    UInt32x4_from_Bool8x4.name = "u32x4"_c;
    UInt32x4_from_Bool8x4.compileTime = true;
    UInt32x4_from_Bool8x4.backendIndex = 849;
    UInt32x4_from_Bool8x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_from_Bool8x4.parameters = UInt32x4_from_Bool8x4_args;
    Symbol::Resolved(&UInt32x4_from_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&UInt32x4_from_Bool8x4)->signature = "u32x4 u32x4(b8x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Bool8x4)->name = "u32x4(b8x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Bool8x4)->nameWithVarNames = "u32x4(val : b8x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Bool8x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Bool8
    UInt32x4_splat_Bool8_arg.name = "val"_c;
    UInt32x4_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    UInt32x4_splat_Bool8.documentation = "Splat b8 to u32x4"_c;
    UInt32x4_splat_Bool8.name = "u32x4"_c;
    UInt32x4_splat_Bool8.compileTime = true;
    UInt32x4_splat_Bool8.backendIndex = 850;
    UInt32x4_splat_Bool8.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_Bool8.parameters = UInt32x4_splat_Bool8_args;
    Symbol::Resolved(&UInt32x4_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&UInt32x4_splat_Bool8)->signature = "u32x4 u32x4(b8)"_c;
    Symbol::Resolved(&UInt32x4_splat_Bool8)->name = "u32x4(b8)"_c;
    Symbol::Resolved(&UInt32x4_splat_Bool8)->nameWithVarNames = "u32x4(val : b8)"_c;
    Symbol::Resolved(&UInt32x4_splat_Bool8)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Float16x4
    UInt32x4_from_Float16x4_arg.name = "val"_c;
    UInt32x4_from_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    UInt32x4_from_Float16x4.documentation = "Convert from f16x4 to u32x4"_c;
    UInt32x4_from_Float16x4.name = "u32x4"_c;
    UInt32x4_from_Float16x4.compileTime = true;
    UInt32x4_from_Float16x4.backendIndex = 851;
    UInt32x4_from_Float16x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_from_Float16x4.parameters = UInt32x4_from_Float16x4_args;
    Symbol::Resolved(&UInt32x4_from_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&UInt32x4_from_Float16x4)->signature = "u32x4 u32x4(f16x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Float16x4)->name = "u32x4(f16x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Float16x4)->nameWithVarNames = "u32x4(val : f16x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Float16x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Float16
    UInt32x4_splat_Float16_arg.name = "val"_c;
    UInt32x4_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt32x4_splat_Float16.documentation = "Splat f16 to u32x4"_c;
    UInt32x4_splat_Float16.name = "u32x4"_c;
    UInt32x4_splat_Float16.compileTime = true;
    UInt32x4_splat_Float16.backendIndex = 852;
    UInt32x4_splat_Float16.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_Float16.parameters = UInt32x4_splat_Float16_args;
    Symbol::Resolved(&UInt32x4_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt32x4_splat_Float16)->signature = "u32x4 u32x4(f16)"_c;
    Symbol::Resolved(&UInt32x4_splat_Float16)->name = "u32x4(f16)"_c;
    Symbol::Resolved(&UInt32x4_splat_Float16)->nameWithVarNames = "u32x4(val : f16)"_c;
    Symbol::Resolved(&UInt32x4_splat_Float16)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt16x4
    UInt32x4_from_UInt16x4_arg.name = "val"_c;
    UInt32x4_from_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt32x4_from_UInt16x4.documentation = "Convert from u16x4 to u32x4"_c;
    UInt32x4_from_UInt16x4.name = "u32x4"_c;
    UInt32x4_from_UInt16x4.compileTime = true;
    UInt32x4_from_UInt16x4.backendIndex = 853;
    UInt32x4_from_UInt16x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_from_UInt16x4.parameters = UInt32x4_from_UInt16x4_args;
    Symbol::Resolved(&UInt32x4_from_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt32x4_from_UInt16x4)->signature = "u32x4 u32x4(u16x4)"_c;
    Symbol::Resolved(&UInt32x4_from_UInt16x4)->name = "u32x4(u16x4)"_c;
    Symbol::Resolved(&UInt32x4_from_UInt16x4)->nameWithVarNames = "u32x4(val : u16x4)"_c;
    Symbol::Resolved(&UInt32x4_from_UInt16x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt16
    UInt32x4_splat_UInt16_arg.name = "val"_c;
    UInt32x4_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt32x4_splat_UInt16.documentation = "Splat u16 to u32x4"_c;
    UInt32x4_splat_UInt16.name = "u32x4"_c;
    UInt32x4_splat_UInt16.compileTime = true;
    UInt32x4_splat_UInt16.backendIndex = 854;
    UInt32x4_splat_UInt16.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_UInt16.parameters = UInt32x4_splat_UInt16_args;
    Symbol::Resolved(&UInt32x4_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt32x4_splat_UInt16)->signature = "u32x4 u32x4(u16)"_c;
    Symbol::Resolved(&UInt32x4_splat_UInt16)->name = "u32x4(u16)"_c;
    Symbol::Resolved(&UInt32x4_splat_UInt16)->nameWithVarNames = "u32x4(val : u16)"_c;
    Symbol::Resolved(&UInt32x4_splat_UInt16)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Int16x4
    UInt32x4_from_Int16x4_arg.name = "val"_c;
    UInt32x4_from_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    UInt32x4_from_Int16x4.documentation = "Convert from i16x4 to u32x4"_c;
    UInt32x4_from_Int16x4.name = "u32x4"_c;
    UInt32x4_from_Int16x4.compileTime = true;
    UInt32x4_from_Int16x4.backendIndex = 855;
    UInt32x4_from_Int16x4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_from_Int16x4.parameters = UInt32x4_from_Int16x4_args;
    Symbol::Resolved(&UInt32x4_from_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&UInt32x4_from_Int16x4)->signature = "u32x4 u32x4(i16x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Int16x4)->name = "u32x4(i16x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Int16x4)->nameWithVarNames = "u32x4(val : i16x4)"_c;
    Symbol::Resolved(&UInt32x4_from_Int16x4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with Int16
    UInt32x4_splat_Int16_arg.name = "val"_c;
    UInt32x4_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt32x4_splat_Int16.documentation = "Splat i16 to u32x4"_c;
    UInt32x4_splat_Int16.name = "u32x4"_c;
    UInt32x4_splat_Int16.compileTime = true;
    UInt32x4_splat_Int16.backendIndex = 856;
    UInt32x4_splat_Int16.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_splat_Int16.parameters = UInt32x4_splat_Int16_args;
    Symbol::Resolved(&UInt32x4_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt32x4_splat_Int16)->signature = "u32x4 u32x4(i16)"_c;
    Symbol::Resolved(&UInt32x4_splat_Int16)->name = "u32x4(i16)"_c;
    Symbol::Resolved(&UInt32x4_splat_Int16)->nameWithVarNames = "u32x4(val : i16)"_c;
    Symbol::Resolved(&UInt32x4_splat_Int16)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32, UInt32, UInt32, UInt32
    UInt32x4_ctor0_arg0_UInt32.name = "arg0"_c;
    UInt32x4_ctor0_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor0_arg1_UInt32.name = "arg1"_c;
    UInt32x4_ctor0_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor0_arg2_UInt32.name = "arg2"_c;
    UInt32x4_ctor0_arg2_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor0_arg3_UInt32.name = "arg3"_c;
    UInt32x4_ctor0_arg3_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor0.name = "u32x4"_c;
    UInt32x4_ctor0.compileTime = true;
    UInt32x4_ctor0.backendIndex = 857;
    UInt32x4_ctor0.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor0.parameters = UInt32x4_ctor0_args;
    Symbol::Resolved(&UInt32x4_ctor0_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor0_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor0_arg2_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor0_arg3_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor0)->signature = "u32x4 u32x4(u32,u32,u32,u32)"_c;
    Symbol::Resolved(&UInt32x4_ctor0)->name = "u32x4(u32,u32,u32,u32)"_c;
    Symbol::Resolved(&UInt32x4_ctor0)->nameWithVarNames = "u32x4(arg0 : u32, arg1 : u32, arg2 : u32, arg3 : u32)"_c;
    Symbol::Resolved(&UInt32x4_ctor0)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32x2, UInt32, UInt32
    UInt32x4_ctor1_arg0_UInt32x2.name = "arg0"_c;
    UInt32x4_ctor1_arg0_UInt32x2.type = Type::FullType{ UInt32x2Type.name };
    UInt32x4_ctor1_arg1_UInt32.name = "arg1"_c;
    UInt32x4_ctor1_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor1_arg2_UInt32.name = "arg2"_c;
    UInt32x4_ctor1_arg2_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor1.name = "u32x4"_c;
    UInt32x4_ctor1.compileTime = true;
    UInt32x4_ctor1.backendIndex = 858;
    UInt32x4_ctor1.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor1.parameters = UInt32x4_ctor1_args;
    Symbol::Resolved(&UInt32x4_ctor1_arg0_UInt32x2)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x4_ctor1_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor1_arg2_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor1)->signature = "u32x4 u32x4(u32x2,u32,u32)"_c;
    Symbol::Resolved(&UInt32x4_ctor1)->name = "u32x4(u32x2,u32,u32)"_c;
    Symbol::Resolved(&UInt32x4_ctor1)->nameWithVarNames = "u32x4(arg0 : u32x2, arg1 : u32, arg2 : u32)"_c;
    Symbol::Resolved(&UInt32x4_ctor1)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32, UInt32x2, UInt32
    UInt32x4_ctor2_arg0_UInt32.name = "arg0"_c;
    UInt32x4_ctor2_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor2_arg1_UInt32x2.name = "arg1"_c;
    UInt32x4_ctor2_arg1_UInt32x2.type = Type::FullType{ UInt32x2Type.name };
    UInt32x4_ctor2_arg2_UInt32.name = "arg2"_c;
    UInt32x4_ctor2_arg2_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor2.name = "u32x4"_c;
    UInt32x4_ctor2.compileTime = true;
    UInt32x4_ctor2.backendIndex = 859;
    UInt32x4_ctor2.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor2.parameters = UInt32x4_ctor2_args;
    Symbol::Resolved(&UInt32x4_ctor2_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor2_arg1_UInt32x2)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x4_ctor2_arg2_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor2)->signature = "u32x4 u32x4(u32,u32x2,u32)"_c;
    Symbol::Resolved(&UInt32x4_ctor2)->name = "u32x4(u32,u32x2,u32)"_c;
    Symbol::Resolved(&UInt32x4_ctor2)->nameWithVarNames = "u32x4(arg0 : u32, arg1 : u32x2, arg2 : u32)"_c;
    Symbol::Resolved(&UInt32x4_ctor2)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32, UInt32, UInt32x2
    UInt32x4_ctor3_arg0_UInt32.name = "arg0"_c;
    UInt32x4_ctor3_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor3_arg1_UInt32.name = "arg1"_c;
    UInt32x4_ctor3_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor3_arg2_UInt32x2.name = "arg2"_c;
    UInt32x4_ctor3_arg2_UInt32x2.type = Type::FullType{ UInt32x2Type.name };
    UInt32x4_ctor3.name = "u32x4"_c;
    UInt32x4_ctor3.compileTime = true;
    UInt32x4_ctor3.backendIndex = 860;
    UInt32x4_ctor3.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor3.parameters = UInt32x4_ctor3_args;
    Symbol::Resolved(&UInt32x4_ctor3_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor3_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor3_arg2_UInt32x2)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x4_ctor3)->signature = "u32x4 u32x4(u32,u32,u32x2)"_c;
    Symbol::Resolved(&UInt32x4_ctor3)->name = "u32x4(u32,u32,u32x2)"_c;
    Symbol::Resolved(&UInt32x4_ctor3)->nameWithVarNames = "u32x4(arg0 : u32, arg1 : u32, arg2 : u32x2)"_c;
    Symbol::Resolved(&UInt32x4_ctor3)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32x2, UInt32x2
    UInt32x4_ctor4_arg0_UInt32x2.name = "arg0"_c;
    UInt32x4_ctor4_arg0_UInt32x2.type = Type::FullType{ UInt32x2Type.name };
    UInt32x4_ctor4_arg1_UInt32x2.name = "arg1"_c;
    UInt32x4_ctor4_arg1_UInt32x2.type = Type::FullType{ UInt32x2Type.name };
    UInt32x4_ctor4.name = "u32x4"_c;
    UInt32x4_ctor4.compileTime = true;
    UInt32x4_ctor4.backendIndex = 861;
    UInt32x4_ctor4.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor4.parameters = UInt32x4_ctor4_args;
    Symbol::Resolved(&UInt32x4_ctor4_arg0_UInt32x2)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x4_ctor4_arg1_UInt32x2)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&UInt32x4_ctor4)->signature = "u32x4 u32x4(u32x2,u32x2)"_c;
    Symbol::Resolved(&UInt32x4_ctor4)->name = "u32x4(u32x2,u32x2)"_c;
    Symbol::Resolved(&UInt32x4_ctor4)->nameWithVarNames = "u32x4(arg0 : u32x2, arg1 : u32x2)"_c;
    Symbol::Resolved(&UInt32x4_ctor4)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32x3, UInt32
    UInt32x4_ctor5_arg0_UInt32x3.name = "arg0"_c;
    UInt32x4_ctor5_arg0_UInt32x3.type = Type::FullType{ UInt32x3Type.name };
    UInt32x4_ctor5_arg1_UInt32.name = "arg1"_c;
    UInt32x4_ctor5_arg1_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor5.name = "u32x4"_c;
    UInt32x4_ctor5.compileTime = true;
    UInt32x4_ctor5.backendIndex = 862;
    UInt32x4_ctor5.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor5.parameters = UInt32x4_ctor5_args;
    Symbol::Resolved(&UInt32x4_ctor5_arg0_UInt32x3)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x4_ctor5_arg1_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor5)->signature = "u32x4 u32x4(u32x3,u32)"_c;
    Symbol::Resolved(&UInt32x4_ctor5)->name = "u32x4(u32x3,u32)"_c;
    Symbol::Resolved(&UInt32x4_ctor5)->nameWithVarNames = "u32x4(arg0 : u32x3, arg1 : u32)"_c;
    Symbol::Resolved(&UInt32x4_ctor5)->returnTypeSymbol = &UInt32x4Type;

    /// u32x4 with UInt32, UInt32x3
    UInt32x4_ctor6_arg0_UInt32.name = "arg0"_c;
    UInt32x4_ctor6_arg0_UInt32.type = Type::FullType{ UInt32Type.name };
    UInt32x4_ctor6_arg1_UInt32x3.name = "arg1"_c;
    UInt32x4_ctor6_arg1_UInt32x3.type = Type::FullType{ UInt32x3Type.name };
    UInt32x4_ctor6.name = "u32x4"_c;
    UInt32x4_ctor6.compileTime = true;
    UInt32x4_ctor6.backendIndex = 863;
    UInt32x4_ctor6.returnType = Type::FullType { UInt32x4Type.name };
    UInt32x4_ctor6.parameters = UInt32x4_ctor6_args;
    Symbol::Resolved(&UInt32x4_ctor6_arg0_UInt32)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt32x4_ctor6_arg1_UInt32x3)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&UInt32x4_ctor6)->signature = "u32x4 u32x4(u32,u32x3)"_c;
    Symbol::Resolved(&UInt32x4_ctor6)->name = "u32x4(u32,u32x3)"_c;
    Symbol::Resolved(&UInt32x4_ctor6)->nameWithVarNames = "u32x4(arg0 : u32, arg1 : u32x3)"_c;
    Symbol::Resolved(&UInt32x4_ctor6)->returnTypeSymbol = &UInt32x4Type;

    /// i32x4 with Float32x4
    Int32x4_from_Float32x4_arg.name = "val"_c;
    Int32x4_from_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Int32x4_from_Float32x4.documentation = "Convert from f32x4 to i32x4"_c;
    Int32x4_from_Float32x4.name = "i32x4"_c;
    Int32x4_from_Float32x4.compileTime = true;
    Int32x4_from_Float32x4.backendIndex = 896;
    Int32x4_from_Float32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_from_Float32x4.parameters = Int32x4_from_Float32x4_args;
    Symbol::Resolved(&Int32x4_from_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Int32x4_from_Float32x4)->signature = "i32x4 i32x4(f32x4)"_c;
    Symbol::Resolved(&Int32x4_from_Float32x4)->name = "i32x4(f32x4)"_c;
    Symbol::Resolved(&Int32x4_from_Float32x4)->nameWithVarNames = "i32x4(val : f32x4)"_c;
    Symbol::Resolved(&Int32x4_from_Float32x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Float32
    Int32x4_splat_Float32_arg.name = "val"_c;
    Int32x4_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int32x4_splat_Float32.documentation = "Splat f32 to i32x4"_c;
    Int32x4_splat_Float32.name = "i32x4"_c;
    Int32x4_splat_Float32.compileTime = true;
    Int32x4_splat_Float32.backendIndex = 897;
    Int32x4_splat_Float32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_Float32.parameters = Int32x4_splat_Float32_args;
    Symbol::Resolved(&Int32x4_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int32x4_splat_Float32)->signature = "i32x4 i32x4(f32)"_c;
    Symbol::Resolved(&Int32x4_splat_Float32)->name = "i32x4(f32)"_c;
    Symbol::Resolved(&Int32x4_splat_Float32)->nameWithVarNames = "i32x4(val : f32)"_c;
    Symbol::Resolved(&Int32x4_splat_Float32)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with UInt32x4
    Int32x4_from_UInt32x4_arg.name = "val"_c;
    Int32x4_from_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    Int32x4_from_UInt32x4.documentation = "Convert from u32x4 to i32x4"_c;
    Int32x4_from_UInt32x4.name = "i32x4"_c;
    Int32x4_from_UInt32x4.compileTime = true;
    Int32x4_from_UInt32x4.backendIndex = 898;
    Int32x4_from_UInt32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_from_UInt32x4.parameters = Int32x4_from_UInt32x4_args;
    Symbol::Resolved(&Int32x4_from_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&Int32x4_from_UInt32x4)->signature = "i32x4 i32x4(u32x4)"_c;
    Symbol::Resolved(&Int32x4_from_UInt32x4)->name = "i32x4(u32x4)"_c;
    Symbol::Resolved(&Int32x4_from_UInt32x4)->nameWithVarNames = "i32x4(val : u32x4)"_c;
    Symbol::Resolved(&Int32x4_from_UInt32x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with UInt32
    Int32x4_splat_UInt32_arg.name = "val"_c;
    Int32x4_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int32x4_splat_UInt32.documentation = "Splat u32 to i32x4"_c;
    Int32x4_splat_UInt32.name = "i32x4"_c;
    Int32x4_splat_UInt32.compileTime = true;
    Int32x4_splat_UInt32.backendIndex = 899;
    Int32x4_splat_UInt32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_UInt32.parameters = Int32x4_splat_UInt32_args;
    Symbol::Resolved(&Int32x4_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int32x4_splat_UInt32)->signature = "i32x4 i32x4(u32)"_c;
    Symbol::Resolved(&Int32x4_splat_UInt32)->name = "i32x4(u32)"_c;
    Symbol::Resolved(&Int32x4_splat_UInt32)->nameWithVarNames = "i32x4(val : u32)"_c;
    Symbol::Resolved(&Int32x4_splat_UInt32)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32x4
    Int32x4_from_Int32x4_arg.name = "val"_c;
    Int32x4_from_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int32x4_from_Int32x4.documentation = "Convert from i32x4 to i32x4"_c;
    Int32x4_from_Int32x4.name = "i32x4"_c;
    Int32x4_from_Int32x4.compileTime = true;
    Int32x4_from_Int32x4.backendIndex = 900;
    Int32x4_from_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_from_Int32x4.parameters = Int32x4_from_Int32x4_args;
    Symbol::Resolved(&Int32x4_from_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int32x4_from_Int32x4)->signature = "i32x4 i32x4(i32x4)"_c;
    Symbol::Resolved(&Int32x4_from_Int32x4)->name = "i32x4(i32x4)"_c;
    Symbol::Resolved(&Int32x4_from_Int32x4)->nameWithVarNames = "i32x4(val : i32x4)"_c;
    Symbol::Resolved(&Int32x4_from_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32
    Int32x4_splat_Int32_arg.name = "val"_c;
    Int32x4_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int32x4_splat_Int32.documentation = "Splat i32 to i32x4"_c;
    Int32x4_splat_Int32.name = "i32x4"_c;
    Int32x4_splat_Int32.compileTime = true;
    Int32x4_splat_Int32.backendIndex = 901;
    Int32x4_splat_Int32.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_Int32.parameters = Int32x4_splat_Int32_args;
    Symbol::Resolved(&Int32x4_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_splat_Int32)->signature = "i32x4 i32x4(i32)"_c;
    Symbol::Resolved(&Int32x4_splat_Int32)->name = "i32x4(i32)"_c;
    Symbol::Resolved(&Int32x4_splat_Int32)->nameWithVarNames = "i32x4(val : i32)"_c;
    Symbol::Resolved(&Int32x4_splat_Int32)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Bool8x4
    Int32x4_from_Bool8x4_arg.name = "val"_c;
    Int32x4_from_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Int32x4_from_Bool8x4.documentation = "Convert from b8x4 to i32x4"_c;
    Int32x4_from_Bool8x4.name = "i32x4"_c;
    Int32x4_from_Bool8x4.compileTime = true;
    Int32x4_from_Bool8x4.backendIndex = 902;
    Int32x4_from_Bool8x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_from_Bool8x4.parameters = Int32x4_from_Bool8x4_args;
    Symbol::Resolved(&Int32x4_from_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Int32x4_from_Bool8x4)->signature = "i32x4 i32x4(b8x4)"_c;
    Symbol::Resolved(&Int32x4_from_Bool8x4)->name = "i32x4(b8x4)"_c;
    Symbol::Resolved(&Int32x4_from_Bool8x4)->nameWithVarNames = "i32x4(val : b8x4)"_c;
    Symbol::Resolved(&Int32x4_from_Bool8x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Bool8
    Int32x4_splat_Bool8_arg.name = "val"_c;
    Int32x4_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Int32x4_splat_Bool8.documentation = "Splat b8 to i32x4"_c;
    Int32x4_splat_Bool8.name = "i32x4"_c;
    Int32x4_splat_Bool8.compileTime = true;
    Int32x4_splat_Bool8.backendIndex = 903;
    Int32x4_splat_Bool8.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_Bool8.parameters = Int32x4_splat_Bool8_args;
    Symbol::Resolved(&Int32x4_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Int32x4_splat_Bool8)->signature = "i32x4 i32x4(b8)"_c;
    Symbol::Resolved(&Int32x4_splat_Bool8)->name = "i32x4(b8)"_c;
    Symbol::Resolved(&Int32x4_splat_Bool8)->nameWithVarNames = "i32x4(val : b8)"_c;
    Symbol::Resolved(&Int32x4_splat_Bool8)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Float16x4
    Int32x4_from_Float16x4_arg.name = "val"_c;
    Int32x4_from_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Int32x4_from_Float16x4.documentation = "Convert from f16x4 to i32x4"_c;
    Int32x4_from_Float16x4.name = "i32x4"_c;
    Int32x4_from_Float16x4.compileTime = true;
    Int32x4_from_Float16x4.backendIndex = 904;
    Int32x4_from_Float16x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_from_Float16x4.parameters = Int32x4_from_Float16x4_args;
    Symbol::Resolved(&Int32x4_from_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Int32x4_from_Float16x4)->signature = "i32x4 i32x4(f16x4)"_c;
    Symbol::Resolved(&Int32x4_from_Float16x4)->name = "i32x4(f16x4)"_c;
    Symbol::Resolved(&Int32x4_from_Float16x4)->nameWithVarNames = "i32x4(val : f16x4)"_c;
    Symbol::Resolved(&Int32x4_from_Float16x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Float16
    Int32x4_splat_Float16_arg.name = "val"_c;
    Int32x4_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int32x4_splat_Float16.documentation = "Splat f16 to i32x4"_c;
    Int32x4_splat_Float16.name = "i32x4"_c;
    Int32x4_splat_Float16.compileTime = true;
    Int32x4_splat_Float16.backendIndex = 905;
    Int32x4_splat_Float16.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_Float16.parameters = Int32x4_splat_Float16_args;
    Symbol::Resolved(&Int32x4_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int32x4_splat_Float16)->signature = "i32x4 i32x4(f16)"_c;
    Symbol::Resolved(&Int32x4_splat_Float16)->name = "i32x4(f16)"_c;
    Symbol::Resolved(&Int32x4_splat_Float16)->nameWithVarNames = "i32x4(val : f16)"_c;
    Symbol::Resolved(&Int32x4_splat_Float16)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with UInt16x4
    Int32x4_from_UInt16x4_arg.name = "val"_c;
    Int32x4_from_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    Int32x4_from_UInt16x4.documentation = "Convert from u16x4 to i32x4"_c;
    Int32x4_from_UInt16x4.name = "i32x4"_c;
    Int32x4_from_UInt16x4.compileTime = true;
    Int32x4_from_UInt16x4.backendIndex = 906;
    Int32x4_from_UInt16x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_from_UInt16x4.parameters = Int32x4_from_UInt16x4_args;
    Symbol::Resolved(&Int32x4_from_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&Int32x4_from_UInt16x4)->signature = "i32x4 i32x4(u16x4)"_c;
    Symbol::Resolved(&Int32x4_from_UInt16x4)->name = "i32x4(u16x4)"_c;
    Symbol::Resolved(&Int32x4_from_UInt16x4)->nameWithVarNames = "i32x4(val : u16x4)"_c;
    Symbol::Resolved(&Int32x4_from_UInt16x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with UInt16
    Int32x4_splat_UInt16_arg.name = "val"_c;
    Int32x4_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int32x4_splat_UInt16.documentation = "Splat u16 to i32x4"_c;
    Int32x4_splat_UInt16.name = "i32x4"_c;
    Int32x4_splat_UInt16.compileTime = true;
    Int32x4_splat_UInt16.backendIndex = 907;
    Int32x4_splat_UInt16.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_UInt16.parameters = Int32x4_splat_UInt16_args;
    Symbol::Resolved(&Int32x4_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int32x4_splat_UInt16)->signature = "i32x4 i32x4(u16)"_c;
    Symbol::Resolved(&Int32x4_splat_UInt16)->name = "i32x4(u16)"_c;
    Symbol::Resolved(&Int32x4_splat_UInt16)->nameWithVarNames = "i32x4(val : u16)"_c;
    Symbol::Resolved(&Int32x4_splat_UInt16)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int16x4
    Int32x4_from_Int16x4_arg.name = "val"_c;
    Int32x4_from_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int32x4_from_Int16x4.documentation = "Convert from i16x4 to i32x4"_c;
    Int32x4_from_Int16x4.name = "i32x4"_c;
    Int32x4_from_Int16x4.compileTime = true;
    Int32x4_from_Int16x4.backendIndex = 908;
    Int32x4_from_Int16x4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_from_Int16x4.parameters = Int32x4_from_Int16x4_args;
    Symbol::Resolved(&Int32x4_from_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int32x4_from_Int16x4)->signature = "i32x4 i32x4(i16x4)"_c;
    Symbol::Resolved(&Int32x4_from_Int16x4)->name = "i32x4(i16x4)"_c;
    Symbol::Resolved(&Int32x4_from_Int16x4)->nameWithVarNames = "i32x4(val : i16x4)"_c;
    Symbol::Resolved(&Int32x4_from_Int16x4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int16
    Int32x4_splat_Int16_arg.name = "val"_c;
    Int32x4_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int32x4_splat_Int16.documentation = "Splat i16 to i32x4"_c;
    Int32x4_splat_Int16.name = "i32x4"_c;
    Int32x4_splat_Int16.compileTime = true;
    Int32x4_splat_Int16.backendIndex = 909;
    Int32x4_splat_Int16.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_splat_Int16.parameters = Int32x4_splat_Int16_args;
    Symbol::Resolved(&Int32x4_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int32x4_splat_Int16)->signature = "i32x4 i32x4(i16)"_c;
    Symbol::Resolved(&Int32x4_splat_Int16)->name = "i32x4(i16)"_c;
    Symbol::Resolved(&Int32x4_splat_Int16)->nameWithVarNames = "i32x4(val : i16)"_c;
    Symbol::Resolved(&Int32x4_splat_Int16)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32, Int32, Int32, Int32
    Int32x4_ctor0_arg0_Int32.name = "arg0"_c;
    Int32x4_ctor0_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor0_arg1_Int32.name = "arg1"_c;
    Int32x4_ctor0_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor0_arg2_Int32.name = "arg2"_c;
    Int32x4_ctor0_arg2_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor0_arg3_Int32.name = "arg3"_c;
    Int32x4_ctor0_arg3_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor0.name = "i32x4"_c;
    Int32x4_ctor0.compileTime = true;
    Int32x4_ctor0.backendIndex = 910;
    Int32x4_ctor0.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor0.parameters = Int32x4_ctor0_args;
    Symbol::Resolved(&Int32x4_ctor0_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor0_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor0_arg2_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor0_arg3_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor0)->signature = "i32x4 i32x4(i32,i32,i32,i32)"_c;
    Symbol::Resolved(&Int32x4_ctor0)->name = "i32x4(i32,i32,i32,i32)"_c;
    Symbol::Resolved(&Int32x4_ctor0)->nameWithVarNames = "i32x4(arg0 : i32, arg1 : i32, arg2 : i32, arg3 : i32)"_c;
    Symbol::Resolved(&Int32x4_ctor0)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32x2, Int32, Int32
    Int32x4_ctor1_arg0_Int32x2.name = "arg0"_c;
    Int32x4_ctor1_arg0_Int32x2.type = Type::FullType{ Int32x2Type.name };
    Int32x4_ctor1_arg1_Int32.name = "arg1"_c;
    Int32x4_ctor1_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor1_arg2_Int32.name = "arg2"_c;
    Int32x4_ctor1_arg2_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor1.name = "i32x4"_c;
    Int32x4_ctor1.compileTime = true;
    Int32x4_ctor1.backendIndex = 911;
    Int32x4_ctor1.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor1.parameters = Int32x4_ctor1_args;
    Symbol::Resolved(&Int32x4_ctor1_arg0_Int32x2)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x4_ctor1_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor1_arg2_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor1)->signature = "i32x4 i32x4(i32x2,i32,i32)"_c;
    Symbol::Resolved(&Int32x4_ctor1)->name = "i32x4(i32x2,i32,i32)"_c;
    Symbol::Resolved(&Int32x4_ctor1)->nameWithVarNames = "i32x4(arg0 : i32x2, arg1 : i32, arg2 : i32)"_c;
    Symbol::Resolved(&Int32x4_ctor1)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32, Int32x2, Int32
    Int32x4_ctor2_arg0_Int32.name = "arg0"_c;
    Int32x4_ctor2_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor2_arg1_Int32x2.name = "arg1"_c;
    Int32x4_ctor2_arg1_Int32x2.type = Type::FullType{ Int32x2Type.name };
    Int32x4_ctor2_arg2_Int32.name = "arg2"_c;
    Int32x4_ctor2_arg2_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor2.name = "i32x4"_c;
    Int32x4_ctor2.compileTime = true;
    Int32x4_ctor2.backendIndex = 912;
    Int32x4_ctor2.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor2.parameters = Int32x4_ctor2_args;
    Symbol::Resolved(&Int32x4_ctor2_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor2_arg1_Int32x2)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x4_ctor2_arg2_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor2)->signature = "i32x4 i32x4(i32,i32x2,i32)"_c;
    Symbol::Resolved(&Int32x4_ctor2)->name = "i32x4(i32,i32x2,i32)"_c;
    Symbol::Resolved(&Int32x4_ctor2)->nameWithVarNames = "i32x4(arg0 : i32, arg1 : i32x2, arg2 : i32)"_c;
    Symbol::Resolved(&Int32x4_ctor2)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32, Int32, Int32x2
    Int32x4_ctor3_arg0_Int32.name = "arg0"_c;
    Int32x4_ctor3_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor3_arg1_Int32.name = "arg1"_c;
    Int32x4_ctor3_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor3_arg2_Int32x2.name = "arg2"_c;
    Int32x4_ctor3_arg2_Int32x2.type = Type::FullType{ Int32x2Type.name };
    Int32x4_ctor3.name = "i32x4"_c;
    Int32x4_ctor3.compileTime = true;
    Int32x4_ctor3.backendIndex = 913;
    Int32x4_ctor3.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor3.parameters = Int32x4_ctor3_args;
    Symbol::Resolved(&Int32x4_ctor3_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor3_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor3_arg2_Int32x2)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x4_ctor3)->signature = "i32x4 i32x4(i32,i32,i32x2)"_c;
    Symbol::Resolved(&Int32x4_ctor3)->name = "i32x4(i32,i32,i32x2)"_c;
    Symbol::Resolved(&Int32x4_ctor3)->nameWithVarNames = "i32x4(arg0 : i32, arg1 : i32, arg2 : i32x2)"_c;
    Symbol::Resolved(&Int32x4_ctor3)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32x2, Int32x2
    Int32x4_ctor4_arg0_Int32x2.name = "arg0"_c;
    Int32x4_ctor4_arg0_Int32x2.type = Type::FullType{ Int32x2Type.name };
    Int32x4_ctor4_arg1_Int32x2.name = "arg1"_c;
    Int32x4_ctor4_arg1_Int32x2.type = Type::FullType{ Int32x2Type.name };
    Int32x4_ctor4.name = "i32x4"_c;
    Int32x4_ctor4.compileTime = true;
    Int32x4_ctor4.backendIndex = 914;
    Int32x4_ctor4.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor4.parameters = Int32x4_ctor4_args;
    Symbol::Resolved(&Int32x4_ctor4_arg0_Int32x2)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x4_ctor4_arg1_Int32x2)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&Int32x4_ctor4)->signature = "i32x4 i32x4(i32x2,i32x2)"_c;
    Symbol::Resolved(&Int32x4_ctor4)->name = "i32x4(i32x2,i32x2)"_c;
    Symbol::Resolved(&Int32x4_ctor4)->nameWithVarNames = "i32x4(arg0 : i32x2, arg1 : i32x2)"_c;
    Symbol::Resolved(&Int32x4_ctor4)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32x3, Int32
    Int32x4_ctor5_arg0_Int32x3.name = "arg0"_c;
    Int32x4_ctor5_arg0_Int32x3.type = Type::FullType{ Int32x3Type.name };
    Int32x4_ctor5_arg1_Int32.name = "arg1"_c;
    Int32x4_ctor5_arg1_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor5.name = "i32x4"_c;
    Int32x4_ctor5.compileTime = true;
    Int32x4_ctor5.backendIndex = 915;
    Int32x4_ctor5.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor5.parameters = Int32x4_ctor5_args;
    Symbol::Resolved(&Int32x4_ctor5_arg0_Int32x3)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x4_ctor5_arg1_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor5)->signature = "i32x4 i32x4(i32x3,i32)"_c;
    Symbol::Resolved(&Int32x4_ctor5)->name = "i32x4(i32x3,i32)"_c;
    Symbol::Resolved(&Int32x4_ctor5)->nameWithVarNames = "i32x4(arg0 : i32x3, arg1 : i32)"_c;
    Symbol::Resolved(&Int32x4_ctor5)->returnTypeSymbol = &Int32x4Type;

    /// i32x4 with Int32, Int32x3
    Int32x4_ctor6_arg0_Int32.name = "arg0"_c;
    Int32x4_ctor6_arg0_Int32.type = Type::FullType{ Int32Type.name };
    Int32x4_ctor6_arg1_Int32x3.name = "arg1"_c;
    Int32x4_ctor6_arg1_Int32x3.type = Type::FullType{ Int32x3Type.name };
    Int32x4_ctor6.name = "i32x4"_c;
    Int32x4_ctor6.compileTime = true;
    Int32x4_ctor6.backendIndex = 916;
    Int32x4_ctor6.returnType = Type::FullType { Int32x4Type.name };
    Int32x4_ctor6.parameters = Int32x4_ctor6_args;
    Symbol::Resolved(&Int32x4_ctor6_arg0_Int32)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int32x4_ctor6_arg1_Int32x3)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&Int32x4_ctor6)->signature = "i32x4 i32x4(i32,i32x3)"_c;
    Symbol::Resolved(&Int32x4_ctor6)->name = "i32x4(i32,i32x3)"_c;
    Symbol::Resolved(&Int32x4_ctor6)->nameWithVarNames = "i32x4(arg0 : i32, arg1 : i32x3)"_c;
    Symbol::Resolved(&Int32x4_ctor6)->returnTypeSymbol = &Int32x4Type;

    /// b8x4 with UInt32x4
    Bool8x4_from_UInt32x4_arg.name = "val"_c;
    Bool8x4_from_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    Bool8x4_from_UInt32x4.documentation = "Convert from u32x4 to b8x4"_c;
    Bool8x4_from_UInt32x4.name = "b8x4"_c;
    Bool8x4_from_UInt32x4.compileTime = true;
    Bool8x4_from_UInt32x4.backendIndex = 949;
    Bool8x4_from_UInt32x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_from_UInt32x4.parameters = Bool8x4_from_UInt32x4_args;
    Symbol::Resolved(&Bool8x4_from_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&Bool8x4_from_UInt32x4)->signature = "b8x4 b8x4(u32x4)"_c;
    Symbol::Resolved(&Bool8x4_from_UInt32x4)->name = "b8x4(u32x4)"_c;
    Symbol::Resolved(&Bool8x4_from_UInt32x4)->nameWithVarNames = "b8x4(val : u32x4)"_c;
    Symbol::Resolved(&Bool8x4_from_UInt32x4)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with UInt32
    Bool8x4_splat_UInt32_arg.name = "val"_c;
    Bool8x4_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Bool8x4_splat_UInt32.documentation = "Splat u32 to b8x4"_c;
    Bool8x4_splat_UInt32.name = "b8x4"_c;
    Bool8x4_splat_UInt32.compileTime = true;
    Bool8x4_splat_UInt32.backendIndex = 950;
    Bool8x4_splat_UInt32.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_splat_UInt32.parameters = Bool8x4_splat_UInt32_args;
    Symbol::Resolved(&Bool8x4_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Bool8x4_splat_UInt32)->signature = "b8x4 b8x4(u32)"_c;
    Symbol::Resolved(&Bool8x4_splat_UInt32)->name = "b8x4(u32)"_c;
    Symbol::Resolved(&Bool8x4_splat_UInt32)->nameWithVarNames = "b8x4(val : u32)"_c;
    Symbol::Resolved(&Bool8x4_splat_UInt32)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Int32x4
    Bool8x4_from_Int32x4_arg.name = "val"_c;
    Bool8x4_from_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Bool8x4_from_Int32x4.documentation = "Convert from i32x4 to b8x4"_c;
    Bool8x4_from_Int32x4.name = "b8x4"_c;
    Bool8x4_from_Int32x4.compileTime = true;
    Bool8x4_from_Int32x4.backendIndex = 951;
    Bool8x4_from_Int32x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_from_Int32x4.parameters = Bool8x4_from_Int32x4_args;
    Symbol::Resolved(&Bool8x4_from_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Bool8x4_from_Int32x4)->signature = "b8x4 b8x4(i32x4)"_c;
    Symbol::Resolved(&Bool8x4_from_Int32x4)->name = "b8x4(i32x4)"_c;
    Symbol::Resolved(&Bool8x4_from_Int32x4)->nameWithVarNames = "b8x4(val : i32x4)"_c;
    Symbol::Resolved(&Bool8x4_from_Int32x4)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Int32
    Bool8x4_splat_Int32_arg.name = "val"_c;
    Bool8x4_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Bool8x4_splat_Int32.documentation = "Splat i32 to b8x4"_c;
    Bool8x4_splat_Int32.name = "b8x4"_c;
    Bool8x4_splat_Int32.compileTime = true;
    Bool8x4_splat_Int32.backendIndex = 952;
    Bool8x4_splat_Int32.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_splat_Int32.parameters = Bool8x4_splat_Int32_args;
    Symbol::Resolved(&Bool8x4_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Bool8x4_splat_Int32)->signature = "b8x4 b8x4(i32)"_c;
    Symbol::Resolved(&Bool8x4_splat_Int32)->name = "b8x4(i32)"_c;
    Symbol::Resolved(&Bool8x4_splat_Int32)->nameWithVarNames = "b8x4(val : i32)"_c;
    Symbol::Resolved(&Bool8x4_splat_Int32)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8x4
    Bool8x4_from_Bool8x4_arg.name = "val"_c;
    Bool8x4_from_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Bool8x4_from_Bool8x4.documentation = "Convert from b8x4 to b8x4"_c;
    Bool8x4_from_Bool8x4.name = "b8x4"_c;
    Bool8x4_from_Bool8x4.compileTime = true;
    Bool8x4_from_Bool8x4.backendIndex = 953;
    Bool8x4_from_Bool8x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_from_Bool8x4.parameters = Bool8x4_from_Bool8x4_args;
    Symbol::Resolved(&Bool8x4_from_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Bool8x4_from_Bool8x4)->signature = "b8x4 b8x4(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_from_Bool8x4)->name = "b8x4(b8x4)"_c;
    Symbol::Resolved(&Bool8x4_from_Bool8x4)->nameWithVarNames = "b8x4(val : b8x4)"_c;
    Symbol::Resolved(&Bool8x4_from_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8
    Bool8x4_splat_Bool8_arg.name = "val"_c;
    Bool8x4_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Bool8x4_splat_Bool8.documentation = "Splat b8 to b8x4"_c;
    Bool8x4_splat_Bool8.name = "b8x4"_c;
    Bool8x4_splat_Bool8.compileTime = true;
    Bool8x4_splat_Bool8.backendIndex = 954;
    Bool8x4_splat_Bool8.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_splat_Bool8.parameters = Bool8x4_splat_Bool8_args;
    Symbol::Resolved(&Bool8x4_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_splat_Bool8)->signature = "b8x4 b8x4(b8)"_c;
    Symbol::Resolved(&Bool8x4_splat_Bool8)->name = "b8x4(b8)"_c;
    Symbol::Resolved(&Bool8x4_splat_Bool8)->nameWithVarNames = "b8x4(val : b8)"_c;
    Symbol::Resolved(&Bool8x4_splat_Bool8)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with UInt16x4
    Bool8x4_from_UInt16x4_arg.name = "val"_c;
    Bool8x4_from_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    Bool8x4_from_UInt16x4.documentation = "Convert from u16x4 to b8x4"_c;
    Bool8x4_from_UInt16x4.name = "b8x4"_c;
    Bool8x4_from_UInt16x4.compileTime = true;
    Bool8x4_from_UInt16x4.backendIndex = 955;
    Bool8x4_from_UInt16x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_from_UInt16x4.parameters = Bool8x4_from_UInt16x4_args;
    Symbol::Resolved(&Bool8x4_from_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&Bool8x4_from_UInt16x4)->signature = "b8x4 b8x4(u16x4)"_c;
    Symbol::Resolved(&Bool8x4_from_UInt16x4)->name = "b8x4(u16x4)"_c;
    Symbol::Resolved(&Bool8x4_from_UInt16x4)->nameWithVarNames = "b8x4(val : u16x4)"_c;
    Symbol::Resolved(&Bool8x4_from_UInt16x4)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with UInt16
    Bool8x4_splat_UInt16_arg.name = "val"_c;
    Bool8x4_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Bool8x4_splat_UInt16.documentation = "Splat u16 to b8x4"_c;
    Bool8x4_splat_UInt16.name = "b8x4"_c;
    Bool8x4_splat_UInt16.compileTime = true;
    Bool8x4_splat_UInt16.backendIndex = 956;
    Bool8x4_splat_UInt16.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_splat_UInt16.parameters = Bool8x4_splat_UInt16_args;
    Symbol::Resolved(&Bool8x4_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Bool8x4_splat_UInt16)->signature = "b8x4 b8x4(u16)"_c;
    Symbol::Resolved(&Bool8x4_splat_UInt16)->name = "b8x4(u16)"_c;
    Symbol::Resolved(&Bool8x4_splat_UInt16)->nameWithVarNames = "b8x4(val : u16)"_c;
    Symbol::Resolved(&Bool8x4_splat_UInt16)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Int16x4
    Bool8x4_from_Int16x4_arg.name = "val"_c;
    Bool8x4_from_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Bool8x4_from_Int16x4.documentation = "Convert from i16x4 to b8x4"_c;
    Bool8x4_from_Int16x4.name = "b8x4"_c;
    Bool8x4_from_Int16x4.compileTime = true;
    Bool8x4_from_Int16x4.backendIndex = 957;
    Bool8x4_from_Int16x4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_from_Int16x4.parameters = Bool8x4_from_Int16x4_args;
    Symbol::Resolved(&Bool8x4_from_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Bool8x4_from_Int16x4)->signature = "b8x4 b8x4(i16x4)"_c;
    Symbol::Resolved(&Bool8x4_from_Int16x4)->name = "b8x4(i16x4)"_c;
    Symbol::Resolved(&Bool8x4_from_Int16x4)->nameWithVarNames = "b8x4(val : i16x4)"_c;
    Symbol::Resolved(&Bool8x4_from_Int16x4)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Int16
    Bool8x4_splat_Int16_arg.name = "val"_c;
    Bool8x4_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Bool8x4_splat_Int16.documentation = "Splat i16 to b8x4"_c;
    Bool8x4_splat_Int16.name = "b8x4"_c;
    Bool8x4_splat_Int16.compileTime = true;
    Bool8x4_splat_Int16.backendIndex = 958;
    Bool8x4_splat_Int16.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_splat_Int16.parameters = Bool8x4_splat_Int16_args;
    Symbol::Resolved(&Bool8x4_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Bool8x4_splat_Int16)->signature = "b8x4 b8x4(i16)"_c;
    Symbol::Resolved(&Bool8x4_splat_Int16)->name = "b8x4(i16)"_c;
    Symbol::Resolved(&Bool8x4_splat_Int16)->nameWithVarNames = "b8x4(val : i16)"_c;
    Symbol::Resolved(&Bool8x4_splat_Int16)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8, Bool8, Bool8, Bool8
    Bool8x4_ctor0_arg0_Bool8.name = "arg0"_c;
    Bool8x4_ctor0_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor0_arg1_Bool8.name = "arg1"_c;
    Bool8x4_ctor0_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor0_arg2_Bool8.name = "arg2"_c;
    Bool8x4_ctor0_arg2_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor0_arg3_Bool8.name = "arg3"_c;
    Bool8x4_ctor0_arg3_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor0.name = "b8x4"_c;
    Bool8x4_ctor0.compileTime = true;
    Bool8x4_ctor0.backendIndex = 959;
    Bool8x4_ctor0.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor0.parameters = Bool8x4_ctor0_args;
    Symbol::Resolved(&Bool8x4_ctor0_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor0_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor0_arg2_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor0_arg3_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor0)->signature = "b8x4 b8x4(b8,b8,b8,b8)"_c;
    Symbol::Resolved(&Bool8x4_ctor0)->name = "b8x4(b8,b8,b8,b8)"_c;
    Symbol::Resolved(&Bool8x4_ctor0)->nameWithVarNames = "b8x4(arg0 : b8, arg1 : b8, arg2 : b8, arg3 : b8)"_c;
    Symbol::Resolved(&Bool8x4_ctor0)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8x2, Bool8, Bool8
    Bool8x4_ctor1_arg0_Bool8x2.name = "arg0"_c;
    Bool8x4_ctor1_arg0_Bool8x2.type = Type::FullType{ Bool8x2Type.name };
    Bool8x4_ctor1_arg1_Bool8.name = "arg1"_c;
    Bool8x4_ctor1_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor1_arg2_Bool8.name = "arg2"_c;
    Bool8x4_ctor1_arg2_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor1.name = "b8x4"_c;
    Bool8x4_ctor1.compileTime = true;
    Bool8x4_ctor1.backendIndex = 960;
    Bool8x4_ctor1.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor1.parameters = Bool8x4_ctor1_args;
    Symbol::Resolved(&Bool8x4_ctor1_arg0_Bool8x2)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x4_ctor1_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor1_arg2_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor1)->signature = "b8x4 b8x4(b8x2,b8,b8)"_c;
    Symbol::Resolved(&Bool8x4_ctor1)->name = "b8x4(b8x2,b8,b8)"_c;
    Symbol::Resolved(&Bool8x4_ctor1)->nameWithVarNames = "b8x4(arg0 : b8x2, arg1 : b8, arg2 : b8)"_c;
    Symbol::Resolved(&Bool8x4_ctor1)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8, Bool8x2, Bool8
    Bool8x4_ctor2_arg0_Bool8.name = "arg0"_c;
    Bool8x4_ctor2_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor2_arg1_Bool8x2.name = "arg1"_c;
    Bool8x4_ctor2_arg1_Bool8x2.type = Type::FullType{ Bool8x2Type.name };
    Bool8x4_ctor2_arg2_Bool8.name = "arg2"_c;
    Bool8x4_ctor2_arg2_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor2.name = "b8x4"_c;
    Bool8x4_ctor2.compileTime = true;
    Bool8x4_ctor2.backendIndex = 961;
    Bool8x4_ctor2.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor2.parameters = Bool8x4_ctor2_args;
    Symbol::Resolved(&Bool8x4_ctor2_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor2_arg1_Bool8x2)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x4_ctor2_arg2_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor2)->signature = "b8x4 b8x4(b8,b8x2,b8)"_c;
    Symbol::Resolved(&Bool8x4_ctor2)->name = "b8x4(b8,b8x2,b8)"_c;
    Symbol::Resolved(&Bool8x4_ctor2)->nameWithVarNames = "b8x4(arg0 : b8, arg1 : b8x2, arg2 : b8)"_c;
    Symbol::Resolved(&Bool8x4_ctor2)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8, Bool8, Bool8x2
    Bool8x4_ctor3_arg0_Bool8.name = "arg0"_c;
    Bool8x4_ctor3_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor3_arg1_Bool8.name = "arg1"_c;
    Bool8x4_ctor3_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor3_arg2_Bool8x2.name = "arg2"_c;
    Bool8x4_ctor3_arg2_Bool8x2.type = Type::FullType{ Bool8x2Type.name };
    Bool8x4_ctor3.name = "b8x4"_c;
    Bool8x4_ctor3.compileTime = true;
    Bool8x4_ctor3.backendIndex = 962;
    Bool8x4_ctor3.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor3.parameters = Bool8x4_ctor3_args;
    Symbol::Resolved(&Bool8x4_ctor3_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor3_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor3_arg2_Bool8x2)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x4_ctor3)->signature = "b8x4 b8x4(b8,b8,b8x2)"_c;
    Symbol::Resolved(&Bool8x4_ctor3)->name = "b8x4(b8,b8,b8x2)"_c;
    Symbol::Resolved(&Bool8x4_ctor3)->nameWithVarNames = "b8x4(arg0 : b8, arg1 : b8, arg2 : b8x2)"_c;
    Symbol::Resolved(&Bool8x4_ctor3)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8x2, Bool8x2
    Bool8x4_ctor4_arg0_Bool8x2.name = "arg0"_c;
    Bool8x4_ctor4_arg0_Bool8x2.type = Type::FullType{ Bool8x2Type.name };
    Bool8x4_ctor4_arg1_Bool8x2.name = "arg1"_c;
    Bool8x4_ctor4_arg1_Bool8x2.type = Type::FullType{ Bool8x2Type.name };
    Bool8x4_ctor4.name = "b8x4"_c;
    Bool8x4_ctor4.compileTime = true;
    Bool8x4_ctor4.backendIndex = 963;
    Bool8x4_ctor4.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor4.parameters = Bool8x4_ctor4_args;
    Symbol::Resolved(&Bool8x4_ctor4_arg0_Bool8x2)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x4_ctor4_arg1_Bool8x2)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&Bool8x4_ctor4)->signature = "b8x4 b8x4(b8x2,b8x2)"_c;
    Symbol::Resolved(&Bool8x4_ctor4)->name = "b8x4(b8x2,b8x2)"_c;
    Symbol::Resolved(&Bool8x4_ctor4)->nameWithVarNames = "b8x4(arg0 : b8x2, arg1 : b8x2)"_c;
    Symbol::Resolved(&Bool8x4_ctor4)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8x3, Bool8
    Bool8x4_ctor5_arg0_Bool8x3.name = "arg0"_c;
    Bool8x4_ctor5_arg0_Bool8x3.type = Type::FullType{ Bool8x3Type.name };
    Bool8x4_ctor5_arg1_Bool8.name = "arg1"_c;
    Bool8x4_ctor5_arg1_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor5.name = "b8x4"_c;
    Bool8x4_ctor5.compileTime = true;
    Bool8x4_ctor5.backendIndex = 964;
    Bool8x4_ctor5.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor5.parameters = Bool8x4_ctor5_args;
    Symbol::Resolved(&Bool8x4_ctor5_arg0_Bool8x3)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x4_ctor5_arg1_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor5)->signature = "b8x4 b8x4(b8x3,b8)"_c;
    Symbol::Resolved(&Bool8x4_ctor5)->name = "b8x4(b8x3,b8)"_c;
    Symbol::Resolved(&Bool8x4_ctor5)->nameWithVarNames = "b8x4(arg0 : b8x3, arg1 : b8)"_c;
    Symbol::Resolved(&Bool8x4_ctor5)->returnTypeSymbol = &Bool8x4Type;

    /// b8x4 with Bool8, Bool8x3
    Bool8x4_ctor6_arg0_Bool8.name = "arg0"_c;
    Bool8x4_ctor6_arg0_Bool8.type = Type::FullType{ Bool8Type.name };
    Bool8x4_ctor6_arg1_Bool8x3.name = "arg1"_c;
    Bool8x4_ctor6_arg1_Bool8x3.type = Type::FullType{ Bool8x3Type.name };
    Bool8x4_ctor6.name = "b8x4"_c;
    Bool8x4_ctor6.compileTime = true;
    Bool8x4_ctor6.backendIndex = 965;
    Bool8x4_ctor6.returnType = Type::FullType { Bool8x4Type.name };
    Bool8x4_ctor6.parameters = Bool8x4_ctor6_args;
    Symbol::Resolved(&Bool8x4_ctor6_arg0_Bool8)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Bool8x4_ctor6_arg1_Bool8x3)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&Bool8x4_ctor6)->signature = "b8x4 b8x4(b8,b8x3)"_c;
    Symbol::Resolved(&Bool8x4_ctor6)->name = "b8x4(b8,b8x3)"_c;
    Symbol::Resolved(&Bool8x4_ctor6)->nameWithVarNames = "b8x4(arg0 : b8, arg1 : b8x3)"_c;
    Symbol::Resolved(&Bool8x4_ctor6)->returnTypeSymbol = &Bool8x4Type;

    /// f16x4 with Float32x4
    Float16x4_from_Float32x4_arg.name = "val"_c;
    Float16x4_from_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Float16x4_from_Float32x4.documentation = "Convert from f32x4 to f16x4"_c;
    Float16x4_from_Float32x4.name = "f16x4"_c;
    Float16x4_from_Float32x4.compileTime = true;
    Float16x4_from_Float32x4.backendIndex = 974;
    Float16x4_from_Float32x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_from_Float32x4.parameters = Float16x4_from_Float32x4_args;
    Symbol::Resolved(&Float16x4_from_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float16x4_from_Float32x4)->signature = "f16x4 f16x4(f32x4)"_c;
    Symbol::Resolved(&Float16x4_from_Float32x4)->name = "f16x4(f32x4)"_c;
    Symbol::Resolved(&Float16x4_from_Float32x4)->nameWithVarNames = "f16x4(val : f32x4)"_c;
    Symbol::Resolved(&Float16x4_from_Float32x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float32
    Float16x4_splat_Float32_arg.name = "val"_c;
    Float16x4_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Float16x4_splat_Float32.documentation = "Splat f32 to f16x4"_c;
    Float16x4_splat_Float32.name = "f16x4"_c;
    Float16x4_splat_Float32.compileTime = true;
    Float16x4_splat_Float32.backendIndex = 975;
    Float16x4_splat_Float32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_Float32.parameters = Float16x4_splat_Float32_args;
    Symbol::Resolved(&Float16x4_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float16x4_splat_Float32)->signature = "f16x4 f16x4(f32)"_c;
    Symbol::Resolved(&Float16x4_splat_Float32)->name = "f16x4(f32)"_c;
    Symbol::Resolved(&Float16x4_splat_Float32)->nameWithVarNames = "f16x4(val : f32)"_c;
    Symbol::Resolved(&Float16x4_splat_Float32)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with UInt32x4
    Float16x4_from_UInt32x4_arg.name = "val"_c;
    Float16x4_from_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    Float16x4_from_UInt32x4.documentation = "Convert from u32x4 to f16x4"_c;
    Float16x4_from_UInt32x4.name = "f16x4"_c;
    Float16x4_from_UInt32x4.compileTime = true;
    Float16x4_from_UInt32x4.backendIndex = 976;
    Float16x4_from_UInt32x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_from_UInt32x4.parameters = Float16x4_from_UInt32x4_args;
    Symbol::Resolved(&Float16x4_from_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&Float16x4_from_UInt32x4)->signature = "f16x4 f16x4(u32x4)"_c;
    Symbol::Resolved(&Float16x4_from_UInt32x4)->name = "f16x4(u32x4)"_c;
    Symbol::Resolved(&Float16x4_from_UInt32x4)->nameWithVarNames = "f16x4(val : u32x4)"_c;
    Symbol::Resolved(&Float16x4_from_UInt32x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with UInt32
    Float16x4_splat_UInt32_arg.name = "val"_c;
    Float16x4_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Float16x4_splat_UInt32.documentation = "Splat u32 to f16x4"_c;
    Float16x4_splat_UInt32.name = "f16x4"_c;
    Float16x4_splat_UInt32.compileTime = true;
    Float16x4_splat_UInt32.backendIndex = 977;
    Float16x4_splat_UInt32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_UInt32.parameters = Float16x4_splat_UInt32_args;
    Symbol::Resolved(&Float16x4_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Float16x4_splat_UInt32)->signature = "f16x4 f16x4(u32)"_c;
    Symbol::Resolved(&Float16x4_splat_UInt32)->name = "f16x4(u32)"_c;
    Symbol::Resolved(&Float16x4_splat_UInt32)->nameWithVarNames = "f16x4(val : u32)"_c;
    Symbol::Resolved(&Float16x4_splat_UInt32)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Int32x4
    Float16x4_from_Int32x4_arg.name = "val"_c;
    Float16x4_from_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Float16x4_from_Int32x4.documentation = "Convert from i32x4 to f16x4"_c;
    Float16x4_from_Int32x4.name = "f16x4"_c;
    Float16x4_from_Int32x4.compileTime = true;
    Float16x4_from_Int32x4.backendIndex = 978;
    Float16x4_from_Int32x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_from_Int32x4.parameters = Float16x4_from_Int32x4_args;
    Symbol::Resolved(&Float16x4_from_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Float16x4_from_Int32x4)->signature = "f16x4 f16x4(i32x4)"_c;
    Symbol::Resolved(&Float16x4_from_Int32x4)->name = "f16x4(i32x4)"_c;
    Symbol::Resolved(&Float16x4_from_Int32x4)->nameWithVarNames = "f16x4(val : i32x4)"_c;
    Symbol::Resolved(&Float16x4_from_Int32x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Int32
    Float16x4_splat_Int32_arg.name = "val"_c;
    Float16x4_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Float16x4_splat_Int32.documentation = "Splat i32 to f16x4"_c;
    Float16x4_splat_Int32.name = "f16x4"_c;
    Float16x4_splat_Int32.compileTime = true;
    Float16x4_splat_Int32.backendIndex = 979;
    Float16x4_splat_Int32.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_Int32.parameters = Float16x4_splat_Int32_args;
    Symbol::Resolved(&Float16x4_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Float16x4_splat_Int32)->signature = "f16x4 f16x4(i32)"_c;
    Symbol::Resolved(&Float16x4_splat_Int32)->name = "f16x4(i32)"_c;
    Symbol::Resolved(&Float16x4_splat_Int32)->nameWithVarNames = "f16x4(val : i32)"_c;
    Symbol::Resolved(&Float16x4_splat_Int32)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Bool8x4
    Float16x4_from_Bool8x4_arg.name = "val"_c;
    Float16x4_from_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Float16x4_from_Bool8x4.documentation = "Convert from b8x4 to f16x4"_c;
    Float16x4_from_Bool8x4.name = "f16x4"_c;
    Float16x4_from_Bool8x4.compileTime = true;
    Float16x4_from_Bool8x4.backendIndex = 980;
    Float16x4_from_Bool8x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_from_Bool8x4.parameters = Float16x4_from_Bool8x4_args;
    Symbol::Resolved(&Float16x4_from_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Float16x4_from_Bool8x4)->signature = "f16x4 f16x4(b8x4)"_c;
    Symbol::Resolved(&Float16x4_from_Bool8x4)->name = "f16x4(b8x4)"_c;
    Symbol::Resolved(&Float16x4_from_Bool8x4)->nameWithVarNames = "f16x4(val : b8x4)"_c;
    Symbol::Resolved(&Float16x4_from_Bool8x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Bool8
    Float16x4_splat_Bool8_arg.name = "val"_c;
    Float16x4_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Float16x4_splat_Bool8.documentation = "Splat b8 to f16x4"_c;
    Float16x4_splat_Bool8.name = "f16x4"_c;
    Float16x4_splat_Bool8.compileTime = true;
    Float16x4_splat_Bool8.backendIndex = 981;
    Float16x4_splat_Bool8.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_Bool8.parameters = Float16x4_splat_Bool8_args;
    Symbol::Resolved(&Float16x4_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Float16x4_splat_Bool8)->signature = "f16x4 f16x4(b8)"_c;
    Symbol::Resolved(&Float16x4_splat_Bool8)->name = "f16x4(b8)"_c;
    Symbol::Resolved(&Float16x4_splat_Bool8)->nameWithVarNames = "f16x4(val : b8)"_c;
    Symbol::Resolved(&Float16x4_splat_Bool8)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16x4
    Float16x4_from_Float16x4_arg.name = "val"_c;
    Float16x4_from_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Float16x4_from_Float16x4.documentation = "Convert from f16x4 to f16x4"_c;
    Float16x4_from_Float16x4.name = "f16x4"_c;
    Float16x4_from_Float16x4.compileTime = true;
    Float16x4_from_Float16x4.backendIndex = 982;
    Float16x4_from_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_from_Float16x4.parameters = Float16x4_from_Float16x4_args;
    Symbol::Resolved(&Float16x4_from_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4_from_Float16x4)->signature = "f16x4 f16x4(f16x4)"_c;
    Symbol::Resolved(&Float16x4_from_Float16x4)->name = "f16x4(f16x4)"_c;
    Symbol::Resolved(&Float16x4_from_Float16x4)->nameWithVarNames = "f16x4(val : f16x4)"_c;
    Symbol::Resolved(&Float16x4_from_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16
    Float16x4_splat_Float16_arg.name = "val"_c;
    Float16x4_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Float16x4_splat_Float16.documentation = "Splat f16 to f16x4"_c;
    Float16x4_splat_Float16.name = "f16x4"_c;
    Float16x4_splat_Float16.compileTime = true;
    Float16x4_splat_Float16.backendIndex = 983;
    Float16x4_splat_Float16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_Float16.parameters = Float16x4_splat_Float16_args;
    Symbol::Resolved(&Float16x4_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_splat_Float16)->signature = "f16x4 f16x4(f16)"_c;
    Symbol::Resolved(&Float16x4_splat_Float16)->name = "f16x4(f16)"_c;
    Symbol::Resolved(&Float16x4_splat_Float16)->nameWithVarNames = "f16x4(val : f16)"_c;
    Symbol::Resolved(&Float16x4_splat_Float16)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with UInt16x4
    Float16x4_from_UInt16x4_arg.name = "val"_c;
    Float16x4_from_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    Float16x4_from_UInt16x4.documentation = "Convert from u16x4 to f16x4"_c;
    Float16x4_from_UInt16x4.name = "f16x4"_c;
    Float16x4_from_UInt16x4.compileTime = true;
    Float16x4_from_UInt16x4.backendIndex = 984;
    Float16x4_from_UInt16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_from_UInt16x4.parameters = Float16x4_from_UInt16x4_args;
    Symbol::Resolved(&Float16x4_from_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&Float16x4_from_UInt16x4)->signature = "f16x4 f16x4(u16x4)"_c;
    Symbol::Resolved(&Float16x4_from_UInt16x4)->name = "f16x4(u16x4)"_c;
    Symbol::Resolved(&Float16x4_from_UInt16x4)->nameWithVarNames = "f16x4(val : u16x4)"_c;
    Symbol::Resolved(&Float16x4_from_UInt16x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with UInt16
    Float16x4_splat_UInt16_arg.name = "val"_c;
    Float16x4_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Float16x4_splat_UInt16.documentation = "Splat u16 to f16x4"_c;
    Float16x4_splat_UInt16.name = "f16x4"_c;
    Float16x4_splat_UInt16.compileTime = true;
    Float16x4_splat_UInt16.backendIndex = 985;
    Float16x4_splat_UInt16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_UInt16.parameters = Float16x4_splat_UInt16_args;
    Symbol::Resolved(&Float16x4_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Float16x4_splat_UInt16)->signature = "f16x4 f16x4(u16)"_c;
    Symbol::Resolved(&Float16x4_splat_UInt16)->name = "f16x4(u16)"_c;
    Symbol::Resolved(&Float16x4_splat_UInt16)->nameWithVarNames = "f16x4(val : u16)"_c;
    Symbol::Resolved(&Float16x4_splat_UInt16)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Int16x4
    Float16x4_from_Int16x4_arg.name = "val"_c;
    Float16x4_from_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Float16x4_from_Int16x4.documentation = "Convert from i16x4 to f16x4"_c;
    Float16x4_from_Int16x4.name = "f16x4"_c;
    Float16x4_from_Int16x4.compileTime = true;
    Float16x4_from_Int16x4.backendIndex = 986;
    Float16x4_from_Int16x4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_from_Int16x4.parameters = Float16x4_from_Int16x4_args;
    Symbol::Resolved(&Float16x4_from_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Float16x4_from_Int16x4)->signature = "f16x4 f16x4(i16x4)"_c;
    Symbol::Resolved(&Float16x4_from_Int16x4)->name = "f16x4(i16x4)"_c;
    Symbol::Resolved(&Float16x4_from_Int16x4)->nameWithVarNames = "f16x4(val : i16x4)"_c;
    Symbol::Resolved(&Float16x4_from_Int16x4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Int16
    Float16x4_splat_Int16_arg.name = "val"_c;
    Float16x4_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Float16x4_splat_Int16.documentation = "Splat i16 to f16x4"_c;
    Float16x4_splat_Int16.name = "f16x4"_c;
    Float16x4_splat_Int16.compileTime = true;
    Float16x4_splat_Int16.backendIndex = 987;
    Float16x4_splat_Int16.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_splat_Int16.parameters = Float16x4_splat_Int16_args;
    Symbol::Resolved(&Float16x4_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Float16x4_splat_Int16)->signature = "f16x4 f16x4(i16)"_c;
    Symbol::Resolved(&Float16x4_splat_Int16)->name = "f16x4(i16)"_c;
    Symbol::Resolved(&Float16x4_splat_Int16)->nameWithVarNames = "f16x4(val : i16)"_c;
    Symbol::Resolved(&Float16x4_splat_Int16)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16, Float16, Float16, Float16
    Float16x4_ctor0_arg0_Float16.name = "arg0"_c;
    Float16x4_ctor0_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor0_arg1_Float16.name = "arg1"_c;
    Float16x4_ctor0_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor0_arg2_Float16.name = "arg2"_c;
    Float16x4_ctor0_arg2_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor0_arg3_Float16.name = "arg3"_c;
    Float16x4_ctor0_arg3_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor0.name = "f16x4"_c;
    Float16x4_ctor0.compileTime = true;
    Float16x4_ctor0.backendIndex = 988;
    Float16x4_ctor0.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor0.parameters = Float16x4_ctor0_args;
    Symbol::Resolved(&Float16x4_ctor0_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor0_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor0_arg2_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor0_arg3_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor0)->signature = "f16x4 f16x4(f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x4_ctor0)->name = "f16x4(f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x4_ctor0)->nameWithVarNames = "f16x4(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16)"_c;
    Symbol::Resolved(&Float16x4_ctor0)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16x2, Float16, Float16
    Float16x4_ctor1_arg0_Float16x2.name = "arg0"_c;
    Float16x4_ctor1_arg0_Float16x2.type = Type::FullType{ Float16x2Type.name };
    Float16x4_ctor1_arg1_Float16.name = "arg1"_c;
    Float16x4_ctor1_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor1_arg2_Float16.name = "arg2"_c;
    Float16x4_ctor1_arg2_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor1.name = "f16x4"_c;
    Float16x4_ctor1.compileTime = true;
    Float16x4_ctor1.backendIndex = 989;
    Float16x4_ctor1.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor1.parameters = Float16x4_ctor1_args;
    Symbol::Resolved(&Float16x4_ctor1_arg0_Float16x2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4_ctor1_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor1_arg2_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor1)->signature = "f16x4 f16x4(f16x2,f16,f16)"_c;
    Symbol::Resolved(&Float16x4_ctor1)->name = "f16x4(f16x2,f16,f16)"_c;
    Symbol::Resolved(&Float16x4_ctor1)->nameWithVarNames = "f16x4(arg0 : f16x2, arg1 : f16, arg2 : f16)"_c;
    Symbol::Resolved(&Float16x4_ctor1)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16, Float16x2, Float16
    Float16x4_ctor2_arg0_Float16.name = "arg0"_c;
    Float16x4_ctor2_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor2_arg1_Float16x2.name = "arg1"_c;
    Float16x4_ctor2_arg1_Float16x2.type = Type::FullType{ Float16x2Type.name };
    Float16x4_ctor2_arg2_Float16.name = "arg2"_c;
    Float16x4_ctor2_arg2_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor2.name = "f16x4"_c;
    Float16x4_ctor2.compileTime = true;
    Float16x4_ctor2.backendIndex = 990;
    Float16x4_ctor2.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor2.parameters = Float16x4_ctor2_args;
    Symbol::Resolved(&Float16x4_ctor2_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor2_arg1_Float16x2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4_ctor2_arg2_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor2)->signature = "f16x4 f16x4(f16,f16x2,f16)"_c;
    Symbol::Resolved(&Float16x4_ctor2)->name = "f16x4(f16,f16x2,f16)"_c;
    Symbol::Resolved(&Float16x4_ctor2)->nameWithVarNames = "f16x4(arg0 : f16, arg1 : f16x2, arg2 : f16)"_c;
    Symbol::Resolved(&Float16x4_ctor2)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16, Float16, Float16x2
    Float16x4_ctor3_arg0_Float16.name = "arg0"_c;
    Float16x4_ctor3_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor3_arg1_Float16.name = "arg1"_c;
    Float16x4_ctor3_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor3_arg2_Float16x2.name = "arg2"_c;
    Float16x4_ctor3_arg2_Float16x2.type = Type::FullType{ Float16x2Type.name };
    Float16x4_ctor3.name = "f16x4"_c;
    Float16x4_ctor3.compileTime = true;
    Float16x4_ctor3.backendIndex = 991;
    Float16x4_ctor3.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor3.parameters = Float16x4_ctor3_args;
    Symbol::Resolved(&Float16x4_ctor3_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor3_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor3_arg2_Float16x2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4_ctor3)->signature = "f16x4 f16x4(f16,f16,f16x2)"_c;
    Symbol::Resolved(&Float16x4_ctor3)->name = "f16x4(f16,f16,f16x2)"_c;
    Symbol::Resolved(&Float16x4_ctor3)->nameWithVarNames = "f16x4(arg0 : f16, arg1 : f16, arg2 : f16x2)"_c;
    Symbol::Resolved(&Float16x4_ctor3)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16x2, Float16x2
    Float16x4_ctor4_arg0_Float16x2.name = "arg0"_c;
    Float16x4_ctor4_arg0_Float16x2.type = Type::FullType{ Float16x2Type.name };
    Float16x4_ctor4_arg1_Float16x2.name = "arg1"_c;
    Float16x4_ctor4_arg1_Float16x2.type = Type::FullType{ Float16x2Type.name };
    Float16x4_ctor4.name = "f16x4"_c;
    Float16x4_ctor4.compileTime = true;
    Float16x4_ctor4.backendIndex = 992;
    Float16x4_ctor4.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor4.parameters = Float16x4_ctor4_args;
    Symbol::Resolved(&Float16x4_ctor4_arg0_Float16x2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4_ctor4_arg1_Float16x2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4_ctor4)->signature = "f16x4 f16x4(f16x2,f16x2)"_c;
    Symbol::Resolved(&Float16x4_ctor4)->name = "f16x4(f16x2,f16x2)"_c;
    Symbol::Resolved(&Float16x4_ctor4)->nameWithVarNames = "f16x4(arg0 : f16x2, arg1 : f16x2)"_c;
    Symbol::Resolved(&Float16x4_ctor4)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16x3, Float16
    Float16x4_ctor5_arg0_Float16x3.name = "arg0"_c;
    Float16x4_ctor5_arg0_Float16x3.type = Type::FullType{ Float16x3Type.name };
    Float16x4_ctor5_arg1_Float16.name = "arg1"_c;
    Float16x4_ctor5_arg1_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor5.name = "f16x4"_c;
    Float16x4_ctor5.compileTime = true;
    Float16x4_ctor5.backendIndex = 993;
    Float16x4_ctor5.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor5.parameters = Float16x4_ctor5_args;
    Symbol::Resolved(&Float16x4_ctor5_arg0_Float16x3)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4_ctor5_arg1_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor5)->signature = "f16x4 f16x4(f16x3,f16)"_c;
    Symbol::Resolved(&Float16x4_ctor5)->name = "f16x4(f16x3,f16)"_c;
    Symbol::Resolved(&Float16x4_ctor5)->nameWithVarNames = "f16x4(arg0 : f16x3, arg1 : f16)"_c;
    Symbol::Resolved(&Float16x4_ctor5)->returnTypeSymbol = &Float16x4Type;

    /// f16x4 with Float16, Float16x3
    Float16x4_ctor6_arg0_Float16.name = "arg0"_c;
    Float16x4_ctor6_arg0_Float16.type = Type::FullType{ Float16Type.name };
    Float16x4_ctor6_arg1_Float16x3.name = "arg1"_c;
    Float16x4_ctor6_arg1_Float16x3.type = Type::FullType{ Float16x3Type.name };
    Float16x4_ctor6.name = "f16x4"_c;
    Float16x4_ctor6.compileTime = true;
    Float16x4_ctor6.backendIndex = 994;
    Float16x4_ctor6.returnType = Type::FullType { Float16x4Type.name };
    Float16x4_ctor6.parameters = Float16x4_ctor6_args;
    Symbol::Resolved(&Float16x4_ctor6_arg0_Float16)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4_ctor6_arg1_Float16x3)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4_ctor6)->signature = "f16x4 f16x4(f16,f16x3)"_c;
    Symbol::Resolved(&Float16x4_ctor6)->name = "f16x4(f16,f16x3)"_c;
    Symbol::Resolved(&Float16x4_ctor6)->nameWithVarNames = "f16x4(arg0 : f16, arg1 : f16x3)"_c;
    Symbol::Resolved(&Float16x4_ctor6)->returnTypeSymbol = &Float16x4Type;

    /// u16x4 with Float32x4
    UInt16x4_from_Float32x4_arg.name = "val"_c;
    UInt16x4_from_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    UInt16x4_from_Float32x4.documentation = "Convert from f32x4 to u16x4"_c;
    UInt16x4_from_Float32x4.name = "u16x4"_c;
    UInt16x4_from_Float32x4.compileTime = true;
    UInt16x4_from_Float32x4.backendIndex = 1020;
    UInt16x4_from_Float32x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_from_Float32x4.parameters = UInt16x4_from_Float32x4_args;
    Symbol::Resolved(&UInt16x4_from_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&UInt16x4_from_Float32x4)->signature = "u16x4 u16x4(f32x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Float32x4)->name = "u16x4(f32x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Float32x4)->nameWithVarNames = "u16x4(val : f32x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Float32x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Float32
    UInt16x4_splat_Float32_arg.name = "val"_c;
    UInt16x4_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    UInt16x4_splat_Float32.documentation = "Splat f32 to u16x4"_c;
    UInt16x4_splat_Float32.name = "u16x4"_c;
    UInt16x4_splat_Float32.compileTime = true;
    UInt16x4_splat_Float32.backendIndex = 1021;
    UInt16x4_splat_Float32.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_Float32.parameters = UInt16x4_splat_Float32_args;
    Symbol::Resolved(&UInt16x4_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&UInt16x4_splat_Float32)->signature = "u16x4 u16x4(f32)"_c;
    Symbol::Resolved(&UInt16x4_splat_Float32)->name = "u16x4(f32)"_c;
    Symbol::Resolved(&UInt16x4_splat_Float32)->nameWithVarNames = "u16x4(val : f32)"_c;
    Symbol::Resolved(&UInt16x4_splat_Float32)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt32x4
    UInt16x4_from_UInt32x4_arg.name = "val"_c;
    UInt16x4_from_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    UInt16x4_from_UInt32x4.documentation = "Convert from u32x4 to u16x4"_c;
    UInt16x4_from_UInt32x4.name = "u16x4"_c;
    UInt16x4_from_UInt32x4.compileTime = true;
    UInt16x4_from_UInt32x4.backendIndex = 1022;
    UInt16x4_from_UInt32x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_from_UInt32x4.parameters = UInt16x4_from_UInt32x4_args;
    Symbol::Resolved(&UInt16x4_from_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&UInt16x4_from_UInt32x4)->signature = "u16x4 u16x4(u32x4)"_c;
    Symbol::Resolved(&UInt16x4_from_UInt32x4)->name = "u16x4(u32x4)"_c;
    Symbol::Resolved(&UInt16x4_from_UInt32x4)->nameWithVarNames = "u16x4(val : u32x4)"_c;
    Symbol::Resolved(&UInt16x4_from_UInt32x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt32
    UInt16x4_splat_UInt32_arg.name = "val"_c;
    UInt16x4_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    UInt16x4_splat_UInt32.documentation = "Splat u32 to u16x4"_c;
    UInt16x4_splat_UInt32.name = "u16x4"_c;
    UInt16x4_splat_UInt32.compileTime = true;
    UInt16x4_splat_UInt32.backendIndex = 1023;
    UInt16x4_splat_UInt32.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_UInt32.parameters = UInt16x4_splat_UInt32_args;
    Symbol::Resolved(&UInt16x4_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&UInt16x4_splat_UInt32)->signature = "u16x4 u16x4(u32)"_c;
    Symbol::Resolved(&UInt16x4_splat_UInt32)->name = "u16x4(u32)"_c;
    Symbol::Resolved(&UInt16x4_splat_UInt32)->nameWithVarNames = "u16x4(val : u32)"_c;
    Symbol::Resolved(&UInt16x4_splat_UInt32)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Int32x4
    UInt16x4_from_Int32x4_arg.name = "val"_c;
    UInt16x4_from_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    UInt16x4_from_Int32x4.documentation = "Convert from i32x4 to u16x4"_c;
    UInt16x4_from_Int32x4.name = "u16x4"_c;
    UInt16x4_from_Int32x4.compileTime = true;
    UInt16x4_from_Int32x4.backendIndex = 1024;
    UInt16x4_from_Int32x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_from_Int32x4.parameters = UInt16x4_from_Int32x4_args;
    Symbol::Resolved(&UInt16x4_from_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&UInt16x4_from_Int32x4)->signature = "u16x4 u16x4(i32x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Int32x4)->name = "u16x4(i32x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Int32x4)->nameWithVarNames = "u16x4(val : i32x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Int32x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Int32
    UInt16x4_splat_Int32_arg.name = "val"_c;
    UInt16x4_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    UInt16x4_splat_Int32.documentation = "Splat i32 to u16x4"_c;
    UInt16x4_splat_Int32.name = "u16x4"_c;
    UInt16x4_splat_Int32.compileTime = true;
    UInt16x4_splat_Int32.backendIndex = 1025;
    UInt16x4_splat_Int32.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_Int32.parameters = UInt16x4_splat_Int32_args;
    Symbol::Resolved(&UInt16x4_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&UInt16x4_splat_Int32)->signature = "u16x4 u16x4(i32)"_c;
    Symbol::Resolved(&UInt16x4_splat_Int32)->name = "u16x4(i32)"_c;
    Symbol::Resolved(&UInt16x4_splat_Int32)->nameWithVarNames = "u16x4(val : i32)"_c;
    Symbol::Resolved(&UInt16x4_splat_Int32)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Bool8x4
    UInt16x4_from_Bool8x4_arg.name = "val"_c;
    UInt16x4_from_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    UInt16x4_from_Bool8x4.documentation = "Convert from b8x4 to u16x4"_c;
    UInt16x4_from_Bool8x4.name = "u16x4"_c;
    UInt16x4_from_Bool8x4.compileTime = true;
    UInt16x4_from_Bool8x4.backendIndex = 1026;
    UInt16x4_from_Bool8x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_from_Bool8x4.parameters = UInt16x4_from_Bool8x4_args;
    Symbol::Resolved(&UInt16x4_from_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&UInt16x4_from_Bool8x4)->signature = "u16x4 u16x4(b8x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Bool8x4)->name = "u16x4(b8x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Bool8x4)->nameWithVarNames = "u16x4(val : b8x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Bool8x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Bool8
    UInt16x4_splat_Bool8_arg.name = "val"_c;
    UInt16x4_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    UInt16x4_splat_Bool8.documentation = "Splat b8 to u16x4"_c;
    UInt16x4_splat_Bool8.name = "u16x4"_c;
    UInt16x4_splat_Bool8.compileTime = true;
    UInt16x4_splat_Bool8.backendIndex = 1027;
    UInt16x4_splat_Bool8.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_Bool8.parameters = UInt16x4_splat_Bool8_args;
    Symbol::Resolved(&UInt16x4_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&UInt16x4_splat_Bool8)->signature = "u16x4 u16x4(b8)"_c;
    Symbol::Resolved(&UInt16x4_splat_Bool8)->name = "u16x4(b8)"_c;
    Symbol::Resolved(&UInt16x4_splat_Bool8)->nameWithVarNames = "u16x4(val : b8)"_c;
    Symbol::Resolved(&UInt16x4_splat_Bool8)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Float16x4
    UInt16x4_from_Float16x4_arg.name = "val"_c;
    UInt16x4_from_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    UInt16x4_from_Float16x4.documentation = "Convert from f16x4 to u16x4"_c;
    UInt16x4_from_Float16x4.name = "u16x4"_c;
    UInt16x4_from_Float16x4.compileTime = true;
    UInt16x4_from_Float16x4.backendIndex = 1028;
    UInt16x4_from_Float16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_from_Float16x4.parameters = UInt16x4_from_Float16x4_args;
    Symbol::Resolved(&UInt16x4_from_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&UInt16x4_from_Float16x4)->signature = "u16x4 u16x4(f16x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Float16x4)->name = "u16x4(f16x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Float16x4)->nameWithVarNames = "u16x4(val : f16x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Float16x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Float16
    UInt16x4_splat_Float16_arg.name = "val"_c;
    UInt16x4_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    UInt16x4_splat_Float16.documentation = "Splat f16 to u16x4"_c;
    UInt16x4_splat_Float16.name = "u16x4"_c;
    UInt16x4_splat_Float16.compileTime = true;
    UInt16x4_splat_Float16.backendIndex = 1029;
    UInt16x4_splat_Float16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_Float16.parameters = UInt16x4_splat_Float16_args;
    Symbol::Resolved(&UInt16x4_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&UInt16x4_splat_Float16)->signature = "u16x4 u16x4(f16)"_c;
    Symbol::Resolved(&UInt16x4_splat_Float16)->name = "u16x4(f16)"_c;
    Symbol::Resolved(&UInt16x4_splat_Float16)->nameWithVarNames = "u16x4(val : f16)"_c;
    Symbol::Resolved(&UInt16x4_splat_Float16)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16x4
    UInt16x4_from_UInt16x4_arg.name = "val"_c;
    UInt16x4_from_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    UInt16x4_from_UInt16x4.documentation = "Convert from u16x4 to u16x4"_c;
    UInt16x4_from_UInt16x4.name = "u16x4"_c;
    UInt16x4_from_UInt16x4.compileTime = true;
    UInt16x4_from_UInt16x4.backendIndex = 1030;
    UInt16x4_from_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_from_UInt16x4.parameters = UInt16x4_from_UInt16x4_args;
    Symbol::Resolved(&UInt16x4_from_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&UInt16x4_from_UInt16x4)->signature = "u16x4 u16x4(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_from_UInt16x4)->name = "u16x4(u16x4)"_c;
    Symbol::Resolved(&UInt16x4_from_UInt16x4)->nameWithVarNames = "u16x4(val : u16x4)"_c;
    Symbol::Resolved(&UInt16x4_from_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16
    UInt16x4_splat_UInt16_arg.name = "val"_c;
    UInt16x4_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    UInt16x4_splat_UInt16.documentation = "Splat u16 to u16x4"_c;
    UInt16x4_splat_UInt16.name = "u16x4"_c;
    UInt16x4_splat_UInt16.compileTime = true;
    UInt16x4_splat_UInt16.backendIndex = 1031;
    UInt16x4_splat_UInt16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_UInt16.parameters = UInt16x4_splat_UInt16_args;
    Symbol::Resolved(&UInt16x4_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_splat_UInt16)->signature = "u16x4 u16x4(u16)"_c;
    Symbol::Resolved(&UInt16x4_splat_UInt16)->name = "u16x4(u16)"_c;
    Symbol::Resolved(&UInt16x4_splat_UInt16)->nameWithVarNames = "u16x4(val : u16)"_c;
    Symbol::Resolved(&UInt16x4_splat_UInt16)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Int16x4
    UInt16x4_from_Int16x4_arg.name = "val"_c;
    UInt16x4_from_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    UInt16x4_from_Int16x4.documentation = "Convert from i16x4 to u16x4"_c;
    UInt16x4_from_Int16x4.name = "u16x4"_c;
    UInt16x4_from_Int16x4.compileTime = true;
    UInt16x4_from_Int16x4.backendIndex = 1032;
    UInt16x4_from_Int16x4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_from_Int16x4.parameters = UInt16x4_from_Int16x4_args;
    Symbol::Resolved(&UInt16x4_from_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&UInt16x4_from_Int16x4)->signature = "u16x4 u16x4(i16x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Int16x4)->name = "u16x4(i16x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Int16x4)->nameWithVarNames = "u16x4(val : i16x4)"_c;
    Symbol::Resolved(&UInt16x4_from_Int16x4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with Int16
    UInt16x4_splat_Int16_arg.name = "val"_c;
    UInt16x4_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    UInt16x4_splat_Int16.documentation = "Splat i16 to u16x4"_c;
    UInt16x4_splat_Int16.name = "u16x4"_c;
    UInt16x4_splat_Int16.compileTime = true;
    UInt16x4_splat_Int16.backendIndex = 1033;
    UInt16x4_splat_Int16.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_splat_Int16.parameters = UInt16x4_splat_Int16_args;
    Symbol::Resolved(&UInt16x4_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&UInt16x4_splat_Int16)->signature = "u16x4 u16x4(i16)"_c;
    Symbol::Resolved(&UInt16x4_splat_Int16)->name = "u16x4(i16)"_c;
    Symbol::Resolved(&UInt16x4_splat_Int16)->nameWithVarNames = "u16x4(val : i16)"_c;
    Symbol::Resolved(&UInt16x4_splat_Int16)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16, UInt16, UInt16, UInt16
    UInt16x4_ctor0_arg0_UInt16.name = "arg0"_c;
    UInt16x4_ctor0_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor0_arg1_UInt16.name = "arg1"_c;
    UInt16x4_ctor0_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor0_arg2_UInt16.name = "arg2"_c;
    UInt16x4_ctor0_arg2_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor0_arg3_UInt16.name = "arg3"_c;
    UInt16x4_ctor0_arg3_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor0.name = "u16x4"_c;
    UInt16x4_ctor0.compileTime = true;
    UInt16x4_ctor0.backendIndex = 1034;
    UInt16x4_ctor0.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor0.parameters = UInt16x4_ctor0_args;
    Symbol::Resolved(&UInt16x4_ctor0_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor0_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor0_arg2_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor0_arg3_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor0)->signature = "u16x4 u16x4(u16,u16,u16,u16)"_c;
    Symbol::Resolved(&UInt16x4_ctor0)->name = "u16x4(u16,u16,u16,u16)"_c;
    Symbol::Resolved(&UInt16x4_ctor0)->nameWithVarNames = "u16x4(arg0 : u16, arg1 : u16, arg2 : u16, arg3 : u16)"_c;
    Symbol::Resolved(&UInt16x4_ctor0)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16x2, UInt16, UInt16
    UInt16x4_ctor1_arg0_UInt16x2.name = "arg0"_c;
    UInt16x4_ctor1_arg0_UInt16x2.type = Type::FullType{ UInt16x2Type.name };
    UInt16x4_ctor1_arg1_UInt16.name = "arg1"_c;
    UInt16x4_ctor1_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor1_arg2_UInt16.name = "arg2"_c;
    UInt16x4_ctor1_arg2_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor1.name = "u16x4"_c;
    UInt16x4_ctor1.compileTime = true;
    UInt16x4_ctor1.backendIndex = 1035;
    UInt16x4_ctor1.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor1.parameters = UInt16x4_ctor1_args;
    Symbol::Resolved(&UInt16x4_ctor1_arg0_UInt16x2)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x4_ctor1_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor1_arg2_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor1)->signature = "u16x4 u16x4(u16x2,u16,u16)"_c;
    Symbol::Resolved(&UInt16x4_ctor1)->name = "u16x4(u16x2,u16,u16)"_c;
    Symbol::Resolved(&UInt16x4_ctor1)->nameWithVarNames = "u16x4(arg0 : u16x2, arg1 : u16, arg2 : u16)"_c;
    Symbol::Resolved(&UInt16x4_ctor1)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16, UInt16x2, UInt16
    UInt16x4_ctor2_arg0_UInt16.name = "arg0"_c;
    UInt16x4_ctor2_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor2_arg1_UInt16x2.name = "arg1"_c;
    UInt16x4_ctor2_arg1_UInt16x2.type = Type::FullType{ UInt16x2Type.name };
    UInt16x4_ctor2_arg2_UInt16.name = "arg2"_c;
    UInt16x4_ctor2_arg2_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor2.name = "u16x4"_c;
    UInt16x4_ctor2.compileTime = true;
    UInt16x4_ctor2.backendIndex = 1036;
    UInt16x4_ctor2.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor2.parameters = UInt16x4_ctor2_args;
    Symbol::Resolved(&UInt16x4_ctor2_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor2_arg1_UInt16x2)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x4_ctor2_arg2_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor2)->signature = "u16x4 u16x4(u16,u16x2,u16)"_c;
    Symbol::Resolved(&UInt16x4_ctor2)->name = "u16x4(u16,u16x2,u16)"_c;
    Symbol::Resolved(&UInt16x4_ctor2)->nameWithVarNames = "u16x4(arg0 : u16, arg1 : u16x2, arg2 : u16)"_c;
    Symbol::Resolved(&UInt16x4_ctor2)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16, UInt16, UInt16x2
    UInt16x4_ctor3_arg0_UInt16.name = "arg0"_c;
    UInt16x4_ctor3_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor3_arg1_UInt16.name = "arg1"_c;
    UInt16x4_ctor3_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor3_arg2_UInt16x2.name = "arg2"_c;
    UInt16x4_ctor3_arg2_UInt16x2.type = Type::FullType{ UInt16x2Type.name };
    UInt16x4_ctor3.name = "u16x4"_c;
    UInt16x4_ctor3.compileTime = true;
    UInt16x4_ctor3.backendIndex = 1037;
    UInt16x4_ctor3.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor3.parameters = UInt16x4_ctor3_args;
    Symbol::Resolved(&UInt16x4_ctor3_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor3_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor3_arg2_UInt16x2)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x4_ctor3)->signature = "u16x4 u16x4(u16,u16,u16x2)"_c;
    Symbol::Resolved(&UInt16x4_ctor3)->name = "u16x4(u16,u16,u16x2)"_c;
    Symbol::Resolved(&UInt16x4_ctor3)->nameWithVarNames = "u16x4(arg0 : u16, arg1 : u16, arg2 : u16x2)"_c;
    Symbol::Resolved(&UInt16x4_ctor3)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16x2, UInt16x2
    UInt16x4_ctor4_arg0_UInt16x2.name = "arg0"_c;
    UInt16x4_ctor4_arg0_UInt16x2.type = Type::FullType{ UInt16x2Type.name };
    UInt16x4_ctor4_arg1_UInt16x2.name = "arg1"_c;
    UInt16x4_ctor4_arg1_UInt16x2.type = Type::FullType{ UInt16x2Type.name };
    UInt16x4_ctor4.name = "u16x4"_c;
    UInt16x4_ctor4.compileTime = true;
    UInt16x4_ctor4.backendIndex = 1038;
    UInt16x4_ctor4.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor4.parameters = UInt16x4_ctor4_args;
    Symbol::Resolved(&UInt16x4_ctor4_arg0_UInt16x2)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x4_ctor4_arg1_UInt16x2)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&UInt16x4_ctor4)->signature = "u16x4 u16x4(u16x2,u16x2)"_c;
    Symbol::Resolved(&UInt16x4_ctor4)->name = "u16x4(u16x2,u16x2)"_c;
    Symbol::Resolved(&UInt16x4_ctor4)->nameWithVarNames = "u16x4(arg0 : u16x2, arg1 : u16x2)"_c;
    Symbol::Resolved(&UInt16x4_ctor4)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16x3, UInt16
    UInt16x4_ctor5_arg0_UInt16x3.name = "arg0"_c;
    UInt16x4_ctor5_arg0_UInt16x3.type = Type::FullType{ UInt16x3Type.name };
    UInt16x4_ctor5_arg1_UInt16.name = "arg1"_c;
    UInt16x4_ctor5_arg1_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor5.name = "u16x4"_c;
    UInt16x4_ctor5.compileTime = true;
    UInt16x4_ctor5.backendIndex = 1039;
    UInt16x4_ctor5.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor5.parameters = UInt16x4_ctor5_args;
    Symbol::Resolved(&UInt16x4_ctor5_arg0_UInt16x3)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x4_ctor5_arg1_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor5)->signature = "u16x4 u16x4(u16x3,u16)"_c;
    Symbol::Resolved(&UInt16x4_ctor5)->name = "u16x4(u16x3,u16)"_c;
    Symbol::Resolved(&UInt16x4_ctor5)->nameWithVarNames = "u16x4(arg0 : u16x3, arg1 : u16)"_c;
    Symbol::Resolved(&UInt16x4_ctor5)->returnTypeSymbol = &UInt16x4Type;

    /// u16x4 with UInt16, UInt16x3
    UInt16x4_ctor6_arg0_UInt16.name = "arg0"_c;
    UInt16x4_ctor6_arg0_UInt16.type = Type::FullType{ UInt16Type.name };
    UInt16x4_ctor6_arg1_UInt16x3.name = "arg1"_c;
    UInt16x4_ctor6_arg1_UInt16x3.type = Type::FullType{ UInt16x3Type.name };
    UInt16x4_ctor6.name = "u16x4"_c;
    UInt16x4_ctor6.compileTime = true;
    UInt16x4_ctor6.backendIndex = 1040;
    UInt16x4_ctor6.returnType = Type::FullType { UInt16x4Type.name };
    UInt16x4_ctor6.parameters = UInt16x4_ctor6_args;
    Symbol::Resolved(&UInt16x4_ctor6_arg0_UInt16)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&UInt16x4_ctor6_arg1_UInt16x3)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&UInt16x4_ctor6)->signature = "u16x4 u16x4(u16,u16x3)"_c;
    Symbol::Resolved(&UInt16x4_ctor6)->name = "u16x4(u16,u16x3)"_c;
    Symbol::Resolved(&UInt16x4_ctor6)->nameWithVarNames = "u16x4(arg0 : u16, arg1 : u16x3)"_c;
    Symbol::Resolved(&UInt16x4_ctor6)->returnTypeSymbol = &UInt16x4Type;

    /// i16x4 with Float32x4
    Int16x4_from_Float32x4_arg.name = "val"_c;
    Int16x4_from_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    Int16x4_from_Float32x4.documentation = "Convert from f32x4 to i16x4"_c;
    Int16x4_from_Float32x4.name = "i16x4"_c;
    Int16x4_from_Float32x4.compileTime = true;
    Int16x4_from_Float32x4.backendIndex = 1073;
    Int16x4_from_Float32x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_Float32x4.parameters = Int16x4_from_Float32x4_args;
    Symbol::Resolved(&Int16x4_from_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Int16x4_from_Float32x4)->signature = "i16x4 i16x4(f32x4)"_c;
    Symbol::Resolved(&Int16x4_from_Float32x4)->name = "i16x4(f32x4)"_c;
    Symbol::Resolved(&Int16x4_from_Float32x4)->nameWithVarNames = "i16x4(val : f32x4)"_c;
    Symbol::Resolved(&Int16x4_from_Float32x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Float32
    Int16x4_splat_Float32_arg.name = "val"_c;
    Int16x4_splat_Float32_arg.type = Type::FullType{ Float32Type.name };
    Int16x4_splat_Float32.documentation = "Splat f32 to i16x4"_c;
    Int16x4_splat_Float32.name = "i16x4"_c;
    Int16x4_splat_Float32.compileTime = true;
    Int16x4_splat_Float32.backendIndex = 1074;
    Int16x4_splat_Float32.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Float32.parameters = Int16x4_splat_Float32_args;
    Symbol::Resolved(&Int16x4_splat_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Int16x4_splat_Float32)->signature = "i16x4 i16x4(f32)"_c;
    Symbol::Resolved(&Int16x4_splat_Float32)->name = "i16x4(f32)"_c;
    Symbol::Resolved(&Int16x4_splat_Float32)->nameWithVarNames = "i16x4(val : f32)"_c;
    Symbol::Resolved(&Int16x4_splat_Float32)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with UInt32x4
    Int16x4_from_UInt32x4_arg.name = "val"_c;
    Int16x4_from_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    Int16x4_from_UInt32x4.documentation = "Convert from u32x4 to i16x4"_c;
    Int16x4_from_UInt32x4.name = "i16x4"_c;
    Int16x4_from_UInt32x4.compileTime = true;
    Int16x4_from_UInt32x4.backendIndex = 1075;
    Int16x4_from_UInt32x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_UInt32x4.parameters = Int16x4_from_UInt32x4_args;
    Symbol::Resolved(&Int16x4_from_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&Int16x4_from_UInt32x4)->signature = "i16x4 i16x4(u32x4)"_c;
    Symbol::Resolved(&Int16x4_from_UInt32x4)->name = "i16x4(u32x4)"_c;
    Symbol::Resolved(&Int16x4_from_UInt32x4)->nameWithVarNames = "i16x4(val : u32x4)"_c;
    Symbol::Resolved(&Int16x4_from_UInt32x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with UInt32
    Int16x4_splat_UInt32_arg.name = "val"_c;
    Int16x4_splat_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    Int16x4_splat_UInt32.documentation = "Splat u32 to i16x4"_c;
    Int16x4_splat_UInt32.name = "i16x4"_c;
    Int16x4_splat_UInt32.compileTime = true;
    Int16x4_splat_UInt32.backendIndex = 1076;
    Int16x4_splat_UInt32.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_UInt32.parameters = Int16x4_splat_UInt32_args;
    Symbol::Resolved(&Int16x4_splat_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&Int16x4_splat_UInt32)->signature = "i16x4 i16x4(u32)"_c;
    Symbol::Resolved(&Int16x4_splat_UInt32)->name = "i16x4(u32)"_c;
    Symbol::Resolved(&Int16x4_splat_UInt32)->nameWithVarNames = "i16x4(val : u32)"_c;
    Symbol::Resolved(&Int16x4_splat_UInt32)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int32x4
    Int16x4_from_Int32x4_arg.name = "val"_c;
    Int16x4_from_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    Int16x4_from_Int32x4.documentation = "Convert from i32x4 to i16x4"_c;
    Int16x4_from_Int32x4.name = "i16x4"_c;
    Int16x4_from_Int32x4.compileTime = true;
    Int16x4_from_Int32x4.backendIndex = 1077;
    Int16x4_from_Int32x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_Int32x4.parameters = Int16x4_from_Int32x4_args;
    Symbol::Resolved(&Int16x4_from_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&Int16x4_from_Int32x4)->signature = "i16x4 i16x4(i32x4)"_c;
    Symbol::Resolved(&Int16x4_from_Int32x4)->name = "i16x4(i32x4)"_c;
    Symbol::Resolved(&Int16x4_from_Int32x4)->nameWithVarNames = "i16x4(val : i32x4)"_c;
    Symbol::Resolved(&Int16x4_from_Int32x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int32
    Int16x4_splat_Int32_arg.name = "val"_c;
    Int16x4_splat_Int32_arg.type = Type::FullType{ Int32Type.name };
    Int16x4_splat_Int32.documentation = "Splat i32 to i16x4"_c;
    Int16x4_splat_Int32.name = "i16x4"_c;
    Int16x4_splat_Int32.compileTime = true;
    Int16x4_splat_Int32.backendIndex = 1078;
    Int16x4_splat_Int32.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Int32.parameters = Int16x4_splat_Int32_args;
    Symbol::Resolved(&Int16x4_splat_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&Int16x4_splat_Int32)->signature = "i16x4 i16x4(i32)"_c;
    Symbol::Resolved(&Int16x4_splat_Int32)->name = "i16x4(i32)"_c;
    Symbol::Resolved(&Int16x4_splat_Int32)->nameWithVarNames = "i16x4(val : i32)"_c;
    Symbol::Resolved(&Int16x4_splat_Int32)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Bool8x4
    Int16x4_from_Bool8x4_arg.name = "val"_c;
    Int16x4_from_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    Int16x4_from_Bool8x4.documentation = "Convert from b8x4 to i16x4"_c;
    Int16x4_from_Bool8x4.name = "i16x4"_c;
    Int16x4_from_Bool8x4.compileTime = true;
    Int16x4_from_Bool8x4.backendIndex = 1079;
    Int16x4_from_Bool8x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_Bool8x4.parameters = Int16x4_from_Bool8x4_args;
    Symbol::Resolved(&Int16x4_from_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&Int16x4_from_Bool8x4)->signature = "i16x4 i16x4(b8x4)"_c;
    Symbol::Resolved(&Int16x4_from_Bool8x4)->name = "i16x4(b8x4)"_c;
    Symbol::Resolved(&Int16x4_from_Bool8x4)->nameWithVarNames = "i16x4(val : b8x4)"_c;
    Symbol::Resolved(&Int16x4_from_Bool8x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Bool8
    Int16x4_splat_Bool8_arg.name = "val"_c;
    Int16x4_splat_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    Int16x4_splat_Bool8.documentation = "Splat b8 to i16x4"_c;
    Int16x4_splat_Bool8.name = "i16x4"_c;
    Int16x4_splat_Bool8.compileTime = true;
    Int16x4_splat_Bool8.backendIndex = 1080;
    Int16x4_splat_Bool8.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Bool8.parameters = Int16x4_splat_Bool8_args;
    Symbol::Resolved(&Int16x4_splat_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&Int16x4_splat_Bool8)->signature = "i16x4 i16x4(b8)"_c;
    Symbol::Resolved(&Int16x4_splat_Bool8)->name = "i16x4(b8)"_c;
    Symbol::Resolved(&Int16x4_splat_Bool8)->nameWithVarNames = "i16x4(val : b8)"_c;
    Symbol::Resolved(&Int16x4_splat_Bool8)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Float16x4
    Int16x4_from_Float16x4_arg.name = "val"_c;
    Int16x4_from_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    Int16x4_from_Float16x4.documentation = "Convert from f16x4 to i16x4"_c;
    Int16x4_from_Float16x4.name = "i16x4"_c;
    Int16x4_from_Float16x4.compileTime = true;
    Int16x4_from_Float16x4.backendIndex = 1081;
    Int16x4_from_Float16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_Float16x4.parameters = Int16x4_from_Float16x4_args;
    Symbol::Resolved(&Int16x4_from_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Int16x4_from_Float16x4)->signature = "i16x4 i16x4(f16x4)"_c;
    Symbol::Resolved(&Int16x4_from_Float16x4)->name = "i16x4(f16x4)"_c;
    Symbol::Resolved(&Int16x4_from_Float16x4)->nameWithVarNames = "i16x4(val : f16x4)"_c;
    Symbol::Resolved(&Int16x4_from_Float16x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Float16
    Int16x4_splat_Float16_arg.name = "val"_c;
    Int16x4_splat_Float16_arg.type = Type::FullType{ Float16Type.name };
    Int16x4_splat_Float16.documentation = "Splat f16 to i16x4"_c;
    Int16x4_splat_Float16.name = "i16x4"_c;
    Int16x4_splat_Float16.compileTime = true;
    Int16x4_splat_Float16.backendIndex = 1082;
    Int16x4_splat_Float16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Float16.parameters = Int16x4_splat_Float16_args;
    Symbol::Resolved(&Int16x4_splat_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Int16x4_splat_Float16)->signature = "i16x4 i16x4(f16)"_c;
    Symbol::Resolved(&Int16x4_splat_Float16)->name = "i16x4(f16)"_c;
    Symbol::Resolved(&Int16x4_splat_Float16)->nameWithVarNames = "i16x4(val : f16)"_c;
    Symbol::Resolved(&Int16x4_splat_Float16)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with UInt16x4
    Int16x4_from_UInt16x4_arg.name = "val"_c;
    Int16x4_from_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    Int16x4_from_UInt16x4.documentation = "Convert from u16x4 to i16x4"_c;
    Int16x4_from_UInt16x4.name = "i16x4"_c;
    Int16x4_from_UInt16x4.compileTime = true;
    Int16x4_from_UInt16x4.backendIndex = 1083;
    Int16x4_from_UInt16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_UInt16x4.parameters = Int16x4_from_UInt16x4_args;
    Symbol::Resolved(&Int16x4_from_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&Int16x4_from_UInt16x4)->signature = "i16x4 i16x4(u16x4)"_c;
    Symbol::Resolved(&Int16x4_from_UInt16x4)->name = "i16x4(u16x4)"_c;
    Symbol::Resolved(&Int16x4_from_UInt16x4)->nameWithVarNames = "i16x4(val : u16x4)"_c;
    Symbol::Resolved(&Int16x4_from_UInt16x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with UInt16
    Int16x4_splat_UInt16_arg.name = "val"_c;
    Int16x4_splat_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    Int16x4_splat_UInt16.documentation = "Splat u16 to i16x4"_c;
    Int16x4_splat_UInt16.name = "i16x4"_c;
    Int16x4_splat_UInt16.compileTime = true;
    Int16x4_splat_UInt16.backendIndex = 1084;
    Int16x4_splat_UInt16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_UInt16.parameters = Int16x4_splat_UInt16_args;
    Symbol::Resolved(&Int16x4_splat_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&Int16x4_splat_UInt16)->signature = "i16x4 i16x4(u16)"_c;
    Symbol::Resolved(&Int16x4_splat_UInt16)->name = "i16x4(u16)"_c;
    Symbol::Resolved(&Int16x4_splat_UInt16)->nameWithVarNames = "i16x4(val : u16)"_c;
    Symbol::Resolved(&Int16x4_splat_UInt16)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16x4
    Int16x4_from_Int16x4_arg.name = "val"_c;
    Int16x4_from_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    Int16x4_from_Int16x4.documentation = "Convert from i16x4 to i16x4"_c;
    Int16x4_from_Int16x4.name = "i16x4"_c;
    Int16x4_from_Int16x4.compileTime = true;
    Int16x4_from_Int16x4.backendIndex = 1085;
    Int16x4_from_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_from_Int16x4.parameters = Int16x4_from_Int16x4_args;
    Symbol::Resolved(&Int16x4_from_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&Int16x4_from_Int16x4)->signature = "i16x4 i16x4(i16x4)"_c;
    Symbol::Resolved(&Int16x4_from_Int16x4)->name = "i16x4(i16x4)"_c;
    Symbol::Resolved(&Int16x4_from_Int16x4)->nameWithVarNames = "i16x4(val : i16x4)"_c;
    Symbol::Resolved(&Int16x4_from_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16
    Int16x4_splat_Int16_arg.name = "val"_c;
    Int16x4_splat_Int16_arg.type = Type::FullType{ Int16Type.name };
    Int16x4_splat_Int16.documentation = "Splat i16 to i16x4"_c;
    Int16x4_splat_Int16.name = "i16x4"_c;
    Int16x4_splat_Int16.compileTime = true;
    Int16x4_splat_Int16.backendIndex = 1086;
    Int16x4_splat_Int16.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_splat_Int16.parameters = Int16x4_splat_Int16_args;
    Symbol::Resolved(&Int16x4_splat_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_splat_Int16)->signature = "i16x4 i16x4(i16)"_c;
    Symbol::Resolved(&Int16x4_splat_Int16)->name = "i16x4(i16)"_c;
    Symbol::Resolved(&Int16x4_splat_Int16)->nameWithVarNames = "i16x4(val : i16)"_c;
    Symbol::Resolved(&Int16x4_splat_Int16)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16, Int16, Int16, Int16
    Int16x4_ctor0_arg0_Int16.name = "arg0"_c;
    Int16x4_ctor0_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor0_arg1_Int16.name = "arg1"_c;
    Int16x4_ctor0_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor0_arg2_Int16.name = "arg2"_c;
    Int16x4_ctor0_arg2_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor0_arg3_Int16.name = "arg3"_c;
    Int16x4_ctor0_arg3_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor0.name = "i16x4"_c;
    Int16x4_ctor0.compileTime = true;
    Int16x4_ctor0.backendIndex = 1087;
    Int16x4_ctor0.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor0.parameters = Int16x4_ctor0_args;
    Symbol::Resolved(&Int16x4_ctor0_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor0_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor0_arg2_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor0_arg3_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor0)->signature = "i16x4 i16x4(i16,i16,i16,i16)"_c;
    Symbol::Resolved(&Int16x4_ctor0)->name = "i16x4(i16,i16,i16,i16)"_c;
    Symbol::Resolved(&Int16x4_ctor0)->nameWithVarNames = "i16x4(arg0 : i16, arg1 : i16, arg2 : i16, arg3 : i16)"_c;
    Symbol::Resolved(&Int16x4_ctor0)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16x2, Int16, Int16
    Int16x4_ctor1_arg0_Int16x2.name = "arg0"_c;
    Int16x4_ctor1_arg0_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor1_arg1_Int16.name = "arg1"_c;
    Int16x4_ctor1_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor1_arg2_Int16.name = "arg2"_c;
    Int16x4_ctor1_arg2_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor1.name = "i16x4"_c;
    Int16x4_ctor1.compileTime = true;
    Int16x4_ctor1.backendIndex = 1088;
    Int16x4_ctor1.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor1.parameters = Int16x4_ctor1_args;
    Symbol::Resolved(&Int16x4_ctor1_arg0_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor1_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor1_arg2_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor1)->signature = "i16x4 i16x4(i16x2,i16,i16)"_c;
    Symbol::Resolved(&Int16x4_ctor1)->name = "i16x4(i16x2,i16,i16)"_c;
    Symbol::Resolved(&Int16x4_ctor1)->nameWithVarNames = "i16x4(arg0 : i16x2, arg1 : i16, arg2 : i16)"_c;
    Symbol::Resolved(&Int16x4_ctor1)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16, Int16x2, Int16
    Int16x4_ctor2_arg0_Int16.name = "arg0"_c;
    Int16x4_ctor2_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor2_arg1_Int16x2.name = "arg1"_c;
    Int16x4_ctor2_arg1_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor2_arg2_Int16.name = "arg2"_c;
    Int16x4_ctor2_arg2_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor2.name = "i16x4"_c;
    Int16x4_ctor2.compileTime = true;
    Int16x4_ctor2.backendIndex = 1089;
    Int16x4_ctor2.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor2.parameters = Int16x4_ctor2_args;
    Symbol::Resolved(&Int16x4_ctor2_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor2_arg1_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor2_arg2_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor2)->signature = "i16x4 i16x4(i16,i16x2,i16)"_c;
    Symbol::Resolved(&Int16x4_ctor2)->name = "i16x4(i16,i16x2,i16)"_c;
    Symbol::Resolved(&Int16x4_ctor2)->nameWithVarNames = "i16x4(arg0 : i16, arg1 : i16x2, arg2 : i16)"_c;
    Symbol::Resolved(&Int16x4_ctor2)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16, Int16, Int16x2
    Int16x4_ctor3_arg0_Int16.name = "arg0"_c;
    Int16x4_ctor3_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor3_arg1_Int16.name = "arg1"_c;
    Int16x4_ctor3_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor3_arg2_Int16x2.name = "arg2"_c;
    Int16x4_ctor3_arg2_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor3.name = "i16x4"_c;
    Int16x4_ctor3.compileTime = true;
    Int16x4_ctor3.backendIndex = 1090;
    Int16x4_ctor3.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor3.parameters = Int16x4_ctor3_args;
    Symbol::Resolved(&Int16x4_ctor3_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor3_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor3_arg2_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor3)->signature = "i16x4 i16x4(i16,i16,i16x2)"_c;
    Symbol::Resolved(&Int16x4_ctor3)->name = "i16x4(i16,i16,i16x2)"_c;
    Symbol::Resolved(&Int16x4_ctor3)->nameWithVarNames = "i16x4(arg0 : i16, arg1 : i16, arg2 : i16x2)"_c;
    Symbol::Resolved(&Int16x4_ctor3)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16x2, Int16x2
    Int16x4_ctor4_arg0_Int16x2.name = "arg0"_c;
    Int16x4_ctor4_arg0_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor4_arg1_Int16x2.name = "arg1"_c;
    Int16x4_ctor4_arg1_Int16x2.type = Type::FullType{ Int16x2Type.name };
    Int16x4_ctor4.name = "i16x4"_c;
    Int16x4_ctor4.compileTime = true;
    Int16x4_ctor4.backendIndex = 1091;
    Int16x4_ctor4.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor4.parameters = Int16x4_ctor4_args;
    Symbol::Resolved(&Int16x4_ctor4_arg0_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor4_arg1_Int16x2)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&Int16x4_ctor4)->signature = "i16x4 i16x4(i16x2,i16x2)"_c;
    Symbol::Resolved(&Int16x4_ctor4)->name = "i16x4(i16x2,i16x2)"_c;
    Symbol::Resolved(&Int16x4_ctor4)->nameWithVarNames = "i16x4(arg0 : i16x2, arg1 : i16x2)"_c;
    Symbol::Resolved(&Int16x4_ctor4)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16x3, Int16
    Int16x4_ctor5_arg0_Int16x3.name = "arg0"_c;
    Int16x4_ctor5_arg0_Int16x3.type = Type::FullType{ Int16x3Type.name };
    Int16x4_ctor5_arg1_Int16.name = "arg1"_c;
    Int16x4_ctor5_arg1_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor5.name = "i16x4"_c;
    Int16x4_ctor5.compileTime = true;
    Int16x4_ctor5.backendIndex = 1092;
    Int16x4_ctor5.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor5.parameters = Int16x4_ctor5_args;
    Symbol::Resolved(&Int16x4_ctor5_arg0_Int16x3)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x4_ctor5_arg1_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor5)->signature = "i16x4 i16x4(i16x3,i16)"_c;
    Symbol::Resolved(&Int16x4_ctor5)->name = "i16x4(i16x3,i16)"_c;
    Symbol::Resolved(&Int16x4_ctor5)->nameWithVarNames = "i16x4(arg0 : i16x3, arg1 : i16)"_c;
    Symbol::Resolved(&Int16x4_ctor5)->returnTypeSymbol = &Int16x4Type;

    /// i16x4 with Int16, Int16x3
    Int16x4_ctor6_arg0_Int16.name = "arg0"_c;
    Int16x4_ctor6_arg0_Int16.type = Type::FullType{ Int16Type.name };
    Int16x4_ctor6_arg1_Int16x3.name = "arg1"_c;
    Int16x4_ctor6_arg1_Int16x3.type = Type::FullType{ Int16x3Type.name };
    Int16x4_ctor6.name = "i16x4"_c;
    Int16x4_ctor6.compileTime = true;
    Int16x4_ctor6.backendIndex = 1093;
    Int16x4_ctor6.returnType = Type::FullType { Int16x4Type.name };
    Int16x4_ctor6.parameters = Int16x4_ctor6_args;
    Symbol::Resolved(&Int16x4_ctor6_arg0_Int16)->typeSymbol = &Int16Type;
    Symbol::Resolved(&Int16x4_ctor6_arg1_Int16x3)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&Int16x4_ctor6)->signature = "i16x4 i16x4(i16,i16x3)"_c;
    Symbol::Resolved(&Int16x4_ctor6)->name = "i16x4(i16,i16x3)"_c;
    Symbol::Resolved(&Int16x4_ctor6)->nameWithVarNames = "i16x4(arg0 : i16, arg1 : i16x3)"_c;
    Symbol::Resolved(&Int16x4_ctor6)->returnTypeSymbol = &Int16x4Type;

    /// f32x2x2 with Float32x2, Float32x2
    Float32x2x2_Float32_2_ctor_arg0.name = "arg0"_c;
    Float32x2x2_Float32_2_ctor_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x2x2_Float32_2_ctor_arg1.name = "arg1"_c;
    Float32x2x2_Float32_2_ctor_arg1.type = Type::FullType{ Float32x2Type.name };
    Float32x2x2_Float32_2_ctor.name = "f32x2x2"_c;
    Float32x2x2_Float32_2_ctor.compileTime = true;
    Float32x2x2_Float32_2_ctor.backendIndex = 1126;
    Float32x2x2_Float32_2_ctor.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_Float32_2_ctor.parameters = Float32x2x2_Float32_2_ctor_args;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor_arg1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor)->signature = "f32x2x2 f32x2x2(f32x2,f32x2)"_c;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor)->name = "f32x2x2(f32x2,f32x2)"_c;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor)->nameWithVarNames = "f32x2x2(arg0 : f32x2, arg1 : f32x2)"_c;
    Symbol::Resolved(&Float32x2x2_Float32_2_ctor)->returnTypeSymbol = &Float32x2x2Type;

    /// f32x2x2
    Float32x2x2_identity.name = "f32x2x2"_c;
    Float32x2x2_identity.compileTime = true;
    Float32x2x2_identity.backendIndex = 1127;
    Float32x2x2_identity.returnType = Type::FullType { Float32x2x2Type.name };
    Symbol::Resolved(&Float32x2x2_identity)->signature = "f32x2x2 f32x2x2()"_c;
    Symbol::Resolved(&Float32x2x2_identity)->name = "f32x2x2()"_c;
    Symbol::Resolved(&Float32x2x2_identity)->nameWithVarNames = "f32x2x2()"_c;
    Symbol::Resolved(&Float32x2x2_identity)->returnTypeSymbol = &Float32x2x2Type;

    /// f32x2x2 with Float32, Float32, Float32, Float32
    Float32x2x2_raw_list_arg0.name = "arg0"_c;
    Float32x2x2_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2x2_raw_list_arg1.name = "arg1"_c;
    Float32x2x2_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x2x2_raw_list_arg2.name = "arg2"_c;
    Float32x2x2_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x2x2_raw_list_arg3.name = "arg3"_c;
    Float32x2x2_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x2x2_raw_list.name = "f32x2x2"_c;
    Float32x2x2_raw_list.compileTime = true;
    Float32x2x2_raw_list.backendIndex = 1128;
    Float32x2x2_raw_list.returnType = Type::FullType { Float32x2x2Type.name };
    Float32x2x2_raw_list.parameters = Float32x2x2_raw_list_args;
    Symbol::Resolved(&Float32x2x2_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x2_raw_list)->signature = "f32x2x2 f32x2x2(f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x2x2_raw_list)->name = "f32x2x2(f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x2x2_raw_list)->nameWithVarNames = "f32x2x2(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32)"_c;
    Symbol::Resolved(&Float32x2x2_raw_list)->returnTypeSymbol = &Float32x2x2Type;

    /// f32x3x2 with Float32x2, Float32x2, Float32x2
    Float32x3x2_Float32_2_ctor_arg0.name = "arg0"_c;
    Float32x3x2_Float32_2_ctor_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x3x2_Float32_2_ctor_arg1.name = "arg1"_c;
    Float32x3x2_Float32_2_ctor_arg1.type = Type::FullType{ Float32x2Type.name };
    Float32x3x2_Float32_2_ctor_arg2.name = "arg2"_c;
    Float32x3x2_Float32_2_ctor_arg2.type = Type::FullType{ Float32x2Type.name };
    Float32x3x2_Float32_2_ctor.name = "f32x3x2"_c;
    Float32x3x2_Float32_2_ctor.compileTime = true;
    Float32x3x2_Float32_2_ctor.backendIndex = 1141;
    Float32x3x2_Float32_2_ctor.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_Float32_2_ctor.parameters = Float32x3x2_Float32_2_ctor_args;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor_arg1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor_arg2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor)->signature = "f32x3x2 f32x3x2(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor)->name = "f32x3x2(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor)->nameWithVarNames = "f32x3x2(arg0 : f32x2, arg1 : f32x2, arg2 : f32x2)"_c;
    Symbol::Resolved(&Float32x3x2_Float32_2_ctor)->returnTypeSymbol = &Float32x3x2Type;

    /// f32x3x2 with Float32, Float32, Float32, Float32, Float32, Float32
    Float32x3x2_raw_list_arg0.name = "arg0"_c;
    Float32x3x2_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg1.name = "arg1"_c;
    Float32x3x2_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg2.name = "arg2"_c;
    Float32x3x2_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg3.name = "arg3"_c;
    Float32x3x2_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg4.name = "arg4"_c;
    Float32x3x2_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list_arg5.name = "arg5"_c;
    Float32x3x2_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x3x2_raw_list.name = "f32x3x2"_c;
    Float32x3x2_raw_list.compileTime = true;
    Float32x3x2_raw_list.backendIndex = 1142;
    Float32x3x2_raw_list.returnType = Type::FullType { Float32x3x2Type.name };
    Float32x3x2_raw_list.parameters = Float32x3x2_raw_list_args;
    Symbol::Resolved(&Float32x3x2_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x2_raw_list)->signature = "f32x3x2 f32x3x2(f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x3x2_raw_list)->name = "f32x3x2(f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x3x2_raw_list)->nameWithVarNames = "f32x3x2(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32)"_c;
    Symbol::Resolved(&Float32x3x2_raw_list)->returnTypeSymbol = &Float32x3x2Type;

    /// f32x4x2 with Float32x2, Float32x2, Float32x2, Float32x2
    Float32x4x2_Float32_2_ctor_arg0.name = "arg0"_c;
    Float32x4x2_Float32_2_ctor_arg0.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_Float32_2_ctor_arg1.name = "arg1"_c;
    Float32x4x2_Float32_2_ctor_arg1.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_Float32_2_ctor_arg2.name = "arg2"_c;
    Float32x4x2_Float32_2_ctor_arg2.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_Float32_2_ctor_arg3.name = "arg3"_c;
    Float32x4x2_Float32_2_ctor_arg3.type = Type::FullType{ Float32x2Type.name };
    Float32x4x2_Float32_2_ctor.name = "f32x4x2"_c;
    Float32x4x2_Float32_2_ctor.compileTime = true;
    Float32x4x2_Float32_2_ctor.backendIndex = 1155;
    Float32x4x2_Float32_2_ctor.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_Float32_2_ctor.parameters = Float32x4x2_Float32_2_ctor_args;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor_arg0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor_arg1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor_arg2)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor_arg3)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor)->signature = "f32x4x2 f32x4x2(f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor)->name = "f32x4x2(f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor)->nameWithVarNames = "f32x4x2(arg0 : f32x2, arg1 : f32x2, arg2 : f32x2, arg3 : f32x2)"_c;
    Symbol::Resolved(&Float32x4x2_Float32_2_ctor)->returnTypeSymbol = &Float32x4x2Type;

    /// f32x4x2 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x4x2_raw_list_arg0.name = "arg0"_c;
    Float32x4x2_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg1.name = "arg1"_c;
    Float32x4x2_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg2.name = "arg2"_c;
    Float32x4x2_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg3.name = "arg3"_c;
    Float32x4x2_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg4.name = "arg4"_c;
    Float32x4x2_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg5.name = "arg5"_c;
    Float32x4x2_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg6.name = "arg6"_c;
    Float32x4x2_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list_arg7.name = "arg7"_c;
    Float32x4x2_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x4x2_raw_list.name = "f32x4x2"_c;
    Float32x4x2_raw_list.compileTime = true;
    Float32x4x2_raw_list.backendIndex = 1156;
    Float32x4x2_raw_list.returnType = Type::FullType { Float32x4x2Type.name };
    Float32x4x2_raw_list.parameters = Float32x4x2_raw_list_args;
    Symbol::Resolved(&Float32x4x2_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x2_raw_list)->signature = "f32x4x2 f32x4x2(f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x4x2_raw_list)->name = "f32x4x2(f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x4x2_raw_list)->nameWithVarNames = "f32x4x2(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32, arg6 : f32, arg7 : f32)"_c;
    Symbol::Resolved(&Float32x4x2_raw_list)->returnTypeSymbol = &Float32x4x2Type;

    /// f32x2x3 with Float32x3, Float32x3
    Float32x2x3_Float32_3_ctor_arg0.name = "arg0"_c;
    Float32x2x3_Float32_3_ctor_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x2x3_Float32_3_ctor_arg1.name = "arg1"_c;
    Float32x2x3_Float32_3_ctor_arg1.type = Type::FullType{ Float32x3Type.name };
    Float32x2x3_Float32_3_ctor.name = "f32x2x3"_c;
    Float32x2x3_Float32_3_ctor.compileTime = true;
    Float32x2x3_Float32_3_ctor.backendIndex = 1169;
    Float32x2x3_Float32_3_ctor.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_Float32_3_ctor.parameters = Float32x2x3_Float32_3_ctor_args;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor_arg1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor)->signature = "f32x2x3 f32x2x3(f32x3,f32x3)"_c;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor)->name = "f32x2x3(f32x3,f32x3)"_c;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor)->nameWithVarNames = "f32x2x3(arg0 : f32x3, arg1 : f32x3)"_c;
    Symbol::Resolved(&Float32x2x3_Float32_3_ctor)->returnTypeSymbol = &Float32x2x3Type;

    /// f32x2x3 with Float32, Float32, Float32, Float32, Float32, Float32
    Float32x2x3_raw_list_arg0.name = "arg0"_c;
    Float32x2x3_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg1.name = "arg1"_c;
    Float32x2x3_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg2.name = "arg2"_c;
    Float32x2x3_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg3.name = "arg3"_c;
    Float32x2x3_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg4.name = "arg4"_c;
    Float32x2x3_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list_arg5.name = "arg5"_c;
    Float32x2x3_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x2x3_raw_list.name = "f32x2x3"_c;
    Float32x2x3_raw_list.compileTime = true;
    Float32x2x3_raw_list.backendIndex = 1170;
    Float32x2x3_raw_list.returnType = Type::FullType { Float32x2x3Type.name };
    Float32x2x3_raw_list.parameters = Float32x2x3_raw_list_args;
    Symbol::Resolved(&Float32x2x3_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x3_raw_list)->signature = "f32x2x3 f32x2x3(f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x2x3_raw_list)->name = "f32x2x3(f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x2x3_raw_list)->nameWithVarNames = "f32x2x3(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32)"_c;
    Symbol::Resolved(&Float32x2x3_raw_list)->returnTypeSymbol = &Float32x2x3Type;

    /// f32x3x3 with Float32x3, Float32x3, Float32x3
    Float32x3x3_Float32_3_ctor_arg0.name = "arg0"_c;
    Float32x3x3_Float32_3_ctor_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x3x3_Float32_3_ctor_arg1.name = "arg1"_c;
    Float32x3x3_Float32_3_ctor_arg1.type = Type::FullType{ Float32x3Type.name };
    Float32x3x3_Float32_3_ctor_arg2.name = "arg2"_c;
    Float32x3x3_Float32_3_ctor_arg2.type = Type::FullType{ Float32x3Type.name };
    Float32x3x3_Float32_3_ctor.name = "f32x3x3"_c;
    Float32x3x3_Float32_3_ctor.compileTime = true;
    Float32x3x3_Float32_3_ctor.backendIndex = 1183;
    Float32x3x3_Float32_3_ctor.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_Float32_3_ctor.parameters = Float32x3x3_Float32_3_ctor_args;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor_arg1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor_arg2)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor)->signature = "f32x3x3 f32x3x3(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor)->name = "f32x3x3(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor)->nameWithVarNames = "f32x3x3(arg0 : f32x3, arg1 : f32x3, arg2 : f32x3)"_c;
    Symbol::Resolved(&Float32x3x3_Float32_3_ctor)->returnTypeSymbol = &Float32x3x3Type;

    /// f32x3x3
    Float32x3x3_identity.name = "f32x3x3"_c;
    Float32x3x3_identity.compileTime = true;
    Float32x3x3_identity.backendIndex = 1184;
    Float32x3x3_identity.returnType = Type::FullType { Float32x3x3Type.name };
    Symbol::Resolved(&Float32x3x3_identity)->signature = "f32x3x3 f32x3x3()"_c;
    Symbol::Resolved(&Float32x3x3_identity)->name = "f32x3x3()"_c;
    Symbol::Resolved(&Float32x3x3_identity)->nameWithVarNames = "f32x3x3()"_c;
    Symbol::Resolved(&Float32x3x3_identity)->returnTypeSymbol = &Float32x3x3Type;

    /// f32x3x3 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x3x3_raw_list_arg0.name = "arg0"_c;
    Float32x3x3_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg1.name = "arg1"_c;
    Float32x3x3_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg2.name = "arg2"_c;
    Float32x3x3_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg3.name = "arg3"_c;
    Float32x3x3_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg4.name = "arg4"_c;
    Float32x3x3_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg5.name = "arg5"_c;
    Float32x3x3_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg6.name = "arg6"_c;
    Float32x3x3_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg7.name = "arg7"_c;
    Float32x3x3_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list_arg8.name = "arg8"_c;
    Float32x3x3_raw_list_arg8.type = Type::FullType{ Float32Type.name };
    Float32x3x3_raw_list.name = "f32x3x3"_c;
    Float32x3x3_raw_list.compileTime = true;
    Float32x3x3_raw_list.backendIndex = 1185;
    Float32x3x3_raw_list.returnType = Type::FullType { Float32x3x3Type.name };
    Float32x3x3_raw_list.parameters = Float32x3x3_raw_list_args;
    Symbol::Resolved(&Float32x3x3_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list_arg8)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x3_raw_list)->signature = "f32x3x3 f32x3x3(f32,f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x3x3_raw_list)->name = "f32x3x3(f32,f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x3x3_raw_list)->nameWithVarNames = "f32x3x3(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32, arg6 : f32, arg7 : f32, arg8 : f32)"_c;
    Symbol::Resolved(&Float32x3x3_raw_list)->returnTypeSymbol = &Float32x3x3Type;

    /// f32x4x3 with Float32x3, Float32x3, Float32x3, Float32x3
    Float32x4x3_Float32_3_ctor_arg0.name = "arg0"_c;
    Float32x4x3_Float32_3_ctor_arg0.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_Float32_3_ctor_arg1.name = "arg1"_c;
    Float32x4x3_Float32_3_ctor_arg1.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_Float32_3_ctor_arg2.name = "arg2"_c;
    Float32x4x3_Float32_3_ctor_arg2.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_Float32_3_ctor_arg3.name = "arg3"_c;
    Float32x4x3_Float32_3_ctor_arg3.type = Type::FullType{ Float32x3Type.name };
    Float32x4x3_Float32_3_ctor.name = "f32x4x3"_c;
    Float32x4x3_Float32_3_ctor.compileTime = true;
    Float32x4x3_Float32_3_ctor.backendIndex = 1198;
    Float32x4x3_Float32_3_ctor.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_Float32_3_ctor.parameters = Float32x4x3_Float32_3_ctor_args;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor_arg0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor_arg1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor_arg2)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor_arg3)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor)->signature = "f32x4x3 f32x4x3(f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor)->name = "f32x4x3(f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor)->nameWithVarNames = "f32x4x3(arg0 : f32x3, arg1 : f32x3, arg2 : f32x3, arg3 : f32x3)"_c;
    Symbol::Resolved(&Float32x4x3_Float32_3_ctor)->returnTypeSymbol = &Float32x4x3Type;

    /// f32x4x3 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x4x3_raw_list_arg0.name = "arg0"_c;
    Float32x4x3_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg1.name = "arg1"_c;
    Float32x4x3_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg2.name = "arg2"_c;
    Float32x4x3_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg3.name = "arg3"_c;
    Float32x4x3_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg4.name = "arg4"_c;
    Float32x4x3_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg5.name = "arg5"_c;
    Float32x4x3_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg6.name = "arg6"_c;
    Float32x4x3_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg7.name = "arg7"_c;
    Float32x4x3_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg8.name = "arg8"_c;
    Float32x4x3_raw_list_arg8.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg9.name = "arg9"_c;
    Float32x4x3_raw_list_arg9.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg10.name = "arg10"_c;
    Float32x4x3_raw_list_arg10.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list_arg11.name = "arg11"_c;
    Float32x4x3_raw_list_arg11.type = Type::FullType{ Float32Type.name };
    Float32x4x3_raw_list.name = "f32x4x3"_c;
    Float32x4x3_raw_list.compileTime = true;
    Float32x4x3_raw_list.backendIndex = 1199;
    Float32x4x3_raw_list.returnType = Type::FullType { Float32x4x3Type.name };
    Float32x4x3_raw_list.parameters = Float32x4x3_raw_list_args;
    Symbol::Resolved(&Float32x4x3_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg8)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg9)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg10)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list_arg11)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x3_raw_list)->signature = "f32x4x3 f32x4x3(f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x4x3_raw_list)->name = "f32x4x3(f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x4x3_raw_list)->nameWithVarNames = "f32x4x3(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32, arg6 : f32, arg7 : f32, arg8 : f32, arg9 : f32, arg10 : f32, arg11 : f32)"_c;
    Symbol::Resolved(&Float32x4x3_raw_list)->returnTypeSymbol = &Float32x4x3Type;

    /// f32x2x4 with Float32x4, Float32x4
    Float32x2x4_Float32_4_ctor_arg0.name = "arg0"_c;
    Float32x2x4_Float32_4_ctor_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x2x4_Float32_4_ctor_arg1.name = "arg1"_c;
    Float32x2x4_Float32_4_ctor_arg1.type = Type::FullType{ Float32x4Type.name };
    Float32x2x4_Float32_4_ctor.name = "f32x2x4"_c;
    Float32x2x4_Float32_4_ctor.compileTime = true;
    Float32x2x4_Float32_4_ctor.backendIndex = 1212;
    Float32x2x4_Float32_4_ctor.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_Float32_4_ctor.parameters = Float32x2x4_Float32_4_ctor_args;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor_arg1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor)->signature = "f32x2x4 f32x2x4(f32x4,f32x4)"_c;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor)->name = "f32x2x4(f32x4,f32x4)"_c;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor)->nameWithVarNames = "f32x2x4(arg0 : f32x4, arg1 : f32x4)"_c;
    Symbol::Resolved(&Float32x2x4_Float32_4_ctor)->returnTypeSymbol = &Float32x2x4Type;

    /// f32x2x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x2x4_raw_list_arg0.name = "arg0"_c;
    Float32x2x4_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg1.name = "arg1"_c;
    Float32x2x4_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg2.name = "arg2"_c;
    Float32x2x4_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg3.name = "arg3"_c;
    Float32x2x4_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg4.name = "arg4"_c;
    Float32x2x4_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg5.name = "arg5"_c;
    Float32x2x4_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg6.name = "arg6"_c;
    Float32x2x4_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list_arg7.name = "arg7"_c;
    Float32x2x4_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x2x4_raw_list.name = "f32x2x4"_c;
    Float32x2x4_raw_list.compileTime = true;
    Float32x2x4_raw_list.backendIndex = 1213;
    Float32x2x4_raw_list.returnType = Type::FullType { Float32x2x4Type.name };
    Float32x2x4_raw_list.parameters = Float32x2x4_raw_list_args;
    Symbol::Resolved(&Float32x2x4_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x2x4_raw_list)->signature = "f32x2x4 f32x2x4(f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x2x4_raw_list)->name = "f32x2x4(f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x2x4_raw_list)->nameWithVarNames = "f32x2x4(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32, arg6 : f32, arg7 : f32)"_c;
    Symbol::Resolved(&Float32x2x4_raw_list)->returnTypeSymbol = &Float32x2x4Type;

    /// f32x3x4 with Float32x4, Float32x4, Float32x4
    Float32x3x4_Float32_4_ctor_arg0.name = "arg0"_c;
    Float32x3x4_Float32_4_ctor_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x3x4_Float32_4_ctor_arg1.name = "arg1"_c;
    Float32x3x4_Float32_4_ctor_arg1.type = Type::FullType{ Float32x4Type.name };
    Float32x3x4_Float32_4_ctor_arg2.name = "arg2"_c;
    Float32x3x4_Float32_4_ctor_arg2.type = Type::FullType{ Float32x4Type.name };
    Float32x3x4_Float32_4_ctor.name = "f32x3x4"_c;
    Float32x3x4_Float32_4_ctor.compileTime = true;
    Float32x3x4_Float32_4_ctor.backendIndex = 1226;
    Float32x3x4_Float32_4_ctor.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_Float32_4_ctor.parameters = Float32x3x4_Float32_4_ctor_args;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor_arg1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor_arg2)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor)->signature = "f32x3x4 f32x3x4(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor)->name = "f32x3x4(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor)->nameWithVarNames = "f32x3x4(arg0 : f32x4, arg1 : f32x4, arg2 : f32x4)"_c;
    Symbol::Resolved(&Float32x3x4_Float32_4_ctor)->returnTypeSymbol = &Float32x3x4Type;

    /// f32x3x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x3x4_raw_list_arg0.name = "arg0"_c;
    Float32x3x4_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg1.name = "arg1"_c;
    Float32x3x4_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg2.name = "arg2"_c;
    Float32x3x4_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg3.name = "arg3"_c;
    Float32x3x4_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg4.name = "arg4"_c;
    Float32x3x4_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg5.name = "arg5"_c;
    Float32x3x4_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg6.name = "arg6"_c;
    Float32x3x4_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg7.name = "arg7"_c;
    Float32x3x4_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg8.name = "arg8"_c;
    Float32x3x4_raw_list_arg8.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg9.name = "arg9"_c;
    Float32x3x4_raw_list_arg9.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg10.name = "arg10"_c;
    Float32x3x4_raw_list_arg10.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list_arg11.name = "arg11"_c;
    Float32x3x4_raw_list_arg11.type = Type::FullType{ Float32Type.name };
    Float32x3x4_raw_list.name = "f32x3x4"_c;
    Float32x3x4_raw_list.compileTime = true;
    Float32x3x4_raw_list.backendIndex = 1227;
    Float32x3x4_raw_list.returnType = Type::FullType { Float32x3x4Type.name };
    Float32x3x4_raw_list.parameters = Float32x3x4_raw_list_args;
    Symbol::Resolved(&Float32x3x4_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg8)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg9)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg10)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list_arg11)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x3x4_raw_list)->signature = "f32x3x4 f32x3x4(f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x3x4_raw_list)->name = "f32x3x4(f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x3x4_raw_list)->nameWithVarNames = "f32x3x4(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32, arg6 : f32, arg7 : f32, arg8 : f32, arg9 : f32, arg10 : f32, arg11 : f32)"_c;
    Symbol::Resolved(&Float32x3x4_raw_list)->returnTypeSymbol = &Float32x3x4Type;

    /// f32x4x4 with Float32x4, Float32x4, Float32x4, Float32x4
    Float32x4x4_Float32_4_ctor_arg0.name = "arg0"_c;
    Float32x4x4_Float32_4_ctor_arg0.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_Float32_4_ctor_arg1.name = "arg1"_c;
    Float32x4x4_Float32_4_ctor_arg1.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_Float32_4_ctor_arg2.name = "arg2"_c;
    Float32x4x4_Float32_4_ctor_arg2.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_Float32_4_ctor_arg3.name = "arg3"_c;
    Float32x4x4_Float32_4_ctor_arg3.type = Type::FullType{ Float32x4Type.name };
    Float32x4x4_Float32_4_ctor.name = "f32x4x4"_c;
    Float32x4x4_Float32_4_ctor.compileTime = true;
    Float32x4x4_Float32_4_ctor.backendIndex = 1240;
    Float32x4x4_Float32_4_ctor.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_Float32_4_ctor.parameters = Float32x4x4_Float32_4_ctor_args;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor_arg0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor_arg1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor_arg2)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor_arg3)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor)->signature = "f32x4x4 f32x4x4(f32x4,f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor)->name = "f32x4x4(f32x4,f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor)->nameWithVarNames = "f32x4x4(arg0 : f32x4, arg1 : f32x4, arg2 : f32x4, arg3 : f32x4)"_c;
    Symbol::Resolved(&Float32x4x4_Float32_4_ctor)->returnTypeSymbol = &Float32x4x4Type;

    /// f32x4x4
    Float32x4x4_identity.name = "f32x4x4"_c;
    Float32x4x4_identity.compileTime = true;
    Float32x4x4_identity.backendIndex = 1241;
    Float32x4x4_identity.returnType = Type::FullType { Float32x4x4Type.name };
    Symbol::Resolved(&Float32x4x4_identity)->signature = "f32x4x4 f32x4x4()"_c;
    Symbol::Resolved(&Float32x4x4_identity)->name = "f32x4x4()"_c;
    Symbol::Resolved(&Float32x4x4_identity)->nameWithVarNames = "f32x4x4()"_c;
    Symbol::Resolved(&Float32x4x4_identity)->returnTypeSymbol = &Float32x4x4Type;

    /// f32x4x4 with Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32, Float32
    Float32x4x4_raw_list_arg0.name = "arg0"_c;
    Float32x4x4_raw_list_arg0.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg1.name = "arg1"_c;
    Float32x4x4_raw_list_arg1.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg2.name = "arg2"_c;
    Float32x4x4_raw_list_arg2.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg3.name = "arg3"_c;
    Float32x4x4_raw_list_arg3.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg4.name = "arg4"_c;
    Float32x4x4_raw_list_arg4.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg5.name = "arg5"_c;
    Float32x4x4_raw_list_arg5.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg6.name = "arg6"_c;
    Float32x4x4_raw_list_arg6.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg7.name = "arg7"_c;
    Float32x4x4_raw_list_arg7.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg8.name = "arg8"_c;
    Float32x4x4_raw_list_arg8.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg9.name = "arg9"_c;
    Float32x4x4_raw_list_arg9.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg10.name = "arg10"_c;
    Float32x4x4_raw_list_arg10.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg11.name = "arg11"_c;
    Float32x4x4_raw_list_arg11.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg12.name = "arg12"_c;
    Float32x4x4_raw_list_arg12.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg13.name = "arg13"_c;
    Float32x4x4_raw_list_arg13.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg14.name = "arg14"_c;
    Float32x4x4_raw_list_arg14.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list_arg15.name = "arg15"_c;
    Float32x4x4_raw_list_arg15.type = Type::FullType{ Float32Type.name };
    Float32x4x4_raw_list.name = "f32x4x4"_c;
    Float32x4x4_raw_list.compileTime = true;
    Float32x4x4_raw_list.backendIndex = 1242;
    Float32x4x4_raw_list.returnType = Type::FullType { Float32x4x4Type.name };
    Float32x4x4_raw_list.parameters = Float32x4x4_raw_list_args;
    Symbol::Resolved(&Float32x4x4_raw_list_arg0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg2)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg3)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg4)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg5)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg6)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg7)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg8)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg9)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg10)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg11)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg12)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg13)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg14)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list_arg15)->typeSymbol = &Float32Type;
    Symbol::Resolved(&Float32x4x4_raw_list)->signature = "f32x4x4 f32x4x4(f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x4x4_raw_list)->name = "f32x4x4(f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&Float32x4x4_raw_list)->nameWithVarNames = "f32x4x4(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32, arg4 : f32, arg5 : f32, arg6 : f32, arg7 : f32, arg8 : f32, arg9 : f32, arg10 : f32, arg11 : f32, arg12 : f32, arg13 : f32, arg14 : f32, arg15 : f32)"_c;
    Symbol::Resolved(&Float32x4x4_raw_list)->returnTypeSymbol = &Float32x4x4Type;

    /// f16x2x2 with Float16x2, Float16x2
    Float16x2x2_Float16_2_ctor_arg0.name = "arg0"_c;
    Float16x2x2_Float16_2_ctor_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x2x2_Float16_2_ctor_arg1.name = "arg1"_c;
    Float16x2x2_Float16_2_ctor_arg1.type = Type::FullType{ Float16x2Type.name };
    Float16x2x2_Float16_2_ctor.name = "f16x2x2"_c;
    Float16x2x2_Float16_2_ctor.compileTime = true;
    Float16x2x2_Float16_2_ctor.backendIndex = 1255;
    Float16x2x2_Float16_2_ctor.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_Float16_2_ctor.parameters = Float16x2x2_Float16_2_ctor_args;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor_arg1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor)->signature = "f16x2x2 f16x2x2(f16x2,f16x2)"_c;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor)->name = "f16x2x2(f16x2,f16x2)"_c;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor)->nameWithVarNames = "f16x2x2(arg0 : f16x2, arg1 : f16x2)"_c;
    Symbol::Resolved(&Float16x2x2_Float16_2_ctor)->returnTypeSymbol = &Float16x2x2Type;

    /// f16x2x2
    Float16x2x2_identity.name = "f16x2x2"_c;
    Float16x2x2_identity.compileTime = true;
    Float16x2x2_identity.backendIndex = 1256;
    Float16x2x2_identity.returnType = Type::FullType { Float16x2x2Type.name };
    Symbol::Resolved(&Float16x2x2_identity)->signature = "f16x2x2 f16x2x2()"_c;
    Symbol::Resolved(&Float16x2x2_identity)->name = "f16x2x2()"_c;
    Symbol::Resolved(&Float16x2x2_identity)->nameWithVarNames = "f16x2x2()"_c;
    Symbol::Resolved(&Float16x2x2_identity)->returnTypeSymbol = &Float16x2x2Type;

    /// f16x2x2 with Float16, Float16, Float16, Float16
    Float16x2x2_raw_list_arg0.name = "arg0"_c;
    Float16x2x2_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2x2_raw_list_arg1.name = "arg1"_c;
    Float16x2x2_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x2x2_raw_list_arg2.name = "arg2"_c;
    Float16x2x2_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x2x2_raw_list_arg3.name = "arg3"_c;
    Float16x2x2_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x2x2_raw_list.name = "f16x2x2"_c;
    Float16x2x2_raw_list.compileTime = true;
    Float16x2x2_raw_list.backendIndex = 1257;
    Float16x2x2_raw_list.returnType = Type::FullType { Float16x2x2Type.name };
    Float16x2x2_raw_list.parameters = Float16x2x2_raw_list_args;
    Symbol::Resolved(&Float16x2x2_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x2_raw_list)->signature = "f16x2x2 f16x2x2(f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x2x2_raw_list)->name = "f16x2x2(f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x2x2_raw_list)->nameWithVarNames = "f16x2x2(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16)"_c;
    Symbol::Resolved(&Float16x2x2_raw_list)->returnTypeSymbol = &Float16x2x2Type;

    /// f16x3x2 with Float16x2, Float16x2, Float16x2
    Float16x3x2_Float16_2_ctor_arg0.name = "arg0"_c;
    Float16x3x2_Float16_2_ctor_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x3x2_Float16_2_ctor_arg1.name = "arg1"_c;
    Float16x3x2_Float16_2_ctor_arg1.type = Type::FullType{ Float16x2Type.name };
    Float16x3x2_Float16_2_ctor_arg2.name = "arg2"_c;
    Float16x3x2_Float16_2_ctor_arg2.type = Type::FullType{ Float16x2Type.name };
    Float16x3x2_Float16_2_ctor.name = "f16x3x2"_c;
    Float16x3x2_Float16_2_ctor.compileTime = true;
    Float16x3x2_Float16_2_ctor.backendIndex = 1270;
    Float16x3x2_Float16_2_ctor.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_Float16_2_ctor.parameters = Float16x3x2_Float16_2_ctor_args;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor_arg1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor_arg2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor)->signature = "f16x3x2 f16x3x2(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor)->name = "f16x3x2(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor)->nameWithVarNames = "f16x3x2(arg0 : f16x2, arg1 : f16x2, arg2 : f16x2)"_c;
    Symbol::Resolved(&Float16x3x2_Float16_2_ctor)->returnTypeSymbol = &Float16x3x2Type;

    /// f16x3x2 with Float16, Float16, Float16, Float16, Float16, Float16
    Float16x3x2_raw_list_arg0.name = "arg0"_c;
    Float16x3x2_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg1.name = "arg1"_c;
    Float16x3x2_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg2.name = "arg2"_c;
    Float16x3x2_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg3.name = "arg3"_c;
    Float16x3x2_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg4.name = "arg4"_c;
    Float16x3x2_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list_arg5.name = "arg5"_c;
    Float16x3x2_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x3x2_raw_list.name = "f16x3x2"_c;
    Float16x3x2_raw_list.compileTime = true;
    Float16x3x2_raw_list.backendIndex = 1271;
    Float16x3x2_raw_list.returnType = Type::FullType { Float16x3x2Type.name };
    Float16x3x2_raw_list.parameters = Float16x3x2_raw_list_args;
    Symbol::Resolved(&Float16x3x2_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x2_raw_list)->signature = "f16x3x2 f16x3x2(f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x3x2_raw_list)->name = "f16x3x2(f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x3x2_raw_list)->nameWithVarNames = "f16x3x2(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16)"_c;
    Symbol::Resolved(&Float16x3x2_raw_list)->returnTypeSymbol = &Float16x3x2Type;

    /// f16x4x2 with Float16x2, Float16x2, Float16x2, Float16x2
    Float16x4x2_Float16_2_ctor_arg0.name = "arg0"_c;
    Float16x4x2_Float16_2_ctor_arg0.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_Float16_2_ctor_arg1.name = "arg1"_c;
    Float16x4x2_Float16_2_ctor_arg1.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_Float16_2_ctor_arg2.name = "arg2"_c;
    Float16x4x2_Float16_2_ctor_arg2.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_Float16_2_ctor_arg3.name = "arg3"_c;
    Float16x4x2_Float16_2_ctor_arg3.type = Type::FullType{ Float16x2Type.name };
    Float16x4x2_Float16_2_ctor.name = "f16x4x2"_c;
    Float16x4x2_Float16_2_ctor.compileTime = true;
    Float16x4x2_Float16_2_ctor.backendIndex = 1284;
    Float16x4x2_Float16_2_ctor.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_Float16_2_ctor.parameters = Float16x4x2_Float16_2_ctor_args;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor_arg0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor_arg1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor_arg2)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor_arg3)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor)->signature = "f16x4x2 f16x4x2(f16x2,f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor)->name = "f16x4x2(f16x2,f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor)->nameWithVarNames = "f16x4x2(arg0 : f16x2, arg1 : f16x2, arg2 : f16x2, arg3 : f16x2)"_c;
    Symbol::Resolved(&Float16x4x2_Float16_2_ctor)->returnTypeSymbol = &Float16x4x2Type;

    /// f16x4x2 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x4x2_raw_list_arg0.name = "arg0"_c;
    Float16x4x2_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg1.name = "arg1"_c;
    Float16x4x2_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg2.name = "arg2"_c;
    Float16x4x2_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg3.name = "arg3"_c;
    Float16x4x2_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg4.name = "arg4"_c;
    Float16x4x2_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg5.name = "arg5"_c;
    Float16x4x2_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg6.name = "arg6"_c;
    Float16x4x2_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list_arg7.name = "arg7"_c;
    Float16x4x2_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x4x2_raw_list.name = "f16x4x2"_c;
    Float16x4x2_raw_list.compileTime = true;
    Float16x4x2_raw_list.backendIndex = 1285;
    Float16x4x2_raw_list.returnType = Type::FullType { Float16x4x2Type.name };
    Float16x4x2_raw_list.parameters = Float16x4x2_raw_list_args;
    Symbol::Resolved(&Float16x4x2_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x2_raw_list)->signature = "f16x4x2 f16x4x2(f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x4x2_raw_list)->name = "f16x4x2(f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x4x2_raw_list)->nameWithVarNames = "f16x4x2(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16, arg6 : f16, arg7 : f16)"_c;
    Symbol::Resolved(&Float16x4x2_raw_list)->returnTypeSymbol = &Float16x4x2Type;

    /// f16x2x3 with Float16x3, Float16x3
    Float16x2x3_Float16_3_ctor_arg0.name = "arg0"_c;
    Float16x2x3_Float16_3_ctor_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x2x3_Float16_3_ctor_arg1.name = "arg1"_c;
    Float16x2x3_Float16_3_ctor_arg1.type = Type::FullType{ Float16x3Type.name };
    Float16x2x3_Float16_3_ctor.name = "f16x2x3"_c;
    Float16x2x3_Float16_3_ctor.compileTime = true;
    Float16x2x3_Float16_3_ctor.backendIndex = 1298;
    Float16x2x3_Float16_3_ctor.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_Float16_3_ctor.parameters = Float16x2x3_Float16_3_ctor_args;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor_arg1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor)->signature = "f16x2x3 f16x2x3(f16x3,f16x3)"_c;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor)->name = "f16x2x3(f16x3,f16x3)"_c;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor)->nameWithVarNames = "f16x2x3(arg0 : f16x3, arg1 : f16x3)"_c;
    Symbol::Resolved(&Float16x2x3_Float16_3_ctor)->returnTypeSymbol = &Float16x2x3Type;

    /// f16x2x3 with Float16, Float16, Float16, Float16, Float16, Float16
    Float16x2x3_raw_list_arg0.name = "arg0"_c;
    Float16x2x3_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg1.name = "arg1"_c;
    Float16x2x3_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg2.name = "arg2"_c;
    Float16x2x3_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg3.name = "arg3"_c;
    Float16x2x3_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg4.name = "arg4"_c;
    Float16x2x3_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list_arg5.name = "arg5"_c;
    Float16x2x3_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x2x3_raw_list.name = "f16x2x3"_c;
    Float16x2x3_raw_list.compileTime = true;
    Float16x2x3_raw_list.backendIndex = 1299;
    Float16x2x3_raw_list.returnType = Type::FullType { Float16x2x3Type.name };
    Float16x2x3_raw_list.parameters = Float16x2x3_raw_list_args;
    Symbol::Resolved(&Float16x2x3_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x3_raw_list)->signature = "f16x2x3 f16x2x3(f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x2x3_raw_list)->name = "f16x2x3(f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x2x3_raw_list)->nameWithVarNames = "f16x2x3(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16)"_c;
    Symbol::Resolved(&Float16x2x3_raw_list)->returnTypeSymbol = &Float16x2x3Type;

    /// f16x3x3 with Float16x3, Float16x3, Float16x3
    Float16x3x3_Float16_3_ctor_arg0.name = "arg0"_c;
    Float16x3x3_Float16_3_ctor_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x3x3_Float16_3_ctor_arg1.name = "arg1"_c;
    Float16x3x3_Float16_3_ctor_arg1.type = Type::FullType{ Float16x3Type.name };
    Float16x3x3_Float16_3_ctor_arg2.name = "arg2"_c;
    Float16x3x3_Float16_3_ctor_arg2.type = Type::FullType{ Float16x3Type.name };
    Float16x3x3_Float16_3_ctor.name = "f16x3x3"_c;
    Float16x3x3_Float16_3_ctor.compileTime = true;
    Float16x3x3_Float16_3_ctor.backendIndex = 1312;
    Float16x3x3_Float16_3_ctor.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_Float16_3_ctor.parameters = Float16x3x3_Float16_3_ctor_args;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor_arg1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor_arg2)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor)->signature = "f16x3x3 f16x3x3(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor)->name = "f16x3x3(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor)->nameWithVarNames = "f16x3x3(arg0 : f16x3, arg1 : f16x3, arg2 : f16x3)"_c;
    Symbol::Resolved(&Float16x3x3_Float16_3_ctor)->returnTypeSymbol = &Float16x3x3Type;

    /// f16x3x3
    Float16x3x3_identity.name = "f16x3x3"_c;
    Float16x3x3_identity.compileTime = true;
    Float16x3x3_identity.backendIndex = 1313;
    Float16x3x3_identity.returnType = Type::FullType { Float16x3x3Type.name };
    Symbol::Resolved(&Float16x3x3_identity)->signature = "f16x3x3 f16x3x3()"_c;
    Symbol::Resolved(&Float16x3x3_identity)->name = "f16x3x3()"_c;
    Symbol::Resolved(&Float16x3x3_identity)->nameWithVarNames = "f16x3x3()"_c;
    Symbol::Resolved(&Float16x3x3_identity)->returnTypeSymbol = &Float16x3x3Type;

    /// f16x3x3 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x3x3_raw_list_arg0.name = "arg0"_c;
    Float16x3x3_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg1.name = "arg1"_c;
    Float16x3x3_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg2.name = "arg2"_c;
    Float16x3x3_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg3.name = "arg3"_c;
    Float16x3x3_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg4.name = "arg4"_c;
    Float16x3x3_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg5.name = "arg5"_c;
    Float16x3x3_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg6.name = "arg6"_c;
    Float16x3x3_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg7.name = "arg7"_c;
    Float16x3x3_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list_arg8.name = "arg8"_c;
    Float16x3x3_raw_list_arg8.type = Type::FullType{ Float16Type.name };
    Float16x3x3_raw_list.name = "f16x3x3"_c;
    Float16x3x3_raw_list.compileTime = true;
    Float16x3x3_raw_list.backendIndex = 1314;
    Float16x3x3_raw_list.returnType = Type::FullType { Float16x3x3Type.name };
    Float16x3x3_raw_list.parameters = Float16x3x3_raw_list_args;
    Symbol::Resolved(&Float16x3x3_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list_arg8)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x3_raw_list)->signature = "f16x3x3 f16x3x3(f16,f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x3x3_raw_list)->name = "f16x3x3(f16,f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x3x3_raw_list)->nameWithVarNames = "f16x3x3(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16, arg6 : f16, arg7 : f16, arg8 : f16)"_c;
    Symbol::Resolved(&Float16x3x3_raw_list)->returnTypeSymbol = &Float16x3x3Type;

    /// f16x4x3 with Float16x3, Float16x3, Float16x3, Float16x3
    Float16x4x3_Float16_3_ctor_arg0.name = "arg0"_c;
    Float16x4x3_Float16_3_ctor_arg0.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_Float16_3_ctor_arg1.name = "arg1"_c;
    Float16x4x3_Float16_3_ctor_arg1.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_Float16_3_ctor_arg2.name = "arg2"_c;
    Float16x4x3_Float16_3_ctor_arg2.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_Float16_3_ctor_arg3.name = "arg3"_c;
    Float16x4x3_Float16_3_ctor_arg3.type = Type::FullType{ Float16x3Type.name };
    Float16x4x3_Float16_3_ctor.name = "f16x4x3"_c;
    Float16x4x3_Float16_3_ctor.compileTime = true;
    Float16x4x3_Float16_3_ctor.backendIndex = 1327;
    Float16x4x3_Float16_3_ctor.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_Float16_3_ctor.parameters = Float16x4x3_Float16_3_ctor_args;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor_arg0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor_arg1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor_arg2)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor_arg3)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor)->signature = "f16x4x3 f16x4x3(f16x3,f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor)->name = "f16x4x3(f16x3,f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor)->nameWithVarNames = "f16x4x3(arg0 : f16x3, arg1 : f16x3, arg2 : f16x3, arg3 : f16x3)"_c;
    Symbol::Resolved(&Float16x4x3_Float16_3_ctor)->returnTypeSymbol = &Float16x4x3Type;

    /// f16x4x3 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x4x3_raw_list_arg0.name = "arg0"_c;
    Float16x4x3_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg1.name = "arg1"_c;
    Float16x4x3_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg2.name = "arg2"_c;
    Float16x4x3_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg3.name = "arg3"_c;
    Float16x4x3_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg4.name = "arg4"_c;
    Float16x4x3_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg5.name = "arg5"_c;
    Float16x4x3_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg6.name = "arg6"_c;
    Float16x4x3_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg7.name = "arg7"_c;
    Float16x4x3_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg8.name = "arg8"_c;
    Float16x4x3_raw_list_arg8.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg9.name = "arg9"_c;
    Float16x4x3_raw_list_arg9.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg10.name = "arg10"_c;
    Float16x4x3_raw_list_arg10.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list_arg11.name = "arg11"_c;
    Float16x4x3_raw_list_arg11.type = Type::FullType{ Float16Type.name };
    Float16x4x3_raw_list.name = "f16x4x3"_c;
    Float16x4x3_raw_list.compileTime = true;
    Float16x4x3_raw_list.backendIndex = 1328;
    Float16x4x3_raw_list.returnType = Type::FullType { Float16x4x3Type.name };
    Float16x4x3_raw_list.parameters = Float16x4x3_raw_list_args;
    Symbol::Resolved(&Float16x4x3_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg8)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg9)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg10)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list_arg11)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x3_raw_list)->signature = "f16x4x3 f16x4x3(f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x4x3_raw_list)->name = "f16x4x3(f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x4x3_raw_list)->nameWithVarNames = "f16x4x3(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16, arg6 : f16, arg7 : f16, arg8 : f16, arg9 : f16, arg10 : f16, arg11 : f16)"_c;
    Symbol::Resolved(&Float16x4x3_raw_list)->returnTypeSymbol = &Float16x4x3Type;

    /// f16x2x4 with Float16x4, Float16x4
    Float16x2x4_Float16_4_ctor_arg0.name = "arg0"_c;
    Float16x2x4_Float16_4_ctor_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x2x4_Float16_4_ctor_arg1.name = "arg1"_c;
    Float16x2x4_Float16_4_ctor_arg1.type = Type::FullType{ Float16x4Type.name };
    Float16x2x4_Float16_4_ctor.name = "f16x2x4"_c;
    Float16x2x4_Float16_4_ctor.compileTime = true;
    Float16x2x4_Float16_4_ctor.backendIndex = 1341;
    Float16x2x4_Float16_4_ctor.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_Float16_4_ctor.parameters = Float16x2x4_Float16_4_ctor_args;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor_arg1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor)->signature = "f16x2x4 f16x2x4(f16x4,f16x4)"_c;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor)->name = "f16x2x4(f16x4,f16x4)"_c;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor)->nameWithVarNames = "f16x2x4(arg0 : f16x4, arg1 : f16x4)"_c;
    Symbol::Resolved(&Float16x2x4_Float16_4_ctor)->returnTypeSymbol = &Float16x2x4Type;

    /// f16x2x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x2x4_raw_list_arg0.name = "arg0"_c;
    Float16x2x4_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg1.name = "arg1"_c;
    Float16x2x4_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg2.name = "arg2"_c;
    Float16x2x4_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg3.name = "arg3"_c;
    Float16x2x4_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg4.name = "arg4"_c;
    Float16x2x4_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg5.name = "arg5"_c;
    Float16x2x4_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg6.name = "arg6"_c;
    Float16x2x4_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list_arg7.name = "arg7"_c;
    Float16x2x4_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x2x4_raw_list.name = "f16x2x4"_c;
    Float16x2x4_raw_list.compileTime = true;
    Float16x2x4_raw_list.backendIndex = 1342;
    Float16x2x4_raw_list.returnType = Type::FullType { Float16x2x4Type.name };
    Float16x2x4_raw_list.parameters = Float16x2x4_raw_list_args;
    Symbol::Resolved(&Float16x2x4_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x2x4_raw_list)->signature = "f16x2x4 f16x2x4(f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x2x4_raw_list)->name = "f16x2x4(f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x2x4_raw_list)->nameWithVarNames = "f16x2x4(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16, arg6 : f16, arg7 : f16)"_c;
    Symbol::Resolved(&Float16x2x4_raw_list)->returnTypeSymbol = &Float16x2x4Type;

    /// f16x3x4 with Float16x4, Float16x4, Float16x4
    Float16x3x4_Float16_4_ctor_arg0.name = "arg0"_c;
    Float16x3x4_Float16_4_ctor_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x3x4_Float16_4_ctor_arg1.name = "arg1"_c;
    Float16x3x4_Float16_4_ctor_arg1.type = Type::FullType{ Float16x4Type.name };
    Float16x3x4_Float16_4_ctor_arg2.name = "arg2"_c;
    Float16x3x4_Float16_4_ctor_arg2.type = Type::FullType{ Float16x4Type.name };
    Float16x3x4_Float16_4_ctor.name = "f16x3x4"_c;
    Float16x3x4_Float16_4_ctor.compileTime = true;
    Float16x3x4_Float16_4_ctor.backendIndex = 1355;
    Float16x3x4_Float16_4_ctor.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_Float16_4_ctor.parameters = Float16x3x4_Float16_4_ctor_args;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor_arg1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor_arg2)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor)->signature = "f16x3x4 f16x3x4(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor)->name = "f16x3x4(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor)->nameWithVarNames = "f16x3x4(arg0 : f16x4, arg1 : f16x4, arg2 : f16x4)"_c;
    Symbol::Resolved(&Float16x3x4_Float16_4_ctor)->returnTypeSymbol = &Float16x3x4Type;

    /// f16x3x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x3x4_raw_list_arg0.name = "arg0"_c;
    Float16x3x4_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg1.name = "arg1"_c;
    Float16x3x4_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg2.name = "arg2"_c;
    Float16x3x4_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg3.name = "arg3"_c;
    Float16x3x4_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg4.name = "arg4"_c;
    Float16x3x4_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg5.name = "arg5"_c;
    Float16x3x4_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg6.name = "arg6"_c;
    Float16x3x4_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg7.name = "arg7"_c;
    Float16x3x4_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg8.name = "arg8"_c;
    Float16x3x4_raw_list_arg8.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg9.name = "arg9"_c;
    Float16x3x4_raw_list_arg9.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg10.name = "arg10"_c;
    Float16x3x4_raw_list_arg10.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list_arg11.name = "arg11"_c;
    Float16x3x4_raw_list_arg11.type = Type::FullType{ Float16Type.name };
    Float16x3x4_raw_list.name = "f16x3x4"_c;
    Float16x3x4_raw_list.compileTime = true;
    Float16x3x4_raw_list.backendIndex = 1356;
    Float16x3x4_raw_list.returnType = Type::FullType { Float16x3x4Type.name };
    Float16x3x4_raw_list.parameters = Float16x3x4_raw_list_args;
    Symbol::Resolved(&Float16x3x4_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg8)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg9)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg10)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list_arg11)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x3x4_raw_list)->signature = "f16x3x4 f16x3x4(f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x3x4_raw_list)->name = "f16x3x4(f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x3x4_raw_list)->nameWithVarNames = "f16x3x4(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16, arg6 : f16, arg7 : f16, arg8 : f16, arg9 : f16, arg10 : f16, arg11 : f16)"_c;
    Symbol::Resolved(&Float16x3x4_raw_list)->returnTypeSymbol = &Float16x3x4Type;

    /// f16x4x4 with Float16x4, Float16x4, Float16x4, Float16x4
    Float16x4x4_Float16_4_ctor_arg0.name = "arg0"_c;
    Float16x4x4_Float16_4_ctor_arg0.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_Float16_4_ctor_arg1.name = "arg1"_c;
    Float16x4x4_Float16_4_ctor_arg1.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_Float16_4_ctor_arg2.name = "arg2"_c;
    Float16x4x4_Float16_4_ctor_arg2.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_Float16_4_ctor_arg3.name = "arg3"_c;
    Float16x4x4_Float16_4_ctor_arg3.type = Type::FullType{ Float16x4Type.name };
    Float16x4x4_Float16_4_ctor.name = "f16x4x4"_c;
    Float16x4x4_Float16_4_ctor.compileTime = true;
    Float16x4x4_Float16_4_ctor.backendIndex = 1369;
    Float16x4x4_Float16_4_ctor.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_Float16_4_ctor.parameters = Float16x4x4_Float16_4_ctor_args;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor_arg0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor_arg1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor_arg2)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor_arg3)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor)->signature = "f16x4x4 f16x4x4(f16x4,f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor)->name = "f16x4x4(f16x4,f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor)->nameWithVarNames = "f16x4x4(arg0 : f16x4, arg1 : f16x4, arg2 : f16x4, arg3 : f16x4)"_c;
    Symbol::Resolved(&Float16x4x4_Float16_4_ctor)->returnTypeSymbol = &Float16x4x4Type;

    /// f16x4x4
    Float16x4x4_identity.name = "f16x4x4"_c;
    Float16x4x4_identity.compileTime = true;
    Float16x4x4_identity.backendIndex = 1370;
    Float16x4x4_identity.returnType = Type::FullType { Float16x4x4Type.name };
    Symbol::Resolved(&Float16x4x4_identity)->signature = "f16x4x4 f16x4x4()"_c;
    Symbol::Resolved(&Float16x4x4_identity)->name = "f16x4x4()"_c;
    Symbol::Resolved(&Float16x4x4_identity)->nameWithVarNames = "f16x4x4()"_c;
    Symbol::Resolved(&Float16x4x4_identity)->returnTypeSymbol = &Float16x4x4Type;

    /// f16x4x4 with Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16, Float16
    Float16x4x4_raw_list_arg0.name = "arg0"_c;
    Float16x4x4_raw_list_arg0.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg1.name = "arg1"_c;
    Float16x4x4_raw_list_arg1.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg2.name = "arg2"_c;
    Float16x4x4_raw_list_arg2.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg3.name = "arg3"_c;
    Float16x4x4_raw_list_arg3.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg4.name = "arg4"_c;
    Float16x4x4_raw_list_arg4.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg5.name = "arg5"_c;
    Float16x4x4_raw_list_arg5.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg6.name = "arg6"_c;
    Float16x4x4_raw_list_arg6.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg7.name = "arg7"_c;
    Float16x4x4_raw_list_arg7.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg8.name = "arg8"_c;
    Float16x4x4_raw_list_arg8.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg9.name = "arg9"_c;
    Float16x4x4_raw_list_arg9.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg10.name = "arg10"_c;
    Float16x4x4_raw_list_arg10.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg11.name = "arg11"_c;
    Float16x4x4_raw_list_arg11.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg12.name = "arg12"_c;
    Float16x4x4_raw_list_arg12.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg13.name = "arg13"_c;
    Float16x4x4_raw_list_arg13.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg14.name = "arg14"_c;
    Float16x4x4_raw_list_arg14.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list_arg15.name = "arg15"_c;
    Float16x4x4_raw_list_arg15.type = Type::FullType{ Float16Type.name };
    Float16x4x4_raw_list.name = "f16x4x4"_c;
    Float16x4x4_raw_list.compileTime = true;
    Float16x4x4_raw_list.backendIndex = 1371;
    Float16x4x4_raw_list.returnType = Type::FullType { Float16x4x4Type.name };
    Float16x4x4_raw_list.parameters = Float16x4x4_raw_list_args;
    Symbol::Resolved(&Float16x4x4_raw_list_arg0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg2)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg3)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg4)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg5)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg6)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg7)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg8)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg9)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg10)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg11)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg12)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg13)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg14)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list_arg15)->typeSymbol = &Float16Type;
    Symbol::Resolved(&Float16x4x4_raw_list)->signature = "f16x4x4 f16x4x4(f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x4x4_raw_list)->name = "f16x4x4(f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16,f16)"_c;
    Symbol::Resolved(&Float16x4x4_raw_list)->nameWithVarNames = "f16x4x4(arg0 : f16, arg1 : f16, arg2 : f16, arg3 : f16, arg4 : f16, arg5 : f16, arg6 : f16, arg7 : f16, arg8 : f16, arg9 : f16, arg10 : f16, arg11 : f16, arg12 : f16, arg13 : f16, arg14 : f16, arg15 : f16)"_c;
    Symbol::Resolved(&Float16x4x4_raw_list)->returnTypeSymbol = &Float16x4x4Type;

    /// acos with Float32
    acos_Float32_arg.name = "val"_c;
    acos_Float32_arg.type = Type::FullType{ Float32Type.name };
    acos_Float32.documentation = "Returns the arc cosine of a value."_c;
    acos_Float32.name = "acos"_c;
    acos_Float32.backendIndex = 1384;
    acos_Float32.returnType = Type::FullType { Float32Type.name };
    acos_Float32.parameters = acos_Float32_args;
    Symbol::Resolved(&acos_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&acos_Float32)->signature = "f32 acos(f32)"_c;
    Symbol::Resolved(&acos_Float32)->name = "acos(f32)"_c;
    Symbol::Resolved(&acos_Float32)->nameWithVarNames = "acos(val : f32)"_c;
    Symbol::Resolved(&acos_Float32)->returnTypeSymbol = &Float32Type;

    /// acos with Float32x2
    acos_Float32x2_arg.name = "val"_c;
    acos_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    acos_Float32x2.documentation = "Returns the arc cosine of a value."_c;
    acos_Float32x2.name = "acos"_c;
    acos_Float32x2.backendIndex = 1385;
    acos_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    acos_Float32x2.parameters = acos_Float32x2_args;
    Symbol::Resolved(&acos_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&acos_Float32x2)->signature = "f32x2 acos(f32x2)"_c;
    Symbol::Resolved(&acos_Float32x2)->name = "acos(f32x2)"_c;
    Symbol::Resolved(&acos_Float32x2)->nameWithVarNames = "acos(val : f32x2)"_c;
    Symbol::Resolved(&acos_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// acos with Float32x3
    acos_Float32x3_arg.name = "val"_c;
    acos_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    acos_Float32x3.documentation = "Returns the arc cosine of a value."_c;
    acos_Float32x3.name = "acos"_c;
    acos_Float32x3.backendIndex = 1386;
    acos_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    acos_Float32x3.parameters = acos_Float32x3_args;
    Symbol::Resolved(&acos_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&acos_Float32x3)->signature = "f32x3 acos(f32x3)"_c;
    Symbol::Resolved(&acos_Float32x3)->name = "acos(f32x3)"_c;
    Symbol::Resolved(&acos_Float32x3)->nameWithVarNames = "acos(val : f32x3)"_c;
    Symbol::Resolved(&acos_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// acos with Float32x4
    acos_Float32x4_arg.name = "val"_c;
    acos_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    acos_Float32x4.documentation = "Returns the arc cosine of a value."_c;
    acos_Float32x4.name = "acos"_c;
    acos_Float32x4.backendIndex = 1387;
    acos_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    acos_Float32x4.parameters = acos_Float32x4_args;
    Symbol::Resolved(&acos_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&acos_Float32x4)->signature = "f32x4 acos(f32x4)"_c;
    Symbol::Resolved(&acos_Float32x4)->name = "acos(f32x4)"_c;
    Symbol::Resolved(&acos_Float32x4)->nameWithVarNames = "acos(val : f32x4)"_c;
    Symbol::Resolved(&acos_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// acos with Float16
    acos_Float16_arg.name = "val"_c;
    acos_Float16_arg.type = Type::FullType{ Float16Type.name };
    acos_Float16.documentation = "Returns the arc cosine of a value."_c;
    acos_Float16.name = "acos"_c;
    acos_Float16.backendIndex = 1388;
    acos_Float16.returnType = Type::FullType { Float16Type.name };
    acos_Float16.parameters = acos_Float16_args;
    Symbol::Resolved(&acos_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&acos_Float16)->signature = "f16 acos(f16)"_c;
    Symbol::Resolved(&acos_Float16)->name = "acos(f16)"_c;
    Symbol::Resolved(&acos_Float16)->nameWithVarNames = "acos(val : f16)"_c;
    Symbol::Resolved(&acos_Float16)->returnTypeSymbol = &Float16Type;

    /// acos with Float16x2
    acos_Float16x2_arg.name = "val"_c;
    acos_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    acos_Float16x2.documentation = "Returns the arc cosine of a value."_c;
    acos_Float16x2.name = "acos"_c;
    acos_Float16x2.backendIndex = 1389;
    acos_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    acos_Float16x2.parameters = acos_Float16x2_args;
    Symbol::Resolved(&acos_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&acos_Float16x2)->signature = "f16x2 acos(f16x2)"_c;
    Symbol::Resolved(&acos_Float16x2)->name = "acos(f16x2)"_c;
    Symbol::Resolved(&acos_Float16x2)->nameWithVarNames = "acos(val : f16x2)"_c;
    Symbol::Resolved(&acos_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// acos with Float16x3
    acos_Float16x3_arg.name = "val"_c;
    acos_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    acos_Float16x3.documentation = "Returns the arc cosine of a value."_c;
    acos_Float16x3.name = "acos"_c;
    acos_Float16x3.backendIndex = 1390;
    acos_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    acos_Float16x3.parameters = acos_Float16x3_args;
    Symbol::Resolved(&acos_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&acos_Float16x3)->signature = "f16x3 acos(f16x3)"_c;
    Symbol::Resolved(&acos_Float16x3)->name = "acos(f16x3)"_c;
    Symbol::Resolved(&acos_Float16x3)->nameWithVarNames = "acos(val : f16x3)"_c;
    Symbol::Resolved(&acos_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// acos with Float16x4
    acos_Float16x4_arg.name = "val"_c;
    acos_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    acos_Float16x4.documentation = "Returns the arc cosine of a value."_c;
    acos_Float16x4.name = "acos"_c;
    acos_Float16x4.backendIndex = 1391;
    acos_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    acos_Float16x4.parameters = acos_Float16x4_args;
    Symbol::Resolved(&acos_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&acos_Float16x4)->signature = "f16x4 acos(f16x4)"_c;
    Symbol::Resolved(&acos_Float16x4)->name = "acos(f16x4)"_c;
    Symbol::Resolved(&acos_Float16x4)->nameWithVarNames = "acos(val : f16x4)"_c;
    Symbol::Resolved(&acos_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// acosh with Float32
    acosh_Float32_arg.name = "val"_c;
    acosh_Float32_arg.type = Type::FullType{ Float32Type.name };
    acosh_Float32.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float32.name = "acosh"_c;
    acosh_Float32.backendIndex = 1392;
    acosh_Float32.returnType = Type::FullType { Float32Type.name };
    acosh_Float32.parameters = acosh_Float32_args;
    Symbol::Resolved(&acosh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&acosh_Float32)->signature = "f32 acosh(f32)"_c;
    Symbol::Resolved(&acosh_Float32)->name = "acosh(f32)"_c;
    Symbol::Resolved(&acosh_Float32)->nameWithVarNames = "acosh(val : f32)"_c;
    Symbol::Resolved(&acosh_Float32)->returnTypeSymbol = &Float32Type;

    /// acosh with Float32x2
    acosh_Float32x2_arg.name = "val"_c;
    acosh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    acosh_Float32x2.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float32x2.name = "acosh"_c;
    acosh_Float32x2.backendIndex = 1393;
    acosh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    acosh_Float32x2.parameters = acosh_Float32x2_args;
    Symbol::Resolved(&acosh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&acosh_Float32x2)->signature = "f32x2 acosh(f32x2)"_c;
    Symbol::Resolved(&acosh_Float32x2)->name = "acosh(f32x2)"_c;
    Symbol::Resolved(&acosh_Float32x2)->nameWithVarNames = "acosh(val : f32x2)"_c;
    Symbol::Resolved(&acosh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// acosh with Float32x3
    acosh_Float32x3_arg.name = "val"_c;
    acosh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    acosh_Float32x3.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float32x3.name = "acosh"_c;
    acosh_Float32x3.backendIndex = 1394;
    acosh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    acosh_Float32x3.parameters = acosh_Float32x3_args;
    Symbol::Resolved(&acosh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&acosh_Float32x3)->signature = "f32x3 acosh(f32x3)"_c;
    Symbol::Resolved(&acosh_Float32x3)->name = "acosh(f32x3)"_c;
    Symbol::Resolved(&acosh_Float32x3)->nameWithVarNames = "acosh(val : f32x3)"_c;
    Symbol::Resolved(&acosh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// acosh with Float32x4
    acosh_Float32x4_arg.name = "val"_c;
    acosh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    acosh_Float32x4.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float32x4.name = "acosh"_c;
    acosh_Float32x4.backendIndex = 1395;
    acosh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    acosh_Float32x4.parameters = acosh_Float32x4_args;
    Symbol::Resolved(&acosh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&acosh_Float32x4)->signature = "f32x4 acosh(f32x4)"_c;
    Symbol::Resolved(&acosh_Float32x4)->name = "acosh(f32x4)"_c;
    Symbol::Resolved(&acosh_Float32x4)->nameWithVarNames = "acosh(val : f32x4)"_c;
    Symbol::Resolved(&acosh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// acosh with Float16
    acosh_Float16_arg.name = "val"_c;
    acosh_Float16_arg.type = Type::FullType{ Float16Type.name };
    acosh_Float16.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float16.name = "acosh"_c;
    acosh_Float16.backendIndex = 1396;
    acosh_Float16.returnType = Type::FullType { Float16Type.name };
    acosh_Float16.parameters = acosh_Float16_args;
    Symbol::Resolved(&acosh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&acosh_Float16)->signature = "f16 acosh(f16)"_c;
    Symbol::Resolved(&acosh_Float16)->name = "acosh(f16)"_c;
    Symbol::Resolved(&acosh_Float16)->nameWithVarNames = "acosh(val : f16)"_c;
    Symbol::Resolved(&acosh_Float16)->returnTypeSymbol = &Float16Type;

    /// acosh with Float16x2
    acosh_Float16x2_arg.name = "val"_c;
    acosh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    acosh_Float16x2.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float16x2.name = "acosh"_c;
    acosh_Float16x2.backendIndex = 1397;
    acosh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    acosh_Float16x2.parameters = acosh_Float16x2_args;
    Symbol::Resolved(&acosh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&acosh_Float16x2)->signature = "f16x2 acosh(f16x2)"_c;
    Symbol::Resolved(&acosh_Float16x2)->name = "acosh(f16x2)"_c;
    Symbol::Resolved(&acosh_Float16x2)->nameWithVarNames = "acosh(val : f16x2)"_c;
    Symbol::Resolved(&acosh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// acosh with Float16x3
    acosh_Float16x3_arg.name = "val"_c;
    acosh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    acosh_Float16x3.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float16x3.name = "acosh"_c;
    acosh_Float16x3.backendIndex = 1398;
    acosh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    acosh_Float16x3.parameters = acosh_Float16x3_args;
    Symbol::Resolved(&acosh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&acosh_Float16x3)->signature = "f16x3 acosh(f16x3)"_c;
    Symbol::Resolved(&acosh_Float16x3)->name = "acosh(f16x3)"_c;
    Symbol::Resolved(&acosh_Float16x3)->nameWithVarNames = "acosh(val : f16x3)"_c;
    Symbol::Resolved(&acosh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// acosh with Float16x4
    acosh_Float16x4_arg.name = "val"_c;
    acosh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    acosh_Float16x4.documentation = "Returns the hyperbolic arc cosine of a value."_c;
    acosh_Float16x4.name = "acosh"_c;
    acosh_Float16x4.backendIndex = 1399;
    acosh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    acosh_Float16x4.parameters = acosh_Float16x4_args;
    Symbol::Resolved(&acosh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&acosh_Float16x4)->signature = "f16x4 acosh(f16x4)"_c;
    Symbol::Resolved(&acosh_Float16x4)->name = "acosh(f16x4)"_c;
    Symbol::Resolved(&acosh_Float16x4)->nameWithVarNames = "acosh(val : f16x4)"_c;
    Symbol::Resolved(&acosh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// asin with Float32
    asin_Float32_arg.name = "val"_c;
    asin_Float32_arg.type = Type::FullType{ Float32Type.name };
    asin_Float32.documentation = "Returns the arc sine of a value."_c;
    asin_Float32.name = "asin"_c;
    asin_Float32.backendIndex = 1400;
    asin_Float32.returnType = Type::FullType { Float32Type.name };
    asin_Float32.parameters = asin_Float32_args;
    Symbol::Resolved(&asin_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&asin_Float32)->signature = "f32 asin(f32)"_c;
    Symbol::Resolved(&asin_Float32)->name = "asin(f32)"_c;
    Symbol::Resolved(&asin_Float32)->nameWithVarNames = "asin(val : f32)"_c;
    Symbol::Resolved(&asin_Float32)->returnTypeSymbol = &Float32Type;

    /// asin with Float32x2
    asin_Float32x2_arg.name = "val"_c;
    asin_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    asin_Float32x2.documentation = "Returns the arc sine of a value."_c;
    asin_Float32x2.name = "asin"_c;
    asin_Float32x2.backendIndex = 1401;
    asin_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    asin_Float32x2.parameters = asin_Float32x2_args;
    Symbol::Resolved(&asin_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&asin_Float32x2)->signature = "f32x2 asin(f32x2)"_c;
    Symbol::Resolved(&asin_Float32x2)->name = "asin(f32x2)"_c;
    Symbol::Resolved(&asin_Float32x2)->nameWithVarNames = "asin(val : f32x2)"_c;
    Symbol::Resolved(&asin_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// asin with Float32x3
    asin_Float32x3_arg.name = "val"_c;
    asin_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    asin_Float32x3.documentation = "Returns the arc sine of a value."_c;
    asin_Float32x3.name = "asin"_c;
    asin_Float32x3.backendIndex = 1402;
    asin_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    asin_Float32x3.parameters = asin_Float32x3_args;
    Symbol::Resolved(&asin_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&asin_Float32x3)->signature = "f32x3 asin(f32x3)"_c;
    Symbol::Resolved(&asin_Float32x3)->name = "asin(f32x3)"_c;
    Symbol::Resolved(&asin_Float32x3)->nameWithVarNames = "asin(val : f32x3)"_c;
    Symbol::Resolved(&asin_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// asin with Float32x4
    asin_Float32x4_arg.name = "val"_c;
    asin_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    asin_Float32x4.documentation = "Returns the arc sine of a value."_c;
    asin_Float32x4.name = "asin"_c;
    asin_Float32x4.backendIndex = 1403;
    asin_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    asin_Float32x4.parameters = asin_Float32x4_args;
    Symbol::Resolved(&asin_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&asin_Float32x4)->signature = "f32x4 asin(f32x4)"_c;
    Symbol::Resolved(&asin_Float32x4)->name = "asin(f32x4)"_c;
    Symbol::Resolved(&asin_Float32x4)->nameWithVarNames = "asin(val : f32x4)"_c;
    Symbol::Resolved(&asin_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// asin with Float16
    asin_Float16_arg.name = "val"_c;
    asin_Float16_arg.type = Type::FullType{ Float16Type.name };
    asin_Float16.documentation = "Returns the arc sine of a value."_c;
    asin_Float16.name = "asin"_c;
    asin_Float16.backendIndex = 1404;
    asin_Float16.returnType = Type::FullType { Float16Type.name };
    asin_Float16.parameters = asin_Float16_args;
    Symbol::Resolved(&asin_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&asin_Float16)->signature = "f16 asin(f16)"_c;
    Symbol::Resolved(&asin_Float16)->name = "asin(f16)"_c;
    Symbol::Resolved(&asin_Float16)->nameWithVarNames = "asin(val : f16)"_c;
    Symbol::Resolved(&asin_Float16)->returnTypeSymbol = &Float16Type;

    /// asin with Float16x2
    asin_Float16x2_arg.name = "val"_c;
    asin_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    asin_Float16x2.documentation = "Returns the arc sine of a value."_c;
    asin_Float16x2.name = "asin"_c;
    asin_Float16x2.backendIndex = 1405;
    asin_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    asin_Float16x2.parameters = asin_Float16x2_args;
    Symbol::Resolved(&asin_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&asin_Float16x2)->signature = "f16x2 asin(f16x2)"_c;
    Symbol::Resolved(&asin_Float16x2)->name = "asin(f16x2)"_c;
    Symbol::Resolved(&asin_Float16x2)->nameWithVarNames = "asin(val : f16x2)"_c;
    Symbol::Resolved(&asin_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// asin with Float16x3
    asin_Float16x3_arg.name = "val"_c;
    asin_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    asin_Float16x3.documentation = "Returns the arc sine of a value."_c;
    asin_Float16x3.name = "asin"_c;
    asin_Float16x3.backendIndex = 1406;
    asin_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    asin_Float16x3.parameters = asin_Float16x3_args;
    Symbol::Resolved(&asin_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&asin_Float16x3)->signature = "f16x3 asin(f16x3)"_c;
    Symbol::Resolved(&asin_Float16x3)->name = "asin(f16x3)"_c;
    Symbol::Resolved(&asin_Float16x3)->nameWithVarNames = "asin(val : f16x3)"_c;
    Symbol::Resolved(&asin_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// asin with Float16x4
    asin_Float16x4_arg.name = "val"_c;
    asin_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    asin_Float16x4.documentation = "Returns the arc sine of a value."_c;
    asin_Float16x4.name = "asin"_c;
    asin_Float16x4.backendIndex = 1407;
    asin_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    asin_Float16x4.parameters = asin_Float16x4_args;
    Symbol::Resolved(&asin_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&asin_Float16x4)->signature = "f16x4 asin(f16x4)"_c;
    Symbol::Resolved(&asin_Float16x4)->name = "asin(f16x4)"_c;
    Symbol::Resolved(&asin_Float16x4)->nameWithVarNames = "asin(val : f16x4)"_c;
    Symbol::Resolved(&asin_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// asinh with Float32
    asinh_Float32_arg.name = "val"_c;
    asinh_Float32_arg.type = Type::FullType{ Float32Type.name };
    asinh_Float32.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float32.name = "asinh"_c;
    asinh_Float32.backendIndex = 1408;
    asinh_Float32.returnType = Type::FullType { Float32Type.name };
    asinh_Float32.parameters = asinh_Float32_args;
    Symbol::Resolved(&asinh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&asinh_Float32)->signature = "f32 asinh(f32)"_c;
    Symbol::Resolved(&asinh_Float32)->name = "asinh(f32)"_c;
    Symbol::Resolved(&asinh_Float32)->nameWithVarNames = "asinh(val : f32)"_c;
    Symbol::Resolved(&asinh_Float32)->returnTypeSymbol = &Float32Type;

    /// asinh with Float32x2
    asinh_Float32x2_arg.name = "val"_c;
    asinh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    asinh_Float32x2.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float32x2.name = "asinh"_c;
    asinh_Float32x2.backendIndex = 1409;
    asinh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    asinh_Float32x2.parameters = asinh_Float32x2_args;
    Symbol::Resolved(&asinh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&asinh_Float32x2)->signature = "f32x2 asinh(f32x2)"_c;
    Symbol::Resolved(&asinh_Float32x2)->name = "asinh(f32x2)"_c;
    Symbol::Resolved(&asinh_Float32x2)->nameWithVarNames = "asinh(val : f32x2)"_c;
    Symbol::Resolved(&asinh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// asinh with Float32x3
    asinh_Float32x3_arg.name = "val"_c;
    asinh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    asinh_Float32x3.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float32x3.name = "asinh"_c;
    asinh_Float32x3.backendIndex = 1410;
    asinh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    asinh_Float32x3.parameters = asinh_Float32x3_args;
    Symbol::Resolved(&asinh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&asinh_Float32x3)->signature = "f32x3 asinh(f32x3)"_c;
    Symbol::Resolved(&asinh_Float32x3)->name = "asinh(f32x3)"_c;
    Symbol::Resolved(&asinh_Float32x3)->nameWithVarNames = "asinh(val : f32x3)"_c;
    Symbol::Resolved(&asinh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// asinh with Float32x4
    asinh_Float32x4_arg.name = "val"_c;
    asinh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    asinh_Float32x4.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float32x4.name = "asinh"_c;
    asinh_Float32x4.backendIndex = 1411;
    asinh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    asinh_Float32x4.parameters = asinh_Float32x4_args;
    Symbol::Resolved(&asinh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&asinh_Float32x4)->signature = "f32x4 asinh(f32x4)"_c;
    Symbol::Resolved(&asinh_Float32x4)->name = "asinh(f32x4)"_c;
    Symbol::Resolved(&asinh_Float32x4)->nameWithVarNames = "asinh(val : f32x4)"_c;
    Symbol::Resolved(&asinh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// asinh with Float16
    asinh_Float16_arg.name = "val"_c;
    asinh_Float16_arg.type = Type::FullType{ Float16Type.name };
    asinh_Float16.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float16.name = "asinh"_c;
    asinh_Float16.backendIndex = 1412;
    asinh_Float16.returnType = Type::FullType { Float16Type.name };
    asinh_Float16.parameters = asinh_Float16_args;
    Symbol::Resolved(&asinh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&asinh_Float16)->signature = "f16 asinh(f16)"_c;
    Symbol::Resolved(&asinh_Float16)->name = "asinh(f16)"_c;
    Symbol::Resolved(&asinh_Float16)->nameWithVarNames = "asinh(val : f16)"_c;
    Symbol::Resolved(&asinh_Float16)->returnTypeSymbol = &Float16Type;

    /// asinh with Float16x2
    asinh_Float16x2_arg.name = "val"_c;
    asinh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    asinh_Float16x2.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float16x2.name = "asinh"_c;
    asinh_Float16x2.backendIndex = 1413;
    asinh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    asinh_Float16x2.parameters = asinh_Float16x2_args;
    Symbol::Resolved(&asinh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&asinh_Float16x2)->signature = "f16x2 asinh(f16x2)"_c;
    Symbol::Resolved(&asinh_Float16x2)->name = "asinh(f16x2)"_c;
    Symbol::Resolved(&asinh_Float16x2)->nameWithVarNames = "asinh(val : f16x2)"_c;
    Symbol::Resolved(&asinh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// asinh with Float16x3
    asinh_Float16x3_arg.name = "val"_c;
    asinh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    asinh_Float16x3.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float16x3.name = "asinh"_c;
    asinh_Float16x3.backendIndex = 1414;
    asinh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    asinh_Float16x3.parameters = asinh_Float16x3_args;
    Symbol::Resolved(&asinh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&asinh_Float16x3)->signature = "f16x3 asinh(f16x3)"_c;
    Symbol::Resolved(&asinh_Float16x3)->name = "asinh(f16x3)"_c;
    Symbol::Resolved(&asinh_Float16x3)->nameWithVarNames = "asinh(val : f16x3)"_c;
    Symbol::Resolved(&asinh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// asinh with Float16x4
    asinh_Float16x4_arg.name = "val"_c;
    asinh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    asinh_Float16x4.documentation = "Returns the hyperbolic arc sine of a value."_c;
    asinh_Float16x4.name = "asinh"_c;
    asinh_Float16x4.backendIndex = 1415;
    asinh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    asinh_Float16x4.parameters = asinh_Float16x4_args;
    Symbol::Resolved(&asinh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&asinh_Float16x4)->signature = "f16x4 asinh(f16x4)"_c;
    Symbol::Resolved(&asinh_Float16x4)->name = "asinh(f16x4)"_c;
    Symbol::Resolved(&asinh_Float16x4)->nameWithVarNames = "asinh(val : f16x4)"_c;
    Symbol::Resolved(&asinh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// atan with Float32
    atan_Float32_arg.name = "val"_c;
    atan_Float32_arg.type = Type::FullType{ Float32Type.name };
    atan_Float32.documentation = "Returns the arc tangent of a value."_c;
    atan_Float32.name = "atan"_c;
    atan_Float32.backendIndex = 1416;
    atan_Float32.returnType = Type::FullType { Float32Type.name };
    atan_Float32.parameters = atan_Float32_args;
    Symbol::Resolved(&atan_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan_Float32)->signature = "f32 atan(f32)"_c;
    Symbol::Resolved(&atan_Float32)->name = "atan(f32)"_c;
    Symbol::Resolved(&atan_Float32)->nameWithVarNames = "atan(val : f32)"_c;
    Symbol::Resolved(&atan_Float32)->returnTypeSymbol = &Float32Type;

    /// atan with Float32x2
    atan_Float32x2_arg.name = "val"_c;
    atan_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    atan_Float32x2.documentation = "Returns the arc tangent of a value."_c;
    atan_Float32x2.name = "atan"_c;
    atan_Float32x2.backendIndex = 1417;
    atan_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    atan_Float32x2.parameters = atan_Float32x2_args;
    Symbol::Resolved(&atan_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan_Float32x2)->signature = "f32x2 atan(f32x2)"_c;
    Symbol::Resolved(&atan_Float32x2)->name = "atan(f32x2)"_c;
    Symbol::Resolved(&atan_Float32x2)->nameWithVarNames = "atan(val : f32x2)"_c;
    Symbol::Resolved(&atan_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// atan with Float32x3
    atan_Float32x3_arg.name = "val"_c;
    atan_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    atan_Float32x3.documentation = "Returns the arc tangent of a value."_c;
    atan_Float32x3.name = "atan"_c;
    atan_Float32x3.backendIndex = 1418;
    atan_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    atan_Float32x3.parameters = atan_Float32x3_args;
    Symbol::Resolved(&atan_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan_Float32x3)->signature = "f32x3 atan(f32x3)"_c;
    Symbol::Resolved(&atan_Float32x3)->name = "atan(f32x3)"_c;
    Symbol::Resolved(&atan_Float32x3)->nameWithVarNames = "atan(val : f32x3)"_c;
    Symbol::Resolved(&atan_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// atan with Float32x4
    atan_Float32x4_arg.name = "val"_c;
    atan_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    atan_Float32x4.documentation = "Returns the arc tangent of a value."_c;
    atan_Float32x4.name = "atan"_c;
    atan_Float32x4.backendIndex = 1419;
    atan_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    atan_Float32x4.parameters = atan_Float32x4_args;
    Symbol::Resolved(&atan_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan_Float32x4)->signature = "f32x4 atan(f32x4)"_c;
    Symbol::Resolved(&atan_Float32x4)->name = "atan(f32x4)"_c;
    Symbol::Resolved(&atan_Float32x4)->nameWithVarNames = "atan(val : f32x4)"_c;
    Symbol::Resolved(&atan_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// atan with Float16
    atan_Float16_arg.name = "val"_c;
    atan_Float16_arg.type = Type::FullType{ Float16Type.name };
    atan_Float16.documentation = "Returns the arc tangent of a value."_c;
    atan_Float16.name = "atan"_c;
    atan_Float16.backendIndex = 1420;
    atan_Float16.returnType = Type::FullType { Float16Type.name };
    atan_Float16.parameters = atan_Float16_args;
    Symbol::Resolved(&atan_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan_Float16)->signature = "f16 atan(f16)"_c;
    Symbol::Resolved(&atan_Float16)->name = "atan(f16)"_c;
    Symbol::Resolved(&atan_Float16)->nameWithVarNames = "atan(val : f16)"_c;
    Symbol::Resolved(&atan_Float16)->returnTypeSymbol = &Float16Type;

    /// atan with Float16x2
    atan_Float16x2_arg.name = "val"_c;
    atan_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    atan_Float16x2.documentation = "Returns the arc tangent of a value."_c;
    atan_Float16x2.name = "atan"_c;
    atan_Float16x2.backendIndex = 1421;
    atan_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    atan_Float16x2.parameters = atan_Float16x2_args;
    Symbol::Resolved(&atan_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan_Float16x2)->signature = "f16x2 atan(f16x2)"_c;
    Symbol::Resolved(&atan_Float16x2)->name = "atan(f16x2)"_c;
    Symbol::Resolved(&atan_Float16x2)->nameWithVarNames = "atan(val : f16x2)"_c;
    Symbol::Resolved(&atan_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// atan with Float16x3
    atan_Float16x3_arg.name = "val"_c;
    atan_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    atan_Float16x3.documentation = "Returns the arc tangent of a value."_c;
    atan_Float16x3.name = "atan"_c;
    atan_Float16x3.backendIndex = 1422;
    atan_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    atan_Float16x3.parameters = atan_Float16x3_args;
    Symbol::Resolved(&atan_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan_Float16x3)->signature = "f16x3 atan(f16x3)"_c;
    Symbol::Resolved(&atan_Float16x3)->name = "atan(f16x3)"_c;
    Symbol::Resolved(&atan_Float16x3)->nameWithVarNames = "atan(val : f16x3)"_c;
    Symbol::Resolved(&atan_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// atan with Float16x4
    atan_Float16x4_arg.name = "val"_c;
    atan_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    atan_Float16x4.documentation = "Returns the arc tangent of a value."_c;
    atan_Float16x4.name = "atan"_c;
    atan_Float16x4.backendIndex = 1423;
    atan_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    atan_Float16x4.parameters = atan_Float16x4_args;
    Symbol::Resolved(&atan_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan_Float16x4)->signature = "f16x4 atan(f16x4)"_c;
    Symbol::Resolved(&atan_Float16x4)->name = "atan(f16x4)"_c;
    Symbol::Resolved(&atan_Float16x4)->nameWithVarNames = "atan(val : f16x4)"_c;
    Symbol::Resolved(&atan_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// atanh with Float32
    atanh_Float32_arg.name = "val"_c;
    atanh_Float32_arg.type = Type::FullType{ Float32Type.name };
    atanh_Float32.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float32.name = "atanh"_c;
    atanh_Float32.backendIndex = 1424;
    atanh_Float32.returnType = Type::FullType { Float32Type.name };
    atanh_Float32.parameters = atanh_Float32_args;
    Symbol::Resolved(&atanh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atanh_Float32)->signature = "f32 atanh(f32)"_c;
    Symbol::Resolved(&atanh_Float32)->name = "atanh(f32)"_c;
    Symbol::Resolved(&atanh_Float32)->nameWithVarNames = "atanh(val : f32)"_c;
    Symbol::Resolved(&atanh_Float32)->returnTypeSymbol = &Float32Type;

    /// atanh with Float32x2
    atanh_Float32x2_arg.name = "val"_c;
    atanh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    atanh_Float32x2.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float32x2.name = "atanh"_c;
    atanh_Float32x2.backendIndex = 1425;
    atanh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    atanh_Float32x2.parameters = atanh_Float32x2_args;
    Symbol::Resolved(&atanh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atanh_Float32x2)->signature = "f32x2 atanh(f32x2)"_c;
    Symbol::Resolved(&atanh_Float32x2)->name = "atanh(f32x2)"_c;
    Symbol::Resolved(&atanh_Float32x2)->nameWithVarNames = "atanh(val : f32x2)"_c;
    Symbol::Resolved(&atanh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// atanh with Float32x3
    atanh_Float32x3_arg.name = "val"_c;
    atanh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    atanh_Float32x3.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float32x3.name = "atanh"_c;
    atanh_Float32x3.backendIndex = 1426;
    atanh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    atanh_Float32x3.parameters = atanh_Float32x3_args;
    Symbol::Resolved(&atanh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atanh_Float32x3)->signature = "f32x3 atanh(f32x3)"_c;
    Symbol::Resolved(&atanh_Float32x3)->name = "atanh(f32x3)"_c;
    Symbol::Resolved(&atanh_Float32x3)->nameWithVarNames = "atanh(val : f32x3)"_c;
    Symbol::Resolved(&atanh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// atanh with Float32x4
    atanh_Float32x4_arg.name = "val"_c;
    atanh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    atanh_Float32x4.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float32x4.name = "atanh"_c;
    atanh_Float32x4.backendIndex = 1427;
    atanh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    atanh_Float32x4.parameters = atanh_Float32x4_args;
    Symbol::Resolved(&atanh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atanh_Float32x4)->signature = "f32x4 atanh(f32x4)"_c;
    Symbol::Resolved(&atanh_Float32x4)->name = "atanh(f32x4)"_c;
    Symbol::Resolved(&atanh_Float32x4)->nameWithVarNames = "atanh(val : f32x4)"_c;
    Symbol::Resolved(&atanh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// atanh with Float16
    atanh_Float16_arg.name = "val"_c;
    atanh_Float16_arg.type = Type::FullType{ Float16Type.name };
    atanh_Float16.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float16.name = "atanh"_c;
    atanh_Float16.backendIndex = 1428;
    atanh_Float16.returnType = Type::FullType { Float16Type.name };
    atanh_Float16.parameters = atanh_Float16_args;
    Symbol::Resolved(&atanh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atanh_Float16)->signature = "f16 atanh(f16)"_c;
    Symbol::Resolved(&atanh_Float16)->name = "atanh(f16)"_c;
    Symbol::Resolved(&atanh_Float16)->nameWithVarNames = "atanh(val : f16)"_c;
    Symbol::Resolved(&atanh_Float16)->returnTypeSymbol = &Float16Type;

    /// atanh with Float16x2
    atanh_Float16x2_arg.name = "val"_c;
    atanh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    atanh_Float16x2.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float16x2.name = "atanh"_c;
    atanh_Float16x2.backendIndex = 1429;
    atanh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    atanh_Float16x2.parameters = atanh_Float16x2_args;
    Symbol::Resolved(&atanh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atanh_Float16x2)->signature = "f16x2 atanh(f16x2)"_c;
    Symbol::Resolved(&atanh_Float16x2)->name = "atanh(f16x2)"_c;
    Symbol::Resolved(&atanh_Float16x2)->nameWithVarNames = "atanh(val : f16x2)"_c;
    Symbol::Resolved(&atanh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// atanh with Float16x3
    atanh_Float16x3_arg.name = "val"_c;
    atanh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    atanh_Float16x3.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float16x3.name = "atanh"_c;
    atanh_Float16x3.backendIndex = 1430;
    atanh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    atanh_Float16x3.parameters = atanh_Float16x3_args;
    Symbol::Resolved(&atanh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atanh_Float16x3)->signature = "f16x3 atanh(f16x3)"_c;
    Symbol::Resolved(&atanh_Float16x3)->name = "atanh(f16x3)"_c;
    Symbol::Resolved(&atanh_Float16x3)->nameWithVarNames = "atanh(val : f16x3)"_c;
    Symbol::Resolved(&atanh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// atanh with Float16x4
    atanh_Float16x4_arg.name = "val"_c;
    atanh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    atanh_Float16x4.documentation = "Returns the hyperbolic arc tangent of a value."_c;
    atanh_Float16x4.name = "atanh"_c;
    atanh_Float16x4.backendIndex = 1431;
    atanh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    atanh_Float16x4.parameters = atanh_Float16x4_args;
    Symbol::Resolved(&atanh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atanh_Float16x4)->signature = "f16x4 atanh(f16x4)"_c;
    Symbol::Resolved(&atanh_Float16x4)->name = "atanh(f16x4)"_c;
    Symbol::Resolved(&atanh_Float16x4)->nameWithVarNames = "atanh(val : f16x4)"_c;
    Symbol::Resolved(&atanh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// cos with Float32
    cos_Float32_arg.name = "val"_c;
    cos_Float32_arg.type = Type::FullType{ Float32Type.name };
    cos_Float32.documentation = "Returns the cosine of a value."_c;
    cos_Float32.name = "cos"_c;
    cos_Float32.backendIndex = 1432;
    cos_Float32.returnType = Type::FullType { Float32Type.name };
    cos_Float32.parameters = cos_Float32_args;
    Symbol::Resolved(&cos_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&cos_Float32)->signature = "f32 cos(f32)"_c;
    Symbol::Resolved(&cos_Float32)->name = "cos(f32)"_c;
    Symbol::Resolved(&cos_Float32)->nameWithVarNames = "cos(val : f32)"_c;
    Symbol::Resolved(&cos_Float32)->returnTypeSymbol = &Float32Type;

    /// cos with Float32x2
    cos_Float32x2_arg.name = "val"_c;
    cos_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    cos_Float32x2.documentation = "Returns the cosine of a value."_c;
    cos_Float32x2.name = "cos"_c;
    cos_Float32x2.backendIndex = 1433;
    cos_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    cos_Float32x2.parameters = cos_Float32x2_args;
    Symbol::Resolved(&cos_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&cos_Float32x2)->signature = "f32x2 cos(f32x2)"_c;
    Symbol::Resolved(&cos_Float32x2)->name = "cos(f32x2)"_c;
    Symbol::Resolved(&cos_Float32x2)->nameWithVarNames = "cos(val : f32x2)"_c;
    Symbol::Resolved(&cos_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// cos with Float32x3
    cos_Float32x3_arg.name = "val"_c;
    cos_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    cos_Float32x3.documentation = "Returns the cosine of a value."_c;
    cos_Float32x3.name = "cos"_c;
    cos_Float32x3.backendIndex = 1434;
    cos_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    cos_Float32x3.parameters = cos_Float32x3_args;
    Symbol::Resolved(&cos_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cos_Float32x3)->signature = "f32x3 cos(f32x3)"_c;
    Symbol::Resolved(&cos_Float32x3)->name = "cos(f32x3)"_c;
    Symbol::Resolved(&cos_Float32x3)->nameWithVarNames = "cos(val : f32x3)"_c;
    Symbol::Resolved(&cos_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// cos with Float32x4
    cos_Float32x4_arg.name = "val"_c;
    cos_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    cos_Float32x4.documentation = "Returns the cosine of a value."_c;
    cos_Float32x4.name = "cos"_c;
    cos_Float32x4.backendIndex = 1435;
    cos_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    cos_Float32x4.parameters = cos_Float32x4_args;
    Symbol::Resolved(&cos_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&cos_Float32x4)->signature = "f32x4 cos(f32x4)"_c;
    Symbol::Resolved(&cos_Float32x4)->name = "cos(f32x4)"_c;
    Symbol::Resolved(&cos_Float32x4)->nameWithVarNames = "cos(val : f32x4)"_c;
    Symbol::Resolved(&cos_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// cos with Float16
    cos_Float16_arg.name = "val"_c;
    cos_Float16_arg.type = Type::FullType{ Float16Type.name };
    cos_Float16.documentation = "Returns the cosine of a value."_c;
    cos_Float16.name = "cos"_c;
    cos_Float16.backendIndex = 1436;
    cos_Float16.returnType = Type::FullType { Float16Type.name };
    cos_Float16.parameters = cos_Float16_args;
    Symbol::Resolved(&cos_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&cos_Float16)->signature = "f16 cos(f16)"_c;
    Symbol::Resolved(&cos_Float16)->name = "cos(f16)"_c;
    Symbol::Resolved(&cos_Float16)->nameWithVarNames = "cos(val : f16)"_c;
    Symbol::Resolved(&cos_Float16)->returnTypeSymbol = &Float16Type;

    /// cos with Float16x2
    cos_Float16x2_arg.name = "val"_c;
    cos_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    cos_Float16x2.documentation = "Returns the cosine of a value."_c;
    cos_Float16x2.name = "cos"_c;
    cos_Float16x2.backendIndex = 1437;
    cos_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    cos_Float16x2.parameters = cos_Float16x2_args;
    Symbol::Resolved(&cos_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&cos_Float16x2)->signature = "f16x2 cos(f16x2)"_c;
    Symbol::Resolved(&cos_Float16x2)->name = "cos(f16x2)"_c;
    Symbol::Resolved(&cos_Float16x2)->nameWithVarNames = "cos(val : f16x2)"_c;
    Symbol::Resolved(&cos_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// cos with Float16x3
    cos_Float16x3_arg.name = "val"_c;
    cos_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    cos_Float16x3.documentation = "Returns the cosine of a value."_c;
    cos_Float16x3.name = "cos"_c;
    cos_Float16x3.backendIndex = 1438;
    cos_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    cos_Float16x3.parameters = cos_Float16x3_args;
    Symbol::Resolved(&cos_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cos_Float16x3)->signature = "f16x3 cos(f16x3)"_c;
    Symbol::Resolved(&cos_Float16x3)->name = "cos(f16x3)"_c;
    Symbol::Resolved(&cos_Float16x3)->nameWithVarNames = "cos(val : f16x3)"_c;
    Symbol::Resolved(&cos_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// cos with Float16x4
    cos_Float16x4_arg.name = "val"_c;
    cos_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    cos_Float16x4.documentation = "Returns the cosine of a value."_c;
    cos_Float16x4.name = "cos"_c;
    cos_Float16x4.backendIndex = 1439;
    cos_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    cos_Float16x4.parameters = cos_Float16x4_args;
    Symbol::Resolved(&cos_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&cos_Float16x4)->signature = "f16x4 cos(f16x4)"_c;
    Symbol::Resolved(&cos_Float16x4)->name = "cos(f16x4)"_c;
    Symbol::Resolved(&cos_Float16x4)->nameWithVarNames = "cos(val : f16x4)"_c;
    Symbol::Resolved(&cos_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// cosh with Float32
    cosh_Float32_arg.name = "val"_c;
    cosh_Float32_arg.type = Type::FullType{ Float32Type.name };
    cosh_Float32.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float32.name = "cosh"_c;
    cosh_Float32.backendIndex = 1440;
    cosh_Float32.returnType = Type::FullType { Float32Type.name };
    cosh_Float32.parameters = cosh_Float32_args;
    Symbol::Resolved(&cosh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&cosh_Float32)->signature = "f32 cosh(f32)"_c;
    Symbol::Resolved(&cosh_Float32)->name = "cosh(f32)"_c;
    Symbol::Resolved(&cosh_Float32)->nameWithVarNames = "cosh(val : f32)"_c;
    Symbol::Resolved(&cosh_Float32)->returnTypeSymbol = &Float32Type;

    /// cosh with Float32x2
    cosh_Float32x2_arg.name = "val"_c;
    cosh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    cosh_Float32x2.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float32x2.name = "cosh"_c;
    cosh_Float32x2.backendIndex = 1441;
    cosh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    cosh_Float32x2.parameters = cosh_Float32x2_args;
    Symbol::Resolved(&cosh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&cosh_Float32x2)->signature = "f32x2 cosh(f32x2)"_c;
    Symbol::Resolved(&cosh_Float32x2)->name = "cosh(f32x2)"_c;
    Symbol::Resolved(&cosh_Float32x2)->nameWithVarNames = "cosh(val : f32x2)"_c;
    Symbol::Resolved(&cosh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// cosh with Float32x3
    cosh_Float32x3_arg.name = "val"_c;
    cosh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    cosh_Float32x3.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float32x3.name = "cosh"_c;
    cosh_Float32x3.backendIndex = 1442;
    cosh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    cosh_Float32x3.parameters = cosh_Float32x3_args;
    Symbol::Resolved(&cosh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cosh_Float32x3)->signature = "f32x3 cosh(f32x3)"_c;
    Symbol::Resolved(&cosh_Float32x3)->name = "cosh(f32x3)"_c;
    Symbol::Resolved(&cosh_Float32x3)->nameWithVarNames = "cosh(val : f32x3)"_c;
    Symbol::Resolved(&cosh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// cosh with Float32x4
    cosh_Float32x4_arg.name = "val"_c;
    cosh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    cosh_Float32x4.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float32x4.name = "cosh"_c;
    cosh_Float32x4.backendIndex = 1443;
    cosh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    cosh_Float32x4.parameters = cosh_Float32x4_args;
    Symbol::Resolved(&cosh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&cosh_Float32x4)->signature = "f32x4 cosh(f32x4)"_c;
    Symbol::Resolved(&cosh_Float32x4)->name = "cosh(f32x4)"_c;
    Symbol::Resolved(&cosh_Float32x4)->nameWithVarNames = "cosh(val : f32x4)"_c;
    Symbol::Resolved(&cosh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// cosh with Float16
    cosh_Float16_arg.name = "val"_c;
    cosh_Float16_arg.type = Type::FullType{ Float16Type.name };
    cosh_Float16.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float16.name = "cosh"_c;
    cosh_Float16.backendIndex = 1444;
    cosh_Float16.returnType = Type::FullType { Float16Type.name };
    cosh_Float16.parameters = cosh_Float16_args;
    Symbol::Resolved(&cosh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&cosh_Float16)->signature = "f16 cosh(f16)"_c;
    Symbol::Resolved(&cosh_Float16)->name = "cosh(f16)"_c;
    Symbol::Resolved(&cosh_Float16)->nameWithVarNames = "cosh(val : f16)"_c;
    Symbol::Resolved(&cosh_Float16)->returnTypeSymbol = &Float16Type;

    /// cosh with Float16x2
    cosh_Float16x2_arg.name = "val"_c;
    cosh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    cosh_Float16x2.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float16x2.name = "cosh"_c;
    cosh_Float16x2.backendIndex = 1445;
    cosh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    cosh_Float16x2.parameters = cosh_Float16x2_args;
    Symbol::Resolved(&cosh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&cosh_Float16x2)->signature = "f16x2 cosh(f16x2)"_c;
    Symbol::Resolved(&cosh_Float16x2)->name = "cosh(f16x2)"_c;
    Symbol::Resolved(&cosh_Float16x2)->nameWithVarNames = "cosh(val : f16x2)"_c;
    Symbol::Resolved(&cosh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// cosh with Float16x3
    cosh_Float16x3_arg.name = "val"_c;
    cosh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    cosh_Float16x3.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float16x3.name = "cosh"_c;
    cosh_Float16x3.backendIndex = 1446;
    cosh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    cosh_Float16x3.parameters = cosh_Float16x3_args;
    Symbol::Resolved(&cosh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cosh_Float16x3)->signature = "f16x3 cosh(f16x3)"_c;
    Symbol::Resolved(&cosh_Float16x3)->name = "cosh(f16x3)"_c;
    Symbol::Resolved(&cosh_Float16x3)->nameWithVarNames = "cosh(val : f16x3)"_c;
    Symbol::Resolved(&cosh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// cosh with Float16x4
    cosh_Float16x4_arg.name = "val"_c;
    cosh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    cosh_Float16x4.documentation = "Returns the hyperbolic cosine of a value."_c;
    cosh_Float16x4.name = "cosh"_c;
    cosh_Float16x4.backendIndex = 1447;
    cosh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    cosh_Float16x4.parameters = cosh_Float16x4_args;
    Symbol::Resolved(&cosh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&cosh_Float16x4)->signature = "f16x4 cosh(f16x4)"_c;
    Symbol::Resolved(&cosh_Float16x4)->name = "cosh(f16x4)"_c;
    Symbol::Resolved(&cosh_Float16x4)->nameWithVarNames = "cosh(val : f16x4)"_c;
    Symbol::Resolved(&cosh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// exp with Float32
    exp_Float32_arg.name = "val"_c;
    exp_Float32_arg.type = Type::FullType{ Float32Type.name };
    exp_Float32.documentation = "Returns the exponential of a value."_c;
    exp_Float32.name = "exp"_c;
    exp_Float32.backendIndex = 1448;
    exp_Float32.returnType = Type::FullType { Float32Type.name };
    exp_Float32.parameters = exp_Float32_args;
    Symbol::Resolved(&exp_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&exp_Float32)->signature = "f32 exp(f32)"_c;
    Symbol::Resolved(&exp_Float32)->name = "exp(f32)"_c;
    Symbol::Resolved(&exp_Float32)->nameWithVarNames = "exp(val : f32)"_c;
    Symbol::Resolved(&exp_Float32)->returnTypeSymbol = &Float32Type;

    /// exp with Float32x2
    exp_Float32x2_arg.name = "val"_c;
    exp_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    exp_Float32x2.documentation = "Returns the exponential of a value."_c;
    exp_Float32x2.name = "exp"_c;
    exp_Float32x2.backendIndex = 1449;
    exp_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    exp_Float32x2.parameters = exp_Float32x2_args;
    Symbol::Resolved(&exp_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&exp_Float32x2)->signature = "f32x2 exp(f32x2)"_c;
    Symbol::Resolved(&exp_Float32x2)->name = "exp(f32x2)"_c;
    Symbol::Resolved(&exp_Float32x2)->nameWithVarNames = "exp(val : f32x2)"_c;
    Symbol::Resolved(&exp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// exp with Float32x3
    exp_Float32x3_arg.name = "val"_c;
    exp_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    exp_Float32x3.documentation = "Returns the exponential of a value."_c;
    exp_Float32x3.name = "exp"_c;
    exp_Float32x3.backendIndex = 1450;
    exp_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    exp_Float32x3.parameters = exp_Float32x3_args;
    Symbol::Resolved(&exp_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&exp_Float32x3)->signature = "f32x3 exp(f32x3)"_c;
    Symbol::Resolved(&exp_Float32x3)->name = "exp(f32x3)"_c;
    Symbol::Resolved(&exp_Float32x3)->nameWithVarNames = "exp(val : f32x3)"_c;
    Symbol::Resolved(&exp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// exp with Float32x4
    exp_Float32x4_arg.name = "val"_c;
    exp_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    exp_Float32x4.documentation = "Returns the exponential of a value."_c;
    exp_Float32x4.name = "exp"_c;
    exp_Float32x4.backendIndex = 1451;
    exp_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    exp_Float32x4.parameters = exp_Float32x4_args;
    Symbol::Resolved(&exp_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&exp_Float32x4)->signature = "f32x4 exp(f32x4)"_c;
    Symbol::Resolved(&exp_Float32x4)->name = "exp(f32x4)"_c;
    Symbol::Resolved(&exp_Float32x4)->nameWithVarNames = "exp(val : f32x4)"_c;
    Symbol::Resolved(&exp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// exp with Float16
    exp_Float16_arg.name = "val"_c;
    exp_Float16_arg.type = Type::FullType{ Float16Type.name };
    exp_Float16.documentation = "Returns the exponential of a value."_c;
    exp_Float16.name = "exp"_c;
    exp_Float16.backendIndex = 1452;
    exp_Float16.returnType = Type::FullType { Float16Type.name };
    exp_Float16.parameters = exp_Float16_args;
    Symbol::Resolved(&exp_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&exp_Float16)->signature = "f16 exp(f16)"_c;
    Symbol::Resolved(&exp_Float16)->name = "exp(f16)"_c;
    Symbol::Resolved(&exp_Float16)->nameWithVarNames = "exp(val : f16)"_c;
    Symbol::Resolved(&exp_Float16)->returnTypeSymbol = &Float16Type;

    /// exp with Float16x2
    exp_Float16x2_arg.name = "val"_c;
    exp_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    exp_Float16x2.documentation = "Returns the exponential of a value."_c;
    exp_Float16x2.name = "exp"_c;
    exp_Float16x2.backendIndex = 1453;
    exp_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    exp_Float16x2.parameters = exp_Float16x2_args;
    Symbol::Resolved(&exp_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&exp_Float16x2)->signature = "f16x2 exp(f16x2)"_c;
    Symbol::Resolved(&exp_Float16x2)->name = "exp(f16x2)"_c;
    Symbol::Resolved(&exp_Float16x2)->nameWithVarNames = "exp(val : f16x2)"_c;
    Symbol::Resolved(&exp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// exp with Float16x3
    exp_Float16x3_arg.name = "val"_c;
    exp_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    exp_Float16x3.documentation = "Returns the exponential of a value."_c;
    exp_Float16x3.name = "exp"_c;
    exp_Float16x3.backendIndex = 1454;
    exp_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    exp_Float16x3.parameters = exp_Float16x3_args;
    Symbol::Resolved(&exp_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&exp_Float16x3)->signature = "f16x3 exp(f16x3)"_c;
    Symbol::Resolved(&exp_Float16x3)->name = "exp(f16x3)"_c;
    Symbol::Resolved(&exp_Float16x3)->nameWithVarNames = "exp(val : f16x3)"_c;
    Symbol::Resolved(&exp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// exp with Float16x4
    exp_Float16x4_arg.name = "val"_c;
    exp_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    exp_Float16x4.documentation = "Returns the exponential of a value."_c;
    exp_Float16x4.name = "exp"_c;
    exp_Float16x4.backendIndex = 1455;
    exp_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    exp_Float16x4.parameters = exp_Float16x4_args;
    Symbol::Resolved(&exp_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&exp_Float16x4)->signature = "f16x4 exp(f16x4)"_c;
    Symbol::Resolved(&exp_Float16x4)->name = "exp(f16x4)"_c;
    Symbol::Resolved(&exp_Float16x4)->nameWithVarNames = "exp(val : f16x4)"_c;
    Symbol::Resolved(&exp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// exp2 with Float32
    exp2_Float32_arg.name = "val"_c;
    exp2_Float32_arg.type = Type::FullType{ Float32Type.name };
    exp2_Float32.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float32.name = "exp2"_c;
    exp2_Float32.backendIndex = 1456;
    exp2_Float32.returnType = Type::FullType { Float32Type.name };
    exp2_Float32.parameters = exp2_Float32_args;
    Symbol::Resolved(&exp2_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&exp2_Float32)->signature = "f32 exp2(f32)"_c;
    Symbol::Resolved(&exp2_Float32)->name = "exp2(f32)"_c;
    Symbol::Resolved(&exp2_Float32)->nameWithVarNames = "exp2(val : f32)"_c;
    Symbol::Resolved(&exp2_Float32)->returnTypeSymbol = &Float32Type;

    /// exp2 with Float32x2
    exp2_Float32x2_arg.name = "val"_c;
    exp2_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    exp2_Float32x2.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float32x2.name = "exp2"_c;
    exp2_Float32x2.backendIndex = 1457;
    exp2_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    exp2_Float32x2.parameters = exp2_Float32x2_args;
    Symbol::Resolved(&exp2_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&exp2_Float32x2)->signature = "f32x2 exp2(f32x2)"_c;
    Symbol::Resolved(&exp2_Float32x2)->name = "exp2(f32x2)"_c;
    Symbol::Resolved(&exp2_Float32x2)->nameWithVarNames = "exp2(val : f32x2)"_c;
    Symbol::Resolved(&exp2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// exp2 with Float32x3
    exp2_Float32x3_arg.name = "val"_c;
    exp2_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    exp2_Float32x3.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float32x3.name = "exp2"_c;
    exp2_Float32x3.backendIndex = 1458;
    exp2_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    exp2_Float32x3.parameters = exp2_Float32x3_args;
    Symbol::Resolved(&exp2_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&exp2_Float32x3)->signature = "f32x3 exp2(f32x3)"_c;
    Symbol::Resolved(&exp2_Float32x3)->name = "exp2(f32x3)"_c;
    Symbol::Resolved(&exp2_Float32x3)->nameWithVarNames = "exp2(val : f32x3)"_c;
    Symbol::Resolved(&exp2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// exp2 with Float32x4
    exp2_Float32x4_arg.name = "val"_c;
    exp2_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    exp2_Float32x4.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float32x4.name = "exp2"_c;
    exp2_Float32x4.backendIndex = 1459;
    exp2_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    exp2_Float32x4.parameters = exp2_Float32x4_args;
    Symbol::Resolved(&exp2_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&exp2_Float32x4)->signature = "f32x4 exp2(f32x4)"_c;
    Symbol::Resolved(&exp2_Float32x4)->name = "exp2(f32x4)"_c;
    Symbol::Resolved(&exp2_Float32x4)->nameWithVarNames = "exp2(val : f32x4)"_c;
    Symbol::Resolved(&exp2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// exp2 with Float16
    exp2_Float16_arg.name = "val"_c;
    exp2_Float16_arg.type = Type::FullType{ Float16Type.name };
    exp2_Float16.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float16.name = "exp2"_c;
    exp2_Float16.backendIndex = 1460;
    exp2_Float16.returnType = Type::FullType { Float16Type.name };
    exp2_Float16.parameters = exp2_Float16_args;
    Symbol::Resolved(&exp2_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&exp2_Float16)->signature = "f16 exp2(f16)"_c;
    Symbol::Resolved(&exp2_Float16)->name = "exp2(f16)"_c;
    Symbol::Resolved(&exp2_Float16)->nameWithVarNames = "exp2(val : f16)"_c;
    Symbol::Resolved(&exp2_Float16)->returnTypeSymbol = &Float16Type;

    /// exp2 with Float16x2
    exp2_Float16x2_arg.name = "val"_c;
    exp2_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    exp2_Float16x2.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float16x2.name = "exp2"_c;
    exp2_Float16x2.backendIndex = 1461;
    exp2_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    exp2_Float16x2.parameters = exp2_Float16x2_args;
    Symbol::Resolved(&exp2_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&exp2_Float16x2)->signature = "f16x2 exp2(f16x2)"_c;
    Symbol::Resolved(&exp2_Float16x2)->name = "exp2(f16x2)"_c;
    Symbol::Resolved(&exp2_Float16x2)->nameWithVarNames = "exp2(val : f16x2)"_c;
    Symbol::Resolved(&exp2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// exp2 with Float16x3
    exp2_Float16x3_arg.name = "val"_c;
    exp2_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    exp2_Float16x3.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float16x3.name = "exp2"_c;
    exp2_Float16x3.backendIndex = 1462;
    exp2_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    exp2_Float16x3.parameters = exp2_Float16x3_args;
    Symbol::Resolved(&exp2_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&exp2_Float16x3)->signature = "f16x3 exp2(f16x3)"_c;
    Symbol::Resolved(&exp2_Float16x3)->name = "exp2(f16x3)"_c;
    Symbol::Resolved(&exp2_Float16x3)->nameWithVarNames = "exp2(val : f16x3)"_c;
    Symbol::Resolved(&exp2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// exp2 with Float16x4
    exp2_Float16x4_arg.name = "val"_c;
    exp2_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    exp2_Float16x4.documentation = "Returns the base 2 exponential of a value."_c;
    exp2_Float16x4.name = "exp2"_c;
    exp2_Float16x4.backendIndex = 1463;
    exp2_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    exp2_Float16x4.parameters = exp2_Float16x4_args;
    Symbol::Resolved(&exp2_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&exp2_Float16x4)->signature = "f16x4 exp2(f16x4)"_c;
    Symbol::Resolved(&exp2_Float16x4)->name = "exp2(f16x4)"_c;
    Symbol::Resolved(&exp2_Float16x4)->nameWithVarNames = "exp2(val : f16x4)"_c;
    Symbol::Resolved(&exp2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// invSqrt with Float32
    invSqrt_Float32_arg.name = "val"_c;
    invSqrt_Float32_arg.type = Type::FullType{ Float32Type.name };
    invSqrt_Float32.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float32.name = "invSqrt"_c;
    invSqrt_Float32.backendIndex = 1464;
    invSqrt_Float32.returnType = Type::FullType { Float32Type.name };
    invSqrt_Float32.parameters = invSqrt_Float32_args;
    Symbol::Resolved(&invSqrt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&invSqrt_Float32)->signature = "f32 invSqrt(f32)"_c;
    Symbol::Resolved(&invSqrt_Float32)->name = "invSqrt(f32)"_c;
    Symbol::Resolved(&invSqrt_Float32)->nameWithVarNames = "invSqrt(val : f32)"_c;
    Symbol::Resolved(&invSqrt_Float32)->returnTypeSymbol = &Float32Type;

    /// invSqrt with Float32x2
    invSqrt_Float32x2_arg.name = "val"_c;
    invSqrt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    invSqrt_Float32x2.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float32x2.name = "invSqrt"_c;
    invSqrt_Float32x2.backendIndex = 1465;
    invSqrt_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    invSqrt_Float32x2.parameters = invSqrt_Float32x2_args;
    Symbol::Resolved(&invSqrt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&invSqrt_Float32x2)->signature = "f32x2 invSqrt(f32x2)"_c;
    Symbol::Resolved(&invSqrt_Float32x2)->name = "invSqrt(f32x2)"_c;
    Symbol::Resolved(&invSqrt_Float32x2)->nameWithVarNames = "invSqrt(val : f32x2)"_c;
    Symbol::Resolved(&invSqrt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// invSqrt with Float32x3
    invSqrt_Float32x3_arg.name = "val"_c;
    invSqrt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    invSqrt_Float32x3.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float32x3.name = "invSqrt"_c;
    invSqrt_Float32x3.backendIndex = 1466;
    invSqrt_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    invSqrt_Float32x3.parameters = invSqrt_Float32x3_args;
    Symbol::Resolved(&invSqrt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&invSqrt_Float32x3)->signature = "f32x3 invSqrt(f32x3)"_c;
    Symbol::Resolved(&invSqrt_Float32x3)->name = "invSqrt(f32x3)"_c;
    Symbol::Resolved(&invSqrt_Float32x3)->nameWithVarNames = "invSqrt(val : f32x3)"_c;
    Symbol::Resolved(&invSqrt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// invSqrt with Float32x4
    invSqrt_Float32x4_arg.name = "val"_c;
    invSqrt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    invSqrt_Float32x4.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float32x4.name = "invSqrt"_c;
    invSqrt_Float32x4.backendIndex = 1467;
    invSqrt_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    invSqrt_Float32x4.parameters = invSqrt_Float32x4_args;
    Symbol::Resolved(&invSqrt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&invSqrt_Float32x4)->signature = "f32x4 invSqrt(f32x4)"_c;
    Symbol::Resolved(&invSqrt_Float32x4)->name = "invSqrt(f32x4)"_c;
    Symbol::Resolved(&invSqrt_Float32x4)->nameWithVarNames = "invSqrt(val : f32x4)"_c;
    Symbol::Resolved(&invSqrt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// invSqrt with Float16
    invSqrt_Float16_arg.name = "val"_c;
    invSqrt_Float16_arg.type = Type::FullType{ Float16Type.name };
    invSqrt_Float16.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float16.name = "invSqrt"_c;
    invSqrt_Float16.backendIndex = 1468;
    invSqrt_Float16.returnType = Type::FullType { Float16Type.name };
    invSqrt_Float16.parameters = invSqrt_Float16_args;
    Symbol::Resolved(&invSqrt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&invSqrt_Float16)->signature = "f16 invSqrt(f16)"_c;
    Symbol::Resolved(&invSqrt_Float16)->name = "invSqrt(f16)"_c;
    Symbol::Resolved(&invSqrt_Float16)->nameWithVarNames = "invSqrt(val : f16)"_c;
    Symbol::Resolved(&invSqrt_Float16)->returnTypeSymbol = &Float16Type;

    /// invSqrt with Float16x2
    invSqrt_Float16x2_arg.name = "val"_c;
    invSqrt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    invSqrt_Float16x2.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float16x2.name = "invSqrt"_c;
    invSqrt_Float16x2.backendIndex = 1469;
    invSqrt_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    invSqrt_Float16x2.parameters = invSqrt_Float16x2_args;
    Symbol::Resolved(&invSqrt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&invSqrt_Float16x2)->signature = "f16x2 invSqrt(f16x2)"_c;
    Symbol::Resolved(&invSqrt_Float16x2)->name = "invSqrt(f16x2)"_c;
    Symbol::Resolved(&invSqrt_Float16x2)->nameWithVarNames = "invSqrt(val : f16x2)"_c;
    Symbol::Resolved(&invSqrt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// invSqrt with Float16x3
    invSqrt_Float16x3_arg.name = "val"_c;
    invSqrt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    invSqrt_Float16x3.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float16x3.name = "invSqrt"_c;
    invSqrt_Float16x3.backendIndex = 1470;
    invSqrt_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    invSqrt_Float16x3.parameters = invSqrt_Float16x3_args;
    Symbol::Resolved(&invSqrt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&invSqrt_Float16x3)->signature = "f16x3 invSqrt(f16x3)"_c;
    Symbol::Resolved(&invSqrt_Float16x3)->name = "invSqrt(f16x3)"_c;
    Symbol::Resolved(&invSqrt_Float16x3)->nameWithVarNames = "invSqrt(val : f16x3)"_c;
    Symbol::Resolved(&invSqrt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// invSqrt with Float16x4
    invSqrt_Float16x4_arg.name = "val"_c;
    invSqrt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    invSqrt_Float16x4.documentation = "Returns the inverse square root of a value."_c;
    invSqrt_Float16x4.name = "invSqrt"_c;
    invSqrt_Float16x4.backendIndex = 1471;
    invSqrt_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    invSqrt_Float16x4.parameters = invSqrt_Float16x4_args;
    Symbol::Resolved(&invSqrt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&invSqrt_Float16x4)->signature = "f16x4 invSqrt(f16x4)"_c;
    Symbol::Resolved(&invSqrt_Float16x4)->name = "invSqrt(f16x4)"_c;
    Symbol::Resolved(&invSqrt_Float16x4)->nameWithVarNames = "invSqrt(val : f16x4)"_c;
    Symbol::Resolved(&invSqrt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// log with Float32
    log_Float32_arg.name = "val"_c;
    log_Float32_arg.type = Type::FullType{ Float32Type.name };
    log_Float32.documentation = "Returns the natural logarithm of a value."_c;
    log_Float32.name = "log"_c;
    log_Float32.backendIndex = 1472;
    log_Float32.returnType = Type::FullType { Float32Type.name };
    log_Float32.parameters = log_Float32_args;
    Symbol::Resolved(&log_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&log_Float32)->signature = "f32 log(f32)"_c;
    Symbol::Resolved(&log_Float32)->name = "log(f32)"_c;
    Symbol::Resolved(&log_Float32)->nameWithVarNames = "log(val : f32)"_c;
    Symbol::Resolved(&log_Float32)->returnTypeSymbol = &Float32Type;

    /// log with Float32x2
    log_Float32x2_arg.name = "val"_c;
    log_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    log_Float32x2.documentation = "Returns the natural logarithm of a value."_c;
    log_Float32x2.name = "log"_c;
    log_Float32x2.backendIndex = 1473;
    log_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    log_Float32x2.parameters = log_Float32x2_args;
    Symbol::Resolved(&log_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&log_Float32x2)->signature = "f32x2 log(f32x2)"_c;
    Symbol::Resolved(&log_Float32x2)->name = "log(f32x2)"_c;
    Symbol::Resolved(&log_Float32x2)->nameWithVarNames = "log(val : f32x2)"_c;
    Symbol::Resolved(&log_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// log with Float32x3
    log_Float32x3_arg.name = "val"_c;
    log_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    log_Float32x3.documentation = "Returns the natural logarithm of a value."_c;
    log_Float32x3.name = "log"_c;
    log_Float32x3.backendIndex = 1474;
    log_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    log_Float32x3.parameters = log_Float32x3_args;
    Symbol::Resolved(&log_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&log_Float32x3)->signature = "f32x3 log(f32x3)"_c;
    Symbol::Resolved(&log_Float32x3)->name = "log(f32x3)"_c;
    Symbol::Resolved(&log_Float32x3)->nameWithVarNames = "log(val : f32x3)"_c;
    Symbol::Resolved(&log_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// log with Float32x4
    log_Float32x4_arg.name = "val"_c;
    log_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    log_Float32x4.documentation = "Returns the natural logarithm of a value."_c;
    log_Float32x4.name = "log"_c;
    log_Float32x4.backendIndex = 1475;
    log_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    log_Float32x4.parameters = log_Float32x4_args;
    Symbol::Resolved(&log_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&log_Float32x4)->signature = "f32x4 log(f32x4)"_c;
    Symbol::Resolved(&log_Float32x4)->name = "log(f32x4)"_c;
    Symbol::Resolved(&log_Float32x4)->nameWithVarNames = "log(val : f32x4)"_c;
    Symbol::Resolved(&log_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// log with Float16
    log_Float16_arg.name = "val"_c;
    log_Float16_arg.type = Type::FullType{ Float16Type.name };
    log_Float16.documentation = "Returns the natural logarithm of a value."_c;
    log_Float16.name = "log"_c;
    log_Float16.backendIndex = 1476;
    log_Float16.returnType = Type::FullType { Float16Type.name };
    log_Float16.parameters = log_Float16_args;
    Symbol::Resolved(&log_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&log_Float16)->signature = "f16 log(f16)"_c;
    Symbol::Resolved(&log_Float16)->name = "log(f16)"_c;
    Symbol::Resolved(&log_Float16)->nameWithVarNames = "log(val : f16)"_c;
    Symbol::Resolved(&log_Float16)->returnTypeSymbol = &Float16Type;

    /// log with Float16x2
    log_Float16x2_arg.name = "val"_c;
    log_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    log_Float16x2.documentation = "Returns the natural logarithm of a value."_c;
    log_Float16x2.name = "log"_c;
    log_Float16x2.backendIndex = 1477;
    log_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    log_Float16x2.parameters = log_Float16x2_args;
    Symbol::Resolved(&log_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&log_Float16x2)->signature = "f16x2 log(f16x2)"_c;
    Symbol::Resolved(&log_Float16x2)->name = "log(f16x2)"_c;
    Symbol::Resolved(&log_Float16x2)->nameWithVarNames = "log(val : f16x2)"_c;
    Symbol::Resolved(&log_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// log with Float16x3
    log_Float16x3_arg.name = "val"_c;
    log_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    log_Float16x3.documentation = "Returns the natural logarithm of a value."_c;
    log_Float16x3.name = "log"_c;
    log_Float16x3.backendIndex = 1478;
    log_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    log_Float16x3.parameters = log_Float16x3_args;
    Symbol::Resolved(&log_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&log_Float16x3)->signature = "f16x3 log(f16x3)"_c;
    Symbol::Resolved(&log_Float16x3)->name = "log(f16x3)"_c;
    Symbol::Resolved(&log_Float16x3)->nameWithVarNames = "log(val : f16x3)"_c;
    Symbol::Resolved(&log_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// log with Float16x4
    log_Float16x4_arg.name = "val"_c;
    log_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    log_Float16x4.documentation = "Returns the natural logarithm of a value."_c;
    log_Float16x4.name = "log"_c;
    log_Float16x4.backendIndex = 1479;
    log_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    log_Float16x4.parameters = log_Float16x4_args;
    Symbol::Resolved(&log_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&log_Float16x4)->signature = "f16x4 log(f16x4)"_c;
    Symbol::Resolved(&log_Float16x4)->name = "log(f16x4)"_c;
    Symbol::Resolved(&log_Float16x4)->nameWithVarNames = "log(val : f16x4)"_c;
    Symbol::Resolved(&log_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// log2 with Float32
    log2_Float32_arg.name = "val"_c;
    log2_Float32_arg.type = Type::FullType{ Float32Type.name };
    log2_Float32.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float32.name = "log2"_c;
    log2_Float32.backendIndex = 1480;
    log2_Float32.returnType = Type::FullType { Float32Type.name };
    log2_Float32.parameters = log2_Float32_args;
    Symbol::Resolved(&log2_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&log2_Float32)->signature = "f32 log2(f32)"_c;
    Symbol::Resolved(&log2_Float32)->name = "log2(f32)"_c;
    Symbol::Resolved(&log2_Float32)->nameWithVarNames = "log2(val : f32)"_c;
    Symbol::Resolved(&log2_Float32)->returnTypeSymbol = &Float32Type;

    /// log2 with Float32x2
    log2_Float32x2_arg.name = "val"_c;
    log2_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    log2_Float32x2.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float32x2.name = "log2"_c;
    log2_Float32x2.backendIndex = 1481;
    log2_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    log2_Float32x2.parameters = log2_Float32x2_args;
    Symbol::Resolved(&log2_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&log2_Float32x2)->signature = "f32x2 log2(f32x2)"_c;
    Symbol::Resolved(&log2_Float32x2)->name = "log2(f32x2)"_c;
    Symbol::Resolved(&log2_Float32x2)->nameWithVarNames = "log2(val : f32x2)"_c;
    Symbol::Resolved(&log2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// log2 with Float32x3
    log2_Float32x3_arg.name = "val"_c;
    log2_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    log2_Float32x3.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float32x3.name = "log2"_c;
    log2_Float32x3.backendIndex = 1482;
    log2_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    log2_Float32x3.parameters = log2_Float32x3_args;
    Symbol::Resolved(&log2_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&log2_Float32x3)->signature = "f32x3 log2(f32x3)"_c;
    Symbol::Resolved(&log2_Float32x3)->name = "log2(f32x3)"_c;
    Symbol::Resolved(&log2_Float32x3)->nameWithVarNames = "log2(val : f32x3)"_c;
    Symbol::Resolved(&log2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// log2 with Float32x4
    log2_Float32x4_arg.name = "val"_c;
    log2_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    log2_Float32x4.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float32x4.name = "log2"_c;
    log2_Float32x4.backendIndex = 1483;
    log2_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    log2_Float32x4.parameters = log2_Float32x4_args;
    Symbol::Resolved(&log2_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&log2_Float32x4)->signature = "f32x4 log2(f32x4)"_c;
    Symbol::Resolved(&log2_Float32x4)->name = "log2(f32x4)"_c;
    Symbol::Resolved(&log2_Float32x4)->nameWithVarNames = "log2(val : f32x4)"_c;
    Symbol::Resolved(&log2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// log2 with Float16
    log2_Float16_arg.name = "val"_c;
    log2_Float16_arg.type = Type::FullType{ Float16Type.name };
    log2_Float16.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float16.name = "log2"_c;
    log2_Float16.backendIndex = 1484;
    log2_Float16.returnType = Type::FullType { Float16Type.name };
    log2_Float16.parameters = log2_Float16_args;
    Symbol::Resolved(&log2_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&log2_Float16)->signature = "f16 log2(f16)"_c;
    Symbol::Resolved(&log2_Float16)->name = "log2(f16)"_c;
    Symbol::Resolved(&log2_Float16)->nameWithVarNames = "log2(val : f16)"_c;
    Symbol::Resolved(&log2_Float16)->returnTypeSymbol = &Float16Type;

    /// log2 with Float16x2
    log2_Float16x2_arg.name = "val"_c;
    log2_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    log2_Float16x2.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float16x2.name = "log2"_c;
    log2_Float16x2.backendIndex = 1485;
    log2_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    log2_Float16x2.parameters = log2_Float16x2_args;
    Symbol::Resolved(&log2_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&log2_Float16x2)->signature = "f16x2 log2(f16x2)"_c;
    Symbol::Resolved(&log2_Float16x2)->name = "log2(f16x2)"_c;
    Symbol::Resolved(&log2_Float16x2)->nameWithVarNames = "log2(val : f16x2)"_c;
    Symbol::Resolved(&log2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// log2 with Float16x3
    log2_Float16x3_arg.name = "val"_c;
    log2_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    log2_Float16x3.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float16x3.name = "log2"_c;
    log2_Float16x3.backendIndex = 1486;
    log2_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    log2_Float16x3.parameters = log2_Float16x3_args;
    Symbol::Resolved(&log2_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&log2_Float16x3)->signature = "f16x3 log2(f16x3)"_c;
    Symbol::Resolved(&log2_Float16x3)->name = "log2(f16x3)"_c;
    Symbol::Resolved(&log2_Float16x3)->nameWithVarNames = "log2(val : f16x3)"_c;
    Symbol::Resolved(&log2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// log2 with Float16x4
    log2_Float16x4_arg.name = "val"_c;
    log2_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    log2_Float16x4.documentation = "Returns the base 2 logarithm of a value."_c;
    log2_Float16x4.name = "log2"_c;
    log2_Float16x4.backendIndex = 1487;
    log2_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    log2_Float16x4.parameters = log2_Float16x4_args;
    Symbol::Resolved(&log2_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&log2_Float16x4)->signature = "f16x4 log2(f16x4)"_c;
    Symbol::Resolved(&log2_Float16x4)->name = "log2(f16x4)"_c;
    Symbol::Resolved(&log2_Float16x4)->nameWithVarNames = "log2(val : f16x4)"_c;
    Symbol::Resolved(&log2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// sin with Float32
    sin_Float32_arg.name = "val"_c;
    sin_Float32_arg.type = Type::FullType{ Float32Type.name };
    sin_Float32.documentation = "Returns the sine of a value."_c;
    sin_Float32.name = "sin"_c;
    sin_Float32.backendIndex = 1488;
    sin_Float32.returnType = Type::FullType { Float32Type.name };
    sin_Float32.parameters = sin_Float32_args;
    Symbol::Resolved(&sin_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sin_Float32)->signature = "f32 sin(f32)"_c;
    Symbol::Resolved(&sin_Float32)->name = "sin(f32)"_c;
    Symbol::Resolved(&sin_Float32)->nameWithVarNames = "sin(val : f32)"_c;
    Symbol::Resolved(&sin_Float32)->returnTypeSymbol = &Float32Type;

    /// sin with Float32x2
    sin_Float32x2_arg.name = "val"_c;
    sin_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sin_Float32x2.documentation = "Returns the sine of a value."_c;
    sin_Float32x2.name = "sin"_c;
    sin_Float32x2.backendIndex = 1489;
    sin_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    sin_Float32x2.parameters = sin_Float32x2_args;
    Symbol::Resolved(&sin_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sin_Float32x2)->signature = "f32x2 sin(f32x2)"_c;
    Symbol::Resolved(&sin_Float32x2)->name = "sin(f32x2)"_c;
    Symbol::Resolved(&sin_Float32x2)->nameWithVarNames = "sin(val : f32x2)"_c;
    Symbol::Resolved(&sin_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// sin with Float32x3
    sin_Float32x3_arg.name = "val"_c;
    sin_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sin_Float32x3.documentation = "Returns the sine of a value."_c;
    sin_Float32x3.name = "sin"_c;
    sin_Float32x3.backendIndex = 1490;
    sin_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    sin_Float32x3.parameters = sin_Float32x3_args;
    Symbol::Resolved(&sin_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sin_Float32x3)->signature = "f32x3 sin(f32x3)"_c;
    Symbol::Resolved(&sin_Float32x3)->name = "sin(f32x3)"_c;
    Symbol::Resolved(&sin_Float32x3)->nameWithVarNames = "sin(val : f32x3)"_c;
    Symbol::Resolved(&sin_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// sin with Float32x4
    sin_Float32x4_arg.name = "val"_c;
    sin_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sin_Float32x4.documentation = "Returns the sine of a value."_c;
    sin_Float32x4.name = "sin"_c;
    sin_Float32x4.backendIndex = 1491;
    sin_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    sin_Float32x4.parameters = sin_Float32x4_args;
    Symbol::Resolved(&sin_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sin_Float32x4)->signature = "f32x4 sin(f32x4)"_c;
    Symbol::Resolved(&sin_Float32x4)->name = "sin(f32x4)"_c;
    Symbol::Resolved(&sin_Float32x4)->nameWithVarNames = "sin(val : f32x4)"_c;
    Symbol::Resolved(&sin_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// sin with Float16
    sin_Float16_arg.name = "val"_c;
    sin_Float16_arg.type = Type::FullType{ Float16Type.name };
    sin_Float16.documentation = "Returns the sine of a value."_c;
    sin_Float16.name = "sin"_c;
    sin_Float16.backendIndex = 1492;
    sin_Float16.returnType = Type::FullType { Float16Type.name };
    sin_Float16.parameters = sin_Float16_args;
    Symbol::Resolved(&sin_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sin_Float16)->signature = "f16 sin(f16)"_c;
    Symbol::Resolved(&sin_Float16)->name = "sin(f16)"_c;
    Symbol::Resolved(&sin_Float16)->nameWithVarNames = "sin(val : f16)"_c;
    Symbol::Resolved(&sin_Float16)->returnTypeSymbol = &Float16Type;

    /// sin with Float16x2
    sin_Float16x2_arg.name = "val"_c;
    sin_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sin_Float16x2.documentation = "Returns the sine of a value."_c;
    sin_Float16x2.name = "sin"_c;
    sin_Float16x2.backendIndex = 1493;
    sin_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    sin_Float16x2.parameters = sin_Float16x2_args;
    Symbol::Resolved(&sin_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sin_Float16x2)->signature = "f16x2 sin(f16x2)"_c;
    Symbol::Resolved(&sin_Float16x2)->name = "sin(f16x2)"_c;
    Symbol::Resolved(&sin_Float16x2)->nameWithVarNames = "sin(val : f16x2)"_c;
    Symbol::Resolved(&sin_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// sin with Float16x3
    sin_Float16x3_arg.name = "val"_c;
    sin_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sin_Float16x3.documentation = "Returns the sine of a value."_c;
    sin_Float16x3.name = "sin"_c;
    sin_Float16x3.backendIndex = 1494;
    sin_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    sin_Float16x3.parameters = sin_Float16x3_args;
    Symbol::Resolved(&sin_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sin_Float16x3)->signature = "f16x3 sin(f16x3)"_c;
    Symbol::Resolved(&sin_Float16x3)->name = "sin(f16x3)"_c;
    Symbol::Resolved(&sin_Float16x3)->nameWithVarNames = "sin(val : f16x3)"_c;
    Symbol::Resolved(&sin_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// sin with Float16x4
    sin_Float16x4_arg.name = "val"_c;
    sin_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sin_Float16x4.documentation = "Returns the sine of a value."_c;
    sin_Float16x4.name = "sin"_c;
    sin_Float16x4.backendIndex = 1495;
    sin_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    sin_Float16x4.parameters = sin_Float16x4_args;
    Symbol::Resolved(&sin_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sin_Float16x4)->signature = "f16x4 sin(f16x4)"_c;
    Symbol::Resolved(&sin_Float16x4)->name = "sin(f16x4)"_c;
    Symbol::Resolved(&sin_Float16x4)->nameWithVarNames = "sin(val : f16x4)"_c;
    Symbol::Resolved(&sin_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// sinh with Float32
    sinh_Float32_arg.name = "val"_c;
    sinh_Float32_arg.type = Type::FullType{ Float32Type.name };
    sinh_Float32.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float32.name = "sinh"_c;
    sinh_Float32.backendIndex = 1496;
    sinh_Float32.returnType = Type::FullType { Float32Type.name };
    sinh_Float32.parameters = sinh_Float32_args;
    Symbol::Resolved(&sinh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sinh_Float32)->signature = "f32 sinh(f32)"_c;
    Symbol::Resolved(&sinh_Float32)->name = "sinh(f32)"_c;
    Symbol::Resolved(&sinh_Float32)->nameWithVarNames = "sinh(val : f32)"_c;
    Symbol::Resolved(&sinh_Float32)->returnTypeSymbol = &Float32Type;

    /// sinh with Float32x2
    sinh_Float32x2_arg.name = "val"_c;
    sinh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sinh_Float32x2.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float32x2.name = "sinh"_c;
    sinh_Float32x2.backendIndex = 1497;
    sinh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    sinh_Float32x2.parameters = sinh_Float32x2_args;
    Symbol::Resolved(&sinh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sinh_Float32x2)->signature = "f32x2 sinh(f32x2)"_c;
    Symbol::Resolved(&sinh_Float32x2)->name = "sinh(f32x2)"_c;
    Symbol::Resolved(&sinh_Float32x2)->nameWithVarNames = "sinh(val : f32x2)"_c;
    Symbol::Resolved(&sinh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// sinh with Float32x3
    sinh_Float32x3_arg.name = "val"_c;
    sinh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sinh_Float32x3.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float32x3.name = "sinh"_c;
    sinh_Float32x3.backendIndex = 1498;
    sinh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    sinh_Float32x3.parameters = sinh_Float32x3_args;
    Symbol::Resolved(&sinh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sinh_Float32x3)->signature = "f32x3 sinh(f32x3)"_c;
    Symbol::Resolved(&sinh_Float32x3)->name = "sinh(f32x3)"_c;
    Symbol::Resolved(&sinh_Float32x3)->nameWithVarNames = "sinh(val : f32x3)"_c;
    Symbol::Resolved(&sinh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// sinh with Float32x4
    sinh_Float32x4_arg.name = "val"_c;
    sinh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sinh_Float32x4.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float32x4.name = "sinh"_c;
    sinh_Float32x4.backendIndex = 1499;
    sinh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    sinh_Float32x4.parameters = sinh_Float32x4_args;
    Symbol::Resolved(&sinh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sinh_Float32x4)->signature = "f32x4 sinh(f32x4)"_c;
    Symbol::Resolved(&sinh_Float32x4)->name = "sinh(f32x4)"_c;
    Symbol::Resolved(&sinh_Float32x4)->nameWithVarNames = "sinh(val : f32x4)"_c;
    Symbol::Resolved(&sinh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// sinh with Float16
    sinh_Float16_arg.name = "val"_c;
    sinh_Float16_arg.type = Type::FullType{ Float16Type.name };
    sinh_Float16.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float16.name = "sinh"_c;
    sinh_Float16.backendIndex = 1500;
    sinh_Float16.returnType = Type::FullType { Float16Type.name };
    sinh_Float16.parameters = sinh_Float16_args;
    Symbol::Resolved(&sinh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sinh_Float16)->signature = "f16 sinh(f16)"_c;
    Symbol::Resolved(&sinh_Float16)->name = "sinh(f16)"_c;
    Symbol::Resolved(&sinh_Float16)->nameWithVarNames = "sinh(val : f16)"_c;
    Symbol::Resolved(&sinh_Float16)->returnTypeSymbol = &Float16Type;

    /// sinh with Float16x2
    sinh_Float16x2_arg.name = "val"_c;
    sinh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sinh_Float16x2.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float16x2.name = "sinh"_c;
    sinh_Float16x2.backendIndex = 1501;
    sinh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    sinh_Float16x2.parameters = sinh_Float16x2_args;
    Symbol::Resolved(&sinh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sinh_Float16x2)->signature = "f16x2 sinh(f16x2)"_c;
    Symbol::Resolved(&sinh_Float16x2)->name = "sinh(f16x2)"_c;
    Symbol::Resolved(&sinh_Float16x2)->nameWithVarNames = "sinh(val : f16x2)"_c;
    Symbol::Resolved(&sinh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// sinh with Float16x3
    sinh_Float16x3_arg.name = "val"_c;
    sinh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sinh_Float16x3.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float16x3.name = "sinh"_c;
    sinh_Float16x3.backendIndex = 1502;
    sinh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    sinh_Float16x3.parameters = sinh_Float16x3_args;
    Symbol::Resolved(&sinh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sinh_Float16x3)->signature = "f16x3 sinh(f16x3)"_c;
    Symbol::Resolved(&sinh_Float16x3)->name = "sinh(f16x3)"_c;
    Symbol::Resolved(&sinh_Float16x3)->nameWithVarNames = "sinh(val : f16x3)"_c;
    Symbol::Resolved(&sinh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// sinh with Float16x4
    sinh_Float16x4_arg.name = "val"_c;
    sinh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sinh_Float16x4.documentation = "Returns the hyperbolic sine of a value."_c;
    sinh_Float16x4.name = "sinh"_c;
    sinh_Float16x4.backendIndex = 1503;
    sinh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    sinh_Float16x4.parameters = sinh_Float16x4_args;
    Symbol::Resolved(&sinh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sinh_Float16x4)->signature = "f16x4 sinh(f16x4)"_c;
    Symbol::Resolved(&sinh_Float16x4)->name = "sinh(f16x4)"_c;
    Symbol::Resolved(&sinh_Float16x4)->nameWithVarNames = "sinh(val : f16x4)"_c;
    Symbol::Resolved(&sinh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// sqrt with Float32
    sqrt_Float32_arg.name = "val"_c;
    sqrt_Float32_arg.type = Type::FullType{ Float32Type.name };
    sqrt_Float32.documentation = "Returns the square root of a value."_c;
    sqrt_Float32.name = "sqrt"_c;
    sqrt_Float32.backendIndex = 1504;
    sqrt_Float32.returnType = Type::FullType { Float32Type.name };
    sqrt_Float32.parameters = sqrt_Float32_args;
    Symbol::Resolved(&sqrt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sqrt_Float32)->signature = "f32 sqrt(f32)"_c;
    Symbol::Resolved(&sqrt_Float32)->name = "sqrt(f32)"_c;
    Symbol::Resolved(&sqrt_Float32)->nameWithVarNames = "sqrt(val : f32)"_c;
    Symbol::Resolved(&sqrt_Float32)->returnTypeSymbol = &Float32Type;

    /// sqrt with Float32x2
    sqrt_Float32x2_arg.name = "val"_c;
    sqrt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sqrt_Float32x2.documentation = "Returns the square root of a value."_c;
    sqrt_Float32x2.name = "sqrt"_c;
    sqrt_Float32x2.backendIndex = 1505;
    sqrt_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    sqrt_Float32x2.parameters = sqrt_Float32x2_args;
    Symbol::Resolved(&sqrt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sqrt_Float32x2)->signature = "f32x2 sqrt(f32x2)"_c;
    Symbol::Resolved(&sqrt_Float32x2)->name = "sqrt(f32x2)"_c;
    Symbol::Resolved(&sqrt_Float32x2)->nameWithVarNames = "sqrt(val : f32x2)"_c;
    Symbol::Resolved(&sqrt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// sqrt with Float32x3
    sqrt_Float32x3_arg.name = "val"_c;
    sqrt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sqrt_Float32x3.documentation = "Returns the square root of a value."_c;
    sqrt_Float32x3.name = "sqrt"_c;
    sqrt_Float32x3.backendIndex = 1506;
    sqrt_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    sqrt_Float32x3.parameters = sqrt_Float32x3_args;
    Symbol::Resolved(&sqrt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sqrt_Float32x3)->signature = "f32x3 sqrt(f32x3)"_c;
    Symbol::Resolved(&sqrt_Float32x3)->name = "sqrt(f32x3)"_c;
    Symbol::Resolved(&sqrt_Float32x3)->nameWithVarNames = "sqrt(val : f32x3)"_c;
    Symbol::Resolved(&sqrt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// sqrt with Float32x4
    sqrt_Float32x4_arg.name = "val"_c;
    sqrt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sqrt_Float32x4.documentation = "Returns the square root of a value."_c;
    sqrt_Float32x4.name = "sqrt"_c;
    sqrt_Float32x4.backendIndex = 1507;
    sqrt_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    sqrt_Float32x4.parameters = sqrt_Float32x4_args;
    Symbol::Resolved(&sqrt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sqrt_Float32x4)->signature = "f32x4 sqrt(f32x4)"_c;
    Symbol::Resolved(&sqrt_Float32x4)->name = "sqrt(f32x4)"_c;
    Symbol::Resolved(&sqrt_Float32x4)->nameWithVarNames = "sqrt(val : f32x4)"_c;
    Symbol::Resolved(&sqrt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// sqrt with Float16
    sqrt_Float16_arg.name = "val"_c;
    sqrt_Float16_arg.type = Type::FullType{ Float16Type.name };
    sqrt_Float16.documentation = "Returns the square root of a value."_c;
    sqrt_Float16.name = "sqrt"_c;
    sqrt_Float16.backendIndex = 1508;
    sqrt_Float16.returnType = Type::FullType { Float16Type.name };
    sqrt_Float16.parameters = sqrt_Float16_args;
    Symbol::Resolved(&sqrt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sqrt_Float16)->signature = "f16 sqrt(f16)"_c;
    Symbol::Resolved(&sqrt_Float16)->name = "sqrt(f16)"_c;
    Symbol::Resolved(&sqrt_Float16)->nameWithVarNames = "sqrt(val : f16)"_c;
    Symbol::Resolved(&sqrt_Float16)->returnTypeSymbol = &Float16Type;

    /// sqrt with Float16x2
    sqrt_Float16x2_arg.name = "val"_c;
    sqrt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sqrt_Float16x2.documentation = "Returns the square root of a value."_c;
    sqrt_Float16x2.name = "sqrt"_c;
    sqrt_Float16x2.backendIndex = 1509;
    sqrt_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    sqrt_Float16x2.parameters = sqrt_Float16x2_args;
    Symbol::Resolved(&sqrt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sqrt_Float16x2)->signature = "f16x2 sqrt(f16x2)"_c;
    Symbol::Resolved(&sqrt_Float16x2)->name = "sqrt(f16x2)"_c;
    Symbol::Resolved(&sqrt_Float16x2)->nameWithVarNames = "sqrt(val : f16x2)"_c;
    Symbol::Resolved(&sqrt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// sqrt with Float16x3
    sqrt_Float16x3_arg.name = "val"_c;
    sqrt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sqrt_Float16x3.documentation = "Returns the square root of a value."_c;
    sqrt_Float16x3.name = "sqrt"_c;
    sqrt_Float16x3.backendIndex = 1510;
    sqrt_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    sqrt_Float16x3.parameters = sqrt_Float16x3_args;
    Symbol::Resolved(&sqrt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sqrt_Float16x3)->signature = "f16x3 sqrt(f16x3)"_c;
    Symbol::Resolved(&sqrt_Float16x3)->name = "sqrt(f16x3)"_c;
    Symbol::Resolved(&sqrt_Float16x3)->nameWithVarNames = "sqrt(val : f16x3)"_c;
    Symbol::Resolved(&sqrt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// sqrt with Float16x4
    sqrt_Float16x4_arg.name = "val"_c;
    sqrt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sqrt_Float16x4.documentation = "Returns the square root of a value."_c;
    sqrt_Float16x4.name = "sqrt"_c;
    sqrt_Float16x4.backendIndex = 1511;
    sqrt_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    sqrt_Float16x4.parameters = sqrt_Float16x4_args;
    Symbol::Resolved(&sqrt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sqrt_Float16x4)->signature = "f16x4 sqrt(f16x4)"_c;
    Symbol::Resolved(&sqrt_Float16x4)->name = "sqrt(f16x4)"_c;
    Symbol::Resolved(&sqrt_Float16x4)->nameWithVarNames = "sqrt(val : f16x4)"_c;
    Symbol::Resolved(&sqrt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// tan with Float32
    tan_Float32_arg.name = "val"_c;
    tan_Float32_arg.type = Type::FullType{ Float32Type.name };
    tan_Float32.documentation = "Returns the tangent of a value."_c;
    tan_Float32.name = "tan"_c;
    tan_Float32.backendIndex = 1512;
    tan_Float32.returnType = Type::FullType { Float32Type.name };
    tan_Float32.parameters = tan_Float32_args;
    Symbol::Resolved(&tan_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&tan_Float32)->signature = "f32 tan(f32)"_c;
    Symbol::Resolved(&tan_Float32)->name = "tan(f32)"_c;
    Symbol::Resolved(&tan_Float32)->nameWithVarNames = "tan(val : f32)"_c;
    Symbol::Resolved(&tan_Float32)->returnTypeSymbol = &Float32Type;

    /// tan with Float32x2
    tan_Float32x2_arg.name = "val"_c;
    tan_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    tan_Float32x2.documentation = "Returns the tangent of a value."_c;
    tan_Float32x2.name = "tan"_c;
    tan_Float32x2.backendIndex = 1513;
    tan_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    tan_Float32x2.parameters = tan_Float32x2_args;
    Symbol::Resolved(&tan_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&tan_Float32x2)->signature = "f32x2 tan(f32x2)"_c;
    Symbol::Resolved(&tan_Float32x2)->name = "tan(f32x2)"_c;
    Symbol::Resolved(&tan_Float32x2)->nameWithVarNames = "tan(val : f32x2)"_c;
    Symbol::Resolved(&tan_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// tan with Float32x3
    tan_Float32x3_arg.name = "val"_c;
    tan_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    tan_Float32x3.documentation = "Returns the tangent of a value."_c;
    tan_Float32x3.name = "tan"_c;
    tan_Float32x3.backendIndex = 1514;
    tan_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    tan_Float32x3.parameters = tan_Float32x3_args;
    Symbol::Resolved(&tan_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&tan_Float32x3)->signature = "f32x3 tan(f32x3)"_c;
    Symbol::Resolved(&tan_Float32x3)->name = "tan(f32x3)"_c;
    Symbol::Resolved(&tan_Float32x3)->nameWithVarNames = "tan(val : f32x3)"_c;
    Symbol::Resolved(&tan_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// tan with Float32x4
    tan_Float32x4_arg.name = "val"_c;
    tan_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    tan_Float32x4.documentation = "Returns the tangent of a value."_c;
    tan_Float32x4.name = "tan"_c;
    tan_Float32x4.backendIndex = 1515;
    tan_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    tan_Float32x4.parameters = tan_Float32x4_args;
    Symbol::Resolved(&tan_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&tan_Float32x4)->signature = "f32x4 tan(f32x4)"_c;
    Symbol::Resolved(&tan_Float32x4)->name = "tan(f32x4)"_c;
    Symbol::Resolved(&tan_Float32x4)->nameWithVarNames = "tan(val : f32x4)"_c;
    Symbol::Resolved(&tan_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// tan with Float16
    tan_Float16_arg.name = "val"_c;
    tan_Float16_arg.type = Type::FullType{ Float16Type.name };
    tan_Float16.documentation = "Returns the tangent of a value."_c;
    tan_Float16.name = "tan"_c;
    tan_Float16.backendIndex = 1516;
    tan_Float16.returnType = Type::FullType { Float16Type.name };
    tan_Float16.parameters = tan_Float16_args;
    Symbol::Resolved(&tan_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&tan_Float16)->signature = "f16 tan(f16)"_c;
    Symbol::Resolved(&tan_Float16)->name = "tan(f16)"_c;
    Symbol::Resolved(&tan_Float16)->nameWithVarNames = "tan(val : f16)"_c;
    Symbol::Resolved(&tan_Float16)->returnTypeSymbol = &Float16Type;

    /// tan with Float16x2
    tan_Float16x2_arg.name = "val"_c;
    tan_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    tan_Float16x2.documentation = "Returns the tangent of a value."_c;
    tan_Float16x2.name = "tan"_c;
    tan_Float16x2.backendIndex = 1517;
    tan_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    tan_Float16x2.parameters = tan_Float16x2_args;
    Symbol::Resolved(&tan_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&tan_Float16x2)->signature = "f16x2 tan(f16x2)"_c;
    Symbol::Resolved(&tan_Float16x2)->name = "tan(f16x2)"_c;
    Symbol::Resolved(&tan_Float16x2)->nameWithVarNames = "tan(val : f16x2)"_c;
    Symbol::Resolved(&tan_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// tan with Float16x3
    tan_Float16x3_arg.name = "val"_c;
    tan_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    tan_Float16x3.documentation = "Returns the tangent of a value."_c;
    tan_Float16x3.name = "tan"_c;
    tan_Float16x3.backendIndex = 1518;
    tan_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    tan_Float16x3.parameters = tan_Float16x3_args;
    Symbol::Resolved(&tan_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&tan_Float16x3)->signature = "f16x3 tan(f16x3)"_c;
    Symbol::Resolved(&tan_Float16x3)->name = "tan(f16x3)"_c;
    Symbol::Resolved(&tan_Float16x3)->nameWithVarNames = "tan(val : f16x3)"_c;
    Symbol::Resolved(&tan_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// tan with Float16x4
    tan_Float16x4_arg.name = "val"_c;
    tan_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    tan_Float16x4.documentation = "Returns the tangent of a value."_c;
    tan_Float16x4.name = "tan"_c;
    tan_Float16x4.backendIndex = 1519;
    tan_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    tan_Float16x4.parameters = tan_Float16x4_args;
    Symbol::Resolved(&tan_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&tan_Float16x4)->signature = "f16x4 tan(f16x4)"_c;
    Symbol::Resolved(&tan_Float16x4)->name = "tan(f16x4)"_c;
    Symbol::Resolved(&tan_Float16x4)->nameWithVarNames = "tan(val : f16x4)"_c;
    Symbol::Resolved(&tan_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// tanh with Float32
    tanh_Float32_arg.name = "val"_c;
    tanh_Float32_arg.type = Type::FullType{ Float32Type.name };
    tanh_Float32.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float32.name = "tanh"_c;
    tanh_Float32.backendIndex = 1520;
    tanh_Float32.returnType = Type::FullType { Float32Type.name };
    tanh_Float32.parameters = tanh_Float32_args;
    Symbol::Resolved(&tanh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&tanh_Float32)->signature = "f32 tanh(f32)"_c;
    Symbol::Resolved(&tanh_Float32)->name = "tanh(f32)"_c;
    Symbol::Resolved(&tanh_Float32)->nameWithVarNames = "tanh(val : f32)"_c;
    Symbol::Resolved(&tanh_Float32)->returnTypeSymbol = &Float32Type;

    /// tanh with Float32x2
    tanh_Float32x2_arg.name = "val"_c;
    tanh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    tanh_Float32x2.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float32x2.name = "tanh"_c;
    tanh_Float32x2.backendIndex = 1521;
    tanh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    tanh_Float32x2.parameters = tanh_Float32x2_args;
    Symbol::Resolved(&tanh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&tanh_Float32x2)->signature = "f32x2 tanh(f32x2)"_c;
    Symbol::Resolved(&tanh_Float32x2)->name = "tanh(f32x2)"_c;
    Symbol::Resolved(&tanh_Float32x2)->nameWithVarNames = "tanh(val : f32x2)"_c;
    Symbol::Resolved(&tanh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// tanh with Float32x3
    tanh_Float32x3_arg.name = "val"_c;
    tanh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    tanh_Float32x3.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float32x3.name = "tanh"_c;
    tanh_Float32x3.backendIndex = 1522;
    tanh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    tanh_Float32x3.parameters = tanh_Float32x3_args;
    Symbol::Resolved(&tanh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&tanh_Float32x3)->signature = "f32x3 tanh(f32x3)"_c;
    Symbol::Resolved(&tanh_Float32x3)->name = "tanh(f32x3)"_c;
    Symbol::Resolved(&tanh_Float32x3)->nameWithVarNames = "tanh(val : f32x3)"_c;
    Symbol::Resolved(&tanh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// tanh with Float32x4
    tanh_Float32x4_arg.name = "val"_c;
    tanh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    tanh_Float32x4.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float32x4.name = "tanh"_c;
    tanh_Float32x4.backendIndex = 1523;
    tanh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    tanh_Float32x4.parameters = tanh_Float32x4_args;
    Symbol::Resolved(&tanh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&tanh_Float32x4)->signature = "f32x4 tanh(f32x4)"_c;
    Symbol::Resolved(&tanh_Float32x4)->name = "tanh(f32x4)"_c;
    Symbol::Resolved(&tanh_Float32x4)->nameWithVarNames = "tanh(val : f32x4)"_c;
    Symbol::Resolved(&tanh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// tanh with Float16
    tanh_Float16_arg.name = "val"_c;
    tanh_Float16_arg.type = Type::FullType{ Float16Type.name };
    tanh_Float16.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float16.name = "tanh"_c;
    tanh_Float16.backendIndex = 1524;
    tanh_Float16.returnType = Type::FullType { Float16Type.name };
    tanh_Float16.parameters = tanh_Float16_args;
    Symbol::Resolved(&tanh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&tanh_Float16)->signature = "f16 tanh(f16)"_c;
    Symbol::Resolved(&tanh_Float16)->name = "tanh(f16)"_c;
    Symbol::Resolved(&tanh_Float16)->nameWithVarNames = "tanh(val : f16)"_c;
    Symbol::Resolved(&tanh_Float16)->returnTypeSymbol = &Float16Type;

    /// tanh with Float16x2
    tanh_Float16x2_arg.name = "val"_c;
    tanh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    tanh_Float16x2.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float16x2.name = "tanh"_c;
    tanh_Float16x2.backendIndex = 1525;
    tanh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    tanh_Float16x2.parameters = tanh_Float16x2_args;
    Symbol::Resolved(&tanh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&tanh_Float16x2)->signature = "f16x2 tanh(f16x2)"_c;
    Symbol::Resolved(&tanh_Float16x2)->name = "tanh(f16x2)"_c;
    Symbol::Resolved(&tanh_Float16x2)->nameWithVarNames = "tanh(val : f16x2)"_c;
    Symbol::Resolved(&tanh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// tanh with Float16x3
    tanh_Float16x3_arg.name = "val"_c;
    tanh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    tanh_Float16x3.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float16x3.name = "tanh"_c;
    tanh_Float16x3.backendIndex = 1526;
    tanh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    tanh_Float16x3.parameters = tanh_Float16x3_args;
    Symbol::Resolved(&tanh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&tanh_Float16x3)->signature = "f16x3 tanh(f16x3)"_c;
    Symbol::Resolved(&tanh_Float16x3)->name = "tanh(f16x3)"_c;
    Symbol::Resolved(&tanh_Float16x3)->nameWithVarNames = "tanh(val : f16x3)"_c;
    Symbol::Resolved(&tanh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// tanh with Float16x4
    tanh_Float16x4_arg.name = "val"_c;
    tanh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    tanh_Float16x4.documentation = "Returns the hyperbolic tangent of a value."_c;
    tanh_Float16x4.name = "tanh"_c;
    tanh_Float16x4.backendIndex = 1527;
    tanh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    tanh_Float16x4.parameters = tanh_Float16x4_args;
    Symbol::Resolved(&tanh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&tanh_Float16x4)->signature = "f16x4 tanh(f16x4)"_c;
    Symbol::Resolved(&tanh_Float16x4)->name = "tanh(f16x4)"_c;
    Symbol::Resolved(&tanh_Float16x4)->nameWithVarNames = "tanh(val : f16x4)"_c;
    Symbol::Resolved(&tanh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// atan2 with Float32, Float32
    atan2_Float32_y.name = "y"_c;
    atan2_Float32_y.type = Type::FullType{ Float32Type.name };
    atan2_Float32_x.name = "x"_c;
    atan2_Float32_x.type = Type::FullType{ Float32Type.name };
    atan2_Float32.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float32.name = "atan2"_c;
    atan2_Float32.backendIndex = 1528;
    atan2_Float32.returnType = Type::FullType { Float32Type.name };
    atan2_Float32.parameters = atan2_Float32_args;
    Symbol::Resolved(&atan2_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan2_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan2_Float32)->signature = "f32 atan2(f32,f32)"_c;
    Symbol::Resolved(&atan2_Float32)->name = "atan2(f32,f32)"_c;
    Symbol::Resolved(&atan2_Float32)->nameWithVarNames = "atan2(y : f32, x : f32)"_c;
    Symbol::Resolved(&atan2_Float32)->returnTypeSymbol = &Float32Type;

    /// atan2 with Float32x2, Float32x2
    atan2_Float32x2_y.name = "y"_c;
    atan2_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    atan2_Float32x2_x.name = "x"_c;
    atan2_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    atan2_Float32x2.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float32x2.name = "atan2"_c;
    atan2_Float32x2.backendIndex = 1529;
    atan2_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    atan2_Float32x2.parameters = atan2_Float32x2_args;
    Symbol::Resolved(&atan2_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan2_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan2_Float32x2)->signature = "f32x2 atan2(f32x2,f32x2)"_c;
    Symbol::Resolved(&atan2_Float32x2)->name = "atan2(f32x2,f32x2)"_c;
    Symbol::Resolved(&atan2_Float32x2)->nameWithVarNames = "atan2(y : f32x2, x : f32x2)"_c;
    Symbol::Resolved(&atan2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// atan2 with Float32x3, Float32x3
    atan2_Float32x3_y.name = "y"_c;
    atan2_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    atan2_Float32x3_x.name = "x"_c;
    atan2_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    atan2_Float32x3.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float32x3.name = "atan2"_c;
    atan2_Float32x3.backendIndex = 1530;
    atan2_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    atan2_Float32x3.parameters = atan2_Float32x3_args;
    Symbol::Resolved(&atan2_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan2_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan2_Float32x3)->signature = "f32x3 atan2(f32x3,f32x3)"_c;
    Symbol::Resolved(&atan2_Float32x3)->name = "atan2(f32x3,f32x3)"_c;
    Symbol::Resolved(&atan2_Float32x3)->nameWithVarNames = "atan2(y : f32x3, x : f32x3)"_c;
    Symbol::Resolved(&atan2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// atan2 with Float32x4, Float32x4
    atan2_Float32x4_y.name = "y"_c;
    atan2_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    atan2_Float32x4_x.name = "x"_c;
    atan2_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    atan2_Float32x4.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float32x4.name = "atan2"_c;
    atan2_Float32x4.backendIndex = 1531;
    atan2_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    atan2_Float32x4.parameters = atan2_Float32x4_args;
    Symbol::Resolved(&atan2_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan2_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan2_Float32x4)->signature = "f32x4 atan2(f32x4,f32x4)"_c;
    Symbol::Resolved(&atan2_Float32x4)->name = "atan2(f32x4,f32x4)"_c;
    Symbol::Resolved(&atan2_Float32x4)->nameWithVarNames = "atan2(y : f32x4, x : f32x4)"_c;
    Symbol::Resolved(&atan2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// atan2 with Float16, Float16
    atan2_Float16_y.name = "y"_c;
    atan2_Float16_y.type = Type::FullType{ Float16Type.name };
    atan2_Float16_x.name = "x"_c;
    atan2_Float16_x.type = Type::FullType{ Float16Type.name };
    atan2_Float16.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float16.name = "atan2"_c;
    atan2_Float16.backendIndex = 1532;
    atan2_Float16.returnType = Type::FullType { Float16Type.name };
    atan2_Float16.parameters = atan2_Float16_args;
    Symbol::Resolved(&atan2_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan2_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan2_Float16)->signature = "f16 atan2(f16,f16)"_c;
    Symbol::Resolved(&atan2_Float16)->name = "atan2(f16,f16)"_c;
    Symbol::Resolved(&atan2_Float16)->nameWithVarNames = "atan2(y : f16, x : f16)"_c;
    Symbol::Resolved(&atan2_Float16)->returnTypeSymbol = &Float16Type;

    /// atan2 with Float16x2, Float16x2
    atan2_Float16x2_y.name = "y"_c;
    atan2_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    atan2_Float16x2_x.name = "x"_c;
    atan2_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    atan2_Float16x2.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float16x2.name = "atan2"_c;
    atan2_Float16x2.backendIndex = 1533;
    atan2_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    atan2_Float16x2.parameters = atan2_Float16x2_args;
    Symbol::Resolved(&atan2_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan2_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan2_Float16x2)->signature = "f16x2 atan2(f16x2,f16x2)"_c;
    Symbol::Resolved(&atan2_Float16x2)->name = "atan2(f16x2,f16x2)"_c;
    Symbol::Resolved(&atan2_Float16x2)->nameWithVarNames = "atan2(y : f16x2, x : f16x2)"_c;
    Symbol::Resolved(&atan2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// atan2 with Float16x3, Float16x3
    atan2_Float16x3_y.name = "y"_c;
    atan2_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    atan2_Float16x3_x.name = "x"_c;
    atan2_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    atan2_Float16x3.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float16x3.name = "atan2"_c;
    atan2_Float16x3.backendIndex = 1534;
    atan2_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    atan2_Float16x3.parameters = atan2_Float16x3_args;
    Symbol::Resolved(&atan2_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan2_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan2_Float16x3)->signature = "f16x3 atan2(f16x3,f16x3)"_c;
    Symbol::Resolved(&atan2_Float16x3)->name = "atan2(f16x3,f16x3)"_c;
    Symbol::Resolved(&atan2_Float16x3)->nameWithVarNames = "atan2(y : f16x3, x : f16x3)"_c;
    Symbol::Resolved(&atan2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// atan2 with Float16x4, Float16x4
    atan2_Float16x4_y.name = "y"_c;
    atan2_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    atan2_Float16x4_x.name = "x"_c;
    atan2_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    atan2_Float16x4.documentation = "Returns the angle whose tangent is the quotient of the two specified numbers."_c;
    atan2_Float16x4.name = "atan2"_c;
    atan2_Float16x4.backendIndex = 1535;
    atan2_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    atan2_Float16x4.parameters = atan2_Float16x4_args;
    Symbol::Resolved(&atan2_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan2_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan2_Float16x4)->signature = "f16x4 atan2(f16x4,f16x4)"_c;
    Symbol::Resolved(&atan2_Float16x4)->name = "atan2(f16x4,f16x4)"_c;
    Symbol::Resolved(&atan2_Float16x4)->nameWithVarNames = "atan2(y : f16x4, x : f16x4)"_c;
    Symbol::Resolved(&atan2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// pow with Float32, Float32
    pow_Float32_arg.name = "val"_c;
    pow_Float32_arg.type = Type::FullType{ Float32Type.name };
    pow_Float32_exp.name = "exponent"_c;
    pow_Float32_exp.type = Type::FullType{ Float32Type.name };
    pow_Float32.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float32.name = "pow"_c;
    pow_Float32.backendIndex = 1536;
    pow_Float32.returnType = Type::FullType { Float32Type.name };
    pow_Float32.parameters = pow_Float32_args;
    Symbol::Resolved(&pow_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&pow_Float32_exp)->typeSymbol = &Float32Type;
    Symbol::Resolved(&pow_Float32)->signature = "f32 pow(f32,f32)"_c;
    Symbol::Resolved(&pow_Float32)->name = "pow(f32,f32)"_c;
    Symbol::Resolved(&pow_Float32)->nameWithVarNames = "pow(val : f32, exponent : f32)"_c;
    Symbol::Resolved(&pow_Float32)->returnTypeSymbol = &Float32Type;

    /// pow with Float32x2, Float32x2
    pow_Float32x2_arg.name = "val"_c;
    pow_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    pow_Float32x2_exp.name = "exponent"_c;
    pow_Float32x2_exp.type = Type::FullType{ Float32x2Type.name };
    pow_Float32x2.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float32x2.name = "pow"_c;
    pow_Float32x2.backendIndex = 1537;
    pow_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    pow_Float32x2.parameters = pow_Float32x2_args;
    Symbol::Resolved(&pow_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&pow_Float32x2_exp)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&pow_Float32x2)->signature = "f32x2 pow(f32x2,f32x2)"_c;
    Symbol::Resolved(&pow_Float32x2)->name = "pow(f32x2,f32x2)"_c;
    Symbol::Resolved(&pow_Float32x2)->nameWithVarNames = "pow(val : f32x2, exponent : f32x2)"_c;
    Symbol::Resolved(&pow_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// pow with Float32x3, Float32x3
    pow_Float32x3_arg.name = "val"_c;
    pow_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    pow_Float32x3_exp.name = "exponent"_c;
    pow_Float32x3_exp.type = Type::FullType{ Float32x3Type.name };
    pow_Float32x3.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float32x3.name = "pow"_c;
    pow_Float32x3.backendIndex = 1538;
    pow_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    pow_Float32x3.parameters = pow_Float32x3_args;
    Symbol::Resolved(&pow_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&pow_Float32x3_exp)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&pow_Float32x3)->signature = "f32x3 pow(f32x3,f32x3)"_c;
    Symbol::Resolved(&pow_Float32x3)->name = "pow(f32x3,f32x3)"_c;
    Symbol::Resolved(&pow_Float32x3)->nameWithVarNames = "pow(val : f32x3, exponent : f32x3)"_c;
    Symbol::Resolved(&pow_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// pow with Float32x4, Float32x4
    pow_Float32x4_arg.name = "val"_c;
    pow_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    pow_Float32x4_exp.name = "exponent"_c;
    pow_Float32x4_exp.type = Type::FullType{ Float32x4Type.name };
    pow_Float32x4.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float32x4.name = "pow"_c;
    pow_Float32x4.backendIndex = 1539;
    pow_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    pow_Float32x4.parameters = pow_Float32x4_args;
    Symbol::Resolved(&pow_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&pow_Float32x4_exp)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&pow_Float32x4)->signature = "f32x4 pow(f32x4,f32x4)"_c;
    Symbol::Resolved(&pow_Float32x4)->name = "pow(f32x4,f32x4)"_c;
    Symbol::Resolved(&pow_Float32x4)->nameWithVarNames = "pow(val : f32x4, exponent : f32x4)"_c;
    Symbol::Resolved(&pow_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// pow with Float16, Float16
    pow_Float16_arg.name = "val"_c;
    pow_Float16_arg.type = Type::FullType{ Float16Type.name };
    pow_Float16_exp.name = "exponent"_c;
    pow_Float16_exp.type = Type::FullType{ Float16Type.name };
    pow_Float16.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float16.name = "pow"_c;
    pow_Float16.backendIndex = 1540;
    pow_Float16.returnType = Type::FullType { Float16Type.name };
    pow_Float16.parameters = pow_Float16_args;
    Symbol::Resolved(&pow_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&pow_Float16_exp)->typeSymbol = &Float16Type;
    Symbol::Resolved(&pow_Float16)->signature = "f16 pow(f16,f16)"_c;
    Symbol::Resolved(&pow_Float16)->name = "pow(f16,f16)"_c;
    Symbol::Resolved(&pow_Float16)->nameWithVarNames = "pow(val : f16, exponent : f16)"_c;
    Symbol::Resolved(&pow_Float16)->returnTypeSymbol = &Float16Type;

    /// pow with Float16x2, Float16x2
    pow_Float16x2_arg.name = "val"_c;
    pow_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    pow_Float16x2_exp.name = "exponent"_c;
    pow_Float16x2_exp.type = Type::FullType{ Float16x2Type.name };
    pow_Float16x2.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float16x2.name = "pow"_c;
    pow_Float16x2.backendIndex = 1541;
    pow_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    pow_Float16x2.parameters = pow_Float16x2_args;
    Symbol::Resolved(&pow_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&pow_Float16x2_exp)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&pow_Float16x2)->signature = "f16x2 pow(f16x2,f16x2)"_c;
    Symbol::Resolved(&pow_Float16x2)->name = "pow(f16x2,f16x2)"_c;
    Symbol::Resolved(&pow_Float16x2)->nameWithVarNames = "pow(val : f16x2, exponent : f16x2)"_c;
    Symbol::Resolved(&pow_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// pow with Float16x3, Float16x3
    pow_Float16x3_arg.name = "val"_c;
    pow_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    pow_Float16x3_exp.name = "exponent"_c;
    pow_Float16x3_exp.type = Type::FullType{ Float16x3Type.name };
    pow_Float16x3.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float16x3.name = "pow"_c;
    pow_Float16x3.backendIndex = 1542;
    pow_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    pow_Float16x3.parameters = pow_Float16x3_args;
    Symbol::Resolved(&pow_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&pow_Float16x3_exp)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&pow_Float16x3)->signature = "f16x3 pow(f16x3,f16x3)"_c;
    Symbol::Resolved(&pow_Float16x3)->name = "pow(f16x3,f16x3)"_c;
    Symbol::Resolved(&pow_Float16x3)->nameWithVarNames = "pow(val : f16x3, exponent : f16x3)"_c;
    Symbol::Resolved(&pow_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// pow with Float16x4, Float16x4
    pow_Float16x4_arg.name = "val"_c;
    pow_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    pow_Float16x4_exp.name = "exponent"_c;
    pow_Float16x4_exp.type = Type::FullType{ Float16x4Type.name };
    pow_Float16x4.documentation = "Returns the result of raising a value to the power of an exponent."_c;
    pow_Float16x4.name = "pow"_c;
    pow_Float16x4.backendIndex = 1543;
    pow_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    pow_Float16x4.parameters = pow_Float16x4_args;
    Symbol::Resolved(&pow_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&pow_Float16x4_exp)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&pow_Float16x4)->signature = "f16x4 pow(f16x4,f16x4)"_c;
    Symbol::Resolved(&pow_Float16x4)->name = "pow(f16x4,f16x4)"_c;
    Symbol::Resolved(&pow_Float16x4)->nameWithVarNames = "pow(val : f16x4, exponent : f16x4)"_c;
    Symbol::Resolved(&pow_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// mad with Float32, Float32, Float32
    mad_Float32_arg.name = "val"_c;
    mad_Float32_arg.type = Type::FullType{ Float32Type.name };
    mad_Float32_mul.name = "multiplier"_c;
    mad_Float32_mul.type = Type::FullType{ Float32Type.name };
    mad_Float32_add.name = "addend"_c;
    mad_Float32_add.type = Type::FullType{ Float32Type.name };
    mad_Float32.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float32.name = "mad"_c;
    mad_Float32.backendIndex = 1544;
    mad_Float32.returnType = Type::FullType { Float32Type.name };
    mad_Float32.parameters = mad_Float32_args;
    Symbol::Resolved(&mad_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32_mul)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32_add)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32)->signature = "f32 mad(f32,f32,f32)"_c;
    Symbol::Resolved(&mad_Float32)->name = "mad(f32,f32,f32)"_c;
    Symbol::Resolved(&mad_Float32)->nameWithVarNames = "mad(val : f32, multiplier : f32, addend : f32)"_c;
    Symbol::Resolved(&mad_Float32)->returnTypeSymbol = &Float32Type;

    /// mad with Float32x2, Float32x2, Float32x2
    mad_Float32x2_arg.name = "val"_c;
    mad_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2_mul.name = "multiplier"_c;
    mad_Float32x2_mul.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2_add.name = "addend"_c;
    mad_Float32x2_add.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float32x2.name = "mad"_c;
    mad_Float32x2.backendIndex = 1545;
    mad_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    mad_Float32x2.parameters = mad_Float32x2_args;
    Symbol::Resolved(&mad_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2_mul)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2_add)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2)->signature = "f32x2 mad(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&mad_Float32x2)->name = "mad(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&mad_Float32x2)->nameWithVarNames = "mad(val : f32x2, multiplier : f32x2, addend : f32x2)"_c;
    Symbol::Resolved(&mad_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// mad with Float32x3, Float32x3, Float32x3
    mad_Float32x3_arg.name = "val"_c;
    mad_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3_mul.name = "multiplier"_c;
    mad_Float32x3_mul.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3_add.name = "addend"_c;
    mad_Float32x3_add.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float32x3.name = "mad"_c;
    mad_Float32x3.backendIndex = 1546;
    mad_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    mad_Float32x3.parameters = mad_Float32x3_args;
    Symbol::Resolved(&mad_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3_mul)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3_add)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3)->signature = "f32x3 mad(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&mad_Float32x3)->name = "mad(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&mad_Float32x3)->nameWithVarNames = "mad(val : f32x3, multiplier : f32x3, addend : f32x3)"_c;
    Symbol::Resolved(&mad_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// mad with Float32x4, Float32x4, Float32x4
    mad_Float32x4_arg.name = "val"_c;
    mad_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4_mul.name = "multiplier"_c;
    mad_Float32x4_mul.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4_add.name = "addend"_c;
    mad_Float32x4_add.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float32x4.name = "mad"_c;
    mad_Float32x4.backendIndex = 1547;
    mad_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    mad_Float32x4.parameters = mad_Float32x4_args;
    Symbol::Resolved(&mad_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4_mul)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4_add)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4)->signature = "f32x4 mad(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&mad_Float32x4)->name = "mad(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&mad_Float32x4)->nameWithVarNames = "mad(val : f32x4, multiplier : f32x4, addend : f32x4)"_c;
    Symbol::Resolved(&mad_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// mad with Float16, Float16, Float16
    mad_Float16_arg.name = "val"_c;
    mad_Float16_arg.type = Type::FullType{ Float16Type.name };
    mad_Float16_mul.name = "multiplier"_c;
    mad_Float16_mul.type = Type::FullType{ Float16Type.name };
    mad_Float16_add.name = "addend"_c;
    mad_Float16_add.type = Type::FullType{ Float16Type.name };
    mad_Float16.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float16.name = "mad"_c;
    mad_Float16.backendIndex = 1548;
    mad_Float16.returnType = Type::FullType { Float16Type.name };
    mad_Float16.parameters = mad_Float16_args;
    Symbol::Resolved(&mad_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16_mul)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16_add)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16)->signature = "f16 mad(f16,f16,f16)"_c;
    Symbol::Resolved(&mad_Float16)->name = "mad(f16,f16,f16)"_c;
    Symbol::Resolved(&mad_Float16)->nameWithVarNames = "mad(val : f16, multiplier : f16, addend : f16)"_c;
    Symbol::Resolved(&mad_Float16)->returnTypeSymbol = &Float16Type;

    /// mad with Float16x2, Float16x2, Float16x2
    mad_Float16x2_arg.name = "val"_c;
    mad_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2_mul.name = "multiplier"_c;
    mad_Float16x2_mul.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2_add.name = "addend"_c;
    mad_Float16x2_add.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float16x2.name = "mad"_c;
    mad_Float16x2.backendIndex = 1549;
    mad_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    mad_Float16x2.parameters = mad_Float16x2_args;
    Symbol::Resolved(&mad_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2_mul)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2_add)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2)->signature = "f16x2 mad(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&mad_Float16x2)->name = "mad(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&mad_Float16x2)->nameWithVarNames = "mad(val : f16x2, multiplier : f16x2, addend : f16x2)"_c;
    Symbol::Resolved(&mad_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// mad with Float16x3, Float16x3, Float16x3
    mad_Float16x3_arg.name = "val"_c;
    mad_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3_mul.name = "multiplier"_c;
    mad_Float16x3_mul.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3_add.name = "addend"_c;
    mad_Float16x3_add.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float16x3.name = "mad"_c;
    mad_Float16x3.backendIndex = 1550;
    mad_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    mad_Float16x3.parameters = mad_Float16x3_args;
    Symbol::Resolved(&mad_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3_mul)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3_add)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3)->signature = "f16x3 mad(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&mad_Float16x3)->name = "mad(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&mad_Float16x3)->nameWithVarNames = "mad(val : f16x3, multiplier : f16x3, addend : f16x3)"_c;
    Symbol::Resolved(&mad_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// mad with Float16x4, Float16x4, Float16x4
    mad_Float16x4_arg.name = "val"_c;
    mad_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4_mul.name = "multiplier"_c;
    mad_Float16x4_mul.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4_add.name = "addend"_c;
    mad_Float16x4_add.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Float16x4.name = "mad"_c;
    mad_Float16x4.backendIndex = 1551;
    mad_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    mad_Float16x4.parameters = mad_Float16x4_args;
    Symbol::Resolved(&mad_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4_mul)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4_add)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4)->signature = "f16x4 mad(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&mad_Float16x4)->name = "mad(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&mad_Float16x4)->nameWithVarNames = "mad(val : f16x4, multiplier : f16x4, addend : f16x4)"_c;
    Symbol::Resolved(&mad_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// mad with Int32, Int32, Int32
    mad_Int32_arg.name = "val"_c;
    mad_Int32_arg.type = Type::FullType{ Int32Type.name };
    mad_Int32_mul.name = "multiplier"_c;
    mad_Int32_mul.type = Type::FullType{ Int32Type.name };
    mad_Int32_add.name = "addend"_c;
    mad_Int32_add.type = Type::FullType{ Int32Type.name };
    mad_Int32.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int32.name = "mad"_c;
    mad_Int32.backendIndex = 1552;
    mad_Int32.returnType = Type::FullType { Int32Type.name };
    mad_Int32.parameters = mad_Int32_args;
    Symbol::Resolved(&mad_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32_mul)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32_add)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32)->signature = "i32 mad(i32,i32,i32)"_c;
    Symbol::Resolved(&mad_Int32)->name = "mad(i32,i32,i32)"_c;
    Symbol::Resolved(&mad_Int32)->nameWithVarNames = "mad(val : i32, multiplier : i32, addend : i32)"_c;
    Symbol::Resolved(&mad_Int32)->returnTypeSymbol = &Int32Type;

    /// mad with Int32x2, Int32x2, Int32x2
    mad_Int32x2_arg.name = "val"_c;
    mad_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2_mul.name = "multiplier"_c;
    mad_Int32x2_mul.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2_add.name = "addend"_c;
    mad_Int32x2_add.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int32x2.name = "mad"_c;
    mad_Int32x2.backendIndex = 1553;
    mad_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    mad_Int32x2.parameters = mad_Int32x2_args;
    Symbol::Resolved(&mad_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2_mul)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2_add)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2)->signature = "i32x2 mad(i32x2,i32x2,i32x2)"_c;
    Symbol::Resolved(&mad_Int32x2)->name = "mad(i32x2,i32x2,i32x2)"_c;
    Symbol::Resolved(&mad_Int32x2)->nameWithVarNames = "mad(val : i32x2, multiplier : i32x2, addend : i32x2)"_c;
    Symbol::Resolved(&mad_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// mad with Int32x3, Int32x3, Int32x3
    mad_Int32x3_arg.name = "val"_c;
    mad_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3_mul.name = "multiplier"_c;
    mad_Int32x3_mul.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3_add.name = "addend"_c;
    mad_Int32x3_add.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int32x3.name = "mad"_c;
    mad_Int32x3.backendIndex = 1554;
    mad_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    mad_Int32x3.parameters = mad_Int32x3_args;
    Symbol::Resolved(&mad_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3_mul)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3_add)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3)->signature = "i32x3 mad(i32x3,i32x3,i32x3)"_c;
    Symbol::Resolved(&mad_Int32x3)->name = "mad(i32x3,i32x3,i32x3)"_c;
    Symbol::Resolved(&mad_Int32x3)->nameWithVarNames = "mad(val : i32x3, multiplier : i32x3, addend : i32x3)"_c;
    Symbol::Resolved(&mad_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// mad with Int32x4, Int32x4, Int32x4
    mad_Int32x4_arg.name = "val"_c;
    mad_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4_mul.name = "multiplier"_c;
    mad_Int32x4_mul.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4_add.name = "addend"_c;
    mad_Int32x4_add.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int32x4.name = "mad"_c;
    mad_Int32x4.backendIndex = 1555;
    mad_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    mad_Int32x4.parameters = mad_Int32x4_args;
    Symbol::Resolved(&mad_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4_mul)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4_add)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4)->signature = "i32x4 mad(i32x4,i32x4,i32x4)"_c;
    Symbol::Resolved(&mad_Int32x4)->name = "mad(i32x4,i32x4,i32x4)"_c;
    Symbol::Resolved(&mad_Int32x4)->nameWithVarNames = "mad(val : i32x4, multiplier : i32x4, addend : i32x4)"_c;
    Symbol::Resolved(&mad_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// mad with Int16, Int16, Int16
    mad_Int16_arg.name = "val"_c;
    mad_Int16_arg.type = Type::FullType{ Int16Type.name };
    mad_Int16_mul.name = "multiplier"_c;
    mad_Int16_mul.type = Type::FullType{ Int16Type.name };
    mad_Int16_add.name = "addend"_c;
    mad_Int16_add.type = Type::FullType{ Int16Type.name };
    mad_Int16.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int16.name = "mad"_c;
    mad_Int16.backendIndex = 1556;
    mad_Int16.returnType = Type::FullType { Int16Type.name };
    mad_Int16.parameters = mad_Int16_args;
    Symbol::Resolved(&mad_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16_mul)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16_add)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16)->signature = "i16 mad(i16,i16,i16)"_c;
    Symbol::Resolved(&mad_Int16)->name = "mad(i16,i16,i16)"_c;
    Symbol::Resolved(&mad_Int16)->nameWithVarNames = "mad(val : i16, multiplier : i16, addend : i16)"_c;
    Symbol::Resolved(&mad_Int16)->returnTypeSymbol = &Int16Type;

    /// mad with Int16x2, Int16x2, Int16x2
    mad_Int16x2_arg.name = "val"_c;
    mad_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2_mul.name = "multiplier"_c;
    mad_Int16x2_mul.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2_add.name = "addend"_c;
    mad_Int16x2_add.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int16x2.name = "mad"_c;
    mad_Int16x2.backendIndex = 1557;
    mad_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    mad_Int16x2.parameters = mad_Int16x2_args;
    Symbol::Resolved(&mad_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2_mul)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2_add)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2)->signature = "i16x2 mad(i16x2,i16x2,i16x2)"_c;
    Symbol::Resolved(&mad_Int16x2)->name = "mad(i16x2,i16x2,i16x2)"_c;
    Symbol::Resolved(&mad_Int16x2)->nameWithVarNames = "mad(val : i16x2, multiplier : i16x2, addend : i16x2)"_c;
    Symbol::Resolved(&mad_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// mad with Int16x3, Int16x3, Int16x3
    mad_Int16x3_arg.name = "val"_c;
    mad_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3_mul.name = "multiplier"_c;
    mad_Int16x3_mul.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3_add.name = "addend"_c;
    mad_Int16x3_add.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int16x3.name = "mad"_c;
    mad_Int16x3.backendIndex = 1558;
    mad_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    mad_Int16x3.parameters = mad_Int16x3_args;
    Symbol::Resolved(&mad_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3_mul)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3_add)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3)->signature = "i16x3 mad(i16x3,i16x3,i16x3)"_c;
    Symbol::Resolved(&mad_Int16x3)->name = "mad(i16x3,i16x3,i16x3)"_c;
    Symbol::Resolved(&mad_Int16x3)->nameWithVarNames = "mad(val : i16x3, multiplier : i16x3, addend : i16x3)"_c;
    Symbol::Resolved(&mad_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// mad with Int16x4, Int16x4, Int16x4
    mad_Int16x4_arg.name = "val"_c;
    mad_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4_mul.name = "multiplier"_c;
    mad_Int16x4_mul.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4_add.name = "addend"_c;
    mad_Int16x4_add.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_Int16x4.name = "mad"_c;
    mad_Int16x4.backendIndex = 1559;
    mad_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    mad_Int16x4.parameters = mad_Int16x4_args;
    Symbol::Resolved(&mad_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4_mul)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4_add)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4)->signature = "i16x4 mad(i16x4,i16x4,i16x4)"_c;
    Symbol::Resolved(&mad_Int16x4)->name = "mad(i16x4,i16x4,i16x4)"_c;
    Symbol::Resolved(&mad_Int16x4)->nameWithVarNames = "mad(val : i16x4, multiplier : i16x4, addend : i16x4)"_c;
    Symbol::Resolved(&mad_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// mad with UInt32, UInt32, UInt32
    mad_UInt32_arg.name = "val"_c;
    mad_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    mad_UInt32_mul.name = "multiplier"_c;
    mad_UInt32_mul.type = Type::FullType{ UInt32Type.name };
    mad_UInt32_add.name = "addend"_c;
    mad_UInt32_add.type = Type::FullType{ UInt32Type.name };
    mad_UInt32.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt32.name = "mad"_c;
    mad_UInt32.backendIndex = 1560;
    mad_UInt32.returnType = Type::FullType { UInt32Type.name };
    mad_UInt32.parameters = mad_UInt32_args;
    Symbol::Resolved(&mad_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32_mul)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32_add)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32)->signature = "u32 mad(u32,u32,u32)"_c;
    Symbol::Resolved(&mad_UInt32)->name = "mad(u32,u32,u32)"_c;
    Symbol::Resolved(&mad_UInt32)->nameWithVarNames = "mad(val : u32, multiplier : u32, addend : u32)"_c;
    Symbol::Resolved(&mad_UInt32)->returnTypeSymbol = &UInt32Type;

    /// mad with UInt32x2, UInt32x2, UInt32x2
    mad_UInt32x2_arg.name = "val"_c;
    mad_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2_mul.name = "multiplier"_c;
    mad_UInt32x2_mul.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2_add.name = "addend"_c;
    mad_UInt32x2_add.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt32x2.name = "mad"_c;
    mad_UInt32x2.backendIndex = 1561;
    mad_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    mad_UInt32x2.parameters = mad_UInt32x2_args;
    Symbol::Resolved(&mad_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2_mul)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2_add)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2)->signature = "u32x2 mad(u32x2,u32x2,u32x2)"_c;
    Symbol::Resolved(&mad_UInt32x2)->name = "mad(u32x2,u32x2,u32x2)"_c;
    Symbol::Resolved(&mad_UInt32x2)->nameWithVarNames = "mad(val : u32x2, multiplier : u32x2, addend : u32x2)"_c;
    Symbol::Resolved(&mad_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// mad with UInt32x3, UInt32x3, UInt32x3
    mad_UInt32x3_arg.name = "val"_c;
    mad_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3_mul.name = "multiplier"_c;
    mad_UInt32x3_mul.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3_add.name = "addend"_c;
    mad_UInt32x3_add.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt32x3.name = "mad"_c;
    mad_UInt32x3.backendIndex = 1562;
    mad_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    mad_UInt32x3.parameters = mad_UInt32x3_args;
    Symbol::Resolved(&mad_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3_mul)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3_add)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3)->signature = "u32x3 mad(u32x3,u32x3,u32x3)"_c;
    Symbol::Resolved(&mad_UInt32x3)->name = "mad(u32x3,u32x3,u32x3)"_c;
    Symbol::Resolved(&mad_UInt32x3)->nameWithVarNames = "mad(val : u32x3, multiplier : u32x3, addend : u32x3)"_c;
    Symbol::Resolved(&mad_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// mad with UInt32x4, UInt32x4, UInt32x4
    mad_UInt32x4_arg.name = "val"_c;
    mad_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4_mul.name = "multiplier"_c;
    mad_UInt32x4_mul.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4_add.name = "addend"_c;
    mad_UInt32x4_add.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt32x4.name = "mad"_c;
    mad_UInt32x4.backendIndex = 1563;
    mad_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    mad_UInt32x4.parameters = mad_UInt32x4_args;
    Symbol::Resolved(&mad_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4_mul)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4_add)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4)->signature = "u32x4 mad(u32x4,u32x4,u32x4)"_c;
    Symbol::Resolved(&mad_UInt32x4)->name = "mad(u32x4,u32x4,u32x4)"_c;
    Symbol::Resolved(&mad_UInt32x4)->nameWithVarNames = "mad(val : u32x4, multiplier : u32x4, addend : u32x4)"_c;
    Symbol::Resolved(&mad_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// mad with UInt16, UInt16, UInt16
    mad_UInt16_arg.name = "val"_c;
    mad_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    mad_UInt16_mul.name = "multiplier"_c;
    mad_UInt16_mul.type = Type::FullType{ UInt16Type.name };
    mad_UInt16_add.name = "addend"_c;
    mad_UInt16_add.type = Type::FullType{ UInt16Type.name };
    mad_UInt16.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt16.name = "mad"_c;
    mad_UInt16.backendIndex = 1564;
    mad_UInt16.returnType = Type::FullType { UInt16Type.name };
    mad_UInt16.parameters = mad_UInt16_args;
    Symbol::Resolved(&mad_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16_mul)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16_add)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16)->signature = "u16 mad(u16,u16,u16)"_c;
    Symbol::Resolved(&mad_UInt16)->name = "mad(u16,u16,u16)"_c;
    Symbol::Resolved(&mad_UInt16)->nameWithVarNames = "mad(val : u16, multiplier : u16, addend : u16)"_c;
    Symbol::Resolved(&mad_UInt16)->returnTypeSymbol = &UInt16Type;

    /// mad with UInt16x2, UInt16x2, UInt16x2
    mad_UInt16x2_arg.name = "val"_c;
    mad_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2_mul.name = "multiplier"_c;
    mad_UInt16x2_mul.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2_add.name = "addend"_c;
    mad_UInt16x2_add.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt16x2.name = "mad"_c;
    mad_UInt16x2.backendIndex = 1565;
    mad_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    mad_UInt16x2.parameters = mad_UInt16x2_args;
    Symbol::Resolved(&mad_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2_mul)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2_add)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2)->signature = "u16x2 mad(u16x2,u16x2,u16x2)"_c;
    Symbol::Resolved(&mad_UInt16x2)->name = "mad(u16x2,u16x2,u16x2)"_c;
    Symbol::Resolved(&mad_UInt16x2)->nameWithVarNames = "mad(val : u16x2, multiplier : u16x2, addend : u16x2)"_c;
    Symbol::Resolved(&mad_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// mad with UInt16x3, UInt16x3, UInt16x3
    mad_UInt16x3_arg.name = "val"_c;
    mad_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3_mul.name = "multiplier"_c;
    mad_UInt16x3_mul.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3_add.name = "addend"_c;
    mad_UInt16x3_add.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt16x3.name = "mad"_c;
    mad_UInt16x3.backendIndex = 1566;
    mad_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    mad_UInt16x3.parameters = mad_UInt16x3_args;
    Symbol::Resolved(&mad_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3_mul)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3_add)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3)->signature = "u16x3 mad(u16x3,u16x3,u16x3)"_c;
    Symbol::Resolved(&mad_UInt16x3)->name = "mad(u16x3,u16x3,u16x3)"_c;
    Symbol::Resolved(&mad_UInt16x3)->nameWithVarNames = "mad(val : u16x3, multiplier : u16x3, addend : u16x3)"_c;
    Symbol::Resolved(&mad_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// mad with UInt16x4, UInt16x4, UInt16x4
    mad_UInt16x4_arg.name = "val"_c;
    mad_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4_mul.name = "multiplier"_c;
    mad_UInt16x4_mul.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4_add.name = "addend"_c;
    mad_UInt16x4_add.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4.documentation = "Returns the result of multiplying a value by a multiplier and adding an addend."_c;
    mad_UInt16x4.name = "mad"_c;
    mad_UInt16x4.backendIndex = 1567;
    mad_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    mad_UInt16x4.parameters = mad_UInt16x4_args;
    Symbol::Resolved(&mad_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4_mul)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4_add)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4)->signature = "u16x4 mad(u16x4,u16x4,u16x4)"_c;
    Symbol::Resolved(&mad_UInt16x4)->name = "mad(u16x4,u16x4,u16x4)"_c;
    Symbol::Resolved(&mad_UInt16x4)->nameWithVarNames = "mad(val : u16x4, multiplier : u16x4, addend : u16x4)"_c;
    Symbol::Resolved(&mad_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// dot with Float32x2, Float32x2
    dot_Float32x2_x.name = "x"_c;
    dot_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    dot_Float32x2_y.name = "y"_c;
    dot_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    dot_Float32x2.documentation = "Returns the dot product of two vectors."_c;
    dot_Float32x2.name = "dot"_c;
    dot_Float32x2.backendIndex = 1568;
    dot_Float32x2.returnType = Type::FullType { Float32Type.name };
    dot_Float32x2.parameters = dot_Float32x2_args;
    Symbol::Resolved(&dot_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&dot_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&dot_Float32x2)->signature = "f32 dot(f32x2,f32x2)"_c;
    Symbol::Resolved(&dot_Float32x2)->name = "dot(f32x2,f32x2)"_c;
    Symbol::Resolved(&dot_Float32x2)->nameWithVarNames = "dot(x : f32x2, y : f32x2)"_c;
    Symbol::Resolved(&dot_Float32x2)->returnTypeSymbol = &Float32Type;

    /// dot with Float32x3, Float32x3
    dot_Float32x3_x.name = "x"_c;
    dot_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    dot_Float32x3_y.name = "y"_c;
    dot_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    dot_Float32x3.documentation = "Returns the dot product of two vectors."_c;
    dot_Float32x3.name = "dot"_c;
    dot_Float32x3.backendIndex = 1569;
    dot_Float32x3.returnType = Type::FullType { Float32Type.name };
    dot_Float32x3.parameters = dot_Float32x3_args;
    Symbol::Resolved(&dot_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&dot_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&dot_Float32x3)->signature = "f32 dot(f32x3,f32x3)"_c;
    Symbol::Resolved(&dot_Float32x3)->name = "dot(f32x3,f32x3)"_c;
    Symbol::Resolved(&dot_Float32x3)->nameWithVarNames = "dot(x : f32x3, y : f32x3)"_c;
    Symbol::Resolved(&dot_Float32x3)->returnTypeSymbol = &Float32Type;

    /// dot with Float32x4, Float32x4
    dot_Float32x4_x.name = "x"_c;
    dot_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    dot_Float32x4_y.name = "y"_c;
    dot_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    dot_Float32x4.documentation = "Returns the dot product of two vectors."_c;
    dot_Float32x4.name = "dot"_c;
    dot_Float32x4.backendIndex = 1570;
    dot_Float32x4.returnType = Type::FullType { Float32Type.name };
    dot_Float32x4.parameters = dot_Float32x4_args;
    Symbol::Resolved(&dot_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&dot_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&dot_Float32x4)->signature = "f32 dot(f32x4,f32x4)"_c;
    Symbol::Resolved(&dot_Float32x4)->name = "dot(f32x4,f32x4)"_c;
    Symbol::Resolved(&dot_Float32x4)->nameWithVarNames = "dot(x : f32x4, y : f32x4)"_c;
    Symbol::Resolved(&dot_Float32x4)->returnTypeSymbol = &Float32Type;

    /// dot with Float16x2, Float16x2
    dot_Float16x2_x.name = "x"_c;
    dot_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    dot_Float16x2_y.name = "y"_c;
    dot_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    dot_Float16x2.documentation = "Returns the dot product of two vectors."_c;
    dot_Float16x2.name = "dot"_c;
    dot_Float16x2.backendIndex = 1571;
    dot_Float16x2.returnType = Type::FullType { Float16Type.name };
    dot_Float16x2.parameters = dot_Float16x2_args;
    Symbol::Resolved(&dot_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&dot_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&dot_Float16x2)->signature = "f16 dot(f16x2,f16x2)"_c;
    Symbol::Resolved(&dot_Float16x2)->name = "dot(f16x2,f16x2)"_c;
    Symbol::Resolved(&dot_Float16x2)->nameWithVarNames = "dot(x : f16x2, y : f16x2)"_c;
    Symbol::Resolved(&dot_Float16x2)->returnTypeSymbol = &Float16Type;

    /// dot with Float16x3, Float16x3
    dot_Float16x3_x.name = "x"_c;
    dot_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    dot_Float16x3_y.name = "y"_c;
    dot_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    dot_Float16x3.documentation = "Returns the dot product of two vectors."_c;
    dot_Float16x3.name = "dot"_c;
    dot_Float16x3.backendIndex = 1572;
    dot_Float16x3.returnType = Type::FullType { Float16Type.name };
    dot_Float16x3.parameters = dot_Float16x3_args;
    Symbol::Resolved(&dot_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&dot_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&dot_Float16x3)->signature = "f16 dot(f16x3,f16x3)"_c;
    Symbol::Resolved(&dot_Float16x3)->name = "dot(f16x3,f16x3)"_c;
    Symbol::Resolved(&dot_Float16x3)->nameWithVarNames = "dot(x : f16x3, y : f16x3)"_c;
    Symbol::Resolved(&dot_Float16x3)->returnTypeSymbol = &Float16Type;

    /// dot with Float16x4, Float16x4
    dot_Float16x4_x.name = "x"_c;
    dot_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    dot_Float16x4_y.name = "y"_c;
    dot_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    dot_Float16x4.documentation = "Returns the dot product of two vectors."_c;
    dot_Float16x4.name = "dot"_c;
    dot_Float16x4.backendIndex = 1573;
    dot_Float16x4.returnType = Type::FullType { Float16Type.name };
    dot_Float16x4.parameters = dot_Float16x4_args;
    Symbol::Resolved(&dot_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&dot_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&dot_Float16x4)->signature = "f16 dot(f16x4,f16x4)"_c;
    Symbol::Resolved(&dot_Float16x4)->name = "dot(f16x4,f16x4)"_c;
    Symbol::Resolved(&dot_Float16x4)->nameWithVarNames = "dot(x : f16x4, y : f16x4)"_c;
    Symbol::Resolved(&dot_Float16x4)->returnTypeSymbol = &Float16Type;

    /// reflect with Float32x2, Float32x2
    reflect_Float32x2_incident.name = "incident"_c;
    reflect_Float32x2_incident.type = Type::FullType{ Float32x2Type.name };
    reflect_Float32x2_normal.name = "normal"_c;
    reflect_Float32x2_normal.type = Type::FullType{ Float32x2Type.name };
    reflect_Float32x2.documentation = "Returns the reflection of a vector through a surface using an incident vector and normal."_c;
    reflect_Float32x2.name = "reflect"_c;
    reflect_Float32x2.backendIndex = 1574;
    reflect_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    reflect_Float32x2.parameters = reflect_Float32x2_args;
    Symbol::Resolved(&reflect_Float32x2_incident)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&reflect_Float32x2_normal)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&reflect_Float32x2)->signature = "f32x2 reflect(f32x2,f32x2)"_c;
    Symbol::Resolved(&reflect_Float32x2)->name = "reflect(f32x2,f32x2)"_c;
    Symbol::Resolved(&reflect_Float32x2)->nameWithVarNames = "reflect(incident : f32x2, normal : f32x2)"_c;
    Symbol::Resolved(&reflect_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// reflect with Float32x3, Float32x3
    reflect_Float32x3_incident.name = "incident"_c;
    reflect_Float32x3_incident.type = Type::FullType{ Float32x3Type.name };
    reflect_Float32x3_normal.name = "normal"_c;
    reflect_Float32x3_normal.type = Type::FullType{ Float32x3Type.name };
    reflect_Float32x3.documentation = "Returns the reflection of a vector through a surface using an incident vector and normal."_c;
    reflect_Float32x3.name = "reflect"_c;
    reflect_Float32x3.backendIndex = 1575;
    reflect_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    reflect_Float32x3.parameters = reflect_Float32x3_args;
    Symbol::Resolved(&reflect_Float32x3_incident)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&reflect_Float32x3_normal)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&reflect_Float32x3)->signature = "f32x3 reflect(f32x3,f32x3)"_c;
    Symbol::Resolved(&reflect_Float32x3)->name = "reflect(f32x3,f32x3)"_c;
    Symbol::Resolved(&reflect_Float32x3)->nameWithVarNames = "reflect(incident : f32x3, normal : f32x3)"_c;
    Symbol::Resolved(&reflect_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// reflect with Float32x4, Float32x4
    reflect_Float32x4_incident.name = "incident"_c;
    reflect_Float32x4_incident.type = Type::FullType{ Float32x4Type.name };
    reflect_Float32x4_normal.name = "normal"_c;
    reflect_Float32x4_normal.type = Type::FullType{ Float32x4Type.name };
    reflect_Float32x4.documentation = "Returns the reflection of a vector through a surface using an incident vector and normal."_c;
    reflect_Float32x4.name = "reflect"_c;
    reflect_Float32x4.backendIndex = 1576;
    reflect_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    reflect_Float32x4.parameters = reflect_Float32x4_args;
    Symbol::Resolved(&reflect_Float32x4_incident)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&reflect_Float32x4_normal)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&reflect_Float32x4)->signature = "f32x4 reflect(f32x4,f32x4)"_c;
    Symbol::Resolved(&reflect_Float32x4)->name = "reflect(f32x4,f32x4)"_c;
    Symbol::Resolved(&reflect_Float32x4)->nameWithVarNames = "reflect(incident : f32x4, normal : f32x4)"_c;
    Symbol::Resolved(&reflect_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// reflect with Float16x2, Float16x2
    reflect_Float16x2_incident.name = "incident"_c;
    reflect_Float16x2_incident.type = Type::FullType{ Float16x2Type.name };
    reflect_Float16x2_normal.name = "normal"_c;
    reflect_Float16x2_normal.type = Type::FullType{ Float16x2Type.name };
    reflect_Float16x2.documentation = "Returns the reflection of a vector through a surface using an incident vector and normal."_c;
    reflect_Float16x2.name = "reflect"_c;
    reflect_Float16x2.backendIndex = 1577;
    reflect_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    reflect_Float16x2.parameters = reflect_Float16x2_args;
    Symbol::Resolved(&reflect_Float16x2_incident)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&reflect_Float16x2_normal)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&reflect_Float16x2)->signature = "f16x2 reflect(f16x2,f16x2)"_c;
    Symbol::Resolved(&reflect_Float16x2)->name = "reflect(f16x2,f16x2)"_c;
    Symbol::Resolved(&reflect_Float16x2)->nameWithVarNames = "reflect(incident : f16x2, normal : f16x2)"_c;
    Symbol::Resolved(&reflect_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// reflect with Float16x3, Float16x3
    reflect_Float16x3_incident.name = "incident"_c;
    reflect_Float16x3_incident.type = Type::FullType{ Float16x3Type.name };
    reflect_Float16x3_normal.name = "normal"_c;
    reflect_Float16x3_normal.type = Type::FullType{ Float16x3Type.name };
    reflect_Float16x3.documentation = "Returns the reflection of a vector through a surface using an incident vector and normal."_c;
    reflect_Float16x3.name = "reflect"_c;
    reflect_Float16x3.backendIndex = 1578;
    reflect_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    reflect_Float16x3.parameters = reflect_Float16x3_args;
    Symbol::Resolved(&reflect_Float16x3_incident)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&reflect_Float16x3_normal)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&reflect_Float16x3)->signature = "f16x3 reflect(f16x3,f16x3)"_c;
    Symbol::Resolved(&reflect_Float16x3)->name = "reflect(f16x3,f16x3)"_c;
    Symbol::Resolved(&reflect_Float16x3)->nameWithVarNames = "reflect(incident : f16x3, normal : f16x3)"_c;
    Symbol::Resolved(&reflect_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// reflect with Float16x4, Float16x4
    reflect_Float16x4_incident.name = "incident"_c;
    reflect_Float16x4_incident.type = Type::FullType{ Float16x4Type.name };
    reflect_Float16x4_normal.name = "normal"_c;
    reflect_Float16x4_normal.type = Type::FullType{ Float16x4Type.name };
    reflect_Float16x4.documentation = "Returns the reflection of a vector through a surface using an incident vector and normal."_c;
    reflect_Float16x4.name = "reflect"_c;
    reflect_Float16x4.backendIndex = 1579;
    reflect_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    reflect_Float16x4.parameters = reflect_Float16x4_args;
    Symbol::Resolved(&reflect_Float16x4_incident)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&reflect_Float16x4_normal)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&reflect_Float16x4)->signature = "f16x4 reflect(f16x4,f16x4)"_c;
    Symbol::Resolved(&reflect_Float16x4)->name = "reflect(f16x4,f16x4)"_c;
    Symbol::Resolved(&reflect_Float16x4)->nameWithVarNames = "reflect(incident : f16x4, normal : f16x4)"_c;
    Symbol::Resolved(&reflect_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// refract with Float32x2, Float32x2, Float32x2
    refract_Float32x2_incident.name = "incident"_c;
    refract_Float32x2_incident.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2_normal.name = "normal"_c;
    refract_Float32x2_normal.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2_ior.name = "ior"_c;
    refract_Float32x2_ior.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2.documentation = "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction."_c;
    refract_Float32x2.name = "refract"_c;
    refract_Float32x2.backendIndex = 1580;
    refract_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    refract_Float32x2.parameters = refract_Float32x2_args;
    Symbol::Resolved(&refract_Float32x2_incident)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2_normal)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2_ior)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2)->signature = "f32x2 refract(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&refract_Float32x2)->name = "refract(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&refract_Float32x2)->nameWithVarNames = "refract(incident : f32x2, normal : f32x2, ior : f32x2)"_c;
    Symbol::Resolved(&refract_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// refract with Float32x3, Float32x3, Float32x3
    refract_Float32x3_incident.name = "incident"_c;
    refract_Float32x3_incident.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3_normal.name = "normal"_c;
    refract_Float32x3_normal.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3_ior.name = "ior"_c;
    refract_Float32x3_ior.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3.documentation = "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction."_c;
    refract_Float32x3.name = "refract"_c;
    refract_Float32x3.backendIndex = 1581;
    refract_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    refract_Float32x3.parameters = refract_Float32x3_args;
    Symbol::Resolved(&refract_Float32x3_incident)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3_normal)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3_ior)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3)->signature = "f32x3 refract(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&refract_Float32x3)->name = "refract(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&refract_Float32x3)->nameWithVarNames = "refract(incident : f32x3, normal : f32x3, ior : f32x3)"_c;
    Symbol::Resolved(&refract_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// refract with Float32x4, Float32x4, Float32x4
    refract_Float32x4_incident.name = "incident"_c;
    refract_Float32x4_incident.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4_normal.name = "normal"_c;
    refract_Float32x4_normal.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4_ior.name = "ior"_c;
    refract_Float32x4_ior.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4.documentation = "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction."_c;
    refract_Float32x4.name = "refract"_c;
    refract_Float32x4.backendIndex = 1582;
    refract_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    refract_Float32x4.parameters = refract_Float32x4_args;
    Symbol::Resolved(&refract_Float32x4_incident)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4_normal)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4_ior)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4)->signature = "f32x4 refract(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&refract_Float32x4)->name = "refract(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&refract_Float32x4)->nameWithVarNames = "refract(incident : f32x4, normal : f32x4, ior : f32x4)"_c;
    Symbol::Resolved(&refract_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// refract with Float16x2, Float16x2, Float16x2
    refract_Float16x2_incident.name = "incident"_c;
    refract_Float16x2_incident.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2_normal.name = "normal"_c;
    refract_Float16x2_normal.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2_ior.name = "ior"_c;
    refract_Float16x2_ior.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2.documentation = "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction."_c;
    refract_Float16x2.name = "refract"_c;
    refract_Float16x2.backendIndex = 1583;
    refract_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    refract_Float16x2.parameters = refract_Float16x2_args;
    Symbol::Resolved(&refract_Float16x2_incident)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2_normal)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2_ior)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2)->signature = "f16x2 refract(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&refract_Float16x2)->name = "refract(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&refract_Float16x2)->nameWithVarNames = "refract(incident : f16x2, normal : f16x2, ior : f16x2)"_c;
    Symbol::Resolved(&refract_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// refract with Float16x3, Float16x3, Float16x3
    refract_Float16x3_incident.name = "incident"_c;
    refract_Float16x3_incident.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3_normal.name = "normal"_c;
    refract_Float16x3_normal.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3_ior.name = "ior"_c;
    refract_Float16x3_ior.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3.documentation = "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction."_c;
    refract_Float16x3.name = "refract"_c;
    refract_Float16x3.backendIndex = 1584;
    refract_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    refract_Float16x3.parameters = refract_Float16x3_args;
    Symbol::Resolved(&refract_Float16x3_incident)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3_normal)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3_ior)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3)->signature = "f16x3 refract(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&refract_Float16x3)->name = "refract(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&refract_Float16x3)->nameWithVarNames = "refract(incident : f16x3, normal : f16x3, ior : f16x3)"_c;
    Symbol::Resolved(&refract_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// refract with Float16x4, Float16x4, Float16x4
    refract_Float16x4_incident.name = "incident"_c;
    refract_Float16x4_incident.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4_normal.name = "normal"_c;
    refract_Float16x4_normal.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4_ior.name = "ior"_c;
    refract_Float16x4_ior.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4.documentation = "Returns the refraction of a vector through a surface using an incident vector, normal and an index of refraction."_c;
    refract_Float16x4.name = "refract"_c;
    refract_Float16x4.backendIndex = 1585;
    refract_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    refract_Float16x4.parameters = refract_Float16x4_args;
    Symbol::Resolved(&refract_Float16x4_incident)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4_normal)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4_ior)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4)->signature = "f16x4 refract(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&refract_Float16x4)->name = "refract(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&refract_Float16x4)->nameWithVarNames = "refract(incident : f16x4, normal : f16x4, ior : f16x4)"_c;
    Symbol::Resolved(&refract_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// cross with Float32x3, Float32x3
    cross_Float32x3_v0.name = "v0"_c;
    cross_Float32x3_v0.type = Type::FullType{ Float32x3Type.name };
    cross_Float32x3_v1.name = "v1"_c;
    cross_Float32x3_v1.type = Type::FullType{ Float32x3Type.name };
    cross_Float32x3.documentation = "Returns the cross product of two vectors."_c;
    cross_Float32x3.name = "cross"_c;
    cross_Float32x3.backendIndex = 1586;
    cross_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    cross_Float32x3.parameters = cross_Float32x3_args;
    Symbol::Resolved(&cross_Float32x3_v0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cross_Float32x3_v1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cross_Float32x3)->signature = "f32x3 cross(f32x3,f32x3)"_c;
    Symbol::Resolved(&cross_Float32x3)->name = "cross(f32x3,f32x3)"_c;
    Symbol::Resolved(&cross_Float32x3)->nameWithVarNames = "cross(v0 : f32x3, v1 : f32x3)"_c;
    Symbol::Resolved(&cross_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// cross with Float16x3, Float16x3
    cross_Float16x3_v0.name = "v0"_c;
    cross_Float16x3_v0.type = Type::FullType{ Float16x3Type.name };
    cross_Float16x3_v1.name = "v1"_c;
    cross_Float16x3_v1.type = Type::FullType{ Float16x3Type.name };
    cross_Float16x3.documentation = "Returns the cross product of two vectors."_c;
    cross_Float16x3.name = "cross"_c;
    cross_Float16x3.backendIndex = 1587;
    cross_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    cross_Float16x3.parameters = cross_Float16x3_args;
    Symbol::Resolved(&cross_Float16x3_v0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cross_Float16x3_v1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cross_Float16x3)->signature = "f16x3 cross(f16x3,f16x3)"_c;
    Symbol::Resolved(&cross_Float16x3)->name = "cross(f16x3,f16x3)"_c;
    Symbol::Resolved(&cross_Float16x3)->nameWithVarNames = "cross(v0 : f16x3, v1 : f16x3)"_c;
    Symbol::Resolved(&cross_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// length with Float32x2
    length_Float32x2_arg.name = "val"_c;
    length_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    length_Float32x2.documentation = "Returns the length of the vector."_c;
    length_Float32x2.name = "length"_c;
    length_Float32x2.backendIndex = 1588;
    length_Float32x2.returnType = Type::FullType { Float32Type.name };
    length_Float32x2.parameters = length_Float32x2_args;
    Symbol::Resolved(&length_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&length_Float32x2)->signature = "f32 length(f32x2)"_c;
    Symbol::Resolved(&length_Float32x2)->name = "length(f32x2)"_c;
    Symbol::Resolved(&length_Float32x2)->nameWithVarNames = "length(val : f32x2)"_c;
    Symbol::Resolved(&length_Float32x2)->returnTypeSymbol = &Float32Type;

    /// length with Float32x3
    length_Float32x3_arg.name = "val"_c;
    length_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    length_Float32x3.documentation = "Returns the length of the vector."_c;
    length_Float32x3.name = "length"_c;
    length_Float32x3.backendIndex = 1589;
    length_Float32x3.returnType = Type::FullType { Float32Type.name };
    length_Float32x3.parameters = length_Float32x3_args;
    Symbol::Resolved(&length_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&length_Float32x3)->signature = "f32 length(f32x3)"_c;
    Symbol::Resolved(&length_Float32x3)->name = "length(f32x3)"_c;
    Symbol::Resolved(&length_Float32x3)->nameWithVarNames = "length(val : f32x3)"_c;
    Symbol::Resolved(&length_Float32x3)->returnTypeSymbol = &Float32Type;

    /// length with Float32x4
    length_Float32x4_arg.name = "val"_c;
    length_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    length_Float32x4.documentation = "Returns the length of the vector."_c;
    length_Float32x4.name = "length"_c;
    length_Float32x4.backendIndex = 1590;
    length_Float32x4.returnType = Type::FullType { Float32Type.name };
    length_Float32x4.parameters = length_Float32x4_args;
    Symbol::Resolved(&length_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&length_Float32x4)->signature = "f32 length(f32x4)"_c;
    Symbol::Resolved(&length_Float32x4)->name = "length(f32x4)"_c;
    Symbol::Resolved(&length_Float32x4)->nameWithVarNames = "length(val : f32x4)"_c;
    Symbol::Resolved(&length_Float32x4)->returnTypeSymbol = &Float32Type;

    /// length with Float16x2
    length_Float16x2_arg.name = "val"_c;
    length_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    length_Float16x2.documentation = "Returns the length of the vector."_c;
    length_Float16x2.name = "length"_c;
    length_Float16x2.backendIndex = 1591;
    length_Float16x2.returnType = Type::FullType { Float32Type.name };
    length_Float16x2.parameters = length_Float16x2_args;
    Symbol::Resolved(&length_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&length_Float16x2)->signature = "f32 length(f16x2)"_c;
    Symbol::Resolved(&length_Float16x2)->name = "length(f16x2)"_c;
    Symbol::Resolved(&length_Float16x2)->nameWithVarNames = "length(val : f16x2)"_c;
    Symbol::Resolved(&length_Float16x2)->returnTypeSymbol = &Float32Type;

    /// length with Float16x3
    length_Float16x3_arg.name = "val"_c;
    length_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    length_Float16x3.documentation = "Returns the length of the vector."_c;
    length_Float16x3.name = "length"_c;
    length_Float16x3.backendIndex = 1592;
    length_Float16x3.returnType = Type::FullType { Float32Type.name };
    length_Float16x3.parameters = length_Float16x3_args;
    Symbol::Resolved(&length_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&length_Float16x3)->signature = "f32 length(f16x3)"_c;
    Symbol::Resolved(&length_Float16x3)->name = "length(f16x3)"_c;
    Symbol::Resolved(&length_Float16x3)->nameWithVarNames = "length(val : f16x3)"_c;
    Symbol::Resolved(&length_Float16x3)->returnTypeSymbol = &Float32Type;

    /// length with Float16x4
    length_Float16x4_arg.name = "val"_c;
    length_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    length_Float16x4.documentation = "Returns the length of the vector."_c;
    length_Float16x4.name = "length"_c;
    length_Float16x4.backendIndex = 1593;
    length_Float16x4.returnType = Type::FullType { Float32Type.name };
    length_Float16x4.parameters = length_Float16x4_args;
    Symbol::Resolved(&length_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&length_Float16x4)->signature = "f32 length(f16x4)"_c;
    Symbol::Resolved(&length_Float16x4)->name = "length(f16x4)"_c;
    Symbol::Resolved(&length_Float16x4)->nameWithVarNames = "length(val : f16x4)"_c;
    Symbol::Resolved(&length_Float16x4)->returnTypeSymbol = &Float32Type;

    /// normalize with Float32x2
    normalize_Float32x2_arg.name = "val"_c;
    normalize_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    normalize_Float32x2.documentation = "Returns the normalized vector."_c;
    normalize_Float32x2.name = "normalize"_c;
    normalize_Float32x2.backendIndex = 1594;
    normalize_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    normalize_Float32x2.parameters = normalize_Float32x2_args;
    Symbol::Resolved(&normalize_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&normalize_Float32x2)->signature = "f32x2 normalize(f32x2)"_c;
    Symbol::Resolved(&normalize_Float32x2)->name = "normalize(f32x2)"_c;
    Symbol::Resolved(&normalize_Float32x2)->nameWithVarNames = "normalize(val : f32x2)"_c;
    Symbol::Resolved(&normalize_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// normalize with Float32x3
    normalize_Float32x3_arg.name = "val"_c;
    normalize_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    normalize_Float32x3.documentation = "Returns the normalized vector."_c;
    normalize_Float32x3.name = "normalize"_c;
    normalize_Float32x3.backendIndex = 1595;
    normalize_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    normalize_Float32x3.parameters = normalize_Float32x3_args;
    Symbol::Resolved(&normalize_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&normalize_Float32x3)->signature = "f32x3 normalize(f32x3)"_c;
    Symbol::Resolved(&normalize_Float32x3)->name = "normalize(f32x3)"_c;
    Symbol::Resolved(&normalize_Float32x3)->nameWithVarNames = "normalize(val : f32x3)"_c;
    Symbol::Resolved(&normalize_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// normalize with Float32x4
    normalize_Float32x4_arg.name = "val"_c;
    normalize_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    normalize_Float32x4.documentation = "Returns the normalized vector."_c;
    normalize_Float32x4.name = "normalize"_c;
    normalize_Float32x4.backendIndex = 1596;
    normalize_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    normalize_Float32x4.parameters = normalize_Float32x4_args;
    Symbol::Resolved(&normalize_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&normalize_Float32x4)->signature = "f32x4 normalize(f32x4)"_c;
    Symbol::Resolved(&normalize_Float32x4)->name = "normalize(f32x4)"_c;
    Symbol::Resolved(&normalize_Float32x4)->nameWithVarNames = "normalize(val : f32x4)"_c;
    Symbol::Resolved(&normalize_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// normalize with Float16x2
    normalize_Float16x2_arg.name = "val"_c;
    normalize_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    normalize_Float16x2.documentation = "Returns the normalized vector."_c;
    normalize_Float16x2.name = "normalize"_c;
    normalize_Float16x2.backendIndex = 1597;
    normalize_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    normalize_Float16x2.parameters = normalize_Float16x2_args;
    Symbol::Resolved(&normalize_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&normalize_Float16x2)->signature = "f16x2 normalize(f16x2)"_c;
    Symbol::Resolved(&normalize_Float16x2)->name = "normalize(f16x2)"_c;
    Symbol::Resolved(&normalize_Float16x2)->nameWithVarNames = "normalize(val : f16x2)"_c;
    Symbol::Resolved(&normalize_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// normalize with Float16x3
    normalize_Float16x3_arg.name = "val"_c;
    normalize_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    normalize_Float16x3.documentation = "Returns the normalized vector."_c;
    normalize_Float16x3.name = "normalize"_c;
    normalize_Float16x3.backendIndex = 1598;
    normalize_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    normalize_Float16x3.parameters = normalize_Float16x3_args;
    Symbol::Resolved(&normalize_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&normalize_Float16x3)->signature = "f16x3 normalize(f16x3)"_c;
    Symbol::Resolved(&normalize_Float16x3)->name = "normalize(f16x3)"_c;
    Symbol::Resolved(&normalize_Float16x3)->nameWithVarNames = "normalize(val : f16x3)"_c;
    Symbol::Resolved(&normalize_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// normalize with Float16x4
    normalize_Float16x4_arg.name = "val"_c;
    normalize_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    normalize_Float16x4.documentation = "Returns the normalized vector."_c;
    normalize_Float16x4.name = "normalize"_c;
    normalize_Float16x4.backendIndex = 1599;
    normalize_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    normalize_Float16x4.parameters = normalize_Float16x4_args;
    Symbol::Resolved(&normalize_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&normalize_Float16x4)->signature = "f16x4 normalize(f16x4)"_c;
    Symbol::Resolved(&normalize_Float16x4)->name = "normalize(f16x4)"_c;
    Symbol::Resolved(&normalize_Float16x4)->nameWithVarNames = "normalize(val : f16x4)"_c;
    Symbol::Resolved(&normalize_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// distance with Float32x2, Float32x2
    distance_Float32x2_p0.name = "p0"_c;
    distance_Float32x2_p0.type = Type::FullType{ Float32x2Type.name };
    distance_Float32x2_p1.name = "p1"_c;
    distance_Float32x2_p1.type = Type::FullType{ Float32x2Type.name };
    distance_Float32x2.documentation = "Returns the distance between two points."_c;
    distance_Float32x2.name = "distance"_c;
    distance_Float32x2.backendIndex = 1600;
    distance_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    distance_Float32x2.parameters = distance_Float32x2_args;
    Symbol::Resolved(&distance_Float32x2_p0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&distance_Float32x2_p1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&distance_Float32x2)->signature = "f32x2 distance(f32x2,f32x2)"_c;
    Symbol::Resolved(&distance_Float32x2)->name = "distance(f32x2,f32x2)"_c;
    Symbol::Resolved(&distance_Float32x2)->nameWithVarNames = "distance(p0 : f32x2, p1 : f32x2)"_c;
    Symbol::Resolved(&distance_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// distance with Float32x3, Float32x3
    distance_Float32x3_p0.name = "p0"_c;
    distance_Float32x3_p0.type = Type::FullType{ Float32x3Type.name };
    distance_Float32x3_p1.name = "p1"_c;
    distance_Float32x3_p1.type = Type::FullType{ Float32x3Type.name };
    distance_Float32x3.documentation = "Returns the distance between two points."_c;
    distance_Float32x3.name = "distance"_c;
    distance_Float32x3.backendIndex = 1601;
    distance_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    distance_Float32x3.parameters = distance_Float32x3_args;
    Symbol::Resolved(&distance_Float32x3_p0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&distance_Float32x3_p1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&distance_Float32x3)->signature = "f32x3 distance(f32x3,f32x3)"_c;
    Symbol::Resolved(&distance_Float32x3)->name = "distance(f32x3,f32x3)"_c;
    Symbol::Resolved(&distance_Float32x3)->nameWithVarNames = "distance(p0 : f32x3, p1 : f32x3)"_c;
    Symbol::Resolved(&distance_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// distance with Float32x4, Float32x4
    distance_Float32x4_p0.name = "p0"_c;
    distance_Float32x4_p0.type = Type::FullType{ Float32x4Type.name };
    distance_Float32x4_p1.name = "p1"_c;
    distance_Float32x4_p1.type = Type::FullType{ Float32x4Type.name };
    distance_Float32x4.documentation = "Returns the distance between two points."_c;
    distance_Float32x4.name = "distance"_c;
    distance_Float32x4.backendIndex = 1602;
    distance_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    distance_Float32x4.parameters = distance_Float32x4_args;
    Symbol::Resolved(&distance_Float32x4_p0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&distance_Float32x4_p1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&distance_Float32x4)->signature = "f32x4 distance(f32x4,f32x4)"_c;
    Symbol::Resolved(&distance_Float32x4)->name = "distance(f32x4,f32x4)"_c;
    Symbol::Resolved(&distance_Float32x4)->nameWithVarNames = "distance(p0 : f32x4, p1 : f32x4)"_c;
    Symbol::Resolved(&distance_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// distance with Float16x2, Float16x2
    distance_Float16x2_p0.name = "p0"_c;
    distance_Float16x2_p0.type = Type::FullType{ Float16x2Type.name };
    distance_Float16x2_p1.name = "p1"_c;
    distance_Float16x2_p1.type = Type::FullType{ Float16x2Type.name };
    distance_Float16x2.documentation = "Returns the distance between two points."_c;
    distance_Float16x2.name = "distance"_c;
    distance_Float16x2.backendIndex = 1603;
    distance_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    distance_Float16x2.parameters = distance_Float16x2_args;
    Symbol::Resolved(&distance_Float16x2_p0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&distance_Float16x2_p1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&distance_Float16x2)->signature = "f16x2 distance(f16x2,f16x2)"_c;
    Symbol::Resolved(&distance_Float16x2)->name = "distance(f16x2,f16x2)"_c;
    Symbol::Resolved(&distance_Float16x2)->nameWithVarNames = "distance(p0 : f16x2, p1 : f16x2)"_c;
    Symbol::Resolved(&distance_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// distance with Float16x3, Float16x3
    distance_Float16x3_p0.name = "p0"_c;
    distance_Float16x3_p0.type = Type::FullType{ Float16x3Type.name };
    distance_Float16x3_p1.name = "p1"_c;
    distance_Float16x3_p1.type = Type::FullType{ Float16x3Type.name };
    distance_Float16x3.documentation = "Returns the distance between two points."_c;
    distance_Float16x3.name = "distance"_c;
    distance_Float16x3.backendIndex = 1604;
    distance_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    distance_Float16x3.parameters = distance_Float16x3_args;
    Symbol::Resolved(&distance_Float16x3_p0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&distance_Float16x3_p1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&distance_Float16x3)->signature = "f16x3 distance(f16x3,f16x3)"_c;
    Symbol::Resolved(&distance_Float16x3)->name = "distance(f16x3,f16x3)"_c;
    Symbol::Resolved(&distance_Float16x3)->nameWithVarNames = "distance(p0 : f16x3, p1 : f16x3)"_c;
    Symbol::Resolved(&distance_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// distance with Float16x4, Float16x4
    distance_Float16x4_p0.name = "p0"_c;
    distance_Float16x4_p0.type = Type::FullType{ Float16x4Type.name };
    distance_Float16x4_p1.name = "p1"_c;
    distance_Float16x4_p1.type = Type::FullType{ Float16x4Type.name };
    distance_Float16x4.documentation = "Returns the distance between two points."_c;
    distance_Float16x4.name = "distance"_c;
    distance_Float16x4.backendIndex = 1605;
    distance_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    distance_Float16x4.parameters = distance_Float16x4_args;
    Symbol::Resolved(&distance_Float16x4_p0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&distance_Float16x4_p1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&distance_Float16x4)->signature = "f16x4 distance(f16x4,f16x4)"_c;
    Symbol::Resolved(&distance_Float16x4)->name = "distance(f16x4,f16x4)"_c;
    Symbol::Resolved(&distance_Float16x4)->nameWithVarNames = "distance(p0 : f16x4, p1 : f16x4)"_c;
    Symbol::Resolved(&distance_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// min with Float32, Float32
    min_Float32_x.name = "x"_c;
    min_Float32_x.type = Type::FullType{ Float32Type.name };
    min_Float32_y.name = "y"_c;
    min_Float32_y.type = Type::FullType{ Float32Type.name };
    min_Float32.documentation = "Returns the minimum of x and y."_c;
    min_Float32.name = "min"_c;
    min_Float32.backendIndex = 1606;
    min_Float32.returnType = Type::FullType { Float32Type.name };
    min_Float32.parameters = min_Float32_args;
    Symbol::Resolved(&min_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&min_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&min_Float32)->signature = "f32 min(f32,f32)"_c;
    Symbol::Resolved(&min_Float32)->name = "min(f32,f32)"_c;
    Symbol::Resolved(&min_Float32)->nameWithVarNames = "min(x : f32, y : f32)"_c;
    Symbol::Resolved(&min_Float32)->returnTypeSymbol = &Float32Type;

    /// min with Float32x2, Float32x2
    min_Float32x2_x.name = "x"_c;
    min_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    min_Float32x2_y.name = "y"_c;
    min_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    min_Float32x2.documentation = "Returns the minimum of x and y."_c;
    min_Float32x2.name = "min"_c;
    min_Float32x2.backendIndex = 1607;
    min_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    min_Float32x2.parameters = min_Float32x2_args;
    Symbol::Resolved(&min_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&min_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&min_Float32x2)->signature = "f32x2 min(f32x2,f32x2)"_c;
    Symbol::Resolved(&min_Float32x2)->name = "min(f32x2,f32x2)"_c;
    Symbol::Resolved(&min_Float32x2)->nameWithVarNames = "min(x : f32x2, y : f32x2)"_c;
    Symbol::Resolved(&min_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// min with Float32x3, Float32x3
    min_Float32x3_x.name = "x"_c;
    min_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    min_Float32x3_y.name = "y"_c;
    min_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    min_Float32x3.documentation = "Returns the minimum of x and y."_c;
    min_Float32x3.name = "min"_c;
    min_Float32x3.backendIndex = 1608;
    min_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    min_Float32x3.parameters = min_Float32x3_args;
    Symbol::Resolved(&min_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&min_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&min_Float32x3)->signature = "f32x3 min(f32x3,f32x3)"_c;
    Symbol::Resolved(&min_Float32x3)->name = "min(f32x3,f32x3)"_c;
    Symbol::Resolved(&min_Float32x3)->nameWithVarNames = "min(x : f32x3, y : f32x3)"_c;
    Symbol::Resolved(&min_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// min with Float32x4, Float32x4
    min_Float32x4_x.name = "x"_c;
    min_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    min_Float32x4_y.name = "y"_c;
    min_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    min_Float32x4.documentation = "Returns the minimum of x and y."_c;
    min_Float32x4.name = "min"_c;
    min_Float32x4.backendIndex = 1609;
    min_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    min_Float32x4.parameters = min_Float32x4_args;
    Symbol::Resolved(&min_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&min_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&min_Float32x4)->signature = "f32x4 min(f32x4,f32x4)"_c;
    Symbol::Resolved(&min_Float32x4)->name = "min(f32x4,f32x4)"_c;
    Symbol::Resolved(&min_Float32x4)->nameWithVarNames = "min(x : f32x4, y : f32x4)"_c;
    Symbol::Resolved(&min_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// min with Float16, Float16
    min_Float16_x.name = "x"_c;
    min_Float16_x.type = Type::FullType{ Float16Type.name };
    min_Float16_y.name = "y"_c;
    min_Float16_y.type = Type::FullType{ Float16Type.name };
    min_Float16.documentation = "Returns the minimum of x and y."_c;
    min_Float16.name = "min"_c;
    min_Float16.backendIndex = 1610;
    min_Float16.returnType = Type::FullType { Float16Type.name };
    min_Float16.parameters = min_Float16_args;
    Symbol::Resolved(&min_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&min_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&min_Float16)->signature = "f16 min(f16,f16)"_c;
    Symbol::Resolved(&min_Float16)->name = "min(f16,f16)"_c;
    Symbol::Resolved(&min_Float16)->nameWithVarNames = "min(x : f16, y : f16)"_c;
    Symbol::Resolved(&min_Float16)->returnTypeSymbol = &Float16Type;

    /// min with Float16x2, Float16x2
    min_Float16x2_x.name = "x"_c;
    min_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    min_Float16x2_y.name = "y"_c;
    min_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    min_Float16x2.documentation = "Returns the minimum of x and y."_c;
    min_Float16x2.name = "min"_c;
    min_Float16x2.backendIndex = 1611;
    min_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    min_Float16x2.parameters = min_Float16x2_args;
    Symbol::Resolved(&min_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&min_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&min_Float16x2)->signature = "f16x2 min(f16x2,f16x2)"_c;
    Symbol::Resolved(&min_Float16x2)->name = "min(f16x2,f16x2)"_c;
    Symbol::Resolved(&min_Float16x2)->nameWithVarNames = "min(x : f16x2, y : f16x2)"_c;
    Symbol::Resolved(&min_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// min with Float16x3, Float16x3
    min_Float16x3_x.name = "x"_c;
    min_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    min_Float16x3_y.name = "y"_c;
    min_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    min_Float16x3.documentation = "Returns the minimum of x and y."_c;
    min_Float16x3.name = "min"_c;
    min_Float16x3.backendIndex = 1612;
    min_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    min_Float16x3.parameters = min_Float16x3_args;
    Symbol::Resolved(&min_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&min_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&min_Float16x3)->signature = "f16x3 min(f16x3,f16x3)"_c;
    Symbol::Resolved(&min_Float16x3)->name = "min(f16x3,f16x3)"_c;
    Symbol::Resolved(&min_Float16x3)->nameWithVarNames = "min(x : f16x3, y : f16x3)"_c;
    Symbol::Resolved(&min_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// min with Float16x4, Float16x4
    min_Float16x4_x.name = "x"_c;
    min_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    min_Float16x4_y.name = "y"_c;
    min_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    min_Float16x4.documentation = "Returns the minimum of x and y."_c;
    min_Float16x4.name = "min"_c;
    min_Float16x4.backendIndex = 1613;
    min_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    min_Float16x4.parameters = min_Float16x4_args;
    Symbol::Resolved(&min_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&min_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&min_Float16x4)->signature = "f16x4 min(f16x4,f16x4)"_c;
    Symbol::Resolved(&min_Float16x4)->name = "min(f16x4,f16x4)"_c;
    Symbol::Resolved(&min_Float16x4)->nameWithVarNames = "min(x : f16x4, y : f16x4)"_c;
    Symbol::Resolved(&min_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// min with Int32, Int32
    min_Int32_x.name = "x"_c;
    min_Int32_x.type = Type::FullType{ Int32Type.name };
    min_Int32_y.name = "y"_c;
    min_Int32_y.type = Type::FullType{ Int32Type.name };
    min_Int32.documentation = "Returns the minimum of x and y."_c;
    min_Int32.name = "min"_c;
    min_Int32.backendIndex = 1614;
    min_Int32.returnType = Type::FullType { Int32Type.name };
    min_Int32.parameters = min_Int32_args;
    Symbol::Resolved(&min_Int32_x)->typeSymbol = &Int32Type;
    Symbol::Resolved(&min_Int32_y)->typeSymbol = &Int32Type;
    Symbol::Resolved(&min_Int32)->signature = "i32 min(i32,i32)"_c;
    Symbol::Resolved(&min_Int32)->name = "min(i32,i32)"_c;
    Symbol::Resolved(&min_Int32)->nameWithVarNames = "min(x : i32, y : i32)"_c;
    Symbol::Resolved(&min_Int32)->returnTypeSymbol = &Int32Type;

    /// min with Int32x2, Int32x2
    min_Int32x2_x.name = "x"_c;
    min_Int32x2_x.type = Type::FullType{ Int32x2Type.name };
    min_Int32x2_y.name = "y"_c;
    min_Int32x2_y.type = Type::FullType{ Int32x2Type.name };
    min_Int32x2.documentation = "Returns the minimum of x and y."_c;
    min_Int32x2.name = "min"_c;
    min_Int32x2.backendIndex = 1615;
    min_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    min_Int32x2.parameters = min_Int32x2_args;
    Symbol::Resolved(&min_Int32x2_x)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&min_Int32x2_y)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&min_Int32x2)->signature = "i32x2 min(i32x2,i32x2)"_c;
    Symbol::Resolved(&min_Int32x2)->name = "min(i32x2,i32x2)"_c;
    Symbol::Resolved(&min_Int32x2)->nameWithVarNames = "min(x : i32x2, y : i32x2)"_c;
    Symbol::Resolved(&min_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// min with Int32x3, Int32x3
    min_Int32x3_x.name = "x"_c;
    min_Int32x3_x.type = Type::FullType{ Int32x3Type.name };
    min_Int32x3_y.name = "y"_c;
    min_Int32x3_y.type = Type::FullType{ Int32x3Type.name };
    min_Int32x3.documentation = "Returns the minimum of x and y."_c;
    min_Int32x3.name = "min"_c;
    min_Int32x3.backendIndex = 1616;
    min_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    min_Int32x3.parameters = min_Int32x3_args;
    Symbol::Resolved(&min_Int32x3_x)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&min_Int32x3_y)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&min_Int32x3)->signature = "i32x3 min(i32x3,i32x3)"_c;
    Symbol::Resolved(&min_Int32x3)->name = "min(i32x3,i32x3)"_c;
    Symbol::Resolved(&min_Int32x3)->nameWithVarNames = "min(x : i32x3, y : i32x3)"_c;
    Symbol::Resolved(&min_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// min with Int32x4, Int32x4
    min_Int32x4_x.name = "x"_c;
    min_Int32x4_x.type = Type::FullType{ Int32x4Type.name };
    min_Int32x4_y.name = "y"_c;
    min_Int32x4_y.type = Type::FullType{ Int32x4Type.name };
    min_Int32x4.documentation = "Returns the minimum of x and y."_c;
    min_Int32x4.name = "min"_c;
    min_Int32x4.backendIndex = 1617;
    min_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    min_Int32x4.parameters = min_Int32x4_args;
    Symbol::Resolved(&min_Int32x4_x)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&min_Int32x4_y)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&min_Int32x4)->signature = "i32x4 min(i32x4,i32x4)"_c;
    Symbol::Resolved(&min_Int32x4)->name = "min(i32x4,i32x4)"_c;
    Symbol::Resolved(&min_Int32x4)->nameWithVarNames = "min(x : i32x4, y : i32x4)"_c;
    Symbol::Resolved(&min_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// min with Int16, Int16
    min_Int16_x.name = "x"_c;
    min_Int16_x.type = Type::FullType{ Int16Type.name };
    min_Int16_y.name = "y"_c;
    min_Int16_y.type = Type::FullType{ Int16Type.name };
    min_Int16.documentation = "Returns the minimum of x and y."_c;
    min_Int16.name = "min"_c;
    min_Int16.backendIndex = 1618;
    min_Int16.returnType = Type::FullType { Int16Type.name };
    min_Int16.parameters = min_Int16_args;
    Symbol::Resolved(&min_Int16_x)->typeSymbol = &Int16Type;
    Symbol::Resolved(&min_Int16_y)->typeSymbol = &Int16Type;
    Symbol::Resolved(&min_Int16)->signature = "i16 min(i16,i16)"_c;
    Symbol::Resolved(&min_Int16)->name = "min(i16,i16)"_c;
    Symbol::Resolved(&min_Int16)->nameWithVarNames = "min(x : i16, y : i16)"_c;
    Symbol::Resolved(&min_Int16)->returnTypeSymbol = &Int16Type;

    /// min with Int16x2, Int16x2
    min_Int16x2_x.name = "x"_c;
    min_Int16x2_x.type = Type::FullType{ Int16x2Type.name };
    min_Int16x2_y.name = "y"_c;
    min_Int16x2_y.type = Type::FullType{ Int16x2Type.name };
    min_Int16x2.documentation = "Returns the minimum of x and y."_c;
    min_Int16x2.name = "min"_c;
    min_Int16x2.backendIndex = 1619;
    min_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    min_Int16x2.parameters = min_Int16x2_args;
    Symbol::Resolved(&min_Int16x2_x)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&min_Int16x2_y)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&min_Int16x2)->signature = "i16x2 min(i16x2,i16x2)"_c;
    Symbol::Resolved(&min_Int16x2)->name = "min(i16x2,i16x2)"_c;
    Symbol::Resolved(&min_Int16x2)->nameWithVarNames = "min(x : i16x2, y : i16x2)"_c;
    Symbol::Resolved(&min_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// min with Int16x3, Int16x3
    min_Int16x3_x.name = "x"_c;
    min_Int16x3_x.type = Type::FullType{ Int16x3Type.name };
    min_Int16x3_y.name = "y"_c;
    min_Int16x3_y.type = Type::FullType{ Int16x3Type.name };
    min_Int16x3.documentation = "Returns the minimum of x and y."_c;
    min_Int16x3.name = "min"_c;
    min_Int16x3.backendIndex = 1620;
    min_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    min_Int16x3.parameters = min_Int16x3_args;
    Symbol::Resolved(&min_Int16x3_x)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&min_Int16x3_y)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&min_Int16x3)->signature = "i16x3 min(i16x3,i16x3)"_c;
    Symbol::Resolved(&min_Int16x3)->name = "min(i16x3,i16x3)"_c;
    Symbol::Resolved(&min_Int16x3)->nameWithVarNames = "min(x : i16x3, y : i16x3)"_c;
    Symbol::Resolved(&min_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// min with Int16x4, Int16x4
    min_Int16x4_x.name = "x"_c;
    min_Int16x4_x.type = Type::FullType{ Int16x4Type.name };
    min_Int16x4_y.name = "y"_c;
    min_Int16x4_y.type = Type::FullType{ Int16x4Type.name };
    min_Int16x4.documentation = "Returns the minimum of x and y."_c;
    min_Int16x4.name = "min"_c;
    min_Int16x4.backendIndex = 1621;
    min_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    min_Int16x4.parameters = min_Int16x4_args;
    Symbol::Resolved(&min_Int16x4_x)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&min_Int16x4_y)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&min_Int16x4)->signature = "i16x4 min(i16x4,i16x4)"_c;
    Symbol::Resolved(&min_Int16x4)->name = "min(i16x4,i16x4)"_c;
    Symbol::Resolved(&min_Int16x4)->nameWithVarNames = "min(x : i16x4, y : i16x4)"_c;
    Symbol::Resolved(&min_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// min with UInt32, UInt32
    min_UInt32_x.name = "x"_c;
    min_UInt32_x.type = Type::FullType{ UInt32Type.name };
    min_UInt32_y.name = "y"_c;
    min_UInt32_y.type = Type::FullType{ UInt32Type.name };
    min_UInt32.documentation = "Returns the minimum of x and y."_c;
    min_UInt32.name = "min"_c;
    min_UInt32.backendIndex = 1622;
    min_UInt32.returnType = Type::FullType { UInt32Type.name };
    min_UInt32.parameters = min_UInt32_args;
    Symbol::Resolved(&min_UInt32_x)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&min_UInt32_y)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&min_UInt32)->signature = "u32 min(u32,u32)"_c;
    Symbol::Resolved(&min_UInt32)->name = "min(u32,u32)"_c;
    Symbol::Resolved(&min_UInt32)->nameWithVarNames = "min(x : u32, y : u32)"_c;
    Symbol::Resolved(&min_UInt32)->returnTypeSymbol = &UInt32Type;

    /// min with UInt32x2, UInt32x2
    min_UInt32x2_x.name = "x"_c;
    min_UInt32x2_x.type = Type::FullType{ UInt32x2Type.name };
    min_UInt32x2_y.name = "y"_c;
    min_UInt32x2_y.type = Type::FullType{ UInt32x2Type.name };
    min_UInt32x2.documentation = "Returns the minimum of x and y."_c;
    min_UInt32x2.name = "min"_c;
    min_UInt32x2.backendIndex = 1623;
    min_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    min_UInt32x2.parameters = min_UInt32x2_args;
    Symbol::Resolved(&min_UInt32x2_x)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&min_UInt32x2_y)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&min_UInt32x2)->signature = "u32x2 min(u32x2,u32x2)"_c;
    Symbol::Resolved(&min_UInt32x2)->name = "min(u32x2,u32x2)"_c;
    Symbol::Resolved(&min_UInt32x2)->nameWithVarNames = "min(x : u32x2, y : u32x2)"_c;
    Symbol::Resolved(&min_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// min with UInt32x3, UInt32x3
    min_UInt32x3_x.name = "x"_c;
    min_UInt32x3_x.type = Type::FullType{ UInt32x3Type.name };
    min_UInt32x3_y.name = "y"_c;
    min_UInt32x3_y.type = Type::FullType{ UInt32x3Type.name };
    min_UInt32x3.documentation = "Returns the minimum of x and y."_c;
    min_UInt32x3.name = "min"_c;
    min_UInt32x3.backendIndex = 1624;
    min_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    min_UInt32x3.parameters = min_UInt32x3_args;
    Symbol::Resolved(&min_UInt32x3_x)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&min_UInt32x3_y)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&min_UInt32x3)->signature = "u32x3 min(u32x3,u32x3)"_c;
    Symbol::Resolved(&min_UInt32x3)->name = "min(u32x3,u32x3)"_c;
    Symbol::Resolved(&min_UInt32x3)->nameWithVarNames = "min(x : u32x3, y : u32x3)"_c;
    Symbol::Resolved(&min_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// min with UInt32x4, UInt32x4
    min_UInt32x4_x.name = "x"_c;
    min_UInt32x4_x.type = Type::FullType{ UInt32x4Type.name };
    min_UInt32x4_y.name = "y"_c;
    min_UInt32x4_y.type = Type::FullType{ UInt32x4Type.name };
    min_UInt32x4.documentation = "Returns the minimum of x and y."_c;
    min_UInt32x4.name = "min"_c;
    min_UInt32x4.backendIndex = 1625;
    min_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    min_UInt32x4.parameters = min_UInt32x4_args;
    Symbol::Resolved(&min_UInt32x4_x)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&min_UInt32x4_y)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&min_UInt32x4)->signature = "u32x4 min(u32x4,u32x4)"_c;
    Symbol::Resolved(&min_UInt32x4)->name = "min(u32x4,u32x4)"_c;
    Symbol::Resolved(&min_UInt32x4)->nameWithVarNames = "min(x : u32x4, y : u32x4)"_c;
    Symbol::Resolved(&min_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// min with UInt16, UInt16
    min_UInt16_x.name = "x"_c;
    min_UInt16_x.type = Type::FullType{ UInt16Type.name };
    min_UInt16_y.name = "y"_c;
    min_UInt16_y.type = Type::FullType{ UInt16Type.name };
    min_UInt16.documentation = "Returns the minimum of x and y."_c;
    min_UInt16.name = "min"_c;
    min_UInt16.backendIndex = 1626;
    min_UInt16.returnType = Type::FullType { UInt16Type.name };
    min_UInt16.parameters = min_UInt16_args;
    Symbol::Resolved(&min_UInt16_x)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&min_UInt16_y)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&min_UInt16)->signature = "u16 min(u16,u16)"_c;
    Symbol::Resolved(&min_UInt16)->name = "min(u16,u16)"_c;
    Symbol::Resolved(&min_UInt16)->nameWithVarNames = "min(x : u16, y : u16)"_c;
    Symbol::Resolved(&min_UInt16)->returnTypeSymbol = &UInt16Type;

    /// min with UInt16x2, UInt16x2
    min_UInt16x2_x.name = "x"_c;
    min_UInt16x2_x.type = Type::FullType{ UInt16x2Type.name };
    min_UInt16x2_y.name = "y"_c;
    min_UInt16x2_y.type = Type::FullType{ UInt16x2Type.name };
    min_UInt16x2.documentation = "Returns the minimum of x and y."_c;
    min_UInt16x2.name = "min"_c;
    min_UInt16x2.backendIndex = 1627;
    min_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    min_UInt16x2.parameters = min_UInt16x2_args;
    Symbol::Resolved(&min_UInt16x2_x)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&min_UInt16x2_y)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&min_UInt16x2)->signature = "u16x2 min(u16x2,u16x2)"_c;
    Symbol::Resolved(&min_UInt16x2)->name = "min(u16x2,u16x2)"_c;
    Symbol::Resolved(&min_UInt16x2)->nameWithVarNames = "min(x : u16x2, y : u16x2)"_c;
    Symbol::Resolved(&min_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// min with UInt16x3, UInt16x3
    min_UInt16x3_x.name = "x"_c;
    min_UInt16x3_x.type = Type::FullType{ UInt16x3Type.name };
    min_UInt16x3_y.name = "y"_c;
    min_UInt16x3_y.type = Type::FullType{ UInt16x3Type.name };
    min_UInt16x3.documentation = "Returns the minimum of x and y."_c;
    min_UInt16x3.name = "min"_c;
    min_UInt16x3.backendIndex = 1628;
    min_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    min_UInt16x3.parameters = min_UInt16x3_args;
    Symbol::Resolved(&min_UInt16x3_x)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&min_UInt16x3_y)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&min_UInt16x3)->signature = "u16x3 min(u16x3,u16x3)"_c;
    Symbol::Resolved(&min_UInt16x3)->name = "min(u16x3,u16x3)"_c;
    Symbol::Resolved(&min_UInt16x3)->nameWithVarNames = "min(x : u16x3, y : u16x3)"_c;
    Symbol::Resolved(&min_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// min with UInt16x4, UInt16x4
    min_UInt16x4_x.name = "x"_c;
    min_UInt16x4_x.type = Type::FullType{ UInt16x4Type.name };
    min_UInt16x4_y.name = "y"_c;
    min_UInt16x4_y.type = Type::FullType{ UInt16x4Type.name };
    min_UInt16x4.documentation = "Returns the minimum of x and y."_c;
    min_UInt16x4.name = "min"_c;
    min_UInt16x4.backendIndex = 1629;
    min_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    min_UInt16x4.parameters = min_UInt16x4_args;
    Symbol::Resolved(&min_UInt16x4_x)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&min_UInt16x4_y)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&min_UInt16x4)->signature = "u16x4 min(u16x4,u16x4)"_c;
    Symbol::Resolved(&min_UInt16x4)->name = "min(u16x4,u16x4)"_c;
    Symbol::Resolved(&min_UInt16x4)->nameWithVarNames = "min(x : u16x4, y : u16x4)"_c;
    Symbol::Resolved(&min_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// max with Float32, Float32
    max_Float32_x.name = "x"_c;
    max_Float32_x.type = Type::FullType{ Float32Type.name };
    max_Float32_y.name = "y"_c;
    max_Float32_y.type = Type::FullType{ Float32Type.name };
    max_Float32.documentation = "Returns the maximum of x and y."_c;
    max_Float32.name = "max"_c;
    max_Float32.backendIndex = 1630;
    max_Float32.returnType = Type::FullType { Float32Type.name };
    max_Float32.parameters = max_Float32_args;
    Symbol::Resolved(&max_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&max_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&max_Float32)->signature = "f32 max(f32,f32)"_c;
    Symbol::Resolved(&max_Float32)->name = "max(f32,f32)"_c;
    Symbol::Resolved(&max_Float32)->nameWithVarNames = "max(x : f32, y : f32)"_c;
    Symbol::Resolved(&max_Float32)->returnTypeSymbol = &Float32Type;

    /// max with Float32x2, Float32x2
    max_Float32x2_x.name = "x"_c;
    max_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    max_Float32x2_y.name = "y"_c;
    max_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    max_Float32x2.documentation = "Returns the maximum of x and y."_c;
    max_Float32x2.name = "max"_c;
    max_Float32x2.backendIndex = 1631;
    max_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    max_Float32x2.parameters = max_Float32x2_args;
    Symbol::Resolved(&max_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&max_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&max_Float32x2)->signature = "f32x2 max(f32x2,f32x2)"_c;
    Symbol::Resolved(&max_Float32x2)->name = "max(f32x2,f32x2)"_c;
    Symbol::Resolved(&max_Float32x2)->nameWithVarNames = "max(x : f32x2, y : f32x2)"_c;
    Symbol::Resolved(&max_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// max with Float32x3, Float32x3
    max_Float32x3_x.name = "x"_c;
    max_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    max_Float32x3_y.name = "y"_c;
    max_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    max_Float32x3.documentation = "Returns the maximum of x and y."_c;
    max_Float32x3.name = "max"_c;
    max_Float32x3.backendIndex = 1632;
    max_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    max_Float32x3.parameters = max_Float32x3_args;
    Symbol::Resolved(&max_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&max_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&max_Float32x3)->signature = "f32x3 max(f32x3,f32x3)"_c;
    Symbol::Resolved(&max_Float32x3)->name = "max(f32x3,f32x3)"_c;
    Symbol::Resolved(&max_Float32x3)->nameWithVarNames = "max(x : f32x3, y : f32x3)"_c;
    Symbol::Resolved(&max_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// max with Float32x4, Float32x4
    max_Float32x4_x.name = "x"_c;
    max_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    max_Float32x4_y.name = "y"_c;
    max_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    max_Float32x4.documentation = "Returns the maximum of x and y."_c;
    max_Float32x4.name = "max"_c;
    max_Float32x4.backendIndex = 1633;
    max_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    max_Float32x4.parameters = max_Float32x4_args;
    Symbol::Resolved(&max_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&max_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&max_Float32x4)->signature = "f32x4 max(f32x4,f32x4)"_c;
    Symbol::Resolved(&max_Float32x4)->name = "max(f32x4,f32x4)"_c;
    Symbol::Resolved(&max_Float32x4)->nameWithVarNames = "max(x : f32x4, y : f32x4)"_c;
    Symbol::Resolved(&max_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// max with Float16, Float16
    max_Float16_x.name = "x"_c;
    max_Float16_x.type = Type::FullType{ Float16Type.name };
    max_Float16_y.name = "y"_c;
    max_Float16_y.type = Type::FullType{ Float16Type.name };
    max_Float16.documentation = "Returns the maximum of x and y."_c;
    max_Float16.name = "max"_c;
    max_Float16.backendIndex = 1634;
    max_Float16.returnType = Type::FullType { Float16Type.name };
    max_Float16.parameters = max_Float16_args;
    Symbol::Resolved(&max_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&max_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&max_Float16)->signature = "f16 max(f16,f16)"_c;
    Symbol::Resolved(&max_Float16)->name = "max(f16,f16)"_c;
    Symbol::Resolved(&max_Float16)->nameWithVarNames = "max(x : f16, y : f16)"_c;
    Symbol::Resolved(&max_Float16)->returnTypeSymbol = &Float16Type;

    /// max with Float16x2, Float16x2
    max_Float16x2_x.name = "x"_c;
    max_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    max_Float16x2_y.name = "y"_c;
    max_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    max_Float16x2.documentation = "Returns the maximum of x and y."_c;
    max_Float16x2.name = "max"_c;
    max_Float16x2.backendIndex = 1635;
    max_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    max_Float16x2.parameters = max_Float16x2_args;
    Symbol::Resolved(&max_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&max_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&max_Float16x2)->signature = "f16x2 max(f16x2,f16x2)"_c;
    Symbol::Resolved(&max_Float16x2)->name = "max(f16x2,f16x2)"_c;
    Symbol::Resolved(&max_Float16x2)->nameWithVarNames = "max(x : f16x2, y : f16x2)"_c;
    Symbol::Resolved(&max_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// max with Float16x3, Float16x3
    max_Float16x3_x.name = "x"_c;
    max_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    max_Float16x3_y.name = "y"_c;
    max_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    max_Float16x3.documentation = "Returns the maximum of x and y."_c;
    max_Float16x3.name = "max"_c;
    max_Float16x3.backendIndex = 1636;
    max_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    max_Float16x3.parameters = max_Float16x3_args;
    Symbol::Resolved(&max_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&max_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&max_Float16x3)->signature = "f16x3 max(f16x3,f16x3)"_c;
    Symbol::Resolved(&max_Float16x3)->name = "max(f16x3,f16x3)"_c;
    Symbol::Resolved(&max_Float16x3)->nameWithVarNames = "max(x : f16x3, y : f16x3)"_c;
    Symbol::Resolved(&max_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// max with Float16x4, Float16x4
    max_Float16x4_x.name = "x"_c;
    max_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    max_Float16x4_y.name = "y"_c;
    max_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    max_Float16x4.documentation = "Returns the maximum of x and y."_c;
    max_Float16x4.name = "max"_c;
    max_Float16x4.backendIndex = 1637;
    max_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    max_Float16x4.parameters = max_Float16x4_args;
    Symbol::Resolved(&max_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&max_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&max_Float16x4)->signature = "f16x4 max(f16x4,f16x4)"_c;
    Symbol::Resolved(&max_Float16x4)->name = "max(f16x4,f16x4)"_c;
    Symbol::Resolved(&max_Float16x4)->nameWithVarNames = "max(x : f16x4, y : f16x4)"_c;
    Symbol::Resolved(&max_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// max with Int32, Int32
    max_Int32_x.name = "x"_c;
    max_Int32_x.type = Type::FullType{ Int32Type.name };
    max_Int32_y.name = "y"_c;
    max_Int32_y.type = Type::FullType{ Int32Type.name };
    max_Int32.documentation = "Returns the maximum of x and y."_c;
    max_Int32.name = "max"_c;
    max_Int32.backendIndex = 1638;
    max_Int32.returnType = Type::FullType { Int32Type.name };
    max_Int32.parameters = max_Int32_args;
    Symbol::Resolved(&max_Int32_x)->typeSymbol = &Int32Type;
    Symbol::Resolved(&max_Int32_y)->typeSymbol = &Int32Type;
    Symbol::Resolved(&max_Int32)->signature = "i32 max(i32,i32)"_c;
    Symbol::Resolved(&max_Int32)->name = "max(i32,i32)"_c;
    Symbol::Resolved(&max_Int32)->nameWithVarNames = "max(x : i32, y : i32)"_c;
    Symbol::Resolved(&max_Int32)->returnTypeSymbol = &Int32Type;

    /// max with Int32x2, Int32x2
    max_Int32x2_x.name = "x"_c;
    max_Int32x2_x.type = Type::FullType{ Int32x2Type.name };
    max_Int32x2_y.name = "y"_c;
    max_Int32x2_y.type = Type::FullType{ Int32x2Type.name };
    max_Int32x2.documentation = "Returns the maximum of x and y."_c;
    max_Int32x2.name = "max"_c;
    max_Int32x2.backendIndex = 1639;
    max_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    max_Int32x2.parameters = max_Int32x2_args;
    Symbol::Resolved(&max_Int32x2_x)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&max_Int32x2_y)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&max_Int32x2)->signature = "i32x2 max(i32x2,i32x2)"_c;
    Symbol::Resolved(&max_Int32x2)->name = "max(i32x2,i32x2)"_c;
    Symbol::Resolved(&max_Int32x2)->nameWithVarNames = "max(x : i32x2, y : i32x2)"_c;
    Symbol::Resolved(&max_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// max with Int32x3, Int32x3
    max_Int32x3_x.name = "x"_c;
    max_Int32x3_x.type = Type::FullType{ Int32x3Type.name };
    max_Int32x3_y.name = "y"_c;
    max_Int32x3_y.type = Type::FullType{ Int32x3Type.name };
    max_Int32x3.documentation = "Returns the maximum of x and y."_c;
    max_Int32x3.name = "max"_c;
    max_Int32x3.backendIndex = 1640;
    max_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    max_Int32x3.parameters = max_Int32x3_args;
    Symbol::Resolved(&max_Int32x3_x)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&max_Int32x3_y)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&max_Int32x3)->signature = "i32x3 max(i32x3,i32x3)"_c;
    Symbol::Resolved(&max_Int32x3)->name = "max(i32x3,i32x3)"_c;
    Symbol::Resolved(&max_Int32x3)->nameWithVarNames = "max(x : i32x3, y : i32x3)"_c;
    Symbol::Resolved(&max_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// max with Int32x4, Int32x4
    max_Int32x4_x.name = "x"_c;
    max_Int32x4_x.type = Type::FullType{ Int32x4Type.name };
    max_Int32x4_y.name = "y"_c;
    max_Int32x4_y.type = Type::FullType{ Int32x4Type.name };
    max_Int32x4.documentation = "Returns the maximum of x and y."_c;
    max_Int32x4.name = "max"_c;
    max_Int32x4.backendIndex = 1641;
    max_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    max_Int32x4.parameters = max_Int32x4_args;
    Symbol::Resolved(&max_Int32x4_x)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&max_Int32x4_y)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&max_Int32x4)->signature = "i32x4 max(i32x4,i32x4)"_c;
    Symbol::Resolved(&max_Int32x4)->name = "max(i32x4,i32x4)"_c;
    Symbol::Resolved(&max_Int32x4)->nameWithVarNames = "max(x : i32x4, y : i32x4)"_c;
    Symbol::Resolved(&max_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// max with Int16, Int16
    max_Int16_x.name = "x"_c;
    max_Int16_x.type = Type::FullType{ Int16Type.name };
    max_Int16_y.name = "y"_c;
    max_Int16_y.type = Type::FullType{ Int16Type.name };
    max_Int16.documentation = "Returns the maximum of x and y."_c;
    max_Int16.name = "max"_c;
    max_Int16.backendIndex = 1642;
    max_Int16.returnType = Type::FullType { Int16Type.name };
    max_Int16.parameters = max_Int16_args;
    Symbol::Resolved(&max_Int16_x)->typeSymbol = &Int16Type;
    Symbol::Resolved(&max_Int16_y)->typeSymbol = &Int16Type;
    Symbol::Resolved(&max_Int16)->signature = "i16 max(i16,i16)"_c;
    Symbol::Resolved(&max_Int16)->name = "max(i16,i16)"_c;
    Symbol::Resolved(&max_Int16)->nameWithVarNames = "max(x : i16, y : i16)"_c;
    Symbol::Resolved(&max_Int16)->returnTypeSymbol = &Int16Type;

    /// max with Int16x2, Int16x2
    max_Int16x2_x.name = "x"_c;
    max_Int16x2_x.type = Type::FullType{ Int16x2Type.name };
    max_Int16x2_y.name = "y"_c;
    max_Int16x2_y.type = Type::FullType{ Int16x2Type.name };
    max_Int16x2.documentation = "Returns the maximum of x and y."_c;
    max_Int16x2.name = "max"_c;
    max_Int16x2.backendIndex = 1643;
    max_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    max_Int16x2.parameters = max_Int16x2_args;
    Symbol::Resolved(&max_Int16x2_x)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&max_Int16x2_y)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&max_Int16x2)->signature = "i16x2 max(i16x2,i16x2)"_c;
    Symbol::Resolved(&max_Int16x2)->name = "max(i16x2,i16x2)"_c;
    Symbol::Resolved(&max_Int16x2)->nameWithVarNames = "max(x : i16x2, y : i16x2)"_c;
    Symbol::Resolved(&max_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// max with Int16x3, Int16x3
    max_Int16x3_x.name = "x"_c;
    max_Int16x3_x.type = Type::FullType{ Int16x3Type.name };
    max_Int16x3_y.name = "y"_c;
    max_Int16x3_y.type = Type::FullType{ Int16x3Type.name };
    max_Int16x3.documentation = "Returns the maximum of x and y."_c;
    max_Int16x3.name = "max"_c;
    max_Int16x3.backendIndex = 1644;
    max_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    max_Int16x3.parameters = max_Int16x3_args;
    Symbol::Resolved(&max_Int16x3_x)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&max_Int16x3_y)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&max_Int16x3)->signature = "i16x3 max(i16x3,i16x3)"_c;
    Symbol::Resolved(&max_Int16x3)->name = "max(i16x3,i16x3)"_c;
    Symbol::Resolved(&max_Int16x3)->nameWithVarNames = "max(x : i16x3, y : i16x3)"_c;
    Symbol::Resolved(&max_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// max with Int16x4, Int16x4
    max_Int16x4_x.name = "x"_c;
    max_Int16x4_x.type = Type::FullType{ Int16x4Type.name };
    max_Int16x4_y.name = "y"_c;
    max_Int16x4_y.type = Type::FullType{ Int16x4Type.name };
    max_Int16x4.documentation = "Returns the maximum of x and y."_c;
    max_Int16x4.name = "max"_c;
    max_Int16x4.backendIndex = 1645;
    max_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    max_Int16x4.parameters = max_Int16x4_args;
    Symbol::Resolved(&max_Int16x4_x)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&max_Int16x4_y)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&max_Int16x4)->signature = "i16x4 max(i16x4,i16x4)"_c;
    Symbol::Resolved(&max_Int16x4)->name = "max(i16x4,i16x4)"_c;
    Symbol::Resolved(&max_Int16x4)->nameWithVarNames = "max(x : i16x4, y : i16x4)"_c;
    Symbol::Resolved(&max_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// max with UInt32, UInt32
    max_UInt32_x.name = "x"_c;
    max_UInt32_x.type = Type::FullType{ UInt32Type.name };
    max_UInt32_y.name = "y"_c;
    max_UInt32_y.type = Type::FullType{ UInt32Type.name };
    max_UInt32.documentation = "Returns the maximum of x and y."_c;
    max_UInt32.name = "max"_c;
    max_UInt32.backendIndex = 1646;
    max_UInt32.returnType = Type::FullType { UInt32Type.name };
    max_UInt32.parameters = max_UInt32_args;
    Symbol::Resolved(&max_UInt32_x)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&max_UInt32_y)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&max_UInt32)->signature = "u32 max(u32,u32)"_c;
    Symbol::Resolved(&max_UInt32)->name = "max(u32,u32)"_c;
    Symbol::Resolved(&max_UInt32)->nameWithVarNames = "max(x : u32, y : u32)"_c;
    Symbol::Resolved(&max_UInt32)->returnTypeSymbol = &UInt32Type;

    /// max with UInt32x2, UInt32x2
    max_UInt32x2_x.name = "x"_c;
    max_UInt32x2_x.type = Type::FullType{ UInt32x2Type.name };
    max_UInt32x2_y.name = "y"_c;
    max_UInt32x2_y.type = Type::FullType{ UInt32x2Type.name };
    max_UInt32x2.documentation = "Returns the maximum of x and y."_c;
    max_UInt32x2.name = "max"_c;
    max_UInt32x2.backendIndex = 1647;
    max_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    max_UInt32x2.parameters = max_UInt32x2_args;
    Symbol::Resolved(&max_UInt32x2_x)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&max_UInt32x2_y)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&max_UInt32x2)->signature = "u32x2 max(u32x2,u32x2)"_c;
    Symbol::Resolved(&max_UInt32x2)->name = "max(u32x2,u32x2)"_c;
    Symbol::Resolved(&max_UInt32x2)->nameWithVarNames = "max(x : u32x2, y : u32x2)"_c;
    Symbol::Resolved(&max_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// max with UInt32x3, UInt32x3
    max_UInt32x3_x.name = "x"_c;
    max_UInt32x3_x.type = Type::FullType{ UInt32x3Type.name };
    max_UInt32x3_y.name = "y"_c;
    max_UInt32x3_y.type = Type::FullType{ UInt32x3Type.name };
    max_UInt32x3.documentation = "Returns the maximum of x and y."_c;
    max_UInt32x3.name = "max"_c;
    max_UInt32x3.backendIndex = 1648;
    max_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    max_UInt32x3.parameters = max_UInt32x3_args;
    Symbol::Resolved(&max_UInt32x3_x)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&max_UInt32x3_y)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&max_UInt32x3)->signature = "u32x3 max(u32x3,u32x3)"_c;
    Symbol::Resolved(&max_UInt32x3)->name = "max(u32x3,u32x3)"_c;
    Symbol::Resolved(&max_UInt32x3)->nameWithVarNames = "max(x : u32x3, y : u32x3)"_c;
    Symbol::Resolved(&max_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// max with UInt32x4, UInt32x4
    max_UInt32x4_x.name = "x"_c;
    max_UInt32x4_x.type = Type::FullType{ UInt32x4Type.name };
    max_UInt32x4_y.name = "y"_c;
    max_UInt32x4_y.type = Type::FullType{ UInt32x4Type.name };
    max_UInt32x4.documentation = "Returns the maximum of x and y."_c;
    max_UInt32x4.name = "max"_c;
    max_UInt32x4.backendIndex = 1649;
    max_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    max_UInt32x4.parameters = max_UInt32x4_args;
    Symbol::Resolved(&max_UInt32x4_x)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&max_UInt32x4_y)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&max_UInt32x4)->signature = "u32x4 max(u32x4,u32x4)"_c;
    Symbol::Resolved(&max_UInt32x4)->name = "max(u32x4,u32x4)"_c;
    Symbol::Resolved(&max_UInt32x4)->nameWithVarNames = "max(x : u32x4, y : u32x4)"_c;
    Symbol::Resolved(&max_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// max with UInt16, UInt16
    max_UInt16_x.name = "x"_c;
    max_UInt16_x.type = Type::FullType{ UInt16Type.name };
    max_UInt16_y.name = "y"_c;
    max_UInt16_y.type = Type::FullType{ UInt16Type.name };
    max_UInt16.documentation = "Returns the maximum of x and y."_c;
    max_UInt16.name = "max"_c;
    max_UInt16.backendIndex = 1650;
    max_UInt16.returnType = Type::FullType { UInt16Type.name };
    max_UInt16.parameters = max_UInt16_args;
    Symbol::Resolved(&max_UInt16_x)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&max_UInt16_y)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&max_UInt16)->signature = "u16 max(u16,u16)"_c;
    Symbol::Resolved(&max_UInt16)->name = "max(u16,u16)"_c;
    Symbol::Resolved(&max_UInt16)->nameWithVarNames = "max(x : u16, y : u16)"_c;
    Symbol::Resolved(&max_UInt16)->returnTypeSymbol = &UInt16Type;

    /// max with UInt16x2, UInt16x2
    max_UInt16x2_x.name = "x"_c;
    max_UInt16x2_x.type = Type::FullType{ UInt16x2Type.name };
    max_UInt16x2_y.name = "y"_c;
    max_UInt16x2_y.type = Type::FullType{ UInt16x2Type.name };
    max_UInt16x2.documentation = "Returns the maximum of x and y."_c;
    max_UInt16x2.name = "max"_c;
    max_UInt16x2.backendIndex = 1651;
    max_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    max_UInt16x2.parameters = max_UInt16x2_args;
    Symbol::Resolved(&max_UInt16x2_x)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&max_UInt16x2_y)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&max_UInt16x2)->signature = "u16x2 max(u16x2,u16x2)"_c;
    Symbol::Resolved(&max_UInt16x2)->name = "max(u16x2,u16x2)"_c;
    Symbol::Resolved(&max_UInt16x2)->nameWithVarNames = "max(x : u16x2, y : u16x2)"_c;
    Symbol::Resolved(&max_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// max with UInt16x3, UInt16x3
    max_UInt16x3_x.name = "x"_c;
    max_UInt16x3_x.type = Type::FullType{ UInt16x3Type.name };
    max_UInt16x3_y.name = "y"_c;
    max_UInt16x3_y.type = Type::FullType{ UInt16x3Type.name };
    max_UInt16x3.documentation = "Returns the maximum of x and y."_c;
    max_UInt16x3.name = "max"_c;
    max_UInt16x3.backendIndex = 1652;
    max_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    max_UInt16x3.parameters = max_UInt16x3_args;
    Symbol::Resolved(&max_UInt16x3_x)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&max_UInt16x3_y)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&max_UInt16x3)->signature = "u16x3 max(u16x3,u16x3)"_c;
    Symbol::Resolved(&max_UInt16x3)->name = "max(u16x3,u16x3)"_c;
    Symbol::Resolved(&max_UInt16x3)->nameWithVarNames = "max(x : u16x3, y : u16x3)"_c;
    Symbol::Resolved(&max_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// max with UInt16x4, UInt16x4
    max_UInt16x4_x.name = "x"_c;
    max_UInt16x4_x.type = Type::FullType{ UInt16x4Type.name };
    max_UInt16x4_y.name = "y"_c;
    max_UInt16x4_y.type = Type::FullType{ UInt16x4Type.name };
    max_UInt16x4.documentation = "Returns the maximum of x and y."_c;
    max_UInt16x4.name = "max"_c;
    max_UInt16x4.backendIndex = 1653;
    max_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    max_UInt16x4.parameters = max_UInt16x4_args;
    Symbol::Resolved(&max_UInt16x4_x)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&max_UInt16x4_y)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&max_UInt16x4)->signature = "u16x4 max(u16x4,u16x4)"_c;
    Symbol::Resolved(&max_UInt16x4)->name = "max(u16x4,u16x4)"_c;
    Symbol::Resolved(&max_UInt16x4)->nameWithVarNames = "max(x : u16x4, y : u16x4)"_c;
    Symbol::Resolved(&max_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// clamp with Float32, Float32, Float32
    clamp_Float32_val.name = "val"_c;
    clamp_Float32_val.type = Type::FullType{ Float32Type.name };
    clamp_Float32_min.name = "min"_c;
    clamp_Float32_min.type = Type::FullType{ Float32Type.name };
    clamp_Float32_max.name = "max"_c;
    clamp_Float32_max.type = Type::FullType{ Float32Type.name };
    clamp_Float32.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float32.name = "clamp"_c;
    clamp_Float32.backendIndex = 1654;
    clamp_Float32.returnType = Type::FullType { Float32Type.name };
    clamp_Float32.parameters = clamp_Float32_args;
    Symbol::Resolved(&clamp_Float32_val)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32_min)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32_max)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32)->signature = "f32 clamp(f32,f32,f32)"_c;
    Symbol::Resolved(&clamp_Float32)->name = "clamp(f32,f32,f32)"_c;
    Symbol::Resolved(&clamp_Float32)->nameWithVarNames = "clamp(val : f32, min : f32, max : f32)"_c;
    Symbol::Resolved(&clamp_Float32)->returnTypeSymbol = &Float32Type;

    /// clamp with Float32x2, Float32x2, Float32x2
    clamp_Float32x2_val.name = "val"_c;
    clamp_Float32x2_val.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2_min.name = "min"_c;
    clamp_Float32x2_min.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2_max.name = "max"_c;
    clamp_Float32x2_max.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float32x2.name = "clamp"_c;
    clamp_Float32x2.backendIndex = 1655;
    clamp_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    clamp_Float32x2.parameters = clamp_Float32x2_args;
    Symbol::Resolved(&clamp_Float32x2_val)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2_min)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2_max)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2)->signature = "f32x2 clamp(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&clamp_Float32x2)->name = "clamp(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&clamp_Float32x2)->nameWithVarNames = "clamp(val : f32x2, min : f32x2, max : f32x2)"_c;
    Symbol::Resolved(&clamp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// clamp with Float32x3, Float32x3, Float32x3
    clamp_Float32x3_val.name = "val"_c;
    clamp_Float32x3_val.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3_min.name = "min"_c;
    clamp_Float32x3_min.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3_max.name = "max"_c;
    clamp_Float32x3_max.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float32x3.name = "clamp"_c;
    clamp_Float32x3.backendIndex = 1656;
    clamp_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    clamp_Float32x3.parameters = clamp_Float32x3_args;
    Symbol::Resolved(&clamp_Float32x3_val)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3_min)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3_max)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3)->signature = "f32x3 clamp(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&clamp_Float32x3)->name = "clamp(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&clamp_Float32x3)->nameWithVarNames = "clamp(val : f32x3, min : f32x3, max : f32x3)"_c;
    Symbol::Resolved(&clamp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// clamp with Float32x4, Float32x4, Float32x4
    clamp_Float32x4_val.name = "val"_c;
    clamp_Float32x4_val.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4_min.name = "min"_c;
    clamp_Float32x4_min.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4_max.name = "max"_c;
    clamp_Float32x4_max.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float32x4.name = "clamp"_c;
    clamp_Float32x4.backendIndex = 1657;
    clamp_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    clamp_Float32x4.parameters = clamp_Float32x4_args;
    Symbol::Resolved(&clamp_Float32x4_val)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4_min)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4_max)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4)->signature = "f32x4 clamp(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&clamp_Float32x4)->name = "clamp(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&clamp_Float32x4)->nameWithVarNames = "clamp(val : f32x4, min : f32x4, max : f32x4)"_c;
    Symbol::Resolved(&clamp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// clamp with Float16, Float16, Float16
    clamp_Float16_val.name = "val"_c;
    clamp_Float16_val.type = Type::FullType{ Float16Type.name };
    clamp_Float16_min.name = "min"_c;
    clamp_Float16_min.type = Type::FullType{ Float16Type.name };
    clamp_Float16_max.name = "max"_c;
    clamp_Float16_max.type = Type::FullType{ Float16Type.name };
    clamp_Float16.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float16.name = "clamp"_c;
    clamp_Float16.backendIndex = 1658;
    clamp_Float16.returnType = Type::FullType { Float16Type.name };
    clamp_Float16.parameters = clamp_Float16_args;
    Symbol::Resolved(&clamp_Float16_val)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16_min)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16_max)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16)->signature = "f16 clamp(f16,f16,f16)"_c;
    Symbol::Resolved(&clamp_Float16)->name = "clamp(f16,f16,f16)"_c;
    Symbol::Resolved(&clamp_Float16)->nameWithVarNames = "clamp(val : f16, min : f16, max : f16)"_c;
    Symbol::Resolved(&clamp_Float16)->returnTypeSymbol = &Float16Type;

    /// clamp with Float16x2, Float16x2, Float16x2
    clamp_Float16x2_val.name = "val"_c;
    clamp_Float16x2_val.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2_min.name = "min"_c;
    clamp_Float16x2_min.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2_max.name = "max"_c;
    clamp_Float16x2_max.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float16x2.name = "clamp"_c;
    clamp_Float16x2.backendIndex = 1659;
    clamp_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    clamp_Float16x2.parameters = clamp_Float16x2_args;
    Symbol::Resolved(&clamp_Float16x2_val)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2_min)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2_max)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2)->signature = "f16x2 clamp(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&clamp_Float16x2)->name = "clamp(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&clamp_Float16x2)->nameWithVarNames = "clamp(val : f16x2, min : f16x2, max : f16x2)"_c;
    Symbol::Resolved(&clamp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// clamp with Float16x3, Float16x3, Float16x3
    clamp_Float16x3_val.name = "val"_c;
    clamp_Float16x3_val.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3_min.name = "min"_c;
    clamp_Float16x3_min.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3_max.name = "max"_c;
    clamp_Float16x3_max.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float16x3.name = "clamp"_c;
    clamp_Float16x3.backendIndex = 1660;
    clamp_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    clamp_Float16x3.parameters = clamp_Float16x3_args;
    Symbol::Resolved(&clamp_Float16x3_val)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3_min)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3_max)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3)->signature = "f16x3 clamp(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&clamp_Float16x3)->name = "clamp(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&clamp_Float16x3)->nameWithVarNames = "clamp(val : f16x3, min : f16x3, max : f16x3)"_c;
    Symbol::Resolved(&clamp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// clamp with Float16x4, Float16x4, Float16x4
    clamp_Float16x4_val.name = "val"_c;
    clamp_Float16x4_val.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4_min.name = "min"_c;
    clamp_Float16x4_min.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4_max.name = "max"_c;
    clamp_Float16x4_max.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4.documentation = "Returns the value clamped between min and max."_c;
    clamp_Float16x4.name = "clamp"_c;
    clamp_Float16x4.backendIndex = 1661;
    clamp_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    clamp_Float16x4.parameters = clamp_Float16x4_args;
    Symbol::Resolved(&clamp_Float16x4_val)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4_min)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4_max)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4)->signature = "f16x4 clamp(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&clamp_Float16x4)->name = "clamp(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&clamp_Float16x4)->nameWithVarNames = "clamp(val : f16x4, min : f16x4, max : f16x4)"_c;
    Symbol::Resolved(&clamp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// clamp with Int32, Int32, Int32
    clamp_Int32_val.name = "val"_c;
    clamp_Int32_val.type = Type::FullType{ Int32Type.name };
    clamp_Int32_min.name = "min"_c;
    clamp_Int32_min.type = Type::FullType{ Int32Type.name };
    clamp_Int32_max.name = "max"_c;
    clamp_Int32_max.type = Type::FullType{ Int32Type.name };
    clamp_Int32.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int32.name = "clamp"_c;
    clamp_Int32.backendIndex = 1662;
    clamp_Int32.returnType = Type::FullType { Int32Type.name };
    clamp_Int32.parameters = clamp_Int32_args;
    Symbol::Resolved(&clamp_Int32_val)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32_min)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32_max)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32)->signature = "i32 clamp(i32,i32,i32)"_c;
    Symbol::Resolved(&clamp_Int32)->name = "clamp(i32,i32,i32)"_c;
    Symbol::Resolved(&clamp_Int32)->nameWithVarNames = "clamp(val : i32, min : i32, max : i32)"_c;
    Symbol::Resolved(&clamp_Int32)->returnTypeSymbol = &Int32Type;

    /// clamp with Int32x2, Int32x2, Int32x2
    clamp_Int32x2_val.name = "val"_c;
    clamp_Int32x2_val.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2_min.name = "min"_c;
    clamp_Int32x2_min.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2_max.name = "max"_c;
    clamp_Int32x2_max.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int32x2.name = "clamp"_c;
    clamp_Int32x2.backendIndex = 1663;
    clamp_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    clamp_Int32x2.parameters = clamp_Int32x2_args;
    Symbol::Resolved(&clamp_Int32x2_val)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2_min)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2_max)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2)->signature = "i32x2 clamp(i32x2,i32x2,i32x2)"_c;
    Symbol::Resolved(&clamp_Int32x2)->name = "clamp(i32x2,i32x2,i32x2)"_c;
    Symbol::Resolved(&clamp_Int32x2)->nameWithVarNames = "clamp(val : i32x2, min : i32x2, max : i32x2)"_c;
    Symbol::Resolved(&clamp_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// clamp with Int32x3, Int32x3, Int32x3
    clamp_Int32x3_val.name = "val"_c;
    clamp_Int32x3_val.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3_min.name = "min"_c;
    clamp_Int32x3_min.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3_max.name = "max"_c;
    clamp_Int32x3_max.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int32x3.name = "clamp"_c;
    clamp_Int32x3.backendIndex = 1664;
    clamp_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    clamp_Int32x3.parameters = clamp_Int32x3_args;
    Symbol::Resolved(&clamp_Int32x3_val)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3_min)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3_max)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3)->signature = "i32x3 clamp(i32x3,i32x3,i32x3)"_c;
    Symbol::Resolved(&clamp_Int32x3)->name = "clamp(i32x3,i32x3,i32x3)"_c;
    Symbol::Resolved(&clamp_Int32x3)->nameWithVarNames = "clamp(val : i32x3, min : i32x3, max : i32x3)"_c;
    Symbol::Resolved(&clamp_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// clamp with Int32x4, Int32x4, Int32x4
    clamp_Int32x4_val.name = "val"_c;
    clamp_Int32x4_val.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4_min.name = "min"_c;
    clamp_Int32x4_min.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4_max.name = "max"_c;
    clamp_Int32x4_max.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int32x4.name = "clamp"_c;
    clamp_Int32x4.backendIndex = 1665;
    clamp_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    clamp_Int32x4.parameters = clamp_Int32x4_args;
    Symbol::Resolved(&clamp_Int32x4_val)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4_min)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4_max)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4)->signature = "i32x4 clamp(i32x4,i32x4,i32x4)"_c;
    Symbol::Resolved(&clamp_Int32x4)->name = "clamp(i32x4,i32x4,i32x4)"_c;
    Symbol::Resolved(&clamp_Int32x4)->nameWithVarNames = "clamp(val : i32x4, min : i32x4, max : i32x4)"_c;
    Symbol::Resolved(&clamp_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// clamp with Int16, Int16, Int16
    clamp_Int16_val.name = "val"_c;
    clamp_Int16_val.type = Type::FullType{ Int16Type.name };
    clamp_Int16_min.name = "min"_c;
    clamp_Int16_min.type = Type::FullType{ Int16Type.name };
    clamp_Int16_max.name = "max"_c;
    clamp_Int16_max.type = Type::FullType{ Int16Type.name };
    clamp_Int16.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int16.name = "clamp"_c;
    clamp_Int16.backendIndex = 1666;
    clamp_Int16.returnType = Type::FullType { Int16Type.name };
    clamp_Int16.parameters = clamp_Int16_args;
    Symbol::Resolved(&clamp_Int16_val)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16_min)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16_max)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16)->signature = "i16 clamp(i16,i16,i16)"_c;
    Symbol::Resolved(&clamp_Int16)->name = "clamp(i16,i16,i16)"_c;
    Symbol::Resolved(&clamp_Int16)->nameWithVarNames = "clamp(val : i16, min : i16, max : i16)"_c;
    Symbol::Resolved(&clamp_Int16)->returnTypeSymbol = &Int16Type;

    /// clamp with Int16x2, Int16x2, Int16x2
    clamp_Int16x2_val.name = "val"_c;
    clamp_Int16x2_val.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2_min.name = "min"_c;
    clamp_Int16x2_min.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2_max.name = "max"_c;
    clamp_Int16x2_max.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int16x2.name = "clamp"_c;
    clamp_Int16x2.backendIndex = 1667;
    clamp_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    clamp_Int16x2.parameters = clamp_Int16x2_args;
    Symbol::Resolved(&clamp_Int16x2_val)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2_min)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2_max)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2)->signature = "i16x2 clamp(i16x2,i16x2,i16x2)"_c;
    Symbol::Resolved(&clamp_Int16x2)->name = "clamp(i16x2,i16x2,i16x2)"_c;
    Symbol::Resolved(&clamp_Int16x2)->nameWithVarNames = "clamp(val : i16x2, min : i16x2, max : i16x2)"_c;
    Symbol::Resolved(&clamp_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// clamp with Int16x3, Int16x3, Int16x3
    clamp_Int16x3_val.name = "val"_c;
    clamp_Int16x3_val.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3_min.name = "min"_c;
    clamp_Int16x3_min.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3_max.name = "max"_c;
    clamp_Int16x3_max.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int16x3.name = "clamp"_c;
    clamp_Int16x3.backendIndex = 1668;
    clamp_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    clamp_Int16x3.parameters = clamp_Int16x3_args;
    Symbol::Resolved(&clamp_Int16x3_val)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3_min)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3_max)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3)->signature = "i16x3 clamp(i16x3,i16x3,i16x3)"_c;
    Symbol::Resolved(&clamp_Int16x3)->name = "clamp(i16x3,i16x3,i16x3)"_c;
    Symbol::Resolved(&clamp_Int16x3)->nameWithVarNames = "clamp(val : i16x3, min : i16x3, max : i16x3)"_c;
    Symbol::Resolved(&clamp_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// clamp with Int16x4, Int16x4, Int16x4
    clamp_Int16x4_val.name = "val"_c;
    clamp_Int16x4_val.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4_min.name = "min"_c;
    clamp_Int16x4_min.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4_max.name = "max"_c;
    clamp_Int16x4_max.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4.documentation = "Returns the value clamped between min and max."_c;
    clamp_Int16x4.name = "clamp"_c;
    clamp_Int16x4.backendIndex = 1669;
    clamp_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    clamp_Int16x4.parameters = clamp_Int16x4_args;
    Symbol::Resolved(&clamp_Int16x4_val)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4_min)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4_max)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4)->signature = "i16x4 clamp(i16x4,i16x4,i16x4)"_c;
    Symbol::Resolved(&clamp_Int16x4)->name = "clamp(i16x4,i16x4,i16x4)"_c;
    Symbol::Resolved(&clamp_Int16x4)->nameWithVarNames = "clamp(val : i16x4, min : i16x4, max : i16x4)"_c;
    Symbol::Resolved(&clamp_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// clamp with UInt32, UInt32, UInt32
    clamp_UInt32_val.name = "val"_c;
    clamp_UInt32_val.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32_min.name = "min"_c;
    clamp_UInt32_min.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32_max.name = "max"_c;
    clamp_UInt32_max.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt32.name = "clamp"_c;
    clamp_UInt32.backendIndex = 1670;
    clamp_UInt32.returnType = Type::FullType { UInt32Type.name };
    clamp_UInt32.parameters = clamp_UInt32_args;
    Symbol::Resolved(&clamp_UInt32_val)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32_min)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32_max)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32)->signature = "u32 clamp(u32,u32,u32)"_c;
    Symbol::Resolved(&clamp_UInt32)->name = "clamp(u32,u32,u32)"_c;
    Symbol::Resolved(&clamp_UInt32)->nameWithVarNames = "clamp(val : u32, min : u32, max : u32)"_c;
    Symbol::Resolved(&clamp_UInt32)->returnTypeSymbol = &UInt32Type;

    /// clamp with UInt32x2, UInt32x2, UInt32x2
    clamp_UInt32x2_val.name = "val"_c;
    clamp_UInt32x2_val.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2_min.name = "min"_c;
    clamp_UInt32x2_min.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2_max.name = "max"_c;
    clamp_UInt32x2_max.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt32x2.name = "clamp"_c;
    clamp_UInt32x2.backendIndex = 1671;
    clamp_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    clamp_UInt32x2.parameters = clamp_UInt32x2_args;
    Symbol::Resolved(&clamp_UInt32x2_val)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2_min)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2_max)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2)->signature = "u32x2 clamp(u32x2,u32x2,u32x2)"_c;
    Symbol::Resolved(&clamp_UInt32x2)->name = "clamp(u32x2,u32x2,u32x2)"_c;
    Symbol::Resolved(&clamp_UInt32x2)->nameWithVarNames = "clamp(val : u32x2, min : u32x2, max : u32x2)"_c;
    Symbol::Resolved(&clamp_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// clamp with UInt32x3, UInt32x3, UInt32x3
    clamp_UInt32x3_val.name = "val"_c;
    clamp_UInt32x3_val.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3_min.name = "min"_c;
    clamp_UInt32x3_min.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3_max.name = "max"_c;
    clamp_UInt32x3_max.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt32x3.name = "clamp"_c;
    clamp_UInt32x3.backendIndex = 1672;
    clamp_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    clamp_UInt32x3.parameters = clamp_UInt32x3_args;
    Symbol::Resolved(&clamp_UInt32x3_val)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3_min)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3_max)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3)->signature = "u32x3 clamp(u32x3,u32x3,u32x3)"_c;
    Symbol::Resolved(&clamp_UInt32x3)->name = "clamp(u32x3,u32x3,u32x3)"_c;
    Symbol::Resolved(&clamp_UInt32x3)->nameWithVarNames = "clamp(val : u32x3, min : u32x3, max : u32x3)"_c;
    Symbol::Resolved(&clamp_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// clamp with UInt32x4, UInt32x4, UInt32x4
    clamp_UInt32x4_val.name = "val"_c;
    clamp_UInt32x4_val.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4_min.name = "min"_c;
    clamp_UInt32x4_min.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4_max.name = "max"_c;
    clamp_UInt32x4_max.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt32x4.name = "clamp"_c;
    clamp_UInt32x4.backendIndex = 1673;
    clamp_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    clamp_UInt32x4.parameters = clamp_UInt32x4_args;
    Symbol::Resolved(&clamp_UInt32x4_val)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4_min)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4_max)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4)->signature = "u32x4 clamp(u32x4,u32x4,u32x4)"_c;
    Symbol::Resolved(&clamp_UInt32x4)->name = "clamp(u32x4,u32x4,u32x4)"_c;
    Symbol::Resolved(&clamp_UInt32x4)->nameWithVarNames = "clamp(val : u32x4, min : u32x4, max : u32x4)"_c;
    Symbol::Resolved(&clamp_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// clamp with UInt16, UInt16, UInt16
    clamp_UInt16_val.name = "val"_c;
    clamp_UInt16_val.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16_min.name = "min"_c;
    clamp_UInt16_min.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16_max.name = "max"_c;
    clamp_UInt16_max.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt16.name = "clamp"_c;
    clamp_UInt16.backendIndex = 1674;
    clamp_UInt16.returnType = Type::FullType { UInt16Type.name };
    clamp_UInt16.parameters = clamp_UInt16_args;
    Symbol::Resolved(&clamp_UInt16_val)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16_min)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16_max)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16)->signature = "u16 clamp(u16,u16,u16)"_c;
    Symbol::Resolved(&clamp_UInt16)->name = "clamp(u16,u16,u16)"_c;
    Symbol::Resolved(&clamp_UInt16)->nameWithVarNames = "clamp(val : u16, min : u16, max : u16)"_c;
    Symbol::Resolved(&clamp_UInt16)->returnTypeSymbol = &UInt16Type;

    /// clamp with UInt16x2, UInt16x2, UInt16x2
    clamp_UInt16x2_val.name = "val"_c;
    clamp_UInt16x2_val.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2_min.name = "min"_c;
    clamp_UInt16x2_min.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2_max.name = "max"_c;
    clamp_UInt16x2_max.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt16x2.name = "clamp"_c;
    clamp_UInt16x2.backendIndex = 1675;
    clamp_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    clamp_UInt16x2.parameters = clamp_UInt16x2_args;
    Symbol::Resolved(&clamp_UInt16x2_val)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2_min)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2_max)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2)->signature = "u16x2 clamp(u16x2,u16x2,u16x2)"_c;
    Symbol::Resolved(&clamp_UInt16x2)->name = "clamp(u16x2,u16x2,u16x2)"_c;
    Symbol::Resolved(&clamp_UInt16x2)->nameWithVarNames = "clamp(val : u16x2, min : u16x2, max : u16x2)"_c;
    Symbol::Resolved(&clamp_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// clamp with UInt16x3, UInt16x3, UInt16x3
    clamp_UInt16x3_val.name = "val"_c;
    clamp_UInt16x3_val.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3_min.name = "min"_c;
    clamp_UInt16x3_min.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3_max.name = "max"_c;
    clamp_UInt16x3_max.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt16x3.name = "clamp"_c;
    clamp_UInt16x3.backendIndex = 1676;
    clamp_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    clamp_UInt16x3.parameters = clamp_UInt16x3_args;
    Symbol::Resolved(&clamp_UInt16x3_val)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3_min)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3_max)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3)->signature = "u16x3 clamp(u16x3,u16x3,u16x3)"_c;
    Symbol::Resolved(&clamp_UInt16x3)->name = "clamp(u16x3,u16x3,u16x3)"_c;
    Symbol::Resolved(&clamp_UInt16x3)->nameWithVarNames = "clamp(val : u16x3, min : u16x3, max : u16x3)"_c;
    Symbol::Resolved(&clamp_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// clamp with UInt16x4, UInt16x4, UInt16x4
    clamp_UInt16x4_val.name = "val"_c;
    clamp_UInt16x4_val.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4_min.name = "min"_c;
    clamp_UInt16x4_min.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4_max.name = "max"_c;
    clamp_UInt16x4_max.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4.documentation = "Returns the value clamped between min and max."_c;
    clamp_UInt16x4.name = "clamp"_c;
    clamp_UInt16x4.backendIndex = 1677;
    clamp_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    clamp_UInt16x4.parameters = clamp_UInt16x4_args;
    Symbol::Resolved(&clamp_UInt16x4_val)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4_min)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4_max)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4)->signature = "u16x4 clamp(u16x4,u16x4,u16x4)"_c;
    Symbol::Resolved(&clamp_UInt16x4)->name = "clamp(u16x4,u16x4,u16x4)"_c;
    Symbol::Resolved(&clamp_UInt16x4)->nameWithVarNames = "clamp(val : u16x4, min : u16x4, max : u16x4)"_c;
    Symbol::Resolved(&clamp_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// lerp with Float32, Float32, Float32
    lerp_Float32_a.name = "a"_c;
    lerp_Float32_a.type = Type::FullType{ Float32Type.name };
    lerp_Float32_b.name = "b"_c;
    lerp_Float32_b.type = Type::FullType{ Float32Type.name };
    lerp_Float32_t.name = "t"_c;
    lerp_Float32_t.type = Type::FullType{ Float32Type.name };
    lerp_Float32.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float32.name = "lerp"_c;
    lerp_Float32.backendIndex = 1678;
    lerp_Float32.returnType = Type::FullType { Float32Type.name };
    lerp_Float32.parameters = lerp_Float32_args;
    Symbol::Resolved(&lerp_Float32_a)->typeSymbol = &Float32Type;
    Symbol::Resolved(&lerp_Float32_b)->typeSymbol = &Float32Type;
    Symbol::Resolved(&lerp_Float32_t)->typeSymbol = &Float32Type;
    Symbol::Resolved(&lerp_Float32)->signature = "f32 lerp(f32,f32,f32)"_c;
    Symbol::Resolved(&lerp_Float32)->name = "lerp(f32,f32,f32)"_c;
    Symbol::Resolved(&lerp_Float32)->nameWithVarNames = "lerp(a : f32, b : f32, t : f32)"_c;
    Symbol::Resolved(&lerp_Float32)->returnTypeSymbol = &Float32Type;

    /// lerp with Float32x2, Float32x2, Float32x2
    lerp_Float32x2_a.name = "a"_c;
    lerp_Float32x2_a.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2_b.name = "b"_c;
    lerp_Float32x2_b.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2_t.name = "t"_c;
    lerp_Float32x2_t.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float32x2.name = "lerp"_c;
    lerp_Float32x2.backendIndex = 1679;
    lerp_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    lerp_Float32x2.parameters = lerp_Float32x2_args;
    Symbol::Resolved(&lerp_Float32x2_a)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2_b)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2_t)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2)->signature = "f32x2 lerp(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&lerp_Float32x2)->name = "lerp(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&lerp_Float32x2)->nameWithVarNames = "lerp(a : f32x2, b : f32x2, t : f32x2)"_c;
    Symbol::Resolved(&lerp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// lerp with Float32x3, Float32x3, Float32x3
    lerp_Float32x3_a.name = "a"_c;
    lerp_Float32x3_a.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3_b.name = "b"_c;
    lerp_Float32x3_b.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3_t.name = "t"_c;
    lerp_Float32x3_t.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float32x3.name = "lerp"_c;
    lerp_Float32x3.backendIndex = 1680;
    lerp_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    lerp_Float32x3.parameters = lerp_Float32x3_args;
    Symbol::Resolved(&lerp_Float32x3_a)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3_b)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3_t)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3)->signature = "f32x3 lerp(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&lerp_Float32x3)->name = "lerp(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&lerp_Float32x3)->nameWithVarNames = "lerp(a : f32x3, b : f32x3, t : f32x3)"_c;
    Symbol::Resolved(&lerp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// lerp with Float32x4, Float32x4, Float32x4
    lerp_Float32x4_a.name = "a"_c;
    lerp_Float32x4_a.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4_b.name = "b"_c;
    lerp_Float32x4_b.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4_t.name = "t"_c;
    lerp_Float32x4_t.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float32x4.name = "lerp"_c;
    lerp_Float32x4.backendIndex = 1681;
    lerp_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    lerp_Float32x4.parameters = lerp_Float32x4_args;
    Symbol::Resolved(&lerp_Float32x4_a)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4_b)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4_t)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4)->signature = "f32x4 lerp(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&lerp_Float32x4)->name = "lerp(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&lerp_Float32x4)->nameWithVarNames = "lerp(a : f32x4, b : f32x4, t : f32x4)"_c;
    Symbol::Resolved(&lerp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// lerp with Float16, Float16, Float16
    lerp_Float16_a.name = "a"_c;
    lerp_Float16_a.type = Type::FullType{ Float16Type.name };
    lerp_Float16_b.name = "b"_c;
    lerp_Float16_b.type = Type::FullType{ Float16Type.name };
    lerp_Float16_t.name = "t"_c;
    lerp_Float16_t.type = Type::FullType{ Float16Type.name };
    lerp_Float16.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float16.name = "lerp"_c;
    lerp_Float16.backendIndex = 1682;
    lerp_Float16.returnType = Type::FullType { Float16Type.name };
    lerp_Float16.parameters = lerp_Float16_args;
    Symbol::Resolved(&lerp_Float16_a)->typeSymbol = &Float16Type;
    Symbol::Resolved(&lerp_Float16_b)->typeSymbol = &Float16Type;
    Symbol::Resolved(&lerp_Float16_t)->typeSymbol = &Float16Type;
    Symbol::Resolved(&lerp_Float16)->signature = "f16 lerp(f16,f16,f16)"_c;
    Symbol::Resolved(&lerp_Float16)->name = "lerp(f16,f16,f16)"_c;
    Symbol::Resolved(&lerp_Float16)->nameWithVarNames = "lerp(a : f16, b : f16, t : f16)"_c;
    Symbol::Resolved(&lerp_Float16)->returnTypeSymbol = &Float16Type;

    /// lerp with Float16x2, Float16x2, Float16x2
    lerp_Float16x2_a.name = "a"_c;
    lerp_Float16x2_a.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2_b.name = "b"_c;
    lerp_Float16x2_b.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2_t.name = "t"_c;
    lerp_Float16x2_t.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float16x2.name = "lerp"_c;
    lerp_Float16x2.backendIndex = 1683;
    lerp_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    lerp_Float16x2.parameters = lerp_Float16x2_args;
    Symbol::Resolved(&lerp_Float16x2_a)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2_b)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2_t)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2)->signature = "f16x2 lerp(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&lerp_Float16x2)->name = "lerp(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&lerp_Float16x2)->nameWithVarNames = "lerp(a : f16x2, b : f16x2, t : f16x2)"_c;
    Symbol::Resolved(&lerp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// lerp with Float16x3, Float16x3, Float16x3
    lerp_Float16x3_a.name = "a"_c;
    lerp_Float16x3_a.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3_b.name = "b"_c;
    lerp_Float16x3_b.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3_t.name = "t"_c;
    lerp_Float16x3_t.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float16x3.name = "lerp"_c;
    lerp_Float16x3.backendIndex = 1684;
    lerp_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    lerp_Float16x3.parameters = lerp_Float16x3_args;
    Symbol::Resolved(&lerp_Float16x3_a)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3_b)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3_t)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3)->signature = "f16x3 lerp(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&lerp_Float16x3)->name = "lerp(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&lerp_Float16x3)->nameWithVarNames = "lerp(a : f16x3, b : f16x3, t : f16x3)"_c;
    Symbol::Resolved(&lerp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// lerp with Float16x4, Float16x4, Float16x4
    lerp_Float16x4_a.name = "a"_c;
    lerp_Float16x4_a.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4_b.name = "b"_c;
    lerp_Float16x4_b.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4_t.name = "t"_c;
    lerp_Float16x4_t.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4.documentation = "Returns the linear interpolation between a and b by t."_c;
    lerp_Float16x4.name = "lerp"_c;
    lerp_Float16x4.backendIndex = 1685;
    lerp_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    lerp_Float16x4.parameters = lerp_Float16x4_args;
    Symbol::Resolved(&lerp_Float16x4_a)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4_b)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4_t)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4)->signature = "f16x4 lerp(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&lerp_Float16x4)->name = "lerp(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&lerp_Float16x4)->nameWithVarNames = "lerp(a : f16x4, b : f16x4, t : f16x4)"_c;
    Symbol::Resolved(&lerp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// step with Float32, Float32
    step_Float32_edge.name = "edge"_c;
    step_Float32_edge.type = Type::FullType{ Float32Type.name };
    step_Float32_x.name = "x"_c;
    step_Float32_x.type = Type::FullType{ Float32Type.name };
    step_Float32.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float32.name = "step"_c;
    step_Float32.backendIndex = 1686;
    step_Float32.returnType = Type::FullType { Float32Type.name };
    step_Float32.parameters = step_Float32_args;
    Symbol::Resolved(&step_Float32_edge)->typeSymbol = &Float32Type;
    Symbol::Resolved(&step_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&step_Float32)->signature = "f32 step(f32,f32)"_c;
    Symbol::Resolved(&step_Float32)->name = "step(f32,f32)"_c;
    Symbol::Resolved(&step_Float32)->nameWithVarNames = "step(edge : f32, x : f32)"_c;
    Symbol::Resolved(&step_Float32)->returnTypeSymbol = &Float32Type;

    /// step with Float32x2, Float32x2
    step_Float32x2_edge.name = "edge"_c;
    step_Float32x2_edge.type = Type::FullType{ Float32x2Type.name };
    step_Float32x2_x.name = "x"_c;
    step_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    step_Float32x2.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float32x2.name = "step"_c;
    step_Float32x2.backendIndex = 1687;
    step_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    step_Float32x2.parameters = step_Float32x2_args;
    Symbol::Resolved(&step_Float32x2_edge)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&step_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&step_Float32x2)->signature = "f32x2 step(f32x2,f32x2)"_c;
    Symbol::Resolved(&step_Float32x2)->name = "step(f32x2,f32x2)"_c;
    Symbol::Resolved(&step_Float32x2)->nameWithVarNames = "step(edge : f32x2, x : f32x2)"_c;
    Symbol::Resolved(&step_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// step with Float32x3, Float32x3
    step_Float32x3_edge.name = "edge"_c;
    step_Float32x3_edge.type = Type::FullType{ Float32x3Type.name };
    step_Float32x3_x.name = "x"_c;
    step_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    step_Float32x3.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float32x3.name = "step"_c;
    step_Float32x3.backendIndex = 1688;
    step_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    step_Float32x3.parameters = step_Float32x3_args;
    Symbol::Resolved(&step_Float32x3_edge)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&step_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&step_Float32x3)->signature = "f32x3 step(f32x3,f32x3)"_c;
    Symbol::Resolved(&step_Float32x3)->name = "step(f32x3,f32x3)"_c;
    Symbol::Resolved(&step_Float32x3)->nameWithVarNames = "step(edge : f32x3, x : f32x3)"_c;
    Symbol::Resolved(&step_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// step with Float32x4, Float32x4
    step_Float32x4_edge.name = "edge"_c;
    step_Float32x4_edge.type = Type::FullType{ Float32x4Type.name };
    step_Float32x4_x.name = "x"_c;
    step_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    step_Float32x4.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float32x4.name = "step"_c;
    step_Float32x4.backendIndex = 1689;
    step_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    step_Float32x4.parameters = step_Float32x4_args;
    Symbol::Resolved(&step_Float32x4_edge)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&step_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&step_Float32x4)->signature = "f32x4 step(f32x4,f32x4)"_c;
    Symbol::Resolved(&step_Float32x4)->name = "step(f32x4,f32x4)"_c;
    Symbol::Resolved(&step_Float32x4)->nameWithVarNames = "step(edge : f32x4, x : f32x4)"_c;
    Symbol::Resolved(&step_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// step with Float16, Float16
    step_Float16_edge.name = "edge"_c;
    step_Float16_edge.type = Type::FullType{ Float16Type.name };
    step_Float16_x.name = "x"_c;
    step_Float16_x.type = Type::FullType{ Float16Type.name };
    step_Float16.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float16.name = "step"_c;
    step_Float16.backendIndex = 1690;
    step_Float16.returnType = Type::FullType { Float16Type.name };
    step_Float16.parameters = step_Float16_args;
    Symbol::Resolved(&step_Float16_edge)->typeSymbol = &Float16Type;
    Symbol::Resolved(&step_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&step_Float16)->signature = "f16 step(f16,f16)"_c;
    Symbol::Resolved(&step_Float16)->name = "step(f16,f16)"_c;
    Symbol::Resolved(&step_Float16)->nameWithVarNames = "step(edge : f16, x : f16)"_c;
    Symbol::Resolved(&step_Float16)->returnTypeSymbol = &Float16Type;

    /// step with Float16x2, Float16x2
    step_Float16x2_edge.name = "edge"_c;
    step_Float16x2_edge.type = Type::FullType{ Float16x2Type.name };
    step_Float16x2_x.name = "x"_c;
    step_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    step_Float16x2.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float16x2.name = "step"_c;
    step_Float16x2.backendIndex = 1691;
    step_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    step_Float16x2.parameters = step_Float16x2_args;
    Symbol::Resolved(&step_Float16x2_edge)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&step_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&step_Float16x2)->signature = "f16x2 step(f16x2,f16x2)"_c;
    Symbol::Resolved(&step_Float16x2)->name = "step(f16x2,f16x2)"_c;
    Symbol::Resolved(&step_Float16x2)->nameWithVarNames = "step(edge : f16x2, x : f16x2)"_c;
    Symbol::Resolved(&step_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// step with Float16x3, Float16x3
    step_Float16x3_edge.name = "edge"_c;
    step_Float16x3_edge.type = Type::FullType{ Float16x3Type.name };
    step_Float16x3_x.name = "x"_c;
    step_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    step_Float16x3.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float16x3.name = "step"_c;
    step_Float16x3.backendIndex = 1692;
    step_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    step_Float16x3.parameters = step_Float16x3_args;
    Symbol::Resolved(&step_Float16x3_edge)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&step_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&step_Float16x3)->signature = "f16x3 step(f16x3,f16x3)"_c;
    Symbol::Resolved(&step_Float16x3)->name = "step(f16x3,f16x3)"_c;
    Symbol::Resolved(&step_Float16x3)->nameWithVarNames = "step(edge : f16x3, x : f16x3)"_c;
    Symbol::Resolved(&step_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// step with Float16x4, Float16x4
    step_Float16x4_edge.name = "edge"_c;
    step_Float16x4_edge.type = Type::FullType{ Float16x4Type.name };
    step_Float16x4_x.name = "x"_c;
    step_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    step_Float16x4.documentation = "Returns 0.0 if x < edge, otherwise returns 1.0."_c;
    step_Float16x4.name = "step"_c;
    step_Float16x4.backendIndex = 1693;
    step_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    step_Float16x4.parameters = step_Float16x4_args;
    Symbol::Resolved(&step_Float16x4_edge)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&step_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&step_Float16x4)->signature = "f16x4 step(f16x4,f16x4)"_c;
    Symbol::Resolved(&step_Float16x4)->name = "step(f16x4,f16x4)"_c;
    Symbol::Resolved(&step_Float16x4)->nameWithVarNames = "step(edge : f16x4, x : f16x4)"_c;
    Symbol::Resolved(&step_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// smoothstep with Float32, Float32, Float32
    smoothstep_Float32_edge0.name = "edge0"_c;
    smoothstep_Float32_edge0.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32_edge1.name = "edge1"_c;
    smoothstep_Float32_edge1.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32_x.name = "x"_c;
    smoothstep_Float32_x.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float32.name = "smoothstep"_c;
    smoothstep_Float32.backendIndex = 1694;
    smoothstep_Float32.returnType = Type::FullType { Float32Type.name };
    smoothstep_Float32.parameters = smoothstep_Float32_args;
    Symbol::Resolved(&smoothstep_Float32_edge0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32_edge1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32)->signature = "f32 smoothstep(f32,f32,f32)"_c;
    Symbol::Resolved(&smoothstep_Float32)->name = "smoothstep(f32,f32,f32)"_c;
    Symbol::Resolved(&smoothstep_Float32)->nameWithVarNames = "smoothstep(edge0 : f32, edge1 : f32, x : f32)"_c;
    Symbol::Resolved(&smoothstep_Float32)->returnTypeSymbol = &Float32Type;

    /// smoothstep with Float32x2, Float32x2, Float32x2
    smoothstep_Float32x2_edge0.name = "edge0"_c;
    smoothstep_Float32x2_edge0.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2_edge1.name = "edge1"_c;
    smoothstep_Float32x2_edge1.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2_x.name = "x"_c;
    smoothstep_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float32x2.name = "smoothstep"_c;
    smoothstep_Float32x2.backendIndex = 1695;
    smoothstep_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    smoothstep_Float32x2.parameters = smoothstep_Float32x2_args;
    Symbol::Resolved(&smoothstep_Float32x2_edge0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2_edge1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2)->signature = "f32x2 smoothstep(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&smoothstep_Float32x2)->name = "smoothstep(f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&smoothstep_Float32x2)->nameWithVarNames = "smoothstep(edge0 : f32x2, edge1 : f32x2, x : f32x2)"_c;
    Symbol::Resolved(&smoothstep_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// smoothstep with Float32x3, Float32x3, Float32x3
    smoothstep_Float32x3_edge0.name = "edge0"_c;
    smoothstep_Float32x3_edge0.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3_edge1.name = "edge1"_c;
    smoothstep_Float32x3_edge1.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3_x.name = "x"_c;
    smoothstep_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float32x3.name = "smoothstep"_c;
    smoothstep_Float32x3.backendIndex = 1696;
    smoothstep_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    smoothstep_Float32x3.parameters = smoothstep_Float32x3_args;
    Symbol::Resolved(&smoothstep_Float32x3_edge0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3_edge1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3)->signature = "f32x3 smoothstep(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&smoothstep_Float32x3)->name = "smoothstep(f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&smoothstep_Float32x3)->nameWithVarNames = "smoothstep(edge0 : f32x3, edge1 : f32x3, x : f32x3)"_c;
    Symbol::Resolved(&smoothstep_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// smoothstep with Float32x4, Float32x4, Float32x4
    smoothstep_Float32x4_edge0.name = "edge0"_c;
    smoothstep_Float32x4_edge0.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4_edge1.name = "edge1"_c;
    smoothstep_Float32x4_edge1.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4_x.name = "x"_c;
    smoothstep_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float32x4.name = "smoothstep"_c;
    smoothstep_Float32x4.backendIndex = 1697;
    smoothstep_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    smoothstep_Float32x4.parameters = smoothstep_Float32x4_args;
    Symbol::Resolved(&smoothstep_Float32x4_edge0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4_edge1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4)->signature = "f32x4 smoothstep(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&smoothstep_Float32x4)->name = "smoothstep(f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&smoothstep_Float32x4)->nameWithVarNames = "smoothstep(edge0 : f32x4, edge1 : f32x4, x : f32x4)"_c;
    Symbol::Resolved(&smoothstep_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// smoothstep with Float16, Float16, Float16
    smoothstep_Float16_edge0.name = "edge0"_c;
    smoothstep_Float16_edge0.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16_edge1.name = "edge1"_c;
    smoothstep_Float16_edge1.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16_x.name = "x"_c;
    smoothstep_Float16_x.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float16.name = "smoothstep"_c;
    smoothstep_Float16.backendIndex = 1698;
    smoothstep_Float16.returnType = Type::FullType { Float16Type.name };
    smoothstep_Float16.parameters = smoothstep_Float16_args;
    Symbol::Resolved(&smoothstep_Float16_edge0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16_edge1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16)->signature = "f16 smoothstep(f16,f16,f16)"_c;
    Symbol::Resolved(&smoothstep_Float16)->name = "smoothstep(f16,f16,f16)"_c;
    Symbol::Resolved(&smoothstep_Float16)->nameWithVarNames = "smoothstep(edge0 : f16, edge1 : f16, x : f16)"_c;
    Symbol::Resolved(&smoothstep_Float16)->returnTypeSymbol = &Float16Type;

    /// smoothstep with Float16x2, Float16x2, Float16x2
    smoothstep_Float16x2_edge0.name = "edge0"_c;
    smoothstep_Float16x2_edge0.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2_edge1.name = "edge1"_c;
    smoothstep_Float16x2_edge1.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2_x.name = "x"_c;
    smoothstep_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float16x2.name = "smoothstep"_c;
    smoothstep_Float16x2.backendIndex = 1699;
    smoothstep_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    smoothstep_Float16x2.parameters = smoothstep_Float16x2_args;
    Symbol::Resolved(&smoothstep_Float16x2_edge0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2_edge1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2)->signature = "f16x2 smoothstep(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&smoothstep_Float16x2)->name = "smoothstep(f16x2,f16x2,f16x2)"_c;
    Symbol::Resolved(&smoothstep_Float16x2)->nameWithVarNames = "smoothstep(edge0 : f16x2, edge1 : f16x2, x : f16x2)"_c;
    Symbol::Resolved(&smoothstep_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// smoothstep with Float16x3, Float16x3, Float16x3
    smoothstep_Float16x3_edge0.name = "edge0"_c;
    smoothstep_Float16x3_edge0.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3_edge1.name = "edge1"_c;
    smoothstep_Float16x3_edge1.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3_x.name = "x"_c;
    smoothstep_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float16x3.name = "smoothstep"_c;
    smoothstep_Float16x3.backendIndex = 1700;
    smoothstep_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    smoothstep_Float16x3.parameters = smoothstep_Float16x3_args;
    Symbol::Resolved(&smoothstep_Float16x3_edge0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3_edge1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3)->signature = "f16x3 smoothstep(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&smoothstep_Float16x3)->name = "smoothstep(f16x3,f16x3,f16x3)"_c;
    Symbol::Resolved(&smoothstep_Float16x3)->nameWithVarNames = "smoothstep(edge0 : f16x3, edge1 : f16x3, x : f16x3)"_c;
    Symbol::Resolved(&smoothstep_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// smoothstep with Float16x4, Float16x4, Float16x4
    smoothstep_Float16x4_edge0.name = "edge0"_c;
    smoothstep_Float16x4_edge0.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4_edge1.name = "edge1"_c;
    smoothstep_Float16x4_edge1.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4_x.name = "x"_c;
    smoothstep_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4.documentation = "Returns the smoothstep interpolation of the input."_c;
    smoothstep_Float16x4.name = "smoothstep"_c;
    smoothstep_Float16x4.backendIndex = 1701;
    smoothstep_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    smoothstep_Float16x4.parameters = smoothstep_Float16x4_args;
    Symbol::Resolved(&smoothstep_Float16x4_edge0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4_edge1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4)->signature = "f16x4 smoothstep(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&smoothstep_Float16x4)->name = "smoothstep(f16x4,f16x4,f16x4)"_c;
    Symbol::Resolved(&smoothstep_Float16x4)->nameWithVarNames = "smoothstep(edge0 : f16x4, edge1 : f16x4, x : f16x4)"_c;
    Symbol::Resolved(&smoothstep_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// ceil with Float32
    ceil_Float32_arg.name = "val"_c;
    ceil_Float32_arg.type = Type::FullType{ Float32Type.name };
    ceil_Float32.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float32.name = "ceil"_c;
    ceil_Float32.backendIndex = 1702;
    ceil_Float32.returnType = Type::FullType { Float32Type.name };
    ceil_Float32.parameters = ceil_Float32_args;
    Symbol::Resolved(&ceil_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ceil_Float32)->signature = "f32 ceil(f32)"_c;
    Symbol::Resolved(&ceil_Float32)->name = "ceil(f32)"_c;
    Symbol::Resolved(&ceil_Float32)->nameWithVarNames = "ceil(val : f32)"_c;
    Symbol::Resolved(&ceil_Float32)->returnTypeSymbol = &Float32Type;

    /// ceil with Float32x2
    ceil_Float32x2_arg.name = "val"_c;
    ceil_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ceil_Float32x2.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float32x2.name = "ceil"_c;
    ceil_Float32x2.backendIndex = 1703;
    ceil_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    ceil_Float32x2.parameters = ceil_Float32x2_args;
    Symbol::Resolved(&ceil_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ceil_Float32x2)->signature = "f32x2 ceil(f32x2)"_c;
    Symbol::Resolved(&ceil_Float32x2)->name = "ceil(f32x2)"_c;
    Symbol::Resolved(&ceil_Float32x2)->nameWithVarNames = "ceil(val : f32x2)"_c;
    Symbol::Resolved(&ceil_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// ceil with Float32x3
    ceil_Float32x3_arg.name = "val"_c;
    ceil_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ceil_Float32x3.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float32x3.name = "ceil"_c;
    ceil_Float32x3.backendIndex = 1704;
    ceil_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    ceil_Float32x3.parameters = ceil_Float32x3_args;
    Symbol::Resolved(&ceil_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ceil_Float32x3)->signature = "f32x3 ceil(f32x3)"_c;
    Symbol::Resolved(&ceil_Float32x3)->name = "ceil(f32x3)"_c;
    Symbol::Resolved(&ceil_Float32x3)->nameWithVarNames = "ceil(val : f32x3)"_c;
    Symbol::Resolved(&ceil_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// ceil with Float32x4
    ceil_Float32x4_arg.name = "val"_c;
    ceil_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ceil_Float32x4.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float32x4.name = "ceil"_c;
    ceil_Float32x4.backendIndex = 1705;
    ceil_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    ceil_Float32x4.parameters = ceil_Float32x4_args;
    Symbol::Resolved(&ceil_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ceil_Float32x4)->signature = "f32x4 ceil(f32x4)"_c;
    Symbol::Resolved(&ceil_Float32x4)->name = "ceil(f32x4)"_c;
    Symbol::Resolved(&ceil_Float32x4)->nameWithVarNames = "ceil(val : f32x4)"_c;
    Symbol::Resolved(&ceil_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// ceil with Float16
    ceil_Float16_arg.name = "val"_c;
    ceil_Float16_arg.type = Type::FullType{ Float16Type.name };
    ceil_Float16.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float16.name = "ceil"_c;
    ceil_Float16.backendIndex = 1706;
    ceil_Float16.returnType = Type::FullType { Float16Type.name };
    ceil_Float16.parameters = ceil_Float16_args;
    Symbol::Resolved(&ceil_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ceil_Float16)->signature = "f16 ceil(f16)"_c;
    Symbol::Resolved(&ceil_Float16)->name = "ceil(f16)"_c;
    Symbol::Resolved(&ceil_Float16)->nameWithVarNames = "ceil(val : f16)"_c;
    Symbol::Resolved(&ceil_Float16)->returnTypeSymbol = &Float16Type;

    /// ceil with Float16x2
    ceil_Float16x2_arg.name = "val"_c;
    ceil_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ceil_Float16x2.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float16x2.name = "ceil"_c;
    ceil_Float16x2.backendIndex = 1707;
    ceil_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    ceil_Float16x2.parameters = ceil_Float16x2_args;
    Symbol::Resolved(&ceil_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ceil_Float16x2)->signature = "f16x2 ceil(f16x2)"_c;
    Symbol::Resolved(&ceil_Float16x2)->name = "ceil(f16x2)"_c;
    Symbol::Resolved(&ceil_Float16x2)->nameWithVarNames = "ceil(val : f16x2)"_c;
    Symbol::Resolved(&ceil_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// ceil with Float16x3
    ceil_Float16x3_arg.name = "val"_c;
    ceil_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ceil_Float16x3.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float16x3.name = "ceil"_c;
    ceil_Float16x3.backendIndex = 1708;
    ceil_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    ceil_Float16x3.parameters = ceil_Float16x3_args;
    Symbol::Resolved(&ceil_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ceil_Float16x3)->signature = "f16x3 ceil(f16x3)"_c;
    Symbol::Resolved(&ceil_Float16x3)->name = "ceil(f16x3)"_c;
    Symbol::Resolved(&ceil_Float16x3)->nameWithVarNames = "ceil(val : f16x3)"_c;
    Symbol::Resolved(&ceil_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// ceil with Float16x4
    ceil_Float16x4_arg.name = "val"_c;
    ceil_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ceil_Float16x4.documentation = "Returns the smallest integer value that is greater than or equal to the input."_c;
    ceil_Float16x4.name = "ceil"_c;
    ceil_Float16x4.backendIndex = 1709;
    ceil_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    ceil_Float16x4.parameters = ceil_Float16x4_args;
    Symbol::Resolved(&ceil_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ceil_Float16x4)->signature = "f16x4 ceil(f16x4)"_c;
    Symbol::Resolved(&ceil_Float16x4)->name = "ceil(f16x4)"_c;
    Symbol::Resolved(&ceil_Float16x4)->nameWithVarNames = "ceil(val : f16x4)"_c;
    Symbol::Resolved(&ceil_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// floor with Float32
    floor_Float32_arg.name = "val"_c;
    floor_Float32_arg.type = Type::FullType{ Float32Type.name };
    floor_Float32.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float32.name = "floor"_c;
    floor_Float32.backendIndex = 1710;
    floor_Float32.returnType = Type::FullType { Float32Type.name };
    floor_Float32.parameters = floor_Float32_args;
    Symbol::Resolved(&floor_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&floor_Float32)->signature = "f32 floor(f32)"_c;
    Symbol::Resolved(&floor_Float32)->name = "floor(f32)"_c;
    Symbol::Resolved(&floor_Float32)->nameWithVarNames = "floor(val : f32)"_c;
    Symbol::Resolved(&floor_Float32)->returnTypeSymbol = &Float32Type;

    /// floor with Float32x2
    floor_Float32x2_arg.name = "val"_c;
    floor_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    floor_Float32x2.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float32x2.name = "floor"_c;
    floor_Float32x2.backendIndex = 1711;
    floor_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    floor_Float32x2.parameters = floor_Float32x2_args;
    Symbol::Resolved(&floor_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&floor_Float32x2)->signature = "f32x2 floor(f32x2)"_c;
    Symbol::Resolved(&floor_Float32x2)->name = "floor(f32x2)"_c;
    Symbol::Resolved(&floor_Float32x2)->nameWithVarNames = "floor(val : f32x2)"_c;
    Symbol::Resolved(&floor_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// floor with Float32x3
    floor_Float32x3_arg.name = "val"_c;
    floor_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    floor_Float32x3.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float32x3.name = "floor"_c;
    floor_Float32x3.backendIndex = 1712;
    floor_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    floor_Float32x3.parameters = floor_Float32x3_args;
    Symbol::Resolved(&floor_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&floor_Float32x3)->signature = "f32x3 floor(f32x3)"_c;
    Symbol::Resolved(&floor_Float32x3)->name = "floor(f32x3)"_c;
    Symbol::Resolved(&floor_Float32x3)->nameWithVarNames = "floor(val : f32x3)"_c;
    Symbol::Resolved(&floor_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// floor with Float32x4
    floor_Float32x4_arg.name = "val"_c;
    floor_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    floor_Float32x4.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float32x4.name = "floor"_c;
    floor_Float32x4.backendIndex = 1713;
    floor_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    floor_Float32x4.parameters = floor_Float32x4_args;
    Symbol::Resolved(&floor_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&floor_Float32x4)->signature = "f32x4 floor(f32x4)"_c;
    Symbol::Resolved(&floor_Float32x4)->name = "floor(f32x4)"_c;
    Symbol::Resolved(&floor_Float32x4)->nameWithVarNames = "floor(val : f32x4)"_c;
    Symbol::Resolved(&floor_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// floor with Float16
    floor_Float16_arg.name = "val"_c;
    floor_Float16_arg.type = Type::FullType{ Float16Type.name };
    floor_Float16.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float16.name = "floor"_c;
    floor_Float16.backendIndex = 1714;
    floor_Float16.returnType = Type::FullType { Float16Type.name };
    floor_Float16.parameters = floor_Float16_args;
    Symbol::Resolved(&floor_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&floor_Float16)->signature = "f16 floor(f16)"_c;
    Symbol::Resolved(&floor_Float16)->name = "floor(f16)"_c;
    Symbol::Resolved(&floor_Float16)->nameWithVarNames = "floor(val : f16)"_c;
    Symbol::Resolved(&floor_Float16)->returnTypeSymbol = &Float16Type;

    /// floor with Float16x2
    floor_Float16x2_arg.name = "val"_c;
    floor_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    floor_Float16x2.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float16x2.name = "floor"_c;
    floor_Float16x2.backendIndex = 1715;
    floor_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    floor_Float16x2.parameters = floor_Float16x2_args;
    Symbol::Resolved(&floor_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&floor_Float16x2)->signature = "f16x2 floor(f16x2)"_c;
    Symbol::Resolved(&floor_Float16x2)->name = "floor(f16x2)"_c;
    Symbol::Resolved(&floor_Float16x2)->nameWithVarNames = "floor(val : f16x2)"_c;
    Symbol::Resolved(&floor_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// floor with Float16x3
    floor_Float16x3_arg.name = "val"_c;
    floor_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    floor_Float16x3.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float16x3.name = "floor"_c;
    floor_Float16x3.backendIndex = 1716;
    floor_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    floor_Float16x3.parameters = floor_Float16x3_args;
    Symbol::Resolved(&floor_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&floor_Float16x3)->signature = "f16x3 floor(f16x3)"_c;
    Symbol::Resolved(&floor_Float16x3)->name = "floor(f16x3)"_c;
    Symbol::Resolved(&floor_Float16x3)->nameWithVarNames = "floor(val : f16x3)"_c;
    Symbol::Resolved(&floor_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// floor with Float16x4
    floor_Float16x4_arg.name = "val"_c;
    floor_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    floor_Float16x4.documentation = "Returns the largest integer value that is less than or equal to the input."_c;
    floor_Float16x4.name = "floor"_c;
    floor_Float16x4.backendIndex = 1717;
    floor_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    floor_Float16x4.parameters = floor_Float16x4_args;
    Symbol::Resolved(&floor_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&floor_Float16x4)->signature = "f16x4 floor(f16x4)"_c;
    Symbol::Resolved(&floor_Float16x4)->name = "floor(f16x4)"_c;
    Symbol::Resolved(&floor_Float16x4)->nameWithVarNames = "floor(val : f16x4)"_c;
    Symbol::Resolved(&floor_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// fract with Float32
    fract_Float32_arg.name = "val"_c;
    fract_Float32_arg.type = Type::FullType{ Float32Type.name };
    fract_Float32.documentation = "Returns the fractional part of the input."_c;
    fract_Float32.name = "fract"_c;
    fract_Float32.backendIndex = 1718;
    fract_Float32.returnType = Type::FullType { Float32Type.name };
    fract_Float32.parameters = fract_Float32_args;
    Symbol::Resolved(&fract_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&fract_Float32)->signature = "f32 fract(f32)"_c;
    Symbol::Resolved(&fract_Float32)->name = "fract(f32)"_c;
    Symbol::Resolved(&fract_Float32)->nameWithVarNames = "fract(val : f32)"_c;
    Symbol::Resolved(&fract_Float32)->returnTypeSymbol = &Float32Type;

    /// fract with Float32x2
    fract_Float32x2_arg.name = "val"_c;
    fract_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    fract_Float32x2.documentation = "Returns the fractional part of the input."_c;
    fract_Float32x2.name = "fract"_c;
    fract_Float32x2.backendIndex = 1719;
    fract_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    fract_Float32x2.parameters = fract_Float32x2_args;
    Symbol::Resolved(&fract_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&fract_Float32x2)->signature = "f32x2 fract(f32x2)"_c;
    Symbol::Resolved(&fract_Float32x2)->name = "fract(f32x2)"_c;
    Symbol::Resolved(&fract_Float32x2)->nameWithVarNames = "fract(val : f32x2)"_c;
    Symbol::Resolved(&fract_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// fract with Float32x3
    fract_Float32x3_arg.name = "val"_c;
    fract_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    fract_Float32x3.documentation = "Returns the fractional part of the input."_c;
    fract_Float32x3.name = "fract"_c;
    fract_Float32x3.backendIndex = 1720;
    fract_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    fract_Float32x3.parameters = fract_Float32x3_args;
    Symbol::Resolved(&fract_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&fract_Float32x3)->signature = "f32x3 fract(f32x3)"_c;
    Symbol::Resolved(&fract_Float32x3)->name = "fract(f32x3)"_c;
    Symbol::Resolved(&fract_Float32x3)->nameWithVarNames = "fract(val : f32x3)"_c;
    Symbol::Resolved(&fract_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// fract with Float32x4
    fract_Float32x4_arg.name = "val"_c;
    fract_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    fract_Float32x4.documentation = "Returns the fractional part of the input."_c;
    fract_Float32x4.name = "fract"_c;
    fract_Float32x4.backendIndex = 1721;
    fract_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    fract_Float32x4.parameters = fract_Float32x4_args;
    Symbol::Resolved(&fract_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&fract_Float32x4)->signature = "f32x4 fract(f32x4)"_c;
    Symbol::Resolved(&fract_Float32x4)->name = "fract(f32x4)"_c;
    Symbol::Resolved(&fract_Float32x4)->nameWithVarNames = "fract(val : f32x4)"_c;
    Symbol::Resolved(&fract_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// fract with Float16
    fract_Float16_arg.name = "val"_c;
    fract_Float16_arg.type = Type::FullType{ Float16Type.name };
    fract_Float16.documentation = "Returns the fractional part of the input."_c;
    fract_Float16.name = "fract"_c;
    fract_Float16.backendIndex = 1722;
    fract_Float16.returnType = Type::FullType { Float16Type.name };
    fract_Float16.parameters = fract_Float16_args;
    Symbol::Resolved(&fract_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&fract_Float16)->signature = "f16 fract(f16)"_c;
    Symbol::Resolved(&fract_Float16)->name = "fract(f16)"_c;
    Symbol::Resolved(&fract_Float16)->nameWithVarNames = "fract(val : f16)"_c;
    Symbol::Resolved(&fract_Float16)->returnTypeSymbol = &Float16Type;

    /// fract with Float16x2
    fract_Float16x2_arg.name = "val"_c;
    fract_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    fract_Float16x2.documentation = "Returns the fractional part of the input."_c;
    fract_Float16x2.name = "fract"_c;
    fract_Float16x2.backendIndex = 1723;
    fract_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    fract_Float16x2.parameters = fract_Float16x2_args;
    Symbol::Resolved(&fract_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&fract_Float16x2)->signature = "f16x2 fract(f16x2)"_c;
    Symbol::Resolved(&fract_Float16x2)->name = "fract(f16x2)"_c;
    Symbol::Resolved(&fract_Float16x2)->nameWithVarNames = "fract(val : f16x2)"_c;
    Symbol::Resolved(&fract_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// fract with Float16x3
    fract_Float16x3_arg.name = "val"_c;
    fract_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    fract_Float16x3.documentation = "Returns the fractional part of the input."_c;
    fract_Float16x3.name = "fract"_c;
    fract_Float16x3.backendIndex = 1724;
    fract_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    fract_Float16x3.parameters = fract_Float16x3_args;
    Symbol::Resolved(&fract_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&fract_Float16x3)->signature = "f16x3 fract(f16x3)"_c;
    Symbol::Resolved(&fract_Float16x3)->name = "fract(f16x3)"_c;
    Symbol::Resolved(&fract_Float16x3)->nameWithVarNames = "fract(val : f16x3)"_c;
    Symbol::Resolved(&fract_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// fract with Float16x4
    fract_Float16x4_arg.name = "val"_c;
    fract_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    fract_Float16x4.documentation = "Returns the fractional part of the input."_c;
    fract_Float16x4.name = "fract"_c;
    fract_Float16x4.backendIndex = 1725;
    fract_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    fract_Float16x4.parameters = fract_Float16x4_args;
    Symbol::Resolved(&fract_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&fract_Float16x4)->signature = "f16x4 fract(f16x4)"_c;
    Symbol::Resolved(&fract_Float16x4)->name = "fract(f16x4)"_c;
    Symbol::Resolved(&fract_Float16x4)->nameWithVarNames = "fract(val : f16x4)"_c;
    Symbol::Resolved(&fract_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// saturate with Float32
    saturate_Float32_arg.name = "val"_c;
    saturate_Float32_arg.type = Type::FullType{ Float32Type.name };
    saturate_Float32.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float32.name = "saturate"_c;
    saturate_Float32.backendIndex = 1726;
    saturate_Float32.returnType = Type::FullType { Float32Type.name };
    saturate_Float32.parameters = saturate_Float32_args;
    Symbol::Resolved(&saturate_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&saturate_Float32)->signature = "f32 saturate(f32)"_c;
    Symbol::Resolved(&saturate_Float32)->name = "saturate(f32)"_c;
    Symbol::Resolved(&saturate_Float32)->nameWithVarNames = "saturate(val : f32)"_c;
    Symbol::Resolved(&saturate_Float32)->returnTypeSymbol = &Float32Type;

    /// saturate with Float32x2
    saturate_Float32x2_arg.name = "val"_c;
    saturate_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    saturate_Float32x2.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float32x2.name = "saturate"_c;
    saturate_Float32x2.backendIndex = 1727;
    saturate_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    saturate_Float32x2.parameters = saturate_Float32x2_args;
    Symbol::Resolved(&saturate_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&saturate_Float32x2)->signature = "f32x2 saturate(f32x2)"_c;
    Symbol::Resolved(&saturate_Float32x2)->name = "saturate(f32x2)"_c;
    Symbol::Resolved(&saturate_Float32x2)->nameWithVarNames = "saturate(val : f32x2)"_c;
    Symbol::Resolved(&saturate_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// saturate with Float32x3
    saturate_Float32x3_arg.name = "val"_c;
    saturate_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    saturate_Float32x3.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float32x3.name = "saturate"_c;
    saturate_Float32x3.backendIndex = 1728;
    saturate_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    saturate_Float32x3.parameters = saturate_Float32x3_args;
    Symbol::Resolved(&saturate_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&saturate_Float32x3)->signature = "f32x3 saturate(f32x3)"_c;
    Symbol::Resolved(&saturate_Float32x3)->name = "saturate(f32x3)"_c;
    Symbol::Resolved(&saturate_Float32x3)->nameWithVarNames = "saturate(val : f32x3)"_c;
    Symbol::Resolved(&saturate_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// saturate with Float32x4
    saturate_Float32x4_arg.name = "val"_c;
    saturate_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    saturate_Float32x4.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float32x4.name = "saturate"_c;
    saturate_Float32x4.backendIndex = 1729;
    saturate_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    saturate_Float32x4.parameters = saturate_Float32x4_args;
    Symbol::Resolved(&saturate_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&saturate_Float32x4)->signature = "f32x4 saturate(f32x4)"_c;
    Symbol::Resolved(&saturate_Float32x4)->name = "saturate(f32x4)"_c;
    Symbol::Resolved(&saturate_Float32x4)->nameWithVarNames = "saturate(val : f32x4)"_c;
    Symbol::Resolved(&saturate_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// saturate with Float16
    saturate_Float16_arg.name = "val"_c;
    saturate_Float16_arg.type = Type::FullType{ Float16Type.name };
    saturate_Float16.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float16.name = "saturate"_c;
    saturate_Float16.backendIndex = 1730;
    saturate_Float16.returnType = Type::FullType { Float16Type.name };
    saturate_Float16.parameters = saturate_Float16_args;
    Symbol::Resolved(&saturate_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&saturate_Float16)->signature = "f16 saturate(f16)"_c;
    Symbol::Resolved(&saturate_Float16)->name = "saturate(f16)"_c;
    Symbol::Resolved(&saturate_Float16)->nameWithVarNames = "saturate(val : f16)"_c;
    Symbol::Resolved(&saturate_Float16)->returnTypeSymbol = &Float16Type;

    /// saturate with Float16x2
    saturate_Float16x2_arg.name = "val"_c;
    saturate_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    saturate_Float16x2.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float16x2.name = "saturate"_c;
    saturate_Float16x2.backendIndex = 1731;
    saturate_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    saturate_Float16x2.parameters = saturate_Float16x2_args;
    Symbol::Resolved(&saturate_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&saturate_Float16x2)->signature = "f16x2 saturate(f16x2)"_c;
    Symbol::Resolved(&saturate_Float16x2)->name = "saturate(f16x2)"_c;
    Symbol::Resolved(&saturate_Float16x2)->nameWithVarNames = "saturate(val : f16x2)"_c;
    Symbol::Resolved(&saturate_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// saturate with Float16x3
    saturate_Float16x3_arg.name = "val"_c;
    saturate_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    saturate_Float16x3.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float16x3.name = "saturate"_c;
    saturate_Float16x3.backendIndex = 1732;
    saturate_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    saturate_Float16x3.parameters = saturate_Float16x3_args;
    Symbol::Resolved(&saturate_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&saturate_Float16x3)->signature = "f16x3 saturate(f16x3)"_c;
    Symbol::Resolved(&saturate_Float16x3)->name = "saturate(f16x3)"_c;
    Symbol::Resolved(&saturate_Float16x3)->nameWithVarNames = "saturate(val : f16x3)"_c;
    Symbol::Resolved(&saturate_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// saturate with Float16x4
    saturate_Float16x4_arg.name = "val"_c;
    saturate_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    saturate_Float16x4.documentation = "Returns the input clamped to the range [0, 1]."_c;
    saturate_Float16x4.name = "saturate"_c;
    saturate_Float16x4.backendIndex = 1733;
    saturate_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    saturate_Float16x4.parameters = saturate_Float16x4_args;
    Symbol::Resolved(&saturate_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&saturate_Float16x4)->signature = "f16x4 saturate(f16x4)"_c;
    Symbol::Resolved(&saturate_Float16x4)->name = "saturate(f16x4)"_c;
    Symbol::Resolved(&saturate_Float16x4)->nameWithVarNames = "saturate(val : f16x4)"_c;
    Symbol::Resolved(&saturate_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// trunc with Float32
    trunc_Float32_arg.name = "val"_c;
    trunc_Float32_arg.type = Type::FullType{ Float32Type.name };
    trunc_Float32.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float32.name = "trunc"_c;
    trunc_Float32.backendIndex = 1734;
    trunc_Float32.returnType = Type::FullType { Float32Type.name };
    trunc_Float32.parameters = trunc_Float32_args;
    Symbol::Resolved(&trunc_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&trunc_Float32)->signature = "f32 trunc(f32)"_c;
    Symbol::Resolved(&trunc_Float32)->name = "trunc(f32)"_c;
    Symbol::Resolved(&trunc_Float32)->nameWithVarNames = "trunc(val : f32)"_c;
    Symbol::Resolved(&trunc_Float32)->returnTypeSymbol = &Float32Type;

    /// trunc with Float32x2
    trunc_Float32x2_arg.name = "val"_c;
    trunc_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    trunc_Float32x2.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float32x2.name = "trunc"_c;
    trunc_Float32x2.backendIndex = 1735;
    trunc_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    trunc_Float32x2.parameters = trunc_Float32x2_args;
    Symbol::Resolved(&trunc_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&trunc_Float32x2)->signature = "f32x2 trunc(f32x2)"_c;
    Symbol::Resolved(&trunc_Float32x2)->name = "trunc(f32x2)"_c;
    Symbol::Resolved(&trunc_Float32x2)->nameWithVarNames = "trunc(val : f32x2)"_c;
    Symbol::Resolved(&trunc_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// trunc with Float32x3
    trunc_Float32x3_arg.name = "val"_c;
    trunc_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    trunc_Float32x3.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float32x3.name = "trunc"_c;
    trunc_Float32x3.backendIndex = 1736;
    trunc_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    trunc_Float32x3.parameters = trunc_Float32x3_args;
    Symbol::Resolved(&trunc_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&trunc_Float32x3)->signature = "f32x3 trunc(f32x3)"_c;
    Symbol::Resolved(&trunc_Float32x3)->name = "trunc(f32x3)"_c;
    Symbol::Resolved(&trunc_Float32x3)->nameWithVarNames = "trunc(val : f32x3)"_c;
    Symbol::Resolved(&trunc_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// trunc with Float32x4
    trunc_Float32x4_arg.name = "val"_c;
    trunc_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    trunc_Float32x4.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float32x4.name = "trunc"_c;
    trunc_Float32x4.backendIndex = 1737;
    trunc_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    trunc_Float32x4.parameters = trunc_Float32x4_args;
    Symbol::Resolved(&trunc_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&trunc_Float32x4)->signature = "f32x4 trunc(f32x4)"_c;
    Symbol::Resolved(&trunc_Float32x4)->name = "trunc(f32x4)"_c;
    Symbol::Resolved(&trunc_Float32x4)->nameWithVarNames = "trunc(val : f32x4)"_c;
    Symbol::Resolved(&trunc_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// trunc with Float16
    trunc_Float16_arg.name = "val"_c;
    trunc_Float16_arg.type = Type::FullType{ Float16Type.name };
    trunc_Float16.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float16.name = "trunc"_c;
    trunc_Float16.backendIndex = 1738;
    trunc_Float16.returnType = Type::FullType { Float16Type.name };
    trunc_Float16.parameters = trunc_Float16_args;
    Symbol::Resolved(&trunc_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&trunc_Float16)->signature = "f16 trunc(f16)"_c;
    Symbol::Resolved(&trunc_Float16)->name = "trunc(f16)"_c;
    Symbol::Resolved(&trunc_Float16)->nameWithVarNames = "trunc(val : f16)"_c;
    Symbol::Resolved(&trunc_Float16)->returnTypeSymbol = &Float16Type;

    /// trunc with Float16x2
    trunc_Float16x2_arg.name = "val"_c;
    trunc_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    trunc_Float16x2.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float16x2.name = "trunc"_c;
    trunc_Float16x2.backendIndex = 1739;
    trunc_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    trunc_Float16x2.parameters = trunc_Float16x2_args;
    Symbol::Resolved(&trunc_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&trunc_Float16x2)->signature = "f16x2 trunc(f16x2)"_c;
    Symbol::Resolved(&trunc_Float16x2)->name = "trunc(f16x2)"_c;
    Symbol::Resolved(&trunc_Float16x2)->nameWithVarNames = "trunc(val : f16x2)"_c;
    Symbol::Resolved(&trunc_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// trunc with Float16x3
    trunc_Float16x3_arg.name = "val"_c;
    trunc_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    trunc_Float16x3.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float16x3.name = "trunc"_c;
    trunc_Float16x3.backendIndex = 1740;
    trunc_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    trunc_Float16x3.parameters = trunc_Float16x3_args;
    Symbol::Resolved(&trunc_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&trunc_Float16x3)->signature = "f16x3 trunc(f16x3)"_c;
    Symbol::Resolved(&trunc_Float16x3)->name = "trunc(f16x3)"_c;
    Symbol::Resolved(&trunc_Float16x3)->nameWithVarNames = "trunc(val : f16x3)"_c;
    Symbol::Resolved(&trunc_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// trunc with Float16x4
    trunc_Float16x4_arg.name = "val"_c;
    trunc_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    trunc_Float16x4.documentation = "Returns the integer part of the input, removing any fractional part."_c;
    trunc_Float16x4.name = "trunc"_c;
    trunc_Float16x4.backendIndex = 1741;
    trunc_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    trunc_Float16x4.parameters = trunc_Float16x4_args;
    Symbol::Resolved(&trunc_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&trunc_Float16x4)->signature = "f16x4 trunc(f16x4)"_c;
    Symbol::Resolved(&trunc_Float16x4)->name = "trunc(f16x4)"_c;
    Symbol::Resolved(&trunc_Float16x4)->nameWithVarNames = "trunc(val : f16x4)"_c;
    Symbol::Resolved(&trunc_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// ddx with Float32
    ddx_Float32_arg.name = "val"_c;
    ddx_Float32_arg.type = Type::FullType{ Float32Type.name };
    ddx_Float32.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float32.name = "ddx"_c;
    ddx_Float32.backendIndex = 1742;
    ddx_Float32.returnType = Type::FullType { Float32Type.name };
    ddx_Float32.parameters = ddx_Float32_args;
    Symbol::Resolved(&ddx_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ddx_Float32)->signature = "f32 ddx(f32)"_c;
    Symbol::Resolved(&ddx_Float32)->name = "ddx(f32)"_c;
    Symbol::Resolved(&ddx_Float32)->nameWithVarNames = "ddx(val : f32)"_c;
    Symbol::Resolved(&ddx_Float32)->returnTypeSymbol = &Float32Type;

    /// ddx with Float32x2
    ddx_Float32x2_arg.name = "val"_c;
    ddx_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ddx_Float32x2.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float32x2.name = "ddx"_c;
    ddx_Float32x2.backendIndex = 1743;
    ddx_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    ddx_Float32x2.parameters = ddx_Float32x2_args;
    Symbol::Resolved(&ddx_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ddx_Float32x2)->signature = "f32x2 ddx(f32x2)"_c;
    Symbol::Resolved(&ddx_Float32x2)->name = "ddx(f32x2)"_c;
    Symbol::Resolved(&ddx_Float32x2)->nameWithVarNames = "ddx(val : f32x2)"_c;
    Symbol::Resolved(&ddx_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// ddx with Float32x3
    ddx_Float32x3_arg.name = "val"_c;
    ddx_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ddx_Float32x3.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float32x3.name = "ddx"_c;
    ddx_Float32x3.backendIndex = 1744;
    ddx_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    ddx_Float32x3.parameters = ddx_Float32x3_args;
    Symbol::Resolved(&ddx_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ddx_Float32x3)->signature = "f32x3 ddx(f32x3)"_c;
    Symbol::Resolved(&ddx_Float32x3)->name = "ddx(f32x3)"_c;
    Symbol::Resolved(&ddx_Float32x3)->nameWithVarNames = "ddx(val : f32x3)"_c;
    Symbol::Resolved(&ddx_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// ddx with Float32x4
    ddx_Float32x4_arg.name = "val"_c;
    ddx_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ddx_Float32x4.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float32x4.name = "ddx"_c;
    ddx_Float32x4.backendIndex = 1745;
    ddx_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    ddx_Float32x4.parameters = ddx_Float32x4_args;
    Symbol::Resolved(&ddx_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ddx_Float32x4)->signature = "f32x4 ddx(f32x4)"_c;
    Symbol::Resolved(&ddx_Float32x4)->name = "ddx(f32x4)"_c;
    Symbol::Resolved(&ddx_Float32x4)->nameWithVarNames = "ddx(val : f32x4)"_c;
    Symbol::Resolved(&ddx_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// ddx with Float16
    ddx_Float16_arg.name = "val"_c;
    ddx_Float16_arg.type = Type::FullType{ Float16Type.name };
    ddx_Float16.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float16.name = "ddx"_c;
    ddx_Float16.backendIndex = 1746;
    ddx_Float16.returnType = Type::FullType { Float16Type.name };
    ddx_Float16.parameters = ddx_Float16_args;
    Symbol::Resolved(&ddx_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ddx_Float16)->signature = "f16 ddx(f16)"_c;
    Symbol::Resolved(&ddx_Float16)->name = "ddx(f16)"_c;
    Symbol::Resolved(&ddx_Float16)->nameWithVarNames = "ddx(val : f16)"_c;
    Symbol::Resolved(&ddx_Float16)->returnTypeSymbol = &Float16Type;

    /// ddx with Float16x2
    ddx_Float16x2_arg.name = "val"_c;
    ddx_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ddx_Float16x2.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float16x2.name = "ddx"_c;
    ddx_Float16x2.backendIndex = 1747;
    ddx_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    ddx_Float16x2.parameters = ddx_Float16x2_args;
    Symbol::Resolved(&ddx_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ddx_Float16x2)->signature = "f16x2 ddx(f16x2)"_c;
    Symbol::Resolved(&ddx_Float16x2)->name = "ddx(f16x2)"_c;
    Symbol::Resolved(&ddx_Float16x2)->nameWithVarNames = "ddx(val : f16x2)"_c;
    Symbol::Resolved(&ddx_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// ddx with Float16x3
    ddx_Float16x3_arg.name = "val"_c;
    ddx_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ddx_Float16x3.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float16x3.name = "ddx"_c;
    ddx_Float16x3.backendIndex = 1748;
    ddx_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    ddx_Float16x3.parameters = ddx_Float16x3_args;
    Symbol::Resolved(&ddx_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ddx_Float16x3)->signature = "f16x3 ddx(f16x3)"_c;
    Symbol::Resolved(&ddx_Float16x3)->name = "ddx(f16x3)"_c;
    Symbol::Resolved(&ddx_Float16x3)->nameWithVarNames = "ddx(val : f16x3)"_c;
    Symbol::Resolved(&ddx_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// ddx with Float16x4
    ddx_Float16x4_arg.name = "val"_c;
    ddx_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ddx_Float16x4.documentation = "Returns the derivative of the input with respect to the screen x coordinate."_c;
    ddx_Float16x4.name = "ddx"_c;
    ddx_Float16x4.backendIndex = 1749;
    ddx_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    ddx_Float16x4.parameters = ddx_Float16x4_args;
    Symbol::Resolved(&ddx_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ddx_Float16x4)->signature = "f16x4 ddx(f16x4)"_c;
    Symbol::Resolved(&ddx_Float16x4)->name = "ddx(f16x4)"_c;
    Symbol::Resolved(&ddx_Float16x4)->nameWithVarNames = "ddx(val : f16x4)"_c;
    Symbol::Resolved(&ddx_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// ddy with Float32
    ddy_Float32_arg.name = "val"_c;
    ddy_Float32_arg.type = Type::FullType{ Float32Type.name };
    ddy_Float32.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float32.name = "ddy"_c;
    ddy_Float32.backendIndex = 1750;
    ddy_Float32.returnType = Type::FullType { Float32Type.name };
    ddy_Float32.parameters = ddy_Float32_args;
    Symbol::Resolved(&ddy_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ddy_Float32)->signature = "f32 ddy(f32)"_c;
    Symbol::Resolved(&ddy_Float32)->name = "ddy(f32)"_c;
    Symbol::Resolved(&ddy_Float32)->nameWithVarNames = "ddy(val : f32)"_c;
    Symbol::Resolved(&ddy_Float32)->returnTypeSymbol = &Float32Type;

    /// ddy with Float32x2
    ddy_Float32x2_arg.name = "val"_c;
    ddy_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ddy_Float32x2.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float32x2.name = "ddy"_c;
    ddy_Float32x2.backendIndex = 1751;
    ddy_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    ddy_Float32x2.parameters = ddy_Float32x2_args;
    Symbol::Resolved(&ddy_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ddy_Float32x2)->signature = "f32x2 ddy(f32x2)"_c;
    Symbol::Resolved(&ddy_Float32x2)->name = "ddy(f32x2)"_c;
    Symbol::Resolved(&ddy_Float32x2)->nameWithVarNames = "ddy(val : f32x2)"_c;
    Symbol::Resolved(&ddy_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// ddy with Float32x3
    ddy_Float32x3_arg.name = "val"_c;
    ddy_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ddy_Float32x3.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float32x3.name = "ddy"_c;
    ddy_Float32x3.backendIndex = 1752;
    ddy_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    ddy_Float32x3.parameters = ddy_Float32x3_args;
    Symbol::Resolved(&ddy_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ddy_Float32x3)->signature = "f32x3 ddy(f32x3)"_c;
    Symbol::Resolved(&ddy_Float32x3)->name = "ddy(f32x3)"_c;
    Symbol::Resolved(&ddy_Float32x3)->nameWithVarNames = "ddy(val : f32x3)"_c;
    Symbol::Resolved(&ddy_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// ddy with Float32x4
    ddy_Float32x4_arg.name = "val"_c;
    ddy_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ddy_Float32x4.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float32x4.name = "ddy"_c;
    ddy_Float32x4.backendIndex = 1753;
    ddy_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    ddy_Float32x4.parameters = ddy_Float32x4_args;
    Symbol::Resolved(&ddy_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ddy_Float32x4)->signature = "f32x4 ddy(f32x4)"_c;
    Symbol::Resolved(&ddy_Float32x4)->name = "ddy(f32x4)"_c;
    Symbol::Resolved(&ddy_Float32x4)->nameWithVarNames = "ddy(val : f32x4)"_c;
    Symbol::Resolved(&ddy_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// ddy with Float16
    ddy_Float16_arg.name = "val"_c;
    ddy_Float16_arg.type = Type::FullType{ Float16Type.name };
    ddy_Float16.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float16.name = "ddy"_c;
    ddy_Float16.backendIndex = 1754;
    ddy_Float16.returnType = Type::FullType { Float16Type.name };
    ddy_Float16.parameters = ddy_Float16_args;
    Symbol::Resolved(&ddy_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ddy_Float16)->signature = "f16 ddy(f16)"_c;
    Symbol::Resolved(&ddy_Float16)->name = "ddy(f16)"_c;
    Symbol::Resolved(&ddy_Float16)->nameWithVarNames = "ddy(val : f16)"_c;
    Symbol::Resolved(&ddy_Float16)->returnTypeSymbol = &Float16Type;

    /// ddy with Float16x2
    ddy_Float16x2_arg.name = "val"_c;
    ddy_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ddy_Float16x2.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float16x2.name = "ddy"_c;
    ddy_Float16x2.backendIndex = 1755;
    ddy_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    ddy_Float16x2.parameters = ddy_Float16x2_args;
    Symbol::Resolved(&ddy_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ddy_Float16x2)->signature = "f16x2 ddy(f16x2)"_c;
    Symbol::Resolved(&ddy_Float16x2)->name = "ddy(f16x2)"_c;
    Symbol::Resolved(&ddy_Float16x2)->nameWithVarNames = "ddy(val : f16x2)"_c;
    Symbol::Resolved(&ddy_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// ddy with Float16x3
    ddy_Float16x3_arg.name = "val"_c;
    ddy_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ddy_Float16x3.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float16x3.name = "ddy"_c;
    ddy_Float16x3.backendIndex = 1756;
    ddy_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    ddy_Float16x3.parameters = ddy_Float16x3_args;
    Symbol::Resolved(&ddy_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ddy_Float16x3)->signature = "f16x3 ddy(f16x3)"_c;
    Symbol::Resolved(&ddy_Float16x3)->name = "ddy(f16x3)"_c;
    Symbol::Resolved(&ddy_Float16x3)->nameWithVarNames = "ddy(val : f16x3)"_c;
    Symbol::Resolved(&ddy_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// ddy with Float16x4
    ddy_Float16x4_arg.name = "val"_c;
    ddy_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ddy_Float16x4.documentation = "Returns the derivative of the input with respect to the screen y coordinate."_c;
    ddy_Float16x4.name = "ddy"_c;
    ddy_Float16x4.backendIndex = 1757;
    ddy_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    ddy_Float16x4.parameters = ddy_Float16x4_args;
    Symbol::Resolved(&ddy_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ddy_Float16x4)->signature = "f16x4 ddy(f16x4)"_c;
    Symbol::Resolved(&ddy_Float16x4)->name = "ddy(f16x4)"_c;
    Symbol::Resolved(&ddy_Float16x4)->nameWithVarNames = "ddy(val : f16x4)"_c;
    Symbol::Resolved(&ddy_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// fwidth with Float32
    fwidth_Float32_arg.name = "val"_c;
    fwidth_Float32_arg.type = Type::FullType{ Float32Type.name };
    fwidth_Float32.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float32.name = "fwidth"_c;
    fwidth_Float32.backendIndex = 1758;
    fwidth_Float32.returnType = Type::FullType { Float32Type.name };
    fwidth_Float32.parameters = fwidth_Float32_args;
    Symbol::Resolved(&fwidth_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&fwidth_Float32)->signature = "f32 fwidth(f32)"_c;
    Symbol::Resolved(&fwidth_Float32)->name = "fwidth(f32)"_c;
    Symbol::Resolved(&fwidth_Float32)->nameWithVarNames = "fwidth(val : f32)"_c;
    Symbol::Resolved(&fwidth_Float32)->returnTypeSymbol = &Float32Type;

    /// fwidth with Float32x2
    fwidth_Float32x2_arg.name = "val"_c;
    fwidth_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    fwidth_Float32x2.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float32x2.name = "fwidth"_c;
    fwidth_Float32x2.backendIndex = 1759;
    fwidth_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    fwidth_Float32x2.parameters = fwidth_Float32x2_args;
    Symbol::Resolved(&fwidth_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&fwidth_Float32x2)->signature = "f32x2 fwidth(f32x2)"_c;
    Symbol::Resolved(&fwidth_Float32x2)->name = "fwidth(f32x2)"_c;
    Symbol::Resolved(&fwidth_Float32x2)->nameWithVarNames = "fwidth(val : f32x2)"_c;
    Symbol::Resolved(&fwidth_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// fwidth with Float32x3
    fwidth_Float32x3_arg.name = "val"_c;
    fwidth_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    fwidth_Float32x3.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float32x3.name = "fwidth"_c;
    fwidth_Float32x3.backendIndex = 1760;
    fwidth_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    fwidth_Float32x3.parameters = fwidth_Float32x3_args;
    Symbol::Resolved(&fwidth_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&fwidth_Float32x3)->signature = "f32x3 fwidth(f32x3)"_c;
    Symbol::Resolved(&fwidth_Float32x3)->name = "fwidth(f32x3)"_c;
    Symbol::Resolved(&fwidth_Float32x3)->nameWithVarNames = "fwidth(val : f32x3)"_c;
    Symbol::Resolved(&fwidth_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// fwidth with Float32x4
    fwidth_Float32x4_arg.name = "val"_c;
    fwidth_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    fwidth_Float32x4.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float32x4.name = "fwidth"_c;
    fwidth_Float32x4.backendIndex = 1761;
    fwidth_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    fwidth_Float32x4.parameters = fwidth_Float32x4_args;
    Symbol::Resolved(&fwidth_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&fwidth_Float32x4)->signature = "f32x4 fwidth(f32x4)"_c;
    Symbol::Resolved(&fwidth_Float32x4)->name = "fwidth(f32x4)"_c;
    Symbol::Resolved(&fwidth_Float32x4)->nameWithVarNames = "fwidth(val : f32x4)"_c;
    Symbol::Resolved(&fwidth_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// fwidth with Float16
    fwidth_Float16_arg.name = "val"_c;
    fwidth_Float16_arg.type = Type::FullType{ Float16Type.name };
    fwidth_Float16.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float16.name = "fwidth"_c;
    fwidth_Float16.backendIndex = 1762;
    fwidth_Float16.returnType = Type::FullType { Float16Type.name };
    fwidth_Float16.parameters = fwidth_Float16_args;
    Symbol::Resolved(&fwidth_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&fwidth_Float16)->signature = "f16 fwidth(f16)"_c;
    Symbol::Resolved(&fwidth_Float16)->name = "fwidth(f16)"_c;
    Symbol::Resolved(&fwidth_Float16)->nameWithVarNames = "fwidth(val : f16)"_c;
    Symbol::Resolved(&fwidth_Float16)->returnTypeSymbol = &Float16Type;

    /// fwidth with Float16x2
    fwidth_Float16x2_arg.name = "val"_c;
    fwidth_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    fwidth_Float16x2.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float16x2.name = "fwidth"_c;
    fwidth_Float16x2.backendIndex = 1763;
    fwidth_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    fwidth_Float16x2.parameters = fwidth_Float16x2_args;
    Symbol::Resolved(&fwidth_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&fwidth_Float16x2)->signature = "f16x2 fwidth(f16x2)"_c;
    Symbol::Resolved(&fwidth_Float16x2)->name = "fwidth(f16x2)"_c;
    Symbol::Resolved(&fwidth_Float16x2)->nameWithVarNames = "fwidth(val : f16x2)"_c;
    Symbol::Resolved(&fwidth_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// fwidth with Float16x3
    fwidth_Float16x3_arg.name = "val"_c;
    fwidth_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    fwidth_Float16x3.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float16x3.name = "fwidth"_c;
    fwidth_Float16x3.backendIndex = 1764;
    fwidth_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    fwidth_Float16x3.parameters = fwidth_Float16x3_args;
    Symbol::Resolved(&fwidth_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&fwidth_Float16x3)->signature = "f16x3 fwidth(f16x3)"_c;
    Symbol::Resolved(&fwidth_Float16x3)->name = "fwidth(f16x3)"_c;
    Symbol::Resolved(&fwidth_Float16x3)->nameWithVarNames = "fwidth(val : f16x3)"_c;
    Symbol::Resolved(&fwidth_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// fwidth with Float16x4
    fwidth_Float16x4_arg.name = "val"_c;
    fwidth_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    fwidth_Float16x4.documentation = "Returns the width of the input, which is the maximum of the absolute values of the derivatives in the screen x and y coordinates."_c;
    fwidth_Float16x4.name = "fwidth"_c;
    fwidth_Float16x4.backendIndex = 1765;
    fwidth_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    fwidth_Float16x4.parameters = fwidth_Float16x4_args;
    Symbol::Resolved(&fwidth_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&fwidth_Float16x4)->signature = "f16x4 fwidth(f16x4)"_c;
    Symbol::Resolved(&fwidth_Float16x4)->name = "fwidth(f16x4)"_c;
    Symbol::Resolved(&fwidth_Float16x4)->nameWithVarNames = "fwidth(val : f16x4)"_c;
    Symbol::Resolved(&fwidth_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// sign with Int32
    sign_Int32_arg.name = "val"_c;
    sign_Int32_arg.type = Type::FullType{ Int32Type.name };
    sign_Int32.documentation = "Returns the sign of the value."_c;
    sign_Int32.name = "sign"_c;
    sign_Int32.backendIndex = 1766;
    sign_Int32.returnType = Type::FullType { Int32Type.name };
    sign_Int32.parameters = sign_Int32_args;
    Symbol::Resolved(&sign_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&sign_Int32)->signature = "i32 sign(i32)"_c;
    Symbol::Resolved(&sign_Int32)->name = "sign(i32)"_c;
    Symbol::Resolved(&sign_Int32)->nameWithVarNames = "sign(val : i32)"_c;
    Symbol::Resolved(&sign_Int32)->returnTypeSymbol = &Int32Type;

    /// sign with Int32x2
    sign_Int32x2_arg.name = "val"_c;
    sign_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    sign_Int32x2.documentation = "Returns the sign of the value."_c;
    sign_Int32x2.name = "sign"_c;
    sign_Int32x2.backendIndex = 1767;
    sign_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    sign_Int32x2.parameters = sign_Int32x2_args;
    Symbol::Resolved(&sign_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&sign_Int32x2)->signature = "i32x2 sign(i32x2)"_c;
    Symbol::Resolved(&sign_Int32x2)->name = "sign(i32x2)"_c;
    Symbol::Resolved(&sign_Int32x2)->nameWithVarNames = "sign(val : i32x2)"_c;
    Symbol::Resolved(&sign_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// sign with Int32x3
    sign_Int32x3_arg.name = "val"_c;
    sign_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    sign_Int32x3.documentation = "Returns the sign of the value."_c;
    sign_Int32x3.name = "sign"_c;
    sign_Int32x3.backendIndex = 1768;
    sign_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    sign_Int32x3.parameters = sign_Int32x3_args;
    Symbol::Resolved(&sign_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&sign_Int32x3)->signature = "i32x3 sign(i32x3)"_c;
    Symbol::Resolved(&sign_Int32x3)->name = "sign(i32x3)"_c;
    Symbol::Resolved(&sign_Int32x3)->nameWithVarNames = "sign(val : i32x3)"_c;
    Symbol::Resolved(&sign_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// sign with Int32x4
    sign_Int32x4_arg.name = "val"_c;
    sign_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    sign_Int32x4.documentation = "Returns the sign of the value."_c;
    sign_Int32x4.name = "sign"_c;
    sign_Int32x4.backendIndex = 1769;
    sign_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    sign_Int32x4.parameters = sign_Int32x4_args;
    Symbol::Resolved(&sign_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&sign_Int32x4)->signature = "i32x4 sign(i32x4)"_c;
    Symbol::Resolved(&sign_Int32x4)->name = "sign(i32x4)"_c;
    Symbol::Resolved(&sign_Int32x4)->nameWithVarNames = "sign(val : i32x4)"_c;
    Symbol::Resolved(&sign_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// sign with Int16
    sign_Int16_arg.name = "val"_c;
    sign_Int16_arg.type = Type::FullType{ Int16Type.name };
    sign_Int16.documentation = "Returns the sign of the value."_c;
    sign_Int16.name = "sign"_c;
    sign_Int16.backendIndex = 1770;
    sign_Int16.returnType = Type::FullType { Int16Type.name };
    sign_Int16.parameters = sign_Int16_args;
    Symbol::Resolved(&sign_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&sign_Int16)->signature = "i16 sign(i16)"_c;
    Symbol::Resolved(&sign_Int16)->name = "sign(i16)"_c;
    Symbol::Resolved(&sign_Int16)->nameWithVarNames = "sign(val : i16)"_c;
    Symbol::Resolved(&sign_Int16)->returnTypeSymbol = &Int16Type;

    /// sign with Int16x2
    sign_Int16x2_arg.name = "val"_c;
    sign_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    sign_Int16x2.documentation = "Returns the sign of the value."_c;
    sign_Int16x2.name = "sign"_c;
    sign_Int16x2.backendIndex = 1771;
    sign_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    sign_Int16x2.parameters = sign_Int16x2_args;
    Symbol::Resolved(&sign_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&sign_Int16x2)->signature = "i16x2 sign(i16x2)"_c;
    Symbol::Resolved(&sign_Int16x2)->name = "sign(i16x2)"_c;
    Symbol::Resolved(&sign_Int16x2)->nameWithVarNames = "sign(val : i16x2)"_c;
    Symbol::Resolved(&sign_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// sign with Int16x3
    sign_Int16x3_arg.name = "val"_c;
    sign_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    sign_Int16x3.documentation = "Returns the sign of the value."_c;
    sign_Int16x3.name = "sign"_c;
    sign_Int16x3.backendIndex = 1772;
    sign_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    sign_Int16x3.parameters = sign_Int16x3_args;
    Symbol::Resolved(&sign_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&sign_Int16x3)->signature = "i16x3 sign(i16x3)"_c;
    Symbol::Resolved(&sign_Int16x3)->name = "sign(i16x3)"_c;
    Symbol::Resolved(&sign_Int16x3)->nameWithVarNames = "sign(val : i16x3)"_c;
    Symbol::Resolved(&sign_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// sign with Int16x4
    sign_Int16x4_arg.name = "val"_c;
    sign_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    sign_Int16x4.documentation = "Returns the sign of the value."_c;
    sign_Int16x4.name = "sign"_c;
    sign_Int16x4.backendIndex = 1773;
    sign_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    sign_Int16x4.parameters = sign_Int16x4_args;
    Symbol::Resolved(&sign_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&sign_Int16x4)->signature = "i16x4 sign(i16x4)"_c;
    Symbol::Resolved(&sign_Int16x4)->name = "sign(i16x4)"_c;
    Symbol::Resolved(&sign_Int16x4)->nameWithVarNames = "sign(val : i16x4)"_c;
    Symbol::Resolved(&sign_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// sign with Float32
    sign_Float32_arg.name = "val"_c;
    sign_Float32_arg.type = Type::FullType{ Float32Type.name };
    sign_Float32.documentation = "Returns the sign of the value."_c;
    sign_Float32.name = "sign"_c;
    sign_Float32.backendIndex = 1774;
    sign_Float32.returnType = Type::FullType { Float32Type.name };
    sign_Float32.parameters = sign_Float32_args;
    Symbol::Resolved(&sign_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sign_Float32)->signature = "f32 sign(f32)"_c;
    Symbol::Resolved(&sign_Float32)->name = "sign(f32)"_c;
    Symbol::Resolved(&sign_Float32)->nameWithVarNames = "sign(val : f32)"_c;
    Symbol::Resolved(&sign_Float32)->returnTypeSymbol = &Float32Type;

    /// sign with Float32x2
    sign_Float32x2_arg.name = "val"_c;
    sign_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sign_Float32x2.documentation = "Returns the sign of the value."_c;
    sign_Float32x2.name = "sign"_c;
    sign_Float32x2.backendIndex = 1775;
    sign_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    sign_Float32x2.parameters = sign_Float32x2_args;
    Symbol::Resolved(&sign_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sign_Float32x2)->signature = "f32x2 sign(f32x2)"_c;
    Symbol::Resolved(&sign_Float32x2)->name = "sign(f32x2)"_c;
    Symbol::Resolved(&sign_Float32x2)->nameWithVarNames = "sign(val : f32x2)"_c;
    Symbol::Resolved(&sign_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// sign with Float32x3
    sign_Float32x3_arg.name = "val"_c;
    sign_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sign_Float32x3.documentation = "Returns the sign of the value."_c;
    sign_Float32x3.name = "sign"_c;
    sign_Float32x3.backendIndex = 1776;
    sign_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    sign_Float32x3.parameters = sign_Float32x3_args;
    Symbol::Resolved(&sign_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sign_Float32x3)->signature = "f32x3 sign(f32x3)"_c;
    Symbol::Resolved(&sign_Float32x3)->name = "sign(f32x3)"_c;
    Symbol::Resolved(&sign_Float32x3)->nameWithVarNames = "sign(val : f32x3)"_c;
    Symbol::Resolved(&sign_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// sign with Float32x4
    sign_Float32x4_arg.name = "val"_c;
    sign_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sign_Float32x4.documentation = "Returns the sign of the value."_c;
    sign_Float32x4.name = "sign"_c;
    sign_Float32x4.backendIndex = 1777;
    sign_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    sign_Float32x4.parameters = sign_Float32x4_args;
    Symbol::Resolved(&sign_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sign_Float32x4)->signature = "f32x4 sign(f32x4)"_c;
    Symbol::Resolved(&sign_Float32x4)->name = "sign(f32x4)"_c;
    Symbol::Resolved(&sign_Float32x4)->nameWithVarNames = "sign(val : f32x4)"_c;
    Symbol::Resolved(&sign_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// sign with Float16
    sign_Float16_arg.name = "val"_c;
    sign_Float16_arg.type = Type::FullType{ Float16Type.name };
    sign_Float16.documentation = "Returns the sign of the value."_c;
    sign_Float16.name = "sign"_c;
    sign_Float16.backendIndex = 1778;
    sign_Float16.returnType = Type::FullType { Float16Type.name };
    sign_Float16.parameters = sign_Float16_args;
    Symbol::Resolved(&sign_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sign_Float16)->signature = "f16 sign(f16)"_c;
    Symbol::Resolved(&sign_Float16)->name = "sign(f16)"_c;
    Symbol::Resolved(&sign_Float16)->nameWithVarNames = "sign(val : f16)"_c;
    Symbol::Resolved(&sign_Float16)->returnTypeSymbol = &Float16Type;

    /// sign with Float16x2
    sign_Float16x2_arg.name = "val"_c;
    sign_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sign_Float16x2.documentation = "Returns the sign of the value."_c;
    sign_Float16x2.name = "sign"_c;
    sign_Float16x2.backendIndex = 1779;
    sign_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    sign_Float16x2.parameters = sign_Float16x2_args;
    Symbol::Resolved(&sign_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sign_Float16x2)->signature = "f16x2 sign(f16x2)"_c;
    Symbol::Resolved(&sign_Float16x2)->name = "sign(f16x2)"_c;
    Symbol::Resolved(&sign_Float16x2)->nameWithVarNames = "sign(val : f16x2)"_c;
    Symbol::Resolved(&sign_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// sign with Float16x3
    sign_Float16x3_arg.name = "val"_c;
    sign_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sign_Float16x3.documentation = "Returns the sign of the value."_c;
    sign_Float16x3.name = "sign"_c;
    sign_Float16x3.backendIndex = 1780;
    sign_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    sign_Float16x3.parameters = sign_Float16x3_args;
    Symbol::Resolved(&sign_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sign_Float16x3)->signature = "f16x3 sign(f16x3)"_c;
    Symbol::Resolved(&sign_Float16x3)->name = "sign(f16x3)"_c;
    Symbol::Resolved(&sign_Float16x3)->nameWithVarNames = "sign(val : f16x3)"_c;
    Symbol::Resolved(&sign_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// sign with Float16x4
    sign_Float16x4_arg.name = "val"_c;
    sign_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sign_Float16x4.documentation = "Returns the sign of the value."_c;
    sign_Float16x4.name = "sign"_c;
    sign_Float16x4.backendIndex = 1781;
    sign_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    sign_Float16x4.parameters = sign_Float16x4_args;
    Symbol::Resolved(&sign_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sign_Float16x4)->signature = "f16x4 sign(f16x4)"_c;
    Symbol::Resolved(&sign_Float16x4)->name = "sign(f16x4)"_c;
    Symbol::Resolved(&sign_Float16x4)->nameWithVarNames = "sign(val : f16x4)"_c;
    Symbol::Resolved(&sign_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// abs with Int32
    abs_Int32_arg.name = "val"_c;
    abs_Int32_arg.type = Type::FullType{ Int32Type.name };
    abs_Int32.documentation = "Returns the absolute value of the input."_c;
    abs_Int32.name = "abs"_c;
    abs_Int32.backendIndex = 1782;
    abs_Int32.returnType = Type::FullType { Int32Type.name };
    abs_Int32.parameters = abs_Int32_args;
    Symbol::Resolved(&abs_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&abs_Int32)->signature = "i32 abs(i32)"_c;
    Symbol::Resolved(&abs_Int32)->name = "abs(i32)"_c;
    Symbol::Resolved(&abs_Int32)->nameWithVarNames = "abs(val : i32)"_c;
    Symbol::Resolved(&abs_Int32)->returnTypeSymbol = &Int32Type;

    /// abs with Int32x2
    abs_Int32x2_arg.name = "val"_c;
    abs_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    abs_Int32x2.documentation = "Returns the absolute value of the input."_c;
    abs_Int32x2.name = "abs"_c;
    abs_Int32x2.backendIndex = 1783;
    abs_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    abs_Int32x2.parameters = abs_Int32x2_args;
    Symbol::Resolved(&abs_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&abs_Int32x2)->signature = "i32x2 abs(i32x2)"_c;
    Symbol::Resolved(&abs_Int32x2)->name = "abs(i32x2)"_c;
    Symbol::Resolved(&abs_Int32x2)->nameWithVarNames = "abs(val : i32x2)"_c;
    Symbol::Resolved(&abs_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// abs with Int32x3
    abs_Int32x3_arg.name = "val"_c;
    abs_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    abs_Int32x3.documentation = "Returns the absolute value of the input."_c;
    abs_Int32x3.name = "abs"_c;
    abs_Int32x3.backendIndex = 1784;
    abs_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    abs_Int32x3.parameters = abs_Int32x3_args;
    Symbol::Resolved(&abs_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&abs_Int32x3)->signature = "i32x3 abs(i32x3)"_c;
    Symbol::Resolved(&abs_Int32x3)->name = "abs(i32x3)"_c;
    Symbol::Resolved(&abs_Int32x3)->nameWithVarNames = "abs(val : i32x3)"_c;
    Symbol::Resolved(&abs_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// abs with Int32x4
    abs_Int32x4_arg.name = "val"_c;
    abs_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    abs_Int32x4.documentation = "Returns the absolute value of the input."_c;
    abs_Int32x4.name = "abs"_c;
    abs_Int32x4.backendIndex = 1785;
    abs_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    abs_Int32x4.parameters = abs_Int32x4_args;
    Symbol::Resolved(&abs_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&abs_Int32x4)->signature = "i32x4 abs(i32x4)"_c;
    Symbol::Resolved(&abs_Int32x4)->name = "abs(i32x4)"_c;
    Symbol::Resolved(&abs_Int32x4)->nameWithVarNames = "abs(val : i32x4)"_c;
    Symbol::Resolved(&abs_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// abs with Int16
    abs_Int16_arg.name = "val"_c;
    abs_Int16_arg.type = Type::FullType{ Int16Type.name };
    abs_Int16.documentation = "Returns the absolute value of the input."_c;
    abs_Int16.name = "abs"_c;
    abs_Int16.backendIndex = 1786;
    abs_Int16.returnType = Type::FullType { Int16Type.name };
    abs_Int16.parameters = abs_Int16_args;
    Symbol::Resolved(&abs_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&abs_Int16)->signature = "i16 abs(i16)"_c;
    Symbol::Resolved(&abs_Int16)->name = "abs(i16)"_c;
    Symbol::Resolved(&abs_Int16)->nameWithVarNames = "abs(val : i16)"_c;
    Symbol::Resolved(&abs_Int16)->returnTypeSymbol = &Int16Type;

    /// abs with Int16x2
    abs_Int16x2_arg.name = "val"_c;
    abs_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    abs_Int16x2.documentation = "Returns the absolute value of the input."_c;
    abs_Int16x2.name = "abs"_c;
    abs_Int16x2.backendIndex = 1787;
    abs_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    abs_Int16x2.parameters = abs_Int16x2_args;
    Symbol::Resolved(&abs_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&abs_Int16x2)->signature = "i16x2 abs(i16x2)"_c;
    Symbol::Resolved(&abs_Int16x2)->name = "abs(i16x2)"_c;
    Symbol::Resolved(&abs_Int16x2)->nameWithVarNames = "abs(val : i16x2)"_c;
    Symbol::Resolved(&abs_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// abs with Int16x3
    abs_Int16x3_arg.name = "val"_c;
    abs_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    abs_Int16x3.documentation = "Returns the absolute value of the input."_c;
    abs_Int16x3.name = "abs"_c;
    abs_Int16x3.backendIndex = 1788;
    abs_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    abs_Int16x3.parameters = abs_Int16x3_args;
    Symbol::Resolved(&abs_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&abs_Int16x3)->signature = "i16x3 abs(i16x3)"_c;
    Symbol::Resolved(&abs_Int16x3)->name = "abs(i16x3)"_c;
    Symbol::Resolved(&abs_Int16x3)->nameWithVarNames = "abs(val : i16x3)"_c;
    Symbol::Resolved(&abs_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// abs with Int16x4
    abs_Int16x4_arg.name = "val"_c;
    abs_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    abs_Int16x4.documentation = "Returns the absolute value of the input."_c;
    abs_Int16x4.name = "abs"_c;
    abs_Int16x4.backendIndex = 1789;
    abs_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    abs_Int16x4.parameters = abs_Int16x4_args;
    Symbol::Resolved(&abs_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&abs_Int16x4)->signature = "i16x4 abs(i16x4)"_c;
    Symbol::Resolved(&abs_Int16x4)->name = "abs(i16x4)"_c;
    Symbol::Resolved(&abs_Int16x4)->nameWithVarNames = "abs(val : i16x4)"_c;
    Symbol::Resolved(&abs_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// abs with Float32
    abs_Float32_arg.name = "val"_c;
    abs_Float32_arg.type = Type::FullType{ Float32Type.name };
    abs_Float32.documentation = "Returns the absolute value of the input."_c;
    abs_Float32.name = "abs"_c;
    abs_Float32.backendIndex = 1790;
    abs_Float32.returnType = Type::FullType { Float32Type.name };
    abs_Float32.parameters = abs_Float32_args;
    Symbol::Resolved(&abs_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&abs_Float32)->signature = "f32 abs(f32)"_c;
    Symbol::Resolved(&abs_Float32)->name = "abs(f32)"_c;
    Symbol::Resolved(&abs_Float32)->nameWithVarNames = "abs(val : f32)"_c;
    Symbol::Resolved(&abs_Float32)->returnTypeSymbol = &Float32Type;

    /// abs with Float32x2
    abs_Float32x2_arg.name = "val"_c;
    abs_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    abs_Float32x2.documentation = "Returns the absolute value of the input."_c;
    abs_Float32x2.name = "abs"_c;
    abs_Float32x2.backendIndex = 1791;
    abs_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    abs_Float32x2.parameters = abs_Float32x2_args;
    Symbol::Resolved(&abs_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&abs_Float32x2)->signature = "f32x2 abs(f32x2)"_c;
    Symbol::Resolved(&abs_Float32x2)->name = "abs(f32x2)"_c;
    Symbol::Resolved(&abs_Float32x2)->nameWithVarNames = "abs(val : f32x2)"_c;
    Symbol::Resolved(&abs_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// abs with Float32x3
    abs_Float32x3_arg.name = "val"_c;
    abs_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    abs_Float32x3.documentation = "Returns the absolute value of the input."_c;
    abs_Float32x3.name = "abs"_c;
    abs_Float32x3.backendIndex = 1792;
    abs_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    abs_Float32x3.parameters = abs_Float32x3_args;
    Symbol::Resolved(&abs_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&abs_Float32x3)->signature = "f32x3 abs(f32x3)"_c;
    Symbol::Resolved(&abs_Float32x3)->name = "abs(f32x3)"_c;
    Symbol::Resolved(&abs_Float32x3)->nameWithVarNames = "abs(val : f32x3)"_c;
    Symbol::Resolved(&abs_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// abs with Float32x4
    abs_Float32x4_arg.name = "val"_c;
    abs_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    abs_Float32x4.documentation = "Returns the absolute value of the input."_c;
    abs_Float32x4.name = "abs"_c;
    abs_Float32x4.backendIndex = 1793;
    abs_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    abs_Float32x4.parameters = abs_Float32x4_args;
    Symbol::Resolved(&abs_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&abs_Float32x4)->signature = "f32x4 abs(f32x4)"_c;
    Symbol::Resolved(&abs_Float32x4)->name = "abs(f32x4)"_c;
    Symbol::Resolved(&abs_Float32x4)->nameWithVarNames = "abs(val : f32x4)"_c;
    Symbol::Resolved(&abs_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// abs with Float16
    abs_Float16_arg.name = "val"_c;
    abs_Float16_arg.type = Type::FullType{ Float16Type.name };
    abs_Float16.documentation = "Returns the absolute value of the input."_c;
    abs_Float16.name = "abs"_c;
    abs_Float16.backendIndex = 1794;
    abs_Float16.returnType = Type::FullType { Float16Type.name };
    abs_Float16.parameters = abs_Float16_args;
    Symbol::Resolved(&abs_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&abs_Float16)->signature = "f16 abs(f16)"_c;
    Symbol::Resolved(&abs_Float16)->name = "abs(f16)"_c;
    Symbol::Resolved(&abs_Float16)->nameWithVarNames = "abs(val : f16)"_c;
    Symbol::Resolved(&abs_Float16)->returnTypeSymbol = &Float16Type;

    /// abs with Float16x2
    abs_Float16x2_arg.name = "val"_c;
    abs_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    abs_Float16x2.documentation = "Returns the absolute value of the input."_c;
    abs_Float16x2.name = "abs"_c;
    abs_Float16x2.backendIndex = 1795;
    abs_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    abs_Float16x2.parameters = abs_Float16x2_args;
    Symbol::Resolved(&abs_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&abs_Float16x2)->signature = "f16x2 abs(f16x2)"_c;
    Symbol::Resolved(&abs_Float16x2)->name = "abs(f16x2)"_c;
    Symbol::Resolved(&abs_Float16x2)->nameWithVarNames = "abs(val : f16x2)"_c;
    Symbol::Resolved(&abs_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// abs with Float16x3
    abs_Float16x3_arg.name = "val"_c;
    abs_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    abs_Float16x3.documentation = "Returns the absolute value of the input."_c;
    abs_Float16x3.name = "abs"_c;
    abs_Float16x3.backendIndex = 1796;
    abs_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    abs_Float16x3.parameters = abs_Float16x3_args;
    Symbol::Resolved(&abs_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&abs_Float16x3)->signature = "f16x3 abs(f16x3)"_c;
    Symbol::Resolved(&abs_Float16x3)->name = "abs(f16x3)"_c;
    Symbol::Resolved(&abs_Float16x3)->nameWithVarNames = "abs(val : f16x3)"_c;
    Symbol::Resolved(&abs_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// abs with Float16x4
    abs_Float16x4_arg.name = "val"_c;
    abs_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    abs_Float16x4.documentation = "Returns the absolute value of the input."_c;
    abs_Float16x4.name = "abs"_c;
    abs_Float16x4.backendIndex = 1797;
    abs_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    abs_Float16x4.parameters = abs_Float16x4_args;
    Symbol::Resolved(&abs_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&abs_Float16x4)->signature = "f16x4 abs(f16x4)"_c;
    Symbol::Resolved(&abs_Float16x4)->name = "abs(f16x4)"_c;
    Symbol::Resolved(&abs_Float16x4)->nameWithVarNames = "abs(val : f16x4)"_c;
    Symbol::Resolved(&abs_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// castToF16 with UInt16
    castToF16_UInt16_arg.name = "val"_c;
    castToF16_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    castToF16_UInt16.documentation = "Casts to type Float16 without conversion."_c;
    castToF16_UInt16.name = "castToF16"_c;
    castToF16_UInt16.backendIndex = 1798;
    castToF16_UInt16.returnType = Type::FullType { Float16Type.name };
    castToF16_UInt16.parameters = castToF16_UInt16_args;
    Symbol::Resolved(&castToF16_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&castToF16_UInt16)->signature = "f16 castToF16(u16)"_c;
    Symbol::Resolved(&castToF16_UInt16)->name = "castToF16(u16)"_c;
    Symbol::Resolved(&castToF16_UInt16)->nameWithVarNames = "castToF16(val : u16)"_c;
    Symbol::Resolved(&castToF16_UInt16)->returnTypeSymbol = &Float16Type;

    /// castToF16 with Int16
    castToF16_Int16_arg.name = "val"_c;
    castToF16_Int16_arg.type = Type::FullType{ Int16Type.name };
    castToF16_Int16.documentation = "Casts to type Float16 without conversion."_c;
    castToF16_Int16.name = "castToF16"_c;
    castToF16_Int16.backendIndex = 1799;
    castToF16_Int16.returnType = Type::FullType { Float16Type.name };
    castToF16_Int16.parameters = castToF16_Int16_args;
    Symbol::Resolved(&castToF16_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&castToF16_Int16)->signature = "f16 castToF16(i16)"_c;
    Symbol::Resolved(&castToF16_Int16)->name = "castToF16(i16)"_c;
    Symbol::Resolved(&castToF16_Int16)->nameWithVarNames = "castToF16(val : i16)"_c;
    Symbol::Resolved(&castToF16_Int16)->returnTypeSymbol = &Float16Type;

    /// castToU16 with Float16
    castToU16_Float16_arg.name = "val"_c;
    castToU16_Float16_arg.type = Type::FullType{ Float16Type.name };
    castToU16_Float16.documentation = "Casts to type UInt16 without conversion."_c;
    castToU16_Float16.name = "castToU16"_c;
    castToU16_Float16.backendIndex = 1800;
    castToU16_Float16.returnType = Type::FullType { UInt16Type.name };
    castToU16_Float16.parameters = castToU16_Float16_args;
    Symbol::Resolved(&castToU16_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&castToU16_Float16)->signature = "u16 castToU16(f16)"_c;
    Symbol::Resolved(&castToU16_Float16)->name = "castToU16(f16)"_c;
    Symbol::Resolved(&castToU16_Float16)->nameWithVarNames = "castToU16(val : f16)"_c;
    Symbol::Resolved(&castToU16_Float16)->returnTypeSymbol = &UInt16Type;

    /// castToU16 with Int16
    castToU16_Int16_arg.name = "val"_c;
    castToU16_Int16_arg.type = Type::FullType{ Int16Type.name };
    castToU16_Int16.documentation = "Casts to type UInt16 without conversion."_c;
    castToU16_Int16.name = "castToU16"_c;
    castToU16_Int16.backendIndex = 1801;
    castToU16_Int16.returnType = Type::FullType { UInt16Type.name };
    castToU16_Int16.parameters = castToU16_Int16_args;
    Symbol::Resolved(&castToU16_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&castToU16_Int16)->signature = "u16 castToU16(i16)"_c;
    Symbol::Resolved(&castToU16_Int16)->name = "castToU16(i16)"_c;
    Symbol::Resolved(&castToU16_Int16)->nameWithVarNames = "castToU16(val : i16)"_c;
    Symbol::Resolved(&castToU16_Int16)->returnTypeSymbol = &UInt16Type;

    /// castToI16 with Float16
    castToI16_Float16_arg.name = "val"_c;
    castToI16_Float16_arg.type = Type::FullType{ Float16Type.name };
    castToI16_Float16.documentation = "Casts to type Int16 without conversion."_c;
    castToI16_Float16.name = "castToI16"_c;
    castToI16_Float16.backendIndex = 1802;
    castToI16_Float16.returnType = Type::FullType { Int16Type.name };
    castToI16_Float16.parameters = castToI16_Float16_args;
    Symbol::Resolved(&castToI16_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&castToI16_Float16)->signature = "i16 castToI16(f16)"_c;
    Symbol::Resolved(&castToI16_Float16)->name = "castToI16(f16)"_c;
    Symbol::Resolved(&castToI16_Float16)->nameWithVarNames = "castToI16(val : f16)"_c;
    Symbol::Resolved(&castToI16_Float16)->returnTypeSymbol = &Int16Type;

    /// castToI16 with UInt16
    castToI16_UInt16_arg.name = "val"_c;
    castToI16_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    castToI16_UInt16.documentation = "Casts to type Int16 without conversion."_c;
    castToI16_UInt16.name = "castToI16"_c;
    castToI16_UInt16.backendIndex = 1803;
    castToI16_UInt16.returnType = Type::FullType { Int16Type.name };
    castToI16_UInt16.parameters = castToI16_UInt16_args;
    Symbol::Resolved(&castToI16_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&castToI16_UInt16)->signature = "i16 castToI16(u16)"_c;
    Symbol::Resolved(&castToI16_UInt16)->name = "castToI16(u16)"_c;
    Symbol::Resolved(&castToI16_UInt16)->nameWithVarNames = "castToI16(val : u16)"_c;
    Symbol::Resolved(&castToI16_UInt16)->returnTypeSymbol = &Int16Type;

    /// castToF32 with UInt32
    castToF32_UInt32_arg.name = "val"_c;
    castToF32_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    castToF32_UInt32.documentation = "Casts to type Float32 without conversion."_c;
    castToF32_UInt32.name = "castToF32"_c;
    castToF32_UInt32.backendIndex = 1804;
    castToF32_UInt32.returnType = Type::FullType { Float32Type.name };
    castToF32_UInt32.parameters = castToF32_UInt32_args;
    Symbol::Resolved(&castToF32_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&castToF32_UInt32)->signature = "f32 castToF32(u32)"_c;
    Symbol::Resolved(&castToF32_UInt32)->name = "castToF32(u32)"_c;
    Symbol::Resolved(&castToF32_UInt32)->nameWithVarNames = "castToF32(val : u32)"_c;
    Symbol::Resolved(&castToF32_UInt32)->returnTypeSymbol = &Float32Type;

    /// castToF32 with Int32
    castToF32_Int32_arg.name = "val"_c;
    castToF32_Int32_arg.type = Type::FullType{ Int32Type.name };
    castToF32_Int32.documentation = "Casts to type Float32 without conversion."_c;
    castToF32_Int32.name = "castToF32"_c;
    castToF32_Int32.backendIndex = 1805;
    castToF32_Int32.returnType = Type::FullType { Float32Type.name };
    castToF32_Int32.parameters = castToF32_Int32_args;
    Symbol::Resolved(&castToF32_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&castToF32_Int32)->signature = "f32 castToF32(i32)"_c;
    Symbol::Resolved(&castToF32_Int32)->name = "castToF32(i32)"_c;
    Symbol::Resolved(&castToF32_Int32)->nameWithVarNames = "castToF32(val : i32)"_c;
    Symbol::Resolved(&castToF32_Int32)->returnTypeSymbol = &Float32Type;

    /// castToU32 with Float32
    castToU32_Float32_arg.name = "val"_c;
    castToU32_Float32_arg.type = Type::FullType{ Float32Type.name };
    castToU32_Float32.documentation = "Casts to type UInt32 without conversion."_c;
    castToU32_Float32.name = "castToU32"_c;
    castToU32_Float32.backendIndex = 1806;
    castToU32_Float32.returnType = Type::FullType { UInt32Type.name };
    castToU32_Float32.parameters = castToU32_Float32_args;
    Symbol::Resolved(&castToU32_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&castToU32_Float32)->signature = "u32 castToU32(f32)"_c;
    Symbol::Resolved(&castToU32_Float32)->name = "castToU32(f32)"_c;
    Symbol::Resolved(&castToU32_Float32)->nameWithVarNames = "castToU32(val : f32)"_c;
    Symbol::Resolved(&castToU32_Float32)->returnTypeSymbol = &UInt32Type;

    /// castToU32 with Int32
    castToU32_Int32_arg.name = "val"_c;
    castToU32_Int32_arg.type = Type::FullType{ Int32Type.name };
    castToU32_Int32.documentation = "Casts to type UInt32 without conversion."_c;
    castToU32_Int32.name = "castToU32"_c;
    castToU32_Int32.backendIndex = 1807;
    castToU32_Int32.returnType = Type::FullType { UInt32Type.name };
    castToU32_Int32.parameters = castToU32_Int32_args;
    Symbol::Resolved(&castToU32_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&castToU32_Int32)->signature = "u32 castToU32(i32)"_c;
    Symbol::Resolved(&castToU32_Int32)->name = "castToU32(i32)"_c;
    Symbol::Resolved(&castToU32_Int32)->nameWithVarNames = "castToU32(val : i32)"_c;
    Symbol::Resolved(&castToU32_Int32)->returnTypeSymbol = &UInt32Type;

    /// castToI32 with Float32
    castToI32_Float32_arg.name = "val"_c;
    castToI32_Float32_arg.type = Type::FullType{ Float32Type.name };
    castToI32_Float32.documentation = "Casts to type Int32 without conversion."_c;
    castToI32_Float32.name = "castToI32"_c;
    castToI32_Float32.backendIndex = 1808;
    castToI32_Float32.returnType = Type::FullType { Int32Type.name };
    castToI32_Float32.parameters = castToI32_Float32_args;
    Symbol::Resolved(&castToI32_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&castToI32_Float32)->signature = "i32 castToI32(f32)"_c;
    Symbol::Resolved(&castToI32_Float32)->name = "castToI32(f32)"_c;
    Symbol::Resolved(&castToI32_Float32)->nameWithVarNames = "castToI32(val : f32)"_c;
    Symbol::Resolved(&castToI32_Float32)->returnTypeSymbol = &Int32Type;

    /// castToI32 with UInt32
    castToI32_UInt32_arg.name = "val"_c;
    castToI32_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    castToI32_UInt32.documentation = "Casts to type Int32 without conversion."_c;
    castToI32_UInt32.name = "castToI32"_c;
    castToI32_UInt32.backendIndex = 1809;
    castToI32_UInt32.returnType = Type::FullType { Int32Type.name };
    castToI32_UInt32.parameters = castToI32_UInt32_args;
    Symbol::Resolved(&castToI32_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&castToI32_UInt32)->signature = "i32 castToI32(u32)"_c;
    Symbol::Resolved(&castToI32_UInt32)->name = "castToI32(u32)"_c;
    Symbol::Resolved(&castToI32_UInt32)->nameWithVarNames = "castToI32(val : u32)"_c;
    Symbol::Resolved(&castToI32_UInt32)->returnTypeSymbol = &Int32Type;

    /// any with Bool8
    any_Bool8_arg.name = "val"_c;
    any_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    any_Bool8.documentation = "Returns true if any component of the vector is non-zero."_c;
    any_Bool8.name = "any"_c;
    any_Bool8.backendIndex = 1810;
    any_Bool8.returnType = Type::FullType { Bool8Type.name };
    any_Bool8.parameters = any_Bool8_args;
    Symbol::Resolved(&any_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&any_Bool8)->signature = "b8 any(b8)"_c;
    Symbol::Resolved(&any_Bool8)->name = "any(b8)"_c;
    Symbol::Resolved(&any_Bool8)->nameWithVarNames = "any(val : b8)"_c;
    Symbol::Resolved(&any_Bool8)->returnTypeSymbol = &Bool8Type;

    /// any with Bool8x2
    any_Bool8x2_arg.name = "val"_c;
    any_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    any_Bool8x2.documentation = "Returns true if any component of the vector is non-zero."_c;
    any_Bool8x2.name = "any"_c;
    any_Bool8x2.backendIndex = 1811;
    any_Bool8x2.returnType = Type::FullType { Bool8Type.name };
    any_Bool8x2.parameters = any_Bool8x2_args;
    Symbol::Resolved(&any_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&any_Bool8x2)->signature = "b8 any(b8x2)"_c;
    Symbol::Resolved(&any_Bool8x2)->name = "any(b8x2)"_c;
    Symbol::Resolved(&any_Bool8x2)->nameWithVarNames = "any(val : b8x2)"_c;
    Symbol::Resolved(&any_Bool8x2)->returnTypeSymbol = &Bool8Type;

    /// any with Bool8x3
    any_Bool8x3_arg.name = "val"_c;
    any_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    any_Bool8x3.documentation = "Returns true if any component of the vector is non-zero."_c;
    any_Bool8x3.name = "any"_c;
    any_Bool8x3.backendIndex = 1812;
    any_Bool8x3.returnType = Type::FullType { Bool8Type.name };
    any_Bool8x3.parameters = any_Bool8x3_args;
    Symbol::Resolved(&any_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&any_Bool8x3)->signature = "b8 any(b8x3)"_c;
    Symbol::Resolved(&any_Bool8x3)->name = "any(b8x3)"_c;
    Symbol::Resolved(&any_Bool8x3)->nameWithVarNames = "any(val : b8x3)"_c;
    Symbol::Resolved(&any_Bool8x3)->returnTypeSymbol = &Bool8Type;

    /// any with Bool8x4
    any_Bool8x4_arg.name = "val"_c;
    any_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    any_Bool8x4.documentation = "Returns true if any component of the vector is non-zero."_c;
    any_Bool8x4.name = "any"_c;
    any_Bool8x4.backendIndex = 1813;
    any_Bool8x4.returnType = Type::FullType { Bool8Type.name };
    any_Bool8x4.parameters = any_Bool8x4_args;
    Symbol::Resolved(&any_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&any_Bool8x4)->signature = "b8 any(b8x4)"_c;
    Symbol::Resolved(&any_Bool8x4)->name = "any(b8x4)"_c;
    Symbol::Resolved(&any_Bool8x4)->nameWithVarNames = "any(val : b8x4)"_c;
    Symbol::Resolved(&any_Bool8x4)->returnTypeSymbol = &Bool8Type;

    /// all with Bool8
    all_Bool8_arg.name = "val"_c;
    all_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    all_Bool8.documentation = "Returns true if all components of the vector are non-zero."_c;
    all_Bool8.name = "all"_c;
    all_Bool8.backendIndex = 1814;
    all_Bool8.returnType = Type::FullType { Bool8Type.name };
    all_Bool8.parameters = all_Bool8_args;
    Symbol::Resolved(&all_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&all_Bool8)->signature = "b8 all(b8)"_c;
    Symbol::Resolved(&all_Bool8)->name = "all(b8)"_c;
    Symbol::Resolved(&all_Bool8)->nameWithVarNames = "all(val : b8)"_c;
    Symbol::Resolved(&all_Bool8)->returnTypeSymbol = &Bool8Type;

    /// all with Bool8x2
    all_Bool8x2_arg.name = "val"_c;
    all_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    all_Bool8x2.documentation = "Returns true if all components of the vector are non-zero."_c;
    all_Bool8x2.name = "all"_c;
    all_Bool8x2.backendIndex = 1815;
    all_Bool8x2.returnType = Type::FullType { Bool8Type.name };
    all_Bool8x2.parameters = all_Bool8x2_args;
    Symbol::Resolved(&all_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&all_Bool8x2)->signature = "b8 all(b8x2)"_c;
    Symbol::Resolved(&all_Bool8x2)->name = "all(b8x2)"_c;
    Symbol::Resolved(&all_Bool8x2)->nameWithVarNames = "all(val : b8x2)"_c;
    Symbol::Resolved(&all_Bool8x2)->returnTypeSymbol = &Bool8Type;

    /// all with Bool8x3
    all_Bool8x3_arg.name = "val"_c;
    all_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    all_Bool8x3.documentation = "Returns true if all components of the vector are non-zero."_c;
    all_Bool8x3.name = "all"_c;
    all_Bool8x3.backendIndex = 1816;
    all_Bool8x3.returnType = Type::FullType { Bool8Type.name };
    all_Bool8x3.parameters = all_Bool8x3_args;
    Symbol::Resolved(&all_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&all_Bool8x3)->signature = "b8 all(b8x3)"_c;
    Symbol::Resolved(&all_Bool8x3)->name = "all(b8x3)"_c;
    Symbol::Resolved(&all_Bool8x3)->nameWithVarNames = "all(val : b8x3)"_c;
    Symbol::Resolved(&all_Bool8x3)->returnTypeSymbol = &Bool8Type;

    /// all with Bool8x4
    all_Bool8x4_arg.name = "val"_c;
    all_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    all_Bool8x4.documentation = "Returns true if all components of the vector are non-zero."_c;
    all_Bool8x4.name = "all"_c;
    all_Bool8x4.backendIndex = 1817;
    all_Bool8x4.returnType = Type::FullType { Bool8Type.name };
    all_Bool8x4.parameters = all_Bool8x4_args;
    Symbol::Resolved(&all_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&all_Bool8x4)->signature = "b8 all(b8x4)"_c;
    Symbol::Resolved(&all_Bool8x4)->name = "all(b8x4)"_c;
    Symbol::Resolved(&all_Bool8x4)->nameWithVarNames = "all(val : b8x4)"_c;
    Symbol::Resolved(&all_Bool8x4)->returnTypeSymbol = &Bool8Type;

    /// transpose with Float32x2x2
    transpose_Float32x2x2_arg.name = "val"_c;
    transpose_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    transpose_Float32x2x2.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x2x2.name = "transpose"_c;
    transpose_Float32x2x2.backendIndex = 1818;
    transpose_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    transpose_Float32x2x2.parameters = transpose_Float32x2x2_args;
    Symbol::Resolved(&transpose_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&transpose_Float32x2x2)->signature = "f32x2x2 transpose(f32x2x2)"_c;
    Symbol::Resolved(&transpose_Float32x2x2)->name = "transpose(f32x2x2)"_c;
    Symbol::Resolved(&transpose_Float32x2x2)->nameWithVarNames = "transpose(val : f32x2x2)"_c;
    Symbol::Resolved(&transpose_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// transpose with Float16x2x2
    transpose_Float16x2x2_arg.name = "val"_c;
    transpose_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    transpose_Float16x2x2.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x2x2.name = "transpose"_c;
    transpose_Float16x2x2.backendIndex = 1819;
    transpose_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    transpose_Float16x2x2.parameters = transpose_Float16x2x2_args;
    Symbol::Resolved(&transpose_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&transpose_Float16x2x2)->signature = "f16x2x2 transpose(f16x2x2)"_c;
    Symbol::Resolved(&transpose_Float16x2x2)->name = "transpose(f16x2x2)"_c;
    Symbol::Resolved(&transpose_Float16x2x2)->nameWithVarNames = "transpose(val : f16x2x2)"_c;
    Symbol::Resolved(&transpose_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// transpose with Float32x2x3
    transpose_Float32x2x3_arg.name = "val"_c;
    transpose_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    transpose_Float32x2x3.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x2x3.name = "transpose"_c;
    transpose_Float32x2x3.backendIndex = 1820;
    transpose_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    transpose_Float32x2x3.parameters = transpose_Float32x2x3_args;
    Symbol::Resolved(&transpose_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&transpose_Float32x2x3)->signature = "f32x2x3 transpose(f32x2x3)"_c;
    Symbol::Resolved(&transpose_Float32x2x3)->name = "transpose(f32x2x3)"_c;
    Symbol::Resolved(&transpose_Float32x2x3)->nameWithVarNames = "transpose(val : f32x2x3)"_c;
    Symbol::Resolved(&transpose_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// transpose with Float16x2x3
    transpose_Float16x2x3_arg.name = "val"_c;
    transpose_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    transpose_Float16x2x3.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x2x3.name = "transpose"_c;
    transpose_Float16x2x3.backendIndex = 1821;
    transpose_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    transpose_Float16x2x3.parameters = transpose_Float16x2x3_args;
    Symbol::Resolved(&transpose_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&transpose_Float16x2x3)->signature = "f16x2x3 transpose(f16x2x3)"_c;
    Symbol::Resolved(&transpose_Float16x2x3)->name = "transpose(f16x2x3)"_c;
    Symbol::Resolved(&transpose_Float16x2x3)->nameWithVarNames = "transpose(val : f16x2x3)"_c;
    Symbol::Resolved(&transpose_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// transpose with Float32x2x4
    transpose_Float32x2x4_arg.name = "val"_c;
    transpose_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    transpose_Float32x2x4.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x2x4.name = "transpose"_c;
    transpose_Float32x2x4.backendIndex = 1822;
    transpose_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    transpose_Float32x2x4.parameters = transpose_Float32x2x4_args;
    Symbol::Resolved(&transpose_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&transpose_Float32x2x4)->signature = "f32x2x4 transpose(f32x2x4)"_c;
    Symbol::Resolved(&transpose_Float32x2x4)->name = "transpose(f32x2x4)"_c;
    Symbol::Resolved(&transpose_Float32x2x4)->nameWithVarNames = "transpose(val : f32x2x4)"_c;
    Symbol::Resolved(&transpose_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// transpose with Float16x2x4
    transpose_Float16x2x4_arg.name = "val"_c;
    transpose_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    transpose_Float16x2x4.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x2x4.name = "transpose"_c;
    transpose_Float16x2x4.backendIndex = 1823;
    transpose_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    transpose_Float16x2x4.parameters = transpose_Float16x2x4_args;
    Symbol::Resolved(&transpose_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&transpose_Float16x2x4)->signature = "f16x2x4 transpose(f16x2x4)"_c;
    Symbol::Resolved(&transpose_Float16x2x4)->name = "transpose(f16x2x4)"_c;
    Symbol::Resolved(&transpose_Float16x2x4)->nameWithVarNames = "transpose(val : f16x2x4)"_c;
    Symbol::Resolved(&transpose_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// transpose with Float32x3x2
    transpose_Float32x3x2_arg.name = "val"_c;
    transpose_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    transpose_Float32x3x2.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x3x2.name = "transpose"_c;
    transpose_Float32x3x2.backendIndex = 1824;
    transpose_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    transpose_Float32x3x2.parameters = transpose_Float32x3x2_args;
    Symbol::Resolved(&transpose_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&transpose_Float32x3x2)->signature = "f32x3x2 transpose(f32x3x2)"_c;
    Symbol::Resolved(&transpose_Float32x3x2)->name = "transpose(f32x3x2)"_c;
    Symbol::Resolved(&transpose_Float32x3x2)->nameWithVarNames = "transpose(val : f32x3x2)"_c;
    Symbol::Resolved(&transpose_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// transpose with Float16x3x2
    transpose_Float16x3x2_arg.name = "val"_c;
    transpose_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    transpose_Float16x3x2.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x3x2.name = "transpose"_c;
    transpose_Float16x3x2.backendIndex = 1825;
    transpose_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    transpose_Float16x3x2.parameters = transpose_Float16x3x2_args;
    Symbol::Resolved(&transpose_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&transpose_Float16x3x2)->signature = "f16x3x2 transpose(f16x3x2)"_c;
    Symbol::Resolved(&transpose_Float16x3x2)->name = "transpose(f16x3x2)"_c;
    Symbol::Resolved(&transpose_Float16x3x2)->nameWithVarNames = "transpose(val : f16x3x2)"_c;
    Symbol::Resolved(&transpose_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// transpose with Float32x3x3
    transpose_Float32x3x3_arg.name = "val"_c;
    transpose_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    transpose_Float32x3x3.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x3x3.name = "transpose"_c;
    transpose_Float32x3x3.backendIndex = 1826;
    transpose_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    transpose_Float32x3x3.parameters = transpose_Float32x3x3_args;
    Symbol::Resolved(&transpose_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&transpose_Float32x3x3)->signature = "f32x3x3 transpose(f32x3x3)"_c;
    Symbol::Resolved(&transpose_Float32x3x3)->name = "transpose(f32x3x3)"_c;
    Symbol::Resolved(&transpose_Float32x3x3)->nameWithVarNames = "transpose(val : f32x3x3)"_c;
    Symbol::Resolved(&transpose_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// transpose with Float16x3x3
    transpose_Float16x3x3_arg.name = "val"_c;
    transpose_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    transpose_Float16x3x3.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x3x3.name = "transpose"_c;
    transpose_Float16x3x3.backendIndex = 1827;
    transpose_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    transpose_Float16x3x3.parameters = transpose_Float16x3x3_args;
    Symbol::Resolved(&transpose_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&transpose_Float16x3x3)->signature = "f16x3x3 transpose(f16x3x3)"_c;
    Symbol::Resolved(&transpose_Float16x3x3)->name = "transpose(f16x3x3)"_c;
    Symbol::Resolved(&transpose_Float16x3x3)->nameWithVarNames = "transpose(val : f16x3x3)"_c;
    Symbol::Resolved(&transpose_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// transpose with Float32x3x4
    transpose_Float32x3x4_arg.name = "val"_c;
    transpose_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    transpose_Float32x3x4.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x3x4.name = "transpose"_c;
    transpose_Float32x3x4.backendIndex = 1828;
    transpose_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    transpose_Float32x3x4.parameters = transpose_Float32x3x4_args;
    Symbol::Resolved(&transpose_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&transpose_Float32x3x4)->signature = "f32x3x4 transpose(f32x3x4)"_c;
    Symbol::Resolved(&transpose_Float32x3x4)->name = "transpose(f32x3x4)"_c;
    Symbol::Resolved(&transpose_Float32x3x4)->nameWithVarNames = "transpose(val : f32x3x4)"_c;
    Symbol::Resolved(&transpose_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// transpose with Float16x3x4
    transpose_Float16x3x4_arg.name = "val"_c;
    transpose_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    transpose_Float16x3x4.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x3x4.name = "transpose"_c;
    transpose_Float16x3x4.backendIndex = 1829;
    transpose_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    transpose_Float16x3x4.parameters = transpose_Float16x3x4_args;
    Symbol::Resolved(&transpose_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&transpose_Float16x3x4)->signature = "f16x3x4 transpose(f16x3x4)"_c;
    Symbol::Resolved(&transpose_Float16x3x4)->name = "transpose(f16x3x4)"_c;
    Symbol::Resolved(&transpose_Float16x3x4)->nameWithVarNames = "transpose(val : f16x3x4)"_c;
    Symbol::Resolved(&transpose_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// transpose with Float32x4x2
    transpose_Float32x4x2_arg.name = "val"_c;
    transpose_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    transpose_Float32x4x2.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x4x2.name = "transpose"_c;
    transpose_Float32x4x2.backendIndex = 1830;
    transpose_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    transpose_Float32x4x2.parameters = transpose_Float32x4x2_args;
    Symbol::Resolved(&transpose_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&transpose_Float32x4x2)->signature = "f32x4x2 transpose(f32x4x2)"_c;
    Symbol::Resolved(&transpose_Float32x4x2)->name = "transpose(f32x4x2)"_c;
    Symbol::Resolved(&transpose_Float32x4x2)->nameWithVarNames = "transpose(val : f32x4x2)"_c;
    Symbol::Resolved(&transpose_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// transpose with Float16x4x2
    transpose_Float16x4x2_arg.name = "val"_c;
    transpose_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    transpose_Float16x4x2.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x4x2.name = "transpose"_c;
    transpose_Float16x4x2.backendIndex = 1831;
    transpose_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    transpose_Float16x4x2.parameters = transpose_Float16x4x2_args;
    Symbol::Resolved(&transpose_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&transpose_Float16x4x2)->signature = "f16x4x2 transpose(f16x4x2)"_c;
    Symbol::Resolved(&transpose_Float16x4x2)->name = "transpose(f16x4x2)"_c;
    Symbol::Resolved(&transpose_Float16x4x2)->nameWithVarNames = "transpose(val : f16x4x2)"_c;
    Symbol::Resolved(&transpose_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// transpose with Float32x4x3
    transpose_Float32x4x3_arg.name = "val"_c;
    transpose_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    transpose_Float32x4x3.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x4x3.name = "transpose"_c;
    transpose_Float32x4x3.backendIndex = 1832;
    transpose_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    transpose_Float32x4x3.parameters = transpose_Float32x4x3_args;
    Symbol::Resolved(&transpose_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&transpose_Float32x4x3)->signature = "f32x4x3 transpose(f32x4x3)"_c;
    Symbol::Resolved(&transpose_Float32x4x3)->name = "transpose(f32x4x3)"_c;
    Symbol::Resolved(&transpose_Float32x4x3)->nameWithVarNames = "transpose(val : f32x4x3)"_c;
    Symbol::Resolved(&transpose_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// transpose with Float16x4x3
    transpose_Float16x4x3_arg.name = "val"_c;
    transpose_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    transpose_Float16x4x3.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x4x3.name = "transpose"_c;
    transpose_Float16x4x3.backendIndex = 1833;
    transpose_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    transpose_Float16x4x3.parameters = transpose_Float16x4x3_args;
    Symbol::Resolved(&transpose_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&transpose_Float16x4x3)->signature = "f16x4x3 transpose(f16x4x3)"_c;
    Symbol::Resolved(&transpose_Float16x4x3)->name = "transpose(f16x4x3)"_c;
    Symbol::Resolved(&transpose_Float16x4x3)->nameWithVarNames = "transpose(val : f16x4x3)"_c;
    Symbol::Resolved(&transpose_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// transpose with Float32x4x4
    transpose_Float32x4x4_arg.name = "val"_c;
    transpose_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    transpose_Float32x4x4.documentation = "Returns the transposed matrix."_c;
    transpose_Float32x4x4.name = "transpose"_c;
    transpose_Float32x4x4.backendIndex = 1834;
    transpose_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    transpose_Float32x4x4.parameters = transpose_Float32x4x4_args;
    Symbol::Resolved(&transpose_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&transpose_Float32x4x4)->signature = "f32x4x4 transpose(f32x4x4)"_c;
    Symbol::Resolved(&transpose_Float32x4x4)->name = "transpose(f32x4x4)"_c;
    Symbol::Resolved(&transpose_Float32x4x4)->nameWithVarNames = "transpose(val : f32x4x4)"_c;
    Symbol::Resolved(&transpose_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// transpose with Float16x4x4
    transpose_Float16x4x4_arg.name = "val"_c;
    transpose_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    transpose_Float16x4x4.documentation = "Returns the transposed matrix."_c;
    transpose_Float16x4x4.name = "transpose"_c;
    transpose_Float16x4x4.backendIndex = 1835;
    transpose_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    transpose_Float16x4x4.parameters = transpose_Float16x4x4_args;
    Symbol::Resolved(&transpose_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&transpose_Float16x4x4)->signature = "f16x4x4 transpose(f16x4x4)"_c;
    Symbol::Resolved(&transpose_Float16x4x4)->name = "transpose(f16x4x4)"_c;
    Symbol::Resolved(&transpose_Float16x4x4)->nameWithVarNames = "transpose(val : f16x4x4)"_c;
    Symbol::Resolved(&transpose_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// inverse with Float32x2x2
    inverse_Float32x2x2_arg.name = "val"_c;
    inverse_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    inverse_Float32x2x2.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x2x2.name = "inverse"_c;
    inverse_Float32x2x2.backendIndex = 1836;
    inverse_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    inverse_Float32x2x2.parameters = inverse_Float32x2x2_args;
    Symbol::Resolved(&inverse_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&inverse_Float32x2x2)->signature = "f32x2x2 inverse(f32x2x2)"_c;
    Symbol::Resolved(&inverse_Float32x2x2)->name = "inverse(f32x2x2)"_c;
    Symbol::Resolved(&inverse_Float32x2x2)->nameWithVarNames = "inverse(val : f32x2x2)"_c;
    Symbol::Resolved(&inverse_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// inverse with Float16x2x2
    inverse_Float16x2x2_arg.name = "val"_c;
    inverse_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    inverse_Float16x2x2.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x2x2.name = "inverse"_c;
    inverse_Float16x2x2.backendIndex = 1837;
    inverse_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    inverse_Float16x2x2.parameters = inverse_Float16x2x2_args;
    Symbol::Resolved(&inverse_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&inverse_Float16x2x2)->signature = "f16x2x2 inverse(f16x2x2)"_c;
    Symbol::Resolved(&inverse_Float16x2x2)->name = "inverse(f16x2x2)"_c;
    Symbol::Resolved(&inverse_Float16x2x2)->nameWithVarNames = "inverse(val : f16x2x2)"_c;
    Symbol::Resolved(&inverse_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// inverse with Float32x2x3
    inverse_Float32x2x3_arg.name = "val"_c;
    inverse_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    inverse_Float32x2x3.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x2x3.name = "inverse"_c;
    inverse_Float32x2x3.backendIndex = 1838;
    inverse_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    inverse_Float32x2x3.parameters = inverse_Float32x2x3_args;
    Symbol::Resolved(&inverse_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&inverse_Float32x2x3)->signature = "f32x2x3 inverse(f32x2x3)"_c;
    Symbol::Resolved(&inverse_Float32x2x3)->name = "inverse(f32x2x3)"_c;
    Symbol::Resolved(&inverse_Float32x2x3)->nameWithVarNames = "inverse(val : f32x2x3)"_c;
    Symbol::Resolved(&inverse_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// inverse with Float16x2x3
    inverse_Float16x2x3_arg.name = "val"_c;
    inverse_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    inverse_Float16x2x3.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x2x3.name = "inverse"_c;
    inverse_Float16x2x3.backendIndex = 1839;
    inverse_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    inverse_Float16x2x3.parameters = inverse_Float16x2x3_args;
    Symbol::Resolved(&inverse_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&inverse_Float16x2x3)->signature = "f16x2x3 inverse(f16x2x3)"_c;
    Symbol::Resolved(&inverse_Float16x2x3)->name = "inverse(f16x2x3)"_c;
    Symbol::Resolved(&inverse_Float16x2x3)->nameWithVarNames = "inverse(val : f16x2x3)"_c;
    Symbol::Resolved(&inverse_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// inverse with Float32x2x4
    inverse_Float32x2x4_arg.name = "val"_c;
    inverse_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    inverse_Float32x2x4.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x2x4.name = "inverse"_c;
    inverse_Float32x2x4.backendIndex = 1840;
    inverse_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    inverse_Float32x2x4.parameters = inverse_Float32x2x4_args;
    Symbol::Resolved(&inverse_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&inverse_Float32x2x4)->signature = "f32x2x4 inverse(f32x2x4)"_c;
    Symbol::Resolved(&inverse_Float32x2x4)->name = "inverse(f32x2x4)"_c;
    Symbol::Resolved(&inverse_Float32x2x4)->nameWithVarNames = "inverse(val : f32x2x4)"_c;
    Symbol::Resolved(&inverse_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// inverse with Float16x2x4
    inverse_Float16x2x4_arg.name = "val"_c;
    inverse_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    inverse_Float16x2x4.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x2x4.name = "inverse"_c;
    inverse_Float16x2x4.backendIndex = 1841;
    inverse_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    inverse_Float16x2x4.parameters = inverse_Float16x2x4_args;
    Symbol::Resolved(&inverse_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&inverse_Float16x2x4)->signature = "f16x2x4 inverse(f16x2x4)"_c;
    Symbol::Resolved(&inverse_Float16x2x4)->name = "inverse(f16x2x4)"_c;
    Symbol::Resolved(&inverse_Float16x2x4)->nameWithVarNames = "inverse(val : f16x2x4)"_c;
    Symbol::Resolved(&inverse_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// inverse with Float32x3x2
    inverse_Float32x3x2_arg.name = "val"_c;
    inverse_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    inverse_Float32x3x2.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x3x2.name = "inverse"_c;
    inverse_Float32x3x2.backendIndex = 1842;
    inverse_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    inverse_Float32x3x2.parameters = inverse_Float32x3x2_args;
    Symbol::Resolved(&inverse_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&inverse_Float32x3x2)->signature = "f32x3x2 inverse(f32x3x2)"_c;
    Symbol::Resolved(&inverse_Float32x3x2)->name = "inverse(f32x3x2)"_c;
    Symbol::Resolved(&inverse_Float32x3x2)->nameWithVarNames = "inverse(val : f32x3x2)"_c;
    Symbol::Resolved(&inverse_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// inverse with Float16x3x2
    inverse_Float16x3x2_arg.name = "val"_c;
    inverse_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    inverse_Float16x3x2.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x3x2.name = "inverse"_c;
    inverse_Float16x3x2.backendIndex = 1843;
    inverse_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    inverse_Float16x3x2.parameters = inverse_Float16x3x2_args;
    Symbol::Resolved(&inverse_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&inverse_Float16x3x2)->signature = "f16x3x2 inverse(f16x3x2)"_c;
    Symbol::Resolved(&inverse_Float16x3x2)->name = "inverse(f16x3x2)"_c;
    Symbol::Resolved(&inverse_Float16x3x2)->nameWithVarNames = "inverse(val : f16x3x2)"_c;
    Symbol::Resolved(&inverse_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// inverse with Float32x3x3
    inverse_Float32x3x3_arg.name = "val"_c;
    inverse_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    inverse_Float32x3x3.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x3x3.name = "inverse"_c;
    inverse_Float32x3x3.backendIndex = 1844;
    inverse_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    inverse_Float32x3x3.parameters = inverse_Float32x3x3_args;
    Symbol::Resolved(&inverse_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&inverse_Float32x3x3)->signature = "f32x3x3 inverse(f32x3x3)"_c;
    Symbol::Resolved(&inverse_Float32x3x3)->name = "inverse(f32x3x3)"_c;
    Symbol::Resolved(&inverse_Float32x3x3)->nameWithVarNames = "inverse(val : f32x3x3)"_c;
    Symbol::Resolved(&inverse_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// inverse with Float16x3x3
    inverse_Float16x3x3_arg.name = "val"_c;
    inverse_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    inverse_Float16x3x3.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x3x3.name = "inverse"_c;
    inverse_Float16x3x3.backendIndex = 1845;
    inverse_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    inverse_Float16x3x3.parameters = inverse_Float16x3x3_args;
    Symbol::Resolved(&inverse_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&inverse_Float16x3x3)->signature = "f16x3x3 inverse(f16x3x3)"_c;
    Symbol::Resolved(&inverse_Float16x3x3)->name = "inverse(f16x3x3)"_c;
    Symbol::Resolved(&inverse_Float16x3x3)->nameWithVarNames = "inverse(val : f16x3x3)"_c;
    Symbol::Resolved(&inverse_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// inverse with Float32x3x4
    inverse_Float32x3x4_arg.name = "val"_c;
    inverse_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    inverse_Float32x3x4.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x3x4.name = "inverse"_c;
    inverse_Float32x3x4.backendIndex = 1846;
    inverse_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    inverse_Float32x3x4.parameters = inverse_Float32x3x4_args;
    Symbol::Resolved(&inverse_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&inverse_Float32x3x4)->signature = "f32x3x4 inverse(f32x3x4)"_c;
    Symbol::Resolved(&inverse_Float32x3x4)->name = "inverse(f32x3x4)"_c;
    Symbol::Resolved(&inverse_Float32x3x4)->nameWithVarNames = "inverse(val : f32x3x4)"_c;
    Symbol::Resolved(&inverse_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// inverse with Float16x3x4
    inverse_Float16x3x4_arg.name = "val"_c;
    inverse_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    inverse_Float16x3x4.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x3x4.name = "inverse"_c;
    inverse_Float16x3x4.backendIndex = 1847;
    inverse_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    inverse_Float16x3x4.parameters = inverse_Float16x3x4_args;
    Symbol::Resolved(&inverse_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&inverse_Float16x3x4)->signature = "f16x3x4 inverse(f16x3x4)"_c;
    Symbol::Resolved(&inverse_Float16x3x4)->name = "inverse(f16x3x4)"_c;
    Symbol::Resolved(&inverse_Float16x3x4)->nameWithVarNames = "inverse(val : f16x3x4)"_c;
    Symbol::Resolved(&inverse_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// inverse with Float32x4x2
    inverse_Float32x4x2_arg.name = "val"_c;
    inverse_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    inverse_Float32x4x2.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x4x2.name = "inverse"_c;
    inverse_Float32x4x2.backendIndex = 1848;
    inverse_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    inverse_Float32x4x2.parameters = inverse_Float32x4x2_args;
    Symbol::Resolved(&inverse_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&inverse_Float32x4x2)->signature = "f32x4x2 inverse(f32x4x2)"_c;
    Symbol::Resolved(&inverse_Float32x4x2)->name = "inverse(f32x4x2)"_c;
    Symbol::Resolved(&inverse_Float32x4x2)->nameWithVarNames = "inverse(val : f32x4x2)"_c;
    Symbol::Resolved(&inverse_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// inverse with Float16x4x2
    inverse_Float16x4x2_arg.name = "val"_c;
    inverse_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    inverse_Float16x4x2.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x4x2.name = "inverse"_c;
    inverse_Float16x4x2.backendIndex = 1849;
    inverse_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    inverse_Float16x4x2.parameters = inverse_Float16x4x2_args;
    Symbol::Resolved(&inverse_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&inverse_Float16x4x2)->signature = "f16x4x2 inverse(f16x4x2)"_c;
    Symbol::Resolved(&inverse_Float16x4x2)->name = "inverse(f16x4x2)"_c;
    Symbol::Resolved(&inverse_Float16x4x2)->nameWithVarNames = "inverse(val : f16x4x2)"_c;
    Symbol::Resolved(&inverse_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// inverse with Float32x4x3
    inverse_Float32x4x3_arg.name = "val"_c;
    inverse_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    inverse_Float32x4x3.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x4x3.name = "inverse"_c;
    inverse_Float32x4x3.backendIndex = 1850;
    inverse_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    inverse_Float32x4x3.parameters = inverse_Float32x4x3_args;
    Symbol::Resolved(&inverse_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&inverse_Float32x4x3)->signature = "f32x4x3 inverse(f32x4x3)"_c;
    Symbol::Resolved(&inverse_Float32x4x3)->name = "inverse(f32x4x3)"_c;
    Symbol::Resolved(&inverse_Float32x4x3)->nameWithVarNames = "inverse(val : f32x4x3)"_c;
    Symbol::Resolved(&inverse_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// inverse with Float16x4x3
    inverse_Float16x4x3_arg.name = "val"_c;
    inverse_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    inverse_Float16x4x3.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x4x3.name = "inverse"_c;
    inverse_Float16x4x3.backendIndex = 1851;
    inverse_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    inverse_Float16x4x3.parameters = inverse_Float16x4x3_args;
    Symbol::Resolved(&inverse_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&inverse_Float16x4x3)->signature = "f16x4x3 inverse(f16x4x3)"_c;
    Symbol::Resolved(&inverse_Float16x4x3)->name = "inverse(f16x4x3)"_c;
    Symbol::Resolved(&inverse_Float16x4x3)->nameWithVarNames = "inverse(val : f16x4x3)"_c;
    Symbol::Resolved(&inverse_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// inverse with Float32x4x4
    inverse_Float32x4x4_arg.name = "val"_c;
    inverse_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    inverse_Float32x4x4.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float32x4x4.name = "inverse"_c;
    inverse_Float32x4x4.backendIndex = 1852;
    inverse_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    inverse_Float32x4x4.parameters = inverse_Float32x4x4_args;
    Symbol::Resolved(&inverse_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&inverse_Float32x4x4)->signature = "f32x4x4 inverse(f32x4x4)"_c;
    Symbol::Resolved(&inverse_Float32x4x4)->name = "inverse(f32x4x4)"_c;
    Symbol::Resolved(&inverse_Float32x4x4)->nameWithVarNames = "inverse(val : f32x4x4)"_c;
    Symbol::Resolved(&inverse_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// inverse with Float16x4x4
    inverse_Float16x4x4_arg.name = "val"_c;
    inverse_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    inverse_Float16x4x4.documentation = "Returns the inverse of the matrix."_c;
    inverse_Float16x4x4.name = "inverse"_c;
    inverse_Float16x4x4.backendIndex = 1853;
    inverse_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    inverse_Float16x4x4.parameters = inverse_Float16x4x4_args;
    Symbol::Resolved(&inverse_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&inverse_Float16x4x4)->signature = "f16x4x4 inverse(f16x4x4)"_c;
    Symbol::Resolved(&inverse_Float16x4x4)->name = "inverse(f16x4x4)"_c;
    Symbol::Resolved(&inverse_Float16x4x4)->nameWithVarNames = "inverse(val : f16x4x4)"_c;
    Symbol::Resolved(&inverse_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// vertexGetOutputLayer
    VertexGetOutputLayer.documentation = "Returns the output layer for the current vertex."_c;
    VertexGetOutputLayer.name = "vertexGetOutputLayer"_c;
    VertexGetOutputLayer.backendIndex = 1854;
    VertexGetOutputLayer.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetOutputLayer)->signature = "u32 vertexGetOutputLayer()"_c;
    Symbol::Resolved(&VertexGetOutputLayer)->name = "vertexGetOutputLayer()"_c;
    Symbol::Resolved(&VertexGetOutputLayer)->nameWithVarNames = "vertexGetOutputLayer()"_c;
    Symbol::Resolved(&VertexGetOutputLayer)->returnTypeSymbol = &UInt32Type;

    /// vertexGetOutputViewport
    VertexGetOutputViewport.documentation = "Returns the output viewport for the current vertex."_c;
    VertexGetOutputViewport.name = "vertexGetOutputViewport"_c;
    VertexGetOutputViewport.backendIndex = 1855;
    VertexGetOutputViewport.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetOutputViewport)->signature = "u32 vertexGetOutputViewport()"_c;
    Symbol::Resolved(&VertexGetOutputViewport)->name = "vertexGetOutputViewport()"_c;
    Symbol::Resolved(&VertexGetOutputViewport)->nameWithVarNames = "vertexGetOutputViewport()"_c;
    Symbol::Resolved(&VertexGetOutputViewport)->returnTypeSymbol = &UInt32Type;

    /// vertexGetIndex
    VertexGetIndex.documentation = "Returns the index of the current vertex."_c;
    VertexGetIndex.name = "vertexGetIndex"_c;
    VertexGetIndex.backendIndex = 1856;
    VertexGetIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetIndex)->signature = "u32 vertexGetIndex()"_c;
    Symbol::Resolved(&VertexGetIndex)->name = "vertexGetIndex()"_c;
    Symbol::Resolved(&VertexGetIndex)->nameWithVarNames = "vertexGetIndex()"_c;
    Symbol::Resolved(&VertexGetIndex)->returnTypeSymbol = &UInt32Type;

    /// vertexGetInstanceIndex
    VertexGetInstanceIndex.documentation = "Returns the instance index of the current vertex."_c;
    VertexGetInstanceIndex.name = "vertexGetInstanceIndex"_c;
    VertexGetInstanceIndex.backendIndex = 1857;
    VertexGetInstanceIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetInstanceIndex)->signature = "u32 vertexGetInstanceIndex()"_c;
    Symbol::Resolved(&VertexGetInstanceIndex)->name = "vertexGetInstanceIndex()"_c;
    Symbol::Resolved(&VertexGetInstanceIndex)->nameWithVarNames = "vertexGetInstanceIndex()"_c;
    Symbol::Resolved(&VertexGetInstanceIndex)->returnTypeSymbol = &UInt32Type;

    /// vertexGetBaseIndex
    VertexGetBaseIndex.documentation = "Returns the base index of the current vertex."_c;
    VertexGetBaseIndex.name = "vertexGetBaseIndex"_c;
    VertexGetBaseIndex.backendIndex = 1858;
    VertexGetBaseIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetBaseIndex)->signature = "u32 vertexGetBaseIndex()"_c;
    Symbol::Resolved(&VertexGetBaseIndex)->name = "vertexGetBaseIndex()"_c;
    Symbol::Resolved(&VertexGetBaseIndex)->nameWithVarNames = "vertexGetBaseIndex()"_c;
    Symbol::Resolved(&VertexGetBaseIndex)->returnTypeSymbol = &UInt32Type;

    /// vertexGetBaseInstanceIndex
    VertexGetBaseInstanceIndex.documentation = "Returns the base instance index of the current vertex."_c;
    VertexGetBaseInstanceIndex.name = "vertexGetBaseInstanceIndex"_c;
    VertexGetBaseInstanceIndex.backendIndex = 1859;
    VertexGetBaseInstanceIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetBaseInstanceIndex)->signature = "u32 vertexGetBaseInstanceIndex()"_c;
    Symbol::Resolved(&VertexGetBaseInstanceIndex)->name = "vertexGetBaseInstanceIndex()"_c;
    Symbol::Resolved(&VertexGetBaseInstanceIndex)->nameWithVarNames = "vertexGetBaseInstanceIndex()"_c;
    Symbol::Resolved(&VertexGetBaseInstanceIndex)->returnTypeSymbol = &UInt32Type;

    /// vertexGetDrawIndex
    VertexGetDrawIndex.documentation = "Returns the draw index of the current vertex."_c;
    VertexGetDrawIndex.name = "vertexGetDrawIndex"_c;
    VertexGetDrawIndex.backendIndex = 1860;
    VertexGetDrawIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetDrawIndex)->signature = "u32 vertexGetDrawIndex()"_c;
    Symbol::Resolved(&VertexGetDrawIndex)->name = "vertexGetDrawIndex()"_c;
    Symbol::Resolved(&VertexGetDrawIndex)->nameWithVarNames = "vertexGetDrawIndex()"_c;
    Symbol::Resolved(&VertexGetDrawIndex)->returnTypeSymbol = &UInt32Type;

    /// vertexSetOutputLayer with UInt16
    VertexSetOutputLayer_UInt16_arg.name = "val"_c;
    VertexSetOutputLayer_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    VertexSetOutputLayer_UInt16.documentation = "Sets the output layer for the current vertex."_c;
    VertexSetOutputLayer_UInt16.name = "vertexSetOutputLayer"_c;
    VertexSetOutputLayer_UInt16.backendIndex = 1861;
    VertexSetOutputLayer_UInt16.returnType = Type::FullType { VoidType.name };
    VertexSetOutputLayer_UInt16.parameters = VertexSetOutputLayer_UInt16_args;
    Symbol::Resolved(&VertexSetOutputLayer_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&VertexSetOutputLayer_UInt16)->signature = "void vertexSetOutputLayer(u16)"_c;
    Symbol::Resolved(&VertexSetOutputLayer_UInt16)->name = "vertexSetOutputLayer(u16)"_c;
    Symbol::Resolved(&VertexSetOutputLayer_UInt16)->nameWithVarNames = "vertexSetOutputLayer(val : u16)"_c;
    Symbol::Resolved(&VertexSetOutputLayer_UInt16)->returnTypeSymbol = &VoidType;

    /// vertexSetOutputLayer with UInt32
    VertexSetOutputLayer_UInt32_arg.name = "val"_c;
    VertexSetOutputLayer_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    VertexSetOutputLayer_UInt32.documentation = "Sets the output layer for the current vertex."_c;
    VertexSetOutputLayer_UInt32.name = "vertexSetOutputLayer"_c;
    VertexSetOutputLayer_UInt32.backendIndex = 1862;
    VertexSetOutputLayer_UInt32.returnType = Type::FullType { VoidType.name };
    VertexSetOutputLayer_UInt32.parameters = VertexSetOutputLayer_UInt32_args;
    Symbol::Resolved(&VertexSetOutputLayer_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&VertexSetOutputLayer_UInt32)->signature = "void vertexSetOutputLayer(u32)"_c;
    Symbol::Resolved(&VertexSetOutputLayer_UInt32)->name = "vertexSetOutputLayer(u32)"_c;
    Symbol::Resolved(&VertexSetOutputLayer_UInt32)->nameWithVarNames = "vertexSetOutputLayer(val : u32)"_c;
    Symbol::Resolved(&VertexSetOutputLayer_UInt32)->returnTypeSymbol = &VoidType;

    /// vertexSetOutputViewport with UInt16
    VertexSetOutputViewport_UInt16_arg.name = "val"_c;
    VertexSetOutputViewport_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    VertexSetOutputViewport_UInt16.documentation = "Sets the output viewport for the current vertex."_c;
    VertexSetOutputViewport_UInt16.name = "vertexSetOutputViewport"_c;
    VertexSetOutputViewport_UInt16.backendIndex = 1863;
    VertexSetOutputViewport_UInt16.returnType = Type::FullType { VoidType.name };
    VertexSetOutputViewport_UInt16.parameters = VertexSetOutputViewport_UInt16_args;
    Symbol::Resolved(&VertexSetOutputViewport_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&VertexSetOutputViewport_UInt16)->signature = "void vertexSetOutputViewport(u16)"_c;
    Symbol::Resolved(&VertexSetOutputViewport_UInt16)->name = "vertexSetOutputViewport(u16)"_c;
    Symbol::Resolved(&VertexSetOutputViewport_UInt16)->nameWithVarNames = "vertexSetOutputViewport(val : u16)"_c;
    Symbol::Resolved(&VertexSetOutputViewport_UInt16)->returnTypeSymbol = &VoidType;

    /// vertexSetOutputViewport with UInt32
    VertexSetOutputViewport_UInt32_arg.name = "val"_c;
    VertexSetOutputViewport_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    VertexSetOutputViewport_UInt32.documentation = "Sets the output viewport for the current vertex."_c;
    VertexSetOutputViewport_UInt32.name = "vertexSetOutputViewport"_c;
    VertexSetOutputViewport_UInt32.backendIndex = 1864;
    VertexSetOutputViewport_UInt32.returnType = Type::FullType { VoidType.name };
    VertexSetOutputViewport_UInt32.parameters = VertexSetOutputViewport_UInt32_args;
    Symbol::Resolved(&VertexSetOutputViewport_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&VertexSetOutputViewport_UInt32)->signature = "void vertexSetOutputViewport(u32)"_c;
    Symbol::Resolved(&VertexSetOutputViewport_UInt32)->name = "vertexSetOutputViewport(u32)"_c;
    Symbol::Resolved(&VertexSetOutputViewport_UInt32)->nameWithVarNames = "vertexSetOutputViewport(val : u32)"_c;
    Symbol::Resolved(&VertexSetOutputViewport_UInt32)->returnTypeSymbol = &VoidType;

    /// vertexExportCoordinates with Float32x4
    VertexExportCoordinates_Float32x4_arg.name = "val"_c;
    VertexExportCoordinates_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    VertexExportCoordinates_Float32x4.documentation = "Exports the value as the vertex position to the rasterizer. This function must be called at least once in a vertex shader. This is the same as the `SV_POSITION` in HLSL or `gl_Position` in GLSL."_c;
    VertexExportCoordinates_Float32x4.name = "vertexExportCoordinates"_c;
    VertexExportCoordinates_Float32x4.backendIndex = 1865;
    VertexExportCoordinates_Float32x4.returnType = Type::FullType { VoidType.name };
    VertexExportCoordinates_Float32x4.parameters = VertexExportCoordinates_Float32x4_args;
    Symbol::Resolved(&VertexExportCoordinates_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&VertexExportCoordinates_Float32x4)->signature = "void vertexExportCoordinates(f32x4)"_c;
    Symbol::Resolved(&VertexExportCoordinates_Float32x4)->name = "vertexExportCoordinates(f32x4)"_c;
    Symbol::Resolved(&VertexExportCoordinates_Float32x4)->nameWithVarNames = "vertexExportCoordinates(val : f32x4)"_c;
    Symbol::Resolved(&VertexExportCoordinates_Float32x4)->returnTypeSymbol = &VoidType;

    /// vertexExportCoordinates with Float16x4
    VertexExportCoordinates_Float16x4_arg.name = "val"_c;
    VertexExportCoordinates_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    VertexExportCoordinates_Float16x4.documentation = "Exports the value as the vertex position to the rasterizer. This function must be called at least once in a vertex shader. This is the same as the `SV_POSITION` in HLSL or `gl_Position` in GLSL."_c;
    VertexExportCoordinates_Float16x4.name = "vertexExportCoordinates"_c;
    VertexExportCoordinates_Float16x4.backendIndex = 1866;
    VertexExportCoordinates_Float16x4.returnType = Type::FullType { VoidType.name };
    VertexExportCoordinates_Float16x4.parameters = VertexExportCoordinates_Float16x4_args;
    Symbol::Resolved(&VertexExportCoordinates_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&VertexExportCoordinates_Float16x4)->signature = "void vertexExportCoordinates(f16x4)"_c;
    Symbol::Resolved(&VertexExportCoordinates_Float16x4)->name = "vertexExportCoordinates(f16x4)"_c;
    Symbol::Resolved(&VertexExportCoordinates_Float16x4)->nameWithVarNames = "vertexExportCoordinates(val : f16x4)"_c;
    Symbol::Resolved(&VertexExportCoordinates_Float16x4)->returnTypeSymbol = &VoidType;

    /// geometryExportVertex
    GeometryExportVertex.documentation = "Exports the current vertex to the output stream. This function must be called for each vertex in a geometry shader."_c;
    GeometryExportVertex.name = "geometryExportVertex"_c;
    GeometryExportVertex.backendIndex = 1867;
    GeometryExportVertex.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&GeometryExportVertex)->signature = "void geometryExportVertex()"_c;
    Symbol::Resolved(&GeometryExportVertex)->name = "geometryExportVertex()"_c;
    Symbol::Resolved(&GeometryExportVertex)->nameWithVarNames = "geometryExportVertex()"_c;
    Symbol::Resolved(&GeometryExportVertex)->returnTypeSymbol = &VoidType;

    /// geometryExportPrimitive
    GeometryExportPrimitive.documentation = "Exports the current primitive to the output stream. This function must be called after all vertices of a primitive have been exported."_c;
    GeometryExportPrimitive.name = "geometryExportPrimitive"_c;
    GeometryExportPrimitive.backendIndex = 1868;
    GeometryExportPrimitive.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&GeometryExportPrimitive)->signature = "void geometryExportPrimitive()"_c;
    Symbol::Resolved(&GeometryExportPrimitive)->name = "geometryExportPrimitive()"_c;
    Symbol::Resolved(&GeometryExportPrimitive)->nameWithVarNames = "geometryExportPrimitive()"_c;
    Symbol::Resolved(&GeometryExportPrimitive)->returnTypeSymbol = &VoidType;

    /// pixelGetCoordinates
    PixelGetCoordinates_Float32x4.documentation = "Returns the post transformation coordinates of the current pixel. xy is the pixel position in non-normalized coordinates, z is the depth in the range [0, 1] or [-1, 1] based on the graphics API."_c;
    PixelGetCoordinates_Float32x4.name = "pixelGetCoordinates"_c;
    PixelGetCoordinates_Float32x4.backendIndex = 1869;
    PixelGetCoordinates_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&PixelGetCoordinates_Float32x4)->signature = "f32x4 pixelGetCoordinates()"_c;
    Symbol::Resolved(&PixelGetCoordinates_Float32x4)->name = "pixelGetCoordinates()"_c;
    Symbol::Resolved(&PixelGetCoordinates_Float32x4)->nameWithVarNames = "pixelGetCoordinates()"_c;
    Symbol::Resolved(&PixelGetCoordinates_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// pixelGetCoordinates
    PixelGetCoordinates_Float16x4.documentation = "Returns the post transformation coordinates of the current pixel. xy is the pixel position in non-normalized coordinates, z is the depth in the range [0, 1] or [-1, 1] based on the graphics API."_c;
    PixelGetCoordinates_Float16x4.name = "pixelGetCoordinates"_c;
    PixelGetCoordinates_Float16x4.backendIndex = 1870;
    PixelGetCoordinates_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&PixelGetCoordinates_Float16x4)->signature = "f16x4 pixelGetCoordinates()"_c;
    Symbol::Resolved(&PixelGetCoordinates_Float16x4)->name = "pixelGetCoordinates()"_c;
    Symbol::Resolved(&PixelGetCoordinates_Float16x4)->nameWithVarNames = "pixelGetCoordinates()"_c;
    Symbol::Resolved(&PixelGetCoordinates_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// pixelGetDepth
    PixelGetDepth.documentation = "Returns the depth value for the current pixel"_c;
    PixelGetDepth.name = "pixelGetDepth"_c;
    PixelGetDepth.backendIndex = 1871;
    PixelGetDepth.returnType = Type::FullType { Float32Type.name };
    Symbol::Resolved(&PixelGetDepth)->signature = "f32 pixelGetDepth()"_c;
    Symbol::Resolved(&PixelGetDepth)->name = "pixelGetDepth()"_c;
    Symbol::Resolved(&PixelGetDepth)->nameWithVarNames = "pixelGetDepth()"_c;
    Symbol::Resolved(&PixelGetDepth)->returnTypeSymbol = &Float32Type;

    /// pixelSetDepth with Float32
    PixelSetDepth_val.name = "val"_c;
    PixelSetDepth_val.type = Type::FullType{ Float32Type.name };
    PixelSetDepth.documentation = "Sets the depth value for the current pixel"_c;
    PixelSetDepth.name = "pixelSetDepth"_c;
    PixelSetDepth.backendIndex = 1872;
    PixelSetDepth.returnType = Type::FullType { VoidType.name };
    PixelSetDepth.parameters = PixelSetDepth_args;
    Symbol::Resolved(&PixelSetDepth_val)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelSetDepth)->signature = "void pixelSetDepth(f32)"_c;
    Symbol::Resolved(&PixelSetDepth)->name = "pixelSetDepth(f32)"_c;
    Symbol::Resolved(&PixelSetDepth)->nameWithVarNames = "pixelSetDepth(val : f32)"_c;
    Symbol::Resolved(&PixelSetDepth)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32, Int32
    PixelExportColor_Float32_Int32_color.name = "color"_c;
    PixelExportColor_Float32_Int32_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_Int32_index.name = "index"_c;
    PixelExportColor_Float32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32_Int32_index.type.literal = true;
    PixelExportColor_Float32_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32_Int32.backendIndex = 1873;
    PixelExportColor_Float32_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32_Int32.parameters = PixelExportColor_Float32_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float32_Int32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int32)->signature = "void pixelExportColor(f32,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_Int32)->name = "pixelExportColor(f32,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_Int32)->nameWithVarNames = "pixelExportColor(color : f32, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32, UInt32
    PixelExportColor_Float32_UInt32_color.name = "color"_c;
    PixelExportColor_Float32_UInt32_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_UInt32_index.name = "index"_c;
    PixelExportColor_Float32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32_UInt32_index.type.literal = true;
    PixelExportColor_Float32_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32_UInt32.backendIndex = 1874;
    PixelExportColor_Float32_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32_UInt32.parameters = PixelExportColor_Float32_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32)->signature = "void pixelExportColor(f32,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32)->name = "pixelExportColor(f32,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32)->nameWithVarNames = "pixelExportColor(color : f32, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32, Int16
    PixelExportColor_Float32_Int16_color.name = "color"_c;
    PixelExportColor_Float32_Int16_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_Int16_index.name = "index"_c;
    PixelExportColor_Float32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32_Int16_index.type.literal = true;
    PixelExportColor_Float32_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32_Int16.backendIndex = 1875;
    PixelExportColor_Float32_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32_Int16.parameters = PixelExportColor_Float32_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float32_Int16_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int16)->signature = "void pixelExportColor(f32,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_Int16)->name = "pixelExportColor(f32,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_Int16)->nameWithVarNames = "pixelExportColor(color : f32, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32, UInt16
    PixelExportColor_Float32_UInt16_color.name = "color"_c;
    PixelExportColor_Float32_UInt16_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_UInt16_index.name = "index"_c;
    PixelExportColor_Float32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32_UInt16_index.type.literal = true;
    PixelExportColor_Float32_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32_UInt16.backendIndex = 1876;
    PixelExportColor_Float32_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32_UInt16.parameters = PixelExportColor_Float32_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16)->signature = "void pixelExportColor(f32,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16)->name = "pixelExportColor(f32,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16)->nameWithVarNames = "pixelExportColor(color : f32, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x2, Int32
    PixelExportColor_Float32x2_Int32_color.name = "color"_c;
    PixelExportColor_Float32x2_Int32_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_Int32_index.name = "index"_c;
    PixelExportColor_Float32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x2_Int32_index.type.literal = true;
    PixelExportColor_Float32x2_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_Int32.backendIndex = 1877;
    PixelExportColor_Float32x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x2_Int32.parameters = PixelExportColor_Float32x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32)->signature = "void pixelExportColor(f32x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32)->name = "pixelExportColor(f32x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32)->nameWithVarNames = "pixelExportColor(color : f32x2, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x2, UInt32
    PixelExportColor_Float32x2_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x2_UInt32_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x2_UInt32_index.type.literal = true;
    PixelExportColor_Float32x2_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_UInt32.backendIndex = 1878;
    PixelExportColor_Float32x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x2_UInt32.parameters = PixelExportColor_Float32x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32)->signature = "void pixelExportColor(f32x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32)->name = "pixelExportColor(f32x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32)->nameWithVarNames = "pixelExportColor(color : f32x2, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x2, Int16
    PixelExportColor_Float32x2_Int16_color.name = "color"_c;
    PixelExportColor_Float32x2_Int16_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_Int16_index.name = "index"_c;
    PixelExportColor_Float32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x2_Int16_index.type.literal = true;
    PixelExportColor_Float32x2_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_Int16.backendIndex = 1879;
    PixelExportColor_Float32x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x2_Int16.parameters = PixelExportColor_Float32x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16)->signature = "void pixelExportColor(f32x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16)->name = "pixelExportColor(f32x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16)->nameWithVarNames = "pixelExportColor(color : f32x2, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x2, UInt16
    PixelExportColor_Float32x2_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x2_UInt16_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x2_UInt16_index.type.literal = true;
    PixelExportColor_Float32x2_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_UInt16.backendIndex = 1880;
    PixelExportColor_Float32x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x2_UInt16.parameters = PixelExportColor_Float32x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16)->signature = "void pixelExportColor(f32x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16)->name = "pixelExportColor(f32x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16)->nameWithVarNames = "pixelExportColor(color : f32x2, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x3, Int32
    PixelExportColor_Float32x3_Int32_color.name = "color"_c;
    PixelExportColor_Float32x3_Int32_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_Int32_index.name = "index"_c;
    PixelExportColor_Float32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x3_Int32_index.type.literal = true;
    PixelExportColor_Float32x3_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_Int32.backendIndex = 1881;
    PixelExportColor_Float32x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x3_Int32.parameters = PixelExportColor_Float32x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32)->signature = "void pixelExportColor(f32x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32)->name = "pixelExportColor(f32x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32)->nameWithVarNames = "pixelExportColor(color : f32x3, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x3, UInt32
    PixelExportColor_Float32x3_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x3_UInt32_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x3_UInt32_index.type.literal = true;
    PixelExportColor_Float32x3_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_UInt32.backendIndex = 1882;
    PixelExportColor_Float32x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x3_UInt32.parameters = PixelExportColor_Float32x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32)->signature = "void pixelExportColor(f32x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32)->name = "pixelExportColor(f32x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32)->nameWithVarNames = "pixelExportColor(color : f32x3, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x3, Int16
    PixelExportColor_Float32x3_Int16_color.name = "color"_c;
    PixelExportColor_Float32x3_Int16_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_Int16_index.name = "index"_c;
    PixelExportColor_Float32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x3_Int16_index.type.literal = true;
    PixelExportColor_Float32x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_Int16.backendIndex = 1883;
    PixelExportColor_Float32x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x3_Int16.parameters = PixelExportColor_Float32x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16)->signature = "void pixelExportColor(f32x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16)->name = "pixelExportColor(f32x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16)->nameWithVarNames = "pixelExportColor(color : f32x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x3, UInt16
    PixelExportColor_Float32x3_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x3_UInt16_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x3_UInt16_index.type.literal = true;
    PixelExportColor_Float32x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_UInt16.backendIndex = 1884;
    PixelExportColor_Float32x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x3_UInt16.parameters = PixelExportColor_Float32x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16)->signature = "void pixelExportColor(f32x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16)->name = "pixelExportColor(f32x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16)->nameWithVarNames = "pixelExportColor(color : f32x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x4, Int32
    PixelExportColor_Float32x4_Int32_color.name = "color"_c;
    PixelExportColor_Float32x4_Int32_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_Int32_index.name = "index"_c;
    PixelExportColor_Float32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x4_Int32_index.type.literal = true;
    PixelExportColor_Float32x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_Int32.backendIndex = 1885;
    PixelExportColor_Float32x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x4_Int32.parameters = PixelExportColor_Float32x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32)->signature = "void pixelExportColor(f32x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32)->name = "pixelExportColor(f32x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32)->nameWithVarNames = "pixelExportColor(color : f32x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x4, UInt32
    PixelExportColor_Float32x4_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x4_UInt32_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x4_UInt32_index.type.literal = true;
    PixelExportColor_Float32x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_UInt32.backendIndex = 1886;
    PixelExportColor_Float32x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x4_UInt32.parameters = PixelExportColor_Float32x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32)->signature = "void pixelExportColor(f32x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32)->name = "pixelExportColor(f32x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32)->nameWithVarNames = "pixelExportColor(color : f32x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x4, Int16
    PixelExportColor_Float32x4_Int16_color.name = "color"_c;
    PixelExportColor_Float32x4_Int16_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_Int16_index.name = "index"_c;
    PixelExportColor_Float32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x4_Int16_index.type.literal = true;
    PixelExportColor_Float32x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_Int16.backendIndex = 1887;
    PixelExportColor_Float32x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x4_Int16.parameters = PixelExportColor_Float32x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16)->signature = "void pixelExportColor(f32x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16)->name = "pixelExportColor(f32x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16)->nameWithVarNames = "pixelExportColor(color : f32x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x4, UInt16
    PixelExportColor_Float32x4_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x4_UInt16_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x4_UInt16_index.type.literal = true;
    PixelExportColor_Float32x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float32x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_UInt16.backendIndex = 1888;
    PixelExportColor_Float32x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x4_UInt16.parameters = PixelExportColor_Float32x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16)->signature = "void pixelExportColor(f32x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16)->name = "pixelExportColor(f32x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16)->nameWithVarNames = "pixelExportColor(color : f32x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16, Int32
    PixelExportColor_Float16_Int32_color.name = "color"_c;
    PixelExportColor_Float16_Int32_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_Int32_index.name = "index"_c;
    PixelExportColor_Float16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16_Int32_index.type.literal = true;
    PixelExportColor_Float16_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16_Int32.backendIndex = 1889;
    PixelExportColor_Float16_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16_Int32.parameters = PixelExportColor_Float16_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float16_Int32_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int32)->signature = "void pixelExportColor(f16,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_Int32)->name = "pixelExportColor(f16,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_Int32)->nameWithVarNames = "pixelExportColor(color : f16, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16, UInt32
    PixelExportColor_Float16_UInt32_color.name = "color"_c;
    PixelExportColor_Float16_UInt32_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_UInt32_index.name = "index"_c;
    PixelExportColor_Float16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16_UInt32_index.type.literal = true;
    PixelExportColor_Float16_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16_UInt32.backendIndex = 1890;
    PixelExportColor_Float16_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16_UInt32.parameters = PixelExportColor_Float16_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32)->signature = "void pixelExportColor(f16,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32)->name = "pixelExportColor(f16,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32)->nameWithVarNames = "pixelExportColor(color : f16, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16, Int16
    PixelExportColor_Float16_Int16_color.name = "color"_c;
    PixelExportColor_Float16_Int16_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_Int16_index.name = "index"_c;
    PixelExportColor_Float16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16_Int16_index.type.literal = true;
    PixelExportColor_Float16_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16_Int16.backendIndex = 1891;
    PixelExportColor_Float16_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16_Int16.parameters = PixelExportColor_Float16_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float16_Int16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int16)->signature = "void pixelExportColor(f16,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_Int16)->name = "pixelExportColor(f16,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_Int16)->nameWithVarNames = "pixelExportColor(color : f16, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16, UInt16
    PixelExportColor_Float16_UInt16_color.name = "color"_c;
    PixelExportColor_Float16_UInt16_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_UInt16_index.name = "index"_c;
    PixelExportColor_Float16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16_UInt16_index.type.literal = true;
    PixelExportColor_Float16_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16_UInt16.backendIndex = 1892;
    PixelExportColor_Float16_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16_UInt16.parameters = PixelExportColor_Float16_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16)->signature = "void pixelExportColor(f16,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16)->name = "pixelExportColor(f16,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16)->nameWithVarNames = "pixelExportColor(color : f16, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x2, Int32
    PixelExportColor_Float16x2_Int32_color.name = "color"_c;
    PixelExportColor_Float16x2_Int32_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_Int32_index.name = "index"_c;
    PixelExportColor_Float16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x2_Int32_index.type.literal = true;
    PixelExportColor_Float16x2_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_Int32.backendIndex = 1893;
    PixelExportColor_Float16x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x2_Int32.parameters = PixelExportColor_Float16x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32)->signature = "void pixelExportColor(f16x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32)->name = "pixelExportColor(f16x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32)->nameWithVarNames = "pixelExportColor(color : f16x2, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x2, UInt32
    PixelExportColor_Float16x2_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x2_UInt32_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x2_UInt32_index.type.literal = true;
    PixelExportColor_Float16x2_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_UInt32.backendIndex = 1894;
    PixelExportColor_Float16x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x2_UInt32.parameters = PixelExportColor_Float16x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32)->signature = "void pixelExportColor(f16x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32)->name = "pixelExportColor(f16x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32)->nameWithVarNames = "pixelExportColor(color : f16x2, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x2, Int16
    PixelExportColor_Float16x2_Int16_color.name = "color"_c;
    PixelExportColor_Float16x2_Int16_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_Int16_index.name = "index"_c;
    PixelExportColor_Float16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x2_Int16_index.type.literal = true;
    PixelExportColor_Float16x2_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_Int16.backendIndex = 1895;
    PixelExportColor_Float16x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x2_Int16.parameters = PixelExportColor_Float16x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16)->signature = "void pixelExportColor(f16x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16)->name = "pixelExportColor(f16x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16)->nameWithVarNames = "pixelExportColor(color : f16x2, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x2, UInt16
    PixelExportColor_Float16x2_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x2_UInt16_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x2_UInt16_index.type.literal = true;
    PixelExportColor_Float16x2_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_UInt16.backendIndex = 1896;
    PixelExportColor_Float16x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x2_UInt16.parameters = PixelExportColor_Float16x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16)->signature = "void pixelExportColor(f16x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16)->name = "pixelExportColor(f16x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16)->nameWithVarNames = "pixelExportColor(color : f16x2, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x3, Int32
    PixelExportColor_Float16x3_Int32_color.name = "color"_c;
    PixelExportColor_Float16x3_Int32_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_Int32_index.name = "index"_c;
    PixelExportColor_Float16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x3_Int32_index.type.literal = true;
    PixelExportColor_Float16x3_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_Int32.backendIndex = 1897;
    PixelExportColor_Float16x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x3_Int32.parameters = PixelExportColor_Float16x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32)->signature = "void pixelExportColor(f16x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32)->name = "pixelExportColor(f16x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32)->nameWithVarNames = "pixelExportColor(color : f16x3, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x3, UInt32
    PixelExportColor_Float16x3_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x3_UInt32_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x3_UInt32_index.type.literal = true;
    PixelExportColor_Float16x3_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_UInt32.backendIndex = 1898;
    PixelExportColor_Float16x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x3_UInt32.parameters = PixelExportColor_Float16x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32)->signature = "void pixelExportColor(f16x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32)->name = "pixelExportColor(f16x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32)->nameWithVarNames = "pixelExportColor(color : f16x3, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x3, Int16
    PixelExportColor_Float16x3_Int16_color.name = "color"_c;
    PixelExportColor_Float16x3_Int16_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_Int16_index.name = "index"_c;
    PixelExportColor_Float16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x3_Int16_index.type.literal = true;
    PixelExportColor_Float16x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_Int16.backendIndex = 1899;
    PixelExportColor_Float16x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x3_Int16.parameters = PixelExportColor_Float16x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16)->signature = "void pixelExportColor(f16x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16)->name = "pixelExportColor(f16x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16)->nameWithVarNames = "pixelExportColor(color : f16x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x3, UInt16
    PixelExportColor_Float16x3_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x3_UInt16_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x3_UInt16_index.type.literal = true;
    PixelExportColor_Float16x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_UInt16.backendIndex = 1900;
    PixelExportColor_Float16x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x3_UInt16.parameters = PixelExportColor_Float16x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16)->signature = "void pixelExportColor(f16x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16)->name = "pixelExportColor(f16x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16)->nameWithVarNames = "pixelExportColor(color : f16x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x4, Int32
    PixelExportColor_Float16x4_Int32_color.name = "color"_c;
    PixelExportColor_Float16x4_Int32_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_Int32_index.name = "index"_c;
    PixelExportColor_Float16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x4_Int32_index.type.literal = true;
    PixelExportColor_Float16x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_Int32.backendIndex = 1901;
    PixelExportColor_Float16x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x4_Int32.parameters = PixelExportColor_Float16x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32)->signature = "void pixelExportColor(f16x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32)->name = "pixelExportColor(f16x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32)->nameWithVarNames = "pixelExportColor(color : f16x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x4, UInt32
    PixelExportColor_Float16x4_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x4_UInt32_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x4_UInt32_index.type.literal = true;
    PixelExportColor_Float16x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_UInt32.backendIndex = 1902;
    PixelExportColor_Float16x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x4_UInt32.parameters = PixelExportColor_Float16x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32)->signature = "void pixelExportColor(f16x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32)->name = "pixelExportColor(f16x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32)->nameWithVarNames = "pixelExportColor(color : f16x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x4, Int16
    PixelExportColor_Float16x4_Int16_color.name = "color"_c;
    PixelExportColor_Float16x4_Int16_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_Int16_index.name = "index"_c;
    PixelExportColor_Float16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x4_Int16_index.type.literal = true;
    PixelExportColor_Float16x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_Int16.backendIndex = 1903;
    PixelExportColor_Float16x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x4_Int16.parameters = PixelExportColor_Float16x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16)->signature = "void pixelExportColor(f16x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16)->name = "pixelExportColor(f16x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16)->nameWithVarNames = "pixelExportColor(color : f16x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x4, UInt16
    PixelExportColor_Float16x4_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x4_UInt16_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x4_UInt16_index.type.literal = true;
    PixelExportColor_Float16x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Float16x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_UInt16.backendIndex = 1904;
    PixelExportColor_Float16x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x4_UInt16.parameters = PixelExportColor_Float16x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16)->signature = "void pixelExportColor(f16x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16)->name = "pixelExportColor(f16x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16)->nameWithVarNames = "pixelExportColor(color : f16x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32, Int32
    PixelExportColor_Int32_Int32_color.name = "color"_c;
    PixelExportColor_Int32_Int32_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int32_index.name = "index"_c;
    PixelExportColor_Int32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int32_index.type.literal = true;
    PixelExportColor_Int32_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32_Int32.backendIndex = 1905;
    PixelExportColor_Int32_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32_Int32.parameters = PixelExportColor_Int32_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int32_Int32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int32)->signature = "void pixelExportColor(i32,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_Int32)->name = "pixelExportColor(i32,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_Int32)->nameWithVarNames = "pixelExportColor(color : i32, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32, UInt32
    PixelExportColor_Int32_UInt32_color.name = "color"_c;
    PixelExportColor_Int32_UInt32_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_UInt32_index.name = "index"_c;
    PixelExportColor_Int32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32_UInt32_index.type.literal = true;
    PixelExportColor_Int32_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32_UInt32.backendIndex = 1906;
    PixelExportColor_Int32_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32_UInt32.parameters = PixelExportColor_Int32_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32)->signature = "void pixelExportColor(i32,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32)->name = "pixelExportColor(i32,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32)->nameWithVarNames = "pixelExportColor(color : i32, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32, Int16
    PixelExportColor_Int32_Int16_color.name = "color"_c;
    PixelExportColor_Int32_Int16_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int16_index.name = "index"_c;
    PixelExportColor_Int32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32_Int16_index.type.literal = true;
    PixelExportColor_Int32_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32_Int16.backendIndex = 1907;
    PixelExportColor_Int32_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32_Int16.parameters = PixelExportColor_Int32_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int32_Int16_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int16)->signature = "void pixelExportColor(i32,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_Int16)->name = "pixelExportColor(i32,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_Int16)->nameWithVarNames = "pixelExportColor(color : i32, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32, UInt16
    PixelExportColor_Int32_UInt16_color.name = "color"_c;
    PixelExportColor_Int32_UInt16_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_UInt16_index.name = "index"_c;
    PixelExportColor_Int32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32_UInt16_index.type.literal = true;
    PixelExportColor_Int32_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32_UInt16.backendIndex = 1908;
    PixelExportColor_Int32_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32_UInt16.parameters = PixelExportColor_Int32_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16)->signature = "void pixelExportColor(i32,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16)->name = "pixelExportColor(i32,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16)->nameWithVarNames = "pixelExportColor(color : i32, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x2, Int32
    PixelExportColor_Int32x2_Int32_color.name = "color"_c;
    PixelExportColor_Int32x2_Int32_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_Int32_index.name = "index"_c;
    PixelExportColor_Int32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x2_Int32_index.type.literal = true;
    PixelExportColor_Int32x2_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_Int32.backendIndex = 1909;
    PixelExportColor_Int32x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x2_Int32.parameters = PixelExportColor_Int32x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32)->signature = "void pixelExportColor(i32x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32)->name = "pixelExportColor(i32x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32)->nameWithVarNames = "pixelExportColor(color : i32x2, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x2, UInt32
    PixelExportColor_Int32x2_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x2_UInt32_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x2_UInt32_index.type.literal = true;
    PixelExportColor_Int32x2_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_UInt32.backendIndex = 1910;
    PixelExportColor_Int32x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x2_UInt32.parameters = PixelExportColor_Int32x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32)->signature = "void pixelExportColor(i32x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32)->name = "pixelExportColor(i32x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32)->nameWithVarNames = "pixelExportColor(color : i32x2, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x2, Int16
    PixelExportColor_Int32x2_Int16_color.name = "color"_c;
    PixelExportColor_Int32x2_Int16_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_Int16_index.name = "index"_c;
    PixelExportColor_Int32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x2_Int16_index.type.literal = true;
    PixelExportColor_Int32x2_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_Int16.backendIndex = 1911;
    PixelExportColor_Int32x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x2_Int16.parameters = PixelExportColor_Int32x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16)->signature = "void pixelExportColor(i32x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16)->name = "pixelExportColor(i32x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16)->nameWithVarNames = "pixelExportColor(color : i32x2, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x2, UInt16
    PixelExportColor_Int32x2_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x2_UInt16_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x2_UInt16_index.type.literal = true;
    PixelExportColor_Int32x2_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_UInt16.backendIndex = 1912;
    PixelExportColor_Int32x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x2_UInt16.parameters = PixelExportColor_Int32x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16)->signature = "void pixelExportColor(i32x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16)->name = "pixelExportColor(i32x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16)->nameWithVarNames = "pixelExportColor(color : i32x2, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x3, Int32
    PixelExportColor_Int32x3_Int32_color.name = "color"_c;
    PixelExportColor_Int32x3_Int32_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_Int32_index.name = "index"_c;
    PixelExportColor_Int32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x3_Int32_index.type.literal = true;
    PixelExportColor_Int32x3_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_Int32.backendIndex = 1913;
    PixelExportColor_Int32x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x3_Int32.parameters = PixelExportColor_Int32x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32)->signature = "void pixelExportColor(i32x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32)->name = "pixelExportColor(i32x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32)->nameWithVarNames = "pixelExportColor(color : i32x3, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x3, UInt32
    PixelExportColor_Int32x3_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x3_UInt32_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x3_UInt32_index.type.literal = true;
    PixelExportColor_Int32x3_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_UInt32.backendIndex = 1914;
    PixelExportColor_Int32x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x3_UInt32.parameters = PixelExportColor_Int32x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32)->signature = "void pixelExportColor(i32x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32)->name = "pixelExportColor(i32x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32)->nameWithVarNames = "pixelExportColor(color : i32x3, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x3, Int16
    PixelExportColor_Int32x3_Int16_color.name = "color"_c;
    PixelExportColor_Int32x3_Int16_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_Int16_index.name = "index"_c;
    PixelExportColor_Int32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x3_Int16_index.type.literal = true;
    PixelExportColor_Int32x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_Int16.backendIndex = 1915;
    PixelExportColor_Int32x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x3_Int16.parameters = PixelExportColor_Int32x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16)->signature = "void pixelExportColor(i32x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16)->name = "pixelExportColor(i32x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16)->nameWithVarNames = "pixelExportColor(color : i32x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x3, UInt16
    PixelExportColor_Int32x3_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x3_UInt16_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x3_UInt16_index.type.literal = true;
    PixelExportColor_Int32x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_UInt16.backendIndex = 1916;
    PixelExportColor_Int32x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x3_UInt16.parameters = PixelExportColor_Int32x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16)->signature = "void pixelExportColor(i32x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16)->name = "pixelExportColor(i32x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16)->nameWithVarNames = "pixelExportColor(color : i32x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x4, Int32
    PixelExportColor_Int32x4_Int32_color.name = "color"_c;
    PixelExportColor_Int32x4_Int32_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_Int32_index.name = "index"_c;
    PixelExportColor_Int32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x4_Int32_index.type.literal = true;
    PixelExportColor_Int32x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_Int32.backendIndex = 1917;
    PixelExportColor_Int32x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x4_Int32.parameters = PixelExportColor_Int32x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32)->signature = "void pixelExportColor(i32x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32)->name = "pixelExportColor(i32x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32)->nameWithVarNames = "pixelExportColor(color : i32x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x4, UInt32
    PixelExportColor_Int32x4_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x4_UInt32_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x4_UInt32_index.type.literal = true;
    PixelExportColor_Int32x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_UInt32.backendIndex = 1918;
    PixelExportColor_Int32x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x4_UInt32.parameters = PixelExportColor_Int32x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32)->signature = "void pixelExportColor(i32x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32)->name = "pixelExportColor(i32x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32)->nameWithVarNames = "pixelExportColor(color : i32x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x4, Int16
    PixelExportColor_Int32x4_Int16_color.name = "color"_c;
    PixelExportColor_Int32x4_Int16_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_Int16_index.name = "index"_c;
    PixelExportColor_Int32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x4_Int16_index.type.literal = true;
    PixelExportColor_Int32x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_Int16.backendIndex = 1919;
    PixelExportColor_Int32x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x4_Int16.parameters = PixelExportColor_Int32x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16)->signature = "void pixelExportColor(i32x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16)->name = "pixelExportColor(i32x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16)->nameWithVarNames = "pixelExportColor(color : i32x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x4, UInt16
    PixelExportColor_Int32x4_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x4_UInt16_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x4_UInt16_index.type.literal = true;
    PixelExportColor_Int32x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int32x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_UInt16.backendIndex = 1920;
    PixelExportColor_Int32x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x4_UInt16.parameters = PixelExportColor_Int32x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16)->signature = "void pixelExportColor(i32x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16)->name = "pixelExportColor(i32x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16)->nameWithVarNames = "pixelExportColor(color : i32x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16, Int32
    PixelExportColor_Int16_Int32_color.name = "color"_c;
    PixelExportColor_Int16_Int32_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int32_index.name = "index"_c;
    PixelExportColor_Int16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16_Int32_index.type.literal = true;
    PixelExportColor_Int16_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16_Int32.backendIndex = 1921;
    PixelExportColor_Int16_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16_Int32.parameters = PixelExportColor_Int16_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int16_Int32_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int32)->signature = "void pixelExportColor(i16,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_Int32)->name = "pixelExportColor(i16,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_Int32)->nameWithVarNames = "pixelExportColor(color : i16, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16, UInt32
    PixelExportColor_Int16_UInt32_color.name = "color"_c;
    PixelExportColor_Int16_UInt32_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_UInt32_index.name = "index"_c;
    PixelExportColor_Int16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16_UInt32_index.type.literal = true;
    PixelExportColor_Int16_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16_UInt32.backendIndex = 1922;
    PixelExportColor_Int16_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16_UInt32.parameters = PixelExportColor_Int16_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32)->signature = "void pixelExportColor(i16,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32)->name = "pixelExportColor(i16,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32)->nameWithVarNames = "pixelExportColor(color : i16, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16, Int16
    PixelExportColor_Int16_Int16_color.name = "color"_c;
    PixelExportColor_Int16_Int16_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int16_index.name = "index"_c;
    PixelExportColor_Int16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int16_index.type.literal = true;
    PixelExportColor_Int16_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16_Int16.backendIndex = 1923;
    PixelExportColor_Int16_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16_Int16.parameters = PixelExportColor_Int16_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int16_Int16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int16)->signature = "void pixelExportColor(i16,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_Int16)->name = "pixelExportColor(i16,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_Int16)->nameWithVarNames = "pixelExportColor(color : i16, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16, UInt16
    PixelExportColor_Int16_UInt16_color.name = "color"_c;
    PixelExportColor_Int16_UInt16_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_UInt16_index.name = "index"_c;
    PixelExportColor_Int16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16_UInt16_index.type.literal = true;
    PixelExportColor_Int16_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16_UInt16.backendIndex = 1924;
    PixelExportColor_Int16_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16_UInt16.parameters = PixelExportColor_Int16_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16)->signature = "void pixelExportColor(i16,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16)->name = "pixelExportColor(i16,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16)->nameWithVarNames = "pixelExportColor(color : i16, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x2, Int32
    PixelExportColor_Int16x2_Int32_color.name = "color"_c;
    PixelExportColor_Int16x2_Int32_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_Int32_index.name = "index"_c;
    PixelExportColor_Int16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x2_Int32_index.type.literal = true;
    PixelExportColor_Int16x2_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_Int32.backendIndex = 1925;
    PixelExportColor_Int16x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x2_Int32.parameters = PixelExportColor_Int16x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32)->signature = "void pixelExportColor(i16x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32)->name = "pixelExportColor(i16x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32)->nameWithVarNames = "pixelExportColor(color : i16x2, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x2, UInt32
    PixelExportColor_Int16x2_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x2_UInt32_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x2_UInt32_index.type.literal = true;
    PixelExportColor_Int16x2_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_UInt32.backendIndex = 1926;
    PixelExportColor_Int16x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x2_UInt32.parameters = PixelExportColor_Int16x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32)->signature = "void pixelExportColor(i16x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32)->name = "pixelExportColor(i16x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32)->nameWithVarNames = "pixelExportColor(color : i16x2, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x2, Int16
    PixelExportColor_Int16x2_Int16_color.name = "color"_c;
    PixelExportColor_Int16x2_Int16_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_Int16_index.name = "index"_c;
    PixelExportColor_Int16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x2_Int16_index.type.literal = true;
    PixelExportColor_Int16x2_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_Int16.backendIndex = 1927;
    PixelExportColor_Int16x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x2_Int16.parameters = PixelExportColor_Int16x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16)->signature = "void pixelExportColor(i16x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16)->name = "pixelExportColor(i16x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16)->nameWithVarNames = "pixelExportColor(color : i16x2, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x2, UInt16
    PixelExportColor_Int16x2_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x2_UInt16_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x2_UInt16_index.type.literal = true;
    PixelExportColor_Int16x2_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_UInt16.backendIndex = 1928;
    PixelExportColor_Int16x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x2_UInt16.parameters = PixelExportColor_Int16x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16)->signature = "void pixelExportColor(i16x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16)->name = "pixelExportColor(i16x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16)->nameWithVarNames = "pixelExportColor(color : i16x2, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x3, Int32
    PixelExportColor_Int16x3_Int32_color.name = "color"_c;
    PixelExportColor_Int16x3_Int32_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_Int32_index.name = "index"_c;
    PixelExportColor_Int16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x3_Int32_index.type.literal = true;
    PixelExportColor_Int16x3_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_Int32.backendIndex = 1929;
    PixelExportColor_Int16x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x3_Int32.parameters = PixelExportColor_Int16x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32)->signature = "void pixelExportColor(i16x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32)->name = "pixelExportColor(i16x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32)->nameWithVarNames = "pixelExportColor(color : i16x3, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x3, UInt32
    PixelExportColor_Int16x3_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x3_UInt32_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x3_UInt32_index.type.literal = true;
    PixelExportColor_Int16x3_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_UInt32.backendIndex = 1930;
    PixelExportColor_Int16x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x3_UInt32.parameters = PixelExportColor_Int16x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32)->signature = "void pixelExportColor(i16x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32)->name = "pixelExportColor(i16x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32)->nameWithVarNames = "pixelExportColor(color : i16x3, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x3, Int16
    PixelExportColor_Int16x3_Int16_color.name = "color"_c;
    PixelExportColor_Int16x3_Int16_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_Int16_index.name = "index"_c;
    PixelExportColor_Int16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x3_Int16_index.type.literal = true;
    PixelExportColor_Int16x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_Int16.backendIndex = 1931;
    PixelExportColor_Int16x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x3_Int16.parameters = PixelExportColor_Int16x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16)->signature = "void pixelExportColor(i16x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16)->name = "pixelExportColor(i16x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16)->nameWithVarNames = "pixelExportColor(color : i16x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x3, UInt16
    PixelExportColor_Int16x3_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x3_UInt16_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x3_UInt16_index.type.literal = true;
    PixelExportColor_Int16x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_UInt16.backendIndex = 1932;
    PixelExportColor_Int16x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x3_UInt16.parameters = PixelExportColor_Int16x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16)->signature = "void pixelExportColor(i16x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16)->name = "pixelExportColor(i16x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16)->nameWithVarNames = "pixelExportColor(color : i16x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x4, Int32
    PixelExportColor_Int16x4_Int32_color.name = "color"_c;
    PixelExportColor_Int16x4_Int32_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_Int32_index.name = "index"_c;
    PixelExportColor_Int16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x4_Int32_index.type.literal = true;
    PixelExportColor_Int16x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_Int32.backendIndex = 1933;
    PixelExportColor_Int16x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x4_Int32.parameters = PixelExportColor_Int16x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32)->signature = "void pixelExportColor(i16x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32)->name = "pixelExportColor(i16x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32)->nameWithVarNames = "pixelExportColor(color : i16x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x4, UInt32
    PixelExportColor_Int16x4_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x4_UInt32_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x4_UInt32_index.type.literal = true;
    PixelExportColor_Int16x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_UInt32.backendIndex = 1934;
    PixelExportColor_Int16x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x4_UInt32.parameters = PixelExportColor_Int16x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32)->signature = "void pixelExportColor(i16x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32)->name = "pixelExportColor(i16x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32)->nameWithVarNames = "pixelExportColor(color : i16x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x4, Int16
    PixelExportColor_Int16x4_Int16_color.name = "color"_c;
    PixelExportColor_Int16x4_Int16_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_Int16_index.name = "index"_c;
    PixelExportColor_Int16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x4_Int16_index.type.literal = true;
    PixelExportColor_Int16x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_Int16.backendIndex = 1935;
    PixelExportColor_Int16x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x4_Int16.parameters = PixelExportColor_Int16x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16)->signature = "void pixelExportColor(i16x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16)->name = "pixelExportColor(i16x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16)->nameWithVarNames = "pixelExportColor(color : i16x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x4, UInt16
    PixelExportColor_Int16x4_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x4_UInt16_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x4_UInt16_index.type.literal = true;
    PixelExportColor_Int16x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_Int16x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_UInt16.backendIndex = 1936;
    PixelExportColor_Int16x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x4_UInt16.parameters = PixelExportColor_Int16x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16)->signature = "void pixelExportColor(i16x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16)->name = "pixelExportColor(i16x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16)->nameWithVarNames = "pixelExportColor(color : i16x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32, Int32
    PixelExportColor_UInt32_Int32_color.name = "color"_c;
    PixelExportColor_UInt32_Int32_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_Int32_index.name = "index"_c;
    PixelExportColor_UInt32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32_Int32_index.type.literal = true;
    PixelExportColor_UInt32_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_Int32.backendIndex = 1937;
    PixelExportColor_UInt32_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32_Int32.parameters = PixelExportColor_UInt32_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32)->signature = "void pixelExportColor(u32,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32)->name = "pixelExportColor(u32,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32)->nameWithVarNames = "pixelExportColor(color : u32, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32, UInt32
    PixelExportColor_UInt32_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32_UInt32_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt32_index.type.literal = true;
    PixelExportColor_UInt32_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_UInt32.backendIndex = 1938;
    PixelExportColor_UInt32_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32_UInt32.parameters = PixelExportColor_UInt32_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32)->signature = "void pixelExportColor(u32,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32)->name = "pixelExportColor(u32,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32)->nameWithVarNames = "pixelExportColor(color : u32, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32, Int16
    PixelExportColor_UInt32_Int16_color.name = "color"_c;
    PixelExportColor_UInt32_Int16_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_Int16_index.name = "index"_c;
    PixelExportColor_UInt32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32_Int16_index.type.literal = true;
    PixelExportColor_UInt32_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_Int16.backendIndex = 1939;
    PixelExportColor_UInt32_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32_Int16.parameters = PixelExportColor_UInt32_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16)->signature = "void pixelExportColor(u32,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16)->name = "pixelExportColor(u32,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16)->nameWithVarNames = "pixelExportColor(color : u32, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32, UInt16
    PixelExportColor_UInt32_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32_UInt16_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32_UInt16_index.type.literal = true;
    PixelExportColor_UInt32_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_UInt16.backendIndex = 1940;
    PixelExportColor_UInt32_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32_UInt16.parameters = PixelExportColor_UInt32_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16)->signature = "void pixelExportColor(u32,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16)->name = "pixelExportColor(u32,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16)->nameWithVarNames = "pixelExportColor(color : u32, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x2, Int32
    PixelExportColor_UInt32x2_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x2_Int32_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x2_Int32_index.type.literal = true;
    PixelExportColor_UInt32x2_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_Int32.backendIndex = 1941;
    PixelExportColor_UInt32x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x2_Int32.parameters = PixelExportColor_UInt32x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32)->signature = "void pixelExportColor(u32x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32)->name = "pixelExportColor(u32x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32)->nameWithVarNames = "pixelExportColor(color : u32x2, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x2, UInt32
    PixelExportColor_UInt32x2_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x2_UInt32_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x2_UInt32_index.type.literal = true;
    PixelExportColor_UInt32x2_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_UInt32.backendIndex = 1942;
    PixelExportColor_UInt32x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x2_UInt32.parameters = PixelExportColor_UInt32x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32)->signature = "void pixelExportColor(u32x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32)->name = "pixelExportColor(u32x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32)->nameWithVarNames = "pixelExportColor(color : u32x2, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x2, Int16
    PixelExportColor_UInt32x2_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x2_Int16_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x2_Int16_index.type.literal = true;
    PixelExportColor_UInt32x2_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_Int16.backendIndex = 1943;
    PixelExportColor_UInt32x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x2_Int16.parameters = PixelExportColor_UInt32x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16)->signature = "void pixelExportColor(u32x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16)->name = "pixelExportColor(u32x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16)->nameWithVarNames = "pixelExportColor(color : u32x2, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x2, UInt16
    PixelExportColor_UInt32x2_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x2_UInt16_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x2_UInt16_index.type.literal = true;
    PixelExportColor_UInt32x2_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_UInt16.backendIndex = 1944;
    PixelExportColor_UInt32x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x2_UInt16.parameters = PixelExportColor_UInt32x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16)->signature = "void pixelExportColor(u32x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16)->name = "pixelExportColor(u32x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16)->nameWithVarNames = "pixelExportColor(color : u32x2, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, Int32
    PixelExportColor_UInt32x3_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x3_Int32_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x3_Int32_index.type.literal = true;
    PixelExportColor_UInt32x3_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_Int32.backendIndex = 1945;
    PixelExportColor_UInt32x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_Int32.parameters = PixelExportColor_UInt32x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32)->signature = "void pixelExportColor(u32x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32)->name = "pixelExportColor(u32x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32)->nameWithVarNames = "pixelExportColor(color : u32x3, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, UInt32
    PixelExportColor_UInt32x3_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x3_UInt32_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x3_UInt32_index.type.literal = true;
    PixelExportColor_UInt32x3_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_UInt32.backendIndex = 1946;
    PixelExportColor_UInt32x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_UInt32.parameters = PixelExportColor_UInt32x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32)->signature = "void pixelExportColor(u32x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32)->name = "pixelExportColor(u32x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32)->nameWithVarNames = "pixelExportColor(color : u32x3, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, Int16
    PixelExportColor_UInt32x3_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x3_Int16_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x3_Int16_index.type.literal = true;
    PixelExportColor_UInt32x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_Int16.backendIndex = 1947;
    PixelExportColor_UInt32x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_Int16.parameters = PixelExportColor_UInt32x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->signature = "void pixelExportColor(u32x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->name = "pixelExportColor(u32x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->nameWithVarNames = "pixelExportColor(color : u32x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, UInt16
    PixelExportColor_UInt32x3_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x3_UInt16_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x3_UInt16_index.type.literal = true;
    PixelExportColor_UInt32x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_UInt16.backendIndex = 1948;
    PixelExportColor_UInt32x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_UInt16.parameters = PixelExportColor_UInt32x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->signature = "void pixelExportColor(u32x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->name = "pixelExportColor(u32x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->nameWithVarNames = "pixelExportColor(color : u32x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, Int32
    PixelExportColor_UInt32x4_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x4_Int32_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x4_Int32_index.type.literal = true;
    PixelExportColor_UInt32x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_Int32.backendIndex = 1949;
    PixelExportColor_UInt32x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_Int32.parameters = PixelExportColor_UInt32x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->signature = "void pixelExportColor(u32x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->name = "pixelExportColor(u32x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->nameWithVarNames = "pixelExportColor(color : u32x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, UInt32
    PixelExportColor_UInt32x4_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x4_UInt32_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x4_UInt32_index.type.literal = true;
    PixelExportColor_UInt32x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_UInt32.backendIndex = 1950;
    PixelExportColor_UInt32x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_UInt32.parameters = PixelExportColor_UInt32x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->signature = "void pixelExportColor(u32x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->name = "pixelExportColor(u32x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->nameWithVarNames = "pixelExportColor(color : u32x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, Int16
    PixelExportColor_UInt32x4_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x4_Int16_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x4_Int16_index.type.literal = true;
    PixelExportColor_UInt32x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_Int16.backendIndex = 1951;
    PixelExportColor_UInt32x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_Int16.parameters = PixelExportColor_UInt32x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->signature = "void pixelExportColor(u32x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->name = "pixelExportColor(u32x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->nameWithVarNames = "pixelExportColor(color : u32x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, UInt16
    PixelExportColor_UInt32x4_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x4_UInt16_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x4_UInt16_index.type.literal = true;
    PixelExportColor_UInt32x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt32x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_UInt16.backendIndex = 1952;
    PixelExportColor_UInt32x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_UInt16.parameters = PixelExportColor_UInt32x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->signature = "void pixelExportColor(u32x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->name = "pixelExportColor(u32x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->nameWithVarNames = "pixelExportColor(color : u32x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, Int32
    PixelExportColor_UInt16_Int32_color.name = "color"_c;
    PixelExportColor_UInt16_Int32_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_Int32_index.name = "index"_c;
    PixelExportColor_UInt16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16_Int32_index.type.literal = true;
    PixelExportColor_UInt16_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_Int32.backendIndex = 1953;
    PixelExportColor_UInt16_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_Int32.parameters = PixelExportColor_UInt16_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->signature = "void pixelExportColor(u16,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->name = "pixelExportColor(u16,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->nameWithVarNames = "pixelExportColor(color : u16, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, UInt32
    PixelExportColor_UInt16_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16_UInt32_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16_UInt32_index.type.literal = true;
    PixelExportColor_UInt16_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_UInt32.backendIndex = 1954;
    PixelExportColor_UInt16_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_UInt32.parameters = PixelExportColor_UInt16_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->signature = "void pixelExportColor(u16,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->name = "pixelExportColor(u16,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->nameWithVarNames = "pixelExportColor(color : u16, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, Int16
    PixelExportColor_UInt16_Int16_color.name = "color"_c;
    PixelExportColor_UInt16_Int16_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_Int16_index.name = "index"_c;
    PixelExportColor_UInt16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16_Int16_index.type.literal = true;
    PixelExportColor_UInt16_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_Int16.backendIndex = 1955;
    PixelExportColor_UInt16_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_Int16.parameters = PixelExportColor_UInt16_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->signature = "void pixelExportColor(u16,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->name = "pixelExportColor(u16,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->nameWithVarNames = "pixelExportColor(color : u16, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, UInt16
    PixelExportColor_UInt16_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16_UInt16_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt16_index.type.literal = true;
    PixelExportColor_UInt16_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_UInt16.backendIndex = 1956;
    PixelExportColor_UInt16_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_UInt16.parameters = PixelExportColor_UInt16_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16)->signature = "void pixelExportColor(u16,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16)->name = "pixelExportColor(u16,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16)->nameWithVarNames = "pixelExportColor(color : u16, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x2, Int32
    PixelExportColor_UInt16x2_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x2_Int32_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x2_Int32_index.type.literal = true;
    PixelExportColor_UInt16x2_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_Int32.backendIndex = 1957;
    PixelExportColor_UInt16x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x2_Int32.parameters = PixelExportColor_UInt16x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32)->signature = "void pixelExportColor(u16x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32)->name = "pixelExportColor(u16x2,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32)->nameWithVarNames = "pixelExportColor(color : u16x2, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x2, UInt32
    PixelExportColor_UInt16x2_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x2_UInt32_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x2_UInt32_index.type.literal = true;
    PixelExportColor_UInt16x2_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_UInt32.backendIndex = 1958;
    PixelExportColor_UInt16x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x2_UInt32.parameters = PixelExportColor_UInt16x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32)->signature = "void pixelExportColor(u16x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32)->name = "pixelExportColor(u16x2,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32)->nameWithVarNames = "pixelExportColor(color : u16x2, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x2, Int16
    PixelExportColor_UInt16x2_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x2_Int16_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x2_Int16_index.type.literal = true;
    PixelExportColor_UInt16x2_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_Int16.backendIndex = 1959;
    PixelExportColor_UInt16x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x2_Int16.parameters = PixelExportColor_UInt16x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16)->signature = "void pixelExportColor(u16x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16)->name = "pixelExportColor(u16x2,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16)->nameWithVarNames = "pixelExportColor(color : u16x2, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x2, UInt16
    PixelExportColor_UInt16x2_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x2_UInt16_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x2_UInt16_index.type.literal = true;
    PixelExportColor_UInt16x2_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_UInt16.backendIndex = 1960;
    PixelExportColor_UInt16x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x2_UInt16.parameters = PixelExportColor_UInt16x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16)->signature = "void pixelExportColor(u16x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16)->name = "pixelExportColor(u16x2,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16)->nameWithVarNames = "pixelExportColor(color : u16x2, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x3, Int32
    PixelExportColor_UInt16x3_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x3_Int32_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x3_Int32_index.type.literal = true;
    PixelExportColor_UInt16x3_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_Int32.backendIndex = 1961;
    PixelExportColor_UInt16x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x3_Int32.parameters = PixelExportColor_UInt16x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32)->signature = "void pixelExportColor(u16x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32)->name = "pixelExportColor(u16x3,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32)->nameWithVarNames = "pixelExportColor(color : u16x3, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x3, UInt32
    PixelExportColor_UInt16x3_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x3_UInt32_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x3_UInt32_index.type.literal = true;
    PixelExportColor_UInt16x3_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_UInt32.backendIndex = 1962;
    PixelExportColor_UInt16x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x3_UInt32.parameters = PixelExportColor_UInt16x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32)->signature = "void pixelExportColor(u16x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32)->name = "pixelExportColor(u16x3,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32)->nameWithVarNames = "pixelExportColor(color : u16x3, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x3, Int16
    PixelExportColor_UInt16x3_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x3_Int16_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x3_Int16_index.type.literal = true;
    PixelExportColor_UInt16x3_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_Int16.backendIndex = 1963;
    PixelExportColor_UInt16x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x3_Int16.parameters = PixelExportColor_UInt16x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16)->signature = "void pixelExportColor(u16x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16)->name = "pixelExportColor(u16x3,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16)->nameWithVarNames = "pixelExportColor(color : u16x3, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x3, UInt16
    PixelExportColor_UInt16x3_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x3_UInt16_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x3_UInt16_index.type.literal = true;
    PixelExportColor_UInt16x3_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_UInt16.backendIndex = 1964;
    PixelExportColor_UInt16x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x3_UInt16.parameters = PixelExportColor_UInt16x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16)->signature = "void pixelExportColor(u16x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16)->name = "pixelExportColor(u16x3,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16)->nameWithVarNames = "pixelExportColor(color : u16x3, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x4, Int32
    PixelExportColor_UInt16x4_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x4_Int32_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x4_Int32_index.type.literal = true;
    PixelExportColor_UInt16x4_Int32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_Int32.backendIndex = 1965;
    PixelExportColor_UInt16x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x4_Int32.parameters = PixelExportColor_UInt16x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32)->signature = "void pixelExportColor(u16x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32)->name = "pixelExportColor(u16x4,literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32)->nameWithVarNames = "pixelExportColor(color : u16x4, index : literal i32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x4, UInt32
    PixelExportColor_UInt16x4_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x4_UInt32_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x4_UInt32_index.type.literal = true;
    PixelExportColor_UInt16x4_UInt32.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_UInt32.backendIndex = 1966;
    PixelExportColor_UInt16x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x4_UInt32.parameters = PixelExportColor_UInt16x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32)->signature = "void pixelExportColor(u16x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32)->name = "pixelExportColor(u16x4,literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32)->nameWithVarNames = "pixelExportColor(color : u16x4, index : literal u32)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x4, Int16
    PixelExportColor_UInt16x4_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x4_Int16_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x4_Int16_index.type.literal = true;
    PixelExportColor_UInt16x4_Int16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_Int16.backendIndex = 1967;
    PixelExportColor_UInt16x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x4_Int16.parameters = PixelExportColor_UInt16x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16)->signature = "void pixelExportColor(u16x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16)->name = "pixelExportColor(u16x4,literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16)->nameWithVarNames = "pixelExportColor(color : u16x4, index : literal i16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x4, UInt16
    PixelExportColor_UInt16x4_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x4_UInt16_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x4_UInt16_index.type.literal = true;
    PixelExportColor_UInt16x4_UInt16.documentation = "Exports a color value to the framebuffer output at index. This is the same as writing to `SV_TARGET<index>` in HLSL or to a GLSL `layout(location = <index>)` out variable."_c;
    PixelExportColor_UInt16x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_UInt16.backendIndex = 1968;
    PixelExportColor_UInt16x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x4_UInt16.parameters = PixelExportColor_UInt16x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16)->signature = "void pixelExportColor(u16x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16)->name = "pixelExportColor(u16x4,literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16)->nameWithVarNames = "pixelExportColor(color : u16x4, index : literal u16)"_c;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16)->returnTypeSymbol = &VoidType;

    /// computeGetLocalThreadIndices
    ComputeGetLocalThreadIndices.documentation = "Returns the local thread indices within the workgroup"_c;
    ComputeGetLocalThreadIndices.name = "computeGetLocalThreadIndices"_c;
    ComputeGetLocalThreadIndices.backendIndex = 1969;
    ComputeGetLocalThreadIndices.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetLocalThreadIndices)->signature = "u32x3 computeGetLocalThreadIndices()"_c;
    Symbol::Resolved(&ComputeGetLocalThreadIndices)->name = "computeGetLocalThreadIndices()"_c;
    Symbol::Resolved(&ComputeGetLocalThreadIndices)->nameWithVarNames = "computeGetLocalThreadIndices()"_c;
    Symbol::Resolved(&ComputeGetLocalThreadIndices)->returnTypeSymbol = &UInt32x3Type;

    /// computeGetGlobalThreadIndices
    ComputeGetGlobalThreadIndices.documentation = "Returns the global thread indices in the dispatch"_c;
    ComputeGetGlobalThreadIndices.name = "computeGetGlobalThreadIndices"_c;
    ComputeGetGlobalThreadIndices.backendIndex = 1970;
    ComputeGetGlobalThreadIndices.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetGlobalThreadIndices)->signature = "u32x3 computeGetGlobalThreadIndices()"_c;
    Symbol::Resolved(&ComputeGetGlobalThreadIndices)->name = "computeGetGlobalThreadIndices()"_c;
    Symbol::Resolved(&ComputeGetGlobalThreadIndices)->nameWithVarNames = "computeGetGlobalThreadIndices()"_c;
    Symbol::Resolved(&ComputeGetGlobalThreadIndices)->returnTypeSymbol = &UInt32x3Type;

    /// computeGetWorkgroupIndices
    ComputeGetWorkgroupIndices.documentation = "Returns the workgroup indices in the dispatch"_c;
    ComputeGetWorkgroupIndices.name = "computeGetWorkgroupIndices"_c;
    ComputeGetWorkgroupIndices.backendIndex = 1971;
    ComputeGetWorkgroupIndices.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetWorkgroupIndices)->signature = "u32x3 computeGetWorkgroupIndices()"_c;
    Symbol::Resolved(&ComputeGetWorkgroupIndices)->name = "computeGetWorkgroupIndices()"_c;
    Symbol::Resolved(&ComputeGetWorkgroupIndices)->nameWithVarNames = "computeGetWorkgroupIndices()"_c;
    Symbol::Resolved(&ComputeGetWorkgroupIndices)->returnTypeSymbol = &UInt32x3Type;

    /// computeGetWorkGroupDimensions
    ComputeGetWorkGroupDimensions.documentation = "Returns the dimensions of the workgroup in the dispatch"_c;
    ComputeGetWorkGroupDimensions.name = "computeGetWorkGroupDimensions"_c;
    ComputeGetWorkGroupDimensions.backendIndex = 1972;
    ComputeGetWorkGroupDimensions.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetWorkGroupDimensions)->signature = "u32x3 computeGetWorkGroupDimensions()"_c;
    Symbol::Resolved(&ComputeGetWorkGroupDimensions)->name = "computeGetWorkGroupDimensions()"_c;
    Symbol::Resolved(&ComputeGetWorkGroupDimensions)->nameWithVarNames = "computeGetWorkGroupDimensions()"_c;
    Symbol::Resolved(&ComputeGetWorkGroupDimensions)->returnTypeSymbol = &UInt32x3Type;

    /// computeGetIndexInWorkgroup
    ComputeGetIndexInWorkgroup.documentation = "Returns flattened index of the current thread in the workgroup using (x * workgroupSize.y + y) * workgroupSize.x + z"_c;
    ComputeGetIndexInWorkgroup.name = "computeGetIndexInWorkgroup"_c;
    ComputeGetIndexInWorkgroup.backendIndex = 1973;
    ComputeGetIndexInWorkgroup.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&ComputeGetIndexInWorkgroup)->signature = "u32 computeGetIndexInWorkgroup()"_c;
    Symbol::Resolved(&ComputeGetIndexInWorkgroup)->name = "computeGetIndexInWorkgroup()"_c;
    Symbol::Resolved(&ComputeGetIndexInWorkgroup)->nameWithVarNames = "computeGetIndexInWorkgroup()"_c;
    Symbol::Resolved(&ComputeGetIndexInWorkgroup)->returnTypeSymbol = &UInt32Type;

    /// subgroupGetId
    SubgroupGetId.documentation = "Returns the subgroup ID of the current thread"_c;
    SubgroupGetId.name = "subgroupGetId"_c;
    SubgroupGetId.backendIndex = 1974;
    SubgroupGetId.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&SubgroupGetId)->signature = "u32x3 subgroupGetId()"_c;
    Symbol::Resolved(&SubgroupGetId)->name = "subgroupGetId()"_c;
    Symbol::Resolved(&SubgroupGetId)->nameWithVarNames = "subgroupGetId()"_c;
    Symbol::Resolved(&SubgroupGetId)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupGetSize
    SubgroupGetSize.documentation = "Returns the size of the subgroup"_c;
    SubgroupGetSize.name = "subgroupGetSize"_c;
    SubgroupGetSize.backendIndex = 1975;
    SubgroupGetSize.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&SubgroupGetSize)->signature = "u32x3 subgroupGetSize()"_c;
    Symbol::Resolved(&SubgroupGetSize)->name = "subgroupGetSize()"_c;
    Symbol::Resolved(&SubgroupGetSize)->nameWithVarNames = "subgroupGetSize()"_c;
    Symbol::Resolved(&SubgroupGetSize)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupGetNum
    SubgroupGetNum.documentation = "Returns the number of subgroups in the workgroup"_c;
    SubgroupGetNum.name = "subgroupGetNum"_c;
    SubgroupGetNum.backendIndex = 1976;
    SubgroupGetNum.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&SubgroupGetNum)->signature = "u32x3 subgroupGetNum()"_c;
    Symbol::Resolved(&SubgroupGetNum)->name = "subgroupGetNum()"_c;
    Symbol::Resolved(&SubgroupGetNum)->nameWithVarNames = "subgroupGetNum()"_c;
    Symbol::Resolved(&SubgroupGetNum)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupGetThreadMask
    SubgroupGetThreadMask.documentation = "Returns a 128 bit subgroup mask where the current thread is active"_c;
    SubgroupGetThreadMask.name = "subgroupGetThreadMask"_c;
    SubgroupGetThreadMask.backendIndex = 1977;
    SubgroupGetThreadMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetThreadMask)->signature = "u32x4 subgroupGetThreadMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadMask)->name = "subgroupGetThreadMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadMask)->nameWithVarNames = "subgroupGetThreadMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetThreadAndLowerMask
    SubgroupGetThreadAndLowerMask.documentation = "Returns a 128 bit subgroup mask where the current thread and all lower threads are active"_c;
    SubgroupGetThreadAndLowerMask.name = "subgroupGetThreadAndLowerMask"_c;
    SubgroupGetThreadAndLowerMask.backendIndex = 1978;
    SubgroupGetThreadAndLowerMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetThreadAndLowerMask)->signature = "u32x4 subgroupGetThreadAndLowerMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadAndLowerMask)->name = "subgroupGetThreadAndLowerMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadAndLowerMask)->nameWithVarNames = "subgroupGetThreadAndLowerMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadAndLowerMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetLowerMask
    SubgroupGetLowerMask.documentation = "Returns a 128 bit subgroup mask where all lower threads are active"_c;
    SubgroupGetLowerMask.name = "subgroupGetLowerMask"_c;
    SubgroupGetLowerMask.backendIndex = 1979;
    SubgroupGetLowerMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetLowerMask)->signature = "u32x4 subgroupGetLowerMask()"_c;
    Symbol::Resolved(&SubgroupGetLowerMask)->name = "subgroupGetLowerMask()"_c;
    Symbol::Resolved(&SubgroupGetLowerMask)->nameWithVarNames = "subgroupGetLowerMask()"_c;
    Symbol::Resolved(&SubgroupGetLowerMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetThreadAndGreaterMask
    SubgroupGetThreadAndGreaterMask.documentation = "Returns a 128 bit subgroup mask where the current thread and all greater threads are active"_c;
    SubgroupGetThreadAndGreaterMask.name = "subgroupGetThreadAndGreaterMask"_c;
    SubgroupGetThreadAndGreaterMask.backendIndex = 1980;
    SubgroupGetThreadAndGreaterMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetThreadAndGreaterMask)->signature = "u32x4 subgroupGetThreadAndGreaterMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadAndGreaterMask)->name = "subgroupGetThreadAndGreaterMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadAndGreaterMask)->nameWithVarNames = "subgroupGetThreadAndGreaterMask()"_c;
    Symbol::Resolved(&SubgroupGetThreadAndGreaterMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetGreaterMask
    SubgroupGetGreaterMask.documentation = "Returns a 128 bit subgroup mask where all greater threads are active"_c;
    SubgroupGetGreaterMask.name = "subgroupGetGreaterMask"_c;
    SubgroupGetGreaterMask.backendIndex = 1981;
    SubgroupGetGreaterMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetGreaterMask)->signature = "u32x4 subgroupGetGreaterMask()"_c;
    Symbol::Resolved(&SubgroupGetGreaterMask)->name = "subgroupGetGreaterMask()"_c;
    Symbol::Resolved(&SubgroupGetGreaterMask)->nameWithVarNames = "subgroupGetGreaterMask()"_c;
    Symbol::Resolved(&SubgroupGetGreaterMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetFirstActiveThread
    SubgroupGetFirstActiveThread.documentation = "Returns the ID of the first active thread in the subgroup. If no threads are active, returns 0."_c;
    SubgroupGetFirstActiveThread.name = "subgroupGetFirstActiveThread"_c;
    SubgroupGetFirstActiveThread.backendIndex = 1982;
    SubgroupGetFirstActiveThread.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&SubgroupGetFirstActiveThread)->signature = "u32 subgroupGetFirstActiveThread()"_c;
    Symbol::Resolved(&SubgroupGetFirstActiveThread)->name = "subgroupGetFirstActiveThread()"_c;
    Symbol::Resolved(&SubgroupGetFirstActiveThread)->nameWithVarNames = "subgroupGetFirstActiveThread()"_c;
    Symbol::Resolved(&SubgroupGetFirstActiveThread)->returnTypeSymbol = &UInt32Type;

    /// subgroupBroadcastFirstActiveThread with Float32
    SubgroupBroadcastFirstActiveThread_Float32_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float32_value.type = Type::FullType{ Float32Type.name };
    SubgroupBroadcastFirstActiveThread_Float32.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float32.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float32.backendIndex = 1983;
    SubgroupBroadcastFirstActiveThread_Float32.returnType = Type::FullType { Float32Type.name };
    SubgroupBroadcastFirstActiveThread_Float32.parameters = SubgroupBroadcastFirstActiveThread_Float32_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32)->signature = "f32 subgroupBroadcastFirstActiveThread(f32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32)->name = "subgroupBroadcastFirstActiveThread(f32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32)->returnTypeSymbol = &Float32Type;

    /// subgroupBroadcastFirstActiveThread with Float32x2
    SubgroupBroadcastFirstActiveThread_Float32x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float32x2_value.type = Type::FullType{ Float32x2Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float32x2.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float32x2.backendIndex = 1984;
    SubgroupBroadcastFirstActiveThread_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x2.parameters = SubgroupBroadcastFirstActiveThread_Float32x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x2_value)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x2)->signature = "f32x2 subgroupBroadcastFirstActiveThread(f32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x2)->name = "subgroupBroadcastFirstActiveThread(f32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x2)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// subgroupBroadcastFirstActiveThread with Float32x3
    SubgroupBroadcastFirstActiveThread_Float32x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float32x3_value.type = Type::FullType{ Float32x3Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float32x3.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float32x3.backendIndex = 1985;
    SubgroupBroadcastFirstActiveThread_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x3.parameters = SubgroupBroadcastFirstActiveThread_Float32x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x3_value)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x3)->signature = "f32x3 subgroupBroadcastFirstActiveThread(f32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x3)->name = "subgroupBroadcastFirstActiveThread(f32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x3)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// subgroupBroadcastFirstActiveThread with Float32x4
    SubgroupBroadcastFirstActiveThread_Float32x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float32x4_value.type = Type::FullType{ Float32x4Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float32x4.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float32x4.backendIndex = 1986;
    SubgroupBroadcastFirstActiveThread_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x4.parameters = SubgroupBroadcastFirstActiveThread_Float32x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x4_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x4)->signature = "f32x4 subgroupBroadcastFirstActiveThread(f32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x4)->name = "subgroupBroadcastFirstActiveThread(f32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x4)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// subgroupBroadcastFirstActiveThread with Float16
    SubgroupBroadcastFirstActiveThread_Float16_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float16_value.type = Type::FullType{ Float16Type.name };
    SubgroupBroadcastFirstActiveThread_Float16.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float16.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float16.backendIndex = 1987;
    SubgroupBroadcastFirstActiveThread_Float16.returnType = Type::FullType { Float16Type.name };
    SubgroupBroadcastFirstActiveThread_Float16.parameters = SubgroupBroadcastFirstActiveThread_Float16_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16)->signature = "f16 subgroupBroadcastFirstActiveThread(f16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16)->name = "subgroupBroadcastFirstActiveThread(f16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16)->returnTypeSymbol = &Float16Type;

    /// subgroupBroadcastFirstActiveThread with Float16x2
    SubgroupBroadcastFirstActiveThread_Float16x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float16x2_value.type = Type::FullType{ Float16x2Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float16x2.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float16x2.backendIndex = 1988;
    SubgroupBroadcastFirstActiveThread_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x2.parameters = SubgroupBroadcastFirstActiveThread_Float16x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x2_value)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x2)->signature = "f16x2 subgroupBroadcastFirstActiveThread(f16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x2)->name = "subgroupBroadcastFirstActiveThread(f16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x2)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// subgroupBroadcastFirstActiveThread with Float16x3
    SubgroupBroadcastFirstActiveThread_Float16x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float16x3_value.type = Type::FullType{ Float16x3Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float16x3.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float16x3.backendIndex = 1989;
    SubgroupBroadcastFirstActiveThread_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x3.parameters = SubgroupBroadcastFirstActiveThread_Float16x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x3_value)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x3)->signature = "f16x3 subgroupBroadcastFirstActiveThread(f16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x3)->name = "subgroupBroadcastFirstActiveThread(f16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x3)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// subgroupBroadcastFirstActiveThread with Float16x4
    SubgroupBroadcastFirstActiveThread_Float16x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float16x4_value.type = Type::FullType{ Float16x4Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float16x4.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float16x4.backendIndex = 1990;
    SubgroupBroadcastFirstActiveThread_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x4.parameters = SubgroupBroadcastFirstActiveThread_Float16x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x4_value)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x4)->signature = "f16x4 subgroupBroadcastFirstActiveThread(f16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x4)->name = "subgroupBroadcastFirstActiveThread(f16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x4)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : f16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// subgroupBroadcastFirstActiveThread with Int32
    SubgroupBroadcastFirstActiveThread_Int32_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int32_value.type = Type::FullType{ Int32Type.name };
    SubgroupBroadcastFirstActiveThread_Int32.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int32.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int32.backendIndex = 1991;
    SubgroupBroadcastFirstActiveThread_Int32.returnType = Type::FullType { Int32Type.name };
    SubgroupBroadcastFirstActiveThread_Int32.parameters = SubgroupBroadcastFirstActiveThread_Int32_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32)->signature = "i32 subgroupBroadcastFirstActiveThread(i32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32)->name = "subgroupBroadcastFirstActiveThread(i32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32)->returnTypeSymbol = &Int32Type;

    /// subgroupBroadcastFirstActiveThread with Int32x2
    SubgroupBroadcastFirstActiveThread_Int32x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int32x2_value.type = Type::FullType{ Int32x2Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int32x2.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int32x2.backendIndex = 1992;
    SubgroupBroadcastFirstActiveThread_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x2.parameters = SubgroupBroadcastFirstActiveThread_Int32x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x2_value)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x2)->signature = "i32x2 subgroupBroadcastFirstActiveThread(i32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x2)->name = "subgroupBroadcastFirstActiveThread(i32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x2)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// subgroupBroadcastFirstActiveThread with Int32x3
    SubgroupBroadcastFirstActiveThread_Int32x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int32x3_value.type = Type::FullType{ Int32x3Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int32x3.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int32x3.backendIndex = 1993;
    SubgroupBroadcastFirstActiveThread_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x3.parameters = SubgroupBroadcastFirstActiveThread_Int32x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x3_value)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x3)->signature = "i32x3 subgroupBroadcastFirstActiveThread(i32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x3)->name = "subgroupBroadcastFirstActiveThread(i32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x3)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// subgroupBroadcastFirstActiveThread with Int32x4
    SubgroupBroadcastFirstActiveThread_Int32x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int32x4_value.type = Type::FullType{ Int32x4Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int32x4.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int32x4.backendIndex = 1994;
    SubgroupBroadcastFirstActiveThread_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x4.parameters = SubgroupBroadcastFirstActiveThread_Int32x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x4_value)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x4)->signature = "i32x4 subgroupBroadcastFirstActiveThread(i32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x4)->name = "subgroupBroadcastFirstActiveThread(i32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x4)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// subgroupBroadcastFirstActiveThread with Int16
    SubgroupBroadcastFirstActiveThread_Int16_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int16_value.type = Type::FullType{ Int16Type.name };
    SubgroupBroadcastFirstActiveThread_Int16.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int16.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int16.backendIndex = 1995;
    SubgroupBroadcastFirstActiveThread_Int16.returnType = Type::FullType { Int16Type.name };
    SubgroupBroadcastFirstActiveThread_Int16.parameters = SubgroupBroadcastFirstActiveThread_Int16_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16)->signature = "i16 subgroupBroadcastFirstActiveThread(i16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16)->name = "subgroupBroadcastFirstActiveThread(i16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16)->returnTypeSymbol = &Int16Type;

    /// subgroupBroadcastFirstActiveThread with Int16x2
    SubgroupBroadcastFirstActiveThread_Int16x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int16x2_value.type = Type::FullType{ Int16x2Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int16x2.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int16x2.backendIndex = 1996;
    SubgroupBroadcastFirstActiveThread_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x2.parameters = SubgroupBroadcastFirstActiveThread_Int16x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x2_value)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x2)->signature = "i16x2 subgroupBroadcastFirstActiveThread(i16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x2)->name = "subgroupBroadcastFirstActiveThread(i16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x2)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// subgroupBroadcastFirstActiveThread with Int16x3
    SubgroupBroadcastFirstActiveThread_Int16x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int16x3_value.type = Type::FullType{ Int16x3Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int16x3.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int16x3.backendIndex = 1997;
    SubgroupBroadcastFirstActiveThread_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x3.parameters = SubgroupBroadcastFirstActiveThread_Int16x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x3_value)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x3)->signature = "i16x3 subgroupBroadcastFirstActiveThread(i16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x3)->name = "subgroupBroadcastFirstActiveThread(i16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x3)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// subgroupBroadcastFirstActiveThread with Int16x4
    SubgroupBroadcastFirstActiveThread_Int16x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int16x4_value.type = Type::FullType{ Int16x4Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int16x4.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int16x4.backendIndex = 1998;
    SubgroupBroadcastFirstActiveThread_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x4.parameters = SubgroupBroadcastFirstActiveThread_Int16x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x4_value)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x4)->signature = "i16x4 subgroupBroadcastFirstActiveThread(i16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x4)->name = "subgroupBroadcastFirstActiveThread(i16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x4)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : i16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// subgroupBroadcastFirstActiveThread with UInt32
    SubgroupBroadcastFirstActiveThread_UInt32_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt32.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt32.backendIndex = 1999;
    SubgroupBroadcastFirstActiveThread_UInt32.returnType = Type::FullType { UInt32Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32.parameters = SubgroupBroadcastFirstActiveThread_UInt32_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32)->signature = "u32 subgroupBroadcastFirstActiveThread(u32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32)->name = "subgroupBroadcastFirstActiveThread(u32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u32)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32)->returnTypeSymbol = &UInt32Type;

    /// subgroupBroadcastFirstActiveThread with UInt32x2
    SubgroupBroadcastFirstActiveThread_UInt32x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x2_value.type = Type::FullType{ UInt32x2Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x2.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x2.backendIndex = 2000;
    SubgroupBroadcastFirstActiveThread_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x2.parameters = SubgroupBroadcastFirstActiveThread_UInt32x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x2_value)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x2)->signature = "u32x2 subgroupBroadcastFirstActiveThread(u32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x2)->name = "subgroupBroadcastFirstActiveThread(u32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x2)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u32x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// subgroupBroadcastFirstActiveThread with UInt32x3
    SubgroupBroadcastFirstActiveThread_UInt32x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x3_value.type = Type::FullType{ UInt32x3Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x3.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x3.backendIndex = 2001;
    SubgroupBroadcastFirstActiveThread_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x3.parameters = SubgroupBroadcastFirstActiveThread_UInt32x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x3_value)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x3)->signature = "u32x3 subgroupBroadcastFirstActiveThread(u32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x3)->name = "subgroupBroadcastFirstActiveThread(u32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x3)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u32x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupBroadcastFirstActiveThread with UInt32x4
    SubgroupBroadcastFirstActiveThread_UInt32x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x4_value.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x4.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x4.backendIndex = 2002;
    SubgroupBroadcastFirstActiveThread_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x4.parameters = SubgroupBroadcastFirstActiveThread_UInt32x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x4_value)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x4)->signature = "u32x4 subgroupBroadcastFirstActiveThread(u32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x4)->name = "subgroupBroadcastFirstActiveThread(u32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x4)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupBroadcastFirstActiveThread with UInt16
    SubgroupBroadcastFirstActiveThread_UInt16_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt16_value.type = Type::FullType{ UInt16Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt16.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt16.backendIndex = 2003;
    SubgroupBroadcastFirstActiveThread_UInt16.returnType = Type::FullType { UInt16Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16.parameters = SubgroupBroadcastFirstActiveThread_UInt16_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16)->signature = "u16 subgroupBroadcastFirstActiveThread(u16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16)->name = "subgroupBroadcastFirstActiveThread(u16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u16)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16)->returnTypeSymbol = &UInt16Type;

    /// subgroupBroadcastFirstActiveThread with UInt16x2
    SubgroupBroadcastFirstActiveThread_UInt16x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x2_value.type = Type::FullType{ UInt16x2Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x2.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x2.backendIndex = 2004;
    SubgroupBroadcastFirstActiveThread_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x2.parameters = SubgroupBroadcastFirstActiveThread_UInt16x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x2_value)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x2)->signature = "u16x2 subgroupBroadcastFirstActiveThread(u16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x2)->name = "subgroupBroadcastFirstActiveThread(u16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x2)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u16x2)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// subgroupBroadcastFirstActiveThread with UInt16x3
    SubgroupBroadcastFirstActiveThread_UInt16x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x3_value.type = Type::FullType{ UInt16x3Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x3.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x3.backendIndex = 2005;
    SubgroupBroadcastFirstActiveThread_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x3.parameters = SubgroupBroadcastFirstActiveThread_UInt16x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x3_value)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x3)->signature = "u16x3 subgroupBroadcastFirstActiveThread(u16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x3)->name = "subgroupBroadcastFirstActiveThread(u16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x3)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u16x3)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// subgroupBroadcastFirstActiveThread with UInt16x4
    SubgroupBroadcastFirstActiveThread_UInt16x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x4_value.type = Type::FullType{ UInt16x4Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x4.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x4.backendIndex = 2006;
    SubgroupBroadcastFirstActiveThread_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x4.parameters = SubgroupBroadcastFirstActiveThread_UInt16x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x4_value)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x4)->signature = "u16x4 subgroupBroadcastFirstActiveThread(u16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x4)->name = "subgroupBroadcastFirstActiveThread(u16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x4)->nameWithVarNames = "subgroupBroadcastFirstActiveThread(value : u16x4)"_c;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// subgroupBallot with Bool8
    SubgroupBallot_predicate.name = "predicate"_c;
    SubgroupBallot_predicate.type = Type::FullType{ Bool8Type.name };
    SubgroupBallot.documentation = "Constructs a 128 bit subgroup thread mask to the value of the predicate argument for each active thread"_c;
    SubgroupBallot.name = "subgroupBallot"_c;
    SubgroupBallot.backendIndex = 2007;
    SubgroupBallot.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupBallot.parameters = SubgroupBallot_args;
    Symbol::Resolved(&SubgroupBallot_predicate)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&SubgroupBallot)->signature = "u32x4 subgroupBallot(b8)"_c;
    Symbol::Resolved(&SubgroupBallot)->name = "subgroupBallot(b8)"_c;
    Symbol::Resolved(&SubgroupBallot)->nameWithVarNames = "subgroupBallot(predicate : b8)"_c;
    Symbol::Resolved(&SubgroupBallot)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupInverseBallot with Bool8
    SubgroupInverseBallot_predicate.name = "predicate"_c;
    SubgroupInverseBallot_predicate.type = Type::FullType{ Bool8Type.name };
    SubgroupInverseBallot.documentation = "Constructs a 128 bit subgroup thread mask to the inverse of the value of the predicate argument for each active thread"_c;
    SubgroupInverseBallot.name = "subgroupInverseBallot"_c;
    SubgroupInverseBallot.backendIndex = 2008;
    SubgroupInverseBallot.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupInverseBallot.parameters = SubgroupInverseBallot_args;
    Symbol::Resolved(&SubgroupInverseBallot_predicate)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&SubgroupInverseBallot)->signature = "u32x4 subgroupInverseBallot(b8)"_c;
    Symbol::Resolved(&SubgroupInverseBallot)->name = "subgroupInverseBallot(b8)"_c;
    Symbol::Resolved(&SubgroupInverseBallot)->nameWithVarNames = "subgroupInverseBallot(predicate : b8)"_c;
    Symbol::Resolved(&SubgroupInverseBallot)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupBallotBitCount with UInt32x4
    SubgroupBallotBitCount_mask.name = "value"_c;
    SubgroupBallotBitCount_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotBitCount.documentation = "Returns the number of bits set to 1 in a 128 bit subgroup thread mask"_c;
    SubgroupBallotBitCount.name = "subgroupBallotBitCount"_c;
    SubgroupBallotBitCount.backendIndex = 2009;
    SubgroupBallotBitCount.returnType = Type::FullType { UInt32Type.name };
    SubgroupBallotBitCount.parameters = SubgroupBallotBitCount_args;
    Symbol::Resolved(&SubgroupBallotBitCount_mask)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBallotBitCount)->signature = "u32 subgroupBallotBitCount(u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotBitCount)->name = "subgroupBallotBitCount(u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotBitCount)->nameWithVarNames = "subgroupBallotBitCount(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotBitCount)->returnTypeSymbol = &UInt32Type;

    /// subgroupBallotFirstOne with UInt32x4
    SubgroupBallotFirstOne_mask.name = "value"_c;
    SubgroupBallotFirstOne_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotFirstOne.documentation = "Returns the first one (ctz) in a 128 bit subgroup thread mask"_c;
    SubgroupBallotFirstOne.name = "subgroupBallotFirstOne"_c;
    SubgroupBallotFirstOne.backendIndex = 2010;
    SubgroupBallotFirstOne.returnType = Type::FullType { UInt32Type.name };
    SubgroupBallotFirstOne.parameters = SubgroupBallotFirstOne_args;
    Symbol::Resolved(&SubgroupBallotFirstOne_mask)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBallotFirstOne)->signature = "u32 subgroupBallotFirstOne(u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotFirstOne)->name = "subgroupBallotFirstOne(u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotFirstOne)->nameWithVarNames = "subgroupBallotFirstOne(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotFirstOne)->returnTypeSymbol = &UInt32Type;

    /// subgroupBallotLastOne with UInt32x4
    SubgroupBallotLastOne_mask.name = "value"_c;
    SubgroupBallotLastOne_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotLastOne.documentation = "Returns the last one (clz) in a 128 bit subgroup thread mask"_c;
    SubgroupBallotLastOne.name = "subgroupBallotLastOne"_c;
    SubgroupBallotLastOne.backendIndex = 2011;
    SubgroupBallotLastOne.returnType = Type::FullType { UInt32Type.name };
    SubgroupBallotLastOne.parameters = SubgroupBallotLastOne_args;
    Symbol::Resolved(&SubgroupBallotLastOne_mask)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBallotLastOne)->signature = "u32 subgroupBallotLastOne(u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotLastOne)->name = "subgroupBallotLastOne(u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotLastOne)->nameWithVarNames = "subgroupBallotLastOne(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupBallotLastOne)->returnTypeSymbol = &UInt32Type;

    /// subgroupBallotBit with UInt32x4, UInt32
    SubgroupBallotBit_mask.name = "mask"_c;
    SubgroupBallotBit_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotBit_index.name = "index"_c;
    SubgroupBallotBit_index.type = Type::FullType{ UInt32Type.name };
    SubgroupBallotBit_index.type.literal = true;
    SubgroupBallotBit.documentation = "Extracts a specific bit from a 128 bit subgroup thread mask"_c;
    SubgroupBallotBit.name = "subgroupBallotBit"_c;
    SubgroupBallotBit.backendIndex = 2012;
    SubgroupBallotBit.returnType = Type::FullType { UInt32Type.name };
    SubgroupBallotBit.parameters = SubgroupBallotBit_args;
    Symbol::Resolved(&SubgroupBallotBit_mask)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBallotBit_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupBallotBit)->signature = "u32 subgroupBallotBit(u32x4,literal u32)"_c;
    Symbol::Resolved(&SubgroupBallotBit)->name = "subgroupBallotBit(u32x4,literal u32)"_c;
    Symbol::Resolved(&SubgroupBallotBit)->nameWithVarNames = "subgroupBallotBit(mask : u32x4, index : literal u32)"_c;
    Symbol::Resolved(&SubgroupBallotBit)->returnTypeSymbol = &UInt32Type;

    /// subgroupSwapDiagonal with Float32
    SubgroupSwapDiagonal_Float32_value.name = "value"_c;
    SubgroupSwapDiagonal_Float32_value.type = Type::FullType{ Float32Type.name };
    SubgroupSwapDiagonal_Float32.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float32.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32.backendIndex = 2013;
    SubgroupSwapDiagonal_Float32.returnType = Type::FullType { Float32Type.name };
    SubgroupSwapDiagonal_Float32.parameters = SubgroupSwapDiagonal_Float32_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32)->signature = "f32 subgroupSwapDiagonal(f32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32)->name = "subgroupSwapDiagonal(f32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32)->nameWithVarNames = "subgroupSwapDiagonal(value : f32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32)->returnTypeSymbol = &Float32Type;

    /// subgroupSwapDiagonal with Float32x2
    SubgroupSwapDiagonal_Float32x2_value.name = "value"_c;
    SubgroupSwapDiagonal_Float32x2_value.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapDiagonal_Float32x2.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float32x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32x2.backendIndex = 2014;
    SubgroupSwapDiagonal_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    SubgroupSwapDiagonal_Float32x2.parameters = SubgroupSwapDiagonal_Float32x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2_value)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2)->signature = "f32x2 subgroupSwapDiagonal(f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2)->name = "subgroupSwapDiagonal(f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2)->nameWithVarNames = "subgroupSwapDiagonal(value : f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// subgroupSwapDiagonal with Float32x3
    SubgroupSwapDiagonal_Float32x3_value.name = "value"_c;
    SubgroupSwapDiagonal_Float32x3_value.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapDiagonal_Float32x3.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float32x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32x3.backendIndex = 2015;
    SubgroupSwapDiagonal_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    SubgroupSwapDiagonal_Float32x3.parameters = SubgroupSwapDiagonal_Float32x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3_value)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3)->signature = "f32x3 subgroupSwapDiagonal(f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3)->name = "subgroupSwapDiagonal(f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3)->nameWithVarNames = "subgroupSwapDiagonal(value : f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// subgroupSwapDiagonal with Float32x4
    SubgroupSwapDiagonal_Float32x4_value.name = "value"_c;
    SubgroupSwapDiagonal_Float32x4_value.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapDiagonal_Float32x4.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float32x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32x4.backendIndex = 2016;
    SubgroupSwapDiagonal_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    SubgroupSwapDiagonal_Float32x4.parameters = SubgroupSwapDiagonal_Float32x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4)->signature = "f32x4 subgroupSwapDiagonal(f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4)->name = "subgroupSwapDiagonal(f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4)->nameWithVarNames = "subgroupSwapDiagonal(value : f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// subgroupSwapDiagonal with Float16
    SubgroupSwapDiagonal_Float16_value.name = "value"_c;
    SubgroupSwapDiagonal_Float16_value.type = Type::FullType{ Float16Type.name };
    SubgroupSwapDiagonal_Float16.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float16.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16.backendIndex = 2017;
    SubgroupSwapDiagonal_Float16.returnType = Type::FullType { Float16Type.name };
    SubgroupSwapDiagonal_Float16.parameters = SubgroupSwapDiagonal_Float16_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16)->signature = "f16 subgroupSwapDiagonal(f16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16)->name = "subgroupSwapDiagonal(f16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16)->nameWithVarNames = "subgroupSwapDiagonal(value : f16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16)->returnTypeSymbol = &Float16Type;

    /// subgroupSwapDiagonal with Float16x2
    SubgroupSwapDiagonal_Float16x2_value.name = "value"_c;
    SubgroupSwapDiagonal_Float16x2_value.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapDiagonal_Float16x2.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float16x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16x2.backendIndex = 2018;
    SubgroupSwapDiagonal_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    SubgroupSwapDiagonal_Float16x2.parameters = SubgroupSwapDiagonal_Float16x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2_value)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2)->signature = "f16x2 subgroupSwapDiagonal(f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2)->name = "subgroupSwapDiagonal(f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2)->nameWithVarNames = "subgroupSwapDiagonal(value : f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// subgroupSwapDiagonal with Float16x3
    SubgroupSwapDiagonal_Float16x3_value.name = "value"_c;
    SubgroupSwapDiagonal_Float16x3_value.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapDiagonal_Float16x3.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float16x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16x3.backendIndex = 2019;
    SubgroupSwapDiagonal_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    SubgroupSwapDiagonal_Float16x3.parameters = SubgroupSwapDiagonal_Float16x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3_value)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3)->signature = "f16x3 subgroupSwapDiagonal(f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3)->name = "subgroupSwapDiagonal(f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3)->nameWithVarNames = "subgroupSwapDiagonal(value : f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// subgroupSwapDiagonal with Float16x4
    SubgroupSwapDiagonal_Float16x4_value.name = "value"_c;
    SubgroupSwapDiagonal_Float16x4_value.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapDiagonal_Float16x4.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Float16x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16x4.backendIndex = 2020;
    SubgroupSwapDiagonal_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    SubgroupSwapDiagonal_Float16x4.parameters = SubgroupSwapDiagonal_Float16x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4_value)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4)->signature = "f16x4 subgroupSwapDiagonal(f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4)->name = "subgroupSwapDiagonal(f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4)->nameWithVarNames = "subgroupSwapDiagonal(value : f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// subgroupSwapDiagonal with Int32
    SubgroupSwapDiagonal_Int32_value.name = "value"_c;
    SubgroupSwapDiagonal_Int32_value.type = Type::FullType{ Int32Type.name };
    SubgroupSwapDiagonal_Int32.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int32.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32.backendIndex = 2021;
    SubgroupSwapDiagonal_Int32.returnType = Type::FullType { Int32Type.name };
    SubgroupSwapDiagonal_Int32.parameters = SubgroupSwapDiagonal_Int32_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32)->signature = "i32 subgroupSwapDiagonal(i32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32)->name = "subgroupSwapDiagonal(i32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32)->nameWithVarNames = "subgroupSwapDiagonal(value : i32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32)->returnTypeSymbol = &Int32Type;

    /// subgroupSwapDiagonal with Int32x2
    SubgroupSwapDiagonal_Int32x2_value.name = "value"_c;
    SubgroupSwapDiagonal_Int32x2_value.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapDiagonal_Int32x2.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int32x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32x2.backendIndex = 2022;
    SubgroupSwapDiagonal_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    SubgroupSwapDiagonal_Int32x2.parameters = SubgroupSwapDiagonal_Int32x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2_value)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2)->signature = "i32x2 subgroupSwapDiagonal(i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2)->name = "subgroupSwapDiagonal(i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2)->nameWithVarNames = "subgroupSwapDiagonal(value : i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// subgroupSwapDiagonal with Int32x3
    SubgroupSwapDiagonal_Int32x3_value.name = "value"_c;
    SubgroupSwapDiagonal_Int32x3_value.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapDiagonal_Int32x3.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int32x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32x3.backendIndex = 2023;
    SubgroupSwapDiagonal_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    SubgroupSwapDiagonal_Int32x3.parameters = SubgroupSwapDiagonal_Int32x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3_value)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3)->signature = "i32x3 subgroupSwapDiagonal(i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3)->name = "subgroupSwapDiagonal(i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3)->nameWithVarNames = "subgroupSwapDiagonal(value : i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// subgroupSwapDiagonal with Int32x4
    SubgroupSwapDiagonal_Int32x4_value.name = "value"_c;
    SubgroupSwapDiagonal_Int32x4_value.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapDiagonal_Int32x4.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int32x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32x4.backendIndex = 2024;
    SubgroupSwapDiagonal_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    SubgroupSwapDiagonal_Int32x4.parameters = SubgroupSwapDiagonal_Int32x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4_value)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4)->signature = "i32x4 subgroupSwapDiagonal(i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4)->name = "subgroupSwapDiagonal(i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4)->nameWithVarNames = "subgroupSwapDiagonal(value : i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// subgroupSwapDiagonal with Int16
    SubgroupSwapDiagonal_Int16_value.name = "value"_c;
    SubgroupSwapDiagonal_Int16_value.type = Type::FullType{ Int16Type.name };
    SubgroupSwapDiagonal_Int16.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int16.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16.backendIndex = 2025;
    SubgroupSwapDiagonal_Int16.returnType = Type::FullType { Int16Type.name };
    SubgroupSwapDiagonal_Int16.parameters = SubgroupSwapDiagonal_Int16_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16)->signature = "i16 subgroupSwapDiagonal(i16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16)->name = "subgroupSwapDiagonal(i16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16)->nameWithVarNames = "subgroupSwapDiagonal(value : i16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16)->returnTypeSymbol = &Int16Type;

    /// subgroupSwapDiagonal with Int16x2
    SubgroupSwapDiagonal_Int16x2_value.name = "value"_c;
    SubgroupSwapDiagonal_Int16x2_value.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapDiagonal_Int16x2.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int16x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16x2.backendIndex = 2026;
    SubgroupSwapDiagonal_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    SubgroupSwapDiagonal_Int16x2.parameters = SubgroupSwapDiagonal_Int16x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2_value)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2)->signature = "i16x2 subgroupSwapDiagonal(i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2)->name = "subgroupSwapDiagonal(i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2)->nameWithVarNames = "subgroupSwapDiagonal(value : i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// subgroupSwapDiagonal with Int16x3
    SubgroupSwapDiagonal_Int16x3_value.name = "value"_c;
    SubgroupSwapDiagonal_Int16x3_value.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapDiagonal_Int16x3.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int16x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16x3.backendIndex = 2027;
    SubgroupSwapDiagonal_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    SubgroupSwapDiagonal_Int16x3.parameters = SubgroupSwapDiagonal_Int16x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3_value)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3)->signature = "i16x3 subgroupSwapDiagonal(i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3)->name = "subgroupSwapDiagonal(i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3)->nameWithVarNames = "subgroupSwapDiagonal(value : i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// subgroupSwapDiagonal with Int16x4
    SubgroupSwapDiagonal_Int16x4_value.name = "value"_c;
    SubgroupSwapDiagonal_Int16x4_value.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapDiagonal_Int16x4.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_Int16x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16x4.backendIndex = 2028;
    SubgroupSwapDiagonal_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    SubgroupSwapDiagonal_Int16x4.parameters = SubgroupSwapDiagonal_Int16x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4_value)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4)->signature = "i16x4 subgroupSwapDiagonal(i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4)->name = "subgroupSwapDiagonal(i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4)->nameWithVarNames = "subgroupSwapDiagonal(value : i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// subgroupSwapDiagonal with UInt32
    SubgroupSwapDiagonal_UInt32_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapDiagonal_UInt32.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt32.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32.backendIndex = 2029;
    SubgroupSwapDiagonal_UInt32.returnType = Type::FullType { UInt32Type.name };
    SubgroupSwapDiagonal_UInt32.parameters = SubgroupSwapDiagonal_UInt32_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32)->signature = "u32 subgroupSwapDiagonal(u32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32)->name = "subgroupSwapDiagonal(u32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32)->nameWithVarNames = "subgroupSwapDiagonal(value : u32)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32)->returnTypeSymbol = &UInt32Type;

    /// subgroupSwapDiagonal with UInt32x2
    SubgroupSwapDiagonal_UInt32x2_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt32x2_value.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapDiagonal_UInt32x2.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt32x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32x2.backendIndex = 2030;
    SubgroupSwapDiagonal_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    SubgroupSwapDiagonal_UInt32x2.parameters = SubgroupSwapDiagonal_UInt32x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2_value)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2)->signature = "u32x2 subgroupSwapDiagonal(u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2)->name = "subgroupSwapDiagonal(u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2)->nameWithVarNames = "subgroupSwapDiagonal(value : u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// subgroupSwapDiagonal with UInt32x3
    SubgroupSwapDiagonal_UInt32x3_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt32x3_value.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapDiagonal_UInt32x3.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt32x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32x3.backendIndex = 2031;
    SubgroupSwapDiagonal_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    SubgroupSwapDiagonal_UInt32x3.parameters = SubgroupSwapDiagonal_UInt32x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3_value)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3)->signature = "u32x3 subgroupSwapDiagonal(u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3)->name = "subgroupSwapDiagonal(u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3)->nameWithVarNames = "subgroupSwapDiagonal(value : u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupSwapDiagonal with UInt32x4
    SubgroupSwapDiagonal_UInt32x4_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt32x4_value.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapDiagonal_UInt32x4.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt32x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32x4.backendIndex = 2032;
    SubgroupSwapDiagonal_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupSwapDiagonal_UInt32x4.parameters = SubgroupSwapDiagonal_UInt32x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4_value)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4)->signature = "u32x4 subgroupSwapDiagonal(u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4)->name = "subgroupSwapDiagonal(u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4)->nameWithVarNames = "subgroupSwapDiagonal(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupSwapDiagonal with UInt16
    SubgroupSwapDiagonal_UInt16_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt16_value.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapDiagonal_UInt16.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt16.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16.backendIndex = 2033;
    SubgroupSwapDiagonal_UInt16.returnType = Type::FullType { UInt16Type.name };
    SubgroupSwapDiagonal_UInt16.parameters = SubgroupSwapDiagonal_UInt16_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16)->signature = "u16 subgroupSwapDiagonal(u16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16)->name = "subgroupSwapDiagonal(u16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16)->nameWithVarNames = "subgroupSwapDiagonal(value : u16)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16)->returnTypeSymbol = &UInt16Type;

    /// subgroupSwapDiagonal with UInt16x2
    SubgroupSwapDiagonal_UInt16x2_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt16x2_value.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapDiagonal_UInt16x2.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt16x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16x2.backendIndex = 2034;
    SubgroupSwapDiagonal_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    SubgroupSwapDiagonal_UInt16x2.parameters = SubgroupSwapDiagonal_UInt16x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2_value)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2)->signature = "u16x2 subgroupSwapDiagonal(u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2)->name = "subgroupSwapDiagonal(u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2)->nameWithVarNames = "subgroupSwapDiagonal(value : u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// subgroupSwapDiagonal with UInt16x3
    SubgroupSwapDiagonal_UInt16x3_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt16x3_value.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapDiagonal_UInt16x3.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt16x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16x3.backendIndex = 2035;
    SubgroupSwapDiagonal_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    SubgroupSwapDiagonal_UInt16x3.parameters = SubgroupSwapDiagonal_UInt16x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3_value)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3)->signature = "u16x3 subgroupSwapDiagonal(u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3)->name = "subgroupSwapDiagonal(u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3)->nameWithVarNames = "subgroupSwapDiagonal(value : u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// subgroupSwapDiagonal with UInt16x4
    SubgroupSwapDiagonal_UInt16x4_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt16x4_value.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapDiagonal_UInt16x4.documentation = "Swaps the value at the current thread with the value at the diagonal thread in the subgroup"_c;
    SubgroupSwapDiagonal_UInt16x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16x4.backendIndex = 2036;
    SubgroupSwapDiagonal_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    SubgroupSwapDiagonal_UInt16x4.parameters = SubgroupSwapDiagonal_UInt16x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4_value)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4)->signature = "u16x4 subgroupSwapDiagonal(u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4)->name = "subgroupSwapDiagonal(u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4)->nameWithVarNames = "subgroupSwapDiagonal(value : u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// subgroupSwapVertical with Float32
    SubgroupSwapVertical_Float32_value.name = "value"_c;
    SubgroupSwapVertical_Float32_value.type = Type::FullType{ Float32Type.name };
    SubgroupSwapVertical_Float32.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float32.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32.backendIndex = 2037;
    SubgroupSwapVertical_Float32.returnType = Type::FullType { Float32Type.name };
    SubgroupSwapVertical_Float32.parameters = SubgroupSwapVertical_Float32_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32)->signature = "f32 subgroupSwapVertical(f32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32)->name = "subgroupSwapVertical(f32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32)->nameWithVarNames = "subgroupSwapVertical(value : f32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32)->returnTypeSymbol = &Float32Type;

    /// subgroupSwapVertical with Float32x2
    SubgroupSwapVertical_Float32x2_value.name = "value"_c;
    SubgroupSwapVertical_Float32x2_value.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapVertical_Float32x2.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float32x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32x2.backendIndex = 2038;
    SubgroupSwapVertical_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    SubgroupSwapVertical_Float32x2.parameters = SubgroupSwapVertical_Float32x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2_value)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2)->signature = "f32x2 subgroupSwapVertical(f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2)->name = "subgroupSwapVertical(f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2)->nameWithVarNames = "subgroupSwapVertical(value : f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// subgroupSwapVertical with Float32x3
    SubgroupSwapVertical_Float32x3_value.name = "value"_c;
    SubgroupSwapVertical_Float32x3_value.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapVertical_Float32x3.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float32x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32x3.backendIndex = 2039;
    SubgroupSwapVertical_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    SubgroupSwapVertical_Float32x3.parameters = SubgroupSwapVertical_Float32x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3_value)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3)->signature = "f32x3 subgroupSwapVertical(f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3)->name = "subgroupSwapVertical(f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3)->nameWithVarNames = "subgroupSwapVertical(value : f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// subgroupSwapVertical with Float32x4
    SubgroupSwapVertical_Float32x4_value.name = "value"_c;
    SubgroupSwapVertical_Float32x4_value.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapVertical_Float32x4.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float32x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32x4.backendIndex = 2040;
    SubgroupSwapVertical_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    SubgroupSwapVertical_Float32x4.parameters = SubgroupSwapVertical_Float32x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4)->signature = "f32x4 subgroupSwapVertical(f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4)->name = "subgroupSwapVertical(f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4)->nameWithVarNames = "subgroupSwapVertical(value : f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// subgroupSwapVertical with Float16
    SubgroupSwapVertical_Float16_value.name = "value"_c;
    SubgroupSwapVertical_Float16_value.type = Type::FullType{ Float16Type.name };
    SubgroupSwapVertical_Float16.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float16.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16.backendIndex = 2041;
    SubgroupSwapVertical_Float16.returnType = Type::FullType { Float16Type.name };
    SubgroupSwapVertical_Float16.parameters = SubgroupSwapVertical_Float16_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16)->signature = "f16 subgroupSwapVertical(f16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16)->name = "subgroupSwapVertical(f16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16)->nameWithVarNames = "subgroupSwapVertical(value : f16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16)->returnTypeSymbol = &Float16Type;

    /// subgroupSwapVertical with Float16x2
    SubgroupSwapVertical_Float16x2_value.name = "value"_c;
    SubgroupSwapVertical_Float16x2_value.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapVertical_Float16x2.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float16x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16x2.backendIndex = 2042;
    SubgroupSwapVertical_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    SubgroupSwapVertical_Float16x2.parameters = SubgroupSwapVertical_Float16x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2_value)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2)->signature = "f16x2 subgroupSwapVertical(f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2)->name = "subgroupSwapVertical(f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2)->nameWithVarNames = "subgroupSwapVertical(value : f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// subgroupSwapVertical with Float16x3
    SubgroupSwapVertical_Float16x3_value.name = "value"_c;
    SubgroupSwapVertical_Float16x3_value.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapVertical_Float16x3.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float16x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16x3.backendIndex = 2043;
    SubgroupSwapVertical_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    SubgroupSwapVertical_Float16x3.parameters = SubgroupSwapVertical_Float16x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3_value)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3)->signature = "f16x3 subgroupSwapVertical(f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3)->name = "subgroupSwapVertical(f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3)->nameWithVarNames = "subgroupSwapVertical(value : f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// subgroupSwapVertical with Float16x4
    SubgroupSwapVertical_Float16x4_value.name = "value"_c;
    SubgroupSwapVertical_Float16x4_value.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapVertical_Float16x4.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Float16x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16x4.backendIndex = 2044;
    SubgroupSwapVertical_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    SubgroupSwapVertical_Float16x4.parameters = SubgroupSwapVertical_Float16x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4_value)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4)->signature = "f16x4 subgroupSwapVertical(f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4)->name = "subgroupSwapVertical(f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4)->nameWithVarNames = "subgroupSwapVertical(value : f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// subgroupSwapVertical with Int32
    SubgroupSwapVertical_Int32_value.name = "value"_c;
    SubgroupSwapVertical_Int32_value.type = Type::FullType{ Int32Type.name };
    SubgroupSwapVertical_Int32.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int32.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32.backendIndex = 2045;
    SubgroupSwapVertical_Int32.returnType = Type::FullType { Int32Type.name };
    SubgroupSwapVertical_Int32.parameters = SubgroupSwapVertical_Int32_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32)->signature = "i32 subgroupSwapVertical(i32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32)->name = "subgroupSwapVertical(i32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32)->nameWithVarNames = "subgroupSwapVertical(value : i32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32)->returnTypeSymbol = &Int32Type;

    /// subgroupSwapVertical with Int32x2
    SubgroupSwapVertical_Int32x2_value.name = "value"_c;
    SubgroupSwapVertical_Int32x2_value.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapVertical_Int32x2.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int32x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32x2.backendIndex = 2046;
    SubgroupSwapVertical_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    SubgroupSwapVertical_Int32x2.parameters = SubgroupSwapVertical_Int32x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2_value)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2)->signature = "i32x2 subgroupSwapVertical(i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2)->name = "subgroupSwapVertical(i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2)->nameWithVarNames = "subgroupSwapVertical(value : i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// subgroupSwapVertical with Int32x3
    SubgroupSwapVertical_Int32x3_value.name = "value"_c;
    SubgroupSwapVertical_Int32x3_value.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapVertical_Int32x3.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int32x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32x3.backendIndex = 2047;
    SubgroupSwapVertical_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    SubgroupSwapVertical_Int32x3.parameters = SubgroupSwapVertical_Int32x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3_value)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3)->signature = "i32x3 subgroupSwapVertical(i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3)->name = "subgroupSwapVertical(i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3)->nameWithVarNames = "subgroupSwapVertical(value : i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// subgroupSwapVertical with Int32x4
    SubgroupSwapVertical_Int32x4_value.name = "value"_c;
    SubgroupSwapVertical_Int32x4_value.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapVertical_Int32x4.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int32x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32x4.backendIndex = 2048;
    SubgroupSwapVertical_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    SubgroupSwapVertical_Int32x4.parameters = SubgroupSwapVertical_Int32x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4_value)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4)->signature = "i32x4 subgroupSwapVertical(i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4)->name = "subgroupSwapVertical(i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4)->nameWithVarNames = "subgroupSwapVertical(value : i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// subgroupSwapVertical with Int16
    SubgroupSwapVertical_Int16_value.name = "value"_c;
    SubgroupSwapVertical_Int16_value.type = Type::FullType{ Int16Type.name };
    SubgroupSwapVertical_Int16.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int16.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16.backendIndex = 2049;
    SubgroupSwapVertical_Int16.returnType = Type::FullType { Int16Type.name };
    SubgroupSwapVertical_Int16.parameters = SubgroupSwapVertical_Int16_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16)->signature = "i16 subgroupSwapVertical(i16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16)->name = "subgroupSwapVertical(i16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16)->nameWithVarNames = "subgroupSwapVertical(value : i16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16)->returnTypeSymbol = &Int16Type;

    /// subgroupSwapVertical with Int16x2
    SubgroupSwapVertical_Int16x2_value.name = "value"_c;
    SubgroupSwapVertical_Int16x2_value.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapVertical_Int16x2.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int16x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16x2.backendIndex = 2050;
    SubgroupSwapVertical_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    SubgroupSwapVertical_Int16x2.parameters = SubgroupSwapVertical_Int16x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2_value)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2)->signature = "i16x2 subgroupSwapVertical(i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2)->name = "subgroupSwapVertical(i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2)->nameWithVarNames = "subgroupSwapVertical(value : i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// subgroupSwapVertical with Int16x3
    SubgroupSwapVertical_Int16x3_value.name = "value"_c;
    SubgroupSwapVertical_Int16x3_value.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapVertical_Int16x3.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int16x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16x3.backendIndex = 2051;
    SubgroupSwapVertical_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    SubgroupSwapVertical_Int16x3.parameters = SubgroupSwapVertical_Int16x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3_value)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3)->signature = "i16x3 subgroupSwapVertical(i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3)->name = "subgroupSwapVertical(i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3)->nameWithVarNames = "subgroupSwapVertical(value : i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// subgroupSwapVertical with Int16x4
    SubgroupSwapVertical_Int16x4_value.name = "value"_c;
    SubgroupSwapVertical_Int16x4_value.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapVertical_Int16x4.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_Int16x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16x4.backendIndex = 2052;
    SubgroupSwapVertical_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    SubgroupSwapVertical_Int16x4.parameters = SubgroupSwapVertical_Int16x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4_value)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4)->signature = "i16x4 subgroupSwapVertical(i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4)->name = "subgroupSwapVertical(i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4)->nameWithVarNames = "subgroupSwapVertical(value : i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// subgroupSwapVertical with UInt32
    SubgroupSwapVertical_UInt32_value.name = "value"_c;
    SubgroupSwapVertical_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapVertical_UInt32.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt32.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32.backendIndex = 2053;
    SubgroupSwapVertical_UInt32.returnType = Type::FullType { UInt32Type.name };
    SubgroupSwapVertical_UInt32.parameters = SubgroupSwapVertical_UInt32_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32)->signature = "u32 subgroupSwapVertical(u32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32)->name = "subgroupSwapVertical(u32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32)->nameWithVarNames = "subgroupSwapVertical(value : u32)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32)->returnTypeSymbol = &UInt32Type;

    /// subgroupSwapVertical with UInt32x2
    SubgroupSwapVertical_UInt32x2_value.name = "value"_c;
    SubgroupSwapVertical_UInt32x2_value.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapVertical_UInt32x2.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt32x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32x2.backendIndex = 2054;
    SubgroupSwapVertical_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    SubgroupSwapVertical_UInt32x2.parameters = SubgroupSwapVertical_UInt32x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2_value)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2)->signature = "u32x2 subgroupSwapVertical(u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2)->name = "subgroupSwapVertical(u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2)->nameWithVarNames = "subgroupSwapVertical(value : u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// subgroupSwapVertical with UInt32x3
    SubgroupSwapVertical_UInt32x3_value.name = "value"_c;
    SubgroupSwapVertical_UInt32x3_value.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapVertical_UInt32x3.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt32x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32x3.backendIndex = 2055;
    SubgroupSwapVertical_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    SubgroupSwapVertical_UInt32x3.parameters = SubgroupSwapVertical_UInt32x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3_value)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3)->signature = "u32x3 subgroupSwapVertical(u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3)->name = "subgroupSwapVertical(u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3)->nameWithVarNames = "subgroupSwapVertical(value : u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupSwapVertical with UInt32x4
    SubgroupSwapVertical_UInt32x4_value.name = "value"_c;
    SubgroupSwapVertical_UInt32x4_value.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapVertical_UInt32x4.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt32x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32x4.backendIndex = 2056;
    SubgroupSwapVertical_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupSwapVertical_UInt32x4.parameters = SubgroupSwapVertical_UInt32x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4_value)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4)->signature = "u32x4 subgroupSwapVertical(u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4)->name = "subgroupSwapVertical(u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4)->nameWithVarNames = "subgroupSwapVertical(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupSwapVertical with UInt16
    SubgroupSwapVertical_UInt16_value.name = "value"_c;
    SubgroupSwapVertical_UInt16_value.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapVertical_UInt16.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt16.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16.backendIndex = 2057;
    SubgroupSwapVertical_UInt16.returnType = Type::FullType { UInt16Type.name };
    SubgroupSwapVertical_UInt16.parameters = SubgroupSwapVertical_UInt16_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16)->signature = "u16 subgroupSwapVertical(u16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16)->name = "subgroupSwapVertical(u16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16)->nameWithVarNames = "subgroupSwapVertical(value : u16)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16)->returnTypeSymbol = &UInt16Type;

    /// subgroupSwapVertical with UInt16x2
    SubgroupSwapVertical_UInt16x2_value.name = "value"_c;
    SubgroupSwapVertical_UInt16x2_value.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapVertical_UInt16x2.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt16x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16x2.backendIndex = 2058;
    SubgroupSwapVertical_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    SubgroupSwapVertical_UInt16x2.parameters = SubgroupSwapVertical_UInt16x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2_value)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2)->signature = "u16x2 subgroupSwapVertical(u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2)->name = "subgroupSwapVertical(u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2)->nameWithVarNames = "subgroupSwapVertical(value : u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// subgroupSwapVertical with UInt16x3
    SubgroupSwapVertical_UInt16x3_value.name = "value"_c;
    SubgroupSwapVertical_UInt16x3_value.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapVertical_UInt16x3.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt16x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16x3.backendIndex = 2059;
    SubgroupSwapVertical_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    SubgroupSwapVertical_UInt16x3.parameters = SubgroupSwapVertical_UInt16x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3_value)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3)->signature = "u16x3 subgroupSwapVertical(u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3)->name = "subgroupSwapVertical(u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3)->nameWithVarNames = "subgroupSwapVertical(value : u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// subgroupSwapVertical with UInt16x4
    SubgroupSwapVertical_UInt16x4_value.name = "value"_c;
    SubgroupSwapVertical_UInt16x4_value.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapVertical_UInt16x4.documentation = "Swaps the value at the current thread with the value at the vertical thread in the subgroup"_c;
    SubgroupSwapVertical_UInt16x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16x4.backendIndex = 2060;
    SubgroupSwapVertical_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    SubgroupSwapVertical_UInt16x4.parameters = SubgroupSwapVertical_UInt16x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4_value)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4)->signature = "u16x4 subgroupSwapVertical(u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4)->name = "subgroupSwapVertical(u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4)->nameWithVarNames = "subgroupSwapVertical(value : u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// subgroupSwapHorizontal with Float32
    SubgroupSwapHorizontal_Float32_value.name = "value"_c;
    SubgroupSwapHorizontal_Float32_value.type = Type::FullType{ Float32Type.name };
    SubgroupSwapHorizontal_Float32.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float32.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32.backendIndex = 2061;
    SubgroupSwapHorizontal_Float32.returnType = Type::FullType { Float32Type.name };
    SubgroupSwapHorizontal_Float32.parameters = SubgroupSwapHorizontal_Float32_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32)->signature = "f32 subgroupSwapHorizontal(f32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32)->name = "subgroupSwapHorizontal(f32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32)->nameWithVarNames = "subgroupSwapHorizontal(value : f32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32)->returnTypeSymbol = &Float32Type;

    /// subgroupSwapHorizontal with Float32x2
    SubgroupSwapHorizontal_Float32x2_value.name = "value"_c;
    SubgroupSwapHorizontal_Float32x2_value.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapHorizontal_Float32x2.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float32x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32x2.backendIndex = 2062;
    SubgroupSwapHorizontal_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    SubgroupSwapHorizontal_Float32x2.parameters = SubgroupSwapHorizontal_Float32x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2_value)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2)->signature = "f32x2 subgroupSwapHorizontal(f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2)->name = "subgroupSwapHorizontal(f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2)->nameWithVarNames = "subgroupSwapHorizontal(value : f32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// subgroupSwapHorizontal with Float32x3
    SubgroupSwapHorizontal_Float32x3_value.name = "value"_c;
    SubgroupSwapHorizontal_Float32x3_value.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapHorizontal_Float32x3.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float32x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32x3.backendIndex = 2063;
    SubgroupSwapHorizontal_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    SubgroupSwapHorizontal_Float32x3.parameters = SubgroupSwapHorizontal_Float32x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3_value)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3)->signature = "f32x3 subgroupSwapHorizontal(f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3)->name = "subgroupSwapHorizontal(f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3)->nameWithVarNames = "subgroupSwapHorizontal(value : f32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// subgroupSwapHorizontal with Float32x4
    SubgroupSwapHorizontal_Float32x4_value.name = "value"_c;
    SubgroupSwapHorizontal_Float32x4_value.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapHorizontal_Float32x4.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float32x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32x4.backendIndex = 2064;
    SubgroupSwapHorizontal_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    SubgroupSwapHorizontal_Float32x4.parameters = SubgroupSwapHorizontal_Float32x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4)->signature = "f32x4 subgroupSwapHorizontal(f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4)->name = "subgroupSwapHorizontal(f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4)->nameWithVarNames = "subgroupSwapHorizontal(value : f32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// subgroupSwapHorizontal with Float16
    SubgroupSwapHorizontal_Float16_value.name = "value"_c;
    SubgroupSwapHorizontal_Float16_value.type = Type::FullType{ Float16Type.name };
    SubgroupSwapHorizontal_Float16.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float16.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16.backendIndex = 2065;
    SubgroupSwapHorizontal_Float16.returnType = Type::FullType { Float16Type.name };
    SubgroupSwapHorizontal_Float16.parameters = SubgroupSwapHorizontal_Float16_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16)->signature = "f16 subgroupSwapHorizontal(f16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16)->name = "subgroupSwapHorizontal(f16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16)->nameWithVarNames = "subgroupSwapHorizontal(value : f16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16)->returnTypeSymbol = &Float16Type;

    /// subgroupSwapHorizontal with Float16x2
    SubgroupSwapHorizontal_Float16x2_value.name = "value"_c;
    SubgroupSwapHorizontal_Float16x2_value.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapHorizontal_Float16x2.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float16x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16x2.backendIndex = 2066;
    SubgroupSwapHorizontal_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    SubgroupSwapHorizontal_Float16x2.parameters = SubgroupSwapHorizontal_Float16x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2_value)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2)->signature = "f16x2 subgroupSwapHorizontal(f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2)->name = "subgroupSwapHorizontal(f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2)->nameWithVarNames = "subgroupSwapHorizontal(value : f16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// subgroupSwapHorizontal with Float16x3
    SubgroupSwapHorizontal_Float16x3_value.name = "value"_c;
    SubgroupSwapHorizontal_Float16x3_value.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapHorizontal_Float16x3.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float16x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16x3.backendIndex = 2067;
    SubgroupSwapHorizontal_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    SubgroupSwapHorizontal_Float16x3.parameters = SubgroupSwapHorizontal_Float16x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3_value)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3)->signature = "f16x3 subgroupSwapHorizontal(f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3)->name = "subgroupSwapHorizontal(f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3)->nameWithVarNames = "subgroupSwapHorizontal(value : f16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// subgroupSwapHorizontal with Float16x4
    SubgroupSwapHorizontal_Float16x4_value.name = "value"_c;
    SubgroupSwapHorizontal_Float16x4_value.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapHorizontal_Float16x4.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Float16x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16x4.backendIndex = 2068;
    SubgroupSwapHorizontal_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    SubgroupSwapHorizontal_Float16x4.parameters = SubgroupSwapHorizontal_Float16x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4_value)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4)->signature = "f16x4 subgroupSwapHorizontal(f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4)->name = "subgroupSwapHorizontal(f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4)->nameWithVarNames = "subgroupSwapHorizontal(value : f16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// subgroupSwapHorizontal with Int32
    SubgroupSwapHorizontal_Int32_value.name = "value"_c;
    SubgroupSwapHorizontal_Int32_value.type = Type::FullType{ Int32Type.name };
    SubgroupSwapHorizontal_Int32.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int32.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32.backendIndex = 2069;
    SubgroupSwapHorizontal_Int32.returnType = Type::FullType { Int32Type.name };
    SubgroupSwapHorizontal_Int32.parameters = SubgroupSwapHorizontal_Int32_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32)->signature = "i32 subgroupSwapHorizontal(i32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32)->name = "subgroupSwapHorizontal(i32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32)->nameWithVarNames = "subgroupSwapHorizontal(value : i32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32)->returnTypeSymbol = &Int32Type;

    /// subgroupSwapHorizontal with Int32x2
    SubgroupSwapHorizontal_Int32x2_value.name = "value"_c;
    SubgroupSwapHorizontal_Int32x2_value.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapHorizontal_Int32x2.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int32x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32x2.backendIndex = 2070;
    SubgroupSwapHorizontal_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    SubgroupSwapHorizontal_Int32x2.parameters = SubgroupSwapHorizontal_Int32x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2_value)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2)->signature = "i32x2 subgroupSwapHorizontal(i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2)->name = "subgroupSwapHorizontal(i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2)->nameWithVarNames = "subgroupSwapHorizontal(value : i32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// subgroupSwapHorizontal with Int32x3
    SubgroupSwapHorizontal_Int32x3_value.name = "value"_c;
    SubgroupSwapHorizontal_Int32x3_value.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapHorizontal_Int32x3.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int32x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32x3.backendIndex = 2071;
    SubgroupSwapHorizontal_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    SubgroupSwapHorizontal_Int32x3.parameters = SubgroupSwapHorizontal_Int32x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3_value)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3)->signature = "i32x3 subgroupSwapHorizontal(i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3)->name = "subgroupSwapHorizontal(i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3)->nameWithVarNames = "subgroupSwapHorizontal(value : i32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// subgroupSwapHorizontal with Int32x4
    SubgroupSwapHorizontal_Int32x4_value.name = "value"_c;
    SubgroupSwapHorizontal_Int32x4_value.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapHorizontal_Int32x4.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int32x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32x4.backendIndex = 2072;
    SubgroupSwapHorizontal_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    SubgroupSwapHorizontal_Int32x4.parameters = SubgroupSwapHorizontal_Int32x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4_value)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4)->signature = "i32x4 subgroupSwapHorizontal(i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4)->name = "subgroupSwapHorizontal(i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4)->nameWithVarNames = "subgroupSwapHorizontal(value : i32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// subgroupSwapHorizontal with Int16
    SubgroupSwapHorizontal_Int16_value.name = "value"_c;
    SubgroupSwapHorizontal_Int16_value.type = Type::FullType{ Int16Type.name };
    SubgroupSwapHorizontal_Int16.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int16.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16.backendIndex = 2073;
    SubgroupSwapHorizontal_Int16.returnType = Type::FullType { Int16Type.name };
    SubgroupSwapHorizontal_Int16.parameters = SubgroupSwapHorizontal_Int16_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16)->signature = "i16 subgroupSwapHorizontal(i16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16)->name = "subgroupSwapHorizontal(i16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16)->nameWithVarNames = "subgroupSwapHorizontal(value : i16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16)->returnTypeSymbol = &Int16Type;

    /// subgroupSwapHorizontal with Int16x2
    SubgroupSwapHorizontal_Int16x2_value.name = "value"_c;
    SubgroupSwapHorizontal_Int16x2_value.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapHorizontal_Int16x2.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int16x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16x2.backendIndex = 2074;
    SubgroupSwapHorizontal_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    SubgroupSwapHorizontal_Int16x2.parameters = SubgroupSwapHorizontal_Int16x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2_value)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2)->signature = "i16x2 subgroupSwapHorizontal(i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2)->name = "subgroupSwapHorizontal(i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2)->nameWithVarNames = "subgroupSwapHorizontal(value : i16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// subgroupSwapHorizontal with Int16x3
    SubgroupSwapHorizontal_Int16x3_value.name = "value"_c;
    SubgroupSwapHorizontal_Int16x3_value.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapHorizontal_Int16x3.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int16x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16x3.backendIndex = 2075;
    SubgroupSwapHorizontal_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    SubgroupSwapHorizontal_Int16x3.parameters = SubgroupSwapHorizontal_Int16x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3_value)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3)->signature = "i16x3 subgroupSwapHorizontal(i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3)->name = "subgroupSwapHorizontal(i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3)->nameWithVarNames = "subgroupSwapHorizontal(value : i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// subgroupSwapHorizontal with Int16x4
    SubgroupSwapHorizontal_Int16x4_value.name = "value"_c;
    SubgroupSwapHorizontal_Int16x4_value.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapHorizontal_Int16x4.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int16x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16x4.backendIndex = 2076;
    SubgroupSwapHorizontal_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    SubgroupSwapHorizontal_Int16x4.parameters = SubgroupSwapHorizontal_Int16x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4_value)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4)->signature = "i16x4 subgroupSwapHorizontal(i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4)->name = "subgroupSwapHorizontal(i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4)->nameWithVarNames = "subgroupSwapHorizontal(value : i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// subgroupSwapHorizontal with UInt32
    SubgroupSwapHorizontal_UInt32_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapHorizontal_UInt32.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt32.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32.backendIndex = 2077;
    SubgroupSwapHorizontal_UInt32.returnType = Type::FullType { UInt32Type.name };
    SubgroupSwapHorizontal_UInt32.parameters = SubgroupSwapHorizontal_UInt32_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32)->signature = "u32 subgroupSwapHorizontal(u32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32)->name = "subgroupSwapHorizontal(u32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32)->nameWithVarNames = "subgroupSwapHorizontal(value : u32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32)->returnTypeSymbol = &UInt32Type;

    /// subgroupSwapHorizontal with UInt32x2
    SubgroupSwapHorizontal_UInt32x2_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt32x2_value.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapHorizontal_UInt32x2.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt32x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32x2.backendIndex = 2078;
    SubgroupSwapHorizontal_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    SubgroupSwapHorizontal_UInt32x2.parameters = SubgroupSwapHorizontal_UInt32x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2_value)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2)->signature = "u32x2 subgroupSwapHorizontal(u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2)->name = "subgroupSwapHorizontal(u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2)->nameWithVarNames = "subgroupSwapHorizontal(value : u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// subgroupSwapHorizontal with UInt32x3
    SubgroupSwapHorizontal_UInt32x3_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt32x3_value.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapHorizontal_UInt32x3.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt32x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32x3.backendIndex = 2079;
    SubgroupSwapHorizontal_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    SubgroupSwapHorizontal_UInt32x3.parameters = SubgroupSwapHorizontal_UInt32x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3_value)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3)->signature = "u32x3 subgroupSwapHorizontal(u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3)->name = "subgroupSwapHorizontal(u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3)->nameWithVarNames = "subgroupSwapHorizontal(value : u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupSwapHorizontal with UInt32x4
    SubgroupSwapHorizontal_UInt32x4_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt32x4_value.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapHorizontal_UInt32x4.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt32x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32x4.backendIndex = 2080;
    SubgroupSwapHorizontal_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupSwapHorizontal_UInt32x4.parameters = SubgroupSwapHorizontal_UInt32x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4_value)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4)->signature = "u32x4 subgroupSwapHorizontal(u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4)->name = "subgroupSwapHorizontal(u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4)->nameWithVarNames = "subgroupSwapHorizontal(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupSwapHorizontal with UInt16
    SubgroupSwapHorizontal_UInt16_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt16_value.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapHorizontal_UInt16.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt16.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16.backendIndex = 2081;
    SubgroupSwapHorizontal_UInt16.returnType = Type::FullType { UInt16Type.name };
    SubgroupSwapHorizontal_UInt16.parameters = SubgroupSwapHorizontal_UInt16_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16)->signature = "u16 subgroupSwapHorizontal(u16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16)->name = "subgroupSwapHorizontal(u16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16)->nameWithVarNames = "subgroupSwapHorizontal(value : u16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16)->returnTypeSymbol = &UInt16Type;

    /// subgroupSwapHorizontal with UInt16x2
    SubgroupSwapHorizontal_UInt16x2_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt16x2_value.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapHorizontal_UInt16x2.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt16x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16x2.backendIndex = 2082;
    SubgroupSwapHorizontal_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    SubgroupSwapHorizontal_UInt16x2.parameters = SubgroupSwapHorizontal_UInt16x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2_value)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2)->signature = "u16x2 subgroupSwapHorizontal(u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2)->name = "subgroupSwapHorizontal(u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2)->nameWithVarNames = "subgroupSwapHorizontal(value : u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// subgroupSwapHorizontal with UInt16x3
    SubgroupSwapHorizontal_UInt16x3_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt16x3_value.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapHorizontal_UInt16x3.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt16x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16x3.backendIndex = 2083;
    SubgroupSwapHorizontal_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    SubgroupSwapHorizontal_UInt16x3.parameters = SubgroupSwapHorizontal_UInt16x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3_value)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3)->signature = "u16x3 subgroupSwapHorizontal(u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3)->name = "subgroupSwapHorizontal(u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3)->nameWithVarNames = "subgroupSwapHorizontal(value : u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// subgroupSwapHorizontal with UInt16x4
    SubgroupSwapHorizontal_UInt16x4_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt16x4_value.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapHorizontal_UInt16x4.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt16x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16x4.backendIndex = 2084;
    SubgroupSwapHorizontal_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    SubgroupSwapHorizontal_UInt16x4.parameters = SubgroupSwapHorizontal_UInt16x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4_value)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4)->signature = "u16x4 subgroupSwapHorizontal(u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4)->name = "subgroupSwapHorizontal(u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4)->nameWithVarNames = "subgroupSwapHorizontal(value : u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// atomicLoad with UInt32, MemorySemantics
    AtomicLoad_UInt32_ptr.name = "ptr"_c;
    AtomicLoad_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicLoad_UInt32_ptr.type.modifiers = AtomicLoad_UInt32_ptr_modifiers;
    AtomicLoad_UInt32_ptr.type.modifierValues = AtomicLoad_UInt32_ptr_modifierValues;
    AtomicLoad_UInt32_semantics.name = "semantics"_c;
    AtomicLoad_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_UInt32_semantics.type.literal = true;
    AtomicLoad_UInt32.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_UInt32.name = "atomicLoad"_c;
    AtomicLoad_UInt32.backendIndex = 2085;
    AtomicLoad_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicLoad_UInt32.parameters = AtomicLoad_UInt32_args;
    Symbol::Resolved(&AtomicLoad_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicLoad_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_UInt32)->signature = "u32 atomicLoad(*u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_UInt32)->name = "atomicLoad(*u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_UInt32)->nameWithVarNames = "atomicLoad(ptr : *u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicIncrement with UInt32, MemorySemantics
    AtomicIncrement_UInt32_ptr.name = "ptr"_c;
    AtomicIncrement_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicIncrement_UInt32_ptr.type.modifiers = AtomicIncrement_UInt32_ptr_modifiers;
    AtomicIncrement_UInt32_ptr.type.modifierValues = AtomicIncrement_UInt32_ptr_modifierValues;
    AtomicIncrement_UInt32_semantics.name = "semantics"_c;
    AtomicIncrement_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_UInt32_semantics.type.literal = true;
    AtomicIncrement_UInt32.documentation = "Increments the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicIncrement_UInt32.name = "atomicIncrement"_c;
    AtomicIncrement_UInt32.backendIndex = 2086;
    AtomicIncrement_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicIncrement_UInt32.parameters = AtomicIncrement_UInt32_args;
    Symbol::Resolved(&AtomicIncrement_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicIncrement_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_UInt32)->signature = "u32 atomicIncrement(*u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_UInt32)->name = "atomicIncrement(*u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_UInt32)->nameWithVarNames = "atomicIncrement(ptr : *u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicDecrement with UInt32, MemorySemantics
    AtomicDecrement_UInt32_ptr.name = "ptr"_c;
    AtomicDecrement_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicDecrement_UInt32_ptr.type.modifiers = AtomicDecrement_UInt32_ptr_modifiers;
    AtomicDecrement_UInt32_ptr.type.modifierValues = AtomicDecrement_UInt32_ptr_modifierValues;
    AtomicDecrement_UInt32_semantics.name = "semantics"_c;
    AtomicDecrement_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_UInt32_semantics.type.literal = true;
    AtomicDecrement_UInt32.documentation = "Decrements the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicDecrement_UInt32.name = "atomicDecrement"_c;
    AtomicDecrement_UInt32.backendIndex = 2087;
    AtomicDecrement_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicDecrement_UInt32.parameters = AtomicDecrement_UInt32_args;
    Symbol::Resolved(&AtomicDecrement_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicDecrement_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_UInt32)->signature = "u32 atomicDecrement(*u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_UInt32)->name = "atomicDecrement(*u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_UInt32)->nameWithVarNames = "atomicDecrement(ptr : *u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicLoad with Int32, MemorySemantics
    AtomicLoad_Int32_ptr.name = "ptr"_c;
    AtomicLoad_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicLoad_Int32_ptr.type.modifiers = AtomicLoad_Int32_ptr_modifiers;
    AtomicLoad_Int32_ptr.type.modifierValues = AtomicLoad_Int32_ptr_modifierValues;
    AtomicLoad_Int32_semantics.name = "semantics"_c;
    AtomicLoad_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Int32_semantics.type.literal = true;
    AtomicLoad_Int32.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Int32.name = "atomicLoad"_c;
    AtomicLoad_Int32.backendIndex = 2088;
    AtomicLoad_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicLoad_Int32.parameters = AtomicLoad_Int32_args;
    Symbol::Resolved(&AtomicLoad_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicLoad_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Int32)->signature = "i32 atomicLoad(*i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Int32)->name = "atomicLoad(*i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Int32)->nameWithVarNames = "atomicLoad(ptr : *i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicIncrement with Int32, MemorySemantics
    AtomicIncrement_Int32_ptr.name = "ptr"_c;
    AtomicIncrement_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicIncrement_Int32_ptr.type.modifiers = AtomicIncrement_Int32_ptr_modifiers;
    AtomicIncrement_Int32_ptr.type.modifierValues = AtomicIncrement_Int32_ptr_modifierValues;
    AtomicIncrement_Int32_semantics.name = "semantics"_c;
    AtomicIncrement_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Int32_semantics.type.literal = true;
    AtomicIncrement_Int32.documentation = "Increments the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicIncrement_Int32.name = "atomicIncrement"_c;
    AtomicIncrement_Int32.backendIndex = 2089;
    AtomicIncrement_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicIncrement_Int32.parameters = AtomicIncrement_Int32_args;
    Symbol::Resolved(&AtomicIncrement_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicIncrement_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Int32)->signature = "i32 atomicIncrement(*i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Int32)->name = "atomicIncrement(*i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Int32)->nameWithVarNames = "atomicIncrement(ptr : *i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicDecrement with Int32, MemorySemantics
    AtomicDecrement_Int32_ptr.name = "ptr"_c;
    AtomicDecrement_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicDecrement_Int32_ptr.type.modifiers = AtomicDecrement_Int32_ptr_modifiers;
    AtomicDecrement_Int32_ptr.type.modifierValues = AtomicDecrement_Int32_ptr_modifierValues;
    AtomicDecrement_Int32_semantics.name = "semantics"_c;
    AtomicDecrement_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Int32_semantics.type.literal = true;
    AtomicDecrement_Int32.documentation = "Decrements the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicDecrement_Int32.name = "atomicDecrement"_c;
    AtomicDecrement_Int32.backendIndex = 2090;
    AtomicDecrement_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicDecrement_Int32.parameters = AtomicDecrement_Int32_args;
    Symbol::Resolved(&AtomicDecrement_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicDecrement_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Int32)->signature = "i32 atomicDecrement(*i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Int32)->name = "atomicDecrement(*i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Int32)->nameWithVarNames = "atomicDecrement(ptr : *i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicLoad with UInt16, MemorySemantics
    AtomicLoad_UInt16_ptr.name = "ptr"_c;
    AtomicLoad_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicLoad_UInt16_ptr.type.modifiers = AtomicLoad_UInt16_ptr_modifiers;
    AtomicLoad_UInt16_ptr.type.modifierValues = AtomicLoad_UInt16_ptr_modifierValues;
    AtomicLoad_UInt16_semantics.name = "semantics"_c;
    AtomicLoad_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_UInt16_semantics.type.literal = true;
    AtomicLoad_UInt16.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_UInt16.name = "atomicLoad"_c;
    AtomicLoad_UInt16.backendIndex = 2091;
    AtomicLoad_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicLoad_UInt16.parameters = AtomicLoad_UInt16_args;
    Symbol::Resolved(&AtomicLoad_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicLoad_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_UInt16)->signature = "u16 atomicLoad(*u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_UInt16)->name = "atomicLoad(*u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_UInt16)->nameWithVarNames = "atomicLoad(ptr : *u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicIncrement with UInt16, MemorySemantics
    AtomicIncrement_UInt16_ptr.name = "ptr"_c;
    AtomicIncrement_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicIncrement_UInt16_ptr.type.modifiers = AtomicIncrement_UInt16_ptr_modifiers;
    AtomicIncrement_UInt16_ptr.type.modifierValues = AtomicIncrement_UInt16_ptr_modifierValues;
    AtomicIncrement_UInt16_semantics.name = "semantics"_c;
    AtomicIncrement_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_UInt16_semantics.type.literal = true;
    AtomicIncrement_UInt16.documentation = "Increments the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicIncrement_UInt16.name = "atomicIncrement"_c;
    AtomicIncrement_UInt16.backendIndex = 2092;
    AtomicIncrement_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicIncrement_UInt16.parameters = AtomicIncrement_UInt16_args;
    Symbol::Resolved(&AtomicIncrement_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicIncrement_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_UInt16)->signature = "u16 atomicIncrement(*u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_UInt16)->name = "atomicIncrement(*u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_UInt16)->nameWithVarNames = "atomicIncrement(ptr : *u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicDecrement with UInt16, MemorySemantics
    AtomicDecrement_UInt16_ptr.name = "ptr"_c;
    AtomicDecrement_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicDecrement_UInt16_ptr.type.modifiers = AtomicDecrement_UInt16_ptr_modifiers;
    AtomicDecrement_UInt16_ptr.type.modifierValues = AtomicDecrement_UInt16_ptr_modifierValues;
    AtomicDecrement_UInt16_semantics.name = "semantics"_c;
    AtomicDecrement_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_UInt16_semantics.type.literal = true;
    AtomicDecrement_UInt16.documentation = "Decrements the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicDecrement_UInt16.name = "atomicDecrement"_c;
    AtomicDecrement_UInt16.backendIndex = 2093;
    AtomicDecrement_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicDecrement_UInt16.parameters = AtomicDecrement_UInt16_args;
    Symbol::Resolved(&AtomicDecrement_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicDecrement_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_UInt16)->signature = "u16 atomicDecrement(*u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_UInt16)->name = "atomicDecrement(*u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_UInt16)->nameWithVarNames = "atomicDecrement(ptr : *u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicLoad with Int16, MemorySemantics
    AtomicLoad_Int16_ptr.name = "ptr"_c;
    AtomicLoad_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicLoad_Int16_ptr.type.modifiers = AtomicLoad_Int16_ptr_modifiers;
    AtomicLoad_Int16_ptr.type.modifierValues = AtomicLoad_Int16_ptr_modifierValues;
    AtomicLoad_Int16_semantics.name = "semantics"_c;
    AtomicLoad_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Int16_semantics.type.literal = true;
    AtomicLoad_Int16.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Int16.name = "atomicLoad"_c;
    AtomicLoad_Int16.backendIndex = 2094;
    AtomicLoad_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicLoad_Int16.parameters = AtomicLoad_Int16_args;
    Symbol::Resolved(&AtomicLoad_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicLoad_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Int16)->signature = "i16 atomicLoad(*i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Int16)->name = "atomicLoad(*i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Int16)->nameWithVarNames = "atomicLoad(ptr : *i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicIncrement with Int16, MemorySemantics
    AtomicIncrement_Int16_ptr.name = "ptr"_c;
    AtomicIncrement_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicIncrement_Int16_ptr.type.modifiers = AtomicIncrement_Int16_ptr_modifiers;
    AtomicIncrement_Int16_ptr.type.modifierValues = AtomicIncrement_Int16_ptr_modifierValues;
    AtomicIncrement_Int16_semantics.name = "semantics"_c;
    AtomicIncrement_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Int16_semantics.type.literal = true;
    AtomicIncrement_Int16.documentation = "Increments the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicIncrement_Int16.name = "atomicIncrement"_c;
    AtomicIncrement_Int16.backendIndex = 2095;
    AtomicIncrement_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicIncrement_Int16.parameters = AtomicIncrement_Int16_args;
    Symbol::Resolved(&AtomicIncrement_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicIncrement_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Int16)->signature = "i16 atomicIncrement(*i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Int16)->name = "atomicIncrement(*i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Int16)->nameWithVarNames = "atomicIncrement(ptr : *i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicDecrement with Int16, MemorySemantics
    AtomicDecrement_Int16_ptr.name = "ptr"_c;
    AtomicDecrement_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicDecrement_Int16_ptr.type.modifiers = AtomicDecrement_Int16_ptr_modifiers;
    AtomicDecrement_Int16_ptr.type.modifierValues = AtomicDecrement_Int16_ptr_modifierValues;
    AtomicDecrement_Int16_semantics.name = "semantics"_c;
    AtomicDecrement_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Int16_semantics.type.literal = true;
    AtomicDecrement_Int16.documentation = "Decrements the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicDecrement_Int16.name = "atomicDecrement"_c;
    AtomicDecrement_Int16.backendIndex = 2096;
    AtomicDecrement_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicDecrement_Int16.parameters = AtomicDecrement_Int16_args;
    Symbol::Resolved(&AtomicDecrement_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicDecrement_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Int16)->signature = "i16 atomicDecrement(*i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Int16)->name = "atomicDecrement(*i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Int16)->nameWithVarNames = "atomicDecrement(ptr : *i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicStore with UInt32, UInt32, MemorySemantics
    AtomicStore_UInt32_ptr.name = "ptr"_c;
    AtomicStore_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicStore_UInt32_ptr.type.modifiers = AtomicStore_UInt32_ptr_modifiers;
    AtomicStore_UInt32_ptr.type.modifierValues = AtomicStore_UInt32_ptr_modifierValues;
    AtomicStore_UInt32_value.name = "value"_c;
    AtomicStore_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicStore_UInt32_semantics.name = "semantics"_c;
    AtomicStore_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_UInt32_semantics.type.literal = true;
    AtomicStore_UInt32.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_UInt32.name = "atomicStore"_c;
    AtomicStore_UInt32.backendIndex = 2097;
    AtomicStore_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicStore_UInt32.parameters = AtomicStore_UInt32_args;
    Symbol::Resolved(&AtomicStore_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicStore_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicStore_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_UInt32)->signature = "u32 atomicStore(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_UInt32)->name = "atomicStore(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_UInt32)->nameWithVarNames = "atomicStore(ptr : *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicExchange with UInt32, UInt32, MemorySemantics
    AtomicExchange_UInt32_ptr.name = "ptr"_c;
    AtomicExchange_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicExchange_UInt32_ptr.type.modifiers = AtomicExchange_UInt32_ptr_modifiers;
    AtomicExchange_UInt32_ptr.type.modifierValues = AtomicExchange_UInt32_ptr_modifierValues;
    AtomicExchange_UInt32_value.name = "value"_c;
    AtomicExchange_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicExchange_UInt32_semantics.name = "semantics"_c;
    AtomicExchange_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_UInt32_semantics.type.literal = true;
    AtomicExchange_UInt32.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_UInt32.name = "atomicExchange"_c;
    AtomicExchange_UInt32.backendIndex = 2098;
    AtomicExchange_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicExchange_UInt32.parameters = AtomicExchange_UInt32_args;
    Symbol::Resolved(&AtomicExchange_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicExchange_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicExchange_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_UInt32)->signature = "u32 atomicExchange(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_UInt32)->name = "atomicExchange(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_UInt32)->nameWithVarNames = "atomicExchange(ptr : *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicAdd with UInt32, UInt32, MemorySemantics
    AtomicAdd_UInt32_ptr.name = "ptr"_c;
    AtomicAdd_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicAdd_UInt32_ptr.type.modifiers = AtomicAdd_UInt32_ptr_modifiers;
    AtomicAdd_UInt32_ptr.type.modifierValues = AtomicAdd_UInt32_ptr_modifierValues;
    AtomicAdd_UInt32_value.name = "value"_c;
    AtomicAdd_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicAdd_UInt32_semantics.name = "semantics"_c;
    AtomicAdd_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_UInt32_semantics.type.literal = true;
    AtomicAdd_UInt32.documentation = "Adds the value to the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAdd_UInt32.name = "atomicAdd"_c;
    AtomicAdd_UInt32.backendIndex = 2099;
    AtomicAdd_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicAdd_UInt32.parameters = AtomicAdd_UInt32_args;
    Symbol::Resolved(&AtomicAdd_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAdd_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAdd_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_UInt32)->signature = "u32 atomicAdd(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_UInt32)->name = "atomicAdd(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_UInt32)->nameWithVarNames = "atomicAdd(ptr : *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicSubtract with UInt32, UInt32, MemorySemantics
    AtomicSubtract_UInt32_ptr.name = "ptr"_c;
    AtomicSubtract_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicSubtract_UInt32_ptr.type.modifiers = AtomicSubtract_UInt32_ptr_modifiers;
    AtomicSubtract_UInt32_ptr.type.modifierValues = AtomicSubtract_UInt32_ptr_modifierValues;
    AtomicSubtract_UInt32_value.name = "value"_c;
    AtomicSubtract_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicSubtract_UInt32_semantics.name = "semantics"_c;
    AtomicSubtract_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_UInt32_semantics.type.literal = true;
    AtomicSubtract_UInt32.documentation = "Subtracts the value from the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicSubtract_UInt32.name = "atomicSubtract"_c;
    AtomicSubtract_UInt32.backendIndex = 2100;
    AtomicSubtract_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicSubtract_UInt32.parameters = AtomicSubtract_UInt32_args;
    Symbol::Resolved(&AtomicSubtract_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicSubtract_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicSubtract_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_UInt32)->signature = "u32 atomicSubtract(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_UInt32)->name = "atomicSubtract(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_UInt32)->nameWithVarNames = "atomicSubtract(ptr : *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicAnd with UInt32, UInt32, MemorySemantics
    AtomicAnd_UInt32_ptr.name = "ptr"_c;
    AtomicAnd_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicAnd_UInt32_ptr.type.modifiers = AtomicAnd_UInt32_ptr_modifiers;
    AtomicAnd_UInt32_ptr.type.modifierValues = AtomicAnd_UInt32_ptr_modifierValues;
    AtomicAnd_UInt32_value.name = "value"_c;
    AtomicAnd_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicAnd_UInt32_semantics.name = "semantics"_c;
    AtomicAnd_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_UInt32_semantics.type.literal = true;
    AtomicAnd_UInt32.documentation = "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAnd_UInt32.name = "atomicAnd"_c;
    AtomicAnd_UInt32.backendIndex = 2101;
    AtomicAnd_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicAnd_UInt32.parameters = AtomicAnd_UInt32_args;
    Symbol::Resolved(&AtomicAnd_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAnd_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAnd_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_UInt32)->signature = "u32 atomicAnd(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_UInt32)->name = "atomicAnd(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_UInt32)->nameWithVarNames = "atomicAnd(ptr : *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicOr with UInt32, UInt32, MemorySemantics
    AtomicOr_UInt32_ptr.name = "ptr"_c;
    AtomicOr_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicOr_UInt32_ptr.type.modifiers = AtomicOr_UInt32_ptr_modifiers;
    AtomicOr_UInt32_ptr.type.modifierValues = AtomicOr_UInt32_ptr_modifierValues;
    AtomicOr_UInt32_value.name = "value"_c;
    AtomicOr_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicOr_UInt32_semantics.name = "semantics"_c;
    AtomicOr_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_UInt32_semantics.type.literal = true;
    AtomicOr_UInt32.documentation = "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicOr_UInt32.name = "atomicOr"_c;
    AtomicOr_UInt32.backendIndex = 2102;
    AtomicOr_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicOr_UInt32.parameters = AtomicOr_UInt32_args;
    Symbol::Resolved(&AtomicOr_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicOr_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicOr_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_UInt32)->signature = "u32 atomicOr(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_UInt32)->name = "atomicOr(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_UInt32)->nameWithVarNames = "atomicOr(ptr : *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicXor with UInt32, UInt32, MemorySemantics
    AtomicXor_UInt32_ptr.name = "ptr"_c;
    AtomicXor_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicXor_UInt32_ptr.type.modifiers = AtomicXor_UInt32_ptr_modifiers;
    AtomicXor_UInt32_ptr.type.modifierValues = AtomicXor_UInt32_ptr_modifierValues;
    AtomicXor_UInt32_value.name = "value"_c;
    AtomicXor_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicXor_UInt32_semantics.name = "semantics"_c;
    AtomicXor_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_UInt32_semantics.type.literal = true;
    AtomicXor_UInt32.documentation = "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicXor_UInt32.name = "atomicXor"_c;
    AtomicXor_UInt32.backendIndex = 2103;
    AtomicXor_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicXor_UInt32.parameters = AtomicXor_UInt32_args;
    Symbol::Resolved(&AtomicXor_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicXor_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicXor_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_UInt32)->signature = "u32 atomicXor(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_UInt32)->name = "atomicXor(*u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_UInt32)->nameWithVarNames = "atomicXor(ptr : *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicStore with Int32, Int32, MemorySemantics
    AtomicStore_Int32_ptr.name = "ptr"_c;
    AtomicStore_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicStore_Int32_ptr.type.modifiers = AtomicStore_Int32_ptr_modifiers;
    AtomicStore_Int32_ptr.type.modifierValues = AtomicStore_Int32_ptr_modifierValues;
    AtomicStore_Int32_value.name = "value"_c;
    AtomicStore_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicStore_Int32_semantics.name = "semantics"_c;
    AtomicStore_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Int32_semantics.type.literal = true;
    AtomicStore_Int32.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Int32.name = "atomicStore"_c;
    AtomicStore_Int32.backendIndex = 2104;
    AtomicStore_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicStore_Int32.parameters = AtomicStore_Int32_args;
    Symbol::Resolved(&AtomicStore_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicStore_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicStore_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Int32)->signature = "i32 atomicStore(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Int32)->name = "atomicStore(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Int32)->nameWithVarNames = "atomicStore(ptr : *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicExchange with Int32, Int32, MemorySemantics
    AtomicExchange_Int32_ptr.name = "ptr"_c;
    AtomicExchange_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicExchange_Int32_ptr.type.modifiers = AtomicExchange_Int32_ptr_modifiers;
    AtomicExchange_Int32_ptr.type.modifierValues = AtomicExchange_Int32_ptr_modifierValues;
    AtomicExchange_Int32_value.name = "value"_c;
    AtomicExchange_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicExchange_Int32_semantics.name = "semantics"_c;
    AtomicExchange_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Int32_semantics.type.literal = true;
    AtomicExchange_Int32.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Int32.name = "atomicExchange"_c;
    AtomicExchange_Int32.backendIndex = 2105;
    AtomicExchange_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicExchange_Int32.parameters = AtomicExchange_Int32_args;
    Symbol::Resolved(&AtomicExchange_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicExchange_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicExchange_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Int32)->signature = "i32 atomicExchange(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Int32)->name = "atomicExchange(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Int32)->nameWithVarNames = "atomicExchange(ptr : *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicAdd with Int32, Int32, MemorySemantics
    AtomicAdd_Int32_ptr.name = "ptr"_c;
    AtomicAdd_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicAdd_Int32_ptr.type.modifiers = AtomicAdd_Int32_ptr_modifiers;
    AtomicAdd_Int32_ptr.type.modifierValues = AtomicAdd_Int32_ptr_modifierValues;
    AtomicAdd_Int32_value.name = "value"_c;
    AtomicAdd_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicAdd_Int32_semantics.name = "semantics"_c;
    AtomicAdd_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Int32_semantics.type.literal = true;
    AtomicAdd_Int32.documentation = "Adds the value to the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAdd_Int32.name = "atomicAdd"_c;
    AtomicAdd_Int32.backendIndex = 2106;
    AtomicAdd_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicAdd_Int32.parameters = AtomicAdd_Int32_args;
    Symbol::Resolved(&AtomicAdd_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAdd_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAdd_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Int32)->signature = "i32 atomicAdd(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Int32)->name = "atomicAdd(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Int32)->nameWithVarNames = "atomicAdd(ptr : *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicSubtract with Int32, Int32, MemorySemantics
    AtomicSubtract_Int32_ptr.name = "ptr"_c;
    AtomicSubtract_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicSubtract_Int32_ptr.type.modifiers = AtomicSubtract_Int32_ptr_modifiers;
    AtomicSubtract_Int32_ptr.type.modifierValues = AtomicSubtract_Int32_ptr_modifierValues;
    AtomicSubtract_Int32_value.name = "value"_c;
    AtomicSubtract_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicSubtract_Int32_semantics.name = "semantics"_c;
    AtomicSubtract_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Int32_semantics.type.literal = true;
    AtomicSubtract_Int32.documentation = "Subtracts the value from the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicSubtract_Int32.name = "atomicSubtract"_c;
    AtomicSubtract_Int32.backendIndex = 2107;
    AtomicSubtract_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicSubtract_Int32.parameters = AtomicSubtract_Int32_args;
    Symbol::Resolved(&AtomicSubtract_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicSubtract_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicSubtract_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Int32)->signature = "i32 atomicSubtract(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Int32)->name = "atomicSubtract(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Int32)->nameWithVarNames = "atomicSubtract(ptr : *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicAnd with Int32, Int32, MemorySemantics
    AtomicAnd_Int32_ptr.name = "ptr"_c;
    AtomicAnd_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicAnd_Int32_ptr.type.modifiers = AtomicAnd_Int32_ptr_modifiers;
    AtomicAnd_Int32_ptr.type.modifierValues = AtomicAnd_Int32_ptr_modifierValues;
    AtomicAnd_Int32_value.name = "value"_c;
    AtomicAnd_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicAnd_Int32_semantics.name = "semantics"_c;
    AtomicAnd_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Int32_semantics.type.literal = true;
    AtomicAnd_Int32.documentation = "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAnd_Int32.name = "atomicAnd"_c;
    AtomicAnd_Int32.backendIndex = 2108;
    AtomicAnd_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicAnd_Int32.parameters = AtomicAnd_Int32_args;
    Symbol::Resolved(&AtomicAnd_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAnd_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAnd_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Int32)->signature = "i32 atomicAnd(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Int32)->name = "atomicAnd(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Int32)->nameWithVarNames = "atomicAnd(ptr : *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicOr with Int32, Int32, MemorySemantics
    AtomicOr_Int32_ptr.name = "ptr"_c;
    AtomicOr_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicOr_Int32_ptr.type.modifiers = AtomicOr_Int32_ptr_modifiers;
    AtomicOr_Int32_ptr.type.modifierValues = AtomicOr_Int32_ptr_modifierValues;
    AtomicOr_Int32_value.name = "value"_c;
    AtomicOr_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicOr_Int32_semantics.name = "semantics"_c;
    AtomicOr_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Int32_semantics.type.literal = true;
    AtomicOr_Int32.documentation = "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicOr_Int32.name = "atomicOr"_c;
    AtomicOr_Int32.backendIndex = 2109;
    AtomicOr_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicOr_Int32.parameters = AtomicOr_Int32_args;
    Symbol::Resolved(&AtomicOr_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicOr_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicOr_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Int32)->signature = "i32 atomicOr(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Int32)->name = "atomicOr(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Int32)->nameWithVarNames = "atomicOr(ptr : *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicXor with Int32, Int32, MemorySemantics
    AtomicXor_Int32_ptr.name = "ptr"_c;
    AtomicXor_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicXor_Int32_ptr.type.modifiers = AtomicXor_Int32_ptr_modifiers;
    AtomicXor_Int32_ptr.type.modifierValues = AtomicXor_Int32_ptr_modifierValues;
    AtomicXor_Int32_value.name = "value"_c;
    AtomicXor_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicXor_Int32_semantics.name = "semantics"_c;
    AtomicXor_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Int32_semantics.type.literal = true;
    AtomicXor_Int32.documentation = "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicXor_Int32.name = "atomicXor"_c;
    AtomicXor_Int32.backendIndex = 2110;
    AtomicXor_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicXor_Int32.parameters = AtomicXor_Int32_args;
    Symbol::Resolved(&AtomicXor_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicXor_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicXor_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Int32)->signature = "i32 atomicXor(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Int32)->name = "atomicXor(*i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Int32)->nameWithVarNames = "atomicXor(ptr : *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicStore with UInt16, UInt16, MemorySemantics
    AtomicStore_UInt16_ptr.name = "ptr"_c;
    AtomicStore_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicStore_UInt16_ptr.type.modifiers = AtomicStore_UInt16_ptr_modifiers;
    AtomicStore_UInt16_ptr.type.modifierValues = AtomicStore_UInt16_ptr_modifierValues;
    AtomicStore_UInt16_value.name = "value"_c;
    AtomicStore_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicStore_UInt16_semantics.name = "semantics"_c;
    AtomicStore_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_UInt16_semantics.type.literal = true;
    AtomicStore_UInt16.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_UInt16.name = "atomicStore"_c;
    AtomicStore_UInt16.backendIndex = 2111;
    AtomicStore_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicStore_UInt16.parameters = AtomicStore_UInt16_args;
    Symbol::Resolved(&AtomicStore_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicStore_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicStore_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_UInt16)->signature = "u16 atomicStore(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_UInt16)->name = "atomicStore(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_UInt16)->nameWithVarNames = "atomicStore(ptr : *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicExchange with UInt16, UInt16, MemorySemantics
    AtomicExchange_UInt16_ptr.name = "ptr"_c;
    AtomicExchange_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicExchange_UInt16_ptr.type.modifiers = AtomicExchange_UInt16_ptr_modifiers;
    AtomicExchange_UInt16_ptr.type.modifierValues = AtomicExchange_UInt16_ptr_modifierValues;
    AtomicExchange_UInt16_value.name = "value"_c;
    AtomicExchange_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicExchange_UInt16_semantics.name = "semantics"_c;
    AtomicExchange_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_UInt16_semantics.type.literal = true;
    AtomicExchange_UInt16.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_UInt16.name = "atomicExchange"_c;
    AtomicExchange_UInt16.backendIndex = 2112;
    AtomicExchange_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicExchange_UInt16.parameters = AtomicExchange_UInt16_args;
    Symbol::Resolved(&AtomicExchange_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicExchange_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicExchange_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_UInt16)->signature = "u16 atomicExchange(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_UInt16)->name = "atomicExchange(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_UInt16)->nameWithVarNames = "atomicExchange(ptr : *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicAdd with UInt16, UInt16, MemorySemantics
    AtomicAdd_UInt16_ptr.name = "ptr"_c;
    AtomicAdd_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicAdd_UInt16_ptr.type.modifiers = AtomicAdd_UInt16_ptr_modifiers;
    AtomicAdd_UInt16_ptr.type.modifierValues = AtomicAdd_UInt16_ptr_modifierValues;
    AtomicAdd_UInt16_value.name = "value"_c;
    AtomicAdd_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicAdd_UInt16_semantics.name = "semantics"_c;
    AtomicAdd_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_UInt16_semantics.type.literal = true;
    AtomicAdd_UInt16.documentation = "Adds the value to the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAdd_UInt16.name = "atomicAdd"_c;
    AtomicAdd_UInt16.backendIndex = 2113;
    AtomicAdd_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicAdd_UInt16.parameters = AtomicAdd_UInt16_args;
    Symbol::Resolved(&AtomicAdd_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAdd_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAdd_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_UInt16)->signature = "u16 atomicAdd(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_UInt16)->name = "atomicAdd(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_UInt16)->nameWithVarNames = "atomicAdd(ptr : *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicSubtract with UInt16, UInt16, MemorySemantics
    AtomicSubtract_UInt16_ptr.name = "ptr"_c;
    AtomicSubtract_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicSubtract_UInt16_ptr.type.modifiers = AtomicSubtract_UInt16_ptr_modifiers;
    AtomicSubtract_UInt16_ptr.type.modifierValues = AtomicSubtract_UInt16_ptr_modifierValues;
    AtomicSubtract_UInt16_value.name = "value"_c;
    AtomicSubtract_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicSubtract_UInt16_semantics.name = "semantics"_c;
    AtomicSubtract_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_UInt16_semantics.type.literal = true;
    AtomicSubtract_UInt16.documentation = "Subtracts the value from the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicSubtract_UInt16.name = "atomicSubtract"_c;
    AtomicSubtract_UInt16.backendIndex = 2114;
    AtomicSubtract_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicSubtract_UInt16.parameters = AtomicSubtract_UInt16_args;
    Symbol::Resolved(&AtomicSubtract_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicSubtract_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicSubtract_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_UInt16)->signature = "u16 atomicSubtract(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_UInt16)->name = "atomicSubtract(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_UInt16)->nameWithVarNames = "atomicSubtract(ptr : *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicAnd with UInt16, UInt16, MemorySemantics
    AtomicAnd_UInt16_ptr.name = "ptr"_c;
    AtomicAnd_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicAnd_UInt16_ptr.type.modifiers = AtomicAnd_UInt16_ptr_modifiers;
    AtomicAnd_UInt16_ptr.type.modifierValues = AtomicAnd_UInt16_ptr_modifierValues;
    AtomicAnd_UInt16_value.name = "value"_c;
    AtomicAnd_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicAnd_UInt16_semantics.name = "semantics"_c;
    AtomicAnd_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_UInt16_semantics.type.literal = true;
    AtomicAnd_UInt16.documentation = "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAnd_UInt16.name = "atomicAnd"_c;
    AtomicAnd_UInt16.backendIndex = 2115;
    AtomicAnd_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicAnd_UInt16.parameters = AtomicAnd_UInt16_args;
    Symbol::Resolved(&AtomicAnd_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAnd_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAnd_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_UInt16)->signature = "u16 atomicAnd(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_UInt16)->name = "atomicAnd(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_UInt16)->nameWithVarNames = "atomicAnd(ptr : *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicOr with UInt16, UInt16, MemorySemantics
    AtomicOr_UInt16_ptr.name = "ptr"_c;
    AtomicOr_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicOr_UInt16_ptr.type.modifiers = AtomicOr_UInt16_ptr_modifiers;
    AtomicOr_UInt16_ptr.type.modifierValues = AtomicOr_UInt16_ptr_modifierValues;
    AtomicOr_UInt16_value.name = "value"_c;
    AtomicOr_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicOr_UInt16_semantics.name = "semantics"_c;
    AtomicOr_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_UInt16_semantics.type.literal = true;
    AtomicOr_UInt16.documentation = "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicOr_UInt16.name = "atomicOr"_c;
    AtomicOr_UInt16.backendIndex = 2116;
    AtomicOr_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicOr_UInt16.parameters = AtomicOr_UInt16_args;
    Symbol::Resolved(&AtomicOr_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicOr_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicOr_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_UInt16)->signature = "u16 atomicOr(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_UInt16)->name = "atomicOr(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_UInt16)->nameWithVarNames = "atomicOr(ptr : *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicXor with UInt16, UInt16, MemorySemantics
    AtomicXor_UInt16_ptr.name = "ptr"_c;
    AtomicXor_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicXor_UInt16_ptr.type.modifiers = AtomicXor_UInt16_ptr_modifiers;
    AtomicXor_UInt16_ptr.type.modifierValues = AtomicXor_UInt16_ptr_modifierValues;
    AtomicXor_UInt16_value.name = "value"_c;
    AtomicXor_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicXor_UInt16_semantics.name = "semantics"_c;
    AtomicXor_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_UInt16_semantics.type.literal = true;
    AtomicXor_UInt16.documentation = "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicXor_UInt16.name = "atomicXor"_c;
    AtomicXor_UInt16.backendIndex = 2117;
    AtomicXor_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicXor_UInt16.parameters = AtomicXor_UInt16_args;
    Symbol::Resolved(&AtomicXor_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicXor_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicXor_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_UInt16)->signature = "u16 atomicXor(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_UInt16)->name = "atomicXor(*u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_UInt16)->nameWithVarNames = "atomicXor(ptr : *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicStore with Int16, Int16, MemorySemantics
    AtomicStore_Int16_ptr.name = "ptr"_c;
    AtomicStore_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicStore_Int16_ptr.type.modifiers = AtomicStore_Int16_ptr_modifiers;
    AtomicStore_Int16_ptr.type.modifierValues = AtomicStore_Int16_ptr_modifierValues;
    AtomicStore_Int16_value.name = "value"_c;
    AtomicStore_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicStore_Int16_semantics.name = "semantics"_c;
    AtomicStore_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Int16_semantics.type.literal = true;
    AtomicStore_Int16.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Int16.name = "atomicStore"_c;
    AtomicStore_Int16.backendIndex = 2118;
    AtomicStore_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicStore_Int16.parameters = AtomicStore_Int16_args;
    Symbol::Resolved(&AtomicStore_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicStore_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicStore_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Int16)->signature = "i16 atomicStore(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Int16)->name = "atomicStore(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Int16)->nameWithVarNames = "atomicStore(ptr : *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicExchange with Int16, Int16, MemorySemantics
    AtomicExchange_Int16_ptr.name = "ptr"_c;
    AtomicExchange_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicExchange_Int16_ptr.type.modifiers = AtomicExchange_Int16_ptr_modifiers;
    AtomicExchange_Int16_ptr.type.modifierValues = AtomicExchange_Int16_ptr_modifierValues;
    AtomicExchange_Int16_value.name = "value"_c;
    AtomicExchange_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicExchange_Int16_semantics.name = "semantics"_c;
    AtomicExchange_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Int16_semantics.type.literal = true;
    AtomicExchange_Int16.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Int16.name = "atomicExchange"_c;
    AtomicExchange_Int16.backendIndex = 2119;
    AtomicExchange_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicExchange_Int16.parameters = AtomicExchange_Int16_args;
    Symbol::Resolved(&AtomicExchange_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicExchange_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicExchange_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Int16)->signature = "i16 atomicExchange(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Int16)->name = "atomicExchange(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Int16)->nameWithVarNames = "atomicExchange(ptr : *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicAdd with Int16, Int16, MemorySemantics
    AtomicAdd_Int16_ptr.name = "ptr"_c;
    AtomicAdd_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicAdd_Int16_ptr.type.modifiers = AtomicAdd_Int16_ptr_modifiers;
    AtomicAdd_Int16_ptr.type.modifierValues = AtomicAdd_Int16_ptr_modifierValues;
    AtomicAdd_Int16_value.name = "value"_c;
    AtomicAdd_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicAdd_Int16_semantics.name = "semantics"_c;
    AtomicAdd_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Int16_semantics.type.literal = true;
    AtomicAdd_Int16.documentation = "Adds the value to the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAdd_Int16.name = "atomicAdd"_c;
    AtomicAdd_Int16.backendIndex = 2120;
    AtomicAdd_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicAdd_Int16.parameters = AtomicAdd_Int16_args;
    Symbol::Resolved(&AtomicAdd_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAdd_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAdd_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Int16)->signature = "i16 atomicAdd(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Int16)->name = "atomicAdd(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Int16)->nameWithVarNames = "atomicAdd(ptr : *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicSubtract with Int16, Int16, MemorySemantics
    AtomicSubtract_Int16_ptr.name = "ptr"_c;
    AtomicSubtract_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicSubtract_Int16_ptr.type.modifiers = AtomicSubtract_Int16_ptr_modifiers;
    AtomicSubtract_Int16_ptr.type.modifierValues = AtomicSubtract_Int16_ptr_modifierValues;
    AtomicSubtract_Int16_value.name = "value"_c;
    AtomicSubtract_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicSubtract_Int16_semantics.name = "semantics"_c;
    AtomicSubtract_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Int16_semantics.type.literal = true;
    AtomicSubtract_Int16.documentation = "Subtracts the value from the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicSubtract_Int16.name = "atomicSubtract"_c;
    AtomicSubtract_Int16.backendIndex = 2121;
    AtomicSubtract_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicSubtract_Int16.parameters = AtomicSubtract_Int16_args;
    Symbol::Resolved(&AtomicSubtract_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicSubtract_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicSubtract_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Int16)->signature = "i16 atomicSubtract(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Int16)->name = "atomicSubtract(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Int16)->nameWithVarNames = "atomicSubtract(ptr : *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicAnd with Int16, Int16, MemorySemantics
    AtomicAnd_Int16_ptr.name = "ptr"_c;
    AtomicAnd_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicAnd_Int16_ptr.type.modifiers = AtomicAnd_Int16_ptr_modifiers;
    AtomicAnd_Int16_ptr.type.modifierValues = AtomicAnd_Int16_ptr_modifierValues;
    AtomicAnd_Int16_value.name = "value"_c;
    AtomicAnd_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicAnd_Int16_semantics.name = "semantics"_c;
    AtomicAnd_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Int16_semantics.type.literal = true;
    AtomicAnd_Int16.documentation = "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAnd_Int16.name = "atomicAnd"_c;
    AtomicAnd_Int16.backendIndex = 2122;
    AtomicAnd_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicAnd_Int16.parameters = AtomicAnd_Int16_args;
    Symbol::Resolved(&AtomicAnd_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAnd_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAnd_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Int16)->signature = "i16 atomicAnd(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Int16)->name = "atomicAnd(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Int16)->nameWithVarNames = "atomicAnd(ptr : *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicOr with Int16, Int16, MemorySemantics
    AtomicOr_Int16_ptr.name = "ptr"_c;
    AtomicOr_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicOr_Int16_ptr.type.modifiers = AtomicOr_Int16_ptr_modifiers;
    AtomicOr_Int16_ptr.type.modifierValues = AtomicOr_Int16_ptr_modifierValues;
    AtomicOr_Int16_value.name = "value"_c;
    AtomicOr_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicOr_Int16_semantics.name = "semantics"_c;
    AtomicOr_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Int16_semantics.type.literal = true;
    AtomicOr_Int16.documentation = "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicOr_Int16.name = "atomicOr"_c;
    AtomicOr_Int16.backendIndex = 2123;
    AtomicOr_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicOr_Int16.parameters = AtomicOr_Int16_args;
    Symbol::Resolved(&AtomicOr_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicOr_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicOr_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Int16)->signature = "i16 atomicOr(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Int16)->name = "atomicOr(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Int16)->nameWithVarNames = "atomicOr(ptr : *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicXor with Int16, Int16, MemorySemantics
    AtomicXor_Int16_ptr.name = "ptr"_c;
    AtomicXor_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicXor_Int16_ptr.type.modifiers = AtomicXor_Int16_ptr_modifiers;
    AtomicXor_Int16_ptr.type.modifierValues = AtomicXor_Int16_ptr_modifierValues;
    AtomicXor_Int16_value.name = "value"_c;
    AtomicXor_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicXor_Int16_semantics.name = "semantics"_c;
    AtomicXor_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Int16_semantics.type.literal = true;
    AtomicXor_Int16.documentation = "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicXor_Int16.name = "atomicXor"_c;
    AtomicXor_Int16.backendIndex = 2124;
    AtomicXor_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicXor_Int16.parameters = AtomicXor_Int16_args;
    Symbol::Resolved(&AtomicXor_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicXor_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicXor_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Int16)->signature = "i16 atomicXor(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Int16)->name = "atomicXor(*i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Int16)->nameWithVarNames = "atomicXor(ptr : *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
    AtomicCompareExchange_UInt32_ptr.name = "ptr"_c;
    AtomicCompareExchange_UInt32_ptr.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_UInt32_ptr.type.modifiers = AtomicCompareExchange_UInt32_ptr_modifiers;
    AtomicCompareExchange_UInt32_ptr.type.modifierValues = AtomicCompareExchange_UInt32_ptr_modifierValues;
    AtomicCompareExchange_UInt32_value.name = "value"_c;
    AtomicCompareExchange_UInt32_value.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_UInt32_compare.name = "compare"_c;
    AtomicCompareExchange_UInt32_compare.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_UInt32_semantics.name = "semantics"_c;
    AtomicCompareExchange_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_UInt32_semantics.type.literal = true;
    AtomicCompareExchange_UInt32.documentation = "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value"_c;
    AtomicCompareExchange_UInt32.name = "atomicCompareExchange"_c;
    AtomicCompareExchange_UInt32.backendIndex = 2125;
    AtomicCompareExchange_UInt32.returnType = Type::FullType { Int16Type.name };
    AtomicCompareExchange_UInt32.parameters = AtomicCompareExchange_UInt32_args;
    Symbol::Resolved(&AtomicCompareExchange_UInt32_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt32_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt32_compare)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_UInt32)->signature = "i16 atomicCompareExchange(*i16,i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_UInt32)->name = "atomicCompareExchange(*i16,i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_UInt32)->nameWithVarNames = "atomicCompareExchange(ptr : *i16, value : i16, compare : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_UInt32)->returnTypeSymbol = &Int16Type;

    /// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
    AtomicCompareExchange_Int32_ptr.name = "ptr"_c;
    AtomicCompareExchange_Int32_ptr.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int32_ptr.type.modifiers = AtomicCompareExchange_Int32_ptr_modifiers;
    AtomicCompareExchange_Int32_ptr.type.modifierValues = AtomicCompareExchange_Int32_ptr_modifierValues;
    AtomicCompareExchange_Int32_value.name = "value"_c;
    AtomicCompareExchange_Int32_value.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int32_compare.name = "compare"_c;
    AtomicCompareExchange_Int32_compare.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int32_semantics.name = "semantics"_c;
    AtomicCompareExchange_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Int32_semantics.type.literal = true;
    AtomicCompareExchange_Int32.documentation = "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value"_c;
    AtomicCompareExchange_Int32.name = "atomicCompareExchange"_c;
    AtomicCompareExchange_Int32.backendIndex = 2126;
    AtomicCompareExchange_Int32.returnType = Type::FullType { Int16Type.name };
    AtomicCompareExchange_Int32.parameters = AtomicCompareExchange_Int32_args;
    Symbol::Resolved(&AtomicCompareExchange_Int32_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int32_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int32_compare)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Int32)->signature = "i16 atomicCompareExchange(*i16,i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Int32)->name = "atomicCompareExchange(*i16,i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Int32)->nameWithVarNames = "atomicCompareExchange(ptr : *i16, value : i16, compare : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Int32)->returnTypeSymbol = &Int16Type;

    /// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
    AtomicCompareExchange_UInt16_ptr.name = "ptr"_c;
    AtomicCompareExchange_UInt16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_UInt16_ptr.type.modifiers = AtomicCompareExchange_UInt16_ptr_modifiers;
    AtomicCompareExchange_UInt16_ptr.type.modifierValues = AtomicCompareExchange_UInt16_ptr_modifierValues;
    AtomicCompareExchange_UInt16_value.name = "value"_c;
    AtomicCompareExchange_UInt16_value.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_UInt16_compare.name = "compare"_c;
    AtomicCompareExchange_UInt16_compare.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_UInt16_semantics.name = "semantics"_c;
    AtomicCompareExchange_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_UInt16_semantics.type.literal = true;
    AtomicCompareExchange_UInt16.documentation = "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value"_c;
    AtomicCompareExchange_UInt16.name = "atomicCompareExchange"_c;
    AtomicCompareExchange_UInt16.backendIndex = 2127;
    AtomicCompareExchange_UInt16.returnType = Type::FullType { Int16Type.name };
    AtomicCompareExchange_UInt16.parameters = AtomicCompareExchange_UInt16_args;
    Symbol::Resolved(&AtomicCompareExchange_UInt16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt16_compare)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_UInt16)->signature = "i16 atomicCompareExchange(*i16,i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_UInt16)->name = "atomicCompareExchange(*i16,i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_UInt16)->nameWithVarNames = "atomicCompareExchange(ptr : *i16, value : i16, compare : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_UInt16)->returnTypeSymbol = &Int16Type;

    /// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
    AtomicCompareExchange_Int16_ptr.name = "ptr"_c;
    AtomicCompareExchange_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int16_ptr.type.modifiers = AtomicCompareExchange_Int16_ptr_modifiers;
    AtomicCompareExchange_Int16_ptr.type.modifierValues = AtomicCompareExchange_Int16_ptr_modifierValues;
    AtomicCompareExchange_Int16_value.name = "value"_c;
    AtomicCompareExchange_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int16_compare.name = "compare"_c;
    AtomicCompareExchange_Int16_compare.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int16_semantics.name = "semantics"_c;
    AtomicCompareExchange_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Int16_semantics.type.literal = true;
    AtomicCompareExchange_Int16.documentation = "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value"_c;
    AtomicCompareExchange_Int16.name = "atomicCompareExchange"_c;
    AtomicCompareExchange_Int16.backendIndex = 2128;
    AtomicCompareExchange_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicCompareExchange_Int16.parameters = AtomicCompareExchange_Int16_args;
    Symbol::Resolved(&AtomicCompareExchange_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int16_compare)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Int16)->signature = "i16 atomicCompareExchange(*i16,i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Int16)->name = "atomicCompareExchange(*i16,i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Int16)->nameWithVarNames = "atomicCompareExchange(ptr : *i16, value : i16, compare : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Int16)->returnTypeSymbol = &Int16Type;

    /// bitInsert with UInt16, UInt16, UInt16, UInt16
    BitInsert_UInt16_base.name = "base"_c;
    BitInsert_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16_value.name = "value"_c;
    BitInsert_UInt16_value.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16_offset.name = "offset"_c;
    BitInsert_UInt16_offset.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16_count.name = "count"_c;
    BitInsert_UInt16_count.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16.documentation = "Insert bit into bitmask"_c;
    BitInsert_UInt16.name = "bitInsert"_c;
    BitInsert_UInt16.backendIndex = 2129;
    BitInsert_UInt16.returnType = Type::FullType { UInt16Type.name };
    BitInsert_UInt16.parameters = BitInsert_UInt16_args;
    Symbol::Resolved(&BitInsert_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16_offset)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16_count)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16)->signature = "u16 bitInsert(u16,u16,u16,u16)"_c;
    Symbol::Resolved(&BitInsert_UInt16)->name = "bitInsert(u16,u16,u16,u16)"_c;
    Symbol::Resolved(&BitInsert_UInt16)->nameWithVarNames = "bitInsert(base : u16, value : u16, offset : u16, count : u16)"_c;
    Symbol::Resolved(&BitInsert_UInt16)->returnTypeSymbol = &UInt16Type;

    /// bitInsert with UInt32, UInt32, UInt32, UInt32
    BitInsert_UInt32_base.name = "base"_c;
    BitInsert_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32_value.name = "value"_c;
    BitInsert_UInt32_value.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32_offset.name = "offset"_c;
    BitInsert_UInt32_offset.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32_count.name = "count"_c;
    BitInsert_UInt32_count.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32.documentation = "Insert bit into bitmask"_c;
    BitInsert_UInt32.name = "bitInsert"_c;
    BitInsert_UInt32.backendIndex = 2130;
    BitInsert_UInt32.returnType = Type::FullType { UInt32Type.name };
    BitInsert_UInt32.parameters = BitInsert_UInt32_args;
    Symbol::Resolved(&BitInsert_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32_count)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32)->signature = "u32 bitInsert(u32,u32,u32,u32)"_c;
    Symbol::Resolved(&BitInsert_UInt32)->name = "bitInsert(u32,u32,u32,u32)"_c;
    Symbol::Resolved(&BitInsert_UInt32)->nameWithVarNames = "bitInsert(base : u32, value : u32, offset : u32, count : u32)"_c;
    Symbol::Resolved(&BitInsert_UInt32)->returnTypeSymbol = &UInt32Type;

    /// bitExtract with UInt32, UInt32, UInt32
    BitExtract_UInt32_base.name = "base"_c;
    BitExtract_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitExtract_UInt32_offset.name = "offset"_c;
    BitExtract_UInt32_offset.type = Type::FullType{ UInt32Type.name };
    BitExtract_UInt32_count.name = "count"_c;
    BitExtract_UInt32_count.type = Type::FullType{ UInt32Type.name };
    BitExtract_UInt32.documentation = "Extract a specific bit from a bitmask"_c;
    BitExtract_UInt32.name = "bitExtract"_c;
    BitExtract_UInt32.backendIndex = 2131;
    BitExtract_UInt32.returnType = Type::FullType { UInt32Type.name };
    BitExtract_UInt32.parameters = BitExtract_UInt32_args;
    Symbol::Resolved(&BitExtract_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitExtract_UInt32_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitExtract_UInt32_count)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitExtract_UInt32)->signature = "u32 bitExtract(u32,u32,u32)"_c;
    Symbol::Resolved(&BitExtract_UInt32)->name = "bitExtract(u32,u32,u32)"_c;
    Symbol::Resolved(&BitExtract_UInt32)->nameWithVarNames = "bitExtract(base : u32, offset : u32, count : u32)"_c;
    Symbol::Resolved(&BitExtract_UInt32)->returnTypeSymbol = &UInt32Type;

    /// bitExtract with Int32, Int32, Int32
    BitExtract_Int32_base.name = "base"_c;
    BitExtract_Int32_base.type = Type::FullType{ Int32Type.name };
    BitExtract_Int32_offset.name = "offset"_c;
    BitExtract_Int32_offset.type = Type::FullType{ Int32Type.name };
    BitExtract_Int32_count.name = "count"_c;
    BitExtract_Int32_count.type = Type::FullType{ Int32Type.name };
    BitExtract_Int32.documentation = "Extract a specific bit from a bitmask"_c;
    BitExtract_Int32.name = "bitExtract"_c;
    BitExtract_Int32.backendIndex = 2132;
    BitExtract_Int32.returnType = Type::FullType { Int32Type.name };
    BitExtract_Int32.parameters = BitExtract_Int32_args;
    Symbol::Resolved(&BitExtract_Int32_base)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitExtract_Int32_offset)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitExtract_Int32_count)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitExtract_Int32)->signature = "i32 bitExtract(i32,i32,i32)"_c;
    Symbol::Resolved(&BitExtract_Int32)->name = "bitExtract(i32,i32,i32)"_c;
    Symbol::Resolved(&BitExtract_Int32)->nameWithVarNames = "bitExtract(base : i32, offset : i32, count : i32)"_c;
    Symbol::Resolved(&BitExtract_Int32)->returnTypeSymbol = &Int32Type;

    /// bitExtract with UInt16, UInt16, UInt16
    BitExtract_UInt16_base.name = "base"_c;
    BitExtract_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitExtract_UInt16_offset.name = "offset"_c;
    BitExtract_UInt16_offset.type = Type::FullType{ UInt16Type.name };
    BitExtract_UInt16_count.name = "count"_c;
    BitExtract_UInt16_count.type = Type::FullType{ UInt16Type.name };
    BitExtract_UInt16.documentation = "Extract a specific bit from a bitmask"_c;
    BitExtract_UInt16.name = "bitExtract"_c;
    BitExtract_UInt16.backendIndex = 2133;
    BitExtract_UInt16.returnType = Type::FullType { UInt16Type.name };
    BitExtract_UInt16.parameters = BitExtract_UInt16_args;
    Symbol::Resolved(&BitExtract_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitExtract_UInt16_offset)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitExtract_UInt16_count)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitExtract_UInt16)->signature = "u16 bitExtract(u16,u16,u16)"_c;
    Symbol::Resolved(&BitExtract_UInt16)->name = "bitExtract(u16,u16,u16)"_c;
    Symbol::Resolved(&BitExtract_UInt16)->nameWithVarNames = "bitExtract(base : u16, offset : u16, count : u16)"_c;
    Symbol::Resolved(&BitExtract_UInt16)->returnTypeSymbol = &UInt16Type;

    /// bitExtract with Int16, Int16, Int16
    BitExtract_Int16_base.name = "base"_c;
    BitExtract_Int16_base.type = Type::FullType{ Int16Type.name };
    BitExtract_Int16_offset.name = "offset"_c;
    BitExtract_Int16_offset.type = Type::FullType{ Int16Type.name };
    BitExtract_Int16_count.name = "count"_c;
    BitExtract_Int16_count.type = Type::FullType{ Int16Type.name };
    BitExtract_Int16.documentation = "Extract a specific bit from a bitmask"_c;
    BitExtract_Int16.name = "bitExtract"_c;
    BitExtract_Int16.backendIndex = 2134;
    BitExtract_Int16.returnType = Type::FullType { Int16Type.name };
    BitExtract_Int16.parameters = BitExtract_Int16_args;
    Symbol::Resolved(&BitExtract_Int16_base)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitExtract_Int16_offset)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitExtract_Int16_count)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitExtract_Int16)->signature = "i16 bitExtract(i16,i16,i16)"_c;
    Symbol::Resolved(&BitExtract_Int16)->name = "bitExtract(i16,i16,i16)"_c;
    Symbol::Resolved(&BitExtract_Int16)->nameWithVarNames = "bitExtract(base : i16, offset : i16, count : i16)"_c;
    Symbol::Resolved(&BitExtract_Int16)->returnTypeSymbol = &Int16Type;

    /// bitReverse with UInt32
    BitReverse_UInt32_base.name = "base"_c;
    BitReverse_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitReverse_UInt32.documentation = "Reverses the bits in a bitmask"_c;
    BitReverse_UInt32.name = "bitReverse"_c;
    BitReverse_UInt32.backendIndex = 2135;
    BitReverse_UInt32.returnType = Type::FullType { UInt32Type.name };
    BitReverse_UInt32.parameters = BitReverse_UInt32_args;
    Symbol::Resolved(&BitReverse_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitReverse_UInt32)->signature = "u32 bitReverse(u32)"_c;
    Symbol::Resolved(&BitReverse_UInt32)->name = "bitReverse(u32)"_c;
    Symbol::Resolved(&BitReverse_UInt32)->nameWithVarNames = "bitReverse(base : u32)"_c;
    Symbol::Resolved(&BitReverse_UInt32)->returnTypeSymbol = &UInt32Type;

    /// bitReverse with Int32
    BitReverse_Int32_base.name = "base"_c;
    BitReverse_Int32_base.type = Type::FullType{ Int32Type.name };
    BitReverse_Int32.documentation = "Reverses the bits in a bitmask"_c;
    BitReverse_Int32.name = "bitReverse"_c;
    BitReverse_Int32.backendIndex = 2136;
    BitReverse_Int32.returnType = Type::FullType { Int32Type.name };
    BitReverse_Int32.parameters = BitReverse_Int32_args;
    Symbol::Resolved(&BitReverse_Int32_base)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitReverse_Int32)->signature = "i32 bitReverse(i32)"_c;
    Symbol::Resolved(&BitReverse_Int32)->name = "bitReverse(i32)"_c;
    Symbol::Resolved(&BitReverse_Int32)->nameWithVarNames = "bitReverse(base : i32)"_c;
    Symbol::Resolved(&BitReverse_Int32)->returnTypeSymbol = &Int32Type;

    /// bitReverse with UInt16
    BitReverse_UInt16_base.name = "base"_c;
    BitReverse_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitReverse_UInt16.documentation = "Reverses the bits in a bitmask"_c;
    BitReverse_UInt16.name = "bitReverse"_c;
    BitReverse_UInt16.backendIndex = 2137;
    BitReverse_UInt16.returnType = Type::FullType { UInt16Type.name };
    BitReverse_UInt16.parameters = BitReverse_UInt16_args;
    Symbol::Resolved(&BitReverse_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitReverse_UInt16)->signature = "u16 bitReverse(u16)"_c;
    Symbol::Resolved(&BitReverse_UInt16)->name = "bitReverse(u16)"_c;
    Symbol::Resolved(&BitReverse_UInt16)->nameWithVarNames = "bitReverse(base : u16)"_c;
    Symbol::Resolved(&BitReverse_UInt16)->returnTypeSymbol = &UInt16Type;

    /// bitReverse with Int16
    BitReverse_Int16_base.name = "base"_c;
    BitReverse_Int16_base.type = Type::FullType{ Int16Type.name };
    BitReverse_Int16.documentation = "Reverses the bits in a bitmask"_c;
    BitReverse_Int16.name = "bitReverse"_c;
    BitReverse_Int16.backendIndex = 2138;
    BitReverse_Int16.returnType = Type::FullType { Int16Type.name };
    BitReverse_Int16.parameters = BitReverse_Int16_args;
    Symbol::Resolved(&BitReverse_Int16_base)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitReverse_Int16)->signature = "i16 bitReverse(i16)"_c;
    Symbol::Resolved(&BitReverse_Int16)->name = "bitReverse(i16)"_c;
    Symbol::Resolved(&BitReverse_Int16)->nameWithVarNames = "bitReverse(base : i16)"_c;
    Symbol::Resolved(&BitReverse_Int16)->returnTypeSymbol = &Int16Type;

    /// bitCount with UInt32
    BitCount_UInt32_base.name = "base"_c;
    BitCount_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitCount_UInt32.documentation = "Counts the number of bits set to 1 in a bitmask"_c;
    BitCount_UInt32.name = "bitCount"_c;
    BitCount_UInt32.backendIndex = 2139;
    BitCount_UInt32.returnType = Type::FullType { UInt32Type.name };
    BitCount_UInt32.parameters = BitCount_UInt32_args;
    Symbol::Resolved(&BitCount_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitCount_UInt32)->signature = "u32 bitCount(u32)"_c;
    Symbol::Resolved(&BitCount_UInt32)->name = "bitCount(u32)"_c;
    Symbol::Resolved(&BitCount_UInt32)->nameWithVarNames = "bitCount(base : u32)"_c;
    Symbol::Resolved(&BitCount_UInt32)->returnTypeSymbol = &UInt32Type;

    /// bitCount with Int32
    BitCount_Int32_base.name = "base"_c;
    BitCount_Int32_base.type = Type::FullType{ Int32Type.name };
    BitCount_Int32.documentation = "Counts the number of bits set to 1 in a bitmask"_c;
    BitCount_Int32.name = "bitCount"_c;
    BitCount_Int32.backendIndex = 2140;
    BitCount_Int32.returnType = Type::FullType { Int32Type.name };
    BitCount_Int32.parameters = BitCount_Int32_args;
    Symbol::Resolved(&BitCount_Int32_base)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitCount_Int32)->signature = "i32 bitCount(i32)"_c;
    Symbol::Resolved(&BitCount_Int32)->name = "bitCount(i32)"_c;
    Symbol::Resolved(&BitCount_Int32)->nameWithVarNames = "bitCount(base : i32)"_c;
    Symbol::Resolved(&BitCount_Int32)->returnTypeSymbol = &Int32Type;

    /// bitCount with UInt16
    BitCount_UInt16_base.name = "base"_c;
    BitCount_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitCount_UInt16.documentation = "Counts the number of bits set to 1 in a bitmask"_c;
    BitCount_UInt16.name = "bitCount"_c;
    BitCount_UInt16.backendIndex = 2141;
    BitCount_UInt16.returnType = Type::FullType { UInt16Type.name };
    BitCount_UInt16.parameters = BitCount_UInt16_args;
    Symbol::Resolved(&BitCount_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitCount_UInt16)->signature = "u16 bitCount(u16)"_c;
    Symbol::Resolved(&BitCount_UInt16)->name = "bitCount(u16)"_c;
    Symbol::Resolved(&BitCount_UInt16)->nameWithVarNames = "bitCount(base : u16)"_c;
    Symbol::Resolved(&BitCount_UInt16)->returnTypeSymbol = &UInt16Type;

    /// bitCount with Int16
    BitCount_Int16_base.name = "base"_c;
    BitCount_Int16_base.type = Type::FullType{ Int16Type.name };
    BitCount_Int16.documentation = "Counts the number of bits set to 1 in a bitmask"_c;
    BitCount_Int16.name = "bitCount"_c;
    BitCount_Int16.backendIndex = 2142;
    BitCount_Int16.returnType = Type::FullType { Int16Type.name };
    BitCount_Int16.parameters = BitCount_Int16_args;
    Symbol::Resolved(&BitCount_Int16_base)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitCount_Int16)->signature = "i16 bitCount(i16)"_c;
    Symbol::Resolved(&BitCount_Int16)->name = "bitCount(i16)"_c;
    Symbol::Resolved(&BitCount_Int16)->nameWithVarNames = "bitCount(base : i16)"_c;
    Symbol::Resolved(&BitCount_Int16)->returnTypeSymbol = &Int16Type;

    /// executionBarrier
    ExecutionBarrier.documentation = "Execution barrier to ensure all threads have reached this point before proceeding"_c;
    ExecutionBarrier.name = "executionBarrier"_c;
    ExecutionBarrier.backendIndex = 2143;
    ExecutionBarrier.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&ExecutionBarrier)->signature = "void executionBarrier()"_c;
    Symbol::Resolved(&ExecutionBarrier)->name = "executionBarrier()"_c;
    Symbol::Resolved(&ExecutionBarrier)->nameWithVarNames = "executionBarrier()"_c;
    Symbol::Resolved(&ExecutionBarrier)->returnTypeSymbol = &VoidType;

    /// executionBarrierSubgroup
    ExecutionBarrierSubgroup.documentation = "Execution barrier to ensure all threads in the subgroup have reached this point before proceeding"_c;
    ExecutionBarrierSubgroup.name = "executionBarrierSubgroup"_c;
    ExecutionBarrierSubgroup.backendIndex = 2144;
    ExecutionBarrierSubgroup.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&ExecutionBarrierSubgroup)->signature = "void executionBarrierSubgroup()"_c;
    Symbol::Resolved(&ExecutionBarrierSubgroup)->name = "executionBarrierSubgroup()"_c;
    Symbol::Resolved(&ExecutionBarrierSubgroup)->nameWithVarNames = "executionBarrierSubgroup()"_c;
    Symbol::Resolved(&ExecutionBarrierSubgroup)->returnTypeSymbol = &VoidType;

    /// executionBarrierWorkgroup
    ExecutionBarrierWorkgroup.documentation = "Execution barrier to ensure all threads in the workgroup have reached this point before proceeding"_c;
    ExecutionBarrierWorkgroup.name = "executionBarrierWorkgroup"_c;
    ExecutionBarrierWorkgroup.backendIndex = 2145;
    ExecutionBarrierWorkgroup.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&ExecutionBarrierWorkgroup)->signature = "void executionBarrierWorkgroup()"_c;
    Symbol::Resolved(&ExecutionBarrierWorkgroup)->name = "executionBarrierWorkgroup()"_c;
    Symbol::Resolved(&ExecutionBarrierWorkgroup)->nameWithVarNames = "executionBarrierWorkgroup()"_c;
    Symbol::Resolved(&ExecutionBarrierWorkgroup)->returnTypeSymbol = &VoidType;

    /// memoryBarrier
    MemoryBarrier.documentation = "Memory barrier to ensure memory operations are completed before proceeding"_c;
    MemoryBarrier.name = "memoryBarrier"_c;
    MemoryBarrier.backendIndex = 2146;
    MemoryBarrier.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&MemoryBarrier)->signature = "void memoryBarrier()"_c;
    Symbol::Resolved(&MemoryBarrier)->name = "memoryBarrier()"_c;
    Symbol::Resolved(&MemoryBarrier)->nameWithVarNames = "memoryBarrier()"_c;
    Symbol::Resolved(&MemoryBarrier)->returnTypeSymbol = &VoidType;

    /// memoryBarrierBuffer
    MemoryBarrierBuffer.documentation = "Memory barrier to ensure buffer memory operations are completed before proceeding"_c;
    MemoryBarrierBuffer.name = "memoryBarrierBuffer"_c;
    MemoryBarrierBuffer.backendIndex = 2147;
    MemoryBarrierBuffer.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&MemoryBarrierBuffer)->signature = "void memoryBarrierBuffer()"_c;
    Symbol::Resolved(&MemoryBarrierBuffer)->name = "memoryBarrierBuffer()"_c;
    Symbol::Resolved(&MemoryBarrierBuffer)->nameWithVarNames = "memoryBarrierBuffer()"_c;
    Symbol::Resolved(&MemoryBarrierBuffer)->returnTypeSymbol = &VoidType;

    /// memoryBarrierTexture
    MemoryBarrierTexture.documentation = "Memory barrier to ensure texture memory operations are completed before proceeding"_c;
    MemoryBarrierTexture.name = "memoryBarrierTexture"_c;
    MemoryBarrierTexture.backendIndex = 2148;
    MemoryBarrierTexture.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&MemoryBarrierTexture)->signature = "void memoryBarrierTexture()"_c;
    Symbol::Resolved(&MemoryBarrierTexture)->name = "memoryBarrierTexture()"_c;
    Symbol::Resolved(&MemoryBarrierTexture)->nameWithVarNames = "memoryBarrierTexture()"_c;
    Symbol::Resolved(&MemoryBarrierTexture)->returnTypeSymbol = &VoidType;

    /// memoryBarrierAtomic
    MemoryBarrierAtomic.documentation = "Memory barrier to ensure atomic memory operations are completed before proceeding"_c;
    MemoryBarrierAtomic.name = "memoryBarrierAtomic"_c;
    MemoryBarrierAtomic.backendIndex = 2149;
    MemoryBarrierAtomic.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&MemoryBarrierAtomic)->signature = "void memoryBarrierAtomic()"_c;
    Symbol::Resolved(&MemoryBarrierAtomic)->name = "memoryBarrierAtomic()"_c;
    Symbol::Resolved(&MemoryBarrierAtomic)->nameWithVarNames = "memoryBarrierAtomic()"_c;
    Symbol::Resolved(&MemoryBarrierAtomic)->returnTypeSymbol = &VoidType;

    /// memoryBarrierSubgroup
    MemoryBarrierSubgroup.documentation = "Memory barrier to ensure subgroup memory operations are completed before proceeding"_c;
    MemoryBarrierSubgroup.name = "memoryBarrierSubgroup"_c;
    MemoryBarrierSubgroup.backendIndex = 2150;
    MemoryBarrierSubgroup.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&MemoryBarrierSubgroup)->signature = "void memoryBarrierSubgroup()"_c;
    Symbol::Resolved(&MemoryBarrierSubgroup)->name = "memoryBarrierSubgroup()"_c;
    Symbol::Resolved(&MemoryBarrierSubgroup)->nameWithVarNames = "memoryBarrierSubgroup()"_c;
    Symbol::Resolved(&MemoryBarrierSubgroup)->returnTypeSymbol = &VoidType;

    /// memoryBarrierWorkgroup
    MemoryBarrierWorkgroup.documentation = "Memory barrier to ensure workgroup memory operations are completed before proceeding"_c;
    MemoryBarrierWorkgroup.name = "memoryBarrierWorkgroup"_c;
    MemoryBarrierWorkgroup.backendIndex = 2151;
    MemoryBarrierWorkgroup.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&MemoryBarrierWorkgroup)->signature = "void memoryBarrierWorkgroup()"_c;
    Symbol::Resolved(&MemoryBarrierWorkgroup)->name = "memoryBarrierWorkgroup()"_c;
    Symbol::Resolved(&MemoryBarrierWorkgroup)->nameWithVarNames = "memoryBarrierWorkgroup()"_c;
    Symbol::Resolved(&MemoryBarrierWorkgroup)->returnTypeSymbol = &VoidType;

    /// textureGetSize with Texture1D
    TextureGetSize_Texture1D_texture.name = "texture"_c;
    TextureGetSize_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetSize_Texture1D_texture.type.modifiers = TextureGetSize_Texture1D_texture_modifiers;
    TextureGetSize_Texture1D_texture.type.modifierValues = TextureGetSize_Texture1D_texture_modifierValues;
    TextureGetSize_Texture1D.documentation = "Get the size of a texture"_c;
    TextureGetSize_Texture1D.name = "textureGetSize"_c;
    TextureGetSize_Texture1D.backendIndex = 2152;
    TextureGetSize_Texture1D.returnType = Type::FullType { UInt32Type.name };
    TextureGetSize_Texture1D.parameters = TextureGetSize_Texture1D_args;
    Symbol::Resolved(&TextureGetSize_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetSize_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture1D)->signature = "u32 textureGetSize(uniform *texture1D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture1D)->name = "textureGetSize(uniform *texture1D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture1D)->nameWithVarNames = "textureGetSize(texture : uniform *texture1D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture1D)->returnTypeSymbol = &UInt32Type;

    /// textureGetSize with Texture2D
    TextureGetSize_Texture2D_texture.name = "texture"_c;
    TextureGetSize_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetSize_Texture2D_texture.type.modifiers = TextureGetSize_Texture2D_texture_modifiers;
    TextureGetSize_Texture2D_texture.type.modifierValues = TextureGetSize_Texture2D_texture_modifierValues;
    TextureGetSize_Texture2D.documentation = "Get the size of a texture"_c;
    TextureGetSize_Texture2D.name = "textureGetSize"_c;
    TextureGetSize_Texture2D.backendIndex = 2153;
    TextureGetSize_Texture2D.returnType = Type::FullType { UInt32x2Type.name };
    TextureGetSize_Texture2D.parameters = TextureGetSize_Texture2D_args;
    Symbol::Resolved(&TextureGetSize_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetSize_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture2D)->signature = "u32x2 textureGetSize(uniform *texture2D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture2D)->name = "textureGetSize(uniform *texture2D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture2D)->nameWithVarNames = "textureGetSize(texture : uniform *texture2D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture2D)->returnTypeSymbol = &UInt32x2Type;

    /// textureGetSize with Texture3D
    TextureGetSize_Texture3D_texture.name = "texture"_c;
    TextureGetSize_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetSize_Texture3D_texture.type.modifiers = TextureGetSize_Texture3D_texture_modifiers;
    TextureGetSize_Texture3D_texture.type.modifierValues = TextureGetSize_Texture3D_texture_modifierValues;
    TextureGetSize_Texture3D.documentation = "Get the size of a texture"_c;
    TextureGetSize_Texture3D.name = "textureGetSize"_c;
    TextureGetSize_Texture3D.backendIndex = 2154;
    TextureGetSize_Texture3D.returnType = Type::FullType { UInt32x3Type.name };
    TextureGetSize_Texture3D.parameters = TextureGetSize_Texture3D_args;
    Symbol::Resolved(&TextureGetSize_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetSize_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture3D)->signature = "u32x3 textureGetSize(uniform *texture3D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture3D)->name = "textureGetSize(uniform *texture3D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture3D)->nameWithVarNames = "textureGetSize(texture : uniform *texture3D)"_c;
    Symbol::Resolved(&TextureGetSize_Texture3D)->returnTypeSymbol = &UInt32x3Type;

    /// textureGetSize with TextureCube
    TextureGetSize_TextureCube_texture.name = "texture"_c;
    TextureGetSize_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetSize_TextureCube_texture.type.modifiers = TextureGetSize_TextureCube_texture_modifiers;
    TextureGetSize_TextureCube_texture.type.modifierValues = TextureGetSize_TextureCube_texture_modifierValues;
    TextureGetSize_TextureCube.documentation = "Get the size of a texture"_c;
    TextureGetSize_TextureCube.name = "textureGetSize"_c;
    TextureGetSize_TextureCube.backendIndex = 2155;
    TextureGetSize_TextureCube.returnType = Type::FullType { UInt32x3Type.name };
    TextureGetSize_TextureCube.parameters = TextureGetSize_TextureCube_args;
    Symbol::Resolved(&TextureGetSize_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetSize_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_TextureCube)->signature = "u32x3 textureGetSize(uniform *textureCube)"_c;
    Symbol::Resolved(&TextureGetSize_TextureCube)->name = "textureGetSize(uniform *textureCube)"_c;
    Symbol::Resolved(&TextureGetSize_TextureCube)->nameWithVarNames = "textureGetSize(texture : uniform *textureCube)"_c;
    Symbol::Resolved(&TextureGetSize_TextureCube)->returnTypeSymbol = &UInt32x3Type;

    /// textureGetSize with Texture1DArray
    TextureGetSize_Texture1DArray_texture.name = "texture"_c;
    TextureGetSize_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSize_Texture1DArray_texture.type.modifiers = TextureGetSize_Texture1DArray_texture_modifiers;
    TextureGetSize_Texture1DArray_texture.type.modifierValues = TextureGetSize_Texture1DArray_texture_modifierValues;
    TextureGetSize_Texture1DArray.documentation = "Get the size of a texture"_c;
    TextureGetSize_Texture1DArray.name = "textureGetSize"_c;
    TextureGetSize_Texture1DArray.backendIndex = 2156;
    TextureGetSize_Texture1DArray.returnType = Type::FullType { UInt32x2Type.name };
    TextureGetSize_Texture1DArray.parameters = TextureGetSize_Texture1DArray_args;
    Symbol::Resolved(&TextureGetSize_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetSize_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture1DArray)->signature = "u32x2 textureGetSize(uniform *texture1DArray)"_c;
    Symbol::Resolved(&TextureGetSize_Texture1DArray)->name = "textureGetSize(uniform *texture1DArray)"_c;
    Symbol::Resolved(&TextureGetSize_Texture1DArray)->nameWithVarNames = "textureGetSize(texture : uniform *texture1DArray)"_c;
    Symbol::Resolved(&TextureGetSize_Texture1DArray)->returnTypeSymbol = &UInt32x2Type;

    /// textureGetSize with Texture2DArray
    TextureGetSize_Texture2DArray_texture.name = "texture"_c;
    TextureGetSize_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSize_Texture2DArray_texture.type.modifiers = TextureGetSize_Texture2DArray_texture_modifiers;
    TextureGetSize_Texture2DArray_texture.type.modifierValues = TextureGetSize_Texture2DArray_texture_modifierValues;
    TextureGetSize_Texture2DArray.documentation = "Get the size of a texture"_c;
    TextureGetSize_Texture2DArray.name = "textureGetSize"_c;
    TextureGetSize_Texture2DArray.backendIndex = 2157;
    TextureGetSize_Texture2DArray.returnType = Type::FullType { UInt32x3Type.name };
    TextureGetSize_Texture2DArray.parameters = TextureGetSize_Texture2DArray_args;
    Symbol::Resolved(&TextureGetSize_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetSize_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture2DArray)->signature = "u32x3 textureGetSize(uniform *texture2DArray)"_c;
    Symbol::Resolved(&TextureGetSize_Texture2DArray)->name = "textureGetSize(uniform *texture2DArray)"_c;
    Symbol::Resolved(&TextureGetSize_Texture2DArray)->nameWithVarNames = "textureGetSize(texture : uniform *texture2DArray)"_c;
    Symbol::Resolved(&TextureGetSize_Texture2DArray)->returnTypeSymbol = &UInt32x3Type;

    /// textureGetSize with TextureCubeArray
    TextureGetSize_TextureCubeArray_texture.name = "texture"_c;
    TextureGetSize_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSize_TextureCubeArray_texture.type.modifiers = TextureGetSize_TextureCubeArray_texture_modifiers;
    TextureGetSize_TextureCubeArray_texture.type.modifierValues = TextureGetSize_TextureCubeArray_texture_modifierValues;
    TextureGetSize_TextureCubeArray.documentation = "Get the size of a texture"_c;
    TextureGetSize_TextureCubeArray.name = "textureGetSize"_c;
    TextureGetSize_TextureCubeArray.backendIndex = 2158;
    TextureGetSize_TextureCubeArray.returnType = Type::FullType { UInt32x4Type.name };
    TextureGetSize_TextureCubeArray.parameters = TextureGetSize_TextureCubeArray_args;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray)->signature = "u32x4 textureGetSize(uniform *textureCubeArray)"_c;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray)->name = "textureGetSize(uniform *textureCubeArray)"_c;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray)->nameWithVarNames = "textureGetSize(texture : uniform *textureCubeArray)"_c;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray)->returnTypeSymbol = &UInt32x4Type;

    /// textureGetSizeMip with Texture1D, UInt32
    TextureGetSizeMip_Texture1D_texture.name = "texture"_c;
    TextureGetSizeMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetSizeMip_Texture1D_texture.type.modifiers = TextureGetSizeMip_Texture1D_texture_modifiers;
    TextureGetSizeMip_Texture1D_texture.type.modifierValues = TextureGetSizeMip_Texture1D_texture_modifierValues;
    TextureGetSizeMip_Texture1D_mip.name = "mip"_c;
    TextureGetSizeMip_Texture1D_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture1D.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_Texture1D.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture1D.backendIndex = 2159;
    TextureGetSizeMip_Texture1D.returnType = Type::FullType { UInt32Type.name };
    TextureGetSizeMip_Texture1D.parameters = TextureGetSizeMip_Texture1D_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D)->signature = "u32 textureGetSizeMip(uniform *texture1D,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D)->name = "textureGetSizeMip(uniform *texture1D,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D)->nameWithVarNames = "textureGetSizeMip(texture : uniform *texture1D, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D)->returnTypeSymbol = &UInt32Type;

    /// textureGetSizeMip with Texture2D, UInt32
    TextureGetSizeMip_Texture2D_texture.name = "texture"_c;
    TextureGetSizeMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetSizeMip_Texture2D_texture.type.modifiers = TextureGetSizeMip_Texture2D_texture_modifiers;
    TextureGetSizeMip_Texture2D_texture.type.modifierValues = TextureGetSizeMip_Texture2D_texture_modifierValues;
    TextureGetSizeMip_Texture2D_mip.name = "mip"_c;
    TextureGetSizeMip_Texture2D_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture2D.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_Texture2D.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture2D.backendIndex = 2160;
    TextureGetSizeMip_Texture2D.returnType = Type::FullType { UInt32x2Type.name };
    TextureGetSizeMip_Texture2D.parameters = TextureGetSizeMip_Texture2D_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D)->signature = "u32x2 textureGetSizeMip(uniform *texture2D,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D)->name = "textureGetSizeMip(uniform *texture2D,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D)->nameWithVarNames = "textureGetSizeMip(texture : uniform *texture2D, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D)->returnTypeSymbol = &UInt32x2Type;

    /// textureGetSizeMip with Texture3D, UInt32
    TextureGetSizeMip_Texture3D_texture.name = "texture"_c;
    TextureGetSizeMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetSizeMip_Texture3D_texture.type.modifiers = TextureGetSizeMip_Texture3D_texture_modifiers;
    TextureGetSizeMip_Texture3D_texture.type.modifierValues = TextureGetSizeMip_Texture3D_texture_modifierValues;
    TextureGetSizeMip_Texture3D_mip.name = "mip"_c;
    TextureGetSizeMip_Texture3D_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture3D.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_Texture3D.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture3D.backendIndex = 2161;
    TextureGetSizeMip_Texture3D.returnType = Type::FullType { UInt32x3Type.name };
    TextureGetSizeMip_Texture3D.parameters = TextureGetSizeMip_Texture3D_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D)->signature = "u32x3 textureGetSizeMip(uniform *texture3D,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D)->name = "textureGetSizeMip(uniform *texture3D,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D)->nameWithVarNames = "textureGetSizeMip(texture : uniform *texture3D, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D)->returnTypeSymbol = &UInt32x3Type;

    /// textureGetSizeMip with TextureCube, UInt32
    TextureGetSizeMip_TextureCube_texture.name = "texture"_c;
    TextureGetSizeMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetSizeMip_TextureCube_texture.type.modifiers = TextureGetSizeMip_TextureCube_texture_modifiers;
    TextureGetSizeMip_TextureCube_texture.type.modifierValues = TextureGetSizeMip_TextureCube_texture_modifierValues;
    TextureGetSizeMip_TextureCube_mip.name = "mip"_c;
    TextureGetSizeMip_TextureCube_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_TextureCube.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_TextureCube.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_TextureCube.backendIndex = 2162;
    TextureGetSizeMip_TextureCube.returnType = Type::FullType { UInt32x3Type.name };
    TextureGetSizeMip_TextureCube.parameters = TextureGetSizeMip_TextureCube_args;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube)->signature = "u32x3 textureGetSizeMip(uniform *textureCube,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube)->name = "textureGetSizeMip(uniform *textureCube,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube)->nameWithVarNames = "textureGetSizeMip(texture : uniform *textureCube, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube)->returnTypeSymbol = &UInt32x3Type;

    /// textureGetSizeMip with Texture1DArray, UInt32
    TextureGetSizeMip_Texture1DArray_texture.name = "texture"_c;
    TextureGetSizeMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSizeMip_Texture1DArray_texture.type.modifiers = TextureGetSizeMip_Texture1DArray_texture_modifiers;
    TextureGetSizeMip_Texture1DArray_texture.type.modifierValues = TextureGetSizeMip_Texture1DArray_texture_modifierValues;
    TextureGetSizeMip_Texture1DArray_mip.name = "mip"_c;
    TextureGetSizeMip_Texture1DArray_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture1DArray.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_Texture1DArray.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture1DArray.backendIndex = 2163;
    TextureGetSizeMip_Texture1DArray.returnType = Type::FullType { UInt32x2Type.name };
    TextureGetSizeMip_Texture1DArray.parameters = TextureGetSizeMip_Texture1DArray_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray)->signature = "u32x2 textureGetSizeMip(uniform *texture1DArray,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray)->name = "textureGetSizeMip(uniform *texture1DArray,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray)->nameWithVarNames = "textureGetSizeMip(texture : uniform *texture1DArray, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray)->returnTypeSymbol = &UInt32x2Type;

    /// textureGetSizeMip with Texture2DArray, UInt32
    TextureGetSizeMip_Texture2DArray_texture.name = "texture"_c;
    TextureGetSizeMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSizeMip_Texture2DArray_texture.type.modifiers = TextureGetSizeMip_Texture2DArray_texture_modifiers;
    TextureGetSizeMip_Texture2DArray_texture.type.modifierValues = TextureGetSizeMip_Texture2DArray_texture_modifierValues;
    TextureGetSizeMip_Texture2DArray_mip.name = "mip"_c;
    TextureGetSizeMip_Texture2DArray_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture2DArray.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_Texture2DArray.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture2DArray.backendIndex = 2164;
    TextureGetSizeMip_Texture2DArray.returnType = Type::FullType { UInt32x3Type.name };
    TextureGetSizeMip_Texture2DArray.parameters = TextureGetSizeMip_Texture2DArray_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray)->signature = "u32x3 textureGetSizeMip(uniform *texture2DArray,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray)->name = "textureGetSizeMip(uniform *texture2DArray,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray)->nameWithVarNames = "textureGetSizeMip(texture : uniform *texture2DArray, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray)->returnTypeSymbol = &UInt32x3Type;

    /// textureGetSizeMip with TextureCubeArray, UInt32
    TextureGetSizeMip_TextureCubeArray_texture.name = "texture"_c;
    TextureGetSizeMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSizeMip_TextureCubeArray_texture.type.modifiers = TextureGetSizeMip_TextureCubeArray_texture_modifiers;
    TextureGetSizeMip_TextureCubeArray_texture.type.modifierValues = TextureGetSizeMip_TextureCubeArray_texture_modifierValues;
    TextureGetSizeMip_TextureCubeArray_mip.name = "mip"_c;
    TextureGetSizeMip_TextureCubeArray_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_TextureCubeArray.documentation = "Get the size of a texture at a specific mip level"_c;
    TextureGetSizeMip_TextureCubeArray.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_TextureCubeArray.backendIndex = 2165;
    TextureGetSizeMip_TextureCubeArray.returnType = Type::FullType { UInt32x4Type.name };
    TextureGetSizeMip_TextureCubeArray.parameters = TextureGetSizeMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray)->signature = "u32x4 textureGetSizeMip(uniform *textureCubeArray,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray)->name = "textureGetSizeMip(uniform *textureCubeArray,u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray)->nameWithVarNames = "textureGetSizeMip(texture : uniform *textureCubeArray, mip : u32)"_c;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray)->returnTypeSymbol = &UInt32x4Type;

    /// textureGetMips with Texture1D
    TextureGetMips_Texture1D_texture.name = "texture"_c;
    TextureGetMips_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetMips_Texture1D_texture.type.modifiers = TextureGetMips_Texture1D_texture_modifiers;
    TextureGetMips_Texture1D_texture.type.modifierValues = TextureGetMips_Texture1D_texture_modifierValues;
    TextureGetMips_Texture1D.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_Texture1D.name = "textureGetMips"_c;
    TextureGetMips_Texture1D.backendIndex = 2166;
    TextureGetMips_Texture1D.returnType = Type::FullType { Texture1DType.name };
    TextureGetMips_Texture1D.parameters = TextureGetMips_Texture1D_args;
    Symbol::Resolved(&TextureGetMips_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetMips_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture1D)->signature = "texture1D textureGetMips(uniform *texture1D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture1D)->name = "textureGetMips(uniform *texture1D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture1D)->nameWithVarNames = "textureGetMips(texture : uniform *texture1D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture1D)->returnTypeSymbol = &Texture1DType;

    /// textureGetMips with Texture2D
    TextureGetMips_Texture2D_texture.name = "texture"_c;
    TextureGetMips_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetMips_Texture2D_texture.type.modifiers = TextureGetMips_Texture2D_texture_modifiers;
    TextureGetMips_Texture2D_texture.type.modifierValues = TextureGetMips_Texture2D_texture_modifierValues;
    TextureGetMips_Texture2D.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_Texture2D.name = "textureGetMips"_c;
    TextureGetMips_Texture2D.backendIndex = 2167;
    TextureGetMips_Texture2D.returnType = Type::FullType { Texture2DType.name };
    TextureGetMips_Texture2D.parameters = TextureGetMips_Texture2D_args;
    Symbol::Resolved(&TextureGetMips_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetMips_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture2D)->signature = "texture2D textureGetMips(uniform *texture2D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture2D)->name = "textureGetMips(uniform *texture2D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture2D)->nameWithVarNames = "textureGetMips(texture : uniform *texture2D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureGetMips with Texture3D
    TextureGetMips_Texture3D_texture.name = "texture"_c;
    TextureGetMips_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetMips_Texture3D_texture.type.modifiers = TextureGetMips_Texture3D_texture_modifiers;
    TextureGetMips_Texture3D_texture.type.modifierValues = TextureGetMips_Texture3D_texture_modifierValues;
    TextureGetMips_Texture3D.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_Texture3D.name = "textureGetMips"_c;
    TextureGetMips_Texture3D.backendIndex = 2168;
    TextureGetMips_Texture3D.returnType = Type::FullType { Texture3DType.name };
    TextureGetMips_Texture3D.parameters = TextureGetMips_Texture3D_args;
    Symbol::Resolved(&TextureGetMips_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetMips_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture3D)->signature = "texture3D textureGetMips(uniform *texture3D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture3D)->name = "textureGetMips(uniform *texture3D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture3D)->nameWithVarNames = "textureGetMips(texture : uniform *texture3D)"_c;
    Symbol::Resolved(&TextureGetMips_Texture3D)->returnTypeSymbol = &Texture3DType;

    /// textureGetMips with TextureCube
    TextureGetMips_TextureCube_texture.name = "texture"_c;
    TextureGetMips_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetMips_TextureCube_texture.type.modifiers = TextureGetMips_TextureCube_texture_modifiers;
    TextureGetMips_TextureCube_texture.type.modifierValues = TextureGetMips_TextureCube_texture_modifierValues;
    TextureGetMips_TextureCube.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_TextureCube.name = "textureGetMips"_c;
    TextureGetMips_TextureCube.backendIndex = 2169;
    TextureGetMips_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    TextureGetMips_TextureCube.parameters = TextureGetMips_TextureCube_args;
    Symbol::Resolved(&TextureGetMips_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetMips_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_TextureCube)->signature = "textureCube textureGetMips(uniform *textureCube)"_c;
    Symbol::Resolved(&TextureGetMips_TextureCube)->name = "textureGetMips(uniform *textureCube)"_c;
    Symbol::Resolved(&TextureGetMips_TextureCube)->nameWithVarNames = "textureGetMips(texture : uniform *textureCube)"_c;
    Symbol::Resolved(&TextureGetMips_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureGetMips with Texture1DArray
    TextureGetMips_Texture1DArray_texture.name = "texture"_c;
    TextureGetMips_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetMips_Texture1DArray_texture.type.modifiers = TextureGetMips_Texture1DArray_texture_modifiers;
    TextureGetMips_Texture1DArray_texture.type.modifierValues = TextureGetMips_Texture1DArray_texture_modifierValues;
    TextureGetMips_Texture1DArray.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_Texture1DArray.name = "textureGetMips"_c;
    TextureGetMips_Texture1DArray.backendIndex = 2170;
    TextureGetMips_Texture1DArray.returnType = Type::FullType { Texture1DArrayType.name };
    TextureGetMips_Texture1DArray.parameters = TextureGetMips_Texture1DArray_args;
    Symbol::Resolved(&TextureGetMips_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetMips_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture1DArray)->signature = "texture1DArray textureGetMips(uniform *texture1DArray)"_c;
    Symbol::Resolved(&TextureGetMips_Texture1DArray)->name = "textureGetMips(uniform *texture1DArray)"_c;
    Symbol::Resolved(&TextureGetMips_Texture1DArray)->nameWithVarNames = "textureGetMips(texture : uniform *texture1DArray)"_c;
    Symbol::Resolved(&TextureGetMips_Texture1DArray)->returnTypeSymbol = &Texture1DArrayType;

    /// textureGetMips with Texture2DArray
    TextureGetMips_Texture2DArray_texture.name = "texture"_c;
    TextureGetMips_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetMips_Texture2DArray_texture.type.modifiers = TextureGetMips_Texture2DArray_texture_modifiers;
    TextureGetMips_Texture2DArray_texture.type.modifierValues = TextureGetMips_Texture2DArray_texture_modifierValues;
    TextureGetMips_Texture2DArray.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_Texture2DArray.name = "textureGetMips"_c;
    TextureGetMips_Texture2DArray.backendIndex = 2171;
    TextureGetMips_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    TextureGetMips_Texture2DArray.parameters = TextureGetMips_Texture2DArray_args;
    Symbol::Resolved(&TextureGetMips_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetMips_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture2DArray)->signature = "texture2DArray textureGetMips(uniform *texture2DArray)"_c;
    Symbol::Resolved(&TextureGetMips_Texture2DArray)->name = "textureGetMips(uniform *texture2DArray)"_c;
    Symbol::Resolved(&TextureGetMips_Texture2DArray)->nameWithVarNames = "textureGetMips(texture : uniform *texture2DArray)"_c;
    Symbol::Resolved(&TextureGetMips_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureGetMips with TextureCubeArray
    TextureGetMips_TextureCubeArray_texture.name = "texture"_c;
    TextureGetMips_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetMips_TextureCubeArray_texture.type.modifiers = TextureGetMips_TextureCubeArray_texture_modifiers;
    TextureGetMips_TextureCubeArray_texture.type.modifierValues = TextureGetMips_TextureCubeArray_texture_modifierValues;
    TextureGetMips_TextureCubeArray.documentation = "Get the number of mips in a texture"_c;
    TextureGetMips_TextureCubeArray.name = "textureGetMips"_c;
    TextureGetMips_TextureCubeArray.backendIndex = 2172;
    TextureGetMips_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    TextureGetMips_TextureCubeArray.parameters = TextureGetMips_TextureCubeArray_args;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray)->signature = "textureCubeArray textureGetMips(uniform *textureCubeArray)"_c;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray)->name = "textureGetMips(uniform *textureCubeArray)"_c;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray)->nameWithVarNames = "textureGetMips(texture : uniform *textureCubeArray)"_c;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// textureGetSamples with Texture2DMS
    TextureGetSamples_Texture2DMS_texture.name = "texture"_c;
    TextureGetSamples_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureGetSamples_Texture2DMS_texture.type.modifiers = TextureGetSamples_Texture2DMS_texture_modifiers;
    TextureGetSamples_Texture2DMS_texture.type.modifierValues = TextureGetSamples_Texture2DMS_texture_modifierValues;
    TextureGetSamples_Texture2DMS.documentation = "Get the number of samples in a multisampled texture"_c;
    TextureGetSamples_Texture2DMS.name = "textureGetSamples"_c;
    TextureGetSamples_Texture2DMS.backendIndex = 2173;
    TextureGetSamples_Texture2DMS.returnType = Type::FullType { Texture2DMSType.name };
    TextureGetSamples_Texture2DMS.parameters = TextureGetSamples_Texture2DMS_args;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS)->signature = "texture2DMS textureGetSamples(uniform *texture2DMS)"_c;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS)->name = "textureGetSamples(uniform *texture2DMS)"_c;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS)->nameWithVarNames = "textureGetSamples(texture : uniform *texture2DMS)"_c;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS)->returnTypeSymbol = &Texture2DMSType;

    /// textureGetSamples with Texture2DMSArray
    TextureGetSamples_Texture2DMSArray_texture.name = "texture"_c;
    TextureGetSamples_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureGetSamples_Texture2DMSArray_texture.type.modifiers = TextureGetSamples_Texture2DMSArray_texture_modifiers;
    TextureGetSamples_Texture2DMSArray_texture.type.modifierValues = TextureGetSamples_Texture2DMSArray_texture_modifierValues;
    TextureGetSamples_Texture2DMSArray.documentation = "Get the number of samples in a multisampled texture"_c;
    TextureGetSamples_Texture2DMSArray.name = "textureGetSamples"_c;
    TextureGetSamples_Texture2DMSArray.backendIndex = 2174;
    TextureGetSamples_Texture2DMSArray.returnType = Type::FullType { Texture2DMSArrayType.name };
    TextureGetSamples_Texture2DMSArray.parameters = TextureGetSamples_Texture2DMSArray_args;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray)->signature = "texture2DMSArray textureGetSamples(uniform *texture2DMSArray)"_c;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray)->name = "textureGetSamples(uniform *texture2DMSArray)"_c;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray)->nameWithVarNames = "textureGetSamples(texture : uniform *texture2DMSArray)"_c;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray)->returnTypeSymbol = &Texture2DMSArrayType;

    /// textureGetSampledMip with Texture1D, Sampler, Float32
    TextureGetSampledMip_Texture1D_texture.name = "texture"_c;
    TextureGetSampledMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetSampledMip_Texture1D_texture.type.modifiers = TextureGetSampledMip_Texture1D_texture_modifiers;
    TextureGetSampledMip_Texture1D_texture.type.modifierValues = TextureGetSampledMip_Texture1D_texture_modifierValues;
    TextureGetSampledMip_Texture1D_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture1D_sampler.type.modifiers = TextureGetSampledMip_Texture1D_sampler_modifiers;
    TextureGetSampledMip_Texture1D_sampler.type.modifierValues = TextureGetSampledMip_Texture1D_sampler_modifierValues;
    TextureGetSampledMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureGetSampledMip_Texture1D.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_Texture1D.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture1D.backendIndex = 2175;
    TextureGetSampledMip_Texture1D.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_Texture1D.parameters = TextureGetSampledMip_Texture1D_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D)->signature = "f32x2 textureGetSampledMip(uniform *texture1D,uniform *sampler,f32)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D)->name = "textureGetSampledMip(uniform *texture1D,uniform *sampler,f32)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D)->nameWithVarNames = "textureGetSampledMip(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTexture1D, Float32
    SampledTextureGetSampledMip_Texture1D_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureGetSampledMip_Texture1D_texture.type.modifiers = SampledTextureGetSampledMip_Texture1D_texture_modifiers;
    SampledTextureGetSampledMip_Texture1D_texture.type.modifierValues = SampledTextureGetSampledMip_Texture1D_texture_modifierValues;
    SampledTextureGetSampledMip_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureGetSampledMip_Texture1D.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_Texture1D.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture1D.backendIndex = 2176;
    SampledTextureGetSampledMip_Texture1D.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_Texture1D.parameters = SampledTextureGetSampledMip_Texture1D_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D)->signature = "f32x2 textureGetSampledMip(uniform *textureSampled1D,f32)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D)->name = "textureGetSampledMip(uniform *textureSampled1D,f32)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampled1D, coordinate : f32)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with Texture2D, Sampler, Float32x2
    TextureGetSampledMip_Texture2D_texture.name = "texture"_c;
    TextureGetSampledMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetSampledMip_Texture2D_texture.type.modifiers = TextureGetSampledMip_Texture2D_texture_modifiers;
    TextureGetSampledMip_Texture2D_texture.type.modifierValues = TextureGetSampledMip_Texture2D_texture_modifierValues;
    TextureGetSampledMip_Texture2D_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture2D_sampler.type.modifiers = TextureGetSampledMip_Texture2D_sampler_modifiers;
    TextureGetSampledMip_Texture2D_sampler.type.modifierValues = TextureGetSampledMip_Texture2D_sampler_modifierValues;
    TextureGetSampledMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture2D.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_Texture2D.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture2D.backendIndex = 2177;
    TextureGetSampledMip_Texture2D.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_Texture2D.parameters = TextureGetSampledMip_Texture2D_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D)->signature = "f32x2 textureGetSampledMip(uniform *texture2D,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D)->name = "textureGetSampledMip(uniform *texture2D,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D)->nameWithVarNames = "textureGetSampledMip(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTexture2D, Float32x2
    SampledTextureGetSampledMip_Texture2D_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureGetSampledMip_Texture2D_texture.type.modifiers = SampledTextureGetSampledMip_Texture2D_texture_modifiers;
    SampledTextureGetSampledMip_Texture2D_texture.type.modifierValues = SampledTextureGetSampledMip_Texture2D_texture_modifierValues;
    SampledTextureGetSampledMip_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture2D.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_Texture2D.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture2D.backendIndex = 2178;
    SampledTextureGetSampledMip_Texture2D.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_Texture2D.parameters = SampledTextureGetSampledMip_Texture2D_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D)->signature = "f32x2 textureGetSampledMip(uniform *textureSampled2D,f32x2)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D)->name = "textureGetSampledMip(uniform *textureSampled2D,f32x2)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampled2D, coordinate : f32x2)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with Texture3D, Sampler, Float32x3
    TextureGetSampledMip_Texture3D_texture.name = "texture"_c;
    TextureGetSampledMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetSampledMip_Texture3D_texture.type.modifiers = TextureGetSampledMip_Texture3D_texture_modifiers;
    TextureGetSampledMip_Texture3D_texture.type.modifierValues = TextureGetSampledMip_Texture3D_texture_modifierValues;
    TextureGetSampledMip_Texture3D_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture3D_sampler.type.modifiers = TextureGetSampledMip_Texture3D_sampler_modifiers;
    TextureGetSampledMip_Texture3D_sampler.type.modifierValues = TextureGetSampledMip_Texture3D_sampler_modifierValues;
    TextureGetSampledMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureGetSampledMip_Texture3D.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_Texture3D.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture3D.backendIndex = 2179;
    TextureGetSampledMip_Texture3D.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_Texture3D.parameters = TextureGetSampledMip_Texture3D_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D)->signature = "f32x2 textureGetSampledMip(uniform *texture3D,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D)->name = "textureGetSampledMip(uniform *texture3D,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D)->nameWithVarNames = "textureGetSampledMip(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTexture3D, Float32x3
    SampledTextureGetSampledMip_Texture3D_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureGetSampledMip_Texture3D_texture.type.modifiers = SampledTextureGetSampledMip_Texture3D_texture_modifiers;
    SampledTextureGetSampledMip_Texture3D_texture.type.modifierValues = SampledTextureGetSampledMip_Texture3D_texture_modifierValues;
    SampledTextureGetSampledMip_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureGetSampledMip_Texture3D.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_Texture3D.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture3D.backendIndex = 2180;
    SampledTextureGetSampledMip_Texture3D.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_Texture3D.parameters = SampledTextureGetSampledMip_Texture3D_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D)->signature = "f32x2 textureGetSampledMip(uniform *textureSampled3D,f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D)->name = "textureGetSampledMip(uniform *textureSampled3D,f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampled3D, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with TextureCube, Sampler, Float32x3
    TextureGetSampledMip_TextureCube_texture.name = "texture"_c;
    TextureGetSampledMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetSampledMip_TextureCube_texture.type.modifiers = TextureGetSampledMip_TextureCube_texture_modifiers;
    TextureGetSampledMip_TextureCube_texture.type.modifierValues = TextureGetSampledMip_TextureCube_texture_modifierValues;
    TextureGetSampledMip_TextureCube_sampler.name = "sampler"_c;
    TextureGetSampledMip_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_TextureCube_sampler.type.modifiers = TextureGetSampledMip_TextureCube_sampler_modifiers;
    TextureGetSampledMip_TextureCube_sampler.type.modifierValues = TextureGetSampledMip_TextureCube_sampler_modifierValues;
    TextureGetSampledMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureGetSampledMip_TextureCube.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_TextureCube.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_TextureCube.backendIndex = 2181;
    TextureGetSampledMip_TextureCube.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_TextureCube.parameters = TextureGetSampledMip_TextureCube_args;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube)->signature = "f32x2 textureGetSampledMip(uniform *textureCube,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube)->name = "textureGetSampledMip(uniform *textureCube,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTextureCube, Float32x3
    SampledTextureGetSampledMip_TextureCube_texture.name = "texture"_c;
    SampledTextureGetSampledMip_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureGetSampledMip_TextureCube_texture.type.modifiers = SampledTextureGetSampledMip_TextureCube_texture_modifiers;
    SampledTextureGetSampledMip_TextureCube_texture.type.modifierValues = SampledTextureGetSampledMip_TextureCube_texture_modifierValues;
    SampledTextureGetSampledMip_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureGetSampledMip_TextureCube.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_TextureCube.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_TextureCube.backendIndex = 2182;
    SampledTextureGetSampledMip_TextureCube.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_TextureCube.parameters = SampledTextureGetSampledMip_TextureCube_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube)->signature = "f32x2 textureGetSampledMip(uniform *textureSampledCube,f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube)->name = "textureGetSampledMip(uniform *textureSampledCube,f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampledCube, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with Texture1DArray, Sampler, Float32x2
    TextureGetSampledMip_Texture1DArray_texture.name = "texture"_c;
    TextureGetSampledMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSampledMip_Texture1DArray_texture.type.modifiers = TextureGetSampledMip_Texture1DArray_texture_modifiers;
    TextureGetSampledMip_Texture1DArray_texture.type.modifierValues = TextureGetSampledMip_Texture1DArray_texture_modifierValues;
    TextureGetSampledMip_Texture1DArray_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture1DArray_sampler.type.modifiers = TextureGetSampledMip_Texture1DArray_sampler_modifiers;
    TextureGetSampledMip_Texture1DArray_sampler.type.modifierValues = TextureGetSampledMip_Texture1DArray_sampler_modifierValues;
    TextureGetSampledMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture1DArray.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_Texture1DArray.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture1DArray.backendIndex = 2183;
    TextureGetSampledMip_Texture1DArray.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_Texture1DArray.parameters = TextureGetSampledMip_Texture1DArray_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray)->signature = "f32x2 textureGetSampledMip(uniform *texture1DArray,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray)->name = "textureGetSampledMip(uniform *texture1DArray,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray)->nameWithVarNames = "textureGetSampledMip(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTexture1DArray, Float32x2
    SampledTextureGetSampledMip_Texture1DArray_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureGetSampledMip_Texture1DArray_texture.type.modifiers = SampledTextureGetSampledMip_Texture1DArray_texture_modifiers;
    SampledTextureGetSampledMip_Texture1DArray_texture.type.modifierValues = SampledTextureGetSampledMip_Texture1DArray_texture_modifierValues;
    SampledTextureGetSampledMip_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture1DArray.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_Texture1DArray.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture1DArray.backendIndex = 2184;
    SampledTextureGetSampledMip_Texture1DArray.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_Texture1DArray.parameters = SampledTextureGetSampledMip_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray)->signature = "f32x2 textureGetSampledMip(uniform *textureSampled1DArray,f32x2)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray)->name = "textureGetSampledMip(uniform *textureSampled1DArray,f32x2)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampled1DArray, coordinate : f32x2)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with Texture2DArray, Sampler, Float32x3
    TextureGetSampledMip_Texture2DArray_texture.name = "texture"_c;
    TextureGetSampledMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSampledMip_Texture2DArray_texture.type.modifiers = TextureGetSampledMip_Texture2DArray_texture_modifiers;
    TextureGetSampledMip_Texture2DArray_texture.type.modifierValues = TextureGetSampledMip_Texture2DArray_texture_modifierValues;
    TextureGetSampledMip_Texture2DArray_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture2DArray_sampler.type.modifiers = TextureGetSampledMip_Texture2DArray_sampler_modifiers;
    TextureGetSampledMip_Texture2DArray_sampler.type.modifierValues = TextureGetSampledMip_Texture2DArray_sampler_modifierValues;
    TextureGetSampledMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureGetSampledMip_Texture2DArray.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_Texture2DArray.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture2DArray.backendIndex = 2185;
    TextureGetSampledMip_Texture2DArray.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_Texture2DArray.parameters = TextureGetSampledMip_Texture2DArray_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray)->signature = "f32x2 textureGetSampledMip(uniform *texture2DArray,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray)->name = "textureGetSampledMip(uniform *texture2DArray,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray)->nameWithVarNames = "textureGetSampledMip(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTexture2DArray, Float32x3
    SampledTextureGetSampledMip_Texture2DArray_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureGetSampledMip_Texture2DArray_texture.type.modifiers = SampledTextureGetSampledMip_Texture2DArray_texture_modifiers;
    SampledTextureGetSampledMip_Texture2DArray_texture.type.modifierValues = SampledTextureGetSampledMip_Texture2DArray_texture_modifierValues;
    SampledTextureGetSampledMip_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureGetSampledMip_Texture2DArray.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_Texture2DArray.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture2DArray.backendIndex = 2186;
    SampledTextureGetSampledMip_Texture2DArray.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_Texture2DArray.parameters = SampledTextureGetSampledMip_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray)->signature = "f32x2 textureGetSampledMip(uniform *textureSampled2DArray,f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray)->name = "textureGetSampledMip(uniform *textureSampled2DArray,f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampled2DArray, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with TextureCubeArray, Sampler, Float32x4
    TextureGetSampledMip_TextureCubeArray_texture.name = "texture"_c;
    TextureGetSampledMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSampledMip_TextureCubeArray_texture.type.modifiers = TextureGetSampledMip_TextureCubeArray_texture_modifiers;
    TextureGetSampledMip_TextureCubeArray_texture.type.modifierValues = TextureGetSampledMip_TextureCubeArray_texture_modifierValues;
    TextureGetSampledMip_TextureCubeArray_sampler.name = "sampler"_c;
    TextureGetSampledMip_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_TextureCubeArray_sampler.type.modifiers = TextureGetSampledMip_TextureCubeArray_sampler_modifiers;
    TextureGetSampledMip_TextureCubeArray_sampler.type.modifierValues = TextureGetSampledMip_TextureCubeArray_sampler_modifierValues;
    TextureGetSampledMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureGetSampledMip_TextureCubeArray.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    TextureGetSampledMip_TextureCubeArray.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_TextureCubeArray.backendIndex = 2187;
    TextureGetSampledMip_TextureCubeArray.returnType = Type::FullType { Float32x2Type.name };
    TextureGetSampledMip_TextureCubeArray.parameters = TextureGetSampledMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray)->signature = "f32x2 textureGetSampledMip(uniform *textureCubeArray,uniform *sampler,f32x4)"_c;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray)->name = "textureGetSampledMip(uniform *textureCubeArray,uniform *sampler,f32x4)"_c;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : f32x4)"_c;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray)->returnTypeSymbol = &Float32x2Type;

    /// textureGetSampledMip with SampledTextureCubeArray, Float32x4
    SampledTextureGetSampledMip_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureGetSampledMip_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureGetSampledMip_TextureCubeArray_texture.type.modifiers = SampledTextureGetSampledMip_TextureCubeArray_texture_modifiers;
    SampledTextureGetSampledMip_TextureCubeArray_texture.type.modifierValues = SampledTextureGetSampledMip_TextureCubeArray_texture_modifierValues;
    SampledTextureGetSampledMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureGetSampledMip_TextureCubeArray.documentation = "Get the mip level of a texture at a specific coordinate. The return value is a vector where the first value is the mip level to sample, and the second is the offset relative to the base mip for which the sample would occur"_c;
    SampledTextureGetSampledMip_TextureCubeArray.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_TextureCubeArray.backendIndex = 2188;
    SampledTextureGetSampledMip_TextureCubeArray.returnType = Type::FullType { Float32x2Type.name };
    SampledTextureGetSampledMip_TextureCubeArray.parameters = SampledTextureGetSampledMip_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray)->signature = "f32x2 textureGetSampledMip(uniform *textureSampledCubeArray,f32x4)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray)->name = "textureGetSampledMip(uniform *textureSampledCubeArray,f32x4)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray)->nameWithVarNames = "textureGetSampledMip(texture : uniform *textureSampledCubeArray, coordinate : f32x4)"_c;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray)->returnTypeSymbol = &Float32x2Type;

    /// textureLoad with Texture1D, Int32
    TextureLoad_Texture1D_texture.name = "texture"_c;
    TextureLoad_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureLoad_Texture1D_texture.type.modifiers = TextureLoad_Texture1D_texture_modifiers;
    TextureLoad_Texture1D_texture.type.modifierValues = TextureLoad_Texture1D_texture_modifierValues;
    TextureLoad_Texture1D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureLoad_Texture1D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture1D.name = "textureLoad"_c;
    TextureLoad_Texture1D.backendIndex = 2189;
    TextureLoad_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture1D.parameters = TextureLoad_Texture1D_args;
    Symbol::Resolved(&TextureLoad_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureLoad_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoad_Texture1D)->signature = "f32x4 textureLoad(uniform *mutable texture1D,i32)"_c;
    Symbol::Resolved(&TextureLoad_Texture1D)->name = "textureLoad(uniform *mutable texture1D,i32)"_c;
    Symbol::Resolved(&TextureLoad_Texture1D)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture1D, coordinate : i32)"_c;
    Symbol::Resolved(&TextureLoad_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture1D, Int32, Int32
    TextureLoadMip_Texture1D_texture.name = "texture"_c;
    TextureLoadMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureLoadMip_Texture1D_texture.type.modifiers = TextureLoadMip_Texture1D_texture_modifiers;
    TextureLoadMip_Texture1D_texture.type.modifierValues = TextureLoadMip_Texture1D_texture_modifierValues;
    TextureLoadMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1D_mip.name = "mip"_c;
    TextureLoadMip_Texture1D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture1D.name = "textureLoadMip"_c;
    TextureLoadMip_Texture1D.backendIndex = 2190;
    TextureLoadMip_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture1D.parameters = TextureLoadMip_Texture1D_args;
    Symbol::Resolved(&TextureLoadMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureLoadMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->signature = "f32x4 textureLoadMip(uniform *mutable texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->name = "textureLoadMip(uniform *mutable texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture1D, coordinate : i32, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture1D, Int32, Float32x4
    TextureStore_Texture1D_texture.name = "texture"_c;
    TextureStore_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureStore_Texture1D_texture.type.modifiers = TextureStore_Texture1D_texture_modifiers;
    TextureStore_Texture1D_texture.type.modifierValues = TextureStore_Texture1D_texture_modifierValues;
    TextureStore_Texture1D_coordinate.name = "coordinate"_c;
    TextureStore_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureStore_Texture1D_value.name = "value"_c;
    TextureStore_Texture1D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture1D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture1D.name = "textureStore"_c;
    TextureStore_Texture1D.backendIndex = 2191;
    TextureStore_Texture1D.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture1D.parameters = TextureStore_Texture1D_args;
    Symbol::Resolved(&TextureStore_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureStore_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStore_Texture1D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture1D)->signature = "void textureStore(uniform *mutable texture1D,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1D)->name = "textureStore(uniform *mutable texture1D,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1D)->nameWithVarNames = "textureStore(texture : uniform *mutable texture1D, coordinate : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1D)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture1D, Int32, Int32, Float32x4
    TextureStoreMip_Texture1D_texture.name = "texture"_c;
    TextureStoreMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureStoreMip_Texture1D_texture.type.modifiers = TextureStoreMip_Texture1D_texture_modifiers;
    TextureStoreMip_Texture1D_texture.type.modifierValues = TextureStoreMip_Texture1D_texture_modifierValues;
    TextureStoreMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1D_mip.name = "mip"_c;
    TextureStoreMip_Texture1D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1D_value.name = "value"_c;
    TextureStoreMip_Texture1D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture1D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture1D.name = "textureStoreMip"_c;
    TextureStoreMip_Texture1D.backendIndex = 2192;
    TextureStoreMip_Texture1D.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture1D.parameters = TextureStoreMip_Texture1D_args;
    Symbol::Resolved(&TextureStoreMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureStoreMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->signature = "void textureStoreMip(uniform *mutable texture1D,i32,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->name = "textureStoreMip(uniform *mutable texture1D,i32,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture1D, coordinate : i32, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2D, Int32x2
    TextureLoad_Texture2D_texture.name = "texture"_c;
    TextureLoad_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureLoad_Texture2D_texture.type.modifiers = TextureLoad_Texture2D_texture_modifiers;
    TextureLoad_Texture2D_texture.type.modifierValues = TextureLoad_Texture2D_texture_modifierValues;
    TextureLoad_Texture2D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture2D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture2D.name = "textureLoad"_c;
    TextureLoad_Texture2D.backendIndex = 2193;
    TextureLoad_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture2D.parameters = TextureLoad_Texture2D_args;
    Symbol::Resolved(&TextureLoad_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureLoad_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoad_Texture2D)->signature = "f32x4 textureLoad(uniform *mutable texture2D,i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2D)->name = "textureLoad(uniform *mutable texture2D,i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2D)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture2D, coordinate : i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture2D, Int32x2, Int32
    TextureLoadMip_Texture2D_texture.name = "texture"_c;
    TextureLoadMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureLoadMip_Texture2D_texture.type.modifiers = TextureLoadMip_Texture2D_texture_modifiers;
    TextureLoadMip_Texture2D_texture.type.modifierValues = TextureLoadMip_Texture2D_texture_modifierValues;
    TextureLoadMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture2D_mip.name = "mip"_c;
    TextureLoadMip_Texture2D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture2D.name = "textureLoadMip"_c;
    TextureLoadMip_Texture2D.backendIndex = 2194;
    TextureLoadMip_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture2D.parameters = TextureLoadMip_Texture2D_args;
    Symbol::Resolved(&TextureLoadMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureLoadMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoadMip_Texture2D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->signature = "f32x4 textureLoadMip(uniform *mutable texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->name = "textureLoadMip(uniform *mutable texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture2D, coordinate : i32x2, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture2D, Int32x2, Float32x4
    TextureStore_Texture2D_texture.name = "texture"_c;
    TextureStore_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureStore_Texture2D_texture.type.modifiers = TextureStore_Texture2D_texture_modifiers;
    TextureStore_Texture2D_texture.type.modifierValues = TextureStore_Texture2D_texture_modifierValues;
    TextureStore_Texture2D_coordinate.name = "coordinate"_c;
    TextureStore_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture2D_value.name = "value"_c;
    TextureStore_Texture2D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture2D.name = "textureStore"_c;
    TextureStore_Texture2D.backendIndex = 2195;
    TextureStore_Texture2D.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2D.parameters = TextureStore_Texture2D_args;
    Symbol::Resolved(&TextureStore_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureStore_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStore_Texture2D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2D)->signature = "void textureStore(uniform *mutable texture2D,i32x2,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2D)->name = "textureStore(uniform *mutable texture2D,i32x2,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2D)->nameWithVarNames = "textureStore(texture : uniform *mutable texture2D, coordinate : i32x2, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2D)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2D, Int32x2, Int32, Float32x4
    TextureStoreMip_Texture2D_texture.name = "texture"_c;
    TextureStoreMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureStoreMip_Texture2D_texture.type.modifiers = TextureStoreMip_Texture2D_texture_modifiers;
    TextureStoreMip_Texture2D_texture.type.modifierValues = TextureStoreMip_Texture2D_texture_modifierValues;
    TextureStoreMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture2D_mip.name = "mip"_c;
    TextureStoreMip_Texture2D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2D_value.name = "value"_c;
    TextureStoreMip_Texture2D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture2D.name = "textureStoreMip"_c;
    TextureStoreMip_Texture2D.backendIndex = 2196;
    TextureStoreMip_Texture2D.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2D.parameters = TextureStoreMip_Texture2D_args;
    Symbol::Resolved(&TextureStoreMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureStoreMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->signature = "void textureStoreMip(uniform *mutable texture2D,i32x2,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->name = "textureStoreMip(uniform *mutable texture2D,i32x2,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture2D, coordinate : i32x2, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture3D, Int32x3
    TextureLoad_Texture3D_texture.name = "texture"_c;
    TextureLoad_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureLoad_Texture3D_texture.type.modifiers = TextureLoad_Texture3D_texture_modifiers;
    TextureLoad_Texture3D_texture.type.modifierValues = TextureLoad_Texture3D_texture_modifierValues;
    TextureLoad_Texture3D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture3D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture3D.name = "textureLoad"_c;
    TextureLoad_Texture3D.backendIndex = 2197;
    TextureLoad_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture3D.parameters = TextureLoad_Texture3D_args;
    Symbol::Resolved(&TextureLoad_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureLoad_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_Texture3D)->signature = "f32x4 textureLoad(uniform *mutable texture3D,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture3D)->name = "textureLoad(uniform *mutable texture3D,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture3D)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture3D, coordinate : i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture3D, Int32x3, Int32
    TextureLoadMip_Texture3D_texture.name = "texture"_c;
    TextureLoadMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureLoadMip_Texture3D_texture.type.modifiers = TextureLoadMip_Texture3D_texture_modifiers;
    TextureLoadMip_Texture3D_texture.type.modifierValues = TextureLoadMip_Texture3D_texture_modifierValues;
    TextureLoadMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture3D_mip.name = "mip"_c;
    TextureLoadMip_Texture3D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture3D.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture3D.name = "textureLoadMip"_c;
    TextureLoadMip_Texture3D.backendIndex = 2198;
    TextureLoadMip_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture3D.parameters = TextureLoadMip_Texture3D_args;
    Symbol::Resolved(&TextureLoadMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureLoadMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_Texture3D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->signature = "f32x4 textureLoadMip(uniform *mutable texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->name = "textureLoadMip(uniform *mutable texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture3D, coordinate : i32x3, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture3D, Int32x3, Float32x4
    TextureStore_Texture3D_texture.name = "texture"_c;
    TextureStore_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureStore_Texture3D_texture.type.modifiers = TextureStore_Texture3D_texture_modifiers;
    TextureStore_Texture3D_texture.type.modifierValues = TextureStore_Texture3D_texture_modifierValues;
    TextureStore_Texture3D_coordinate.name = "coordinate"_c;
    TextureStore_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture3D_value.name = "value"_c;
    TextureStore_Texture3D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture3D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture3D.name = "textureStore"_c;
    TextureStore_Texture3D.backendIndex = 2199;
    TextureStore_Texture3D.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture3D.parameters = TextureStore_Texture3D_args;
    Symbol::Resolved(&TextureStore_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureStore_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_Texture3D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture3D)->signature = "void textureStore(uniform *mutable texture3D,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture3D)->name = "textureStore(uniform *mutable texture3D,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture3D)->nameWithVarNames = "textureStore(texture : uniform *mutable texture3D, coordinate : i32x3, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture3D)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture3D, Int32x3, Int32, Float32x4
    TextureStoreMip_Texture3D_texture.name = "texture"_c;
    TextureStoreMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureStoreMip_Texture3D_texture.type.modifiers = TextureStoreMip_Texture3D_texture_modifiers;
    TextureStoreMip_Texture3D_texture.type.modifierValues = TextureStoreMip_Texture3D_texture_modifierValues;
    TextureStoreMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture3D_mip.name = "mip"_c;
    TextureStoreMip_Texture3D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture3D_value.name = "value"_c;
    TextureStoreMip_Texture3D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture3D.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture3D.name = "textureStoreMip"_c;
    TextureStoreMip_Texture3D.backendIndex = 2200;
    TextureStoreMip_Texture3D.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture3D.parameters = TextureStoreMip_Texture3D_args;
    Symbol::Resolved(&TextureStoreMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureStoreMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->signature = "void textureStoreMip(uniform *mutable texture3D,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->name = "textureStoreMip(uniform *mutable texture3D,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture3D, coordinate : i32x3, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->returnTypeSymbol = &VoidType;

    /// textureLoad with TextureCube, Int32x3
    TextureLoad_TextureCube_texture.name = "texture"_c;
    TextureLoad_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureLoad_TextureCube_texture.type.modifiers = TextureLoad_TextureCube_texture_modifiers;
    TextureLoad_TextureCube_texture.type.modifierValues = TextureLoad_TextureCube_texture_modifierValues;
    TextureLoad_TextureCube_coordinate.name = "coordinate"_c;
    TextureLoad_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_TextureCube.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_TextureCube.name = "textureLoad"_c;
    TextureLoad_TextureCube.backendIndex = 2201;
    TextureLoad_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_TextureCube.parameters = TextureLoad_TextureCube_args;
    Symbol::Resolved(&TextureLoad_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureLoad_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_TextureCube)->signature = "f32x4 textureLoad(uniform *mutable textureCube,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_TextureCube)->name = "textureLoad(uniform *mutable textureCube,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_TextureCube)->nameWithVarNames = "textureLoad(texture : uniform *mutable textureCube, coordinate : i32x3)"_c;
    Symbol::Resolved(&TextureLoad_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with TextureCube, Int32x3, Int32
    TextureLoadMip_TextureCube_texture.name = "texture"_c;
    TextureLoadMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureLoadMip_TextureCube_texture.type.modifiers = TextureLoadMip_TextureCube_texture_modifiers;
    TextureLoadMip_TextureCube_texture.type.modifierValues = TextureLoadMip_TextureCube_texture_modifierValues;
    TextureLoadMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureLoadMip_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_TextureCube_mip.name = "mip"_c;
    TextureLoadMip_TextureCube_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_TextureCube.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_TextureCube.name = "textureLoadMip"_c;
    TextureLoadMip_TextureCube.backendIndex = 2202;
    TextureLoadMip_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_TextureCube.parameters = TextureLoadMip_TextureCube_args;
    Symbol::Resolved(&TextureLoadMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureLoadMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_TextureCube_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->signature = "f32x4 textureLoadMip(uniform *mutable textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->name = "textureLoadMip(uniform *mutable textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable textureCube, coordinate : i32x3, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with TextureCube, Int32x3, Float32x4
    TextureStore_TextureCube_texture.name = "texture"_c;
    TextureStore_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureStore_TextureCube_texture.type.modifiers = TextureStore_TextureCube_texture_modifiers;
    TextureStore_TextureCube_texture.type.modifierValues = TextureStore_TextureCube_texture_modifierValues;
    TextureStore_TextureCube_coordinate.name = "coordinate"_c;
    TextureStore_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_TextureCube_value.name = "value"_c;
    TextureStore_TextureCube_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_TextureCube.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_TextureCube.name = "textureStore"_c;
    TextureStore_TextureCube.backendIndex = 2203;
    TextureStore_TextureCube.returnType = Type::FullType { VoidType.name };
    TextureStore_TextureCube.parameters = TextureStore_TextureCube_args;
    Symbol::Resolved(&TextureStore_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureStore_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_TextureCube_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_TextureCube)->signature = "void textureStore(uniform *mutable textureCube,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCube)->name = "textureStore(uniform *mutable textureCube,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCube)->nameWithVarNames = "textureStore(texture : uniform *mutable textureCube, coordinate : i32x3, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCube)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with TextureCube, Int32x3, Int32, Float32x4
    TextureStoreMip_TextureCube_texture.name = "texture"_c;
    TextureStoreMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureStoreMip_TextureCube_texture.type.modifiers = TextureStoreMip_TextureCube_texture_modifiers;
    TextureStoreMip_TextureCube_texture.type.modifierValues = TextureStoreMip_TextureCube_texture_modifierValues;
    TextureStoreMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureStoreMip_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_TextureCube_mip.name = "mip"_c;
    TextureStoreMip_TextureCube_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_TextureCube_value.name = "value"_c;
    TextureStoreMip_TextureCube_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_TextureCube.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_TextureCube.name = "textureStoreMip"_c;
    TextureStoreMip_TextureCube.backendIndex = 2204;
    TextureStoreMip_TextureCube.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_TextureCube.parameters = TextureStoreMip_TextureCube_args;
    Symbol::Resolved(&TextureStoreMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureStoreMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->signature = "void textureStoreMip(uniform *mutable textureCube,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->name = "textureStoreMip(uniform *mutable textureCube,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable textureCube, coordinate : i32x3, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture1DArray, Int32x2
    TextureLoad_Texture1DArray_texture.name = "texture"_c;
    TextureLoad_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureLoad_Texture1DArray_texture.type.modifiers = TextureLoad_Texture1DArray_texture_modifiers;
    TextureLoad_Texture1DArray_texture.type.modifierValues = TextureLoad_Texture1DArray_texture_modifierValues;
    TextureLoad_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture1DArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture1DArray.name = "textureLoad"_c;
    TextureLoad_Texture1DArray.backendIndex = 2205;
    TextureLoad_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture1DArray.parameters = TextureLoad_Texture1DArray_args;
    Symbol::Resolved(&TextureLoad_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureLoad_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->signature = "f32x4 textureLoad(uniform *mutable texture1DArray,i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->name = "textureLoad(uniform *mutable texture1DArray,i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture1DArray, coordinate : i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture1DArray, Int32x2, Int32
    TextureLoadMip_Texture1DArray_texture.name = "texture"_c;
    TextureLoadMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureLoadMip_Texture1DArray_texture.type.modifiers = TextureLoadMip_Texture1DArray_texture_modifiers;
    TextureLoadMip_Texture1DArray_texture.type.modifierValues = TextureLoadMip_Texture1DArray_texture_modifierValues;
    TextureLoadMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture1DArray_mip.name = "mip"_c;
    TextureLoadMip_Texture1DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1DArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture1DArray.name = "textureLoadMip"_c;
    TextureLoadMip_Texture1DArray.backendIndex = 2206;
    TextureLoadMip_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture1DArray.parameters = TextureLoadMip_Texture1DArray_args;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->signature = "f32x4 textureLoadMip(uniform *mutable texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->name = "textureLoadMip(uniform *mutable texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture1DArray, coordinate : i32x2, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture1DArray, Int32x2, Float32x4
    TextureStore_Texture1DArray_texture.name = "texture"_c;
    TextureStore_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureStore_Texture1DArray_texture.type.modifiers = TextureStore_Texture1DArray_texture_modifiers;
    TextureStore_Texture1DArray_texture.type.modifierValues = TextureStore_Texture1DArray_texture_modifierValues;
    TextureStore_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture1DArray_value.name = "value"_c;
    TextureStore_Texture1DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture1DArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture1DArray.name = "textureStore"_c;
    TextureStore_Texture1DArray.backendIndex = 2207;
    TextureStore_Texture1DArray.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture1DArray.parameters = TextureStore_Texture1DArray_args;
    Symbol::Resolved(&TextureStore_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureStore_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStore_Texture1DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture1DArray)->signature = "void textureStore(uniform *mutable texture1DArray,i32x2,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1DArray)->name = "textureStore(uniform *mutable texture1DArray,i32x2,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1DArray)->nameWithVarNames = "textureStore(texture : uniform *mutable texture1DArray, coordinate : i32x2, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture1DArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture1DArray, Int32x2, Int32, Float32x4
    TextureStoreMip_Texture1DArray_texture.name = "texture"_c;
    TextureStoreMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureStoreMip_Texture1DArray_texture.type.modifiers = TextureStoreMip_Texture1DArray_texture_modifiers;
    TextureStoreMip_Texture1DArray_texture.type.modifierValues = TextureStoreMip_Texture1DArray_texture_modifierValues;
    TextureStoreMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture1DArray_mip.name = "mip"_c;
    TextureStoreMip_Texture1DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1DArray_value.name = "value"_c;
    TextureStoreMip_Texture1DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture1DArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture1DArray.name = "textureStoreMip"_c;
    TextureStoreMip_Texture1DArray.backendIndex = 2208;
    TextureStoreMip_Texture1DArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture1DArray.parameters = TextureStoreMip_Texture1DArray_args;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->signature = "void textureStoreMip(uniform *mutable texture1DArray,i32x2,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->name = "textureStoreMip(uniform *mutable texture1DArray,i32x2,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture1DArray, coordinate : i32x2, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2DArray, Int32x3
    TextureLoad_Texture2DArray_texture.name = "texture"_c;
    TextureLoad_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureLoad_Texture2DArray_texture.type.modifiers = TextureLoad_Texture2DArray_texture_modifiers;
    TextureLoad_Texture2DArray_texture.type.modifierValues = TextureLoad_Texture2DArray_texture_modifierValues;
    TextureLoad_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture2DArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture2DArray.name = "textureLoad"_c;
    TextureLoad_Texture2DArray.backendIndex = 2209;
    TextureLoad_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture2DArray.parameters = TextureLoad_Texture2DArray_args;
    Symbol::Resolved(&TextureLoad_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureLoad_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->signature = "f32x4 textureLoad(uniform *mutable texture2DArray,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->name = "textureLoad(uniform *mutable texture2DArray,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture2DArray, coordinate : i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture2DArray, Int32x3, Int32
    TextureLoadMip_Texture2DArray_texture.name = "texture"_c;
    TextureLoadMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureLoadMip_Texture2DArray_texture.type.modifiers = TextureLoadMip_Texture2DArray_texture_modifiers;
    TextureLoadMip_Texture2DArray_texture.type.modifierValues = TextureLoadMip_Texture2DArray_texture_modifierValues;
    TextureLoadMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture2DArray_mip.name = "mip"_c;
    TextureLoadMip_Texture2DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture2DArray.name = "textureLoadMip"_c;
    TextureLoadMip_Texture2DArray.backendIndex = 2210;
    TextureLoadMip_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture2DArray.parameters = TextureLoadMip_Texture2DArray_args;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->signature = "f32x4 textureLoadMip(uniform *mutable texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->name = "textureLoadMip(uniform *mutable texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture2DArray, coordinate : i32x3, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture2DArray, Int32x3, Float32x4
    TextureStore_Texture2DArray_texture.name = "texture"_c;
    TextureStore_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureStore_Texture2DArray_texture.type.modifiers = TextureStore_Texture2DArray_texture_modifiers;
    TextureStore_Texture2DArray_texture.type.modifierValues = TextureStore_Texture2DArray_texture_modifierValues;
    TextureStore_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture2DArray_value.name = "value"_c;
    TextureStore_Texture2DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture2DArray.name = "textureStore"_c;
    TextureStore_Texture2DArray.backendIndex = 2211;
    TextureStore_Texture2DArray.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2DArray.parameters = TextureStore_Texture2DArray_args;
    Symbol::Resolved(&TextureStore_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureStore_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_Texture2DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DArray)->signature = "void textureStore(uniform *mutable texture2DArray,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DArray)->name = "textureStore(uniform *mutable texture2DArray,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DArray)->nameWithVarNames = "textureStore(texture : uniform *mutable texture2DArray, coordinate : i32x3, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2DArray, Int32x3, Int32, Float32x4
    TextureStoreMip_Texture2DArray_texture.name = "texture"_c;
    TextureStoreMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureStoreMip_Texture2DArray_texture.type.modifiers = TextureStoreMip_Texture2DArray_texture_modifiers;
    TextureStoreMip_Texture2DArray_texture.type.modifierValues = TextureStoreMip_Texture2DArray_texture_modifierValues;
    TextureStoreMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture2DArray_mip.name = "mip"_c;
    TextureStoreMip_Texture2DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DArray_value.name = "value"_c;
    TextureStoreMip_Texture2DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture2DArray.name = "textureStoreMip"_c;
    TextureStoreMip_Texture2DArray.backendIndex = 2212;
    TextureStoreMip_Texture2DArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2DArray.parameters = TextureStoreMip_Texture2DArray_args;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->signature = "void textureStoreMip(uniform *mutable texture2DArray,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->name = "textureStoreMip(uniform *mutable texture2DArray,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture2DArray, coordinate : i32x3, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->returnTypeSymbol = &VoidType;

    /// textureLoad with TextureCubeArray, Int32x4
    TextureLoad_TextureCubeArray_texture.name = "texture"_c;
    TextureLoad_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureLoad_TextureCubeArray_texture.type.modifiers = TextureLoad_TextureCubeArray_texture_modifiers;
    TextureLoad_TextureCubeArray_texture.type.modifierValues = TextureLoad_TextureCubeArray_texture_modifierValues;
    TextureLoad_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureLoad_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureLoad_TextureCubeArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_TextureCubeArray.name = "textureLoad"_c;
    TextureLoad_TextureCubeArray.backendIndex = 2213;
    TextureLoad_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_TextureCubeArray.parameters = TextureLoad_TextureCubeArray_args;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->signature = "f32x4 textureLoad(uniform *mutable textureCubeArray,i32x4)"_c;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->name = "textureLoad(uniform *mutable textureCubeArray,i32x4)"_c;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->nameWithVarNames = "textureLoad(texture : uniform *mutable textureCubeArray, coordinate : i32x4)"_c;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with TextureCubeArray, Int32x4, Int32
    TextureLoadMip_TextureCubeArray_texture.name = "texture"_c;
    TextureLoadMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureLoadMip_TextureCubeArray_texture.type.modifiers = TextureLoadMip_TextureCubeArray_texture_modifiers;
    TextureLoadMip_TextureCubeArray_texture.type.modifierValues = TextureLoadMip_TextureCubeArray_texture_modifierValues;
    TextureLoadMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureLoadMip_TextureCubeArray_mip.name = "mip"_c;
    TextureLoadMip_TextureCubeArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_TextureCubeArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_TextureCubeArray.name = "textureLoadMip"_c;
    TextureLoadMip_TextureCubeArray.backendIndex = 2214;
    TextureLoadMip_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_TextureCubeArray.parameters = TextureLoadMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->signature = "f32x4 textureLoadMip(uniform *mutable textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->name = "textureLoadMip(uniform *mutable textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable textureCubeArray, coordinate : i32x4, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with TextureCubeArray, Int32x4, Float32x4
    TextureStore_TextureCubeArray_texture.name = "texture"_c;
    TextureStore_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureStore_TextureCubeArray_texture.type.modifiers = TextureStore_TextureCubeArray_texture_modifiers;
    TextureStore_TextureCubeArray_texture.type.modifierValues = TextureStore_TextureCubeArray_texture_modifierValues;
    TextureStore_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureStore_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureStore_TextureCubeArray_value.name = "value"_c;
    TextureStore_TextureCubeArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_TextureCubeArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_TextureCubeArray.name = "textureStore"_c;
    TextureStore_TextureCubeArray.backendIndex = 2215;
    TextureStore_TextureCubeArray.returnType = Type::FullType { VoidType.name };
    TextureStore_TextureCubeArray.parameters = TextureStore_TextureCubeArray_args;
    Symbol::Resolved(&TextureStore_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureStore_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureStore_TextureCubeArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->signature = "void textureStore(uniform *mutable textureCubeArray,i32x4,f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->name = "textureStore(uniform *mutable textureCubeArray,i32x4,f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->nameWithVarNames = "textureStore(texture : uniform *mutable textureCubeArray, coordinate : i32x4, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with TextureCubeArray, Int32x4, Int32, Float32x4
    TextureStoreMip_TextureCubeArray_texture.name = "texture"_c;
    TextureStoreMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureStoreMip_TextureCubeArray_texture.type.modifiers = TextureStoreMip_TextureCubeArray_texture_modifiers;
    TextureStoreMip_TextureCubeArray_texture.type.modifierValues = TextureStoreMip_TextureCubeArray_texture_modifierValues;
    TextureStoreMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureStoreMip_TextureCubeArray_mip.name = "mip"_c;
    TextureStoreMip_TextureCubeArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_TextureCubeArray_value.name = "value"_c;
    TextureStoreMip_TextureCubeArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_TextureCubeArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_TextureCubeArray.name = "textureStoreMip"_c;
    TextureStoreMip_TextureCubeArray.backendIndex = 2216;
    TextureStoreMip_TextureCubeArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_TextureCubeArray.parameters = TextureStoreMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->signature = "void textureStoreMip(uniform *mutable textureCubeArray,i32x4,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->name = "textureStoreMip(uniform *mutable textureCubeArray,i32x4,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable textureCubeArray, coordinate : i32x4, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2DMS, Int32x2
    TextureLoad_Texture2DMS_texture.name = "texture"_c;
    TextureLoad_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureLoad_Texture2DMS_texture.type.modifiers = TextureLoad_Texture2DMS_texture_modifiers;
    TextureLoad_Texture2DMS_texture.type.modifierValues = TextureLoad_Texture2DMS_texture_modifierValues;
    TextureLoad_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture2DMS.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture2DMS.name = "textureLoad"_c;
    TextureLoad_Texture2DMS.backendIndex = 2217;
    TextureLoad_Texture2DMS.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture2DMS.parameters = TextureLoad_Texture2DMS_args;
    Symbol::Resolved(&TextureLoad_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureLoad_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->signature = "f32x4 textureLoad(uniform *mutable texture2DMS,i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->name = "textureLoad(uniform *mutable texture2DMS,i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture2DMS, coordinate : i32x2)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture2DMS, Int32x2, Int32
    TextureLoadMip_Texture2DMS_texture.name = "texture"_c;
    TextureLoadMip_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureLoadMip_Texture2DMS_texture.type.modifiers = TextureLoadMip_Texture2DMS_texture_modifiers;
    TextureLoadMip_Texture2DMS_texture.type.modifierValues = TextureLoadMip_Texture2DMS_texture_modifierValues;
    TextureLoadMip_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture2DMS_mip.name = "mip"_c;
    TextureLoadMip_Texture2DMS_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DMS.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture2DMS.name = "textureLoadMip"_c;
    TextureLoadMip_Texture2DMS.backendIndex = 2218;
    TextureLoadMip_Texture2DMS.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture2DMS.parameters = TextureLoadMip_Texture2DMS_args;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->signature = "f32x4 textureLoadMip(uniform *mutable texture2DMS,i32x2,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->name = "textureLoadMip(uniform *mutable texture2DMS,i32x2,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture2DMS, coordinate : i32x2, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture2DMS, Int32x2, Float32x4
    TextureStore_Texture2DMS_texture.name = "texture"_c;
    TextureStore_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureStore_Texture2DMS_texture.type.modifiers = TextureStore_Texture2DMS_texture_modifiers;
    TextureStore_Texture2DMS_texture.type.modifierValues = TextureStore_Texture2DMS_texture_modifierValues;
    TextureStore_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture2DMS_value.name = "value"_c;
    TextureStore_Texture2DMS_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DMS.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture2DMS.name = "textureStore"_c;
    TextureStore_Texture2DMS.backendIndex = 2219;
    TextureStore_Texture2DMS.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2DMS.parameters = TextureStore_Texture2DMS_args;
    Symbol::Resolved(&TextureStore_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureStore_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStore_Texture2DMS_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DMS)->signature = "void textureStore(uniform *mutable texture2DMS,i32x2,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMS)->name = "textureStore(uniform *mutable texture2DMS,i32x2,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMS)->nameWithVarNames = "textureStore(texture : uniform *mutable texture2DMS, coordinate : i32x2, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMS)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2DMS, Int32x2, Int32, Float32x4
    TextureStoreMip_Texture2DMS_texture.name = "texture"_c;
    TextureStoreMip_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureStoreMip_Texture2DMS_texture.type.modifiers = TextureStoreMip_Texture2DMS_texture_modifiers;
    TextureStoreMip_Texture2DMS_texture.type.modifierValues = TextureStoreMip_Texture2DMS_texture_modifierValues;
    TextureStoreMip_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture2DMS_mip.name = "mip"_c;
    TextureStoreMip_Texture2DMS_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DMS_value.name = "value"_c;
    TextureStoreMip_Texture2DMS_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DMS.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture2DMS.name = "textureStoreMip"_c;
    TextureStoreMip_Texture2DMS.backendIndex = 2220;
    TextureStoreMip_Texture2DMS.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2DMS.parameters = TextureStoreMip_Texture2DMS_args;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->signature = "void textureStoreMip(uniform *mutable texture2DMS,i32x2,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->name = "textureStoreMip(uniform *mutable texture2DMS,i32x2,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture2DMS, coordinate : i32x2, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2DMSArray, Int32x3
    TextureLoad_Texture2DMSArray_texture.name = "texture"_c;
    TextureLoad_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureLoad_Texture2DMSArray_texture.type.modifiers = TextureLoad_Texture2DMSArray_texture_modifiers;
    TextureLoad_Texture2DMSArray_texture.type.modifierValues = TextureLoad_Texture2DMSArray_texture_modifierValues;
    TextureLoad_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture2DMSArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureLoad_Texture2DMSArray.name = "textureLoad"_c;
    TextureLoad_Texture2DMSArray.backendIndex = 2221;
    TextureLoad_Texture2DMSArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoad_Texture2DMSArray.parameters = TextureLoad_Texture2DMSArray_args;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->signature = "f32x4 textureLoad(uniform *mutable texture2DMSArray,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->name = "textureLoad(uniform *mutable texture2DMSArray,i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->nameWithVarNames = "textureLoad(texture : uniform *mutable texture2DMSArray, coordinate : i32x3)"_c;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->returnTypeSymbol = &Float32x4Type;

    /// textureLoadMip with Texture2DMSArray, Int32x3, Int32
    TextureLoadMip_Texture2DMSArray_texture.name = "texture"_c;
    TextureLoadMip_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureLoadMip_Texture2DMSArray_texture.type.modifiers = TextureLoadMip_Texture2DMSArray_texture_modifiers;
    TextureLoadMip_Texture2DMSArray_texture.type.modifierValues = TextureLoadMip_Texture2DMSArray_texture_modifierValues;
    TextureLoadMip_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture2DMSArray_mip.name = "mip"_c;
    TextureLoadMip_Texture2DMSArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DMSArray.documentation = "Load a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureLoadMip_Texture2DMSArray.name = "textureLoadMip"_c;
    TextureLoadMip_Texture2DMSArray.backendIndex = 2222;
    TextureLoadMip_Texture2DMSArray.returnType = Type::FullType { Float32x4Type.name };
    TextureLoadMip_Texture2DMSArray.parameters = TextureLoadMip_Texture2DMSArray_args;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->signature = "f32x4 textureLoadMip(uniform *mutable texture2DMSArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->name = "textureLoadMip(uniform *mutable texture2DMSArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->nameWithVarNames = "textureLoadMip(texture : uniform *mutable texture2DMSArray, coordinate : i32x3, mip : i32)"_c;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->returnTypeSymbol = &Float32x4Type;

    /// textureStore with Texture2DMSArray, Int32x3, Float32x4
    TextureStore_Texture2DMSArray_texture.name = "texture"_c;
    TextureStore_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureStore_Texture2DMSArray_texture.type.modifiers = TextureStore_Texture2DMSArray_texture_modifiers;
    TextureStore_Texture2DMSArray_texture.type.modifierValues = TextureStore_Texture2DMSArray_texture_modifierValues;
    TextureStore_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture2DMSArray_value.name = "value"_c;
    TextureStore_Texture2DMSArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DMSArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate"_c;
    TextureStore_Texture2DMSArray.name = "textureStore"_c;
    TextureStore_Texture2DMSArray.backendIndex = 2223;
    TextureStore_Texture2DMSArray.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2DMSArray.parameters = TextureStore_Texture2DMSArray_args;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->signature = "void textureStore(uniform *mutable texture2DMSArray,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->name = "textureStore(uniform *mutable texture2DMSArray,i32x3,f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->nameWithVarNames = "textureStore(texture : uniform *mutable texture2DMSArray, coordinate : i32x3, value : f32x4)"_c;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2DMSArray, Int32x3, Int32, Float32x4
    TextureStoreMip_Texture2DMSArray_texture.name = "texture"_c;
    TextureStoreMip_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureStoreMip_Texture2DMSArray_texture.type.modifiers = TextureStoreMip_Texture2DMSArray_texture_modifiers;
    TextureStoreMip_Texture2DMSArray_texture.type.modifierValues = TextureStoreMip_Texture2DMSArray_texture_modifierValues;
    TextureStoreMip_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture2DMSArray_mip.name = "mip"_c;
    TextureStoreMip_Texture2DMSArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DMSArray_value.name = "value"_c;
    TextureStoreMip_Texture2DMSArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DMSArray.documentation = "Store a single texel without using a sampler value at an absolute non-normalized coordinate at a specific mip level"_c;
    TextureStoreMip_Texture2DMSArray.name = "textureStoreMip"_c;
    TextureStoreMip_Texture2DMSArray.backendIndex = 2224;
    TextureStoreMip_Texture2DMSArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2DMSArray.parameters = TextureStoreMip_Texture2DMSArray_args;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->signature = "void textureStoreMip(uniform *mutable texture2DMSArray,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->name = "textureStoreMip(uniform *mutable texture2DMSArray,i32x3,i32,f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->nameWithVarNames = "textureStoreMip(texture : uniform *mutable texture2DMSArray, coordinate : i32x3, mip : i32, value : f32x4)"_c;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->returnTypeSymbol = &VoidType;

    /// textureFetch with Texture1D, Int32, UInt32
    TextureFetch_Texture1D_texture.name = "texture"_c;
    TextureFetch_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureFetch_Texture1D_texture.type.modifiers = TextureFetch_Texture1D_texture_modifiers;
    TextureFetch_Texture1D_texture.type.modifierValues = TextureFetch_Texture1D_texture_modifierValues;
    TextureFetch_Texture1D_coordinate.name = "coordinate"_c;
    TextureFetch_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureFetch_Texture1D_lod.name = "lod"_c;
    TextureFetch_Texture1D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture1D.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture1D.name = "textureFetch"_c;
    TextureFetch_Texture1D.backendIndex = 2225;
    TextureFetch_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture1D.parameters = TextureFetch_Texture1D_args;
    Symbol::Resolved(&TextureFetch_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureFetch_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureFetch_Texture1D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture1D)->signature = "f32x4 textureFetch(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1D)->name = "textureFetch(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1D)->nameWithVarNames = "textureFetch(texture : uniform *texture1D, coordinate : i32, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture1D, Int32, UInt32, UInt32
    TextureFetchSample_Texture1D_texture.name = "texture"_c;
    TextureFetchSample_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureFetchSample_Texture1D_texture.type.modifiers = TextureFetchSample_Texture1D_texture_modifiers;
    TextureFetchSample_Texture1D_texture.type.modifierValues = TextureFetchSample_Texture1D_texture_modifierValues;
    TextureFetchSample_Texture1D_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureFetchSample_Texture1D_lod.name = "lod"_c;
    TextureFetchSample_Texture1D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1D_sample.name = "sample"_c;
    TextureFetchSample_Texture1D_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1D.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture1D.name = "textureFetchSample"_c;
    TextureFetchSample_Texture1D.backendIndex = 2226;
    TextureFetchSample_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture1D.parameters = TextureFetchSample_Texture1D_args;
    Symbol::Resolved(&TextureFetchSample_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureFetchSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1D_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->signature = "f32x4 textureFetchSample(uniform *texture1D,i32,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->name = "textureFetchSample(uniform *texture1D,i32,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->nameWithVarNames = "textureFetchSample(texture : uniform *texture1D, coordinate : i32, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture2D, Int32x2, UInt32
    TextureFetch_Texture2D_texture.name = "texture"_c;
    TextureFetch_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureFetch_Texture2D_texture.type.modifiers = TextureFetch_Texture2D_texture_modifiers;
    TextureFetch_Texture2D_texture.type.modifierValues = TextureFetch_Texture2D_texture_modifierValues;
    TextureFetch_Texture2D_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetch_Texture2D_lod.name = "lod"_c;
    TextureFetch_Texture2D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2D.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture2D.name = "textureFetch"_c;
    TextureFetch_Texture2D.backendIndex = 2227;
    TextureFetch_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture2D.parameters = TextureFetch_Texture2D_args;
    Symbol::Resolved(&TextureFetch_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureFetch_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetch_Texture2D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2D)->signature = "f32x4 textureFetch(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2D)->name = "textureFetch(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2D)->nameWithVarNames = "textureFetch(texture : uniform *texture2D, coordinate : i32x2, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture2D, Int32x2, UInt32, UInt32
    TextureFetchSample_Texture2D_texture.name = "texture"_c;
    TextureFetchSample_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureFetchSample_Texture2D_texture.type.modifiers = TextureFetchSample_Texture2D_texture_modifiers;
    TextureFetchSample_Texture2D_texture.type.modifierValues = TextureFetchSample_Texture2D_texture_modifierValues;
    TextureFetchSample_Texture2D_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetchSample_Texture2D_lod.name = "lod"_c;
    TextureFetchSample_Texture2D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2D_sample.name = "sample"_c;
    TextureFetchSample_Texture2D_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2D.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture2D.name = "textureFetchSample"_c;
    TextureFetchSample_Texture2D.backendIndex = 2228;
    TextureFetchSample_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture2D.parameters = TextureFetchSample_Texture2D_args;
    Symbol::Resolved(&TextureFetchSample_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureFetchSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetchSample_Texture2D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2D_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->signature = "f32x4 textureFetchSample(uniform *texture2D,i32x2,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->name = "textureFetchSample(uniform *texture2D,i32x2,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->nameWithVarNames = "textureFetchSample(texture : uniform *texture2D, coordinate : i32x2, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture3D, Int32x3, UInt32
    TextureFetch_Texture3D_texture.name = "texture"_c;
    TextureFetch_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureFetch_Texture3D_texture.type.modifiers = TextureFetch_Texture3D_texture_modifiers;
    TextureFetch_Texture3D_texture.type.modifierValues = TextureFetch_Texture3D_texture_modifierValues;
    TextureFetch_Texture3D_coordinate.name = "coordinate"_c;
    TextureFetch_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetch_Texture3D_lod.name = "lod"_c;
    TextureFetch_Texture3D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture3D.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture3D.name = "textureFetch"_c;
    TextureFetch_Texture3D.backendIndex = 2229;
    TextureFetch_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture3D.parameters = TextureFetch_Texture3D_args;
    Symbol::Resolved(&TextureFetch_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureFetch_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetch_Texture3D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture3D)->signature = "f32x4 textureFetch(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture3D)->name = "textureFetch(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture3D)->nameWithVarNames = "textureFetch(texture : uniform *texture3D, coordinate : i32x3, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture3D, Int32x3, UInt32, UInt32
    TextureFetchSample_Texture3D_texture.name = "texture"_c;
    TextureFetchSample_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureFetchSample_Texture3D_texture.type.modifiers = TextureFetchSample_Texture3D_texture_modifiers;
    TextureFetchSample_Texture3D_texture.type.modifierValues = TextureFetchSample_Texture3D_texture_modifierValues;
    TextureFetchSample_Texture3D_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetchSample_Texture3D_lod.name = "lod"_c;
    TextureFetchSample_Texture3D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture3D_sample.name = "sample"_c;
    TextureFetchSample_Texture3D_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture3D.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture3D.name = "textureFetchSample"_c;
    TextureFetchSample_Texture3D.backendIndex = 2230;
    TextureFetchSample_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture3D.parameters = TextureFetchSample_Texture3D_args;
    Symbol::Resolved(&TextureFetchSample_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureFetchSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetchSample_Texture3D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture3D_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->signature = "f32x4 textureFetchSample(uniform *texture3D,i32x3,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->name = "textureFetchSample(uniform *texture3D,i32x3,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->nameWithVarNames = "textureFetchSample(texture : uniform *texture3D, coordinate : i32x3, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture1DArray, Int32x2, UInt32
    TextureFetch_Texture1DArray_texture.name = "texture"_c;
    TextureFetch_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureFetch_Texture1DArray_texture.type.modifiers = TextureFetch_Texture1DArray_texture_modifiers;
    TextureFetch_Texture1DArray_texture.type.modifierValues = TextureFetch_Texture1DArray_texture_modifierValues;
    TextureFetch_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureFetch_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetch_Texture1DArray_lod.name = "lod"_c;
    TextureFetch_Texture1DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture1DArray.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture1DArray.name = "textureFetch"_c;
    TextureFetch_Texture1DArray.backendIndex = 2231;
    TextureFetch_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture1DArray.parameters = TextureFetch_Texture1DArray_args;
    Symbol::Resolved(&TextureFetch_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureFetch_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetch_Texture1DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->signature = "f32x4 textureFetch(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->name = "textureFetch(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->nameWithVarNames = "textureFetch(texture : uniform *texture1DArray, coordinate : i32x2, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture1DArray, Int32x2, UInt32, UInt32
    TextureFetchSample_Texture1DArray_texture.name = "texture"_c;
    TextureFetchSample_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureFetchSample_Texture1DArray_texture.type.modifiers = TextureFetchSample_Texture1DArray_texture_modifiers;
    TextureFetchSample_Texture1DArray_texture.type.modifierValues = TextureFetchSample_Texture1DArray_texture_modifierValues;
    TextureFetchSample_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetchSample_Texture1DArray_lod.name = "lod"_c;
    TextureFetchSample_Texture1DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1DArray_sample.name = "sample"_c;
    TextureFetchSample_Texture1DArray_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1DArray.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture1DArray.name = "textureFetchSample"_c;
    TextureFetchSample_Texture1DArray.backendIndex = 2232;
    TextureFetchSample_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture1DArray.parameters = TextureFetchSample_Texture1DArray_args;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->signature = "f32x4 textureFetchSample(uniform *texture1DArray,i32x2,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->name = "textureFetchSample(uniform *texture1DArray,i32x2,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->nameWithVarNames = "textureFetchSample(texture : uniform *texture1DArray, coordinate : i32x2, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture2DArray, Int32x3, UInt32
    TextureFetch_Texture2DArray_texture.name = "texture"_c;
    TextureFetch_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureFetch_Texture2DArray_texture.type.modifiers = TextureFetch_Texture2DArray_texture_modifiers;
    TextureFetch_Texture2DArray_texture.type.modifierValues = TextureFetch_Texture2DArray_texture_modifierValues;
    TextureFetch_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetch_Texture2DArray_lod.name = "lod"_c;
    TextureFetch_Texture2DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2DArray.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture2DArray.name = "textureFetch"_c;
    TextureFetch_Texture2DArray.backendIndex = 2233;
    TextureFetch_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture2DArray.parameters = TextureFetch_Texture2DArray_args;
    Symbol::Resolved(&TextureFetch_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureFetch_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetch_Texture2DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->signature = "f32x4 textureFetch(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->name = "textureFetch(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->nameWithVarNames = "textureFetch(texture : uniform *texture2DArray, coordinate : i32x3, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture2DArray, Int32x3, UInt32, UInt32
    TextureFetchSample_Texture2DArray_texture.name = "texture"_c;
    TextureFetchSample_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureFetchSample_Texture2DArray_texture.type.modifiers = TextureFetchSample_Texture2DArray_texture_modifiers;
    TextureFetchSample_Texture2DArray_texture.type.modifierValues = TextureFetchSample_Texture2DArray_texture_modifierValues;
    TextureFetchSample_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetchSample_Texture2DArray_lod.name = "lod"_c;
    TextureFetchSample_Texture2DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DArray_sample.name = "sample"_c;
    TextureFetchSample_Texture2DArray_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DArray.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture2DArray.name = "textureFetchSample"_c;
    TextureFetchSample_Texture2DArray.backendIndex = 2234;
    TextureFetchSample_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture2DArray.parameters = TextureFetchSample_Texture2DArray_args;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->signature = "f32x4 textureFetchSample(uniform *texture2DArray,i32x3,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->name = "textureFetchSample(uniform *texture2DArray,i32x3,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->nameWithVarNames = "textureFetchSample(texture : uniform *texture2DArray, coordinate : i32x3, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture2DMS, Int32x2, UInt32
    TextureFetch_Texture2DMS_texture.name = "texture"_c;
    TextureFetch_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureFetch_Texture2DMS_texture.type.modifiers = TextureFetch_Texture2DMS_texture_modifiers;
    TextureFetch_Texture2DMS_texture.type.modifierValues = TextureFetch_Texture2DMS_texture_modifierValues;
    TextureFetch_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetch_Texture2DMS_lod.name = "lod"_c;
    TextureFetch_Texture2DMS_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2DMS.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture2DMS.name = "textureFetch"_c;
    TextureFetch_Texture2DMS.backendIndex = 2235;
    TextureFetch_Texture2DMS.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture2DMS.parameters = TextureFetch_Texture2DMS_args;
    Symbol::Resolved(&TextureFetch_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureFetch_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetch_Texture2DMS_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->signature = "f32x4 textureFetch(uniform *texture2DMS,i32x2,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->name = "textureFetch(uniform *texture2DMS,i32x2,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->nameWithVarNames = "textureFetch(texture : uniform *texture2DMS, coordinate : i32x2, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture2DMS, Int32x2, UInt32, UInt32
    TextureFetchSample_Texture2DMS_texture.name = "texture"_c;
    TextureFetchSample_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureFetchSample_Texture2DMS_texture.type.modifiers = TextureFetchSample_Texture2DMS_texture_modifiers;
    TextureFetchSample_Texture2DMS_texture.type.modifierValues = TextureFetchSample_Texture2DMS_texture_modifierValues;
    TextureFetchSample_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetchSample_Texture2DMS_lod.name = "lod"_c;
    TextureFetchSample_Texture2DMS_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMS_sample.name = "sample"_c;
    TextureFetchSample_Texture2DMS_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMS.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture2DMS.name = "textureFetchSample"_c;
    TextureFetchSample_Texture2DMS.backendIndex = 2236;
    TextureFetchSample_Texture2DMS.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture2DMS.parameters = TextureFetchSample_Texture2DMS_args;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->signature = "f32x4 textureFetchSample(uniform *texture2DMS,i32x2,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->name = "textureFetchSample(uniform *texture2DMS,i32x2,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->nameWithVarNames = "textureFetchSample(texture : uniform *texture2DMS, coordinate : i32x2, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->returnTypeSymbol = &Float32x4Type;

    /// textureFetch with Texture2DMSArray, Int32x3, UInt32
    TextureFetch_Texture2DMSArray_texture.name = "texture"_c;
    TextureFetch_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureFetch_Texture2DMSArray_texture.type.modifiers = TextureFetch_Texture2DMSArray_texture_modifiers;
    TextureFetch_Texture2DMSArray_texture.type.modifierValues = TextureFetch_Texture2DMSArray_texture_modifierValues;
    TextureFetch_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetch_Texture2DMSArray_lod.name = "lod"_c;
    TextureFetch_Texture2DMSArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2DMSArray.documentation = "Fetch a single texel without using a sampler value at a coordinate"_c;
    TextureFetch_Texture2DMSArray.name = "textureFetch"_c;
    TextureFetch_Texture2DMSArray.backendIndex = 2237;
    TextureFetch_Texture2DMSArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetch_Texture2DMSArray.parameters = TextureFetch_Texture2DMSArray_args;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->signature = "f32x4 textureFetch(uniform *texture2DMSArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->name = "textureFetch(uniform *texture2DMSArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->nameWithVarNames = "textureFetch(texture : uniform *texture2DMSArray, coordinate : i32x3, lod : u32)"_c;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->returnTypeSymbol = &Float32x4Type;

    /// textureFetchSample with Texture2DMSArray, Int32x3, UInt32, UInt32
    TextureFetchSample_Texture2DMSArray_texture.name = "texture"_c;
    TextureFetchSample_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureFetchSample_Texture2DMSArray_texture.type.modifiers = TextureFetchSample_Texture2DMSArray_texture_modifiers;
    TextureFetchSample_Texture2DMSArray_texture.type.modifierValues = TextureFetchSample_Texture2DMSArray_texture_modifierValues;
    TextureFetchSample_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetchSample_Texture2DMSArray_lod.name = "lod"_c;
    TextureFetchSample_Texture2DMSArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMSArray_sample.name = "sample"_c;
    TextureFetchSample_Texture2DMSArray_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMSArray.documentation = "Fetch a single texel without using a sampler value at a coordinate at a specific sample index"_c;
    TextureFetchSample_Texture2DMSArray.name = "textureFetchSample"_c;
    TextureFetchSample_Texture2DMSArray.backendIndex = 2238;
    TextureFetchSample_Texture2DMSArray.returnType = Type::FullType { Float32x4Type.name };
    TextureFetchSample_Texture2DMSArray.parameters = TextureFetchSample_Texture2DMSArray_args;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->signature = "f32x4 textureFetchSample(uniform *texture2DMSArray,i32x3,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->name = "textureFetchSample(uniform *texture2DMSArray,i32x3,u32,u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->nameWithVarNames = "textureFetchSample(texture : uniform *texture2DMSArray, coordinate : i32x3, lod : u32, sample : u32)"_c;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with Texture2D, Sampler, Int32x2, Int32
    TextureGather_Texture2D_texture.name = "texture"_c;
    TextureGather_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGather_Texture2D_texture.type.modifiers = TextureGather_Texture2D_texture_modifiers;
    TextureGather_Texture2D_texture.type.modifierValues = TextureGather_Texture2D_texture_modifierValues;
    TextureGather_Texture2D_sampler.name = "sampler"_c;
    TextureGather_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_Texture2D_sampler.type.modifiers = TextureGather_Texture2D_sampler_modifiers;
    TextureGather_Texture2D_sampler.type.modifierValues = TextureGather_Texture2D_sampler_modifierValues;
    TextureGather_Texture2D_coordinate.name = "coordinate"_c;
    TextureGather_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureGather_Texture2D_component.name = "component"_c;
    TextureGather_Texture2D_component.type = Type::FullType{ Int32Type.name };
    TextureGather_Texture2D.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    TextureGather_Texture2D.name = "textureGather"_c;
    TextureGather_Texture2D.backendIndex = 2239;
    TextureGather_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureGather_Texture2D.parameters = TextureGather_Texture2D_args;
    Symbol::Resolved(&TextureGather_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGather_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureGather_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_Texture2D)->signature = "f32x4 textureGather(uniform *texture2D,uniform *sampler,i32x2,i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2D)->name = "textureGather(uniform *texture2D,uniform *sampler,i32x2,i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2D)->nameWithVarNames = "textureGather(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : i32x2, component : i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with SampledTexture2D, Int32x2, Int32
    SampledTextureGather_Texture2D_texture.name = "texture"_c;
    SampledTextureGather_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureGather_Texture2D_texture.type.modifiers = SampledTextureGather_Texture2D_texture_modifiers;
    SampledTextureGather_Texture2D_texture.type.modifierValues = SampledTextureGather_Texture2D_texture_modifierValues;
    SampledTextureGather_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureGather_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    SampledTextureGather_Texture2D_component.name = "component"_c;
    SampledTextureGather_Texture2D_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_Texture2D.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    SampledTextureGather_Texture2D.name = "textureGather"_c;
    SampledTextureGather_Texture2D.backendIndex = 2240;
    SampledTextureGather_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGather_Texture2D.parameters = SampledTextureGather_Texture2D_args;
    Symbol::Resolved(&SampledTextureGather_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureGather_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SampledTextureGather_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->signature = "f32x4 textureGather(uniform *textureSampled2D,i32x2,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->name = "textureGather(uniform *textureSampled2D,i32x2,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->nameWithVarNames = "textureGather(texture : uniform *textureSampled2D, coordinate : i32x2, component : i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with Texture2D, Sampler, Int32x2, Int32, UInt32
    TextureGatherOffset_Texture2D_texture.name = "texture"_c;
    TextureGatherOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGatherOffset_Texture2D_texture.type.modifiers = TextureGatherOffset_Texture2D_texture_modifiers;
    TextureGatherOffset_Texture2D_texture.type.modifierValues = TextureGatherOffset_Texture2D_texture_modifierValues;
    TextureGatherOffset_Texture2D_sampler.name = "sampler"_c;
    TextureGatherOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_Texture2D_sampler.type.modifiers = TextureGatherOffset_Texture2D_sampler_modifiers;
    TextureGatherOffset_Texture2D_sampler.type.modifierValues = TextureGatherOffset_Texture2D_sampler_modifierValues;
    TextureGatherOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureGatherOffset_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureGatherOffset_Texture2D_component.name = "component"_c;
    TextureGatherOffset_Texture2D_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_Texture2D_offset.name = "offset"_c;
    TextureGatherOffset_Texture2D_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_Texture2D.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    TextureGatherOffset_Texture2D.name = "textureGatherOffset"_c;
    TextureGatherOffset_Texture2D.backendIndex = 2241;
    TextureGatherOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureGatherOffset_Texture2D.parameters = TextureGatherOffset_Texture2D_args;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->signature = "f32x4 textureGatherOffset(uniform *texture2D,uniform *sampler,i32x2,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->name = "textureGatherOffset(uniform *texture2D,uniform *sampler,i32x2,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->nameWithVarNames = "textureGatherOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : i32x2, component : i32, offset : u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with SampledTexture2D, Int32x2, Int32, UInt32
    SampledTextureGatherOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureGatherOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureGatherOffset_Texture2D_texture.type.modifiers = SampledTextureGatherOffset_Texture2D_texture_modifiers;
    SampledTextureGatherOffset_Texture2D_texture.type.modifierValues = SampledTextureGatherOffset_Texture2D_texture_modifierValues;
    SampledTextureGatherOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    SampledTextureGatherOffset_Texture2D_component.name = "component"_c;
    SampledTextureGatherOffset_Texture2D_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureGatherOffset_Texture2D_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_Texture2D.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    SampledTextureGatherOffset_Texture2D.name = "textureGatherOffset"_c;
    SampledTextureGatherOffset_Texture2D.backendIndex = 2242;
    SampledTextureGatherOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGatherOffset_Texture2D.parameters = SampledTextureGatherOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->signature = "f32x4 textureGatherOffset(uniform *textureSampled2D,i32x2,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->name = "textureGatherOffset(uniform *textureSampled2D,i32x2,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureSampled2D, coordinate : i32x2, component : i32, offset : u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with TextureCube, Sampler, Int32x3, Int32
    TextureGather_TextureCube_texture.name = "texture"_c;
    TextureGather_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGather_TextureCube_texture.type.modifiers = TextureGather_TextureCube_texture_modifiers;
    TextureGather_TextureCube_texture.type.modifierValues = TextureGather_TextureCube_texture_modifierValues;
    TextureGather_TextureCube_sampler.name = "sampler"_c;
    TextureGather_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_TextureCube_sampler.type.modifiers = TextureGather_TextureCube_sampler_modifiers;
    TextureGather_TextureCube_sampler.type.modifierValues = TextureGather_TextureCube_sampler_modifierValues;
    TextureGather_TextureCube_coordinate.name = "coordinate"_c;
    TextureGather_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGather_TextureCube_component.name = "component"_c;
    TextureGather_TextureCube_component.type = Type::FullType{ Int32Type.name };
    TextureGather_TextureCube.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    TextureGather_TextureCube.name = "textureGather"_c;
    TextureGather_TextureCube.backendIndex = 2243;
    TextureGather_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureGather_TextureCube.parameters = TextureGather_TextureCube_args;
    Symbol::Resolved(&TextureGather_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGather_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGather_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_TextureCube)->signature = "f32x4 textureGather(uniform *textureCube,uniform *sampler,i32x3,i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCube)->name = "textureGather(uniform *textureCube,uniform *sampler,i32x3,i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCube)->nameWithVarNames = "textureGather(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : i32x3, component : i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with SampledTextureCube, Int32x3, Int32
    SampledTextureGather_TextureCube_texture.name = "texture"_c;
    SampledTextureGather_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureGather_TextureCube_texture.type.modifiers = SampledTextureGather_TextureCube_texture_modifiers;
    SampledTextureGather_TextureCube_texture.type.modifierValues = SampledTextureGather_TextureCube_texture_modifierValues;
    SampledTextureGather_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureGather_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGather_TextureCube_component.name = "component"_c;
    SampledTextureGather_TextureCube_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_TextureCube.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    SampledTextureGather_TextureCube.name = "textureGather"_c;
    SampledTextureGather_TextureCube.backendIndex = 2244;
    SampledTextureGather_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGather_TextureCube.parameters = SampledTextureGather_TextureCube_args;
    Symbol::Resolved(&SampledTextureGather_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureGather_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGather_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->signature = "f32x4 textureGather(uniform *textureSampledCube,i32x3,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->name = "textureGather(uniform *textureSampledCube,i32x3,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->nameWithVarNames = "textureGather(texture : uniform *textureSampledCube, coordinate : i32x3, component : i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with TextureCube, Sampler, Int32x3, Int32, UInt32
    TextureGatherOffset_TextureCube_texture.name = "texture"_c;
    TextureGatherOffset_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGatherOffset_TextureCube_texture.type.modifiers = TextureGatherOffset_TextureCube_texture_modifiers;
    TextureGatherOffset_TextureCube_texture.type.modifierValues = TextureGatherOffset_TextureCube_texture_modifierValues;
    TextureGatherOffset_TextureCube_sampler.name = "sampler"_c;
    TextureGatherOffset_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_TextureCube_sampler.type.modifiers = TextureGatherOffset_TextureCube_sampler_modifiers;
    TextureGatherOffset_TextureCube_sampler.type.modifierValues = TextureGatherOffset_TextureCube_sampler_modifierValues;
    TextureGatherOffset_TextureCube_coordinate.name = "coordinate"_c;
    TextureGatherOffset_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGatherOffset_TextureCube_component.name = "component"_c;
    TextureGatherOffset_TextureCube_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_TextureCube_offset.name = "offset"_c;
    TextureGatherOffset_TextureCube_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_TextureCube.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    TextureGatherOffset_TextureCube.name = "textureGatherOffset"_c;
    TextureGatherOffset_TextureCube.backendIndex = 2245;
    TextureGatherOffset_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureGatherOffset_TextureCube.parameters = TextureGatherOffset_TextureCube_args;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->signature = "f32x4 textureGatherOffset(uniform *textureCube,uniform *sampler,i32x3,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->name = "textureGatherOffset(uniform *textureCube,uniform *sampler,i32x3,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : i32x3, component : i32, offset : u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with SampledTextureCube, Int32x3, Int32, UInt32
    SampledTextureGatherOffset_TextureCube_texture.name = "texture"_c;
    SampledTextureGatherOffset_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureGatherOffset_TextureCube_texture.type.modifiers = SampledTextureGatherOffset_TextureCube_texture_modifiers;
    SampledTextureGatherOffset_TextureCube_texture.type.modifierValues = SampledTextureGatherOffset_TextureCube_texture_modifierValues;
    SampledTextureGatherOffset_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGatherOffset_TextureCube_component.name = "component"_c;
    SampledTextureGatherOffset_TextureCube_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_TextureCube_offset.name = "offset"_c;
    SampledTextureGatherOffset_TextureCube_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_TextureCube.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    SampledTextureGatherOffset_TextureCube.name = "textureGatherOffset"_c;
    SampledTextureGatherOffset_TextureCube.backendIndex = 2246;
    SampledTextureGatherOffset_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGatherOffset_TextureCube.parameters = SampledTextureGatherOffset_TextureCube_args;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->signature = "f32x4 textureGatherOffset(uniform *textureSampledCube,i32x3,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->name = "textureGatherOffset(uniform *textureSampledCube,i32x3,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureSampledCube, coordinate : i32x3, component : i32, offset : u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with Texture2DArray, Sampler, Int32x3, Int32
    TextureGather_Texture2DArray_texture.name = "texture"_c;
    TextureGather_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGather_Texture2DArray_texture.type.modifiers = TextureGather_Texture2DArray_texture_modifiers;
    TextureGather_Texture2DArray_texture.type.modifierValues = TextureGather_Texture2DArray_texture_modifierValues;
    TextureGather_Texture2DArray_sampler.name = "sampler"_c;
    TextureGather_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_Texture2DArray_sampler.type.modifiers = TextureGather_Texture2DArray_sampler_modifiers;
    TextureGather_Texture2DArray_sampler.type.modifierValues = TextureGather_Texture2DArray_sampler_modifierValues;
    TextureGather_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureGather_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGather_Texture2DArray_component.name = "component"_c;
    TextureGather_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    TextureGather_Texture2DArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    TextureGather_Texture2DArray.name = "textureGather"_c;
    TextureGather_Texture2DArray.backendIndex = 2247;
    TextureGather_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureGather_Texture2DArray.parameters = TextureGather_Texture2DArray_args;
    Symbol::Resolved(&TextureGather_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGather_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGather_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_Texture2DArray)->signature = "f32x4 textureGather(uniform *texture2DArray,uniform *sampler,i32x3,i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2DArray)->name = "textureGather(uniform *texture2DArray,uniform *sampler,i32x3,i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2DArray)->nameWithVarNames = "textureGather(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : i32x3, component : i32)"_c;
    Symbol::Resolved(&TextureGather_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with SampledTexture2DArray, Int32x3, Int32
    SampledTextureGather_Texture2DArray_texture.name = "texture"_c;
    SampledTextureGather_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureGather_Texture2DArray_texture.type.modifiers = SampledTextureGather_Texture2DArray_texture_modifiers;
    SampledTextureGather_Texture2DArray_texture.type.modifierValues = SampledTextureGather_Texture2DArray_texture_modifierValues;
    SampledTextureGather_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureGather_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGather_Texture2DArray_component.name = "component"_c;
    SampledTextureGather_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_Texture2DArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    SampledTextureGather_Texture2DArray.name = "textureGather"_c;
    SampledTextureGather_Texture2DArray.backendIndex = 2248;
    SampledTextureGather_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGather_Texture2DArray.parameters = SampledTextureGather_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->signature = "f32x4 textureGather(uniform *textureSampled2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->name = "textureGather(uniform *textureSampled2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->nameWithVarNames = "textureGather(texture : uniform *textureSampled2DArray, coordinate : i32x3, component : i32)"_c;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with Texture2DArray, Sampler, Int32x3, Int32, UInt32
    TextureGatherOffset_Texture2DArray_texture.name = "texture"_c;
    TextureGatherOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGatherOffset_Texture2DArray_texture.type.modifiers = TextureGatherOffset_Texture2DArray_texture_modifiers;
    TextureGatherOffset_Texture2DArray_texture.type.modifierValues = TextureGatherOffset_Texture2DArray_texture_modifierValues;
    TextureGatherOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureGatherOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_Texture2DArray_sampler.type.modifiers = TextureGatherOffset_Texture2DArray_sampler_modifiers;
    TextureGatherOffset_Texture2DArray_sampler.type.modifierValues = TextureGatherOffset_Texture2DArray_sampler_modifierValues;
    TextureGatherOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureGatherOffset_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGatherOffset_Texture2DArray_component.name = "component"_c;
    TextureGatherOffset_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_Texture2DArray_offset.name = "offset"_c;
    TextureGatherOffset_Texture2DArray_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_Texture2DArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    TextureGatherOffset_Texture2DArray.name = "textureGatherOffset"_c;
    TextureGatherOffset_Texture2DArray.backendIndex = 2249;
    TextureGatherOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureGatherOffset_Texture2DArray.parameters = TextureGatherOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->signature = "f32x4 textureGatherOffset(uniform *texture2DArray,uniform *sampler,i32x3,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->name = "textureGatherOffset(uniform *texture2DArray,uniform *sampler,i32x3,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->nameWithVarNames = "textureGatherOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : i32x3, component : i32, offset : u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with SampledTexture2DArray, Int32x3, Int32, UInt32
    SampledTextureGatherOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureGatherOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureGatherOffset_Texture2DArray_texture.type.modifiers = SampledTextureGatherOffset_Texture2DArray_texture_modifiers;
    SampledTextureGatherOffset_Texture2DArray_texture.type.modifierValues = SampledTextureGatherOffset_Texture2DArray_texture_modifierValues;
    SampledTextureGatherOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGatherOffset_Texture2DArray_component.name = "component"_c;
    SampledTextureGatherOffset_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureGatherOffset_Texture2DArray_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_Texture2DArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    SampledTextureGatherOffset_Texture2DArray.name = "textureGatherOffset"_c;
    SampledTextureGatherOffset_Texture2DArray.backendIndex = 2250;
    SampledTextureGatherOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGatherOffset_Texture2DArray.parameters = SampledTextureGatherOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->signature = "f32x4 textureGatherOffset(uniform *textureSampled2DArray,i32x3,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->name = "textureGatherOffset(uniform *textureSampled2DArray,i32x3,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureSampled2DArray, coordinate : i32x3, component : i32, offset : u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with TextureCubeArray, Sampler, Int32x4, Int32
    TextureGather_TextureCubeArray_texture.name = "texture"_c;
    TextureGather_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGather_TextureCubeArray_texture.type.modifiers = TextureGather_TextureCubeArray_texture_modifiers;
    TextureGather_TextureCubeArray_texture.type.modifierValues = TextureGather_TextureCubeArray_texture_modifierValues;
    TextureGather_TextureCubeArray_sampler.name = "sampler"_c;
    TextureGather_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_TextureCubeArray_sampler.type.modifiers = TextureGather_TextureCubeArray_sampler_modifiers;
    TextureGather_TextureCubeArray_sampler.type.modifierValues = TextureGather_TextureCubeArray_sampler_modifierValues;
    TextureGather_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureGather_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureGather_TextureCubeArray_component.name = "component"_c;
    TextureGather_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    TextureGather_TextureCubeArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    TextureGather_TextureCubeArray.name = "textureGather"_c;
    TextureGather_TextureCubeArray.backendIndex = 2251;
    TextureGather_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureGather_TextureCubeArray.parameters = TextureGather_TextureCubeArray_args;
    Symbol::Resolved(&TextureGather_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGather_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureGather_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->signature = "f32x4 textureGather(uniform *textureCubeArray,uniform *sampler,i32x4,i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->name = "textureGather(uniform *textureCubeArray,uniform *sampler,i32x4,i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->nameWithVarNames = "textureGather(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : i32x4, component : i32)"_c;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGather with SampledTextureCubeArray, Int32x4, Int32
    SampledTextureGather_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureGather_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureGather_TextureCubeArray_texture.type.modifiers = SampledTextureGather_TextureCubeArray_texture_modifiers;
    SampledTextureGather_TextureCubeArray_texture.type.modifierValues = SampledTextureGather_TextureCubeArray_texture_modifierValues;
    SampledTextureGather_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureGather_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    SampledTextureGather_TextureCubeArray_component.name = "component"_c;
    SampledTextureGather_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_TextureCubeArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read"_c;
    SampledTextureGather_TextureCubeArray.name = "textureGather"_c;
    SampledTextureGather_TextureCubeArray.backendIndex = 2252;
    SampledTextureGather_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGather_TextureCubeArray.parameters = SampledTextureGather_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->signature = "f32x4 textureGather(uniform *textureSampledCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->name = "textureGather(uniform *textureSampledCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->nameWithVarNames = "textureGather(texture : uniform *textureSampledCubeArray, coordinate : i32x4, component : i32)"_c;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with TextureCubeArray, Sampler, Int32x4, Int32, UInt32
    TextureGatherOffset_TextureCubeArray_texture.name = "texture"_c;
    TextureGatherOffset_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGatherOffset_TextureCubeArray_texture.type.modifiers = TextureGatherOffset_TextureCubeArray_texture_modifiers;
    TextureGatherOffset_TextureCubeArray_texture.type.modifierValues = TextureGatherOffset_TextureCubeArray_texture_modifierValues;
    TextureGatherOffset_TextureCubeArray_sampler.name = "sampler"_c;
    TextureGatherOffset_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_TextureCubeArray_sampler.type.modifiers = TextureGatherOffset_TextureCubeArray_sampler_modifiers;
    TextureGatherOffset_TextureCubeArray_sampler.type.modifierValues = TextureGatherOffset_TextureCubeArray_sampler_modifierValues;
    TextureGatherOffset_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureGatherOffset_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureGatherOffset_TextureCubeArray_component.name = "component"_c;
    TextureGatherOffset_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_TextureCubeArray_offset.name = "offset"_c;
    TextureGatherOffset_TextureCubeArray_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_TextureCubeArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    TextureGatherOffset_TextureCubeArray.name = "textureGatherOffset"_c;
    TextureGatherOffset_TextureCubeArray.backendIndex = 2253;
    TextureGatherOffset_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureGatherOffset_TextureCubeArray.parameters = TextureGatherOffset_TextureCubeArray_args;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->signature = "f32x4 textureGatherOffset(uniform *textureCubeArray,uniform *sampler,i32x4,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->name = "textureGatherOffset(uniform *textureCubeArray,uniform *sampler,i32x4,i32,u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : i32x4, component : i32, offset : u32)"_c;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureGatherOffset with SampledTextureCubeArray, Int32x4, Int32, UInt32
    SampledTextureGatherOffset_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureGatherOffset_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureGatherOffset_TextureCubeArray_texture.type.modifiers = SampledTextureGatherOffset_TextureCubeArray_texture_modifiers;
    SampledTextureGatherOffset_TextureCubeArray_texture.type.modifierValues = SampledTextureGatherOffset_TextureCubeArray_texture_modifierValues;
    SampledTextureGatherOffset_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    SampledTextureGatherOffset_TextureCubeArray_component.name = "component"_c;
    SampledTextureGatherOffset_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_TextureCubeArray_offset.name = "offset"_c;
    SampledTextureGatherOffset_TextureCubeArray_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_TextureCubeArray.documentation = "Gather 4 values of a quad at a coordinate where the component is the channel to read with an offset applied to the coordinate"_c;
    SampledTextureGatherOffset_TextureCubeArray.name = "textureGatherOffset"_c;
    SampledTextureGatherOffset_TextureCubeArray.backendIndex = 2254;
    SampledTextureGatherOffset_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureGatherOffset_TextureCubeArray.parameters = SampledTextureGatherOffset_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->signature = "f32x4 textureGatherOffset(uniform *textureSampledCubeArray,i32x4,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->name = "textureGatherOffset(uniform *textureSampledCubeArray,i32x4,i32,u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->nameWithVarNames = "textureGatherOffset(texture : uniform *textureSampledCubeArray, coordinate : i32x4, component : i32, offset : u32)"_c;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// texturePixelCacheLoad with PixelCache
    TexturePixelCacheLoad_PixelCache_texture.name = "texture"_c;
    TexturePixelCacheLoad_PixelCache_texture.type = Type::FullType{ PixelCacheType.name };
    TexturePixelCacheLoad_PixelCache_texture.type.modifiers = TexturePixelCacheLoad_PixelCache_texture_modifiers;
    TexturePixelCacheLoad_PixelCache_texture.type.modifierValues = TexturePixelCacheLoad_PixelCache_texture_modifierValues;
    TexturePixelCacheLoad_PixelCache.documentation = "Load a pixel value from a previous thread"_c;
    TexturePixelCacheLoad_PixelCache.name = "texturePixelCacheLoad"_c;
    TexturePixelCacheLoad_PixelCache.backendIndex = 2255;
    TexturePixelCacheLoad_PixelCache.returnType = Type::FullType { PixelCacheType.name };
    TexturePixelCacheLoad_PixelCache.parameters = TexturePixelCacheLoad_PixelCache_args;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache_texture)->typeSymbol = &PixelCacheType;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->signature = "pixelCache texturePixelCacheLoad(uniform *pixelCache)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->name = "texturePixelCacheLoad(uniform *pixelCache)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->nameWithVarNames = "texturePixelCacheLoad(texture : uniform *pixelCache)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->returnTypeSymbol = &PixelCacheType;

    /// texturePixelCacheLoad with PixelCacheMS, UInt32
    TexturePixelCacheLoad_PixelCacheMS_texture.name = "texture"_c;
    TexturePixelCacheLoad_PixelCacheMS_texture.type = Type::FullType{ PixelCacheMSType.name };
    TexturePixelCacheLoad_PixelCacheMS_texture.type.modifiers = TexturePixelCacheLoad_PixelCacheMS_texture_modifiers;
    TexturePixelCacheLoad_PixelCacheMS_texture.type.modifierValues = TexturePixelCacheLoad_PixelCacheMS_texture_modifierValues;
    TexturePixelCacheLoad_PixelCacheMS_sample.name = "sample"_c;
    TexturePixelCacheLoad_PixelCacheMS_sample.type = Type::FullType{ UInt32Type.name };
    TexturePixelCacheLoad_PixelCacheMS.documentation = "Load a pixel value from a previous thread"_c;
    TexturePixelCacheLoad_PixelCacheMS.name = "texturePixelCacheLoad"_c;
    TexturePixelCacheLoad_PixelCacheMS.backendIndex = 2256;
    TexturePixelCacheLoad_PixelCacheMS.returnType = Type::FullType { PixelCacheMSType.name };
    TexturePixelCacheLoad_PixelCacheMS.parameters = TexturePixelCacheLoad_PixelCacheMS_args;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_texture)->typeSymbol = &PixelCacheMSType;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->signature = "pixelCacheMS texturePixelCacheLoad(uniform *pixelCacheMS,u32)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->name = "texturePixelCacheLoad(uniform *pixelCacheMS,u32)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->nameWithVarNames = "texturePixelCacheLoad(texture : uniform *pixelCacheMS, sample : u32)"_c;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->returnTypeSymbol = &PixelCacheMSType;

    /// textureSample with Texture1D, Sampler, Float32
    TextureSample_Texture1D_texture.name = "texture"_c;
    TextureSample_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSample_Texture1D_texture.type.modifiers = TextureSample_Texture1D_texture_modifiers;
    TextureSample_Texture1D_texture.type.modifierValues = TextureSample_Texture1D_texture_modifierValues;
    TextureSample_Texture1D_sampler.name = "sampler"_c;
    TextureSample_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture1D_sampler.type.modifiers = TextureSample_Texture1D_sampler_modifiers;
    TextureSample_Texture1D_sampler.type.modifierValues = TextureSample_Texture1D_sampler_modifierValues;
    TextureSample_Texture1D_coordinate.name = "coordinate"_c;
    TextureSample_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSample_Texture1D.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture1D.name = "textureSample"_c;
    TextureSample_Texture1D.backendIndex = 2257;
    TextureSample_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture1D.parameters = TextureSample_Texture1D_args;
    Symbol::Resolved(&TextureSample_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSample_Texture1D)->signature = "f32x4 textureSample(uniform *texture1D,uniform *sampler,f32)"_c;
    Symbol::Resolved(&TextureSample_Texture1D)->name = "textureSample(uniform *texture1D,uniform *sampler,f32)"_c;
    Symbol::Resolved(&TextureSample_Texture1D)->nameWithVarNames = "textureSample(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32)"_c;
    Symbol::Resolved(&TextureSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture1D, Float32
    SampledTextureSample_Texture1D_texture.name = "texture"_c;
    SampledTextureSample_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSample_Texture1D_texture.type.modifiers = SampledTextureSample_Texture1D_texture_modifiers;
    SampledTextureSample_Texture1D_texture.type.modifierValues = SampledTextureSample_Texture1D_texture_modifierValues;
    SampledTextureSample_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSample_Texture1D.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture1D.name = "textureSample"_c;
    SampledTextureSample_Texture1D.backendIndex = 2258;
    SampledTextureSample_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture1D.parameters = SampledTextureSample_Texture1D_args;
    Symbol::Resolved(&SampledTextureSample_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->signature = "f32x4 textureSample(uniform *textureSampled1D,f32)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->name = "textureSample(uniform *textureSampled1D,f32)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->nameWithVarNames = "textureSample(texture : uniform *textureSampled1D, coordinate : f32)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture2D, Sampler, Float32x2
    TextureSample_Texture2D_texture.name = "texture"_c;
    TextureSample_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSample_Texture2D_texture.type.modifiers = TextureSample_Texture2D_texture_modifiers;
    TextureSample_Texture2D_texture.type.modifierValues = TextureSample_Texture2D_texture_modifierValues;
    TextureSample_Texture2D_sampler.name = "sampler"_c;
    TextureSample_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture2D_sampler.type.modifiers = TextureSample_Texture2D_sampler_modifiers;
    TextureSample_Texture2D_sampler.type.modifierValues = TextureSample_Texture2D_sampler_modifierValues;
    TextureSample_Texture2D_coordinate.name = "coordinate"_c;
    TextureSample_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSample_Texture2D.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture2D.name = "textureSample"_c;
    TextureSample_Texture2D.backendIndex = 2259;
    TextureSample_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture2D.parameters = TextureSample_Texture2D_args;
    Symbol::Resolved(&TextureSample_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSample_Texture2D)->signature = "f32x4 textureSample(uniform *texture2D,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture2D)->name = "textureSample(uniform *texture2D,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture2D)->nameWithVarNames = "textureSample(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture2D, Float32x2
    SampledTextureSample_Texture2D_texture.name = "texture"_c;
    SampledTextureSample_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSample_Texture2D_texture.type.modifiers = SampledTextureSample_Texture2D_texture_modifiers;
    SampledTextureSample_Texture2D_texture.type.modifierValues = SampledTextureSample_Texture2D_texture_modifierValues;
    SampledTextureSample_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSample_Texture2D.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture2D.name = "textureSample"_c;
    SampledTextureSample_Texture2D.backendIndex = 2260;
    SampledTextureSample_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture2D.parameters = SampledTextureSample_Texture2D_args;
    Symbol::Resolved(&SampledTextureSample_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->signature = "f32x4 textureSample(uniform *textureSampled2D,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->name = "textureSample(uniform *textureSampled2D,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->nameWithVarNames = "textureSample(texture : uniform *textureSampled2D, coordinate : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture3D, Sampler, Float32x3
    TextureSample_Texture3D_texture.name = "texture"_c;
    TextureSample_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSample_Texture3D_texture.type.modifiers = TextureSample_Texture3D_texture_modifiers;
    TextureSample_Texture3D_texture.type.modifierValues = TextureSample_Texture3D_texture_modifierValues;
    TextureSample_Texture3D_sampler.name = "sampler"_c;
    TextureSample_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture3D_sampler.type.modifiers = TextureSample_Texture3D_sampler_modifiers;
    TextureSample_Texture3D_sampler.type.modifierValues = TextureSample_Texture3D_sampler_modifierValues;
    TextureSample_Texture3D_coordinate.name = "coordinate"_c;
    TextureSample_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_Texture3D.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture3D.name = "textureSample"_c;
    TextureSample_Texture3D.backendIndex = 2261;
    TextureSample_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture3D.parameters = TextureSample_Texture3D_args;
    Symbol::Resolved(&TextureSample_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_Texture3D)->signature = "f32x4 textureSample(uniform *texture3D,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture3D)->name = "textureSample(uniform *texture3D,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture3D)->nameWithVarNames = "textureSample(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture3D, Float32x3
    SampledTextureSample_Texture3D_texture.name = "texture"_c;
    SampledTextureSample_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSample_Texture3D_texture.type.modifiers = SampledTextureSample_Texture3D_texture_modifiers;
    SampledTextureSample_Texture3D_texture.type.modifierValues = SampledTextureSample_Texture3D_texture_modifierValues;
    SampledTextureSample_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_Texture3D.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture3D.name = "textureSample"_c;
    SampledTextureSample_Texture3D.backendIndex = 2262;
    SampledTextureSample_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture3D.parameters = SampledTextureSample_Texture3D_args;
    Symbol::Resolved(&SampledTextureSample_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->signature = "f32x4 textureSample(uniform *textureSampled3D,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->name = "textureSample(uniform *textureSampled3D,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->nameWithVarNames = "textureSample(texture : uniform *textureSampled3D, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with TextureCube, Sampler, Float32x3
    TextureSample_TextureCube_texture.name = "texture"_c;
    TextureSample_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSample_TextureCube_texture.type.modifiers = TextureSample_TextureCube_texture_modifiers;
    TextureSample_TextureCube_texture.type.modifierValues = TextureSample_TextureCube_texture_modifierValues;
    TextureSample_TextureCube_sampler.name = "sampler"_c;
    TextureSample_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_TextureCube_sampler.type.modifiers = TextureSample_TextureCube_sampler_modifiers;
    TextureSample_TextureCube_sampler.type.modifierValues = TextureSample_TextureCube_sampler_modifierValues;
    TextureSample_TextureCube_coordinate.name = "coordinate"_c;
    TextureSample_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_TextureCube.documentation = "Sample a texture at coordinate"_c;
    TextureSample_TextureCube.name = "textureSample"_c;
    TextureSample_TextureCube.backendIndex = 2263;
    TextureSample_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_TextureCube.parameters = TextureSample_TextureCube_args;
    Symbol::Resolved(&TextureSample_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSample_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_TextureCube)->signature = "f32x4 textureSample(uniform *textureCube,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureSample_TextureCube)->name = "textureSample(uniform *textureCube,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureSample_TextureCube)->nameWithVarNames = "textureSample(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureSample_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTextureCube, Float32x3
    SampledTextureSample_TextureCube_texture.name = "texture"_c;
    SampledTextureSample_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureSample_TextureCube_texture.type.modifiers = SampledTextureSample_TextureCube_texture_modifiers;
    SampledTextureSample_TextureCube_texture.type.modifierValues = SampledTextureSample_TextureCube_texture_modifierValues;
    SampledTextureSample_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSample_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_TextureCube.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_TextureCube.name = "textureSample"_c;
    SampledTextureSample_TextureCube.backendIndex = 2264;
    SampledTextureSample_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_TextureCube.parameters = SampledTextureSample_TextureCube_args;
    Symbol::Resolved(&SampledTextureSample_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureSample_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->signature = "f32x4 textureSample(uniform *textureSampledCube,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->name = "textureSample(uniform *textureSampledCube,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->nameWithVarNames = "textureSample(texture : uniform *textureSampledCube, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture1DArray, Sampler, Float32x2
    TextureSample_Texture1DArray_texture.name = "texture"_c;
    TextureSample_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSample_Texture1DArray_texture.type.modifiers = TextureSample_Texture1DArray_texture_modifiers;
    TextureSample_Texture1DArray_texture.type.modifierValues = TextureSample_Texture1DArray_texture_modifierValues;
    TextureSample_Texture1DArray_sampler.name = "sampler"_c;
    TextureSample_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture1DArray_sampler.type.modifiers = TextureSample_Texture1DArray_sampler_modifiers;
    TextureSample_Texture1DArray_sampler.type.modifierValues = TextureSample_Texture1DArray_sampler_modifierValues;
    TextureSample_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSample_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSample_Texture1DArray.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture1DArray.name = "textureSample"_c;
    TextureSample_Texture1DArray.backendIndex = 2265;
    TextureSample_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture1DArray.parameters = TextureSample_Texture1DArray_args;
    Symbol::Resolved(&TextureSample_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSample_Texture1DArray)->signature = "f32x4 textureSample(uniform *texture1DArray,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture1DArray)->name = "textureSample(uniform *texture1DArray,uniform *sampler,f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture1DArray)->nameWithVarNames = "textureSample(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2)"_c;
    Symbol::Resolved(&TextureSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture1DArray, Float32x2
    SampledTextureSample_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSample_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSample_Texture1DArray_texture.type.modifiers = SampledTextureSample_Texture1DArray_texture_modifiers;
    SampledTextureSample_Texture1DArray_texture.type.modifierValues = SampledTextureSample_Texture1DArray_texture_modifierValues;
    SampledTextureSample_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSample_Texture1DArray.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture1DArray.name = "textureSample"_c;
    SampledTextureSample_Texture1DArray.backendIndex = 2266;
    SampledTextureSample_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture1DArray.parameters = SampledTextureSample_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->signature = "f32x4 textureSample(uniform *textureSampled1DArray,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->name = "textureSample(uniform *textureSampled1DArray,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->nameWithVarNames = "textureSample(texture : uniform *textureSampled1DArray, coordinate : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture2DArray, Sampler, Float32x3
    TextureSample_Texture2DArray_texture.name = "texture"_c;
    TextureSample_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSample_Texture2DArray_texture.type.modifiers = TextureSample_Texture2DArray_texture_modifiers;
    TextureSample_Texture2DArray_texture.type.modifierValues = TextureSample_Texture2DArray_texture_modifierValues;
    TextureSample_Texture2DArray_sampler.name = "sampler"_c;
    TextureSample_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture2DArray_sampler.type.modifiers = TextureSample_Texture2DArray_sampler_modifiers;
    TextureSample_Texture2DArray_sampler.type.modifierValues = TextureSample_Texture2DArray_sampler_modifierValues;
    TextureSample_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSample_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_Texture2DArray.documentation = "Sample a texture at coordinate"_c;
    TextureSample_Texture2DArray.name = "textureSample"_c;
    TextureSample_Texture2DArray.backendIndex = 2267;
    TextureSample_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture2DArray.parameters = TextureSample_Texture2DArray_args;
    Symbol::Resolved(&TextureSample_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_Texture2DArray)->signature = "f32x4 textureSample(uniform *texture2DArray,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture2DArray)->name = "textureSample(uniform *texture2DArray,uniform *sampler,f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture2DArray)->nameWithVarNames = "textureSample(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3)"_c;
    Symbol::Resolved(&TextureSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTexture2DArray, Float32x3
    SampledTextureSample_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSample_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSample_Texture2DArray_texture.type.modifiers = SampledTextureSample_Texture2DArray_texture_modifiers;
    SampledTextureSample_Texture2DArray_texture.type.modifierValues = SampledTextureSample_Texture2DArray_texture_modifierValues;
    SampledTextureSample_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_Texture2DArray.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_Texture2DArray.name = "textureSample"_c;
    SampledTextureSample_Texture2DArray.backendIndex = 2268;
    SampledTextureSample_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture2DArray.parameters = SampledTextureSample_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->signature = "f32x4 textureSample(uniform *textureSampled2DArray,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->name = "textureSample(uniform *textureSampled2DArray,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->nameWithVarNames = "textureSample(texture : uniform *textureSampled2DArray, coordinate : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with TextureCubeArray, Sampler, Float32x4
    TextureSample_TextureCubeArray_texture.name = "texture"_c;
    TextureSample_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSample_TextureCubeArray_texture.type.modifiers = TextureSample_TextureCubeArray_texture_modifiers;
    TextureSample_TextureCubeArray_texture.type.modifierValues = TextureSample_TextureCubeArray_texture_modifierValues;
    TextureSample_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSample_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_TextureCubeArray_sampler.type.modifiers = TextureSample_TextureCubeArray_sampler_modifiers;
    TextureSample_TextureCubeArray_sampler.type.modifierValues = TextureSample_TextureCubeArray_sampler_modifierValues;
    TextureSample_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSample_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSample_TextureCubeArray.documentation = "Sample a texture at coordinate"_c;
    TextureSample_TextureCubeArray.name = "textureSample"_c;
    TextureSample_TextureCubeArray.backendIndex = 2269;
    TextureSample_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_TextureCubeArray.parameters = TextureSample_TextureCubeArray_args;
    Symbol::Resolved(&TextureSample_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSample_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->signature = "f32x4 textureSample(uniform *textureCubeArray,uniform *sampler,f32x4)"_c;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->name = "textureSample(uniform *textureCubeArray,uniform *sampler,f32x4)"_c;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->nameWithVarNames = "textureSample(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : f32x4)"_c;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with SampledTextureCubeArray, Float32x4
    SampledTextureSample_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSample_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureSample_TextureCubeArray_texture.type.modifiers = SampledTextureSample_TextureCubeArray_texture_modifiers;
    SampledTextureSample_TextureCubeArray_texture.type.modifierValues = SampledTextureSample_TextureCubeArray_texture_modifierValues;
    SampledTextureSample_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSample_TextureCubeArray.documentation = "Sample a texture at coordinate"_c;
    SampledTextureSample_TextureCubeArray.name = "textureSample"_c;
    SampledTextureSample_TextureCubeArray.backendIndex = 2270;
    SampledTextureSample_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_TextureCubeArray.parameters = SampledTextureSample_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->signature = "f32x4 textureSample(uniform *textureSampledCubeArray,f32x4)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->name = "textureSample(uniform *textureSampledCubeArray,f32x4)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->nameWithVarNames = "textureSample(texture : uniform *textureSampledCubeArray, coordinate : f32x4)"_c;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture1D, Sampler, Float32, Float32
    TextureSampleOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleOffset_Texture1D_texture.type.modifiers = TextureSampleOffset_Texture1D_texture_modifiers;
    TextureSampleOffset_Texture1D_texture.type.modifierValues = TextureSampleOffset_Texture1D_texture_modifierValues;
    TextureSampleOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture1D_sampler.type.modifiers = TextureSampleOffset_Texture1D_sampler_modifiers;
    TextureSampleOffset_Texture1D_sampler.type.modifierValues = TextureSampleOffset_Texture1D_sampler_modifierValues;
    TextureSampleOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleOffset_Texture1D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture1D.name = "textureSampleOffset"_c;
    TextureSampleOffset_Texture1D.backendIndex = 2271;
    TextureSampleOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture1D.parameters = TextureSampleOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->signature = "f32x4 textureSampleOffset(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->name = "textureSampleOffset(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture1D, Float32, Float32
    SampledTextureSampleOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleOffset_Texture1D_texture.type.modifiers = SampledTextureSampleOffset_Texture1D_texture_modifiers;
    SampledTextureSampleOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleOffset_Texture1D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture1D.name = "textureSampleOffset"_c;
    SampledTextureSampleOffset_Texture1D.backendIndex = 2272;
    SampledTextureSampleOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture1D.parameters = SampledTextureSampleOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->signature = "f32x4 textureSampleOffset(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->name = "textureSampleOffset(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled1D, coordinate : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture2D, Sampler, Float32x2, Float32x2
    TextureSampleOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleOffset_Texture2D_texture.type.modifiers = TextureSampleOffset_Texture2D_texture_modifiers;
    TextureSampleOffset_Texture2D_texture.type.modifierValues = TextureSampleOffset_Texture2D_texture_modifierValues;
    TextureSampleOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture2D_sampler.type.modifiers = TextureSampleOffset_Texture2D_sampler_modifiers;
    TextureSampleOffset_Texture2D_sampler.type.modifierValues = TextureSampleOffset_Texture2D_sampler_modifierValues;
    TextureSampleOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture2D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture2D.name = "textureSampleOffset"_c;
    TextureSampleOffset_Texture2D.backendIndex = 2273;
    TextureSampleOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture2D.parameters = TextureSampleOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->signature = "f32x4 textureSampleOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->name = "textureSampleOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture2D, Float32x2, Float32x2
    SampledTextureSampleOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleOffset_Texture2D_texture.type.modifiers = SampledTextureSampleOffset_Texture2D_texture_modifiers;
    SampledTextureSampleOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture2D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture2D.name = "textureSampleOffset"_c;
    SampledTextureSampleOffset_Texture2D.backendIndex = 2274;
    SampledTextureSampleOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture2D.parameters = SampledTextureSampleOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->signature = "f32x4 textureSampleOffset(uniform *textureSampled2D,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->name = "textureSampleOffset(uniform *textureSampled2D,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled2D, coordinate : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture3D, Sampler, Float32x3, Float32x3
    TextureSampleOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleOffset_Texture3D_texture.type.modifiers = TextureSampleOffset_Texture3D_texture_modifiers;
    TextureSampleOffset_Texture3D_texture.type.modifierValues = TextureSampleOffset_Texture3D_texture_modifierValues;
    TextureSampleOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture3D_sampler.type.modifiers = TextureSampleOffset_Texture3D_sampler_modifiers;
    TextureSampleOffset_Texture3D_sampler.type.modifierValues = TextureSampleOffset_Texture3D_sampler_modifierValues;
    TextureSampleOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture3D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture3D.name = "textureSampleOffset"_c;
    TextureSampleOffset_Texture3D.backendIndex = 2275;
    TextureSampleOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture3D.parameters = TextureSampleOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->signature = "f32x4 textureSampleOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->name = "textureSampleOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture3D, Float32x3, Float32x3
    SampledTextureSampleOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleOffset_Texture3D_texture.type.modifiers = SampledTextureSampleOffset_Texture3D_texture_modifiers;
    SampledTextureSampleOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture3D.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture3D.name = "textureSampleOffset"_c;
    SampledTextureSampleOffset_Texture3D.backendIndex = 2276;
    SampledTextureSampleOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture3D.parameters = SampledTextureSampleOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->signature = "f32x4 textureSampleOffset(uniform *textureSampled3D,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->name = "textureSampleOffset(uniform *textureSampled3D,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled3D, coordinate : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture1DArray, Sampler, Float32x2, Float32x2
    TextureSampleOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleOffset_Texture1DArray_texture.type.modifiers = TextureSampleOffset_Texture1DArray_texture_modifiers;
    TextureSampleOffset_Texture1DArray_texture.type.modifierValues = TextureSampleOffset_Texture1DArray_texture_modifierValues;
    TextureSampleOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture1DArray_sampler.type.modifiers = TextureSampleOffset_Texture1DArray_sampler_modifiers;
    TextureSampleOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture1DArray.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture1DArray.name = "textureSampleOffset"_c;
    TextureSampleOffset_Texture1DArray.backendIndex = 2277;
    TextureSampleOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture1DArray.parameters = TextureSampleOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->signature = "f32x4 textureSampleOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->name = "textureSampleOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture1DArray, Float32x2, Float32x2
    SampledTextureSampleOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture1DArray.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture1DArray.name = "textureSampleOffset"_c;
    SampledTextureSampleOffset_Texture1DArray.backendIndex = 2278;
    SampledTextureSampleOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture1DArray.parameters = SampledTextureSampleOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->signature = "f32x4 textureSampleOffset(uniform *textureSampled1DArray,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->name = "textureSampleOffset(uniform *textureSampled1DArray,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture2DArray, Sampler, Float32x3, Float32x3
    TextureSampleOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleOffset_Texture2DArray_texture.type.modifiers = TextureSampleOffset_Texture2DArray_texture_modifiers;
    TextureSampleOffset_Texture2DArray_texture.type.modifierValues = TextureSampleOffset_Texture2DArray_texture_modifierValues;
    TextureSampleOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture2DArray_sampler.type.modifiers = TextureSampleOffset_Texture2DArray_sampler_modifiers;
    TextureSampleOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture2DArray.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    TextureSampleOffset_Texture2DArray.name = "textureSampleOffset"_c;
    TextureSampleOffset_Texture2DArray.backendIndex = 2279;
    TextureSampleOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture2DArray.parameters = TextureSampleOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->signature = "f32x4 textureSampleOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->name = "textureSampleOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->nameWithVarNames = "textureSampleOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with SampledTexture2DArray, Float32x3, Float32x3
    SampledTextureSampleOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture2DArray.documentation = "Sample a texture at coordinate with an offset applied to the coordinate"_c;
    SampledTextureSampleOffset_Texture2DArray.name = "textureSampleOffset"_c;
    SampledTextureSampleOffset_Texture2DArray.backendIndex = 2280;
    SampledTextureSampleOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture2DArray.parameters = SampledTextureSampleOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->signature = "f32x4 textureSampleOffset(uniform *textureSampled2DArray,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->name = "textureSampleOffset(uniform *textureSampled2DArray,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->nameWithVarNames = "textureSampleOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture1D, Sampler, Float32, Float32
    TextureSampleProj_Texture1D_texture.name = "texture"_c;
    TextureSampleProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProj_Texture1D_texture.type.modifiers = TextureSampleProj_Texture1D_texture_modifiers;
    TextureSampleProj_Texture1D_texture.type.modifierValues = TextureSampleProj_Texture1D_texture_modifierValues;
    TextureSampleProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture1D_sampler.type.modifiers = TextureSampleProj_Texture1D_sampler_modifiers;
    TextureSampleProj_Texture1D_sampler.type.modifierValues = TextureSampleProj_Texture1D_sampler_modifierValues;
    TextureSampleProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture1D_proj.name = "proj"_c;
    TextureSampleProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture1D.documentation = "Sample a texture at coordinate with projection"_c;
    TextureSampleProj_Texture1D.name = "textureSampleProj"_c;
    TextureSampleProj_Texture1D.backendIndex = 2281;
    TextureSampleProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProj_Texture1D.parameters = TextureSampleProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->signature = "f32x4 textureSampleProj(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->name = "textureSampleProj(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->nameWithVarNames = "textureSampleProj(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with SampledTexture1D, Float32, Float32
    SampledTextureSampleProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleProj_Texture1D_texture.type.modifiers = SampledTextureSampleProj_Texture1D_texture_modifiers;
    SampledTextureSampleProj_Texture1D_texture.type.modifierValues = SampledTextureSampleProj_Texture1D_texture_modifierValues;
    SampledTextureSampleProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture1D.documentation = "Sample a texture at coordinate with projection"_c;
    SampledTextureSampleProj_Texture1D.name = "textureSampleProj"_c;
    SampledTextureSampleProj_Texture1D.backendIndex = 2282;
    SampledTextureSampleProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProj_Texture1D.parameters = SampledTextureSampleProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->signature = "f32x4 textureSampleProj(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->name = "textureSampleProj(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->nameWithVarNames = "textureSampleProj(texture : uniform *textureSampled1D, coordinate : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture2D, Sampler, Float32x2, Float32
    TextureSampleProj_Texture2D_texture.name = "texture"_c;
    TextureSampleProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProj_Texture2D_texture.type.modifiers = TextureSampleProj_Texture2D_texture_modifiers;
    TextureSampleProj_Texture2D_texture.type.modifierValues = TextureSampleProj_Texture2D_texture_modifierValues;
    TextureSampleProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture2D_sampler.type.modifiers = TextureSampleProj_Texture2D_sampler_modifiers;
    TextureSampleProj_Texture2D_sampler.type.modifierValues = TextureSampleProj_Texture2D_sampler_modifierValues;
    TextureSampleProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProj_Texture2D_proj.name = "proj"_c;
    TextureSampleProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture2D.documentation = "Sample a texture at coordinate with projection"_c;
    TextureSampleProj_Texture2D.name = "textureSampleProj"_c;
    TextureSampleProj_Texture2D.backendIndex = 2283;
    TextureSampleProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProj_Texture2D.parameters = TextureSampleProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->signature = "f32x4 textureSampleProj(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->name = "textureSampleProj(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->nameWithVarNames = "textureSampleProj(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with SampledTexture2D, Float32x2, Float32
    SampledTextureSampleProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleProj_Texture2D_texture.type.modifiers = SampledTextureSampleProj_Texture2D_texture_modifiers;
    SampledTextureSampleProj_Texture2D_texture.type.modifierValues = SampledTextureSampleProj_Texture2D_texture_modifierValues;
    SampledTextureSampleProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture2D.documentation = "Sample a texture at coordinate with projection"_c;
    SampledTextureSampleProj_Texture2D.name = "textureSampleProj"_c;
    SampledTextureSampleProj_Texture2D.backendIndex = 2284;
    SampledTextureSampleProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProj_Texture2D.parameters = SampledTextureSampleProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->signature = "f32x4 textureSampleProj(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->name = "textureSampleProj(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->nameWithVarNames = "textureSampleProj(texture : uniform *textureSampled2D, coordinate : f32x2, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture3D, Sampler, Float32x3, Float32
    TextureSampleProj_Texture3D_texture.name = "texture"_c;
    TextureSampleProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProj_Texture3D_texture.type.modifiers = TextureSampleProj_Texture3D_texture_modifiers;
    TextureSampleProj_Texture3D_texture.type.modifierValues = TextureSampleProj_Texture3D_texture_modifierValues;
    TextureSampleProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture3D_sampler.type.modifiers = TextureSampleProj_Texture3D_sampler_modifiers;
    TextureSampleProj_Texture3D_sampler.type.modifierValues = TextureSampleProj_Texture3D_sampler_modifierValues;
    TextureSampleProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProj_Texture3D_proj.name = "proj"_c;
    TextureSampleProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture3D.documentation = "Sample a texture at coordinate with projection"_c;
    TextureSampleProj_Texture3D.name = "textureSampleProj"_c;
    TextureSampleProj_Texture3D.backendIndex = 2285;
    TextureSampleProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProj_Texture3D.parameters = TextureSampleProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->signature = "f32x4 textureSampleProj(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->name = "textureSampleProj(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->nameWithVarNames = "textureSampleProj(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with SampledTexture3D, Float32x3, Float32
    SampledTextureSampleProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleProj_Texture3D_texture.type.modifiers = SampledTextureSampleProj_Texture3D_texture_modifiers;
    SampledTextureSampleProj_Texture3D_texture.type.modifierValues = SampledTextureSampleProj_Texture3D_texture_modifierValues;
    SampledTextureSampleProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture3D.documentation = "Sample a texture at coordinate with projection"_c;
    SampledTextureSampleProj_Texture3D.name = "textureSampleProj"_c;
    SampledTextureSampleProj_Texture3D.backendIndex = 2286;
    SampledTextureSampleProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProj_Texture3D.parameters = SampledTextureSampleProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->signature = "f32x4 textureSampleProj(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->name = "textureSampleProj(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->nameWithVarNames = "textureSampleProj(texture : uniform *textureSampled3D, coordinate : f32x3, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProjOffset_Texture1D_texture.type.modifiers = TextureSampleProjOffset_Texture1D_texture_modifiers;
    TextureSampleProjOffset_Texture1D_texture.type.modifierValues = TextureSampleProjOffset_Texture1D_texture_modifierValues;
    TextureSampleProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjOffset_Texture1D_sampler.type.modifiers = TextureSampleProjOffset_Texture1D_sampler_modifiers;
    TextureSampleProjOffset_Texture1D_sampler.type.modifierValues = TextureSampleProjOffset_Texture1D_sampler_modifierValues;
    TextureSampleProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture1D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    TextureSampleProjOffset_Texture1D.name = "textureSampleProjOffset"_c;
    TextureSampleProjOffset_Texture1D.backendIndex = 2287;
    TextureSampleProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjOffset_Texture1D.parameters = TextureSampleProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->signature = "f32x4 textureSampleProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->name = "textureSampleProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProjOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleProjOffset_Texture1D_texture.type.modifiers = SampledTextureSampleProjOffset_Texture1D_texture_modifiers;
    SampledTextureSampleProjOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleProjOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture1D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleProjOffset_Texture1D.name = "textureSampleProjOffset"_c;
    SampledTextureSampleProjOffset_Texture1D.backendIndex = 2288;
    SampledTextureSampleProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjOffset_Texture1D.parameters = SampledTextureSampleProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->signature = "f32x4 textureSampleProjOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->name = "textureSampleProjOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *textureSampled1D, coordinate : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProjOffset_Texture2D_texture.type.modifiers = TextureSampleProjOffset_Texture2D_texture_modifiers;
    TextureSampleProjOffset_Texture2D_texture.type.modifierValues = TextureSampleProjOffset_Texture2D_texture_modifierValues;
    TextureSampleProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjOffset_Texture2D_sampler.type.modifiers = TextureSampleProjOffset_Texture2D_sampler_modifiers;
    TextureSampleProjOffset_Texture2D_sampler.type.modifierValues = TextureSampleProjOffset_Texture2D_sampler_modifierValues;
    TextureSampleProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjOffset_Texture2D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    TextureSampleProjOffset_Texture2D.name = "textureSampleProjOffset"_c;
    TextureSampleProjOffset_Texture2D.backendIndex = 2289;
    TextureSampleProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjOffset_Texture2D.parameters = TextureSampleProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->signature = "f32x4 textureSampleProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->name = "textureSampleProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with SampledTexture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProjOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleProjOffset_Texture2D_texture.type.modifiers = SampledTextureSampleProjOffset_Texture2D_texture_modifiers;
    SampledTextureSampleProjOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleProjOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjOffset_Texture2D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleProjOffset_Texture2D.name = "textureSampleProjOffset"_c;
    SampledTextureSampleProjOffset_Texture2D.backendIndex = 2290;
    SampledTextureSampleProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjOffset_Texture2D.parameters = SampledTextureSampleProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->signature = "f32x4 textureSampleProjOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->name = "textureSampleProjOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *textureSampled2D, coordinate : f32x2, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProjOffset_Texture3D_texture.type.modifiers = TextureSampleProjOffset_Texture3D_texture_modifiers;
    TextureSampleProjOffset_Texture3D_texture.type.modifierValues = TextureSampleProjOffset_Texture3D_texture_modifierValues;
    TextureSampleProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjOffset_Texture3D_sampler.type.modifiers = TextureSampleProjOffset_Texture3D_sampler_modifiers;
    TextureSampleProjOffset_Texture3D_sampler.type.modifierValues = TextureSampleProjOffset_Texture3D_sampler_modifierValues;
    TextureSampleProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjOffset_Texture3D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    TextureSampleProjOffset_Texture3D.name = "textureSampleProjOffset"_c;
    TextureSampleProjOffset_Texture3D.backendIndex = 2291;
    TextureSampleProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjOffset_Texture3D.parameters = TextureSampleProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->signature = "f32x4 textureSampleProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->name = "textureSampleProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with SampledTexture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProjOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleProjOffset_Texture3D_texture.type.modifiers = SampledTextureSampleProjOffset_Texture3D_texture_modifiers;
    SampledTextureSampleProjOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleProjOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjOffset_Texture3D.documentation = "Sample a texture at coordinate with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleProjOffset_Texture3D.name = "textureSampleProjOffset"_c;
    SampledTextureSampleProjOffset_Texture3D.backendIndex = 2292;
    SampledTextureSampleProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjOffset_Texture3D.parameters = SampledTextureSampleProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->signature = "f32x4 textureSampleProjOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->name = "textureSampleProjOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->nameWithVarNames = "textureSampleProjOffset(texture : uniform *textureSampled3D, coordinate : f32x3, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture1D, Sampler, Float32, Float32
    TextureSampleCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleCompare_Texture1D_texture.type.modifiers = TextureSampleCompare_Texture1D_texture_modifiers;
    TextureSampleCompare_Texture1D_texture.type.modifierValues = TextureSampleCompare_Texture1D_texture_modifierValues;
    TextureSampleCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture1D_sampler.type.modifiers = TextureSampleCompare_Texture1D_sampler_modifiers;
    TextureSampleCompare_Texture1D_sampler.type.modifierValues = TextureSampleCompare_Texture1D_sampler_modifierValues;
    TextureSampleCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture1D.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture1D.backendIndex = 2293;
    TextureSampleCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture1D.parameters = TextureSampleCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->signature = "f32 textureSampleCompare(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->name = "textureSampleCompare(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture1D, Float32, Float32
    SampledTextureSampleCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleCompare_Texture1D_texture.type.modifiers = SampledTextureSampleCompare_Texture1D_texture_modifiers;
    SampledTextureSampleCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture1D.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture1D.backendIndex = 2294;
    SampledTextureSampleCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture1D.parameters = SampledTextureSampleCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->signature = "f32 textureSampleCompare(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->name = "textureSampleCompare(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled1D, coordinate : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with Texture2D, Sampler, Float32x2, Float32
    TextureSampleCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleCompare_Texture2D_texture.type.modifiers = TextureSampleCompare_Texture2D_texture_modifiers;
    TextureSampleCompare_Texture2D_texture.type.modifierValues = TextureSampleCompare_Texture2D_texture_modifierValues;
    TextureSampleCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture2D_sampler.type.modifiers = TextureSampleCompare_Texture2D_sampler_modifiers;
    TextureSampleCompare_Texture2D_sampler.type.modifierValues = TextureSampleCompare_Texture2D_sampler_modifierValues;
    TextureSampleCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture2D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture2D.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture2D.backendIndex = 2295;
    TextureSampleCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture2D.parameters = TextureSampleCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->signature = "f32 textureSampleCompare(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->name = "textureSampleCompare(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture2D, Float32x2, Float32
    SampledTextureSampleCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleCompare_Texture2D_texture.type.modifiers = SampledTextureSampleCompare_Texture2D_texture_modifiers;
    SampledTextureSampleCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture2D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture2D.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture2D.backendIndex = 2296;
    SampledTextureSampleCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture2D.parameters = SampledTextureSampleCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->signature = "f32 textureSampleCompare(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->name = "textureSampleCompare(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled2D, coordinate : f32x2, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with Texture3D, Sampler, Float32x3, Float32
    TextureSampleCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleCompare_Texture3D_texture.type.modifiers = TextureSampleCompare_Texture3D_texture_modifiers;
    TextureSampleCompare_Texture3D_texture.type.modifierValues = TextureSampleCompare_Texture3D_texture_modifierValues;
    TextureSampleCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture3D_sampler.type.modifiers = TextureSampleCompare_Texture3D_sampler_modifiers;
    TextureSampleCompare_Texture3D_sampler.type.modifierValues = TextureSampleCompare_Texture3D_sampler_modifierValues;
    TextureSampleCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture3D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture3D.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture3D.backendIndex = 2297;
    TextureSampleCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture3D.parameters = TextureSampleCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->signature = "f32 textureSampleCompare(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->name = "textureSampleCompare(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture3D, Float32x3, Float32
    SampledTextureSampleCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleCompare_Texture3D_texture.type.modifiers = SampledTextureSampleCompare_Texture3D_texture_modifiers;
    SampledTextureSampleCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture3D.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture3D.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture3D.backendIndex = 2298;
    SampledTextureSampleCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture3D.parameters = SampledTextureSampleCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->signature = "f32 textureSampleCompare(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->name = "textureSampleCompare(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled3D, coordinate : f32x3, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with Texture1DArray, Sampler, Float32x2, Float32
    TextureSampleCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleCompare_Texture1DArray_texture.type.modifiers = TextureSampleCompare_Texture1DArray_texture_modifiers;
    TextureSampleCompare_Texture1DArray_texture.type.modifierValues = TextureSampleCompare_Texture1DArray_texture_modifierValues;
    TextureSampleCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture1DArray_sampler.type.modifiers = TextureSampleCompare_Texture1DArray_sampler_modifiers;
    TextureSampleCompare_Texture1DArray_sampler.type.modifierValues = TextureSampleCompare_Texture1DArray_sampler_modifierValues;
    TextureSampleCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1DArray.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture1DArray.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture1DArray.backendIndex = 2299;
    TextureSampleCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture1DArray.parameters = TextureSampleCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->signature = "f32 textureSampleCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->name = "textureSampleCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture1DArray, Float32x2, Float32
    SampledTextureSampleCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleCompare_Texture1DArray_texture.type.modifiers = SampledTextureSampleCompare_Texture1DArray_texture_modifiers;
    SampledTextureSampleCompare_Texture1DArray_texture.type.modifierValues = SampledTextureSampleCompare_Texture1DArray_texture_modifierValues;
    SampledTextureSampleCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1DArray.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture1DArray.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture1DArray.backendIndex = 2300;
    SampledTextureSampleCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture1DArray.parameters = SampledTextureSampleCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->signature = "f32 textureSampleCompare(uniform *textureSampled1DArray,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->name = "textureSampleCompare(uniform *textureSampled1DArray,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled1DArray, coordinate : f32x2, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with Texture2DArray, Sampler, Float32x3, Float32
    TextureSampleCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleCompare_Texture2DArray_texture.type.modifiers = TextureSampleCompare_Texture2DArray_texture_modifiers;
    TextureSampleCompare_Texture2DArray_texture.type.modifierValues = TextureSampleCompare_Texture2DArray_texture_modifierValues;
    TextureSampleCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture2DArray_sampler.type.modifiers = TextureSampleCompare_Texture2DArray_sampler_modifiers;
    TextureSampleCompare_Texture2DArray_sampler.type.modifierValues = TextureSampleCompare_Texture2DArray_sampler_modifierValues;
    TextureSampleCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture2DArray.documentation = "Sample a texture at coordinate with depth comparison"_c;
    TextureSampleCompare_Texture2DArray.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture2DArray.backendIndex = 2301;
    TextureSampleCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompare_Texture2DArray.parameters = TextureSampleCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->signature = "f32 textureSampleCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->name = "textureSampleCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->nameWithVarNames = "textureSampleCompare(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompare with SampledTexture2DArray, Float32x3, Float32
    SampledTextureSampleCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleCompare_Texture2DArray_texture.type.modifiers = SampledTextureSampleCompare_Texture2DArray_texture_modifiers;
    SampledTextureSampleCompare_Texture2DArray_texture.type.modifierValues = SampledTextureSampleCompare_Texture2DArray_texture_modifierValues;
    SampledTextureSampleCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture2DArray.documentation = "Sample a texture at coordinate with depth comparison"_c;
    SampledTextureSampleCompare_Texture2DArray.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture2DArray.backendIndex = 2302;
    SampledTextureSampleCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompare_Texture2DArray.parameters = SampledTextureSampleCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->signature = "f32 textureSampleCompare(uniform *textureSampled2DArray,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->name = "textureSampleCompare(uniform *textureSampled2DArray,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->nameWithVarNames = "textureSampleCompare(texture : uniform *textureSampled2DArray, coordinate : f32x3, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleCompareOffset_Texture1D_texture.type.modifiers = TextureSampleCompareOffset_Texture1D_texture_modifiers;
    TextureSampleCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture1D.name = "textureSampleCompareOffset"_c;
    TextureSampleCompareOffset_Texture1D.backendIndex = 2303;
    TextureSampleCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture1D.parameters = TextureSampleCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->signature = "f32 textureSampleCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->name = "textureSampleCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1D.name = "textureSampleCompareOffset"_c;
    SampledTextureSampleCompareOffset_Texture1D.backendIndex = 2304;
    SampledTextureSampleCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D.parameters = SampledTextureSampleCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->signature = "f32 textureSampleCompareOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->name = "textureSampleCompareOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleCompareOffset_Texture2D_texture.type.modifiers = TextureSampleCompareOffset_Texture2D_texture_modifiers;
    TextureSampleCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture2D.name = "textureSampleCompareOffset"_c;
    TextureSampleCompareOffset_Texture2D.backendIndex = 2305;
    TextureSampleCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture2D.parameters = TextureSampleCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->signature = "f32 textureSampleCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->name = "textureSampleCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2D.name = "textureSampleCompareOffset"_c;
    SampledTextureSampleCompareOffset_Texture2D.backendIndex = 2306;
    SampledTextureSampleCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2D.parameters = SampledTextureSampleCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->signature = "f32 textureSampleCompareOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->name = "textureSampleCompareOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleCompareOffset_Texture3D_texture.type.modifiers = TextureSampleCompareOffset_Texture3D_texture_modifiers;
    TextureSampleCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture3D.name = "textureSampleCompareOffset"_c;
    TextureSampleCompareOffset_Texture3D.backendIndex = 2307;
    TextureSampleCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture3D.parameters = TextureSampleCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->signature = "f32 textureSampleCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->name = "textureSampleCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture3D.name = "textureSampleCompareOffset"_c;
    SampledTextureSampleCompareOffset_Texture3D.backendIndex = 2308;
    SampledTextureSampleCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture3D.parameters = SampledTextureSampleCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->signature = "f32 textureSampleCompareOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->name = "textureSampleCompareOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
    TextureSampleCompareOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleCompareOffset_Texture1DArray_texture.type.modifiers = TextureSampleCompareOffset_Texture1DArray_texture_modifiers;
    TextureSampleCompareOffset_Texture1DArray_texture.type.modifierValues = TextureSampleCompareOffset_Texture1DArray_texture_modifierValues;
    TextureSampleCompareOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture1DArray_sampler.type.modifiers = TextureSampleCompareOffset_Texture1DArray_sampler_modifiers;
    TextureSampleCompareOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleCompareOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture1DArray_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture1DArray.name = "textureSampleCompareOffset"_c;
    TextureSampleCompareOffset_Texture1DArray.backendIndex = 2309;
    TextureSampleCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture1DArray.parameters = TextureSampleCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->signature = "f32 textureSampleCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->name = "textureSampleCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
    SampledTextureSampleCompareOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleCompareOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1DArray.name = "textureSampleCompareOffset"_c;
    SampledTextureSampleCompareOffset_Texture1DArray.backendIndex = 2310;
    SampledTextureSampleCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray.parameters = SampledTextureSampleCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->signature = "f32 textureSampleCompareOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->name = "textureSampleCompareOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
    TextureSampleCompareOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleCompareOffset_Texture2DArray_texture.type.modifiers = TextureSampleCompareOffset_Texture2DArray_texture_modifiers;
    TextureSampleCompareOffset_Texture2DArray_texture.type.modifierValues = TextureSampleCompareOffset_Texture2DArray_texture_modifierValues;
    TextureSampleCompareOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture2DArray_sampler.type.modifiers = TextureSampleCompareOffset_Texture2DArray_sampler_modifiers;
    TextureSampleCompareOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleCompareOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture2DArray_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleCompareOffset_Texture2DArray.name = "textureSampleCompareOffset"_c;
    TextureSampleCompareOffset_Texture2DArray.backendIndex = 2311;
    TextureSampleCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleCompareOffset_Texture2DArray.parameters = TextureSampleCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->signature = "f32 textureSampleCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->name = "textureSampleCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleCompareOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
    SampledTextureSampleCompareOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleCompareOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleCompareOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleCompareOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleCompareOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2DArray.name = "textureSampleCompareOffset"_c;
    SampledTextureSampleCompareOffset_Texture2DArray.backendIndex = 2312;
    SampledTextureSampleCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray.parameters = SampledTextureSampleCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->signature = "f32 textureSampleCompareOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->name = "textureSampleCompareOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleCompareOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProjCompare_Texture1D_texture.type.modifiers = TextureSampleProjCompare_Texture1D_texture_modifiers;
    TextureSampleProjCompare_Texture1D_texture.type.modifierValues = TextureSampleProjCompare_Texture1D_texture_modifierValues;
    TextureSampleProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture1D_sampler.type.modifiers = TextureSampleProjCompare_Texture1D_sampler_modifiers;
    TextureSampleProjCompare_Texture1D_sampler.type.modifierValues = TextureSampleProjCompare_Texture1D_sampler_modifierValues;
    TextureSampleProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    TextureSampleProjCompare_Texture1D.name = "textureSampleProjCompare"_c;
    TextureSampleProjCompare_Texture1D.backendIndex = 2313;
    TextureSampleProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompare_Texture1D.parameters = TextureSampleProjCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->signature = "f32 textureSampleProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->name = "textureSampleProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleProjCompare_Texture1D_texture.type.modifiers = SampledTextureSampleProjCompare_Texture1D_texture_modifiers;
    SampledTextureSampleProjCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleProjCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    SampledTextureSampleProjCompare_Texture1D.name = "textureSampleProjCompare"_c;
    SampledTextureSampleProjCompare_Texture1D.backendIndex = 2314;
    SampledTextureSampleProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D.parameters = SampledTextureSampleProjCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->signature = "f32 textureSampleProjCompare(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->name = "textureSampleProjCompare(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *textureSampled1D, coordinate : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProjCompare_Texture2D_texture.type.modifiers = TextureSampleProjCompare_Texture2D_texture_modifiers;
    TextureSampleProjCompare_Texture2D_texture.type.modifierValues = TextureSampleProjCompare_Texture2D_texture_modifierValues;
    TextureSampleProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture2D_sampler.type.modifiers = TextureSampleProjCompare_Texture2D_sampler_modifiers;
    TextureSampleProjCompare_Texture2D_sampler.type.modifierValues = TextureSampleProjCompare_Texture2D_sampler_modifierValues;
    TextureSampleProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture2D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    TextureSampleProjCompare_Texture2D.name = "textureSampleProjCompare"_c;
    TextureSampleProjCompare_Texture2D.backendIndex = 2315;
    TextureSampleProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompare_Texture2D.parameters = TextureSampleProjCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->signature = "f32 textureSampleProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->name = "textureSampleProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with SampledTexture2D, Float32x2, Float32, Float32
    SampledTextureSampleProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleProjCompare_Texture2D_texture.type.modifiers = SampledTextureSampleProjCompare_Texture2D_texture_modifiers;
    SampledTextureSampleProjCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleProjCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    SampledTextureSampleProjCompare_Texture2D.name = "textureSampleProjCompare"_c;
    SampledTextureSampleProjCompare_Texture2D.backendIndex = 2316;
    SampledTextureSampleProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D.parameters = SampledTextureSampleProjCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->signature = "f32 textureSampleProjCompare(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->name = "textureSampleProjCompare(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *textureSampled2D, coordinate : f32x2, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProjCompare_Texture3D_texture.type.modifiers = TextureSampleProjCompare_Texture3D_texture_modifiers;
    TextureSampleProjCompare_Texture3D_texture.type.modifierValues = TextureSampleProjCompare_Texture3D_texture_modifierValues;
    TextureSampleProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture3D_sampler.type.modifiers = TextureSampleProjCompare_Texture3D_sampler_modifiers;
    TextureSampleProjCompare_Texture3D_sampler.type.modifierValues = TextureSampleProjCompare_Texture3D_sampler_modifierValues;
    TextureSampleProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture3D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    TextureSampleProjCompare_Texture3D.name = "textureSampleProjCompare"_c;
    TextureSampleProjCompare_Texture3D.backendIndex = 2317;
    TextureSampleProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompare_Texture3D.parameters = TextureSampleProjCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D)->signature = "f32 textureSampleProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D)->name = "textureSampleProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompare with SampledTexture3D, Float32x3, Float32, Float32
    SampledTextureSampleProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleProjCompare_Texture3D_texture.type.modifiers = SampledTextureSampleProjCompare_Texture3D_texture_modifiers;
    SampledTextureSampleProjCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleProjCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture3D.documentation = "Sample a texture at coordinate with projection with depth comparison"_c;
    SampledTextureSampleProjCompare_Texture3D.name = "textureSampleProjCompare"_c;
    SampledTextureSampleProjCompare_Texture3D.backendIndex = 2318;
    SampledTextureSampleProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompare_Texture3D.parameters = SampledTextureSampleProjCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D)->signature = "f32 textureSampleProjCompare(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D)->name = "textureSampleProjCompare(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D)->nameWithVarNames = "textureSampleProjCompare(texture : uniform *textureSampled3D, coordinate : f32x3, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleProjCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProjCompareOffset_Texture1D_texture.type.modifiers = TextureSampleProjCompareOffset_Texture1D_texture_modifiers;
    TextureSampleProjCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleProjCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleProjCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProjCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleProjCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleProjCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleProjCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleProjCompareOffset_Texture1D.name = "textureSampleProjCompareOffset"_c;
    TextureSampleProjCompareOffset_Texture1D.backendIndex = 2319;
    TextureSampleProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D.parameters = TextureSampleProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D)->signature = "f32 textureSampleProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D)->name = "textureSampleProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleProjCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleProjCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleProjCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleProjCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleProjCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleProjCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture1D.name = "textureSampleProjCompareOffset"_c;
    SampledTextureSampleProjCompareOffset_Texture1D.backendIndex = 2320;
    SampledTextureSampleProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D.parameters = SampledTextureSampleProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D)->signature = "f32 textureSampleProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D)->name = "textureSampleProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleProjCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleProjCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProjCompareOffset_Texture2D_texture.type.modifiers = TextureSampleProjCompareOffset_Texture2D_texture_modifiers;
    TextureSampleProjCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleProjCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleProjCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProjCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleProjCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleProjCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleProjCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjCompareOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleProjCompareOffset_Texture2D.name = "textureSampleProjCompareOffset"_c;
    TextureSampleProjCompareOffset_Texture2D.backendIndex = 2321;
    TextureSampleProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompareOffset_Texture2D.parameters = TextureSampleProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D)->signature = "f32 textureSampleProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D)->name = "textureSampleProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleProjCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleProjCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleProjCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleProjCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleProjCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleProjCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture2D.name = "textureSampleProjCompareOffset"_c;
    SampledTextureSampleProjCompareOffset_Texture2D.backendIndex = 2322;
    SampledTextureSampleProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D.parameters = SampledTextureSampleProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D)->signature = "f32 textureSampleProjCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D)->name = "textureSampleProjCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleProjCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleProjCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProjCompareOffset_Texture3D_texture.type.modifiers = TextureSampleProjCompareOffset_Texture3D_texture_modifiers;
    TextureSampleProjCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleProjCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleProjCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProjCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleProjCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleProjCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleProjCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjCompareOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleProjCompareOffset_Texture3D.name = "textureSampleProjCompareOffset"_c;
    TextureSampleProjCompareOffset_Texture3D.backendIndex = 2323;
    TextureSampleProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleProjCompareOffset_Texture3D.parameters = TextureSampleProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D)->signature = "f32 textureSampleProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D)->name = "textureSampleProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleProjCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleProjCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleProjCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleProjCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleProjCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleProjCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleProjCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture3D.name = "textureSampleProjCompareOffset"_c;
    SampledTextureSampleProjCompareOffset_Texture3D.backendIndex = 2324;
    SampledTextureSampleProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D.parameters = SampledTextureSampleProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D)->signature = "f32 textureSampleProjCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D)->name = "textureSampleProjCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleProjCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLod with Texture1D, Sampler, Float32, Float32
    TextureSampleLod_Texture1D_texture.name = "texture"_c;
    TextureSampleLod_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLod_Texture1D_texture.type.modifiers = TextureSampleLod_Texture1D_texture_modifiers;
    TextureSampleLod_Texture1D_texture.type.modifierValues = TextureSampleLod_Texture1D_texture_modifierValues;
    TextureSampleLod_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLod_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture1D_sampler.type.modifiers = TextureSampleLod_Texture1D_sampler_modifiers;
    TextureSampleLod_Texture1D_sampler.type.modifierValues = TextureSampleLod_Texture1D_sampler_modifierValues;
    TextureSampleLod_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture1D_lod.name = "lod"_c;
    TextureSampleLod_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_Texture1D.name = "textureSampleLod"_c;
    TextureSampleLod_Texture1D.backendIndex = 2325;
    TextureSampleLod_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture1D.parameters = TextureSampleLod_Texture1D_args;
    Symbol::Resolved(&TextureSampleLod_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLod_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture1D)->signature = "f32x4 textureSampleLod(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture1D)->name = "textureSampleLod(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture1D)->nameWithVarNames = "textureSampleLod(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTexture1D, Float32, Float32
    SampledTextureSampleLod_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLod_Texture1D_texture.type.modifiers = SampledTextureSampleLod_Texture1D_texture_modifiers;
    SampledTextureSampleLod_Texture1D_texture.type.modifierValues = SampledTextureSampleLod_Texture1D_texture_modifierValues;
    SampledTextureSampleLod_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_Texture1D.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture1D.backendIndex = 2326;
    SampledTextureSampleLod_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture1D.parameters = SampledTextureSampleLod_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D)->signature = "f32x4 textureSampleLod(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D)->name = "textureSampleLod(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampled1D, coordinate : f32, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture2D, Sampler, Float32x2, Float32
    TextureSampleLod_Texture2D_texture.name = "texture"_c;
    TextureSampleLod_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLod_Texture2D_texture.type.modifiers = TextureSampleLod_Texture2D_texture_modifiers;
    TextureSampleLod_Texture2D_texture.type.modifierValues = TextureSampleLod_Texture2D_texture_modifierValues;
    TextureSampleLod_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLod_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture2D_sampler.type.modifiers = TextureSampleLod_Texture2D_sampler_modifiers;
    TextureSampleLod_Texture2D_sampler.type.modifierValues = TextureSampleLod_Texture2D_sampler_modifierValues;
    TextureSampleLod_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLod_Texture2D_lod.name = "lod"_c;
    TextureSampleLod_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_Texture2D.name = "textureSampleLod"_c;
    TextureSampleLod_Texture2D.backendIndex = 2327;
    TextureSampleLod_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture2D.parameters = TextureSampleLod_Texture2D_args;
    Symbol::Resolved(&TextureSampleLod_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLod_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLod_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture2D)->signature = "f32x4 textureSampleLod(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture2D)->name = "textureSampleLod(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture2D)->nameWithVarNames = "textureSampleLod(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTexture2D, Float32x2, Float32
    SampledTextureSampleLod_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLod_Texture2D_texture.type.modifiers = SampledTextureSampleLod_Texture2D_texture_modifiers;
    SampledTextureSampleLod_Texture2D_texture.type.modifierValues = SampledTextureSampleLod_Texture2D_texture_modifierValues;
    SampledTextureSampleLod_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLod_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_Texture2D.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture2D.backendIndex = 2328;
    SampledTextureSampleLod_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture2D.parameters = SampledTextureSampleLod_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D)->signature = "f32x4 textureSampleLod(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D)->name = "textureSampleLod(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture3D, Sampler, Float32x3, Float32
    TextureSampleLod_Texture3D_texture.name = "texture"_c;
    TextureSampleLod_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLod_Texture3D_texture.type.modifiers = TextureSampleLod_Texture3D_texture_modifiers;
    TextureSampleLod_Texture3D_texture.type.modifierValues = TextureSampleLod_Texture3D_texture_modifierValues;
    TextureSampleLod_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLod_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture3D_sampler.type.modifiers = TextureSampleLod_Texture3D_sampler_modifiers;
    TextureSampleLod_Texture3D_sampler.type.modifierValues = TextureSampleLod_Texture3D_sampler_modifierValues;
    TextureSampleLod_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLod_Texture3D_lod.name = "lod"_c;
    TextureSampleLod_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_Texture3D.name = "textureSampleLod"_c;
    TextureSampleLod_Texture3D.backendIndex = 2329;
    TextureSampleLod_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture3D.parameters = TextureSampleLod_Texture3D_args;
    Symbol::Resolved(&TextureSampleLod_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLod_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLod_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture3D)->signature = "f32x4 textureSampleLod(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture3D)->name = "textureSampleLod(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture3D)->nameWithVarNames = "textureSampleLod(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTexture3D, Float32x3, Float32
    SampledTextureSampleLod_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLod_Texture3D_texture.type.modifiers = SampledTextureSampleLod_Texture3D_texture_modifiers;
    SampledTextureSampleLod_Texture3D_texture.type.modifierValues = SampledTextureSampleLod_Texture3D_texture_modifierValues;
    SampledTextureSampleLod_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLod_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_Texture3D.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture3D.backendIndex = 2330;
    SampledTextureSampleLod_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture3D.parameters = SampledTextureSampleLod_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D)->signature = "f32x4 textureSampleLod(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D)->name = "textureSampleLod(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with TextureCube, Sampler, Float32x3, Float32
    TextureSampleLod_TextureCube_texture.name = "texture"_c;
    TextureSampleLod_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSampleLod_TextureCube_texture.type.modifiers = TextureSampleLod_TextureCube_texture_modifiers;
    TextureSampleLod_TextureCube_texture.type.modifierValues = TextureSampleLod_TextureCube_texture_modifierValues;
    TextureSampleLod_TextureCube_sampler.name = "sampler"_c;
    TextureSampleLod_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_TextureCube_sampler.type.modifiers = TextureSampleLod_TextureCube_sampler_modifiers;
    TextureSampleLod_TextureCube_sampler.type.modifierValues = TextureSampleLod_TextureCube_sampler_modifierValues;
    TextureSampleLod_TextureCube_coordinate.name = "coordinate"_c;
    TextureSampleLod_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLod_TextureCube_lod.name = "lod"_c;
    TextureSampleLod_TextureCube_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_TextureCube.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_TextureCube.name = "textureSampleLod"_c;
    TextureSampleLod_TextureCube.backendIndex = 2331;
    TextureSampleLod_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_TextureCube.parameters = TextureSampleLod_TextureCube_args;
    Symbol::Resolved(&TextureSampleLod_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSampleLod_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLod_TextureCube_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_TextureCube)->signature = "f32x4 textureSampleLod(uniform *textureCube,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_TextureCube)->name = "textureSampleLod(uniform *textureCube,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_TextureCube)->nameWithVarNames = "textureSampleLod(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : f32x3, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTextureCube, Float32x3, Float32
    SampledTextureSampleLod_TextureCube_texture.name = "texture"_c;
    SampledTextureSampleLod_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureSampleLod_TextureCube_texture.type.modifiers = SampledTextureSampleLod_TextureCube_texture_modifiers;
    SampledTextureSampleLod_TextureCube_texture.type.modifierValues = SampledTextureSampleLod_TextureCube_texture_modifierValues;
    SampledTextureSampleLod_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLod_TextureCube_lod.name = "lod"_c;
    SampledTextureSampleLod_TextureCube_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_TextureCube.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_TextureCube.name = "textureSampleLod"_c;
    SampledTextureSampleLod_TextureCube.backendIndex = 2332;
    SampledTextureSampleLod_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_TextureCube.parameters = SampledTextureSampleLod_TextureCube_args;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube)->signature = "f32x4 textureSampleLod(uniform *textureSampledCube,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube)->name = "textureSampleLod(uniform *textureSampledCube,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampledCube, coordinate : f32x3, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture1DArray, Sampler, Float32x2, Float32
    TextureSampleLod_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLod_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLod_Texture1DArray_texture.type.modifiers = TextureSampleLod_Texture1DArray_texture_modifiers;
    TextureSampleLod_Texture1DArray_texture.type.modifierValues = TextureSampleLod_Texture1DArray_texture_modifierValues;
    TextureSampleLod_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLod_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture1DArray_sampler.type.modifiers = TextureSampleLod_Texture1DArray_sampler_modifiers;
    TextureSampleLod_Texture1DArray_sampler.type.modifierValues = TextureSampleLod_Texture1DArray_sampler_modifierValues;
    TextureSampleLod_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLod_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLod_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_Texture1DArray.name = "textureSampleLod"_c;
    TextureSampleLod_Texture1DArray.backendIndex = 2333;
    TextureSampleLod_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture1DArray.parameters = TextureSampleLod_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray)->signature = "f32x4 textureSampleLod(uniform *texture1DArray,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray)->name = "textureSampleLod(uniform *texture1DArray,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray)->nameWithVarNames = "textureSampleLod(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTexture1DArray, Float32x2, Float32
    SampledTextureSampleLod_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleLod_Texture1DArray_texture.type.modifiers = SampledTextureSampleLod_Texture1DArray_texture_modifiers;
    SampledTextureSampleLod_Texture1DArray_texture.type.modifierValues = SampledTextureSampleLod_Texture1DArray_texture_modifierValues;
    SampledTextureSampleLod_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLod_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_Texture1DArray.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture1DArray.backendIndex = 2334;
    SampledTextureSampleLod_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture1DArray.parameters = SampledTextureSampleLod_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray)->signature = "f32x4 textureSampleLod(uniform *textureSampled1DArray,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray)->name = "textureSampleLod(uniform *textureSampled1DArray,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampled1DArray, coordinate : f32x2, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture2DArray, Sampler, Float32x3, Float32
    TextureSampleLod_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLod_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLod_Texture2DArray_texture.type.modifiers = TextureSampleLod_Texture2DArray_texture_modifiers;
    TextureSampleLod_Texture2DArray_texture.type.modifierValues = TextureSampleLod_Texture2DArray_texture_modifierValues;
    TextureSampleLod_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLod_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture2DArray_sampler.type.modifiers = TextureSampleLod_Texture2DArray_sampler_modifiers;
    TextureSampleLod_Texture2DArray_sampler.type.modifierValues = TextureSampleLod_Texture2DArray_sampler_modifierValues;
    TextureSampleLod_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLod_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLod_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_Texture2DArray.name = "textureSampleLod"_c;
    TextureSampleLod_Texture2DArray.backendIndex = 2335;
    TextureSampleLod_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture2DArray.parameters = TextureSampleLod_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray)->signature = "f32x4 textureSampleLod(uniform *texture2DArray,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray)->name = "textureSampleLod(uniform *texture2DArray,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray)->nameWithVarNames = "textureSampleLod(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTexture2DArray, Float32x3, Float32
    SampledTextureSampleLod_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleLod_Texture2DArray_texture.type.modifiers = SampledTextureSampleLod_Texture2DArray_texture_modifiers;
    SampledTextureSampleLod_Texture2DArray_texture.type.modifierValues = SampledTextureSampleLod_Texture2DArray_texture_modifierValues;
    SampledTextureSampleLod_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLod_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_Texture2DArray.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture2DArray.backendIndex = 2336;
    SampledTextureSampleLod_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture2DArray.parameters = SampledTextureSampleLod_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray)->signature = "f32x4 textureSampleLod(uniform *textureSampled2DArray,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray)->name = "textureSampleLod(uniform *textureSampled2DArray,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampled2DArray, coordinate : f32x3, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with TextureCubeArray, Sampler, Float32x4, Float32
    TextureSampleLod_TextureCubeArray_texture.name = "texture"_c;
    TextureSampleLod_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSampleLod_TextureCubeArray_texture.type.modifiers = TextureSampleLod_TextureCubeArray_texture_modifiers;
    TextureSampleLod_TextureCubeArray_texture.type.modifierValues = TextureSampleLod_TextureCubeArray_texture_modifierValues;
    TextureSampleLod_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSampleLod_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_TextureCubeArray_sampler.type.modifiers = TextureSampleLod_TextureCubeArray_sampler_modifiers;
    TextureSampleLod_TextureCubeArray_sampler.type.modifierValues = TextureSampleLod_TextureCubeArray_sampler_modifierValues;
    TextureSampleLod_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSampleLod_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSampleLod_TextureCubeArray_lod.name = "lod"_c;
    TextureSampleLod_TextureCubeArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_TextureCubeArray.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    TextureSampleLod_TextureCubeArray.name = "textureSampleLod"_c;
    TextureSampleLod_TextureCubeArray.backendIndex = 2337;
    TextureSampleLod_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_TextureCubeArray.parameters = TextureSampleLod_TextureCubeArray_args;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray)->signature = "f32x4 textureSampleLod(uniform *textureCubeArray,uniform *sampler,f32x4,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray)->name = "textureSampleLod(uniform *textureCubeArray,uniform *sampler,f32x4,f32)"_c;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray)->nameWithVarNames = "textureSampleLod(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : f32x4, lod : f32)"_c;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with SampledTextureCubeArray, Float32x4, Float32
    SampledTextureSampleLod_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSampleLod_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureSampleLod_TextureCubeArray_texture.type.modifiers = SampledTextureSampleLod_TextureCubeArray_texture_modifiers;
    SampledTextureSampleLod_TextureCubeArray_texture.type.modifierValues = SampledTextureSampleLod_TextureCubeArray_texture_modifierValues;
    SampledTextureSampleLod_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleLod_TextureCubeArray_lod.name = "lod"_c;
    SampledTextureSampleLod_TextureCubeArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_TextureCubeArray.documentation = "Sample a texture at coordinate with explicit level of detail"_c;
    SampledTextureSampleLod_TextureCubeArray.name = "textureSampleLod"_c;
    SampledTextureSampleLod_TextureCubeArray.backendIndex = 2338;
    SampledTextureSampleLod_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_TextureCubeArray.parameters = SampledTextureSampleLod_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray)->signature = "f32x4 textureSampleLod(uniform *textureSampledCubeArray,f32x4,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray)->name = "textureSampleLod(uniform *textureSampledCubeArray,f32x4,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray)->nameWithVarNames = "textureSampleLod(texture : uniform *textureSampledCubeArray, coordinate : f32x4, lod : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleLodOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodOffset_Texture1D_texture.type.modifiers = TextureSampleLodOffset_Texture1D_texture_modifiers;
    TextureSampleLodOffset_Texture1D_texture.type.modifierValues = TextureSampleLodOffset_Texture1D_texture_modifierValues;
    TextureSampleLodOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture1D_sampler.type.modifiers = TextureSampleLodOffset_Texture1D_sampler_modifiers;
    TextureSampleLodOffset_Texture1D_sampler.type.modifierValues = TextureSampleLodOffset_Texture1D_sampler_modifierValues;
    TextureSampleLodOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture1D_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    TextureSampleLodOffset_Texture1D.name = "textureSampleLodOffset"_c;
    TextureSampleLodOffset_Texture1D.backendIndex = 2339;
    TextureSampleLodOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture1D.parameters = TextureSampleLodOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D)->signature = "f32x4 textureSampleLodOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D)->name = "textureSampleLodOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleLodOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodOffset_Texture1D_texture.type.modifiers = SampledTextureSampleLodOffset_Texture1D_texture_modifiers;
    SampledTextureSampleLodOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleLodOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleLodOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    SampledTextureSampleLodOffset_Texture1D.name = "textureSampleLodOffset"_c;
    SampledTextureSampleLodOffset_Texture1D.backendIndex = 2340;
    SampledTextureSampleLodOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture1D.parameters = SampledTextureSampleLodOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D)->signature = "f32x4 textureSampleLodOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D)->name = "textureSampleLodOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleLodOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodOffset_Texture2D_texture.type.modifiers = TextureSampleLodOffset_Texture2D_texture_modifiers;
    TextureSampleLodOffset_Texture2D_texture.type.modifierValues = TextureSampleLodOffset_Texture2D_texture_modifierValues;
    TextureSampleLodOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture2D_sampler.type.modifiers = TextureSampleLodOffset_Texture2D_sampler_modifiers;
    TextureSampleLodOffset_Texture2D_sampler.type.modifierValues = TextureSampleLodOffset_Texture2D_sampler_modifierValues;
    TextureSampleLodOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodOffset_Texture2D_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    TextureSampleLodOffset_Texture2D.name = "textureSampleLodOffset"_c;
    TextureSampleLodOffset_Texture2D.backendIndex = 2341;
    TextureSampleLodOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture2D.parameters = TextureSampleLodOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D)->signature = "f32x4 textureSampleLodOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D)->name = "textureSampleLodOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with SampledTexture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleLodOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodOffset_Texture2D_texture.type.modifiers = SampledTextureSampleLodOffset_Texture2D_texture_modifiers;
    SampledTextureSampleLodOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleLodOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleLodOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodOffset_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    SampledTextureSampleLodOffset_Texture2D.name = "textureSampleLodOffset"_c;
    SampledTextureSampleLodOffset_Texture2D.backendIndex = 2342;
    SampledTextureSampleLodOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture2D.parameters = SampledTextureSampleLodOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D)->signature = "f32x4 textureSampleLodOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D)->name = "textureSampleLodOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleLodOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodOffset_Texture3D_texture.type.modifiers = TextureSampleLodOffset_Texture3D_texture_modifiers;
    TextureSampleLodOffset_Texture3D_texture.type.modifierValues = TextureSampleLodOffset_Texture3D_texture_modifierValues;
    TextureSampleLodOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture3D_sampler.type.modifiers = TextureSampleLodOffset_Texture3D_sampler_modifiers;
    TextureSampleLodOffset_Texture3D_sampler.type.modifierValues = TextureSampleLodOffset_Texture3D_sampler_modifierValues;
    TextureSampleLodOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodOffset_Texture3D_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    TextureSampleLodOffset_Texture3D.name = "textureSampleLodOffset"_c;
    TextureSampleLodOffset_Texture3D.backendIndex = 2343;
    TextureSampleLodOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture3D.parameters = TextureSampleLodOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D)->signature = "f32x4 textureSampleLodOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D)->name = "textureSampleLodOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with SampledTexture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleLodOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodOffset_Texture3D_texture.type.modifiers = SampledTextureSampleLodOffset_Texture3D_texture_modifiers;
    SampledTextureSampleLodOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleLodOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleLodOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodOffset_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    SampledTextureSampleLodOffset_Texture3D.name = "textureSampleLodOffset"_c;
    SampledTextureSampleLodOffset_Texture3D.backendIndex = 2344;
    SampledTextureSampleLodOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture3D.parameters = SampledTextureSampleLodOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D)->signature = "f32x4 textureSampleLodOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D)->name = "textureSampleLodOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
    TextureSampleLodOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLodOffset_Texture1DArray_texture.type.modifiers = TextureSampleLodOffset_Texture1DArray_texture_modifiers;
    TextureSampleLodOffset_Texture1DArray_texture.type.modifierValues = TextureSampleLodOffset_Texture1DArray_texture_modifierValues;
    TextureSampleLodOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture1DArray_sampler.type.modifiers = TextureSampleLodOffset_Texture1DArray_sampler_modifiers;
    TextureSampleLodOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleLodOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleLodOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodOffset_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    TextureSampleLodOffset_Texture1DArray.name = "textureSampleLodOffset"_c;
    TextureSampleLodOffset_Texture1DArray.backendIndex = 2345;
    TextureSampleLodOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture1DArray.parameters = TextureSampleLodOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray)->signature = "f32x4 textureSampleLodOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray)->name = "textureSampleLodOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, lod : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
    SampledTextureSampleLodOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleLodOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleLodOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleLodOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleLodOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleLodOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodOffset_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    SampledTextureSampleLodOffset_Texture1DArray.name = "textureSampleLodOffset"_c;
    SampledTextureSampleLodOffset_Texture1DArray.backendIndex = 2346;
    SampledTextureSampleLodOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture1DArray.parameters = SampledTextureSampleLodOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray)->signature = "f32x4 textureSampleLodOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray)->name = "textureSampleLodOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, lod : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
    TextureSampleLodOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLodOffset_Texture2DArray_texture.type.modifiers = TextureSampleLodOffset_Texture2DArray_texture_modifiers;
    TextureSampleLodOffset_Texture2DArray_texture.type.modifierValues = TextureSampleLodOffset_Texture2DArray_texture_modifierValues;
    TextureSampleLodOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture2DArray_sampler.type.modifiers = TextureSampleLodOffset_Texture2DArray_sampler_modifiers;
    TextureSampleLodOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleLodOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleLodOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodOffset_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    TextureSampleLodOffset_Texture2DArray.name = "textureSampleLodOffset"_c;
    TextureSampleLodOffset_Texture2DArray.backendIndex = 2347;
    TextureSampleLodOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture2DArray.parameters = TextureSampleLodOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray)->signature = "f32x4 textureSampleLodOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray)->name = "textureSampleLodOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, lod : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
    SampledTextureSampleLodOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleLodOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleLodOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleLodOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleLodOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleLodOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodOffset_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail with an offset applied to the coordinate"_c;
    SampledTextureSampleLodOffset_Texture2DArray.name = "textureSampleLodOffset"_c;
    SampledTextureSampleLodOffset_Texture2DArray.backendIndex = 2348;
    SampledTextureSampleLodOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture2DArray.parameters = SampledTextureSampleLodOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray)->signature = "f32x4 textureSampleLodOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray)->name = "textureSampleLodOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray)->nameWithVarNames = "textureSampleLodOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, lod : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleLodProj_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProj_Texture1D_texture.type.modifiers = TextureSampleLodProj_Texture1D_texture_modifiers;
    TextureSampleLodProj_Texture1D_texture.type.modifierValues = TextureSampleLodProj_Texture1D_texture_modifierValues;
    TextureSampleLodProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProj_Texture1D_sampler.type.modifiers = TextureSampleLodProj_Texture1D_sampler_modifiers;
    TextureSampleLodProj_Texture1D_sampler.type.modifierValues = TextureSampleLodProj_Texture1D_sampler_modifierValues;
    TextureSampleLodProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProj_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection"_c;
    TextureSampleLodProj_Texture1D.name = "textureSampleLodProj"_c;
    TextureSampleLodProj_Texture1D.backendIndex = 2349;
    TextureSampleLodProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProj_Texture1D.parameters = TextureSampleLodProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D)->signature = "f32x4 textureSampleLodProj(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D)->name = "textureSampleLodProj(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D)->nameWithVarNames = "textureSampleLodProj(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleLodProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProj_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodProj_Texture1D_texture.type.modifiers = SampledTextureSampleLodProj_Texture1D_texture_modifiers;
    SampledTextureSampleLodProj_Texture1D_texture.type.modifierValues = SampledTextureSampleLodProj_Texture1D_texture_modifierValues;
    SampledTextureSampleLodProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProj_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection"_c;
    SampledTextureSampleLodProj_Texture1D.name = "textureSampleLodProj"_c;
    SampledTextureSampleLodProj_Texture1D.backendIndex = 2350;
    SampledTextureSampleLodProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProj_Texture1D.parameters = SampledTextureSampleLodProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D)->signature = "f32x4 textureSampleLodProj(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D)->name = "textureSampleLodProj(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D)->nameWithVarNames = "textureSampleLodProj(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleLodProj_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProj_Texture2D_texture.type.modifiers = TextureSampleLodProj_Texture2D_texture_modifiers;
    TextureSampleLodProj_Texture2D_texture.type.modifierValues = TextureSampleLodProj_Texture2D_texture_modifierValues;
    TextureSampleLodProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProj_Texture2D_sampler.type.modifiers = TextureSampleLodProj_Texture2D_sampler_modifiers;
    TextureSampleLodProj_Texture2D_sampler.type.modifierValues = TextureSampleLodProj_Texture2D_sampler_modifierValues;
    TextureSampleLodProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProj_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProj_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection"_c;
    TextureSampleLodProj_Texture2D.name = "textureSampleLodProj"_c;
    TextureSampleLodProj_Texture2D.backendIndex = 2351;
    TextureSampleLodProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProj_Texture2D.parameters = TextureSampleLodProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D)->signature = "f32x4 textureSampleLodProj(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D)->name = "textureSampleLodProj(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D)->nameWithVarNames = "textureSampleLodProj(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with SampledTexture2D, Float32x2, Float32, Float32
    SampledTextureSampleLodProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProj_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodProj_Texture2D_texture.type.modifiers = SampledTextureSampleLodProj_Texture2D_texture_modifiers;
    SampledTextureSampleLodProj_Texture2D_texture.type.modifierValues = SampledTextureSampleLodProj_Texture2D_texture_modifierValues;
    SampledTextureSampleLodProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProj_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProj_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection"_c;
    SampledTextureSampleLodProj_Texture2D.name = "textureSampleLodProj"_c;
    SampledTextureSampleLodProj_Texture2D.backendIndex = 2352;
    SampledTextureSampleLodProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProj_Texture2D.parameters = SampledTextureSampleLodProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D)->signature = "f32x4 textureSampleLodProj(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D)->name = "textureSampleLodProj(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D)->nameWithVarNames = "textureSampleLodProj(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleLodProj_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProj_Texture3D_texture.type.modifiers = TextureSampleLodProj_Texture3D_texture_modifiers;
    TextureSampleLodProj_Texture3D_texture.type.modifierValues = TextureSampleLodProj_Texture3D_texture_modifierValues;
    TextureSampleLodProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProj_Texture3D_sampler.type.modifiers = TextureSampleLodProj_Texture3D_sampler_modifiers;
    TextureSampleLodProj_Texture3D_sampler.type.modifierValues = TextureSampleLodProj_Texture3D_sampler_modifierValues;
    TextureSampleLodProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProj_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProj_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection"_c;
    TextureSampleLodProj_Texture3D.name = "textureSampleLodProj"_c;
    TextureSampleLodProj_Texture3D.backendIndex = 2353;
    TextureSampleLodProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProj_Texture3D.parameters = TextureSampleLodProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D)->signature = "f32x4 textureSampleLodProj(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D)->name = "textureSampleLodProj(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D)->nameWithVarNames = "textureSampleLodProj(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with SampledTexture3D, Float32x3, Float32, Float32
    SampledTextureSampleLodProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProj_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodProj_Texture3D_texture.type.modifiers = SampledTextureSampleLodProj_Texture3D_texture_modifiers;
    SampledTextureSampleLodProj_Texture3D_texture.type.modifierValues = SampledTextureSampleLodProj_Texture3D_texture_modifierValues;
    SampledTextureSampleLodProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProj_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProj_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection"_c;
    SampledTextureSampleLodProj_Texture3D.name = "textureSampleLodProj"_c;
    SampledTextureSampleLodProj_Texture3D.backendIndex = 2354;
    SampledTextureSampleLodProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProj_Texture3D.parameters = SampledTextureSampleLodProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D)->signature = "f32x4 textureSampleLodProj(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D)->name = "textureSampleLodProj(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D)->nameWithVarNames = "textureSampleLodProj(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleLodProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProjOffset_Texture1D_texture.type.modifiers = TextureSampleLodProjOffset_Texture1D_texture_modifiers;
    TextureSampleLodProjOffset_Texture1D_texture.type.modifierValues = TextureSampleLodProjOffset_Texture1D_texture_modifierValues;
    TextureSampleLodProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjOffset_Texture1D_sampler.type.modifiers = TextureSampleLodProjOffset_Texture1D_sampler_modifiers;
    TextureSampleLodProjOffset_Texture1D_sampler.type.modifierValues = TextureSampleLodProjOffset_Texture1D_sampler_modifierValues;
    TextureSampleLodProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProjOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleLodProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate"_c;
    TextureSampleLodProjOffset_Texture1D.name = "textureSampleLodProjOffset"_c;
    TextureSampleLodProjOffset_Texture1D.backendIndex = 2355;
    TextureSampleLodProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjOffset_Texture1D.parameters = TextureSampleLodProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D)->signature = "f32x4 textureSampleLodProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D)->name = "textureSampleLodProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D)->nameWithVarNames = "textureSampleLodProjOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleLodProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProjOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodProjOffset_Texture1D_texture.type.modifiers = SampledTextureSampleLodProjOffset_Texture1D_texture_modifiers;
    SampledTextureSampleLodProjOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleLodProjOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleLodProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProjOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleLodProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture1D.name = "textureSampleLodProjOffset"_c;
    SampledTextureSampleLodProjOffset_Texture1D.backendIndex = 2356;
    SampledTextureSampleLodProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjOffset_Texture1D.parameters = SampledTextureSampleLodProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D)->signature = "f32x4 textureSampleLodProjOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D)->name = "textureSampleLodProjOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D)->nameWithVarNames = "textureSampleLodProjOffset(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleLodProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProjOffset_Texture2D_texture.type.modifiers = TextureSampleLodProjOffset_Texture2D_texture_modifiers;
    TextureSampleLodProjOffset_Texture2D_texture.type.modifierValues = TextureSampleLodProjOffset_Texture2D_texture_modifierValues;
    TextureSampleLodProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjOffset_Texture2D_sampler.type.modifiers = TextureSampleLodProjOffset_Texture2D_sampler_modifiers;
    TextureSampleLodProjOffset_Texture2D_sampler.type.modifierValues = TextureSampleLodProjOffset_Texture2D_sampler_modifierValues;
    TextureSampleLodProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjOffset_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProjOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleLodProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate"_c;
    TextureSampleLodProjOffset_Texture2D.name = "textureSampleLodProjOffset"_c;
    TextureSampleLodProjOffset_Texture2D.backendIndex = 2357;
    TextureSampleLodProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjOffset_Texture2D.parameters = TextureSampleLodProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D)->signature = "f32x4 textureSampleLodProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D)->name = "textureSampleLodProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D)->nameWithVarNames = "textureSampleLodProjOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleLodProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProjOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodProjOffset_Texture2D_texture.type.modifiers = SampledTextureSampleLodProjOffset_Texture2D_texture_modifiers;
    SampledTextureSampleLodProjOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleLodProjOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleLodProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjOffset_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProjOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleLodProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture2D.name = "textureSampleLodProjOffset"_c;
    SampledTextureSampleLodProjOffset_Texture2D.backendIndex = 2358;
    SampledTextureSampleLodProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjOffset_Texture2D.parameters = SampledTextureSampleLodProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D)->signature = "f32x4 textureSampleLodProjOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D)->name = "textureSampleLodProjOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D)->nameWithVarNames = "textureSampleLodProjOffset(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleLodProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProjOffset_Texture3D_texture.type.modifiers = TextureSampleLodProjOffset_Texture3D_texture_modifiers;
    TextureSampleLodProjOffset_Texture3D_texture.type.modifierValues = TextureSampleLodProjOffset_Texture3D_texture_modifierValues;
    TextureSampleLodProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjOffset_Texture3D_sampler.type.modifiers = TextureSampleLodProjOffset_Texture3D_sampler_modifiers;
    TextureSampleLodProjOffset_Texture3D_sampler.type.modifierValues = TextureSampleLodProjOffset_Texture3D_sampler_modifierValues;
    TextureSampleLodProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjOffset_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProjOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleLodProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate"_c;
    TextureSampleLodProjOffset_Texture3D.name = "textureSampleLodProjOffset"_c;
    TextureSampleLodProjOffset_Texture3D.backendIndex = 2359;
    TextureSampleLodProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjOffset_Texture3D.parameters = TextureSampleLodProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D)->signature = "f32x4 textureSampleLodProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D)->name = "textureSampleLodProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D)->nameWithVarNames = "textureSampleLodProjOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleLodProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProjOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodProjOffset_Texture3D_texture.type.modifiers = SampledTextureSampleLodProjOffset_Texture3D_texture_modifiers;
    SampledTextureSampleLodProjOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleLodProjOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleLodProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjOffset_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProjOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleLodProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture3D.name = "textureSampleLodProjOffset"_c;
    SampledTextureSampleLodProjOffset_Texture3D.backendIndex = 2360;
    SampledTextureSampleLodProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjOffset_Texture3D.parameters = SampledTextureSampleLodProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D)->signature = "f32x4 textureSampleLodProjOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D)->name = "textureSampleLodProjOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D)->nameWithVarNames = "textureSampleLodProjOffset(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompare with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleLodCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodCompare_Texture1D_texture.type.modifiers = TextureSampleLodCompare_Texture1D_texture_modifiers;
    TextureSampleLodCompare_Texture1D_texture.type.modifierValues = TextureSampleLodCompare_Texture1D_texture_modifierValues;
    TextureSampleLodCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture1D_sampler.type.modifiers = TextureSampleLodCompare_Texture1D_sampler_modifiers;
    TextureSampleLodCompare_Texture1D_sampler.type.modifierValues = TextureSampleLodCompare_Texture1D_sampler_modifierValues;
    TextureSampleLodCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1D_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    TextureSampleLodCompare_Texture1D.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture1D.backendIndex = 2361;
    TextureSampleLodCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompare_Texture1D.parameters = TextureSampleLodCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D)->signature = "f32 textureSampleLodCompare(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D)->name = "textureSampleLodCompare(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleLodCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodCompare_Texture1D_texture.type.modifiers = SampledTextureSampleLodCompare_Texture1D_texture_modifiers;
    SampledTextureSampleLodCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleLodCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleLodCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    SampledTextureSampleLodCompare_Texture1D.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture1D.backendIndex = 2362;
    SampledTextureSampleLodCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D.parameters = SampledTextureSampleLodCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D)->signature = "f32 textureSampleLodCompare(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D)->name = "textureSampleLodCompare(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleLodCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodCompare_Texture2D_texture.type.modifiers = TextureSampleLodCompare_Texture2D_texture_modifiers;
    TextureSampleLodCompare_Texture2D_texture.type.modifierValues = TextureSampleLodCompare_Texture2D_texture_modifierValues;
    TextureSampleLodCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture2D_sampler.type.modifiers = TextureSampleLodCompare_Texture2D_sampler_modifiers;
    TextureSampleLodCompare_Texture2D_sampler.type.modifierValues = TextureSampleLodCompare_Texture2D_sampler_modifierValues;
    TextureSampleLodCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompare_Texture2D_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    TextureSampleLodCompare_Texture2D.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture2D.backendIndex = 2363;
    TextureSampleLodCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompare_Texture2D.parameters = TextureSampleLodCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D)->signature = "f32 textureSampleLodCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D)->name = "textureSampleLodCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with SampledTexture2D, Float32x2, Float32, Float32
    SampledTextureSampleLodCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodCompare_Texture2D_texture.type.modifiers = SampledTextureSampleLodCompare_Texture2D_texture_modifiers;
    SampledTextureSampleLodCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleLodCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleLodCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompare_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    SampledTextureSampleLodCompare_Texture2D.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture2D.backendIndex = 2364;
    SampledTextureSampleLodCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompare_Texture2D.parameters = SampledTextureSampleLodCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D)->signature = "f32 textureSampleLodCompare(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D)->name = "textureSampleLodCompare(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleLodCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodCompare_Texture3D_texture.type.modifiers = TextureSampleLodCompare_Texture3D_texture_modifiers;
    TextureSampleLodCompare_Texture3D_texture.type.modifierValues = TextureSampleLodCompare_Texture3D_texture_modifierValues;
    TextureSampleLodCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture3D_sampler.type.modifiers = TextureSampleLodCompare_Texture3D_sampler_modifiers;
    TextureSampleLodCompare_Texture3D_sampler.type.modifierValues = TextureSampleLodCompare_Texture3D_sampler_modifierValues;
    TextureSampleLodCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompare_Texture3D_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    TextureSampleLodCompare_Texture3D.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture3D.backendIndex = 2365;
    TextureSampleLodCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompare_Texture3D.parameters = TextureSampleLodCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D)->signature = "f32 textureSampleLodCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D)->name = "textureSampleLodCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with SampledTexture3D, Float32x3, Float32, Float32
    SampledTextureSampleLodCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodCompare_Texture3D_texture.type.modifiers = SampledTextureSampleLodCompare_Texture3D_texture_modifiers;
    SampledTextureSampleLodCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleLodCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleLodCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompare_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    SampledTextureSampleLodCompare_Texture3D.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture3D.backendIndex = 2366;
    SampledTextureSampleLodCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompare_Texture3D.parameters = SampledTextureSampleLodCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D)->signature = "f32 textureSampleLodCompare(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D)->name = "textureSampleLodCompare(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with Texture1DArray, Sampler, Float32x2, Float32, Float32
    TextureSampleLodCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLodCompare_Texture1DArray_texture.type.modifiers = TextureSampleLodCompare_Texture1DArray_texture_modifiers;
    TextureSampleLodCompare_Texture1DArray_texture.type.modifierValues = TextureSampleLodCompare_Texture1DArray_texture_modifierValues;
    TextureSampleLodCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture1DArray_sampler.type.modifiers = TextureSampleLodCompare_Texture1DArray_sampler_modifiers;
    TextureSampleLodCompare_Texture1DArray_sampler.type.modifierValues = TextureSampleLodCompare_Texture1DArray_sampler_modifierValues;
    TextureSampleLodCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompare_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    TextureSampleLodCompare_Texture1DArray.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture1DArray.backendIndex = 2367;
    TextureSampleLodCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompare_Texture1DArray.parameters = TextureSampleLodCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray)->signature = "f32 textureSampleLodCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray)->name = "textureSampleLodCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with SampledTexture1DArray, Float32x2, Float32, Float32
    SampledTextureSampleLodCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleLodCompare_Texture1DArray_texture.type.modifiers = SampledTextureSampleLodCompare_Texture1DArray_texture_modifiers;
    SampledTextureSampleLodCompare_Texture1DArray_texture.type.modifierValues = SampledTextureSampleLodCompare_Texture1DArray_texture_modifierValues;
    SampledTextureSampleLodCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompare_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    SampledTextureSampleLodCompare_Texture1DArray.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture1DArray.backendIndex = 2368;
    SampledTextureSampleLodCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompare_Texture1DArray.parameters = SampledTextureSampleLodCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray)->signature = "f32 textureSampleLodCompare(uniform *textureSampled1DArray,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray)->name = "textureSampleLodCompare(uniform *textureSampled1DArray,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *textureSampled1DArray, coordinate : f32x2, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with Texture2DArray, Sampler, Float32x3, Float32, Float32
    TextureSampleLodCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLodCompare_Texture2DArray_texture.type.modifiers = TextureSampleLodCompare_Texture2DArray_texture_modifiers;
    TextureSampleLodCompare_Texture2DArray_texture.type.modifierValues = TextureSampleLodCompare_Texture2DArray_texture_modifierValues;
    TextureSampleLodCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture2DArray_sampler.type.modifiers = TextureSampleLodCompare_Texture2DArray_sampler_modifiers;
    TextureSampleLodCompare_Texture2DArray_sampler.type.modifierValues = TextureSampleLodCompare_Texture2DArray_sampler_modifierValues;
    TextureSampleLodCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompare_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    TextureSampleLodCompare_Texture2DArray.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture2DArray.backendIndex = 2369;
    TextureSampleLodCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompare_Texture2DArray.parameters = TextureSampleLodCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray)->signature = "f32 textureSampleLodCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray)->name = "textureSampleLodCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompare with SampledTexture2DArray, Float32x3, Float32, Float32
    SampledTextureSampleLodCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleLodCompare_Texture2DArray_texture.type.modifiers = SampledTextureSampleLodCompare_Texture2DArray_texture_modifiers;
    SampledTextureSampleLodCompare_Texture2DArray_texture.type.modifierValues = SampledTextureSampleLodCompare_Texture2DArray_texture_modifierValues;
    SampledTextureSampleLodCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompare_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison"_c;
    SampledTextureSampleLodCompare_Texture2DArray.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture2DArray.backendIndex = 2370;
    SampledTextureSampleLodCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompare_Texture2DArray.parameters = SampledTextureSampleLodCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray)->signature = "f32 textureSampleLodCompare(uniform *textureSampled2DArray,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray)->name = "textureSampleLodCompare(uniform *textureSampled2DArray,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray)->nameWithVarNames = "textureSampleLodCompare(texture : uniform *textureSampled2DArray, coordinate : f32x3, lod : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleLodCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodCompareOffset_Texture1D_texture.type.modifiers = TextureSampleLodCompareOffset_Texture1D_texture_modifiers;
    TextureSampleLodCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleLodCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleLodCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleLodCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleLodCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleLodCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleLodCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodCompareOffset_Texture1D.name = "textureSampleLodCompareOffset"_c;
    TextureSampleLodCompareOffset_Texture1D.backendIndex = 2371;
    TextureSampleLodCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D.parameters = TextureSampleLodCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D)->signature = "f32 textureSampleLodCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D)->name = "textureSampleLodCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleLodCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleLodCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleLodCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleLodCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleLodCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture1D.name = "textureSampleLodCompareOffset"_c;
    SampledTextureSampleLodCompareOffset_Texture1D.backendIndex = 2372;
    SampledTextureSampleLodCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D.parameters = SampledTextureSampleLodCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D)->signature = "f32 textureSampleLodCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D)->name = "textureSampleLodCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleLodCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodCompareOffset_Texture2D_texture.type.modifiers = TextureSampleLodCompareOffset_Texture2D_texture_modifiers;
    TextureSampleLodCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleLodCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleLodCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleLodCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleLodCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleLodCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleLodCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompareOffset_Texture2D_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodCompareOffset_Texture2D.name = "textureSampleLodCompareOffset"_c;
    TextureSampleLodCompareOffset_Texture2D.backendIndex = 2373;
    TextureSampleLodCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompareOffset_Texture2D.parameters = TextureSampleLodCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D)->signature = "f32 textureSampleLodCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D)->name = "textureSampleLodCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleLodCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleLodCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleLodCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleLodCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleLodCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture2D.name = "textureSampleLodCompareOffset"_c;
    SampledTextureSampleLodCompareOffset_Texture2D.backendIndex = 2374;
    SampledTextureSampleLodCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D.parameters = SampledTextureSampleLodCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D)->signature = "f32 textureSampleLodCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D)->name = "textureSampleLodCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleLodCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodCompareOffset_Texture3D_texture.type.modifiers = TextureSampleLodCompareOffset_Texture3D_texture_modifiers;
    TextureSampleLodCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleLodCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleLodCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleLodCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleLodCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleLodCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleLodCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompareOffset_Texture3D_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodCompareOffset_Texture3D.name = "textureSampleLodCompareOffset"_c;
    TextureSampleLodCompareOffset_Texture3D.backendIndex = 2375;
    TextureSampleLodCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompareOffset_Texture3D.parameters = TextureSampleLodCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D)->signature = "f32 textureSampleLodCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D)->name = "textureSampleLodCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleLodCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleLodCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleLodCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleLodCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleLodCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture3D.name = "textureSampleLodCompareOffset"_c;
    SampledTextureSampleLodCompareOffset_Texture3D.backendIndex = 2376;
    SampledTextureSampleLodCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D.parameters = SampledTextureSampleLodCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D)->signature = "f32 textureSampleLodCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D)->name = "textureSampleLodCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleLodCompareOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLodCompareOffset_Texture1DArray_texture.type.modifiers = TextureSampleLodCompareOffset_Texture1DArray_texture_modifiers;
    TextureSampleLodCompareOffset_Texture1DArray_texture.type.modifierValues = TextureSampleLodCompareOffset_Texture1DArray_texture_modifierValues;
    TextureSampleLodCompareOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture1DArray_sampler.type.modifiers = TextureSampleLodCompareOffset_Texture1DArray_sampler_modifiers;
    TextureSampleLodCompareOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleLodCompareOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleLodCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompareOffset_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1DArray_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodCompareOffset_Texture1DArray.name = "textureSampleLodCompareOffset"_c;
    TextureSampleLodCompareOffset_Texture1DArray.backendIndex = 2377;
    TextureSampleLodCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompareOffset_Texture1DArray.parameters = TextureSampleLodCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray)->signature = "f32 textureSampleLodCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray)->name = "textureSampleLodCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, lod : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with SampledTexture1DArray, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleLodCompareOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleLodCompareOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleLodCompareOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleLodCompareOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray.name = "textureSampleLodCompareOffset"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray.backendIndex = 2378;
    SampledTextureSampleLodCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray.parameters = SampledTextureSampleLodCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray)->signature = "f32 textureSampleLodCompareOffset(uniform *textureSampled1DArray,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray)->name = "textureSampleLodCompareOffset(uniform *textureSampled1DArray,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, lod : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleLodCompareOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLodCompareOffset_Texture2DArray_texture.type.modifiers = TextureSampleLodCompareOffset_Texture2DArray_texture_modifiers;
    TextureSampleLodCompareOffset_Texture2DArray_texture.type.modifierValues = TextureSampleLodCompareOffset_Texture2DArray_texture_modifierValues;
    TextureSampleLodCompareOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture2DArray_sampler.type.modifiers = TextureSampleLodCompareOffset_Texture2DArray_sampler_modifiers;
    TextureSampleLodCompareOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleLodCompareOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleLodCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompareOffset_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture2DArray_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodCompareOffset_Texture2DArray.name = "textureSampleLodCompareOffset"_c;
    TextureSampleLodCompareOffset_Texture2DArray.backendIndex = 2379;
    TextureSampleLodCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodCompareOffset_Texture2DArray.parameters = TextureSampleLodCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray)->signature = "f32 textureSampleLodCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray)->name = "textureSampleLodCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, lod : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodCompareOffset with SampledTexture2DArray, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleLodCompareOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleLodCompareOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleLodCompareOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleLodCompareOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit level of detail with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray.name = "textureSampleLodCompareOffset"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray.backendIndex = 2380;
    SampledTextureSampleLodCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray.parameters = SampledTextureSampleLodCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray)->signature = "f32 textureSampleLodCompareOffset(uniform *textureSampled2DArray,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray)->name = "textureSampleLodCompareOffset(uniform *textureSampled2DArray,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleLodCompareOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, lod : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleLodProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProjCompare_Texture1D_texture.type.modifiers = TextureSampleLodProjCompare_Texture1D_texture_modifiers;
    TextureSampleLodProjCompare_Texture1D_texture.type.modifierValues = TextureSampleLodProjCompare_Texture1D_texture_modifierValues;
    TextureSampleLodProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture1D_sampler.type.modifiers = TextureSampleLodProjCompare_Texture1D_sampler_modifiers;
    TextureSampleLodProjCompare_Texture1D_sampler.type.modifierValues = TextureSampleLodProjCompare_Texture1D_sampler_modifierValues;
    TextureSampleLodProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    TextureSampleLodProjCompare_Texture1D.name = "textureSampleLodProjCompare"_c;
    TextureSampleLodProjCompare_Texture1D.backendIndex = 2381;
    TextureSampleLodProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompare_Texture1D.parameters = TextureSampleLodProjCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D)->signature = "f32 textureSampleLodProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D)->name = "textureSampleLodProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleLodProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodProjCompare_Texture1D_texture.type.modifiers = SampledTextureSampleLodProjCompare_Texture1D_texture_modifiers;
    SampledTextureSampleLodProjCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleLodProjCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleLodProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    SampledTextureSampleLodProjCompare_Texture1D.name = "textureSampleLodProjCompare"_c;
    SampledTextureSampleLodProjCompare_Texture1D.backendIndex = 2382;
    SampledTextureSampleLodProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D.parameters = SampledTextureSampleLodProjCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D)->signature = "f32 textureSampleLodProjCompare(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D)->name = "textureSampleLodProjCompare(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32, Float32
    TextureSampleLodProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProjCompare_Texture2D_texture.type.modifiers = TextureSampleLodProjCompare_Texture2D_texture_modifiers;
    TextureSampleLodProjCompare_Texture2D_texture.type.modifierValues = TextureSampleLodProjCompare_Texture2D_texture_modifierValues;
    TextureSampleLodProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture2D_sampler.type.modifiers = TextureSampleLodProjCompare_Texture2D_sampler_modifiers;
    TextureSampleLodProjCompare_Texture2D_sampler.type.modifierValues = TextureSampleLodProjCompare_Texture2D_sampler_modifierValues;
    TextureSampleLodProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjCompare_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    TextureSampleLodProjCompare_Texture2D.name = "textureSampleLodProjCompare"_c;
    TextureSampleLodProjCompare_Texture2D.backendIndex = 2383;
    TextureSampleLodProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompare_Texture2D.parameters = TextureSampleLodProjCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D)->signature = "f32 textureSampleLodProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D)->name = "textureSampleLodProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with SampledTexture2D, Float32x2, Float32, Float32, Float32
    SampledTextureSampleLodProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodProjCompare_Texture2D_texture.type.modifiers = SampledTextureSampleLodProjCompare_Texture2D_texture_modifiers;
    SampledTextureSampleLodProjCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleLodProjCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleLodProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjCompare_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    SampledTextureSampleLodProjCompare_Texture2D.name = "textureSampleLodProjCompare"_c;
    SampledTextureSampleLodProjCompare_Texture2D.backendIndex = 2384;
    SampledTextureSampleLodProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D.parameters = SampledTextureSampleLodProjCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D)->signature = "f32 textureSampleLodProjCompare(uniform *textureSampled2D,f32x2,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D)->name = "textureSampleLodProjCompare(uniform *textureSampled2D,f32x2,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32, Float32
    TextureSampleLodProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProjCompare_Texture3D_texture.type.modifiers = TextureSampleLodProjCompare_Texture3D_texture_modifiers;
    TextureSampleLodProjCompare_Texture3D_texture.type.modifierValues = TextureSampleLodProjCompare_Texture3D_texture_modifierValues;
    TextureSampleLodProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture3D_sampler.type.modifiers = TextureSampleLodProjCompare_Texture3D_sampler_modifiers;
    TextureSampleLodProjCompare_Texture3D_sampler.type.modifierValues = TextureSampleLodProjCompare_Texture3D_sampler_modifierValues;
    TextureSampleLodProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjCompare_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    TextureSampleLodProjCompare_Texture3D.name = "textureSampleLodProjCompare"_c;
    TextureSampleLodProjCompare_Texture3D.backendIndex = 2385;
    TextureSampleLodProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompare_Texture3D.parameters = TextureSampleLodProjCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->signature = "f32 textureSampleLodProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->name = "textureSampleLodProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompare with SampledTexture3D, Float32x3, Float32, Float32, Float32
    SampledTextureSampleLodProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodProjCompare_Texture3D_texture.type.modifiers = SampledTextureSampleLodProjCompare_Texture3D_texture_modifiers;
    SampledTextureSampleLodProjCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleLodProjCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleLodProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison"_c;
    SampledTextureSampleLodProjCompare_Texture3D.name = "textureSampleLodProjCompare"_c;
    SampledTextureSampleLodProjCompare_Texture3D.backendIndex = 2386;
    SampledTextureSampleLodProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D.parameters = SampledTextureSampleLodProjCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->signature = "f32 textureSampleLodProjCompare(uniform *textureSampled3D,f32x3,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->name = "textureSampleLodProjCompare(uniform *textureSampled3D,f32x3,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->nameWithVarNames = "textureSampleLodProjCompare(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleLodProjCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProjCompareOffset_Texture1D_texture.type.modifiers = TextureSampleLodProjCompareOffset_Texture1D_texture_modifiers;
    TextureSampleLodProjCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleLodProjCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleLodProjCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleLodProjCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleLodProjCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleLodProjCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleLodProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProjCompareOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleLodProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleLodProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture1D.name = "textureSampleLodProjCompareOffset"_c;
    TextureSampleLodProjCompareOffset_Texture1D.backendIndex = 2387;
    TextureSampleLodProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D.parameters = TextureSampleLodProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D)->signature = "f32 textureSampleLodProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D)->name = "textureSampleLodProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleLodProjCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, lod : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleLodProjCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleLodProjCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleLodProjCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleLodProjCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D.name = "textureSampleLodProjCompareOffset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D.backendIndex = 2388;
    SampledTextureSampleLodProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D.parameters = SampledTextureSampleLodProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D)->signature = "f32 textureSampleLodProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D)->name = "textureSampleLodProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleLodProjCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, lod : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32, Float32x2
    TextureSampleLodProjCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProjCompareOffset_Texture2D_texture.type.modifiers = TextureSampleLodProjCompareOffset_Texture2D_texture_modifiers;
    TextureSampleLodProjCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleLodProjCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleLodProjCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleLodProjCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleLodProjCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleLodProjCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleLodProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjCompareOffset_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProjCompareOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleLodProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleLodProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture2D.name = "textureSampleLodProjCompareOffset"_c;
    TextureSampleLodProjCompareOffset_Texture2D.backendIndex = 2389;
    TextureSampleLodProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture2D.parameters = TextureSampleLodProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D)->signature = "f32 textureSampleLodProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D)->name = "textureSampleLodProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleLodProjCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, lod : f32, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32, Float32x2
    SampledTextureSampleLodProjCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleLodProjCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleLodProjCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleLodProjCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D.name = "textureSampleLodProjCompareOffset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D.backendIndex = 2390;
    SampledTextureSampleLodProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D.parameters = SampledTextureSampleLodProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D)->signature = "f32 textureSampleLodProjCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D)->name = "textureSampleLodProjCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleLodProjCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, lod : f32, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32, Float32x3
    TextureSampleLodProjCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProjCompareOffset_Texture3D_texture.type.modifiers = TextureSampleLodProjCompareOffset_Texture3D_texture_modifiers;
    TextureSampleLodProjCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleLodProjCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleLodProjCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleLodProjCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleLodProjCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleLodProjCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleLodProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjCompareOffset_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProjCompareOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleLodProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleLodProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture3D.name = "textureSampleLodProjCompareOffset"_c;
    TextureSampleLodProjCompareOffset_Texture3D.backendIndex = 2391;
    TextureSampleLodProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture3D.parameters = TextureSampleLodProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D)->signature = "f32 textureSampleLodProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D)->name = "textureSampleLodProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleLodProjCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, lod : f32, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleLodProjCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32, Float32x3
    SampledTextureSampleLodProjCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleLodProjCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleLodProjCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleLodProjCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit level of detail with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D.name = "textureSampleLodProjCompareOffset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D.backendIndex = 2392;
    SampledTextureSampleLodProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D.parameters = SampledTextureSampleLodProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D)->signature = "f32 textureSampleLodProjCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D)->name = "textureSampleLodProjCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleLodProjCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, lod : f32, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGrad with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleGrad_Texture1D_texture.name = "texture"_c;
    TextureSampleGrad_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGrad_Texture1D_texture.type.modifiers = TextureSampleGrad_Texture1D_texture_modifiers;
    TextureSampleGrad_Texture1D_texture.type.modifierValues = TextureSampleGrad_Texture1D_texture_modifierValues;
    TextureSampleGrad_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture1D_sampler.type.modifiers = TextureSampleGrad_Texture1D_sampler_modifiers;
    TextureSampleGrad_Texture1D_sampler.type.modifierValues = TextureSampleGrad_Texture1D_sampler_modifierValues;
    TextureSampleGrad_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGrad_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGrad_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGrad_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_Texture1D.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture1D.backendIndex = 2393;
    TextureSampleGrad_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture1D.parameters = TextureSampleGrad_Texture1D_args;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1D)->signature = "f32x4 textureSampleGrad(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture1D)->name = "textureSampleGrad(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture1D)->nameWithVarNames = "textureSampleGrad(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleGrad_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGrad_Texture1D_texture.type.modifiers = SampledTextureSampleGrad_Texture1D_texture_modifiers;
    SampledTextureSampleGrad_Texture1D_texture.type.modifierValues = SampledTextureSampleGrad_Texture1D_texture_modifierValues;
    SampledTextureSampleGrad_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGrad_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGrad_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGrad_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_Texture1D.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture1D.backendIndex = 2394;
    SampledTextureSampleGrad_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture1D.parameters = SampledTextureSampleGrad_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D)->signature = "f32x4 textureSampleGrad(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D)->name = "textureSampleGrad(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture2D, Sampler, Float32x2, Float32x2, Float32x2
    TextureSampleGrad_Texture2D_texture.name = "texture"_c;
    TextureSampleGrad_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGrad_Texture2D_texture.type.modifiers = TextureSampleGrad_Texture2D_texture_modifiers;
    TextureSampleGrad_Texture2D_texture.type.modifierValues = TextureSampleGrad_Texture2D_texture_modifierValues;
    TextureSampleGrad_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture2D_sampler.type.modifiers = TextureSampleGrad_Texture2D_sampler_modifiers;
    TextureSampleGrad_Texture2D_sampler.type.modifierValues = TextureSampleGrad_Texture2D_sampler_modifierValues;
    TextureSampleGrad_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_Texture2D.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture2D.backendIndex = 2395;
    TextureSampleGrad_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture2D.parameters = TextureSampleGrad_Texture2D_args;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2D)->signature = "f32x4 textureSampleGrad(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture2D)->name = "textureSampleGrad(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture2D)->nameWithVarNames = "textureSampleGrad(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTexture2D, Float32x2, Float32x2, Float32x2
    SampledTextureSampleGrad_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGrad_Texture2D_texture.type.modifiers = SampledTextureSampleGrad_Texture2D_texture_modifiers;
    SampledTextureSampleGrad_Texture2D_texture.type.modifierValues = SampledTextureSampleGrad_Texture2D_texture_modifierValues;
    SampledTextureSampleGrad_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_Texture2D.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture2D.backendIndex = 2396;
    SampledTextureSampleGrad_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture2D.parameters = SampledTextureSampleGrad_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D)->signature = "f32x4 textureSampleGrad(uniform *textureSampled2D,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D)->name = "textureSampleGrad(uniform *textureSampled2D,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture3D, Sampler, Float32x3, Float32x3, Float32x3
    TextureSampleGrad_Texture3D_texture.name = "texture"_c;
    TextureSampleGrad_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGrad_Texture3D_texture.type.modifiers = TextureSampleGrad_Texture3D_texture_modifiers;
    TextureSampleGrad_Texture3D_texture.type.modifierValues = TextureSampleGrad_Texture3D_texture_modifierValues;
    TextureSampleGrad_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture3D_sampler.type.modifiers = TextureSampleGrad_Texture3D_sampler_modifiers;
    TextureSampleGrad_Texture3D_sampler.type.modifierValues = TextureSampleGrad_Texture3D_sampler_modifierValues;
    TextureSampleGrad_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_Texture3D.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture3D.backendIndex = 2397;
    TextureSampleGrad_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture3D.parameters = TextureSampleGrad_Texture3D_args;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture3D)->signature = "f32x4 textureSampleGrad(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture3D)->name = "textureSampleGrad(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture3D)->nameWithVarNames = "textureSampleGrad(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTexture3D, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGrad_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGrad_Texture3D_texture.type.modifiers = SampledTextureSampleGrad_Texture3D_texture_modifiers;
    SampledTextureSampleGrad_Texture3D_texture.type.modifierValues = SampledTextureSampleGrad_Texture3D_texture_modifierValues;
    SampledTextureSampleGrad_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_Texture3D.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture3D.backendIndex = 2398;
    SampledTextureSampleGrad_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture3D.parameters = SampledTextureSampleGrad_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D)->signature = "f32x4 textureSampleGrad(uniform *textureSampled3D,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D)->name = "textureSampleGrad(uniform *textureSampled3D,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with TextureCube, Sampler, Float32x3, Float32x3, Float32x3
    TextureSampleGrad_TextureCube_texture.name = "texture"_c;
    TextureSampleGrad_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSampleGrad_TextureCube_texture.type.modifiers = TextureSampleGrad_TextureCube_texture_modifiers;
    TextureSampleGrad_TextureCube_texture.type.modifierValues = TextureSampleGrad_TextureCube_texture_modifierValues;
    TextureSampleGrad_TextureCube_sampler.name = "sampler"_c;
    TextureSampleGrad_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_TextureCube_sampler.type.modifiers = TextureSampleGrad_TextureCube_sampler_modifiers;
    TextureSampleGrad_TextureCube_sampler.type.modifierValues = TextureSampleGrad_TextureCube_sampler_modifierValues;
    TextureSampleGrad_TextureCube_coordinate.name = "coordinate"_c;
    TextureSampleGrad_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_TextureCube_grad_x.name = "grad_x"_c;
    TextureSampleGrad_TextureCube_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_TextureCube_grad_y.name = "grad_y"_c;
    TextureSampleGrad_TextureCube_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_TextureCube.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_TextureCube.name = "textureSampleGrad"_c;
    TextureSampleGrad_TextureCube.backendIndex = 2399;
    TextureSampleGrad_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_TextureCube.parameters = TextureSampleGrad_TextureCube_args;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCube)->signature = "f32x4 textureSampleGrad(uniform *textureCube,uniform *sampler,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_TextureCube)->name = "textureSampleGrad(uniform *textureCube,uniform *sampler,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_TextureCube)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTextureCube, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGrad_TextureCube_texture.name = "texture"_c;
    SampledTextureSampleGrad_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureSampleGrad_TextureCube_texture.type.modifiers = SampledTextureSampleGrad_TextureCube_texture_modifiers;
    SampledTextureSampleGrad_TextureCube_texture.type.modifierValues = SampledTextureSampleGrad_TextureCube_texture_modifierValues;
    SampledTextureSampleGrad_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_TextureCube_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_TextureCube_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_TextureCube_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_TextureCube_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_TextureCube.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_TextureCube.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_TextureCube.backendIndex = 2400;
    SampledTextureSampleGrad_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_TextureCube.parameters = SampledTextureSampleGrad_TextureCube_args;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube)->signature = "f32x4 textureSampleGrad(uniform *textureSampledCube,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube)->name = "textureSampleGrad(uniform *textureSampledCube,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampledCube, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2
    TextureSampleGrad_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGrad_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGrad_Texture1DArray_texture.type.modifiers = TextureSampleGrad_Texture1DArray_texture_modifiers;
    TextureSampleGrad_Texture1DArray_texture.type.modifierValues = TextureSampleGrad_Texture1DArray_texture_modifierValues;
    TextureSampleGrad_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture1DArray_sampler.type.modifiers = TextureSampleGrad_Texture1DArray_sampler_modifiers;
    TextureSampleGrad_Texture1DArray_sampler.type.modifierValues = TextureSampleGrad_Texture1DArray_sampler_modifierValues;
    TextureSampleGrad_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture1DArray_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture1DArray_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_Texture1DArray.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture1DArray.backendIndex = 2401;
    TextureSampleGrad_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture1DArray.parameters = TextureSampleGrad_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray)->signature = "f32x4 textureSampleGrad(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray)->name = "textureSampleGrad(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray)->nameWithVarNames = "textureSampleGrad(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTexture1DArray, Float32x2, Float32x2, Float32x2
    SampledTextureSampleGrad_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleGrad_Texture1DArray_texture.type.modifiers = SampledTextureSampleGrad_Texture1DArray_texture_modifiers;
    SampledTextureSampleGrad_Texture1DArray_texture.type.modifierValues = SampledTextureSampleGrad_Texture1DArray_texture_modifierValues;
    SampledTextureSampleGrad_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture1DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture1DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_Texture1DArray.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture1DArray.backendIndex = 2402;
    SampledTextureSampleGrad_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture1DArray.parameters = SampledTextureSampleGrad_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray)->signature = "f32x4 textureSampleGrad(uniform *textureSampled1DArray,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray)->name = "textureSampleGrad(uniform *textureSampled1DArray,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampled1DArray, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3
    TextureSampleGrad_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGrad_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGrad_Texture2DArray_texture.type.modifiers = TextureSampleGrad_Texture2DArray_texture_modifiers;
    TextureSampleGrad_Texture2DArray_texture.type.modifierValues = TextureSampleGrad_Texture2DArray_texture_modifierValues;
    TextureSampleGrad_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture2DArray_sampler.type.modifiers = TextureSampleGrad_Texture2DArray_sampler_modifiers;
    TextureSampleGrad_Texture2DArray_sampler.type.modifierValues = TextureSampleGrad_Texture2DArray_sampler_modifierValues;
    TextureSampleGrad_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture2DArray_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture2DArray_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_Texture2DArray.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture2DArray.backendIndex = 2403;
    TextureSampleGrad_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture2DArray.parameters = TextureSampleGrad_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray)->signature = "f32x4 textureSampleGrad(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray)->name = "textureSampleGrad(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray)->nameWithVarNames = "textureSampleGrad(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTexture2DArray, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGrad_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleGrad_Texture2DArray_texture.type.modifiers = SampledTextureSampleGrad_Texture2DArray_texture_modifiers;
    SampledTextureSampleGrad_Texture2DArray_texture.type.modifierValues = SampledTextureSampleGrad_Texture2DArray_texture_modifierValues;
    SampledTextureSampleGrad_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture2DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture2DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_Texture2DArray.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture2DArray.backendIndex = 2404;
    SampledTextureSampleGrad_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture2DArray.parameters = SampledTextureSampleGrad_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray)->signature = "f32x4 textureSampleGrad(uniform *textureSampled2DArray,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray)->name = "textureSampleGrad(uniform *textureSampled2DArray,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampled2DArray, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with TextureCubeArray, Sampler, Float32x4, Float32x4, Float32x4
    TextureSampleGrad_TextureCubeArray_texture.name = "texture"_c;
    TextureSampleGrad_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSampleGrad_TextureCubeArray_texture.type.modifiers = TextureSampleGrad_TextureCubeArray_texture_modifiers;
    TextureSampleGrad_TextureCubeArray_texture.type.modifierValues = TextureSampleGrad_TextureCubeArray_texture_modifierValues;
    TextureSampleGrad_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSampleGrad_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_TextureCubeArray_sampler.type.modifiers = TextureSampleGrad_TextureCubeArray_sampler_modifiers;
    TextureSampleGrad_TextureCubeArray_sampler.type.modifierValues = TextureSampleGrad_TextureCubeArray_sampler_modifierValues;
    TextureSampleGrad_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSampleGrad_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray_grad_x.name = "grad_x"_c;
    TextureSampleGrad_TextureCubeArray_grad_x.type = Type::FullType{ Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray_grad_y.name = "grad_y"_c;
    TextureSampleGrad_TextureCubeArray_grad_y.type = Type::FullType{ Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    TextureSampleGrad_TextureCubeArray.name = "textureSampleGrad"_c;
    TextureSampleGrad_TextureCubeArray.backendIndex = 2405;
    TextureSampleGrad_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray.parameters = TextureSampleGrad_TextureCubeArray_args;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_grad_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_grad_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray)->signature = "f32x4 textureSampleGrad(uniform *textureCubeArray,uniform *sampler,f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray)->name = "textureSampleGrad(uniform *textureCubeArray,uniform *sampler,f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : f32x4, grad_x : f32x4, grad_y : f32x4)"_c;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with SampledTextureCubeArray, Float32x4, Float32x4, Float32x4
    SampledTextureSampleGrad_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSampleGrad_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureSampleGrad_TextureCubeArray_texture.type.modifiers = SampledTextureSampleGrad_TextureCubeArray_texture_modifiers;
    SampledTextureSampleGrad_TextureCubeArray_texture.type.modifierValues = SampledTextureSampleGrad_TextureCubeArray_texture_modifierValues;
    SampledTextureSampleGrad_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_TextureCubeArray_grad_x.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_TextureCubeArray_grad_y.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray.documentation = "Sample a texture at coordinate with explicit gradient"_c;
    SampledTextureSampleGrad_TextureCubeArray.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_TextureCubeArray.backendIndex = 2406;
    SampledTextureSampleGrad_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray.parameters = SampledTextureSampleGrad_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_grad_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_grad_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray)->signature = "f32x4 textureSampleGrad(uniform *textureSampledCubeArray,f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray)->name = "textureSampleGrad(uniform *textureSampledCubeArray,f32x4,f32x4,f32x4)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray)->nameWithVarNames = "textureSampleGrad(texture : uniform *textureSampledCubeArray, coordinate : f32x4, grad_x : f32x4, grad_y : f32x4)"_c;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleGradOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradOffset_Texture1D_texture.type.modifiers = TextureSampleGradOffset_Texture1D_texture_modifiers;
    TextureSampleGradOffset_Texture1D_texture.type.modifierValues = TextureSampleGradOffset_Texture1D_texture_modifierValues;
    TextureSampleGradOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture1D_sampler.type.modifiers = TextureSampleGradOffset_Texture1D_sampler_modifiers;
    TextureSampleGradOffset_Texture1D_sampler.type.modifierValues = TextureSampleGradOffset_Texture1D_sampler_modifierValues;
    TextureSampleGradOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradOffset_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradOffset_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleGradOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    TextureSampleGradOffset_Texture1D.name = "textureSampleGradOffset"_c;
    TextureSampleGradOffset_Texture1D.backendIndex = 2407;
    TextureSampleGradOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture1D.parameters = TextureSampleGradOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D)->signature = "f32x4 textureSampleGradOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D)->name = "textureSampleGradOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleGradOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradOffset_Texture1D_texture.type.modifiers = SampledTextureSampleGradOffset_Texture1D_texture_modifiers;
    SampledTextureSampleGradOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleGradOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleGradOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradOffset_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradOffset_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    SampledTextureSampleGradOffset_Texture1D.name = "textureSampleGradOffset"_c;
    SampledTextureSampleGradOffset_Texture1D.backendIndex = 2408;
    SampledTextureSampleGradOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture1D.parameters = SampledTextureSampleGradOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D)->signature = "f32x4 textureSampleGradOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D)->name = "textureSampleGradOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32x2
    TextureSampleGradOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradOffset_Texture2D_texture.type.modifiers = TextureSampleGradOffset_Texture2D_texture_modifiers;
    TextureSampleGradOffset_Texture2D_texture.type.modifierValues = TextureSampleGradOffset_Texture2D_texture_modifierValues;
    TextureSampleGradOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture2D_sampler.type.modifiers = TextureSampleGradOffset_Texture2D_sampler_modifiers;
    TextureSampleGradOffset_Texture2D_sampler.type.modifierValues = TextureSampleGradOffset_Texture2D_sampler_modifierValues;
    TextureSampleGradOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    TextureSampleGradOffset_Texture2D.name = "textureSampleGradOffset"_c;
    TextureSampleGradOffset_Texture2D.backendIndex = 2409;
    TextureSampleGradOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture2D.parameters = TextureSampleGradOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D)->signature = "f32x4 textureSampleGradOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D)->name = "textureSampleGradOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32x2
    SampledTextureSampleGradOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradOffset_Texture2D_texture.type.modifiers = SampledTextureSampleGradOffset_Texture2D_texture_modifiers;
    SampledTextureSampleGradOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleGradOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleGradOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    SampledTextureSampleGradOffset_Texture2D.name = "textureSampleGradOffset"_c;
    SampledTextureSampleGradOffset_Texture2D.backendIndex = 2410;
    SampledTextureSampleGradOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture2D.parameters = SampledTextureSampleGradOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D)->signature = "f32x4 textureSampleGradOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D)->name = "textureSampleGradOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32x3
    TextureSampleGradOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradOffset_Texture3D_texture.type.modifiers = TextureSampleGradOffset_Texture3D_texture_modifiers;
    TextureSampleGradOffset_Texture3D_texture.type.modifierValues = TextureSampleGradOffset_Texture3D_texture_modifierValues;
    TextureSampleGradOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture3D_sampler.type.modifiers = TextureSampleGradOffset_Texture3D_sampler_modifiers;
    TextureSampleGradOffset_Texture3D_sampler.type.modifierValues = TextureSampleGradOffset_Texture3D_sampler_modifierValues;
    TextureSampleGradOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    TextureSampleGradOffset_Texture3D.name = "textureSampleGradOffset"_c;
    TextureSampleGradOffset_Texture3D.backendIndex = 2411;
    TextureSampleGradOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture3D.parameters = TextureSampleGradOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D)->signature = "f32x4 textureSampleGradOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D)->name = "textureSampleGradOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGradOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradOffset_Texture3D_texture.type.modifiers = SampledTextureSampleGradOffset_Texture3D_texture_modifiers;
    SampledTextureSampleGradOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleGradOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleGradOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    SampledTextureSampleGradOffset_Texture3D.name = "textureSampleGradOffset"_c;
    SampledTextureSampleGradOffset_Texture3D.backendIndex = 2412;
    SampledTextureSampleGradOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture3D.parameters = SampledTextureSampleGradOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D)->signature = "f32x4 textureSampleGradOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D)->name = "textureSampleGradOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32x2
    TextureSampleGradOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGradOffset_Texture1DArray_texture.type.modifiers = TextureSampleGradOffset_Texture1DArray_texture_modifiers;
    TextureSampleGradOffset_Texture1DArray_texture.type.modifierValues = TextureSampleGradOffset_Texture1DArray_texture_modifierValues;
    TextureSampleGradOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture1DArray_sampler.type.modifiers = TextureSampleGradOffset_Texture1DArray_sampler_modifiers;
    TextureSampleGradOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleGradOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleGradOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture1DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture1DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    TextureSampleGradOffset_Texture1DArray.name = "textureSampleGradOffset"_c;
    TextureSampleGradOffset_Texture1DArray.backendIndex = 2413;
    TextureSampleGradOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture1DArray.parameters = TextureSampleGradOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray)->signature = "f32x4 textureSampleGradOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray)->name = "textureSampleGradOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with SampledTexture1DArray, Float32x2, Float32x2, Float32x2, Float32x2
    SampledTextureSampleGradOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleGradOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleGradOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleGradOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleGradOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleGradOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture1DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture1DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    SampledTextureSampleGradOffset_Texture1DArray.name = "textureSampleGradOffset"_c;
    SampledTextureSampleGradOffset_Texture1DArray.backendIndex = 2414;
    SampledTextureSampleGradOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture1DArray.parameters = SampledTextureSampleGradOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray)->signature = "f32x4 textureSampleGradOffset(uniform *textureSampled1DArray,f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray)->name = "textureSampleGradOffset(uniform *textureSampled1DArray,f32x2,f32x2,f32x2,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32x3
    TextureSampleGradOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGradOffset_Texture2DArray_texture.type.modifiers = TextureSampleGradOffset_Texture2DArray_texture_modifiers;
    TextureSampleGradOffset_Texture2DArray_texture.type.modifierValues = TextureSampleGradOffset_Texture2DArray_texture_modifierValues;
    TextureSampleGradOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture2DArray_sampler.type.modifiers = TextureSampleGradOffset_Texture2DArray_sampler_modifiers;
    TextureSampleGradOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleGradOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleGradOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture2DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture2DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    TextureSampleGradOffset_Texture2DArray.name = "textureSampleGradOffset"_c;
    TextureSampleGradOffset_Texture2DArray.backendIndex = 2415;
    TextureSampleGradOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture2DArray.parameters = TextureSampleGradOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray)->signature = "f32x4 textureSampleGradOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray)->name = "textureSampleGradOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with SampledTexture2DArray, Float32x3, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGradOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleGradOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleGradOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleGradOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleGradOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleGradOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture2DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture2DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient with an offset applied to the coordinate"_c;
    SampledTextureSampleGradOffset_Texture2DArray.name = "textureSampleGradOffset"_c;
    SampledTextureSampleGradOffset_Texture2DArray.backendIndex = 2416;
    SampledTextureSampleGradOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture2DArray.parameters = SampledTextureSampleGradOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray)->signature = "f32x4 textureSampleGradOffset(uniform *textureSampled2DArray,f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray)->name = "textureSampleGradOffset(uniform *textureSampled2DArray,f32x3,f32x3,f32x3,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray)->nameWithVarNames = "textureSampleGradOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleGradProj_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProj_Texture1D_texture.type.modifiers = TextureSampleGradProj_Texture1D_texture_modifiers;
    TextureSampleGradProj_Texture1D_texture.type.modifierValues = TextureSampleGradProj_Texture1D_texture_modifierValues;
    TextureSampleGradProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProj_Texture1D_sampler.type.modifiers = TextureSampleGradProj_Texture1D_sampler_modifiers;
    TextureSampleGradProj_Texture1D_sampler.type.modifierValues = TextureSampleGradProj_Texture1D_sampler_modifierValues;
    TextureSampleGradProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradProj_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradProj_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection"_c;
    TextureSampleGradProj_Texture1D.name = "textureSampleGradProj"_c;
    TextureSampleGradProj_Texture1D.backendIndex = 2417;
    TextureSampleGradProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProj_Texture1D.parameters = TextureSampleGradProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D)->signature = "f32x4 textureSampleGradProj(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D)->name = "textureSampleGradProj(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D)->nameWithVarNames = "textureSampleGradProj(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleGradProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProj_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradProj_Texture1D_texture.type.modifiers = SampledTextureSampleGradProj_Texture1D_texture_modifiers;
    SampledTextureSampleGradProj_Texture1D_texture.type.modifierValues = SampledTextureSampleGradProj_Texture1D_texture_modifierValues;
    SampledTextureSampleGradProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProj_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProj_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection"_c;
    SampledTextureSampleGradProj_Texture1D.name = "textureSampleGradProj"_c;
    SampledTextureSampleGradProj_Texture1D.backendIndex = 2418;
    SampledTextureSampleGradProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProj_Texture1D.parameters = SampledTextureSampleGradProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D)->signature = "f32x4 textureSampleGradProj(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D)->name = "textureSampleGradProj(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D)->nameWithVarNames = "textureSampleGradProj(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32
    TextureSampleGradProj_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProj_Texture2D_texture.type.modifiers = TextureSampleGradProj_Texture2D_texture_modifiers;
    TextureSampleGradProj_Texture2D_texture.type.modifierValues = TextureSampleGradProj_Texture2D_texture_modifierValues;
    TextureSampleGradProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProj_Texture2D_sampler.type.modifiers = TextureSampleGradProj_Texture2D_sampler_modifiers;
    TextureSampleGradProj_Texture2D_sampler.type.modifierValues = TextureSampleGradProj_Texture2D_sampler_modifierValues;
    TextureSampleGradProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProj_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradProj_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProj_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradProj_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProj_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection"_c;
    TextureSampleGradProj_Texture2D.name = "textureSampleGradProj"_c;
    TextureSampleGradProj_Texture2D.backendIndex = 2419;
    TextureSampleGradProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProj_Texture2D.parameters = TextureSampleGradProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D)->signature = "f32x4 textureSampleGradProj(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D)->name = "textureSampleGradProj(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D)->nameWithVarNames = "textureSampleGradProj(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32
    SampledTextureSampleGradProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProj_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradProj_Texture2D_texture.type.modifiers = SampledTextureSampleGradProj_Texture2D_texture_modifiers;
    SampledTextureSampleGradProj_Texture2D_texture.type.modifierValues = SampledTextureSampleGradProj_Texture2D_texture_modifierValues;
    SampledTextureSampleGradProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProj_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProj_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProj_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProj_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection"_c;
    SampledTextureSampleGradProj_Texture2D.name = "textureSampleGradProj"_c;
    SampledTextureSampleGradProj_Texture2D.backendIndex = 2420;
    SampledTextureSampleGradProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProj_Texture2D.parameters = SampledTextureSampleGradProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D)->signature = "f32x4 textureSampleGradProj(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D)->name = "textureSampleGradProj(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D)->nameWithVarNames = "textureSampleGradProj(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32
    TextureSampleGradProj_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProj_Texture3D_texture.type.modifiers = TextureSampleGradProj_Texture3D_texture_modifiers;
    TextureSampleGradProj_Texture3D_texture.type.modifierValues = TextureSampleGradProj_Texture3D_texture_modifierValues;
    TextureSampleGradProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProj_Texture3D_sampler.type.modifiers = TextureSampleGradProj_Texture3D_sampler_modifiers;
    TextureSampleGradProj_Texture3D_sampler.type.modifierValues = TextureSampleGradProj_Texture3D_sampler_modifierValues;
    TextureSampleGradProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProj_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradProj_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProj_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradProj_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProj_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection"_c;
    TextureSampleGradProj_Texture3D.name = "textureSampleGradProj"_c;
    TextureSampleGradProj_Texture3D.backendIndex = 2421;
    TextureSampleGradProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProj_Texture3D.parameters = TextureSampleGradProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D)->signature = "f32x4 textureSampleGradProj(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D)->name = "textureSampleGradProj(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D)->nameWithVarNames = "textureSampleGradProj(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32
    SampledTextureSampleGradProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProj_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradProj_Texture3D_texture.type.modifiers = SampledTextureSampleGradProj_Texture3D_texture_modifiers;
    SampledTextureSampleGradProj_Texture3D_texture.type.modifierValues = SampledTextureSampleGradProj_Texture3D_texture_modifierValues;
    SampledTextureSampleGradProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProj_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProj_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProj_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProj_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection"_c;
    SampledTextureSampleGradProj_Texture3D.name = "textureSampleGradProj"_c;
    SampledTextureSampleGradProj_Texture3D.backendIndex = 2422;
    SampledTextureSampleGradProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProj_Texture3D.parameters = SampledTextureSampleGradProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D)->signature = "f32x4 textureSampleGradProj(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D)->name = "textureSampleGradProj(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D)->nameWithVarNames = "textureSampleGradProj(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleGradProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProjOffset_Texture1D_texture.type.modifiers = TextureSampleGradProjOffset_Texture1D_texture_modifiers;
    TextureSampleGradProjOffset_Texture1D_texture.type.modifierValues = TextureSampleGradProjOffset_Texture1D_texture_modifierValues;
    TextureSampleGradProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjOffset_Texture1D_sampler.type.modifiers = TextureSampleGradProjOffset_Texture1D_sampler_modifiers;
    TextureSampleGradProjOffset_Texture1D_sampler.type.modifierValues = TextureSampleGradProjOffset_Texture1D_sampler_modifierValues;
    TextureSampleGradProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleGradProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate"_c;
    TextureSampleGradProjOffset_Texture1D.name = "textureSampleGradProjOffset"_c;
    TextureSampleGradProjOffset_Texture1D.backendIndex = 2423;
    TextureSampleGradProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjOffset_Texture1D.parameters = TextureSampleGradProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D)->signature = "f32x4 textureSampleGradProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D)->name = "textureSampleGradProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D)->nameWithVarNames = "textureSampleGradProjOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleGradProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProjOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradProjOffset_Texture1D_texture.type.modifiers = SampledTextureSampleGradProjOffset_Texture1D_texture_modifiers;
    SampledTextureSampleGradProjOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleGradProjOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleGradProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleGradProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture1D.name = "textureSampleGradProjOffset"_c;
    SampledTextureSampleGradProjOffset_Texture1D.backendIndex = 2424;
    SampledTextureSampleGradProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjOffset_Texture1D.parameters = SampledTextureSampleGradProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D)->signature = "f32x4 textureSampleGradProjOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D)->name = "textureSampleGradProjOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D)->nameWithVarNames = "textureSampleGradProjOffset(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    TextureSampleGradProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProjOffset_Texture2D_texture.type.modifiers = TextureSampleGradProjOffset_Texture2D_texture_modifiers;
    TextureSampleGradProjOffset_Texture2D_texture.type.modifierValues = TextureSampleGradProjOffset_Texture2D_texture_modifierValues;
    TextureSampleGradProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjOffset_Texture2D_sampler.type.modifiers = TextureSampleGradProjOffset_Texture2D_sampler_modifiers;
    TextureSampleGradProjOffset_Texture2D_sampler.type.modifierValues = TextureSampleGradProjOffset_Texture2D_sampler_modifierValues;
    TextureSampleGradProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjOffset_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjOffset_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleGradProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate"_c;
    TextureSampleGradProjOffset_Texture2D.name = "textureSampleGradProjOffset"_c;
    TextureSampleGradProjOffset_Texture2D.backendIndex = 2425;
    TextureSampleGradProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjOffset_Texture2D.parameters = TextureSampleGradProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D)->signature = "f32x4 textureSampleGradProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D)->name = "textureSampleGradProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D)->nameWithVarNames = "textureSampleGradProjOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    SampledTextureSampleGradProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProjOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradProjOffset_Texture2D_texture.type.modifiers = SampledTextureSampleGradProjOffset_Texture2D_texture_modifiers;
    SampledTextureSampleGradProjOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleGradProjOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleGradProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjOffset_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjOffset_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleGradProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture2D.name = "textureSampleGradProjOffset"_c;
    SampledTextureSampleGradProjOffset_Texture2D.backendIndex = 2426;
    SampledTextureSampleGradProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjOffset_Texture2D.parameters = SampledTextureSampleGradProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D)->signature = "f32x4 textureSampleGradProjOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D)->name = "textureSampleGradProjOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D)->nameWithVarNames = "textureSampleGradProjOffset(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    TextureSampleGradProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProjOffset_Texture3D_texture.type.modifiers = TextureSampleGradProjOffset_Texture3D_texture_modifiers;
    TextureSampleGradProjOffset_Texture3D_texture.type.modifierValues = TextureSampleGradProjOffset_Texture3D_texture_modifierValues;
    TextureSampleGradProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjOffset_Texture3D_sampler.type.modifiers = TextureSampleGradProjOffset_Texture3D_sampler_modifiers;
    TextureSampleGradProjOffset_Texture3D_sampler.type.modifierValues = TextureSampleGradProjOffset_Texture3D_sampler_modifierValues;
    TextureSampleGradProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjOffset_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjOffset_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleGradProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate"_c;
    TextureSampleGradProjOffset_Texture3D.name = "textureSampleGradProjOffset"_c;
    TextureSampleGradProjOffset_Texture3D.backendIndex = 2427;
    TextureSampleGradProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjOffset_Texture3D.parameters = TextureSampleGradProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D)->signature = "f32x4 textureSampleGradProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D)->name = "textureSampleGradProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D)->nameWithVarNames = "textureSampleGradProjOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    SampledTextureSampleGradProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProjOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradProjOffset_Texture3D_texture.type.modifiers = SampledTextureSampleGradProjOffset_Texture3D_texture_modifiers;
    SampledTextureSampleGradProjOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleGradProjOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleGradProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjOffset_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjOffset_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleGradProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture3D.name = "textureSampleGradProjOffset"_c;
    SampledTextureSampleGradProjOffset_Texture3D.backendIndex = 2428;
    SampledTextureSampleGradProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjOffset_Texture3D.parameters = SampledTextureSampleGradProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D)->signature = "f32x4 textureSampleGradProjOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D)->name = "textureSampleGradProjOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D)->nameWithVarNames = "textureSampleGradProjOffset(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleGradCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradCompare_Texture1D_texture.type.modifiers = TextureSampleGradCompare_Texture1D_texture_modifiers;
    TextureSampleGradCompare_Texture1D_texture.type.modifierValues = TextureSampleGradCompare_Texture1D_texture_modifierValues;
    TextureSampleGradCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture1D_sampler.type.modifiers = TextureSampleGradCompare_Texture1D_sampler_modifiers;
    TextureSampleGradCompare_Texture1D_sampler.type.modifierValues = TextureSampleGradCompare_Texture1D_sampler_modifierValues;
    TextureSampleGradCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    TextureSampleGradCompare_Texture1D.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture1D.backendIndex = 2429;
    TextureSampleGradCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompare_Texture1D.parameters = TextureSampleGradCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D)->signature = "f32 textureSampleGradCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D)->name = "textureSampleGradCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleGradCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradCompare_Texture1D_texture.type.modifiers = SampledTextureSampleGradCompare_Texture1D_texture_modifiers;
    SampledTextureSampleGradCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleGradCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleGradCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    SampledTextureSampleGradCompare_Texture1D.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture1D.backendIndex = 2430;
    SampledTextureSampleGradCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D.parameters = SampledTextureSampleGradCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D)->signature = "f32 textureSampleGradCompare(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D)->name = "textureSampleGradCompare(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32
    TextureSampleGradCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradCompare_Texture2D_texture.type.modifiers = TextureSampleGradCompare_Texture2D_texture_modifiers;
    TextureSampleGradCompare_Texture2D_texture.type.modifierValues = TextureSampleGradCompare_Texture2D_texture_modifierValues;
    TextureSampleGradCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture2D_sampler.type.modifiers = TextureSampleGradCompare_Texture2D_sampler_modifiers;
    TextureSampleGradCompare_Texture2D_sampler.type.modifierValues = TextureSampleGradCompare_Texture2D_sampler_modifierValues;
    TextureSampleGradCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    TextureSampleGradCompare_Texture2D.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture2D.backendIndex = 2431;
    TextureSampleGradCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompare_Texture2D.parameters = TextureSampleGradCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D)->signature = "f32 textureSampleGradCompare(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D)->name = "textureSampleGradCompare(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32
    SampledTextureSampleGradCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradCompare_Texture2D_texture.type.modifiers = SampledTextureSampleGradCompare_Texture2D_texture_modifiers;
    SampledTextureSampleGradCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleGradCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleGradCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    SampledTextureSampleGradCompare_Texture2D.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture2D.backendIndex = 2432;
    SampledTextureSampleGradCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompare_Texture2D.parameters = SampledTextureSampleGradCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D)->signature = "f32 textureSampleGradCompare(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D)->name = "textureSampleGradCompare(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32
    TextureSampleGradCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradCompare_Texture3D_texture.type.modifiers = TextureSampleGradCompare_Texture3D_texture_modifiers;
    TextureSampleGradCompare_Texture3D_texture.type.modifierValues = TextureSampleGradCompare_Texture3D_texture_modifierValues;
    TextureSampleGradCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture3D_sampler.type.modifiers = TextureSampleGradCompare_Texture3D_sampler_modifiers;
    TextureSampleGradCompare_Texture3D_sampler.type.modifierValues = TextureSampleGradCompare_Texture3D_sampler_modifierValues;
    TextureSampleGradCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    TextureSampleGradCompare_Texture3D.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture3D.backendIndex = 2433;
    TextureSampleGradCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompare_Texture3D.parameters = TextureSampleGradCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D)->signature = "f32 textureSampleGradCompare(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D)->name = "textureSampleGradCompare(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32
    SampledTextureSampleGradCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradCompare_Texture3D_texture.type.modifiers = SampledTextureSampleGradCompare_Texture3D_texture_modifiers;
    SampledTextureSampleGradCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleGradCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleGradCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    SampledTextureSampleGradCompare_Texture3D.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture3D.backendIndex = 2434;
    SampledTextureSampleGradCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompare_Texture3D.parameters = SampledTextureSampleGradCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D)->signature = "f32 textureSampleGradCompare(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D)->name = "textureSampleGradCompare(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32
    TextureSampleGradCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGradCompare_Texture1DArray_texture.type.modifiers = TextureSampleGradCompare_Texture1DArray_texture_modifiers;
    TextureSampleGradCompare_Texture1DArray_texture.type.modifierValues = TextureSampleGradCompare_Texture1DArray_texture_modifierValues;
    TextureSampleGradCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture1DArray_sampler.type.modifiers = TextureSampleGradCompare_Texture1DArray_sampler_modifiers;
    TextureSampleGradCompare_Texture1DArray_sampler.type.modifierValues = TextureSampleGradCompare_Texture1DArray_sampler_modifierValues;
    TextureSampleGradCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture1DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture1DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    TextureSampleGradCompare_Texture1DArray.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture1DArray.backendIndex = 2435;
    TextureSampleGradCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompare_Texture1DArray.parameters = TextureSampleGradCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray)->signature = "f32 textureSampleGradCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray)->name = "textureSampleGradCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with SampledTexture1DArray, Float32x2, Float32x2, Float32x2, Float32
    SampledTextureSampleGradCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleGradCompare_Texture1DArray_texture.type.modifiers = SampledTextureSampleGradCompare_Texture1DArray_texture_modifiers;
    SampledTextureSampleGradCompare_Texture1DArray_texture.type.modifierValues = SampledTextureSampleGradCompare_Texture1DArray_texture_modifierValues;
    SampledTextureSampleGradCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture1DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture1DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    SampledTextureSampleGradCompare_Texture1DArray.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture1DArray.backendIndex = 2436;
    SampledTextureSampleGradCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompare_Texture1DArray.parameters = SampledTextureSampleGradCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray)->signature = "f32 textureSampleGradCompare(uniform *textureSampled1DArray,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray)->name = "textureSampleGradCompare(uniform *textureSampled1DArray,f32x2,f32x2,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *textureSampled1DArray, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32
    TextureSampleGradCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGradCompare_Texture2DArray_texture.type.modifiers = TextureSampleGradCompare_Texture2DArray_texture_modifiers;
    TextureSampleGradCompare_Texture2DArray_texture.type.modifierValues = TextureSampleGradCompare_Texture2DArray_texture_modifierValues;
    TextureSampleGradCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture2DArray_sampler.type.modifiers = TextureSampleGradCompare_Texture2DArray_sampler_modifiers;
    TextureSampleGradCompare_Texture2DArray_sampler.type.modifierValues = TextureSampleGradCompare_Texture2DArray_sampler_modifierValues;
    TextureSampleGradCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture2DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture2DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    TextureSampleGradCompare_Texture2DArray.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture2DArray.backendIndex = 2437;
    TextureSampleGradCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompare_Texture2DArray.parameters = TextureSampleGradCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray)->signature = "f32 textureSampleGradCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray)->name = "textureSampleGradCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompare with SampledTexture2DArray, Float32x3, Float32x3, Float32x3, Float32
    SampledTextureSampleGradCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleGradCompare_Texture2DArray_texture.type.modifiers = SampledTextureSampleGradCompare_Texture2DArray_texture_modifiers;
    SampledTextureSampleGradCompare_Texture2DArray_texture.type.modifierValues = SampledTextureSampleGradCompare_Texture2DArray_texture_modifierValues;
    SampledTextureSampleGradCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture2DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture2DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison"_c;
    SampledTextureSampleGradCompare_Texture2DArray.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture2DArray.backendIndex = 2438;
    SampledTextureSampleGradCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompare_Texture2DArray.parameters = SampledTextureSampleGradCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray)->signature = "f32 textureSampleGradCompare(uniform *textureSampled2DArray,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray)->name = "textureSampleGradCompare(uniform *textureSampled2DArray,f32x3,f32x3,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray)->nameWithVarNames = "textureSampleGradCompare(texture : uniform *textureSampled2DArray, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleGradCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradCompareOffset_Texture1D_texture.type.modifiers = TextureSampleGradCompareOffset_Texture1D_texture_modifiers;
    TextureSampleGradCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleGradCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleGradCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleGradCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleGradCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleGradCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleGradCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradCompareOffset_Texture1D.name = "textureSampleGradCompareOffset"_c;
    TextureSampleGradCompareOffset_Texture1D.backendIndex = 2439;
    TextureSampleGradCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D.parameters = TextureSampleGradCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D)->signature = "f32 textureSampleGradCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D)->name = "textureSampleGradCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleGradCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleGradCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleGradCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleGradCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleGradCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture1D.name = "textureSampleGradCompareOffset"_c;
    SampledTextureSampleGradCompareOffset_Texture1D.backendIndex = 2440;
    SampledTextureSampleGradCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D.parameters = SampledTextureSampleGradCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D)->signature = "f32 textureSampleGradCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D)->name = "textureSampleGradCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    TextureSampleGradCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradCompareOffset_Texture2D_texture.type.modifiers = TextureSampleGradCompareOffset_Texture2D_texture_modifiers;
    TextureSampleGradCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleGradCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleGradCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleGradCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleGradCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleGradCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleGradCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradCompareOffset_Texture2D.name = "textureSampleGradCompareOffset"_c;
    TextureSampleGradCompareOffset_Texture2D.backendIndex = 2441;
    TextureSampleGradCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompareOffset_Texture2D.parameters = TextureSampleGradCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D)->signature = "f32 textureSampleGradCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D)->name = "textureSampleGradCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    SampledTextureSampleGradCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleGradCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleGradCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleGradCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleGradCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture2D.name = "textureSampleGradCompareOffset"_c;
    SampledTextureSampleGradCompareOffset_Texture2D.backendIndex = 2442;
    SampledTextureSampleGradCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D.parameters = SampledTextureSampleGradCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D)->signature = "f32 textureSampleGradCompareOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D)->name = "textureSampleGradCompareOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    TextureSampleGradCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradCompareOffset_Texture3D_texture.type.modifiers = TextureSampleGradCompareOffset_Texture3D_texture_modifiers;
    TextureSampleGradCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleGradCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleGradCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleGradCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleGradCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleGradCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleGradCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradCompareOffset_Texture3D.name = "textureSampleGradCompareOffset"_c;
    TextureSampleGradCompareOffset_Texture3D.backendIndex = 2443;
    TextureSampleGradCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompareOffset_Texture3D.parameters = TextureSampleGradCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D)->signature = "f32 textureSampleGradCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D)->name = "textureSampleGradCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    SampledTextureSampleGradCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleGradCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleGradCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleGradCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleGradCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture3D.name = "textureSampleGradCompareOffset"_c;
    SampledTextureSampleGradCompareOffset_Texture3D.backendIndex = 2444;
    SampledTextureSampleGradCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D.parameters = SampledTextureSampleGradCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D)->signature = "f32 textureSampleGradCompareOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D)->name = "textureSampleGradCompareOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    TextureSampleGradCompareOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGradCompareOffset_Texture1DArray_texture.type.modifiers = TextureSampleGradCompareOffset_Texture1DArray_texture_modifiers;
    TextureSampleGradCompareOffset_Texture1DArray_texture.type.modifierValues = TextureSampleGradCompareOffset_Texture1DArray_texture_modifierValues;
    TextureSampleGradCompareOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture1DArray_sampler.type.modifiers = TextureSampleGradCompareOffset_Texture1DArray_sampler_modifiers;
    TextureSampleGradCompareOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleGradCompareOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleGradCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture1DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture1DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture1DArray_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradCompareOffset_Texture1DArray.name = "textureSampleGradCompareOffset"_c;
    TextureSampleGradCompareOffset_Texture1DArray.backendIndex = 2445;
    TextureSampleGradCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompareOffset_Texture1DArray.parameters = TextureSampleGradCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray)->signature = "f32 textureSampleGradCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray)->name = "textureSampleGradCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with SampledTexture1DArray, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    SampledTextureSampleGradCompareOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleGradCompareOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleGradCompareOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleGradCompareOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray.name = "textureSampleGradCompareOffset"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray.backendIndex = 2446;
    SampledTextureSampleGradCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray.parameters = SampledTextureSampleGradCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray)->signature = "f32 textureSampleGradCompareOffset(uniform *textureSampled1DArray,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray)->name = "textureSampleGradCompareOffset(uniform *textureSampled1DArray,f32x2,f32x2,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    TextureSampleGradCompareOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGradCompareOffset_Texture2DArray_texture.type.modifiers = TextureSampleGradCompareOffset_Texture2DArray_texture_modifiers;
    TextureSampleGradCompareOffset_Texture2DArray_texture.type.modifierValues = TextureSampleGradCompareOffset_Texture2DArray_texture_modifierValues;
    TextureSampleGradCompareOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture2DArray_sampler.type.modifiers = TextureSampleGradCompareOffset_Texture2DArray_sampler_modifiers;
    TextureSampleGradCompareOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleGradCompareOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleGradCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture2DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture2DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture2DArray_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradCompareOffset_Texture2DArray.name = "textureSampleGradCompareOffset"_c;
    TextureSampleGradCompareOffset_Texture2DArray.backendIndex = 2447;
    TextureSampleGradCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradCompareOffset_Texture2DArray.parameters = TextureSampleGradCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray)->signature = "f32 textureSampleGradCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray)->name = "textureSampleGradCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradCompareOffset with SampledTexture2DArray, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    SampledTextureSampleGradCompareOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleGradCompareOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleGradCompareOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleGradCompareOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with explicit gradient with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray.name = "textureSampleGradCompareOffset"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray.backendIndex = 2448;
    SampledTextureSampleGradCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray.parameters = SampledTextureSampleGradCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray)->signature = "f32 textureSampleGradCompareOffset(uniform *textureSampled2DArray,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray)->name = "textureSampleGradCompareOffset(uniform *textureSampled2DArray,f32x3,f32x3,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleGradCompareOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleGradProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProjCompare_Texture1D_texture.type.modifiers = TextureSampleGradProjCompare_Texture1D_texture_modifiers;
    TextureSampleGradProjCompare_Texture1D_texture.type.modifierValues = TextureSampleGradProjCompare_Texture1D_texture_modifierValues;
    TextureSampleGradProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompare_Texture1D_sampler.type.modifiers = TextureSampleGradProjCompare_Texture1D_sampler_modifiers;
    TextureSampleGradProjCompare_Texture1D_sampler.type.modifierValues = TextureSampleGradProjCompare_Texture1D_sampler_modifierValues;
    TextureSampleGradProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompare_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompare_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleGradProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison"_c;
    TextureSampleGradProjCompare_Texture1D.name = "textureSampleGradProjCompare"_c;
    TextureSampleGradProjCompare_Texture1D.backendIndex = 2449;
    TextureSampleGradProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradProjCompare_Texture1D.parameters = TextureSampleGradProjCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D)->signature = "f32 textureSampleGradProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D)->name = "textureSampleGradProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D)->nameWithVarNames = "textureSampleGradProjCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompare with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleGradProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradProjCompare_Texture1D_texture.type.modifiers = SampledTextureSampleGradProjCompare_Texture1D_texture_modifiers;
    SampledTextureSampleGradProjCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleGradProjCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleGradProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompare_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompare_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison"_c;
    SampledTextureSampleGradProjCompare_Texture1D.name = "textureSampleGradProjCompare"_c;
    SampledTextureSampleGradProjCompare_Texture1D.backendIndex = 2450;
    SampledTextureSampleGradProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D.parameters = SampledTextureSampleGradProjCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D)->signature = "f32 textureSampleGradProjCompare(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D)->name = "textureSampleGradProjCompare(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D)->nameWithVarNames = "textureSampleGradProjCompare(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompare with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32
    TextureSampleGradProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProjCompare_Texture2D_texture.type.modifiers = TextureSampleGradProjCompare_Texture2D_texture_modifiers;
    TextureSampleGradProjCompare_Texture2D_texture.type.modifierValues = TextureSampleGradProjCompare_Texture2D_texture_modifierValues;
    TextureSampleGradProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompare_Texture2D_sampler.type.modifiers = TextureSampleGradProjCompare_Texture2D_sampler_modifiers;
    TextureSampleGradProjCompare_Texture2D_sampler.type.modifierValues = TextureSampleGradProjCompare_Texture2D_sampler_modifierValues;
    TextureSampleGradProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompare_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompare_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompare_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompare_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleGradProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison"_c;
    TextureSampleGradProjCompare_Texture2D.name = "textureSampleGradProjCompare"_c;
    TextureSampleGradProjCompare_Texture2D.backendIndex = 2451;
    TextureSampleGradProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradProjCompare_Texture2D.parameters = TextureSampleGradProjCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D)->signature = "f32 textureSampleGradProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D)->name = "textureSampleGradProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D)->nameWithVarNames = "textureSampleGradProjCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompare with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32
    SampledTextureSampleGradProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradProjCompare_Texture2D_texture.type.modifiers = SampledTextureSampleGradProjCompare_Texture2D_texture_modifiers;
    SampledTextureSampleGradProjCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleGradProjCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleGradProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompare_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompare_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison"_c;
    SampledTextureSampleGradProjCompare_Texture2D.name = "textureSampleGradProjCompare"_c;
    SampledTextureSampleGradProjCompare_Texture2D.backendIndex = 2452;
    SampledTextureSampleGradProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture2D.parameters = SampledTextureSampleGradProjCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D)->signature = "f32 textureSampleGradProjCompare(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D)->name = "textureSampleGradProjCompare(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D)->nameWithVarNames = "textureSampleGradProjCompare(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompare with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32
    TextureSampleGradProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProjCompare_Texture3D_texture.type.modifiers = TextureSampleGradProjCompare_Texture3D_texture_modifiers;
    TextureSampleGradProjCompare_Texture3D_texture.type.modifierValues = TextureSampleGradProjCompare_Texture3D_texture_modifierValues;
    TextureSampleGradProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompare_Texture3D_sampler.type.modifiers = TextureSampleGradProjCompare_Texture3D_sampler_modifiers;
    TextureSampleGradProjCompare_Texture3D_sampler.type.modifierValues = TextureSampleGradProjCompare_Texture3D_sampler_modifierValues;
    TextureSampleGradProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompare_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompare_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompare_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompare_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleGradProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison"_c;
    TextureSampleGradProjCompare_Texture3D.name = "textureSampleGradProjCompare"_c;
    TextureSampleGradProjCompare_Texture3D.backendIndex = 2453;
    TextureSampleGradProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradProjCompare_Texture3D.parameters = TextureSampleGradProjCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D)->signature = "f32 textureSampleGradProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D)->name = "textureSampleGradProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D)->nameWithVarNames = "textureSampleGradProjCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompare with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32
    SampledTextureSampleGradProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradProjCompare_Texture3D_texture.type.modifiers = SampledTextureSampleGradProjCompare_Texture3D_texture_modifiers;
    SampledTextureSampleGradProjCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleGradProjCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleGradProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompare_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompare_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison"_c;
    SampledTextureSampleGradProjCompare_Texture3D.name = "textureSampleGradProjCompare"_c;
    SampledTextureSampleGradProjCompare_Texture3D.backendIndex = 2454;
    SampledTextureSampleGradProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture3D.parameters = SampledTextureSampleGradProjCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D)->signature = "f32 textureSampleGradProjCompare(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D)->name = "textureSampleGradProjCompare(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D)->nameWithVarNames = "textureSampleGradProjCompare(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32, Float32
    TextureSampleGradProjCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProjCompareOffset_Texture1D_texture.type.modifiers = TextureSampleGradProjCompareOffset_Texture1D_texture_modifiers;
    TextureSampleGradProjCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleGradProjCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleGradProjCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleGradProjCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleGradProjCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleGradProjCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleGradProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompareOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompareOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleGradProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleGradProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture1D.name = "textureSampleGradProjCompareOffset"_c;
    TextureSampleGradProjCompareOffset_Texture1D.backendIndex = 2455;
    TextureSampleGradProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D.parameters = TextureSampleGradProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D)->signature = "f32 textureSampleGradProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D)->name = "textureSampleGradProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleGradProjCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleGradProjCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleGradProjCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleGradProjCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleGradProjCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D.name = "textureSampleGradProjCompareOffset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D.backendIndex = 2456;
    SampledTextureSampleGradProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D.parameters = SampledTextureSampleGradProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D)->signature = "f32 textureSampleGradProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D)->name = "textureSampleGradProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleGradProjCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, grad_x : f32, grad_y : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompareOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32, Float32x2
    TextureSampleGradProjCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProjCompareOffset_Texture2D_texture.type.modifiers = TextureSampleGradProjCompareOffset_Texture2D_texture_modifiers;
    TextureSampleGradProjCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleGradProjCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleGradProjCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleGradProjCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleGradProjCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleGradProjCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleGradProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompareOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompareOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleGradProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleGradProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture2D.name = "textureSampleGradProjCompareOffset"_c;
    TextureSampleGradProjCompareOffset_Texture2D.backendIndex = 2457;
    TextureSampleGradProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture2D.parameters = TextureSampleGradProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D)->signature = "f32 textureSampleGradProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D)->name = "textureSampleGradProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32x2,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleGradProjCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompareOffset with SampledTexture2D, Float32x2, Float32x2, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleGradProjCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleGradProjCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleGradProjCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleGradProjCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D.name = "textureSampleGradProjCompareOffset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D.backendIndex = 2458;
    SampledTextureSampleGradProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D.parameters = SampledTextureSampleGradProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D)->signature = "f32 textureSampleGradProjCompareOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D)->name = "textureSampleGradProjCompareOffset(uniform *textureSampled2D,f32x2,f32x2,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleGradProjCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, grad_x : f32x2, grad_y : f32x2, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompareOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32, Float32x3
    TextureSampleGradProjCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProjCompareOffset_Texture3D_texture.type.modifiers = TextureSampleGradProjCompareOffset_Texture3D_texture_modifiers;
    TextureSampleGradProjCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleGradProjCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleGradProjCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleGradProjCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleGradProjCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleGradProjCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleGradProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompareOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompareOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleGradProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleGradProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture3D.name = "textureSampleGradProjCompareOffset"_c;
    TextureSampleGradProjCompareOffset_Texture3D.backendIndex = 2459;
    TextureSampleGradProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture3D.parameters = TextureSampleGradProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D)->signature = "f32 textureSampleGradProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D)->name = "textureSampleGradProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32x3,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleGradProjCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleGradProjCompareOffset with SampledTexture3D, Float32x3, Float32x3, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleGradProjCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleGradProjCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleGradProjCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleGradProjCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with explicit gradient with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D.name = "textureSampleGradProjCompareOffset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D.backendIndex = 2460;
    SampledTextureSampleGradProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D.parameters = SampledTextureSampleGradProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D)->signature = "f32 textureSampleGradProjCompareOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D)->name = "textureSampleGradProjCompareOffset(uniform *textureSampled3D,f32x3,f32x3,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleGradProjCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, grad_x : f32x3, grad_y : f32x3, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBias with Texture1D, Sampler, Float32, Float32
    TextureSampleBias_Texture1D_texture.name = "texture"_c;
    TextureSampleBias_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBias_Texture1D_texture.type.modifiers = TextureSampleBias_Texture1D_texture_modifiers;
    TextureSampleBias_Texture1D_texture.type.modifierValues = TextureSampleBias_Texture1D_texture_modifierValues;
    TextureSampleBias_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBias_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture1D_sampler.type.modifiers = TextureSampleBias_Texture1D_sampler_modifiers;
    TextureSampleBias_Texture1D_sampler.type.modifierValues = TextureSampleBias_Texture1D_sampler_modifierValues;
    TextureSampleBias_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture1D_bias.name = "bias"_c;
    TextureSampleBias_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture1D.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_Texture1D.name = "textureSampleBias"_c;
    TextureSampleBias_Texture1D.backendIndex = 2461;
    TextureSampleBias_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture1D.parameters = TextureSampleBias_Texture1D_args;
    Symbol::Resolved(&TextureSampleBias_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBias_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture1D)->signature = "f32x4 textureSampleBias(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture1D)->name = "textureSampleBias(uniform *texture1D,uniform *sampler,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture1D)->nameWithVarNames = "textureSampleBias(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTexture1D, Float32, Float32
    SampledTextureSampleBias_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBias_Texture1D_texture.type.modifiers = SampledTextureSampleBias_Texture1D_texture_modifiers;
    SampledTextureSampleBias_Texture1D_texture.type.modifierValues = SampledTextureSampleBias_Texture1D_texture_modifierValues;
    SampledTextureSampleBias_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture1D.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_Texture1D.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture1D.backendIndex = 2462;
    SampledTextureSampleBias_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture1D.parameters = SampledTextureSampleBias_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D)->signature = "f32x4 textureSampleBias(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D)->name = "textureSampleBias(uniform *textureSampled1D,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampled1D, coordinate : f32, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture2D, Sampler, Float32x2, Float32
    TextureSampleBias_Texture2D_texture.name = "texture"_c;
    TextureSampleBias_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBias_Texture2D_texture.type.modifiers = TextureSampleBias_Texture2D_texture_modifiers;
    TextureSampleBias_Texture2D_texture.type.modifierValues = TextureSampleBias_Texture2D_texture_modifierValues;
    TextureSampleBias_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBias_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture2D_sampler.type.modifiers = TextureSampleBias_Texture2D_sampler_modifiers;
    TextureSampleBias_Texture2D_sampler.type.modifierValues = TextureSampleBias_Texture2D_sampler_modifierValues;
    TextureSampleBias_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBias_Texture2D_bias.name = "bias"_c;
    TextureSampleBias_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture2D.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_Texture2D.name = "textureSampleBias"_c;
    TextureSampleBias_Texture2D.backendIndex = 2463;
    TextureSampleBias_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture2D.parameters = TextureSampleBias_Texture2D_args;
    Symbol::Resolved(&TextureSampleBias_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBias_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBias_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture2D)->signature = "f32x4 textureSampleBias(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture2D)->name = "textureSampleBias(uniform *texture2D,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture2D)->nameWithVarNames = "textureSampleBias(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTexture2D, Float32x2, Float32
    SampledTextureSampleBias_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBias_Texture2D_texture.type.modifiers = SampledTextureSampleBias_Texture2D_texture_modifiers;
    SampledTextureSampleBias_Texture2D_texture.type.modifierValues = SampledTextureSampleBias_Texture2D_texture_modifierValues;
    SampledTextureSampleBias_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBias_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture2D.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_Texture2D.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture2D.backendIndex = 2464;
    SampledTextureSampleBias_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture2D.parameters = SampledTextureSampleBias_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D)->signature = "f32x4 textureSampleBias(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D)->name = "textureSampleBias(uniform *textureSampled2D,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture3D, Sampler, Float32x3, Float32
    TextureSampleBias_Texture3D_texture.name = "texture"_c;
    TextureSampleBias_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBias_Texture3D_texture.type.modifiers = TextureSampleBias_Texture3D_texture_modifiers;
    TextureSampleBias_Texture3D_texture.type.modifierValues = TextureSampleBias_Texture3D_texture_modifierValues;
    TextureSampleBias_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBias_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture3D_sampler.type.modifiers = TextureSampleBias_Texture3D_sampler_modifiers;
    TextureSampleBias_Texture3D_sampler.type.modifierValues = TextureSampleBias_Texture3D_sampler_modifierValues;
    TextureSampleBias_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBias_Texture3D_bias.name = "bias"_c;
    TextureSampleBias_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture3D.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_Texture3D.name = "textureSampleBias"_c;
    TextureSampleBias_Texture3D.backendIndex = 2465;
    TextureSampleBias_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture3D.parameters = TextureSampleBias_Texture3D_args;
    Symbol::Resolved(&TextureSampleBias_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBias_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBias_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture3D)->signature = "f32x4 textureSampleBias(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture3D)->name = "textureSampleBias(uniform *texture3D,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture3D)->nameWithVarNames = "textureSampleBias(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTexture3D, Float32x3, Float32
    SampledTextureSampleBias_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBias_Texture3D_texture.type.modifiers = SampledTextureSampleBias_Texture3D_texture_modifiers;
    SampledTextureSampleBias_Texture3D_texture.type.modifierValues = SampledTextureSampleBias_Texture3D_texture_modifierValues;
    SampledTextureSampleBias_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBias_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture3D.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_Texture3D.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture3D.backendIndex = 2466;
    SampledTextureSampleBias_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture3D.parameters = SampledTextureSampleBias_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D)->signature = "f32x4 textureSampleBias(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D)->name = "textureSampleBias(uniform *textureSampled3D,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with TextureCube, Sampler, Float32x3, Float32
    TextureSampleBias_TextureCube_texture.name = "texture"_c;
    TextureSampleBias_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSampleBias_TextureCube_texture.type.modifiers = TextureSampleBias_TextureCube_texture_modifiers;
    TextureSampleBias_TextureCube_texture.type.modifierValues = TextureSampleBias_TextureCube_texture_modifierValues;
    TextureSampleBias_TextureCube_sampler.name = "sampler"_c;
    TextureSampleBias_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_TextureCube_sampler.type.modifiers = TextureSampleBias_TextureCube_sampler_modifiers;
    TextureSampleBias_TextureCube_sampler.type.modifierValues = TextureSampleBias_TextureCube_sampler_modifierValues;
    TextureSampleBias_TextureCube_coordinate.name = "coordinate"_c;
    TextureSampleBias_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBias_TextureCube_bias.name = "bias"_c;
    TextureSampleBias_TextureCube_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_TextureCube.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_TextureCube.name = "textureSampleBias"_c;
    TextureSampleBias_TextureCube.backendIndex = 2467;
    TextureSampleBias_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_TextureCube.parameters = TextureSampleBias_TextureCube_args;
    Symbol::Resolved(&TextureSampleBias_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSampleBias_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBias_TextureCube_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_TextureCube)->signature = "f32x4 textureSampleBias(uniform *textureCube,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_TextureCube)->name = "textureSampleBias(uniform *textureCube,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_TextureCube)->nameWithVarNames = "textureSampleBias(texture : uniform *textureCube, sampler : uniform *sampler, coordinate : f32x3, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTextureCube, Float32x3, Float32
    SampledTextureSampleBias_TextureCube_texture.name = "texture"_c;
    SampledTextureSampleBias_TextureCube_texture.type = Type::FullType{ SampledTextureCubeType.name };
    SampledTextureSampleBias_TextureCube_texture.type.modifiers = SampledTextureSampleBias_TextureCube_texture_modifiers;
    SampledTextureSampleBias_TextureCube_texture.type.modifierValues = SampledTextureSampleBias_TextureCube_texture_modifierValues;
    SampledTextureSampleBias_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBias_TextureCube_bias.name = "bias"_c;
    SampledTextureSampleBias_TextureCube_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_TextureCube.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_TextureCube.name = "textureSampleBias"_c;
    SampledTextureSampleBias_TextureCube.backendIndex = 2468;
    SampledTextureSampleBias_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_TextureCube.parameters = SampledTextureSampleBias_TextureCube_args;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_texture)->typeSymbol = &SampledTextureCubeType;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube)->signature = "f32x4 textureSampleBias(uniform *textureSampledCube,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube)->name = "textureSampleBias(uniform *textureSampledCube,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampledCube, coordinate : f32x3, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture1DArray, Sampler, Float32x2, Float32
    TextureSampleBias_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBias_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBias_Texture1DArray_texture.type.modifiers = TextureSampleBias_Texture1DArray_texture_modifiers;
    TextureSampleBias_Texture1DArray_texture.type.modifierValues = TextureSampleBias_Texture1DArray_texture_modifierValues;
    TextureSampleBias_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBias_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture1DArray_sampler.type.modifiers = TextureSampleBias_Texture1DArray_sampler_modifiers;
    TextureSampleBias_Texture1DArray_sampler.type.modifierValues = TextureSampleBias_Texture1DArray_sampler_modifierValues;
    TextureSampleBias_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBias_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBias_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_Texture1DArray.name = "textureSampleBias"_c;
    TextureSampleBias_Texture1DArray.backendIndex = 2469;
    TextureSampleBias_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture1DArray.parameters = TextureSampleBias_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray)->signature = "f32x4 textureSampleBias(uniform *texture1DArray,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray)->name = "textureSampleBias(uniform *texture1DArray,uniform *sampler,f32x2,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray)->nameWithVarNames = "textureSampleBias(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTexture1DArray, Float32x2, Float32
    SampledTextureSampleBias_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleBias_Texture1DArray_texture.type.modifiers = SampledTextureSampleBias_Texture1DArray_texture_modifiers;
    SampledTextureSampleBias_Texture1DArray_texture.type.modifierValues = SampledTextureSampleBias_Texture1DArray_texture_modifierValues;
    SampledTextureSampleBias_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBias_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_Texture1DArray.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture1DArray.backendIndex = 2470;
    SampledTextureSampleBias_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture1DArray.parameters = SampledTextureSampleBias_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray)->signature = "f32x4 textureSampleBias(uniform *textureSampled1DArray,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray)->name = "textureSampleBias(uniform *textureSampled1DArray,f32x2,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampled1DArray, coordinate : f32x2, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture2DArray, Sampler, Float32x3, Float32
    TextureSampleBias_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBias_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBias_Texture2DArray_texture.type.modifiers = TextureSampleBias_Texture2DArray_texture_modifiers;
    TextureSampleBias_Texture2DArray_texture.type.modifierValues = TextureSampleBias_Texture2DArray_texture_modifierValues;
    TextureSampleBias_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBias_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture2DArray_sampler.type.modifiers = TextureSampleBias_Texture2DArray_sampler_modifiers;
    TextureSampleBias_Texture2DArray_sampler.type.modifierValues = TextureSampleBias_Texture2DArray_sampler_modifierValues;
    TextureSampleBias_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBias_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBias_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_Texture2DArray.name = "textureSampleBias"_c;
    TextureSampleBias_Texture2DArray.backendIndex = 2471;
    TextureSampleBias_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture2DArray.parameters = TextureSampleBias_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray)->signature = "f32x4 textureSampleBias(uniform *texture2DArray,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray)->name = "textureSampleBias(uniform *texture2DArray,uniform *sampler,f32x3,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray)->nameWithVarNames = "textureSampleBias(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTexture2DArray, Float32x3, Float32
    SampledTextureSampleBias_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleBias_Texture2DArray_texture.type.modifiers = SampledTextureSampleBias_Texture2DArray_texture_modifiers;
    SampledTextureSampleBias_Texture2DArray_texture.type.modifierValues = SampledTextureSampleBias_Texture2DArray_texture_modifierValues;
    SampledTextureSampleBias_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBias_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_Texture2DArray.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture2DArray.backendIndex = 2472;
    SampledTextureSampleBias_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture2DArray.parameters = SampledTextureSampleBias_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray)->signature = "f32x4 textureSampleBias(uniform *textureSampled2DArray,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray)->name = "textureSampleBias(uniform *textureSampled2DArray,f32x3,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampled2DArray, coordinate : f32x3, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with TextureCubeArray, Sampler, Float32x4, Float32
    TextureSampleBias_TextureCubeArray_texture.name = "texture"_c;
    TextureSampleBias_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSampleBias_TextureCubeArray_texture.type.modifiers = TextureSampleBias_TextureCubeArray_texture_modifiers;
    TextureSampleBias_TextureCubeArray_texture.type.modifierValues = TextureSampleBias_TextureCubeArray_texture_modifierValues;
    TextureSampleBias_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSampleBias_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_TextureCubeArray_sampler.type.modifiers = TextureSampleBias_TextureCubeArray_sampler_modifiers;
    TextureSampleBias_TextureCubeArray_sampler.type.modifierValues = TextureSampleBias_TextureCubeArray_sampler_modifierValues;
    TextureSampleBias_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSampleBias_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSampleBias_TextureCubeArray_bias.name = "bias"_c;
    TextureSampleBias_TextureCubeArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_TextureCubeArray.documentation = "Sample a texture at coordinate with a mip bias"_c;
    TextureSampleBias_TextureCubeArray.name = "textureSampleBias"_c;
    TextureSampleBias_TextureCubeArray.backendIndex = 2473;
    TextureSampleBias_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_TextureCubeArray.parameters = TextureSampleBias_TextureCubeArray_args;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray)->signature = "f32x4 textureSampleBias(uniform *textureCubeArray,uniform *sampler,f32x4,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray)->name = "textureSampleBias(uniform *textureCubeArray,uniform *sampler,f32x4,f32)"_c;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray)->nameWithVarNames = "textureSampleBias(texture : uniform *textureCubeArray, sampler : uniform *sampler, coordinate : f32x4, bias : f32)"_c;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with SampledTextureCubeArray, Float32x4, Float32
    SampledTextureSampleBias_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSampleBias_TextureCubeArray_texture.type = Type::FullType{ SampledTextureCubeArrayType.name };
    SampledTextureSampleBias_TextureCubeArray_texture.type.modifiers = SampledTextureSampleBias_TextureCubeArray_texture_modifiers;
    SampledTextureSampleBias_TextureCubeArray_texture.type.modifierValues = SampledTextureSampleBias_TextureCubeArray_texture_modifierValues;
    SampledTextureSampleBias_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleBias_TextureCubeArray_bias.name = "bias"_c;
    SampledTextureSampleBias_TextureCubeArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_TextureCubeArray.documentation = "Sample a texture at coordinate with a mip bias"_c;
    SampledTextureSampleBias_TextureCubeArray.name = "textureSampleBias"_c;
    SampledTextureSampleBias_TextureCubeArray.backendIndex = 2474;
    SampledTextureSampleBias_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_TextureCubeArray.parameters = SampledTextureSampleBias_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_texture)->typeSymbol = &SampledTextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray)->signature = "f32x4 textureSampleBias(uniform *textureSampledCubeArray,f32x4,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray)->name = "textureSampleBias(uniform *textureSampledCubeArray,f32x4,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray)->nameWithVarNames = "textureSampleBias(texture : uniform *textureSampledCubeArray, coordinate : f32x4, bias : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleBiasOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasOffset_Texture1D_texture.type.modifiers = TextureSampleBiasOffset_Texture1D_texture_modifiers;
    TextureSampleBiasOffset_Texture1D_texture.type.modifierValues = TextureSampleBiasOffset_Texture1D_texture_modifierValues;
    TextureSampleBiasOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture1D_sampler.type.modifiers = TextureSampleBiasOffset_Texture1D_sampler_modifiers;
    TextureSampleBiasOffset_Texture1D_sampler.type.modifierValues = TextureSampleBiasOffset_Texture1D_sampler_modifierValues;
    TextureSampleBiasOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    TextureSampleBiasOffset_Texture1D.name = "textureSampleBiasOffset"_c;
    TextureSampleBiasOffset_Texture1D.backendIndex = 2475;
    TextureSampleBiasOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture1D.parameters = TextureSampleBiasOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D)->signature = "f32x4 textureSampleBiasOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D)->name = "textureSampleBiasOffset(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleBiasOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBiasOffset_Texture1D_texture.type.modifiers = SampledTextureSampleBiasOffset_Texture1D_texture_modifiers;
    SampledTextureSampleBiasOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleBiasOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleBiasOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasOffset_Texture1D.name = "textureSampleBiasOffset"_c;
    SampledTextureSampleBiasOffset_Texture1D.backendIndex = 2476;
    SampledTextureSampleBiasOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture1D.parameters = SampledTextureSampleBiasOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D)->signature = "f32x4 textureSampleBiasOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D)->name = "textureSampleBiasOffset(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *textureSampled1D, coordinate : f32, bias : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleBiasOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasOffset_Texture2D_texture.type.modifiers = TextureSampleBiasOffset_Texture2D_texture_modifiers;
    TextureSampleBiasOffset_Texture2D_texture.type.modifierValues = TextureSampleBiasOffset_Texture2D_texture_modifierValues;
    TextureSampleBiasOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture2D_sampler.type.modifiers = TextureSampleBiasOffset_Texture2D_sampler_modifiers;
    TextureSampleBiasOffset_Texture2D_sampler.type.modifierValues = TextureSampleBiasOffset_Texture2D_sampler_modifierValues;
    TextureSampleBiasOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasOffset_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    TextureSampleBiasOffset_Texture2D.name = "textureSampleBiasOffset"_c;
    TextureSampleBiasOffset_Texture2D.backendIndex = 2477;
    TextureSampleBiasOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture2D.parameters = TextureSampleBiasOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D)->signature = "f32x4 textureSampleBiasOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D)->name = "textureSampleBiasOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with SampledTexture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleBiasOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBiasOffset_Texture2D_texture.type.modifiers = SampledTextureSampleBiasOffset_Texture2D_texture_modifiers;
    SampledTextureSampleBiasOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleBiasOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleBiasOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasOffset_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasOffset_Texture2D.name = "textureSampleBiasOffset"_c;
    SampledTextureSampleBiasOffset_Texture2D.backendIndex = 2478;
    SampledTextureSampleBiasOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture2D.parameters = SampledTextureSampleBiasOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D)->signature = "f32x4 textureSampleBiasOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D)->name = "textureSampleBiasOffset(uniform *textureSampled2D,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleBiasOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasOffset_Texture3D_texture.type.modifiers = TextureSampleBiasOffset_Texture3D_texture_modifiers;
    TextureSampleBiasOffset_Texture3D_texture.type.modifierValues = TextureSampleBiasOffset_Texture3D_texture_modifierValues;
    TextureSampleBiasOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture3D_sampler.type.modifiers = TextureSampleBiasOffset_Texture3D_sampler_modifiers;
    TextureSampleBiasOffset_Texture3D_sampler.type.modifierValues = TextureSampleBiasOffset_Texture3D_sampler_modifierValues;
    TextureSampleBiasOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasOffset_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    TextureSampleBiasOffset_Texture3D.name = "textureSampleBiasOffset"_c;
    TextureSampleBiasOffset_Texture3D.backendIndex = 2479;
    TextureSampleBiasOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture3D.parameters = TextureSampleBiasOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D)->signature = "f32x4 textureSampleBiasOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D)->name = "textureSampleBiasOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with SampledTexture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleBiasOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBiasOffset_Texture3D_texture.type.modifiers = SampledTextureSampleBiasOffset_Texture3D_texture_modifiers;
    SampledTextureSampleBiasOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleBiasOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleBiasOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasOffset_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasOffset_Texture3D.name = "textureSampleBiasOffset"_c;
    SampledTextureSampleBiasOffset_Texture3D.backendIndex = 2480;
    SampledTextureSampleBiasOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture3D.parameters = SampledTextureSampleBiasOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D)->signature = "f32x4 textureSampleBiasOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D)->name = "textureSampleBiasOffset(uniform *textureSampled3D,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
    TextureSampleBiasOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBiasOffset_Texture1DArray_texture.type.modifiers = TextureSampleBiasOffset_Texture1DArray_texture_modifiers;
    TextureSampleBiasOffset_Texture1DArray_texture.type.modifierValues = TextureSampleBiasOffset_Texture1DArray_texture_modifierValues;
    TextureSampleBiasOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture1DArray_sampler.type.modifiers = TextureSampleBiasOffset_Texture1DArray_sampler_modifiers;
    TextureSampleBiasOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleBiasOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleBiasOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasOffset_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasOffset_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    TextureSampleBiasOffset_Texture1DArray.name = "textureSampleBiasOffset"_c;
    TextureSampleBiasOffset_Texture1DArray.backendIndex = 2481;
    TextureSampleBiasOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture1DArray.parameters = TextureSampleBiasOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray)->signature = "f32x4 textureSampleBiasOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray)->name = "textureSampleBiasOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, bias : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with SampledTexture1DArray, Float32x2, Float32, Float32x2
    SampledTextureSampleBiasOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleBiasOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleBiasOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleBiasOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleBiasOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleBiasOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasOffset_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasOffset_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasOffset_Texture1DArray.name = "textureSampleBiasOffset"_c;
    SampledTextureSampleBiasOffset_Texture1DArray.backendIndex = 2482;
    SampledTextureSampleBiasOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture1DArray.parameters = SampledTextureSampleBiasOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray)->signature = "f32x4 textureSampleBiasOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray)->name = "textureSampleBiasOffset(uniform *textureSampled1DArray,f32x2,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, bias : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
    TextureSampleBiasOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBiasOffset_Texture2DArray_texture.type.modifiers = TextureSampleBiasOffset_Texture2DArray_texture_modifiers;
    TextureSampleBiasOffset_Texture2DArray_texture.type.modifierValues = TextureSampleBiasOffset_Texture2DArray_texture_modifierValues;
    TextureSampleBiasOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture2DArray_sampler.type.modifiers = TextureSampleBiasOffset_Texture2DArray_sampler_modifiers;
    TextureSampleBiasOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleBiasOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleBiasOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasOffset_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasOffset_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    TextureSampleBiasOffset_Texture2DArray.name = "textureSampleBiasOffset"_c;
    TextureSampleBiasOffset_Texture2DArray.backendIndex = 2483;
    TextureSampleBiasOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture2DArray.parameters = TextureSampleBiasOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray)->signature = "f32x4 textureSampleBiasOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray)->name = "textureSampleBiasOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, bias : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with SampledTexture2DArray, Float32x3, Float32, Float32x3
    SampledTextureSampleBiasOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleBiasOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleBiasOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleBiasOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleBiasOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleBiasOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasOffset_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasOffset_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasOffset_Texture2DArray.name = "textureSampleBiasOffset"_c;
    SampledTextureSampleBiasOffset_Texture2DArray.backendIndex = 2484;
    SampledTextureSampleBiasOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture2DArray.parameters = SampledTextureSampleBiasOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray)->signature = "f32x4 textureSampleBiasOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray)->name = "textureSampleBiasOffset(uniform *textureSampled2DArray,f32x3,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray)->nameWithVarNames = "textureSampleBiasOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, bias : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleBiasProj_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasProj_Texture1D_texture.type.modifiers = TextureSampleBiasProj_Texture1D_texture_modifiers;
    TextureSampleBiasProj_Texture1D_texture.type.modifierValues = TextureSampleBiasProj_Texture1D_texture_modifierValues;
    TextureSampleBiasProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProj_Texture1D_sampler.type.modifiers = TextureSampleBiasProj_Texture1D_sampler_modifiers;
    TextureSampleBiasProj_Texture1D_sampler.type.modifierValues = TextureSampleBiasProj_Texture1D_sampler_modifierValues;
    TextureSampleBiasProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasProj_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture1D_proj.name = "proj"_c;
    TextureSampleBiasProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with projection"_c;
    TextureSampleBiasProj_Texture1D.name = "textureSampleBiasProj"_c;
    TextureSampleBiasProj_Texture1D.backendIndex = 2485;
    TextureSampleBiasProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProj_Texture1D.parameters = TextureSampleBiasProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D)->signature = "f32x4 textureSampleBiasProj(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D)->name = "textureSampleBiasProj(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D)->nameWithVarNames = "textureSampleBiasProj(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleBiasProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasProj_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBiasProj_Texture1D_texture.type.modifiers = SampledTextureSampleBiasProj_Texture1D_texture_modifiers;
    SampledTextureSampleBiasProj_Texture1D_texture.type.modifierValues = SampledTextureSampleBiasProj_Texture1D_texture_modifierValues;
    SampledTextureSampleBiasProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasProj_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleBiasProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with projection"_c;
    SampledTextureSampleBiasProj_Texture1D.name = "textureSampleBiasProj"_c;
    SampledTextureSampleBiasProj_Texture1D.backendIndex = 2486;
    SampledTextureSampleBiasProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProj_Texture1D.parameters = SampledTextureSampleBiasProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D)->signature = "f32x4 textureSampleBiasProj(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D)->name = "textureSampleBiasProj(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D)->nameWithVarNames = "textureSampleBiasProj(texture : uniform *textureSampled1D, coordinate : f32, bias : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleBiasProj_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasProj_Texture2D_texture.type.modifiers = TextureSampleBiasProj_Texture2D_texture_modifiers;
    TextureSampleBiasProj_Texture2D_texture.type.modifierValues = TextureSampleBiasProj_Texture2D_texture_modifierValues;
    TextureSampleBiasProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProj_Texture2D_sampler.type.modifiers = TextureSampleBiasProj_Texture2D_sampler_modifiers;
    TextureSampleBiasProj_Texture2D_sampler.type.modifierValues = TextureSampleBiasProj_Texture2D_sampler_modifierValues;
    TextureSampleBiasProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProj_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasProj_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture2D_proj.name = "proj"_c;
    TextureSampleBiasProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with projection"_c;
    TextureSampleBiasProj_Texture2D.name = "textureSampleBiasProj"_c;
    TextureSampleBiasProj_Texture2D.backendIndex = 2487;
    TextureSampleBiasProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProj_Texture2D.parameters = TextureSampleBiasProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D)->signature = "f32x4 textureSampleBiasProj(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D)->name = "textureSampleBiasProj(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D)->nameWithVarNames = "textureSampleBiasProj(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with SampledTexture2D, Float32x2, Float32, Float32
    SampledTextureSampleBiasProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasProj_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBiasProj_Texture2D_texture.type.modifiers = SampledTextureSampleBiasProj_Texture2D_texture_modifiers;
    SampledTextureSampleBiasProj_Texture2D_texture.type.modifierValues = SampledTextureSampleBiasProj_Texture2D_texture_modifierValues;
    SampledTextureSampleBiasProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProj_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasProj_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleBiasProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with projection"_c;
    SampledTextureSampleBiasProj_Texture2D.name = "textureSampleBiasProj"_c;
    SampledTextureSampleBiasProj_Texture2D.backendIndex = 2488;
    SampledTextureSampleBiasProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProj_Texture2D.parameters = SampledTextureSampleBiasProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D)->signature = "f32x4 textureSampleBiasProj(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D)->name = "textureSampleBiasProj(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D)->nameWithVarNames = "textureSampleBiasProj(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleBiasProj_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasProj_Texture3D_texture.type.modifiers = TextureSampleBiasProj_Texture3D_texture_modifiers;
    TextureSampleBiasProj_Texture3D_texture.type.modifierValues = TextureSampleBiasProj_Texture3D_texture_modifierValues;
    TextureSampleBiasProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProj_Texture3D_sampler.type.modifiers = TextureSampleBiasProj_Texture3D_sampler_modifiers;
    TextureSampleBiasProj_Texture3D_sampler.type.modifierValues = TextureSampleBiasProj_Texture3D_sampler_modifierValues;
    TextureSampleBiasProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProj_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasProj_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture3D_proj.name = "proj"_c;
    TextureSampleBiasProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with projection"_c;
    TextureSampleBiasProj_Texture3D.name = "textureSampleBiasProj"_c;
    TextureSampleBiasProj_Texture3D.backendIndex = 2489;
    TextureSampleBiasProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProj_Texture3D.parameters = TextureSampleBiasProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D)->signature = "f32x4 textureSampleBiasProj(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D)->name = "textureSampleBiasProj(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D)->nameWithVarNames = "textureSampleBiasProj(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32, proj : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with SampledTexture3D, Float32x3, Float32, Float32
    SampledTextureSampleBiasProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasProj_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBiasProj_Texture3D_texture.type.modifiers = SampledTextureSampleBiasProj_Texture3D_texture_modifiers;
    SampledTextureSampleBiasProj_Texture3D_texture.type.modifierValues = SampledTextureSampleBiasProj_Texture3D_texture_modifierValues;
    SampledTextureSampleBiasProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProj_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasProj_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleBiasProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with projection"_c;
    SampledTextureSampleBiasProj_Texture3D.name = "textureSampleBiasProj"_c;
    SampledTextureSampleBiasProj_Texture3D.backendIndex = 2490;
    SampledTextureSampleBiasProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProj_Texture3D.parameters = SampledTextureSampleBiasProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D)->signature = "f32x4 textureSampleBiasProj(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D)->name = "textureSampleBiasProj(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D)->nameWithVarNames = "textureSampleBiasProj(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32, proj : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleBiasProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasProjOffset_Texture1D_texture.type.modifiers = TextureSampleBiasProjOffset_Texture1D_texture_modifiers;
    TextureSampleBiasProjOffset_Texture1D_texture.type.modifierValues = TextureSampleBiasProjOffset_Texture1D_texture_modifierValues;
    TextureSampleBiasProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjOffset_Texture1D_sampler.type.modifiers = TextureSampleBiasProjOffset_Texture1D_sampler_modifiers;
    TextureSampleBiasProjOffset_Texture1D_sampler.type.modifierValues = TextureSampleBiasProjOffset_Texture1D_sampler_modifierValues;
    TextureSampleBiasProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasProjOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleBiasProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleBiasProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate"_c;
    TextureSampleBiasProjOffset_Texture1D.name = "textureSampleBiasProjOffset"_c;
    TextureSampleBiasProjOffset_Texture1D.backendIndex = 2491;
    TextureSampleBiasProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjOffset_Texture1D.parameters = TextureSampleBiasProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D)->signature = "f32x4 textureSampleBiasProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D)->name = "textureSampleBiasProjOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D)->nameWithVarNames = "textureSampleBiasProjOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleBiasProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBiasProjOffset_Texture1D_texture.type.modifiers = SampledTextureSampleBiasProjOffset_Texture1D_texture_modifiers;
    SampledTextureSampleBiasProjOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleBiasProjOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleBiasProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture1D.name = "textureSampleBiasProjOffset"_c;
    SampledTextureSampleBiasProjOffset_Texture1D.backendIndex = 2492;
    SampledTextureSampleBiasProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D.parameters = SampledTextureSampleBiasProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D)->signature = "f32x4 textureSampleBiasProjOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D)->name = "textureSampleBiasProjOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D)->nameWithVarNames = "textureSampleBiasProjOffset(texture : uniform *textureSampled1D, coordinate : f32, bias : f32, proj : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleBiasProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasProjOffset_Texture2D_texture.type.modifiers = TextureSampleBiasProjOffset_Texture2D_texture_modifiers;
    TextureSampleBiasProjOffset_Texture2D_texture.type.modifierValues = TextureSampleBiasProjOffset_Texture2D_texture_modifierValues;
    TextureSampleBiasProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjOffset_Texture2D_sampler.type.modifiers = TextureSampleBiasProjOffset_Texture2D_sampler_modifiers;
    TextureSampleBiasProjOffset_Texture2D_sampler.type.modifierValues = TextureSampleBiasProjOffset_Texture2D_sampler_modifierValues;
    TextureSampleBiasProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjOffset_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasProjOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleBiasProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleBiasProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate"_c;
    TextureSampleBiasProjOffset_Texture2D.name = "textureSampleBiasProjOffset"_c;
    TextureSampleBiasProjOffset_Texture2D.backendIndex = 2493;
    TextureSampleBiasProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjOffset_Texture2D.parameters = TextureSampleBiasProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D)->signature = "f32x4 textureSampleBiasProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D)->name = "textureSampleBiasProjOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D)->nameWithVarNames = "textureSampleBiasProjOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleBiasProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBiasProjOffset_Texture2D_texture.type.modifiers = SampledTextureSampleBiasProjOffset_Texture2D_texture_modifiers;
    SampledTextureSampleBiasProjOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleBiasProjOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleBiasProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture2D.name = "textureSampleBiasProjOffset"_c;
    SampledTextureSampleBiasProjOffset_Texture2D.backendIndex = 2494;
    SampledTextureSampleBiasProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D.parameters = SampledTextureSampleBiasProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D)->signature = "f32x4 textureSampleBiasProjOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D)->name = "textureSampleBiasProjOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D)->nameWithVarNames = "textureSampleBiasProjOffset(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32, proj : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleBiasProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasProjOffset_Texture3D_texture.type.modifiers = TextureSampleBiasProjOffset_Texture3D_texture_modifiers;
    TextureSampleBiasProjOffset_Texture3D_texture.type.modifierValues = TextureSampleBiasProjOffset_Texture3D_texture_modifierValues;
    TextureSampleBiasProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjOffset_Texture3D_sampler.type.modifiers = TextureSampleBiasProjOffset_Texture3D_sampler_modifiers;
    TextureSampleBiasProjOffset_Texture3D_sampler.type.modifierValues = TextureSampleBiasProjOffset_Texture3D_sampler_modifierValues;
    TextureSampleBiasProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjOffset_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasProjOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleBiasProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleBiasProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate"_c;
    TextureSampleBiasProjOffset_Texture3D.name = "textureSampleBiasProjOffset"_c;
    TextureSampleBiasProjOffset_Texture3D.backendIndex = 2495;
    TextureSampleBiasProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjOffset_Texture3D.parameters = TextureSampleBiasProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D)->signature = "f32x4 textureSampleBiasProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D)->name = "textureSampleBiasProjOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D)->nameWithVarNames = "textureSampleBiasProjOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleBiasProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBiasProjOffset_Texture3D_texture.type.modifiers = SampledTextureSampleBiasProjOffset_Texture3D_texture_modifiers;
    SampledTextureSampleBiasProjOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleBiasProjOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleBiasProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with projection with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture3D.name = "textureSampleBiasProjOffset"_c;
    SampledTextureSampleBiasProjOffset_Texture3D.backendIndex = 2496;
    SampledTextureSampleBiasProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D.parameters = SampledTextureSampleBiasProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D)->signature = "f32x4 textureSampleBiasProjOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D)->name = "textureSampleBiasProjOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D)->nameWithVarNames = "textureSampleBiasProjOffset(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32, proj : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompare with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleBiasCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasCompare_Texture1D_texture.type.modifiers = TextureSampleBiasCompare_Texture1D_texture_modifiers;
    TextureSampleBiasCompare_Texture1D_texture.type.modifierValues = TextureSampleBiasCompare_Texture1D_texture_modifierValues;
    TextureSampleBiasCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture1D_sampler.type.modifiers = TextureSampleBiasCompare_Texture1D_sampler_modifiers;
    TextureSampleBiasCompare_Texture1D_sampler.type.modifierValues = TextureSampleBiasCompare_Texture1D_sampler_modifierValues;
    TextureSampleBiasCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    TextureSampleBiasCompare_Texture1D.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture1D.backendIndex = 2497;
    TextureSampleBiasCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompare_Texture1D.parameters = TextureSampleBiasCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D)->signature = "f32 textureSampleBiasCompare(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D)->name = "textureSampleBiasCompare(uniform *texture1D,uniform *sampler,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with SampledTexture1D, Float32, Float32, Float32
    SampledTextureSampleBiasCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBiasCompare_Texture1D_texture.type.modifiers = SampledTextureSampleBiasCompare_Texture1D_texture_modifiers;
    SampledTextureSampleBiasCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleBiasCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleBiasCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    SampledTextureSampleBiasCompare_Texture1D.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture1D.backendIndex = 2498;
    SampledTextureSampleBiasCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D.parameters = SampledTextureSampleBiasCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D)->signature = "f32 textureSampleBiasCompare(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D)->name = "textureSampleBiasCompare(uniform *textureSampled1D,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *textureSampled1D, coordinate : f32, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleBiasCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasCompare_Texture2D_texture.type.modifiers = TextureSampleBiasCompare_Texture2D_texture_modifiers;
    TextureSampleBiasCompare_Texture2D_texture.type.modifierValues = TextureSampleBiasCompare_Texture2D_texture_modifierValues;
    TextureSampleBiasCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture2D_sampler.type.modifiers = TextureSampleBiasCompare_Texture2D_sampler_modifiers;
    TextureSampleBiasCompare_Texture2D_sampler.type.modifierValues = TextureSampleBiasCompare_Texture2D_sampler_modifierValues;
    TextureSampleBiasCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompare_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    TextureSampleBiasCompare_Texture2D.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture2D.backendIndex = 2499;
    TextureSampleBiasCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompare_Texture2D.parameters = TextureSampleBiasCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D)->signature = "f32 textureSampleBiasCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D)->name = "textureSampleBiasCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with SampledTexture2D, Float32x2, Float32, Float32
    SampledTextureSampleBiasCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBiasCompare_Texture2D_texture.type.modifiers = SampledTextureSampleBiasCompare_Texture2D_texture_modifiers;
    SampledTextureSampleBiasCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleBiasCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleBiasCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompare_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    SampledTextureSampleBiasCompare_Texture2D.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture2D.backendIndex = 2500;
    SampledTextureSampleBiasCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2D.parameters = SampledTextureSampleBiasCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D)->signature = "f32 textureSampleBiasCompare(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D)->name = "textureSampleBiasCompare(uniform *textureSampled2D,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleBiasCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasCompare_Texture3D_texture.type.modifiers = TextureSampleBiasCompare_Texture3D_texture_modifiers;
    TextureSampleBiasCompare_Texture3D_texture.type.modifierValues = TextureSampleBiasCompare_Texture3D_texture_modifierValues;
    TextureSampleBiasCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture3D_sampler.type.modifiers = TextureSampleBiasCompare_Texture3D_sampler_modifiers;
    TextureSampleBiasCompare_Texture3D_sampler.type.modifierValues = TextureSampleBiasCompare_Texture3D_sampler_modifierValues;
    TextureSampleBiasCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompare_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    TextureSampleBiasCompare_Texture3D.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture3D.backendIndex = 2501;
    TextureSampleBiasCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompare_Texture3D.parameters = TextureSampleBiasCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D)->signature = "f32 textureSampleBiasCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D)->name = "textureSampleBiasCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with SampledTexture3D, Float32x3, Float32, Float32
    SampledTextureSampleBiasCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBiasCompare_Texture3D_texture.type.modifiers = SampledTextureSampleBiasCompare_Texture3D_texture_modifiers;
    SampledTextureSampleBiasCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleBiasCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleBiasCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompare_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    SampledTextureSampleBiasCompare_Texture3D.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture3D.backendIndex = 2502;
    SampledTextureSampleBiasCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompare_Texture3D.parameters = SampledTextureSampleBiasCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D)->signature = "f32 textureSampleBiasCompare(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D)->name = "textureSampleBiasCompare(uniform *textureSampled3D,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with Texture1DArray, Sampler, Float32x2, Float32, Float32
    TextureSampleBiasCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBiasCompare_Texture1DArray_texture.type.modifiers = TextureSampleBiasCompare_Texture1DArray_texture_modifiers;
    TextureSampleBiasCompare_Texture1DArray_texture.type.modifierValues = TextureSampleBiasCompare_Texture1DArray_texture_modifierValues;
    TextureSampleBiasCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture1DArray_sampler.type.modifiers = TextureSampleBiasCompare_Texture1DArray_sampler_modifiers;
    TextureSampleBiasCompare_Texture1DArray_sampler.type.modifierValues = TextureSampleBiasCompare_Texture1DArray_sampler_modifierValues;
    TextureSampleBiasCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompare_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    TextureSampleBiasCompare_Texture1DArray.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture1DArray.backendIndex = 2503;
    TextureSampleBiasCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompare_Texture1DArray.parameters = TextureSampleBiasCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray)->signature = "f32 textureSampleBiasCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray)->name = "textureSampleBiasCompare(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with SampledTexture1DArray, Float32x2, Float32, Float32
    SampledTextureSampleBiasCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleBiasCompare_Texture1DArray_texture.type.modifiers = SampledTextureSampleBiasCompare_Texture1DArray_texture_modifiers;
    SampledTextureSampleBiasCompare_Texture1DArray_texture.type.modifierValues = SampledTextureSampleBiasCompare_Texture1DArray_texture_modifierValues;
    SampledTextureSampleBiasCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    SampledTextureSampleBiasCompare_Texture1DArray.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture1DArray.backendIndex = 2504;
    SampledTextureSampleBiasCompare_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray.parameters = SampledTextureSampleBiasCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray)->signature = "f32 textureSampleBiasCompare(uniform *textureSampled1DArray,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray)->name = "textureSampleBiasCompare(uniform *textureSampled1DArray,f32x2,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *textureSampled1DArray, coordinate : f32x2, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with Texture2DArray, Sampler, Float32x3, Float32, Float32
    TextureSampleBiasCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBiasCompare_Texture2DArray_texture.type.modifiers = TextureSampleBiasCompare_Texture2DArray_texture_modifiers;
    TextureSampleBiasCompare_Texture2DArray_texture.type.modifierValues = TextureSampleBiasCompare_Texture2DArray_texture_modifierValues;
    TextureSampleBiasCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture2DArray_sampler.type.modifiers = TextureSampleBiasCompare_Texture2DArray_sampler_modifiers;
    TextureSampleBiasCompare_Texture2DArray_sampler.type.modifierValues = TextureSampleBiasCompare_Texture2DArray_sampler_modifierValues;
    TextureSampleBiasCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompare_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    TextureSampleBiasCompare_Texture2DArray.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture2DArray.backendIndex = 2505;
    TextureSampleBiasCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompare_Texture2DArray.parameters = TextureSampleBiasCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray)->signature = "f32 textureSampleBiasCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray)->name = "textureSampleBiasCompare(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompare with SampledTexture2DArray, Float32x3, Float32, Float32
    SampledTextureSampleBiasCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleBiasCompare_Texture2DArray_texture.type.modifiers = SampledTextureSampleBiasCompare_Texture2DArray_texture_modifiers;
    SampledTextureSampleBiasCompare_Texture2DArray_texture.type.modifierValues = SampledTextureSampleBiasCompare_Texture2DArray_texture_modifierValues;
    SampledTextureSampleBiasCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias with depth comparison"_c;
    SampledTextureSampleBiasCompare_Texture2DArray.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture2DArray.backendIndex = 2506;
    SampledTextureSampleBiasCompare_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray.parameters = SampledTextureSampleBiasCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray)->signature = "f32 textureSampleBiasCompare(uniform *textureSampled2DArray,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray)->name = "textureSampleBiasCompare(uniform *textureSampled2DArray,f32x3,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray)->nameWithVarNames = "textureSampleBiasCompare(texture : uniform *textureSampled2DArray, coordinate : f32x3, bias : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleBiasCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasCompareOffset_Texture1D_texture.type.modifiers = TextureSampleBiasCompareOffset_Texture1D_texture_modifiers;
    TextureSampleBiasCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleBiasCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleBiasCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleBiasCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleBiasCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleBiasCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleBiasCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleBiasCompareOffset_Texture1D.name = "textureSampleBiasCompareOffset"_c;
    TextureSampleBiasCompareOffset_Texture1D.backendIndex = 2507;
    TextureSampleBiasCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D.parameters = TextureSampleBiasCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D)->signature = "f32 textureSampleBiasCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D)->name = "textureSampleBiasCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleBiasCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBiasCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleBiasCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleBiasCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleBiasCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleBiasCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D.name = "textureSampleBiasCompareOffset"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D.backendIndex = 2508;
    SampledTextureSampleBiasCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D.parameters = SampledTextureSampleBiasCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D)->signature = "f32 textureSampleBiasCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D)->name = "textureSampleBiasCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, bias : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleBiasCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasCompareOffset_Texture2D_texture.type.modifiers = TextureSampleBiasCompareOffset_Texture2D_texture_modifiers;
    TextureSampleBiasCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleBiasCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleBiasCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleBiasCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleBiasCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleBiasCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleBiasCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompareOffset_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleBiasCompareOffset_Texture2D.name = "textureSampleBiasCompareOffset"_c;
    TextureSampleBiasCompareOffset_Texture2D.backendIndex = 2509;
    TextureSampleBiasCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2D.parameters = TextureSampleBiasCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D)->signature = "f32 textureSampleBiasCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D)->name = "textureSampleBiasCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleBiasCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBiasCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleBiasCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleBiasCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleBiasCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleBiasCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D.name = "textureSampleBiasCompareOffset"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D.backendIndex = 2510;
    SampledTextureSampleBiasCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D.parameters = SampledTextureSampleBiasCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D)->signature = "f32 textureSampleBiasCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D)->name = "textureSampleBiasCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleBiasCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasCompareOffset_Texture3D_texture.type.modifiers = TextureSampleBiasCompareOffset_Texture3D_texture_modifiers;
    TextureSampleBiasCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleBiasCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleBiasCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleBiasCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleBiasCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleBiasCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleBiasCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompareOffset_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleBiasCompareOffset_Texture3D.name = "textureSampleBiasCompareOffset"_c;
    TextureSampleBiasCompareOffset_Texture3D.backendIndex = 2511;
    TextureSampleBiasCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompareOffset_Texture3D.parameters = TextureSampleBiasCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D)->signature = "f32 textureSampleBiasCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D)->name = "textureSampleBiasCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleBiasCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBiasCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleBiasCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleBiasCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleBiasCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleBiasCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D.name = "textureSampleBiasCompareOffset"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D.backendIndex = 2512;
    SampledTextureSampleBiasCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D.parameters = SampledTextureSampleBiasCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D)->signature = "f32 textureSampleBiasCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D)->name = "textureSampleBiasCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleBiasCompareOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBiasCompareOffset_Texture1DArray_texture.type.modifiers = TextureSampleBiasCompareOffset_Texture1DArray_texture_modifiers;
    TextureSampleBiasCompareOffset_Texture1DArray_texture.type.modifierValues = TextureSampleBiasCompareOffset_Texture1DArray_texture_modifierValues;
    TextureSampleBiasCompareOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture1DArray_sampler.type.modifiers = TextureSampleBiasCompareOffset_Texture1DArray_sampler_modifiers;
    TextureSampleBiasCompareOffset_Texture1DArray_sampler.type.modifierValues = TextureSampleBiasCompareOffset_Texture1DArray_sampler_modifierValues;
    TextureSampleBiasCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompareOffset_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1DArray_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleBiasCompareOffset_Texture1DArray.name = "textureSampleBiasCompareOffset"_c;
    TextureSampleBiasCompareOffset_Texture1DArray.backendIndex = 2513;
    TextureSampleBiasCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1DArray.parameters = TextureSampleBiasCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray)->signature = "f32 textureSampleBiasCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray)->name = "textureSampleBiasCompareOffset(uniform *texture1DArray,uniform *sampler,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *texture1DArray, sampler : uniform *sampler, coordinate : f32x2, bias : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with SampledTexture1DArray, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleBiasCompareOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray_texture.type = Type::FullType{ SampledTexture1DArrayType.name };
    SampledTextureSampleBiasCompareOffset_Texture1DArray_texture.type.modifiers = SampledTextureSampleBiasCompareOffset_Texture1DArray_texture_modifiers;
    SampledTextureSampleBiasCompareOffset_Texture1DArray_texture.type.modifierValues = SampledTextureSampleBiasCompareOffset_Texture1DArray_texture_modifierValues;
    SampledTextureSampleBiasCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1DArray.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray.name = "textureSampleBiasCompareOffset"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray.backendIndex = 2514;
    SampledTextureSampleBiasCompareOffset_Texture1DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1DArray.parameters = SampledTextureSampleBiasCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray_texture)->typeSymbol = &SampledTexture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray)->signature = "f32 textureSampleBiasCompareOffset(uniform *textureSampled1DArray,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray)->name = "textureSampleBiasCompareOffset(uniform *textureSampled1DArray,f32x2,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *textureSampled1DArray, coordinate : f32x2, bias : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleBiasCompareOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBiasCompareOffset_Texture2DArray_texture.type.modifiers = TextureSampleBiasCompareOffset_Texture2DArray_texture_modifiers;
    TextureSampleBiasCompareOffset_Texture2DArray_texture.type.modifierValues = TextureSampleBiasCompareOffset_Texture2DArray_texture_modifierValues;
    TextureSampleBiasCompareOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture2DArray_sampler.type.modifiers = TextureSampleBiasCompareOffset_Texture2DArray_sampler_modifiers;
    TextureSampleBiasCompareOffset_Texture2DArray_sampler.type.modifierValues = TextureSampleBiasCompareOffset_Texture2DArray_sampler_modifierValues;
    TextureSampleBiasCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompareOffset_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2DArray_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleBiasCompareOffset_Texture2DArray.name = "textureSampleBiasCompareOffset"_c;
    TextureSampleBiasCompareOffset_Texture2DArray.backendIndex = 2515;
    TextureSampleBiasCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2DArray.parameters = TextureSampleBiasCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray)->signature = "f32 textureSampleBiasCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray)->name = "textureSampleBiasCompareOffset(uniform *texture2DArray,uniform *sampler,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *texture2DArray, sampler : uniform *sampler, coordinate : f32x3, bias : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasCompareOffset with SampledTexture2DArray, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleBiasCompareOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray_texture.type = Type::FullType{ SampledTexture2DArrayType.name };
    SampledTextureSampleBiasCompareOffset_Texture2DArray_texture.type.modifiers = SampledTextureSampleBiasCompareOffset_Texture2DArray_texture_modifiers;
    SampledTextureSampleBiasCompareOffset_Texture2DArray_texture.type.modifierValues = SampledTextureSampleBiasCompareOffset_Texture2DArray_texture_modifierValues;
    SampledTextureSampleBiasCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2DArray.documentation = "Sample a texture at coordinate with a mip bias with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray.name = "textureSampleBiasCompareOffset"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray.backendIndex = 2516;
    SampledTextureSampleBiasCompareOffset_Texture2DArray.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2DArray.parameters = SampledTextureSampleBiasCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray_texture)->typeSymbol = &SampledTexture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray)->signature = "f32 textureSampleBiasCompareOffset(uniform *textureSampled2DArray,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray)->name = "textureSampleBiasCompareOffset(uniform *textureSampled2DArray,f32x3,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray)->nameWithVarNames = "textureSampleBiasCompareOffset(texture : uniform *textureSampled2DArray, coordinate : f32x3, bias : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleBiasProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasProjCompare_Texture1D_texture.type.modifiers = TextureSampleBiasProjCompare_Texture1D_texture_modifiers;
    TextureSampleBiasProjCompare_Texture1D_texture.type.modifierValues = TextureSampleBiasProjCompare_Texture1D_texture_modifierValues;
    TextureSampleBiasProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompare_Texture1D_sampler.type.modifiers = TextureSampleBiasProjCompare_Texture1D_sampler_modifiers;
    TextureSampleBiasProjCompare_Texture1D_sampler.type.modifierValues = TextureSampleBiasProjCompare_Texture1D_sampler_modifierValues;
    TextureSampleBiasProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasProjCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleBiasProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleBiasProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with projection with depth comparison"_c;
    TextureSampleBiasProjCompare_Texture1D.name = "textureSampleBiasProjCompare"_c;
    TextureSampleBiasProjCompare_Texture1D.backendIndex = 2517;
    TextureSampleBiasProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D.parameters = TextureSampleBiasProjCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D)->signature = "f32 textureSampleBiasProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D)->name = "textureSampleBiasProjCompare(uniform *texture1D,uniform *sampler,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D)->nameWithVarNames = "textureSampleBiasProjCompare(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasProjCompare with SampledTexture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleBiasProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBiasProjCompare_Texture1D_texture.type.modifiers = SampledTextureSampleBiasProjCompare_Texture1D_texture_modifiers;
    SampledTextureSampleBiasProjCompare_Texture1D_texture.type.modifierValues = SampledTextureSampleBiasProjCompare_Texture1D_texture_modifierValues;
    SampledTextureSampleBiasProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with projection with depth comparison"_c;
    SampledTextureSampleBiasProjCompare_Texture1D.name = "textureSampleBiasProjCompare"_c;
    SampledTextureSampleBiasProjCompare_Texture1D.backendIndex = 2518;
    SampledTextureSampleBiasProjCompare_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D.parameters = SampledTextureSampleBiasProjCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D)->signature = "f32 textureSampleBiasProjCompare(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D)->name = "textureSampleBiasProjCompare(uniform *textureSampled1D,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D)->nameWithVarNames = "textureSampleBiasProjCompare(texture : uniform *textureSampled1D, coordinate : f32, bias : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32, Float32
    TextureSampleBiasProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasProjCompare_Texture2D_texture.type.modifiers = TextureSampleBiasProjCompare_Texture2D_texture_modifiers;
    TextureSampleBiasProjCompare_Texture2D_texture.type.modifierValues = TextureSampleBiasProjCompare_Texture2D_texture_modifierValues;
    TextureSampleBiasProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompare_Texture2D_sampler.type.modifiers = TextureSampleBiasProjCompare_Texture2D_sampler_modifiers;
    TextureSampleBiasProjCompare_Texture2D_sampler.type.modifierValues = TextureSampleBiasProjCompare_Texture2D_sampler_modifierValues;
    TextureSampleBiasProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjCompare_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasProjCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleBiasProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleBiasProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with projection with depth comparison"_c;
    TextureSampleBiasProjCompare_Texture2D.name = "textureSampleBiasProjCompare"_c;
    TextureSampleBiasProjCompare_Texture2D.backendIndex = 2519;
    TextureSampleBiasProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasProjCompare_Texture2D.parameters = TextureSampleBiasProjCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D)->signature = "f32 textureSampleBiasProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D)->name = "textureSampleBiasProjCompare(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D)->nameWithVarNames = "textureSampleBiasProjCompare(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasProjCompare with SampledTexture2D, Float32x2, Float32, Float32, Float32
    SampledTextureSampleBiasProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBiasProjCompare_Texture2D_texture.type.modifiers = SampledTextureSampleBiasProjCompare_Texture2D_texture_modifiers;
    SampledTextureSampleBiasProjCompare_Texture2D_texture.type.modifierValues = SampledTextureSampleBiasProjCompare_Texture2D_texture_modifierValues;
    SampledTextureSampleBiasProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with projection with depth comparison"_c;
    SampledTextureSampleBiasProjCompare_Texture2D.name = "textureSampleBiasProjCompare"_c;
    SampledTextureSampleBiasProjCompare_Texture2D.backendIndex = 2520;
    SampledTextureSampleBiasProjCompare_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D.parameters = SampledTextureSampleBiasProjCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D)->signature = "f32 textureSampleBiasProjCompare(uniform *textureSampled2D,f32x2,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D)->name = "textureSampleBiasProjCompare(uniform *textureSampled2D,f32x2,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D)->nameWithVarNames = "textureSampleBiasProjCompare(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32, Float32
    TextureSampleBiasProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasProjCompare_Texture3D_texture.type.modifiers = TextureSampleBiasProjCompare_Texture3D_texture_modifiers;
    TextureSampleBiasProjCompare_Texture3D_texture.type.modifierValues = TextureSampleBiasProjCompare_Texture3D_texture_modifierValues;
    TextureSampleBiasProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompare_Texture3D_sampler.type.modifiers = TextureSampleBiasProjCompare_Texture3D_sampler_modifiers;
    TextureSampleBiasProjCompare_Texture3D_sampler.type.modifierValues = TextureSampleBiasProjCompare_Texture3D_sampler_modifierValues;
    TextureSampleBiasProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjCompare_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasProjCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleBiasProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleBiasProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with projection with depth comparison"_c;
    TextureSampleBiasProjCompare_Texture3D.name = "textureSampleBiasProjCompare"_c;
    TextureSampleBiasProjCompare_Texture3D.backendIndex = 2521;
    TextureSampleBiasProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasProjCompare_Texture3D.parameters = TextureSampleBiasProjCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D)->signature = "f32 textureSampleBiasProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D)->name = "textureSampleBiasProjCompare(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D)->nameWithVarNames = "textureSampleBiasProjCompare(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasProjCompare with SampledTexture3D, Float32x3, Float32, Float32, Float32
    SampledTextureSampleBiasProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBiasProjCompare_Texture3D_texture.type.modifiers = SampledTextureSampleBiasProjCompare_Texture3D_texture_modifiers;
    SampledTextureSampleBiasProjCompare_Texture3D_texture.type.modifierValues = SampledTextureSampleBiasProjCompare_Texture3D_texture_modifierValues;
    SampledTextureSampleBiasProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with projection with depth comparison"_c;
    SampledTextureSampleBiasProjCompare_Texture3D.name = "textureSampleBiasProjCompare"_c;
    SampledTextureSampleBiasProjCompare_Texture3D.backendIndex = 2522;
    SampledTextureSampleBiasProjCompare_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D.parameters = SampledTextureSampleBiasProjCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D)->signature = "f32 textureSampleBiasProjCompare(uniform *textureSampled3D,f32x3,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D)->name = "textureSampleBiasProjCompare(uniform *textureSampled3D,f32x3,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D)->nameWithVarNames = "textureSampleBiasProjCompare(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32, proj : f32, compare : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleBiasProjCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasProjCompareOffset_Texture1D_texture.type.modifiers = TextureSampleBiasProjCompareOffset_Texture1D_texture_modifiers;
    TextureSampleBiasProjCompareOffset_Texture1D_texture.type.modifierValues = TextureSampleBiasProjCompareOffset_Texture1D_texture_modifierValues;
    TextureSampleBiasProjCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompareOffset_Texture1D_sampler.type.modifiers = TextureSampleBiasProjCompareOffset_Texture1D_sampler_modifiers;
    TextureSampleBiasProjCompareOffset_Texture1D_sampler.type.modifierValues = TextureSampleBiasProjCompareOffset_Texture1D_sampler_modifierValues;
    TextureSampleBiasProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleBiasProjCompareOffset_Texture1D.name = "textureSampleBiasProjCompareOffset"_c;
    TextureSampleBiasProjCompareOffset_Texture1D.backendIndex = 2523;
    TextureSampleBiasProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture1D.parameters = TextureSampleBiasProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D)->signature = "f32 textureSampleBiasProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D)->name = "textureSampleBiasProjCompareOffset(uniform *texture1D,uniform *sampler,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleBiasProjCompareOffset(texture : uniform *texture1D, sampler : uniform *sampler, coordinate : f32, bias : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasProjCompareOffset with SampledTexture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleBiasProjCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_texture.type = Type::FullType{ SampledTexture1DType.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D_texture.type.modifiers = SampledTextureSampleBiasProjCompareOffset_Texture1D_texture_modifiers;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_texture.type.modifierValues = SampledTextureSampleBiasProjCompareOffset_Texture1D_texture_modifierValues;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D.documentation = "Sample a texture at coordinate with a mip bias with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D.name = "textureSampleBiasProjCompareOffset"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D.backendIndex = 2524;
    SampledTextureSampleBiasProjCompareOffset_Texture1D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D.parameters = SampledTextureSampleBiasProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_texture)->typeSymbol = &SampledTexture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D)->signature = "f32 textureSampleBiasProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D)->name = "textureSampleBiasProjCompareOffset(uniform *textureSampled1D,f32,f32,f32,f32,f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D)->nameWithVarNames = "textureSampleBiasProjCompareOffset(texture : uniform *textureSampled1D, coordinate : f32, bias : f32, proj : f32, compare : f32, offset : f32)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32, Float32x2
    TextureSampleBiasProjCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasProjCompareOffset_Texture2D_texture.type.modifiers = TextureSampleBiasProjCompareOffset_Texture2D_texture_modifiers;
    TextureSampleBiasProjCompareOffset_Texture2D_texture.type.modifierValues = TextureSampleBiasProjCompareOffset_Texture2D_texture_modifierValues;
    TextureSampleBiasProjCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompareOffset_Texture2D_sampler.type.modifiers = TextureSampleBiasProjCompareOffset_Texture2D_sampler_modifiers;
    TextureSampleBiasProjCompareOffset_Texture2D_sampler.type.modifierValues = TextureSampleBiasProjCompareOffset_Texture2D_sampler_modifierValues;
    TextureSampleBiasProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjCompareOffset_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleBiasProjCompareOffset_Texture2D.name = "textureSampleBiasProjCompareOffset"_c;
    TextureSampleBiasProjCompareOffset_Texture2D.backendIndex = 2525;
    TextureSampleBiasProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture2D.parameters = TextureSampleBiasProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D)->signature = "f32 textureSampleBiasProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D)->name = "textureSampleBiasProjCompareOffset(uniform *texture2D,uniform *sampler,f32x2,f32,f32,f32,f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleBiasProjCompareOffset(texture : uniform *texture2D, sampler : uniform *sampler, coordinate : f32x2, bias : f32, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasProjCompareOffset with SampledTexture2D, Float32x2, Float32, Float32, Float32, Float32x2
    SampledTextureSampleBiasProjCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_texture.type = Type::FullType{ SampledTexture2DType.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D_texture.type.modifiers = SampledTextureSampleBiasProjCompareOffset_Texture2D_texture_modifiers;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_texture.type.modifierValues = SampledTextureSampleBiasProjCompareOffset_Texture2D_texture_modifierValues;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D.documentation = "Sample a texture at coordinate with a mip bias with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D.name = "textureSampleBiasProjCompareOffset"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D.backendIndex = 2526;
    SampledTextureSampleBiasProjCompareOffset_Texture2D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D.parameters = SampledTextureSampleBiasProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_texture)->typeSymbol = &SampledTexture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D)->signature = "f32 textureSampleBiasProjCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D)->name = "textureSampleBiasProjCompareOffset(uniform *textureSampled2D,f32x2,f32,f32,f32,f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D)->nameWithVarNames = "textureSampleBiasProjCompareOffset(texture : uniform *textureSampled2D, coordinate : f32x2, bias : f32, proj : f32, compare : f32, offset : f32x2)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32, Float32x3
    TextureSampleBiasProjCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasProjCompareOffset_Texture3D_texture.type.modifiers = TextureSampleBiasProjCompareOffset_Texture3D_texture_modifiers;
    TextureSampleBiasProjCompareOffset_Texture3D_texture.type.modifierValues = TextureSampleBiasProjCompareOffset_Texture3D_texture_modifierValues;
    TextureSampleBiasProjCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompareOffset_Texture3D_sampler.type.modifiers = TextureSampleBiasProjCompareOffset_Texture3D_sampler_modifiers;
    TextureSampleBiasProjCompareOffset_Texture3D_sampler.type.modifierValues = TextureSampleBiasProjCompareOffset_Texture3D_sampler_modifierValues;
    TextureSampleBiasProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjCompareOffset_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with projection with depth comparison with an offset applied to the coordinate"_c;
    TextureSampleBiasProjCompareOffset_Texture3D.name = "textureSampleBiasProjCompareOffset"_c;
    TextureSampleBiasProjCompareOffset_Texture3D.backendIndex = 2527;
    TextureSampleBiasProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture3D.parameters = TextureSampleBiasProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D)->signature = "f32 textureSampleBiasProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D)->name = "textureSampleBiasProjCompareOffset(uniform *texture3D,uniform *sampler,f32x3,f32,f32,f32,f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleBiasProjCompareOffset(texture : uniform *texture3D, sampler : uniform *sampler, coordinate : f32x3, bias : f32, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

    /// textureSampleBiasProjCompareOffset with SampledTexture3D, Float32x3, Float32, Float32, Float32, Float32x3
    SampledTextureSampleBiasProjCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_texture.type = Type::FullType{ SampledTexture3DType.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D_texture.type.modifiers = SampledTextureSampleBiasProjCompareOffset_Texture3D_texture_modifiers;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_texture.type.modifierValues = SampledTextureSampleBiasProjCompareOffset_Texture3D_texture_modifierValues;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D.documentation = "Sample a texture at coordinate with a mip bias with projection with depth comparison with an offset applied to the coordinate"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D.name = "textureSampleBiasProjCompareOffset"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D.backendIndex = 2528;
    SampledTextureSampleBiasProjCompareOffset_Texture3D.returnType = Type::FullType { Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D.parameters = SampledTextureSampleBiasProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_texture)->typeSymbol = &SampledTexture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D)->signature = "f32 textureSampleBiasProjCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D)->name = "textureSampleBiasProjCompareOffset(uniform *textureSampled3D,f32x3,f32,f32,f32,f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D)->nameWithVarNames = "textureSampleBiasProjCompareOffset(texture : uniform *textureSampled3D, coordinate : f32x3, bias : f32, proj : f32, compare : f32, offset : f32x3)"_c;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32Type;

}
struct StaticIntrinsicTimerStop
{
    StaticIntrinsicTimerStop()
    {
        StaticIntrinsicTimer.Stop();
        StaticIntrinsicTimer.Print("Static Intrinsic Alloc");
    }
};
StaticIntrinsicTimerStop StaticIntrinsicTimerStopInstance;

} // namespace GPULang
