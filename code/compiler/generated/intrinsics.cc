//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
namespace GPULang
{
Variable acos_Float32_arg;
Function acos_Float32;
Variable acos_Float32x2_arg;
Function acos_Float32x2;
Variable acos_Float32x3_arg;
Function acos_Float32x3;
Variable acos_Float32x4_arg;
Function acos_Float32x4;
Variable acos_Float16_arg;
Function acos_Float16;
Variable acos_Float16x2_arg;
Function acos_Float16x2;
Variable acos_Float16x3_arg;
Function acos_Float16x3;
Variable acos_Float16x4_arg;
Function acos_Float16x4;
Variable acosh_Float32_arg;
Function acosh_Float32;
Variable acosh_Float32x2_arg;
Function acosh_Float32x2;
Variable acosh_Float32x3_arg;
Function acosh_Float32x3;
Variable acosh_Float32x4_arg;
Function acosh_Float32x4;
Variable acosh_Float16_arg;
Function acosh_Float16;
Variable acosh_Float16x2_arg;
Function acosh_Float16x2;
Variable acosh_Float16x3_arg;
Function acosh_Float16x3;
Variable acosh_Float16x4_arg;
Function acosh_Float16x4;
Variable asin_Float32_arg;
Function asin_Float32;
Variable asin_Float32x2_arg;
Function asin_Float32x2;
Variable asin_Float32x3_arg;
Function asin_Float32x3;
Variable asin_Float32x4_arg;
Function asin_Float32x4;
Variable asin_Float16_arg;
Function asin_Float16;
Variable asin_Float16x2_arg;
Function asin_Float16x2;
Variable asin_Float16x3_arg;
Function asin_Float16x3;
Variable asin_Float16x4_arg;
Function asin_Float16x4;
Variable asinh_Float32_arg;
Function asinh_Float32;
Variable asinh_Float32x2_arg;
Function asinh_Float32x2;
Variable asinh_Float32x3_arg;
Function asinh_Float32x3;
Variable asinh_Float32x4_arg;
Function asinh_Float32x4;
Variable asinh_Float16_arg;
Function asinh_Float16;
Variable asinh_Float16x2_arg;
Function asinh_Float16x2;
Variable asinh_Float16x3_arg;
Function asinh_Float16x3;
Variable asinh_Float16x4_arg;
Function asinh_Float16x4;
Variable atan_Float32_arg;
Function atan_Float32;
Variable atan_Float32x2_arg;
Function atan_Float32x2;
Variable atan_Float32x3_arg;
Function atan_Float32x3;
Variable atan_Float32x4_arg;
Function atan_Float32x4;
Variable atan_Float16_arg;
Function atan_Float16;
Variable atan_Float16x2_arg;
Function atan_Float16x2;
Variable atan_Float16x3_arg;
Function atan_Float16x3;
Variable atan_Float16x4_arg;
Function atan_Float16x4;
Variable atanh_Float32_arg;
Function atanh_Float32;
Variable atanh_Float32x2_arg;
Function atanh_Float32x2;
Variable atanh_Float32x3_arg;
Function atanh_Float32x3;
Variable atanh_Float32x4_arg;
Function atanh_Float32x4;
Variable atanh_Float16_arg;
Function atanh_Float16;
Variable atanh_Float16x2_arg;
Function atanh_Float16x2;
Variable atanh_Float16x3_arg;
Function atanh_Float16x3;
Variable atanh_Float16x4_arg;
Function atanh_Float16x4;
Variable cos_Float32_arg;
Function cos_Float32;
Variable cos_Float32x2_arg;
Function cos_Float32x2;
Variable cos_Float32x3_arg;
Function cos_Float32x3;
Variable cos_Float32x4_arg;
Function cos_Float32x4;
Variable cos_Float16_arg;
Function cos_Float16;
Variable cos_Float16x2_arg;
Function cos_Float16x2;
Variable cos_Float16x3_arg;
Function cos_Float16x3;
Variable cos_Float16x4_arg;
Function cos_Float16x4;
Variable cosh_Float32_arg;
Function cosh_Float32;
Variable cosh_Float32x2_arg;
Function cosh_Float32x2;
Variable cosh_Float32x3_arg;
Function cosh_Float32x3;
Variable cosh_Float32x4_arg;
Function cosh_Float32x4;
Variable cosh_Float16_arg;
Function cosh_Float16;
Variable cosh_Float16x2_arg;
Function cosh_Float16x2;
Variable cosh_Float16x3_arg;
Function cosh_Float16x3;
Variable cosh_Float16x4_arg;
Function cosh_Float16x4;
Variable exp_Float32_arg;
Function exp_Float32;
Variable exp_Float32x2_arg;
Function exp_Float32x2;
Variable exp_Float32x3_arg;
Function exp_Float32x3;
Variable exp_Float32x4_arg;
Function exp_Float32x4;
Variable exp_Float16_arg;
Function exp_Float16;
Variable exp_Float16x2_arg;
Function exp_Float16x2;
Variable exp_Float16x3_arg;
Function exp_Float16x3;
Variable exp_Float16x4_arg;
Function exp_Float16x4;
Variable exp2_Float32_arg;
Function exp2_Float32;
Variable exp2_Float32x2_arg;
Function exp2_Float32x2;
Variable exp2_Float32x3_arg;
Function exp2_Float32x3;
Variable exp2_Float32x4_arg;
Function exp2_Float32x4;
Variable exp2_Float16_arg;
Function exp2_Float16;
Variable exp2_Float16x2_arg;
Function exp2_Float16x2;
Variable exp2_Float16x3_arg;
Function exp2_Float16x3;
Variable exp2_Float16x4_arg;
Function exp2_Float16x4;
Variable invSqrt_Float32_arg;
Function invSqrt_Float32;
Variable invSqrt_Float32x2_arg;
Function invSqrt_Float32x2;
Variable invSqrt_Float32x3_arg;
Function invSqrt_Float32x3;
Variable invSqrt_Float32x4_arg;
Function invSqrt_Float32x4;
Variable invSqrt_Float16_arg;
Function invSqrt_Float16;
Variable invSqrt_Float16x2_arg;
Function invSqrt_Float16x2;
Variable invSqrt_Float16x3_arg;
Function invSqrt_Float16x3;
Variable invSqrt_Float16x4_arg;
Function invSqrt_Float16x4;
Variable log_Float32_arg;
Function log_Float32;
Variable log_Float32x2_arg;
Function log_Float32x2;
Variable log_Float32x3_arg;
Function log_Float32x3;
Variable log_Float32x4_arg;
Function log_Float32x4;
Variable log_Float16_arg;
Function log_Float16;
Variable log_Float16x2_arg;
Function log_Float16x2;
Variable log_Float16x3_arg;
Function log_Float16x3;
Variable log_Float16x4_arg;
Function log_Float16x4;
Variable log2_Float32_arg;
Function log2_Float32;
Variable log2_Float32x2_arg;
Function log2_Float32x2;
Variable log2_Float32x3_arg;
Function log2_Float32x3;
Variable log2_Float32x4_arg;
Function log2_Float32x4;
Variable log2_Float16_arg;
Function log2_Float16;
Variable log2_Float16x2_arg;
Function log2_Float16x2;
Variable log2_Float16x3_arg;
Function log2_Float16x3;
Variable log2_Float16x4_arg;
Function log2_Float16x4;
Variable sin_Float32_arg;
Function sin_Float32;
Variable sin_Float32x2_arg;
Function sin_Float32x2;
Variable sin_Float32x3_arg;
Function sin_Float32x3;
Variable sin_Float32x4_arg;
Function sin_Float32x4;
Variable sin_Float16_arg;
Function sin_Float16;
Variable sin_Float16x2_arg;
Function sin_Float16x2;
Variable sin_Float16x3_arg;
Function sin_Float16x3;
Variable sin_Float16x4_arg;
Function sin_Float16x4;
Variable sinh_Float32_arg;
Function sinh_Float32;
Variable sinh_Float32x2_arg;
Function sinh_Float32x2;
Variable sinh_Float32x3_arg;
Function sinh_Float32x3;
Variable sinh_Float32x4_arg;
Function sinh_Float32x4;
Variable sinh_Float16_arg;
Function sinh_Float16;
Variable sinh_Float16x2_arg;
Function sinh_Float16x2;
Variable sinh_Float16x3_arg;
Function sinh_Float16x3;
Variable sinh_Float16x4_arg;
Function sinh_Float16x4;
Variable sqrt_Float32_arg;
Function sqrt_Float32;
Variable sqrt_Float32x2_arg;
Function sqrt_Float32x2;
Variable sqrt_Float32x3_arg;
Function sqrt_Float32x3;
Variable sqrt_Float32x4_arg;
Function sqrt_Float32x4;
Variable sqrt_Float16_arg;
Function sqrt_Float16;
Variable sqrt_Float16x2_arg;
Function sqrt_Float16x2;
Variable sqrt_Float16x3_arg;
Function sqrt_Float16x3;
Variable sqrt_Float16x4_arg;
Function sqrt_Float16x4;
Variable tan_Float32_arg;
Function tan_Float32;
Variable tan_Float32x2_arg;
Function tan_Float32x2;
Variable tan_Float32x3_arg;
Function tan_Float32x3;
Variable tan_Float32x4_arg;
Function tan_Float32x4;
Variable tan_Float16_arg;
Function tan_Float16;
Variable tan_Float16x2_arg;
Function tan_Float16x2;
Variable tan_Float16x3_arg;
Function tan_Float16x3;
Variable tan_Float16x4_arg;
Function tan_Float16x4;
Variable tanh_Float32_arg;
Function tanh_Float32;
Variable tanh_Float32x2_arg;
Function tanh_Float32x2;
Variable tanh_Float32x3_arg;
Function tanh_Float32x3;
Variable tanh_Float32x4_arg;
Function tanh_Float32x4;
Variable tanh_Float16_arg;
Function tanh_Float16;
Variable tanh_Float16x2_arg;
Function tanh_Float16x2;
Variable tanh_Float16x3_arg;
Function tanh_Float16x3;
Variable tanh_Float16x4_arg;
Function tanh_Float16x4;
Variable atan2_Float32_y;
Variable atan2_Float32_x;
Function atan2_Float32;
Variable atan2_Float32x2_y;
Variable atan2_Float32x2_x;
Function atan2_Float32x2;
Variable atan2_Float32x3_y;
Variable atan2_Float32x3_x;
Function atan2_Float32x3;
Variable atan2_Float32x4_y;
Variable atan2_Float32x4_x;
Function atan2_Float32x4;
Variable atan2_Float16_y;
Variable atan2_Float16_x;
Function atan2_Float16;
Variable atan2_Float16x2_y;
Variable atan2_Float16x2_x;
Function atan2_Float16x2;
Variable atan2_Float16x3_y;
Variable atan2_Float16x3_x;
Function atan2_Float16x3;
Variable atan2_Float16x4_y;
Variable atan2_Float16x4_x;
Function atan2_Float16x4;
Variable pow_Float32_arg;
Variable pow_Float32_exp;
Function pow_Float32;
Variable pow_Float32x2_arg;
Variable pow_Float32x2_exp;
Function pow_Float32x2;
Variable pow_Float32x3_arg;
Variable pow_Float32x3_exp;
Function pow_Float32x3;
Variable pow_Float32x4_arg;
Variable pow_Float32x4_exp;
Function pow_Float32x4;
Variable pow_Float16_arg;
Variable pow_Float16_exp;
Function pow_Float16;
Variable pow_Float16x2_arg;
Variable pow_Float16x2_exp;
Function pow_Float16x2;
Variable pow_Float16x3_arg;
Variable pow_Float16x3_exp;
Function pow_Float16x3;
Variable pow_Float16x4_arg;
Variable pow_Float16x4_exp;
Function pow_Float16x4;
Variable mad_Float32_arg;
Variable mad_Float32_mul;
Variable mad_Float32_add;
Function mad_Float32;
Variable mad_Float32x2_arg;
Variable mad_Float32x2_mul;
Variable mad_Float32x2_add;
Function mad_Float32x2;
Variable mad_Float32x3_arg;
Variable mad_Float32x3_mul;
Variable mad_Float32x3_add;
Function mad_Float32x3;
Variable mad_Float32x4_arg;
Variable mad_Float32x4_mul;
Variable mad_Float32x4_add;
Function mad_Float32x4;
Variable mad_Float16_arg;
Variable mad_Float16_mul;
Variable mad_Float16_add;
Function mad_Float16;
Variable mad_Float16x2_arg;
Variable mad_Float16x2_mul;
Variable mad_Float16x2_add;
Function mad_Float16x2;
Variable mad_Float16x3_arg;
Variable mad_Float16x3_mul;
Variable mad_Float16x3_add;
Function mad_Float16x3;
Variable mad_Float16x4_arg;
Variable mad_Float16x4_mul;
Variable mad_Float16x4_add;
Function mad_Float16x4;
Variable mad_Int32_arg;
Variable mad_Int32_mul;
Variable mad_Int32_add;
Function mad_Int32;
Variable mad_Int32x2_arg;
Variable mad_Int32x2_mul;
Variable mad_Int32x2_add;
Function mad_Int32x2;
Variable mad_Int32x3_arg;
Variable mad_Int32x3_mul;
Variable mad_Int32x3_add;
Function mad_Int32x3;
Variable mad_Int32x4_arg;
Variable mad_Int32x4_mul;
Variable mad_Int32x4_add;
Function mad_Int32x4;
Variable mad_Int16_arg;
Variable mad_Int16_mul;
Variable mad_Int16_add;
Function mad_Int16;
Variable mad_Int16x2_arg;
Variable mad_Int16x2_mul;
Variable mad_Int16x2_add;
Function mad_Int16x2;
Variable mad_Int16x3_arg;
Variable mad_Int16x3_mul;
Variable mad_Int16x3_add;
Function mad_Int16x3;
Variable mad_Int16x4_arg;
Variable mad_Int16x4_mul;
Variable mad_Int16x4_add;
Function mad_Int16x4;
Variable mad_UInt32_arg;
Variable mad_UInt32_mul;
Variable mad_UInt32_add;
Function mad_UInt32;
Variable mad_UInt32x2_arg;
Variable mad_UInt32x2_mul;
Variable mad_UInt32x2_add;
Function mad_UInt32x2;
Variable mad_UInt32x3_arg;
Variable mad_UInt32x3_mul;
Variable mad_UInt32x3_add;
Function mad_UInt32x3;
Variable mad_UInt32x4_arg;
Variable mad_UInt32x4_mul;
Variable mad_UInt32x4_add;
Function mad_UInt32x4;
Variable mad_UInt16_arg;
Variable mad_UInt16_mul;
Variable mad_UInt16_add;
Function mad_UInt16;
Variable mad_UInt16x2_arg;
Variable mad_UInt16x2_mul;
Variable mad_UInt16x2_add;
Function mad_UInt16x2;
Variable mad_UInt16x3_arg;
Variable mad_UInt16x3_mul;
Variable mad_UInt16x3_add;
Function mad_UInt16x3;
Variable mad_UInt16x4_arg;
Variable mad_UInt16x4_mul;
Variable mad_UInt16x4_add;
Function mad_UInt16x4;
Variable dot_Float32x2_x;
Variable dot_Float32x2_y;
Function dot_Float32x2;
Variable dot_Float32x3_x;
Variable dot_Float32x3_y;
Function dot_Float32x3;
Variable dot_Float32x4_x;
Variable dot_Float32x4_y;
Function dot_Float32x4;
Variable dot_Float16x2_x;
Variable dot_Float16x2_y;
Function dot_Float16x2;
Variable dot_Float16x3_x;
Variable dot_Float16x3_y;
Function dot_Float16x3;
Variable dot_Float16x4_x;
Variable dot_Float16x4_y;
Function dot_Float16x4;
Variable reflect_Float32x2_incident;
Variable reflect_Float32x2_normal;
Function reflect_Float32x2;
Variable reflect_Float32x3_incident;
Variable reflect_Float32x3_normal;
Function reflect_Float32x3;
Variable reflect_Float32x4_incident;
Variable reflect_Float32x4_normal;
Function reflect_Float32x4;
Variable reflect_Float16x2_incident;
Variable reflect_Float16x2_normal;
Function reflect_Float16x2;
Variable reflect_Float16x3_incident;
Variable reflect_Float16x3_normal;
Function reflect_Float16x3;
Variable reflect_Float16x4_incident;
Variable reflect_Float16x4_normal;
Function reflect_Float16x4;
Variable refract_Float32x2_incident;
Variable refract_Float32x2_normal;
Variable refract_Float32x2_ior;
Function refract_Float32x2;
Variable refract_Float32x3_incident;
Variable refract_Float32x3_normal;
Variable refract_Float32x3_ior;
Function refract_Float32x3;
Variable refract_Float32x4_incident;
Variable refract_Float32x4_normal;
Variable refract_Float32x4_ior;
Function refract_Float32x4;
Variable refract_Float16x2_incident;
Variable refract_Float16x2_normal;
Variable refract_Float16x2_ior;
Function refract_Float16x2;
Variable refract_Float16x3_incident;
Variable refract_Float16x3_normal;
Variable refract_Float16x3_ior;
Function refract_Float16x3;
Variable refract_Float16x4_incident;
Variable refract_Float16x4_normal;
Variable refract_Float16x4_ior;
Function refract_Float16x4;
Variable cross_Float32x3_v0;
Variable cross_Float32x3_v1;
Function cross_Float32x3;
Variable cross_Float16x3_v0;
Variable cross_Float16x3_v1;
Function cross_Float16x3;
Variable length_Float32x2_arg;
Function length_Float32x2;
Variable length_Float32x3_arg;
Function length_Float32x3;
Variable length_Float32x4_arg;
Function length_Float32x4;
Variable length_Float16x2_arg;
Function length_Float16x2;
Variable length_Float16x3_arg;
Function length_Float16x3;
Variable length_Float16x4_arg;
Function length_Float16x4;
Variable normalize_Float32x2_arg;
Function normalize_Float32x2;
Variable normalize_Float32x3_arg;
Function normalize_Float32x3;
Variable normalize_Float32x4_arg;
Function normalize_Float32x4;
Variable normalize_Float16x2_arg;
Function normalize_Float16x2;
Variable normalize_Float16x3_arg;
Function normalize_Float16x3;
Variable normalize_Float16x4_arg;
Function normalize_Float16x4;
Variable distance_Float32x2_p0;
Variable distance_Float32x2_p1;
Function distance_Float32x2;
Variable distance_Float32x3_p0;
Variable distance_Float32x3_p1;
Function distance_Float32x3;
Variable distance_Float32x4_p0;
Variable distance_Float32x4_p1;
Function distance_Float32x4;
Variable distance_Float16x2_p0;
Variable distance_Float16x2_p1;
Function distance_Float16x2;
Variable distance_Float16x3_p0;
Variable distance_Float16x3_p1;
Function distance_Float16x3;
Variable distance_Float16x4_p0;
Variable distance_Float16x4_p1;
Function distance_Float16x4;
Variable min_Float32_x;
Variable min_Float32_y;
Function min_Float32;
Variable min_Float32x2_x;
Variable min_Float32x2_y;
Function min_Float32x2;
Variable min_Float32x3_x;
Variable min_Float32x3_y;
Function min_Float32x3;
Variable min_Float32x4_x;
Variable min_Float32x4_y;
Function min_Float32x4;
Variable min_Float16_x;
Variable min_Float16_y;
Function min_Float16;
Variable min_Float16x2_x;
Variable min_Float16x2_y;
Function min_Float16x2;
Variable min_Float16x3_x;
Variable min_Float16x3_y;
Function min_Float16x3;
Variable min_Float16x4_x;
Variable min_Float16x4_y;
Function min_Float16x4;
Variable min_Int32_x;
Variable min_Int32_y;
Function min_Int32;
Variable min_Int32x2_x;
Variable min_Int32x2_y;
Function min_Int32x2;
Variable min_Int32x3_x;
Variable min_Int32x3_y;
Function min_Int32x3;
Variable min_Int32x4_x;
Variable min_Int32x4_y;
Function min_Int32x4;
Variable min_Int16_x;
Variable min_Int16_y;
Function min_Int16;
Variable min_Int16x2_x;
Variable min_Int16x2_y;
Function min_Int16x2;
Variable min_Int16x3_x;
Variable min_Int16x3_y;
Function min_Int16x3;
Variable min_Int16x4_x;
Variable min_Int16x4_y;
Function min_Int16x4;
Variable min_UInt32_x;
Variable min_UInt32_y;
Function min_UInt32;
Variable min_UInt32x2_x;
Variable min_UInt32x2_y;
Function min_UInt32x2;
Variable min_UInt32x3_x;
Variable min_UInt32x3_y;
Function min_UInt32x3;
Variable min_UInt32x4_x;
Variable min_UInt32x4_y;
Function min_UInt32x4;
Variable min_UInt16_x;
Variable min_UInt16_y;
Function min_UInt16;
Variable min_UInt16x2_x;
Variable min_UInt16x2_y;
Function min_UInt16x2;
Variable min_UInt16x3_x;
Variable min_UInt16x3_y;
Function min_UInt16x3;
Variable min_UInt16x4_x;
Variable min_UInt16x4_y;
Function min_UInt16x4;
Variable max_Float32_x;
Variable max_Float32_y;
Function max_Float32;
Variable max_Float32x2_x;
Variable max_Float32x2_y;
Function max_Float32x2;
Variable max_Float32x3_x;
Variable max_Float32x3_y;
Function max_Float32x3;
Variable max_Float32x4_x;
Variable max_Float32x4_y;
Function max_Float32x4;
Variable max_Float16_x;
Variable max_Float16_y;
Function max_Float16;
Variable max_Float16x2_x;
Variable max_Float16x2_y;
Function max_Float16x2;
Variable max_Float16x3_x;
Variable max_Float16x3_y;
Function max_Float16x3;
Variable max_Float16x4_x;
Variable max_Float16x4_y;
Function max_Float16x4;
Variable max_Int32_x;
Variable max_Int32_y;
Function max_Int32;
Variable max_Int32x2_x;
Variable max_Int32x2_y;
Function max_Int32x2;
Variable max_Int32x3_x;
Variable max_Int32x3_y;
Function max_Int32x3;
Variable max_Int32x4_x;
Variable max_Int32x4_y;
Function max_Int32x4;
Variable max_Int16_x;
Variable max_Int16_y;
Function max_Int16;
Variable max_Int16x2_x;
Variable max_Int16x2_y;
Function max_Int16x2;
Variable max_Int16x3_x;
Variable max_Int16x3_y;
Function max_Int16x3;
Variable max_Int16x4_x;
Variable max_Int16x4_y;
Function max_Int16x4;
Variable max_UInt32_x;
Variable max_UInt32_y;
Function max_UInt32;
Variable max_UInt32x2_x;
Variable max_UInt32x2_y;
Function max_UInt32x2;
Variable max_UInt32x3_x;
Variable max_UInt32x3_y;
Function max_UInt32x3;
Variable max_UInt32x4_x;
Variable max_UInt32x4_y;
Function max_UInt32x4;
Variable max_UInt16_x;
Variable max_UInt16_y;
Function max_UInt16;
Variable max_UInt16x2_x;
Variable max_UInt16x2_y;
Function max_UInt16x2;
Variable max_UInt16x3_x;
Variable max_UInt16x3_y;
Function max_UInt16x3;
Variable max_UInt16x4_x;
Variable max_UInt16x4_y;
Function max_UInt16x4;
Variable clamp_Float32_val;
Variable clamp_Float32_min;
Variable clamp_Float32_max;
Function clamp_Float32;
Variable clamp_Float32x2_val;
Variable clamp_Float32x2_min;
Variable clamp_Float32x2_max;
Function clamp_Float32x2;
Variable clamp_Float32x3_val;
Variable clamp_Float32x3_min;
Variable clamp_Float32x3_max;
Function clamp_Float32x3;
Variable clamp_Float32x4_val;
Variable clamp_Float32x4_min;
Variable clamp_Float32x4_max;
Function clamp_Float32x4;
Variable clamp_Float16_val;
Variable clamp_Float16_min;
Variable clamp_Float16_max;
Function clamp_Float16;
Variable clamp_Float16x2_val;
Variable clamp_Float16x2_min;
Variable clamp_Float16x2_max;
Function clamp_Float16x2;
Variable clamp_Float16x3_val;
Variable clamp_Float16x3_min;
Variable clamp_Float16x3_max;
Function clamp_Float16x3;
Variable clamp_Float16x4_val;
Variable clamp_Float16x4_min;
Variable clamp_Float16x4_max;
Function clamp_Float16x4;
Variable clamp_Int32_val;
Variable clamp_Int32_min;
Variable clamp_Int32_max;
Function clamp_Int32;
Variable clamp_Int32x2_val;
Variable clamp_Int32x2_min;
Variable clamp_Int32x2_max;
Function clamp_Int32x2;
Variable clamp_Int32x3_val;
Variable clamp_Int32x3_min;
Variable clamp_Int32x3_max;
Function clamp_Int32x3;
Variable clamp_Int32x4_val;
Variable clamp_Int32x4_min;
Variable clamp_Int32x4_max;
Function clamp_Int32x4;
Variable clamp_Int16_val;
Variable clamp_Int16_min;
Variable clamp_Int16_max;
Function clamp_Int16;
Variable clamp_Int16x2_val;
Variable clamp_Int16x2_min;
Variable clamp_Int16x2_max;
Function clamp_Int16x2;
Variable clamp_Int16x3_val;
Variable clamp_Int16x3_min;
Variable clamp_Int16x3_max;
Function clamp_Int16x3;
Variable clamp_Int16x4_val;
Variable clamp_Int16x4_min;
Variable clamp_Int16x4_max;
Function clamp_Int16x4;
Variable clamp_UInt32_val;
Variable clamp_UInt32_min;
Variable clamp_UInt32_max;
Function clamp_UInt32;
Variable clamp_UInt32x2_val;
Variable clamp_UInt32x2_min;
Variable clamp_UInt32x2_max;
Function clamp_UInt32x2;
Variable clamp_UInt32x3_val;
Variable clamp_UInt32x3_min;
Variable clamp_UInt32x3_max;
Function clamp_UInt32x3;
Variable clamp_UInt32x4_val;
Variable clamp_UInt32x4_min;
Variable clamp_UInt32x4_max;
Function clamp_UInt32x4;
Variable clamp_UInt16_val;
Variable clamp_UInt16_min;
Variable clamp_UInt16_max;
Function clamp_UInt16;
Variable clamp_UInt16x2_val;
Variable clamp_UInt16x2_min;
Variable clamp_UInt16x2_max;
Function clamp_UInt16x2;
Variable clamp_UInt16x3_val;
Variable clamp_UInt16x3_min;
Variable clamp_UInt16x3_max;
Function clamp_UInt16x3;
Variable clamp_UInt16x4_val;
Variable clamp_UInt16x4_min;
Variable clamp_UInt16x4_max;
Function clamp_UInt16x4;
Variable lerp_Float32x2_a;
Variable lerp_Float32x2_b;
Variable lerp_Float32x2_t;
Function lerp_Float32x2;
Variable lerp_Float32x3_a;
Variable lerp_Float32x3_b;
Variable lerp_Float32x3_t;
Function lerp_Float32x3;
Variable lerp_Float32x4_a;
Variable lerp_Float32x4_b;
Variable lerp_Float32x4_t;
Function lerp_Float32x4;
Variable lerp_Float16x2_a;
Variable lerp_Float16x2_b;
Variable lerp_Float16x2_t;
Function lerp_Float16x2;
Variable lerp_Float16x3_a;
Variable lerp_Float16x3_b;
Variable lerp_Float16x3_t;
Function lerp_Float16x3;
Variable lerp_Float16x4_a;
Variable lerp_Float16x4_b;
Variable lerp_Float16x4_t;
Function lerp_Float16x4;
Variable step_Float32_edge;
Variable step_Float32_x;
Function step_Float32;
Variable step_Float32x2_edge;
Variable step_Float32x2_x;
Function step_Float32x2;
Variable step_Float32x3_edge;
Variable step_Float32x3_x;
Function step_Float32x3;
Variable step_Float32x4_edge;
Variable step_Float32x4_x;
Function step_Float32x4;
Variable step_Float16_edge;
Variable step_Float16_x;
Function step_Float16;
Variable step_Float16x2_edge;
Variable step_Float16x2_x;
Function step_Float16x2;
Variable step_Float16x3_edge;
Variable step_Float16x3_x;
Function step_Float16x3;
Variable step_Float16x4_edge;
Variable step_Float16x4_x;
Function step_Float16x4;
Variable smoothstep_Float32_edge0;
Variable smoothstep_Float32_edge1;
Variable smoothstep_Float32_x;
Function smoothstep_Float32;
Variable smoothstep_Float32x2_edge0;
Variable smoothstep_Float32x2_edge1;
Variable smoothstep_Float32x2_x;
Function smoothstep_Float32x2;
Variable smoothstep_Float32x3_edge0;
Variable smoothstep_Float32x3_edge1;
Variable smoothstep_Float32x3_x;
Function smoothstep_Float32x3;
Variable smoothstep_Float32x4_edge0;
Variable smoothstep_Float32x4_edge1;
Variable smoothstep_Float32x4_x;
Function smoothstep_Float32x4;
Variable smoothstep_Float16_edge0;
Variable smoothstep_Float16_edge1;
Variable smoothstep_Float16_x;
Function smoothstep_Float16;
Variable smoothstep_Float16x2_edge0;
Variable smoothstep_Float16x2_edge1;
Variable smoothstep_Float16x2_x;
Function smoothstep_Float16x2;
Variable smoothstep_Float16x3_edge0;
Variable smoothstep_Float16x3_edge1;
Variable smoothstep_Float16x3_x;
Function smoothstep_Float16x3;
Variable smoothstep_Float16x4_edge0;
Variable smoothstep_Float16x4_edge1;
Variable smoothstep_Float16x4_x;
Function smoothstep_Float16x4;
Variable ceil_Float32_arg;
Function ceil_Float32;
Variable ceil_Float32x2_arg;
Function ceil_Float32x2;
Variable ceil_Float32x3_arg;
Function ceil_Float32x3;
Variable ceil_Float32x4_arg;
Function ceil_Float32x4;
Variable ceil_Float16_arg;
Function ceil_Float16;
Variable ceil_Float16x2_arg;
Function ceil_Float16x2;
Variable ceil_Float16x3_arg;
Function ceil_Float16x3;
Variable ceil_Float16x4_arg;
Function ceil_Float16x4;
Variable floor_Float32_arg;
Function floor_Float32;
Variable floor_Float32x2_arg;
Function floor_Float32x2;
Variable floor_Float32x3_arg;
Function floor_Float32x3;
Variable floor_Float32x4_arg;
Function floor_Float32x4;
Variable floor_Float16_arg;
Function floor_Float16;
Variable floor_Float16x2_arg;
Function floor_Float16x2;
Variable floor_Float16x3_arg;
Function floor_Float16x3;
Variable floor_Float16x4_arg;
Function floor_Float16x4;
Variable fract_Float32_arg;
Function fract_Float32;
Variable fract_Float32x2_arg;
Function fract_Float32x2;
Variable fract_Float32x3_arg;
Function fract_Float32x3;
Variable fract_Float32x4_arg;
Function fract_Float32x4;
Variable fract_Float16_arg;
Function fract_Float16;
Variable fract_Float16x2_arg;
Function fract_Float16x2;
Variable fract_Float16x3_arg;
Function fract_Float16x3;
Variable fract_Float16x4_arg;
Function fract_Float16x4;
Variable saturate_Float32_arg;
Function saturate_Float32;
Variable saturate_Float32x2_arg;
Function saturate_Float32x2;
Variable saturate_Float32x3_arg;
Function saturate_Float32x3;
Variable saturate_Float32x4_arg;
Function saturate_Float32x4;
Variable saturate_Float16_arg;
Function saturate_Float16;
Variable saturate_Float16x2_arg;
Function saturate_Float16x2;
Variable saturate_Float16x3_arg;
Function saturate_Float16x3;
Variable saturate_Float16x4_arg;
Function saturate_Float16x4;
Variable trunc_Float32_arg;
Function trunc_Float32;
Variable trunc_Float32x2_arg;
Function trunc_Float32x2;
Variable trunc_Float32x3_arg;
Function trunc_Float32x3;
Variable trunc_Float32x4_arg;
Function trunc_Float32x4;
Variable trunc_Float16_arg;
Function trunc_Float16;
Variable trunc_Float16x2_arg;
Function trunc_Float16x2;
Variable trunc_Float16x3_arg;
Function trunc_Float16x3;
Variable trunc_Float16x4_arg;
Function trunc_Float16x4;
Variable ddx_Float32_arg;
Function ddx_Float32;
Variable ddx_Float32x2_arg;
Function ddx_Float32x2;
Variable ddx_Float32x3_arg;
Function ddx_Float32x3;
Variable ddx_Float32x4_arg;
Function ddx_Float32x4;
Variable ddx_Float16_arg;
Function ddx_Float16;
Variable ddx_Float16x2_arg;
Function ddx_Float16x2;
Variable ddx_Float16x3_arg;
Function ddx_Float16x3;
Variable ddx_Float16x4_arg;
Function ddx_Float16x4;
Variable ddy_Float32_arg;
Function ddy_Float32;
Variable ddy_Float32x2_arg;
Function ddy_Float32x2;
Variable ddy_Float32x3_arg;
Function ddy_Float32x3;
Variable ddy_Float32x4_arg;
Function ddy_Float32x4;
Variable ddy_Float16_arg;
Function ddy_Float16;
Variable ddy_Float16x2_arg;
Function ddy_Float16x2;
Variable ddy_Float16x3_arg;
Function ddy_Float16x3;
Variable ddy_Float16x4_arg;
Function ddy_Float16x4;
Variable fwidth_Float32_arg;
Function fwidth_Float32;
Variable fwidth_Float32x2_arg;
Function fwidth_Float32x2;
Variable fwidth_Float32x3_arg;
Function fwidth_Float32x3;
Variable fwidth_Float32x4_arg;
Function fwidth_Float32x4;
Variable fwidth_Float16_arg;
Function fwidth_Float16;
Variable fwidth_Float16x2_arg;
Function fwidth_Float16x2;
Variable fwidth_Float16x3_arg;
Function fwidth_Float16x3;
Variable fwidth_Float16x4_arg;
Function fwidth_Float16x4;
Variable sign_Int32_arg;
Function sign_Int32;
Variable sign_Int32x2_arg;
Function sign_Int32x2;
Variable sign_Int32x3_arg;
Function sign_Int32x3;
Variable sign_Int32x4_arg;
Function sign_Int32x4;
Variable sign_Int16_arg;
Function sign_Int16;
Variable sign_Int16x2_arg;
Function sign_Int16x2;
Variable sign_Int16x3_arg;
Function sign_Int16x3;
Variable sign_Int16x4_arg;
Function sign_Int16x4;
Variable sign_Float32_arg;
Function sign_Float32;
Variable sign_Float32x2_arg;
Function sign_Float32x2;
Variable sign_Float32x3_arg;
Function sign_Float32x3;
Variable sign_Float32x4_arg;
Function sign_Float32x4;
Variable sign_Float16_arg;
Function sign_Float16;
Variable sign_Float16x2_arg;
Function sign_Float16x2;
Variable sign_Float16x3_arg;
Function sign_Float16x3;
Variable sign_Float16x4_arg;
Function sign_Float16x4;
Variable abs_Int32_arg;
Function abs_Int32;
Variable abs_Int32x2_arg;
Function abs_Int32x2;
Variable abs_Int32x3_arg;
Function abs_Int32x3;
Variable abs_Int32x4_arg;
Function abs_Int32x4;
Variable abs_Int16_arg;
Function abs_Int16;
Variable abs_Int16x2_arg;
Function abs_Int16x2;
Variable abs_Int16x3_arg;
Function abs_Int16x3;
Variable abs_Int16x4_arg;
Function abs_Int16x4;
Variable abs_Float32_arg;
Function abs_Float32;
Variable abs_Float32x2_arg;
Function abs_Float32x2;
Variable abs_Float32x3_arg;
Function abs_Float32x3;
Variable abs_Float32x4_arg;
Function abs_Float32x4;
Variable abs_Float16_arg;
Function abs_Float16;
Variable abs_Float16x2_arg;
Function abs_Float16x2;
Variable abs_Float16x3_arg;
Function abs_Float16x3;
Variable abs_Float16x4_arg;
Function abs_Float16x4;
Variable castToF16_UInt16_arg;
Function castToF16_UInt16;
Variable castToF16_Int16_arg;
Function castToF16_Int16;
Variable castToU16_Float16_arg;
Function castToU16_Float16;
Variable castToU16_Int16_arg;
Function castToU16_Int16;
Variable castToI16_Float16_arg;
Function castToI16_Float16;
Variable castToI16_UInt16_arg;
Function castToI16_UInt16;
Variable castToF32_UInt32_arg;
Function castToF32_UInt32;
Variable castToF32_Int32_arg;
Function castToF32_Int32;
Variable castToU32_Float32_arg;
Function castToU32_Float32;
Variable castToU32_Int32_arg;
Function castToU32_Int32;
Variable castToI32_Float32_arg;
Function castToI32_Float32;
Variable castToI32_UInt32_arg;
Function castToI32_UInt32;
Variable any_Bool8_arg;
Function any_Bool8;
Variable any_Bool8x2_arg;
Function any_Bool8x2;
Variable any_Bool8x3_arg;
Function any_Bool8x3;
Variable any_Bool8x4_arg;
Function any_Bool8x4;
Variable all_Bool8_arg;
Function all_Bool8;
Variable all_Bool8x2_arg;
Function all_Bool8x2;
Variable all_Bool8x3_arg;
Function all_Bool8x3;
Variable all_Bool8x4_arg;
Function all_Bool8x4;
Variable transpose_Float32x2x2_arg;
Function transpose_Float32x2x2;
Variable transpose_Float16x2x2_arg;
Function transpose_Float16x2x2;
Variable transpose_Float32x2x3_arg;
Function transpose_Float32x2x3;
Variable transpose_Float16x2x3_arg;
Function transpose_Float16x2x3;
Variable transpose_Float32x2x4_arg;
Function transpose_Float32x2x4;
Variable transpose_Float16x2x4_arg;
Function transpose_Float16x2x4;
Variable transpose_Float32x3x2_arg;
Function transpose_Float32x3x2;
Variable transpose_Float16x3x2_arg;
Function transpose_Float16x3x2;
Variable transpose_Float32x3x3_arg;
Function transpose_Float32x3x3;
Variable transpose_Float16x3x3_arg;
Function transpose_Float16x3x3;
Variable transpose_Float32x3x4_arg;
Function transpose_Float32x3x4;
Variable transpose_Float16x3x4_arg;
Function transpose_Float16x3x4;
Variable transpose_Float32x4x2_arg;
Function transpose_Float32x4x2;
Variable transpose_Float16x4x2_arg;
Function transpose_Float16x4x2;
Variable transpose_Float32x4x3_arg;
Function transpose_Float32x4x3;
Variable transpose_Float16x4x3_arg;
Function transpose_Float16x4x3;
Variable transpose_Float32x4x4_arg;
Function transpose_Float32x4x4;
Variable transpose_Float16x4x4_arg;
Function transpose_Float16x4x4;
Variable inverse_Float32x2x2_arg;
Function inverse_Float32x2x2;
Variable inverse_Float16x2x2_arg;
Function inverse_Float16x2x2;
Variable inverse_Float32x2x3_arg;
Function inverse_Float32x2x3;
Variable inverse_Float16x2x3_arg;
Function inverse_Float16x2x3;
Variable inverse_Float32x2x4_arg;
Function inverse_Float32x2x4;
Variable inverse_Float16x2x4_arg;
Function inverse_Float16x2x4;
Variable inverse_Float32x3x2_arg;
Function inverse_Float32x3x2;
Variable inverse_Float16x3x2_arg;
Function inverse_Float16x3x2;
Variable inverse_Float32x3x3_arg;
Function inverse_Float32x3x3;
Variable inverse_Float16x3x3_arg;
Function inverse_Float16x3x3;
Variable inverse_Float32x3x4_arg;
Function inverse_Float32x3x4;
Variable inverse_Float16x3x4_arg;
Function inverse_Float16x3x4;
Variable inverse_Float32x4x2_arg;
Function inverse_Float32x4x2;
Variable inverse_Float16x4x2_arg;
Function inverse_Float16x4x2;
Variable inverse_Float32x4x3_arg;
Function inverse_Float32x4x3;
Variable inverse_Float16x4x3_arg;
Function inverse_Float16x4x3;
Variable inverse_Float32x4x4_arg;
Function inverse_Float32x4x4;
Variable inverse_Float16x4x4_arg;
Function inverse_Float16x4x4;
Function VertexGetOutputLayer;
Function VertexGetOutputViewport;
Function VertexGetIndex;
Function VertexGetInstanceIndex;
Function VertexGetBaseIndex;
Function VertexGetBaseInstanceIndex;
Function VertexGetDrawIndex;
Variable VertexSetOutputLayer_UInt16_arg;
Function VertexSetOutputLayer_UInt16;
Variable VertexSetOutputLayer_UInt32_arg;
Function VertexSetOutputLayer_UInt32;
Variable VertexSetOutputViewport_UInt16_arg;
Function VertexSetOutputViewport_UInt16;
Variable VertexSetOutputViewport_UInt32_arg;
Function VertexSetOutputViewport_UInt32;
Variable VertexExportCoordinates_Float32x4_arg;
Function VertexExportCoordinates_Float32x4;
Variable VertexExportCoordinates_Float16x4_arg;
Function VertexExportCoordinates_Float16x4;
Function GeometryExportVertex;
Function GeometryExportPrimitive;
Function PixelGetCoordinates_Float32x4;
Function PixelGetCoordinates_Float16x4;
Function PixelGetDepth;
Variable PixelExportColor_Float32_Int32_color;
Variable PixelExportColor_Float32_Int32_index;
Function PixelExportColor_Float32_Int32;
Variable PixelExportColor_Float32_UInt32_color;
Variable PixelExportColor_Float32_UInt32_index;
Function PixelExportColor_Float32_UInt32;
Variable PixelExportColor_Float32_Int16_color;
Variable PixelExportColor_Float32_Int16_index;
Function PixelExportColor_Float32_Int16;
Variable PixelExportColor_Float32_UInt16_color;
Variable PixelExportColor_Float32_UInt16_index;
Function PixelExportColor_Float32_UInt16;
Variable PixelExportColor_Float32x2_Int32_color;
Variable PixelExportColor_Float32x2_Int32_index;
Function PixelExportColor_Float32x2_Int32;
Variable PixelExportColor_Float32x2_UInt32_color;
Variable PixelExportColor_Float32x2_UInt32_index;
Function PixelExportColor_Float32x2_UInt32;
Variable PixelExportColor_Float32x2_Int16_color;
Variable PixelExportColor_Float32x2_Int16_index;
Function PixelExportColor_Float32x2_Int16;
Variable PixelExportColor_Float32x2_UInt16_color;
Variable PixelExportColor_Float32x2_UInt16_index;
Function PixelExportColor_Float32x2_UInt16;
Variable PixelExportColor_Float32x3_Int32_color;
Variable PixelExportColor_Float32x3_Int32_index;
Function PixelExportColor_Float32x3_Int32;
Variable PixelExportColor_Float32x3_UInt32_color;
Variable PixelExportColor_Float32x3_UInt32_index;
Function PixelExportColor_Float32x3_UInt32;
Variable PixelExportColor_Float32x3_Int16_color;
Variable PixelExportColor_Float32x3_Int16_index;
Function PixelExportColor_Float32x3_Int16;
Variable PixelExportColor_Float32x3_UInt16_color;
Variable PixelExportColor_Float32x3_UInt16_index;
Function PixelExportColor_Float32x3_UInt16;
Variable PixelExportColor_Float32x4_Int32_color;
Variable PixelExportColor_Float32x4_Int32_index;
Function PixelExportColor_Float32x4_Int32;
Variable PixelExportColor_Float32x4_UInt32_color;
Variable PixelExportColor_Float32x4_UInt32_index;
Function PixelExportColor_Float32x4_UInt32;
Variable PixelExportColor_Float32x4_Int16_color;
Variable PixelExportColor_Float32x4_Int16_index;
Function PixelExportColor_Float32x4_Int16;
Variable PixelExportColor_Float32x4_UInt16_color;
Variable PixelExportColor_Float32x4_UInt16_index;
Function PixelExportColor_Float32x4_UInt16;
Variable PixelExportColor_Float16_Int32_color;
Variable PixelExportColor_Float16_Int32_index;
Function PixelExportColor_Float16_Int32;
Variable PixelExportColor_Float16_UInt32_color;
Variable PixelExportColor_Float16_UInt32_index;
Function PixelExportColor_Float16_UInt32;
Variable PixelExportColor_Float16_Int16_color;
Variable PixelExportColor_Float16_Int16_index;
Function PixelExportColor_Float16_Int16;
Variable PixelExportColor_Float16_UInt16_color;
Variable PixelExportColor_Float16_UInt16_index;
Function PixelExportColor_Float16_UInt16;
Variable PixelExportColor_Float16x2_Int32_color;
Variable PixelExportColor_Float16x2_Int32_index;
Function PixelExportColor_Float16x2_Int32;
Variable PixelExportColor_Float16x2_UInt32_color;
Variable PixelExportColor_Float16x2_UInt32_index;
Function PixelExportColor_Float16x2_UInt32;
Variable PixelExportColor_Float16x2_Int16_color;
Variable PixelExportColor_Float16x2_Int16_index;
Function PixelExportColor_Float16x2_Int16;
Variable PixelExportColor_Float16x2_UInt16_color;
Variable PixelExportColor_Float16x2_UInt16_index;
Function PixelExportColor_Float16x2_UInt16;
Variable PixelExportColor_Float16x3_Int32_color;
Variable PixelExportColor_Float16x3_Int32_index;
Function PixelExportColor_Float16x3_Int32;
Variable PixelExportColor_Float16x3_UInt32_color;
Variable PixelExportColor_Float16x3_UInt32_index;
Function PixelExportColor_Float16x3_UInt32;
Variable PixelExportColor_Float16x3_Int16_color;
Variable PixelExportColor_Float16x3_Int16_index;
Function PixelExportColor_Float16x3_Int16;
Variable PixelExportColor_Float16x3_UInt16_color;
Variable PixelExportColor_Float16x3_UInt16_index;
Function PixelExportColor_Float16x3_UInt16;
Variable PixelExportColor_Float16x4_Int32_color;
Variable PixelExportColor_Float16x4_Int32_index;
Function PixelExportColor_Float16x4_Int32;
Variable PixelExportColor_Float16x4_UInt32_color;
Variable PixelExportColor_Float16x4_UInt32_index;
Function PixelExportColor_Float16x4_UInt32;
Variable PixelExportColor_Float16x4_Int16_color;
Variable PixelExportColor_Float16x4_Int16_index;
Function PixelExportColor_Float16x4_Int16;
Variable PixelExportColor_Float16x4_UInt16_color;
Variable PixelExportColor_Float16x4_UInt16_index;
Function PixelExportColor_Float16x4_UInt16;
Variable PixelExportColor_Int32_Int32_color;
Variable PixelExportColor_Int32_Int32_index;
Function PixelExportColor_Int32_Int32;
Variable PixelExportColor_Int32_UInt32_color;
Variable PixelExportColor_Int32_UInt32_index;
Function PixelExportColor_Int32_UInt32;
Variable PixelExportColor_Int32_Int16_color;
Variable PixelExportColor_Int32_Int16_index;
Function PixelExportColor_Int32_Int16;
Variable PixelExportColor_Int32_UInt16_color;
Variable PixelExportColor_Int32_UInt16_index;
Function PixelExportColor_Int32_UInt16;
Variable PixelExportColor_Int32x2_Int32_color;
Variable PixelExportColor_Int32x2_Int32_index;
Function PixelExportColor_Int32x2_Int32;
Variable PixelExportColor_Int32x2_UInt32_color;
Variable PixelExportColor_Int32x2_UInt32_index;
Function PixelExportColor_Int32x2_UInt32;
Variable PixelExportColor_Int32x2_Int16_color;
Variable PixelExportColor_Int32x2_Int16_index;
Function PixelExportColor_Int32x2_Int16;
Variable PixelExportColor_Int32x2_UInt16_color;
Variable PixelExportColor_Int32x2_UInt16_index;
Function PixelExportColor_Int32x2_UInt16;
Variable PixelExportColor_Int32x3_Int32_color;
Variable PixelExportColor_Int32x3_Int32_index;
Function PixelExportColor_Int32x3_Int32;
Variable PixelExportColor_Int32x3_UInt32_color;
Variable PixelExportColor_Int32x3_UInt32_index;
Function PixelExportColor_Int32x3_UInt32;
Variable PixelExportColor_Int32x3_Int16_color;
Variable PixelExportColor_Int32x3_Int16_index;
Function PixelExportColor_Int32x3_Int16;
Variable PixelExportColor_Int32x3_UInt16_color;
Variable PixelExportColor_Int32x3_UInt16_index;
Function PixelExportColor_Int32x3_UInt16;
Variable PixelExportColor_Int32x4_Int32_color;
Variable PixelExportColor_Int32x4_Int32_index;
Function PixelExportColor_Int32x4_Int32;
Variable PixelExportColor_Int32x4_UInt32_color;
Variable PixelExportColor_Int32x4_UInt32_index;
Function PixelExportColor_Int32x4_UInt32;
Variable PixelExportColor_Int32x4_Int16_color;
Variable PixelExportColor_Int32x4_Int16_index;
Function PixelExportColor_Int32x4_Int16;
Variable PixelExportColor_Int32x4_UInt16_color;
Variable PixelExportColor_Int32x4_UInt16_index;
Function PixelExportColor_Int32x4_UInt16;
Variable PixelExportColor_Int16_Int32_color;
Variable PixelExportColor_Int16_Int32_index;
Function PixelExportColor_Int16_Int32;
Variable PixelExportColor_Int16_UInt32_color;
Variable PixelExportColor_Int16_UInt32_index;
Function PixelExportColor_Int16_UInt32;
Variable PixelExportColor_Int16_Int16_color;
Variable PixelExportColor_Int16_Int16_index;
Function PixelExportColor_Int16_Int16;
Variable PixelExportColor_Int16_UInt16_color;
Variable PixelExportColor_Int16_UInt16_index;
Function PixelExportColor_Int16_UInt16;
Variable PixelExportColor_Int16x2_Int32_color;
Variable PixelExportColor_Int16x2_Int32_index;
Function PixelExportColor_Int16x2_Int32;
Variable PixelExportColor_Int16x2_UInt32_color;
Variable PixelExportColor_Int16x2_UInt32_index;
Function PixelExportColor_Int16x2_UInt32;
Variable PixelExportColor_Int16x2_Int16_color;
Variable PixelExportColor_Int16x2_Int16_index;
Function PixelExportColor_Int16x2_Int16;
Variable PixelExportColor_Int16x2_UInt16_color;
Variable PixelExportColor_Int16x2_UInt16_index;
Function PixelExportColor_Int16x2_UInt16;
Variable PixelExportColor_Int16x3_Int32_color;
Variable PixelExportColor_Int16x3_Int32_index;
Function PixelExportColor_Int16x3_Int32;
Variable PixelExportColor_Int16x3_UInt32_color;
Variable PixelExportColor_Int16x3_UInt32_index;
Function PixelExportColor_Int16x3_UInt32;
Variable PixelExportColor_Int16x3_Int16_color;
Variable PixelExportColor_Int16x3_Int16_index;
Function PixelExportColor_Int16x3_Int16;
Variable PixelExportColor_Int16x3_UInt16_color;
Variable PixelExportColor_Int16x3_UInt16_index;
Function PixelExportColor_Int16x3_UInt16;
Variable PixelExportColor_Int16x4_Int32_color;
Variable PixelExportColor_Int16x4_Int32_index;
Function PixelExportColor_Int16x4_Int32;
Variable PixelExportColor_Int16x4_UInt32_color;
Variable PixelExportColor_Int16x4_UInt32_index;
Function PixelExportColor_Int16x4_UInt32;
Variable PixelExportColor_Int16x4_Int16_color;
Variable PixelExportColor_Int16x4_Int16_index;
Function PixelExportColor_Int16x4_Int16;
Variable PixelExportColor_Int16x4_UInt16_color;
Variable PixelExportColor_Int16x4_UInt16_index;
Function PixelExportColor_Int16x4_UInt16;
Variable PixelExportColor_UInt32_Int32_color;
Variable PixelExportColor_UInt32_Int32_index;
Function PixelExportColor_UInt32_Int32;
Variable PixelExportColor_UInt32_UInt32_color;
Variable PixelExportColor_UInt32_UInt32_index;
Function PixelExportColor_UInt32_UInt32;
Variable PixelExportColor_UInt32_Int16_color;
Variable PixelExportColor_UInt32_Int16_index;
Function PixelExportColor_UInt32_Int16;
Variable PixelExportColor_UInt32_UInt16_color;
Variable PixelExportColor_UInt32_UInt16_index;
Function PixelExportColor_UInt32_UInt16;
Variable PixelExportColor_UInt32x2_Int32_color;
Variable PixelExportColor_UInt32x2_Int32_index;
Function PixelExportColor_UInt32x2_Int32;
Variable PixelExportColor_UInt32x2_UInt32_color;
Variable PixelExportColor_UInt32x2_UInt32_index;
Function PixelExportColor_UInt32x2_UInt32;
Variable PixelExportColor_UInt32x2_Int16_color;
Variable PixelExportColor_UInt32x2_Int16_index;
Function PixelExportColor_UInt32x2_Int16;
Variable PixelExportColor_UInt32x2_UInt16_color;
Variable PixelExportColor_UInt32x2_UInt16_index;
Function PixelExportColor_UInt32x2_UInt16;
Variable PixelExportColor_UInt32x3_Int32_color;
Variable PixelExportColor_UInt32x3_Int32_index;
Function PixelExportColor_UInt32x3_Int32;
Variable PixelExportColor_UInt32x3_UInt32_color;
Variable PixelExportColor_UInt32x3_UInt32_index;
Function PixelExportColor_UInt32x3_UInt32;
Variable PixelExportColor_UInt32x3_Int16_color;
Variable PixelExportColor_UInt32x3_Int16_index;
Function PixelExportColor_UInt32x3_Int16;
Variable PixelExportColor_UInt32x3_UInt16_color;
Variable PixelExportColor_UInt32x3_UInt16_index;
Function PixelExportColor_UInt32x3_UInt16;
Variable PixelExportColor_UInt32x4_Int32_color;
Variable PixelExportColor_UInt32x4_Int32_index;
Function PixelExportColor_UInt32x4_Int32;
Variable PixelExportColor_UInt32x4_UInt32_color;
Variable PixelExportColor_UInt32x4_UInt32_index;
Function PixelExportColor_UInt32x4_UInt32;
Variable PixelExportColor_UInt32x4_Int16_color;
Variable PixelExportColor_UInt32x4_Int16_index;
Function PixelExportColor_UInt32x4_Int16;
Variable PixelExportColor_UInt32x4_UInt16_color;
Variable PixelExportColor_UInt32x4_UInt16_index;
Function PixelExportColor_UInt32x4_UInt16;
Variable PixelExportColor_UInt16_Int32_color;
Variable PixelExportColor_UInt16_Int32_index;
Function PixelExportColor_UInt16_Int32;
Variable PixelExportColor_UInt16_UInt32_color;
Variable PixelExportColor_UInt16_UInt32_index;
Function PixelExportColor_UInt16_UInt32;
Variable PixelExportColor_UInt16_Int16_color;
Variable PixelExportColor_UInt16_Int16_index;
Function PixelExportColor_UInt16_Int16;
Variable PixelExportColor_UInt16_UInt16_color;
Variable PixelExportColor_UInt16_UInt16_index;
Function PixelExportColor_UInt16_UInt16;
Variable PixelExportColor_UInt16x2_Int32_color;
Variable PixelExportColor_UInt16x2_Int32_index;
Function PixelExportColor_UInt16x2_Int32;
Variable PixelExportColor_UInt16x2_UInt32_color;
Variable PixelExportColor_UInt16x2_UInt32_index;
Function PixelExportColor_UInt16x2_UInt32;
Variable PixelExportColor_UInt16x2_Int16_color;
Variable PixelExportColor_UInt16x2_Int16_index;
Function PixelExportColor_UInt16x2_Int16;
Variable PixelExportColor_UInt16x2_UInt16_color;
Variable PixelExportColor_UInt16x2_UInt16_index;
Function PixelExportColor_UInt16x2_UInt16;
Variable PixelExportColor_UInt16x3_Int32_color;
Variable PixelExportColor_UInt16x3_Int32_index;
Function PixelExportColor_UInt16x3_Int32;
Variable PixelExportColor_UInt16x3_UInt32_color;
Variable PixelExportColor_UInt16x3_UInt32_index;
Function PixelExportColor_UInt16x3_UInt32;
Variable PixelExportColor_UInt16x3_Int16_color;
Variable PixelExportColor_UInt16x3_Int16_index;
Function PixelExportColor_UInt16x3_Int16;
Variable PixelExportColor_UInt16x3_UInt16_color;
Variable PixelExportColor_UInt16x3_UInt16_index;
Function PixelExportColor_UInt16x3_UInt16;
Variable PixelExportColor_UInt16x4_Int32_color;
Variable PixelExportColor_UInt16x4_Int32_index;
Function PixelExportColor_UInt16x4_Int32;
Variable PixelExportColor_UInt16x4_UInt32_color;
Variable PixelExportColor_UInt16x4_UInt32_index;
Function PixelExportColor_UInt16x4_UInt32;
Variable PixelExportColor_UInt16x4_Int16_color;
Variable PixelExportColor_UInt16x4_Int16_index;
Function PixelExportColor_UInt16x4_Int16;
Variable PixelExportColor_UInt16x4_UInt16_color;
Variable PixelExportColor_UInt16x4_UInt16_index;
Function PixelExportColor_UInt16x4_UInt16;
Function ComputeGetLocalInvocationIndices;
Function ComputeGetGlobalInvocationIndices;
Function ComputeGetWorkgroupIndices;
Function ComputeGetWorkGroupDimensions;
Function ComputeGetIndexInWorkgroup;
Function SubgroupGetId;
Function SubgroupGetSize;
Function SubgroupGetNum;
Function SubgroupGetInvocationMask;
Function SubgroupGetInvocationAndLowerMask;
Function SubgroupGetLowerMask;
Function SubgroupGetInvocationAndGreaterMask;
Function SubgroupGetGreaterMask;
Function SubgroupFirstInvocation;
Variable Read_UInt32_value;
Function SubgroupRead;
Variable SubgroupBallot_Bool8_predicate;
Function SubgroupBallot;
Variable SubgroupInverseBallot_Bool8_predicate;
Function SubgroupInverseBallot;
Variable SubgroupBallotBitCount_UInt32x4_mask;
Function SubgroupBallotBitCount;
Variable SubgroupBallotFirstOne_UInt32x4_mask;
Function SubgroupBallotFirstOne;
Variable SubgroupBallotLastOne_UInt32x4_mask;
Function SubgroupBallotLastOne;
Variable SubgroupBallotBit_UInt32x4_mask;
Variable SubgroupBallotBit_UInt32_index;
Function SubgroupBallotBit;
Variable SubgroupSwapDiagonal_Float32_color;
Function SubgroupSwapDiagonal_Float32;
Variable SubgroupSwapDiagonal_Float32x2_color;
Function SubgroupSwapDiagonal_Float32x2;
Variable SubgroupSwapDiagonal_Float32x3_color;
Function SubgroupSwapDiagonal_Float32x3;
Variable SubgroupSwapDiagonal_Float32x4_color;
Function SubgroupSwapDiagonal_Float32x4;
Variable SubgroupSwapDiagonal_Float16_color;
Function SubgroupSwapDiagonal_Float16;
Variable SubgroupSwapDiagonal_Float16x2_color;
Function SubgroupSwapDiagonal_Float16x2;
Variable SubgroupSwapDiagonal_Float16x3_color;
Function SubgroupSwapDiagonal_Float16x3;
Variable SubgroupSwapDiagonal_Float16x4_color;
Function SubgroupSwapDiagonal_Float16x4;
Variable SubgroupSwapDiagonal_Int32_color;
Function SubgroupSwapDiagonal_Int32;
Variable SubgroupSwapDiagonal_Int32x2_color;
Function SubgroupSwapDiagonal_Int32x2;
Variable SubgroupSwapDiagonal_Int32x3_color;
Function SubgroupSwapDiagonal_Int32x3;
Variable SubgroupSwapDiagonal_Int32x4_color;
Function SubgroupSwapDiagonal_Int32x4;
Variable SubgroupSwapDiagonal_Int16_color;
Function SubgroupSwapDiagonal_Int16;
Variable SubgroupSwapDiagonal_Int16x2_color;
Function SubgroupSwapDiagonal_Int16x2;
Variable SubgroupSwapDiagonal_Int16x3_color;
Function SubgroupSwapDiagonal_Int16x3;
Variable SubgroupSwapDiagonal_Int16x4_color;
Function SubgroupSwapDiagonal_Int16x4;
Variable SubgroupSwapDiagonal_UInt32_color;
Function SubgroupSwapDiagonal_UInt32;
Variable SubgroupSwapDiagonal_UInt32x2_color;
Function SubgroupSwapDiagonal_UInt32x2;
Variable SubgroupSwapDiagonal_UInt32x3_color;
Function SubgroupSwapDiagonal_UInt32x3;
Variable SubgroupSwapDiagonal_UInt32x4_color;
Function SubgroupSwapDiagonal_UInt32x4;
Variable SubgroupSwapDiagonal_UInt16_color;
Function SubgroupSwapDiagonal_UInt16;
Variable SubgroupSwapDiagonal_UInt16x2_color;
Function SubgroupSwapDiagonal_UInt16x2;
Variable SubgroupSwapDiagonal_UInt16x3_color;
Function SubgroupSwapDiagonal_UInt16x3;
Variable SubgroupSwapDiagonal_UInt16x4_color;
Function SubgroupSwapDiagonal_UInt16x4;
Variable SubgroupSwapVertical_Float32_color;
Function SubgroupSwapVertical_Float32;
Variable SubgroupSwapVertical_Float32x2_color;
Function SubgroupSwapVertical_Float32x2;
Variable SubgroupSwapVertical_Float32x3_color;
Function SubgroupSwapVertical_Float32x3;
Variable SubgroupSwapVertical_Float32x4_color;
Function SubgroupSwapVertical_Float32x4;
Variable SubgroupSwapVertical_Float16_color;
Function SubgroupSwapVertical_Float16;
Variable SubgroupSwapVertical_Float16x2_color;
Function SubgroupSwapVertical_Float16x2;
Variable SubgroupSwapVertical_Float16x3_color;
Function SubgroupSwapVertical_Float16x3;
Variable SubgroupSwapVertical_Float16x4_color;
Function SubgroupSwapVertical_Float16x4;
Variable SubgroupSwapVertical_Int32_color;
Function SubgroupSwapVertical_Int32;
Variable SubgroupSwapVertical_Int32x2_color;
Function SubgroupSwapVertical_Int32x2;
Variable SubgroupSwapVertical_Int32x3_color;
Function SubgroupSwapVertical_Int32x3;
Variable SubgroupSwapVertical_Int32x4_color;
Function SubgroupSwapVertical_Int32x4;
Variable SubgroupSwapVertical_Int16_color;
Function SubgroupSwapVertical_Int16;
Variable SubgroupSwapVertical_Int16x2_color;
Function SubgroupSwapVertical_Int16x2;
Variable SubgroupSwapVertical_Int16x3_color;
Function SubgroupSwapVertical_Int16x3;
Variable SubgroupSwapVertical_Int16x4_color;
Function SubgroupSwapVertical_Int16x4;
Variable SubgroupSwapVertical_UInt32_color;
Function SubgroupSwapVertical_UInt32;
Variable SubgroupSwapVertical_UInt32x2_color;
Function SubgroupSwapVertical_UInt32x2;
Variable SubgroupSwapVertical_UInt32x3_color;
Function SubgroupSwapVertical_UInt32x3;
Variable SubgroupSwapVertical_UInt32x4_color;
Function SubgroupSwapVertical_UInt32x4;
Variable SubgroupSwapVertical_UInt16_color;
Function SubgroupSwapVertical_UInt16;
Variable SubgroupSwapVertical_UInt16x2_color;
Function SubgroupSwapVertical_UInt16x2;
Variable SubgroupSwapVertical_UInt16x3_color;
Function SubgroupSwapVertical_UInt16x3;
Variable SubgroupSwapVertical_UInt16x4_color;
Function SubgroupSwapVertical_UInt16x4;
Variable SubgroupSwapHorizontal_Float32_color;
Function SubgroupSwapHorizontal_Float32;
Variable SubgroupSwapHorizontal_Float32x2_color;
Function SubgroupSwapHorizontal_Float32x2;
Variable SubgroupSwapHorizontal_Float32x3_color;
Function SubgroupSwapHorizontal_Float32x3;
Variable SubgroupSwapHorizontal_Float32x4_color;
Function SubgroupSwapHorizontal_Float32x4;
Variable SubgroupSwapHorizontal_Float16_color;
Function SubgroupSwapHorizontal_Float16;
Variable SubgroupSwapHorizontal_Float16x2_color;
Function SubgroupSwapHorizontal_Float16x2;
Variable SubgroupSwapHorizontal_Float16x3_color;
Function SubgroupSwapHorizontal_Float16x3;
Variable SubgroupSwapHorizontal_Float16x4_color;
Function SubgroupSwapHorizontal_Float16x4;
Variable SubgroupSwapHorizontal_Int32_color;
Function SubgroupSwapHorizontal_Int32;
Variable SubgroupSwapHorizontal_Int32x2_color;
Function SubgroupSwapHorizontal_Int32x2;
Variable SubgroupSwapHorizontal_Int32x3_color;
Function SubgroupSwapHorizontal_Int32x3;
Variable SubgroupSwapHorizontal_Int32x4_color;
Function SubgroupSwapHorizontal_Int32x4;
Variable SubgroupSwapHorizontal_Int16_color;
Function SubgroupSwapHorizontal_Int16;
Variable SubgroupSwapHorizontal_Int16x2_color;
Function SubgroupSwapHorizontal_Int16x2;
Variable SubgroupSwapHorizontal_Int16x3_color;
Function SubgroupSwapHorizontal_Int16x3;
Variable SubgroupSwapHorizontal_Int16x4_color;
Function SubgroupSwapHorizontal_Int16x4;
Variable SubgroupSwapHorizontal_UInt32_color;
Function SubgroupSwapHorizontal_UInt32;
Variable SubgroupSwapHorizontal_UInt32x2_color;
Function SubgroupSwapHorizontal_UInt32x2;
Variable SubgroupSwapHorizontal_UInt32x3_color;
Function SubgroupSwapHorizontal_UInt32x3;
Variable SubgroupSwapHorizontal_UInt32x4_color;
Function SubgroupSwapHorizontal_UInt32x4;
Variable SubgroupSwapHorizontal_UInt16_color;
Function SubgroupSwapHorizontal_UInt16;
Variable SubgroupSwapHorizontal_UInt16x2_color;
Function SubgroupSwapHorizontal_UInt16x2;
Variable SubgroupSwapHorizontal_UInt16x3_color;
Function SubgroupSwapHorizontal_UInt16x3;
Variable SubgroupSwapHorizontal_UInt16x4_color;
Function SubgroupSwapHorizontal_UInt16x4;
Variable AtomicLoad_UInt32_ptr;
Variable AtomicLoad_UInt32_semantics;
Function AtomicLoad_UInt32;
Variable AtomicIncrement_UInt32_ptr;
Variable AtomicIncrement_UInt32_semantics;
Function AtomicIncrement_UInt32;
Variable AtomicDecrement_UInt32_ptr;
Variable AtomicDecrement_UInt32_semantics;
Function AtomicDecrement_UInt32;
Variable AtomicLoad_Int32_ptr;
Variable AtomicLoad_Int32_semantics;
Function AtomicLoad_Int32;
Variable AtomicIncrement_Int32_ptr;
Variable AtomicIncrement_Int32_semantics;
Function AtomicIncrement_Int32;
Variable AtomicDecrement_Int32_ptr;
Variable AtomicDecrement_Int32_semantics;
Function AtomicDecrement_Int32;
Variable AtomicLoad_UInt16_ptr;
Variable AtomicLoad_UInt16_semantics;
Function AtomicLoad_UInt16;
Variable AtomicIncrement_UInt16_ptr;
Variable AtomicIncrement_UInt16_semantics;
Function AtomicIncrement_UInt16;
Variable AtomicDecrement_UInt16_ptr;
Variable AtomicDecrement_UInt16_semantics;
Function AtomicDecrement_UInt16;
Variable AtomicLoad_Int16_ptr;
Variable AtomicLoad_Int16_semantics;
Function AtomicLoad_Int16;
Variable AtomicIncrement_Int16_ptr;
Variable AtomicIncrement_Int16_semantics;
Function AtomicIncrement_Int16;
Variable AtomicDecrement_Int16_ptr;
Variable AtomicDecrement_Int16_semantics;
Function AtomicDecrement_Int16;
Variable AtomicExchange_UInt32_ptr;
Variable AtomicExchange_UInt32_value;
Variable AtomicExchange_UInt32_semantics;
Function AtomicExchange_UInt32;
Variable AtomicAdd_UInt32_ptr;
Variable AtomicAdd_UInt32_value;
Variable AtomicAdd_UInt32_semantics;
Function AtomicAdd_UInt32;
Variable AtomicSubtract_UInt32_ptr;
Variable AtomicSubtract_UInt32_value;
Variable AtomicSubtract_UInt32_semantics;
Function AtomicSubtract_UInt32;
Variable AtomicAnd_UInt32_ptr;
Variable AtomicAnd_UInt32_value;
Variable AtomicAnd_UInt32_semantics;
Function AtomicAnd_UInt32;
Variable AtomicOr_UInt32_ptr;
Variable AtomicOr_UInt32_value;
Variable AtomicOr_UInt32_semantics;
Function AtomicOr_UInt32;
Variable AtomicXor_UInt32_ptr;
Variable AtomicXor_UInt32_value;
Variable AtomicXor_UInt32_semantics;
Function AtomicXor_UInt32;
Variable AtomicExchange_Int32_ptr;
Variable AtomicExchange_Int32_value;
Variable AtomicExchange_Int32_semantics;
Function AtomicExchange_Int32;
Variable AtomicAdd_Int32_ptr;
Variable AtomicAdd_Int32_value;
Variable AtomicAdd_Int32_semantics;
Function AtomicAdd_Int32;
Variable AtomicSubtract_Int32_ptr;
Variable AtomicSubtract_Int32_value;
Variable AtomicSubtract_Int32_semantics;
Function AtomicSubtract_Int32;
Variable AtomicAnd_Int32_ptr;
Variable AtomicAnd_Int32_value;
Variable AtomicAnd_Int32_semantics;
Function AtomicAnd_Int32;
Variable AtomicOr_Int32_ptr;
Variable AtomicOr_Int32_value;
Variable AtomicOr_Int32_semantics;
Function AtomicOr_Int32;
Variable AtomicXor_Int32_ptr;
Variable AtomicXor_Int32_value;
Variable AtomicXor_Int32_semantics;
Function AtomicXor_Int32;
Variable AtomicExchange_UInt16_ptr;
Variable AtomicExchange_UInt16_value;
Variable AtomicExchange_UInt16_semantics;
Function AtomicExchange_UInt16;
Variable AtomicAdd_UInt16_ptr;
Variable AtomicAdd_UInt16_value;
Variable AtomicAdd_UInt16_semantics;
Function AtomicAdd_UInt16;
Variable AtomicSubtract_UInt16_ptr;
Variable AtomicSubtract_UInt16_value;
Variable AtomicSubtract_UInt16_semantics;
Function AtomicSubtract_UInt16;
Variable AtomicAnd_UInt16_ptr;
Variable AtomicAnd_UInt16_value;
Variable AtomicAnd_UInt16_semantics;
Function AtomicAnd_UInt16;
Variable AtomicOr_UInt16_ptr;
Variable AtomicOr_UInt16_value;
Variable AtomicOr_UInt16_semantics;
Function AtomicOr_UInt16;
Variable AtomicXor_UInt16_ptr;
Variable AtomicXor_UInt16_value;
Variable AtomicXor_UInt16_semantics;
Function AtomicXor_UInt16;
Variable AtomicExchange_Int16_ptr;
Variable AtomicExchange_Int16_value;
Variable AtomicExchange_Int16_semantics;
Function AtomicExchange_Int16;
Variable AtomicAdd_Int16_ptr;
Variable AtomicAdd_Int16_value;
Variable AtomicAdd_Int16_semantics;
Function AtomicAdd_Int16;
Variable AtomicSubtract_Int16_ptr;
Variable AtomicSubtract_Int16_value;
Variable AtomicSubtract_Int16_semantics;
Function AtomicSubtract_Int16;
Variable AtomicAnd_Int16_ptr;
Variable AtomicAnd_Int16_value;
Variable AtomicAnd_Int16_semantics;
Function AtomicAnd_Int16;
Variable AtomicOr_Int16_ptr;
Variable AtomicOr_Int16_value;
Variable AtomicOr_Int16_semantics;
Function AtomicOr_Int16;
Variable AtomicXor_Int16_ptr;
Variable AtomicXor_Int16_value;
Variable AtomicXor_Int16_semantics;
Function AtomicXor_Int16;
Variable AtomicCompareExchange_UInt32_ptr;
Variable AtomicCompareExchange_UInt32_value;
Variable AtomicCompareExchange_UInt32_compare;
Variable AtomicCompareExchange_UInt32_semantics;
Function AtomicCompareExchange_UInt32;
Variable AtomicCompareExchange_Int32_ptr;
Variable AtomicCompareExchange_Int32_value;
Variable AtomicCompareExchange_Int32_compare;
Variable AtomicCompareExchange_Int32_semantics;
Function AtomicCompareExchange_Int32;
Variable AtomicCompareExchange_UInt16_ptr;
Variable AtomicCompareExchange_UInt16_value;
Variable AtomicCompareExchange_UInt16_compare;
Variable AtomicCompareExchange_UInt16_semantics;
Function AtomicCompareExchange_UInt16;
Variable AtomicCompareExchange_Int16_ptr;
Variable AtomicCompareExchange_Int16_value;
Variable AtomicCompareExchange_Int16_compare;
Variable AtomicCompareExchange_Int16_semantics;
Function AtomicCompareExchange_Int16;
Variable BitInsert_UInt16_base;
Variable BitInsert_UInt16_value;
Variable BitInsert_UInt16_offset;
Variable BitInsert_UInt16_count;
Function BitInsert_UInt16;
Variable BitInsert_UInt32_base;
Variable BitInsert_UInt32_value;
Variable BitInsert_UInt32_offset;
Variable BitInsert_UInt32_count;
Function BitInsert_UInt32;
Variable BitExtract_Int32_base;
Variable BitExtract_Int32_offset;
Variable BitExtract_Int32_count;
Function BitExtract_Int32;
Variable BitExtract_Int32x2_base;
Variable BitExtract_Int32x2_offset;
Variable BitExtract_Int32x2_count;
Function BitExtract_Int32x2;
Variable BitExtract_Int32x3_base;
Variable BitExtract_Int32x3_offset;
Variable BitExtract_Int32x3_count;
Function BitExtract_Int32x3;
Variable BitExtract_Int32x4_base;
Variable BitExtract_Int32x4_offset;
Variable BitExtract_Int32x4_count;
Function BitExtract_Int32x4;
Variable BitExtract_Int16_base;
Variable BitExtract_Int16_offset;
Variable BitExtract_Int16_count;
Function BitExtract_Int16;
Variable BitExtract_Int16x2_base;
Variable BitExtract_Int16x2_offset;
Variable BitExtract_Int16x2_count;
Function BitExtract_Int16x2;
Variable BitExtract_Int16x3_base;
Variable BitExtract_Int16x3_offset;
Variable BitExtract_Int16x3_count;
Function BitExtract_Int16x3;
Variable BitExtract_Int16x4_base;
Variable BitExtract_Int16x4_offset;
Variable BitExtract_Int16x4_count;
Function BitExtract_Int16x4;
Variable BitExtract_UInt32_base;
Variable BitExtract_UInt32_offset;
Variable BitExtract_UInt32_count;
Function BitExtract_UInt32;
Variable BitExtract_UInt32x2_base;
Variable BitExtract_UInt32x2_offset;
Variable BitExtract_UInt32x2_count;
Function BitExtract_UInt32x2;
Variable BitExtract_UInt32x3_base;
Variable BitExtract_UInt32x3_offset;
Variable BitExtract_UInt32x3_count;
Function BitExtract_UInt32x3;
Variable BitExtract_UInt32x4_base;
Variable BitExtract_UInt32x4_offset;
Variable BitExtract_UInt32x4_count;
Function BitExtract_UInt32x4;
Variable BitExtract_UInt16_base;
Variable BitExtract_UInt16_offset;
Variable BitExtract_UInt16_count;
Function BitExtract_UInt16;
Variable BitExtract_UInt16x2_base;
Variable BitExtract_UInt16x2_offset;
Variable BitExtract_UInt16x2_count;
Function BitExtract_UInt16x2;
Variable BitExtract_UInt16x3_base;
Variable BitExtract_UInt16x3_offset;
Variable BitExtract_UInt16x3_count;
Function BitExtract_UInt16x3;
Variable BitExtract_UInt16x4_base;
Variable BitExtract_UInt16x4_offset;
Variable BitExtract_UInt16x4_count;
Function BitExtract_UInt16x4;
Variable BitReverse_Int32_base;
Function BitReverse_Int32;
Variable BitReverse_Int32x2_base;
Function BitReverse_Int32x2;
Variable BitReverse_Int32x3_base;
Function BitReverse_Int32x3;
Variable BitReverse_Int32x4_base;
Function BitReverse_Int32x4;
Variable BitReverse_Int16_base;
Function BitReverse_Int16;
Variable BitReverse_Int16x2_base;
Function BitReverse_Int16x2;
Variable BitReverse_Int16x3_base;
Function BitReverse_Int16x3;
Variable BitReverse_Int16x4_base;
Function BitReverse_Int16x4;
Variable BitReverse_UInt32_base;
Function BitReverse_UInt32;
Variable BitReverse_UInt32x2_base;
Function BitReverse_UInt32x2;
Variable BitReverse_UInt32x3_base;
Function BitReverse_UInt32x3;
Variable BitReverse_UInt32x4_base;
Function BitReverse_UInt32x4;
Variable BitReverse_UInt16_base;
Function BitReverse_UInt16;
Variable BitReverse_UInt16x2_base;
Function BitReverse_UInt16x2;
Variable BitReverse_UInt16x3_base;
Function BitReverse_UInt16x3;
Variable BitReverse_UInt16x4_base;
Function BitReverse_UInt16x4;
Variable BitCount_Int32_base;
Function BitCount_Int32;
Variable BitCount_Int32x2_base;
Function BitCount_Int32x2;
Variable BitCount_Int32x3_base;
Function BitCount_Int32x3;
Variable BitCount_Int32x4_base;
Function BitCount_Int32x4;
Variable BitCount_Int16_base;
Function BitCount_Int16;
Variable BitCount_Int16x2_base;
Function BitCount_Int16x2;
Variable BitCount_Int16x3_base;
Function BitCount_Int16x3;
Variable BitCount_Int16x4_base;
Function BitCount_Int16x4;
Variable BitCount_UInt32_base;
Function BitCount_UInt32;
Variable BitCount_UInt32x2_base;
Function BitCount_UInt32x2;
Variable BitCount_UInt32x3_base;
Function BitCount_UInt32x3;
Variable BitCount_UInt32x4_base;
Function BitCount_UInt32x4;
Variable BitCount_UInt16_base;
Function BitCount_UInt16;
Variable BitCount_UInt16x2_base;
Function BitCount_UInt16x2;
Variable BitCount_UInt16x3_base;
Function BitCount_UInt16x3;
Variable BitCount_UInt16x4_base;
Function BitCount_UInt16x4;
Function ExecutionBarrier;
Function ExecutionBarrierSubgroup;
Function ExecutionBarrierWorkgroup;
Function MemoryBarrier;
Function MemoryBarrierBuffer;
Function MemoryBarrierTexture;
Function MemoryBarrierAtomic;
Function MemoryBarrierSubgroup;
Function MemoryBarrierWorkgroup;
Variable TextureGetSize_Texture1D_texture;
Function TextureGetSize_Texture1D;
Variable TextureGetSize_Texture2D_texture;
Function TextureGetSize_Texture2D;
Variable TextureGetSize_Texture3D_texture;
Function TextureGetSize_Texture3D;
Variable TextureGetSize_TextureCube_texture;
Function TextureGetSize_TextureCube;
Variable TextureGetSize_Texture1DArray_texture;
Function TextureGetSize_Texture1DArray;
Variable TextureGetSize_Texture2DArray_texture;
Function TextureGetSize_Texture2DArray;
Variable TextureGetSize_TextureCubeArray_texture;
Function TextureGetSize_TextureCubeArray;
Variable TextureGetSizeMip_Texture1D_texture;
Variable TextureGetSizeMip_Texture1D_UInt32_mip;
Function TextureGetSizeMip_Texture1D;
Variable TextureGetSizeMip_Texture2D_texture;
Variable TextureGetSizeMip_Texture2D_UInt32_mip;
Function TextureGetSizeMip_Texture2D;
Variable TextureGetSizeMip_Texture3D_texture;
Variable TextureGetSizeMip_Texture3D_UInt32_mip;
Function TextureGetSizeMip_Texture3D;
Variable TextureGetSizeMip_TextureCube_texture;
Variable TextureGetSizeMip_TextureCube_UInt32_mip;
Function TextureGetSizeMip_TextureCube;
Variable TextureGetSizeMip_Texture1DArray_texture;
Variable TextureGetSizeMip_Texture1DArray_UInt32_mip;
Function TextureGetSizeMip_Texture1DArray;
Variable TextureGetSizeMip_Texture2DArray_texture;
Variable TextureGetSizeMip_Texture2DArray_UInt32_mip;
Function TextureGetSizeMip_Texture2DArray;
Variable TextureGetSizeMip_TextureCubeArray_texture;
Variable TextureGetSizeMip_TextureCubeArray_UInt32_mip;
Function TextureGetSizeMip_TextureCubeArray;
Variable TextureGetMips_Texture1D_texture;
Function TextureGetMips_Texture1D;
Variable TextureGetMips_Texture2D_texture;
Function TextureGetMips_Texture2D;
Variable TextureGetMips_Texture3D_texture;
Function TextureGetMips_Texture3D;
Variable TextureGetMips_TextureCube_texture;
Function TextureGetMips_TextureCube;
Variable TextureGetMips_Texture1DArray_texture;
Function TextureGetMips_Texture1DArray;
Variable TextureGetMips_Texture2DArray_texture;
Function TextureGetMips_Texture2DArray;
Variable TextureGetMips_TextureCubeArray_texture;
Function TextureGetMips_TextureCubeArray;
Variable TextureGetSamples_Texture2DMS_texture;
Function TextureGetSamples_Texture2DMS;
Variable TextureGetSamples_Texture2DMSArray_texture;
Function TextureGetSamples_Texture2DMSArray;
Variable TextureGetSampledMip_Texture1D_texture;
Variable TextureGetSampledMip_Texture1D_sampler;
Variable TextureGetSampledMip_Texture1D_coordinate;
Function TextureGetSampledMip_Texture1D;
Variable SampledTextureGetSampledMip_Texture1D_texture;
Variable SampledTextureGetSampledMip_Texture1D_coordinate;
Function SampledTextureGetSampledMip_Texture1D;
Variable TextureGetSampledMip_Texture2D_texture;
Variable TextureGetSampledMip_Texture2D_sampler;
Variable TextureGetSampledMip_Texture2D_coordinate;
Function TextureGetSampledMip_Texture2D;
Variable SampledTextureGetSampledMip_Texture2D_texture;
Variable SampledTextureGetSampledMip_Texture2D_coordinate;
Function SampledTextureGetSampledMip_Texture2D;
Variable TextureGetSampledMip_Texture3D_texture;
Variable TextureGetSampledMip_Texture3D_sampler;
Variable TextureGetSampledMip_Texture3D_coordinate;
Function TextureGetSampledMip_Texture3D;
Variable SampledTextureGetSampledMip_Texture3D_texture;
Variable SampledTextureGetSampledMip_Texture3D_coordinate;
Function SampledTextureGetSampledMip_Texture3D;
Variable TextureGetSampledMip_TextureCube_texture;
Variable TextureGetSampledMip_TextureCube_sampler;
Variable TextureGetSampledMip_TextureCube_coordinate;
Function TextureGetSampledMip_TextureCube;
Variable SampledTextureGetSampledMip_TextureCube_texture;
Variable SampledTextureGetSampledMip_TextureCube_coordinate;
Function SampledTextureGetSampledMip_TextureCube;
Variable TextureGetSampledMip_Texture1DArray_texture;
Variable TextureGetSampledMip_Texture1DArray_sampler;
Variable TextureGetSampledMip_Texture1DArray_coordinate;
Function TextureGetSampledMip_Texture1DArray;
Variable SampledTextureGetSampledMip_Texture1DArray_texture;
Variable SampledTextureGetSampledMip_Texture1DArray_coordinate;
Function SampledTextureGetSampledMip_Texture1DArray;
Variable TextureGetSampledMip_Texture2DArray_texture;
Variable TextureGetSampledMip_Texture2DArray_sampler;
Variable TextureGetSampledMip_Texture2DArray_coordinate;
Function TextureGetSampledMip_Texture2DArray;
Variable SampledTextureGetSampledMip_Texture2DArray_texture;
Variable SampledTextureGetSampledMip_Texture2DArray_coordinate;
Function SampledTextureGetSampledMip_Texture2DArray;
Variable TextureGetSampledMip_TextureCubeArray_texture;
Variable TextureGetSampledMip_TextureCubeArray_sampler;
Variable TextureGetSampledMip_TextureCubeArray_coordinate;
Function TextureGetSampledMip_TextureCubeArray;
Variable SampledTextureGetSampledMip_TextureCubeArray_texture;
Variable SampledTextureGetSampledMip_TextureCubeArray_coordinate;
Function SampledTextureGetSampledMip_TextureCubeArray;
Variable TextureLoad_Texture1D_texture;
Variable TextureLoad_Texture1D_coordinate;
Function TextureLoad_Texture1D;
Variable TextureLoadMip_Texture1D_texture;
Variable TextureLoadMip_Texture1D_coordinate;
Variable TextureLoadMip_Texture1D_mip;
Function TextureLoadMip_Texture1D;
Variable TextureStore_Texture1D_texture;
Variable TextureStore_Texture1D_coordinate;
Variable TextureStore_Texture1D_value;
Function TextureStore_Texture1D;
Variable TextureStoreMip_Texture1D_texture;
Variable TextureStoreMip_Texture1D_coordinate;
Variable TextureStoreMip_Texture1D_mip;
Variable TextureStoreMip_Texture1D_value;
Function TextureStoreMip_Texture1D;
Variable TextureLoad_Texture2D_texture;
Variable TextureLoad_Texture2D_coordinate;
Function TextureLoad_Texture2D;
Variable TextureLoadMip_Texture2D_texture;
Variable TextureLoadMip_Texture2D_coordinate;
Variable TextureLoadMip_Texture2D_mip;
Function TextureLoadMip_Texture2D;
Variable TextureStore_Texture2D_texture;
Variable TextureStore_Texture2D_coordinate;
Variable TextureStore_Texture2D_value;
Function TextureStore_Texture2D;
Variable TextureStoreMip_Texture2D_texture;
Variable TextureStoreMip_Texture2D_coordinate;
Variable TextureStoreMip_Texture2D_mip;
Variable TextureStoreMip_Texture2D_value;
Function TextureStoreMip_Texture2D;
Variable TextureLoad_Texture3D_texture;
Variable TextureLoad_Texture3D_coordinate;
Function TextureLoad_Texture3D;
Variable TextureLoadMip_Texture3D_texture;
Variable TextureLoadMip_Texture3D_coordinate;
Variable TextureLoadMip_Texture3D_mip;
Function TextureLoadMip_Texture3D;
Variable TextureStore_Texture3D_texture;
Variable TextureStore_Texture3D_coordinate;
Variable TextureStore_Texture3D_value;
Function TextureStore_Texture3D;
Variable TextureStoreMip_Texture3D_texture;
Variable TextureStoreMip_Texture3D_coordinate;
Variable TextureStoreMip_Texture3D_mip;
Variable TextureStoreMip_Texture3D_value;
Function TextureStoreMip_Texture3D;
Variable TextureLoad_TextureCube_texture;
Variable TextureLoad_TextureCube_coordinate;
Function TextureLoad_TextureCube;
Variable TextureLoadMip_TextureCube_texture;
Variable TextureLoadMip_TextureCube_coordinate;
Variable TextureLoadMip_TextureCube_mip;
Function TextureLoadMip_TextureCube;
Variable TextureStore_TextureCube_texture;
Variable TextureStore_TextureCube_coordinate;
Variable TextureStore_TextureCube_value;
Function TextureStore_TextureCube;
Variable TextureStoreMip_TextureCube_texture;
Variable TextureStoreMip_TextureCube_coordinate;
Variable TextureStoreMip_TextureCube_mip;
Variable TextureStoreMip_TextureCube_value;
Function TextureStoreMip_TextureCube;
Variable TextureLoad_Texture1DArray_texture;
Variable TextureLoad_Texture1DArray_coordinate;
Function TextureLoad_Texture1DArray;
Variable TextureLoadMip_Texture1DArray_texture;
Variable TextureLoadMip_Texture1DArray_coordinate;
Variable TextureLoadMip_Texture1DArray_mip;
Function TextureLoadMip_Texture1DArray;
Variable TextureStore_Texture1DArray_texture;
Variable TextureStore_Texture1DArray_coordinate;
Variable TextureStore_Texture1DArray_value;
Function TextureStore_Texture1DArray;
Variable TextureStoreMip_Texture1DArray_texture;
Variable TextureStoreMip_Texture1DArray_coordinate;
Variable TextureStoreMip_Texture1DArray_mip;
Variable TextureStoreMip_Texture1DArray_value;
Function TextureStoreMip_Texture1DArray;
Variable TextureLoad_Texture2DArray_texture;
Variable TextureLoad_Texture2DArray_coordinate;
Function TextureLoad_Texture2DArray;
Variable TextureLoadMip_Texture2DArray_texture;
Variable TextureLoadMip_Texture2DArray_coordinate;
Variable TextureLoadMip_Texture2DArray_mip;
Function TextureLoadMip_Texture2DArray;
Variable TextureStore_Texture2DArray_texture;
Variable TextureStore_Texture2DArray_coordinate;
Variable TextureStore_Texture2DArray_value;
Function TextureStore_Texture2DArray;
Variable TextureStoreMip_Texture2DArray_texture;
Variable TextureStoreMip_Texture2DArray_coordinate;
Variable TextureStoreMip_Texture2DArray_mip;
Variable TextureStoreMip_Texture2DArray_value;
Function TextureStoreMip_Texture2DArray;
Variable TextureLoad_TextureCubeArray_texture;
Variable TextureLoad_TextureCubeArray_coordinate;
Function TextureLoad_TextureCubeArray;
Variable TextureLoadMip_TextureCubeArray_texture;
Variable TextureLoadMip_TextureCubeArray_coordinate;
Variable TextureLoadMip_TextureCubeArray_mip;
Function TextureLoadMip_TextureCubeArray;
Variable TextureStore_TextureCubeArray_texture;
Variable TextureStore_TextureCubeArray_coordinate;
Variable TextureStore_TextureCubeArray_value;
Function TextureStore_TextureCubeArray;
Variable TextureStoreMip_TextureCubeArray_texture;
Variable TextureStoreMip_TextureCubeArray_coordinate;
Variable TextureStoreMip_TextureCubeArray_mip;
Variable TextureStoreMip_TextureCubeArray_value;
Function TextureStoreMip_TextureCubeArray;
Variable TextureLoad_Texture2DMS_texture;
Variable TextureLoad_Texture2DMS_coordinate;
Function TextureLoad_Texture2DMS;
Variable TextureLoadMip_Texture2DMS_texture;
Variable TextureLoadMip_Texture2DMS_coordinate;
Variable TextureLoadMip_Texture2DMS_mip;
Function TextureLoadMip_Texture2DMS;
Variable TextureStore_Texture2DMS_texture;
Variable TextureStore_Texture2DMS_coordinate;
Variable TextureStore_Texture2DMS_value;
Function TextureStore_Texture2DMS;
Variable TextureStoreMip_Texture2DMS_texture;
Variable TextureStoreMip_Texture2DMS_coordinate;
Variable TextureStoreMip_Texture2DMS_mip;
Variable TextureStoreMip_Texture2DMS_value;
Function TextureStoreMip_Texture2DMS;
Variable TextureLoad_Texture2DMSArray_texture;
Variable TextureLoad_Texture2DMSArray_coordinate;
Function TextureLoad_Texture2DMSArray;
Variable TextureLoadMip_Texture2DMSArray_texture;
Variable TextureLoadMip_Texture2DMSArray_coordinate;
Variable TextureLoadMip_Texture2DMSArray_mip;
Function TextureLoadMip_Texture2DMSArray;
Variable TextureStore_Texture2DMSArray_texture;
Variable TextureStore_Texture2DMSArray_coordinate;
Variable TextureStore_Texture2DMSArray_value;
Function TextureStore_Texture2DMSArray;
Variable TextureStoreMip_Texture2DMSArray_texture;
Variable TextureStoreMip_Texture2DMSArray_coordinate;
Variable TextureStoreMip_Texture2DMSArray_mip;
Variable TextureStoreMip_Texture2DMSArray_value;
Function TextureStoreMip_Texture2DMSArray;
Variable TexturePixelCacheLoad_PixelCache_texture;
Function TexturePixelCacheLoad_PixelCache;
Variable TexturePixelCacheLoad_PixelCacheMS_texture;
Function TexturePixelCacheLoad_PixelCacheMS;
Variable TextureSample_Texture1D_texture;
Variable TextureSample_Texture1D_sampler;
Variable TextureSample_Texture1D_coordinate;
Function TextureSample_Texture1D;
Variable SampledTextureSample_Texture1D_texture;
Variable SampledTextureSample_Texture1D_coordinate;
Function SampledTextureSample_Texture1D;
Variable TextureSample_Texture2D_texture;
Variable TextureSample_Texture2D_sampler;
Variable TextureSample_Texture2D_coordinate;
Function TextureSample_Texture2D;
Variable SampledTextureSample_Texture2D_texture;
Variable SampledTextureSample_Texture2D_coordinate;
Function SampledTextureSample_Texture2D;
Variable TextureSample_Texture3D_texture;
Variable TextureSample_Texture3D_sampler;
Variable TextureSample_Texture3D_coordinate;
Function TextureSample_Texture3D;
Variable SampledTextureSample_Texture3D_texture;
Variable SampledTextureSample_Texture3D_coordinate;
Function SampledTextureSample_Texture3D;
Variable TextureSample_TextureCube_texture;
Variable TextureSample_TextureCube_sampler;
Variable TextureSample_TextureCube_coordinate;
Function TextureSample_TextureCube;
Variable SampledTextureSample_TextureCube_texture;
Variable SampledTextureSample_TextureCube_coordinate;
Function SampledTextureSample_TextureCube;
Variable TextureSample_Texture1DArray_texture;
Variable TextureSample_Texture1DArray_sampler;
Variable TextureSample_Texture1DArray_coordinate;
Function TextureSample_Texture1DArray;
Variable SampledTextureSample_Texture1DArray_texture;
Variable SampledTextureSample_Texture1DArray_coordinate;
Function SampledTextureSample_Texture1DArray;
Variable TextureSample_Texture2DArray_texture;
Variable TextureSample_Texture2DArray_sampler;
Variable TextureSample_Texture2DArray_coordinate;
Function TextureSample_Texture2DArray;
Variable SampledTextureSample_Texture2DArray_texture;
Variable SampledTextureSample_Texture2DArray_coordinate;
Function SampledTextureSample_Texture2DArray;
Variable TextureSample_TextureCubeArray_texture;
Variable TextureSample_TextureCubeArray_sampler;
Variable TextureSample_TextureCubeArray_coordinate;
Function TextureSample_TextureCubeArray;
Variable SampledTextureSample_TextureCubeArray_texture;
Variable SampledTextureSample_TextureCubeArray_coordinate;
Function SampledTextureSample_TextureCubeArray;
Variable TextureSampleProj_Texture1D_texture;
Variable TextureSampleProj_Texture1D_sampler;
Variable TextureSampleProj_Texture1D_coordinate;
Variable TextureSampleProj_Texture1D_proj;
Function TextureSampleProj_Texture1D;
Variable SampledTextureSampleProj_Texture1D_texture;
Variable SampledTextureSampleProj_Texture1D_coordinate;
Variable SampledTextureSampleProj_Texture1D_proj;
Function SampledTextureSampleProj_Texture1D;
Variable TextureSampleProj_Texture2D_texture;
Variable TextureSampleProj_Texture2D_sampler;
Variable TextureSampleProj_Texture2D_coordinate;
Variable TextureSampleProj_Texture2D_proj;
Function TextureSampleProj_Texture2D;
Variable SampledTextureSampleProj_Texture2D_texture;
Variable SampledTextureSampleProj_Texture2D_coordinate;
Variable SampledTextureSampleProj_Texture2D_proj;
Function SampledTextureSampleProj_Texture2D;
Variable TextureSampleProj_Texture3D_texture;
Variable TextureSampleProj_Texture3D_sampler;
Variable TextureSampleProj_Texture3D_coordinate;
Variable TextureSampleProj_Texture3D_proj;
Function TextureSampleProj_Texture3D;
Variable SampledTextureSampleProj_Texture3D_texture;
Variable SampledTextureSampleProj_Texture3D_coordinate;
Variable SampledTextureSampleProj_Texture3D_proj;
Function SampledTextureSampleProj_Texture3D;
Variable TextureSampleCompare_Texture1D_texture;
Variable TextureSampleCompare_Texture1D_sampler;
Variable TextureSampleCompare_Texture1D_coordinate;
Variable TextureSampleCompare_Texture1D_compare;
Function TextureSampleCompare_Texture1D;
Variable SampledTextureSampleCompare_Texture1D_texture;
Variable SampledTextureSampleCompare_Texture1D_coordinate;
Variable SampledTextureSampleCompare_Texture1D_compare;
Function SampledTextureSampleCompare_Texture1D;
Variable TextureSampleCompare_Texture2D_texture;
Variable TextureSampleCompare_Texture2D_sampler;
Variable TextureSampleCompare_Texture2D_coordinate;
Variable TextureSampleCompare_Texture2D_compare;
Function TextureSampleCompare_Texture2D;
Variable SampledTextureSampleCompare_Texture2D_texture;
Variable SampledTextureSampleCompare_Texture2D_coordinate;
Variable SampledTextureSampleCompare_Texture2D_compare;
Function SampledTextureSampleCompare_Texture2D;
Variable TextureSampleCompare_Texture3D_texture;
Variable TextureSampleCompare_Texture3D_sampler;
Variable TextureSampleCompare_Texture3D_coordinate;
Variable TextureSampleCompare_Texture3D_compare;
Function TextureSampleCompare_Texture3D;
Variable SampledTextureSampleCompare_Texture3D_texture;
Variable SampledTextureSampleCompare_Texture3D_coordinate;
Variable SampledTextureSampleCompare_Texture3D_compare;
Function SampledTextureSampleCompare_Texture3D;
Variable TextureSampleCompare_Texture1DArray_texture;
Variable TextureSampleCompare_Texture1DArray_sampler;
Variable TextureSampleCompare_Texture1DArray_coordinate;
Variable TextureSampleCompare_Texture1DArray_compare;
Function TextureSampleCompare_Texture1DArray;
Variable SampledTextureSampleCompare_Texture1DArray_texture;
Variable SampledTextureSampleCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleCompare_Texture1DArray_compare;
Function SampledTextureSampleCompare_Texture1DArray;
Variable TextureSampleCompare_Texture2DArray_texture;
Variable TextureSampleCompare_Texture2DArray_sampler;
Variable TextureSampleCompare_Texture2DArray_coordinate;
Variable TextureSampleCompare_Texture2DArray_compare;
Function TextureSampleCompare_Texture2DArray;
Variable SampledTextureSampleCompare_Texture2DArray_texture;
Variable SampledTextureSampleCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleCompare_Texture2DArray_compare;
Function SampledTextureSampleCompare_Texture2DArray;
Variable TextureSampleProjCompare_Texture1D_texture;
Variable TextureSampleProjCompare_Texture1D_sampler;
Variable TextureSampleProjCompare_Texture1D_coordinate;
Variable TextureSampleProjCompare_Texture1D_proj;
Variable TextureSampleProjCompare_Texture1D_compare;
Function TextureSampleProjCompare_Texture1D;
Variable SampledTextureSampleProjCompare_Texture1D_texture;
Variable SampledTextureSampleProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleProjCompare_Texture1D_proj;
Variable SampledTextureSampleProjCompare_Texture1D_compare;
Function SampledTextureSampleProjCompare_Texture1D;
Variable TextureSampleProjCompare_Texture2D_texture;
Variable TextureSampleProjCompare_Texture2D_sampler;
Variable TextureSampleProjCompare_Texture2D_coordinate;
Variable TextureSampleProjCompare_Texture2D_proj;
Variable TextureSampleProjCompare_Texture2D_compare;
Function TextureSampleProjCompare_Texture2D;
Variable SampledTextureSampleProjCompare_Texture2D_texture;
Variable SampledTextureSampleProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleProjCompare_Texture2D_proj;
Variable SampledTextureSampleProjCompare_Texture2D_compare;
Function SampledTextureSampleProjCompare_Texture2D;
Variable TextureSampleProjCompare_Texture3D_texture;
Variable TextureSampleProjCompare_Texture3D_sampler;
Variable TextureSampleProjCompare_Texture3D_coordinate;
Variable TextureSampleProjCompare_Texture3D_proj;
Variable TextureSampleProjCompare_Texture3D_compare;
Function TextureSampleProjCompare_Texture3D;
Variable SampledTextureSampleProjCompare_Texture3D_texture;
Variable SampledTextureSampleProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleProjCompare_Texture3D_proj;
Variable SampledTextureSampleProjCompare_Texture3D_compare;
Function SampledTextureSampleProjCompare_Texture3D;
Variable TextureSampleLod_Texture1D_texture;
Variable TextureSampleLod_Texture1D_sampler;
Variable TextureSampleLod_Texture1D_coordinate;
Variable TextureSampleLod_Texture1D_lod;
Function TextureSampleLod_Texture1D;
Variable SampledTextureSampleLod_Texture1D_texture;
Variable SampledTextureSampleLod_Texture1D_coordinate;
Variable SampledTextureSampleLod_Texture1D_lod;
Function SampledTextureSampleLod_Texture1D;
Variable TextureSampleLod_Texture2D_texture;
Variable TextureSampleLod_Texture2D_sampler;
Variable TextureSampleLod_Texture2D_coordinate;
Variable TextureSampleLod_Texture2D_lod;
Function TextureSampleLod_Texture2D;
Variable SampledTextureSampleLod_Texture2D_texture;
Variable SampledTextureSampleLod_Texture2D_coordinate;
Variable SampledTextureSampleLod_Texture2D_lod;
Function SampledTextureSampleLod_Texture2D;
Variable TextureSampleLod_Texture3D_texture;
Variable TextureSampleLod_Texture3D_sampler;
Variable TextureSampleLod_Texture3D_coordinate;
Variable TextureSampleLod_Texture3D_lod;
Function TextureSampleLod_Texture3D;
Variable SampledTextureSampleLod_Texture3D_texture;
Variable SampledTextureSampleLod_Texture3D_coordinate;
Variable SampledTextureSampleLod_Texture3D_lod;
Function SampledTextureSampleLod_Texture3D;
Variable TextureSampleLod_TextureCube_texture;
Variable TextureSampleLod_TextureCube_sampler;
Variable TextureSampleLod_TextureCube_coordinate;
Variable TextureSampleLod_TextureCube_lod;
Function TextureSampleLod_TextureCube;
Variable SampledTextureSampleLod_TextureCube_texture;
Variable SampledTextureSampleLod_TextureCube_coordinate;
Variable SampledTextureSampleLod_TextureCube_lod;
Function SampledTextureSampleLod_TextureCube;
Variable TextureSampleLod_Texture1DArray_texture;
Variable TextureSampleLod_Texture1DArray_sampler;
Variable TextureSampleLod_Texture1DArray_coordinate;
Variable TextureSampleLod_Texture1DArray_lod;
Function TextureSampleLod_Texture1DArray;
Variable SampledTextureSampleLod_Texture1DArray_texture;
Variable SampledTextureSampleLod_Texture1DArray_coordinate;
Variable SampledTextureSampleLod_Texture1DArray_lod;
Function SampledTextureSampleLod_Texture1DArray;
Variable TextureSampleLod_Texture2DArray_texture;
Variable TextureSampleLod_Texture2DArray_sampler;
Variable TextureSampleLod_Texture2DArray_coordinate;
Variable TextureSampleLod_Texture2DArray_lod;
Function TextureSampleLod_Texture2DArray;
Variable SampledTextureSampleLod_Texture2DArray_texture;
Variable SampledTextureSampleLod_Texture2DArray_coordinate;
Variable SampledTextureSampleLod_Texture2DArray_lod;
Function SampledTextureSampleLod_Texture2DArray;
Variable TextureSampleLod_TextureCubeArray_texture;
Variable TextureSampleLod_TextureCubeArray_sampler;
Variable TextureSampleLod_TextureCubeArray_coordinate;
Variable TextureSampleLod_TextureCubeArray_lod;
Function TextureSampleLod_TextureCubeArray;
Variable SampledTextureSampleLod_TextureCubeArray_texture;
Variable SampledTextureSampleLod_TextureCubeArray_coordinate;
Variable SampledTextureSampleLod_TextureCubeArray_lod;
Function SampledTextureSampleLod_TextureCubeArray;
Variable TextureSampleLodProj_Texture1D_texture;
Variable TextureSampleLodProj_Texture1D_sampler;
Variable TextureSampleLodProj_Texture1D_coordinate;
Variable TextureSampleLodProj_Texture1D_lod;
Variable TextureSampleLodProj_Texture1D_proj;
Function TextureSampleLodProj_Texture1D;
Variable SampledTextureSampleLodProj_Texture1D_texture;
Variable SampledTextureSampleLodProj_Texture1D_coordinate;
Variable SampledTextureSampleLodProj_Texture1D_lod;
Variable SampledTextureSampleLodProj_Texture1D_proj;
Function SampledTextureSampleLodProj_Texture1D;
Variable TextureSampleLodProj_Texture2D_texture;
Variable TextureSampleLodProj_Texture2D_sampler;
Variable TextureSampleLodProj_Texture2D_coordinate;
Variable TextureSampleLodProj_Texture2D_lod;
Variable TextureSampleLodProj_Texture2D_proj;
Function TextureSampleLodProj_Texture2D;
Variable SampledTextureSampleLodProj_Texture2D_texture;
Variable SampledTextureSampleLodProj_Texture2D_coordinate;
Variable SampledTextureSampleLodProj_Texture2D_lod;
Variable SampledTextureSampleLodProj_Texture2D_proj;
Function SampledTextureSampleLodProj_Texture2D;
Variable TextureSampleLodProj_Texture3D_texture;
Variable TextureSampleLodProj_Texture3D_sampler;
Variable TextureSampleLodProj_Texture3D_coordinate;
Variable TextureSampleLodProj_Texture3D_lod;
Variable TextureSampleLodProj_Texture3D_proj;
Function TextureSampleLodProj_Texture3D;
Variable SampledTextureSampleLodProj_Texture3D_texture;
Variable SampledTextureSampleLodProj_Texture3D_coordinate;
Variable SampledTextureSampleLodProj_Texture3D_lod;
Variable SampledTextureSampleLodProj_Texture3D_proj;
Function SampledTextureSampleLodProj_Texture3D;
Variable TextureSampleLodCompare_Texture1D_texture;
Variable TextureSampleLodCompare_Texture1D_sampler;
Variable TextureSampleLodCompare_Texture1D_coordinate;
Variable TextureSampleLodCompare_Texture1D_lod;
Variable TextureSampleLodCompare_Texture1D_compare;
Function TextureSampleLodCompare_Texture1D;
Variable SampledTextureSampleLodCompare_Texture1D_texture;
Variable SampledTextureSampleLodCompare_Texture1D_coordinate;
Variable SampledTextureSampleLodCompare_Texture1D_lod;
Variable SampledTextureSampleLodCompare_Texture1D_compare;
Function SampledTextureSampleLodCompare_Texture1D;
Variable TextureSampleLodCompare_Texture2D_texture;
Variable TextureSampleLodCompare_Texture2D_sampler;
Variable TextureSampleLodCompare_Texture2D_coordinate;
Variable TextureSampleLodCompare_Texture2D_lod;
Variable TextureSampleLodCompare_Texture2D_compare;
Function TextureSampleLodCompare_Texture2D;
Variable SampledTextureSampleLodCompare_Texture2D_texture;
Variable SampledTextureSampleLodCompare_Texture2D_coordinate;
Variable SampledTextureSampleLodCompare_Texture2D_lod;
Variable SampledTextureSampleLodCompare_Texture2D_compare;
Function SampledTextureSampleLodCompare_Texture2D;
Variable TextureSampleLodCompare_Texture3D_texture;
Variable TextureSampleLodCompare_Texture3D_sampler;
Variable TextureSampleLodCompare_Texture3D_coordinate;
Variable TextureSampleLodCompare_Texture3D_lod;
Variable TextureSampleLodCompare_Texture3D_compare;
Function TextureSampleLodCompare_Texture3D;
Variable SampledTextureSampleLodCompare_Texture3D_texture;
Variable SampledTextureSampleLodCompare_Texture3D_coordinate;
Variable SampledTextureSampleLodCompare_Texture3D_lod;
Variable SampledTextureSampleLodCompare_Texture3D_compare;
Function SampledTextureSampleLodCompare_Texture3D;
Variable TextureSampleLodCompare_Texture1DArray_texture;
Variable TextureSampleLodCompare_Texture1DArray_sampler;
Variable TextureSampleLodCompare_Texture1DArray_coordinate;
Variable TextureSampleLodCompare_Texture1DArray_lod;
Variable TextureSampleLodCompare_Texture1DArray_compare;
Function TextureSampleLodCompare_Texture1DArray;
Variable SampledTextureSampleLodCompare_Texture1DArray_texture;
Variable SampledTextureSampleLodCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleLodCompare_Texture1DArray_lod;
Variable SampledTextureSampleLodCompare_Texture1DArray_compare;
Function SampledTextureSampleLodCompare_Texture1DArray;
Variable TextureSampleLodCompare_Texture2DArray_texture;
Variable TextureSampleLodCompare_Texture2DArray_sampler;
Variable TextureSampleLodCompare_Texture2DArray_coordinate;
Variable TextureSampleLodCompare_Texture2DArray_lod;
Variable TextureSampleLodCompare_Texture2DArray_compare;
Function TextureSampleLodCompare_Texture2DArray;
Variable SampledTextureSampleLodCompare_Texture2DArray_texture;
Variable SampledTextureSampleLodCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleLodCompare_Texture2DArray_lod;
Variable SampledTextureSampleLodCompare_Texture2DArray_compare;
Function SampledTextureSampleLodCompare_Texture2DArray;
Variable TextureSampleLodProjCompare_Texture1D_texture;
Variable TextureSampleLodProjCompare_Texture1D_sampler;
Variable TextureSampleLodProjCompare_Texture1D_coordinate;
Variable TextureSampleLodProjCompare_Texture1D_lod;
Variable TextureSampleLodProjCompare_Texture1D_proj;
Variable TextureSampleLodProjCompare_Texture1D_compare;
Function TextureSampleLodProjCompare_Texture1D;
Variable SampledTextureSampleLodProjCompare_Texture1D_texture;
Variable SampledTextureSampleLodProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture1D_lod;
Variable SampledTextureSampleLodProjCompare_Texture1D_proj;
Variable SampledTextureSampleLodProjCompare_Texture1D_compare;
Function SampledTextureSampleLodProjCompare_Texture1D;
Variable TextureSampleLodProjCompare_Texture2D_texture;
Variable TextureSampleLodProjCompare_Texture2D_sampler;
Variable TextureSampleLodProjCompare_Texture2D_coordinate;
Variable TextureSampleLodProjCompare_Texture2D_lod;
Variable TextureSampleLodProjCompare_Texture2D_proj;
Variable TextureSampleLodProjCompare_Texture2D_compare;
Function TextureSampleLodProjCompare_Texture2D;
Variable SampledTextureSampleLodProjCompare_Texture2D_texture;
Variable SampledTextureSampleLodProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture2D_lod;
Variable SampledTextureSampleLodProjCompare_Texture2D_proj;
Variable SampledTextureSampleLodProjCompare_Texture2D_compare;
Function SampledTextureSampleLodProjCompare_Texture2D;
Variable TextureSampleLodProjCompare_Texture3D_texture;
Variable TextureSampleLodProjCompare_Texture3D_sampler;
Variable TextureSampleLodProjCompare_Texture3D_coordinate;
Variable TextureSampleLodProjCompare_Texture3D_lod;
Variable TextureSampleLodProjCompare_Texture3D_proj;
Variable TextureSampleLodProjCompare_Texture3D_compare;
Function TextureSampleLodProjCompare_Texture3D;
Variable SampledTextureSampleLodProjCompare_Texture3D_texture;
Variable SampledTextureSampleLodProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture3D_lod;
Variable SampledTextureSampleLodProjCompare_Texture3D_proj;
Variable SampledTextureSampleLodProjCompare_Texture3D_compare;
Function SampledTextureSampleLodProjCompare_Texture3D;
Variable TextureSampleGrad_Texture1D_texture;
Variable TextureSampleGrad_Texture1D_sampler;
Variable TextureSampleGrad_Texture1D_coordinate;
Variable TextureSampleGrad_Texture1D_gradx;
Variable TextureSampleGrad_Texture1D_grady;
Function TextureSampleGrad_Texture1D;
Variable SampledTextureSampleGrad_Texture1D_texture;
Variable SampledTextureSampleGrad_Texture1D_coordinate;
Variable SampledTextureSampleGrad_Texture1D_gradx;
Variable SampledTextureSampleGrad_Texture1D_grady;
Function SampledTextureSampleGrad_Texture1D;
Variable TextureSampleGrad_Texture2D_texture;
Variable TextureSampleGrad_Texture2D_sampler;
Variable TextureSampleGrad_Texture2D_coordinate;
Variable TextureSampleGrad_Texture2D_gradx;
Variable TextureSampleGrad_Texture2D_grady;
Function TextureSampleGrad_Texture2D;
Variable SampledTextureSampleGrad_Texture2D_texture;
Variable SampledTextureSampleGrad_Texture2D_coordinate;
Variable SampledTextureSampleGrad_Texture2D_gradx;
Variable SampledTextureSampleGrad_Texture2D_grady;
Function SampledTextureSampleGrad_Texture2D;
Variable TextureSampleGrad_Texture3D_texture;
Variable TextureSampleGrad_Texture3D_sampler;
Variable TextureSampleGrad_Texture3D_coordinate;
Variable TextureSampleGrad_Texture3D_gradx;
Variable TextureSampleGrad_Texture3D_grady;
Function TextureSampleGrad_Texture3D;
Variable SampledTextureSampleGrad_Texture3D_texture;
Variable SampledTextureSampleGrad_Texture3D_coordinate;
Variable SampledTextureSampleGrad_Texture3D_gradx;
Variable SampledTextureSampleGrad_Texture3D_grady;
Function SampledTextureSampleGrad_Texture3D;
Variable TextureSampleGrad_TextureCube_texture;
Variable TextureSampleGrad_TextureCube_sampler;
Variable TextureSampleGrad_TextureCube_coordinate;
Variable TextureSampleGrad_TextureCube_gradx;
Variable TextureSampleGrad_TextureCube_grady;
Function TextureSampleGrad_TextureCube;
Variable SampledTextureSampleGrad_TextureCube_texture;
Variable SampledTextureSampleGrad_TextureCube_coordinate;
Variable SampledTextureSampleGrad_TextureCube_gradx;
Variable SampledTextureSampleGrad_TextureCube_grady;
Function SampledTextureSampleGrad_TextureCube;
Variable TextureSampleGrad_Texture1DArray_texture;
Variable TextureSampleGrad_Texture1DArray_sampler;
Variable TextureSampleGrad_Texture1DArray_coordinate;
Variable TextureSampleGrad_Texture1DArray_gradx;
Variable TextureSampleGrad_Texture1DArray_grady;
Function TextureSampleGrad_Texture1DArray;
Variable SampledTextureSampleGrad_Texture1DArray_texture;
Variable SampledTextureSampleGrad_Texture1DArray_coordinate;
Variable SampledTextureSampleGrad_Texture1DArray_gradx;
Variable SampledTextureSampleGrad_Texture1DArray_grady;
Function SampledTextureSampleGrad_Texture1DArray;
Variable TextureSampleGrad_Texture2DArray_texture;
Variable TextureSampleGrad_Texture2DArray_sampler;
Variable TextureSampleGrad_Texture2DArray_coordinate;
Variable TextureSampleGrad_Texture2DArray_gradx;
Variable TextureSampleGrad_Texture2DArray_grady;
Function TextureSampleGrad_Texture2DArray;
Variable SampledTextureSampleGrad_Texture2DArray_texture;
Variable SampledTextureSampleGrad_Texture2DArray_coordinate;
Variable SampledTextureSampleGrad_Texture2DArray_gradx;
Variable SampledTextureSampleGrad_Texture2DArray_grady;
Function SampledTextureSampleGrad_Texture2DArray;
Variable TextureSampleGrad_TextureCubeArray_texture;
Variable TextureSampleGrad_TextureCubeArray_sampler;
Variable TextureSampleGrad_TextureCubeArray_coordinate;
Variable TextureSampleGrad_TextureCubeArray_gradx;
Variable TextureSampleGrad_TextureCubeArray_grady;
Function TextureSampleGrad_TextureCubeArray;
Variable SampledTextureSampleGrad_TextureCubeArray_texture;
Variable SampledTextureSampleGrad_TextureCubeArray_coordinate;
Variable SampledTextureSampleGrad_TextureCubeArray_gradx;
Variable SampledTextureSampleGrad_TextureCubeArray_grady;
Function SampledTextureSampleGrad_TextureCubeArray;
Variable TextureSampleGradProj_Texture1D_texture;
Variable TextureSampleGradProj_Texture1D_sampler;
Variable TextureSampleGradProj_Texture1D_coordinate;
Variable TextureSampleGradProj_Texture1D_gradx;
Variable TextureSampleGradProj_Texture1D_grady;
Variable TextureSampleGradProj_Texture1D_proj;
Function TextureSampleGradProj_Texture1D;
Variable SampledTextureSampleGradProj_Texture1D_texture;
Variable SampledTextureSampleGradProj_Texture1D_coordinate;
Variable SampledTextureSampleGradProj_Texture1D_gradx;
Variable SampledTextureSampleGradProj_Texture1D_grady;
Variable SampledTextureSampleGradProj_Texture1D_proj;
Function SampledTextureSampleGradProj_Texture1D;
Variable TextureSampleGradProj_Texture2D_texture;
Variable TextureSampleGradProj_Texture2D_sampler;
Variable TextureSampleGradProj_Texture2D_coordinate;
Variable TextureSampleGradProj_Texture2D_gradx;
Variable TextureSampleGradProj_Texture2D_grady;
Variable TextureSampleGradProj_Texture2D_proj;
Function TextureSampleGradProj_Texture2D;
Variable SampledTextureSampleGradProj_Texture2D_texture;
Variable SampledTextureSampleGradProj_Texture2D_coordinate;
Variable SampledTextureSampleGradProj_Texture2D_gradx;
Variable SampledTextureSampleGradProj_Texture2D_grady;
Variable SampledTextureSampleGradProj_Texture2D_proj;
Function SampledTextureSampleGradProj_Texture2D;
Variable TextureSampleGradProj_Texture3D_texture;
Variable TextureSampleGradProj_Texture3D_sampler;
Variable TextureSampleGradProj_Texture3D_coordinate;
Variable TextureSampleGradProj_Texture3D_gradx;
Variable TextureSampleGradProj_Texture3D_grady;
Variable TextureSampleGradProj_Texture3D_proj;
Function TextureSampleGradProj_Texture3D;
Variable SampledTextureSampleGradProj_Texture3D_texture;
Variable SampledTextureSampleGradProj_Texture3D_coordinate;
Variable SampledTextureSampleGradProj_Texture3D_gradx;
Variable SampledTextureSampleGradProj_Texture3D_grady;
Variable SampledTextureSampleGradProj_Texture3D_proj;
Function SampledTextureSampleGradProj_Texture3D;
Variable TextureSampleGradCompare_Texture1D_texture;
Variable TextureSampleGradCompare_Texture1D_sampler;
Variable TextureSampleGradCompare_Texture1D_coordinate;
Variable TextureSampleGradCompare_Texture1D_gradx;
Variable TextureSampleGradCompare_Texture1D_grady;
Variable TextureSampleGradCompare_Texture1D_compare;
Function TextureSampleGradCompare_Texture1D;
Variable SampledTextureSampleGradCompare_Texture1D_texture;
Variable SampledTextureSampleGradCompare_Texture1D_coordinate;
Variable SampledTextureSampleGradCompare_Texture1D_gradx;
Variable SampledTextureSampleGradCompare_Texture1D_grady;
Variable SampledTextureSampleGradCompare_Texture1D_compare;
Function SampledTextureSampleGradCompare_Texture1D;
Variable TextureSampleGradCompare_Texture2D_texture;
Variable TextureSampleGradCompare_Texture2D_sampler;
Variable TextureSampleGradCompare_Texture2D_coordinate;
Variable TextureSampleGradCompare_Texture2D_gradx;
Variable TextureSampleGradCompare_Texture2D_grady;
Variable TextureSampleGradCompare_Texture2D_compare;
Function TextureSampleGradCompare_Texture2D;
Variable SampledTextureSampleGradCompare_Texture2D_texture;
Variable SampledTextureSampleGradCompare_Texture2D_coordinate;
Variable SampledTextureSampleGradCompare_Texture2D_gradx;
Variable SampledTextureSampleGradCompare_Texture2D_grady;
Variable SampledTextureSampleGradCompare_Texture2D_compare;
Function SampledTextureSampleGradCompare_Texture2D;
Variable TextureSampleGradCompare_Texture3D_texture;
Variable TextureSampleGradCompare_Texture3D_sampler;
Variable TextureSampleGradCompare_Texture3D_coordinate;
Variable TextureSampleGradCompare_Texture3D_gradx;
Variable TextureSampleGradCompare_Texture3D_grady;
Variable TextureSampleGradCompare_Texture3D_compare;
Function TextureSampleGradCompare_Texture3D;
Variable SampledTextureSampleGradCompare_Texture3D_texture;
Variable SampledTextureSampleGradCompare_Texture3D_coordinate;
Variable SampledTextureSampleGradCompare_Texture3D_gradx;
Variable SampledTextureSampleGradCompare_Texture3D_grady;
Variable SampledTextureSampleGradCompare_Texture3D_compare;
Function SampledTextureSampleGradCompare_Texture3D;
Variable TextureSampleGradCompare_Texture1DArray_texture;
Variable TextureSampleGradCompare_Texture1DArray_sampler;
Variable TextureSampleGradCompare_Texture1DArray_coordinate;
Variable TextureSampleGradCompare_Texture1DArray_gradx;
Variable TextureSampleGradCompare_Texture1DArray_grady;
Variable TextureSampleGradCompare_Texture1DArray_compare;
Function TextureSampleGradCompare_Texture1DArray;
Variable SampledTextureSampleGradCompare_Texture1DArray_texture;
Variable SampledTextureSampleGradCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleGradCompare_Texture1DArray_gradx;
Variable SampledTextureSampleGradCompare_Texture1DArray_grady;
Variable SampledTextureSampleGradCompare_Texture1DArray_compare;
Function SampledTextureSampleGradCompare_Texture1DArray;
Variable TextureSampleGradCompare_Texture2DArray_texture;
Variable TextureSampleGradCompare_Texture2DArray_sampler;
Variable TextureSampleGradCompare_Texture2DArray_coordinate;
Variable TextureSampleGradCompare_Texture2DArray_gradx;
Variable TextureSampleGradCompare_Texture2DArray_grady;
Variable TextureSampleGradCompare_Texture2DArray_compare;
Function TextureSampleGradCompare_Texture2DArray;
Variable SampledTextureSampleGradCompare_Texture2DArray_texture;
Variable SampledTextureSampleGradCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleGradCompare_Texture2DArray_gradx;
Variable SampledTextureSampleGradCompare_Texture2DArray_grady;
Variable SampledTextureSampleGradCompare_Texture2DArray_compare;
Function SampledTextureSampleGradCompare_Texture2DArray;
Variable TextureSampleGradProjCompare_Texture1D_texture;
Variable TextureSampleGradProjCompare_Texture1D_sampler;
Variable TextureSampleGradProjCompare_Texture1D_coordinate;
Variable TextureSampleGradProjCompare_Texture1D_gradx;
Variable TextureSampleGradProjCompare_Texture1D_grady;
Variable TextureSampleGradProjCompare_Texture1D_proj;
Variable TextureSampleGradProjCompare_Texture1D_compare;
Function TextureSampleGradProjCompare_Texture1D;
Variable SampledTextureSampleGradProjCompare_Texture1D_texture;
Variable SampledTextureSampleGradProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleGradProjCompare_Texture1D_gradx;
Variable SampledTextureSampleGradProjCompare_Texture1D_grady;
Variable SampledTextureSampleGradProjCompare_Texture1D_proj;
Variable SampledTextureSampleGradProjCompare_Texture1D_compare;
Function SampledTextureSampleGradProjCompare_Texture1D;
Variable TextureSampleGradProjCompare_Texture2D_texture;
Variable TextureSampleGradProjCompare_Texture2D_sampler;
Variable TextureSampleGradProjCompare_Texture2D_coordinate;
Variable TextureSampleGradProjCompare_Texture2D_gradx;
Variable TextureSampleGradProjCompare_Texture2D_grady;
Variable TextureSampleGradProjCompare_Texture2D_proj;
Variable TextureSampleGradProjCompare_Texture2D_compare;
Function TextureSampleGradProjCompare_Texture2D;
Variable SampledTextureSampleGradProjCompare_Texture2D_texture;
Variable SampledTextureSampleGradProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleGradProjCompare_Texture2D_gradx;
Variable SampledTextureSampleGradProjCompare_Texture2D_grady;
Variable SampledTextureSampleGradProjCompare_Texture2D_proj;
Variable SampledTextureSampleGradProjCompare_Texture2D_compare;
Function SampledTextureSampleGradProjCompare_Texture2D;
Variable TextureSampleGradProjCompare_Texture3D_texture;
Variable TextureSampleGradProjCompare_Texture3D_sampler;
Variable TextureSampleGradProjCompare_Texture3D_coordinate;
Variable TextureSampleGradProjCompare_Texture3D_gradx;
Variable TextureSampleGradProjCompare_Texture3D_grady;
Variable TextureSampleGradProjCompare_Texture3D_proj;
Variable TextureSampleGradProjCompare_Texture3D_compare;
Function TextureSampleGradProjCompare_Texture3D;
Variable SampledTextureSampleGradProjCompare_Texture3D_texture;
Variable SampledTextureSampleGradProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleGradProjCompare_Texture3D_gradx;
Variable SampledTextureSampleGradProjCompare_Texture3D_grady;
Variable SampledTextureSampleGradProjCompare_Texture3D_proj;
Variable SampledTextureSampleGradProjCompare_Texture3D_compare;
Function SampledTextureSampleGradProjCompare_Texture3D;
Variable TextureSampleBias_Texture1D_texture;
Variable TextureSampleBias_Texture1D_sampler;
Variable TextureSampleBias_Texture1D_coordinate;
Variable TextureSampleBias_Texture1D_bias;
Function TextureSampleBias_Texture1D;
Variable SampledTextureSampleBias_Texture1D_texture;
Variable SampledTextureSampleBias_Texture1D_coordinate;
Variable SampledTextureSampleBias_Texture1D_bias;
Function SampledTextureSampleBias_Texture1D;
Variable TextureSampleBias_Texture2D_texture;
Variable TextureSampleBias_Texture2D_sampler;
Variable TextureSampleBias_Texture2D_coordinate;
Variable TextureSampleBias_Texture2D_bias;
Function TextureSampleBias_Texture2D;
Variable SampledTextureSampleBias_Texture2D_texture;
Variable SampledTextureSampleBias_Texture2D_coordinate;
Variable SampledTextureSampleBias_Texture2D_bias;
Function SampledTextureSampleBias_Texture2D;
Variable TextureSampleBias_Texture3D_texture;
Variable TextureSampleBias_Texture3D_sampler;
Variable TextureSampleBias_Texture3D_coordinate;
Variable TextureSampleBias_Texture3D_bias;
Function TextureSampleBias_Texture3D;
Variable SampledTextureSampleBias_Texture3D_texture;
Variable SampledTextureSampleBias_Texture3D_coordinate;
Variable SampledTextureSampleBias_Texture3D_bias;
Function SampledTextureSampleBias_Texture3D;
Variable TextureSampleBias_TextureCube_texture;
Variable TextureSampleBias_TextureCube_sampler;
Variable TextureSampleBias_TextureCube_coordinate;
Variable TextureSampleBias_TextureCube_bias;
Function TextureSampleBias_TextureCube;
Variable SampledTextureSampleBias_TextureCube_texture;
Variable SampledTextureSampleBias_TextureCube_coordinate;
Variable SampledTextureSampleBias_TextureCube_bias;
Function SampledTextureSampleBias_TextureCube;
Variable TextureSampleBias_Texture1DArray_texture;
Variable TextureSampleBias_Texture1DArray_sampler;
Variable TextureSampleBias_Texture1DArray_coordinate;
Variable TextureSampleBias_Texture1DArray_bias;
Function TextureSampleBias_Texture1DArray;
Variable SampledTextureSampleBias_Texture1DArray_texture;
Variable SampledTextureSampleBias_Texture1DArray_coordinate;
Variable SampledTextureSampleBias_Texture1DArray_bias;
Function SampledTextureSampleBias_Texture1DArray;
Variable TextureSampleBias_Texture2DArray_texture;
Variable TextureSampleBias_Texture2DArray_sampler;
Variable TextureSampleBias_Texture2DArray_coordinate;
Variable TextureSampleBias_Texture2DArray_bias;
Function TextureSampleBias_Texture2DArray;
Variable SampledTextureSampleBias_Texture2DArray_texture;
Variable SampledTextureSampleBias_Texture2DArray_coordinate;
Variable SampledTextureSampleBias_Texture2DArray_bias;
Function SampledTextureSampleBias_Texture2DArray;
Variable TextureSampleBias_TextureCubeArray_texture;
Variable TextureSampleBias_TextureCubeArray_sampler;
Variable TextureSampleBias_TextureCubeArray_coordinate;
Variable TextureSampleBias_TextureCubeArray_bias;
Function TextureSampleBias_TextureCubeArray;
Variable SampledTextureSampleBias_TextureCubeArray_texture;
Variable SampledTextureSampleBias_TextureCubeArray_coordinate;
Variable SampledTextureSampleBias_TextureCubeArray_bias;
Function SampledTextureSampleBias_TextureCubeArray;
Variable TextureSampleBiasProj_Texture1D_texture;
Variable TextureSampleBiasProj_Texture1D_sampler;
Variable TextureSampleBiasProj_Texture1D_coordinate;
Variable TextureSampleBiasProj_Texture1D_bias;
Variable TextureSampleBiasProj_Texture1D_proj;
Function TextureSampleBiasProj_Texture1D;
Variable SampledTextureSampleBiasProj_Texture1D_texture;
Variable SampledTextureSampleBiasProj_Texture1D_coordinate;
Variable SampledTextureSampleBiasProj_Texture1D_bias;
Variable SampledTextureSampleBiasProj_Texture1D_proj;
Function SampledTextureSampleBiasProj_Texture1D;
Variable TextureSampleBiasProj_Texture2D_texture;
Variable TextureSampleBiasProj_Texture2D_sampler;
Variable TextureSampleBiasProj_Texture2D_coordinate;
Variable TextureSampleBiasProj_Texture2D_bias;
Variable TextureSampleBiasProj_Texture2D_proj;
Function TextureSampleBiasProj_Texture2D;
Variable SampledTextureSampleBiasProj_Texture2D_texture;
Variable SampledTextureSampleBiasProj_Texture2D_coordinate;
Variable SampledTextureSampleBiasProj_Texture2D_bias;
Variable SampledTextureSampleBiasProj_Texture2D_proj;
Function SampledTextureSampleBiasProj_Texture2D;
Variable TextureSampleBiasProj_Texture3D_texture;
Variable TextureSampleBiasProj_Texture3D_sampler;
Variable TextureSampleBiasProj_Texture3D_coordinate;
Variable TextureSampleBiasProj_Texture3D_bias;
Variable TextureSampleBiasProj_Texture3D_proj;
Function TextureSampleBiasProj_Texture3D;
Variable SampledTextureSampleBiasProj_Texture3D_texture;
Variable SampledTextureSampleBiasProj_Texture3D_coordinate;
Variable SampledTextureSampleBiasProj_Texture3D_bias;
Variable SampledTextureSampleBiasProj_Texture3D_proj;
Function SampledTextureSampleBiasProj_Texture3D;
Variable TextureSampleBiasCompare_Texture1D_texture;
Variable TextureSampleBiasCompare_Texture1D_sampler;
Variable TextureSampleBiasCompare_Texture1D_coordinate;
Variable TextureSampleBiasCompare_Texture1D_bias;
Variable TextureSampleBiasCompare_Texture1D_compare;
Function TextureSampleBiasCompare_Texture1D;
Variable SampledTextureSampleBiasCompare_Texture1D_texture;
Variable SampledTextureSampleBiasCompare_Texture1D_coordinate;
Variable SampledTextureSampleBiasCompare_Texture1D_bias;
Variable SampledTextureSampleBiasCompare_Texture1D_compare;
Function SampledTextureSampleBiasCompare_Texture1D;
Variable TextureSampleBiasCompare_Texture2D_texture;
Variable TextureSampleBiasCompare_Texture2D_sampler;
Variable TextureSampleBiasCompare_Texture2D_coordinate;
Variable TextureSampleBiasCompare_Texture2D_bias;
Variable TextureSampleBiasCompare_Texture2D_compare;
Function TextureSampleBiasCompare_Texture2D;
Variable SampledTextureSampleBiasCompare_Texture2D_texture;
Variable SampledTextureSampleBiasCompare_Texture2D_coordinate;
Variable SampledTextureSampleBiasCompare_Texture2D_bias;
Variable SampledTextureSampleBiasCompare_Texture2D_compare;
Function SampledTextureSampleBiasCompare_Texture2D;
Variable TextureSampleBiasCompare_Texture3D_texture;
Variable TextureSampleBiasCompare_Texture3D_sampler;
Variable TextureSampleBiasCompare_Texture3D_coordinate;
Variable TextureSampleBiasCompare_Texture3D_bias;
Variable TextureSampleBiasCompare_Texture3D_compare;
Function TextureSampleBiasCompare_Texture3D;
Variable SampledTextureSampleBiasCompare_Texture3D_texture;
Variable SampledTextureSampleBiasCompare_Texture3D_coordinate;
Variable SampledTextureSampleBiasCompare_Texture3D_bias;
Variable SampledTextureSampleBiasCompare_Texture3D_compare;
Function SampledTextureSampleBiasCompare_Texture3D;
Variable TextureSampleBiasCompare_Texture1DArray_texture;
Variable TextureSampleBiasCompare_Texture1DArray_sampler;
Variable TextureSampleBiasCompare_Texture1DArray_coordinate;
Variable TextureSampleBiasCompare_Texture1DArray_bias;
Variable TextureSampleBiasCompare_Texture1DArray_compare;
Function TextureSampleBiasCompare_Texture1DArray;
Variable SampledTextureSampleBiasCompare_Texture1DArray_texture;
Variable SampledTextureSampleBiasCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleBiasCompare_Texture1DArray_bias;
Variable SampledTextureSampleBiasCompare_Texture1DArray_compare;
Function SampledTextureSampleBiasCompare_Texture1DArray;
Variable TextureSampleBiasCompare_Texture2DArray_texture;
Variable TextureSampleBiasCompare_Texture2DArray_sampler;
Variable TextureSampleBiasCompare_Texture2DArray_coordinate;
Variable TextureSampleBiasCompare_Texture2DArray_bias;
Variable TextureSampleBiasCompare_Texture2DArray_compare;
Function TextureSampleBiasCompare_Texture2DArray;
Variable SampledTextureSampleBiasCompare_Texture2DArray_texture;
Variable SampledTextureSampleBiasCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleBiasCompare_Texture2DArray_bias;
Variable SampledTextureSampleBiasCompare_Texture2DArray_compare;
Function SampledTextureSampleBiasCompare_Texture2DArray;
Variable TextureSampleBiasProjCompare_Texture1D_texture;
Variable TextureSampleBiasProjCompare_Texture1D_sampler;
Variable TextureSampleBiasProjCompare_Texture1D_coordinate;
Variable TextureSampleBiasProjCompare_Texture1D_bias;
Variable TextureSampleBiasProjCompare_Texture1D_proj;
Variable TextureSampleBiasProjCompare_Texture1D_compare;
Function TextureSampleBiasProjCompare_Texture1D;
Variable SampledTextureSampleBiasProjCompare_Texture1D_texture;
Variable SampledTextureSampleBiasProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleBiasProjCompare_Texture1D_bias;
Variable SampledTextureSampleBiasProjCompare_Texture1D_proj;
Variable SampledTextureSampleBiasProjCompare_Texture1D_compare;
Function SampledTextureSampleBiasProjCompare_Texture1D;
Variable TextureSampleBiasProjCompare_Texture2D_texture;
Variable TextureSampleBiasProjCompare_Texture2D_sampler;
Variable TextureSampleBiasProjCompare_Texture2D_coordinate;
Variable TextureSampleBiasProjCompare_Texture2D_bias;
Variable TextureSampleBiasProjCompare_Texture2D_proj;
Variable TextureSampleBiasProjCompare_Texture2D_compare;
Function TextureSampleBiasProjCompare_Texture2D;
Variable SampledTextureSampleBiasProjCompare_Texture2D_texture;
Variable SampledTextureSampleBiasProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleBiasProjCompare_Texture2D_bias;
Variable SampledTextureSampleBiasProjCompare_Texture2D_proj;
Variable SampledTextureSampleBiasProjCompare_Texture2D_compare;
Function SampledTextureSampleBiasProjCompare_Texture2D;
Variable TextureSampleBiasProjCompare_Texture3D_texture;
Variable TextureSampleBiasProjCompare_Texture3D_sampler;
Variable TextureSampleBiasProjCompare_Texture3D_coordinate;
Variable TextureSampleBiasProjCompare_Texture3D_bias;
Variable TextureSampleBiasProjCompare_Texture3D_proj;
Variable TextureSampleBiasProjCompare_Texture3D_compare;
Function TextureSampleBiasProjCompare_Texture3D;
Variable SampledTextureSampleBiasProjCompare_Texture3D_texture;
Variable SampledTextureSampleBiasProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleBiasProjCompare_Texture3D_bias;
Variable SampledTextureSampleBiasProjCompare_Texture3D_proj;
Variable SampledTextureSampleBiasProjCompare_Texture3D_compare;
Function SampledTextureSampleBiasProjCompare_Texture3D;
void SetupIntrinsics()
{
    acos_Float32_arg.name = "val"_c;
    acos_Float32_arg.type = Type::FullType{ Float32Type.name };
    acos_Float32.name = "acos"_c;
    acos_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&acos_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&acos_Float32)->returnTypeSymbol = &Float32Type;

    acos_Float32x2_arg.name = "val"_c;
    acos_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    acos_Float32x2.name = "acos"_c;
    acos_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&acos_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&acos_Float32x2)->returnTypeSymbol = &Float32x2Type;

    acos_Float32x3_arg.name = "val"_c;
    acos_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    acos_Float32x3.name = "acos"_c;
    acos_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&acos_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&acos_Float32x3)->returnTypeSymbol = &Float32x3Type;

    acos_Float32x4_arg.name = "val"_c;
    acos_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    acos_Float32x4.name = "acos"_c;
    acos_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&acos_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&acos_Float32x4)->returnTypeSymbol = &Float32x4Type;

    acos_Float16_arg.name = "val"_c;
    acos_Float16_arg.type = Type::FullType{ Float16Type.name };
    acos_Float16.name = "acos"_c;
    acos_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&acos_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&acos_Float16)->returnTypeSymbol = &Float16Type;

    acos_Float16x2_arg.name = "val"_c;
    acos_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    acos_Float16x2.name = "acos"_c;
    acos_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&acos_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&acos_Float16x2)->returnTypeSymbol = &Float16x2Type;

    acos_Float16x3_arg.name = "val"_c;
    acos_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    acos_Float16x3.name = "acos"_c;
    acos_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&acos_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&acos_Float16x3)->returnTypeSymbol = &Float16x3Type;

    acos_Float16x4_arg.name = "val"_c;
    acos_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    acos_Float16x4.name = "acos"_c;
    acos_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&acos_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&acos_Float16x4)->returnTypeSymbol = &Float16x4Type;

    acosh_Float32_arg.name = "val"_c;
    acosh_Float32_arg.type = Type::FullType{ Float32Type.name };
    acosh_Float32.name = "acosh"_c;
    acosh_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&acosh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&acosh_Float32)->returnTypeSymbol = &Float32Type;

    acosh_Float32x2_arg.name = "val"_c;
    acosh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    acosh_Float32x2.name = "acosh"_c;
    acosh_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&acosh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&acosh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    acosh_Float32x3_arg.name = "val"_c;
    acosh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    acosh_Float32x3.name = "acosh"_c;
    acosh_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&acosh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&acosh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    acosh_Float32x4_arg.name = "val"_c;
    acosh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    acosh_Float32x4.name = "acosh"_c;
    acosh_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&acosh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&acosh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    acosh_Float16_arg.name = "val"_c;
    acosh_Float16_arg.type = Type::FullType{ Float16Type.name };
    acosh_Float16.name = "acosh"_c;
    acosh_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&acosh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&acosh_Float16)->returnTypeSymbol = &Float16Type;

    acosh_Float16x2_arg.name = "val"_c;
    acosh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    acosh_Float16x2.name = "acosh"_c;
    acosh_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&acosh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&acosh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    acosh_Float16x3_arg.name = "val"_c;
    acosh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    acosh_Float16x3.name = "acosh"_c;
    acosh_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&acosh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&acosh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    acosh_Float16x4_arg.name = "val"_c;
    acosh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    acosh_Float16x4.name = "acosh"_c;
    acosh_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&acosh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&acosh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    asin_Float32_arg.name = "val"_c;
    asin_Float32_arg.type = Type::FullType{ Float32Type.name };
    asin_Float32.name = "asin"_c;
    asin_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&asin_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&asin_Float32)->returnTypeSymbol = &Float32Type;

    asin_Float32x2_arg.name = "val"_c;
    asin_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    asin_Float32x2.name = "asin"_c;
    asin_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&asin_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&asin_Float32x2)->returnTypeSymbol = &Float32x2Type;

    asin_Float32x3_arg.name = "val"_c;
    asin_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    asin_Float32x3.name = "asin"_c;
    asin_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&asin_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&asin_Float32x3)->returnTypeSymbol = &Float32x3Type;

    asin_Float32x4_arg.name = "val"_c;
    asin_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    asin_Float32x4.name = "asin"_c;
    asin_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&asin_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&asin_Float32x4)->returnTypeSymbol = &Float32x4Type;

    asin_Float16_arg.name = "val"_c;
    asin_Float16_arg.type = Type::FullType{ Float16Type.name };
    asin_Float16.name = "asin"_c;
    asin_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&asin_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&asin_Float16)->returnTypeSymbol = &Float16Type;

    asin_Float16x2_arg.name = "val"_c;
    asin_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    asin_Float16x2.name = "asin"_c;
    asin_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&asin_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&asin_Float16x2)->returnTypeSymbol = &Float16x2Type;

    asin_Float16x3_arg.name = "val"_c;
    asin_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    asin_Float16x3.name = "asin"_c;
    asin_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&asin_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&asin_Float16x3)->returnTypeSymbol = &Float16x3Type;

    asin_Float16x4_arg.name = "val"_c;
    asin_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    asin_Float16x4.name = "asin"_c;
    asin_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&asin_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&asin_Float16x4)->returnTypeSymbol = &Float16x4Type;

    asinh_Float32_arg.name = "val"_c;
    asinh_Float32_arg.type = Type::FullType{ Float32Type.name };
    asinh_Float32.name = "asinh"_c;
    asinh_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&asinh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&asinh_Float32)->returnTypeSymbol = &Float32Type;

    asinh_Float32x2_arg.name = "val"_c;
    asinh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    asinh_Float32x2.name = "asinh"_c;
    asinh_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&asinh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&asinh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    asinh_Float32x3_arg.name = "val"_c;
    asinh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    asinh_Float32x3.name = "asinh"_c;
    asinh_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&asinh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&asinh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    asinh_Float32x4_arg.name = "val"_c;
    asinh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    asinh_Float32x4.name = "asinh"_c;
    asinh_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&asinh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&asinh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    asinh_Float16_arg.name = "val"_c;
    asinh_Float16_arg.type = Type::FullType{ Float16Type.name };
    asinh_Float16.name = "asinh"_c;
    asinh_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&asinh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&asinh_Float16)->returnTypeSymbol = &Float16Type;

    asinh_Float16x2_arg.name = "val"_c;
    asinh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    asinh_Float16x2.name = "asinh"_c;
    asinh_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&asinh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&asinh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    asinh_Float16x3_arg.name = "val"_c;
    asinh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    asinh_Float16x3.name = "asinh"_c;
    asinh_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&asinh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&asinh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    asinh_Float16x4_arg.name = "val"_c;
    asinh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    asinh_Float16x4.name = "asinh"_c;
    asinh_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&asinh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&asinh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    atan_Float32_arg.name = "val"_c;
    atan_Float32_arg.type = Type::FullType{ Float32Type.name };
    atan_Float32.name = "atan"_c;
    atan_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&atan_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan_Float32)->returnTypeSymbol = &Float32Type;

    atan_Float32x2_arg.name = "val"_c;
    atan_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    atan_Float32x2.name = "atan"_c;
    atan_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&atan_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan_Float32x2)->returnTypeSymbol = &Float32x2Type;

    atan_Float32x3_arg.name = "val"_c;
    atan_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    atan_Float32x3.name = "atan"_c;
    atan_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&atan_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan_Float32x3)->returnTypeSymbol = &Float32x3Type;

    atan_Float32x4_arg.name = "val"_c;
    atan_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    atan_Float32x4.name = "atan"_c;
    atan_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&atan_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan_Float32x4)->returnTypeSymbol = &Float32x4Type;

    atan_Float16_arg.name = "val"_c;
    atan_Float16_arg.type = Type::FullType{ Float16Type.name };
    atan_Float16.name = "atan"_c;
    atan_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&atan_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan_Float16)->returnTypeSymbol = &Float16Type;

    atan_Float16x2_arg.name = "val"_c;
    atan_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    atan_Float16x2.name = "atan"_c;
    atan_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&atan_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan_Float16x2)->returnTypeSymbol = &Float16x2Type;

    atan_Float16x3_arg.name = "val"_c;
    atan_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    atan_Float16x3.name = "atan"_c;
    atan_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&atan_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan_Float16x3)->returnTypeSymbol = &Float16x3Type;

    atan_Float16x4_arg.name = "val"_c;
    atan_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    atan_Float16x4.name = "atan"_c;
    atan_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&atan_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan_Float16x4)->returnTypeSymbol = &Float16x4Type;

    atanh_Float32_arg.name = "val"_c;
    atanh_Float32_arg.type = Type::FullType{ Float32Type.name };
    atanh_Float32.name = "atanh"_c;
    atanh_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&atanh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atanh_Float32)->returnTypeSymbol = &Float32Type;

    atanh_Float32x2_arg.name = "val"_c;
    atanh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    atanh_Float32x2.name = "atanh"_c;
    atanh_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&atanh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atanh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    atanh_Float32x3_arg.name = "val"_c;
    atanh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    atanh_Float32x3.name = "atanh"_c;
    atanh_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&atanh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atanh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    atanh_Float32x4_arg.name = "val"_c;
    atanh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    atanh_Float32x4.name = "atanh"_c;
    atanh_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&atanh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atanh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    atanh_Float16_arg.name = "val"_c;
    atanh_Float16_arg.type = Type::FullType{ Float16Type.name };
    atanh_Float16.name = "atanh"_c;
    atanh_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&atanh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atanh_Float16)->returnTypeSymbol = &Float16Type;

    atanh_Float16x2_arg.name = "val"_c;
    atanh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    atanh_Float16x2.name = "atanh"_c;
    atanh_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&atanh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atanh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    atanh_Float16x3_arg.name = "val"_c;
    atanh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    atanh_Float16x3.name = "atanh"_c;
    atanh_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&atanh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atanh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    atanh_Float16x4_arg.name = "val"_c;
    atanh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    atanh_Float16x4.name = "atanh"_c;
    atanh_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&atanh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atanh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    cos_Float32_arg.name = "val"_c;
    cos_Float32_arg.type = Type::FullType{ Float32Type.name };
    cos_Float32.name = "cos"_c;
    cos_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&cos_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&cos_Float32)->returnTypeSymbol = &Float32Type;

    cos_Float32x2_arg.name = "val"_c;
    cos_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    cos_Float32x2.name = "cos"_c;
    cos_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&cos_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&cos_Float32x2)->returnTypeSymbol = &Float32x2Type;

    cos_Float32x3_arg.name = "val"_c;
    cos_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    cos_Float32x3.name = "cos"_c;
    cos_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&cos_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cos_Float32x3)->returnTypeSymbol = &Float32x3Type;

    cos_Float32x4_arg.name = "val"_c;
    cos_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    cos_Float32x4.name = "cos"_c;
    cos_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&cos_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&cos_Float32x4)->returnTypeSymbol = &Float32x4Type;

    cos_Float16_arg.name = "val"_c;
    cos_Float16_arg.type = Type::FullType{ Float16Type.name };
    cos_Float16.name = "cos"_c;
    cos_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&cos_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&cos_Float16)->returnTypeSymbol = &Float16Type;

    cos_Float16x2_arg.name = "val"_c;
    cos_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    cos_Float16x2.name = "cos"_c;
    cos_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&cos_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&cos_Float16x2)->returnTypeSymbol = &Float16x2Type;

    cos_Float16x3_arg.name = "val"_c;
    cos_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    cos_Float16x3.name = "cos"_c;
    cos_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&cos_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cos_Float16x3)->returnTypeSymbol = &Float16x3Type;

    cos_Float16x4_arg.name = "val"_c;
    cos_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    cos_Float16x4.name = "cos"_c;
    cos_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&cos_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&cos_Float16x4)->returnTypeSymbol = &Float16x4Type;

    cosh_Float32_arg.name = "val"_c;
    cosh_Float32_arg.type = Type::FullType{ Float32Type.name };
    cosh_Float32.name = "cosh"_c;
    cosh_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&cosh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&cosh_Float32)->returnTypeSymbol = &Float32Type;

    cosh_Float32x2_arg.name = "val"_c;
    cosh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    cosh_Float32x2.name = "cosh"_c;
    cosh_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&cosh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&cosh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    cosh_Float32x3_arg.name = "val"_c;
    cosh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    cosh_Float32x3.name = "cosh"_c;
    cosh_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&cosh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cosh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    cosh_Float32x4_arg.name = "val"_c;
    cosh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    cosh_Float32x4.name = "cosh"_c;
    cosh_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&cosh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&cosh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    cosh_Float16_arg.name = "val"_c;
    cosh_Float16_arg.type = Type::FullType{ Float16Type.name };
    cosh_Float16.name = "cosh"_c;
    cosh_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&cosh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&cosh_Float16)->returnTypeSymbol = &Float16Type;

    cosh_Float16x2_arg.name = "val"_c;
    cosh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    cosh_Float16x2.name = "cosh"_c;
    cosh_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&cosh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&cosh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    cosh_Float16x3_arg.name = "val"_c;
    cosh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    cosh_Float16x3.name = "cosh"_c;
    cosh_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&cosh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cosh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    cosh_Float16x4_arg.name = "val"_c;
    cosh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    cosh_Float16x4.name = "cosh"_c;
    cosh_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&cosh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&cosh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    exp_Float32_arg.name = "val"_c;
    exp_Float32_arg.type = Type::FullType{ Float32Type.name };
    exp_Float32.name = "exp"_c;
    exp_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&exp_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&exp_Float32)->returnTypeSymbol = &Float32Type;

    exp_Float32x2_arg.name = "val"_c;
    exp_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    exp_Float32x2.name = "exp"_c;
    exp_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&exp_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&exp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    exp_Float32x3_arg.name = "val"_c;
    exp_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    exp_Float32x3.name = "exp"_c;
    exp_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&exp_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&exp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    exp_Float32x4_arg.name = "val"_c;
    exp_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    exp_Float32x4.name = "exp"_c;
    exp_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&exp_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&exp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    exp_Float16_arg.name = "val"_c;
    exp_Float16_arg.type = Type::FullType{ Float16Type.name };
    exp_Float16.name = "exp"_c;
    exp_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&exp_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&exp_Float16)->returnTypeSymbol = &Float16Type;

    exp_Float16x2_arg.name = "val"_c;
    exp_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    exp_Float16x2.name = "exp"_c;
    exp_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&exp_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&exp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    exp_Float16x3_arg.name = "val"_c;
    exp_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    exp_Float16x3.name = "exp"_c;
    exp_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&exp_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&exp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    exp_Float16x4_arg.name = "val"_c;
    exp_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    exp_Float16x4.name = "exp"_c;
    exp_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&exp_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&exp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    exp2_Float32_arg.name = "val"_c;
    exp2_Float32_arg.type = Type::FullType{ Float32Type.name };
    exp2_Float32.name = "exp2"_c;
    exp2_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&exp2_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&exp2_Float32)->returnTypeSymbol = &Float32Type;

    exp2_Float32x2_arg.name = "val"_c;
    exp2_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    exp2_Float32x2.name = "exp2"_c;
    exp2_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&exp2_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&exp2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    exp2_Float32x3_arg.name = "val"_c;
    exp2_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    exp2_Float32x3.name = "exp2"_c;
    exp2_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&exp2_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&exp2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    exp2_Float32x4_arg.name = "val"_c;
    exp2_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    exp2_Float32x4.name = "exp2"_c;
    exp2_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&exp2_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&exp2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    exp2_Float16_arg.name = "val"_c;
    exp2_Float16_arg.type = Type::FullType{ Float16Type.name };
    exp2_Float16.name = "exp2"_c;
    exp2_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&exp2_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&exp2_Float16)->returnTypeSymbol = &Float16Type;

    exp2_Float16x2_arg.name = "val"_c;
    exp2_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    exp2_Float16x2.name = "exp2"_c;
    exp2_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&exp2_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&exp2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    exp2_Float16x3_arg.name = "val"_c;
    exp2_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    exp2_Float16x3.name = "exp2"_c;
    exp2_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&exp2_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&exp2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    exp2_Float16x4_arg.name = "val"_c;
    exp2_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    exp2_Float16x4.name = "exp2"_c;
    exp2_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&exp2_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&exp2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    invSqrt_Float32_arg.name = "val"_c;
    invSqrt_Float32_arg.type = Type::FullType{ Float32Type.name };
    invSqrt_Float32.name = "invSqrt"_c;
    invSqrt_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&invSqrt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&invSqrt_Float32)->returnTypeSymbol = &Float32Type;

    invSqrt_Float32x2_arg.name = "val"_c;
    invSqrt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    invSqrt_Float32x2.name = "invSqrt"_c;
    invSqrt_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&invSqrt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&invSqrt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    invSqrt_Float32x3_arg.name = "val"_c;
    invSqrt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    invSqrt_Float32x3.name = "invSqrt"_c;
    invSqrt_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&invSqrt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&invSqrt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    invSqrt_Float32x4_arg.name = "val"_c;
    invSqrt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    invSqrt_Float32x4.name = "invSqrt"_c;
    invSqrt_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&invSqrt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&invSqrt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    invSqrt_Float16_arg.name = "val"_c;
    invSqrt_Float16_arg.type = Type::FullType{ Float16Type.name };
    invSqrt_Float16.name = "invSqrt"_c;
    invSqrt_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&invSqrt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&invSqrt_Float16)->returnTypeSymbol = &Float16Type;

    invSqrt_Float16x2_arg.name = "val"_c;
    invSqrt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    invSqrt_Float16x2.name = "invSqrt"_c;
    invSqrt_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&invSqrt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&invSqrt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    invSqrt_Float16x3_arg.name = "val"_c;
    invSqrt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    invSqrt_Float16x3.name = "invSqrt"_c;
    invSqrt_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&invSqrt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&invSqrt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    invSqrt_Float16x4_arg.name = "val"_c;
    invSqrt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    invSqrt_Float16x4.name = "invSqrt"_c;
    invSqrt_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&invSqrt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&invSqrt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    log_Float32_arg.name = "val"_c;
    log_Float32_arg.type = Type::FullType{ Float32Type.name };
    log_Float32.name = "log"_c;
    log_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&log_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&log_Float32)->returnTypeSymbol = &Float32Type;

    log_Float32x2_arg.name = "val"_c;
    log_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    log_Float32x2.name = "log"_c;
    log_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&log_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&log_Float32x2)->returnTypeSymbol = &Float32x2Type;

    log_Float32x3_arg.name = "val"_c;
    log_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    log_Float32x3.name = "log"_c;
    log_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&log_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&log_Float32x3)->returnTypeSymbol = &Float32x3Type;

    log_Float32x4_arg.name = "val"_c;
    log_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    log_Float32x4.name = "log"_c;
    log_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&log_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&log_Float32x4)->returnTypeSymbol = &Float32x4Type;

    log_Float16_arg.name = "val"_c;
    log_Float16_arg.type = Type::FullType{ Float16Type.name };
    log_Float16.name = "log"_c;
    log_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&log_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&log_Float16)->returnTypeSymbol = &Float16Type;

    log_Float16x2_arg.name = "val"_c;
    log_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    log_Float16x2.name = "log"_c;
    log_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&log_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&log_Float16x2)->returnTypeSymbol = &Float16x2Type;

    log_Float16x3_arg.name = "val"_c;
    log_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    log_Float16x3.name = "log"_c;
    log_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&log_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&log_Float16x3)->returnTypeSymbol = &Float16x3Type;

    log_Float16x4_arg.name = "val"_c;
    log_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    log_Float16x4.name = "log"_c;
    log_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&log_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&log_Float16x4)->returnTypeSymbol = &Float16x4Type;

    log2_Float32_arg.name = "val"_c;
    log2_Float32_arg.type = Type::FullType{ Float32Type.name };
    log2_Float32.name = "log2"_c;
    log2_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&log2_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&log2_Float32)->returnTypeSymbol = &Float32Type;

    log2_Float32x2_arg.name = "val"_c;
    log2_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    log2_Float32x2.name = "log2"_c;
    log2_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&log2_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&log2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    log2_Float32x3_arg.name = "val"_c;
    log2_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    log2_Float32x3.name = "log2"_c;
    log2_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&log2_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&log2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    log2_Float32x4_arg.name = "val"_c;
    log2_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    log2_Float32x4.name = "log2"_c;
    log2_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&log2_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&log2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    log2_Float16_arg.name = "val"_c;
    log2_Float16_arg.type = Type::FullType{ Float16Type.name };
    log2_Float16.name = "log2"_c;
    log2_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&log2_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&log2_Float16)->returnTypeSymbol = &Float16Type;

    log2_Float16x2_arg.name = "val"_c;
    log2_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    log2_Float16x2.name = "log2"_c;
    log2_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&log2_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&log2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    log2_Float16x3_arg.name = "val"_c;
    log2_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    log2_Float16x3.name = "log2"_c;
    log2_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&log2_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&log2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    log2_Float16x4_arg.name = "val"_c;
    log2_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    log2_Float16x4.name = "log2"_c;
    log2_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&log2_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&log2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    sin_Float32_arg.name = "val"_c;
    sin_Float32_arg.type = Type::FullType{ Float32Type.name };
    sin_Float32.name = "sin"_c;
    sin_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&sin_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sin_Float32)->returnTypeSymbol = &Float32Type;

    sin_Float32x2_arg.name = "val"_c;
    sin_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sin_Float32x2.name = "sin"_c;
    sin_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&sin_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sin_Float32x2)->returnTypeSymbol = &Float32x2Type;

    sin_Float32x3_arg.name = "val"_c;
    sin_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sin_Float32x3.name = "sin"_c;
    sin_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&sin_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sin_Float32x3)->returnTypeSymbol = &Float32x3Type;

    sin_Float32x4_arg.name = "val"_c;
    sin_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sin_Float32x4.name = "sin"_c;
    sin_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&sin_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sin_Float32x4)->returnTypeSymbol = &Float32x4Type;

    sin_Float16_arg.name = "val"_c;
    sin_Float16_arg.type = Type::FullType{ Float16Type.name };
    sin_Float16.name = "sin"_c;
    sin_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&sin_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sin_Float16)->returnTypeSymbol = &Float16Type;

    sin_Float16x2_arg.name = "val"_c;
    sin_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sin_Float16x2.name = "sin"_c;
    sin_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&sin_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sin_Float16x2)->returnTypeSymbol = &Float16x2Type;

    sin_Float16x3_arg.name = "val"_c;
    sin_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sin_Float16x3.name = "sin"_c;
    sin_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&sin_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sin_Float16x3)->returnTypeSymbol = &Float16x3Type;

    sin_Float16x4_arg.name = "val"_c;
    sin_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sin_Float16x4.name = "sin"_c;
    sin_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&sin_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sin_Float16x4)->returnTypeSymbol = &Float16x4Type;

    sinh_Float32_arg.name = "val"_c;
    sinh_Float32_arg.type = Type::FullType{ Float32Type.name };
    sinh_Float32.name = "sinh"_c;
    sinh_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&sinh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sinh_Float32)->returnTypeSymbol = &Float32Type;

    sinh_Float32x2_arg.name = "val"_c;
    sinh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sinh_Float32x2.name = "sinh"_c;
    sinh_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&sinh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sinh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    sinh_Float32x3_arg.name = "val"_c;
    sinh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sinh_Float32x3.name = "sinh"_c;
    sinh_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&sinh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sinh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    sinh_Float32x4_arg.name = "val"_c;
    sinh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sinh_Float32x4.name = "sinh"_c;
    sinh_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&sinh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sinh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    sinh_Float16_arg.name = "val"_c;
    sinh_Float16_arg.type = Type::FullType{ Float16Type.name };
    sinh_Float16.name = "sinh"_c;
    sinh_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&sinh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sinh_Float16)->returnTypeSymbol = &Float16Type;

    sinh_Float16x2_arg.name = "val"_c;
    sinh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sinh_Float16x2.name = "sinh"_c;
    sinh_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&sinh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sinh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    sinh_Float16x3_arg.name = "val"_c;
    sinh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sinh_Float16x3.name = "sinh"_c;
    sinh_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&sinh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sinh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    sinh_Float16x4_arg.name = "val"_c;
    sinh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sinh_Float16x4.name = "sinh"_c;
    sinh_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&sinh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sinh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    sqrt_Float32_arg.name = "val"_c;
    sqrt_Float32_arg.type = Type::FullType{ Float32Type.name };
    sqrt_Float32.name = "sqrt"_c;
    sqrt_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&sqrt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sqrt_Float32)->returnTypeSymbol = &Float32Type;

    sqrt_Float32x2_arg.name = "val"_c;
    sqrt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sqrt_Float32x2.name = "sqrt"_c;
    sqrt_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&sqrt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sqrt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    sqrt_Float32x3_arg.name = "val"_c;
    sqrt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sqrt_Float32x3.name = "sqrt"_c;
    sqrt_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&sqrt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sqrt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    sqrt_Float32x4_arg.name = "val"_c;
    sqrt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sqrt_Float32x4.name = "sqrt"_c;
    sqrt_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&sqrt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sqrt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    sqrt_Float16_arg.name = "val"_c;
    sqrt_Float16_arg.type = Type::FullType{ Float16Type.name };
    sqrt_Float16.name = "sqrt"_c;
    sqrt_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&sqrt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sqrt_Float16)->returnTypeSymbol = &Float16Type;

    sqrt_Float16x2_arg.name = "val"_c;
    sqrt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sqrt_Float16x2.name = "sqrt"_c;
    sqrt_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&sqrt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sqrt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    sqrt_Float16x3_arg.name = "val"_c;
    sqrt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sqrt_Float16x3.name = "sqrt"_c;
    sqrt_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&sqrt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sqrt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    sqrt_Float16x4_arg.name = "val"_c;
    sqrt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sqrt_Float16x4.name = "sqrt"_c;
    sqrt_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&sqrt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sqrt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    tan_Float32_arg.name = "val"_c;
    tan_Float32_arg.type = Type::FullType{ Float32Type.name };
    tan_Float32.name = "tan"_c;
    tan_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&tan_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&tan_Float32)->returnTypeSymbol = &Float32Type;

    tan_Float32x2_arg.name = "val"_c;
    tan_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    tan_Float32x2.name = "tan"_c;
    tan_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&tan_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&tan_Float32x2)->returnTypeSymbol = &Float32x2Type;

    tan_Float32x3_arg.name = "val"_c;
    tan_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    tan_Float32x3.name = "tan"_c;
    tan_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&tan_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&tan_Float32x3)->returnTypeSymbol = &Float32x3Type;

    tan_Float32x4_arg.name = "val"_c;
    tan_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    tan_Float32x4.name = "tan"_c;
    tan_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&tan_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&tan_Float32x4)->returnTypeSymbol = &Float32x4Type;

    tan_Float16_arg.name = "val"_c;
    tan_Float16_arg.type = Type::FullType{ Float16Type.name };
    tan_Float16.name = "tan"_c;
    tan_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&tan_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&tan_Float16)->returnTypeSymbol = &Float16Type;

    tan_Float16x2_arg.name = "val"_c;
    tan_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    tan_Float16x2.name = "tan"_c;
    tan_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&tan_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&tan_Float16x2)->returnTypeSymbol = &Float16x2Type;

    tan_Float16x3_arg.name = "val"_c;
    tan_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    tan_Float16x3.name = "tan"_c;
    tan_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&tan_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&tan_Float16x3)->returnTypeSymbol = &Float16x3Type;

    tan_Float16x4_arg.name = "val"_c;
    tan_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    tan_Float16x4.name = "tan"_c;
    tan_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&tan_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&tan_Float16x4)->returnTypeSymbol = &Float16x4Type;

    tanh_Float32_arg.name = "val"_c;
    tanh_Float32_arg.type = Type::FullType{ Float32Type.name };
    tanh_Float32.name = "tanh"_c;
    tanh_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&tanh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&tanh_Float32)->returnTypeSymbol = &Float32Type;

    tanh_Float32x2_arg.name = "val"_c;
    tanh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    tanh_Float32x2.name = "tanh"_c;
    tanh_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&tanh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&tanh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    tanh_Float32x3_arg.name = "val"_c;
    tanh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    tanh_Float32x3.name = "tanh"_c;
    tanh_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&tanh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&tanh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    tanh_Float32x4_arg.name = "val"_c;
    tanh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    tanh_Float32x4.name = "tanh"_c;
    tanh_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&tanh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&tanh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    tanh_Float16_arg.name = "val"_c;
    tanh_Float16_arg.type = Type::FullType{ Float16Type.name };
    tanh_Float16.name = "tanh"_c;
    tanh_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&tanh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&tanh_Float16)->returnTypeSymbol = &Float16Type;

    tanh_Float16x2_arg.name = "val"_c;
    tanh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    tanh_Float16x2.name = "tanh"_c;
    tanh_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&tanh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&tanh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    tanh_Float16x3_arg.name = "val"_c;
    tanh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    tanh_Float16x3.name = "tanh"_c;
    tanh_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&tanh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&tanh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    tanh_Float16x4_arg.name = "val"_c;
    tanh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    tanh_Float16x4.name = "tanh"_c;
    tanh_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&tanh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&tanh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    atan2_Float32_y.name = "y"_c;
    atan2_Float32_y.type = Type::FullType{ Float32Type.name };
    atan2_Float32_x.name = "x"_c;
    atan2_Float32_x.type = Type::FullType{ Float32Type.name };
    atan2_Float32.name = "tanh"_c;
    atan2_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&atan2_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan2_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan2_Float32)->returnTypeSymbol = &Float32Type;

    atan2_Float32x2_y.name = "y"_c;
    atan2_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    atan2_Float32x2_x.name = "x"_c;
    atan2_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    atan2_Float32x2.name = "tanh"_c;
    atan2_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&atan2_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan2_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    atan2_Float32x3_y.name = "y"_c;
    atan2_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    atan2_Float32x3_x.name = "x"_c;
    atan2_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    atan2_Float32x3.name = "tanh"_c;
    atan2_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&atan2_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan2_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    atan2_Float32x4_y.name = "y"_c;
    atan2_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    atan2_Float32x4_x.name = "x"_c;
    atan2_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    atan2_Float32x4.name = "tanh"_c;
    atan2_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&atan2_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan2_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    atan2_Float16_y.name = "y"_c;
    atan2_Float16_y.type = Type::FullType{ Float16Type.name };
    atan2_Float16_x.name = "x"_c;
    atan2_Float16_x.type = Type::FullType{ Float16Type.name };
    atan2_Float16.name = "tanh"_c;
    atan2_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&atan2_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan2_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan2_Float16)->returnTypeSymbol = &Float16Type;

    atan2_Float16x2_y.name = "y"_c;
    atan2_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    atan2_Float16x2_x.name = "x"_c;
    atan2_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    atan2_Float16x2.name = "tanh"_c;
    atan2_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&atan2_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan2_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    atan2_Float16x3_y.name = "y"_c;
    atan2_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    atan2_Float16x3_x.name = "x"_c;
    atan2_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    atan2_Float16x3.name = "tanh"_c;
    atan2_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&atan2_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan2_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    atan2_Float16x4_y.name = "y"_c;
    atan2_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    atan2_Float16x4_x.name = "x"_c;
    atan2_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    atan2_Float16x4.name = "tanh"_c;
    atan2_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&atan2_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan2_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    pow_Float32_arg.name = "val"_c;
    pow_Float32_arg.type = Type::FullType{ Float32Type.name };
    pow_Float32_exp.name = "exponent"_c;
    pow_Float32_exp.type = Type::FullType{ Float32Type.name };
    pow_Float32.name = "pow"_c;
    pow_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&pow_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&pow_Float32_exp)->typeSymbol = &Float32Type;
    Symbol::Resolved(&pow_Float32)->returnTypeSymbol = &Float32Type;

    pow_Float32x2_arg.name = "val"_c;
    pow_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    pow_Float32x2_exp.name = "exponent"_c;
    pow_Float32x2_exp.type = Type::FullType{ Float32x2Type.name };
    pow_Float32x2.name = "pow"_c;
    pow_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&pow_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&pow_Float32x2_exp)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&pow_Float32x2)->returnTypeSymbol = &Float32x2Type;

    pow_Float32x3_arg.name = "val"_c;
    pow_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    pow_Float32x3_exp.name = "exponent"_c;
    pow_Float32x3_exp.type = Type::FullType{ Float32x3Type.name };
    pow_Float32x3.name = "pow"_c;
    pow_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&pow_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&pow_Float32x3_exp)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&pow_Float32x3)->returnTypeSymbol = &Float32x3Type;

    pow_Float32x4_arg.name = "val"_c;
    pow_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    pow_Float32x4_exp.name = "exponent"_c;
    pow_Float32x4_exp.type = Type::FullType{ Float32x4Type.name };
    pow_Float32x4.name = "pow"_c;
    pow_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&pow_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&pow_Float32x4_exp)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&pow_Float32x4)->returnTypeSymbol = &Float32x4Type;

    pow_Float16_arg.name = "val"_c;
    pow_Float16_arg.type = Type::FullType{ Float16Type.name };
    pow_Float16_exp.name = "exponent"_c;
    pow_Float16_exp.type = Type::FullType{ Float16Type.name };
    pow_Float16.name = "pow"_c;
    pow_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&pow_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&pow_Float16_exp)->typeSymbol = &Float16Type;
    Symbol::Resolved(&pow_Float16)->returnTypeSymbol = &Float16Type;

    pow_Float16x2_arg.name = "val"_c;
    pow_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    pow_Float16x2_exp.name = "exponent"_c;
    pow_Float16x2_exp.type = Type::FullType{ Float16x2Type.name };
    pow_Float16x2.name = "pow"_c;
    pow_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&pow_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&pow_Float16x2_exp)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&pow_Float16x2)->returnTypeSymbol = &Float16x2Type;

    pow_Float16x3_arg.name = "val"_c;
    pow_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    pow_Float16x3_exp.name = "exponent"_c;
    pow_Float16x3_exp.type = Type::FullType{ Float16x3Type.name };
    pow_Float16x3.name = "pow"_c;
    pow_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&pow_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&pow_Float16x3_exp)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&pow_Float16x3)->returnTypeSymbol = &Float16x3Type;

    pow_Float16x4_arg.name = "val"_c;
    pow_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    pow_Float16x4_exp.name = "exponent"_c;
    pow_Float16x4_exp.type = Type::FullType{ Float16x4Type.name };
    pow_Float16x4.name = "pow"_c;
    pow_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&pow_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&pow_Float16x4_exp)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&pow_Float16x4)->returnTypeSymbol = &Float16x4Type;

    mad_Float32_arg.name = "val"_c;
    mad_Float32_arg.type = Type::FullType{ Float32Type.name };
    mad_Float32_mul.name = "multiplier"_c;
    mad_Float32_mul.type = Type::FullType{ Float32Type.name };
    mad_Float32_add.name = "addend"_c;
    mad_Float32_add.type = Type::FullType{ Float32Type.name };
    mad_Float32.name = "mad"_c;
    mad_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&mad_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32_mul)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32_add)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32)->returnTypeSymbol = &Float32Type;

    mad_Float32x2_arg.name = "val"_c;
    mad_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2_mul.name = "multiplier"_c;
    mad_Float32x2_mul.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2_add.name = "addend"_c;
    mad_Float32x2_add.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2.name = "mad"_c;
    mad_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&mad_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2_mul)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2_add)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2)->returnTypeSymbol = &Float32x2Type;

    mad_Float32x3_arg.name = "val"_c;
    mad_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3_mul.name = "multiplier"_c;
    mad_Float32x3_mul.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3_add.name = "addend"_c;
    mad_Float32x3_add.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3.name = "mad"_c;
    mad_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&mad_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3_mul)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3_add)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3)->returnTypeSymbol = &Float32x3Type;

    mad_Float32x4_arg.name = "val"_c;
    mad_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4_mul.name = "multiplier"_c;
    mad_Float32x4_mul.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4_add.name = "addend"_c;
    mad_Float32x4_add.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4.name = "mad"_c;
    mad_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&mad_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4_mul)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4_add)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4)->returnTypeSymbol = &Float32x4Type;

    mad_Float16_arg.name = "val"_c;
    mad_Float16_arg.type = Type::FullType{ Float16Type.name };
    mad_Float16_mul.name = "multiplier"_c;
    mad_Float16_mul.type = Type::FullType{ Float16Type.name };
    mad_Float16_add.name = "addend"_c;
    mad_Float16_add.type = Type::FullType{ Float16Type.name };
    mad_Float16.name = "mad"_c;
    mad_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&mad_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16_mul)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16_add)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16)->returnTypeSymbol = &Float16Type;

    mad_Float16x2_arg.name = "val"_c;
    mad_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2_mul.name = "multiplier"_c;
    mad_Float16x2_mul.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2_add.name = "addend"_c;
    mad_Float16x2_add.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2.name = "mad"_c;
    mad_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&mad_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2_mul)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2_add)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2)->returnTypeSymbol = &Float16x2Type;

    mad_Float16x3_arg.name = "val"_c;
    mad_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3_mul.name = "multiplier"_c;
    mad_Float16x3_mul.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3_add.name = "addend"_c;
    mad_Float16x3_add.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3.name = "mad"_c;
    mad_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&mad_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3_mul)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3_add)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3)->returnTypeSymbol = &Float16x3Type;

    mad_Float16x4_arg.name = "val"_c;
    mad_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4_mul.name = "multiplier"_c;
    mad_Float16x4_mul.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4_add.name = "addend"_c;
    mad_Float16x4_add.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4.name = "mad"_c;
    mad_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&mad_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4_mul)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4_add)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4)->returnTypeSymbol = &Float16x4Type;

    mad_Int32_arg.name = "val"_c;
    mad_Int32_arg.type = Type::FullType{ Int32Type.name };
    mad_Int32_mul.name = "multiplier"_c;
    mad_Int32_mul.type = Type::FullType{ Int32Type.name };
    mad_Int32_add.name = "addend"_c;
    mad_Int32_add.type = Type::FullType{ Int32Type.name };
    mad_Int32.name = "mad"_c;
    mad_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&mad_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32_mul)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32_add)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32)->returnTypeSymbol = &Int32Type;

    mad_Int32x2_arg.name = "val"_c;
    mad_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2_mul.name = "multiplier"_c;
    mad_Int32x2_mul.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2_add.name = "addend"_c;
    mad_Int32x2_add.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2.name = "mad"_c;
    mad_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&mad_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2_mul)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2_add)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2)->returnTypeSymbol = &Int32x2Type;

    mad_Int32x3_arg.name = "val"_c;
    mad_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3_mul.name = "multiplier"_c;
    mad_Int32x3_mul.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3_add.name = "addend"_c;
    mad_Int32x3_add.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3.name = "mad"_c;
    mad_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&mad_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3_mul)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3_add)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3)->returnTypeSymbol = &Int32x3Type;

    mad_Int32x4_arg.name = "val"_c;
    mad_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4_mul.name = "multiplier"_c;
    mad_Int32x4_mul.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4_add.name = "addend"_c;
    mad_Int32x4_add.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4.name = "mad"_c;
    mad_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&mad_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4_mul)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4_add)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4)->returnTypeSymbol = &Int32x4Type;

    mad_Int16_arg.name = "val"_c;
    mad_Int16_arg.type = Type::FullType{ Int16Type.name };
    mad_Int16_mul.name = "multiplier"_c;
    mad_Int16_mul.type = Type::FullType{ Int16Type.name };
    mad_Int16_add.name = "addend"_c;
    mad_Int16_add.type = Type::FullType{ Int16Type.name };
    mad_Int16.name = "mad"_c;
    mad_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&mad_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16_mul)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16_add)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16)->returnTypeSymbol = &Int16Type;

    mad_Int16x2_arg.name = "val"_c;
    mad_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2_mul.name = "multiplier"_c;
    mad_Int16x2_mul.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2_add.name = "addend"_c;
    mad_Int16x2_add.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2.name = "mad"_c;
    mad_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&mad_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2_mul)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2_add)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2)->returnTypeSymbol = &Int16x2Type;

    mad_Int16x3_arg.name = "val"_c;
    mad_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3_mul.name = "multiplier"_c;
    mad_Int16x3_mul.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3_add.name = "addend"_c;
    mad_Int16x3_add.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3.name = "mad"_c;
    mad_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&mad_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3_mul)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3_add)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3)->returnTypeSymbol = &Int16x3Type;

    mad_Int16x4_arg.name = "val"_c;
    mad_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4_mul.name = "multiplier"_c;
    mad_Int16x4_mul.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4_add.name = "addend"_c;
    mad_Int16x4_add.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4.name = "mad"_c;
    mad_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&mad_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4_mul)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4_add)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4)->returnTypeSymbol = &Int16x4Type;

    mad_UInt32_arg.name = "val"_c;
    mad_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    mad_UInt32_mul.name = "multiplier"_c;
    mad_UInt32_mul.type = Type::FullType{ UInt32Type.name };
    mad_UInt32_add.name = "addend"_c;
    mad_UInt32_add.type = Type::FullType{ UInt32Type.name };
    mad_UInt32.name = "mad"_c;
    mad_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&mad_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32_mul)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32_add)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32)->returnTypeSymbol = &UInt32Type;

    mad_UInt32x2_arg.name = "val"_c;
    mad_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2_mul.name = "multiplier"_c;
    mad_UInt32x2_mul.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2_add.name = "addend"_c;
    mad_UInt32x2_add.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2.name = "mad"_c;
    mad_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&mad_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2_mul)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2_add)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    mad_UInt32x3_arg.name = "val"_c;
    mad_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3_mul.name = "multiplier"_c;
    mad_UInt32x3_mul.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3_add.name = "addend"_c;
    mad_UInt32x3_add.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3.name = "mad"_c;
    mad_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&mad_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3_mul)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3_add)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    mad_UInt32x4_arg.name = "val"_c;
    mad_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4_mul.name = "multiplier"_c;
    mad_UInt32x4_mul.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4_add.name = "addend"_c;
    mad_UInt32x4_add.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4.name = "mad"_c;
    mad_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&mad_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4_mul)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4_add)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    mad_UInt16_arg.name = "val"_c;
    mad_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    mad_UInt16_mul.name = "multiplier"_c;
    mad_UInt16_mul.type = Type::FullType{ UInt16Type.name };
    mad_UInt16_add.name = "addend"_c;
    mad_UInt16_add.type = Type::FullType{ UInt16Type.name };
    mad_UInt16.name = "mad"_c;
    mad_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&mad_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16_mul)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16_add)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16)->returnTypeSymbol = &UInt16Type;

    mad_UInt16x2_arg.name = "val"_c;
    mad_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2_mul.name = "multiplier"_c;
    mad_UInt16x2_mul.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2_add.name = "addend"_c;
    mad_UInt16x2_add.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2.name = "mad"_c;
    mad_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&mad_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2_mul)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2_add)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    mad_UInt16x3_arg.name = "val"_c;
    mad_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3_mul.name = "multiplier"_c;
    mad_UInt16x3_mul.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3_add.name = "addend"_c;
    mad_UInt16x3_add.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3.name = "mad"_c;
    mad_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&mad_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3_mul)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3_add)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    mad_UInt16x4_arg.name = "val"_c;
    mad_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4_mul.name = "multiplier"_c;
    mad_UInt16x4_mul.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4_add.name = "addend"_c;
    mad_UInt16x4_add.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4.name = "mad"_c;
    mad_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&mad_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4_mul)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4_add)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    dot_Float32x2_x.name = "x"_c;
    dot_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    dot_Float32x2_y.name = "y"_c;
    dot_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    dot_Float32x2.name = "dot"_c;
    dot_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&dot_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&dot_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&dot_Float32x2)->returnTypeSymbol = &Float32Type;

    dot_Float32x3_x.name = "x"_c;
    dot_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    dot_Float32x3_y.name = "y"_c;
    dot_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    dot_Float32x3.name = "dot"_c;
    dot_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&dot_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&dot_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&dot_Float32x3)->returnTypeSymbol = &Float32Type;

    dot_Float32x4_x.name = "x"_c;
    dot_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    dot_Float32x4_y.name = "y"_c;
    dot_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    dot_Float32x4.name = "dot"_c;
    dot_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&dot_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&dot_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&dot_Float32x4)->returnTypeSymbol = &Float32Type;

    dot_Float16x2_x.name = "x"_c;
    dot_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    dot_Float16x2_y.name = "y"_c;
    dot_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    dot_Float16x2.name = "dot"_c;
    dot_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&dot_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&dot_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&dot_Float16x2)->returnTypeSymbol = &Float16Type;

    dot_Float16x3_x.name = "x"_c;
    dot_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    dot_Float16x3_y.name = "y"_c;
    dot_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    dot_Float16x3.name = "dot"_c;
    dot_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&dot_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&dot_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&dot_Float16x3)->returnTypeSymbol = &Float16Type;

    dot_Float16x4_x.name = "x"_c;
    dot_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    dot_Float16x4_y.name = "y"_c;
    dot_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    dot_Float16x4.name = "dot"_c;
    dot_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&dot_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&dot_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&dot_Float16x4)->returnTypeSymbol = &Float16Type;

    reflect_Float32x2_incident.name = "incident"_c;
    reflect_Float32x2_incident.type = Type::FullType{ Float32x2Type.name };
    reflect_Float32x2_normal.name = "normal"_c;
    reflect_Float32x2_normal.type = Type::FullType{ Float32x2Type.name };
    reflect_Float32x2.name = "reflect"_c;
    reflect_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&reflect_Float32x2_incident)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&reflect_Float32x2_normal)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&reflect_Float32x2)->returnTypeSymbol = &Float32x2Type;

    reflect_Float32x3_incident.name = "incident"_c;
    reflect_Float32x3_incident.type = Type::FullType{ Float32x3Type.name };
    reflect_Float32x3_normal.name = "normal"_c;
    reflect_Float32x3_normal.type = Type::FullType{ Float32x3Type.name };
    reflect_Float32x3.name = "reflect"_c;
    reflect_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&reflect_Float32x3_incident)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&reflect_Float32x3_normal)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&reflect_Float32x3)->returnTypeSymbol = &Float32x3Type;

    reflect_Float32x4_incident.name = "incident"_c;
    reflect_Float32x4_incident.type = Type::FullType{ Float32x4Type.name };
    reflect_Float32x4_normal.name = "normal"_c;
    reflect_Float32x4_normal.type = Type::FullType{ Float32x4Type.name };
    reflect_Float32x4.name = "reflect"_c;
    reflect_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&reflect_Float32x4_incident)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&reflect_Float32x4_normal)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&reflect_Float32x4)->returnTypeSymbol = &Float32x4Type;

    reflect_Float16x2_incident.name = "incident"_c;
    reflect_Float16x2_incident.type = Type::FullType{ Float16x2Type.name };
    reflect_Float16x2_normal.name = "normal"_c;
    reflect_Float16x2_normal.type = Type::FullType{ Float16x2Type.name };
    reflect_Float16x2.name = "reflect"_c;
    reflect_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&reflect_Float16x2_incident)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&reflect_Float16x2_normal)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&reflect_Float16x2)->returnTypeSymbol = &Float16x2Type;

    reflect_Float16x3_incident.name = "incident"_c;
    reflect_Float16x3_incident.type = Type::FullType{ Float16x3Type.name };
    reflect_Float16x3_normal.name = "normal"_c;
    reflect_Float16x3_normal.type = Type::FullType{ Float16x3Type.name };
    reflect_Float16x3.name = "reflect"_c;
    reflect_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&reflect_Float16x3_incident)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&reflect_Float16x3_normal)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&reflect_Float16x3)->returnTypeSymbol = &Float16x3Type;

    reflect_Float16x4_incident.name = "incident"_c;
    reflect_Float16x4_incident.type = Type::FullType{ Float16x4Type.name };
    reflect_Float16x4_normal.name = "normal"_c;
    reflect_Float16x4_normal.type = Type::FullType{ Float16x4Type.name };
    reflect_Float16x4.name = "reflect"_c;
    reflect_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&reflect_Float16x4_incident)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&reflect_Float16x4_normal)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&reflect_Float16x4)->returnTypeSymbol = &Float16x4Type;

    refract_Float32x2_incident.name = "incident"_c;
    refract_Float32x2_incident.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2_normal.name = "normal"_c;
    refract_Float32x2_normal.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2_ior.name = "ior"_c;
    refract_Float32x2_ior.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2.name = "refract"_c;
    refract_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&refract_Float32x2_incident)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2_normal)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2_ior)->typeSymbol = &Float32Type;
    Symbol::Resolved(&refract_Float32x2)->returnTypeSymbol = &Float32x2Type;

    refract_Float32x3_incident.name = "incident"_c;
    refract_Float32x3_incident.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3_normal.name = "normal"_c;
    refract_Float32x3_normal.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3_ior.name = "ior"_c;
    refract_Float32x3_ior.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3.name = "refract"_c;
    refract_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&refract_Float32x3_incident)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3_normal)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3_ior)->typeSymbol = &Float32Type;
    Symbol::Resolved(&refract_Float32x3)->returnTypeSymbol = &Float32x3Type;

    refract_Float32x4_incident.name = "incident"_c;
    refract_Float32x4_incident.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4_normal.name = "normal"_c;
    refract_Float32x4_normal.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4_ior.name = "ior"_c;
    refract_Float32x4_ior.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4.name = "refract"_c;
    refract_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&refract_Float32x4_incident)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4_normal)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4_ior)->typeSymbol = &Float32Type;
    Symbol::Resolved(&refract_Float32x4)->returnTypeSymbol = &Float32x4Type;

    refract_Float16x2_incident.name = "incident"_c;
    refract_Float16x2_incident.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2_normal.name = "normal"_c;
    refract_Float16x2_normal.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2_ior.name = "ior"_c;
    refract_Float16x2_ior.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2.name = "refract"_c;
    refract_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&refract_Float16x2_incident)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2_normal)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2_ior)->typeSymbol = &Float16Type;
    Symbol::Resolved(&refract_Float16x2)->returnTypeSymbol = &Float16x2Type;

    refract_Float16x3_incident.name = "incident"_c;
    refract_Float16x3_incident.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3_normal.name = "normal"_c;
    refract_Float16x3_normal.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3_ior.name = "ior"_c;
    refract_Float16x3_ior.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3.name = "refract"_c;
    refract_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&refract_Float16x3_incident)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3_normal)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3_ior)->typeSymbol = &Float16Type;
    Symbol::Resolved(&refract_Float16x3)->returnTypeSymbol = &Float16x3Type;

    refract_Float16x4_incident.name = "incident"_c;
    refract_Float16x4_incident.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4_normal.name = "normal"_c;
    refract_Float16x4_normal.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4_ior.name = "ior"_c;
    refract_Float16x4_ior.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4.name = "refract"_c;
    refract_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&refract_Float16x4_incident)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4_normal)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4_ior)->typeSymbol = &Float16Type;
    Symbol::Resolved(&refract_Float16x4)->returnTypeSymbol = &Float16x4Type;

    cross_Float32x3_v0.name = "v0"_c;
    cross_Float32x3_v0.type = Type::FullType{ Float32x3Type.name };
    cross_Float32x3_v1.name = "v1"_c;
    cross_Float32x3_v1.type = Type::FullType{ Float32x3Type.name };
    cross_Float32x3.name = "cross"_c;
    cross_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&cross_Float32x3_v0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cross_Float32x3_v1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cross_Float32x3)->returnTypeSymbol = &Float32x3Type;

    cross_Float16x3_v0.name = "v0"_c;
    cross_Float16x3_v0.type = Type::FullType{ Float16x3Type.name };
    cross_Float16x3_v1.name = "v1"_c;
    cross_Float16x3_v1.type = Type::FullType{ Float16x3Type.name };
    cross_Float16x3.name = "cross"_c;
    cross_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&cross_Float16x3_v0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cross_Float16x3_v1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cross_Float16x3)->returnTypeSymbol = &Float16x3Type;

    length_Float32x2_arg.name = "val"_c;
    length_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    length_Float32x2.name = "length"_c;
    length_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&length_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&length_Float32x2)->returnTypeSymbol = &Float32x2Type;

    length_Float32x3_arg.name = "val"_c;
    length_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    length_Float32x3.name = "length"_c;
    length_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&length_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&length_Float32x3)->returnTypeSymbol = &Float32x3Type;

    length_Float32x4_arg.name = "val"_c;
    length_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    length_Float32x4.name = "length"_c;
    length_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&length_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&length_Float32x4)->returnTypeSymbol = &Float32x4Type;

    length_Float16x2_arg.name = "val"_c;
    length_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    length_Float16x2.name = "length"_c;
    length_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&length_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&length_Float16x2)->returnTypeSymbol = &Float16x2Type;

    length_Float16x3_arg.name = "val"_c;
    length_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    length_Float16x3.name = "length"_c;
    length_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&length_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&length_Float16x3)->returnTypeSymbol = &Float16x3Type;

    length_Float16x4_arg.name = "val"_c;
    length_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    length_Float16x4.name = "length"_c;
    length_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&length_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&length_Float16x4)->returnTypeSymbol = &Float16x4Type;

    normalize_Float32x2_arg.name = "val"_c;
    normalize_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    normalize_Float32x2.name = "normalize"_c;
    normalize_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&normalize_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&normalize_Float32x2)->returnTypeSymbol = &Float32x2Type;

    normalize_Float32x3_arg.name = "val"_c;
    normalize_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    normalize_Float32x3.name = "normalize"_c;
    normalize_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&normalize_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&normalize_Float32x3)->returnTypeSymbol = &Float32x3Type;

    normalize_Float32x4_arg.name = "val"_c;
    normalize_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    normalize_Float32x4.name = "normalize"_c;
    normalize_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&normalize_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&normalize_Float32x4)->returnTypeSymbol = &Float32x4Type;

    normalize_Float16x2_arg.name = "val"_c;
    normalize_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    normalize_Float16x2.name = "normalize"_c;
    normalize_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&normalize_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&normalize_Float16x2)->returnTypeSymbol = &Float16x2Type;

    normalize_Float16x3_arg.name = "val"_c;
    normalize_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    normalize_Float16x3.name = "normalize"_c;
    normalize_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&normalize_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&normalize_Float16x3)->returnTypeSymbol = &Float16x3Type;

    normalize_Float16x4_arg.name = "val"_c;
    normalize_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    normalize_Float16x4.name = "normalize"_c;
    normalize_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&normalize_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&normalize_Float16x4)->returnTypeSymbol = &Float16x4Type;

    distance_Float32x2_p0.name = "p0"_c;
    distance_Float32x2_p0.type = Type::FullType{ Float32x2Type.name };
    distance_Float32x2_p1.name = "p1"_c;
    distance_Float32x2_p1.type = Type::FullType{ Float32x2Type.name };
    distance_Float32x2.name = "distance"_c;
    distance_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&distance_Float32x2_p0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&distance_Float32x2_p1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&distance_Float32x2)->returnTypeSymbol = &Float32Type;

    distance_Float32x3_p0.name = "p0"_c;
    distance_Float32x3_p0.type = Type::FullType{ Float32x3Type.name };
    distance_Float32x3_p1.name = "p1"_c;
    distance_Float32x3_p1.type = Type::FullType{ Float32x3Type.name };
    distance_Float32x3.name = "distance"_c;
    distance_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&distance_Float32x3_p0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&distance_Float32x3_p1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&distance_Float32x3)->returnTypeSymbol = &Float32Type;

    distance_Float32x4_p0.name = "p0"_c;
    distance_Float32x4_p0.type = Type::FullType{ Float32x4Type.name };
    distance_Float32x4_p1.name = "p1"_c;
    distance_Float32x4_p1.type = Type::FullType{ Float32x4Type.name };
    distance_Float32x4.name = "distance"_c;
    distance_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&distance_Float32x4_p0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&distance_Float32x4_p1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&distance_Float32x4)->returnTypeSymbol = &Float32Type;

    distance_Float16x2_p0.name = "p0"_c;
    distance_Float16x2_p0.type = Type::FullType{ Float16x2Type.name };
    distance_Float16x2_p1.name = "p1"_c;
    distance_Float16x2_p1.type = Type::FullType{ Float16x2Type.name };
    distance_Float16x2.name = "distance"_c;
    distance_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&distance_Float16x2_p0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&distance_Float16x2_p1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&distance_Float16x2)->returnTypeSymbol = &Float16Type;

    distance_Float16x3_p0.name = "p0"_c;
    distance_Float16x3_p0.type = Type::FullType{ Float16x3Type.name };
    distance_Float16x3_p1.name = "p1"_c;
    distance_Float16x3_p1.type = Type::FullType{ Float16x3Type.name };
    distance_Float16x3.name = "distance"_c;
    distance_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&distance_Float16x3_p0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&distance_Float16x3_p1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&distance_Float16x3)->returnTypeSymbol = &Float16Type;

    distance_Float16x4_p0.name = "p0"_c;
    distance_Float16x4_p0.type = Type::FullType{ Float16x4Type.name };
    distance_Float16x4_p1.name = "p1"_c;
    distance_Float16x4_p1.type = Type::FullType{ Float16x4Type.name };
    distance_Float16x4.name = "distance"_c;
    distance_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&distance_Float16x4_p0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&distance_Float16x4_p1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&distance_Float16x4)->returnTypeSymbol = &Float16Type;

    min_Float32_x.name = "x"_c;
    min_Float32_x.type = Type::FullType{ Float32Type.name };
    min_Float32_y.name = "y"_c;
    min_Float32_y.type = Type::FullType{ Float32Type.name };
    min_Float32.name = "min"_c;
    min_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&min_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&min_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&min_Float32)->returnTypeSymbol = &Float32Type;

    min_Float32x2_x.name = "x"_c;
    min_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    min_Float32x2_y.name = "y"_c;
    min_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    min_Float32x2.name = "min"_c;
    min_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&min_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&min_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&min_Float32x2)->returnTypeSymbol = &Float32x2Type;

    min_Float32x3_x.name = "x"_c;
    min_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    min_Float32x3_y.name = "y"_c;
    min_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    min_Float32x3.name = "min"_c;
    min_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&min_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&min_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&min_Float32x3)->returnTypeSymbol = &Float32x3Type;

    min_Float32x4_x.name = "x"_c;
    min_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    min_Float32x4_y.name = "y"_c;
    min_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    min_Float32x4.name = "min"_c;
    min_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&min_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&min_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&min_Float32x4)->returnTypeSymbol = &Float32x4Type;

    min_Float16_x.name = "x"_c;
    min_Float16_x.type = Type::FullType{ Float16Type.name };
    min_Float16_y.name = "y"_c;
    min_Float16_y.type = Type::FullType{ Float16Type.name };
    min_Float16.name = "min"_c;
    min_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&min_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&min_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&min_Float16)->returnTypeSymbol = &Float16Type;

    min_Float16x2_x.name = "x"_c;
    min_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    min_Float16x2_y.name = "y"_c;
    min_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    min_Float16x2.name = "min"_c;
    min_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&min_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&min_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&min_Float16x2)->returnTypeSymbol = &Float16x2Type;

    min_Float16x3_x.name = "x"_c;
    min_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    min_Float16x3_y.name = "y"_c;
    min_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    min_Float16x3.name = "min"_c;
    min_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&min_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&min_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&min_Float16x3)->returnTypeSymbol = &Float16x3Type;

    min_Float16x4_x.name = "x"_c;
    min_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    min_Float16x4_y.name = "y"_c;
    min_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    min_Float16x4.name = "min"_c;
    min_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&min_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&min_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&min_Float16x4)->returnTypeSymbol = &Float16x4Type;

    min_Int32_x.name = "x"_c;
    min_Int32_x.type = Type::FullType{ Int32Type.name };
    min_Int32_y.name = "y"_c;
    min_Int32_y.type = Type::FullType{ Int32Type.name };
    min_Int32.name = "min"_c;
    min_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&min_Int32_x)->typeSymbol = &Int32Type;
    Symbol::Resolved(&min_Int32_y)->typeSymbol = &Int32Type;
    Symbol::Resolved(&min_Int32)->returnTypeSymbol = &Int32Type;

    min_Int32x2_x.name = "x"_c;
    min_Int32x2_x.type = Type::FullType{ Int32x2Type.name };
    min_Int32x2_y.name = "y"_c;
    min_Int32x2_y.type = Type::FullType{ Int32x2Type.name };
    min_Int32x2.name = "min"_c;
    min_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&min_Int32x2_x)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&min_Int32x2_y)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&min_Int32x2)->returnTypeSymbol = &Int32x2Type;

    min_Int32x3_x.name = "x"_c;
    min_Int32x3_x.type = Type::FullType{ Int32x3Type.name };
    min_Int32x3_y.name = "y"_c;
    min_Int32x3_y.type = Type::FullType{ Int32x3Type.name };
    min_Int32x3.name = "min"_c;
    min_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&min_Int32x3_x)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&min_Int32x3_y)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&min_Int32x3)->returnTypeSymbol = &Int32x3Type;

    min_Int32x4_x.name = "x"_c;
    min_Int32x4_x.type = Type::FullType{ Int32x4Type.name };
    min_Int32x4_y.name = "y"_c;
    min_Int32x4_y.type = Type::FullType{ Int32x4Type.name };
    min_Int32x4.name = "min"_c;
    min_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&min_Int32x4_x)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&min_Int32x4_y)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&min_Int32x4)->returnTypeSymbol = &Int32x4Type;

    min_Int16_x.name = "x"_c;
    min_Int16_x.type = Type::FullType{ Int16Type.name };
    min_Int16_y.name = "y"_c;
    min_Int16_y.type = Type::FullType{ Int16Type.name };
    min_Int16.name = "min"_c;
    min_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&min_Int16_x)->typeSymbol = &Int16Type;
    Symbol::Resolved(&min_Int16_y)->typeSymbol = &Int16Type;
    Symbol::Resolved(&min_Int16)->returnTypeSymbol = &Int16Type;

    min_Int16x2_x.name = "x"_c;
    min_Int16x2_x.type = Type::FullType{ Int16x2Type.name };
    min_Int16x2_y.name = "y"_c;
    min_Int16x2_y.type = Type::FullType{ Int16x2Type.name };
    min_Int16x2.name = "min"_c;
    min_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&min_Int16x2_x)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&min_Int16x2_y)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&min_Int16x2)->returnTypeSymbol = &Int16x2Type;

    min_Int16x3_x.name = "x"_c;
    min_Int16x3_x.type = Type::FullType{ Int16x3Type.name };
    min_Int16x3_y.name = "y"_c;
    min_Int16x3_y.type = Type::FullType{ Int16x3Type.name };
    min_Int16x3.name = "min"_c;
    min_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&min_Int16x3_x)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&min_Int16x3_y)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&min_Int16x3)->returnTypeSymbol = &Int16x3Type;

    min_Int16x4_x.name = "x"_c;
    min_Int16x4_x.type = Type::FullType{ Int16x4Type.name };
    min_Int16x4_y.name = "y"_c;
    min_Int16x4_y.type = Type::FullType{ Int16x4Type.name };
    min_Int16x4.name = "min"_c;
    min_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&min_Int16x4_x)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&min_Int16x4_y)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&min_Int16x4)->returnTypeSymbol = &Int16x4Type;

    min_UInt32_x.name = "x"_c;
    min_UInt32_x.type = Type::FullType{ UInt32Type.name };
    min_UInt32_y.name = "y"_c;
    min_UInt32_y.type = Type::FullType{ UInt32Type.name };
    min_UInt32.name = "min"_c;
    min_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&min_UInt32_x)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&min_UInt32_y)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&min_UInt32)->returnTypeSymbol = &UInt32Type;

    min_UInt32x2_x.name = "x"_c;
    min_UInt32x2_x.type = Type::FullType{ UInt32x2Type.name };
    min_UInt32x2_y.name = "y"_c;
    min_UInt32x2_y.type = Type::FullType{ UInt32x2Type.name };
    min_UInt32x2.name = "min"_c;
    min_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&min_UInt32x2_x)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&min_UInt32x2_y)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&min_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    min_UInt32x3_x.name = "x"_c;
    min_UInt32x3_x.type = Type::FullType{ UInt32x3Type.name };
    min_UInt32x3_y.name = "y"_c;
    min_UInt32x3_y.type = Type::FullType{ UInt32x3Type.name };
    min_UInt32x3.name = "min"_c;
    min_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&min_UInt32x3_x)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&min_UInt32x3_y)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&min_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    min_UInt32x4_x.name = "x"_c;
    min_UInt32x4_x.type = Type::FullType{ UInt32x4Type.name };
    min_UInt32x4_y.name = "y"_c;
    min_UInt32x4_y.type = Type::FullType{ UInt32x4Type.name };
    min_UInt32x4.name = "min"_c;
    min_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&min_UInt32x4_x)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&min_UInt32x4_y)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&min_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    min_UInt16_x.name = "x"_c;
    min_UInt16_x.type = Type::FullType{ UInt16Type.name };
    min_UInt16_y.name = "y"_c;
    min_UInt16_y.type = Type::FullType{ UInt16Type.name };
    min_UInt16.name = "min"_c;
    min_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&min_UInt16_x)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&min_UInt16_y)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&min_UInt16)->returnTypeSymbol = &UInt16Type;

    min_UInt16x2_x.name = "x"_c;
    min_UInt16x2_x.type = Type::FullType{ UInt16x2Type.name };
    min_UInt16x2_y.name = "y"_c;
    min_UInt16x2_y.type = Type::FullType{ UInt16x2Type.name };
    min_UInt16x2.name = "min"_c;
    min_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&min_UInt16x2_x)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&min_UInt16x2_y)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&min_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    min_UInt16x3_x.name = "x"_c;
    min_UInt16x3_x.type = Type::FullType{ UInt16x3Type.name };
    min_UInt16x3_y.name = "y"_c;
    min_UInt16x3_y.type = Type::FullType{ UInt16x3Type.name };
    min_UInt16x3.name = "min"_c;
    min_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&min_UInt16x3_x)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&min_UInt16x3_y)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&min_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    min_UInt16x4_x.name = "x"_c;
    min_UInt16x4_x.type = Type::FullType{ UInt16x4Type.name };
    min_UInt16x4_y.name = "y"_c;
    min_UInt16x4_y.type = Type::FullType{ UInt16x4Type.name };
    min_UInt16x4.name = "min"_c;
    min_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&min_UInt16x4_x)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&min_UInt16x4_y)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&min_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    max_Float32_x.name = "x"_c;
    max_Float32_x.type = Type::FullType{ Float32Type.name };
    max_Float32_y.name = "y"_c;
    max_Float32_y.type = Type::FullType{ Float32Type.name };
    max_Float32.name = "max"_c;
    max_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&max_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&max_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&max_Float32)->returnTypeSymbol = &Float32Type;

    max_Float32x2_x.name = "x"_c;
    max_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    max_Float32x2_y.name = "y"_c;
    max_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    max_Float32x2.name = "max"_c;
    max_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&max_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&max_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&max_Float32x2)->returnTypeSymbol = &Float32x2Type;

    max_Float32x3_x.name = "x"_c;
    max_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    max_Float32x3_y.name = "y"_c;
    max_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    max_Float32x3.name = "max"_c;
    max_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&max_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&max_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&max_Float32x3)->returnTypeSymbol = &Float32x3Type;

    max_Float32x4_x.name = "x"_c;
    max_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    max_Float32x4_y.name = "y"_c;
    max_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    max_Float32x4.name = "max"_c;
    max_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&max_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&max_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&max_Float32x4)->returnTypeSymbol = &Float32x4Type;

    max_Float16_x.name = "x"_c;
    max_Float16_x.type = Type::FullType{ Float16Type.name };
    max_Float16_y.name = "y"_c;
    max_Float16_y.type = Type::FullType{ Float16Type.name };
    max_Float16.name = "max"_c;
    max_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&max_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&max_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&max_Float16)->returnTypeSymbol = &Float16Type;

    max_Float16x2_x.name = "x"_c;
    max_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    max_Float16x2_y.name = "y"_c;
    max_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    max_Float16x2.name = "max"_c;
    max_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&max_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&max_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&max_Float16x2)->returnTypeSymbol = &Float16x2Type;

    max_Float16x3_x.name = "x"_c;
    max_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    max_Float16x3_y.name = "y"_c;
    max_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    max_Float16x3.name = "max"_c;
    max_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&max_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&max_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&max_Float16x3)->returnTypeSymbol = &Float16x3Type;

    max_Float16x4_x.name = "x"_c;
    max_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    max_Float16x4_y.name = "y"_c;
    max_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    max_Float16x4.name = "max"_c;
    max_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&max_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&max_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&max_Float16x4)->returnTypeSymbol = &Float16x4Type;

    max_Int32_x.name = "x"_c;
    max_Int32_x.type = Type::FullType{ Int32Type.name };
    max_Int32_y.name = "y"_c;
    max_Int32_y.type = Type::FullType{ Int32Type.name };
    max_Int32.name = "max"_c;
    max_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&max_Int32_x)->typeSymbol = &Int32Type;
    Symbol::Resolved(&max_Int32_y)->typeSymbol = &Int32Type;
    Symbol::Resolved(&max_Int32)->returnTypeSymbol = &Int32Type;

    max_Int32x2_x.name = "x"_c;
    max_Int32x2_x.type = Type::FullType{ Int32x2Type.name };
    max_Int32x2_y.name = "y"_c;
    max_Int32x2_y.type = Type::FullType{ Int32x2Type.name };
    max_Int32x2.name = "max"_c;
    max_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&max_Int32x2_x)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&max_Int32x2_y)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&max_Int32x2)->returnTypeSymbol = &Int32x2Type;

    max_Int32x3_x.name = "x"_c;
    max_Int32x3_x.type = Type::FullType{ Int32x3Type.name };
    max_Int32x3_y.name = "y"_c;
    max_Int32x3_y.type = Type::FullType{ Int32x3Type.name };
    max_Int32x3.name = "max"_c;
    max_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&max_Int32x3_x)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&max_Int32x3_y)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&max_Int32x3)->returnTypeSymbol = &Int32x3Type;

    max_Int32x4_x.name = "x"_c;
    max_Int32x4_x.type = Type::FullType{ Int32x4Type.name };
    max_Int32x4_y.name = "y"_c;
    max_Int32x4_y.type = Type::FullType{ Int32x4Type.name };
    max_Int32x4.name = "max"_c;
    max_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&max_Int32x4_x)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&max_Int32x4_y)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&max_Int32x4)->returnTypeSymbol = &Int32x4Type;

    max_Int16_x.name = "x"_c;
    max_Int16_x.type = Type::FullType{ Int16Type.name };
    max_Int16_y.name = "y"_c;
    max_Int16_y.type = Type::FullType{ Int16Type.name };
    max_Int16.name = "max"_c;
    max_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&max_Int16_x)->typeSymbol = &Int16Type;
    Symbol::Resolved(&max_Int16_y)->typeSymbol = &Int16Type;
    Symbol::Resolved(&max_Int16)->returnTypeSymbol = &Int16Type;

    max_Int16x2_x.name = "x"_c;
    max_Int16x2_x.type = Type::FullType{ Int16x2Type.name };
    max_Int16x2_y.name = "y"_c;
    max_Int16x2_y.type = Type::FullType{ Int16x2Type.name };
    max_Int16x2.name = "max"_c;
    max_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&max_Int16x2_x)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&max_Int16x2_y)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&max_Int16x2)->returnTypeSymbol = &Int16x2Type;

    max_Int16x3_x.name = "x"_c;
    max_Int16x3_x.type = Type::FullType{ Int16x3Type.name };
    max_Int16x3_y.name = "y"_c;
    max_Int16x3_y.type = Type::FullType{ Int16x3Type.name };
    max_Int16x3.name = "max"_c;
    max_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&max_Int16x3_x)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&max_Int16x3_y)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&max_Int16x3)->returnTypeSymbol = &Int16x3Type;

    max_Int16x4_x.name = "x"_c;
    max_Int16x4_x.type = Type::FullType{ Int16x4Type.name };
    max_Int16x4_y.name = "y"_c;
    max_Int16x4_y.type = Type::FullType{ Int16x4Type.name };
    max_Int16x4.name = "max"_c;
    max_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&max_Int16x4_x)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&max_Int16x4_y)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&max_Int16x4)->returnTypeSymbol = &Int16x4Type;

    max_UInt32_x.name = "x"_c;
    max_UInt32_x.type = Type::FullType{ UInt32Type.name };
    max_UInt32_y.name = "y"_c;
    max_UInt32_y.type = Type::FullType{ UInt32Type.name };
    max_UInt32.name = "max"_c;
    max_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&max_UInt32_x)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&max_UInt32_y)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&max_UInt32)->returnTypeSymbol = &UInt32Type;

    max_UInt32x2_x.name = "x"_c;
    max_UInt32x2_x.type = Type::FullType{ UInt32x2Type.name };
    max_UInt32x2_y.name = "y"_c;
    max_UInt32x2_y.type = Type::FullType{ UInt32x2Type.name };
    max_UInt32x2.name = "max"_c;
    max_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&max_UInt32x2_x)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&max_UInt32x2_y)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&max_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    max_UInt32x3_x.name = "x"_c;
    max_UInt32x3_x.type = Type::FullType{ UInt32x3Type.name };
    max_UInt32x3_y.name = "y"_c;
    max_UInt32x3_y.type = Type::FullType{ UInt32x3Type.name };
    max_UInt32x3.name = "max"_c;
    max_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&max_UInt32x3_x)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&max_UInt32x3_y)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&max_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    max_UInt32x4_x.name = "x"_c;
    max_UInt32x4_x.type = Type::FullType{ UInt32x4Type.name };
    max_UInt32x4_y.name = "y"_c;
    max_UInt32x4_y.type = Type::FullType{ UInt32x4Type.name };
    max_UInt32x4.name = "max"_c;
    max_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&max_UInt32x4_x)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&max_UInt32x4_y)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&max_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    max_UInt16_x.name = "x"_c;
    max_UInt16_x.type = Type::FullType{ UInt16Type.name };
    max_UInt16_y.name = "y"_c;
    max_UInt16_y.type = Type::FullType{ UInt16Type.name };
    max_UInt16.name = "max"_c;
    max_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&max_UInt16_x)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&max_UInt16_y)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&max_UInt16)->returnTypeSymbol = &UInt16Type;

    max_UInt16x2_x.name = "x"_c;
    max_UInt16x2_x.type = Type::FullType{ UInt16x2Type.name };
    max_UInt16x2_y.name = "y"_c;
    max_UInt16x2_y.type = Type::FullType{ UInt16x2Type.name };
    max_UInt16x2.name = "max"_c;
    max_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&max_UInt16x2_x)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&max_UInt16x2_y)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&max_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    max_UInt16x3_x.name = "x"_c;
    max_UInt16x3_x.type = Type::FullType{ UInt16x3Type.name };
    max_UInt16x3_y.name = "y"_c;
    max_UInt16x3_y.type = Type::FullType{ UInt16x3Type.name };
    max_UInt16x3.name = "max"_c;
    max_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&max_UInt16x3_x)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&max_UInt16x3_y)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&max_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    max_UInt16x4_x.name = "x"_c;
    max_UInt16x4_x.type = Type::FullType{ UInt16x4Type.name };
    max_UInt16x4_y.name = "y"_c;
    max_UInt16x4_y.type = Type::FullType{ UInt16x4Type.name };
    max_UInt16x4.name = "max"_c;
    max_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&max_UInt16x4_x)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&max_UInt16x4_y)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&max_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    clamp_Float32_val.name = "val"_c;
    clamp_Float32_val.type = Type::FullType{ Float32Type.name };
    clamp_Float32_min.name = "min"_c;
    clamp_Float32_min.type = Type::FullType{ Float32Type.name };
    clamp_Float32_max.name = "max"_c;
    clamp_Float32_max.type = Type::FullType{ Float32Type.name };
    clamp_Float32.name = "clamp"_c;
    clamp_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&clamp_Float32_val)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32_min)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32_max)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32)->returnTypeSymbol = &Float32Type;

    clamp_Float32x2_val.name = "val"_c;
    clamp_Float32x2_val.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2_min.name = "min"_c;
    clamp_Float32x2_min.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2_max.name = "max"_c;
    clamp_Float32x2_max.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2.name = "clamp"_c;
    clamp_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&clamp_Float32x2_val)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2_min)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2_max)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    clamp_Float32x3_val.name = "val"_c;
    clamp_Float32x3_val.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3_min.name = "min"_c;
    clamp_Float32x3_min.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3_max.name = "max"_c;
    clamp_Float32x3_max.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3.name = "clamp"_c;
    clamp_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&clamp_Float32x3_val)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3_min)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3_max)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    clamp_Float32x4_val.name = "val"_c;
    clamp_Float32x4_val.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4_min.name = "min"_c;
    clamp_Float32x4_min.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4_max.name = "max"_c;
    clamp_Float32x4_max.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4.name = "clamp"_c;
    clamp_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&clamp_Float32x4_val)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4_min)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4_max)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    clamp_Float16_val.name = "val"_c;
    clamp_Float16_val.type = Type::FullType{ Float16Type.name };
    clamp_Float16_min.name = "min"_c;
    clamp_Float16_min.type = Type::FullType{ Float16Type.name };
    clamp_Float16_max.name = "max"_c;
    clamp_Float16_max.type = Type::FullType{ Float16Type.name };
    clamp_Float16.name = "clamp"_c;
    clamp_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&clamp_Float16_val)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16_min)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16_max)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16)->returnTypeSymbol = &Float16Type;

    clamp_Float16x2_val.name = "val"_c;
    clamp_Float16x2_val.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2_min.name = "min"_c;
    clamp_Float16x2_min.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2_max.name = "max"_c;
    clamp_Float16x2_max.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2.name = "clamp"_c;
    clamp_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&clamp_Float16x2_val)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2_min)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2_max)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    clamp_Float16x3_val.name = "val"_c;
    clamp_Float16x3_val.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3_min.name = "min"_c;
    clamp_Float16x3_min.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3_max.name = "max"_c;
    clamp_Float16x3_max.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3.name = "clamp"_c;
    clamp_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&clamp_Float16x3_val)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3_min)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3_max)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    clamp_Float16x4_val.name = "val"_c;
    clamp_Float16x4_val.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4_min.name = "min"_c;
    clamp_Float16x4_min.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4_max.name = "max"_c;
    clamp_Float16x4_max.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4.name = "clamp"_c;
    clamp_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&clamp_Float16x4_val)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4_min)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4_max)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    clamp_Int32_val.name = "val"_c;
    clamp_Int32_val.type = Type::FullType{ Int32Type.name };
    clamp_Int32_min.name = "min"_c;
    clamp_Int32_min.type = Type::FullType{ Int32Type.name };
    clamp_Int32_max.name = "max"_c;
    clamp_Int32_max.type = Type::FullType{ Int32Type.name };
    clamp_Int32.name = "clamp"_c;
    clamp_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&clamp_Int32_val)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32_min)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32_max)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32)->returnTypeSymbol = &Int32Type;

    clamp_Int32x2_val.name = "val"_c;
    clamp_Int32x2_val.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2_min.name = "min"_c;
    clamp_Int32x2_min.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2_max.name = "max"_c;
    clamp_Int32x2_max.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2.name = "clamp"_c;
    clamp_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&clamp_Int32x2_val)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2_min)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2_max)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32x2)->returnTypeSymbol = &Int32x2Type;

    clamp_Int32x3_val.name = "val"_c;
    clamp_Int32x3_val.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3_min.name = "min"_c;
    clamp_Int32x3_min.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3_max.name = "max"_c;
    clamp_Int32x3_max.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3.name = "clamp"_c;
    clamp_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&clamp_Int32x3_val)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3_min)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3_max)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32x3)->returnTypeSymbol = &Int32x3Type;

    clamp_Int32x4_val.name = "val"_c;
    clamp_Int32x4_val.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4_min.name = "min"_c;
    clamp_Int32x4_min.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4_max.name = "max"_c;
    clamp_Int32x4_max.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4.name = "clamp"_c;
    clamp_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&clamp_Int32x4_val)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4_min)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4_max)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32x4)->returnTypeSymbol = &Int32x4Type;

    clamp_Int16_val.name = "val"_c;
    clamp_Int16_val.type = Type::FullType{ Int16Type.name };
    clamp_Int16_min.name = "min"_c;
    clamp_Int16_min.type = Type::FullType{ Int16Type.name };
    clamp_Int16_max.name = "max"_c;
    clamp_Int16_max.type = Type::FullType{ Int16Type.name };
    clamp_Int16.name = "clamp"_c;
    clamp_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&clamp_Int16_val)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16_min)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16_max)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16)->returnTypeSymbol = &Int16Type;

    clamp_Int16x2_val.name = "val"_c;
    clamp_Int16x2_val.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2_min.name = "min"_c;
    clamp_Int16x2_min.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2_max.name = "max"_c;
    clamp_Int16x2_max.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2.name = "clamp"_c;
    clamp_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&clamp_Int16x2_val)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2_min)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2_max)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16x2)->returnTypeSymbol = &Int16x2Type;

    clamp_Int16x3_val.name = "val"_c;
    clamp_Int16x3_val.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3_min.name = "min"_c;
    clamp_Int16x3_min.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3_max.name = "max"_c;
    clamp_Int16x3_max.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3.name = "clamp"_c;
    clamp_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&clamp_Int16x3_val)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3_min)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3_max)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16x3)->returnTypeSymbol = &Int16x3Type;

    clamp_Int16x4_val.name = "val"_c;
    clamp_Int16x4_val.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4_min.name = "min"_c;
    clamp_Int16x4_min.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4_max.name = "max"_c;
    clamp_Int16x4_max.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4.name = "clamp"_c;
    clamp_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&clamp_Int16x4_val)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4_min)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4_max)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16x4)->returnTypeSymbol = &Int16x4Type;

    clamp_UInt32_val.name = "val"_c;
    clamp_UInt32_val.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32_min.name = "min"_c;
    clamp_UInt32_min.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32_max.name = "max"_c;
    clamp_UInt32_max.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32.name = "clamp"_c;
    clamp_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&clamp_UInt32_val)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32_min)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32_max)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32)->returnTypeSymbol = &UInt32Type;

    clamp_UInt32x2_val.name = "val"_c;
    clamp_UInt32x2_val.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2_min.name = "min"_c;
    clamp_UInt32x2_min.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2_max.name = "max"_c;
    clamp_UInt32x2_max.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2.name = "clamp"_c;
    clamp_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&clamp_UInt32x2_val)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2_min)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2_max)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    clamp_UInt32x3_val.name = "val"_c;
    clamp_UInt32x3_val.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3_min.name = "min"_c;
    clamp_UInt32x3_min.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3_max.name = "max"_c;
    clamp_UInt32x3_max.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3.name = "clamp"_c;
    clamp_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&clamp_UInt32x3_val)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3_min)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3_max)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    clamp_UInt32x4_val.name = "val"_c;
    clamp_UInt32x4_val.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4_min.name = "min"_c;
    clamp_UInt32x4_min.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4_max.name = "max"_c;
    clamp_UInt32x4_max.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4.name = "clamp"_c;
    clamp_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&clamp_UInt32x4_val)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4_min)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4_max)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    clamp_UInt16_val.name = "val"_c;
    clamp_UInt16_val.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16_min.name = "min"_c;
    clamp_UInt16_min.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16_max.name = "max"_c;
    clamp_UInt16_max.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16.name = "clamp"_c;
    clamp_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&clamp_UInt16_val)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16_min)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16_max)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16)->returnTypeSymbol = &UInt16Type;

    clamp_UInt16x2_val.name = "val"_c;
    clamp_UInt16x2_val.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2_min.name = "min"_c;
    clamp_UInt16x2_min.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2_max.name = "max"_c;
    clamp_UInt16x2_max.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2.name = "clamp"_c;
    clamp_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&clamp_UInt16x2_val)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2_min)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2_max)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    clamp_UInt16x3_val.name = "val"_c;
    clamp_UInt16x3_val.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3_min.name = "min"_c;
    clamp_UInt16x3_min.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3_max.name = "max"_c;
    clamp_UInt16x3_max.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3.name = "clamp"_c;
    clamp_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&clamp_UInt16x3_val)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3_min)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3_max)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    clamp_UInt16x4_val.name = "val"_c;
    clamp_UInt16x4_val.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4_min.name = "min"_c;
    clamp_UInt16x4_min.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4_max.name = "max"_c;
    clamp_UInt16x4_max.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4.name = "clamp"_c;
    clamp_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&clamp_UInt16x4_val)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4_min)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4_max)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    lerp_Float32x2_a.name = "a"_c;
    lerp_Float32x2_a.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2_b.name = "b"_c;
    lerp_Float32x2_b.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2_t.name = "t"_c;
    lerp_Float32x2_t.type = Type::FullType{ Float32Type.name };
    lerp_Float32x2.name = "lerp"_c;
    lerp_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&lerp_Float32x2_a)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2_b)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2_t)->typeSymbol = &Float32Type;
    Symbol::Resolved(&lerp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    lerp_Float32x3_a.name = "a"_c;
    lerp_Float32x3_a.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3_b.name = "b"_c;
    lerp_Float32x3_b.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3_t.name = "t"_c;
    lerp_Float32x3_t.type = Type::FullType{ Float32Type.name };
    lerp_Float32x3.name = "lerp"_c;
    lerp_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&lerp_Float32x3_a)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3_b)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3_t)->typeSymbol = &Float32Type;
    Symbol::Resolved(&lerp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    lerp_Float32x4_a.name = "a"_c;
    lerp_Float32x4_a.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4_b.name = "b"_c;
    lerp_Float32x4_b.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4_t.name = "t"_c;
    lerp_Float32x4_t.type = Type::FullType{ Float32Type.name };
    lerp_Float32x4.name = "lerp"_c;
    lerp_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&lerp_Float32x4_a)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4_b)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4_t)->typeSymbol = &Float32Type;
    Symbol::Resolved(&lerp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    lerp_Float16x2_a.name = "a"_c;
    lerp_Float16x2_a.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2_b.name = "b"_c;
    lerp_Float16x2_b.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2_t.name = "t"_c;
    lerp_Float16x2_t.type = Type::FullType{ Float16Type.name };
    lerp_Float16x2.name = "lerp"_c;
    lerp_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&lerp_Float16x2_a)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2_b)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2_t)->typeSymbol = &Float16Type;
    Symbol::Resolved(&lerp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    lerp_Float16x3_a.name = "a"_c;
    lerp_Float16x3_a.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3_b.name = "b"_c;
    lerp_Float16x3_b.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3_t.name = "t"_c;
    lerp_Float16x3_t.type = Type::FullType{ Float16Type.name };
    lerp_Float16x3.name = "lerp"_c;
    lerp_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&lerp_Float16x3_a)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3_b)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3_t)->typeSymbol = &Float16Type;
    Symbol::Resolved(&lerp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    lerp_Float16x4_a.name = "a"_c;
    lerp_Float16x4_a.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4_b.name = "b"_c;
    lerp_Float16x4_b.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4_t.name = "t"_c;
    lerp_Float16x4_t.type = Type::FullType{ Float16Type.name };
    lerp_Float16x4.name = "lerp"_c;
    lerp_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&lerp_Float16x4_a)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4_b)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4_t)->typeSymbol = &Float16Type;
    Symbol::Resolved(&lerp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    step_Float32_edge.name = "edge"_c;
    step_Float32_edge.type = Type::FullType{ Float32Type.name };
    step_Float32_x.name = "x"_c;
    step_Float32_x.type = Type::FullType{ Float32Type.name };
    step_Float32.name = "step"_c;
    step_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&step_Float32_edge)->typeSymbol = &Float32Type;
    Symbol::Resolved(&step_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&step_Float32)->returnTypeSymbol = &Float32Type;

    step_Float32x2_edge.name = "edge"_c;
    step_Float32x2_edge.type = Type::FullType{ Float32x2Type.name };
    step_Float32x2_x.name = "x"_c;
    step_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    step_Float32x2.name = "step"_c;
    step_Float32x2.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&step_Float32x2_edge)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&step_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&step_Float32x2)->returnTypeSymbol = &Float32x2Type;

    step_Float32x3_edge.name = "edge"_c;
    step_Float32x3_edge.type = Type::FullType{ Float32x3Type.name };
    step_Float32x3_x.name = "x"_c;
    step_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    step_Float32x3.name = "step"_c;
    step_Float32x3.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&step_Float32x3_edge)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&step_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&step_Float32x3)->returnTypeSymbol = &Float32x3Type;

    step_Float32x4_edge.name = "edge"_c;
    step_Float32x4_edge.type = Type::FullType{ Float32x4Type.name };
    step_Float32x4_x.name = "x"_c;
    step_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    step_Float32x4.name = "step"_c;
    step_Float32x4.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&step_Float32x4_edge)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&step_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&step_Float32x4)->returnTypeSymbol = &Float32x4Type;

    step_Float16_edge.name = "edge"_c;
    step_Float16_edge.type = Type::FullType{ Float16Type.name };
    step_Float16_x.name = "x"_c;
    step_Float16_x.type = Type::FullType{ Float16Type.name };
    step_Float16.name = "step"_c;
    step_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&step_Float16_edge)->typeSymbol = &Float16Type;
    Symbol::Resolved(&step_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&step_Float16)->returnTypeSymbol = &Float16Type;

    step_Float16x2_edge.name = "edge"_c;
    step_Float16x2_edge.type = Type::FullType{ Float16x2Type.name };
    step_Float16x2_x.name = "x"_c;
    step_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    step_Float16x2.name = "step"_c;
    step_Float16x2.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&step_Float16x2_edge)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&step_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&step_Float16x2)->returnTypeSymbol = &Float16x2Type;

    step_Float16x3_edge.name = "edge"_c;
    step_Float16x3_edge.type = Type::FullType{ Float16x3Type.name };
    step_Float16x3_x.name = "x"_c;
    step_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    step_Float16x3.name = "step"_c;
    step_Float16x3.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&step_Float16x3_edge)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&step_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&step_Float16x3)->returnTypeSymbol = &Float16x3Type;

    step_Float16x4_edge.name = "edge"_c;
    step_Float16x4_edge.type = Type::FullType{ Float16x4Type.name };
    step_Float16x4_x.name = "x"_c;
    step_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    step_Float16x4.name = "step"_c;
    step_Float16x4.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&step_Float16x4_edge)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&step_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&step_Float16x4)->returnTypeSymbol = &Float16x4Type;

    smoothstep_Float32_edge0.name = "edge0"_c;
    smoothstep_Float32_edge0.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32_edge1.name = "edge1"_c;
    smoothstep_Float32_edge1.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32_x.name = "x"_c;
    smoothstep_Float32_x.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32.name = "smoothstep"_c;
    smoothstep_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&smoothstep_Float32_edge0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32_edge1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32)->returnTypeSymbol = &Float32Type;

    smoothstep_Float32x2_edge0.name = "edge0"_c;
    smoothstep_Float32x2_edge0.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2_edge1.name = "edge1"_c;
    smoothstep_Float32x2_edge1.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2_x.name = "x"_c;
    smoothstep_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2.name = "smoothstep"_c;
    smoothstep_Float32x2.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&smoothstep_Float32x2_edge0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2_edge1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2)->returnTypeSymbol = &Float32x2Type;

    smoothstep_Float32x3_edge0.name = "edge0"_c;
    smoothstep_Float32x3_edge0.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3_edge1.name = "edge1"_c;
    smoothstep_Float32x3_edge1.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3_x.name = "x"_c;
    smoothstep_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3.name = "smoothstep"_c;
    smoothstep_Float32x3.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&smoothstep_Float32x3_edge0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3_edge1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3)->returnTypeSymbol = &Float32x3Type;

    smoothstep_Float32x4_edge0.name = "edge0"_c;
    smoothstep_Float32x4_edge0.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4_edge1.name = "edge1"_c;
    smoothstep_Float32x4_edge1.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4_x.name = "x"_c;
    smoothstep_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4.name = "smoothstep"_c;
    smoothstep_Float32x4.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&smoothstep_Float32x4_edge0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4_edge1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4)->returnTypeSymbol = &Float32x4Type;

    smoothstep_Float16_edge0.name = "edge0"_c;
    smoothstep_Float16_edge0.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16_edge1.name = "edge1"_c;
    smoothstep_Float16_edge1.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16_x.name = "x"_c;
    smoothstep_Float16_x.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16.name = "smoothstep"_c;
    smoothstep_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&smoothstep_Float16_edge0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16_edge1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16)->returnTypeSymbol = &Float16Type;

    smoothstep_Float16x2_edge0.name = "edge0"_c;
    smoothstep_Float16x2_edge0.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2_edge1.name = "edge1"_c;
    smoothstep_Float16x2_edge1.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2_x.name = "x"_c;
    smoothstep_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2.name = "smoothstep"_c;
    smoothstep_Float16x2.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&smoothstep_Float16x2_edge0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2_edge1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2)->returnTypeSymbol = &Float16x2Type;

    smoothstep_Float16x3_edge0.name = "edge0"_c;
    smoothstep_Float16x3_edge0.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3_edge1.name = "edge1"_c;
    smoothstep_Float16x3_edge1.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3_x.name = "x"_c;
    smoothstep_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3.name = "smoothstep"_c;
    smoothstep_Float16x3.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&smoothstep_Float16x3_edge0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3_edge1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3)->returnTypeSymbol = &Float16x3Type;

    smoothstep_Float16x4_edge0.name = "edge0"_c;
    smoothstep_Float16x4_edge0.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4_edge1.name = "edge1"_c;
    smoothstep_Float16x4_edge1.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4_x.name = "x"_c;
    smoothstep_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4.name = "smoothstep"_c;
    smoothstep_Float16x4.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&smoothstep_Float16x4_edge0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4_edge1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4)->returnTypeSymbol = &Float16x4Type;

    ceil_Float32_arg.name = "val"_c;
    ceil_Float32_arg.type = Type::FullType{ Float32Type.name };
    ceil_Float32.name = "ceil"_c;
    ceil_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&ceil_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ceil_Float32)->returnTypeSymbol = &Float32Type;

    ceil_Float32x2_arg.name = "val"_c;
    ceil_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ceil_Float32x2.name = "ceil"_c;
    ceil_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&ceil_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ceil_Float32x2)->returnTypeSymbol = &Float32x2Type;

    ceil_Float32x3_arg.name = "val"_c;
    ceil_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ceil_Float32x3.name = "ceil"_c;
    ceil_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&ceil_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ceil_Float32x3)->returnTypeSymbol = &Float32x3Type;

    ceil_Float32x4_arg.name = "val"_c;
    ceil_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ceil_Float32x4.name = "ceil"_c;
    ceil_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&ceil_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ceil_Float32x4)->returnTypeSymbol = &Float32x4Type;

    ceil_Float16_arg.name = "val"_c;
    ceil_Float16_arg.type = Type::FullType{ Float16Type.name };
    ceil_Float16.name = "ceil"_c;
    ceil_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&ceil_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ceil_Float16)->returnTypeSymbol = &Float16Type;

    ceil_Float16x2_arg.name = "val"_c;
    ceil_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ceil_Float16x2.name = "ceil"_c;
    ceil_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&ceil_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ceil_Float16x2)->returnTypeSymbol = &Float16x2Type;

    ceil_Float16x3_arg.name = "val"_c;
    ceil_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ceil_Float16x3.name = "ceil"_c;
    ceil_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&ceil_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ceil_Float16x3)->returnTypeSymbol = &Float16x3Type;

    ceil_Float16x4_arg.name = "val"_c;
    ceil_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ceil_Float16x4.name = "ceil"_c;
    ceil_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&ceil_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ceil_Float16x4)->returnTypeSymbol = &Float16x4Type;

    floor_Float32_arg.name = "val"_c;
    floor_Float32_arg.type = Type::FullType{ Float32Type.name };
    floor_Float32.name = "floor"_c;
    floor_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&floor_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&floor_Float32)->returnTypeSymbol = &Float32Type;

    floor_Float32x2_arg.name = "val"_c;
    floor_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    floor_Float32x2.name = "floor"_c;
    floor_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&floor_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&floor_Float32x2)->returnTypeSymbol = &Float32x2Type;

    floor_Float32x3_arg.name = "val"_c;
    floor_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    floor_Float32x3.name = "floor"_c;
    floor_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&floor_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&floor_Float32x3)->returnTypeSymbol = &Float32x3Type;

    floor_Float32x4_arg.name = "val"_c;
    floor_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    floor_Float32x4.name = "floor"_c;
    floor_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&floor_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&floor_Float32x4)->returnTypeSymbol = &Float32x4Type;

    floor_Float16_arg.name = "val"_c;
    floor_Float16_arg.type = Type::FullType{ Float16Type.name };
    floor_Float16.name = "floor"_c;
    floor_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&floor_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&floor_Float16)->returnTypeSymbol = &Float16Type;

    floor_Float16x2_arg.name = "val"_c;
    floor_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    floor_Float16x2.name = "floor"_c;
    floor_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&floor_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&floor_Float16x2)->returnTypeSymbol = &Float16x2Type;

    floor_Float16x3_arg.name = "val"_c;
    floor_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    floor_Float16x3.name = "floor"_c;
    floor_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&floor_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&floor_Float16x3)->returnTypeSymbol = &Float16x3Type;

    floor_Float16x4_arg.name = "val"_c;
    floor_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    floor_Float16x4.name = "floor"_c;
    floor_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&floor_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&floor_Float16x4)->returnTypeSymbol = &Float16x4Type;

    fract_Float32_arg.name = "val"_c;
    fract_Float32_arg.type = Type::FullType{ Float32Type.name };
    fract_Float32.name = "fract"_c;
    fract_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&fract_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&fract_Float32)->returnTypeSymbol = &Float32Type;

    fract_Float32x2_arg.name = "val"_c;
    fract_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    fract_Float32x2.name = "fract"_c;
    fract_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&fract_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&fract_Float32x2)->returnTypeSymbol = &Float32x2Type;

    fract_Float32x3_arg.name = "val"_c;
    fract_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    fract_Float32x3.name = "fract"_c;
    fract_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&fract_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&fract_Float32x3)->returnTypeSymbol = &Float32x3Type;

    fract_Float32x4_arg.name = "val"_c;
    fract_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    fract_Float32x4.name = "fract"_c;
    fract_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&fract_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&fract_Float32x4)->returnTypeSymbol = &Float32x4Type;

    fract_Float16_arg.name = "val"_c;
    fract_Float16_arg.type = Type::FullType{ Float16Type.name };
    fract_Float16.name = "fract"_c;
    fract_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&fract_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&fract_Float16)->returnTypeSymbol = &Float16Type;

    fract_Float16x2_arg.name = "val"_c;
    fract_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    fract_Float16x2.name = "fract"_c;
    fract_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&fract_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&fract_Float16x2)->returnTypeSymbol = &Float16x2Type;

    fract_Float16x3_arg.name = "val"_c;
    fract_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    fract_Float16x3.name = "fract"_c;
    fract_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&fract_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&fract_Float16x3)->returnTypeSymbol = &Float16x3Type;

    fract_Float16x4_arg.name = "val"_c;
    fract_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    fract_Float16x4.name = "fract"_c;
    fract_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&fract_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&fract_Float16x4)->returnTypeSymbol = &Float16x4Type;

    saturate_Float32_arg.name = "val"_c;
    saturate_Float32_arg.type = Type::FullType{ Float32Type.name };
    saturate_Float32.name = "saturate"_c;
    saturate_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&saturate_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&saturate_Float32)->returnTypeSymbol = &Float32Type;

    saturate_Float32x2_arg.name = "val"_c;
    saturate_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    saturate_Float32x2.name = "saturate"_c;
    saturate_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&saturate_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&saturate_Float32x2)->returnTypeSymbol = &Float32x2Type;

    saturate_Float32x3_arg.name = "val"_c;
    saturate_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    saturate_Float32x3.name = "saturate"_c;
    saturate_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&saturate_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&saturate_Float32x3)->returnTypeSymbol = &Float32x3Type;

    saturate_Float32x4_arg.name = "val"_c;
    saturate_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    saturate_Float32x4.name = "saturate"_c;
    saturate_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&saturate_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&saturate_Float32x4)->returnTypeSymbol = &Float32x4Type;

    saturate_Float16_arg.name = "val"_c;
    saturate_Float16_arg.type = Type::FullType{ Float16Type.name };
    saturate_Float16.name = "saturate"_c;
    saturate_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&saturate_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&saturate_Float16)->returnTypeSymbol = &Float16Type;

    saturate_Float16x2_arg.name = "val"_c;
    saturate_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    saturate_Float16x2.name = "saturate"_c;
    saturate_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&saturate_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&saturate_Float16x2)->returnTypeSymbol = &Float16x2Type;

    saturate_Float16x3_arg.name = "val"_c;
    saturate_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    saturate_Float16x3.name = "saturate"_c;
    saturate_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&saturate_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&saturate_Float16x3)->returnTypeSymbol = &Float16x3Type;

    saturate_Float16x4_arg.name = "val"_c;
    saturate_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    saturate_Float16x4.name = "saturate"_c;
    saturate_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&saturate_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&saturate_Float16x4)->returnTypeSymbol = &Float16x4Type;

    trunc_Float32_arg.name = "val"_c;
    trunc_Float32_arg.type = Type::FullType{ Float32Type.name };
    trunc_Float32.name = "trunc"_c;
    trunc_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&trunc_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&trunc_Float32)->returnTypeSymbol = &Float32Type;

    trunc_Float32x2_arg.name = "val"_c;
    trunc_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    trunc_Float32x2.name = "trunc"_c;
    trunc_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&trunc_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&trunc_Float32x2)->returnTypeSymbol = &Float32x2Type;

    trunc_Float32x3_arg.name = "val"_c;
    trunc_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    trunc_Float32x3.name = "trunc"_c;
    trunc_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&trunc_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&trunc_Float32x3)->returnTypeSymbol = &Float32x3Type;

    trunc_Float32x4_arg.name = "val"_c;
    trunc_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    trunc_Float32x4.name = "trunc"_c;
    trunc_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&trunc_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&trunc_Float32x4)->returnTypeSymbol = &Float32x4Type;

    trunc_Float16_arg.name = "val"_c;
    trunc_Float16_arg.type = Type::FullType{ Float16Type.name };
    trunc_Float16.name = "trunc"_c;
    trunc_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&trunc_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&trunc_Float16)->returnTypeSymbol = &Float16Type;

    trunc_Float16x2_arg.name = "val"_c;
    trunc_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    trunc_Float16x2.name = "trunc"_c;
    trunc_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&trunc_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&trunc_Float16x2)->returnTypeSymbol = &Float16x2Type;

    trunc_Float16x3_arg.name = "val"_c;
    trunc_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    trunc_Float16x3.name = "trunc"_c;
    trunc_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&trunc_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&trunc_Float16x3)->returnTypeSymbol = &Float16x3Type;

    trunc_Float16x4_arg.name = "val"_c;
    trunc_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    trunc_Float16x4.name = "trunc"_c;
    trunc_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&trunc_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&trunc_Float16x4)->returnTypeSymbol = &Float16x4Type;

    ddx_Float32_arg.name = "val"_c;
    ddx_Float32_arg.type = Type::FullType{ Float32Type.name };
    ddx_Float32.name = "ddx"_c;
    ddx_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&ddx_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ddx_Float32)->returnTypeSymbol = &Float32Type;

    ddx_Float32x2_arg.name = "val"_c;
    ddx_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ddx_Float32x2.name = "ddx"_c;
    ddx_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&ddx_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ddx_Float32x2)->returnTypeSymbol = &Float32x2Type;

    ddx_Float32x3_arg.name = "val"_c;
    ddx_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ddx_Float32x3.name = "ddx"_c;
    ddx_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&ddx_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ddx_Float32x3)->returnTypeSymbol = &Float32x3Type;

    ddx_Float32x4_arg.name = "val"_c;
    ddx_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ddx_Float32x4.name = "ddx"_c;
    ddx_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&ddx_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ddx_Float32x4)->returnTypeSymbol = &Float32x4Type;

    ddx_Float16_arg.name = "val"_c;
    ddx_Float16_arg.type = Type::FullType{ Float16Type.name };
    ddx_Float16.name = "ddx"_c;
    ddx_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&ddx_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ddx_Float16)->returnTypeSymbol = &Float16Type;

    ddx_Float16x2_arg.name = "val"_c;
    ddx_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ddx_Float16x2.name = "ddx"_c;
    ddx_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&ddx_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ddx_Float16x2)->returnTypeSymbol = &Float16x2Type;

    ddx_Float16x3_arg.name = "val"_c;
    ddx_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ddx_Float16x3.name = "ddx"_c;
    ddx_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&ddx_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ddx_Float16x3)->returnTypeSymbol = &Float16x3Type;

    ddx_Float16x4_arg.name = "val"_c;
    ddx_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ddx_Float16x4.name = "ddx"_c;
    ddx_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&ddx_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ddx_Float16x4)->returnTypeSymbol = &Float16x4Type;

    ddy_Float32_arg.name = "val"_c;
    ddy_Float32_arg.type = Type::FullType{ Float32Type.name };
    ddy_Float32.name = "ddy"_c;
    ddy_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&ddy_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ddy_Float32)->returnTypeSymbol = &Float32Type;

    ddy_Float32x2_arg.name = "val"_c;
    ddy_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ddy_Float32x2.name = "ddy"_c;
    ddy_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&ddy_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ddy_Float32x2)->returnTypeSymbol = &Float32x2Type;

    ddy_Float32x3_arg.name = "val"_c;
    ddy_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ddy_Float32x3.name = "ddy"_c;
    ddy_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&ddy_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ddy_Float32x3)->returnTypeSymbol = &Float32x3Type;

    ddy_Float32x4_arg.name = "val"_c;
    ddy_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ddy_Float32x4.name = "ddy"_c;
    ddy_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&ddy_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ddy_Float32x4)->returnTypeSymbol = &Float32x4Type;

    ddy_Float16_arg.name = "val"_c;
    ddy_Float16_arg.type = Type::FullType{ Float16Type.name };
    ddy_Float16.name = "ddy"_c;
    ddy_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&ddy_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ddy_Float16)->returnTypeSymbol = &Float16Type;

    ddy_Float16x2_arg.name = "val"_c;
    ddy_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ddy_Float16x2.name = "ddy"_c;
    ddy_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&ddy_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ddy_Float16x2)->returnTypeSymbol = &Float16x2Type;

    ddy_Float16x3_arg.name = "val"_c;
    ddy_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ddy_Float16x3.name = "ddy"_c;
    ddy_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&ddy_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ddy_Float16x3)->returnTypeSymbol = &Float16x3Type;

    ddy_Float16x4_arg.name = "val"_c;
    ddy_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ddy_Float16x4.name = "ddy"_c;
    ddy_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&ddy_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ddy_Float16x4)->returnTypeSymbol = &Float16x4Type;

    fwidth_Float32_arg.name = "val"_c;
    fwidth_Float32_arg.type = Type::FullType{ Float32Type.name };
    fwidth_Float32.name = "fwidth"_c;
    fwidth_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&fwidth_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&fwidth_Float32)->returnTypeSymbol = &Float32Type;

    fwidth_Float32x2_arg.name = "val"_c;
    fwidth_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    fwidth_Float32x2.name = "fwidth"_c;
    fwidth_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&fwidth_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&fwidth_Float32x2)->returnTypeSymbol = &Float32x2Type;

    fwidth_Float32x3_arg.name = "val"_c;
    fwidth_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    fwidth_Float32x3.name = "fwidth"_c;
    fwidth_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&fwidth_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&fwidth_Float32x3)->returnTypeSymbol = &Float32x3Type;

    fwidth_Float32x4_arg.name = "val"_c;
    fwidth_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    fwidth_Float32x4.name = "fwidth"_c;
    fwidth_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&fwidth_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&fwidth_Float32x4)->returnTypeSymbol = &Float32x4Type;

    fwidth_Float16_arg.name = "val"_c;
    fwidth_Float16_arg.type = Type::FullType{ Float16Type.name };
    fwidth_Float16.name = "fwidth"_c;
    fwidth_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&fwidth_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&fwidth_Float16)->returnTypeSymbol = &Float16Type;

    fwidth_Float16x2_arg.name = "val"_c;
    fwidth_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    fwidth_Float16x2.name = "fwidth"_c;
    fwidth_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&fwidth_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&fwidth_Float16x2)->returnTypeSymbol = &Float16x2Type;

    fwidth_Float16x3_arg.name = "val"_c;
    fwidth_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    fwidth_Float16x3.name = "fwidth"_c;
    fwidth_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&fwidth_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&fwidth_Float16x3)->returnTypeSymbol = &Float16x3Type;

    fwidth_Float16x4_arg.name = "val"_c;
    fwidth_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    fwidth_Float16x4.name = "fwidth"_c;
    fwidth_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&fwidth_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&fwidth_Float16x4)->returnTypeSymbol = &Float16x4Type;

    sign_Int32_arg.name = "val"_c;
    sign_Int32_arg.type = Type::FullType{ Int32Type.name };
    sign_Int32.name = "sign"_c;
    sign_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&sign_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&sign_Int32)->returnTypeSymbol = &Int32Type;

    sign_Int32x2_arg.name = "val"_c;
    sign_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    sign_Int32x2.name = "sign"_c;
    sign_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&sign_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&sign_Int32x2)->returnTypeSymbol = &Int32x2Type;

    sign_Int32x3_arg.name = "val"_c;
    sign_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    sign_Int32x3.name = "sign"_c;
    sign_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&sign_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&sign_Int32x3)->returnTypeSymbol = &Int32x3Type;

    sign_Int32x4_arg.name = "val"_c;
    sign_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    sign_Int32x4.name = "sign"_c;
    sign_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&sign_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&sign_Int32x4)->returnTypeSymbol = &Int32x4Type;

    sign_Int16_arg.name = "val"_c;
    sign_Int16_arg.type = Type::FullType{ Int16Type.name };
    sign_Int16.name = "sign"_c;
    sign_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&sign_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&sign_Int16)->returnTypeSymbol = &Int16Type;

    sign_Int16x2_arg.name = "val"_c;
    sign_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    sign_Int16x2.name = "sign"_c;
    sign_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&sign_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&sign_Int16x2)->returnTypeSymbol = &Int16x2Type;

    sign_Int16x3_arg.name = "val"_c;
    sign_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    sign_Int16x3.name = "sign"_c;
    sign_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&sign_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&sign_Int16x3)->returnTypeSymbol = &Int16x3Type;

    sign_Int16x4_arg.name = "val"_c;
    sign_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    sign_Int16x4.name = "sign"_c;
    sign_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&sign_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&sign_Int16x4)->returnTypeSymbol = &Int16x4Type;

    sign_Float32_arg.name = "val"_c;
    sign_Float32_arg.type = Type::FullType{ Float32Type.name };
    sign_Float32.name = "sign"_c;
    sign_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&sign_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sign_Float32)->returnTypeSymbol = &Float32Type;

    sign_Float32x2_arg.name = "val"_c;
    sign_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sign_Float32x2.name = "sign"_c;
    sign_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&sign_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sign_Float32x2)->returnTypeSymbol = &Float32x2Type;

    sign_Float32x3_arg.name = "val"_c;
    sign_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sign_Float32x3.name = "sign"_c;
    sign_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&sign_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sign_Float32x3)->returnTypeSymbol = &Float32x3Type;

    sign_Float32x4_arg.name = "val"_c;
    sign_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sign_Float32x4.name = "sign"_c;
    sign_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&sign_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sign_Float32x4)->returnTypeSymbol = &Float32x4Type;

    sign_Float16_arg.name = "val"_c;
    sign_Float16_arg.type = Type::FullType{ Float16Type.name };
    sign_Float16.name = "sign"_c;
    sign_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&sign_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sign_Float16)->returnTypeSymbol = &Float16Type;

    sign_Float16x2_arg.name = "val"_c;
    sign_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sign_Float16x2.name = "sign"_c;
    sign_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&sign_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sign_Float16x2)->returnTypeSymbol = &Float16x2Type;

    sign_Float16x3_arg.name = "val"_c;
    sign_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sign_Float16x3.name = "sign"_c;
    sign_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&sign_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sign_Float16x3)->returnTypeSymbol = &Float16x3Type;

    sign_Float16x4_arg.name = "val"_c;
    sign_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sign_Float16x4.name = "sign"_c;
    sign_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&sign_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sign_Float16x4)->returnTypeSymbol = &Float16x4Type;

    abs_Int32_arg.name = "val"_c;
    abs_Int32_arg.type = Type::FullType{ Int32Type.name };
    abs_Int32.name = "abs"_c;
    abs_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&abs_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&abs_Int32)->returnTypeSymbol = &Int32Type;

    abs_Int32x2_arg.name = "val"_c;
    abs_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    abs_Int32x2.name = "abs"_c;
    abs_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&abs_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&abs_Int32x2)->returnTypeSymbol = &Int32x2Type;

    abs_Int32x3_arg.name = "val"_c;
    abs_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    abs_Int32x3.name = "abs"_c;
    abs_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&abs_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&abs_Int32x3)->returnTypeSymbol = &Int32x3Type;

    abs_Int32x4_arg.name = "val"_c;
    abs_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    abs_Int32x4.name = "abs"_c;
    abs_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&abs_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&abs_Int32x4)->returnTypeSymbol = &Int32x4Type;

    abs_Int16_arg.name = "val"_c;
    abs_Int16_arg.type = Type::FullType{ Int16Type.name };
    abs_Int16.name = "abs"_c;
    abs_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&abs_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&abs_Int16)->returnTypeSymbol = &Int16Type;

    abs_Int16x2_arg.name = "val"_c;
    abs_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    abs_Int16x2.name = "abs"_c;
    abs_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&abs_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&abs_Int16x2)->returnTypeSymbol = &Int16x2Type;

    abs_Int16x3_arg.name = "val"_c;
    abs_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    abs_Int16x3.name = "abs"_c;
    abs_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&abs_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&abs_Int16x3)->returnTypeSymbol = &Int16x3Type;

    abs_Int16x4_arg.name = "val"_c;
    abs_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    abs_Int16x4.name = "abs"_c;
    abs_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&abs_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&abs_Int16x4)->returnTypeSymbol = &Int16x4Type;

    abs_Float32_arg.name = "val"_c;
    abs_Float32_arg.type = Type::FullType{ Float32Type.name };
    abs_Float32.name = "abs"_c;
    abs_Float32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&abs_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&abs_Float32)->returnTypeSymbol = &Float32Type;

    abs_Float32x2_arg.name = "val"_c;
    abs_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    abs_Float32x2.name = "abs"_c;
    abs_Float32x2.returnType = Type::FullType{ Float32x2Type.name };
    Symbol::Resolved(&abs_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&abs_Float32x2)->returnTypeSymbol = &Float32x2Type;

    abs_Float32x3_arg.name = "val"_c;
    abs_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    abs_Float32x3.name = "abs"_c;
    abs_Float32x3.returnType = Type::FullType{ Float32x3Type.name };
    Symbol::Resolved(&abs_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&abs_Float32x3)->returnTypeSymbol = &Float32x3Type;

    abs_Float32x4_arg.name = "val"_c;
    abs_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    abs_Float32x4.name = "abs"_c;
    abs_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&abs_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&abs_Float32x4)->returnTypeSymbol = &Float32x4Type;

    abs_Float16_arg.name = "val"_c;
    abs_Float16_arg.type = Type::FullType{ Float16Type.name };
    abs_Float16.name = "abs"_c;
    abs_Float16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&abs_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&abs_Float16)->returnTypeSymbol = &Float16Type;

    abs_Float16x2_arg.name = "val"_c;
    abs_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    abs_Float16x2.name = "abs"_c;
    abs_Float16x2.returnType = Type::FullType{ Float16x2Type.name };
    Symbol::Resolved(&abs_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&abs_Float16x2)->returnTypeSymbol = &Float16x2Type;

    abs_Float16x3_arg.name = "val"_c;
    abs_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    abs_Float16x3.name = "abs"_c;
    abs_Float16x3.returnType = Type::FullType{ Float16x3Type.name };
    Symbol::Resolved(&abs_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&abs_Float16x3)->returnTypeSymbol = &Float16x3Type;

    abs_Float16x4_arg.name = "val"_c;
    abs_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    abs_Float16x4.name = "abs"_c;
    abs_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&abs_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&abs_Float16x4)->returnTypeSymbol = &Float16x4Type;

    castToF16_UInt16_arg.name = "val"_c;
    castToF16_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    castToF16_UInt16.name = "castToF16"_c;
    castToF16_UInt16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&castToF16_UInt16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&castToF16_UInt16)->returnTypeSymbol = &Float16Type;

    castToF16_Int16_arg.name = "val"_c;
    castToF16_Int16_arg.type = Type::FullType{ Int16Type.name };
    castToF16_Int16.name = "castToF16"_c;
    castToF16_Int16.returnType = Type::FullType{ Float16Type.name };
    Symbol::Resolved(&castToF16_Int16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&castToF16_Int16)->returnTypeSymbol = &Float16Type;

    castToU16_Float16_arg.name = "val"_c;
    castToU16_Float16_arg.type = Type::FullType{ Float16Type.name };
    castToU16_Float16.name = "castToU16"_c;
    castToU16_Float16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&castToU16_Float16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&castToU16_Float16)->returnTypeSymbol = &UInt16Type;

    castToU16_Int16_arg.name = "val"_c;
    castToU16_Int16_arg.type = Type::FullType{ Int16Type.name };
    castToU16_Int16.name = "castToU16"_c;
    castToU16_Int16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&castToU16_Int16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&castToU16_Int16)->returnTypeSymbol = &UInt16Type;

    castToI16_Float16_arg.name = "val"_c;
    castToI16_Float16_arg.type = Type::FullType{ Float16Type.name };
    castToI16_Float16.name = "castToI16"_c;
    castToI16_Float16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&castToI16_Float16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&castToI16_Float16)->returnTypeSymbol = &Int16Type;

    castToI16_UInt16_arg.name = "val"_c;
    castToI16_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    castToI16_UInt16.name = "castToI16"_c;
    castToI16_UInt16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&castToI16_UInt16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&castToI16_UInt16)->returnTypeSymbol = &Int16Type;

    castToF32_UInt32_arg.name = "val"_c;
    castToF32_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    castToF32_UInt32.name = "castToF32"_c;
    castToF32_UInt32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&castToF32_UInt32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&castToF32_UInt32)->returnTypeSymbol = &Float32Type;

    castToF32_Int32_arg.name = "val"_c;
    castToF32_Int32_arg.type = Type::FullType{ Int32Type.name };
    castToF32_Int32.name = "castToF32"_c;
    castToF32_Int32.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&castToF32_Int32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&castToF32_Int32)->returnTypeSymbol = &Float32Type;

    castToU32_Float32_arg.name = "val"_c;
    castToU32_Float32_arg.type = Type::FullType{ Float32Type.name };
    castToU32_Float32.name = "castToU32"_c;
    castToU32_Float32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&castToU32_Float32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&castToU32_Float32)->returnTypeSymbol = &UInt32Type;

    castToU32_Int32_arg.name = "val"_c;
    castToU32_Int32_arg.type = Type::FullType{ Int32Type.name };
    castToU32_Int32.name = "castToU32"_c;
    castToU32_Int32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&castToU32_Int32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&castToU32_Int32)->returnTypeSymbol = &UInt32Type;

    castToI32_Float32_arg.name = "val"_c;
    castToI32_Float32_arg.type = Type::FullType{ Float32Type.name };
    castToI32_Float32.name = "castToI32"_c;
    castToI32_Float32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&castToI32_Float32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&castToI32_Float32)->returnTypeSymbol = &Int32Type;

    castToI32_UInt32_arg.name = "val"_c;
    castToI32_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    castToI32_UInt32.name = "castToI32"_c;
    castToI32_UInt32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&castToI32_UInt32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&castToI32_UInt32)->returnTypeSymbol = &Int32Type;

    any_Bool8_arg.name = "val"_c;
    any_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    any_Bool8.name = "any"_c;
    any_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&any_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&any_Bool8)->returnTypeSymbol = &Bool8Type;

    any_Bool8x2_arg.name = "val"_c;
    any_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    any_Bool8x2.name = "any"_c;
    any_Bool8x2.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&any_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&any_Bool8x2)->returnTypeSymbol = &Bool8Type;

    any_Bool8x3_arg.name = "val"_c;
    any_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    any_Bool8x3.name = "any"_c;
    any_Bool8x3.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&any_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&any_Bool8x3)->returnTypeSymbol = &Bool8Type;

    any_Bool8x4_arg.name = "val"_c;
    any_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    any_Bool8x4.name = "any"_c;
    any_Bool8x4.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&any_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&any_Bool8x4)->returnTypeSymbol = &Bool8Type;

    all_Bool8_arg.name = "val"_c;
    all_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    all_Bool8.name = "all"_c;
    all_Bool8.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&all_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&all_Bool8)->returnTypeSymbol = &Bool8Type;

    all_Bool8x2_arg.name = "val"_c;
    all_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    all_Bool8x2.name = "all"_c;
    all_Bool8x2.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&all_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&all_Bool8x2)->returnTypeSymbol = &Bool8Type;

    all_Bool8x3_arg.name = "val"_c;
    all_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    all_Bool8x3.name = "all"_c;
    all_Bool8x3.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&all_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&all_Bool8x3)->returnTypeSymbol = &Bool8Type;

    all_Bool8x4_arg.name = "val"_c;
    all_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    all_Bool8x4.name = "all"_c;
    all_Bool8x4.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&all_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&all_Bool8x4)->returnTypeSymbol = &Bool8Type;

    transpose_Float32x2x2_arg.name = "val"_c;
    transpose_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    transpose_Float32x2x2.name = "transpose"_c;
    transpose_Float32x2x2.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&transpose_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&transpose_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    transpose_Float16x2x2_arg.name = "val"_c;
    transpose_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    transpose_Float16x2x2.name = "transpose"_c;
    transpose_Float16x2x2.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&transpose_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&transpose_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    transpose_Float32x2x3_arg.name = "val"_c;
    transpose_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    transpose_Float32x2x3.name = "transpose"_c;
    transpose_Float32x2x3.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&transpose_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&transpose_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    transpose_Float16x2x3_arg.name = "val"_c;
    transpose_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    transpose_Float16x2x3.name = "transpose"_c;
    transpose_Float16x2x3.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&transpose_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&transpose_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    transpose_Float32x2x4_arg.name = "val"_c;
    transpose_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    transpose_Float32x2x4.name = "transpose"_c;
    transpose_Float32x2x4.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&transpose_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&transpose_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    transpose_Float16x2x4_arg.name = "val"_c;
    transpose_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    transpose_Float16x2x4.name = "transpose"_c;
    transpose_Float16x2x4.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&transpose_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&transpose_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    transpose_Float32x3x2_arg.name = "val"_c;
    transpose_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    transpose_Float32x3x2.name = "transpose"_c;
    transpose_Float32x3x2.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&transpose_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&transpose_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    transpose_Float16x3x2_arg.name = "val"_c;
    transpose_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    transpose_Float16x3x2.name = "transpose"_c;
    transpose_Float16x3x2.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&transpose_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&transpose_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    transpose_Float32x3x3_arg.name = "val"_c;
    transpose_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    transpose_Float32x3x3.name = "transpose"_c;
    transpose_Float32x3x3.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&transpose_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&transpose_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    transpose_Float16x3x3_arg.name = "val"_c;
    transpose_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    transpose_Float16x3x3.name = "transpose"_c;
    transpose_Float16x3x3.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&transpose_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&transpose_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    transpose_Float32x3x4_arg.name = "val"_c;
    transpose_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    transpose_Float32x3x4.name = "transpose"_c;
    transpose_Float32x3x4.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&transpose_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&transpose_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    transpose_Float16x3x4_arg.name = "val"_c;
    transpose_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    transpose_Float16x3x4.name = "transpose"_c;
    transpose_Float16x3x4.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&transpose_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&transpose_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    transpose_Float32x4x2_arg.name = "val"_c;
    transpose_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    transpose_Float32x4x2.name = "transpose"_c;
    transpose_Float32x4x2.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&transpose_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&transpose_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    transpose_Float16x4x2_arg.name = "val"_c;
    transpose_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    transpose_Float16x4x2.name = "transpose"_c;
    transpose_Float16x4x2.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&transpose_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&transpose_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    transpose_Float32x4x3_arg.name = "val"_c;
    transpose_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    transpose_Float32x4x3.name = "transpose"_c;
    transpose_Float32x4x3.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&transpose_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&transpose_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    transpose_Float16x4x3_arg.name = "val"_c;
    transpose_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    transpose_Float16x4x3.name = "transpose"_c;
    transpose_Float16x4x3.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&transpose_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&transpose_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    transpose_Float32x4x4_arg.name = "val"_c;
    transpose_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    transpose_Float32x4x4.name = "transpose"_c;
    transpose_Float32x4x4.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&transpose_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&transpose_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    transpose_Float16x4x4_arg.name = "val"_c;
    transpose_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    transpose_Float16x4x4.name = "transpose"_c;
    transpose_Float16x4x4.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&transpose_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&transpose_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    inverse_Float32x2x2_arg.name = "val"_c;
    inverse_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    inverse_Float32x2x2.name = "inverse"_c;
    inverse_Float32x2x2.returnType = Type::FullType{ Float32x2x2Type.name };
    Symbol::Resolved(&inverse_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&inverse_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    inverse_Float16x2x2_arg.name = "val"_c;
    inverse_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    inverse_Float16x2x2.name = "inverse"_c;
    inverse_Float16x2x2.returnType = Type::FullType{ Float16x2x2Type.name };
    Symbol::Resolved(&inverse_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&inverse_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    inverse_Float32x2x3_arg.name = "val"_c;
    inverse_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    inverse_Float32x2x3.name = "inverse"_c;
    inverse_Float32x2x3.returnType = Type::FullType{ Float32x2x3Type.name };
    Symbol::Resolved(&inverse_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&inverse_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    inverse_Float16x2x3_arg.name = "val"_c;
    inverse_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    inverse_Float16x2x3.name = "inverse"_c;
    inverse_Float16x2x3.returnType = Type::FullType{ Float16x2x3Type.name };
    Symbol::Resolved(&inverse_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&inverse_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    inverse_Float32x2x4_arg.name = "val"_c;
    inverse_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    inverse_Float32x2x4.name = "inverse"_c;
    inverse_Float32x2x4.returnType = Type::FullType{ Float32x2x4Type.name };
    Symbol::Resolved(&inverse_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&inverse_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    inverse_Float16x2x4_arg.name = "val"_c;
    inverse_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    inverse_Float16x2x4.name = "inverse"_c;
    inverse_Float16x2x4.returnType = Type::FullType{ Float16x2x4Type.name };
    Symbol::Resolved(&inverse_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&inverse_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    inverse_Float32x3x2_arg.name = "val"_c;
    inverse_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    inverse_Float32x3x2.name = "inverse"_c;
    inverse_Float32x3x2.returnType = Type::FullType{ Float32x3x2Type.name };
    Symbol::Resolved(&inverse_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&inverse_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    inverse_Float16x3x2_arg.name = "val"_c;
    inverse_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    inverse_Float16x3x2.name = "inverse"_c;
    inverse_Float16x3x2.returnType = Type::FullType{ Float16x3x2Type.name };
    Symbol::Resolved(&inverse_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&inverse_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    inverse_Float32x3x3_arg.name = "val"_c;
    inverse_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    inverse_Float32x3x3.name = "inverse"_c;
    inverse_Float32x3x3.returnType = Type::FullType{ Float32x3x3Type.name };
    Symbol::Resolved(&inverse_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&inverse_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    inverse_Float16x3x3_arg.name = "val"_c;
    inverse_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    inverse_Float16x3x3.name = "inverse"_c;
    inverse_Float16x3x3.returnType = Type::FullType{ Float16x3x3Type.name };
    Symbol::Resolved(&inverse_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&inverse_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    inverse_Float32x3x4_arg.name = "val"_c;
    inverse_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    inverse_Float32x3x4.name = "inverse"_c;
    inverse_Float32x3x4.returnType = Type::FullType{ Float32x3x4Type.name };
    Symbol::Resolved(&inverse_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&inverse_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    inverse_Float16x3x4_arg.name = "val"_c;
    inverse_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    inverse_Float16x3x4.name = "inverse"_c;
    inverse_Float16x3x4.returnType = Type::FullType{ Float16x3x4Type.name };
    Symbol::Resolved(&inverse_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&inverse_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    inverse_Float32x4x2_arg.name = "val"_c;
    inverse_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    inverse_Float32x4x2.name = "inverse"_c;
    inverse_Float32x4x2.returnType = Type::FullType{ Float32x4x2Type.name };
    Symbol::Resolved(&inverse_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&inverse_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    inverse_Float16x4x2_arg.name = "val"_c;
    inverse_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    inverse_Float16x4x2.name = "inverse"_c;
    inverse_Float16x4x2.returnType = Type::FullType{ Float16x4x2Type.name };
    Symbol::Resolved(&inverse_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&inverse_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    inverse_Float32x4x3_arg.name = "val"_c;
    inverse_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    inverse_Float32x4x3.name = "inverse"_c;
    inverse_Float32x4x3.returnType = Type::FullType{ Float32x4x3Type.name };
    Symbol::Resolved(&inverse_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&inverse_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    inverse_Float16x4x3_arg.name = "val"_c;
    inverse_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    inverse_Float16x4x3.name = "inverse"_c;
    inverse_Float16x4x3.returnType = Type::FullType{ Float16x4x3Type.name };
    Symbol::Resolved(&inverse_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&inverse_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    inverse_Float32x4x4_arg.name = "val"_c;
    inverse_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    inverse_Float32x4x4.name = "inverse"_c;
    inverse_Float32x4x4.returnType = Type::FullType{ Float32x4x4Type.name };
    Symbol::Resolved(&inverse_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&inverse_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    inverse_Float16x4x4_arg.name = "val"_c;
    inverse_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    inverse_Float16x4x4.name = "inverse"_c;
    inverse_Float16x4x4.returnType = Type::FullType{ Float16x4x4Type.name };
    Symbol::Resolved(&inverse_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&inverse_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    VertexGetOutputLayer.name = "vertexGetOutputLayer"_c;
    VertexGetOutputLayer.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetOutputLayer)->returnTypeSymbol = &UInt32Type;

    VertexGetOutputViewport.name = "vertexGetOutputViewport"_c;
    VertexGetOutputViewport.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetOutputViewport)->returnTypeSymbol = &UInt32Type;

    VertexGetIndex.name = "vertexGetIndex"_c;
    VertexGetIndex.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetIndex)->returnTypeSymbol = &UInt32Type;

    VertexGetInstanceIndex.name = "vertexGetInstanceIndex"_c;
    VertexGetInstanceIndex.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetInstanceIndex)->returnTypeSymbol = &UInt32Type;

    VertexGetBaseIndex.name = "vertexGetBaseIndex"_c;
    VertexGetBaseIndex.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetBaseIndex)->returnTypeSymbol = &UInt32Type;

    VertexGetBaseInstanceIndex.name = "vertexGetBaseInstanceIndex"_c;
    VertexGetBaseInstanceIndex.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetBaseInstanceIndex)->returnTypeSymbol = &UInt32Type;

    VertexGetDrawIndex.name = "vertexGetDrawIndex"_c;
    VertexGetDrawIndex.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&VertexGetDrawIndex)->returnTypeSymbol = &UInt32Type;

    VertexSetOutputLayer_UInt16_arg.name = "val"_c;
    VertexSetOutputLayer_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    VertexSetOutputLayer_UInt16.name = "vertexSetOutputLayer"_c;
    VertexSetOutputLayer_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&VertexSetOutputLayer_UInt16_arg)->typeSymbol = &UInt16Type;

    Symbol::Resolved(&VertexSetOutputLayer_UInt16)->returnTypeSymbol = &VoidType;

    VertexSetOutputLayer_UInt32_arg.name = "val"_c;
    VertexSetOutputLayer_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    VertexSetOutputLayer_UInt32.name = "vertexSetOutputLayer"_c;
    VertexSetOutputLayer_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&VertexSetOutputLayer_UInt32_arg)->typeSymbol = &UInt32Type;

    Symbol::Resolved(&VertexSetOutputLayer_UInt32)->returnTypeSymbol = &VoidType;

    VertexSetOutputViewport_UInt16_arg.name = "val"_c;
    VertexSetOutputViewport_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    VertexSetOutputViewport_UInt16.name = "vertexSetOutputViewport"_c;
    VertexSetOutputViewport_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&VertexSetOutputViewport_UInt16_arg)->typeSymbol = &UInt16Type;

    Symbol::Resolved(&VertexSetOutputViewport_UInt16)->returnTypeSymbol = &VoidType;

    VertexSetOutputViewport_UInt32_arg.name = "val"_c;
    VertexSetOutputViewport_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    VertexSetOutputViewport_UInt32.name = "vertexSetOutputViewport"_c;
    VertexSetOutputViewport_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&VertexSetOutputViewport_UInt32_arg)->typeSymbol = &UInt32Type;

    Symbol::Resolved(&VertexSetOutputViewport_UInt32)->returnTypeSymbol = &VoidType;

    VertexExportCoordinates_Float32x4_arg.name = "coordinate"_c;
    VertexExportCoordinates_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    VertexExportCoordinates_Float32x4.name = "vertexExportCoordinates"_c;
    VertexExportCoordinates_Float32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&VertexExportCoordinates_Float32x4_arg)->typeSymbol = &Float32x4Type;

    Symbol::Resolved(&VertexExportCoordinates_Float32x4)->returnTypeSymbol = &VoidType;

    VertexExportCoordinates_Float16x4_arg.name = "coordinate"_c;
    VertexExportCoordinates_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    VertexExportCoordinates_Float16x4.name = "vertexExportCoordinates"_c;
    VertexExportCoordinates_Float16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&VertexExportCoordinates_Float16x4_arg)->typeSymbol = &Float16x4Type;

    Symbol::Resolved(&VertexExportCoordinates_Float16x4)->returnTypeSymbol = &VoidType;

    GeometryExportVertex.name = "geometryExportVertex"_c;
    GeometryExportVertex.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&GeometryExportVertex)->returnTypeSymbol = &VoidType;

    GeometryExportPrimitive.name = "geometryExportPrimitive"_c;
    GeometryExportPrimitive.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&GeometryExportPrimitive)->returnTypeSymbol = &VoidType;

    PixelGetCoordinates_Float32x4.name = "pixelGetCoordinates"_c;
    PixelGetCoordinates_Float32x4.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&PixelGetCoordinates_Float32x4)->returnTypeSymbol = &Float32x4Type;

    PixelGetCoordinates_Float16x4.name = "pixelGetCoordinates"_c;
    PixelGetCoordinates_Float16x4.returnType = Type::FullType{ Float16x4Type.name };
    Symbol::Resolved(&PixelGetCoordinates_Float16x4)->returnTypeSymbol = &Float16x4Type;

    PixelGetDepth.name = "pixelGetDepth"_c;
    PixelGetDepth.returnType = Type::FullType{ Float32Type.name };
    Symbol::Resolved(&PixelGetDepth)->returnTypeSymbol = &Float32Type;

    PixelExportColor_Float32_Int32_color.name = "color"_c;
    PixelExportColor_Float32_Int32_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_Int32_index.name = "index"_c;
    PixelExportColor_Float32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32_Int32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32_UInt32_color.name = "color"_c;
    PixelExportColor_Float32_UInt32_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_UInt32_index.name = "index"_c;
    PixelExportColor_Float32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32_UInt32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32_Int16_color.name = "color"_c;
    PixelExportColor_Float32_Int16_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_Int16_index.name = "index"_c;
    PixelExportColor_Float32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32_Int16_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32_UInt16_color.name = "color"_c;
    PixelExportColor_Float32_UInt16_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_UInt16_index.name = "index"_c;
    PixelExportColor_Float32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32_UInt16_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x2_Int32_color.name = "color"_c;
    PixelExportColor_Float32x2_Int32_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_Int32_index.name = "index"_c;
    PixelExportColor_Float32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x2_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x2_UInt32_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x2_Int16_color.name = "color"_c;
    PixelExportColor_Float32x2_Int16_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_Int16_index.name = "index"_c;
    PixelExportColor_Float32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x2_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x2_UInt16_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x3_Int32_color.name = "color"_c;
    PixelExportColor_Float32x3_Int32_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_Int32_index.name = "index"_c;
    PixelExportColor_Float32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x3_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x3_UInt32_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x3_Int16_color.name = "color"_c;
    PixelExportColor_Float32x3_Int16_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_Int16_index.name = "index"_c;
    PixelExportColor_Float32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x3_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x3_UInt16_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x4_Int32_color.name = "color"_c;
    PixelExportColor_Float32x4_Int32_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_Int32_index.name = "index"_c;
    PixelExportColor_Float32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x4_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x4_UInt32_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x4_Int16_color.name = "color"_c;
    PixelExportColor_Float32x4_Int16_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_Int16_index.name = "index"_c;
    PixelExportColor_Float32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float32x4_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x4_UInt16_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16_Int32_color.name = "color"_c;
    PixelExportColor_Float16_Int32_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_Int32_index.name = "index"_c;
    PixelExportColor_Float16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16_Int32_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16_UInt32_color.name = "color"_c;
    PixelExportColor_Float16_UInt32_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_UInt32_index.name = "index"_c;
    PixelExportColor_Float16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16_UInt32_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16_Int16_color.name = "color"_c;
    PixelExportColor_Float16_Int16_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_Int16_index.name = "index"_c;
    PixelExportColor_Float16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16_Int16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16_UInt16_color.name = "color"_c;
    PixelExportColor_Float16_UInt16_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_UInt16_index.name = "index"_c;
    PixelExportColor_Float16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16_UInt16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x2_Int32_color.name = "color"_c;
    PixelExportColor_Float16x2_Int32_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_Int32_index.name = "index"_c;
    PixelExportColor_Float16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x2_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x2_UInt32_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x2_Int16_color.name = "color"_c;
    PixelExportColor_Float16x2_Int16_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_Int16_index.name = "index"_c;
    PixelExportColor_Float16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x2_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x2_UInt16_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x3_Int32_color.name = "color"_c;
    PixelExportColor_Float16x3_Int32_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_Int32_index.name = "index"_c;
    PixelExportColor_Float16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x3_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x3_UInt32_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x3_Int16_color.name = "color"_c;
    PixelExportColor_Float16x3_Int16_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_Int16_index.name = "index"_c;
    PixelExportColor_Float16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x3_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x3_UInt16_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x4_Int32_color.name = "color"_c;
    PixelExportColor_Float16x4_Int32_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_Int32_index.name = "index"_c;
    PixelExportColor_Float16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x4_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x4_UInt32_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x4_Int16_color.name = "color"_c;
    PixelExportColor_Float16x4_Int16_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_Int16_index.name = "index"_c;
    PixelExportColor_Float16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Float16x4_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x4_UInt16_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32_Int32_color.name = "color"_c;
    PixelExportColor_Int32_Int32_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int32_index.name = "index"_c;
    PixelExportColor_Int32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32_Int32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32_UInt32_color.name = "color"_c;
    PixelExportColor_Int32_UInt32_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_UInt32_index.name = "index"_c;
    PixelExportColor_Int32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32_UInt32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32_Int16_color.name = "color"_c;
    PixelExportColor_Int32_Int16_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int16_index.name = "index"_c;
    PixelExportColor_Int32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32_Int16_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32_UInt16_color.name = "color"_c;
    PixelExportColor_Int32_UInt16_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_UInt16_index.name = "index"_c;
    PixelExportColor_Int32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32_UInt16_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x2_Int32_color.name = "color"_c;
    PixelExportColor_Int32x2_Int32_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_Int32_index.name = "index"_c;
    PixelExportColor_Int32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x2_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x2_UInt32_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x2_Int16_color.name = "color"_c;
    PixelExportColor_Int32x2_Int16_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_Int16_index.name = "index"_c;
    PixelExportColor_Int32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x2_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x2_UInt16_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x3_Int32_color.name = "color"_c;
    PixelExportColor_Int32x3_Int32_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_Int32_index.name = "index"_c;
    PixelExportColor_Int32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x3_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x3_UInt32_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x3_Int16_color.name = "color"_c;
    PixelExportColor_Int32x3_Int16_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_Int16_index.name = "index"_c;
    PixelExportColor_Int32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x3_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x3_UInt16_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x4_Int32_color.name = "color"_c;
    PixelExportColor_Int32x4_Int32_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_Int32_index.name = "index"_c;
    PixelExportColor_Int32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x4_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x4_UInt32_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x4_Int16_color.name = "color"_c;
    PixelExportColor_Int32x4_Int16_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_Int16_index.name = "index"_c;
    PixelExportColor_Int32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int32x4_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x4_UInt16_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16_Int32_color.name = "color"_c;
    PixelExportColor_Int16_Int32_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int32_index.name = "index"_c;
    PixelExportColor_Int16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16_Int32_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16_UInt32_color.name = "color"_c;
    PixelExportColor_Int16_UInt32_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_UInt32_index.name = "index"_c;
    PixelExportColor_Int16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16_UInt32_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16_Int16_color.name = "color"_c;
    PixelExportColor_Int16_Int16_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int16_index.name = "index"_c;
    PixelExportColor_Int16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16_Int16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16_UInt16_color.name = "color"_c;
    PixelExportColor_Int16_UInt16_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_UInt16_index.name = "index"_c;
    PixelExportColor_Int16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16_UInt16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x2_Int32_color.name = "color"_c;
    PixelExportColor_Int16x2_Int32_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_Int32_index.name = "index"_c;
    PixelExportColor_Int16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x2_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x2_UInt32_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x2_Int16_color.name = "color"_c;
    PixelExportColor_Int16x2_Int16_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_Int16_index.name = "index"_c;
    PixelExportColor_Int16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x2_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x2_UInt16_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x3_Int32_color.name = "color"_c;
    PixelExportColor_Int16x3_Int32_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_Int32_index.name = "index"_c;
    PixelExportColor_Int16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x3_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x3_UInt32_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x3_Int16_color.name = "color"_c;
    PixelExportColor_Int16x3_Int16_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_Int16_index.name = "index"_c;
    PixelExportColor_Int16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x3_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x3_UInt16_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x4_Int32_color.name = "color"_c;
    PixelExportColor_Int16x4_Int32_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_Int32_index.name = "index"_c;
    PixelExportColor_Int16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x4_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x4_UInt32_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x4_Int16_color.name = "color"_c;
    PixelExportColor_Int16x4_Int16_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_Int16_index.name = "index"_c;
    PixelExportColor_Int16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_Int16x4_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x4_UInt16_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32_Int32_color.name = "color"_c;
    PixelExportColor_UInt32_Int32_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_Int32_index.name = "index"_c;
    PixelExportColor_UInt32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32_Int32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32_UInt32_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32_Int16_color.name = "color"_c;
    PixelExportColor_UInt32_Int16_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_Int16_index.name = "index"_c;
    PixelExportColor_UInt32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32_Int16_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32_UInt16_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x2_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x2_Int32_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x2_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x2_UInt32_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x2_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x2_Int16_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x2_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x2_UInt16_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x3_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x3_Int32_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x3_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x3_UInt32_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x3_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x3_Int16_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x3_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x3_UInt16_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x4_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x4_Int32_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x4_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x4_UInt32_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x4_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x4_Int16_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt32x4_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x4_UInt16_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16_Int32_color.name = "color"_c;
    PixelExportColor_UInt16_Int32_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_Int32_index.name = "index"_c;
    PixelExportColor_UInt16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16_Int32_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16_UInt32_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16_Int16_color.name = "color"_c;
    PixelExportColor_UInt16_Int16_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_Int16_index.name = "index"_c;
    PixelExportColor_UInt16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16_Int16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16_UInt16_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x2_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x2_Int32_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x2_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x2_UInt32_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x2_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x2_Int16_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x2_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x2_UInt16_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x3_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x3_Int32_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x3_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x3_UInt32_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x3_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x3_Int16_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x3_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x3_UInt16_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x4_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x4_Int32_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x4_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x4_UInt32_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x4_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x4_Int16_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16)->returnTypeSymbol = &VoidType;

    PixelExportColor_UInt16x4_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x4_UInt16_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16)->returnTypeSymbol = &VoidType;

    ComputeGetLocalInvocationIndices.name = "computeGetLocalInvocationIndices"_c;
    ComputeGetLocalInvocationIndices.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetLocalInvocationIndices)->returnTypeSymbol = &UInt32x3Type;

    ComputeGetGlobalInvocationIndices.name = "computeGetGlobalInvocationIndices"_c;
    ComputeGetGlobalInvocationIndices.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetGlobalInvocationIndices)->returnTypeSymbol = &UInt32x3Type;

    ComputeGetWorkgroupIndices.name = "computeGetWorkgroupIndices"_c;
    ComputeGetWorkgroupIndices.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetWorkgroupIndices)->returnTypeSymbol = &UInt32x3Type;

    ComputeGetWorkGroupDimensions.name = "computeGetWorkGroupDimensions"_c;
    ComputeGetWorkGroupDimensions.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetWorkGroupDimensions)->returnTypeSymbol = &UInt32x3Type;

    ComputeGetIndexInWorkgroup.name = "computeGetIndexInWorkgroup"_c;
    ComputeGetIndexInWorkgroup.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&ComputeGetIndexInWorkgroup)->returnTypeSymbol = &UInt32Type;

    SubgroupGetId.name = "subgroupGetId"_c;
    SubgroupGetId.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupGetId)->returnTypeSymbol = &UInt32Type;

    SubgroupGetSize.name = "subgroupGetSize"_c;
    SubgroupGetSize.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupGetSize)->returnTypeSymbol = &UInt32Type;

    SubgroupGetNum.name = "subgroupGetNum"_c;
    SubgroupGetNum.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupGetNum)->returnTypeSymbol = &UInt32Type;

    SubgroupGetInvocationMask.name = "subgroupGetInvocationMask"_c;
    SubgroupGetInvocationMask.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetInvocationMask)->returnTypeSymbol = &UInt32x4Type;

    SubgroupGetInvocationAndLowerMask.name = "subgroupGetInvocationAndLowerMask"_c;
    SubgroupGetInvocationAndLowerMask.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetInvocationAndLowerMask)->returnTypeSymbol = &UInt32x4Type;

    SubgroupGetLowerMask.name = "subgroupGetLowerMask"_c;
    SubgroupGetLowerMask.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetLowerMask)->returnTypeSymbol = &UInt32x4Type;

    SubgroupGetInvocationAndGreaterMask.name = "subgroupGetInvocationAndGreaterMask"_c;
    SubgroupGetInvocationAndGreaterMask.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetInvocationAndGreaterMask)->returnTypeSymbol = &UInt32x4Type;

    SubgroupGetGreaterMask.name = "subgroupGetGreaterMask"_c;
    SubgroupGetGreaterMask.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetGreaterMask)->returnTypeSymbol = &UInt32x4Type;

    SubgroupFirstInvocation.name = "subgroupFirstInvocation"_c;
    SubgroupFirstInvocation.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupFirstInvocation)->returnTypeSymbol = &UInt32Type;

    Read_UInt32_value.name = "value"_c;
    Read_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupRead.name = "subgroupRead"_c;
    SubgroupRead.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupRead)->returnTypeSymbol = &UInt32Type;

    SubgroupBallot_Bool8_predicate.name = "value"_c;
    SubgroupBallot_Bool8_predicate.type = Type::FullType{ Bool8Type.name };
    SubgroupBallot.name = "subgroupBallot"_c;
    SubgroupBallot.documentation = "Constructs a subgroup mask within the workgroup where predicate is true"_c;
    SubgroupBallot.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupBallot)->returnTypeSymbol = &UInt32x4Type;

    SubgroupInverseBallot_Bool8_predicate.name = "value"_c;
    SubgroupInverseBallot_Bool8_predicate.type = Type::FullType{ Bool8Type.name };
    SubgroupInverseBallot.name = "subgroupInverseBallot"_c;
    SubgroupInverseBallot.documentation = "Constructs a subgroup mask within the workgroup where predicate is false"_c;
    SubgroupInverseBallot.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&SubgroupInverseBallot)->returnTypeSymbol = &UInt32x4Type;

    SubgroupBallotBitCount_UInt32x4_mask.name = "value"_c;
    SubgroupBallotBitCount_UInt32x4_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotBitCount.name = "subgroupBallotBitCount"_c;
    SubgroupBallotBitCount.documentation = "Returns the number of bits in the mask set to 1."_c;
    SubgroupBallotBitCount.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupBallotBitCount)->returnTypeSymbol = &UInt32Type;

    SubgroupBallotFirstOne_UInt32x4_mask.name = "value"_c;
    SubgroupBallotFirstOne_UInt32x4_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotFirstOne.name = "subgroupBallotFirstOne"_c;
    SubgroupBallotFirstOne.documentation = "Returns the first one (ctz) in a subgroup thread mask."_c;
    SubgroupBallotFirstOne.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupBallotFirstOne)->returnTypeSymbol = &UInt32Type;

    SubgroupBallotLastOne_UInt32x4_mask.name = "value"_c;
    SubgroupBallotLastOne_UInt32x4_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotLastOne.name = "subgroupBallotLastOne"_c;
    SubgroupBallotLastOne.documentation = "Returns the first one (clz) in a subgroup thread mask."_c;
    SubgroupBallotLastOne.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&SubgroupBallotLastOne)->returnTypeSymbol = &UInt32Type;

    SubgroupBallotBit_UInt32x4_mask.name = "value"_c;
    SubgroupBallotBit_UInt32x4_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotBit_UInt32_index.name = "value"_c;
    SubgroupBallotBit_UInt32_index.type = Type::FullType{ UInt32Type.name };
    SubgroupBallotBit.name = "subgroupBallotBit"_c;
    SubgroupBallotBit.documentation = "Returns true if bit at index in mask is 1."_c;
    SubgroupBallotBit.returnType = Type::FullType{ Bool8Type.name };
    Symbol::Resolved(&SubgroupBallotBit)->returnTypeSymbol = &Bool8Type;

    SubgroupSwapDiagonal_Float32_color.name = "color"_c;
    SubgroupSwapDiagonal_Float32_color.type = Type::FullType{ Float32Type.name };
    SubgroupSwapDiagonal_Float32.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float32x2_color.name = "color"_c;
    SubgroupSwapDiagonal_Float32x2_color.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapDiagonal_Float32x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float32x3_color.name = "color"_c;
    SubgroupSwapDiagonal_Float32x3_color.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapDiagonal_Float32x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float32x4_color.name = "color"_c;
    SubgroupSwapDiagonal_Float32x4_color.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapDiagonal_Float32x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float16_color.name = "color"_c;
    SubgroupSwapDiagonal_Float16_color.type = Type::FullType{ Float16Type.name };
    SubgroupSwapDiagonal_Float16.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float16x2_color.name = "color"_c;
    SubgroupSwapDiagonal_Float16x2_color.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapDiagonal_Float16x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float16x3_color.name = "color"_c;
    SubgroupSwapDiagonal_Float16x3_color.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapDiagonal_Float16x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Float16x4_color.name = "color"_c;
    SubgroupSwapDiagonal_Float16x4_color.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapDiagonal_Float16x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int32_color.name = "color"_c;
    SubgroupSwapDiagonal_Int32_color.type = Type::FullType{ Int32Type.name };
    SubgroupSwapDiagonal_Int32.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int32x2_color.name = "color"_c;
    SubgroupSwapDiagonal_Int32x2_color.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapDiagonal_Int32x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int32x3_color.name = "color"_c;
    SubgroupSwapDiagonal_Int32x3_color.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapDiagonal_Int32x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int32x4_color.name = "color"_c;
    SubgroupSwapDiagonal_Int32x4_color.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapDiagonal_Int32x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int16_color.name = "color"_c;
    SubgroupSwapDiagonal_Int16_color.type = Type::FullType{ Int16Type.name };
    SubgroupSwapDiagonal_Int16.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int16x2_color.name = "color"_c;
    SubgroupSwapDiagonal_Int16x2_color.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapDiagonal_Int16x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int16x3_color.name = "color"_c;
    SubgroupSwapDiagonal_Int16x3_color.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapDiagonal_Int16x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_Int16x4_color.name = "color"_c;
    SubgroupSwapDiagonal_Int16x4_color.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapDiagonal_Int16x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt32_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt32_color.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapDiagonal_UInt32.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt32x2_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt32x2_color.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapDiagonal_UInt32x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt32x3_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt32x3_color.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapDiagonal_UInt32x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt32x4_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt32x4_color.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapDiagonal_UInt32x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt16_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt16_color.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapDiagonal_UInt16.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt16x2_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt16x2_color.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapDiagonal_UInt16x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt16x3_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt16x3_color.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapDiagonal_UInt16x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapDiagonal_UInt16x4_color.name = "color"_c;
    SubgroupSwapDiagonal_UInt16x4_color.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapDiagonal_UInt16x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float32_color.name = "color"_c;
    SubgroupSwapVertical_Float32_color.type = Type::FullType{ Float32Type.name };
    SubgroupSwapVertical_Float32.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float32x2_color.name = "color"_c;
    SubgroupSwapVertical_Float32x2_color.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapVertical_Float32x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float32x3_color.name = "color"_c;
    SubgroupSwapVertical_Float32x3_color.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapVertical_Float32x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float32x4_color.name = "color"_c;
    SubgroupSwapVertical_Float32x4_color.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapVertical_Float32x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float16_color.name = "color"_c;
    SubgroupSwapVertical_Float16_color.type = Type::FullType{ Float16Type.name };
    SubgroupSwapVertical_Float16.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float16x2_color.name = "color"_c;
    SubgroupSwapVertical_Float16x2_color.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapVertical_Float16x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float16x3_color.name = "color"_c;
    SubgroupSwapVertical_Float16x3_color.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapVertical_Float16x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Float16x4_color.name = "color"_c;
    SubgroupSwapVertical_Float16x4_color.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapVertical_Float16x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int32_color.name = "color"_c;
    SubgroupSwapVertical_Int32_color.type = Type::FullType{ Int32Type.name };
    SubgroupSwapVertical_Int32.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int32x2_color.name = "color"_c;
    SubgroupSwapVertical_Int32x2_color.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapVertical_Int32x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int32x3_color.name = "color"_c;
    SubgroupSwapVertical_Int32x3_color.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapVertical_Int32x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int32x4_color.name = "color"_c;
    SubgroupSwapVertical_Int32x4_color.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapVertical_Int32x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int16_color.name = "color"_c;
    SubgroupSwapVertical_Int16_color.type = Type::FullType{ Int16Type.name };
    SubgroupSwapVertical_Int16.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int16x2_color.name = "color"_c;
    SubgroupSwapVertical_Int16x2_color.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapVertical_Int16x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int16x3_color.name = "color"_c;
    SubgroupSwapVertical_Int16x3_color.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapVertical_Int16x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_Int16x4_color.name = "color"_c;
    SubgroupSwapVertical_Int16x4_color.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapVertical_Int16x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt32_color.name = "color"_c;
    SubgroupSwapVertical_UInt32_color.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapVertical_UInt32.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt32x2_color.name = "color"_c;
    SubgroupSwapVertical_UInt32x2_color.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapVertical_UInt32x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt32x3_color.name = "color"_c;
    SubgroupSwapVertical_UInt32x3_color.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapVertical_UInt32x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt32x4_color.name = "color"_c;
    SubgroupSwapVertical_UInt32x4_color.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapVertical_UInt32x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt16_color.name = "color"_c;
    SubgroupSwapVertical_UInt16_color.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapVertical_UInt16.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt16x2_color.name = "color"_c;
    SubgroupSwapVertical_UInt16x2_color.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapVertical_UInt16x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt16x3_color.name = "color"_c;
    SubgroupSwapVertical_UInt16x3_color.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapVertical_UInt16x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapVertical_UInt16x4_color.name = "color"_c;
    SubgroupSwapVertical_UInt16x4_color.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapVertical_UInt16x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float32_color.name = "color"_c;
    SubgroupSwapHorizontal_Float32_color.type = Type::FullType{ Float32Type.name };
    SubgroupSwapHorizontal_Float32.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float32x2_color.name = "color"_c;
    SubgroupSwapHorizontal_Float32x2_color.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapHorizontal_Float32x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float32x3_color.name = "color"_c;
    SubgroupSwapHorizontal_Float32x3_color.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapHorizontal_Float32x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float32x4_color.name = "color"_c;
    SubgroupSwapHorizontal_Float32x4_color.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapHorizontal_Float32x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float16_color.name = "color"_c;
    SubgroupSwapHorizontal_Float16_color.type = Type::FullType{ Float16Type.name };
    SubgroupSwapHorizontal_Float16.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float16x2_color.name = "color"_c;
    SubgroupSwapHorizontal_Float16x2_color.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapHorizontal_Float16x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float16x3_color.name = "color"_c;
    SubgroupSwapHorizontal_Float16x3_color.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapHorizontal_Float16x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Float16x4_color.name = "color"_c;
    SubgroupSwapHorizontal_Float16x4_color.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapHorizontal_Float16x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int32_color.name = "color"_c;
    SubgroupSwapHorizontal_Int32_color.type = Type::FullType{ Int32Type.name };
    SubgroupSwapHorizontal_Int32.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int32x2_color.name = "color"_c;
    SubgroupSwapHorizontal_Int32x2_color.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapHorizontal_Int32x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int32x3_color.name = "color"_c;
    SubgroupSwapHorizontal_Int32x3_color.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapHorizontal_Int32x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int32x4_color.name = "color"_c;
    SubgroupSwapHorizontal_Int32x4_color.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapHorizontal_Int32x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int16_color.name = "color"_c;
    SubgroupSwapHorizontal_Int16_color.type = Type::FullType{ Int16Type.name };
    SubgroupSwapHorizontal_Int16.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int16x2_color.name = "color"_c;
    SubgroupSwapHorizontal_Int16x2_color.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapHorizontal_Int16x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int16x3_color.name = "color"_c;
    SubgroupSwapHorizontal_Int16x3_color.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapHorizontal_Int16x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_Int16x4_color.name = "color"_c;
    SubgroupSwapHorizontal_Int16x4_color.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapHorizontal_Int16x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt32_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt32_color.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapHorizontal_UInt32.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt32x2_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt32x2_color.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapHorizontal_UInt32x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt32x3_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt32x3_color.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapHorizontal_UInt32x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt32x4_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt32x4_color.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapHorizontal_UInt32x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt16_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt16_color.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapHorizontal_UInt16.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt16x2_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt16x2_color.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapHorizontal_UInt16x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16x2.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt16x3_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt16x3_color.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapHorizontal_UInt16x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16x3.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3)->returnTypeSymbol = &VoidType;

    SubgroupSwapHorizontal_UInt16x4_color.name = "color"_c;
    SubgroupSwapHorizontal_UInt16x4_color.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapHorizontal_UInt16x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16x4.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4)->returnTypeSymbol = &VoidType;

    AtomicLoad_UInt32_ptr.name = "ptr"_c;
    AtomicLoad_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicLoad_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicLoad_UInt32_semantics.name = "semantics"_c;
    AtomicLoad_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_UInt32_semantics.type.literal = true;
    AtomicLoad_UInt32.name = "atomicLoad"_c;
    AtomicLoad_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AtomicLoad_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicLoad_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_UInt32)->returnTypeSymbol = &UInt32Type;

    AtomicIncrement_UInt32_ptr.name = "ptr"_c;
    AtomicIncrement_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicIncrement_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicIncrement_UInt32_semantics.name = "semantics"_c;
    AtomicIncrement_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_UInt32_semantics.type.literal = true;
    AtomicIncrement_UInt32.name = "atomicIncrement"_c;
    AtomicIncrement_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AtomicIncrement_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicIncrement_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_UInt32)->returnTypeSymbol = &UInt32Type;

    AtomicDecrement_UInt32_ptr.name = "ptr"_c;
    AtomicDecrement_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicDecrement_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicDecrement_UInt32_semantics.name = "semantics"_c;
    AtomicDecrement_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_UInt32_semantics.type.literal = true;
    AtomicDecrement_UInt32.name = "atomicDecrement"_c;
    AtomicDecrement_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AtomicDecrement_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicDecrement_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_UInt32)->returnTypeSymbol = &UInt32Type;

    AtomicLoad_Int32_ptr.name = "ptr"_c;
    AtomicLoad_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicLoad_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicLoad_Int32_semantics.name = "semantics"_c;
    AtomicLoad_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Int32_semantics.type.literal = true;
    AtomicLoad_Int32.name = "atomicLoad"_c;
    AtomicLoad_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&AtomicLoad_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicLoad_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Int32)->returnTypeSymbol = &Int32Type;

    AtomicIncrement_Int32_ptr.name = "ptr"_c;
    AtomicIncrement_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicIncrement_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicIncrement_Int32_semantics.name = "semantics"_c;
    AtomicIncrement_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Int32_semantics.type.literal = true;
    AtomicIncrement_Int32.name = "atomicIncrement"_c;
    AtomicIncrement_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&AtomicIncrement_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicIncrement_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Int32)->returnTypeSymbol = &Int32Type;

    AtomicDecrement_Int32_ptr.name = "ptr"_c;
    AtomicDecrement_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicDecrement_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicDecrement_Int32_semantics.name = "semantics"_c;
    AtomicDecrement_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Int32_semantics.type.literal = true;
    AtomicDecrement_Int32.name = "atomicDecrement"_c;
    AtomicDecrement_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&AtomicDecrement_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicDecrement_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Int32)->returnTypeSymbol = &Int32Type;

    AtomicLoad_UInt16_ptr.name = "ptr"_c;
    AtomicLoad_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicLoad_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicLoad_UInt16_semantics.name = "semantics"_c;
    AtomicLoad_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_UInt16_semantics.type.literal = true;
    AtomicLoad_UInt16.name = "atomicLoad"_c;
    AtomicLoad_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&AtomicLoad_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicLoad_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_UInt16)->returnTypeSymbol = &UInt16Type;

    AtomicIncrement_UInt16_ptr.name = "ptr"_c;
    AtomicIncrement_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicIncrement_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicIncrement_UInt16_semantics.name = "semantics"_c;
    AtomicIncrement_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_UInt16_semantics.type.literal = true;
    AtomicIncrement_UInt16.name = "atomicIncrement"_c;
    AtomicIncrement_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&AtomicIncrement_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicIncrement_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_UInt16)->returnTypeSymbol = &UInt16Type;

    AtomicDecrement_UInt16_ptr.name = "ptr"_c;
    AtomicDecrement_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicDecrement_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicDecrement_UInt16_semantics.name = "semantics"_c;
    AtomicDecrement_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_UInt16_semantics.type.literal = true;
    AtomicDecrement_UInt16.name = "atomicDecrement"_c;
    AtomicDecrement_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&AtomicDecrement_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicDecrement_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_UInt16)->returnTypeSymbol = &UInt16Type;

    AtomicLoad_Int16_ptr.name = "ptr"_c;
    AtomicLoad_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicLoad_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicLoad_Int16_semantics.name = "semantics"_c;
    AtomicLoad_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Int16_semantics.type.literal = true;
    AtomicLoad_Int16.name = "atomicLoad"_c;
    AtomicLoad_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&AtomicLoad_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicLoad_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Int16)->returnTypeSymbol = &Int16Type;

    AtomicIncrement_Int16_ptr.name = "ptr"_c;
    AtomicIncrement_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicIncrement_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicIncrement_Int16_semantics.name = "semantics"_c;
    AtomicIncrement_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Int16_semantics.type.literal = true;
    AtomicIncrement_Int16.name = "atomicIncrement"_c;
    AtomicIncrement_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&AtomicIncrement_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicIncrement_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Int16)->returnTypeSymbol = &Int16Type;

    AtomicDecrement_Int16_ptr.name = "ptr"_c;
    AtomicDecrement_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicDecrement_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicDecrement_Int16_semantics.name = "semantics"_c;
    AtomicDecrement_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Int16_semantics.type.literal = true;
    AtomicDecrement_Int16.name = "atomicDecrement"_c;
    AtomicDecrement_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&AtomicDecrement_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicDecrement_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Int16)->returnTypeSymbol = &Int16Type;

    AtomicExchange_UInt32_ptr.name = "ptr"_c;
    AtomicExchange_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicExchange_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicExchange_UInt32_value.name = "value"_c;
    AtomicExchange_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicExchange_UInt32_semantics.name = "semantics"_c;
    AtomicExchange_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_UInt32_semantics.type.literal = true;
    AtomicExchange_UInt32.name = "atomicExchange"_c;
    AtomicExchange_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AtomicExchange_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicExchange_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicExchange_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_UInt32)->returnTypeSymbol = &UInt32Type;

    AtomicAdd_UInt32_ptr.name = "ptr"_c;
    AtomicAdd_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicAdd_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAdd_UInt32_value.name = "value"_c;
    AtomicAdd_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicAdd_UInt32_semantics.name = "semantics"_c;
    AtomicAdd_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_UInt32_semantics.type.literal = true;
    AtomicAdd_UInt32.name = "atomicAdd"_c;
    AtomicAdd_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AtomicAdd_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAdd_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAdd_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_UInt32)->returnTypeSymbol = &UInt32Type;

    AtomicSubtract_UInt32_ptr.name = "ptr"_c;
    AtomicSubtract_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicSubtract_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicSubtract_UInt32_value.name = "value"_c;
    AtomicSubtract_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicSubtract_UInt32_semantics.name = "semantics"_c;
    AtomicSubtract_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_UInt32_semantics.type.literal = true;
    AtomicSubtract_UInt32.name = "atomicSubtract"_c;
    AtomicSubtract_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AtomicSubtract_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicSubtract_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicSubtract_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_UInt32)->returnTypeSymbol = &UInt32Type;

    AtomicAnd_UInt32_ptr.name = "ptr"_c;
    AtomicAnd_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicAnd_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAnd_UInt32_value.name = "value"_c;
    AtomicAnd_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicAnd_UInt32_semantics.name = "semantics"_c;
    AtomicAnd_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_UInt32_semantics.type.literal = true;
    AtomicAnd_UInt32.name = "atomicAnd"_c;
    AtomicAnd_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AtomicAnd_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAnd_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAnd_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_UInt32)->returnTypeSymbol = &UInt32Type;

    AtomicOr_UInt32_ptr.name = "ptr"_c;
    AtomicOr_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicOr_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicOr_UInt32_value.name = "value"_c;
    AtomicOr_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicOr_UInt32_semantics.name = "semantics"_c;
    AtomicOr_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_UInt32_semantics.type.literal = true;
    AtomicOr_UInt32.name = "atomicOr"_c;
    AtomicOr_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AtomicOr_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicOr_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicOr_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_UInt32)->returnTypeSymbol = &UInt32Type;

    AtomicXor_UInt32_ptr.name = "ptr"_c;
    AtomicXor_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicXor_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicXor_UInt32_value.name = "value"_c;
    AtomicXor_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicXor_UInt32_semantics.name = "semantics"_c;
    AtomicXor_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_UInt32_semantics.type.literal = true;
    AtomicXor_UInt32.name = "atomicXor"_c;
    AtomicXor_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AtomicXor_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicXor_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicXor_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_UInt32)->returnTypeSymbol = &UInt32Type;

    AtomicExchange_Int32_ptr.name = "ptr"_c;
    AtomicExchange_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicExchange_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicExchange_Int32_value.name = "value"_c;
    AtomicExchange_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicExchange_Int32_semantics.name = "semantics"_c;
    AtomicExchange_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Int32_semantics.type.literal = true;
    AtomicExchange_Int32.name = "atomicExchange"_c;
    AtomicExchange_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&AtomicExchange_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicExchange_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicExchange_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Int32)->returnTypeSymbol = &Int32Type;

    AtomicAdd_Int32_ptr.name = "ptr"_c;
    AtomicAdd_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicAdd_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAdd_Int32_value.name = "value"_c;
    AtomicAdd_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicAdd_Int32_semantics.name = "semantics"_c;
    AtomicAdd_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Int32_semantics.type.literal = true;
    AtomicAdd_Int32.name = "atomicAdd"_c;
    AtomicAdd_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&AtomicAdd_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAdd_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAdd_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Int32)->returnTypeSymbol = &Int32Type;

    AtomicSubtract_Int32_ptr.name = "ptr"_c;
    AtomicSubtract_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicSubtract_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicSubtract_Int32_value.name = "value"_c;
    AtomicSubtract_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicSubtract_Int32_semantics.name = "semantics"_c;
    AtomicSubtract_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Int32_semantics.type.literal = true;
    AtomicSubtract_Int32.name = "atomicSubtract"_c;
    AtomicSubtract_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&AtomicSubtract_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicSubtract_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicSubtract_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Int32)->returnTypeSymbol = &Int32Type;

    AtomicAnd_Int32_ptr.name = "ptr"_c;
    AtomicAnd_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicAnd_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAnd_Int32_value.name = "value"_c;
    AtomicAnd_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicAnd_Int32_semantics.name = "semantics"_c;
    AtomicAnd_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Int32_semantics.type.literal = true;
    AtomicAnd_Int32.name = "atomicAnd"_c;
    AtomicAnd_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&AtomicAnd_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAnd_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAnd_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Int32)->returnTypeSymbol = &Int32Type;

    AtomicOr_Int32_ptr.name = "ptr"_c;
    AtomicOr_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicOr_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicOr_Int32_value.name = "value"_c;
    AtomicOr_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicOr_Int32_semantics.name = "semantics"_c;
    AtomicOr_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Int32_semantics.type.literal = true;
    AtomicOr_Int32.name = "atomicOr"_c;
    AtomicOr_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&AtomicOr_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicOr_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicOr_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Int32)->returnTypeSymbol = &Int32Type;

    AtomicXor_Int32_ptr.name = "ptr"_c;
    AtomicXor_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicXor_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicXor_Int32_value.name = "value"_c;
    AtomicXor_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicXor_Int32_semantics.name = "semantics"_c;
    AtomicXor_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Int32_semantics.type.literal = true;
    AtomicXor_Int32.name = "atomicXor"_c;
    AtomicXor_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&AtomicXor_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicXor_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicXor_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Int32)->returnTypeSymbol = &Int32Type;

    AtomicExchange_UInt16_ptr.name = "ptr"_c;
    AtomicExchange_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicExchange_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicExchange_UInt16_value.name = "value"_c;
    AtomicExchange_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicExchange_UInt16_semantics.name = "semantics"_c;
    AtomicExchange_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_UInt16_semantics.type.literal = true;
    AtomicExchange_UInt16.name = "atomicExchange"_c;
    AtomicExchange_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&AtomicExchange_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicExchange_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicExchange_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_UInt16)->returnTypeSymbol = &UInt16Type;

    AtomicAdd_UInt16_ptr.name = "ptr"_c;
    AtomicAdd_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicAdd_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAdd_UInt16_value.name = "value"_c;
    AtomicAdd_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicAdd_UInt16_semantics.name = "semantics"_c;
    AtomicAdd_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_UInt16_semantics.type.literal = true;
    AtomicAdd_UInt16.name = "atomicAdd"_c;
    AtomicAdd_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&AtomicAdd_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAdd_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAdd_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_UInt16)->returnTypeSymbol = &UInt16Type;

    AtomicSubtract_UInt16_ptr.name = "ptr"_c;
    AtomicSubtract_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicSubtract_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicSubtract_UInt16_value.name = "value"_c;
    AtomicSubtract_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicSubtract_UInt16_semantics.name = "semantics"_c;
    AtomicSubtract_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_UInt16_semantics.type.literal = true;
    AtomicSubtract_UInt16.name = "atomicSubtract"_c;
    AtomicSubtract_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&AtomicSubtract_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicSubtract_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicSubtract_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_UInt16)->returnTypeSymbol = &UInt16Type;

    AtomicAnd_UInt16_ptr.name = "ptr"_c;
    AtomicAnd_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicAnd_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAnd_UInt16_value.name = "value"_c;
    AtomicAnd_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicAnd_UInt16_semantics.name = "semantics"_c;
    AtomicAnd_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_UInt16_semantics.type.literal = true;
    AtomicAnd_UInt16.name = "atomicAnd"_c;
    AtomicAnd_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&AtomicAnd_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAnd_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAnd_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_UInt16)->returnTypeSymbol = &UInt16Type;

    AtomicOr_UInt16_ptr.name = "ptr"_c;
    AtomicOr_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicOr_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicOr_UInt16_value.name = "value"_c;
    AtomicOr_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicOr_UInt16_semantics.name = "semantics"_c;
    AtomicOr_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_UInt16_semantics.type.literal = true;
    AtomicOr_UInt16.name = "atomicOr"_c;
    AtomicOr_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&AtomicOr_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicOr_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicOr_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_UInt16)->returnTypeSymbol = &UInt16Type;

    AtomicXor_UInt16_ptr.name = "ptr"_c;
    AtomicXor_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicXor_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicXor_UInt16_value.name = "value"_c;
    AtomicXor_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicXor_UInt16_semantics.name = "semantics"_c;
    AtomicXor_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_UInt16_semantics.type.literal = true;
    AtomicXor_UInt16.name = "atomicXor"_c;
    AtomicXor_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&AtomicXor_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicXor_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicXor_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_UInt16)->returnTypeSymbol = &UInt16Type;

    AtomicExchange_Int16_ptr.name = "ptr"_c;
    AtomicExchange_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicExchange_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicExchange_Int16_value.name = "value"_c;
    AtomicExchange_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicExchange_Int16_semantics.name = "semantics"_c;
    AtomicExchange_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Int16_semantics.type.literal = true;
    AtomicExchange_Int16.name = "atomicExchange"_c;
    AtomicExchange_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&AtomicExchange_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicExchange_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicExchange_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Int16)->returnTypeSymbol = &Int16Type;

    AtomicAdd_Int16_ptr.name = "ptr"_c;
    AtomicAdd_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicAdd_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAdd_Int16_value.name = "value"_c;
    AtomicAdd_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicAdd_Int16_semantics.name = "semantics"_c;
    AtomicAdd_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Int16_semantics.type.literal = true;
    AtomicAdd_Int16.name = "atomicAdd"_c;
    AtomicAdd_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&AtomicAdd_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAdd_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAdd_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Int16)->returnTypeSymbol = &Int16Type;

    AtomicSubtract_Int16_ptr.name = "ptr"_c;
    AtomicSubtract_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicSubtract_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicSubtract_Int16_value.name = "value"_c;
    AtomicSubtract_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicSubtract_Int16_semantics.name = "semantics"_c;
    AtomicSubtract_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Int16_semantics.type.literal = true;
    AtomicSubtract_Int16.name = "atomicSubtract"_c;
    AtomicSubtract_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&AtomicSubtract_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicSubtract_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicSubtract_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Int16)->returnTypeSymbol = &Int16Type;

    AtomicAnd_Int16_ptr.name = "ptr"_c;
    AtomicAnd_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicAnd_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAnd_Int16_value.name = "value"_c;
    AtomicAnd_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicAnd_Int16_semantics.name = "semantics"_c;
    AtomicAnd_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Int16_semantics.type.literal = true;
    AtomicAnd_Int16.name = "atomicAnd"_c;
    AtomicAnd_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&AtomicAnd_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAnd_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAnd_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Int16)->returnTypeSymbol = &Int16Type;

    AtomicOr_Int16_ptr.name = "ptr"_c;
    AtomicOr_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicOr_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicOr_Int16_value.name = "value"_c;
    AtomicOr_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicOr_Int16_semantics.name = "semantics"_c;
    AtomicOr_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Int16_semantics.type.literal = true;
    AtomicOr_Int16.name = "atomicOr"_c;
    AtomicOr_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&AtomicOr_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicOr_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicOr_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Int16)->returnTypeSymbol = &Int16Type;

    AtomicXor_Int16_ptr.name = "ptr"_c;
    AtomicXor_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicXor_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicXor_Int16_value.name = "value"_c;
    AtomicXor_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicXor_Int16_semantics.name = "semantics"_c;
    AtomicXor_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Int16_semantics.type.literal = true;
    AtomicXor_Int16.name = "atomicXor"_c;
    AtomicXor_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&AtomicXor_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicXor_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicXor_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Int16)->returnTypeSymbol = &Int16Type;

    AtomicCompareExchange_UInt32_ptr.name = "ptr"_c;
    AtomicCompareExchange_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicCompareExchange_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicCompareExchange_UInt32_value.name = "value"_c;
    AtomicCompareExchange_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicCompareExchange_UInt32_compare.name = "compare"_c;
    AtomicCompareExchange_UInt32_compare.type = Type::FullType{ UInt32Type.name };
    AtomicCompareExchange_UInt32_semantics.name = "semantics"_c;
    AtomicCompareExchange_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_UInt32_semantics.type.literal = true;
    AtomicCompareExchange_UInt32.name = "atomicCompareExchange"_c;
    AtomicCompareExchange_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&AtomicCompareExchange_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt32_compare)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_UInt32)->returnTypeSymbol = &UInt32Type;

    AtomicCompareExchange_Int32_ptr.name = "ptr"_c;
    AtomicCompareExchange_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicCompareExchange_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicCompareExchange_Int32_value.name = "value"_c;
    AtomicCompareExchange_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicCompareExchange_Int32_compare.name = "compare"_c;
    AtomicCompareExchange_Int32_compare.type = Type::FullType{ Int32Type.name };
    AtomicCompareExchange_Int32_semantics.name = "semantics"_c;
    AtomicCompareExchange_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Int32_semantics.type.literal = true;
    AtomicCompareExchange_Int32.name = "atomicCompareExchange"_c;
    AtomicCompareExchange_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&AtomicCompareExchange_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicCompareExchange_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicCompareExchange_Int32_compare)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicCompareExchange_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Int32)->returnTypeSymbol = &Int32Type;

    AtomicCompareExchange_UInt16_ptr.name = "ptr"_c;
    AtomicCompareExchange_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicCompareExchange_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicCompareExchange_UInt16_value.name = "value"_c;
    AtomicCompareExchange_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicCompareExchange_UInt16_compare.name = "compare"_c;
    AtomicCompareExchange_UInt16_compare.type = Type::FullType{ UInt16Type.name };
    AtomicCompareExchange_UInt16_semantics.name = "semantics"_c;
    AtomicCompareExchange_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_UInt16_semantics.type.literal = true;
    AtomicCompareExchange_UInt16.name = "atomicCompareExchange"_c;
    AtomicCompareExchange_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&AtomicCompareExchange_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt16_compare)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_UInt16)->returnTypeSymbol = &UInt16Type;

    AtomicCompareExchange_Int16_ptr.name = "ptr"_c;
    AtomicCompareExchange_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicCompareExchange_Int16_value.name = "value"_c;
    AtomicCompareExchange_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int16_compare.name = "compare"_c;
    AtomicCompareExchange_Int16_compare.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int16_semantics.name = "semantics"_c;
    AtomicCompareExchange_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Int16_semantics.type.literal = true;
    AtomicCompareExchange_Int16.name = "atomicCompareExchange"_c;
    AtomicCompareExchange_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&AtomicCompareExchange_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int16_compare)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Int16)->returnTypeSymbol = &Int16Type;

    BitInsert_UInt16_base.name = "base"_c;
    BitInsert_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16_value.name = "value"_c ;
    BitInsert_UInt16_value.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16_offset.name = "offset"_c;
    BitInsert_UInt16_offset.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16_count.name = "count"_c;
    BitInsert_UInt16_count.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16.name = "bitInsert"_c;
    BitInsert_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&BitInsert_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16_offset)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16_count)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16)->returnTypeSymbol = &UInt16Type;

    BitInsert_UInt32_base.name = "base"_c;
    BitInsert_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32_value.name = "value"_c ;
    BitInsert_UInt32_value.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32_offset.name = "offset"_c;
    BitInsert_UInt32_offset.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32_count.name = "count"_c;
    BitInsert_UInt32_count.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32.name = "bitInsert"_c;
    BitInsert_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BitInsert_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32_count)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32)->returnTypeSymbol = &UInt32Type;

    BitExtract_Int32_base.name = "base"_c;
    BitExtract_Int32_base.type = Type::FullType{ Int32Type.name };
    BitExtract_Int32_offset.name = "offset"_c ;
    BitExtract_Int32_offset.type = Type::FullType{ Int32Type.name };
    BitExtract_Int32_count.name = "count"_c;
    BitExtract_Int32_count.type = Type::FullType{ Int32Type.name };
    BitExtract_Int32.name = "bitExtract"_c;
    BitExtract_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&BitExtract_Int32_base)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitExtract_Int32_offset)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitExtract_Int32_count)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitExtract_Int32)->returnTypeSymbol = &Int32Type;

    BitExtract_Int32x2_base.name = "base"_c;
    BitExtract_Int32x2_base.type = Type::FullType{ Int32x2Type.name };
    BitExtract_Int32x2_offset.name = "offset"_c ;
    BitExtract_Int32x2_offset.type = Type::FullType{ Int32x2Type.name };
    BitExtract_Int32x2_count.name = "count"_c;
    BitExtract_Int32x2_count.type = Type::FullType{ Int32x2Type.name };
    BitExtract_Int32x2.name = "bitExtract"_c;
    BitExtract_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&BitExtract_Int32x2_base)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&BitExtract_Int32x2_offset)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&BitExtract_Int32x2_count)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&BitExtract_Int32x2)->returnTypeSymbol = &Int32x2Type;

    BitExtract_Int32x3_base.name = "base"_c;
    BitExtract_Int32x3_base.type = Type::FullType{ Int32x3Type.name };
    BitExtract_Int32x3_offset.name = "offset"_c ;
    BitExtract_Int32x3_offset.type = Type::FullType{ Int32x3Type.name };
    BitExtract_Int32x3_count.name = "count"_c;
    BitExtract_Int32x3_count.type = Type::FullType{ Int32x3Type.name };
    BitExtract_Int32x3.name = "bitExtract"_c;
    BitExtract_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&BitExtract_Int32x3_base)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&BitExtract_Int32x3_offset)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&BitExtract_Int32x3_count)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&BitExtract_Int32x3)->returnTypeSymbol = &Int32x3Type;

    BitExtract_Int32x4_base.name = "base"_c;
    BitExtract_Int32x4_base.type = Type::FullType{ Int32x4Type.name };
    BitExtract_Int32x4_offset.name = "offset"_c ;
    BitExtract_Int32x4_offset.type = Type::FullType{ Int32x4Type.name };
    BitExtract_Int32x4_count.name = "count"_c;
    BitExtract_Int32x4_count.type = Type::FullType{ Int32x4Type.name };
    BitExtract_Int32x4.name = "bitExtract"_c;
    BitExtract_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&BitExtract_Int32x4_base)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&BitExtract_Int32x4_offset)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&BitExtract_Int32x4_count)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&BitExtract_Int32x4)->returnTypeSymbol = &Int32x4Type;

    BitExtract_Int16_base.name = "base"_c;
    BitExtract_Int16_base.type = Type::FullType{ Int16Type.name };
    BitExtract_Int16_offset.name = "offset"_c ;
    BitExtract_Int16_offset.type = Type::FullType{ Int16Type.name };
    BitExtract_Int16_count.name = "count"_c;
    BitExtract_Int16_count.type = Type::FullType{ Int16Type.name };
    BitExtract_Int16.name = "bitExtract"_c;
    BitExtract_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&BitExtract_Int16_base)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitExtract_Int16_offset)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitExtract_Int16_count)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitExtract_Int16)->returnTypeSymbol = &Int16Type;

    BitExtract_Int16x2_base.name = "base"_c;
    BitExtract_Int16x2_base.type = Type::FullType{ Int16x2Type.name };
    BitExtract_Int16x2_offset.name = "offset"_c ;
    BitExtract_Int16x2_offset.type = Type::FullType{ Int16x2Type.name };
    BitExtract_Int16x2_count.name = "count"_c;
    BitExtract_Int16x2_count.type = Type::FullType{ Int16x2Type.name };
    BitExtract_Int16x2.name = "bitExtract"_c;
    BitExtract_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&BitExtract_Int16x2_base)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&BitExtract_Int16x2_offset)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&BitExtract_Int16x2_count)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&BitExtract_Int16x2)->returnTypeSymbol = &Int16x2Type;

    BitExtract_Int16x3_base.name = "base"_c;
    BitExtract_Int16x3_base.type = Type::FullType{ Int16x3Type.name };
    BitExtract_Int16x3_offset.name = "offset"_c ;
    BitExtract_Int16x3_offset.type = Type::FullType{ Int16x3Type.name };
    BitExtract_Int16x3_count.name = "count"_c;
    BitExtract_Int16x3_count.type = Type::FullType{ Int16x3Type.name };
    BitExtract_Int16x3.name = "bitExtract"_c;
    BitExtract_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&BitExtract_Int16x3_base)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&BitExtract_Int16x3_offset)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&BitExtract_Int16x3_count)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&BitExtract_Int16x3)->returnTypeSymbol = &Int16x3Type;

    BitExtract_Int16x4_base.name = "base"_c;
    BitExtract_Int16x4_base.type = Type::FullType{ Int16x4Type.name };
    BitExtract_Int16x4_offset.name = "offset"_c ;
    BitExtract_Int16x4_offset.type = Type::FullType{ Int16x4Type.name };
    BitExtract_Int16x4_count.name = "count"_c;
    BitExtract_Int16x4_count.type = Type::FullType{ Int16x4Type.name };
    BitExtract_Int16x4.name = "bitExtract"_c;
    BitExtract_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&BitExtract_Int16x4_base)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&BitExtract_Int16x4_offset)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&BitExtract_Int16x4_count)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&BitExtract_Int16x4)->returnTypeSymbol = &Int16x4Type;

    BitExtract_UInt32_base.name = "base"_c;
    BitExtract_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitExtract_UInt32_offset.name = "offset"_c ;
    BitExtract_UInt32_offset.type = Type::FullType{ UInt32Type.name };
    BitExtract_UInt32_count.name = "count"_c;
    BitExtract_UInt32_count.type = Type::FullType{ UInt32Type.name };
    BitExtract_UInt32.name = "bitExtract"_c;
    BitExtract_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BitExtract_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitExtract_UInt32_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitExtract_UInt32_count)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitExtract_UInt32)->returnTypeSymbol = &UInt32Type;

    BitExtract_UInt32x2_base.name = "base"_c;
    BitExtract_UInt32x2_base.type = Type::FullType{ UInt32x2Type.name };
    BitExtract_UInt32x2_offset.name = "offset"_c ;
    BitExtract_UInt32x2_offset.type = Type::FullType{ UInt32x2Type.name };
    BitExtract_UInt32x2_count.name = "count"_c;
    BitExtract_UInt32x2_count.type = Type::FullType{ UInt32x2Type.name };
    BitExtract_UInt32x2.name = "bitExtract"_c;
    BitExtract_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&BitExtract_UInt32x2_base)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&BitExtract_UInt32x2_offset)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&BitExtract_UInt32x2_count)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&BitExtract_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    BitExtract_UInt32x3_base.name = "base"_c;
    BitExtract_UInt32x3_base.type = Type::FullType{ UInt32x3Type.name };
    BitExtract_UInt32x3_offset.name = "offset"_c ;
    BitExtract_UInt32x3_offset.type = Type::FullType{ UInt32x3Type.name };
    BitExtract_UInt32x3_count.name = "count"_c;
    BitExtract_UInt32x3_count.type = Type::FullType{ UInt32x3Type.name };
    BitExtract_UInt32x3.name = "bitExtract"_c;
    BitExtract_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&BitExtract_UInt32x3_base)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&BitExtract_UInt32x3_offset)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&BitExtract_UInt32x3_count)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&BitExtract_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    BitExtract_UInt32x4_base.name = "base"_c;
    BitExtract_UInt32x4_base.type = Type::FullType{ UInt32x4Type.name };
    BitExtract_UInt32x4_offset.name = "offset"_c ;
    BitExtract_UInt32x4_offset.type = Type::FullType{ UInt32x4Type.name };
    BitExtract_UInt32x4_count.name = "count"_c;
    BitExtract_UInt32x4_count.type = Type::FullType{ UInt32x4Type.name };
    BitExtract_UInt32x4.name = "bitExtract"_c;
    BitExtract_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&BitExtract_UInt32x4_base)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&BitExtract_UInt32x4_offset)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&BitExtract_UInt32x4_count)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&BitExtract_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    BitExtract_UInt16_base.name = "base"_c;
    BitExtract_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitExtract_UInt16_offset.name = "offset"_c ;
    BitExtract_UInt16_offset.type = Type::FullType{ UInt16Type.name };
    BitExtract_UInt16_count.name = "count"_c;
    BitExtract_UInt16_count.type = Type::FullType{ UInt16Type.name };
    BitExtract_UInt16.name = "bitExtract"_c;
    BitExtract_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&BitExtract_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitExtract_UInt16_offset)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitExtract_UInt16_count)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitExtract_UInt16)->returnTypeSymbol = &UInt16Type;

    BitExtract_UInt16x2_base.name = "base"_c;
    BitExtract_UInt16x2_base.type = Type::FullType{ UInt16x2Type.name };
    BitExtract_UInt16x2_offset.name = "offset"_c ;
    BitExtract_UInt16x2_offset.type = Type::FullType{ UInt16x2Type.name };
    BitExtract_UInt16x2_count.name = "count"_c;
    BitExtract_UInt16x2_count.type = Type::FullType{ UInt16x2Type.name };
    BitExtract_UInt16x2.name = "bitExtract"_c;
    BitExtract_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&BitExtract_UInt16x2_base)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&BitExtract_UInt16x2_offset)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&BitExtract_UInt16x2_count)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&BitExtract_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    BitExtract_UInt16x3_base.name = "base"_c;
    BitExtract_UInt16x3_base.type = Type::FullType{ UInt16x3Type.name };
    BitExtract_UInt16x3_offset.name = "offset"_c ;
    BitExtract_UInt16x3_offset.type = Type::FullType{ UInt16x3Type.name };
    BitExtract_UInt16x3_count.name = "count"_c;
    BitExtract_UInt16x3_count.type = Type::FullType{ UInt16x3Type.name };
    BitExtract_UInt16x3.name = "bitExtract"_c;
    BitExtract_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&BitExtract_UInt16x3_base)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&BitExtract_UInt16x3_offset)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&BitExtract_UInt16x3_count)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&BitExtract_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    BitExtract_UInt16x4_base.name = "base"_c;
    BitExtract_UInt16x4_base.type = Type::FullType{ UInt16x4Type.name };
    BitExtract_UInt16x4_offset.name = "offset"_c ;
    BitExtract_UInt16x4_offset.type = Type::FullType{ UInt16x4Type.name };
    BitExtract_UInt16x4_count.name = "count"_c;
    BitExtract_UInt16x4_count.type = Type::FullType{ UInt16x4Type.name };
    BitExtract_UInt16x4.name = "bitExtract"_c;
    BitExtract_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&BitExtract_UInt16x4_base)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&BitExtract_UInt16x4_offset)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&BitExtract_UInt16x4_count)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&BitExtract_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    BitReverse_Int32_base.name = "base"_c;
    BitReverse_Int32_base.type = Type::FullType{ Int32Type.name };
    BitReverse_Int32.name = "bitReverse"_c;
    BitReverse_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&BitReverse_Int32_base)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitReverse_Int32)->returnTypeSymbol = &Int32Type;

    BitReverse_Int32x2_base.name = "base"_c;
    BitReverse_Int32x2_base.type = Type::FullType{ Int32x2Type.name };
    BitReverse_Int32x2.name = "bitReverse"_c;
    BitReverse_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&BitReverse_Int32x2_base)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&BitReverse_Int32x2)->returnTypeSymbol = &Int32x2Type;

    BitReverse_Int32x3_base.name = "base"_c;
    BitReverse_Int32x3_base.type = Type::FullType{ Int32x3Type.name };
    BitReverse_Int32x3.name = "bitReverse"_c;
    BitReverse_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&BitReverse_Int32x3_base)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&BitReverse_Int32x3)->returnTypeSymbol = &Int32x3Type;

    BitReverse_Int32x4_base.name = "base"_c;
    BitReverse_Int32x4_base.type = Type::FullType{ Int32x4Type.name };
    BitReverse_Int32x4.name = "bitReverse"_c;
    BitReverse_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&BitReverse_Int32x4_base)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&BitReverse_Int32x4)->returnTypeSymbol = &Int32x4Type;

    BitReverse_Int16_base.name = "base"_c;
    BitReverse_Int16_base.type = Type::FullType{ Int16Type.name };
    BitReverse_Int16.name = "bitReverse"_c;
    BitReverse_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&BitReverse_Int16_base)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitReverse_Int16)->returnTypeSymbol = &Int16Type;

    BitReverse_Int16x2_base.name = "base"_c;
    BitReverse_Int16x2_base.type = Type::FullType{ Int16x2Type.name };
    BitReverse_Int16x2.name = "bitReverse"_c;
    BitReverse_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&BitReverse_Int16x2_base)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&BitReverse_Int16x2)->returnTypeSymbol = &Int16x2Type;

    BitReverse_Int16x3_base.name = "base"_c;
    BitReverse_Int16x3_base.type = Type::FullType{ Int16x3Type.name };
    BitReverse_Int16x3.name = "bitReverse"_c;
    BitReverse_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&BitReverse_Int16x3_base)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&BitReverse_Int16x3)->returnTypeSymbol = &Int16x3Type;

    BitReverse_Int16x4_base.name = "base"_c;
    BitReverse_Int16x4_base.type = Type::FullType{ Int16x4Type.name };
    BitReverse_Int16x4.name = "bitReverse"_c;
    BitReverse_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&BitReverse_Int16x4_base)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&BitReverse_Int16x4)->returnTypeSymbol = &Int16x4Type;

    BitReverse_UInt32_base.name = "base"_c;
    BitReverse_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitReverse_UInt32.name = "bitReverse"_c;
    BitReverse_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BitReverse_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitReverse_UInt32)->returnTypeSymbol = &UInt32Type;

    BitReverse_UInt32x2_base.name = "base"_c;
    BitReverse_UInt32x2_base.type = Type::FullType{ UInt32x2Type.name };
    BitReverse_UInt32x2.name = "bitReverse"_c;
    BitReverse_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&BitReverse_UInt32x2_base)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&BitReverse_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    BitReverse_UInt32x3_base.name = "base"_c;
    BitReverse_UInt32x3_base.type = Type::FullType{ UInt32x3Type.name };
    BitReverse_UInt32x3.name = "bitReverse"_c;
    BitReverse_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&BitReverse_UInt32x3_base)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&BitReverse_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    BitReverse_UInt32x4_base.name = "base"_c;
    BitReverse_UInt32x4_base.type = Type::FullType{ UInt32x4Type.name };
    BitReverse_UInt32x4.name = "bitReverse"_c;
    BitReverse_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&BitReverse_UInt32x4_base)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&BitReverse_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    BitReverse_UInt16_base.name = "base"_c;
    BitReverse_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitReverse_UInt16.name = "bitReverse"_c;
    BitReverse_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&BitReverse_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitReverse_UInt16)->returnTypeSymbol = &UInt16Type;

    BitReverse_UInt16x2_base.name = "base"_c;
    BitReverse_UInt16x2_base.type = Type::FullType{ UInt16x2Type.name };
    BitReverse_UInt16x2.name = "bitReverse"_c;
    BitReverse_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&BitReverse_UInt16x2_base)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&BitReverse_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    BitReverse_UInt16x3_base.name = "base"_c;
    BitReverse_UInt16x3_base.type = Type::FullType{ UInt16x3Type.name };
    BitReverse_UInt16x3.name = "bitReverse"_c;
    BitReverse_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&BitReverse_UInt16x3_base)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&BitReverse_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    BitReverse_UInt16x4_base.name = "base"_c;
    BitReverse_UInt16x4_base.type = Type::FullType{ UInt16x4Type.name };
    BitReverse_UInt16x4.name = "bitReverse"_c;
    BitReverse_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&BitReverse_UInt16x4_base)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&BitReverse_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    BitCount_Int32_base.name = "base"_c;
    BitCount_Int32_base.type = Type::FullType{ Int32Type.name };
    BitCount_Int32.name = "bitCount"_c;
    BitCount_Int32.returnType = Type::FullType{ Int32Type.name };
    Symbol::Resolved(&BitCount_Int32_base)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitCount_Int32)->returnTypeSymbol = &Int32Type;

    BitCount_Int32x2_base.name = "base"_c;
    BitCount_Int32x2_base.type = Type::FullType{ Int32x2Type.name };
    BitCount_Int32x2.name = "bitCount"_c;
    BitCount_Int32x2.returnType = Type::FullType{ Int32x2Type.name };
    Symbol::Resolved(&BitCount_Int32x2_base)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&BitCount_Int32x2)->returnTypeSymbol = &Int32x2Type;

    BitCount_Int32x3_base.name = "base"_c;
    BitCount_Int32x3_base.type = Type::FullType{ Int32x3Type.name };
    BitCount_Int32x3.name = "bitCount"_c;
    BitCount_Int32x3.returnType = Type::FullType{ Int32x3Type.name };
    Symbol::Resolved(&BitCount_Int32x3_base)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&BitCount_Int32x3)->returnTypeSymbol = &Int32x3Type;

    BitCount_Int32x4_base.name = "base"_c;
    BitCount_Int32x4_base.type = Type::FullType{ Int32x4Type.name };
    BitCount_Int32x4.name = "bitCount"_c;
    BitCount_Int32x4.returnType = Type::FullType{ Int32x4Type.name };
    Symbol::Resolved(&BitCount_Int32x4_base)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&BitCount_Int32x4)->returnTypeSymbol = &Int32x4Type;

    BitCount_Int16_base.name = "base"_c;
    BitCount_Int16_base.type = Type::FullType{ Int16Type.name };
    BitCount_Int16.name = "bitCount"_c;
    BitCount_Int16.returnType = Type::FullType{ Int16Type.name };
    Symbol::Resolved(&BitCount_Int16_base)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitCount_Int16)->returnTypeSymbol = &Int16Type;

    BitCount_Int16x2_base.name = "base"_c;
    BitCount_Int16x2_base.type = Type::FullType{ Int16x2Type.name };
    BitCount_Int16x2.name = "bitCount"_c;
    BitCount_Int16x2.returnType = Type::FullType{ Int16x2Type.name };
    Symbol::Resolved(&BitCount_Int16x2_base)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&BitCount_Int16x2)->returnTypeSymbol = &Int16x2Type;

    BitCount_Int16x3_base.name = "base"_c;
    BitCount_Int16x3_base.type = Type::FullType{ Int16x3Type.name };
    BitCount_Int16x3.name = "bitCount"_c;
    BitCount_Int16x3.returnType = Type::FullType{ Int16x3Type.name };
    Symbol::Resolved(&BitCount_Int16x3_base)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&BitCount_Int16x3)->returnTypeSymbol = &Int16x3Type;

    BitCount_Int16x4_base.name = "base"_c;
    BitCount_Int16x4_base.type = Type::FullType{ Int16x4Type.name };
    BitCount_Int16x4.name = "bitCount"_c;
    BitCount_Int16x4.returnType = Type::FullType{ Int16x4Type.name };
    Symbol::Resolved(&BitCount_Int16x4_base)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&BitCount_Int16x4)->returnTypeSymbol = &Int16x4Type;

    BitCount_UInt32_base.name = "base"_c;
    BitCount_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitCount_UInt32.name = "bitCount"_c;
    BitCount_UInt32.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&BitCount_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitCount_UInt32)->returnTypeSymbol = &UInt32Type;

    BitCount_UInt32x2_base.name = "base"_c;
    BitCount_UInt32x2_base.type = Type::FullType{ UInt32x2Type.name };
    BitCount_UInt32x2.name = "bitCount"_c;
    BitCount_UInt32x2.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&BitCount_UInt32x2_base)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&BitCount_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    BitCount_UInt32x3_base.name = "base"_c;
    BitCount_UInt32x3_base.type = Type::FullType{ UInt32x3Type.name };
    BitCount_UInt32x3.name = "bitCount"_c;
    BitCount_UInt32x3.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&BitCount_UInt32x3_base)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&BitCount_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    BitCount_UInt32x4_base.name = "base"_c;
    BitCount_UInt32x4_base.type = Type::FullType{ UInt32x4Type.name };
    BitCount_UInt32x4.name = "bitCount"_c;
    BitCount_UInt32x4.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&BitCount_UInt32x4_base)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&BitCount_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    BitCount_UInt16_base.name = "base"_c;
    BitCount_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitCount_UInt16.name = "bitCount"_c;
    BitCount_UInt16.returnType = Type::FullType{ UInt16Type.name };
    Symbol::Resolved(&BitCount_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitCount_UInt16)->returnTypeSymbol = &UInt16Type;

    BitCount_UInt16x2_base.name = "base"_c;
    BitCount_UInt16x2_base.type = Type::FullType{ UInt16x2Type.name };
    BitCount_UInt16x2.name = "bitCount"_c;
    BitCount_UInt16x2.returnType = Type::FullType{ UInt16x2Type.name };
    Symbol::Resolved(&BitCount_UInt16x2_base)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&BitCount_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    BitCount_UInt16x3_base.name = "base"_c;
    BitCount_UInt16x3_base.type = Type::FullType{ UInt16x3Type.name };
    BitCount_UInt16x3.name = "bitCount"_c;
    BitCount_UInt16x3.returnType = Type::FullType{ UInt16x3Type.name };
    Symbol::Resolved(&BitCount_UInt16x3_base)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&BitCount_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    BitCount_UInt16x4_base.name = "base"_c;
    BitCount_UInt16x4_base.type = Type::FullType{ UInt16x4Type.name };
    BitCount_UInt16x4.name = "bitCount"_c;
    BitCount_UInt16x4.returnType = Type::FullType{ UInt16x4Type.name };
    Symbol::Resolved(&BitCount_UInt16x4_base)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&BitCount_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    ExecutionBarrier.name = "executionBarrier"_c;
    ExecutionBarrier.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&ExecutionBarrier)->returnTypeSymbol = &VoidType;

    ExecutionBarrierSubgroup.name = "executionBarrierSubgroup"_c;
    ExecutionBarrierSubgroup.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&ExecutionBarrierSubgroup)->returnTypeSymbol = &VoidType;

    ExecutionBarrierWorkgroup.name = "executionBarrierWorkgroup"_c;
    ExecutionBarrierWorkgroup.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&ExecutionBarrierWorkgroup)->returnTypeSymbol = &VoidType;

    MemoryBarrier.name = "memoryBarrier"_c;
    MemoryBarrier.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&MemoryBarrier)->returnTypeSymbol = &VoidType;

    MemoryBarrierBuffer.name = "memoryBarrierBuffer"_c;
    MemoryBarrierBuffer.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&MemoryBarrierBuffer)->returnTypeSymbol = &VoidType;

    MemoryBarrierTexture.name = "memoryBarrierTexture"_c;
    MemoryBarrierTexture.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&MemoryBarrierTexture)->returnTypeSymbol = &VoidType;

    MemoryBarrierAtomic.name = "memoryBarrierAtomic"_c;
    MemoryBarrierAtomic.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&MemoryBarrierAtomic)->returnTypeSymbol = &VoidType;

    MemoryBarrierSubgroup.name = "memoryBarrierSubgroup"_c;
    MemoryBarrierSubgroup.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&MemoryBarrierSubgroup)->returnTypeSymbol = &VoidType;

    MemoryBarrierWorkgroup.name = "memoryBarrierWorkgroup"_c;
    MemoryBarrierWorkgroup.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&MemoryBarrierWorkgroup)->returnTypeSymbol = &VoidType;

    TextureGetSize_Texture1D_texture.name = "texture"_c;
    TextureGetSize_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetSize_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_Texture1D.name = "textureGetSize"_c;
    TextureGetSize_Texture1D.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&TextureGetSize_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetSize_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture1D)->returnTypeSymbol = &UInt32Type;

    TextureGetSize_Texture2D_texture.name = "texture"_c;
    TextureGetSize_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetSize_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_Texture2D.name = "textureGetSize"_c;
    TextureGetSize_Texture2D.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&TextureGetSize_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetSize_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture2D)->returnTypeSymbol = &UInt32x2Type;

    TextureGetSize_Texture3D_texture.name = "texture"_c;
    TextureGetSize_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetSize_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_Texture3D.name = "textureGetSize"_c;
    TextureGetSize_Texture3D.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&TextureGetSize_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetSize_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture3D)->returnTypeSymbol = &UInt32x3Type;

    TextureGetSize_TextureCube_texture.name = "texture"_c;
    TextureGetSize_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetSize_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_TextureCube.name = "textureGetSize"_c;
    TextureGetSize_TextureCube.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&TextureGetSize_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetSize_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_TextureCube)->returnTypeSymbol = &UInt32x3Type;

    TextureGetSize_Texture1DArray_texture.name = "texture"_c;
    TextureGetSize_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSize_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_Texture1DArray.name = "textureGetSize"_c;
    TextureGetSize_Texture1DArray.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&TextureGetSize_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetSize_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture1DArray)->returnTypeSymbol = &UInt32x2Type;

    TextureGetSize_Texture2DArray_texture.name = "texture"_c;
    TextureGetSize_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSize_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_Texture2DArray.name = "textureGetSize"_c;
    TextureGetSize_Texture2DArray.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&TextureGetSize_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetSize_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture2DArray)->returnTypeSymbol = &UInt32x3Type;

    TextureGetSize_TextureCubeArray_texture.name = "texture"_c;
    TextureGetSize_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSize_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_TextureCubeArray.name = "textureGetSize"_c;
    TextureGetSize_TextureCubeArray.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&TextureGetSize_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray)->returnTypeSymbol = &UInt32x4Type;

    TextureGetSizeMip_Texture1D_texture.name = "texture"_c;
    TextureGetSizeMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetSizeMip_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_Texture1D_UInt32_mip.name = "mip"_c;
    TextureGetSizeMip_Texture1D_UInt32_mip.type = Type::FullType{ Texture1DType.name };
    TextureGetSizeMip_Texture1D.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture1D.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&TextureGetSizeMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D_UInt32_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D)->returnTypeSymbol = &UInt32Type;

    TextureGetSizeMip_Texture2D_texture.name = "texture"_c;
    TextureGetSizeMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetSizeMip_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_Texture2D_UInt32_mip.name = "mip"_c;
    TextureGetSizeMip_Texture2D_UInt32_mip.type = Type::FullType{ Texture2DType.name };
    TextureGetSizeMip_Texture2D.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture2D.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&TextureGetSizeMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D_UInt32_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D)->returnTypeSymbol = &UInt32x2Type;

    TextureGetSizeMip_Texture3D_texture.name = "texture"_c;
    TextureGetSizeMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetSizeMip_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_Texture3D_UInt32_mip.name = "mip"_c;
    TextureGetSizeMip_Texture3D_UInt32_mip.type = Type::FullType{ Texture3DType.name };
    TextureGetSizeMip_Texture3D.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture3D.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&TextureGetSizeMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D_UInt32_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D)->returnTypeSymbol = &UInt32x3Type;

    TextureGetSizeMip_TextureCube_texture.name = "texture"_c;
    TextureGetSizeMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetSizeMip_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_TextureCube_UInt32_mip.name = "mip"_c;
    TextureGetSizeMip_TextureCube_UInt32_mip.type = Type::FullType{ TextureCubeType.name };
    TextureGetSizeMip_TextureCube.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_TextureCube.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&TextureGetSizeMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube_UInt32_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube)->returnTypeSymbol = &UInt32x3Type;

    TextureGetSizeMip_Texture1DArray_texture.name = "texture"_c;
    TextureGetSizeMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSizeMip_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_Texture1DArray_UInt32_mip.name = "mip"_c;
    TextureGetSizeMip_Texture1DArray_UInt32_mip.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSizeMip_Texture1DArray.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture1DArray.returnType = Type::FullType{ UInt32x2Type.name };
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray_UInt32_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray)->returnTypeSymbol = &UInt32x2Type;

    TextureGetSizeMip_Texture2DArray_texture.name = "texture"_c;
    TextureGetSizeMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSizeMip_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_Texture2DArray_UInt32_mip.name = "mip"_c;
    TextureGetSizeMip_Texture2DArray_UInt32_mip.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSizeMip_Texture2DArray.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture2DArray.returnType = Type::FullType{ UInt32x3Type.name };
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray_UInt32_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray)->returnTypeSymbol = &UInt32x3Type;

    TextureGetSizeMip_TextureCubeArray_texture.name = "texture"_c;
    TextureGetSizeMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSizeMip_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_TextureCubeArray_UInt32_mip.name = "mip"_c;
    TextureGetSizeMip_TextureCubeArray_UInt32_mip.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSizeMip_TextureCubeArray.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_TextureCubeArray.returnType = Type::FullType{ UInt32x4Type.name };
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray_UInt32_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray)->returnTypeSymbol = &UInt32x4Type;

    TextureGetMips_Texture1D_texture.name = "texture"_c;
    TextureGetMips_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetMips_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_Texture1D.name = "textureGetMips"_c;
    TextureGetMips_Texture1D.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&TextureGetMips_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetMips_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture1D)->returnTypeSymbol = &UInt32Type;

    TextureGetMips_Texture2D_texture.name = "texture"_c;
    TextureGetMips_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetMips_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_Texture2D.name = "textureGetMips"_c;
    TextureGetMips_Texture2D.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&TextureGetMips_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetMips_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture2D)->returnTypeSymbol = &UInt32Type;

    TextureGetMips_Texture3D_texture.name = "texture"_c;
    TextureGetMips_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetMips_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_Texture3D.name = "textureGetMips"_c;
    TextureGetMips_Texture3D.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&TextureGetMips_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetMips_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture3D)->returnTypeSymbol = &UInt32Type;

    TextureGetMips_TextureCube_texture.name = "texture"_c;
    TextureGetMips_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetMips_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_TextureCube.name = "textureGetMips"_c;
    TextureGetMips_TextureCube.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&TextureGetMips_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetMips_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_TextureCube)->returnTypeSymbol = &UInt32Type;

    TextureGetMips_Texture1DArray_texture.name = "texture"_c;
    TextureGetMips_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetMips_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_Texture1DArray.name = "textureGetMips"_c;
    TextureGetMips_Texture1DArray.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&TextureGetMips_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetMips_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture1DArray)->returnTypeSymbol = &UInt32Type;

    TextureGetMips_Texture2DArray_texture.name = "texture"_c;
    TextureGetMips_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetMips_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_Texture2DArray.name = "textureGetMips"_c;
    TextureGetMips_Texture2DArray.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&TextureGetMips_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetMips_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture2DArray)->returnTypeSymbol = &UInt32Type;

    TextureGetMips_TextureCubeArray_texture.name = "texture"_c;
    TextureGetMips_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetMips_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_TextureCubeArray.name = "textureGetMips"_c;
    TextureGetMips_TextureCubeArray.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&TextureGetMips_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray)->returnTypeSymbol = &UInt32Type;

    TextureGetSamples_Texture2DMS_texture.name = "texture"_c;
    TextureGetSamples_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureGetSamples_Texture2DMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSamples_Texture2DMS.name = "textureGetSamples"_c;
    TextureGetSamples_Texture2DMS.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&TextureGetSamples_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS)->returnTypeSymbol = &UInt32Type;

    TextureGetSamples_Texture2DMSArray_texture.name = "texture"_c;
    TextureGetSamples_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureGetSamples_Texture2DMSArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSamples_Texture2DMSArray.name = "textureGetSamples"_c;
    TextureGetSamples_Texture2DMSArray.returnType = Type::FullType{ UInt32Type.name };
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray)->returnTypeSymbol = &UInt32Type;

    TextureGetSampledMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureGetSampledMip_Texture1D.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture1D.returnType = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture1D_texture.name = "texture"_c;
    TextureGetSampledMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetSampledMip_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture1D_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D)->returnTypeSymbol = &Float32x2Type;

    SampledTextureGetSampledMip_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureGetSampledMip_Texture1D.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture1D.returnType = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture1D_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureGetSampledMip_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D)->returnTypeSymbol = &Float32x2Type;

    TextureGetSampledMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture2D.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture2D.returnType = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture2D_texture.name = "texture"_c;
    TextureGetSampledMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetSampledMip_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture2D_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D)->returnTypeSymbol = &Float32x2Type;

    SampledTextureGetSampledMip_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture2D.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture2D.returnType = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture2D_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureGetSampledMip_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D)->returnTypeSymbol = &Float32x2Type;

    TextureGetSampledMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureGetSampledMip_Texture3D.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture3D.returnType = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture3D_texture.name = "texture"_c;
    TextureGetSampledMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetSampledMip_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture3D_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D)->returnTypeSymbol = &Float32x2Type;

    SampledTextureGetSampledMip_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureGetSampledMip_Texture3D.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture3D.returnType = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture3D_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureGetSampledMip_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D)->returnTypeSymbol = &Float32x2Type;

    TextureGetSampledMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureGetSampledMip_TextureCube.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_TextureCube.returnType = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_TextureCube_texture.name = "texture"_c;
    TextureGetSampledMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetSampledMip_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_TextureCube_sampler.name = "sampler"_c;
    TextureGetSampledMip_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_TextureCube_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube)->returnTypeSymbol = &Float32x2Type;

    SampledTextureGetSampledMip_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureGetSampledMip_TextureCube.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_TextureCube.returnType = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_TextureCube_texture.name = "texture"_c;
    SampledTextureGetSampledMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    SampledTextureGetSampledMip_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube)->returnTypeSymbol = &Float32x2Type;

    TextureGetSampledMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture1DArray.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture1DArray.returnType = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture1DArray_texture.name = "texture"_c;
    TextureGetSampledMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSampledMip_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture1DArray_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray)->returnTypeSymbol = &Float32x2Type;

    SampledTextureGetSampledMip_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture1DArray.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture1DArray.returnType = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture1DArray_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureGetSampledMip_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray)->returnTypeSymbol = &Float32x2Type;

    TextureGetSampledMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureGetSampledMip_Texture2DArray.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture2DArray.returnType = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture2DArray_texture.name = "texture"_c;
    TextureGetSampledMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSampledMip_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture2DArray_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray)->returnTypeSymbol = &Float32x2Type;

    SampledTextureGetSampledMip_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureGetSampledMip_Texture2DArray.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture2DArray.returnType = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture2DArray_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureGetSampledMip_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray)->returnTypeSymbol = &Float32x2Type;

    TextureGetSampledMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureGetSampledMip_TextureCubeArray.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_TextureCubeArray.returnType = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_TextureCubeArray_texture.name = "texture"_c;
    TextureGetSampledMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSampledMip_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_TextureCubeArray_sampler.name = "sampler"_c;
    TextureGetSampledMip_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_TextureCubeArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray)->returnTypeSymbol = &Float32x2Type;

    SampledTextureGetSampledMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureGetSampledMip_TextureCubeArray.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_TextureCubeArray.returnType = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureGetSampledMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    SampledTextureGetSampledMip_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray)->returnTypeSymbol = &Float32x2Type;

    TextureLoad_Texture1D_texture.name = "texture"_c;
    TextureLoad_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureLoad_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture1D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureLoad_Texture1D.name = "textureLoad"_c;
    TextureLoad_Texture1D.returnType = Type::FullType{ Texture1DType.name };
    Symbol::Resolved(&TextureLoad_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureLoad_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture1D_coordinate)->typeSymbol = &Int32Type;

    TextureLoadMip_Texture1D_texture.name = "texture"_c;
    TextureLoadMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureLoadMip_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1D_mip.name = "mip"_c;
    TextureLoadMip_Texture1D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1D.name = "textureLoadMip"_c;
    TextureLoadMip_Texture1D.returnType = Type::FullType{ Texture1DType.name };
    Symbol::Resolved(&TextureLoadMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureLoadMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture1D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1D_coordinate)->typeSymbol = &Int32Type;

    TextureStore_Texture1D_texture.name = "texture"_c;
    TextureStore_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureStore_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture1D_coordinate.name = "coordinate"_c;
    TextureStore_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureStore_Texture1D_value.name = "value"_c;
    TextureStore_Texture1D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture1D.name = "textureStore"_c;
    TextureStore_Texture1D.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStore_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureStore_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture1D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture1D_coordinate)->typeSymbol = &Int32Type;

    TextureStoreMip_Texture1D_texture.name = "texture"_c;
    TextureStoreMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureStoreMip_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1D_mip.name = "mip"_c;
    TextureStoreMip_Texture1D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1D_value.name = "value"_c;
    TextureStoreMip_Texture1D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture1D.name = "textureStoreMip"_c;
    TextureStoreMip_Texture1D.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStoreMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureStoreMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture1D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D_coordinate)->typeSymbol = &Int32Type;

    TextureLoad_Texture2D_texture.name = "texture"_c;
    TextureLoad_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureLoad_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture2D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture2D.name = "textureLoad"_c;
    TextureLoad_Texture2D.returnType = Type::FullType{ Texture2DType.name };
    Symbol::Resolved(&TextureLoad_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureLoad_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2D_coordinate)->typeSymbol = &Int32x2Type;

    TextureLoadMip_Texture2D_texture.name = "texture"_c;
    TextureLoadMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureLoadMip_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture2D_mip.name = "mip"_c;
    TextureLoadMip_Texture2D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2D.name = "textureLoadMip"_c;
    TextureLoadMip_Texture2D.returnType = Type::FullType{ Texture2DType.name };
    Symbol::Resolved(&TextureLoadMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureLoadMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2D_coordinate)->typeSymbol = &Int32x2Type;

    TextureStore_Texture2D_texture.name = "texture"_c;
    TextureStore_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureStore_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture2D_coordinate.name = "coordinate"_c;
    TextureStore_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture2D_value.name = "value"_c;
    TextureStore_Texture2D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2D.name = "textureStore"_c;
    TextureStore_Texture2D.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStore_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureStore_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2D_coordinate)->typeSymbol = &Int32x2Type;

    TextureStoreMip_Texture2D_texture.name = "texture"_c;
    TextureStoreMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureStoreMip_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture2D_mip.name = "mip"_c;
    TextureStoreMip_Texture2D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2D_value.name = "value"_c;
    TextureStoreMip_Texture2D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2D.name = "textureStoreMip"_c;
    TextureStoreMip_Texture2D.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStoreMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureStoreMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D_coordinate)->typeSymbol = &Int32x2Type;

    TextureLoad_Texture3D_texture.name = "texture"_c;
    TextureLoad_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureLoad_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture3D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture3D.name = "textureLoad"_c;
    TextureLoad_Texture3D.returnType = Type::FullType{ Texture3DType.name };
    Symbol::Resolved(&TextureLoad_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureLoad_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture3D_coordinate)->typeSymbol = &Int32x3Type;

    TextureLoadMip_Texture3D_texture.name = "texture"_c;
    TextureLoadMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureLoadMip_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture3D_mip.name = "mip"_c;
    TextureLoadMip_Texture3D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture3D.name = "textureLoadMip"_c;
    TextureLoadMip_Texture3D.returnType = Type::FullType{ Texture3DType.name };
    Symbol::Resolved(&TextureLoadMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureLoadMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture3D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture3D_coordinate)->typeSymbol = &Int32x3Type;

    TextureStore_Texture3D_texture.name = "texture"_c;
    TextureStore_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureStore_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture3D_coordinate.name = "coordinate"_c;
    TextureStore_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture3D_value.name = "value"_c;
    TextureStore_Texture3D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture3D.name = "textureStore"_c;
    TextureStore_Texture3D.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStore_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureStore_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture3D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture3D_coordinate)->typeSymbol = &Int32x3Type;

    TextureStoreMip_Texture3D_texture.name = "texture"_c;
    TextureStoreMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureStoreMip_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture3D_mip.name = "mip"_c;
    TextureStoreMip_Texture3D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture3D_value.name = "value"_c;
    TextureStoreMip_Texture3D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture3D.name = "textureStoreMip"_c;
    TextureStoreMip_Texture3D.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStoreMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureStoreMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture3D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D_coordinate)->typeSymbol = &Int32x3Type;

    TextureLoad_TextureCube_texture.name = "texture"_c;
    TextureLoad_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureLoad_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_TextureCube_coordinate.name = "coordinate"_c;
    TextureLoad_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_TextureCube.name = "textureLoad"_c;
    TextureLoad_TextureCube.returnType = Type::FullType{ TextureCubeType.name };
    Symbol::Resolved(&TextureLoad_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureLoad_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_TextureCube_coordinate)->typeSymbol = &Int32x3Type;

    TextureLoadMip_TextureCube_texture.name = "texture"_c;
    TextureLoadMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureLoadMip_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureLoadMip_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_TextureCube_mip.name = "mip"_c;
    TextureLoadMip_TextureCube_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_TextureCube.name = "textureLoadMip"_c;
    TextureLoadMip_TextureCube.returnType = Type::FullType{ TextureCubeType.name };
    Symbol::Resolved(&TextureLoadMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureLoadMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_TextureCube_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_TextureCube_coordinate)->typeSymbol = &Int32x3Type;

    TextureStore_TextureCube_texture.name = "texture"_c;
    TextureStore_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureStore_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_TextureCube_coordinate.name = "coordinate"_c;
    TextureStore_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_TextureCube_value.name = "value"_c;
    TextureStore_TextureCube_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_TextureCube.name = "textureStore"_c;
    TextureStore_TextureCube.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStore_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureStore_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_TextureCube_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_TextureCube_coordinate)->typeSymbol = &Int32x3Type;

    TextureStoreMip_TextureCube_texture.name = "texture"_c;
    TextureStoreMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureStoreMip_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureStoreMip_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_TextureCube_mip.name = "mip"_c;
    TextureStoreMip_TextureCube_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_TextureCube_value.name = "value"_c;
    TextureStoreMip_TextureCube_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_TextureCube.name = "textureStoreMip"_c;
    TextureStoreMip_TextureCube.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStoreMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureStoreMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_TextureCube_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube_coordinate)->typeSymbol = &Int32x3Type;

    TextureLoad_Texture1DArray_texture.name = "texture"_c;
    TextureLoad_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureLoad_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture1DArray.name = "textureLoad"_c;
    TextureLoad_Texture1DArray.returnType = Type::FullType{ Texture1DArrayType.name };
    Symbol::Resolved(&TextureLoad_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureLoad_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;

    TextureLoadMip_Texture1DArray_texture.name = "texture"_c;
    TextureLoadMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureLoadMip_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture1DArray_mip.name = "mip"_c;
    TextureLoadMip_Texture1DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1DArray.name = "textureLoadMip"_c;
    TextureLoadMip_Texture1DArray.returnType = Type::FullType{ Texture1DArrayType.name };
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;

    TextureStore_Texture1DArray_texture.name = "texture"_c;
    TextureStore_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureStore_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture1DArray_value.name = "value"_c;
    TextureStore_Texture1DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture1DArray.name = "textureStore"_c;
    TextureStore_Texture1DArray.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStore_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureStore_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture1DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;

    TextureStoreMip_Texture1DArray_texture.name = "texture"_c;
    TextureStoreMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureStoreMip_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture1DArray_mip.name = "mip"_c;
    TextureStoreMip_Texture1DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1DArray_value.name = "value"_c;
    TextureStoreMip_Texture1DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture1DArray.name = "textureStoreMip"_c;
    TextureStoreMip_Texture1DArray.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;

    TextureLoad_Texture2DArray_texture.name = "texture"_c;
    TextureLoad_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureLoad_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture2DArray.name = "textureLoad"_c;
    TextureLoad_Texture2DArray.returnType = Type::FullType{ Texture2DArrayType.name };
    Symbol::Resolved(&TextureLoad_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureLoad_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;

    TextureLoadMip_Texture2DArray_texture.name = "texture"_c;
    TextureLoadMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureLoadMip_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture2DArray_mip.name = "mip"_c;
    TextureLoadMip_Texture2DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DArray.name = "textureLoadMip"_c;
    TextureLoadMip_Texture2DArray.returnType = Type::FullType{ Texture2DArrayType.name };
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;

    TextureStore_Texture2DArray_texture.name = "texture"_c;
    TextureStore_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureStore_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture2DArray_value.name = "value"_c;
    TextureStore_Texture2DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DArray.name = "textureStore"_c;
    TextureStore_Texture2DArray.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStore_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureStore_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;

    TextureStoreMip_Texture2DArray_texture.name = "texture"_c;
    TextureStoreMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureStoreMip_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture2DArray_mip.name = "mip"_c;
    TextureStoreMip_Texture2DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DArray_value.name = "value"_c;
    TextureStoreMip_Texture2DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DArray.name = "textureStoreMip"_c;
    TextureStoreMip_Texture2DArray.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;

    TextureLoad_TextureCubeArray_texture.name = "texture"_c;
    TextureLoad_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureLoad_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureLoad_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureLoad_TextureCubeArray.name = "textureLoad"_c;
    TextureLoad_TextureCubeArray.returnType = Type::FullType{ TextureCubeArrayType.name };
    Symbol::Resolved(&TextureLoad_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;

    TextureLoadMip_TextureCubeArray_texture.name = "texture"_c;
    TextureLoadMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureLoadMip_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureLoadMip_TextureCubeArray_mip.name = "mip"_c;
    TextureLoadMip_TextureCubeArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_TextureCubeArray.name = "textureLoadMip"_c;
    TextureLoadMip_TextureCubeArray.returnType = Type::FullType{ TextureCubeArrayType.name };
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;

    TextureStore_TextureCubeArray_texture.name = "texture"_c;
    TextureStore_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureStore_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureStore_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureStore_TextureCubeArray_value.name = "value"_c;
    TextureStore_TextureCubeArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_TextureCubeArray.name = "textureStore"_c;
    TextureStore_TextureCubeArray.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStore_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureStore_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_TextureCubeArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;

    TextureStoreMip_TextureCubeArray_texture.name = "texture"_c;
    TextureStoreMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureStoreMip_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureStoreMip_TextureCubeArray_mip.name = "mip"_c;
    TextureStoreMip_TextureCubeArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_TextureCubeArray_value.name = "value"_c;
    TextureStoreMip_TextureCubeArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_TextureCubeArray.name = "textureStoreMip"_c;
    TextureStoreMip_TextureCubeArray.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;

    TextureLoad_Texture2DMS_texture.name = "texture"_c;
    TextureLoad_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureLoad_Texture2DMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture2DMS.name = "textureLoad"_c;
    TextureLoad_Texture2DMS.returnType = Type::FullType{ Texture2DMSType.name };
    Symbol::Resolved(&TextureLoad_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureLoad_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;

    TextureLoadMip_Texture2DMS_texture.name = "texture"_c;
    TextureLoadMip_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureLoadMip_Texture2DMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture2DMS_mip.name = "mip"_c;
    TextureLoadMip_Texture2DMS_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DMS.name = "textureLoadMip"_c;
    TextureLoadMip_Texture2DMS.returnType = Type::FullType{ Texture2DMSType.name };
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;

    TextureStore_Texture2DMS_texture.name = "texture"_c;
    TextureStore_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureStore_Texture2DMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture2DMS_value.name = "value"_c;
    TextureStore_Texture2DMS_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DMS.name = "textureStore"_c;
    TextureStore_Texture2DMS.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStore_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureStore_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DMS_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;

    TextureStoreMip_Texture2DMS_texture.name = "texture"_c;
    TextureStoreMip_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureStoreMip_Texture2DMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture2DMS_mip.name = "mip"_c;
    TextureStoreMip_Texture2DMS_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DMS_value.name = "value"_c;
    TextureStoreMip_Texture2DMS_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DMS.name = "textureStoreMip"_c;
    TextureStoreMip_Texture2DMS.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;

    TextureLoad_Texture2DMSArray_texture.name = "texture"_c;
    TextureLoad_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureLoad_Texture2DMSArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture2DMSArray.name = "textureLoad"_c;
    TextureLoad_Texture2DMSArray.returnType = Type::FullType{ Texture2DMSArrayType.name };
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;

    TextureLoadMip_Texture2DMSArray_texture.name = "texture"_c;
    TextureLoadMip_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureLoadMip_Texture2DMSArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture2DMSArray_mip.name = "mip"_c;
    TextureLoadMip_Texture2DMSArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DMSArray.name = "textureLoadMip"_c;
    TextureLoadMip_Texture2DMSArray.returnType = Type::FullType{ Texture2DMSArrayType.name };
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;

    TextureStore_Texture2DMSArray_texture.name = "texture"_c;
    TextureStore_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureStore_Texture2DMSArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture2DMSArray_value.name = "value"_c;
    TextureStore_Texture2DMSArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DMSArray.name = "textureStore"_c;
    TextureStore_Texture2DMSArray.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStore_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;

    TextureStoreMip_Texture2DMSArray_texture.name = "texture"_c;
    TextureStoreMip_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureStoreMip_Texture2DMSArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture2DMSArray_mip.name = "mip"_c;
    TextureStoreMip_Texture2DMSArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DMSArray_value.name = "value"_c;
    TextureStoreMip_Texture2DMSArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DMSArray.name = "textureStoreMip"_c;
    TextureStoreMip_Texture2DMSArray.returnType = Type::FullType{ VoidType.name };
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;

    TexturePixelCacheLoad_PixelCache_texture.name = "texture"_c;
    TexturePixelCacheLoad_PixelCache_texture.type = Type::FullType{ PixelCacheType.name };
    TexturePixelCacheLoad_PixelCache_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TexturePixelCacheLoad_PixelCache.name = "texturePixelCacheLoad"_c;
    TexturePixelCacheLoad_PixelCache.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache_texture)->typeSymbol = &PixelCacheType;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->returnTypeSymbol = &Float32x4Type;

    TexturePixelCacheLoad_PixelCacheMS_texture.name = "texture"_c;
    TexturePixelCacheLoad_PixelCacheMS_texture.type = Type::FullType{ PixelCacheMSType.name };
    TexturePixelCacheLoad_PixelCacheMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TexturePixelCacheLoad_PixelCacheMS.name = "texturePixelCacheLoad"_c;
    TexturePixelCacheLoad_PixelCacheMS.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_texture)->typeSymbol = &PixelCacheMSType;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->returnTypeSymbol = &Float32x4Type;

    TextureSample_Texture1D_texture.name = "texture"_c;
    TextureSample_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSample_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture1D_sampler.name = "sampler"_c;
    TextureSample_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSample_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSample_Texture1D_coordinate.name = "coordinate"_c;
    TextureSample_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSample_Texture1D.name = "textureSample"_c;
    TextureSample_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSample_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSample_Texture1D_texture.name = "texture"_c;
    SampledTextureSample_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSample_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSample_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSample_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSample_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSample_Texture1D.name = "textureSample"_c;
    SampledTextureSample_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSample_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSample_Texture2D_texture.name = "texture"_c;
    TextureSample_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSample_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture2D_sampler.name = "sampler"_c;
    TextureSample_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSample_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSample_Texture2D_coordinate.name = "coordinate"_c;
    TextureSample_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSample_Texture2D.name = "textureSample"_c;
    TextureSample_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSample_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSample_Texture2D_texture.name = "texture"_c;
    SampledTextureSample_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSample_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSample_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSample_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSample_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSample_Texture2D.name = "textureSample"_c;
    SampledTextureSample_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSample_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSample_Texture3D_texture.name = "texture"_c;
    TextureSample_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSample_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture3D_sampler.name = "sampler"_c;
    TextureSample_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSample_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSample_Texture3D_coordinate.name = "coordinate"_c;
    TextureSample_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_Texture3D.name = "textureSample"_c;
    TextureSample_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSample_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSample_Texture3D_texture.name = "texture"_c;
    SampledTextureSample_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSample_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSample_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSample_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSample_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_Texture3D.name = "textureSample"_c;
    SampledTextureSample_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSample_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSample_TextureCube_texture.name = "texture"_c;
    TextureSample_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSample_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_TextureCube_sampler.name = "sampler"_c;
    TextureSample_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_TextureCube_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSample_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSample_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_TextureCube_sampler)->storage = Storage::Uniform;
    TextureSample_TextureCube_coordinate.name = "coordinate"_c;
    TextureSample_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_TextureCube.name = "textureSample"_c;
    TextureSample_TextureCube.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSample_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_TextureCube)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSample_TextureCube_texture.name = "texture"_c;
    SampledTextureSample_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    SampledTextureSample_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSample_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&SampledTextureSample_TextureCube_texture)->storage = Storage::Uniform;
    SampledTextureSample_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSample_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_TextureCube.name = "textureSample"_c;
    SampledTextureSample_TextureCube.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSample_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->returnTypeSymbol = &Float32x4Type;

    TextureSample_Texture1DArray_texture.name = "texture"_c;
    TextureSample_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSample_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture1DArray_sampler.name = "sampler"_c;
    TextureSample_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSample_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture1DArray_sampler)->storage = Storage::Uniform;
    TextureSample_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSample_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSample_Texture1DArray.name = "textureSample"_c;
    TextureSample_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSample_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSample_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSample_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSample_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_texture)->storage = Storage::Uniform;
    SampledTextureSample_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSample_Texture1DArray.name = "textureSample"_c;
    SampledTextureSample_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSample_Texture2DArray_texture.name = "texture"_c;
    TextureSample_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSample_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture2DArray_sampler.name = "sampler"_c;
    TextureSample_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSample_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture2DArray_sampler)->storage = Storage::Uniform;
    TextureSample_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSample_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_Texture2DArray.name = "textureSample"_c;
    TextureSample_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSample_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSample_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSample_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSample_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_texture)->storage = Storage::Uniform;
    SampledTextureSample_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_Texture2DArray.name = "textureSample"_c;
    SampledTextureSample_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSample_TextureCubeArray_texture.name = "texture"_c;
    TextureSample_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSample_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSample_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_TextureCubeArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSample_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSample_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_TextureCubeArray_sampler)->storage = Storage::Uniform;
    TextureSample_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSample_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSample_TextureCubeArray.name = "textureSample"_c;
    TextureSample_TextureCubeArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSample_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSample_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSample_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    SampledTextureSample_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_texture)->storage = Storage::Uniform;
    SampledTextureSample_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSample_TextureCubeArray.name = "textureSample"_c;
    SampledTextureSample_TextureCubeArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleProj_Texture1D_texture.name = "texture"_c;
    TextureSampleProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture1D_proj.name = "proj"_c;
    TextureSampleProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture1D.name = "textureSampleProj"_c;
    TextureSampleProj_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture1D.name = "textureSampleProj"_c;
    SampledTextureSampleProj_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleProj_Texture2D_texture.name = "texture"_c;
    TextureSampleProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProj_Texture2D_proj.name = "proj"_c;
    TextureSampleProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture2D.name = "textureSampleProj"_c;
    TextureSampleProj_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture2D.name = "textureSampleProj"_c;
    SampledTextureSampleProj_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleProj_Texture3D_texture.name = "texture"_c;
    TextureSampleProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProj_Texture3D_proj.name = "proj"_c;
    TextureSampleProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture3D.name = "textureSampleProj"_c;
    TextureSampleProj_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture3D.name = "textureSampleProj"_c;
    SampledTextureSampleProj_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1D.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1D.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture2D.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture2D.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture3D.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture3D.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    TextureSampleCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1DArray.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1DArray.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    TextureSampleCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture2DArray.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture2DArray.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D.name = "textureSampleProjCompare"_c;
    TextureSampleProjCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D.name = "textureSampleProjCompare"_c;
    SampledTextureSampleProjCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture2D.name = "textureSampleProjCompare"_c;
    TextureSampleProjCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D.name = "textureSampleProjCompare"_c;
    SampledTextureSampleProjCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture3D.name = "textureSampleProjCompare"_c;
    TextureSampleProjCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture3D.name = "textureSampleProjCompare"_c;
    SampledTextureSampleProjCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLod_Texture1D_texture.name = "texture"_c;
    TextureSampleLod_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLod_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLod_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLod_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLod_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleLod_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture1D_lod.name = "lod"_c;
    TextureSampleLod_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture1D.name = "textureSampleLod"_c;
    TextureSampleLod_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLod_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLod_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleLod_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleLod_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture1D.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLod_Texture2D_texture.name = "texture"_c;
    TextureSampleLod_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLod_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLod_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLod_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLod_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleLod_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLod_Texture2D_lod.name = "lod"_c;
    TextureSampleLod_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture2D.name = "textureSampleLod"_c;
    TextureSampleLod_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLod_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLod_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLod_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleLod_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleLod_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLod_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture2D.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLod_Texture3D_texture.name = "texture"_c;
    TextureSampleLod_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLod_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLod_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLod_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLod_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleLod_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLod_Texture3D_lod.name = "lod"_c;
    TextureSampleLod_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture3D.name = "textureSampleLod"_c;
    TextureSampleLod_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLod_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLod_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLod_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleLod_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleLod_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLod_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture3D.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLod_TextureCube_texture.name = "texture"_c;
    TextureSampleLod_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSampleLod_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_TextureCube_sampler.name = "sampler"_c;
    TextureSampleLod_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_TextureCube_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLod_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSampleLod_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_TextureCube_sampler)->storage = Storage::Uniform;
    TextureSampleLod_TextureCube_coordinate.name = "coordinate"_c;
    TextureSampleLod_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLod_TextureCube_lod.name = "lod"_c;
    TextureSampleLod_TextureCube_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_TextureCube.name = "textureSampleLod"_c;
    TextureSampleLod_TextureCube.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLod_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLod_TextureCube_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_TextureCube)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLod_TextureCube_texture.name = "texture"_c;
    SampledTextureSampleLod_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    SampledTextureSampleLod_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_texture)->storage = Storage::Uniform;
    SampledTextureSampleLod_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLod_TextureCube_lod.name = "lod"_c;
    SampledTextureSampleLod_TextureCube_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_TextureCube.name = "textureSampleLod"_c;
    SampledTextureSampleLod_TextureCube.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLod_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLod_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLod_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLod_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_sampler)->storage = Storage::Uniform;
    TextureSampleLod_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLod_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLod_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture1DArray.name = "textureSampleLod"_c;
    TextureSampleLod_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLod_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleLod_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleLod_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLod_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture1DArray.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLod_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLod_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLod_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLod_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_sampler)->storage = Storage::Uniform;
    TextureSampleLod_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLod_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLod_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture2DArray.name = "textureSampleLod"_c;
    TextureSampleLod_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLod_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleLod_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleLod_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLod_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture2DArray.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLod_TextureCubeArray_texture.name = "texture"_c;
    TextureSampleLod_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSampleLod_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSampleLod_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_TextureCubeArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_sampler)->storage = Storage::Uniform;
    TextureSampleLod_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSampleLod_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSampleLod_TextureCubeArray_lod.name = "lod"_c;
    TextureSampleLod_TextureCubeArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_TextureCubeArray.name = "textureSampleLod"_c;
    TextureSampleLod_TextureCubeArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLod_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSampleLod_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    SampledTextureSampleLod_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleLod_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleLod_TextureCubeArray_lod.name = "lod"_c;
    SampledTextureSampleLod_TextureCubeArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_TextureCubeArray.name = "textureSampleLod"_c;
    SampledTextureSampleLod_TextureCubeArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLodProj_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProj_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleLodProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProj_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture1D.name = "textureSampleLodProj"_c;
    TextureSampleLodProj_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLodProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleLodProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleLodProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProj_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture1D.name = "textureSampleLodProj"_c;
    SampledTextureSampleLodProj_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLodProj_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProj_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleLodProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProj_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProj_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture2D.name = "textureSampleLodProj"_c;
    TextureSampleLodProj_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLodProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleLodProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleLodProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProj_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProj_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture2D.name = "textureSampleLodProj"_c;
    SampledTextureSampleLodProj_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLodProj_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProj_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleLodProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProj_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProj_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture3D.name = "textureSampleLodProj"_c;
    TextureSampleLodProj_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLodProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleLodProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleLodProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProj_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProj_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture3D.name = "textureSampleLodProj"_c;
    SampledTextureSampleLodProj_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLodCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleLodCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1D_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1D.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLodCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleLodCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleLodCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLodCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleLodCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompare_Texture2D_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2D.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLodCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleLodCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleLodCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompare_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2D.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLodCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleLodCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompare_Texture3D_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture3D.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLodCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleLodCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleLodCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompare_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture3D.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLodCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLodCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    TextureSampleLodCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompare_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1DArray.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLodCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleLodCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleLodCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompare_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1DArray.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLodCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLodCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    TextureSampleLodCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompare_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2DArray.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLodCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleLodCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleLodCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompare_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2DArray.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLodProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleLodProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D.name = "textureSampleLodProjCompare"_c;
    TextureSampleLodProjCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLodProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleLodProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleLodProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D.name = "textureSampleLodProjCompare"_c;
    SampledTextureSampleLodProjCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLodProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleLodProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjCompare_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture2D.name = "textureSampleLodProjCompare"_c;
    TextureSampleLodProjCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLodProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleLodProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleLodProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjCompare_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D.name = "textureSampleLodProjCompare"_c;
    SampledTextureSampleLodProjCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleLodProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleLodProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjCompare_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D.name = "textureSampleLodProjCompare"_c;
    TextureSampleLodProjCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleLodProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleLodProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleLodProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D.name = "textureSampleLodProjCompare"_c;
    SampledTextureSampleLodProjCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGrad_Texture1D_texture.name = "texture"_c;
    TextureSampleGrad_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGrad_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGrad_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleGrad_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGrad_Texture1D_gradx.name = "grad_x"_c;
    TextureSampleGrad_Texture1D_gradx.type = Type::FullType{ Float32Type.name };
    TextureSampleGrad_Texture1D_grady.name = "grad_y"_c;
    TextureSampleGrad_Texture1D_grady.type = Type::FullType{ Float32Type.name };
    TextureSampleGrad_Texture1D.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGrad_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_gradx)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_grady)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGrad_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleGrad_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleGrad_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGrad_Texture1D_gradx.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture1D_gradx.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGrad_Texture1D_grady.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture1D_grady.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGrad_Texture1D.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_gradx)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_grady)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGrad_Texture2D_texture.name = "texture"_c;
    TextureSampleGrad_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGrad_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGrad_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleGrad_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture2D_gradx.name = "grad_x"_c;
    TextureSampleGrad_Texture2D_gradx.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture2D_grady.name = "grad_y"_c;
    TextureSampleGrad_Texture2D_grady.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture2D.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGrad_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_gradx)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_grady)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGrad_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleGrad_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleGrad_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture2D_gradx.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture2D_gradx.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture2D_grady.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture2D_grady.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture2D.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_gradx)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_grady)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGrad_Texture3D_texture.name = "texture"_c;
    TextureSampleGrad_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGrad_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGrad_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleGrad_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture3D_gradx.name = "grad_x"_c;
    TextureSampleGrad_Texture3D_gradx.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture3D_grady.name = "grad_y"_c;
    TextureSampleGrad_Texture3D_grady.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture3D.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGrad_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGrad_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleGrad_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleGrad_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture3D_gradx.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture3D_gradx.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture3D_grady.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture3D_grady.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture3D.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGrad_TextureCube_texture.name = "texture"_c;
    TextureSampleGrad_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSampleGrad_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_TextureCube_sampler.name = "sampler"_c;
    TextureSampleGrad_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_TextureCube_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGrad_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_sampler)->storage = Storage::Uniform;
    TextureSampleGrad_TextureCube_coordinate.name = "coordinate"_c;
    TextureSampleGrad_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_TextureCube_gradx.name = "grad_x"_c;
    TextureSampleGrad_TextureCube_gradx.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_TextureCube_grady.name = "grad_y"_c;
    TextureSampleGrad_TextureCube_grady.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_TextureCube.name = "textureSampleGrad"_c;
    TextureSampleGrad_TextureCube.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGrad_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCube)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGrad_TextureCube_texture.name = "texture"_c;
    SampledTextureSampleGrad_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    SampledTextureSampleGrad_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_texture)->storage = Storage::Uniform;
    SampledTextureSampleGrad_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_TextureCube_gradx.name = "grad_x"_c;
    SampledTextureSampleGrad_TextureCube_gradx.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_TextureCube_grady.name = "grad_y"_c;
    SampledTextureSampleGrad_TextureCube_grady.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_TextureCube.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_TextureCube.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGrad_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGrad_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGrad_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_sampler)->storage = Storage::Uniform;
    TextureSampleGrad_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture1DArray_gradx.name = "grad_x"_c;
    TextureSampleGrad_Texture1DArray_gradx.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture1DArray_grady.name = "grad_y"_c;
    TextureSampleGrad_Texture1DArray_grady.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture1DArray.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_gradx)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_grady)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGrad_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleGrad_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleGrad_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture1DArray_gradx.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture1DArray_gradx.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture1DArray_grady.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture1DArray_grady.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture1DArray.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_gradx)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_grady)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGrad_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGrad_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGrad_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_sampler)->storage = Storage::Uniform;
    TextureSampleGrad_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture2DArray_gradx.name = "grad_x"_c;
    TextureSampleGrad_Texture2DArray_gradx.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture2DArray_grady.name = "grad_y"_c;
    TextureSampleGrad_Texture2DArray_grady.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture2DArray.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGrad_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleGrad_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleGrad_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture2DArray_gradx.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture2DArray_gradx.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture2DArray_grady.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture2DArray_grady.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture2DArray.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGrad_TextureCubeArray_texture.name = "texture"_c;
    TextureSampleGrad_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSampleGrad_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSampleGrad_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_TextureCubeArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_sampler)->storage = Storage::Uniform;
    TextureSampleGrad_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSampleGrad_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray_gradx.name = "grad_x"_c;
    TextureSampleGrad_TextureCubeArray_gradx.type = Type::FullType{ Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray_grady.name = "grad_y"_c;
    TextureSampleGrad_TextureCubeArray_grady.type = Type::FullType{ Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray.name = "textureSampleGrad"_c;
    TextureSampleGrad_TextureCubeArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_gradx)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_grady)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGrad_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSampleGrad_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    SampledTextureSampleGrad_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleGrad_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray_gradx.name = "grad_x"_c;
    SampledTextureSampleGrad_TextureCubeArray_gradx.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray_grady.name = "grad_y"_c;
    SampledTextureSampleGrad_TextureCubeArray_grady.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_TextureCubeArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_gradx)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_grady)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGradProj_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProj_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleGradProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D_gradx.name = "grad_x"_c;
    TextureSampleGradProj_Texture1D_gradx.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D_grady.name = "grad_y"_c;
    TextureSampleGradProj_Texture1D_grady.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D.name = "textureSampleGradProj"_c;
    TextureSampleGradProj_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_gradx)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_grady)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGradProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleGradProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleGradProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D_gradx.name = "grad_x"_c;
    SampledTextureSampleGradProj_Texture1D_gradx.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D_grady.name = "grad_y"_c;
    SampledTextureSampleGradProj_Texture1D_grady.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D.name = "textureSampleGradProj"_c;
    SampledTextureSampleGradProj_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_gradx)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_grady)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGradProj_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProj_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleGradProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProj_Texture2D_gradx.name = "grad_x"_c;
    TextureSampleGradProj_Texture2D_gradx.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProj_Texture2D_grady.name = "grad_y"_c;
    TextureSampleGradProj_Texture2D_grady.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProj_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture2D.name = "textureSampleGradProj"_c;
    TextureSampleGradProj_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_gradx)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_grady)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGradProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleGradProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleGradProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProj_Texture2D_gradx.name = "grad_x"_c;
    SampledTextureSampleGradProj_Texture2D_gradx.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProj_Texture2D_grady.name = "grad_y"_c;
    SampledTextureSampleGradProj_Texture2D_grady.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture2D.name = "textureSampleGradProj"_c;
    SampledTextureSampleGradProj_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_gradx)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_grady)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGradProj_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProj_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleGradProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProj_Texture3D_gradx.name = "grad_x"_c;
    TextureSampleGradProj_Texture3D_gradx.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProj_Texture3D_grady.name = "grad_y"_c;
    TextureSampleGradProj_Texture3D_grady.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProj_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture3D.name = "textureSampleGradProj"_c;
    TextureSampleGradProj_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGradProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleGradProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleGradProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProj_Texture3D_gradx.name = "grad_x"_c;
    SampledTextureSampleGradProj_Texture3D_gradx.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProj_Texture3D_grady.name = "grad_y"_c;
    SampledTextureSampleGradProj_Texture3D_grady.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture3D.name = "textureSampleGradProj"_c;
    SampledTextureSampleGradProj_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGradCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleGradCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D_gradx.name = "grad_x"_c;
    TextureSampleGradCompare_Texture1D_gradx.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D_grady.name = "grad_y"_c;
    TextureSampleGradCompare_Texture1D_grady.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_gradx)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_grady)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGradCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleGradCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleGradCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D_gradx.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture1D_gradx.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D_grady.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture1D_grady.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_gradx)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_grady)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGradCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleGradCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture2D_gradx.name = "grad_x"_c;
    TextureSampleGradCompare_Texture2D_gradx.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture2D_grady.name = "grad_y"_c;
    TextureSampleGradCompare_Texture2D_grady.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture2D.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_gradx)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_grady)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGradCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleGradCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleGradCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture2D_gradx.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture2D_gradx.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture2D_grady.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture2D_grady.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture2D.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_gradx)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_grady)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGradCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleGradCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture3D_gradx.name = "grad_x"_c;
    TextureSampleGradCompare_Texture3D_gradx.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture3D_grady.name = "grad_y"_c;
    TextureSampleGradCompare_Texture3D_grady.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture3D.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGradCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleGradCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleGradCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture3D_gradx.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture3D_gradx.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture3D_grady.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture3D_grady.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture3D.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGradCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGradCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    TextureSampleGradCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture1DArray_gradx.name = "grad_x"_c;
    TextureSampleGradCompare_Texture1DArray_gradx.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture1DArray_grady.name = "grad_y"_c;
    TextureSampleGradCompare_Texture1DArray_grady.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1DArray.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_gradx)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_grady)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGradCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleGradCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleGradCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture1DArray_gradx.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture1DArray_gradx.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture1DArray_grady.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture1DArray_grady.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1DArray.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_gradx)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_grady)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGradCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGradCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    TextureSampleGradCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture2DArray_gradx.name = "grad_x"_c;
    TextureSampleGradCompare_Texture2DArray_gradx.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture2DArray_grady.name = "grad_y"_c;
    TextureSampleGradCompare_Texture2DArray_grady.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture2DArray.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGradCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleGradCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleGradCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture2DArray_gradx.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture2DArray_gradx.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture2DArray_grady.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture2DArray_grady.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture2DArray.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGradProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleGradProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_gradx.name = "grad_x"_c;
    TextureSampleGradProjCompare_Texture1D_gradx.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_grady.name = "grad_y"_c;
    TextureSampleGradProjCompare_Texture1D_grady.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleGradProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D.name = "textureSampleGradProjCompare"_c;
    TextureSampleGradProjCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_gradx)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_grady)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGradProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleGradProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleGradProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_gradx.name = "grad_x"_c;
    SampledTextureSampleGradProjCompare_Texture1D_gradx.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_grady.name = "grad_y"_c;
    SampledTextureSampleGradProjCompare_Texture1D_grady.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D.name = "textureSampleGradProjCompare"_c;
    SampledTextureSampleGradProjCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_gradx)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_grady)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGradProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleGradProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompare_Texture2D_gradx.name = "grad_x"_c;
    TextureSampleGradProjCompare_Texture2D_gradx.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompare_Texture2D_grady.name = "grad_y"_c;
    TextureSampleGradProjCompare_Texture2D_grady.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleGradProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture2D.name = "textureSampleGradProjCompare"_c;
    TextureSampleGradProjCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_gradx)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_grady)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGradProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleGradProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleGradProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_gradx.name = "grad_x"_c;
    SampledTextureSampleGradProjCompare_Texture2D_gradx.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_grady.name = "grad_y"_c;
    SampledTextureSampleGradProjCompare_Texture2D_grady.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture2D.name = "textureSampleGradProjCompare"_c;
    SampledTextureSampleGradProjCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_gradx)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_grady)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleGradProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleGradProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompare_Texture3D_gradx.name = "grad_x"_c;
    TextureSampleGradProjCompare_Texture3D_gradx.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompare_Texture3D_grady.name = "grad_y"_c;
    TextureSampleGradProjCompare_Texture3D_grady.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleGradProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture3D.name = "textureSampleGradProjCompare"_c;
    TextureSampleGradProjCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleGradProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleGradProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleGradProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_gradx.name = "grad_x"_c;
    SampledTextureSampleGradProjCompare_Texture3D_gradx.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_grady.name = "grad_y"_c;
    SampledTextureSampleGradProjCompare_Texture3D_grady.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture3D.name = "textureSampleGradProjCompare"_c;
    SampledTextureSampleGradProjCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_gradx)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_grady)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBias_Texture1D_texture.name = "texture"_c;
    TextureSampleBias_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBias_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBias_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBias_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBias_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleBias_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture1D_bias.name = "bias"_c;
    TextureSampleBias_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture1D.name = "textureSampleBias"_c;
    TextureSampleBias_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBias_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBias_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleBias_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleBias_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture1D.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBias_Texture2D_texture.name = "texture"_c;
    TextureSampleBias_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBias_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBias_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBias_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBias_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleBias_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBias_Texture2D_bias.name = "bias"_c;
    TextureSampleBias_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture2D.name = "textureSampleBias"_c;
    TextureSampleBias_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBias_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBias_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBias_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleBias_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleBias_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBias_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture2D.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBias_Texture3D_texture.name = "texture"_c;
    TextureSampleBias_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBias_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBias_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBias_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBias_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleBias_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBias_Texture3D_bias.name = "bias"_c;
    TextureSampleBias_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture3D.name = "textureSampleBias"_c;
    TextureSampleBias_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBias_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBias_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBias_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleBias_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleBias_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBias_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture3D.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBias_TextureCube_texture.name = "texture"_c;
    TextureSampleBias_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSampleBias_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_TextureCube_sampler.name = "sampler"_c;
    TextureSampleBias_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_TextureCube_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBias_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSampleBias_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_TextureCube_sampler)->storage = Storage::Uniform;
    TextureSampleBias_TextureCube_coordinate.name = "coordinate"_c;
    TextureSampleBias_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBias_TextureCube_bias.name = "bias"_c;
    TextureSampleBias_TextureCube_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_TextureCube.name = "textureSampleBias"_c;
    TextureSampleBias_TextureCube.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBias_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBias_TextureCube_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_TextureCube)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBias_TextureCube_texture.name = "texture"_c;
    SampledTextureSampleBias_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    SampledTextureSampleBias_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_texture)->storage = Storage::Uniform;
    SampledTextureSampleBias_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBias_TextureCube_bias.name = "bias"_c;
    SampledTextureSampleBias_TextureCube_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_TextureCube.name = "textureSampleBias"_c;
    SampledTextureSampleBias_TextureCube.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBias_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBias_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBias_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBias_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_sampler)->storage = Storage::Uniform;
    TextureSampleBias_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBias_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBias_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture1DArray.name = "textureSampleBias"_c;
    TextureSampleBias_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBias_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleBias_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleBias_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBias_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture1DArray.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBias_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBias_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBias_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBias_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_sampler)->storage = Storage::Uniform;
    TextureSampleBias_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBias_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBias_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture2DArray.name = "textureSampleBias"_c;
    TextureSampleBias_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBias_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleBias_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleBias_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBias_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture2DArray.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBias_TextureCubeArray_texture.name = "texture"_c;
    TextureSampleBias_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSampleBias_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSampleBias_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_TextureCubeArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_sampler)->storage = Storage::Uniform;
    TextureSampleBias_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSampleBias_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSampleBias_TextureCubeArray_bias.name = "bias"_c;
    TextureSampleBias_TextureCubeArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_TextureCubeArray.name = "textureSampleBias"_c;
    TextureSampleBias_TextureCubeArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBias_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSampleBias_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    SampledTextureSampleBias_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleBias_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleBias_TextureCubeArray_bias.name = "bias"_c;
    SampledTextureSampleBias_TextureCubeArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_TextureCubeArray.name = "textureSampleBias"_c;
    SampledTextureSampleBias_TextureCubeArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBiasProj_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProj_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleBiasProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasProj_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture1D_proj.name = "proj"_c;
    TextureSampleBiasProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture1D.name = "textureSampleBiasProj"_c;
    TextureSampleBiasProj_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBiasProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleBiasProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleBiasProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasProj_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleBiasProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture1D.name = "textureSampleBiasProj"_c;
    SampledTextureSampleBiasProj_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBiasProj_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProj_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleBiasProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProj_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasProj_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture2D_proj.name = "proj"_c;
    TextureSampleBiasProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture2D.name = "textureSampleBiasProj"_c;
    TextureSampleBiasProj_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBiasProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleBiasProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleBiasProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProj_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasProj_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleBiasProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture2D.name = "textureSampleBiasProj"_c;
    SampledTextureSampleBiasProj_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBiasProj_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProj_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleBiasProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProj_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasProj_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture3D_proj.name = "proj"_c;
    TextureSampleBiasProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture3D.name = "textureSampleBiasProj"_c;
    TextureSampleBiasProj_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBiasProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleBiasProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleBiasProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProj_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasProj_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleBiasProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture3D.name = "textureSampleBiasProj"_c;
    SampledTextureSampleBiasProj_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBiasCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleBiasCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1D.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBiasCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleBiasCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleBiasCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBiasCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleBiasCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompare_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2D.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBiasCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleBiasCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleBiasCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompare_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2D.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBiasCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleBiasCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompare_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture3D.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBiasCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleBiasCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleBiasCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompare_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture3D.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBiasCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBiasCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    TextureSampleBiasCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompare_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1DArray.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBiasCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleBiasCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleBiasCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture1DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBiasCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBiasCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    TextureSampleBiasCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompare_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2DArray.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBiasCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleBiasCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    SampledTextureSampleBiasCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture2DArray.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBiasProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    TextureSampleBiasProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasProjCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleBiasProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleBiasProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D.name = "textureSampleBiasProjCompare"_c;
    TextureSampleBiasProjCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBiasProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleBiasProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    SampledTextureSampleBiasProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D.name = "textureSampleBiasProjCompare"_c;
    SampledTextureSampleBiasProjCompare_Texture1D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBiasProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    TextureSampleBiasProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjCompare_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasProjCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleBiasProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleBiasProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture2D.name = "textureSampleBiasProjCompare"_c;
    TextureSampleBiasProjCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBiasProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleBiasProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    SampledTextureSampleBiasProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D.name = "textureSampleBiasProjCompare"_c;
    SampledTextureSampleBiasProjCompare_Texture2D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    TextureSampleBiasProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    TextureSampleBiasProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjCompare_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasProjCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleBiasProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleBiasProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture3D.name = "textureSampleBiasProjCompare"_c;
    TextureSampleBiasProjCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    SampledTextureSampleBiasProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleBiasProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    SampledTextureSampleBiasProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D.name = "textureSampleBiasProjCompare"_c;
    SampledTextureSampleBiasProjCompare_Texture3D.returnType = Type::FullType{ Float32x4Type.name };
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

}
} // namespace GPULang
