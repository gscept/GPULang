//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "compiler.h"
namespace GPULang
{
Compiler::Timer StaticIntrinsicTimer;
struct StaticIntrinsicTimerStart
{
    StaticIntrinsicTimerStart()
    {
        StaticIntrinsicTimer.Start();
    }
};
StaticIntrinsicTimerStart StaticIntrinsicTimerStartInstance;

/// acos with Float32
Variable acos_Float32_arg;
Function acos_Float32;
inline constexpr std::array acos_Float32_args = { &acos_Float32_arg };

/// acos with Float32x2
Variable acos_Float32x2_arg;
Function acos_Float32x2;
inline constexpr std::array acos_Float32x2_args = { &acos_Float32x2_arg };

/// acos with Float32x3
Variable acos_Float32x3_arg;
Function acos_Float32x3;
inline constexpr std::array acos_Float32x3_args = { &acos_Float32x3_arg };

/// acos with Float32x4
Variable acos_Float32x4_arg;
Function acos_Float32x4;
inline constexpr std::array acos_Float32x4_args = { &acos_Float32x4_arg };

/// acos with Float16
Variable acos_Float16_arg;
Function acos_Float16;
inline constexpr std::array acos_Float16_args = { &acos_Float16_arg };

/// acos with Float16x2
Variable acos_Float16x2_arg;
Function acos_Float16x2;
inline constexpr std::array acos_Float16x2_args = { &acos_Float16x2_arg };

/// acos with Float16x3
Variable acos_Float16x3_arg;
Function acos_Float16x3;
inline constexpr std::array acos_Float16x3_args = { &acos_Float16x3_arg };

/// acos with Float16x4
Variable acos_Float16x4_arg;
Function acos_Float16x4;
inline constexpr std::array acos_Float16x4_args = { &acos_Float16x4_arg };

/// acosh with Float32
Variable acosh_Float32_arg;
Function acosh_Float32;
inline constexpr std::array acosh_Float32_args = { &acosh_Float32_arg };

/// acosh with Float32x2
Variable acosh_Float32x2_arg;
Function acosh_Float32x2;
inline constexpr std::array acosh_Float32x2_args = { &acosh_Float32x2_arg };

/// acosh with Float32x3
Variable acosh_Float32x3_arg;
Function acosh_Float32x3;
inline constexpr std::array acosh_Float32x3_args = { &acosh_Float32x3_arg };

/// acosh with Float32x4
Variable acosh_Float32x4_arg;
Function acosh_Float32x4;
inline constexpr std::array acosh_Float32x4_args = { &acosh_Float32x4_arg };

/// acosh with Float16
Variable acosh_Float16_arg;
Function acosh_Float16;
inline constexpr std::array acosh_Float16_args = { &acosh_Float16_arg };

/// acosh with Float16x2
Variable acosh_Float16x2_arg;
Function acosh_Float16x2;
inline constexpr std::array acosh_Float16x2_args = { &acosh_Float16x2_arg };

/// acosh with Float16x3
Variable acosh_Float16x3_arg;
Function acosh_Float16x3;
inline constexpr std::array acosh_Float16x3_args = { &acosh_Float16x3_arg };

/// acosh with Float16x4
Variable acosh_Float16x4_arg;
Function acosh_Float16x4;
inline constexpr std::array acosh_Float16x4_args = { &acosh_Float16x4_arg };

/// asin with Float32
Variable asin_Float32_arg;
Function asin_Float32;
inline constexpr std::array asin_Float32_args = { &asin_Float32_arg };

/// asin with Float32x2
Variable asin_Float32x2_arg;
Function asin_Float32x2;
inline constexpr std::array asin_Float32x2_args = { &asin_Float32x2_arg };

/// asin with Float32x3
Variable asin_Float32x3_arg;
Function asin_Float32x3;
inline constexpr std::array asin_Float32x3_args = { &asin_Float32x3_arg };

/// asin with Float32x4
Variable asin_Float32x4_arg;
Function asin_Float32x4;
inline constexpr std::array asin_Float32x4_args = { &asin_Float32x4_arg };

/// asin with Float16
Variable asin_Float16_arg;
Function asin_Float16;
inline constexpr std::array asin_Float16_args = { &asin_Float16_arg };

/// asin with Float16x2
Variable asin_Float16x2_arg;
Function asin_Float16x2;
inline constexpr std::array asin_Float16x2_args = { &asin_Float16x2_arg };

/// asin with Float16x3
Variable asin_Float16x3_arg;
Function asin_Float16x3;
inline constexpr std::array asin_Float16x3_args = { &asin_Float16x3_arg };

/// asin with Float16x4
Variable asin_Float16x4_arg;
Function asin_Float16x4;
inline constexpr std::array asin_Float16x4_args = { &asin_Float16x4_arg };

/// asinh with Float32
Variable asinh_Float32_arg;
Function asinh_Float32;
inline constexpr std::array asinh_Float32_args = { &asinh_Float32_arg };

/// asinh with Float32x2
Variable asinh_Float32x2_arg;
Function asinh_Float32x2;
inline constexpr std::array asinh_Float32x2_args = { &asinh_Float32x2_arg };

/// asinh with Float32x3
Variable asinh_Float32x3_arg;
Function asinh_Float32x3;
inline constexpr std::array asinh_Float32x3_args = { &asinh_Float32x3_arg };

/// asinh with Float32x4
Variable asinh_Float32x4_arg;
Function asinh_Float32x4;
inline constexpr std::array asinh_Float32x4_args = { &asinh_Float32x4_arg };

/// asinh with Float16
Variable asinh_Float16_arg;
Function asinh_Float16;
inline constexpr std::array asinh_Float16_args = { &asinh_Float16_arg };

/// asinh with Float16x2
Variable asinh_Float16x2_arg;
Function asinh_Float16x2;
inline constexpr std::array asinh_Float16x2_args = { &asinh_Float16x2_arg };

/// asinh with Float16x3
Variable asinh_Float16x3_arg;
Function asinh_Float16x3;
inline constexpr std::array asinh_Float16x3_args = { &asinh_Float16x3_arg };

/// asinh with Float16x4
Variable asinh_Float16x4_arg;
Function asinh_Float16x4;
inline constexpr std::array asinh_Float16x4_args = { &asinh_Float16x4_arg };

/// atan with Float32
Variable atan_Float32_arg;
Function atan_Float32;
inline constexpr std::array atan_Float32_args = { &atan_Float32_arg };

/// atan with Float32x2
Variable atan_Float32x2_arg;
Function atan_Float32x2;
inline constexpr std::array atan_Float32x2_args = { &atan_Float32x2_arg };

/// atan with Float32x3
Variable atan_Float32x3_arg;
Function atan_Float32x3;
inline constexpr std::array atan_Float32x3_args = { &atan_Float32x3_arg };

/// atan with Float32x4
Variable atan_Float32x4_arg;
Function atan_Float32x4;
inline constexpr std::array atan_Float32x4_args = { &atan_Float32x4_arg };

/// atan with Float16
Variable atan_Float16_arg;
Function atan_Float16;
inline constexpr std::array atan_Float16_args = { &atan_Float16_arg };

/// atan with Float16x2
Variable atan_Float16x2_arg;
Function atan_Float16x2;
inline constexpr std::array atan_Float16x2_args = { &atan_Float16x2_arg };

/// atan with Float16x3
Variable atan_Float16x3_arg;
Function atan_Float16x3;
inline constexpr std::array atan_Float16x3_args = { &atan_Float16x3_arg };

/// atan with Float16x4
Variable atan_Float16x4_arg;
Function atan_Float16x4;
inline constexpr std::array atan_Float16x4_args = { &atan_Float16x4_arg };

/// atanh with Float32
Variable atanh_Float32_arg;
Function atanh_Float32;
inline constexpr std::array atanh_Float32_args = { &atanh_Float32_arg };

/// atanh with Float32x2
Variable atanh_Float32x2_arg;
Function atanh_Float32x2;
inline constexpr std::array atanh_Float32x2_args = { &atanh_Float32x2_arg };

/// atanh with Float32x3
Variable atanh_Float32x3_arg;
Function atanh_Float32x3;
inline constexpr std::array atanh_Float32x3_args = { &atanh_Float32x3_arg };

/// atanh with Float32x4
Variable atanh_Float32x4_arg;
Function atanh_Float32x4;
inline constexpr std::array atanh_Float32x4_args = { &atanh_Float32x4_arg };

/// atanh with Float16
Variable atanh_Float16_arg;
Function atanh_Float16;
inline constexpr std::array atanh_Float16_args = { &atanh_Float16_arg };

/// atanh with Float16x2
Variable atanh_Float16x2_arg;
Function atanh_Float16x2;
inline constexpr std::array atanh_Float16x2_args = { &atanh_Float16x2_arg };

/// atanh with Float16x3
Variable atanh_Float16x3_arg;
Function atanh_Float16x3;
inline constexpr std::array atanh_Float16x3_args = { &atanh_Float16x3_arg };

/// atanh with Float16x4
Variable atanh_Float16x4_arg;
Function atanh_Float16x4;
inline constexpr std::array atanh_Float16x4_args = { &atanh_Float16x4_arg };

/// cos with Float32
Variable cos_Float32_arg;
Function cos_Float32;
inline constexpr std::array cos_Float32_args = { &cos_Float32_arg };

/// cos with Float32x2
Variable cos_Float32x2_arg;
Function cos_Float32x2;
inline constexpr std::array cos_Float32x2_args = { &cos_Float32x2_arg };

/// cos with Float32x3
Variable cos_Float32x3_arg;
Function cos_Float32x3;
inline constexpr std::array cos_Float32x3_args = { &cos_Float32x3_arg };

/// cos with Float32x4
Variable cos_Float32x4_arg;
Function cos_Float32x4;
inline constexpr std::array cos_Float32x4_args = { &cos_Float32x4_arg };

/// cos with Float16
Variable cos_Float16_arg;
Function cos_Float16;
inline constexpr std::array cos_Float16_args = { &cos_Float16_arg };

/// cos with Float16x2
Variable cos_Float16x2_arg;
Function cos_Float16x2;
inline constexpr std::array cos_Float16x2_args = { &cos_Float16x2_arg };

/// cos with Float16x3
Variable cos_Float16x3_arg;
Function cos_Float16x3;
inline constexpr std::array cos_Float16x3_args = { &cos_Float16x3_arg };

/// cos with Float16x4
Variable cos_Float16x4_arg;
Function cos_Float16x4;
inline constexpr std::array cos_Float16x4_args = { &cos_Float16x4_arg };

/// cosh with Float32
Variable cosh_Float32_arg;
Function cosh_Float32;
inline constexpr std::array cosh_Float32_args = { &cosh_Float32_arg };

/// cosh with Float32x2
Variable cosh_Float32x2_arg;
Function cosh_Float32x2;
inline constexpr std::array cosh_Float32x2_args = { &cosh_Float32x2_arg };

/// cosh with Float32x3
Variable cosh_Float32x3_arg;
Function cosh_Float32x3;
inline constexpr std::array cosh_Float32x3_args = { &cosh_Float32x3_arg };

/// cosh with Float32x4
Variable cosh_Float32x4_arg;
Function cosh_Float32x4;
inline constexpr std::array cosh_Float32x4_args = { &cosh_Float32x4_arg };

/// cosh with Float16
Variable cosh_Float16_arg;
Function cosh_Float16;
inline constexpr std::array cosh_Float16_args = { &cosh_Float16_arg };

/// cosh with Float16x2
Variable cosh_Float16x2_arg;
Function cosh_Float16x2;
inline constexpr std::array cosh_Float16x2_args = { &cosh_Float16x2_arg };

/// cosh with Float16x3
Variable cosh_Float16x3_arg;
Function cosh_Float16x3;
inline constexpr std::array cosh_Float16x3_args = { &cosh_Float16x3_arg };

/// cosh with Float16x4
Variable cosh_Float16x4_arg;
Function cosh_Float16x4;
inline constexpr std::array cosh_Float16x4_args = { &cosh_Float16x4_arg };

/// exp with Float32
Variable exp_Float32_arg;
Function exp_Float32;
inline constexpr std::array exp_Float32_args = { &exp_Float32_arg };

/// exp with Float32x2
Variable exp_Float32x2_arg;
Function exp_Float32x2;
inline constexpr std::array exp_Float32x2_args = { &exp_Float32x2_arg };

/// exp with Float32x3
Variable exp_Float32x3_arg;
Function exp_Float32x3;
inline constexpr std::array exp_Float32x3_args = { &exp_Float32x3_arg };

/// exp with Float32x4
Variable exp_Float32x4_arg;
Function exp_Float32x4;
inline constexpr std::array exp_Float32x4_args = { &exp_Float32x4_arg };

/// exp with Float16
Variable exp_Float16_arg;
Function exp_Float16;
inline constexpr std::array exp_Float16_args = { &exp_Float16_arg };

/// exp with Float16x2
Variable exp_Float16x2_arg;
Function exp_Float16x2;
inline constexpr std::array exp_Float16x2_args = { &exp_Float16x2_arg };

/// exp with Float16x3
Variable exp_Float16x3_arg;
Function exp_Float16x3;
inline constexpr std::array exp_Float16x3_args = { &exp_Float16x3_arg };

/// exp with Float16x4
Variable exp_Float16x4_arg;
Function exp_Float16x4;
inline constexpr std::array exp_Float16x4_args = { &exp_Float16x4_arg };

/// exp2 with Float32
Variable exp2_Float32_arg;
Function exp2_Float32;
inline constexpr std::array exp2_Float32_args = { &exp2_Float32_arg };

/// exp2 with Float32x2
Variable exp2_Float32x2_arg;
Function exp2_Float32x2;
inline constexpr std::array exp2_Float32x2_args = { &exp2_Float32x2_arg };

/// exp2 with Float32x3
Variable exp2_Float32x3_arg;
Function exp2_Float32x3;
inline constexpr std::array exp2_Float32x3_args = { &exp2_Float32x3_arg };

/// exp2 with Float32x4
Variable exp2_Float32x4_arg;
Function exp2_Float32x4;
inline constexpr std::array exp2_Float32x4_args = { &exp2_Float32x4_arg };

/// exp2 with Float16
Variable exp2_Float16_arg;
Function exp2_Float16;
inline constexpr std::array exp2_Float16_args = { &exp2_Float16_arg };

/// exp2 with Float16x2
Variable exp2_Float16x2_arg;
Function exp2_Float16x2;
inline constexpr std::array exp2_Float16x2_args = { &exp2_Float16x2_arg };

/// exp2 with Float16x3
Variable exp2_Float16x3_arg;
Function exp2_Float16x3;
inline constexpr std::array exp2_Float16x3_args = { &exp2_Float16x3_arg };

/// exp2 with Float16x4
Variable exp2_Float16x4_arg;
Function exp2_Float16x4;
inline constexpr std::array exp2_Float16x4_args = { &exp2_Float16x4_arg };

/// invSqrt with Float32
Variable invSqrt_Float32_arg;
Function invSqrt_Float32;
inline constexpr std::array invSqrt_Float32_args = { &invSqrt_Float32_arg };

/// invSqrt with Float32x2
Variable invSqrt_Float32x2_arg;
Function invSqrt_Float32x2;
inline constexpr std::array invSqrt_Float32x2_args = { &invSqrt_Float32x2_arg };

/// invSqrt with Float32x3
Variable invSqrt_Float32x3_arg;
Function invSqrt_Float32x3;
inline constexpr std::array invSqrt_Float32x3_args = { &invSqrt_Float32x3_arg };

/// invSqrt with Float32x4
Variable invSqrt_Float32x4_arg;
Function invSqrt_Float32x4;
inline constexpr std::array invSqrt_Float32x4_args = { &invSqrt_Float32x4_arg };

/// invSqrt with Float16
Variable invSqrt_Float16_arg;
Function invSqrt_Float16;
inline constexpr std::array invSqrt_Float16_args = { &invSqrt_Float16_arg };

/// invSqrt with Float16x2
Variable invSqrt_Float16x2_arg;
Function invSqrt_Float16x2;
inline constexpr std::array invSqrt_Float16x2_args = { &invSqrt_Float16x2_arg };

/// invSqrt with Float16x3
Variable invSqrt_Float16x3_arg;
Function invSqrt_Float16x3;
inline constexpr std::array invSqrt_Float16x3_args = { &invSqrt_Float16x3_arg };

/// invSqrt with Float16x4
Variable invSqrt_Float16x4_arg;
Function invSqrt_Float16x4;
inline constexpr std::array invSqrt_Float16x4_args = { &invSqrt_Float16x4_arg };

/// log with Float32
Variable log_Float32_arg;
Function log_Float32;
inline constexpr std::array log_Float32_args = { &log_Float32_arg };

/// log with Float32x2
Variable log_Float32x2_arg;
Function log_Float32x2;
inline constexpr std::array log_Float32x2_args = { &log_Float32x2_arg };

/// log with Float32x3
Variable log_Float32x3_arg;
Function log_Float32x3;
inline constexpr std::array log_Float32x3_args = { &log_Float32x3_arg };

/// log with Float32x4
Variable log_Float32x4_arg;
Function log_Float32x4;
inline constexpr std::array log_Float32x4_args = { &log_Float32x4_arg };

/// log with Float16
Variable log_Float16_arg;
Function log_Float16;
inline constexpr std::array log_Float16_args = { &log_Float16_arg };

/// log with Float16x2
Variable log_Float16x2_arg;
Function log_Float16x2;
inline constexpr std::array log_Float16x2_args = { &log_Float16x2_arg };

/// log with Float16x3
Variable log_Float16x3_arg;
Function log_Float16x3;
inline constexpr std::array log_Float16x3_args = { &log_Float16x3_arg };

/// log with Float16x4
Variable log_Float16x4_arg;
Function log_Float16x4;
inline constexpr std::array log_Float16x4_args = { &log_Float16x4_arg };

/// log2 with Float32
Variable log2_Float32_arg;
Function log2_Float32;
inline constexpr std::array log2_Float32_args = { &log2_Float32_arg };

/// log2 with Float32x2
Variable log2_Float32x2_arg;
Function log2_Float32x2;
inline constexpr std::array log2_Float32x2_args = { &log2_Float32x2_arg };

/// log2 with Float32x3
Variable log2_Float32x3_arg;
Function log2_Float32x3;
inline constexpr std::array log2_Float32x3_args = { &log2_Float32x3_arg };

/// log2 with Float32x4
Variable log2_Float32x4_arg;
Function log2_Float32x4;
inline constexpr std::array log2_Float32x4_args = { &log2_Float32x4_arg };

/// log2 with Float16
Variable log2_Float16_arg;
Function log2_Float16;
inline constexpr std::array log2_Float16_args = { &log2_Float16_arg };

/// log2 with Float16x2
Variable log2_Float16x2_arg;
Function log2_Float16x2;
inline constexpr std::array log2_Float16x2_args = { &log2_Float16x2_arg };

/// log2 with Float16x3
Variable log2_Float16x3_arg;
Function log2_Float16x3;
inline constexpr std::array log2_Float16x3_args = { &log2_Float16x3_arg };

/// log2 with Float16x4
Variable log2_Float16x4_arg;
Function log2_Float16x4;
inline constexpr std::array log2_Float16x4_args = { &log2_Float16x4_arg };

/// sin with Float32
Variable sin_Float32_arg;
Function sin_Float32;
inline constexpr std::array sin_Float32_args = { &sin_Float32_arg };

/// sin with Float32x2
Variable sin_Float32x2_arg;
Function sin_Float32x2;
inline constexpr std::array sin_Float32x2_args = { &sin_Float32x2_arg };

/// sin with Float32x3
Variable sin_Float32x3_arg;
Function sin_Float32x3;
inline constexpr std::array sin_Float32x3_args = { &sin_Float32x3_arg };

/// sin with Float32x4
Variable sin_Float32x4_arg;
Function sin_Float32x4;
inline constexpr std::array sin_Float32x4_args = { &sin_Float32x4_arg };

/// sin with Float16
Variable sin_Float16_arg;
Function sin_Float16;
inline constexpr std::array sin_Float16_args = { &sin_Float16_arg };

/// sin with Float16x2
Variable sin_Float16x2_arg;
Function sin_Float16x2;
inline constexpr std::array sin_Float16x2_args = { &sin_Float16x2_arg };

/// sin with Float16x3
Variable sin_Float16x3_arg;
Function sin_Float16x3;
inline constexpr std::array sin_Float16x3_args = { &sin_Float16x3_arg };

/// sin with Float16x4
Variable sin_Float16x4_arg;
Function sin_Float16x4;
inline constexpr std::array sin_Float16x4_args = { &sin_Float16x4_arg };

/// sinh with Float32
Variable sinh_Float32_arg;
Function sinh_Float32;
inline constexpr std::array sinh_Float32_args = { &sinh_Float32_arg };

/// sinh with Float32x2
Variable sinh_Float32x2_arg;
Function sinh_Float32x2;
inline constexpr std::array sinh_Float32x2_args = { &sinh_Float32x2_arg };

/// sinh with Float32x3
Variable sinh_Float32x3_arg;
Function sinh_Float32x3;
inline constexpr std::array sinh_Float32x3_args = { &sinh_Float32x3_arg };

/// sinh with Float32x4
Variable sinh_Float32x4_arg;
Function sinh_Float32x4;
inline constexpr std::array sinh_Float32x4_args = { &sinh_Float32x4_arg };

/// sinh with Float16
Variable sinh_Float16_arg;
Function sinh_Float16;
inline constexpr std::array sinh_Float16_args = { &sinh_Float16_arg };

/// sinh with Float16x2
Variable sinh_Float16x2_arg;
Function sinh_Float16x2;
inline constexpr std::array sinh_Float16x2_args = { &sinh_Float16x2_arg };

/// sinh with Float16x3
Variable sinh_Float16x3_arg;
Function sinh_Float16x3;
inline constexpr std::array sinh_Float16x3_args = { &sinh_Float16x3_arg };

/// sinh with Float16x4
Variable sinh_Float16x4_arg;
Function sinh_Float16x4;
inline constexpr std::array sinh_Float16x4_args = { &sinh_Float16x4_arg };

/// sqrt with Float32
Variable sqrt_Float32_arg;
Function sqrt_Float32;
inline constexpr std::array sqrt_Float32_args = { &sqrt_Float32_arg };

/// sqrt with Float32x2
Variable sqrt_Float32x2_arg;
Function sqrt_Float32x2;
inline constexpr std::array sqrt_Float32x2_args = { &sqrt_Float32x2_arg };

/// sqrt with Float32x3
Variable sqrt_Float32x3_arg;
Function sqrt_Float32x3;
inline constexpr std::array sqrt_Float32x3_args = { &sqrt_Float32x3_arg };

/// sqrt with Float32x4
Variable sqrt_Float32x4_arg;
Function sqrt_Float32x4;
inline constexpr std::array sqrt_Float32x4_args = { &sqrt_Float32x4_arg };

/// sqrt with Float16
Variable sqrt_Float16_arg;
Function sqrt_Float16;
inline constexpr std::array sqrt_Float16_args = { &sqrt_Float16_arg };

/// sqrt with Float16x2
Variable sqrt_Float16x2_arg;
Function sqrt_Float16x2;
inline constexpr std::array sqrt_Float16x2_args = { &sqrt_Float16x2_arg };

/// sqrt with Float16x3
Variable sqrt_Float16x3_arg;
Function sqrt_Float16x3;
inline constexpr std::array sqrt_Float16x3_args = { &sqrt_Float16x3_arg };

/// sqrt with Float16x4
Variable sqrt_Float16x4_arg;
Function sqrt_Float16x4;
inline constexpr std::array sqrt_Float16x4_args = { &sqrt_Float16x4_arg };

/// tan with Float32
Variable tan_Float32_arg;
Function tan_Float32;
inline constexpr std::array tan_Float32_args = { &tan_Float32_arg };

/// tan with Float32x2
Variable tan_Float32x2_arg;
Function tan_Float32x2;
inline constexpr std::array tan_Float32x2_args = { &tan_Float32x2_arg };

/// tan with Float32x3
Variable tan_Float32x3_arg;
Function tan_Float32x3;
inline constexpr std::array tan_Float32x3_args = { &tan_Float32x3_arg };

/// tan with Float32x4
Variable tan_Float32x4_arg;
Function tan_Float32x4;
inline constexpr std::array tan_Float32x4_args = { &tan_Float32x4_arg };

/// tan with Float16
Variable tan_Float16_arg;
Function tan_Float16;
inline constexpr std::array tan_Float16_args = { &tan_Float16_arg };

/// tan with Float16x2
Variable tan_Float16x2_arg;
Function tan_Float16x2;
inline constexpr std::array tan_Float16x2_args = { &tan_Float16x2_arg };

/// tan with Float16x3
Variable tan_Float16x3_arg;
Function tan_Float16x3;
inline constexpr std::array tan_Float16x3_args = { &tan_Float16x3_arg };

/// tan with Float16x4
Variable tan_Float16x4_arg;
Function tan_Float16x4;
inline constexpr std::array tan_Float16x4_args = { &tan_Float16x4_arg };

/// tanh with Float32
Variable tanh_Float32_arg;
Function tanh_Float32;
inline constexpr std::array tanh_Float32_args = { &tanh_Float32_arg };

/// tanh with Float32x2
Variable tanh_Float32x2_arg;
Function tanh_Float32x2;
inline constexpr std::array tanh_Float32x2_args = { &tanh_Float32x2_arg };

/// tanh with Float32x3
Variable tanh_Float32x3_arg;
Function tanh_Float32x3;
inline constexpr std::array tanh_Float32x3_args = { &tanh_Float32x3_arg };

/// tanh with Float32x4
Variable tanh_Float32x4_arg;
Function tanh_Float32x4;
inline constexpr std::array tanh_Float32x4_args = { &tanh_Float32x4_arg };

/// tanh with Float16
Variable tanh_Float16_arg;
Function tanh_Float16;
inline constexpr std::array tanh_Float16_args = { &tanh_Float16_arg };

/// tanh with Float16x2
Variable tanh_Float16x2_arg;
Function tanh_Float16x2;
inline constexpr std::array tanh_Float16x2_args = { &tanh_Float16x2_arg };

/// tanh with Float16x3
Variable tanh_Float16x3_arg;
Function tanh_Float16x3;
inline constexpr std::array tanh_Float16x3_args = { &tanh_Float16x3_arg };

/// tanh with Float16x4
Variable tanh_Float16x4_arg;
Function tanh_Float16x4;
inline constexpr std::array tanh_Float16x4_args = { &tanh_Float16x4_arg };

/// tanh with Float32, Float32
Variable atan2_Float32_y;
Variable atan2_Float32_x;
Function atan2_Float32;
inline constexpr std::array atan2_Float32_args = { &atan2_Float32_y, &atan2_Float32_x };

/// tanh with Float32x2, Float32x2
Variable atan2_Float32x2_y;
Variable atan2_Float32x2_x;
Function atan2_Float32x2;
inline constexpr std::array atan2_Float32x2_args = { &atan2_Float32x2_y, &atan2_Float32x2_x };

/// tanh with Float32x3, Float32x3
Variable atan2_Float32x3_y;
Variable atan2_Float32x3_x;
Function atan2_Float32x3;
inline constexpr std::array atan2_Float32x3_args = { &atan2_Float32x3_y, &atan2_Float32x3_x };

/// tanh with Float32x4, Float32x4
Variable atan2_Float32x4_y;
Variable atan2_Float32x4_x;
Function atan2_Float32x4;
inline constexpr std::array atan2_Float32x4_args = { &atan2_Float32x4_y, &atan2_Float32x4_x };

/// tanh with Float16, Float16
Variable atan2_Float16_y;
Variable atan2_Float16_x;
Function atan2_Float16;
inline constexpr std::array atan2_Float16_args = { &atan2_Float16_y, &atan2_Float16_x };

/// tanh with Float16x2, Float16x2
Variable atan2_Float16x2_y;
Variable atan2_Float16x2_x;
Function atan2_Float16x2;
inline constexpr std::array atan2_Float16x2_args = { &atan2_Float16x2_y, &atan2_Float16x2_x };

/// tanh with Float16x3, Float16x3
Variable atan2_Float16x3_y;
Variable atan2_Float16x3_x;
Function atan2_Float16x3;
inline constexpr std::array atan2_Float16x3_args = { &atan2_Float16x3_y, &atan2_Float16x3_x };

/// tanh with Float16x4, Float16x4
Variable atan2_Float16x4_y;
Variable atan2_Float16x4_x;
Function atan2_Float16x4;
inline constexpr std::array atan2_Float16x4_args = { &atan2_Float16x4_y, &atan2_Float16x4_x };

/// pow with Float32, Float32
Variable pow_Float32_arg;
Variable pow_Float32_exp;
Function pow_Float32;
inline constexpr std::array pow_Float32_args = { &pow_Float32_arg, &pow_Float32_exp };

/// pow with Float32x2, Float32x2
Variable pow_Float32x2_arg;
Variable pow_Float32x2_exp;
Function pow_Float32x2;
inline constexpr std::array pow_Float32x2_args = { &pow_Float32x2_arg, &pow_Float32x2_exp };

/// pow with Float32x3, Float32x3
Variable pow_Float32x3_arg;
Variable pow_Float32x3_exp;
Function pow_Float32x3;
inline constexpr std::array pow_Float32x3_args = { &pow_Float32x3_arg, &pow_Float32x3_exp };

/// pow with Float32x4, Float32x4
Variable pow_Float32x4_arg;
Variable pow_Float32x4_exp;
Function pow_Float32x4;
inline constexpr std::array pow_Float32x4_args = { &pow_Float32x4_arg, &pow_Float32x4_exp };

/// pow with Float16, Float16
Variable pow_Float16_arg;
Variable pow_Float16_exp;
Function pow_Float16;
inline constexpr std::array pow_Float16_args = { &pow_Float16_arg, &pow_Float16_exp };

/// pow with Float16x2, Float16x2
Variable pow_Float16x2_arg;
Variable pow_Float16x2_exp;
Function pow_Float16x2;
inline constexpr std::array pow_Float16x2_args = { &pow_Float16x2_arg, &pow_Float16x2_exp };

/// pow with Float16x3, Float16x3
Variable pow_Float16x3_arg;
Variable pow_Float16x3_exp;
Function pow_Float16x3;
inline constexpr std::array pow_Float16x3_args = { &pow_Float16x3_arg, &pow_Float16x3_exp };

/// pow with Float16x4, Float16x4
Variable pow_Float16x4_arg;
Variable pow_Float16x4_exp;
Function pow_Float16x4;
inline constexpr std::array pow_Float16x4_args = { &pow_Float16x4_arg, &pow_Float16x4_exp };

/// mad with Float32, Float32, Float32
Variable mad_Float32_arg;
Variable mad_Float32_mul;
Variable mad_Float32_add;
Function mad_Float32;
inline constexpr std::array mad_Float32_args = { &mad_Float32_arg, &mad_Float32_mul, &mad_Float32_add };

/// mad with Float32x2, Float32x2, Float32x2
Variable mad_Float32x2_arg;
Variable mad_Float32x2_mul;
Variable mad_Float32x2_add;
Function mad_Float32x2;
inline constexpr std::array mad_Float32x2_args = { &mad_Float32x2_arg, &mad_Float32x2_mul, &mad_Float32x2_add };

/// mad with Float32x3, Float32x3, Float32x3
Variable mad_Float32x3_arg;
Variable mad_Float32x3_mul;
Variable mad_Float32x3_add;
Function mad_Float32x3;
inline constexpr std::array mad_Float32x3_args = { &mad_Float32x3_arg, &mad_Float32x3_mul, &mad_Float32x3_add };

/// mad with Float32x4, Float32x4, Float32x4
Variable mad_Float32x4_arg;
Variable mad_Float32x4_mul;
Variable mad_Float32x4_add;
Function mad_Float32x4;
inline constexpr std::array mad_Float32x4_args = { &mad_Float32x4_arg, &mad_Float32x4_mul, &mad_Float32x4_add };

/// mad with Float16, Float16, Float16
Variable mad_Float16_arg;
Variable mad_Float16_mul;
Variable mad_Float16_add;
Function mad_Float16;
inline constexpr std::array mad_Float16_args = { &mad_Float16_arg, &mad_Float16_mul, &mad_Float16_add };

/// mad with Float16x2, Float16x2, Float16x2
Variable mad_Float16x2_arg;
Variable mad_Float16x2_mul;
Variable mad_Float16x2_add;
Function mad_Float16x2;
inline constexpr std::array mad_Float16x2_args = { &mad_Float16x2_arg, &mad_Float16x2_mul, &mad_Float16x2_add };

/// mad with Float16x3, Float16x3, Float16x3
Variable mad_Float16x3_arg;
Variable mad_Float16x3_mul;
Variable mad_Float16x3_add;
Function mad_Float16x3;
inline constexpr std::array mad_Float16x3_args = { &mad_Float16x3_arg, &mad_Float16x3_mul, &mad_Float16x3_add };

/// mad with Float16x4, Float16x4, Float16x4
Variable mad_Float16x4_arg;
Variable mad_Float16x4_mul;
Variable mad_Float16x4_add;
Function mad_Float16x4;
inline constexpr std::array mad_Float16x4_args = { &mad_Float16x4_arg, &mad_Float16x4_mul, &mad_Float16x4_add };

/// mad with Int32, Int32, Int32
Variable mad_Int32_arg;
Variable mad_Int32_mul;
Variable mad_Int32_add;
Function mad_Int32;
inline constexpr std::array mad_Int32_args = { &mad_Int32_arg, &mad_Int32_mul, &mad_Int32_add };

/// mad with Int32x2, Int32x2, Int32x2
Variable mad_Int32x2_arg;
Variable mad_Int32x2_mul;
Variable mad_Int32x2_add;
Function mad_Int32x2;
inline constexpr std::array mad_Int32x2_args = { &mad_Int32x2_arg, &mad_Int32x2_mul, &mad_Int32x2_add };

/// mad with Int32x3, Int32x3, Int32x3
Variable mad_Int32x3_arg;
Variable mad_Int32x3_mul;
Variable mad_Int32x3_add;
Function mad_Int32x3;
inline constexpr std::array mad_Int32x3_args = { &mad_Int32x3_arg, &mad_Int32x3_mul, &mad_Int32x3_add };

/// mad with Int32x4, Int32x4, Int32x4
Variable mad_Int32x4_arg;
Variable mad_Int32x4_mul;
Variable mad_Int32x4_add;
Function mad_Int32x4;
inline constexpr std::array mad_Int32x4_args = { &mad_Int32x4_arg, &mad_Int32x4_mul, &mad_Int32x4_add };

/// mad with Int16, Int16, Int16
Variable mad_Int16_arg;
Variable mad_Int16_mul;
Variable mad_Int16_add;
Function mad_Int16;
inline constexpr std::array mad_Int16_args = { &mad_Int16_arg, &mad_Int16_mul, &mad_Int16_add };

/// mad with Int16x2, Int16x2, Int16x2
Variable mad_Int16x2_arg;
Variable mad_Int16x2_mul;
Variable mad_Int16x2_add;
Function mad_Int16x2;
inline constexpr std::array mad_Int16x2_args = { &mad_Int16x2_arg, &mad_Int16x2_mul, &mad_Int16x2_add };

/// mad with Int16x3, Int16x3, Int16x3
Variable mad_Int16x3_arg;
Variable mad_Int16x3_mul;
Variable mad_Int16x3_add;
Function mad_Int16x3;
inline constexpr std::array mad_Int16x3_args = { &mad_Int16x3_arg, &mad_Int16x3_mul, &mad_Int16x3_add };

/// mad with Int16x4, Int16x4, Int16x4
Variable mad_Int16x4_arg;
Variable mad_Int16x4_mul;
Variable mad_Int16x4_add;
Function mad_Int16x4;
inline constexpr std::array mad_Int16x4_args = { &mad_Int16x4_arg, &mad_Int16x4_mul, &mad_Int16x4_add };

/// mad with UInt32, UInt32, UInt32
Variable mad_UInt32_arg;
Variable mad_UInt32_mul;
Variable mad_UInt32_add;
Function mad_UInt32;
inline constexpr std::array mad_UInt32_args = { &mad_UInt32_arg, &mad_UInt32_mul, &mad_UInt32_add };

/// mad with UInt32x2, UInt32x2, UInt32x2
Variable mad_UInt32x2_arg;
Variable mad_UInt32x2_mul;
Variable mad_UInt32x2_add;
Function mad_UInt32x2;
inline constexpr std::array mad_UInt32x2_args = { &mad_UInt32x2_arg, &mad_UInt32x2_mul, &mad_UInt32x2_add };

/// mad with UInt32x3, UInt32x3, UInt32x3
Variable mad_UInt32x3_arg;
Variable mad_UInt32x3_mul;
Variable mad_UInt32x3_add;
Function mad_UInt32x3;
inline constexpr std::array mad_UInt32x3_args = { &mad_UInt32x3_arg, &mad_UInt32x3_mul, &mad_UInt32x3_add };

/// mad with UInt32x4, UInt32x4, UInt32x4
Variable mad_UInt32x4_arg;
Variable mad_UInt32x4_mul;
Variable mad_UInt32x4_add;
Function mad_UInt32x4;
inline constexpr std::array mad_UInt32x4_args = { &mad_UInt32x4_arg, &mad_UInt32x4_mul, &mad_UInt32x4_add };

/// mad with UInt16, UInt16, UInt16
Variable mad_UInt16_arg;
Variable mad_UInt16_mul;
Variable mad_UInt16_add;
Function mad_UInt16;
inline constexpr std::array mad_UInt16_args = { &mad_UInt16_arg, &mad_UInt16_mul, &mad_UInt16_add };

/// mad with UInt16x2, UInt16x2, UInt16x2
Variable mad_UInt16x2_arg;
Variable mad_UInt16x2_mul;
Variable mad_UInt16x2_add;
Function mad_UInt16x2;
inline constexpr std::array mad_UInt16x2_args = { &mad_UInt16x2_arg, &mad_UInt16x2_mul, &mad_UInt16x2_add };

/// mad with UInt16x3, UInt16x3, UInt16x3
Variable mad_UInt16x3_arg;
Variable mad_UInt16x3_mul;
Variable mad_UInt16x3_add;
Function mad_UInt16x3;
inline constexpr std::array mad_UInt16x3_args = { &mad_UInt16x3_arg, &mad_UInt16x3_mul, &mad_UInt16x3_add };

/// mad with UInt16x4, UInt16x4, UInt16x4
Variable mad_UInt16x4_arg;
Variable mad_UInt16x4_mul;
Variable mad_UInt16x4_add;
Function mad_UInt16x4;
inline constexpr std::array mad_UInt16x4_args = { &mad_UInt16x4_arg, &mad_UInt16x4_mul, &mad_UInt16x4_add };

/// dot with Float32x2, Float32x2
Variable dot_Float32x2_x;
Variable dot_Float32x2_y;
Function dot_Float32x2;
inline constexpr std::array dot_Float32x2_args = { &dot_Float32x2_x, &dot_Float32x2_y };

/// dot with Float32x3, Float32x3
Variable dot_Float32x3_x;
Variable dot_Float32x3_y;
Function dot_Float32x3;
inline constexpr std::array dot_Float32x3_args = { &dot_Float32x3_x, &dot_Float32x3_y };

/// dot with Float32x4, Float32x4
Variable dot_Float32x4_x;
Variable dot_Float32x4_y;
Function dot_Float32x4;
inline constexpr std::array dot_Float32x4_args = { &dot_Float32x4_x, &dot_Float32x4_y };

/// dot with Float16x2, Float16x2
Variable dot_Float16x2_x;
Variable dot_Float16x2_y;
Function dot_Float16x2;
inline constexpr std::array dot_Float16x2_args = { &dot_Float16x2_x, &dot_Float16x2_y };

/// dot with Float16x3, Float16x3
Variable dot_Float16x3_x;
Variable dot_Float16x3_y;
Function dot_Float16x3;
inline constexpr std::array dot_Float16x3_args = { &dot_Float16x3_x, &dot_Float16x3_y };

/// dot with Float16x4, Float16x4
Variable dot_Float16x4_x;
Variable dot_Float16x4_y;
Function dot_Float16x4;
inline constexpr std::array dot_Float16x4_args = { &dot_Float16x4_x, &dot_Float16x4_y };

/// reflect with Float32x2, Float32x2
Variable reflect_Float32x2_incident;
Variable reflect_Float32x2_normal;
Function reflect_Float32x2;
inline constexpr std::array reflect_Float32x2_args = { &reflect_Float32x2_incident, &reflect_Float32x2_normal };

/// reflect with Float32x3, Float32x3
Variable reflect_Float32x3_incident;
Variable reflect_Float32x3_normal;
Function reflect_Float32x3;
inline constexpr std::array reflect_Float32x3_args = { &reflect_Float32x3_incident, &reflect_Float32x3_normal };

/// reflect with Float32x4, Float32x4
Variable reflect_Float32x4_incident;
Variable reflect_Float32x4_normal;
Function reflect_Float32x4;
inline constexpr std::array reflect_Float32x4_args = { &reflect_Float32x4_incident, &reflect_Float32x4_normal };

/// reflect with Float16x2, Float16x2
Variable reflect_Float16x2_incident;
Variable reflect_Float16x2_normal;
Function reflect_Float16x2;
inline constexpr std::array reflect_Float16x2_args = { &reflect_Float16x2_incident, &reflect_Float16x2_normal };

/// reflect with Float16x3, Float16x3
Variable reflect_Float16x3_incident;
Variable reflect_Float16x3_normal;
Function reflect_Float16x3;
inline constexpr std::array reflect_Float16x3_args = { &reflect_Float16x3_incident, &reflect_Float16x3_normal };

/// reflect with Float16x4, Float16x4
Variable reflect_Float16x4_incident;
Variable reflect_Float16x4_normal;
Function reflect_Float16x4;
inline constexpr std::array reflect_Float16x4_args = { &reflect_Float16x4_incident, &reflect_Float16x4_normal };

/// refract with Float32x2, Float32x2, Float32x2
Variable refract_Float32x2_incident;
Variable refract_Float32x2_normal;
Variable refract_Float32x2_ior;
Function refract_Float32x2;
inline constexpr std::array refract_Float32x2_args = { &refract_Float32x2_incident, &refract_Float32x2_normal, &refract_Float32x2_ior };

/// refract with Float32x3, Float32x3, Float32x3
Variable refract_Float32x3_incident;
Variable refract_Float32x3_normal;
Variable refract_Float32x3_ior;
Function refract_Float32x3;
inline constexpr std::array refract_Float32x3_args = { &refract_Float32x3_incident, &refract_Float32x3_normal, &refract_Float32x3_ior };

/// refract with Float32x4, Float32x4, Float32x4
Variable refract_Float32x4_incident;
Variable refract_Float32x4_normal;
Variable refract_Float32x4_ior;
Function refract_Float32x4;
inline constexpr std::array refract_Float32x4_args = { &refract_Float32x4_incident, &refract_Float32x4_normal, &refract_Float32x4_ior };

/// refract with Float16x2, Float16x2, Float16x2
Variable refract_Float16x2_incident;
Variable refract_Float16x2_normal;
Variable refract_Float16x2_ior;
Function refract_Float16x2;
inline constexpr std::array refract_Float16x2_args = { &refract_Float16x2_incident, &refract_Float16x2_normal, &refract_Float16x2_ior };

/// refract with Float16x3, Float16x3, Float16x3
Variable refract_Float16x3_incident;
Variable refract_Float16x3_normal;
Variable refract_Float16x3_ior;
Function refract_Float16x3;
inline constexpr std::array refract_Float16x3_args = { &refract_Float16x3_incident, &refract_Float16x3_normal, &refract_Float16x3_ior };

/// refract with Float16x4, Float16x4, Float16x4
Variable refract_Float16x4_incident;
Variable refract_Float16x4_normal;
Variable refract_Float16x4_ior;
Function refract_Float16x4;
inline constexpr std::array refract_Float16x4_args = { &refract_Float16x4_incident, &refract_Float16x4_normal, &refract_Float16x4_ior };

/// cross with Float32x3, Float32x3
Variable cross_Float32x3_v0;
Variable cross_Float32x3_v1;
Function cross_Float32x3;
inline constexpr std::array cross_Float32x3_args = { &cross_Float32x3_v0, &cross_Float32x3_v1 };

/// cross with Float16x3, Float16x3
Variable cross_Float16x3_v0;
Variable cross_Float16x3_v1;
Function cross_Float16x3;
inline constexpr std::array cross_Float16x3_args = { &cross_Float16x3_v0, &cross_Float16x3_v1 };

/// cross with Float32x2
Variable length_Float32x2_arg;
Function length_Float32x2;
inline constexpr std::array length_Float32x2_args = { &length_Float32x2_arg };

/// cross with Float32x3
Variable length_Float32x3_arg;
Function length_Float32x3;
inline constexpr std::array length_Float32x3_args = { &length_Float32x3_arg };

/// cross with Float32x4
Variable length_Float32x4_arg;
Function length_Float32x4;
inline constexpr std::array length_Float32x4_args = { &length_Float32x4_arg };

/// cross with Float16x2
Variable length_Float16x2_arg;
Function length_Float16x2;
inline constexpr std::array length_Float16x2_args = { &length_Float16x2_arg };

/// cross with Float16x3
Variable length_Float16x3_arg;
Function length_Float16x3;
inline constexpr std::array length_Float16x3_args = { &length_Float16x3_arg };

/// cross with Float16x4
Variable length_Float16x4_arg;
Function length_Float16x4;
inline constexpr std::array length_Float16x4_args = { &length_Float16x4_arg };

/// cross with Float32x2
Variable normalize_Float32x2_arg;
Function normalize_Float32x2;
inline constexpr std::array normalize_Float32x2_args = { &normalize_Float32x2_arg };

/// cross with Float32x3
Variable normalize_Float32x3_arg;
Function normalize_Float32x3;
inline constexpr std::array normalize_Float32x3_args = { &normalize_Float32x3_arg };

/// cross with Float32x4
Variable normalize_Float32x4_arg;
Function normalize_Float32x4;
inline constexpr std::array normalize_Float32x4_args = { &normalize_Float32x4_arg };

/// cross with Float16x2
Variable normalize_Float16x2_arg;
Function normalize_Float16x2;
inline constexpr std::array normalize_Float16x2_args = { &normalize_Float16x2_arg };

/// cross with Float16x3
Variable normalize_Float16x3_arg;
Function normalize_Float16x3;
inline constexpr std::array normalize_Float16x3_args = { &normalize_Float16x3_arg };

/// cross with Float16x4
Variable normalize_Float16x4_arg;
Function normalize_Float16x4;
inline constexpr std::array normalize_Float16x4_args = { &normalize_Float16x4_arg };

/// distance with Float32x2, Float32x2
Variable distance_Float32x2_p0;
Variable distance_Float32x2_p1;
Function distance_Float32x2;
inline constexpr std::array distance_Float32x2_args = { &distance_Float32x2_p0, &distance_Float32x2_p1 };

/// distance with Float32x3, Float32x3
Variable distance_Float32x3_p0;
Variable distance_Float32x3_p1;
Function distance_Float32x3;
inline constexpr std::array distance_Float32x3_args = { &distance_Float32x3_p0, &distance_Float32x3_p1 };

/// distance with Float32x4, Float32x4
Variable distance_Float32x4_p0;
Variable distance_Float32x4_p1;
Function distance_Float32x4;
inline constexpr std::array distance_Float32x4_args = { &distance_Float32x4_p0, &distance_Float32x4_p1 };

/// distance with Float16x2, Float16x2
Variable distance_Float16x2_p0;
Variable distance_Float16x2_p1;
Function distance_Float16x2;
inline constexpr std::array distance_Float16x2_args = { &distance_Float16x2_p0, &distance_Float16x2_p1 };

/// distance with Float16x3, Float16x3
Variable distance_Float16x3_p0;
Variable distance_Float16x3_p1;
Function distance_Float16x3;
inline constexpr std::array distance_Float16x3_args = { &distance_Float16x3_p0, &distance_Float16x3_p1 };

/// distance with Float16x4, Float16x4
Variable distance_Float16x4_p0;
Variable distance_Float16x4_p1;
Function distance_Float16x4;
inline constexpr std::array distance_Float16x4_args = { &distance_Float16x4_p0, &distance_Float16x4_p1 };

/// min with Float32, Float32
Variable min_Float32_x;
Variable min_Float32_y;
Function min_Float32;
inline constexpr std::array min_Float32_args = { &min_Float32_x, &min_Float32_y };

/// min with Float32x2, Float32x2
Variable min_Float32x2_x;
Variable min_Float32x2_y;
Function min_Float32x2;
inline constexpr std::array min_Float32x2_args = { &min_Float32x2_x, &min_Float32x2_y };

/// min with Float32x3, Float32x3
Variable min_Float32x3_x;
Variable min_Float32x3_y;
Function min_Float32x3;
inline constexpr std::array min_Float32x3_args = { &min_Float32x3_x, &min_Float32x3_y };

/// min with Float32x4, Float32x4
Variable min_Float32x4_x;
Variable min_Float32x4_y;
Function min_Float32x4;
inline constexpr std::array min_Float32x4_args = { &min_Float32x4_x, &min_Float32x4_y };

/// min with Float16, Float16
Variable min_Float16_x;
Variable min_Float16_y;
Function min_Float16;
inline constexpr std::array min_Float16_args = { &min_Float16_x, &min_Float16_y };

/// min with Float16x2, Float16x2
Variable min_Float16x2_x;
Variable min_Float16x2_y;
Function min_Float16x2;
inline constexpr std::array min_Float16x2_args = { &min_Float16x2_x, &min_Float16x2_y };

/// min with Float16x3, Float16x3
Variable min_Float16x3_x;
Variable min_Float16x3_y;
Function min_Float16x3;
inline constexpr std::array min_Float16x3_args = { &min_Float16x3_x, &min_Float16x3_y };

/// min with Float16x4, Float16x4
Variable min_Float16x4_x;
Variable min_Float16x4_y;
Function min_Float16x4;
inline constexpr std::array min_Float16x4_args = { &min_Float16x4_x, &min_Float16x4_y };

/// min with Int32, Int32
Variable min_Int32_x;
Variable min_Int32_y;
Function min_Int32;
inline constexpr std::array min_Int32_args = { &min_Int32_x, &min_Int32_y };

/// min with Int32x2, Int32x2
Variable min_Int32x2_x;
Variable min_Int32x2_y;
Function min_Int32x2;
inline constexpr std::array min_Int32x2_args = { &min_Int32x2_x, &min_Int32x2_y };

/// min with Int32x3, Int32x3
Variable min_Int32x3_x;
Variable min_Int32x3_y;
Function min_Int32x3;
inline constexpr std::array min_Int32x3_args = { &min_Int32x3_x, &min_Int32x3_y };

/// min with Int32x4, Int32x4
Variable min_Int32x4_x;
Variable min_Int32x4_y;
Function min_Int32x4;
inline constexpr std::array min_Int32x4_args = { &min_Int32x4_x, &min_Int32x4_y };

/// min with Int16, Int16
Variable min_Int16_x;
Variable min_Int16_y;
Function min_Int16;
inline constexpr std::array min_Int16_args = { &min_Int16_x, &min_Int16_y };

/// min with Int16x2, Int16x2
Variable min_Int16x2_x;
Variable min_Int16x2_y;
Function min_Int16x2;
inline constexpr std::array min_Int16x2_args = { &min_Int16x2_x, &min_Int16x2_y };

/// min with Int16x3, Int16x3
Variable min_Int16x3_x;
Variable min_Int16x3_y;
Function min_Int16x3;
inline constexpr std::array min_Int16x3_args = { &min_Int16x3_x, &min_Int16x3_y };

/// min with Int16x4, Int16x4
Variable min_Int16x4_x;
Variable min_Int16x4_y;
Function min_Int16x4;
inline constexpr std::array min_Int16x4_args = { &min_Int16x4_x, &min_Int16x4_y };

/// min with UInt32, UInt32
Variable min_UInt32_x;
Variable min_UInt32_y;
Function min_UInt32;
inline constexpr std::array min_UInt32_args = { &min_UInt32_x, &min_UInt32_y };

/// min with UInt32x2, UInt32x2
Variable min_UInt32x2_x;
Variable min_UInt32x2_y;
Function min_UInt32x2;
inline constexpr std::array min_UInt32x2_args = { &min_UInt32x2_x, &min_UInt32x2_y };

/// min with UInt32x3, UInt32x3
Variable min_UInt32x3_x;
Variable min_UInt32x3_y;
Function min_UInt32x3;
inline constexpr std::array min_UInt32x3_args = { &min_UInt32x3_x, &min_UInt32x3_y };

/// min with UInt32x4, UInt32x4
Variable min_UInt32x4_x;
Variable min_UInt32x4_y;
Function min_UInt32x4;
inline constexpr std::array min_UInt32x4_args = { &min_UInt32x4_x, &min_UInt32x4_y };

/// min with UInt16, UInt16
Variable min_UInt16_x;
Variable min_UInt16_y;
Function min_UInt16;
inline constexpr std::array min_UInt16_args = { &min_UInt16_x, &min_UInt16_y };

/// min with UInt16x2, UInt16x2
Variable min_UInt16x2_x;
Variable min_UInt16x2_y;
Function min_UInt16x2;
inline constexpr std::array min_UInt16x2_args = { &min_UInt16x2_x, &min_UInt16x2_y };

/// min with UInt16x3, UInt16x3
Variable min_UInt16x3_x;
Variable min_UInt16x3_y;
Function min_UInt16x3;
inline constexpr std::array min_UInt16x3_args = { &min_UInt16x3_x, &min_UInt16x3_y };

/// min with UInt16x4, UInt16x4
Variable min_UInt16x4_x;
Variable min_UInt16x4_y;
Function min_UInt16x4;
inline constexpr std::array min_UInt16x4_args = { &min_UInt16x4_x, &min_UInt16x4_y };

/// max with Float32, Float32
Variable max_Float32_x;
Variable max_Float32_y;
Function max_Float32;
inline constexpr std::array max_Float32_args = { &max_Float32_x, &max_Float32_y };

/// max with Float32x2, Float32x2
Variable max_Float32x2_x;
Variable max_Float32x2_y;
Function max_Float32x2;
inline constexpr std::array max_Float32x2_args = { &max_Float32x2_x, &max_Float32x2_y };

/// max with Float32x3, Float32x3
Variable max_Float32x3_x;
Variable max_Float32x3_y;
Function max_Float32x3;
inline constexpr std::array max_Float32x3_args = { &max_Float32x3_x, &max_Float32x3_y };

/// max with Float32x4, Float32x4
Variable max_Float32x4_x;
Variable max_Float32x4_y;
Function max_Float32x4;
inline constexpr std::array max_Float32x4_args = { &max_Float32x4_x, &max_Float32x4_y };

/// max with Float16, Float16
Variable max_Float16_x;
Variable max_Float16_y;
Function max_Float16;
inline constexpr std::array max_Float16_args = { &max_Float16_x, &max_Float16_y };

/// max with Float16x2, Float16x2
Variable max_Float16x2_x;
Variable max_Float16x2_y;
Function max_Float16x2;
inline constexpr std::array max_Float16x2_args = { &max_Float16x2_x, &max_Float16x2_y };

/// max with Float16x3, Float16x3
Variable max_Float16x3_x;
Variable max_Float16x3_y;
Function max_Float16x3;
inline constexpr std::array max_Float16x3_args = { &max_Float16x3_x, &max_Float16x3_y };

/// max with Float16x4, Float16x4
Variable max_Float16x4_x;
Variable max_Float16x4_y;
Function max_Float16x4;
inline constexpr std::array max_Float16x4_args = { &max_Float16x4_x, &max_Float16x4_y };

/// max with Int32, Int32
Variable max_Int32_x;
Variable max_Int32_y;
Function max_Int32;
inline constexpr std::array max_Int32_args = { &max_Int32_x, &max_Int32_y };

/// max with Int32x2, Int32x2
Variable max_Int32x2_x;
Variable max_Int32x2_y;
Function max_Int32x2;
inline constexpr std::array max_Int32x2_args = { &max_Int32x2_x, &max_Int32x2_y };

/// max with Int32x3, Int32x3
Variable max_Int32x3_x;
Variable max_Int32x3_y;
Function max_Int32x3;
inline constexpr std::array max_Int32x3_args = { &max_Int32x3_x, &max_Int32x3_y };

/// max with Int32x4, Int32x4
Variable max_Int32x4_x;
Variable max_Int32x4_y;
Function max_Int32x4;
inline constexpr std::array max_Int32x4_args = { &max_Int32x4_x, &max_Int32x4_y };

/// max with Int16, Int16
Variable max_Int16_x;
Variable max_Int16_y;
Function max_Int16;
inline constexpr std::array max_Int16_args = { &max_Int16_x, &max_Int16_y };

/// max with Int16x2, Int16x2
Variable max_Int16x2_x;
Variable max_Int16x2_y;
Function max_Int16x2;
inline constexpr std::array max_Int16x2_args = { &max_Int16x2_x, &max_Int16x2_y };

/// max with Int16x3, Int16x3
Variable max_Int16x3_x;
Variable max_Int16x3_y;
Function max_Int16x3;
inline constexpr std::array max_Int16x3_args = { &max_Int16x3_x, &max_Int16x3_y };

/// max with Int16x4, Int16x4
Variable max_Int16x4_x;
Variable max_Int16x4_y;
Function max_Int16x4;
inline constexpr std::array max_Int16x4_args = { &max_Int16x4_x, &max_Int16x4_y };

/// max with UInt32, UInt32
Variable max_UInt32_x;
Variable max_UInt32_y;
Function max_UInt32;
inline constexpr std::array max_UInt32_args = { &max_UInt32_x, &max_UInt32_y };

/// max with UInt32x2, UInt32x2
Variable max_UInt32x2_x;
Variable max_UInt32x2_y;
Function max_UInt32x2;
inline constexpr std::array max_UInt32x2_args = { &max_UInt32x2_x, &max_UInt32x2_y };

/// max with UInt32x3, UInt32x3
Variable max_UInt32x3_x;
Variable max_UInt32x3_y;
Function max_UInt32x3;
inline constexpr std::array max_UInt32x3_args = { &max_UInt32x3_x, &max_UInt32x3_y };

/// max with UInt32x4, UInt32x4
Variable max_UInt32x4_x;
Variable max_UInt32x4_y;
Function max_UInt32x4;
inline constexpr std::array max_UInt32x4_args = { &max_UInt32x4_x, &max_UInt32x4_y };

/// max with UInt16, UInt16
Variable max_UInt16_x;
Variable max_UInt16_y;
Function max_UInt16;
inline constexpr std::array max_UInt16_args = { &max_UInt16_x, &max_UInt16_y };

/// max with UInt16x2, UInt16x2
Variable max_UInt16x2_x;
Variable max_UInt16x2_y;
Function max_UInt16x2;
inline constexpr std::array max_UInt16x2_args = { &max_UInt16x2_x, &max_UInt16x2_y };

/// max with UInt16x3, UInt16x3
Variable max_UInt16x3_x;
Variable max_UInt16x3_y;
Function max_UInt16x3;
inline constexpr std::array max_UInt16x3_args = { &max_UInt16x3_x, &max_UInt16x3_y };

/// max with UInt16x4, UInt16x4
Variable max_UInt16x4_x;
Variable max_UInt16x4_y;
Function max_UInt16x4;
inline constexpr std::array max_UInt16x4_args = { &max_UInt16x4_x, &max_UInt16x4_y };

/// clamp with Float32, Float32, Float32
Variable clamp_Float32_val;
Variable clamp_Float32_min;
Variable clamp_Float32_max;
Function clamp_Float32;
inline constexpr std::array clamp_Float32_args = { &clamp_Float32_val, &clamp_Float32_min, &clamp_Float32_max };

/// clamp with Float32x2, Float32x2, Float32x2
Variable clamp_Float32x2_val;
Variable clamp_Float32x2_min;
Variable clamp_Float32x2_max;
Function clamp_Float32x2;
inline constexpr std::array clamp_Float32x2_args = { &clamp_Float32x2_val, &clamp_Float32x2_min, &clamp_Float32x2_max };

/// clamp with Float32x3, Float32x3, Float32x3
Variable clamp_Float32x3_val;
Variable clamp_Float32x3_min;
Variable clamp_Float32x3_max;
Function clamp_Float32x3;
inline constexpr std::array clamp_Float32x3_args = { &clamp_Float32x3_val, &clamp_Float32x3_min, &clamp_Float32x3_max };

/// clamp with Float32x4, Float32x4, Float32x4
Variable clamp_Float32x4_val;
Variable clamp_Float32x4_min;
Variable clamp_Float32x4_max;
Function clamp_Float32x4;
inline constexpr std::array clamp_Float32x4_args = { &clamp_Float32x4_val, &clamp_Float32x4_min, &clamp_Float32x4_max };

/// clamp with Float16, Float16, Float16
Variable clamp_Float16_val;
Variable clamp_Float16_min;
Variable clamp_Float16_max;
Function clamp_Float16;
inline constexpr std::array clamp_Float16_args = { &clamp_Float16_val, &clamp_Float16_min, &clamp_Float16_max };

/// clamp with Float16x2, Float16x2, Float16x2
Variable clamp_Float16x2_val;
Variable clamp_Float16x2_min;
Variable clamp_Float16x2_max;
Function clamp_Float16x2;
inline constexpr std::array clamp_Float16x2_args = { &clamp_Float16x2_val, &clamp_Float16x2_min, &clamp_Float16x2_max };

/// clamp with Float16x3, Float16x3, Float16x3
Variable clamp_Float16x3_val;
Variable clamp_Float16x3_min;
Variable clamp_Float16x3_max;
Function clamp_Float16x3;
inline constexpr std::array clamp_Float16x3_args = { &clamp_Float16x3_val, &clamp_Float16x3_min, &clamp_Float16x3_max };

/// clamp with Float16x4, Float16x4, Float16x4
Variable clamp_Float16x4_val;
Variable clamp_Float16x4_min;
Variable clamp_Float16x4_max;
Function clamp_Float16x4;
inline constexpr std::array clamp_Float16x4_args = { &clamp_Float16x4_val, &clamp_Float16x4_min, &clamp_Float16x4_max };

/// clamp with Int32, Int32, Int32
Variable clamp_Int32_val;
Variable clamp_Int32_min;
Variable clamp_Int32_max;
Function clamp_Int32;
inline constexpr std::array clamp_Int32_args = { &clamp_Int32_val, &clamp_Int32_min, &clamp_Int32_max };

/// clamp with Int32x2, Int32x2, Int32x2
Variable clamp_Int32x2_val;
Variable clamp_Int32x2_min;
Variable clamp_Int32x2_max;
Function clamp_Int32x2;
inline constexpr std::array clamp_Int32x2_args = { &clamp_Int32x2_val, &clamp_Int32x2_min, &clamp_Int32x2_max };

/// clamp with Int32x3, Int32x3, Int32x3
Variable clamp_Int32x3_val;
Variable clamp_Int32x3_min;
Variable clamp_Int32x3_max;
Function clamp_Int32x3;
inline constexpr std::array clamp_Int32x3_args = { &clamp_Int32x3_val, &clamp_Int32x3_min, &clamp_Int32x3_max };

/// clamp with Int32x4, Int32x4, Int32x4
Variable clamp_Int32x4_val;
Variable clamp_Int32x4_min;
Variable clamp_Int32x4_max;
Function clamp_Int32x4;
inline constexpr std::array clamp_Int32x4_args = { &clamp_Int32x4_val, &clamp_Int32x4_min, &clamp_Int32x4_max };

/// clamp with Int16, Int16, Int16
Variable clamp_Int16_val;
Variable clamp_Int16_min;
Variable clamp_Int16_max;
Function clamp_Int16;
inline constexpr std::array clamp_Int16_args = { &clamp_Int16_val, &clamp_Int16_min, &clamp_Int16_max };

/// clamp with Int16x2, Int16x2, Int16x2
Variable clamp_Int16x2_val;
Variable clamp_Int16x2_min;
Variable clamp_Int16x2_max;
Function clamp_Int16x2;
inline constexpr std::array clamp_Int16x2_args = { &clamp_Int16x2_val, &clamp_Int16x2_min, &clamp_Int16x2_max };

/// clamp with Int16x3, Int16x3, Int16x3
Variable clamp_Int16x3_val;
Variable clamp_Int16x3_min;
Variable clamp_Int16x3_max;
Function clamp_Int16x3;
inline constexpr std::array clamp_Int16x3_args = { &clamp_Int16x3_val, &clamp_Int16x3_min, &clamp_Int16x3_max };

/// clamp with Int16x4, Int16x4, Int16x4
Variable clamp_Int16x4_val;
Variable clamp_Int16x4_min;
Variable clamp_Int16x4_max;
Function clamp_Int16x4;
inline constexpr std::array clamp_Int16x4_args = { &clamp_Int16x4_val, &clamp_Int16x4_min, &clamp_Int16x4_max };

/// clamp with UInt32, UInt32, UInt32
Variable clamp_UInt32_val;
Variable clamp_UInt32_min;
Variable clamp_UInt32_max;
Function clamp_UInt32;
inline constexpr std::array clamp_UInt32_args = { &clamp_UInt32_val, &clamp_UInt32_min, &clamp_UInt32_max };

/// clamp with UInt32x2, UInt32x2, UInt32x2
Variable clamp_UInt32x2_val;
Variable clamp_UInt32x2_min;
Variable clamp_UInt32x2_max;
Function clamp_UInt32x2;
inline constexpr std::array clamp_UInt32x2_args = { &clamp_UInt32x2_val, &clamp_UInt32x2_min, &clamp_UInt32x2_max };

/// clamp with UInt32x3, UInt32x3, UInt32x3
Variable clamp_UInt32x3_val;
Variable clamp_UInt32x3_min;
Variable clamp_UInt32x3_max;
Function clamp_UInt32x3;
inline constexpr std::array clamp_UInt32x3_args = { &clamp_UInt32x3_val, &clamp_UInt32x3_min, &clamp_UInt32x3_max };

/// clamp with UInt32x4, UInt32x4, UInt32x4
Variable clamp_UInt32x4_val;
Variable clamp_UInt32x4_min;
Variable clamp_UInt32x4_max;
Function clamp_UInt32x4;
inline constexpr std::array clamp_UInt32x4_args = { &clamp_UInt32x4_val, &clamp_UInt32x4_min, &clamp_UInt32x4_max };

/// clamp with UInt16, UInt16, UInt16
Variable clamp_UInt16_val;
Variable clamp_UInt16_min;
Variable clamp_UInt16_max;
Function clamp_UInt16;
inline constexpr std::array clamp_UInt16_args = { &clamp_UInt16_val, &clamp_UInt16_min, &clamp_UInt16_max };

/// clamp with UInt16x2, UInt16x2, UInt16x2
Variable clamp_UInt16x2_val;
Variable clamp_UInt16x2_min;
Variable clamp_UInt16x2_max;
Function clamp_UInt16x2;
inline constexpr std::array clamp_UInt16x2_args = { &clamp_UInt16x2_val, &clamp_UInt16x2_min, &clamp_UInt16x2_max };

/// clamp with UInt16x3, UInt16x3, UInt16x3
Variable clamp_UInt16x3_val;
Variable clamp_UInt16x3_min;
Variable clamp_UInt16x3_max;
Function clamp_UInt16x3;
inline constexpr std::array clamp_UInt16x3_args = { &clamp_UInt16x3_val, &clamp_UInt16x3_min, &clamp_UInt16x3_max };

/// clamp with UInt16x4, UInt16x4, UInt16x4
Variable clamp_UInt16x4_val;
Variable clamp_UInt16x4_min;
Variable clamp_UInt16x4_max;
Function clamp_UInt16x4;
inline constexpr std::array clamp_UInt16x4_args = { &clamp_UInt16x4_val, &clamp_UInt16x4_min, &clamp_UInt16x4_max };

/// lerp with Float32x2, Float32x2, Float32x2
Variable lerp_Float32x2_a;
Variable lerp_Float32x2_b;
Variable lerp_Float32x2_t;
Function lerp_Float32x2;
inline constexpr std::array lerp_Float32x2_args = { &lerp_Float32x2_a, &lerp_Float32x2_b, &lerp_Float32x2_t };

/// lerp with Float32x3, Float32x3, Float32x3
Variable lerp_Float32x3_a;
Variable lerp_Float32x3_b;
Variable lerp_Float32x3_t;
Function lerp_Float32x3;
inline constexpr std::array lerp_Float32x3_args = { &lerp_Float32x3_a, &lerp_Float32x3_b, &lerp_Float32x3_t };

/// lerp with Float32x4, Float32x4, Float32x4
Variable lerp_Float32x4_a;
Variable lerp_Float32x4_b;
Variable lerp_Float32x4_t;
Function lerp_Float32x4;
inline constexpr std::array lerp_Float32x4_args = { &lerp_Float32x4_a, &lerp_Float32x4_b, &lerp_Float32x4_t };

/// lerp with Float16x2, Float16x2, Float16x2
Variable lerp_Float16x2_a;
Variable lerp_Float16x2_b;
Variable lerp_Float16x2_t;
Function lerp_Float16x2;
inline constexpr std::array lerp_Float16x2_args = { &lerp_Float16x2_a, &lerp_Float16x2_b, &lerp_Float16x2_t };

/// lerp with Float16x3, Float16x3, Float16x3
Variable lerp_Float16x3_a;
Variable lerp_Float16x3_b;
Variable lerp_Float16x3_t;
Function lerp_Float16x3;
inline constexpr std::array lerp_Float16x3_args = { &lerp_Float16x3_a, &lerp_Float16x3_b, &lerp_Float16x3_t };

/// lerp with Float16x4, Float16x4, Float16x4
Variable lerp_Float16x4_a;
Variable lerp_Float16x4_b;
Variable lerp_Float16x4_t;
Function lerp_Float16x4;
inline constexpr std::array lerp_Float16x4_args = { &lerp_Float16x4_a, &lerp_Float16x4_b, &lerp_Float16x4_t };

/// step with Float32, Float32
Variable step_Float32_edge;
Variable step_Float32_x;
Function step_Float32;
inline constexpr std::array step_Float32_args = { &step_Float32_edge, &step_Float32_x };

/// step with Float32x2, Float32x2
Variable step_Float32x2_edge;
Variable step_Float32x2_x;
Function step_Float32x2;
inline constexpr std::array step_Float32x2_args = { &step_Float32x2_edge, &step_Float32x2_x };

/// step with Float32x3, Float32x3
Variable step_Float32x3_edge;
Variable step_Float32x3_x;
Function step_Float32x3;
inline constexpr std::array step_Float32x3_args = { &step_Float32x3_edge, &step_Float32x3_x };

/// step with Float32x4, Float32x4
Variable step_Float32x4_edge;
Variable step_Float32x4_x;
Function step_Float32x4;
inline constexpr std::array step_Float32x4_args = { &step_Float32x4_edge, &step_Float32x4_x };

/// step with Float16, Float16
Variable step_Float16_edge;
Variable step_Float16_x;
Function step_Float16;
inline constexpr std::array step_Float16_args = { &step_Float16_edge, &step_Float16_x };

/// step with Float16x2, Float16x2
Variable step_Float16x2_edge;
Variable step_Float16x2_x;
Function step_Float16x2;
inline constexpr std::array step_Float16x2_args = { &step_Float16x2_edge, &step_Float16x2_x };

/// step with Float16x3, Float16x3
Variable step_Float16x3_edge;
Variable step_Float16x3_x;
Function step_Float16x3;
inline constexpr std::array step_Float16x3_args = { &step_Float16x3_edge, &step_Float16x3_x };

/// step with Float16x4, Float16x4
Variable step_Float16x4_edge;
Variable step_Float16x4_x;
Function step_Float16x4;
inline constexpr std::array step_Float16x4_args = { &step_Float16x4_edge, &step_Float16x4_x };

/// smoothstep with Float32, Float32, Float32
Variable smoothstep_Float32_edge0;
Variable smoothstep_Float32_edge1;
Variable smoothstep_Float32_x;
Function smoothstep_Float32;
inline constexpr std::array smoothstep_Float32_args = { &smoothstep_Float32_edge0, &smoothstep_Float32_edge1, &smoothstep_Float32_x };

/// smoothstep with Float32x2, Float32x2, Float32x2
Variable smoothstep_Float32x2_edge0;
Variable smoothstep_Float32x2_edge1;
Variable smoothstep_Float32x2_x;
Function smoothstep_Float32x2;
inline constexpr std::array smoothstep_Float32x2_args = { &smoothstep_Float32x2_edge0, &smoothstep_Float32x2_edge1, &smoothstep_Float32x2_x };

/// smoothstep with Float32x3, Float32x3, Float32x3
Variable smoothstep_Float32x3_edge0;
Variable smoothstep_Float32x3_edge1;
Variable smoothstep_Float32x3_x;
Function smoothstep_Float32x3;
inline constexpr std::array smoothstep_Float32x3_args = { &smoothstep_Float32x3_edge0, &smoothstep_Float32x3_edge1, &smoothstep_Float32x3_x };

/// smoothstep with Float32x4, Float32x4, Float32x4
Variable smoothstep_Float32x4_edge0;
Variable smoothstep_Float32x4_edge1;
Variable smoothstep_Float32x4_x;
Function smoothstep_Float32x4;
inline constexpr std::array smoothstep_Float32x4_args = { &smoothstep_Float32x4_edge0, &smoothstep_Float32x4_edge1, &smoothstep_Float32x4_x };

/// smoothstep with Float16, Float16, Float16
Variable smoothstep_Float16_edge0;
Variable smoothstep_Float16_edge1;
Variable smoothstep_Float16_x;
Function smoothstep_Float16;
inline constexpr std::array smoothstep_Float16_args = { &smoothstep_Float16_edge0, &smoothstep_Float16_edge1, &smoothstep_Float16_x };

/// smoothstep with Float16x2, Float16x2, Float16x2
Variable smoothstep_Float16x2_edge0;
Variable smoothstep_Float16x2_edge1;
Variable smoothstep_Float16x2_x;
Function smoothstep_Float16x2;
inline constexpr std::array smoothstep_Float16x2_args = { &smoothstep_Float16x2_edge0, &smoothstep_Float16x2_edge1, &smoothstep_Float16x2_x };

/// smoothstep with Float16x3, Float16x3, Float16x3
Variable smoothstep_Float16x3_edge0;
Variable smoothstep_Float16x3_edge1;
Variable smoothstep_Float16x3_x;
Function smoothstep_Float16x3;
inline constexpr std::array smoothstep_Float16x3_args = { &smoothstep_Float16x3_edge0, &smoothstep_Float16x3_edge1, &smoothstep_Float16x3_x };

/// smoothstep with Float16x4, Float16x4, Float16x4
Variable smoothstep_Float16x4_edge0;
Variable smoothstep_Float16x4_edge1;
Variable smoothstep_Float16x4_x;
Function smoothstep_Float16x4;
inline constexpr std::array smoothstep_Float16x4_args = { &smoothstep_Float16x4_edge0, &smoothstep_Float16x4_edge1, &smoothstep_Float16x4_x };

/// ceil with Float32
Variable ceil_Float32_arg;
Function ceil_Float32;
inline constexpr std::array ceil_Float32_args = { &ceil_Float32_arg };

/// ceil with Float32x2
Variable ceil_Float32x2_arg;
Function ceil_Float32x2;
inline constexpr std::array ceil_Float32x2_args = { &ceil_Float32x2_arg };

/// ceil with Float32x3
Variable ceil_Float32x3_arg;
Function ceil_Float32x3;
inline constexpr std::array ceil_Float32x3_args = { &ceil_Float32x3_arg };

/// ceil with Float32x4
Variable ceil_Float32x4_arg;
Function ceil_Float32x4;
inline constexpr std::array ceil_Float32x4_args = { &ceil_Float32x4_arg };

/// ceil with Float16
Variable ceil_Float16_arg;
Function ceil_Float16;
inline constexpr std::array ceil_Float16_args = { &ceil_Float16_arg };

/// ceil with Float16x2
Variable ceil_Float16x2_arg;
Function ceil_Float16x2;
inline constexpr std::array ceil_Float16x2_args = { &ceil_Float16x2_arg };

/// ceil with Float16x3
Variable ceil_Float16x3_arg;
Function ceil_Float16x3;
inline constexpr std::array ceil_Float16x3_args = { &ceil_Float16x3_arg };

/// ceil with Float16x4
Variable ceil_Float16x4_arg;
Function ceil_Float16x4;
inline constexpr std::array ceil_Float16x4_args = { &ceil_Float16x4_arg };

/// floor with Float32
Variable floor_Float32_arg;
Function floor_Float32;
inline constexpr std::array floor_Float32_args = { &floor_Float32_arg };

/// floor with Float32x2
Variable floor_Float32x2_arg;
Function floor_Float32x2;
inline constexpr std::array floor_Float32x2_args = { &floor_Float32x2_arg };

/// floor with Float32x3
Variable floor_Float32x3_arg;
Function floor_Float32x3;
inline constexpr std::array floor_Float32x3_args = { &floor_Float32x3_arg };

/// floor with Float32x4
Variable floor_Float32x4_arg;
Function floor_Float32x4;
inline constexpr std::array floor_Float32x4_args = { &floor_Float32x4_arg };

/// floor with Float16
Variable floor_Float16_arg;
Function floor_Float16;
inline constexpr std::array floor_Float16_args = { &floor_Float16_arg };

/// floor with Float16x2
Variable floor_Float16x2_arg;
Function floor_Float16x2;
inline constexpr std::array floor_Float16x2_args = { &floor_Float16x2_arg };

/// floor with Float16x3
Variable floor_Float16x3_arg;
Function floor_Float16x3;
inline constexpr std::array floor_Float16x3_args = { &floor_Float16x3_arg };

/// floor with Float16x4
Variable floor_Float16x4_arg;
Function floor_Float16x4;
inline constexpr std::array floor_Float16x4_args = { &floor_Float16x4_arg };

/// fract with Float32
Variable fract_Float32_arg;
Function fract_Float32;
inline constexpr std::array fract_Float32_args = { &fract_Float32_arg };

/// fract with Float32x2
Variable fract_Float32x2_arg;
Function fract_Float32x2;
inline constexpr std::array fract_Float32x2_args = { &fract_Float32x2_arg };

/// fract with Float32x3
Variable fract_Float32x3_arg;
Function fract_Float32x3;
inline constexpr std::array fract_Float32x3_args = { &fract_Float32x3_arg };

/// fract with Float32x4
Variable fract_Float32x4_arg;
Function fract_Float32x4;
inline constexpr std::array fract_Float32x4_args = { &fract_Float32x4_arg };

/// fract with Float16
Variable fract_Float16_arg;
Function fract_Float16;
inline constexpr std::array fract_Float16_args = { &fract_Float16_arg };

/// fract with Float16x2
Variable fract_Float16x2_arg;
Function fract_Float16x2;
inline constexpr std::array fract_Float16x2_args = { &fract_Float16x2_arg };

/// fract with Float16x3
Variable fract_Float16x3_arg;
Function fract_Float16x3;
inline constexpr std::array fract_Float16x3_args = { &fract_Float16x3_arg };

/// fract with Float16x4
Variable fract_Float16x4_arg;
Function fract_Float16x4;
inline constexpr std::array fract_Float16x4_args = { &fract_Float16x4_arg };

/// saturate with Float32
Variable saturate_Float32_arg;
Function saturate_Float32;
inline constexpr std::array saturate_Float32_args = { &saturate_Float32_arg };

/// saturate with Float32x2
Variable saturate_Float32x2_arg;
Function saturate_Float32x2;
inline constexpr std::array saturate_Float32x2_args = { &saturate_Float32x2_arg };

/// saturate with Float32x3
Variable saturate_Float32x3_arg;
Function saturate_Float32x3;
inline constexpr std::array saturate_Float32x3_args = { &saturate_Float32x3_arg };

/// saturate with Float32x4
Variable saturate_Float32x4_arg;
Function saturate_Float32x4;
inline constexpr std::array saturate_Float32x4_args = { &saturate_Float32x4_arg };

/// saturate with Float16
Variable saturate_Float16_arg;
Function saturate_Float16;
inline constexpr std::array saturate_Float16_args = { &saturate_Float16_arg };

/// saturate with Float16x2
Variable saturate_Float16x2_arg;
Function saturate_Float16x2;
inline constexpr std::array saturate_Float16x2_args = { &saturate_Float16x2_arg };

/// saturate with Float16x3
Variable saturate_Float16x3_arg;
Function saturate_Float16x3;
inline constexpr std::array saturate_Float16x3_args = { &saturate_Float16x3_arg };

/// saturate with Float16x4
Variable saturate_Float16x4_arg;
Function saturate_Float16x4;
inline constexpr std::array saturate_Float16x4_args = { &saturate_Float16x4_arg };

/// trunc with Float32
Variable trunc_Float32_arg;
Function trunc_Float32;
inline constexpr std::array trunc_Float32_args = { &trunc_Float32_arg };

/// trunc with Float32x2
Variable trunc_Float32x2_arg;
Function trunc_Float32x2;
inline constexpr std::array trunc_Float32x2_args = { &trunc_Float32x2_arg };

/// trunc with Float32x3
Variable trunc_Float32x3_arg;
Function trunc_Float32x3;
inline constexpr std::array trunc_Float32x3_args = { &trunc_Float32x3_arg };

/// trunc with Float32x4
Variable trunc_Float32x4_arg;
Function trunc_Float32x4;
inline constexpr std::array trunc_Float32x4_args = { &trunc_Float32x4_arg };

/// trunc with Float16
Variable trunc_Float16_arg;
Function trunc_Float16;
inline constexpr std::array trunc_Float16_args = { &trunc_Float16_arg };

/// trunc with Float16x2
Variable trunc_Float16x2_arg;
Function trunc_Float16x2;
inline constexpr std::array trunc_Float16x2_args = { &trunc_Float16x2_arg };

/// trunc with Float16x3
Variable trunc_Float16x3_arg;
Function trunc_Float16x3;
inline constexpr std::array trunc_Float16x3_args = { &trunc_Float16x3_arg };

/// trunc with Float16x4
Variable trunc_Float16x4_arg;
Function trunc_Float16x4;
inline constexpr std::array trunc_Float16x4_args = { &trunc_Float16x4_arg };

/// ddx with Float32
Variable ddx_Float32_arg;
Function ddx_Float32;
inline constexpr std::array ddx_Float32_args = { &ddx_Float32_arg };

/// ddx with Float32x2
Variable ddx_Float32x2_arg;
Function ddx_Float32x2;
inline constexpr std::array ddx_Float32x2_args = { &ddx_Float32x2_arg };

/// ddx with Float32x3
Variable ddx_Float32x3_arg;
Function ddx_Float32x3;
inline constexpr std::array ddx_Float32x3_args = { &ddx_Float32x3_arg };

/// ddx with Float32x4
Variable ddx_Float32x4_arg;
Function ddx_Float32x4;
inline constexpr std::array ddx_Float32x4_args = { &ddx_Float32x4_arg };

/// ddx with Float16
Variable ddx_Float16_arg;
Function ddx_Float16;
inline constexpr std::array ddx_Float16_args = { &ddx_Float16_arg };

/// ddx with Float16x2
Variable ddx_Float16x2_arg;
Function ddx_Float16x2;
inline constexpr std::array ddx_Float16x2_args = { &ddx_Float16x2_arg };

/// ddx with Float16x3
Variable ddx_Float16x3_arg;
Function ddx_Float16x3;
inline constexpr std::array ddx_Float16x3_args = { &ddx_Float16x3_arg };

/// ddx with Float16x4
Variable ddx_Float16x4_arg;
Function ddx_Float16x4;
inline constexpr std::array ddx_Float16x4_args = { &ddx_Float16x4_arg };

/// ddy with Float32
Variable ddy_Float32_arg;
Function ddy_Float32;
inline constexpr std::array ddy_Float32_args = { &ddy_Float32_arg };

/// ddy with Float32x2
Variable ddy_Float32x2_arg;
Function ddy_Float32x2;
inline constexpr std::array ddy_Float32x2_args = { &ddy_Float32x2_arg };

/// ddy with Float32x3
Variable ddy_Float32x3_arg;
Function ddy_Float32x3;
inline constexpr std::array ddy_Float32x3_args = { &ddy_Float32x3_arg };

/// ddy with Float32x4
Variable ddy_Float32x4_arg;
Function ddy_Float32x4;
inline constexpr std::array ddy_Float32x4_args = { &ddy_Float32x4_arg };

/// ddy with Float16
Variable ddy_Float16_arg;
Function ddy_Float16;
inline constexpr std::array ddy_Float16_args = { &ddy_Float16_arg };

/// ddy with Float16x2
Variable ddy_Float16x2_arg;
Function ddy_Float16x2;
inline constexpr std::array ddy_Float16x2_args = { &ddy_Float16x2_arg };

/// ddy with Float16x3
Variable ddy_Float16x3_arg;
Function ddy_Float16x3;
inline constexpr std::array ddy_Float16x3_args = { &ddy_Float16x3_arg };

/// ddy with Float16x4
Variable ddy_Float16x4_arg;
Function ddy_Float16x4;
inline constexpr std::array ddy_Float16x4_args = { &ddy_Float16x4_arg };

/// fwidth with Float32
Variable fwidth_Float32_arg;
Function fwidth_Float32;
inline constexpr std::array fwidth_Float32_args = { &fwidth_Float32_arg };

/// fwidth with Float32x2
Variable fwidth_Float32x2_arg;
Function fwidth_Float32x2;
inline constexpr std::array fwidth_Float32x2_args = { &fwidth_Float32x2_arg };

/// fwidth with Float32x3
Variable fwidth_Float32x3_arg;
Function fwidth_Float32x3;
inline constexpr std::array fwidth_Float32x3_args = { &fwidth_Float32x3_arg };

/// fwidth with Float32x4
Variable fwidth_Float32x4_arg;
Function fwidth_Float32x4;
inline constexpr std::array fwidth_Float32x4_args = { &fwidth_Float32x4_arg };

/// fwidth with Float16
Variable fwidth_Float16_arg;
Function fwidth_Float16;
inline constexpr std::array fwidth_Float16_args = { &fwidth_Float16_arg };

/// fwidth with Float16x2
Variable fwidth_Float16x2_arg;
Function fwidth_Float16x2;
inline constexpr std::array fwidth_Float16x2_args = { &fwidth_Float16x2_arg };

/// fwidth with Float16x3
Variable fwidth_Float16x3_arg;
Function fwidth_Float16x3;
inline constexpr std::array fwidth_Float16x3_args = { &fwidth_Float16x3_arg };

/// fwidth with Float16x4
Variable fwidth_Float16x4_arg;
Function fwidth_Float16x4;
inline constexpr std::array fwidth_Float16x4_args = { &fwidth_Float16x4_arg };

/// sign with Int32
Variable sign_Int32_arg;
Function sign_Int32;
inline constexpr std::array sign_Int32_args = { &sign_Int32_arg };

/// sign with Int32x2
Variable sign_Int32x2_arg;
Function sign_Int32x2;
inline constexpr std::array sign_Int32x2_args = { &sign_Int32x2_arg };

/// sign with Int32x3
Variable sign_Int32x3_arg;
Function sign_Int32x3;
inline constexpr std::array sign_Int32x3_args = { &sign_Int32x3_arg };

/// sign with Int32x4
Variable sign_Int32x4_arg;
Function sign_Int32x4;
inline constexpr std::array sign_Int32x4_args = { &sign_Int32x4_arg };

/// sign with Int16
Variable sign_Int16_arg;
Function sign_Int16;
inline constexpr std::array sign_Int16_args = { &sign_Int16_arg };

/// sign with Int16x2
Variable sign_Int16x2_arg;
Function sign_Int16x2;
inline constexpr std::array sign_Int16x2_args = { &sign_Int16x2_arg };

/// sign with Int16x3
Variable sign_Int16x3_arg;
Function sign_Int16x3;
inline constexpr std::array sign_Int16x3_args = { &sign_Int16x3_arg };

/// sign with Int16x4
Variable sign_Int16x4_arg;
Function sign_Int16x4;
inline constexpr std::array sign_Int16x4_args = { &sign_Int16x4_arg };

/// sign with Float32
Variable sign_Float32_arg;
Function sign_Float32;
inline constexpr std::array sign_Float32_args = { &sign_Float32_arg };

/// sign with Float32x2
Variable sign_Float32x2_arg;
Function sign_Float32x2;
inline constexpr std::array sign_Float32x2_args = { &sign_Float32x2_arg };

/// sign with Float32x3
Variable sign_Float32x3_arg;
Function sign_Float32x3;
inline constexpr std::array sign_Float32x3_args = { &sign_Float32x3_arg };

/// sign with Float32x4
Variable sign_Float32x4_arg;
Function sign_Float32x4;
inline constexpr std::array sign_Float32x4_args = { &sign_Float32x4_arg };

/// sign with Float16
Variable sign_Float16_arg;
Function sign_Float16;
inline constexpr std::array sign_Float16_args = { &sign_Float16_arg };

/// sign with Float16x2
Variable sign_Float16x2_arg;
Function sign_Float16x2;
inline constexpr std::array sign_Float16x2_args = { &sign_Float16x2_arg };

/// sign with Float16x3
Variable sign_Float16x3_arg;
Function sign_Float16x3;
inline constexpr std::array sign_Float16x3_args = { &sign_Float16x3_arg };

/// sign with Float16x4
Variable sign_Float16x4_arg;
Function sign_Float16x4;
inline constexpr std::array sign_Float16x4_args = { &sign_Float16x4_arg };

/// abs with Int32
Variable abs_Int32_arg;
Function abs_Int32;
inline constexpr std::array abs_Int32_args = { &abs_Int32_arg };

/// abs with Int32x2
Variable abs_Int32x2_arg;
Function abs_Int32x2;
inline constexpr std::array abs_Int32x2_args = { &abs_Int32x2_arg };

/// abs with Int32x3
Variable abs_Int32x3_arg;
Function abs_Int32x3;
inline constexpr std::array abs_Int32x3_args = { &abs_Int32x3_arg };

/// abs with Int32x4
Variable abs_Int32x4_arg;
Function abs_Int32x4;
inline constexpr std::array abs_Int32x4_args = { &abs_Int32x4_arg };

/// abs with Int16
Variable abs_Int16_arg;
Function abs_Int16;
inline constexpr std::array abs_Int16_args = { &abs_Int16_arg };

/// abs with Int16x2
Variable abs_Int16x2_arg;
Function abs_Int16x2;
inline constexpr std::array abs_Int16x2_args = { &abs_Int16x2_arg };

/// abs with Int16x3
Variable abs_Int16x3_arg;
Function abs_Int16x3;
inline constexpr std::array abs_Int16x3_args = { &abs_Int16x3_arg };

/// abs with Int16x4
Variable abs_Int16x4_arg;
Function abs_Int16x4;
inline constexpr std::array abs_Int16x4_args = { &abs_Int16x4_arg };

/// abs with Float32
Variable abs_Float32_arg;
Function abs_Float32;
inline constexpr std::array abs_Float32_args = { &abs_Float32_arg };

/// abs with Float32x2
Variable abs_Float32x2_arg;
Function abs_Float32x2;
inline constexpr std::array abs_Float32x2_args = { &abs_Float32x2_arg };

/// abs with Float32x3
Variable abs_Float32x3_arg;
Function abs_Float32x3;
inline constexpr std::array abs_Float32x3_args = { &abs_Float32x3_arg };

/// abs with Float32x4
Variable abs_Float32x4_arg;
Function abs_Float32x4;
inline constexpr std::array abs_Float32x4_args = { &abs_Float32x4_arg };

/// abs with Float16
Variable abs_Float16_arg;
Function abs_Float16;
inline constexpr std::array abs_Float16_args = { &abs_Float16_arg };

/// abs with Float16x2
Variable abs_Float16x2_arg;
Function abs_Float16x2;
inline constexpr std::array abs_Float16x2_args = { &abs_Float16x2_arg };

/// abs with Float16x3
Variable abs_Float16x3_arg;
Function abs_Float16x3;
inline constexpr std::array abs_Float16x3_args = { &abs_Float16x3_arg };

/// abs with Float16x4
Variable abs_Float16x4_arg;
Function abs_Float16x4;
inline constexpr std::array abs_Float16x4_args = { &abs_Float16x4_arg };

/// castToF16 with Float16x4
Variable castToF16_UInt16_arg;
Function castToF16_UInt16;
inline constexpr std::array castToF16_UInt16_args = { &castToF16_UInt16_arg };

/// castToF16 with Float16x4
Variable castToF16_Int16_arg;
Function castToF16_Int16;
inline constexpr std::array castToF16_Int16_args = { &castToF16_Int16_arg };

/// castToU16 with Float16x4
Variable castToU16_Float16_arg;
Function castToU16_Float16;
inline constexpr std::array castToU16_Float16_args = { &castToU16_Float16_arg };

/// castToU16 with Float16x4
Variable castToU16_Int16_arg;
Function castToU16_Int16;
inline constexpr std::array castToU16_Int16_args = { &castToU16_Int16_arg };

/// castToI16 with Float16x4
Variable castToI16_Float16_arg;
Function castToI16_Float16;
inline constexpr std::array castToI16_Float16_args = { &castToI16_Float16_arg };

/// castToI16 with Float16x4
Variable castToI16_UInt16_arg;
Function castToI16_UInt16;
inline constexpr std::array castToI16_UInt16_args = { &castToI16_UInt16_arg };

/// castToF32 with Float16x4
Variable castToF32_UInt32_arg;
Function castToF32_UInt32;
inline constexpr std::array castToF32_UInt32_args = { &castToF32_UInt32_arg };

/// castToF32 with Float16x4
Variable castToF32_Int32_arg;
Function castToF32_Int32;
inline constexpr std::array castToF32_Int32_args = { &castToF32_Int32_arg };

/// castToU32 with Float16x4
Variable castToU32_Float32_arg;
Function castToU32_Float32;
inline constexpr std::array castToU32_Float32_args = { &castToU32_Float32_arg };

/// castToU32 with Float16x4
Variable castToU32_Int32_arg;
Function castToU32_Int32;
inline constexpr std::array castToU32_Int32_args = { &castToU32_Int32_arg };

/// castToI32 with Float16x4
Variable castToI32_Float32_arg;
Function castToI32_Float32;
inline constexpr std::array castToI32_Float32_args = { &castToI32_Float32_arg };

/// castToI32 with Float16x4
Variable castToI32_UInt32_arg;
Function castToI32_UInt32;
inline constexpr std::array castToI32_UInt32_args = { &castToI32_UInt32_arg };

/// any with Bool8
Variable any_Bool8_arg;
Function any_Bool8;
inline constexpr std::array any_Bool8_args = { &any_Bool8_arg };

/// any with Bool8x2
Variable any_Bool8x2_arg;
Function any_Bool8x2;
inline constexpr std::array any_Bool8x2_args = { &any_Bool8x2_arg };

/// any with Bool8x3
Variable any_Bool8x3_arg;
Function any_Bool8x3;
inline constexpr std::array any_Bool8x3_args = { &any_Bool8x3_arg };

/// any with Bool8x4
Variable any_Bool8x4_arg;
Function any_Bool8x4;
inline constexpr std::array any_Bool8x4_args = { &any_Bool8x4_arg };

/// all with Bool8
Variable all_Bool8_arg;
Function all_Bool8;
inline constexpr std::array all_Bool8_args = { &all_Bool8_arg };

/// all with Bool8x2
Variable all_Bool8x2_arg;
Function all_Bool8x2;
inline constexpr std::array all_Bool8x2_args = { &all_Bool8x2_arg };

/// all with Bool8x3
Variable all_Bool8x3_arg;
Function all_Bool8x3;
inline constexpr std::array all_Bool8x3_args = { &all_Bool8x3_arg };

/// all with Bool8x4
Variable all_Bool8x4_arg;
Function all_Bool8x4;
inline constexpr std::array all_Bool8x4_args = { &all_Bool8x4_arg };

/// transpose with Float32x2x2
Variable transpose_Float32x2x2_arg;
Function transpose_Float32x2x2;
inline constexpr std::array transpose_Float32x2x2_args = { &transpose_Float32x2x2_arg };

/// transpose with Float16x2x2
Variable transpose_Float16x2x2_arg;
Function transpose_Float16x2x2;
inline constexpr std::array transpose_Float16x2x2_args = { &transpose_Float16x2x2_arg };

/// transpose with Float32x2x3
Variable transpose_Float32x2x3_arg;
Function transpose_Float32x2x3;
inline constexpr std::array transpose_Float32x2x3_args = { &transpose_Float32x2x3_arg };

/// transpose with Float16x2x3
Variable transpose_Float16x2x3_arg;
Function transpose_Float16x2x3;
inline constexpr std::array transpose_Float16x2x3_args = { &transpose_Float16x2x3_arg };

/// transpose with Float32x2x4
Variable transpose_Float32x2x4_arg;
Function transpose_Float32x2x4;
inline constexpr std::array transpose_Float32x2x4_args = { &transpose_Float32x2x4_arg };

/// transpose with Float16x2x4
Variable transpose_Float16x2x4_arg;
Function transpose_Float16x2x4;
inline constexpr std::array transpose_Float16x2x4_args = { &transpose_Float16x2x4_arg };

/// transpose with Float32x3x2
Variable transpose_Float32x3x2_arg;
Function transpose_Float32x3x2;
inline constexpr std::array transpose_Float32x3x2_args = { &transpose_Float32x3x2_arg };

/// transpose with Float16x3x2
Variable transpose_Float16x3x2_arg;
Function transpose_Float16x3x2;
inline constexpr std::array transpose_Float16x3x2_args = { &transpose_Float16x3x2_arg };

/// transpose with Float32x3x3
Variable transpose_Float32x3x3_arg;
Function transpose_Float32x3x3;
inline constexpr std::array transpose_Float32x3x3_args = { &transpose_Float32x3x3_arg };

/// transpose with Float16x3x3
Variable transpose_Float16x3x3_arg;
Function transpose_Float16x3x3;
inline constexpr std::array transpose_Float16x3x3_args = { &transpose_Float16x3x3_arg };

/// transpose with Float32x3x4
Variable transpose_Float32x3x4_arg;
Function transpose_Float32x3x4;
inline constexpr std::array transpose_Float32x3x4_args = { &transpose_Float32x3x4_arg };

/// transpose with Float16x3x4
Variable transpose_Float16x3x4_arg;
Function transpose_Float16x3x4;
inline constexpr std::array transpose_Float16x3x4_args = { &transpose_Float16x3x4_arg };

/// transpose with Float32x4x2
Variable transpose_Float32x4x2_arg;
Function transpose_Float32x4x2;
inline constexpr std::array transpose_Float32x4x2_args = { &transpose_Float32x4x2_arg };

/// transpose with Float16x4x2
Variable transpose_Float16x4x2_arg;
Function transpose_Float16x4x2;
inline constexpr std::array transpose_Float16x4x2_args = { &transpose_Float16x4x2_arg };

/// transpose with Float32x4x3
Variable transpose_Float32x4x3_arg;
Function transpose_Float32x4x3;
inline constexpr std::array transpose_Float32x4x3_args = { &transpose_Float32x4x3_arg };

/// transpose with Float16x4x3
Variable transpose_Float16x4x3_arg;
Function transpose_Float16x4x3;
inline constexpr std::array transpose_Float16x4x3_args = { &transpose_Float16x4x3_arg };

/// transpose with Float32x4x4
Variable transpose_Float32x4x4_arg;
Function transpose_Float32x4x4;
inline constexpr std::array transpose_Float32x4x4_args = { &transpose_Float32x4x4_arg };

/// transpose with Float16x4x4
Variable transpose_Float16x4x4_arg;
Function transpose_Float16x4x4;
inline constexpr std::array transpose_Float16x4x4_args = { &transpose_Float16x4x4_arg };

/// inverse with Float32x2x2
Variable inverse_Float32x2x2_arg;
Function inverse_Float32x2x2;
inline constexpr std::array inverse_Float32x2x2_args = { &inverse_Float32x2x2_arg };

/// inverse with Float16x2x2
Variable inverse_Float16x2x2_arg;
Function inverse_Float16x2x2;
inline constexpr std::array inverse_Float16x2x2_args = { &inverse_Float16x2x2_arg };

/// inverse with Float32x2x3
Variable inverse_Float32x2x3_arg;
Function inverse_Float32x2x3;
inline constexpr std::array inverse_Float32x2x3_args = { &inverse_Float32x2x3_arg };

/// inverse with Float16x2x3
Variable inverse_Float16x2x3_arg;
Function inverse_Float16x2x3;
inline constexpr std::array inverse_Float16x2x3_args = { &inverse_Float16x2x3_arg };

/// inverse with Float32x2x4
Variable inverse_Float32x2x4_arg;
Function inverse_Float32x2x4;
inline constexpr std::array inverse_Float32x2x4_args = { &inverse_Float32x2x4_arg };

/// inverse with Float16x2x4
Variable inverse_Float16x2x4_arg;
Function inverse_Float16x2x4;
inline constexpr std::array inverse_Float16x2x4_args = { &inverse_Float16x2x4_arg };

/// inverse with Float32x3x2
Variable inverse_Float32x3x2_arg;
Function inverse_Float32x3x2;
inline constexpr std::array inverse_Float32x3x2_args = { &inverse_Float32x3x2_arg };

/// inverse with Float16x3x2
Variable inverse_Float16x3x2_arg;
Function inverse_Float16x3x2;
inline constexpr std::array inverse_Float16x3x2_args = { &inverse_Float16x3x2_arg };

/// inverse with Float32x3x3
Variable inverse_Float32x3x3_arg;
Function inverse_Float32x3x3;
inline constexpr std::array inverse_Float32x3x3_args = { &inverse_Float32x3x3_arg };

/// inverse with Float16x3x3
Variable inverse_Float16x3x3_arg;
Function inverse_Float16x3x3;
inline constexpr std::array inverse_Float16x3x3_args = { &inverse_Float16x3x3_arg };

/// inverse with Float32x3x4
Variable inverse_Float32x3x4_arg;
Function inverse_Float32x3x4;
inline constexpr std::array inverse_Float32x3x4_args = { &inverse_Float32x3x4_arg };

/// inverse with Float16x3x4
Variable inverse_Float16x3x4_arg;
Function inverse_Float16x3x4;
inline constexpr std::array inverse_Float16x3x4_args = { &inverse_Float16x3x4_arg };

/// inverse with Float32x4x2
Variable inverse_Float32x4x2_arg;
Function inverse_Float32x4x2;
inline constexpr std::array inverse_Float32x4x2_args = { &inverse_Float32x4x2_arg };

/// inverse with Float16x4x2
Variable inverse_Float16x4x2_arg;
Function inverse_Float16x4x2;
inline constexpr std::array inverse_Float16x4x2_args = { &inverse_Float16x4x2_arg };

/// inverse with Float32x4x3
Variable inverse_Float32x4x3_arg;
Function inverse_Float32x4x3;
inline constexpr std::array inverse_Float32x4x3_args = { &inverse_Float32x4x3_arg };

/// inverse with Float16x4x3
Variable inverse_Float16x4x3_arg;
Function inverse_Float16x4x3;
inline constexpr std::array inverse_Float16x4x3_args = { &inverse_Float16x4x3_arg };

/// inverse with Float32x4x4
Variable inverse_Float32x4x4_arg;
Function inverse_Float32x4x4;
inline constexpr std::array inverse_Float32x4x4_args = { &inverse_Float32x4x4_arg };

/// inverse with Float16x4x4
Variable inverse_Float16x4x4_arg;
Function inverse_Float16x4x4;
inline constexpr std::array inverse_Float16x4x4_args = { &inverse_Float16x4x4_arg };

/// OutputLayer
Function VertexGetOutputLayer;

/// OutputViewport
Function VertexGetOutputViewport;

/// Index
Function VertexGetIndex;

/// InstanceIndex
Function VertexGetInstanceIndex;

/// BaseIndex
Function VertexGetBaseIndex;

/// BaseInstanceIndex
Function VertexGetBaseInstanceIndex;

/// DrawIndex
Function VertexGetDrawIndex;

/// OutputLayer with UInt16
Variable VertexSetOutputLayer_UInt16_arg;
Function VertexSetOutputLayer_UInt16;
inline constexpr std::array VertexSetOutputLayer_UInt16_args = { &VertexSetOutputLayer_UInt16_arg };

/// OutputLayer with UInt32
Variable VertexSetOutputLayer_UInt32_arg;
Function VertexSetOutputLayer_UInt32;
inline constexpr std::array VertexSetOutputLayer_UInt32_args = { &VertexSetOutputLayer_UInt32_arg };

/// OutputViewport with UInt16
Variable VertexSetOutputViewport_UInt16_arg;
Function VertexSetOutputViewport_UInt16;
inline constexpr std::array VertexSetOutputViewport_UInt16_args = { &VertexSetOutputViewport_UInt16_arg };

/// OutputViewport with UInt32
Variable VertexSetOutputViewport_UInt32_arg;
Function VertexSetOutputViewport_UInt32;
inline constexpr std::array VertexSetOutputViewport_UInt32_args = { &VertexSetOutputViewport_UInt32_arg };

/// vertexExportExportCoordinates with Float32x4
Variable VertexExportCoordinates_Float32x4_arg;
Function VertexExportCoordinates_Float32x4;
inline constexpr std::array VertexExportCoordinates_Float32x4_args = { &VertexExportCoordinates_Float32x4_arg };

/// vertexExportExportCoordinates with Float16x4
Variable VertexExportCoordinates_Float16x4_arg;
Function VertexExportCoordinates_Float16x4;
inline constexpr std::array VertexExportCoordinates_Float16x4_args = { &VertexExportCoordinates_Float16x4_arg };

/// geometryExportVertex
Function GeometryExportVertex;

/// geometryExportPrimitive
Function GeometryExportPrimitive;

/// pixelGetCoordinates
Function PixelGetCoordinates_Float32x4;

/// pixelGetCoordinates
Function PixelGetCoordinates_Float16x4;

/// pixelGetDepth
Function PixelGetDepth;

/// pixelSetDepth with Float32
Variable PixelSetDepth_val;
Function PixelSetDepth;
inline constexpr std::array PixelSetDepth_args = { &PixelSetDepth_val };

/// pixelExportColor with Float32, Int32
Variable PixelExportColor_Float32_Int32_color;
Variable PixelExportColor_Float32_Int32_index;
Function PixelExportColor_Float32_Int32;
inline constexpr std::array PixelExportColor_Float32_Int32_args = { &PixelExportColor_Float32_Int32_color, &PixelExportColor_Float32_Int32_index };

/// pixelExportColor with Float32, UInt32
Variable PixelExportColor_Float32_UInt32_color;
Variable PixelExportColor_Float32_UInt32_index;
Function PixelExportColor_Float32_UInt32;
inline constexpr std::array PixelExportColor_Float32_UInt32_args = { &PixelExportColor_Float32_UInt32_color, &PixelExportColor_Float32_UInt32_index };

/// pixelExportColor with Float32, Int16
Variable PixelExportColor_Float32_Int16_color;
Variable PixelExportColor_Float32_Int16_index;
Function PixelExportColor_Float32_Int16;
inline constexpr std::array PixelExportColor_Float32_Int16_args = { &PixelExportColor_Float32_Int16_color, &PixelExportColor_Float32_Int16_index };

/// pixelExportColor with Float32, UInt16
Variable PixelExportColor_Float32_UInt16_color;
Variable PixelExportColor_Float32_UInt16_index;
Function PixelExportColor_Float32_UInt16;
inline constexpr std::array PixelExportColor_Float32_UInt16_args = { &PixelExportColor_Float32_UInt16_color, &PixelExportColor_Float32_UInt16_index };

/// pixelExportColor with Float32x2, Int32
Variable PixelExportColor_Float32x2_Int32_color;
Variable PixelExportColor_Float32x2_Int32_index;
Function PixelExportColor_Float32x2_Int32;
inline constexpr std::array PixelExportColor_Float32x2_Int32_args = { &PixelExportColor_Float32x2_Int32_color, &PixelExportColor_Float32x2_Int32_index };

/// pixelExportColor with Float32x2, UInt32
Variable PixelExportColor_Float32x2_UInt32_color;
Variable PixelExportColor_Float32x2_UInt32_index;
Function PixelExportColor_Float32x2_UInt32;
inline constexpr std::array PixelExportColor_Float32x2_UInt32_args = { &PixelExportColor_Float32x2_UInt32_color, &PixelExportColor_Float32x2_UInt32_index };

/// pixelExportColor with Float32x2, Int16
Variable PixelExportColor_Float32x2_Int16_color;
Variable PixelExportColor_Float32x2_Int16_index;
Function PixelExportColor_Float32x2_Int16;
inline constexpr std::array PixelExportColor_Float32x2_Int16_args = { &PixelExportColor_Float32x2_Int16_color, &PixelExportColor_Float32x2_Int16_index };

/// pixelExportColor with Float32x2, UInt16
Variable PixelExportColor_Float32x2_UInt16_color;
Variable PixelExportColor_Float32x2_UInt16_index;
Function PixelExportColor_Float32x2_UInt16;
inline constexpr std::array PixelExportColor_Float32x2_UInt16_args = { &PixelExportColor_Float32x2_UInt16_color, &PixelExportColor_Float32x2_UInt16_index };

/// pixelExportColor with Float32x3, Int32
Variable PixelExportColor_Float32x3_Int32_color;
Variable PixelExportColor_Float32x3_Int32_index;
Function PixelExportColor_Float32x3_Int32;
inline constexpr std::array PixelExportColor_Float32x3_Int32_args = { &PixelExportColor_Float32x3_Int32_color, &PixelExportColor_Float32x3_Int32_index };

/// pixelExportColor with Float32x3, UInt32
Variable PixelExportColor_Float32x3_UInt32_color;
Variable PixelExportColor_Float32x3_UInt32_index;
Function PixelExportColor_Float32x3_UInt32;
inline constexpr std::array PixelExportColor_Float32x3_UInt32_args = { &PixelExportColor_Float32x3_UInt32_color, &PixelExportColor_Float32x3_UInt32_index };

/// pixelExportColor with Float32x3, Int16
Variable PixelExportColor_Float32x3_Int16_color;
Variable PixelExportColor_Float32x3_Int16_index;
Function PixelExportColor_Float32x3_Int16;
inline constexpr std::array PixelExportColor_Float32x3_Int16_args = { &PixelExportColor_Float32x3_Int16_color, &PixelExportColor_Float32x3_Int16_index };

/// pixelExportColor with Float32x3, UInt16
Variable PixelExportColor_Float32x3_UInt16_color;
Variable PixelExportColor_Float32x3_UInt16_index;
Function PixelExportColor_Float32x3_UInt16;
inline constexpr std::array PixelExportColor_Float32x3_UInt16_args = { &PixelExportColor_Float32x3_UInt16_color, &PixelExportColor_Float32x3_UInt16_index };

/// pixelExportColor with Float32x4, Int32
Variable PixelExportColor_Float32x4_Int32_color;
Variable PixelExportColor_Float32x4_Int32_index;
Function PixelExportColor_Float32x4_Int32;
inline constexpr std::array PixelExportColor_Float32x4_Int32_args = { &PixelExportColor_Float32x4_Int32_color, &PixelExportColor_Float32x4_Int32_index };

/// pixelExportColor with Float32x4, UInt32
Variable PixelExportColor_Float32x4_UInt32_color;
Variable PixelExportColor_Float32x4_UInt32_index;
Function PixelExportColor_Float32x4_UInt32;
inline constexpr std::array PixelExportColor_Float32x4_UInt32_args = { &PixelExportColor_Float32x4_UInt32_color, &PixelExportColor_Float32x4_UInt32_index };

/// pixelExportColor with Float32x4, Int16
Variable PixelExportColor_Float32x4_Int16_color;
Variable PixelExportColor_Float32x4_Int16_index;
Function PixelExportColor_Float32x4_Int16;
inline constexpr std::array PixelExportColor_Float32x4_Int16_args = { &PixelExportColor_Float32x4_Int16_color, &PixelExportColor_Float32x4_Int16_index };

/// pixelExportColor with Float32x4, UInt16
Variable PixelExportColor_Float32x4_UInt16_color;
Variable PixelExportColor_Float32x4_UInt16_index;
Function PixelExportColor_Float32x4_UInt16;
inline constexpr std::array PixelExportColor_Float32x4_UInt16_args = { &PixelExportColor_Float32x4_UInt16_color, &PixelExportColor_Float32x4_UInt16_index };

/// pixelExportColor with Float16, Int32
Variable PixelExportColor_Float16_Int32_color;
Variable PixelExportColor_Float16_Int32_index;
Function PixelExportColor_Float16_Int32;
inline constexpr std::array PixelExportColor_Float16_Int32_args = { &PixelExportColor_Float16_Int32_color, &PixelExportColor_Float16_Int32_index };

/// pixelExportColor with Float16, UInt32
Variable PixelExportColor_Float16_UInt32_color;
Variable PixelExportColor_Float16_UInt32_index;
Function PixelExportColor_Float16_UInt32;
inline constexpr std::array PixelExportColor_Float16_UInt32_args = { &PixelExportColor_Float16_UInt32_color, &PixelExportColor_Float16_UInt32_index };

/// pixelExportColor with Float16, Int16
Variable PixelExportColor_Float16_Int16_color;
Variable PixelExportColor_Float16_Int16_index;
Function PixelExportColor_Float16_Int16;
inline constexpr std::array PixelExportColor_Float16_Int16_args = { &PixelExportColor_Float16_Int16_color, &PixelExportColor_Float16_Int16_index };

/// pixelExportColor with Float16, UInt16
Variable PixelExportColor_Float16_UInt16_color;
Variable PixelExportColor_Float16_UInt16_index;
Function PixelExportColor_Float16_UInt16;
inline constexpr std::array PixelExportColor_Float16_UInt16_args = { &PixelExportColor_Float16_UInt16_color, &PixelExportColor_Float16_UInt16_index };

/// pixelExportColor with Float16x2, Int32
Variable PixelExportColor_Float16x2_Int32_color;
Variable PixelExportColor_Float16x2_Int32_index;
Function PixelExportColor_Float16x2_Int32;
inline constexpr std::array PixelExportColor_Float16x2_Int32_args = { &PixelExportColor_Float16x2_Int32_color, &PixelExportColor_Float16x2_Int32_index };

/// pixelExportColor with Float16x2, UInt32
Variable PixelExportColor_Float16x2_UInt32_color;
Variable PixelExportColor_Float16x2_UInt32_index;
Function PixelExportColor_Float16x2_UInt32;
inline constexpr std::array PixelExportColor_Float16x2_UInt32_args = { &PixelExportColor_Float16x2_UInt32_color, &PixelExportColor_Float16x2_UInt32_index };

/// pixelExportColor with Float16x2, Int16
Variable PixelExportColor_Float16x2_Int16_color;
Variable PixelExportColor_Float16x2_Int16_index;
Function PixelExportColor_Float16x2_Int16;
inline constexpr std::array PixelExportColor_Float16x2_Int16_args = { &PixelExportColor_Float16x2_Int16_color, &PixelExportColor_Float16x2_Int16_index };

/// pixelExportColor with Float16x2, UInt16
Variable PixelExportColor_Float16x2_UInt16_color;
Variable PixelExportColor_Float16x2_UInt16_index;
Function PixelExportColor_Float16x2_UInt16;
inline constexpr std::array PixelExportColor_Float16x2_UInt16_args = { &PixelExportColor_Float16x2_UInt16_color, &PixelExportColor_Float16x2_UInt16_index };

/// pixelExportColor with Float16x3, Int32
Variable PixelExportColor_Float16x3_Int32_color;
Variable PixelExportColor_Float16x3_Int32_index;
Function PixelExportColor_Float16x3_Int32;
inline constexpr std::array PixelExportColor_Float16x3_Int32_args = { &PixelExportColor_Float16x3_Int32_color, &PixelExportColor_Float16x3_Int32_index };

/// pixelExportColor with Float16x3, UInt32
Variable PixelExportColor_Float16x3_UInt32_color;
Variable PixelExportColor_Float16x3_UInt32_index;
Function PixelExportColor_Float16x3_UInt32;
inline constexpr std::array PixelExportColor_Float16x3_UInt32_args = { &PixelExportColor_Float16x3_UInt32_color, &PixelExportColor_Float16x3_UInt32_index };

/// pixelExportColor with Float16x3, Int16
Variable PixelExportColor_Float16x3_Int16_color;
Variable PixelExportColor_Float16x3_Int16_index;
Function PixelExportColor_Float16x3_Int16;
inline constexpr std::array PixelExportColor_Float16x3_Int16_args = { &PixelExportColor_Float16x3_Int16_color, &PixelExportColor_Float16x3_Int16_index };

/// pixelExportColor with Float16x3, UInt16
Variable PixelExportColor_Float16x3_UInt16_color;
Variable PixelExportColor_Float16x3_UInt16_index;
Function PixelExportColor_Float16x3_UInt16;
inline constexpr std::array PixelExportColor_Float16x3_UInt16_args = { &PixelExportColor_Float16x3_UInt16_color, &PixelExportColor_Float16x3_UInt16_index };

/// pixelExportColor with Float16x4, Int32
Variable PixelExportColor_Float16x4_Int32_color;
Variable PixelExportColor_Float16x4_Int32_index;
Function PixelExportColor_Float16x4_Int32;
inline constexpr std::array PixelExportColor_Float16x4_Int32_args = { &PixelExportColor_Float16x4_Int32_color, &PixelExportColor_Float16x4_Int32_index };

/// pixelExportColor with Float16x4, UInt32
Variable PixelExportColor_Float16x4_UInt32_color;
Variable PixelExportColor_Float16x4_UInt32_index;
Function PixelExportColor_Float16x4_UInt32;
inline constexpr std::array PixelExportColor_Float16x4_UInt32_args = { &PixelExportColor_Float16x4_UInt32_color, &PixelExportColor_Float16x4_UInt32_index };

/// pixelExportColor with Float16x4, Int16
Variable PixelExportColor_Float16x4_Int16_color;
Variable PixelExportColor_Float16x4_Int16_index;
Function PixelExportColor_Float16x4_Int16;
inline constexpr std::array PixelExportColor_Float16x4_Int16_args = { &PixelExportColor_Float16x4_Int16_color, &PixelExportColor_Float16x4_Int16_index };

/// pixelExportColor with Float16x4, UInt16
Variable PixelExportColor_Float16x4_UInt16_color;
Variable PixelExportColor_Float16x4_UInt16_index;
Function PixelExportColor_Float16x4_UInt16;
inline constexpr std::array PixelExportColor_Float16x4_UInt16_args = { &PixelExportColor_Float16x4_UInt16_color, &PixelExportColor_Float16x4_UInt16_index };

/// pixelExportColor with Int32, Int32
Variable PixelExportColor_Int32_Int32_color;
Variable PixelExportColor_Int32_Int32_index;
Function PixelExportColor_Int32_Int32;
inline constexpr std::array PixelExportColor_Int32_Int32_args = { &PixelExportColor_Int32_Int32_color, &PixelExportColor_Int32_Int32_index };

/// pixelExportColor with Int32, UInt32
Variable PixelExportColor_Int32_UInt32_color;
Variable PixelExportColor_Int32_UInt32_index;
Function PixelExportColor_Int32_UInt32;
inline constexpr std::array PixelExportColor_Int32_UInt32_args = { &PixelExportColor_Int32_UInt32_color, &PixelExportColor_Int32_UInt32_index };

/// pixelExportColor with Int32, Int16
Variable PixelExportColor_Int32_Int16_color;
Variable PixelExportColor_Int32_Int16_index;
Function PixelExportColor_Int32_Int16;
inline constexpr std::array PixelExportColor_Int32_Int16_args = { &PixelExportColor_Int32_Int16_color, &PixelExportColor_Int32_Int16_index };

/// pixelExportColor with Int32, UInt16
Variable PixelExportColor_Int32_UInt16_color;
Variable PixelExportColor_Int32_UInt16_index;
Function PixelExportColor_Int32_UInt16;
inline constexpr std::array PixelExportColor_Int32_UInt16_args = { &PixelExportColor_Int32_UInt16_color, &PixelExportColor_Int32_UInt16_index };

/// pixelExportColor with Int32x2, Int32
Variable PixelExportColor_Int32x2_Int32_color;
Variable PixelExportColor_Int32x2_Int32_index;
Function PixelExportColor_Int32x2_Int32;
inline constexpr std::array PixelExportColor_Int32x2_Int32_args = { &PixelExportColor_Int32x2_Int32_color, &PixelExportColor_Int32x2_Int32_index };

/// pixelExportColor with Int32x2, UInt32
Variable PixelExportColor_Int32x2_UInt32_color;
Variable PixelExportColor_Int32x2_UInt32_index;
Function PixelExportColor_Int32x2_UInt32;
inline constexpr std::array PixelExportColor_Int32x2_UInt32_args = { &PixelExportColor_Int32x2_UInt32_color, &PixelExportColor_Int32x2_UInt32_index };

/// pixelExportColor with Int32x2, Int16
Variable PixelExportColor_Int32x2_Int16_color;
Variable PixelExportColor_Int32x2_Int16_index;
Function PixelExportColor_Int32x2_Int16;
inline constexpr std::array PixelExportColor_Int32x2_Int16_args = { &PixelExportColor_Int32x2_Int16_color, &PixelExportColor_Int32x2_Int16_index };

/// pixelExportColor with Int32x2, UInt16
Variable PixelExportColor_Int32x2_UInt16_color;
Variable PixelExportColor_Int32x2_UInt16_index;
Function PixelExportColor_Int32x2_UInt16;
inline constexpr std::array PixelExportColor_Int32x2_UInt16_args = { &PixelExportColor_Int32x2_UInt16_color, &PixelExportColor_Int32x2_UInt16_index };

/// pixelExportColor with Int32x3, Int32
Variable PixelExportColor_Int32x3_Int32_color;
Variable PixelExportColor_Int32x3_Int32_index;
Function PixelExportColor_Int32x3_Int32;
inline constexpr std::array PixelExportColor_Int32x3_Int32_args = { &PixelExportColor_Int32x3_Int32_color, &PixelExportColor_Int32x3_Int32_index };

/// pixelExportColor with Int32x3, UInt32
Variable PixelExportColor_Int32x3_UInt32_color;
Variable PixelExportColor_Int32x3_UInt32_index;
Function PixelExportColor_Int32x3_UInt32;
inline constexpr std::array PixelExportColor_Int32x3_UInt32_args = { &PixelExportColor_Int32x3_UInt32_color, &PixelExportColor_Int32x3_UInt32_index };

/// pixelExportColor with Int32x3, Int16
Variable PixelExportColor_Int32x3_Int16_color;
Variable PixelExportColor_Int32x3_Int16_index;
Function PixelExportColor_Int32x3_Int16;
inline constexpr std::array PixelExportColor_Int32x3_Int16_args = { &PixelExportColor_Int32x3_Int16_color, &PixelExportColor_Int32x3_Int16_index };

/// pixelExportColor with Int32x3, UInt16
Variable PixelExportColor_Int32x3_UInt16_color;
Variable PixelExportColor_Int32x3_UInt16_index;
Function PixelExportColor_Int32x3_UInt16;
inline constexpr std::array PixelExportColor_Int32x3_UInt16_args = { &PixelExportColor_Int32x3_UInt16_color, &PixelExportColor_Int32x3_UInt16_index };

/// pixelExportColor with Int32x4, Int32
Variable PixelExportColor_Int32x4_Int32_color;
Variable PixelExportColor_Int32x4_Int32_index;
Function PixelExportColor_Int32x4_Int32;
inline constexpr std::array PixelExportColor_Int32x4_Int32_args = { &PixelExportColor_Int32x4_Int32_color, &PixelExportColor_Int32x4_Int32_index };

/// pixelExportColor with Int32x4, UInt32
Variable PixelExportColor_Int32x4_UInt32_color;
Variable PixelExportColor_Int32x4_UInt32_index;
Function PixelExportColor_Int32x4_UInt32;
inline constexpr std::array PixelExportColor_Int32x4_UInt32_args = { &PixelExportColor_Int32x4_UInt32_color, &PixelExportColor_Int32x4_UInt32_index };

/// pixelExportColor with Int32x4, Int16
Variable PixelExportColor_Int32x4_Int16_color;
Variable PixelExportColor_Int32x4_Int16_index;
Function PixelExportColor_Int32x4_Int16;
inline constexpr std::array PixelExportColor_Int32x4_Int16_args = { &PixelExportColor_Int32x4_Int16_color, &PixelExportColor_Int32x4_Int16_index };

/// pixelExportColor with Int32x4, UInt16
Variable PixelExportColor_Int32x4_UInt16_color;
Variable PixelExportColor_Int32x4_UInt16_index;
Function PixelExportColor_Int32x4_UInt16;
inline constexpr std::array PixelExportColor_Int32x4_UInt16_args = { &PixelExportColor_Int32x4_UInt16_color, &PixelExportColor_Int32x4_UInt16_index };

/// pixelExportColor with Int16, Int32
Variable PixelExportColor_Int16_Int32_color;
Variable PixelExportColor_Int16_Int32_index;
Function PixelExportColor_Int16_Int32;
inline constexpr std::array PixelExportColor_Int16_Int32_args = { &PixelExportColor_Int16_Int32_color, &PixelExportColor_Int16_Int32_index };

/// pixelExportColor with Int16, UInt32
Variable PixelExportColor_Int16_UInt32_color;
Variable PixelExportColor_Int16_UInt32_index;
Function PixelExportColor_Int16_UInt32;
inline constexpr std::array PixelExportColor_Int16_UInt32_args = { &PixelExportColor_Int16_UInt32_color, &PixelExportColor_Int16_UInt32_index };

/// pixelExportColor with Int16, Int16
Variable PixelExportColor_Int16_Int16_color;
Variable PixelExportColor_Int16_Int16_index;
Function PixelExportColor_Int16_Int16;
inline constexpr std::array PixelExportColor_Int16_Int16_args = { &PixelExportColor_Int16_Int16_color, &PixelExportColor_Int16_Int16_index };

/// pixelExportColor with Int16, UInt16
Variable PixelExportColor_Int16_UInt16_color;
Variable PixelExportColor_Int16_UInt16_index;
Function PixelExportColor_Int16_UInt16;
inline constexpr std::array PixelExportColor_Int16_UInt16_args = { &PixelExportColor_Int16_UInt16_color, &PixelExportColor_Int16_UInt16_index };

/// pixelExportColor with Int16x2, Int32
Variable PixelExportColor_Int16x2_Int32_color;
Variable PixelExportColor_Int16x2_Int32_index;
Function PixelExportColor_Int16x2_Int32;
inline constexpr std::array PixelExportColor_Int16x2_Int32_args = { &PixelExportColor_Int16x2_Int32_color, &PixelExportColor_Int16x2_Int32_index };

/// pixelExportColor with Int16x2, UInt32
Variable PixelExportColor_Int16x2_UInt32_color;
Variable PixelExportColor_Int16x2_UInt32_index;
Function PixelExportColor_Int16x2_UInt32;
inline constexpr std::array PixelExportColor_Int16x2_UInt32_args = { &PixelExportColor_Int16x2_UInt32_color, &PixelExportColor_Int16x2_UInt32_index };

/// pixelExportColor with Int16x2, Int16
Variable PixelExportColor_Int16x2_Int16_color;
Variable PixelExportColor_Int16x2_Int16_index;
Function PixelExportColor_Int16x2_Int16;
inline constexpr std::array PixelExportColor_Int16x2_Int16_args = { &PixelExportColor_Int16x2_Int16_color, &PixelExportColor_Int16x2_Int16_index };

/// pixelExportColor with Int16x2, UInt16
Variable PixelExportColor_Int16x2_UInt16_color;
Variable PixelExportColor_Int16x2_UInt16_index;
Function PixelExportColor_Int16x2_UInt16;
inline constexpr std::array PixelExportColor_Int16x2_UInt16_args = { &PixelExportColor_Int16x2_UInt16_color, &PixelExportColor_Int16x2_UInt16_index };

/// pixelExportColor with Int16x3, Int32
Variable PixelExportColor_Int16x3_Int32_color;
Variable PixelExportColor_Int16x3_Int32_index;
Function PixelExportColor_Int16x3_Int32;
inline constexpr std::array PixelExportColor_Int16x3_Int32_args = { &PixelExportColor_Int16x3_Int32_color, &PixelExportColor_Int16x3_Int32_index };

/// pixelExportColor with Int16x3, UInt32
Variable PixelExportColor_Int16x3_UInt32_color;
Variable PixelExportColor_Int16x3_UInt32_index;
Function PixelExportColor_Int16x3_UInt32;
inline constexpr std::array PixelExportColor_Int16x3_UInt32_args = { &PixelExportColor_Int16x3_UInt32_color, &PixelExportColor_Int16x3_UInt32_index };

/// pixelExportColor with Int16x3, Int16
Variable PixelExportColor_Int16x3_Int16_color;
Variable PixelExportColor_Int16x3_Int16_index;
Function PixelExportColor_Int16x3_Int16;
inline constexpr std::array PixelExportColor_Int16x3_Int16_args = { &PixelExportColor_Int16x3_Int16_color, &PixelExportColor_Int16x3_Int16_index };

/// pixelExportColor with Int16x3, UInt16
Variable PixelExportColor_Int16x3_UInt16_color;
Variable PixelExportColor_Int16x3_UInt16_index;
Function PixelExportColor_Int16x3_UInt16;
inline constexpr std::array PixelExportColor_Int16x3_UInt16_args = { &PixelExportColor_Int16x3_UInt16_color, &PixelExportColor_Int16x3_UInt16_index };

/// pixelExportColor with Int16x4, Int32
Variable PixelExportColor_Int16x4_Int32_color;
Variable PixelExportColor_Int16x4_Int32_index;
Function PixelExportColor_Int16x4_Int32;
inline constexpr std::array PixelExportColor_Int16x4_Int32_args = { &PixelExportColor_Int16x4_Int32_color, &PixelExportColor_Int16x4_Int32_index };

/// pixelExportColor with Int16x4, UInt32
Variable PixelExportColor_Int16x4_UInt32_color;
Variable PixelExportColor_Int16x4_UInt32_index;
Function PixelExportColor_Int16x4_UInt32;
inline constexpr std::array PixelExportColor_Int16x4_UInt32_args = { &PixelExportColor_Int16x4_UInt32_color, &PixelExportColor_Int16x4_UInt32_index };

/// pixelExportColor with Int16x4, Int16
Variable PixelExportColor_Int16x4_Int16_color;
Variable PixelExportColor_Int16x4_Int16_index;
Function PixelExportColor_Int16x4_Int16;
inline constexpr std::array PixelExportColor_Int16x4_Int16_args = { &PixelExportColor_Int16x4_Int16_color, &PixelExportColor_Int16x4_Int16_index };

/// pixelExportColor with Int16x4, UInt16
Variable PixelExportColor_Int16x4_UInt16_color;
Variable PixelExportColor_Int16x4_UInt16_index;
Function PixelExportColor_Int16x4_UInt16;
inline constexpr std::array PixelExportColor_Int16x4_UInt16_args = { &PixelExportColor_Int16x4_UInt16_color, &PixelExportColor_Int16x4_UInt16_index };

/// pixelExportColor with UInt32, Int32
Variable PixelExportColor_UInt32_Int32_color;
Variable PixelExportColor_UInt32_Int32_index;
Function PixelExportColor_UInt32_Int32;
inline constexpr std::array PixelExportColor_UInt32_Int32_args = { &PixelExportColor_UInt32_Int32_color, &PixelExportColor_UInt32_Int32_index };

/// pixelExportColor with UInt32, UInt32
Variable PixelExportColor_UInt32_UInt32_color;
Variable PixelExportColor_UInt32_UInt32_index;
Function PixelExportColor_UInt32_UInt32;
inline constexpr std::array PixelExportColor_UInt32_UInt32_args = { &PixelExportColor_UInt32_UInt32_color, &PixelExportColor_UInt32_UInt32_index };

/// pixelExportColor with UInt32, Int16
Variable PixelExportColor_UInt32_Int16_color;
Variable PixelExportColor_UInt32_Int16_index;
Function PixelExportColor_UInt32_Int16;
inline constexpr std::array PixelExportColor_UInt32_Int16_args = { &PixelExportColor_UInt32_Int16_color, &PixelExportColor_UInt32_Int16_index };

/// pixelExportColor with UInt32, UInt16
Variable PixelExportColor_UInt32_UInt16_color;
Variable PixelExportColor_UInt32_UInt16_index;
Function PixelExportColor_UInt32_UInt16;
inline constexpr std::array PixelExportColor_UInt32_UInt16_args = { &PixelExportColor_UInt32_UInt16_color, &PixelExportColor_UInt32_UInt16_index };

/// pixelExportColor with UInt32x2, Int32
Variable PixelExportColor_UInt32x2_Int32_color;
Variable PixelExportColor_UInt32x2_Int32_index;
Function PixelExportColor_UInt32x2_Int32;
inline constexpr std::array PixelExportColor_UInt32x2_Int32_args = { &PixelExportColor_UInt32x2_Int32_color, &PixelExportColor_UInt32x2_Int32_index };

/// pixelExportColor with UInt32x2, UInt32
Variable PixelExportColor_UInt32x2_UInt32_color;
Variable PixelExportColor_UInt32x2_UInt32_index;
Function PixelExportColor_UInt32x2_UInt32;
inline constexpr std::array PixelExportColor_UInt32x2_UInt32_args = { &PixelExportColor_UInt32x2_UInt32_color, &PixelExportColor_UInt32x2_UInt32_index };

/// pixelExportColor with UInt32x2, Int16
Variable PixelExportColor_UInt32x2_Int16_color;
Variable PixelExportColor_UInt32x2_Int16_index;
Function PixelExportColor_UInt32x2_Int16;
inline constexpr std::array PixelExportColor_UInt32x2_Int16_args = { &PixelExportColor_UInt32x2_Int16_color, &PixelExportColor_UInt32x2_Int16_index };

/// pixelExportColor with UInt32x2, UInt16
Variable PixelExportColor_UInt32x2_UInt16_color;
Variable PixelExportColor_UInt32x2_UInt16_index;
Function PixelExportColor_UInt32x2_UInt16;
inline constexpr std::array PixelExportColor_UInt32x2_UInt16_args = { &PixelExportColor_UInt32x2_UInt16_color, &PixelExportColor_UInt32x2_UInt16_index };

/// pixelExportColor with UInt32x3, Int32
Variable PixelExportColor_UInt32x3_Int32_color;
Variable PixelExportColor_UInt32x3_Int32_index;
Function PixelExportColor_UInt32x3_Int32;
inline constexpr std::array PixelExportColor_UInt32x3_Int32_args = { &PixelExportColor_UInt32x3_Int32_color, &PixelExportColor_UInt32x3_Int32_index };

/// pixelExportColor with UInt32x3, UInt32
Variable PixelExportColor_UInt32x3_UInt32_color;
Variable PixelExportColor_UInt32x3_UInt32_index;
Function PixelExportColor_UInt32x3_UInt32;
inline constexpr std::array PixelExportColor_UInt32x3_UInt32_args = { &PixelExportColor_UInt32x3_UInt32_color, &PixelExportColor_UInt32x3_UInt32_index };

/// pixelExportColor with UInt32x3, Int16
Variable PixelExportColor_UInt32x3_Int16_color;
Variable PixelExportColor_UInt32x3_Int16_index;
Function PixelExportColor_UInt32x3_Int16;
inline constexpr std::array PixelExportColor_UInt32x3_Int16_args = { &PixelExportColor_UInt32x3_Int16_color, &PixelExportColor_UInt32x3_Int16_index };

/// pixelExportColor with UInt32x3, UInt16
Variable PixelExportColor_UInt32x3_UInt16_color;
Variable PixelExportColor_UInt32x3_UInt16_index;
Function PixelExportColor_UInt32x3_UInt16;
inline constexpr std::array PixelExportColor_UInt32x3_UInt16_args = { &PixelExportColor_UInt32x3_UInt16_color, &PixelExportColor_UInt32x3_UInt16_index };

/// pixelExportColor with UInt32x4, Int32
Variable PixelExportColor_UInt32x4_Int32_color;
Variable PixelExportColor_UInt32x4_Int32_index;
Function PixelExportColor_UInt32x4_Int32;
inline constexpr std::array PixelExportColor_UInt32x4_Int32_args = { &PixelExportColor_UInt32x4_Int32_color, &PixelExportColor_UInt32x4_Int32_index };

/// pixelExportColor with UInt32x4, UInt32
Variable PixelExportColor_UInt32x4_UInt32_color;
Variable PixelExportColor_UInt32x4_UInt32_index;
Function PixelExportColor_UInt32x4_UInt32;
inline constexpr std::array PixelExportColor_UInt32x4_UInt32_args = { &PixelExportColor_UInt32x4_UInt32_color, &PixelExportColor_UInt32x4_UInt32_index };

/// pixelExportColor with UInt32x4, Int16
Variable PixelExportColor_UInt32x4_Int16_color;
Variable PixelExportColor_UInt32x4_Int16_index;
Function PixelExportColor_UInt32x4_Int16;
inline constexpr std::array PixelExportColor_UInt32x4_Int16_args = { &PixelExportColor_UInt32x4_Int16_color, &PixelExportColor_UInt32x4_Int16_index };

/// pixelExportColor with UInt32x4, UInt16
Variable PixelExportColor_UInt32x4_UInt16_color;
Variable PixelExportColor_UInt32x4_UInt16_index;
Function PixelExportColor_UInt32x4_UInt16;
inline constexpr std::array PixelExportColor_UInt32x4_UInt16_args = { &PixelExportColor_UInt32x4_UInt16_color, &PixelExportColor_UInt32x4_UInt16_index };

/// pixelExportColor with UInt16, Int32
Variable PixelExportColor_UInt16_Int32_color;
Variable PixelExportColor_UInt16_Int32_index;
Function PixelExportColor_UInt16_Int32;
inline constexpr std::array PixelExportColor_UInt16_Int32_args = { &PixelExportColor_UInt16_Int32_color, &PixelExportColor_UInt16_Int32_index };

/// pixelExportColor with UInt16, UInt32
Variable PixelExportColor_UInt16_UInt32_color;
Variable PixelExportColor_UInt16_UInt32_index;
Function PixelExportColor_UInt16_UInt32;
inline constexpr std::array PixelExportColor_UInt16_UInt32_args = { &PixelExportColor_UInt16_UInt32_color, &PixelExportColor_UInt16_UInt32_index };

/// pixelExportColor with UInt16, Int16
Variable PixelExportColor_UInt16_Int16_color;
Variable PixelExportColor_UInt16_Int16_index;
Function PixelExportColor_UInt16_Int16;
inline constexpr std::array PixelExportColor_UInt16_Int16_args = { &PixelExportColor_UInt16_Int16_color, &PixelExportColor_UInt16_Int16_index };

/// pixelExportColor with UInt16, UInt16
Variable PixelExportColor_UInt16_UInt16_color;
Variable PixelExportColor_UInt16_UInt16_index;
Function PixelExportColor_UInt16_UInt16;
inline constexpr std::array PixelExportColor_UInt16_UInt16_args = { &PixelExportColor_UInt16_UInt16_color, &PixelExportColor_UInt16_UInt16_index };

/// pixelExportColor with UInt16x2, Int32
Variable PixelExportColor_UInt16x2_Int32_color;
Variable PixelExportColor_UInt16x2_Int32_index;
Function PixelExportColor_UInt16x2_Int32;
inline constexpr std::array PixelExportColor_UInt16x2_Int32_args = { &PixelExportColor_UInt16x2_Int32_color, &PixelExportColor_UInt16x2_Int32_index };

/// pixelExportColor with UInt16x2, UInt32
Variable PixelExportColor_UInt16x2_UInt32_color;
Variable PixelExportColor_UInt16x2_UInt32_index;
Function PixelExportColor_UInt16x2_UInt32;
inline constexpr std::array PixelExportColor_UInt16x2_UInt32_args = { &PixelExportColor_UInt16x2_UInt32_color, &PixelExportColor_UInt16x2_UInt32_index };

/// pixelExportColor with UInt16x2, Int16
Variable PixelExportColor_UInt16x2_Int16_color;
Variable PixelExportColor_UInt16x2_Int16_index;
Function PixelExportColor_UInt16x2_Int16;
inline constexpr std::array PixelExportColor_UInt16x2_Int16_args = { &PixelExportColor_UInt16x2_Int16_color, &PixelExportColor_UInt16x2_Int16_index };

/// pixelExportColor with UInt16x2, UInt16
Variable PixelExportColor_UInt16x2_UInt16_color;
Variable PixelExportColor_UInt16x2_UInt16_index;
Function PixelExportColor_UInt16x2_UInt16;
inline constexpr std::array PixelExportColor_UInt16x2_UInt16_args = { &PixelExportColor_UInt16x2_UInt16_color, &PixelExportColor_UInt16x2_UInt16_index };

/// pixelExportColor with UInt16x3, Int32
Variable PixelExportColor_UInt16x3_Int32_color;
Variable PixelExportColor_UInt16x3_Int32_index;
Function PixelExportColor_UInt16x3_Int32;
inline constexpr std::array PixelExportColor_UInt16x3_Int32_args = { &PixelExportColor_UInt16x3_Int32_color, &PixelExportColor_UInt16x3_Int32_index };

/// pixelExportColor with UInt16x3, UInt32
Variable PixelExportColor_UInt16x3_UInt32_color;
Variable PixelExportColor_UInt16x3_UInt32_index;
Function PixelExportColor_UInt16x3_UInt32;
inline constexpr std::array PixelExportColor_UInt16x3_UInt32_args = { &PixelExportColor_UInt16x3_UInt32_color, &PixelExportColor_UInt16x3_UInt32_index };

/// pixelExportColor with UInt16x3, Int16
Variable PixelExportColor_UInt16x3_Int16_color;
Variable PixelExportColor_UInt16x3_Int16_index;
Function PixelExportColor_UInt16x3_Int16;
inline constexpr std::array PixelExportColor_UInt16x3_Int16_args = { &PixelExportColor_UInt16x3_Int16_color, &PixelExportColor_UInt16x3_Int16_index };

/// pixelExportColor with UInt16x3, UInt16
Variable PixelExportColor_UInt16x3_UInt16_color;
Variable PixelExportColor_UInt16x3_UInt16_index;
Function PixelExportColor_UInt16x3_UInt16;
inline constexpr std::array PixelExportColor_UInt16x3_UInt16_args = { &PixelExportColor_UInt16x3_UInt16_color, &PixelExportColor_UInt16x3_UInt16_index };

/// pixelExportColor with UInt16x4, Int32
Variable PixelExportColor_UInt16x4_Int32_color;
Variable PixelExportColor_UInt16x4_Int32_index;
Function PixelExportColor_UInt16x4_Int32;
inline constexpr std::array PixelExportColor_UInt16x4_Int32_args = { &PixelExportColor_UInt16x4_Int32_color, &PixelExportColor_UInt16x4_Int32_index };

/// pixelExportColor with UInt16x4, UInt32
Variable PixelExportColor_UInt16x4_UInt32_color;
Variable PixelExportColor_UInt16x4_UInt32_index;
Function PixelExportColor_UInt16x4_UInt32;
inline constexpr std::array PixelExportColor_UInt16x4_UInt32_args = { &PixelExportColor_UInt16x4_UInt32_color, &PixelExportColor_UInt16x4_UInt32_index };

/// pixelExportColor with UInt16x4, Int16
Variable PixelExportColor_UInt16x4_Int16_color;
Variable PixelExportColor_UInt16x4_Int16_index;
Function PixelExportColor_UInt16x4_Int16;
inline constexpr std::array PixelExportColor_UInt16x4_Int16_args = { &PixelExportColor_UInt16x4_Int16_color, &PixelExportColor_UInt16x4_Int16_index };

/// pixelExportColor with UInt16x4, UInt16
Variable PixelExportColor_UInt16x4_UInt16_color;
Variable PixelExportColor_UInt16x4_UInt16_index;
Function PixelExportColor_UInt16x4_UInt16;
inline constexpr std::array PixelExportColor_UInt16x4_UInt16_args = { &PixelExportColor_UInt16x4_UInt16_color, &PixelExportColor_UInt16x4_UInt16_index };

/// computeGetLocalThreadIndices
Function ComputeGetLocalThreadIndices;

/// computeGetGlobalThreadIndices
Function ComputeGetGlobalThreadIndices;

/// computeGetWorkgroupIndices
Function ComputeGetWorkgroupIndices;

/// computeGetWorkGroupDimensions
Function ComputeGetWorkGroupDimensions;

/// computeGetIndexInWorkgroup
Function ComputeGetIndexInWorkgroup;

/// subgroupGetId
Function SubgroupGetId;

/// subgroupGetSize
Function SubgroupGetSize;

/// subgroupGetNum
Function SubgroupGetNum;

/// subgroupGetThreadMask
Function SubgroupGetThreadMask;

/// subgroupGetThreadAndLowerMask
Function SubgroupGetThreadAndLowerMask;

/// subgroupGetLowerMask
Function SubgroupGetLowerMask;

/// subgroupGetThreadAndGreaterMask
Function SubgroupGetThreadAndGreaterMask;

/// subgroupGetGreaterMask
Function SubgroupGetGreaterMask;

/// subgroupGetFirstActiveThread
Function SubgroupGetFirstActiveThread;

/// subgroupBroadcastFirstActiveThread with Float32
Variable SubgroupBroadcastFirstActiveThread_Float32_value;
Function SubgroupBroadcastFirstActiveThread_Float32;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float32_args = { &SubgroupBroadcastFirstActiveThread_Float32_value };

/// subgroupBroadcastFirstActiveThread with Float32x2
Variable SubgroupBroadcastFirstActiveThread_Float32x2_value;
Function SubgroupBroadcastFirstActiveThread_Float32x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float32x2_args = { &SubgroupBroadcastFirstActiveThread_Float32x2_value };

/// subgroupBroadcastFirstActiveThread with Float32x3
Variable SubgroupBroadcastFirstActiveThread_Float32x3_value;
Function SubgroupBroadcastFirstActiveThread_Float32x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float32x3_args = { &SubgroupBroadcastFirstActiveThread_Float32x3_value };

/// subgroupBroadcastFirstActiveThread with Float32x4
Variable SubgroupBroadcastFirstActiveThread_Float32x4_value;
Function SubgroupBroadcastFirstActiveThread_Float32x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float32x4_args = { &SubgroupBroadcastFirstActiveThread_Float32x4_value };

/// subgroupBroadcastFirstActiveThread with Float16
Variable SubgroupBroadcastFirstActiveThread_Float16_value;
Function SubgroupBroadcastFirstActiveThread_Float16;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float16_args = { &SubgroupBroadcastFirstActiveThread_Float16_value };

/// subgroupBroadcastFirstActiveThread with Float16x2
Variable SubgroupBroadcastFirstActiveThread_Float16x2_value;
Function SubgroupBroadcastFirstActiveThread_Float16x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float16x2_args = { &SubgroupBroadcastFirstActiveThread_Float16x2_value };

/// subgroupBroadcastFirstActiveThread with Float16x3
Variable SubgroupBroadcastFirstActiveThread_Float16x3_value;
Function SubgroupBroadcastFirstActiveThread_Float16x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float16x3_args = { &SubgroupBroadcastFirstActiveThread_Float16x3_value };

/// subgroupBroadcastFirstActiveThread with Float16x4
Variable SubgroupBroadcastFirstActiveThread_Float16x4_value;
Function SubgroupBroadcastFirstActiveThread_Float16x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Float16x4_args = { &SubgroupBroadcastFirstActiveThread_Float16x4_value };

/// subgroupBroadcastFirstActiveThread with Int32
Variable SubgroupBroadcastFirstActiveThread_Int32_value;
Function SubgroupBroadcastFirstActiveThread_Int32;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int32_args = { &SubgroupBroadcastFirstActiveThread_Int32_value };

/// subgroupBroadcastFirstActiveThread with Int32x2
Variable SubgroupBroadcastFirstActiveThread_Int32x2_value;
Function SubgroupBroadcastFirstActiveThread_Int32x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int32x2_args = { &SubgroupBroadcastFirstActiveThread_Int32x2_value };

/// subgroupBroadcastFirstActiveThread with Int32x3
Variable SubgroupBroadcastFirstActiveThread_Int32x3_value;
Function SubgroupBroadcastFirstActiveThread_Int32x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int32x3_args = { &SubgroupBroadcastFirstActiveThread_Int32x3_value };

/// subgroupBroadcastFirstActiveThread with Int32x4
Variable SubgroupBroadcastFirstActiveThread_Int32x4_value;
Function SubgroupBroadcastFirstActiveThread_Int32x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int32x4_args = { &SubgroupBroadcastFirstActiveThread_Int32x4_value };

/// subgroupBroadcastFirstActiveThread with Int16
Variable SubgroupBroadcastFirstActiveThread_Int16_value;
Function SubgroupBroadcastFirstActiveThread_Int16;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int16_args = { &SubgroupBroadcastFirstActiveThread_Int16_value };

/// subgroupBroadcastFirstActiveThread with Int16x2
Variable SubgroupBroadcastFirstActiveThread_Int16x2_value;
Function SubgroupBroadcastFirstActiveThread_Int16x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int16x2_args = { &SubgroupBroadcastFirstActiveThread_Int16x2_value };

/// subgroupBroadcastFirstActiveThread with Int16x3
Variable SubgroupBroadcastFirstActiveThread_Int16x3_value;
Function SubgroupBroadcastFirstActiveThread_Int16x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int16x3_args = { &SubgroupBroadcastFirstActiveThread_Int16x3_value };

/// subgroupBroadcastFirstActiveThread with Int16x4
Variable SubgroupBroadcastFirstActiveThread_Int16x4_value;
Function SubgroupBroadcastFirstActiveThread_Int16x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_Int16x4_args = { &SubgroupBroadcastFirstActiveThread_Int16x4_value };

/// subgroupBroadcastFirstActiveThread with UInt32
Variable SubgroupBroadcastFirstActiveThread_UInt32_value;
Function SubgroupBroadcastFirstActiveThread_UInt32;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt32_args = { &SubgroupBroadcastFirstActiveThread_UInt32_value };

/// subgroupBroadcastFirstActiveThread with UInt32x2
Variable SubgroupBroadcastFirstActiveThread_UInt32x2_value;
Function SubgroupBroadcastFirstActiveThread_UInt32x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt32x2_args = { &SubgroupBroadcastFirstActiveThread_UInt32x2_value };

/// subgroupBroadcastFirstActiveThread with UInt32x3
Variable SubgroupBroadcastFirstActiveThread_UInt32x3_value;
Function SubgroupBroadcastFirstActiveThread_UInt32x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt32x3_args = { &SubgroupBroadcastFirstActiveThread_UInt32x3_value };

/// subgroupBroadcastFirstActiveThread with UInt32x4
Variable SubgroupBroadcastFirstActiveThread_UInt32x4_value;
Function SubgroupBroadcastFirstActiveThread_UInt32x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt32x4_args = { &SubgroupBroadcastFirstActiveThread_UInt32x4_value };

/// subgroupBroadcastFirstActiveThread with UInt16
Variable SubgroupBroadcastFirstActiveThread_UInt16_value;
Function SubgroupBroadcastFirstActiveThread_UInt16;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt16_args = { &SubgroupBroadcastFirstActiveThread_UInt16_value };

/// subgroupBroadcastFirstActiveThread with UInt16x2
Variable SubgroupBroadcastFirstActiveThread_UInt16x2_value;
Function SubgroupBroadcastFirstActiveThread_UInt16x2;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt16x2_args = { &SubgroupBroadcastFirstActiveThread_UInt16x2_value };

/// subgroupBroadcastFirstActiveThread with UInt16x3
Variable SubgroupBroadcastFirstActiveThread_UInt16x3_value;
Function SubgroupBroadcastFirstActiveThread_UInt16x3;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt16x3_args = { &SubgroupBroadcastFirstActiveThread_UInt16x3_value };

/// subgroupBroadcastFirstActiveThread with UInt16x4
Variable SubgroupBroadcastFirstActiveThread_UInt16x4_value;
Function SubgroupBroadcastFirstActiveThread_UInt16x4;
inline constexpr std::array SubgroupBroadcastFirstActiveThread_UInt16x4_args = { &SubgroupBroadcastFirstActiveThread_UInt16x4_value };

/// subgroupBallot with Bool8
Variable SubgroupBallot_predicate;
Function SubgroupBallot;
inline constexpr std::array SubgroupBallot_args = { &SubgroupBallot_predicate };

/// subgroupInverseBallot with Bool8
Variable SubgroupInverseBallot_predicate;
Function SubgroupInverseBallot;
inline constexpr std::array SubgroupInverseBallot_args = { &SubgroupInverseBallot_predicate };

/// subgroupBallotBitCount with UInt32x4
Variable SubgroupBallotBitCount_mask;
Function SubgroupBallotBitCount;
inline constexpr std::array SubgroupBallotBitCount_args = { &SubgroupBallotBitCount_mask };

/// subgroupBallotFirstOne with UInt32x4
Variable SubgroupBallotFirstOne_mask;
Function SubgroupBallotFirstOne;
inline constexpr std::array SubgroupBallotFirstOne_args = { &SubgroupBallotFirstOne_mask };

/// subgroupBallotLastOne with UInt32x4
Variable SubgroupBallotLastOne_mask;
Function SubgroupBallotLastOne;
inline constexpr std::array SubgroupBallotLastOne_args = { &SubgroupBallotLastOne_mask };

/// subgroupBallotBit with UInt32x4, UInt32
Variable SubgroupBallotBit_mask;
Variable SubgroupBallotBit_index;
Function SubgroupBallotBit;
inline constexpr std::array SubgroupBallotBit_args = { &SubgroupBallotBit_mask, &SubgroupBallotBit_index };

/// subgroupSwapDiagonal with Float32
Variable SubgroupSwapDiagonal_Float32_value;
Function SubgroupSwapDiagonal_Float32;
inline constexpr std::array SubgroupSwapDiagonal_Float32_args = { &SubgroupSwapDiagonal_Float32_value };

/// subgroupSwapDiagonal with Float32x2
Variable SubgroupSwapDiagonal_Float32x2_value;
Function SubgroupSwapDiagonal_Float32x2;
inline constexpr std::array SubgroupSwapDiagonal_Float32x2_args = { &SubgroupSwapDiagonal_Float32x2_value };

/// subgroupSwapDiagonal with Float32x3
Variable SubgroupSwapDiagonal_Float32x3_value;
Function SubgroupSwapDiagonal_Float32x3;
inline constexpr std::array SubgroupSwapDiagonal_Float32x3_args = { &SubgroupSwapDiagonal_Float32x3_value };

/// subgroupSwapDiagonal with Float32x4
Variable SubgroupSwapDiagonal_Float32x4_value;
Function SubgroupSwapDiagonal_Float32x4;
inline constexpr std::array SubgroupSwapDiagonal_Float32x4_args = { &SubgroupSwapDiagonal_Float32x4_value };

/// subgroupSwapDiagonal with Float16
Variable SubgroupSwapDiagonal_Float16_value;
Function SubgroupSwapDiagonal_Float16;
inline constexpr std::array SubgroupSwapDiagonal_Float16_args = { &SubgroupSwapDiagonal_Float16_value };

/// subgroupSwapDiagonal with Float16x2
Variable SubgroupSwapDiagonal_Float16x2_value;
Function SubgroupSwapDiagonal_Float16x2;
inline constexpr std::array SubgroupSwapDiagonal_Float16x2_args = { &SubgroupSwapDiagonal_Float16x2_value };

/// subgroupSwapDiagonal with Float16x3
Variable SubgroupSwapDiagonal_Float16x3_value;
Function SubgroupSwapDiagonal_Float16x3;
inline constexpr std::array SubgroupSwapDiagonal_Float16x3_args = { &SubgroupSwapDiagonal_Float16x3_value };

/// subgroupSwapDiagonal with Float16x4
Variable SubgroupSwapDiagonal_Float16x4_value;
Function SubgroupSwapDiagonal_Float16x4;
inline constexpr std::array SubgroupSwapDiagonal_Float16x4_args = { &SubgroupSwapDiagonal_Float16x4_value };

/// subgroupSwapDiagonal with Int32
Variable SubgroupSwapDiagonal_Int32_value;
Function SubgroupSwapDiagonal_Int32;
inline constexpr std::array SubgroupSwapDiagonal_Int32_args = { &SubgroupSwapDiagonal_Int32_value };

/// subgroupSwapDiagonal with Int32x2
Variable SubgroupSwapDiagonal_Int32x2_value;
Function SubgroupSwapDiagonal_Int32x2;
inline constexpr std::array SubgroupSwapDiagonal_Int32x2_args = { &SubgroupSwapDiagonal_Int32x2_value };

/// subgroupSwapDiagonal with Int32x3
Variable SubgroupSwapDiagonal_Int32x3_value;
Function SubgroupSwapDiagonal_Int32x3;
inline constexpr std::array SubgroupSwapDiagonal_Int32x3_args = { &SubgroupSwapDiagonal_Int32x3_value };

/// subgroupSwapDiagonal with Int32x4
Variable SubgroupSwapDiagonal_Int32x4_value;
Function SubgroupSwapDiagonal_Int32x4;
inline constexpr std::array SubgroupSwapDiagonal_Int32x4_args = { &SubgroupSwapDiagonal_Int32x4_value };

/// subgroupSwapDiagonal with Int16
Variable SubgroupSwapDiagonal_Int16_value;
Function SubgroupSwapDiagonal_Int16;
inline constexpr std::array SubgroupSwapDiagonal_Int16_args = { &SubgroupSwapDiagonal_Int16_value };

/// subgroupSwapDiagonal with Int16x2
Variable SubgroupSwapDiagonal_Int16x2_value;
Function SubgroupSwapDiagonal_Int16x2;
inline constexpr std::array SubgroupSwapDiagonal_Int16x2_args = { &SubgroupSwapDiagonal_Int16x2_value };

/// subgroupSwapDiagonal with Int16x3
Variable SubgroupSwapDiagonal_Int16x3_value;
Function SubgroupSwapDiagonal_Int16x3;
inline constexpr std::array SubgroupSwapDiagonal_Int16x3_args = { &SubgroupSwapDiagonal_Int16x3_value };

/// subgroupSwapDiagonal with Int16x4
Variable SubgroupSwapDiagonal_Int16x4_value;
Function SubgroupSwapDiagonal_Int16x4;
inline constexpr std::array SubgroupSwapDiagonal_Int16x4_args = { &SubgroupSwapDiagonal_Int16x4_value };

/// subgroupSwapDiagonal with UInt32
Variable SubgroupSwapDiagonal_UInt32_value;
Function SubgroupSwapDiagonal_UInt32;
inline constexpr std::array SubgroupSwapDiagonal_UInt32_args = { &SubgroupSwapDiagonal_UInt32_value };

/// subgroupSwapDiagonal with UInt32x2
Variable SubgroupSwapDiagonal_UInt32x2_value;
Function SubgroupSwapDiagonal_UInt32x2;
inline constexpr std::array SubgroupSwapDiagonal_UInt32x2_args = { &SubgroupSwapDiagonal_UInt32x2_value };

/// subgroupSwapDiagonal with UInt32x3
Variable SubgroupSwapDiagonal_UInt32x3_value;
Function SubgroupSwapDiagonal_UInt32x3;
inline constexpr std::array SubgroupSwapDiagonal_UInt32x3_args = { &SubgroupSwapDiagonal_UInt32x3_value };

/// subgroupSwapDiagonal with UInt32x4
Variable SubgroupSwapDiagonal_UInt32x4_value;
Function SubgroupSwapDiagonal_UInt32x4;
inline constexpr std::array SubgroupSwapDiagonal_UInt32x4_args = { &SubgroupSwapDiagonal_UInt32x4_value };

/// subgroupSwapDiagonal with UInt16
Variable SubgroupSwapDiagonal_UInt16_value;
Function SubgroupSwapDiagonal_UInt16;
inline constexpr std::array SubgroupSwapDiagonal_UInt16_args = { &SubgroupSwapDiagonal_UInt16_value };

/// subgroupSwapDiagonal with UInt16x2
Variable SubgroupSwapDiagonal_UInt16x2_value;
Function SubgroupSwapDiagonal_UInt16x2;
inline constexpr std::array SubgroupSwapDiagonal_UInt16x2_args = { &SubgroupSwapDiagonal_UInt16x2_value };

/// subgroupSwapDiagonal with UInt16x3
Variable SubgroupSwapDiagonal_UInt16x3_value;
Function SubgroupSwapDiagonal_UInt16x3;
inline constexpr std::array SubgroupSwapDiagonal_UInt16x3_args = { &SubgroupSwapDiagonal_UInt16x3_value };

/// subgroupSwapDiagonal with UInt16x4
Variable SubgroupSwapDiagonal_UInt16x4_value;
Function SubgroupSwapDiagonal_UInt16x4;
inline constexpr std::array SubgroupSwapDiagonal_UInt16x4_args = { &SubgroupSwapDiagonal_UInt16x4_value };

/// subgroupSwapVertical with Float32
Variable SubgroupSwapVertical_Float32_value;
Function SubgroupSwapVertical_Float32;
inline constexpr std::array SubgroupSwapVertical_Float32_args = { &SubgroupSwapVertical_Float32_value };

/// subgroupSwapVertical with Float32x2
Variable SubgroupSwapVertical_Float32x2_value;
Function SubgroupSwapVertical_Float32x2;
inline constexpr std::array SubgroupSwapVertical_Float32x2_args = { &SubgroupSwapVertical_Float32x2_value };

/// subgroupSwapVertical with Float32x3
Variable SubgroupSwapVertical_Float32x3_value;
Function SubgroupSwapVertical_Float32x3;
inline constexpr std::array SubgroupSwapVertical_Float32x3_args = { &SubgroupSwapVertical_Float32x3_value };

/// subgroupSwapVertical with Float32x4
Variable SubgroupSwapVertical_Float32x4_value;
Function SubgroupSwapVertical_Float32x4;
inline constexpr std::array SubgroupSwapVertical_Float32x4_args = { &SubgroupSwapVertical_Float32x4_value };

/// subgroupSwapVertical with Float16
Variable SubgroupSwapVertical_Float16_value;
Function SubgroupSwapVertical_Float16;
inline constexpr std::array SubgroupSwapVertical_Float16_args = { &SubgroupSwapVertical_Float16_value };

/// subgroupSwapVertical with Float16x2
Variable SubgroupSwapVertical_Float16x2_value;
Function SubgroupSwapVertical_Float16x2;
inline constexpr std::array SubgroupSwapVertical_Float16x2_args = { &SubgroupSwapVertical_Float16x2_value };

/// subgroupSwapVertical with Float16x3
Variable SubgroupSwapVertical_Float16x3_value;
Function SubgroupSwapVertical_Float16x3;
inline constexpr std::array SubgroupSwapVertical_Float16x3_args = { &SubgroupSwapVertical_Float16x3_value };

/// subgroupSwapVertical with Float16x4
Variable SubgroupSwapVertical_Float16x4_value;
Function SubgroupSwapVertical_Float16x4;
inline constexpr std::array SubgroupSwapVertical_Float16x4_args = { &SubgroupSwapVertical_Float16x4_value };

/// subgroupSwapVertical with Int32
Variable SubgroupSwapVertical_Int32_value;
Function SubgroupSwapVertical_Int32;
inline constexpr std::array SubgroupSwapVertical_Int32_args = { &SubgroupSwapVertical_Int32_value };

/// subgroupSwapVertical with Int32x2
Variable SubgroupSwapVertical_Int32x2_value;
Function SubgroupSwapVertical_Int32x2;
inline constexpr std::array SubgroupSwapVertical_Int32x2_args = { &SubgroupSwapVertical_Int32x2_value };

/// subgroupSwapVertical with Int32x3
Variable SubgroupSwapVertical_Int32x3_value;
Function SubgroupSwapVertical_Int32x3;
inline constexpr std::array SubgroupSwapVertical_Int32x3_args = { &SubgroupSwapVertical_Int32x3_value };

/// subgroupSwapVertical with Int32x4
Variable SubgroupSwapVertical_Int32x4_value;
Function SubgroupSwapVertical_Int32x4;
inline constexpr std::array SubgroupSwapVertical_Int32x4_args = { &SubgroupSwapVertical_Int32x4_value };

/// subgroupSwapVertical with Int16
Variable SubgroupSwapVertical_Int16_value;
Function SubgroupSwapVertical_Int16;
inline constexpr std::array SubgroupSwapVertical_Int16_args = { &SubgroupSwapVertical_Int16_value };

/// subgroupSwapVertical with Int16x2
Variable SubgroupSwapVertical_Int16x2_value;
Function SubgroupSwapVertical_Int16x2;
inline constexpr std::array SubgroupSwapVertical_Int16x2_args = { &SubgroupSwapVertical_Int16x2_value };

/// subgroupSwapVertical with Int16x3
Variable SubgroupSwapVertical_Int16x3_value;
Function SubgroupSwapVertical_Int16x3;
inline constexpr std::array SubgroupSwapVertical_Int16x3_args = { &SubgroupSwapVertical_Int16x3_value };

/// subgroupSwapVertical with Int16x4
Variable SubgroupSwapVertical_Int16x4_value;
Function SubgroupSwapVertical_Int16x4;
inline constexpr std::array SubgroupSwapVertical_Int16x4_args = { &SubgroupSwapVertical_Int16x4_value };

/// subgroupSwapVertical with UInt32
Variable SubgroupSwapVertical_UInt32_value;
Function SubgroupSwapVertical_UInt32;
inline constexpr std::array SubgroupSwapVertical_UInt32_args = { &SubgroupSwapVertical_UInt32_value };

/// subgroupSwapVertical with UInt32x2
Variable SubgroupSwapVertical_UInt32x2_value;
Function SubgroupSwapVertical_UInt32x2;
inline constexpr std::array SubgroupSwapVertical_UInt32x2_args = { &SubgroupSwapVertical_UInt32x2_value };

/// subgroupSwapVertical with UInt32x3
Variable SubgroupSwapVertical_UInt32x3_value;
Function SubgroupSwapVertical_UInt32x3;
inline constexpr std::array SubgroupSwapVertical_UInt32x3_args = { &SubgroupSwapVertical_UInt32x3_value };

/// subgroupSwapVertical with UInt32x4
Variable SubgroupSwapVertical_UInt32x4_value;
Function SubgroupSwapVertical_UInt32x4;
inline constexpr std::array SubgroupSwapVertical_UInt32x4_args = { &SubgroupSwapVertical_UInt32x4_value };

/// subgroupSwapVertical with UInt16
Variable SubgroupSwapVertical_UInt16_value;
Function SubgroupSwapVertical_UInt16;
inline constexpr std::array SubgroupSwapVertical_UInt16_args = { &SubgroupSwapVertical_UInt16_value };

/// subgroupSwapVertical with UInt16x2
Variable SubgroupSwapVertical_UInt16x2_value;
Function SubgroupSwapVertical_UInt16x2;
inline constexpr std::array SubgroupSwapVertical_UInt16x2_args = { &SubgroupSwapVertical_UInt16x2_value };

/// subgroupSwapVertical with UInt16x3
Variable SubgroupSwapVertical_UInt16x3_value;
Function SubgroupSwapVertical_UInt16x3;
inline constexpr std::array SubgroupSwapVertical_UInt16x3_args = { &SubgroupSwapVertical_UInt16x3_value };

/// subgroupSwapVertical with UInt16x4
Variable SubgroupSwapVertical_UInt16x4_value;
Function SubgroupSwapVertical_UInt16x4;
inline constexpr std::array SubgroupSwapVertical_UInt16x4_args = { &SubgroupSwapVertical_UInt16x4_value };

/// subgroupSwapHorizontal with Float32
Variable SubgroupSwapHorizontal_Float32_value;
Function SubgroupSwapHorizontal_Float32;
inline constexpr std::array SubgroupSwapHorizontal_Float32_args = { &SubgroupSwapHorizontal_Float32_value };

/// subgroupSwapHorizontal with Float32x2
Variable SubgroupSwapHorizontal_Float32x2_value;
Function SubgroupSwapHorizontal_Float32x2;
inline constexpr std::array SubgroupSwapHorizontal_Float32x2_args = { &SubgroupSwapHorizontal_Float32x2_value };

/// subgroupSwapHorizontal with Float32x3
Variable SubgroupSwapHorizontal_Float32x3_value;
Function SubgroupSwapHorizontal_Float32x3;
inline constexpr std::array SubgroupSwapHorizontal_Float32x3_args = { &SubgroupSwapHorizontal_Float32x3_value };

/// subgroupSwapHorizontal with Float32x4
Variable SubgroupSwapHorizontal_Float32x4_value;
Function SubgroupSwapHorizontal_Float32x4;
inline constexpr std::array SubgroupSwapHorizontal_Float32x4_args = { &SubgroupSwapHorizontal_Float32x4_value };

/// subgroupSwapHorizontal with Float16
Variable SubgroupSwapHorizontal_Float16_value;
Function SubgroupSwapHorizontal_Float16;
inline constexpr std::array SubgroupSwapHorizontal_Float16_args = { &SubgroupSwapHorizontal_Float16_value };

/// subgroupSwapHorizontal with Float16x2
Variable SubgroupSwapHorizontal_Float16x2_value;
Function SubgroupSwapHorizontal_Float16x2;
inline constexpr std::array SubgroupSwapHorizontal_Float16x2_args = { &SubgroupSwapHorizontal_Float16x2_value };

/// subgroupSwapHorizontal with Float16x3
Variable SubgroupSwapHorizontal_Float16x3_value;
Function SubgroupSwapHorizontal_Float16x3;
inline constexpr std::array SubgroupSwapHorizontal_Float16x3_args = { &SubgroupSwapHorizontal_Float16x3_value };

/// subgroupSwapHorizontal with Float16x4
Variable SubgroupSwapHorizontal_Float16x4_value;
Function SubgroupSwapHorizontal_Float16x4;
inline constexpr std::array SubgroupSwapHorizontal_Float16x4_args = { &SubgroupSwapHorizontal_Float16x4_value };

/// subgroupSwapHorizontal with Int32
Variable SubgroupSwapHorizontal_Int32_value;
Function SubgroupSwapHorizontal_Int32;
inline constexpr std::array SubgroupSwapHorizontal_Int32_args = { &SubgroupSwapHorizontal_Int32_value };

/// subgroupSwapHorizontal with Int32x2
Variable SubgroupSwapHorizontal_Int32x2_value;
Function SubgroupSwapHorizontal_Int32x2;
inline constexpr std::array SubgroupSwapHorizontal_Int32x2_args = { &SubgroupSwapHorizontal_Int32x2_value };

/// subgroupSwapHorizontal with Int32x3
Variable SubgroupSwapHorizontal_Int32x3_value;
Function SubgroupSwapHorizontal_Int32x3;
inline constexpr std::array SubgroupSwapHorizontal_Int32x3_args = { &SubgroupSwapHorizontal_Int32x3_value };

/// subgroupSwapHorizontal with Int32x4
Variable SubgroupSwapHorizontal_Int32x4_value;
Function SubgroupSwapHorizontal_Int32x4;
inline constexpr std::array SubgroupSwapHorizontal_Int32x4_args = { &SubgroupSwapHorizontal_Int32x4_value };

/// subgroupSwapHorizontal with Int16
Variable SubgroupSwapHorizontal_Int16_value;
Function SubgroupSwapHorizontal_Int16;
inline constexpr std::array SubgroupSwapHorizontal_Int16_args = { &SubgroupSwapHorizontal_Int16_value };

/// subgroupSwapHorizontal with Int16x2
Variable SubgroupSwapHorizontal_Int16x2_value;
Function SubgroupSwapHorizontal_Int16x2;
inline constexpr std::array SubgroupSwapHorizontal_Int16x2_args = { &SubgroupSwapHorizontal_Int16x2_value };

/// subgroupSwapHorizontal with Int16x3
Variable SubgroupSwapHorizontal_Int16x3_value;
Function SubgroupSwapHorizontal_Int16x3;
inline constexpr std::array SubgroupSwapHorizontal_Int16x3_args = { &SubgroupSwapHorizontal_Int16x3_value };

/// subgroupSwapHorizontal with Int16x4
Variable SubgroupSwapHorizontal_Int16x4_value;
Function SubgroupSwapHorizontal_Int16x4;
inline constexpr std::array SubgroupSwapHorizontal_Int16x4_args = { &SubgroupSwapHorizontal_Int16x4_value };

/// subgroupSwapHorizontal with UInt32
Variable SubgroupSwapHorizontal_UInt32_value;
Function SubgroupSwapHorizontal_UInt32;
inline constexpr std::array SubgroupSwapHorizontal_UInt32_args = { &SubgroupSwapHorizontal_UInt32_value };

/// subgroupSwapHorizontal with UInt32x2
Variable SubgroupSwapHorizontal_UInt32x2_value;
Function SubgroupSwapHorizontal_UInt32x2;
inline constexpr std::array SubgroupSwapHorizontal_UInt32x2_args = { &SubgroupSwapHorizontal_UInt32x2_value };

/// subgroupSwapHorizontal with UInt32x3
Variable SubgroupSwapHorizontal_UInt32x3_value;
Function SubgroupSwapHorizontal_UInt32x3;
inline constexpr std::array SubgroupSwapHorizontal_UInt32x3_args = { &SubgroupSwapHorizontal_UInt32x3_value };

/// subgroupSwapHorizontal with UInt32x4
Variable SubgroupSwapHorizontal_UInt32x4_value;
Function SubgroupSwapHorizontal_UInt32x4;
inline constexpr std::array SubgroupSwapHorizontal_UInt32x4_args = { &SubgroupSwapHorizontal_UInt32x4_value };

/// subgroupSwapHorizontal with UInt16
Variable SubgroupSwapHorizontal_UInt16_value;
Function SubgroupSwapHorizontal_UInt16;
inline constexpr std::array SubgroupSwapHorizontal_UInt16_args = { &SubgroupSwapHorizontal_UInt16_value };

/// subgroupSwapHorizontal with UInt16x2
Variable SubgroupSwapHorizontal_UInt16x2_value;
Function SubgroupSwapHorizontal_UInt16x2;
inline constexpr std::array SubgroupSwapHorizontal_UInt16x2_args = { &SubgroupSwapHorizontal_UInt16x2_value };

/// subgroupSwapHorizontal with UInt16x3
Variable SubgroupSwapHorizontal_UInt16x3_value;
Function SubgroupSwapHorizontal_UInt16x3;
inline constexpr std::array SubgroupSwapHorizontal_UInt16x3_args = { &SubgroupSwapHorizontal_UInt16x3_value };

/// subgroupSwapHorizontal with UInt16x4
Variable SubgroupSwapHorizontal_UInt16x4_value;
Function SubgroupSwapHorizontal_UInt16x4;
inline constexpr std::array SubgroupSwapHorizontal_UInt16x4_args = { &SubgroupSwapHorizontal_UInt16x4_value };

/// atomicLoad with UInt32, MemorySemantics
Variable AtomicLoad_UInt32_ptr;
Variable AtomicLoad_UInt32_semantics;
Function AtomicLoad_UInt32;
inline constexpr std::array AtomicLoad_UInt32_args = { &AtomicLoad_UInt32_ptr, &AtomicLoad_UInt32_semantics };

/// atomicIncrement with UInt32, MemorySemantics
Variable AtomicIncrement_UInt32_ptr;
Variable AtomicIncrement_UInt32_semantics;
Function AtomicIncrement_UInt32;
inline constexpr std::array AtomicIncrement_UInt32_args = { &AtomicIncrement_UInt32_ptr, &AtomicIncrement_UInt32_semantics };

/// atomicDecrement with UInt32, MemorySemantics
Variable AtomicDecrement_UInt32_ptr;
Variable AtomicDecrement_UInt32_semantics;
Function AtomicDecrement_UInt32;
inline constexpr std::array AtomicDecrement_UInt32_args = { &AtomicDecrement_UInt32_ptr, &AtomicDecrement_UInt32_semantics };

/// atomicLoad with Int32, MemorySemantics
Variable AtomicLoad_Int32_ptr;
Variable AtomicLoad_Int32_semantics;
Function AtomicLoad_Int32;
inline constexpr std::array AtomicLoad_Int32_args = { &AtomicLoad_Int32_ptr, &AtomicLoad_Int32_semantics };

/// atomicIncrement with Int32, MemorySemantics
Variable AtomicIncrement_Int32_ptr;
Variable AtomicIncrement_Int32_semantics;
Function AtomicIncrement_Int32;
inline constexpr std::array AtomicIncrement_Int32_args = { &AtomicIncrement_Int32_ptr, &AtomicIncrement_Int32_semantics };

/// atomicDecrement with Int32, MemorySemantics
Variable AtomicDecrement_Int32_ptr;
Variable AtomicDecrement_Int32_semantics;
Function AtomicDecrement_Int32;
inline constexpr std::array AtomicDecrement_Int32_args = { &AtomicDecrement_Int32_ptr, &AtomicDecrement_Int32_semantics };

/// atomicLoad with UInt16, MemorySemantics
Variable AtomicLoad_UInt16_ptr;
Variable AtomicLoad_UInt16_semantics;
Function AtomicLoad_UInt16;
inline constexpr std::array AtomicLoad_UInt16_args = { &AtomicLoad_UInt16_ptr, &AtomicLoad_UInt16_semantics };

/// atomicIncrement with UInt16, MemorySemantics
Variable AtomicIncrement_UInt16_ptr;
Variable AtomicIncrement_UInt16_semantics;
Function AtomicIncrement_UInt16;
inline constexpr std::array AtomicIncrement_UInt16_args = { &AtomicIncrement_UInt16_ptr, &AtomicIncrement_UInt16_semantics };

/// atomicDecrement with UInt16, MemorySemantics
Variable AtomicDecrement_UInt16_ptr;
Variable AtomicDecrement_UInt16_semantics;
Function AtomicDecrement_UInt16;
inline constexpr std::array AtomicDecrement_UInt16_args = { &AtomicDecrement_UInt16_ptr, &AtomicDecrement_UInt16_semantics };

/// atomicLoad with Int16, MemorySemantics
Variable AtomicLoad_Int16_ptr;
Variable AtomicLoad_Int16_semantics;
Function AtomicLoad_Int16;
inline constexpr std::array AtomicLoad_Int16_args = { &AtomicLoad_Int16_ptr, &AtomicLoad_Int16_semantics };

/// atomicIncrement with Int16, MemorySemantics
Variable AtomicIncrement_Int16_ptr;
Variable AtomicIncrement_Int16_semantics;
Function AtomicIncrement_Int16;
inline constexpr std::array AtomicIncrement_Int16_args = { &AtomicIncrement_Int16_ptr, &AtomicIncrement_Int16_semantics };

/// atomicDecrement with Int16, MemorySemantics
Variable AtomicDecrement_Int16_ptr;
Variable AtomicDecrement_Int16_semantics;
Function AtomicDecrement_Int16;
inline constexpr std::array AtomicDecrement_Int16_args = { &AtomicDecrement_Int16_ptr, &AtomicDecrement_Int16_semantics };

/// atomicStore with UInt32, UInt32, MemorySemantics
Variable AtomicStore_UInt32_ptr;
Variable AtomicStore_UInt32_value;
Variable AtomicStore_UInt32_semantics;
Function AtomicStore_UInt32;
inline constexpr std::array AtomicStore_UInt32_args = { &AtomicStore_UInt32_ptr, &AtomicStore_UInt32_value, &AtomicStore_UInt32_semantics };

/// atomicExchange with UInt32, UInt32, MemorySemantics
Variable AtomicExchange_UInt32_ptr;
Variable AtomicExchange_UInt32_value;
Variable AtomicExchange_UInt32_semantics;
Function AtomicExchange_UInt32;
inline constexpr std::array AtomicExchange_UInt32_args = { &AtomicExchange_UInt32_ptr, &AtomicExchange_UInt32_value, &AtomicExchange_UInt32_semantics };

/// atomicAdd with UInt32, UInt32, MemorySemantics
Variable AtomicAdd_UInt32_ptr;
Variable AtomicAdd_UInt32_value;
Variable AtomicAdd_UInt32_semantics;
Function AtomicAdd_UInt32;
inline constexpr std::array AtomicAdd_UInt32_args = { &AtomicAdd_UInt32_ptr, &AtomicAdd_UInt32_value, &AtomicAdd_UInt32_semantics };

/// atomicSubtract with UInt32, UInt32, MemorySemantics
Variable AtomicSubtract_UInt32_ptr;
Variable AtomicSubtract_UInt32_value;
Variable AtomicSubtract_UInt32_semantics;
Function AtomicSubtract_UInt32;
inline constexpr std::array AtomicSubtract_UInt32_args = { &AtomicSubtract_UInt32_ptr, &AtomicSubtract_UInt32_value, &AtomicSubtract_UInt32_semantics };

/// atomicAnd with UInt32, UInt32, MemorySemantics
Variable AtomicAnd_UInt32_ptr;
Variable AtomicAnd_UInt32_value;
Variable AtomicAnd_UInt32_semantics;
Function AtomicAnd_UInt32;
inline constexpr std::array AtomicAnd_UInt32_args = { &AtomicAnd_UInt32_ptr, &AtomicAnd_UInt32_value, &AtomicAnd_UInt32_semantics };

/// atomicOr with UInt32, UInt32, MemorySemantics
Variable AtomicOr_UInt32_ptr;
Variable AtomicOr_UInt32_value;
Variable AtomicOr_UInt32_semantics;
Function AtomicOr_UInt32;
inline constexpr std::array AtomicOr_UInt32_args = { &AtomicOr_UInt32_ptr, &AtomicOr_UInt32_value, &AtomicOr_UInt32_semantics };

/// atomicXor with UInt32, UInt32, MemorySemantics
Variable AtomicXor_UInt32_ptr;
Variable AtomicXor_UInt32_value;
Variable AtomicXor_UInt32_semantics;
Function AtomicXor_UInt32;
inline constexpr std::array AtomicXor_UInt32_args = { &AtomicXor_UInt32_ptr, &AtomicXor_UInt32_value, &AtomicXor_UInt32_semantics };

/// atomicStore with Int32, Int32, MemorySemantics
Variable AtomicStore_Int32_ptr;
Variable AtomicStore_Int32_value;
Variable AtomicStore_Int32_semantics;
Function AtomicStore_Int32;
inline constexpr std::array AtomicStore_Int32_args = { &AtomicStore_Int32_ptr, &AtomicStore_Int32_value, &AtomicStore_Int32_semantics };

/// atomicExchange with Int32, Int32, MemorySemantics
Variable AtomicExchange_Int32_ptr;
Variable AtomicExchange_Int32_value;
Variable AtomicExchange_Int32_semantics;
Function AtomicExchange_Int32;
inline constexpr std::array AtomicExchange_Int32_args = { &AtomicExchange_Int32_ptr, &AtomicExchange_Int32_value, &AtomicExchange_Int32_semantics };

/// atomicAdd with Int32, Int32, MemorySemantics
Variable AtomicAdd_Int32_ptr;
Variable AtomicAdd_Int32_value;
Variable AtomicAdd_Int32_semantics;
Function AtomicAdd_Int32;
inline constexpr std::array AtomicAdd_Int32_args = { &AtomicAdd_Int32_ptr, &AtomicAdd_Int32_value, &AtomicAdd_Int32_semantics };

/// atomicSubtract with Int32, Int32, MemorySemantics
Variable AtomicSubtract_Int32_ptr;
Variable AtomicSubtract_Int32_value;
Variable AtomicSubtract_Int32_semantics;
Function AtomicSubtract_Int32;
inline constexpr std::array AtomicSubtract_Int32_args = { &AtomicSubtract_Int32_ptr, &AtomicSubtract_Int32_value, &AtomicSubtract_Int32_semantics };

/// atomicAnd with Int32, Int32, MemorySemantics
Variable AtomicAnd_Int32_ptr;
Variable AtomicAnd_Int32_value;
Variable AtomicAnd_Int32_semantics;
Function AtomicAnd_Int32;
inline constexpr std::array AtomicAnd_Int32_args = { &AtomicAnd_Int32_ptr, &AtomicAnd_Int32_value, &AtomicAnd_Int32_semantics };

/// atomicOr with Int32, Int32, MemorySemantics
Variable AtomicOr_Int32_ptr;
Variable AtomicOr_Int32_value;
Variable AtomicOr_Int32_semantics;
Function AtomicOr_Int32;
inline constexpr std::array AtomicOr_Int32_args = { &AtomicOr_Int32_ptr, &AtomicOr_Int32_value, &AtomicOr_Int32_semantics };

/// atomicXor with Int32, Int32, MemorySemantics
Variable AtomicXor_Int32_ptr;
Variable AtomicXor_Int32_value;
Variable AtomicXor_Int32_semantics;
Function AtomicXor_Int32;
inline constexpr std::array AtomicXor_Int32_args = { &AtomicXor_Int32_ptr, &AtomicXor_Int32_value, &AtomicXor_Int32_semantics };

/// atomicStore with UInt16, UInt16, MemorySemantics
Variable AtomicStore_UInt16_ptr;
Variable AtomicStore_UInt16_value;
Variable AtomicStore_UInt16_semantics;
Function AtomicStore_UInt16;
inline constexpr std::array AtomicStore_UInt16_args = { &AtomicStore_UInt16_ptr, &AtomicStore_UInt16_value, &AtomicStore_UInt16_semantics };

/// atomicExchange with UInt16, UInt16, MemorySemantics
Variable AtomicExchange_UInt16_ptr;
Variable AtomicExchange_UInt16_value;
Variable AtomicExchange_UInt16_semantics;
Function AtomicExchange_UInt16;
inline constexpr std::array AtomicExchange_UInt16_args = { &AtomicExchange_UInt16_ptr, &AtomicExchange_UInt16_value, &AtomicExchange_UInt16_semantics };

/// atomicAdd with UInt16, UInt16, MemorySemantics
Variable AtomicAdd_UInt16_ptr;
Variable AtomicAdd_UInt16_value;
Variable AtomicAdd_UInt16_semantics;
Function AtomicAdd_UInt16;
inline constexpr std::array AtomicAdd_UInt16_args = { &AtomicAdd_UInt16_ptr, &AtomicAdd_UInt16_value, &AtomicAdd_UInt16_semantics };

/// atomicSubtract with UInt16, UInt16, MemorySemantics
Variable AtomicSubtract_UInt16_ptr;
Variable AtomicSubtract_UInt16_value;
Variable AtomicSubtract_UInt16_semantics;
Function AtomicSubtract_UInt16;
inline constexpr std::array AtomicSubtract_UInt16_args = { &AtomicSubtract_UInt16_ptr, &AtomicSubtract_UInt16_value, &AtomicSubtract_UInt16_semantics };

/// atomicAnd with UInt16, UInt16, MemorySemantics
Variable AtomicAnd_UInt16_ptr;
Variable AtomicAnd_UInt16_value;
Variable AtomicAnd_UInt16_semantics;
Function AtomicAnd_UInt16;
inline constexpr std::array AtomicAnd_UInt16_args = { &AtomicAnd_UInt16_ptr, &AtomicAnd_UInt16_value, &AtomicAnd_UInt16_semantics };

/// atomicOr with UInt16, UInt16, MemorySemantics
Variable AtomicOr_UInt16_ptr;
Variable AtomicOr_UInt16_value;
Variable AtomicOr_UInt16_semantics;
Function AtomicOr_UInt16;
inline constexpr std::array AtomicOr_UInt16_args = { &AtomicOr_UInt16_ptr, &AtomicOr_UInt16_value, &AtomicOr_UInt16_semantics };

/// atomicXor with UInt16, UInt16, MemorySemantics
Variable AtomicXor_UInt16_ptr;
Variable AtomicXor_UInt16_value;
Variable AtomicXor_UInt16_semantics;
Function AtomicXor_UInt16;
inline constexpr std::array AtomicXor_UInt16_args = { &AtomicXor_UInt16_ptr, &AtomicXor_UInt16_value, &AtomicXor_UInt16_semantics };

/// atomicStore with Int16, Int16, MemorySemantics
Variable AtomicStore_Int16_ptr;
Variable AtomicStore_Int16_value;
Variable AtomicStore_Int16_semantics;
Function AtomicStore_Int16;
inline constexpr std::array AtomicStore_Int16_args = { &AtomicStore_Int16_ptr, &AtomicStore_Int16_value, &AtomicStore_Int16_semantics };

/// atomicExchange with Int16, Int16, MemorySemantics
Variable AtomicExchange_Int16_ptr;
Variable AtomicExchange_Int16_value;
Variable AtomicExchange_Int16_semantics;
Function AtomicExchange_Int16;
inline constexpr std::array AtomicExchange_Int16_args = { &AtomicExchange_Int16_ptr, &AtomicExchange_Int16_value, &AtomicExchange_Int16_semantics };

/// atomicAdd with Int16, Int16, MemorySemantics
Variable AtomicAdd_Int16_ptr;
Variable AtomicAdd_Int16_value;
Variable AtomicAdd_Int16_semantics;
Function AtomicAdd_Int16;
inline constexpr std::array AtomicAdd_Int16_args = { &AtomicAdd_Int16_ptr, &AtomicAdd_Int16_value, &AtomicAdd_Int16_semantics };

/// atomicSubtract with Int16, Int16, MemorySemantics
Variable AtomicSubtract_Int16_ptr;
Variable AtomicSubtract_Int16_value;
Variable AtomicSubtract_Int16_semantics;
Function AtomicSubtract_Int16;
inline constexpr std::array AtomicSubtract_Int16_args = { &AtomicSubtract_Int16_ptr, &AtomicSubtract_Int16_value, &AtomicSubtract_Int16_semantics };

/// atomicAnd with Int16, Int16, MemorySemantics
Variable AtomicAnd_Int16_ptr;
Variable AtomicAnd_Int16_value;
Variable AtomicAnd_Int16_semantics;
Function AtomicAnd_Int16;
inline constexpr std::array AtomicAnd_Int16_args = { &AtomicAnd_Int16_ptr, &AtomicAnd_Int16_value, &AtomicAnd_Int16_semantics };

/// atomicOr with Int16, Int16, MemorySemantics
Variable AtomicOr_Int16_ptr;
Variable AtomicOr_Int16_value;
Variable AtomicOr_Int16_semantics;
Function AtomicOr_Int16;
inline constexpr std::array AtomicOr_Int16_args = { &AtomicOr_Int16_ptr, &AtomicOr_Int16_value, &AtomicOr_Int16_semantics };

/// atomicXor with Int16, Int16, MemorySemantics
Variable AtomicXor_Int16_ptr;
Variable AtomicXor_Int16_value;
Variable AtomicXor_Int16_semantics;
Function AtomicXor_Int16;
inline constexpr std::array AtomicXor_Int16_args = { &AtomicXor_Int16_ptr, &AtomicXor_Int16_value, &AtomicXor_Int16_semantics };

/// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
Variable AtomicCompareExchange_UInt32_ptr;
Variable AtomicCompareExchange_UInt32_value;
Variable AtomicCompareExchange_UInt32_compare;
Variable AtomicCompareExchange_UInt32_semantics;
Function AtomicCompareExchange_UInt32;
inline constexpr std::array AtomicCompareExchange_UInt32_args = { &AtomicCompareExchange_UInt32_ptr, &AtomicCompareExchange_UInt32_value, &AtomicCompareExchange_UInt32_compare, &AtomicCompareExchange_UInt32_semantics };

/// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
Variable AtomicCompareExchange_Int32_ptr;
Variable AtomicCompareExchange_Int32_value;
Variable AtomicCompareExchange_Int32_compare;
Variable AtomicCompareExchange_Int32_semantics;
Function AtomicCompareExchange_Int32;
inline constexpr std::array AtomicCompareExchange_Int32_args = { &AtomicCompareExchange_Int32_ptr, &AtomicCompareExchange_Int32_value, &AtomicCompareExchange_Int32_compare, &AtomicCompareExchange_Int32_semantics };

/// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
Variable AtomicCompareExchange_UInt16_ptr;
Variable AtomicCompareExchange_UInt16_value;
Variable AtomicCompareExchange_UInt16_compare;
Variable AtomicCompareExchange_UInt16_semantics;
Function AtomicCompareExchange_UInt16;
inline constexpr std::array AtomicCompareExchange_UInt16_args = { &AtomicCompareExchange_UInt16_ptr, &AtomicCompareExchange_UInt16_value, &AtomicCompareExchange_UInt16_compare, &AtomicCompareExchange_UInt16_semantics };

/// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
Variable AtomicCompareExchange_Int16_ptr;
Variable AtomicCompareExchange_Int16_value;
Variable AtomicCompareExchange_Int16_compare;
Variable AtomicCompareExchange_Int16_semantics;
Function AtomicCompareExchange_Int16;
inline constexpr std::array AtomicCompareExchange_Int16_args = { &AtomicCompareExchange_Int16_ptr, &AtomicCompareExchange_Int16_value, &AtomicCompareExchange_Int16_compare, &AtomicCompareExchange_Int16_semantics };

/// bitInsert with UInt16, UInt16, UInt16, UInt16
Variable BitInsert_UInt16_base;
Variable BitInsert_UInt16_value;
Variable BitInsert_UInt16_offset;
Variable BitInsert_UInt16_count;
Function BitInsert_UInt16;
inline constexpr std::array BitInsert_UInt16_args = { &BitInsert_UInt16_base, &BitInsert_UInt16_value, &BitInsert_UInt16_offset, &BitInsert_UInt16_count };

/// bitInsert with UInt32, UInt32, UInt32, UInt32
Variable BitInsert_UInt32_base;
Variable BitInsert_UInt32_value;
Variable BitInsert_UInt32_offset;
Variable BitInsert_UInt32_count;
Function BitInsert_UInt32;
inline constexpr std::array BitInsert_UInt32_args = { &BitInsert_UInt32_base, &BitInsert_UInt32_value, &BitInsert_UInt32_offset, &BitInsert_UInt32_count };

/// bitExtract with UInt32, UInt32, UInt32
Variable BitExtract_UInt32_base;
Variable BitExtract_UInt32_offset;
Variable BitExtract_UInt32_count;
Function BitExtract_UInt32;
inline constexpr std::array BitExtract_UInt32_args = { &BitExtract_UInt32_base, &BitExtract_UInt32_offset, &BitExtract_UInt32_count };

/// bitExtract with Int32, Int32, Int32
Variable BitExtract_Int32_base;
Variable BitExtract_Int32_offset;
Variable BitExtract_Int32_count;
Function BitExtract_Int32;
inline constexpr std::array BitExtract_Int32_args = { &BitExtract_Int32_base, &BitExtract_Int32_offset, &BitExtract_Int32_count };

/// bitExtract with UInt16, UInt16, UInt16
Variable BitExtract_UInt16_base;
Variable BitExtract_UInt16_offset;
Variable BitExtract_UInt16_count;
Function BitExtract_UInt16;
inline constexpr std::array BitExtract_UInt16_args = { &BitExtract_UInt16_base, &BitExtract_UInt16_offset, &BitExtract_UInt16_count };

/// bitExtract with Int16, Int16, Int16
Variable BitExtract_Int16_base;
Variable BitExtract_Int16_offset;
Variable BitExtract_Int16_count;
Function BitExtract_Int16;
inline constexpr std::array BitExtract_Int16_args = { &BitExtract_Int16_base, &BitExtract_Int16_offset, &BitExtract_Int16_count };

/// bitReverse with UInt32
Variable BitReverse_UInt32_base;
Function BitReverse_UInt32;
inline constexpr std::array BitReverse_UInt32_args = { &BitReverse_UInt32_base };

/// bitReverse with Int32
Variable BitReverse_Int32_base;
Function BitReverse_Int32;
inline constexpr std::array BitReverse_Int32_args = { &BitReverse_Int32_base };

/// bitReverse with UInt16
Variable BitReverse_UInt16_base;
Function BitReverse_UInt16;
inline constexpr std::array BitReverse_UInt16_args = { &BitReverse_UInt16_base };

/// bitReverse with Int16
Variable BitReverse_Int16_base;
Function BitReverse_Int16;
inline constexpr std::array BitReverse_Int16_args = { &BitReverse_Int16_base };

/// bitCount with UInt32
Variable BitCount_UInt32_base;
Function BitCount_UInt32;
inline constexpr std::array BitCount_UInt32_args = { &BitCount_UInt32_base };

/// bitCount with Int32
Variable BitCount_Int32_base;
Function BitCount_Int32;
inline constexpr std::array BitCount_Int32_args = { &BitCount_Int32_base };

/// bitCount with UInt16
Variable BitCount_UInt16_base;
Function BitCount_UInt16;
inline constexpr std::array BitCount_UInt16_args = { &BitCount_UInt16_base };

/// bitCount with Int16
Variable BitCount_Int16_base;
Function BitCount_Int16;
inline constexpr std::array BitCount_Int16_args = { &BitCount_Int16_base };

/// executionBarrier
Function ExecutionBarrier;

/// executionBarrierSubgroup
Function ExecutionBarrierSubgroup;

/// executionBarrierWorkgroup
Function ExecutionBarrierWorkgroup;

/// memoryBarrier
Function MemoryBarrier;

/// memoryBarrierBuffer
Function MemoryBarrierBuffer;

/// memoryBarrierTexture
Function MemoryBarrierTexture;

/// memoryBarrierAtomic
Function MemoryBarrierAtomic;

/// memoryBarrierSubgroup
Function MemoryBarrierSubgroup;

/// memoryBarrierWorkgroup
Function MemoryBarrierWorkgroup;

/// textureGetSize with Texture1D
Variable TextureGetSize_Texture1D_texture;
Function TextureGetSize_Texture1D;
inline constexpr std::array TextureGetSize_Texture1D_args = { &TextureGetSize_Texture1D_texture };

/// textureGetSize with Texture2D
Variable TextureGetSize_Texture2D_texture;
Function TextureGetSize_Texture2D;
inline constexpr std::array TextureGetSize_Texture2D_args = { &TextureGetSize_Texture2D_texture };

/// textureGetSize with Texture3D
Variable TextureGetSize_Texture3D_texture;
Function TextureGetSize_Texture3D;
inline constexpr std::array TextureGetSize_Texture3D_args = { &TextureGetSize_Texture3D_texture };

/// textureGetSize with TextureCube
Variable TextureGetSize_TextureCube_texture;
Function TextureGetSize_TextureCube;
inline constexpr std::array TextureGetSize_TextureCube_args = { &TextureGetSize_TextureCube_texture };

/// textureGetSize with Texture1DArray
Variable TextureGetSize_Texture1DArray_texture;
Function TextureGetSize_Texture1DArray;
inline constexpr std::array TextureGetSize_Texture1DArray_args = { &TextureGetSize_Texture1DArray_texture };

/// textureGetSize with Texture2DArray
Variable TextureGetSize_Texture2DArray_texture;
Function TextureGetSize_Texture2DArray;
inline constexpr std::array TextureGetSize_Texture2DArray_args = { &TextureGetSize_Texture2DArray_texture };

/// textureGetSize with TextureCubeArray
Variable TextureGetSize_TextureCubeArray_texture;
Function TextureGetSize_TextureCubeArray;
inline constexpr std::array TextureGetSize_TextureCubeArray_args = { &TextureGetSize_TextureCubeArray_texture };

/// textureGetSizeMip with Texture1D, UInt32
Variable TextureGetSizeMip_Texture1D_texture;
Variable TextureGetSizeMip_Texture1D_mip;
Function TextureGetSizeMip_Texture1D;
inline constexpr std::array TextureGetSizeMip_Texture1D_args = { &TextureGetSizeMip_Texture1D_texture, &TextureGetSizeMip_Texture1D_mip };

/// textureGetSizeMip with Texture2D, UInt32
Variable TextureGetSizeMip_Texture2D_texture;
Variable TextureGetSizeMip_Texture2D_mip;
Function TextureGetSizeMip_Texture2D;
inline constexpr std::array TextureGetSizeMip_Texture2D_args = { &TextureGetSizeMip_Texture2D_texture, &TextureGetSizeMip_Texture2D_mip };

/// textureGetSizeMip with Texture3D, UInt32
Variable TextureGetSizeMip_Texture3D_texture;
Variable TextureGetSizeMip_Texture3D_mip;
Function TextureGetSizeMip_Texture3D;
inline constexpr std::array TextureGetSizeMip_Texture3D_args = { &TextureGetSizeMip_Texture3D_texture, &TextureGetSizeMip_Texture3D_mip };

/// textureGetSizeMip with TextureCube, UInt32
Variable TextureGetSizeMip_TextureCube_texture;
Variable TextureGetSizeMip_TextureCube_mip;
Function TextureGetSizeMip_TextureCube;
inline constexpr std::array TextureGetSizeMip_TextureCube_args = { &TextureGetSizeMip_TextureCube_texture, &TextureGetSizeMip_TextureCube_mip };

/// textureGetSizeMip with Texture1DArray, UInt32
Variable TextureGetSizeMip_Texture1DArray_texture;
Variable TextureGetSizeMip_Texture1DArray_mip;
Function TextureGetSizeMip_Texture1DArray;
inline constexpr std::array TextureGetSizeMip_Texture1DArray_args = { &TextureGetSizeMip_Texture1DArray_texture, &TextureGetSizeMip_Texture1DArray_mip };

/// textureGetSizeMip with Texture2DArray, UInt32
Variable TextureGetSizeMip_Texture2DArray_texture;
Variable TextureGetSizeMip_Texture2DArray_mip;
Function TextureGetSizeMip_Texture2DArray;
inline constexpr std::array TextureGetSizeMip_Texture2DArray_args = { &TextureGetSizeMip_Texture2DArray_texture, &TextureGetSizeMip_Texture2DArray_mip };

/// textureGetSizeMip with TextureCubeArray, UInt32
Variable TextureGetSizeMip_TextureCubeArray_texture;
Variable TextureGetSizeMip_TextureCubeArray_mip;
Function TextureGetSizeMip_TextureCubeArray;
inline constexpr std::array TextureGetSizeMip_TextureCubeArray_args = { &TextureGetSizeMip_TextureCubeArray_texture, &TextureGetSizeMip_TextureCubeArray_mip };

/// textureGetMips with Texture1D
Variable TextureGetMips_Texture1D_texture;
Function TextureGetMips_Texture1D;
inline constexpr std::array TextureGetMips_Texture1D_args = { &TextureGetMips_Texture1D_texture };

/// textureGetMips with Texture2D
Variable TextureGetMips_Texture2D_texture;
Function TextureGetMips_Texture2D;
inline constexpr std::array TextureGetMips_Texture2D_args = { &TextureGetMips_Texture2D_texture };

/// textureGetMips with Texture3D
Variable TextureGetMips_Texture3D_texture;
Function TextureGetMips_Texture3D;
inline constexpr std::array TextureGetMips_Texture3D_args = { &TextureGetMips_Texture3D_texture };

/// textureGetMips with TextureCube
Variable TextureGetMips_TextureCube_texture;
Function TextureGetMips_TextureCube;
inline constexpr std::array TextureGetMips_TextureCube_args = { &TextureGetMips_TextureCube_texture };

/// textureGetMips with Texture1DArray
Variable TextureGetMips_Texture1DArray_texture;
Function TextureGetMips_Texture1DArray;
inline constexpr std::array TextureGetMips_Texture1DArray_args = { &TextureGetMips_Texture1DArray_texture };

/// textureGetMips with Texture2DArray
Variable TextureGetMips_Texture2DArray_texture;
Function TextureGetMips_Texture2DArray;
inline constexpr std::array TextureGetMips_Texture2DArray_args = { &TextureGetMips_Texture2DArray_texture };

/// textureGetMips with TextureCubeArray
Variable TextureGetMips_TextureCubeArray_texture;
Function TextureGetMips_TextureCubeArray;
inline constexpr std::array TextureGetMips_TextureCubeArray_args = { &TextureGetMips_TextureCubeArray_texture };

/// textureGetSamples with Texture2DMS
Variable TextureGetSamples_Texture2DMS_texture;
Function TextureGetSamples_Texture2DMS;
inline constexpr std::array TextureGetSamples_Texture2DMS_args = { &TextureGetSamples_Texture2DMS_texture };

/// textureGetSamples with Texture2DMSArray
Variable TextureGetSamples_Texture2DMSArray_texture;
Function TextureGetSamples_Texture2DMSArray;
inline constexpr std::array TextureGetSamples_Texture2DMSArray_args = { &TextureGetSamples_Texture2DMSArray_texture };

/// textureGetSampledMip with Texture1D, Sampler, Float32
Variable TextureGetSampledMip_Texture1D_texture;
Variable TextureGetSampledMip_Texture1D_sampler;
Variable TextureGetSampledMip_Texture1D_coordinate;
Function TextureGetSampledMip_Texture1D;
inline constexpr std::array TextureGetSampledMip_Texture1D_args = { &TextureGetSampledMip_Texture1D_texture, &TextureGetSampledMip_Texture1D_sampler, &TextureGetSampledMip_Texture1D_coordinate };

/// textureGetSampledMip with Texture1D, Float32
Variable SampledTextureGetSampledMip_Texture1D_texture;
Variable SampledTextureGetSampledMip_Texture1D_coordinate;
Function SampledTextureGetSampledMip_Texture1D;
inline constexpr std::array SampledTextureGetSampledMip_Texture1D_args = { &SampledTextureGetSampledMip_Texture1D_texture, &SampledTextureGetSampledMip_Texture1D_coordinate };

/// textureGetSampledMip with Texture2D, Sampler, Float32x2
Variable TextureGetSampledMip_Texture2D_texture;
Variable TextureGetSampledMip_Texture2D_sampler;
Variable TextureGetSampledMip_Texture2D_coordinate;
Function TextureGetSampledMip_Texture2D;
inline constexpr std::array TextureGetSampledMip_Texture2D_args = { &TextureGetSampledMip_Texture2D_texture, &TextureGetSampledMip_Texture2D_sampler, &TextureGetSampledMip_Texture2D_coordinate };

/// textureGetSampledMip with Texture2D, Float32x2
Variable SampledTextureGetSampledMip_Texture2D_texture;
Variable SampledTextureGetSampledMip_Texture2D_coordinate;
Function SampledTextureGetSampledMip_Texture2D;
inline constexpr std::array SampledTextureGetSampledMip_Texture2D_args = { &SampledTextureGetSampledMip_Texture2D_texture, &SampledTextureGetSampledMip_Texture2D_coordinate };

/// textureGetSampledMip with Texture3D, Sampler, Float32x3
Variable TextureGetSampledMip_Texture3D_texture;
Variable TextureGetSampledMip_Texture3D_sampler;
Variable TextureGetSampledMip_Texture3D_coordinate;
Function TextureGetSampledMip_Texture3D;
inline constexpr std::array TextureGetSampledMip_Texture3D_args = { &TextureGetSampledMip_Texture3D_texture, &TextureGetSampledMip_Texture3D_sampler, &TextureGetSampledMip_Texture3D_coordinate };

/// textureGetSampledMip with Texture3D, Float32x3
Variable SampledTextureGetSampledMip_Texture3D_texture;
Variable SampledTextureGetSampledMip_Texture3D_coordinate;
Function SampledTextureGetSampledMip_Texture3D;
inline constexpr std::array SampledTextureGetSampledMip_Texture3D_args = { &SampledTextureGetSampledMip_Texture3D_texture, &SampledTextureGetSampledMip_Texture3D_coordinate };

/// textureGetSampledMip with TextureCube, Sampler, Float32x3
Variable TextureGetSampledMip_TextureCube_texture;
Variable TextureGetSampledMip_TextureCube_sampler;
Variable TextureGetSampledMip_TextureCube_coordinate;
Function TextureGetSampledMip_TextureCube;
inline constexpr std::array TextureGetSampledMip_TextureCube_args = { &TextureGetSampledMip_TextureCube_texture, &TextureGetSampledMip_TextureCube_sampler, &TextureGetSampledMip_TextureCube_coordinate };

/// textureGetSampledMip with TextureCube, Float32x3
Variable SampledTextureGetSampledMip_TextureCube_texture;
Variable SampledTextureGetSampledMip_TextureCube_coordinate;
Function SampledTextureGetSampledMip_TextureCube;
inline constexpr std::array SampledTextureGetSampledMip_TextureCube_args = { &SampledTextureGetSampledMip_TextureCube_texture, &SampledTextureGetSampledMip_TextureCube_coordinate };

/// textureGetSampledMip with Texture1DArray, Sampler, Float32x2
Variable TextureGetSampledMip_Texture1DArray_texture;
Variable TextureGetSampledMip_Texture1DArray_sampler;
Variable TextureGetSampledMip_Texture1DArray_coordinate;
Function TextureGetSampledMip_Texture1DArray;
inline constexpr std::array TextureGetSampledMip_Texture1DArray_args = { &TextureGetSampledMip_Texture1DArray_texture, &TextureGetSampledMip_Texture1DArray_sampler, &TextureGetSampledMip_Texture1DArray_coordinate };

/// textureGetSampledMip with Texture1DArray, Float32x2
Variable SampledTextureGetSampledMip_Texture1DArray_texture;
Variable SampledTextureGetSampledMip_Texture1DArray_coordinate;
Function SampledTextureGetSampledMip_Texture1DArray;
inline constexpr std::array SampledTextureGetSampledMip_Texture1DArray_args = { &SampledTextureGetSampledMip_Texture1DArray_texture, &SampledTextureGetSampledMip_Texture1DArray_coordinate };

/// textureGetSampledMip with Texture2DArray, Sampler, Float32x3
Variable TextureGetSampledMip_Texture2DArray_texture;
Variable TextureGetSampledMip_Texture2DArray_sampler;
Variable TextureGetSampledMip_Texture2DArray_coordinate;
Function TextureGetSampledMip_Texture2DArray;
inline constexpr std::array TextureGetSampledMip_Texture2DArray_args = { &TextureGetSampledMip_Texture2DArray_texture, &TextureGetSampledMip_Texture2DArray_sampler, &TextureGetSampledMip_Texture2DArray_coordinate };

/// textureGetSampledMip with Texture2DArray, Float32x3
Variable SampledTextureGetSampledMip_Texture2DArray_texture;
Variable SampledTextureGetSampledMip_Texture2DArray_coordinate;
Function SampledTextureGetSampledMip_Texture2DArray;
inline constexpr std::array SampledTextureGetSampledMip_Texture2DArray_args = { &SampledTextureGetSampledMip_Texture2DArray_texture, &SampledTextureGetSampledMip_Texture2DArray_coordinate };

/// textureGetSampledMip with TextureCubeArray, Sampler, Float32x4
Variable TextureGetSampledMip_TextureCubeArray_texture;
Variable TextureGetSampledMip_TextureCubeArray_sampler;
Variable TextureGetSampledMip_TextureCubeArray_coordinate;
Function TextureGetSampledMip_TextureCubeArray;
inline constexpr std::array TextureGetSampledMip_TextureCubeArray_args = { &TextureGetSampledMip_TextureCubeArray_texture, &TextureGetSampledMip_TextureCubeArray_sampler, &TextureGetSampledMip_TextureCubeArray_coordinate };

/// textureGetSampledMip with TextureCubeArray, Float32x4
Variable SampledTextureGetSampledMip_TextureCubeArray_texture;
Variable SampledTextureGetSampledMip_TextureCubeArray_coordinate;
Function SampledTextureGetSampledMip_TextureCubeArray;
inline constexpr std::array SampledTextureGetSampledMip_TextureCubeArray_args = { &SampledTextureGetSampledMip_TextureCubeArray_texture, &SampledTextureGetSampledMip_TextureCubeArray_coordinate };

/// textureLoad with Texture1D, Int32
Variable TextureLoad_Texture1D_texture;
Variable TextureLoad_Texture1D_coordinate;
Function TextureLoad_Texture1D;
inline constexpr std::array TextureLoad_Texture1D_args = { &TextureLoad_Texture1D_texture, &TextureLoad_Texture1D_coordinate };

/// textureLoadMip with Texture1D, Int32, Int32
Variable TextureLoadMip_Texture1D_texture;
Variable TextureLoadMip_Texture1D_coordinate;
Variable TextureLoadMip_Texture1D_mip;
Function TextureLoadMip_Texture1D;
inline constexpr std::array TextureLoadMip_Texture1D_args = { &TextureLoadMip_Texture1D_texture, &TextureLoadMip_Texture1D_coordinate, &TextureLoadMip_Texture1D_mip };

/// textureStore with Texture1D, Int32, Float32x4
Variable TextureStore_Texture1D_texture;
Variable TextureStore_Texture1D_coordinate;
Variable TextureStore_Texture1D_value;
Function TextureStore_Texture1D;
inline constexpr std::array TextureStore_Texture1D_args = { &TextureStore_Texture1D_texture, &TextureStore_Texture1D_coordinate, &TextureStore_Texture1D_value };

/// textureStoreMip with Texture1D, Int32, Int32, Float32x4
Variable TextureStoreMip_Texture1D_texture;
Variable TextureStoreMip_Texture1D_coordinate;
Variable TextureStoreMip_Texture1D_mip;
Variable TextureStoreMip_Texture1D_value;
Function TextureStoreMip_Texture1D;
inline constexpr std::array TextureStoreMip_Texture1D_args = { &TextureStoreMip_Texture1D_texture, &TextureStoreMip_Texture1D_coordinate, &TextureStoreMip_Texture1D_mip, &TextureStoreMip_Texture1D_value };

/// textureLoad with Texture2D, Int32x2
Variable TextureLoad_Texture2D_texture;
Variable TextureLoad_Texture2D_coordinate;
Function TextureLoad_Texture2D;
inline constexpr std::array TextureLoad_Texture2D_args = { &TextureLoad_Texture2D_texture, &TextureLoad_Texture2D_coordinate };

/// textureLoadMip with Texture2D, Int32x2, Int32
Variable TextureLoadMip_Texture2D_texture;
Variable TextureLoadMip_Texture2D_coordinate;
Variable TextureLoadMip_Texture2D_mip;
Function TextureLoadMip_Texture2D;
inline constexpr std::array TextureLoadMip_Texture2D_args = { &TextureLoadMip_Texture2D_texture, &TextureLoadMip_Texture2D_coordinate, &TextureLoadMip_Texture2D_mip };

/// textureStore with Texture2D, Int32x2, Float32x4
Variable TextureStore_Texture2D_texture;
Variable TextureStore_Texture2D_coordinate;
Variable TextureStore_Texture2D_value;
Function TextureStore_Texture2D;
inline constexpr std::array TextureStore_Texture2D_args = { &TextureStore_Texture2D_texture, &TextureStore_Texture2D_coordinate, &TextureStore_Texture2D_value };

/// textureStoreMip with Texture2D, Int32x2, Int32, Float32x4
Variable TextureStoreMip_Texture2D_texture;
Variable TextureStoreMip_Texture2D_coordinate;
Variable TextureStoreMip_Texture2D_mip;
Variable TextureStoreMip_Texture2D_value;
Function TextureStoreMip_Texture2D;
inline constexpr std::array TextureStoreMip_Texture2D_args = { &TextureStoreMip_Texture2D_texture, &TextureStoreMip_Texture2D_coordinate, &TextureStoreMip_Texture2D_mip, &TextureStoreMip_Texture2D_value };

/// textureLoad with Texture3D, Int32x3
Variable TextureLoad_Texture3D_texture;
Variable TextureLoad_Texture3D_coordinate;
Function TextureLoad_Texture3D;
inline constexpr std::array TextureLoad_Texture3D_args = { &TextureLoad_Texture3D_texture, &TextureLoad_Texture3D_coordinate };

/// textureLoadMip with Texture3D, Int32x3, Int32
Variable TextureLoadMip_Texture3D_texture;
Variable TextureLoadMip_Texture3D_coordinate;
Variable TextureLoadMip_Texture3D_mip;
Function TextureLoadMip_Texture3D;
inline constexpr std::array TextureLoadMip_Texture3D_args = { &TextureLoadMip_Texture3D_texture, &TextureLoadMip_Texture3D_coordinate, &TextureLoadMip_Texture3D_mip };

/// textureStore with Texture3D, Int32x3, Float32x4
Variable TextureStore_Texture3D_texture;
Variable TextureStore_Texture3D_coordinate;
Variable TextureStore_Texture3D_value;
Function TextureStore_Texture3D;
inline constexpr std::array TextureStore_Texture3D_args = { &TextureStore_Texture3D_texture, &TextureStore_Texture3D_coordinate, &TextureStore_Texture3D_value };

/// textureStoreMip with Texture3D, Int32x3, Int32, Float32x4
Variable TextureStoreMip_Texture3D_texture;
Variable TextureStoreMip_Texture3D_coordinate;
Variable TextureStoreMip_Texture3D_mip;
Variable TextureStoreMip_Texture3D_value;
Function TextureStoreMip_Texture3D;
inline constexpr std::array TextureStoreMip_Texture3D_args = { &TextureStoreMip_Texture3D_texture, &TextureStoreMip_Texture3D_coordinate, &TextureStoreMip_Texture3D_mip, &TextureStoreMip_Texture3D_value };

/// textureLoad with TextureCube, Int32x3
Variable TextureLoad_TextureCube_texture;
Variable TextureLoad_TextureCube_coordinate;
Function TextureLoad_TextureCube;
inline constexpr std::array TextureLoad_TextureCube_args = { &TextureLoad_TextureCube_texture, &TextureLoad_TextureCube_coordinate };

/// textureLoadMip with TextureCube, Int32x3, Int32
Variable TextureLoadMip_TextureCube_texture;
Variable TextureLoadMip_TextureCube_coordinate;
Variable TextureLoadMip_TextureCube_mip;
Function TextureLoadMip_TextureCube;
inline constexpr std::array TextureLoadMip_TextureCube_args = { &TextureLoadMip_TextureCube_texture, &TextureLoadMip_TextureCube_coordinate, &TextureLoadMip_TextureCube_mip };

/// textureStore with TextureCube, Int32x3, Float32x4
Variable TextureStore_TextureCube_texture;
Variable TextureStore_TextureCube_coordinate;
Variable TextureStore_TextureCube_value;
Function TextureStore_TextureCube;
inline constexpr std::array TextureStore_TextureCube_args = { &TextureStore_TextureCube_texture, &TextureStore_TextureCube_coordinate, &TextureStore_TextureCube_value };

/// textureStoreMip with TextureCube, Int32x3, Int32, Float32x4
Variable TextureStoreMip_TextureCube_texture;
Variable TextureStoreMip_TextureCube_coordinate;
Variable TextureStoreMip_TextureCube_mip;
Variable TextureStoreMip_TextureCube_value;
Function TextureStoreMip_TextureCube;
inline constexpr std::array TextureStoreMip_TextureCube_args = { &TextureStoreMip_TextureCube_texture, &TextureStoreMip_TextureCube_coordinate, &TextureStoreMip_TextureCube_mip, &TextureStoreMip_TextureCube_value };

/// textureLoad with Texture1DArray, Int32x2
Variable TextureLoad_Texture1DArray_texture;
Variable TextureLoad_Texture1DArray_coordinate;
Function TextureLoad_Texture1DArray;
inline constexpr std::array TextureLoad_Texture1DArray_args = { &TextureLoad_Texture1DArray_texture, &TextureLoad_Texture1DArray_coordinate };

/// textureLoadMip with Texture1DArray, Int32x2, Int32
Variable TextureLoadMip_Texture1DArray_texture;
Variable TextureLoadMip_Texture1DArray_coordinate;
Variable TextureLoadMip_Texture1DArray_mip;
Function TextureLoadMip_Texture1DArray;
inline constexpr std::array TextureLoadMip_Texture1DArray_args = { &TextureLoadMip_Texture1DArray_texture, &TextureLoadMip_Texture1DArray_coordinate, &TextureLoadMip_Texture1DArray_mip };

/// textureStore with Texture1DArray, Int32x2, Float32x4
Variable TextureStore_Texture1DArray_texture;
Variable TextureStore_Texture1DArray_coordinate;
Variable TextureStore_Texture1DArray_value;
Function TextureStore_Texture1DArray;
inline constexpr std::array TextureStore_Texture1DArray_args = { &TextureStore_Texture1DArray_texture, &TextureStore_Texture1DArray_coordinate, &TextureStore_Texture1DArray_value };

/// textureStoreMip with Texture1DArray, Int32x2, Int32, Float32x4
Variable TextureStoreMip_Texture1DArray_texture;
Variable TextureStoreMip_Texture1DArray_coordinate;
Variable TextureStoreMip_Texture1DArray_mip;
Variable TextureStoreMip_Texture1DArray_value;
Function TextureStoreMip_Texture1DArray;
inline constexpr std::array TextureStoreMip_Texture1DArray_args = { &TextureStoreMip_Texture1DArray_texture, &TextureStoreMip_Texture1DArray_coordinate, &TextureStoreMip_Texture1DArray_mip, &TextureStoreMip_Texture1DArray_value };

/// textureLoad with Texture2DArray, Int32x3
Variable TextureLoad_Texture2DArray_texture;
Variable TextureLoad_Texture2DArray_coordinate;
Function TextureLoad_Texture2DArray;
inline constexpr std::array TextureLoad_Texture2DArray_args = { &TextureLoad_Texture2DArray_texture, &TextureLoad_Texture2DArray_coordinate };

/// textureLoadMip with Texture2DArray, Int32x3, Int32
Variable TextureLoadMip_Texture2DArray_texture;
Variable TextureLoadMip_Texture2DArray_coordinate;
Variable TextureLoadMip_Texture2DArray_mip;
Function TextureLoadMip_Texture2DArray;
inline constexpr std::array TextureLoadMip_Texture2DArray_args = { &TextureLoadMip_Texture2DArray_texture, &TextureLoadMip_Texture2DArray_coordinate, &TextureLoadMip_Texture2DArray_mip };

/// textureStore with Texture2DArray, Int32x3, Float32x4
Variable TextureStore_Texture2DArray_texture;
Variable TextureStore_Texture2DArray_coordinate;
Variable TextureStore_Texture2DArray_value;
Function TextureStore_Texture2DArray;
inline constexpr std::array TextureStore_Texture2DArray_args = { &TextureStore_Texture2DArray_texture, &TextureStore_Texture2DArray_coordinate, &TextureStore_Texture2DArray_value };

/// textureStoreMip with Texture2DArray, Int32x3, Int32, Float32x4
Variable TextureStoreMip_Texture2DArray_texture;
Variable TextureStoreMip_Texture2DArray_coordinate;
Variable TextureStoreMip_Texture2DArray_mip;
Variable TextureStoreMip_Texture2DArray_value;
Function TextureStoreMip_Texture2DArray;
inline constexpr std::array TextureStoreMip_Texture2DArray_args = { &TextureStoreMip_Texture2DArray_texture, &TextureStoreMip_Texture2DArray_coordinate, &TextureStoreMip_Texture2DArray_mip, &TextureStoreMip_Texture2DArray_value };

/// textureLoad with TextureCubeArray, Int32x4
Variable TextureLoad_TextureCubeArray_texture;
Variable TextureLoad_TextureCubeArray_coordinate;
Function TextureLoad_TextureCubeArray;
inline constexpr std::array TextureLoad_TextureCubeArray_args = { &TextureLoad_TextureCubeArray_texture, &TextureLoad_TextureCubeArray_coordinate };

/// textureLoadMip with TextureCubeArray, Int32x4, Int32
Variable TextureLoadMip_TextureCubeArray_texture;
Variable TextureLoadMip_TextureCubeArray_coordinate;
Variable TextureLoadMip_TextureCubeArray_mip;
Function TextureLoadMip_TextureCubeArray;
inline constexpr std::array TextureLoadMip_TextureCubeArray_args = { &TextureLoadMip_TextureCubeArray_texture, &TextureLoadMip_TextureCubeArray_coordinate, &TextureLoadMip_TextureCubeArray_mip };

/// textureStore with TextureCubeArray, Int32x4, Float32x4
Variable TextureStore_TextureCubeArray_texture;
Variable TextureStore_TextureCubeArray_coordinate;
Variable TextureStore_TextureCubeArray_value;
Function TextureStore_TextureCubeArray;
inline constexpr std::array TextureStore_TextureCubeArray_args = { &TextureStore_TextureCubeArray_texture, &TextureStore_TextureCubeArray_coordinate, &TextureStore_TextureCubeArray_value };

/// textureStoreMip with TextureCubeArray, Int32x4, Int32, Float32x4
Variable TextureStoreMip_TextureCubeArray_texture;
Variable TextureStoreMip_TextureCubeArray_coordinate;
Variable TextureStoreMip_TextureCubeArray_mip;
Variable TextureStoreMip_TextureCubeArray_value;
Function TextureStoreMip_TextureCubeArray;
inline constexpr std::array TextureStoreMip_TextureCubeArray_args = { &TextureStoreMip_TextureCubeArray_texture, &TextureStoreMip_TextureCubeArray_coordinate, &TextureStoreMip_TextureCubeArray_mip, &TextureStoreMip_TextureCubeArray_value };

/// textureLoad with Texture2DMS, Int32x2
Variable TextureLoad_Texture2DMS_texture;
Variable TextureLoad_Texture2DMS_coordinate;
Function TextureLoad_Texture2DMS;
inline constexpr std::array TextureLoad_Texture2DMS_args = { &TextureLoad_Texture2DMS_texture, &TextureLoad_Texture2DMS_coordinate };

/// textureLoadMip with Texture2DMS, Int32x2, Int32
Variable TextureLoadMip_Texture2DMS_texture;
Variable TextureLoadMip_Texture2DMS_coordinate;
Variable TextureLoadMip_Texture2DMS_mip;
Function TextureLoadMip_Texture2DMS;
inline constexpr std::array TextureLoadMip_Texture2DMS_args = { &TextureLoadMip_Texture2DMS_texture, &TextureLoadMip_Texture2DMS_coordinate, &TextureLoadMip_Texture2DMS_mip };

/// textureStore with Texture2DMS, Int32x2, Float32x4
Variable TextureStore_Texture2DMS_texture;
Variable TextureStore_Texture2DMS_coordinate;
Variable TextureStore_Texture2DMS_value;
Function TextureStore_Texture2DMS;
inline constexpr std::array TextureStore_Texture2DMS_args = { &TextureStore_Texture2DMS_texture, &TextureStore_Texture2DMS_coordinate, &TextureStore_Texture2DMS_value };

/// textureStoreMip with Texture2DMS, Int32x2, Int32, Float32x4
Variable TextureStoreMip_Texture2DMS_texture;
Variable TextureStoreMip_Texture2DMS_coordinate;
Variable TextureStoreMip_Texture2DMS_mip;
Variable TextureStoreMip_Texture2DMS_value;
Function TextureStoreMip_Texture2DMS;
inline constexpr std::array TextureStoreMip_Texture2DMS_args = { &TextureStoreMip_Texture2DMS_texture, &TextureStoreMip_Texture2DMS_coordinate, &TextureStoreMip_Texture2DMS_mip, &TextureStoreMip_Texture2DMS_value };

/// textureLoad with Texture2DMSArray, Int32x3
Variable TextureLoad_Texture2DMSArray_texture;
Variable TextureLoad_Texture2DMSArray_coordinate;
Function TextureLoad_Texture2DMSArray;
inline constexpr std::array TextureLoad_Texture2DMSArray_args = { &TextureLoad_Texture2DMSArray_texture, &TextureLoad_Texture2DMSArray_coordinate };

/// textureLoadMip with Texture2DMSArray, Int32x3, Int32
Variable TextureLoadMip_Texture2DMSArray_texture;
Variable TextureLoadMip_Texture2DMSArray_coordinate;
Variable TextureLoadMip_Texture2DMSArray_mip;
Function TextureLoadMip_Texture2DMSArray;
inline constexpr std::array TextureLoadMip_Texture2DMSArray_args = { &TextureLoadMip_Texture2DMSArray_texture, &TextureLoadMip_Texture2DMSArray_coordinate, &TextureLoadMip_Texture2DMSArray_mip };

/// textureStore with Texture2DMSArray, Int32x3, Float32x4
Variable TextureStore_Texture2DMSArray_texture;
Variable TextureStore_Texture2DMSArray_coordinate;
Variable TextureStore_Texture2DMSArray_value;
Function TextureStore_Texture2DMSArray;
inline constexpr std::array TextureStore_Texture2DMSArray_args = { &TextureStore_Texture2DMSArray_texture, &TextureStore_Texture2DMSArray_coordinate, &TextureStore_Texture2DMSArray_value };

/// textureStoreMip with Texture2DMSArray, Int32x3, Int32, Float32x4
Variable TextureStoreMip_Texture2DMSArray_texture;
Variable TextureStoreMip_Texture2DMSArray_coordinate;
Variable TextureStoreMip_Texture2DMSArray_mip;
Variable TextureStoreMip_Texture2DMSArray_value;
Function TextureStoreMip_Texture2DMSArray;
inline constexpr std::array TextureStoreMip_Texture2DMSArray_args = { &TextureStoreMip_Texture2DMSArray_texture, &TextureStoreMip_Texture2DMSArray_coordinate, &TextureStoreMip_Texture2DMSArray_mip, &TextureStoreMip_Texture2DMSArray_value };

/// textureFetch with Texture1D, Int32, UInt32
Variable TextureFetch_Texture1D_texture;
Variable TextureFetch_Texture1D_coordinate;
Variable TextureFetch_Texture1D_lod;
Function TextureFetch_Texture1D;
inline constexpr std::array TextureFetch_Texture1D_args = { &TextureFetch_Texture1D_texture, &TextureFetch_Texture1D_coordinate, &TextureFetch_Texture1D_lod };

/// textureFetchSample with Texture1D, Int32, UInt32, UInt32
Variable TextureFetchSample_Texture1D_texture;
Variable TextureFetchSample_Texture1D_coordinate;
Variable TextureFetchSample_Texture1D_lod;
Variable TextureFetchSample_Texture1D_sample;
Function TextureFetchSample_Texture1D;
inline constexpr std::array TextureFetchSample_Texture1D_args = { &TextureFetchSample_Texture1D_texture, &TextureFetchSample_Texture1D_coordinate, &TextureFetchSample_Texture1D_lod, &TextureFetchSample_Texture1D_sample };

/// textureFetch with Texture2D, Int32x2, UInt32
Variable TextureFetch_Texture2D_texture;
Variable TextureFetch_Texture2D_coordinate;
Variable TextureFetch_Texture2D_lod;
Function TextureFetch_Texture2D;
inline constexpr std::array TextureFetch_Texture2D_args = { &TextureFetch_Texture2D_texture, &TextureFetch_Texture2D_coordinate, &TextureFetch_Texture2D_lod };

/// textureFetchSample with Texture2D, Int32x2, UInt32, UInt32
Variable TextureFetchSample_Texture2D_texture;
Variable TextureFetchSample_Texture2D_coordinate;
Variable TextureFetchSample_Texture2D_lod;
Variable TextureFetchSample_Texture2D_sample;
Function TextureFetchSample_Texture2D;
inline constexpr std::array TextureFetchSample_Texture2D_args = { &TextureFetchSample_Texture2D_texture, &TextureFetchSample_Texture2D_coordinate, &TextureFetchSample_Texture2D_lod, &TextureFetchSample_Texture2D_sample };

/// textureFetch with Texture3D, Int32x3, UInt32
Variable TextureFetch_Texture3D_texture;
Variable TextureFetch_Texture3D_coordinate;
Variable TextureFetch_Texture3D_lod;
Function TextureFetch_Texture3D;
inline constexpr std::array TextureFetch_Texture3D_args = { &TextureFetch_Texture3D_texture, &TextureFetch_Texture3D_coordinate, &TextureFetch_Texture3D_lod };

/// textureFetchSample with Texture3D, Int32x3, UInt32, UInt32
Variable TextureFetchSample_Texture3D_texture;
Variable TextureFetchSample_Texture3D_coordinate;
Variable TextureFetchSample_Texture3D_lod;
Variable TextureFetchSample_Texture3D_sample;
Function TextureFetchSample_Texture3D;
inline constexpr std::array TextureFetchSample_Texture3D_args = { &TextureFetchSample_Texture3D_texture, &TextureFetchSample_Texture3D_coordinate, &TextureFetchSample_Texture3D_lod, &TextureFetchSample_Texture3D_sample };

/// textureFetch with Texture1DArray, Int32x2, UInt32
Variable TextureFetch_Texture1DArray_texture;
Variable TextureFetch_Texture1DArray_coordinate;
Variable TextureFetch_Texture1DArray_lod;
Function TextureFetch_Texture1DArray;
inline constexpr std::array TextureFetch_Texture1DArray_args = { &TextureFetch_Texture1DArray_texture, &TextureFetch_Texture1DArray_coordinate, &TextureFetch_Texture1DArray_lod };

/// textureFetchSample with Texture1DArray, Int32x2, UInt32, UInt32
Variable TextureFetchSample_Texture1DArray_texture;
Variable TextureFetchSample_Texture1DArray_coordinate;
Variable TextureFetchSample_Texture1DArray_lod;
Variable TextureFetchSample_Texture1DArray_sample;
Function TextureFetchSample_Texture1DArray;
inline constexpr std::array TextureFetchSample_Texture1DArray_args = { &TextureFetchSample_Texture1DArray_texture, &TextureFetchSample_Texture1DArray_coordinate, &TextureFetchSample_Texture1DArray_lod, &TextureFetchSample_Texture1DArray_sample };

/// textureFetch with Texture2DArray, Int32x3, UInt32
Variable TextureFetch_Texture2DArray_texture;
Variable TextureFetch_Texture2DArray_coordinate;
Variable TextureFetch_Texture2DArray_lod;
Function TextureFetch_Texture2DArray;
inline constexpr std::array TextureFetch_Texture2DArray_args = { &TextureFetch_Texture2DArray_texture, &TextureFetch_Texture2DArray_coordinate, &TextureFetch_Texture2DArray_lod };

/// textureFetchSample with Texture2DArray, Int32x3, UInt32, UInt32
Variable TextureFetchSample_Texture2DArray_texture;
Variable TextureFetchSample_Texture2DArray_coordinate;
Variable TextureFetchSample_Texture2DArray_lod;
Variable TextureFetchSample_Texture2DArray_sample;
Function TextureFetchSample_Texture2DArray;
inline constexpr std::array TextureFetchSample_Texture2DArray_args = { &TextureFetchSample_Texture2DArray_texture, &TextureFetchSample_Texture2DArray_coordinate, &TextureFetchSample_Texture2DArray_lod, &TextureFetchSample_Texture2DArray_sample };

/// textureFetch with Texture2DMS, Int32x2, UInt32
Variable TextureFetch_Texture2DMS_texture;
Variable TextureFetch_Texture2DMS_coordinate;
Variable TextureFetch_Texture2DMS_lod;
Function TextureFetch_Texture2DMS;
inline constexpr std::array TextureFetch_Texture2DMS_args = { &TextureFetch_Texture2DMS_texture, &TextureFetch_Texture2DMS_coordinate, &TextureFetch_Texture2DMS_lod };

/// textureFetchSample with Texture2DMS, Int32x2, UInt32, UInt32
Variable TextureFetchSample_Texture2DMS_texture;
Variable TextureFetchSample_Texture2DMS_coordinate;
Variable TextureFetchSample_Texture2DMS_lod;
Variable TextureFetchSample_Texture2DMS_sample;
Function TextureFetchSample_Texture2DMS;
inline constexpr std::array TextureFetchSample_Texture2DMS_args = { &TextureFetchSample_Texture2DMS_texture, &TextureFetchSample_Texture2DMS_coordinate, &TextureFetchSample_Texture2DMS_lod, &TextureFetchSample_Texture2DMS_sample };

/// textureFetch with Texture2DMSArray, Int32x3, UInt32
Variable TextureFetch_Texture2DMSArray_texture;
Variable TextureFetch_Texture2DMSArray_coordinate;
Variable TextureFetch_Texture2DMSArray_lod;
Function TextureFetch_Texture2DMSArray;
inline constexpr std::array TextureFetch_Texture2DMSArray_args = { &TextureFetch_Texture2DMSArray_texture, &TextureFetch_Texture2DMSArray_coordinate, &TextureFetch_Texture2DMSArray_lod };

/// textureFetchSample with Texture2DMSArray, Int32x3, UInt32, UInt32
Variable TextureFetchSample_Texture2DMSArray_texture;
Variable TextureFetchSample_Texture2DMSArray_coordinate;
Variable TextureFetchSample_Texture2DMSArray_lod;
Variable TextureFetchSample_Texture2DMSArray_sample;
Function TextureFetchSample_Texture2DMSArray;
inline constexpr std::array TextureFetchSample_Texture2DMSArray_args = { &TextureFetchSample_Texture2DMSArray_texture, &TextureFetchSample_Texture2DMSArray_coordinate, &TextureFetchSample_Texture2DMSArray_lod, &TextureFetchSample_Texture2DMSArray_sample };

/// textureGather with Texture2D, Sampler, Int32x2, Int32
Variable TextureGather_Texture2D_texture;
Variable TextureGather_Texture2D_sampler;
Variable TextureGather_Texture2D_coordinate;
Variable TextureGather_Texture2D_component;
Function TextureGather_Texture2D;
inline constexpr std::array TextureGather_Texture2D_args = { &TextureGather_Texture2D_texture, &TextureGather_Texture2D_sampler, &TextureGather_Texture2D_coordinate, &TextureGather_Texture2D_component };

/// textureGather with Texture2D, Int32x2, Int32
Variable SampledTextureGather_Texture2D_texture;
Variable SampledTextureGather_Texture2D_coordinate;
Variable SampledTextureGather_Texture2D_component;
Function SampledTextureGather_Texture2D;
inline constexpr std::array SampledTextureGather_Texture2D_args = { &SampledTextureGather_Texture2D_texture, &SampledTextureGather_Texture2D_coordinate, &SampledTextureGather_Texture2D_component };

/// textureGatherOffset with Texture2D, Sampler, Int32x2, Int32, UInt32
Variable TextureGatherOffset_Texture2D_texture;
Variable TextureGatherOffset_Texture2D_sampler;
Variable TextureGatherOffset_Texture2D_coordinate;
Variable TextureGatherOffset_Texture2D_component;
Variable TextureGatherOffset_Texture2D_offset;
Function TextureGatherOffset_Texture2D;
inline constexpr std::array TextureGatherOffset_Texture2D_args = { &TextureGatherOffset_Texture2D_texture, &TextureGatherOffset_Texture2D_sampler, &TextureGatherOffset_Texture2D_coordinate, &TextureGatherOffset_Texture2D_component, &TextureGatherOffset_Texture2D_offset };

/// textureGatherOffset with Texture2D, Int32x2, Int32, UInt32
Variable SampledTextureGatherOffset_Texture2D_texture;
Variable SampledTextureGatherOffset_Texture2D_coordinate;
Variable SampledTextureGatherOffset_Texture2D_component;
Variable SampledTextureGatherOffset_Texture2D_offset;
Function SampledTextureGatherOffset_Texture2D;
inline constexpr std::array SampledTextureGatherOffset_Texture2D_args = { &SampledTextureGatherOffset_Texture2D_texture, &SampledTextureGatherOffset_Texture2D_coordinate, &SampledTextureGatherOffset_Texture2D_component, &SampledTextureGatherOffset_Texture2D_offset };

/// textureGather with TextureCube, Sampler, Int32x3, Int32
Variable TextureGather_TextureCube_texture;
Variable TextureGather_TextureCube_sampler;
Variable TextureGather_TextureCube_coordinate;
Variable TextureGather_TextureCube_component;
Function TextureGather_TextureCube;
inline constexpr std::array TextureGather_TextureCube_args = { &TextureGather_TextureCube_texture, &TextureGather_TextureCube_sampler, &TextureGather_TextureCube_coordinate, &TextureGather_TextureCube_component };

/// textureGather with TextureCube, Int32x3, Int32
Variable SampledTextureGather_TextureCube_texture;
Variable SampledTextureGather_TextureCube_coordinate;
Variable SampledTextureGather_TextureCube_component;
Function SampledTextureGather_TextureCube;
inline constexpr std::array SampledTextureGather_TextureCube_args = { &SampledTextureGather_TextureCube_texture, &SampledTextureGather_TextureCube_coordinate, &SampledTextureGather_TextureCube_component };

/// textureGatherOffset with TextureCube, Sampler, Int32x3, Int32, UInt32
Variable TextureGatherOffset_TextureCube_texture;
Variable TextureGatherOffset_TextureCube_sampler;
Variable TextureGatherOffset_TextureCube_coordinate;
Variable TextureGatherOffset_TextureCube_component;
Variable TextureGatherOffset_TextureCube_offset;
Function TextureGatherOffset_TextureCube;
inline constexpr std::array TextureGatherOffset_TextureCube_args = { &TextureGatherOffset_TextureCube_texture, &TextureGatherOffset_TextureCube_sampler, &TextureGatherOffset_TextureCube_coordinate, &TextureGatherOffset_TextureCube_component, &TextureGatherOffset_TextureCube_offset };

/// textureGatherOffset with TextureCube, Int32x3, Int32, UInt32
Variable SampledTextureGatherOffset_TextureCube_texture;
Variable SampledTextureGatherOffset_TextureCube_coordinate;
Variable SampledTextureGatherOffset_TextureCube_component;
Variable SampledTextureGatherOffset_TextureCube_offset;
Function SampledTextureGatherOffset_TextureCube;
inline constexpr std::array SampledTextureGatherOffset_TextureCube_args = { &SampledTextureGatherOffset_TextureCube_texture, &SampledTextureGatherOffset_TextureCube_coordinate, &SampledTextureGatherOffset_TextureCube_component, &SampledTextureGatherOffset_TextureCube_offset };

/// textureGather with Texture2DArray, Sampler, Int32x3, Int32
Variable TextureGather_Texture2DArray_texture;
Variable TextureGather_Texture2DArray_sampler;
Variable TextureGather_Texture2DArray_coordinate;
Variable TextureGather_Texture2DArray_component;
Function TextureGather_Texture2DArray;
inline constexpr std::array TextureGather_Texture2DArray_args = { &TextureGather_Texture2DArray_texture, &TextureGather_Texture2DArray_sampler, &TextureGather_Texture2DArray_coordinate, &TextureGather_Texture2DArray_component };

/// textureGather with Texture2DArray, Int32x3, Int32
Variable SampledTextureGather_Texture2DArray_texture;
Variable SampledTextureGather_Texture2DArray_coordinate;
Variable SampledTextureGather_Texture2DArray_component;
Function SampledTextureGather_Texture2DArray;
inline constexpr std::array SampledTextureGather_Texture2DArray_args = { &SampledTextureGather_Texture2DArray_texture, &SampledTextureGather_Texture2DArray_coordinate, &SampledTextureGather_Texture2DArray_component };

/// textureGatherOffset with Texture2DArray, Sampler, Int32x3, Int32, UInt32
Variable TextureGatherOffset_Texture2DArray_texture;
Variable TextureGatherOffset_Texture2DArray_sampler;
Variable TextureGatherOffset_Texture2DArray_coordinate;
Variable TextureGatherOffset_Texture2DArray_component;
Variable TextureGatherOffset_Texture2DArray_offset;
Function TextureGatherOffset_Texture2DArray;
inline constexpr std::array TextureGatherOffset_Texture2DArray_args = { &TextureGatherOffset_Texture2DArray_texture, &TextureGatherOffset_Texture2DArray_sampler, &TextureGatherOffset_Texture2DArray_coordinate, &TextureGatherOffset_Texture2DArray_component, &TextureGatherOffset_Texture2DArray_offset };

/// textureGatherOffset with Texture2DArray, Int32x3, Int32, UInt32
Variable SampledTextureGatherOffset_Texture2DArray_texture;
Variable SampledTextureGatherOffset_Texture2DArray_coordinate;
Variable SampledTextureGatherOffset_Texture2DArray_component;
Variable SampledTextureGatherOffset_Texture2DArray_offset;
Function SampledTextureGatherOffset_Texture2DArray;
inline constexpr std::array SampledTextureGatherOffset_Texture2DArray_args = { &SampledTextureGatherOffset_Texture2DArray_texture, &SampledTextureGatherOffset_Texture2DArray_coordinate, &SampledTextureGatherOffset_Texture2DArray_component, &SampledTextureGatherOffset_Texture2DArray_offset };

/// textureGather with TextureCubeArray, Sampler, Int32x4, Int32
Variable TextureGather_TextureCubeArray_texture;
Variable TextureGather_TextureCubeArray_sampler;
Variable TextureGather_TextureCubeArray_coordinate;
Variable TextureGather_TextureCubeArray_component;
Function TextureGather_TextureCubeArray;
inline constexpr std::array TextureGather_TextureCubeArray_args = { &TextureGather_TextureCubeArray_texture, &TextureGather_TextureCubeArray_sampler, &TextureGather_TextureCubeArray_coordinate, &TextureGather_TextureCubeArray_component };

/// textureGather with TextureCubeArray, Int32x4, Int32
Variable SampledTextureGather_TextureCubeArray_texture;
Variable SampledTextureGather_TextureCubeArray_coordinate;
Variable SampledTextureGather_TextureCubeArray_component;
Function SampledTextureGather_TextureCubeArray;
inline constexpr std::array SampledTextureGather_TextureCubeArray_args = { &SampledTextureGather_TextureCubeArray_texture, &SampledTextureGather_TextureCubeArray_coordinate, &SampledTextureGather_TextureCubeArray_component };

/// textureGatherOffset with TextureCubeArray, Sampler, Int32x4, Int32, UInt32
Variable TextureGatherOffset_TextureCubeArray_texture;
Variable TextureGatherOffset_TextureCubeArray_sampler;
Variable TextureGatherOffset_TextureCubeArray_coordinate;
Variable TextureGatherOffset_TextureCubeArray_component;
Variable TextureGatherOffset_TextureCubeArray_offset;
Function TextureGatherOffset_TextureCubeArray;
inline constexpr std::array TextureGatherOffset_TextureCubeArray_args = { &TextureGatherOffset_TextureCubeArray_texture, &TextureGatherOffset_TextureCubeArray_sampler, &TextureGatherOffset_TextureCubeArray_coordinate, &TextureGatherOffset_TextureCubeArray_component, &TextureGatherOffset_TextureCubeArray_offset };

/// textureGatherOffset with TextureCubeArray, Int32x4, Int32, UInt32
Variable SampledTextureGatherOffset_TextureCubeArray_texture;
Variable SampledTextureGatherOffset_TextureCubeArray_coordinate;
Variable SampledTextureGatherOffset_TextureCubeArray_component;
Variable SampledTextureGatherOffset_TextureCubeArray_offset;
Function SampledTextureGatherOffset_TextureCubeArray;
inline constexpr std::array SampledTextureGatherOffset_TextureCubeArray_args = { &SampledTextureGatherOffset_TextureCubeArray_texture, &SampledTextureGatherOffset_TextureCubeArray_coordinate, &SampledTextureGatherOffset_TextureCubeArray_component, &SampledTextureGatherOffset_TextureCubeArray_offset };

/// texturePixelCacheLoad with PixelCache
Variable TexturePixelCacheLoad_PixelCache_texture;
Function TexturePixelCacheLoad_PixelCache;
inline constexpr std::array TexturePixelCacheLoad_PixelCache_args = { &TexturePixelCacheLoad_PixelCache_texture };

/// texturePixelCacheLoad with PixelCacheMS, UInt32
Variable TexturePixelCacheLoad_PixelCacheMS_texture;
Variable TexturePixelCacheLoad_PixelCacheMS_sample;
Function TexturePixelCacheLoad_PixelCacheMS;
inline constexpr std::array TexturePixelCacheLoad_PixelCacheMS_args = { &TexturePixelCacheLoad_PixelCacheMS_texture, &TexturePixelCacheLoad_PixelCacheMS_sample };

/// textureSample with Texture1D, Sampler, Float32
Variable TextureSample_Texture1D_texture;
Variable TextureSample_Texture1D_sampler;
Variable TextureSample_Texture1D_coordinate;
Function TextureSample_Texture1D;
inline constexpr std::array TextureSample_Texture1D_args = { &TextureSample_Texture1D_texture, &TextureSample_Texture1D_sampler, &TextureSample_Texture1D_coordinate };

/// textureSample with Texture1D, Float32
Variable SampledTextureSample_Texture1D_texture;
Variable SampledTextureSample_Texture1D_coordinate;
Function SampledTextureSample_Texture1D;
inline constexpr std::array SampledTextureSample_Texture1D_args = { &SampledTextureSample_Texture1D_texture, &SampledTextureSample_Texture1D_coordinate };

/// textureSample with Texture2D, Sampler, Float32x2
Variable TextureSample_Texture2D_texture;
Variable TextureSample_Texture2D_sampler;
Variable TextureSample_Texture2D_coordinate;
Function TextureSample_Texture2D;
inline constexpr std::array TextureSample_Texture2D_args = { &TextureSample_Texture2D_texture, &TextureSample_Texture2D_sampler, &TextureSample_Texture2D_coordinate };

/// textureSample with Texture2D, Float32x2
Variable SampledTextureSample_Texture2D_texture;
Variable SampledTextureSample_Texture2D_coordinate;
Function SampledTextureSample_Texture2D;
inline constexpr std::array SampledTextureSample_Texture2D_args = { &SampledTextureSample_Texture2D_texture, &SampledTextureSample_Texture2D_coordinate };

/// textureSample with Texture3D, Sampler, Float32x3
Variable TextureSample_Texture3D_texture;
Variable TextureSample_Texture3D_sampler;
Variable TextureSample_Texture3D_coordinate;
Function TextureSample_Texture3D;
inline constexpr std::array TextureSample_Texture3D_args = { &TextureSample_Texture3D_texture, &TextureSample_Texture3D_sampler, &TextureSample_Texture3D_coordinate };

/// textureSample with Texture3D, Float32x3
Variable SampledTextureSample_Texture3D_texture;
Variable SampledTextureSample_Texture3D_coordinate;
Function SampledTextureSample_Texture3D;
inline constexpr std::array SampledTextureSample_Texture3D_args = { &SampledTextureSample_Texture3D_texture, &SampledTextureSample_Texture3D_coordinate };

/// textureSample with TextureCube, Sampler, Float32x3
Variable TextureSample_TextureCube_texture;
Variable TextureSample_TextureCube_sampler;
Variable TextureSample_TextureCube_coordinate;
Function TextureSample_TextureCube;
inline constexpr std::array TextureSample_TextureCube_args = { &TextureSample_TextureCube_texture, &TextureSample_TextureCube_sampler, &TextureSample_TextureCube_coordinate };

/// textureSample with TextureCube, Float32x3
Variable SampledTextureSample_TextureCube_texture;
Variable SampledTextureSample_TextureCube_coordinate;
Function SampledTextureSample_TextureCube;
inline constexpr std::array SampledTextureSample_TextureCube_args = { &SampledTextureSample_TextureCube_texture, &SampledTextureSample_TextureCube_coordinate };

/// textureSample with Texture1DArray, Sampler, Float32x2
Variable TextureSample_Texture1DArray_texture;
Variable TextureSample_Texture1DArray_sampler;
Variable TextureSample_Texture1DArray_coordinate;
Function TextureSample_Texture1DArray;
inline constexpr std::array TextureSample_Texture1DArray_args = { &TextureSample_Texture1DArray_texture, &TextureSample_Texture1DArray_sampler, &TextureSample_Texture1DArray_coordinate };

/// textureSample with Texture1DArray, Float32x2
Variable SampledTextureSample_Texture1DArray_texture;
Variable SampledTextureSample_Texture1DArray_coordinate;
Function SampledTextureSample_Texture1DArray;
inline constexpr std::array SampledTextureSample_Texture1DArray_args = { &SampledTextureSample_Texture1DArray_texture, &SampledTextureSample_Texture1DArray_coordinate };

/// textureSample with Texture2DArray, Sampler, Float32x3
Variable TextureSample_Texture2DArray_texture;
Variable TextureSample_Texture2DArray_sampler;
Variable TextureSample_Texture2DArray_coordinate;
Function TextureSample_Texture2DArray;
inline constexpr std::array TextureSample_Texture2DArray_args = { &TextureSample_Texture2DArray_texture, &TextureSample_Texture2DArray_sampler, &TextureSample_Texture2DArray_coordinate };

/// textureSample with Texture2DArray, Float32x3
Variable SampledTextureSample_Texture2DArray_texture;
Variable SampledTextureSample_Texture2DArray_coordinate;
Function SampledTextureSample_Texture2DArray;
inline constexpr std::array SampledTextureSample_Texture2DArray_args = { &SampledTextureSample_Texture2DArray_texture, &SampledTextureSample_Texture2DArray_coordinate };

/// textureSample with TextureCubeArray, Sampler, Float32x4
Variable TextureSample_TextureCubeArray_texture;
Variable TextureSample_TextureCubeArray_sampler;
Variable TextureSample_TextureCubeArray_coordinate;
Function TextureSample_TextureCubeArray;
inline constexpr std::array TextureSample_TextureCubeArray_args = { &TextureSample_TextureCubeArray_texture, &TextureSample_TextureCubeArray_sampler, &TextureSample_TextureCubeArray_coordinate };

/// textureSample with TextureCubeArray, Float32x4
Variable SampledTextureSample_TextureCubeArray_texture;
Variable SampledTextureSample_TextureCubeArray_coordinate;
Function SampledTextureSample_TextureCubeArray;
inline constexpr std::array SampledTextureSample_TextureCubeArray_args = { &SampledTextureSample_TextureCubeArray_texture, &SampledTextureSample_TextureCubeArray_coordinate };

/// textureSampleOffset with Texture1D, Sampler, Float32, Float32
Variable TextureSampleOffset_Texture1D_texture;
Variable TextureSampleOffset_Texture1D_sampler;
Variable TextureSampleOffset_Texture1D_coordinate;
Variable TextureSampleOffset_Texture1D_offset;
Function TextureSampleOffset_Texture1D;
inline constexpr std::array TextureSampleOffset_Texture1D_args = { &TextureSampleOffset_Texture1D_texture, &TextureSampleOffset_Texture1D_sampler, &TextureSampleOffset_Texture1D_coordinate, &TextureSampleOffset_Texture1D_offset };

/// textureSampleOffset with Texture1D, Float32, Float32
Variable SampledTextureSampleOffset_Texture1D_texture;
Variable SampledTextureSampleOffset_Texture1D_coordinate;
Variable SampledTextureSampleOffset_Texture1D_offset;
Function SampledTextureSampleOffset_Texture1D;
inline constexpr std::array SampledTextureSampleOffset_Texture1D_args = { &SampledTextureSampleOffset_Texture1D_texture, &SampledTextureSampleOffset_Texture1D_coordinate, &SampledTextureSampleOffset_Texture1D_offset };

/// textureSampleOffset with Texture2D, Sampler, Float32x2, Float32x2
Variable TextureSampleOffset_Texture2D_texture;
Variable TextureSampleOffset_Texture2D_sampler;
Variable TextureSampleOffset_Texture2D_coordinate;
Variable TextureSampleOffset_Texture2D_offset;
Function TextureSampleOffset_Texture2D;
inline constexpr std::array TextureSampleOffset_Texture2D_args = { &TextureSampleOffset_Texture2D_texture, &TextureSampleOffset_Texture2D_sampler, &TextureSampleOffset_Texture2D_coordinate, &TextureSampleOffset_Texture2D_offset };

/// textureSampleOffset with Texture2D, Float32x2, Float32x2
Variable SampledTextureSampleOffset_Texture2D_texture;
Variable SampledTextureSampleOffset_Texture2D_coordinate;
Variable SampledTextureSampleOffset_Texture2D_offset;
Function SampledTextureSampleOffset_Texture2D;
inline constexpr std::array SampledTextureSampleOffset_Texture2D_args = { &SampledTextureSampleOffset_Texture2D_texture, &SampledTextureSampleOffset_Texture2D_coordinate, &SampledTextureSampleOffset_Texture2D_offset };

/// textureSampleOffset with Texture3D, Sampler, Float32x3, Float32x3
Variable TextureSampleOffset_Texture3D_texture;
Variable TextureSampleOffset_Texture3D_sampler;
Variable TextureSampleOffset_Texture3D_coordinate;
Variable TextureSampleOffset_Texture3D_offset;
Function TextureSampleOffset_Texture3D;
inline constexpr std::array TextureSampleOffset_Texture3D_args = { &TextureSampleOffset_Texture3D_texture, &TextureSampleOffset_Texture3D_sampler, &TextureSampleOffset_Texture3D_coordinate, &TextureSampleOffset_Texture3D_offset };

/// textureSampleOffset with Texture3D, Float32x3, Float32x3
Variable SampledTextureSampleOffset_Texture3D_texture;
Variable SampledTextureSampleOffset_Texture3D_coordinate;
Variable SampledTextureSampleOffset_Texture3D_offset;
Function SampledTextureSampleOffset_Texture3D;
inline constexpr std::array SampledTextureSampleOffset_Texture3D_args = { &SampledTextureSampleOffset_Texture3D_texture, &SampledTextureSampleOffset_Texture3D_coordinate, &SampledTextureSampleOffset_Texture3D_offset };

/// textureSampleOffset with Texture1DArray, Sampler, Float32x2, Float32x2
Variable TextureSampleOffset_Texture1DArray_texture;
Variable TextureSampleOffset_Texture1DArray_sampler;
Variable TextureSampleOffset_Texture1DArray_coordinate;
Variable TextureSampleOffset_Texture1DArray_offset;
Function TextureSampleOffset_Texture1DArray;
inline constexpr std::array TextureSampleOffset_Texture1DArray_args = { &TextureSampleOffset_Texture1DArray_texture, &TextureSampleOffset_Texture1DArray_sampler, &TextureSampleOffset_Texture1DArray_coordinate, &TextureSampleOffset_Texture1DArray_offset };

/// textureSampleOffset with Texture1DArray, Float32x2, Float32x2
Variable SampledTextureSampleOffset_Texture1DArray_texture;
Variable SampledTextureSampleOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleOffset_Texture1DArray_offset;
Function SampledTextureSampleOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleOffset_Texture1DArray_args = { &SampledTextureSampleOffset_Texture1DArray_texture, &SampledTextureSampleOffset_Texture1DArray_coordinate, &SampledTextureSampleOffset_Texture1DArray_offset };

/// textureSampleOffset with Texture2DArray, Sampler, Float32x3, Float32x3
Variable TextureSampleOffset_Texture2DArray_texture;
Variable TextureSampleOffset_Texture2DArray_sampler;
Variable TextureSampleOffset_Texture2DArray_coordinate;
Variable TextureSampleOffset_Texture2DArray_offset;
Function TextureSampleOffset_Texture2DArray;
inline constexpr std::array TextureSampleOffset_Texture2DArray_args = { &TextureSampleOffset_Texture2DArray_texture, &TextureSampleOffset_Texture2DArray_sampler, &TextureSampleOffset_Texture2DArray_coordinate, &TextureSampleOffset_Texture2DArray_offset };

/// textureSampleOffset with Texture2DArray, Float32x3, Float32x3
Variable SampledTextureSampleOffset_Texture2DArray_texture;
Variable SampledTextureSampleOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleOffset_Texture2DArray_offset;
Function SampledTextureSampleOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleOffset_Texture2DArray_args = { &SampledTextureSampleOffset_Texture2DArray_texture, &SampledTextureSampleOffset_Texture2DArray_coordinate, &SampledTextureSampleOffset_Texture2DArray_offset };

/// textureSampleProj with Texture1D, Sampler, Float32, Float32
Variable TextureSampleProj_Texture1D_texture;
Variable TextureSampleProj_Texture1D_sampler;
Variable TextureSampleProj_Texture1D_coordinate;
Variable TextureSampleProj_Texture1D_proj;
Function TextureSampleProj_Texture1D;
inline constexpr std::array TextureSampleProj_Texture1D_args = { &TextureSampleProj_Texture1D_texture, &TextureSampleProj_Texture1D_sampler, &TextureSampleProj_Texture1D_coordinate, &TextureSampleProj_Texture1D_proj };

/// textureSampleProj with Texture1D, Float32, Float32
Variable SampledTextureSampleProj_Texture1D_texture;
Variable SampledTextureSampleProj_Texture1D_coordinate;
Variable SampledTextureSampleProj_Texture1D_proj;
Function SampledTextureSampleProj_Texture1D;
inline constexpr std::array SampledTextureSampleProj_Texture1D_args = { &SampledTextureSampleProj_Texture1D_texture, &SampledTextureSampleProj_Texture1D_coordinate, &SampledTextureSampleProj_Texture1D_proj };

/// textureSampleProj with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleProj_Texture2D_texture;
Variable TextureSampleProj_Texture2D_sampler;
Variable TextureSampleProj_Texture2D_coordinate;
Variable TextureSampleProj_Texture2D_proj;
Function TextureSampleProj_Texture2D;
inline constexpr std::array TextureSampleProj_Texture2D_args = { &TextureSampleProj_Texture2D_texture, &TextureSampleProj_Texture2D_sampler, &TextureSampleProj_Texture2D_coordinate, &TextureSampleProj_Texture2D_proj };

/// textureSampleProj with Texture2D, Float32x2, Float32
Variable SampledTextureSampleProj_Texture2D_texture;
Variable SampledTextureSampleProj_Texture2D_coordinate;
Variable SampledTextureSampleProj_Texture2D_proj;
Function SampledTextureSampleProj_Texture2D;
inline constexpr std::array SampledTextureSampleProj_Texture2D_args = { &SampledTextureSampleProj_Texture2D_texture, &SampledTextureSampleProj_Texture2D_coordinate, &SampledTextureSampleProj_Texture2D_proj };

/// textureSampleProj with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleProj_Texture3D_texture;
Variable TextureSampleProj_Texture3D_sampler;
Variable TextureSampleProj_Texture3D_coordinate;
Variable TextureSampleProj_Texture3D_proj;
Function TextureSampleProj_Texture3D;
inline constexpr std::array TextureSampleProj_Texture3D_args = { &TextureSampleProj_Texture3D_texture, &TextureSampleProj_Texture3D_sampler, &TextureSampleProj_Texture3D_coordinate, &TextureSampleProj_Texture3D_proj };

/// textureSampleProj with Texture3D, Float32x3, Float32
Variable SampledTextureSampleProj_Texture3D_texture;
Variable SampledTextureSampleProj_Texture3D_coordinate;
Variable SampledTextureSampleProj_Texture3D_proj;
Function SampledTextureSampleProj_Texture3D;
inline constexpr std::array SampledTextureSampleProj_Texture3D_args = { &SampledTextureSampleProj_Texture3D_texture, &SampledTextureSampleProj_Texture3D_coordinate, &SampledTextureSampleProj_Texture3D_proj };

/// textureSampleProjOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleProjOffset_Texture1D_texture;
Variable TextureSampleProjOffset_Texture1D_sampler;
Variable TextureSampleProjOffset_Texture1D_coordinate;
Variable TextureSampleProjOffset_Texture1D_proj;
Variable TextureSampleProjOffset_Texture1D_offset;
Function TextureSampleProjOffset_Texture1D;
inline constexpr std::array TextureSampleProjOffset_Texture1D_args = { &TextureSampleProjOffset_Texture1D_texture, &TextureSampleProjOffset_Texture1D_sampler, &TextureSampleProjOffset_Texture1D_coordinate, &TextureSampleProjOffset_Texture1D_proj, &TextureSampleProjOffset_Texture1D_offset };

/// textureSampleProjOffset with Texture1D, Float32, Float32, Float32
Variable SampledTextureSampleProjOffset_Texture1D_texture;
Variable SampledTextureSampleProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleProjOffset_Texture1D_proj;
Variable SampledTextureSampleProjOffset_Texture1D_offset;
Function SampledTextureSampleProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleProjOffset_Texture1D_args = { &SampledTextureSampleProjOffset_Texture1D_texture, &SampledTextureSampleProjOffset_Texture1D_coordinate, &SampledTextureSampleProjOffset_Texture1D_proj, &SampledTextureSampleProjOffset_Texture1D_offset };

/// textureSampleProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleProjOffset_Texture2D_texture;
Variable TextureSampleProjOffset_Texture2D_sampler;
Variable TextureSampleProjOffset_Texture2D_coordinate;
Variable TextureSampleProjOffset_Texture2D_proj;
Variable TextureSampleProjOffset_Texture2D_offset;
Function TextureSampleProjOffset_Texture2D;
inline constexpr std::array TextureSampleProjOffset_Texture2D_args = { &TextureSampleProjOffset_Texture2D_texture, &TextureSampleProjOffset_Texture2D_sampler, &TextureSampleProjOffset_Texture2D_coordinate, &TextureSampleProjOffset_Texture2D_proj, &TextureSampleProjOffset_Texture2D_offset };

/// textureSampleProjOffset with Texture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleProjOffset_Texture2D_texture;
Variable SampledTextureSampleProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleProjOffset_Texture2D_proj;
Variable SampledTextureSampleProjOffset_Texture2D_offset;
Function SampledTextureSampleProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleProjOffset_Texture2D_args = { &SampledTextureSampleProjOffset_Texture2D_texture, &SampledTextureSampleProjOffset_Texture2D_coordinate, &SampledTextureSampleProjOffset_Texture2D_proj, &SampledTextureSampleProjOffset_Texture2D_offset };

/// textureSampleProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleProjOffset_Texture3D_texture;
Variable TextureSampleProjOffset_Texture3D_sampler;
Variable TextureSampleProjOffset_Texture3D_coordinate;
Variable TextureSampleProjOffset_Texture3D_proj;
Variable TextureSampleProjOffset_Texture3D_offset;
Function TextureSampleProjOffset_Texture3D;
inline constexpr std::array TextureSampleProjOffset_Texture3D_args = { &TextureSampleProjOffset_Texture3D_texture, &TextureSampleProjOffset_Texture3D_sampler, &TextureSampleProjOffset_Texture3D_coordinate, &TextureSampleProjOffset_Texture3D_proj, &TextureSampleProjOffset_Texture3D_offset };

/// textureSampleProjOffset with Texture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleProjOffset_Texture3D_texture;
Variable SampledTextureSampleProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleProjOffset_Texture3D_proj;
Variable SampledTextureSampleProjOffset_Texture3D_offset;
Function SampledTextureSampleProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleProjOffset_Texture3D_args = { &SampledTextureSampleProjOffset_Texture3D_texture, &SampledTextureSampleProjOffset_Texture3D_coordinate, &SampledTextureSampleProjOffset_Texture3D_proj, &SampledTextureSampleProjOffset_Texture3D_offset };

/// textureSampleCompare with Texture1D, Sampler, Float32, Float32
Variable TextureSampleCompare_Texture1D_texture;
Variable TextureSampleCompare_Texture1D_sampler;
Variable TextureSampleCompare_Texture1D_coordinate;
Variable TextureSampleCompare_Texture1D_compare;
Function TextureSampleCompare_Texture1D;
inline constexpr std::array TextureSampleCompare_Texture1D_args = { &TextureSampleCompare_Texture1D_texture, &TextureSampleCompare_Texture1D_sampler, &TextureSampleCompare_Texture1D_coordinate, &TextureSampleCompare_Texture1D_compare };

/// textureSampleCompare with Texture1D, Float32, Float32
Variable SampledTextureSampleCompare_Texture1D_texture;
Variable SampledTextureSampleCompare_Texture1D_coordinate;
Variable SampledTextureSampleCompare_Texture1D_compare;
Function SampledTextureSampleCompare_Texture1D;
inline constexpr std::array SampledTextureSampleCompare_Texture1D_args = { &SampledTextureSampleCompare_Texture1D_texture, &SampledTextureSampleCompare_Texture1D_coordinate, &SampledTextureSampleCompare_Texture1D_compare };

/// textureSampleCompare with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleCompare_Texture2D_texture;
Variable TextureSampleCompare_Texture2D_sampler;
Variable TextureSampleCompare_Texture2D_coordinate;
Variable TextureSampleCompare_Texture2D_compare;
Function TextureSampleCompare_Texture2D;
inline constexpr std::array TextureSampleCompare_Texture2D_args = { &TextureSampleCompare_Texture2D_texture, &TextureSampleCompare_Texture2D_sampler, &TextureSampleCompare_Texture2D_coordinate, &TextureSampleCompare_Texture2D_compare };

/// textureSampleCompare with Texture2D, Float32x2, Float32
Variable SampledTextureSampleCompare_Texture2D_texture;
Variable SampledTextureSampleCompare_Texture2D_coordinate;
Variable SampledTextureSampleCompare_Texture2D_compare;
Function SampledTextureSampleCompare_Texture2D;
inline constexpr std::array SampledTextureSampleCompare_Texture2D_args = { &SampledTextureSampleCompare_Texture2D_texture, &SampledTextureSampleCompare_Texture2D_coordinate, &SampledTextureSampleCompare_Texture2D_compare };

/// textureSampleCompare with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleCompare_Texture3D_texture;
Variable TextureSampleCompare_Texture3D_sampler;
Variable TextureSampleCompare_Texture3D_coordinate;
Variable TextureSampleCompare_Texture3D_compare;
Function TextureSampleCompare_Texture3D;
inline constexpr std::array TextureSampleCompare_Texture3D_args = { &TextureSampleCompare_Texture3D_texture, &TextureSampleCompare_Texture3D_sampler, &TextureSampleCompare_Texture3D_coordinate, &TextureSampleCompare_Texture3D_compare };

/// textureSampleCompare with Texture3D, Float32x3, Float32
Variable SampledTextureSampleCompare_Texture3D_texture;
Variable SampledTextureSampleCompare_Texture3D_coordinate;
Variable SampledTextureSampleCompare_Texture3D_compare;
Function SampledTextureSampleCompare_Texture3D;
inline constexpr std::array SampledTextureSampleCompare_Texture3D_args = { &SampledTextureSampleCompare_Texture3D_texture, &SampledTextureSampleCompare_Texture3D_coordinate, &SampledTextureSampleCompare_Texture3D_compare };

/// textureSampleCompare with Texture1DArray, Sampler, Float32x2, Float32
Variable TextureSampleCompare_Texture1DArray_texture;
Variable TextureSampleCompare_Texture1DArray_sampler;
Variable TextureSampleCompare_Texture1DArray_coordinate;
Variable TextureSampleCompare_Texture1DArray_compare;
Function TextureSampleCompare_Texture1DArray;
inline constexpr std::array TextureSampleCompare_Texture1DArray_args = { &TextureSampleCompare_Texture1DArray_texture, &TextureSampleCompare_Texture1DArray_sampler, &TextureSampleCompare_Texture1DArray_coordinate, &TextureSampleCompare_Texture1DArray_compare };

/// textureSampleCompare with Texture1DArray, Float32x2, Float32
Variable SampledTextureSampleCompare_Texture1DArray_texture;
Variable SampledTextureSampleCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleCompare_Texture1DArray_compare;
Function SampledTextureSampleCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleCompare_Texture1DArray_args = { &SampledTextureSampleCompare_Texture1DArray_texture, &SampledTextureSampleCompare_Texture1DArray_coordinate, &SampledTextureSampleCompare_Texture1DArray_compare };

/// textureSampleCompare with Texture2DArray, Sampler, Float32x3, Float32
Variable TextureSampleCompare_Texture2DArray_texture;
Variable TextureSampleCompare_Texture2DArray_sampler;
Variable TextureSampleCompare_Texture2DArray_coordinate;
Variable TextureSampleCompare_Texture2DArray_compare;
Function TextureSampleCompare_Texture2DArray;
inline constexpr std::array TextureSampleCompare_Texture2DArray_args = { &TextureSampleCompare_Texture2DArray_texture, &TextureSampleCompare_Texture2DArray_sampler, &TextureSampleCompare_Texture2DArray_coordinate, &TextureSampleCompare_Texture2DArray_compare };

/// textureSampleCompare with Texture2DArray, Float32x3, Float32
Variable SampledTextureSampleCompare_Texture2DArray_texture;
Variable SampledTextureSampleCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleCompare_Texture2DArray_compare;
Function SampledTextureSampleCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleCompare_Texture2DArray_args = { &SampledTextureSampleCompare_Texture2DArray_texture, &SampledTextureSampleCompare_Texture2DArray_coordinate, &SampledTextureSampleCompare_Texture2DArray_compare };

/// textureSampleCompareOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleCompareOffset_Texture1D_texture;
Variable TextureSampleCompareOffset_Texture1D_sampler;
Variable TextureSampleCompareOffset_Texture1D_coordinate;
Variable TextureSampleCompareOffset_Texture1D_compare;
Variable TextureSampleCompareOffset_Texture1D_offset;
Function TextureSampleCompareOffset_Texture1D;
inline constexpr std::array TextureSampleCompareOffset_Texture1D_args = { &TextureSampleCompareOffset_Texture1D_texture, &TextureSampleCompareOffset_Texture1D_sampler, &TextureSampleCompareOffset_Texture1D_coordinate, &TextureSampleCompareOffset_Texture1D_compare, &TextureSampleCompareOffset_Texture1D_offset };

/// textureSampleCompareOffset with Texture1D, Float32, Float32, Float32
Variable SampledTextureSampleCompareOffset_Texture1D_texture;
Variable SampledTextureSampleCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleCompareOffset_Texture1D_compare;
Variable SampledTextureSampleCompareOffset_Texture1D_offset;
Function SampledTextureSampleCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1D_args = { &SampledTextureSampleCompareOffset_Texture1D_texture, &SampledTextureSampleCompareOffset_Texture1D_coordinate, &SampledTextureSampleCompareOffset_Texture1D_compare, &SampledTextureSampleCompareOffset_Texture1D_offset };

/// textureSampleCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleCompareOffset_Texture2D_texture;
Variable TextureSampleCompareOffset_Texture2D_sampler;
Variable TextureSampleCompareOffset_Texture2D_coordinate;
Variable TextureSampleCompareOffset_Texture2D_compare;
Variable TextureSampleCompareOffset_Texture2D_offset;
Function TextureSampleCompareOffset_Texture2D;
inline constexpr std::array TextureSampleCompareOffset_Texture2D_args = { &TextureSampleCompareOffset_Texture2D_texture, &TextureSampleCompareOffset_Texture2D_sampler, &TextureSampleCompareOffset_Texture2D_coordinate, &TextureSampleCompareOffset_Texture2D_compare, &TextureSampleCompareOffset_Texture2D_offset };

/// textureSampleCompareOffset with Texture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleCompareOffset_Texture2D_texture;
Variable SampledTextureSampleCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleCompareOffset_Texture2D_compare;
Variable SampledTextureSampleCompareOffset_Texture2D_offset;
Function SampledTextureSampleCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2D_args = { &SampledTextureSampleCompareOffset_Texture2D_texture, &SampledTextureSampleCompareOffset_Texture2D_coordinate, &SampledTextureSampleCompareOffset_Texture2D_compare, &SampledTextureSampleCompareOffset_Texture2D_offset };

/// textureSampleCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleCompareOffset_Texture3D_texture;
Variable TextureSampleCompareOffset_Texture3D_sampler;
Variable TextureSampleCompareOffset_Texture3D_coordinate;
Variable TextureSampleCompareOffset_Texture3D_compare;
Variable TextureSampleCompareOffset_Texture3D_offset;
Function TextureSampleCompareOffset_Texture3D;
inline constexpr std::array TextureSampleCompareOffset_Texture3D_args = { &TextureSampleCompareOffset_Texture3D_texture, &TextureSampleCompareOffset_Texture3D_sampler, &TextureSampleCompareOffset_Texture3D_coordinate, &TextureSampleCompareOffset_Texture3D_compare, &TextureSampleCompareOffset_Texture3D_offset };

/// textureSampleCompareOffset with Texture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleCompareOffset_Texture3D_texture;
Variable SampledTextureSampleCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleCompareOffset_Texture3D_compare;
Variable SampledTextureSampleCompareOffset_Texture3D_offset;
Function SampledTextureSampleCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture3D_args = { &SampledTextureSampleCompareOffset_Texture3D_texture, &SampledTextureSampleCompareOffset_Texture3D_coordinate, &SampledTextureSampleCompareOffset_Texture3D_compare, &SampledTextureSampleCompareOffset_Texture3D_offset };

/// textureSampleCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleCompareOffset_Texture1DArray_texture;
Variable TextureSampleCompareOffset_Texture1DArray_sampler;
Variable TextureSampleCompareOffset_Texture1DArray_coordinate;
Variable TextureSampleCompareOffset_Texture1DArray_compare;
Variable TextureSampleCompareOffset_Texture1DArray_offset;
Function TextureSampleCompareOffset_Texture1DArray;
inline constexpr std::array TextureSampleCompareOffset_Texture1DArray_args = { &TextureSampleCompareOffset_Texture1DArray_texture, &TextureSampleCompareOffset_Texture1DArray_sampler, &TextureSampleCompareOffset_Texture1DArray_coordinate, &TextureSampleCompareOffset_Texture1DArray_compare, &TextureSampleCompareOffset_Texture1DArray_offset };

/// textureSampleCompareOffset with Texture1DArray, Float32x2, Float32, Float32x2
Variable SampledTextureSampleCompareOffset_Texture1DArray_texture;
Variable SampledTextureSampleCompareOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleCompareOffset_Texture1DArray_compare;
Variable SampledTextureSampleCompareOffset_Texture1DArray_offset;
Function SampledTextureSampleCompareOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture1DArray_args = { &SampledTextureSampleCompareOffset_Texture1DArray_texture, &SampledTextureSampleCompareOffset_Texture1DArray_coordinate, &SampledTextureSampleCompareOffset_Texture1DArray_compare, &SampledTextureSampleCompareOffset_Texture1DArray_offset };

/// textureSampleCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleCompareOffset_Texture2DArray_texture;
Variable TextureSampleCompareOffset_Texture2DArray_sampler;
Variable TextureSampleCompareOffset_Texture2DArray_coordinate;
Variable TextureSampleCompareOffset_Texture2DArray_compare;
Variable TextureSampleCompareOffset_Texture2DArray_offset;
Function TextureSampleCompareOffset_Texture2DArray;
inline constexpr std::array TextureSampleCompareOffset_Texture2DArray_args = { &TextureSampleCompareOffset_Texture2DArray_texture, &TextureSampleCompareOffset_Texture2DArray_sampler, &TextureSampleCompareOffset_Texture2DArray_coordinate, &TextureSampleCompareOffset_Texture2DArray_compare, &TextureSampleCompareOffset_Texture2DArray_offset };

/// textureSampleCompareOffset with Texture2DArray, Float32x3, Float32, Float32x3
Variable SampledTextureSampleCompareOffset_Texture2DArray_texture;
Variable SampledTextureSampleCompareOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleCompareOffset_Texture2DArray_compare;
Variable SampledTextureSampleCompareOffset_Texture2DArray_offset;
Function SampledTextureSampleCompareOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleCompareOffset_Texture2DArray_args = { &SampledTextureSampleCompareOffset_Texture2DArray_texture, &SampledTextureSampleCompareOffset_Texture2DArray_coordinate, &SampledTextureSampleCompareOffset_Texture2DArray_compare, &SampledTextureSampleCompareOffset_Texture2DArray_offset };

/// textureSampleProjCompare with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleProjCompare_Texture1D_texture;
Variable TextureSampleProjCompare_Texture1D_sampler;
Variable TextureSampleProjCompare_Texture1D_coordinate;
Variable TextureSampleProjCompare_Texture1D_proj;
Variable TextureSampleProjCompare_Texture1D_compare;
Function TextureSampleProjCompare_Texture1D;
inline constexpr std::array TextureSampleProjCompare_Texture1D_args = { &TextureSampleProjCompare_Texture1D_texture, &TextureSampleProjCompare_Texture1D_sampler, &TextureSampleProjCompare_Texture1D_coordinate, &TextureSampleProjCompare_Texture1D_proj, &TextureSampleProjCompare_Texture1D_compare };

/// textureSampleProjCompare with Texture1D, Float32, Float32, Float32
Variable SampledTextureSampleProjCompare_Texture1D_texture;
Variable SampledTextureSampleProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleProjCompare_Texture1D_proj;
Variable SampledTextureSampleProjCompare_Texture1D_compare;
Function SampledTextureSampleProjCompare_Texture1D;
inline constexpr std::array SampledTextureSampleProjCompare_Texture1D_args = { &SampledTextureSampleProjCompare_Texture1D_texture, &SampledTextureSampleProjCompare_Texture1D_coordinate, &SampledTextureSampleProjCompare_Texture1D_proj, &SampledTextureSampleProjCompare_Texture1D_compare };

/// textureSampleProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleProjCompare_Texture2D_texture;
Variable TextureSampleProjCompare_Texture2D_sampler;
Variable TextureSampleProjCompare_Texture2D_coordinate;
Variable TextureSampleProjCompare_Texture2D_proj;
Variable TextureSampleProjCompare_Texture2D_compare;
Function TextureSampleProjCompare_Texture2D;
inline constexpr std::array TextureSampleProjCompare_Texture2D_args = { &TextureSampleProjCompare_Texture2D_texture, &TextureSampleProjCompare_Texture2D_sampler, &TextureSampleProjCompare_Texture2D_coordinate, &TextureSampleProjCompare_Texture2D_proj, &TextureSampleProjCompare_Texture2D_compare };

/// textureSampleProjCompare with Texture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleProjCompare_Texture2D_texture;
Variable SampledTextureSampleProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleProjCompare_Texture2D_proj;
Variable SampledTextureSampleProjCompare_Texture2D_compare;
Function SampledTextureSampleProjCompare_Texture2D;
inline constexpr std::array SampledTextureSampleProjCompare_Texture2D_args = { &SampledTextureSampleProjCompare_Texture2D_texture, &SampledTextureSampleProjCompare_Texture2D_coordinate, &SampledTextureSampleProjCompare_Texture2D_proj, &SampledTextureSampleProjCompare_Texture2D_compare };

/// textureSampleProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleProjCompare_Texture3D_texture;
Variable TextureSampleProjCompare_Texture3D_sampler;
Variable TextureSampleProjCompare_Texture3D_coordinate;
Variable TextureSampleProjCompare_Texture3D_proj;
Variable TextureSampleProjCompare_Texture3D_compare;
Function TextureSampleProjCompare_Texture3D;
inline constexpr std::array TextureSampleProjCompare_Texture3D_args = { &TextureSampleProjCompare_Texture3D_texture, &TextureSampleProjCompare_Texture3D_sampler, &TextureSampleProjCompare_Texture3D_coordinate, &TextureSampleProjCompare_Texture3D_proj, &TextureSampleProjCompare_Texture3D_compare };

/// textureSampleProjCompare with Texture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleProjCompare_Texture3D_texture;
Variable SampledTextureSampleProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleProjCompare_Texture3D_proj;
Variable SampledTextureSampleProjCompare_Texture3D_compare;
Function SampledTextureSampleProjCompare_Texture3D;
inline constexpr std::array SampledTextureSampleProjCompare_Texture3D_args = { &SampledTextureSampleProjCompare_Texture3D_texture, &SampledTextureSampleProjCompare_Texture3D_coordinate, &SampledTextureSampleProjCompare_Texture3D_proj, &SampledTextureSampleProjCompare_Texture3D_compare };

/// textureSampleProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleProjCompareOffset_Texture1D_texture;
Variable TextureSampleProjCompareOffset_Texture1D_sampler;
Variable TextureSampleProjCompareOffset_Texture1D_coordinate;
Variable TextureSampleProjCompareOffset_Texture1D_proj;
Variable TextureSampleProjCompareOffset_Texture1D_compare;
Variable TextureSampleProjCompareOffset_Texture1D_offset;
Function TextureSampleProjCompareOffset_Texture1D;
inline constexpr std::array TextureSampleProjCompareOffset_Texture1D_args = { &TextureSampleProjCompareOffset_Texture1D_texture, &TextureSampleProjCompareOffset_Texture1D_sampler, &TextureSampleProjCompareOffset_Texture1D_coordinate, &TextureSampleProjCompareOffset_Texture1D_proj, &TextureSampleProjCompareOffset_Texture1D_compare, &TextureSampleProjCompareOffset_Texture1D_offset };

/// textureSampleProjCompareOffset with Texture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleProjCompareOffset_Texture1D_texture;
Variable SampledTextureSampleProjCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleProjCompareOffset_Texture1D_proj;
Variable SampledTextureSampleProjCompareOffset_Texture1D_compare;
Variable SampledTextureSampleProjCompareOffset_Texture1D_offset;
Function SampledTextureSampleProjCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture1D_args = { &SampledTextureSampleProjCompareOffset_Texture1D_texture, &SampledTextureSampleProjCompareOffset_Texture1D_coordinate, &SampledTextureSampleProjCompareOffset_Texture1D_proj, &SampledTextureSampleProjCompareOffset_Texture1D_compare, &SampledTextureSampleProjCompareOffset_Texture1D_offset };

/// textureSampleProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleProjCompareOffset_Texture2D_texture;
Variable TextureSampleProjCompareOffset_Texture2D_sampler;
Variable TextureSampleProjCompareOffset_Texture2D_coordinate;
Variable TextureSampleProjCompareOffset_Texture2D_proj;
Variable TextureSampleProjCompareOffset_Texture2D_compare;
Variable TextureSampleProjCompareOffset_Texture2D_offset;
Function TextureSampleProjCompareOffset_Texture2D;
inline constexpr std::array TextureSampleProjCompareOffset_Texture2D_args = { &TextureSampleProjCompareOffset_Texture2D_texture, &TextureSampleProjCompareOffset_Texture2D_sampler, &TextureSampleProjCompareOffset_Texture2D_coordinate, &TextureSampleProjCompareOffset_Texture2D_proj, &TextureSampleProjCompareOffset_Texture2D_compare, &TextureSampleProjCompareOffset_Texture2D_offset };

/// textureSampleProjCompareOffset with Texture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleProjCompareOffset_Texture2D_texture;
Variable SampledTextureSampleProjCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleProjCompareOffset_Texture2D_proj;
Variable SampledTextureSampleProjCompareOffset_Texture2D_compare;
Variable SampledTextureSampleProjCompareOffset_Texture2D_offset;
Function SampledTextureSampleProjCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture2D_args = { &SampledTextureSampleProjCompareOffset_Texture2D_texture, &SampledTextureSampleProjCompareOffset_Texture2D_coordinate, &SampledTextureSampleProjCompareOffset_Texture2D_proj, &SampledTextureSampleProjCompareOffset_Texture2D_compare, &SampledTextureSampleProjCompareOffset_Texture2D_offset };

/// textureSampleProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleProjCompareOffset_Texture3D_texture;
Variable TextureSampleProjCompareOffset_Texture3D_sampler;
Variable TextureSampleProjCompareOffset_Texture3D_coordinate;
Variable TextureSampleProjCompareOffset_Texture3D_proj;
Variable TextureSampleProjCompareOffset_Texture3D_compare;
Variable TextureSampleProjCompareOffset_Texture3D_offset;
Function TextureSampleProjCompareOffset_Texture3D;
inline constexpr std::array TextureSampleProjCompareOffset_Texture3D_args = { &TextureSampleProjCompareOffset_Texture3D_texture, &TextureSampleProjCompareOffset_Texture3D_sampler, &TextureSampleProjCompareOffset_Texture3D_coordinate, &TextureSampleProjCompareOffset_Texture3D_proj, &TextureSampleProjCompareOffset_Texture3D_compare, &TextureSampleProjCompareOffset_Texture3D_offset };

/// textureSampleProjCompareOffset with Texture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleProjCompareOffset_Texture3D_texture;
Variable SampledTextureSampleProjCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleProjCompareOffset_Texture3D_proj;
Variable SampledTextureSampleProjCompareOffset_Texture3D_compare;
Variable SampledTextureSampleProjCompareOffset_Texture3D_offset;
Function SampledTextureSampleProjCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleProjCompareOffset_Texture3D_args = { &SampledTextureSampleProjCompareOffset_Texture3D_texture, &SampledTextureSampleProjCompareOffset_Texture3D_coordinate, &SampledTextureSampleProjCompareOffset_Texture3D_proj, &SampledTextureSampleProjCompareOffset_Texture3D_compare, &SampledTextureSampleProjCompareOffset_Texture3D_offset };

/// textureSampleLod with Texture1D, Sampler, Float32, Float32
Variable TextureSampleLod_Texture1D_texture;
Variable TextureSampleLod_Texture1D_sampler;
Variable TextureSampleLod_Texture1D_coordinate;
Variable TextureSampleLod_Texture1D_lod;
Function TextureSampleLod_Texture1D;
inline constexpr std::array TextureSampleLod_Texture1D_args = { &TextureSampleLod_Texture1D_texture, &TextureSampleLod_Texture1D_sampler, &TextureSampleLod_Texture1D_coordinate, &TextureSampleLod_Texture1D_lod };

/// textureSampleLod with Texture1D, Float32, Float32
Variable SampledTextureSampleLod_Texture1D_texture;
Variable SampledTextureSampleLod_Texture1D_coordinate;
Variable SampledTextureSampleLod_Texture1D_lod;
Function SampledTextureSampleLod_Texture1D;
inline constexpr std::array SampledTextureSampleLod_Texture1D_args = { &SampledTextureSampleLod_Texture1D_texture, &SampledTextureSampleLod_Texture1D_coordinate, &SampledTextureSampleLod_Texture1D_lod };

/// textureSampleLod with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleLod_Texture2D_texture;
Variable TextureSampleLod_Texture2D_sampler;
Variable TextureSampleLod_Texture2D_coordinate;
Variable TextureSampleLod_Texture2D_lod;
Function TextureSampleLod_Texture2D;
inline constexpr std::array TextureSampleLod_Texture2D_args = { &TextureSampleLod_Texture2D_texture, &TextureSampleLod_Texture2D_sampler, &TextureSampleLod_Texture2D_coordinate, &TextureSampleLod_Texture2D_lod };

/// textureSampleLod with Texture2D, Float32x2, Float32
Variable SampledTextureSampleLod_Texture2D_texture;
Variable SampledTextureSampleLod_Texture2D_coordinate;
Variable SampledTextureSampleLod_Texture2D_lod;
Function SampledTextureSampleLod_Texture2D;
inline constexpr std::array SampledTextureSampleLod_Texture2D_args = { &SampledTextureSampleLod_Texture2D_texture, &SampledTextureSampleLod_Texture2D_coordinate, &SampledTextureSampleLod_Texture2D_lod };

/// textureSampleLod with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleLod_Texture3D_texture;
Variable TextureSampleLod_Texture3D_sampler;
Variable TextureSampleLod_Texture3D_coordinate;
Variable TextureSampleLod_Texture3D_lod;
Function TextureSampleLod_Texture3D;
inline constexpr std::array TextureSampleLod_Texture3D_args = { &TextureSampleLod_Texture3D_texture, &TextureSampleLod_Texture3D_sampler, &TextureSampleLod_Texture3D_coordinate, &TextureSampleLod_Texture3D_lod };

/// textureSampleLod with Texture3D, Float32x3, Float32
Variable SampledTextureSampleLod_Texture3D_texture;
Variable SampledTextureSampleLod_Texture3D_coordinate;
Variable SampledTextureSampleLod_Texture3D_lod;
Function SampledTextureSampleLod_Texture3D;
inline constexpr std::array SampledTextureSampleLod_Texture3D_args = { &SampledTextureSampleLod_Texture3D_texture, &SampledTextureSampleLod_Texture3D_coordinate, &SampledTextureSampleLod_Texture3D_lod };

/// textureSampleLod with TextureCube, Sampler, Float32x3, Float32
Variable TextureSampleLod_TextureCube_texture;
Variable TextureSampleLod_TextureCube_sampler;
Variable TextureSampleLod_TextureCube_coordinate;
Variable TextureSampleLod_TextureCube_lod;
Function TextureSampleLod_TextureCube;
inline constexpr std::array TextureSampleLod_TextureCube_args = { &TextureSampleLod_TextureCube_texture, &TextureSampleLod_TextureCube_sampler, &TextureSampleLod_TextureCube_coordinate, &TextureSampleLod_TextureCube_lod };

/// textureSampleLod with TextureCube, Float32x3, Float32
Variable SampledTextureSampleLod_TextureCube_texture;
Variable SampledTextureSampleLod_TextureCube_coordinate;
Variable SampledTextureSampleLod_TextureCube_lod;
Function SampledTextureSampleLod_TextureCube;
inline constexpr std::array SampledTextureSampleLod_TextureCube_args = { &SampledTextureSampleLod_TextureCube_texture, &SampledTextureSampleLod_TextureCube_coordinate, &SampledTextureSampleLod_TextureCube_lod };

/// textureSampleLod with Texture1DArray, Sampler, Float32x2, Float32
Variable TextureSampleLod_Texture1DArray_texture;
Variable TextureSampleLod_Texture1DArray_sampler;
Variable TextureSampleLod_Texture1DArray_coordinate;
Variable TextureSampleLod_Texture1DArray_lod;
Function TextureSampleLod_Texture1DArray;
inline constexpr std::array TextureSampleLod_Texture1DArray_args = { &TextureSampleLod_Texture1DArray_texture, &TextureSampleLod_Texture1DArray_sampler, &TextureSampleLod_Texture1DArray_coordinate, &TextureSampleLod_Texture1DArray_lod };

/// textureSampleLod with Texture1DArray, Float32x2, Float32
Variable SampledTextureSampleLod_Texture1DArray_texture;
Variable SampledTextureSampleLod_Texture1DArray_coordinate;
Variable SampledTextureSampleLod_Texture1DArray_lod;
Function SampledTextureSampleLod_Texture1DArray;
inline constexpr std::array SampledTextureSampleLod_Texture1DArray_args = { &SampledTextureSampleLod_Texture1DArray_texture, &SampledTextureSampleLod_Texture1DArray_coordinate, &SampledTextureSampleLod_Texture1DArray_lod };

/// textureSampleLod with Texture2DArray, Sampler, Float32x3, Float32
Variable TextureSampleLod_Texture2DArray_texture;
Variable TextureSampleLod_Texture2DArray_sampler;
Variable TextureSampleLod_Texture2DArray_coordinate;
Variable TextureSampleLod_Texture2DArray_lod;
Function TextureSampleLod_Texture2DArray;
inline constexpr std::array TextureSampleLod_Texture2DArray_args = { &TextureSampleLod_Texture2DArray_texture, &TextureSampleLod_Texture2DArray_sampler, &TextureSampleLod_Texture2DArray_coordinate, &TextureSampleLod_Texture2DArray_lod };

/// textureSampleLod with Texture2DArray, Float32x3, Float32
Variable SampledTextureSampleLod_Texture2DArray_texture;
Variable SampledTextureSampleLod_Texture2DArray_coordinate;
Variable SampledTextureSampleLod_Texture2DArray_lod;
Function SampledTextureSampleLod_Texture2DArray;
inline constexpr std::array SampledTextureSampleLod_Texture2DArray_args = { &SampledTextureSampleLod_Texture2DArray_texture, &SampledTextureSampleLod_Texture2DArray_coordinate, &SampledTextureSampleLod_Texture2DArray_lod };

/// textureSampleLod with TextureCubeArray, Sampler, Float32x4, Float32
Variable TextureSampleLod_TextureCubeArray_texture;
Variable TextureSampleLod_TextureCubeArray_sampler;
Variable TextureSampleLod_TextureCubeArray_coordinate;
Variable TextureSampleLod_TextureCubeArray_lod;
Function TextureSampleLod_TextureCubeArray;
inline constexpr std::array TextureSampleLod_TextureCubeArray_args = { &TextureSampleLod_TextureCubeArray_texture, &TextureSampleLod_TextureCubeArray_sampler, &TextureSampleLod_TextureCubeArray_coordinate, &TextureSampleLod_TextureCubeArray_lod };

/// textureSampleLod with TextureCubeArray, Float32x4, Float32
Variable SampledTextureSampleLod_TextureCubeArray_texture;
Variable SampledTextureSampleLod_TextureCubeArray_coordinate;
Variable SampledTextureSampleLod_TextureCubeArray_lod;
Function SampledTextureSampleLod_TextureCubeArray;
inline constexpr std::array SampledTextureSampleLod_TextureCubeArray_args = { &SampledTextureSampleLod_TextureCubeArray_texture, &SampledTextureSampleLod_TextureCubeArray_coordinate, &SampledTextureSampleLod_TextureCubeArray_lod };

/// textureSampleLodOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleLodOffset_Texture1D_texture;
Variable TextureSampleLodOffset_Texture1D_sampler;
Variable TextureSampleLodOffset_Texture1D_coordinate;
Variable TextureSampleLodOffset_Texture1D_lod;
Variable TextureSampleLodOffset_Texture1D_offset;
Function TextureSampleLodOffset_Texture1D;
inline constexpr std::array TextureSampleLodOffset_Texture1D_args = { &TextureSampleLodOffset_Texture1D_texture, &TextureSampleLodOffset_Texture1D_sampler, &TextureSampleLodOffset_Texture1D_coordinate, &TextureSampleLodOffset_Texture1D_lod, &TextureSampleLodOffset_Texture1D_offset };

/// textureSampleLodOffset with Texture1D, Float32, Float32, Float32
Variable SampledTextureSampleLodOffset_Texture1D_texture;
Variable SampledTextureSampleLodOffset_Texture1D_coordinate;
Variable SampledTextureSampleLodOffset_Texture1D_lod;
Variable SampledTextureSampleLodOffset_Texture1D_offset;
Function SampledTextureSampleLodOffset_Texture1D;
inline constexpr std::array SampledTextureSampleLodOffset_Texture1D_args = { &SampledTextureSampleLodOffset_Texture1D_texture, &SampledTextureSampleLodOffset_Texture1D_coordinate, &SampledTextureSampleLodOffset_Texture1D_lod, &SampledTextureSampleLodOffset_Texture1D_offset };

/// textureSampleLodOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleLodOffset_Texture2D_texture;
Variable TextureSampleLodOffset_Texture2D_sampler;
Variable TextureSampleLodOffset_Texture2D_coordinate;
Variable TextureSampleLodOffset_Texture2D_lod;
Variable TextureSampleLodOffset_Texture2D_offset;
Function TextureSampleLodOffset_Texture2D;
inline constexpr std::array TextureSampleLodOffset_Texture2D_args = { &TextureSampleLodOffset_Texture2D_texture, &TextureSampleLodOffset_Texture2D_sampler, &TextureSampleLodOffset_Texture2D_coordinate, &TextureSampleLodOffset_Texture2D_lod, &TextureSampleLodOffset_Texture2D_offset };

/// textureSampleLodOffset with Texture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleLodOffset_Texture2D_texture;
Variable SampledTextureSampleLodOffset_Texture2D_coordinate;
Variable SampledTextureSampleLodOffset_Texture2D_lod;
Variable SampledTextureSampleLodOffset_Texture2D_offset;
Function SampledTextureSampleLodOffset_Texture2D;
inline constexpr std::array SampledTextureSampleLodOffset_Texture2D_args = { &SampledTextureSampleLodOffset_Texture2D_texture, &SampledTextureSampleLodOffset_Texture2D_coordinate, &SampledTextureSampleLodOffset_Texture2D_lod, &SampledTextureSampleLodOffset_Texture2D_offset };

/// textureSampleLodOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleLodOffset_Texture3D_texture;
Variable TextureSampleLodOffset_Texture3D_sampler;
Variable TextureSampleLodOffset_Texture3D_coordinate;
Variable TextureSampleLodOffset_Texture3D_lod;
Variable TextureSampleLodOffset_Texture3D_offset;
Function TextureSampleLodOffset_Texture3D;
inline constexpr std::array TextureSampleLodOffset_Texture3D_args = { &TextureSampleLodOffset_Texture3D_texture, &TextureSampleLodOffset_Texture3D_sampler, &TextureSampleLodOffset_Texture3D_coordinate, &TextureSampleLodOffset_Texture3D_lod, &TextureSampleLodOffset_Texture3D_offset };

/// textureSampleLodOffset with Texture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleLodOffset_Texture3D_texture;
Variable SampledTextureSampleLodOffset_Texture3D_coordinate;
Variable SampledTextureSampleLodOffset_Texture3D_lod;
Variable SampledTextureSampleLodOffset_Texture3D_offset;
Function SampledTextureSampleLodOffset_Texture3D;
inline constexpr std::array SampledTextureSampleLodOffset_Texture3D_args = { &SampledTextureSampleLodOffset_Texture3D_texture, &SampledTextureSampleLodOffset_Texture3D_coordinate, &SampledTextureSampleLodOffset_Texture3D_lod, &SampledTextureSampleLodOffset_Texture3D_offset };

/// textureSampleLodOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleLodOffset_Texture1DArray_texture;
Variable TextureSampleLodOffset_Texture1DArray_sampler;
Variable TextureSampleLodOffset_Texture1DArray_coordinate;
Variable TextureSampleLodOffset_Texture1DArray_lod;
Variable TextureSampleLodOffset_Texture1DArray_offset;
Function TextureSampleLodOffset_Texture1DArray;
inline constexpr std::array TextureSampleLodOffset_Texture1DArray_args = { &TextureSampleLodOffset_Texture1DArray_texture, &TextureSampleLodOffset_Texture1DArray_sampler, &TextureSampleLodOffset_Texture1DArray_coordinate, &TextureSampleLodOffset_Texture1DArray_lod, &TextureSampleLodOffset_Texture1DArray_offset };

/// textureSampleLodOffset with Texture1DArray, Float32x2, Float32, Float32x2
Variable SampledTextureSampleLodOffset_Texture1DArray_texture;
Variable SampledTextureSampleLodOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleLodOffset_Texture1DArray_lod;
Variable SampledTextureSampleLodOffset_Texture1DArray_offset;
Function SampledTextureSampleLodOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleLodOffset_Texture1DArray_args = { &SampledTextureSampleLodOffset_Texture1DArray_texture, &SampledTextureSampleLodOffset_Texture1DArray_coordinate, &SampledTextureSampleLodOffset_Texture1DArray_lod, &SampledTextureSampleLodOffset_Texture1DArray_offset };

/// textureSampleLodOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleLodOffset_Texture2DArray_texture;
Variable TextureSampleLodOffset_Texture2DArray_sampler;
Variable TextureSampleLodOffset_Texture2DArray_coordinate;
Variable TextureSampleLodOffset_Texture2DArray_lod;
Variable TextureSampleLodOffset_Texture2DArray_offset;
Function TextureSampleLodOffset_Texture2DArray;
inline constexpr std::array TextureSampleLodOffset_Texture2DArray_args = { &TextureSampleLodOffset_Texture2DArray_texture, &TextureSampleLodOffset_Texture2DArray_sampler, &TextureSampleLodOffset_Texture2DArray_coordinate, &TextureSampleLodOffset_Texture2DArray_lod, &TextureSampleLodOffset_Texture2DArray_offset };

/// textureSampleLodOffset with Texture2DArray, Float32x3, Float32, Float32x3
Variable SampledTextureSampleLodOffset_Texture2DArray_texture;
Variable SampledTextureSampleLodOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleLodOffset_Texture2DArray_lod;
Variable SampledTextureSampleLodOffset_Texture2DArray_offset;
Function SampledTextureSampleLodOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleLodOffset_Texture2DArray_args = { &SampledTextureSampleLodOffset_Texture2DArray_texture, &SampledTextureSampleLodOffset_Texture2DArray_coordinate, &SampledTextureSampleLodOffset_Texture2DArray_lod, &SampledTextureSampleLodOffset_Texture2DArray_offset };

/// textureSampleLodProj with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleLodProj_Texture1D_texture;
Variable TextureSampleLodProj_Texture1D_sampler;
Variable TextureSampleLodProj_Texture1D_coordinate;
Variable TextureSampleLodProj_Texture1D_lod;
Variable TextureSampleLodProj_Texture1D_proj;
Function TextureSampleLodProj_Texture1D;
inline constexpr std::array TextureSampleLodProj_Texture1D_args = { &TextureSampleLodProj_Texture1D_texture, &TextureSampleLodProj_Texture1D_sampler, &TextureSampleLodProj_Texture1D_coordinate, &TextureSampleLodProj_Texture1D_lod, &TextureSampleLodProj_Texture1D_proj };

/// textureSampleLodProj with Texture1D, Float32, Float32, Float32
Variable SampledTextureSampleLodProj_Texture1D_texture;
Variable SampledTextureSampleLodProj_Texture1D_coordinate;
Variable SampledTextureSampleLodProj_Texture1D_lod;
Variable SampledTextureSampleLodProj_Texture1D_proj;
Function SampledTextureSampleLodProj_Texture1D;
inline constexpr std::array SampledTextureSampleLodProj_Texture1D_args = { &SampledTextureSampleLodProj_Texture1D_texture, &SampledTextureSampleLodProj_Texture1D_coordinate, &SampledTextureSampleLodProj_Texture1D_lod, &SampledTextureSampleLodProj_Texture1D_proj };

/// textureSampleLodProj with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleLodProj_Texture2D_texture;
Variable TextureSampleLodProj_Texture2D_sampler;
Variable TextureSampleLodProj_Texture2D_coordinate;
Variable TextureSampleLodProj_Texture2D_lod;
Variable TextureSampleLodProj_Texture2D_proj;
Function TextureSampleLodProj_Texture2D;
inline constexpr std::array TextureSampleLodProj_Texture2D_args = { &TextureSampleLodProj_Texture2D_texture, &TextureSampleLodProj_Texture2D_sampler, &TextureSampleLodProj_Texture2D_coordinate, &TextureSampleLodProj_Texture2D_lod, &TextureSampleLodProj_Texture2D_proj };

/// textureSampleLodProj with Texture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleLodProj_Texture2D_texture;
Variable SampledTextureSampleLodProj_Texture2D_coordinate;
Variable SampledTextureSampleLodProj_Texture2D_lod;
Variable SampledTextureSampleLodProj_Texture2D_proj;
Function SampledTextureSampleLodProj_Texture2D;
inline constexpr std::array SampledTextureSampleLodProj_Texture2D_args = { &SampledTextureSampleLodProj_Texture2D_texture, &SampledTextureSampleLodProj_Texture2D_coordinate, &SampledTextureSampleLodProj_Texture2D_lod, &SampledTextureSampleLodProj_Texture2D_proj };

/// textureSampleLodProj with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleLodProj_Texture3D_texture;
Variable TextureSampleLodProj_Texture3D_sampler;
Variable TextureSampleLodProj_Texture3D_coordinate;
Variable TextureSampleLodProj_Texture3D_lod;
Variable TextureSampleLodProj_Texture3D_proj;
Function TextureSampleLodProj_Texture3D;
inline constexpr std::array TextureSampleLodProj_Texture3D_args = { &TextureSampleLodProj_Texture3D_texture, &TextureSampleLodProj_Texture3D_sampler, &TextureSampleLodProj_Texture3D_coordinate, &TextureSampleLodProj_Texture3D_lod, &TextureSampleLodProj_Texture3D_proj };

/// textureSampleLodProj with Texture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleLodProj_Texture3D_texture;
Variable SampledTextureSampleLodProj_Texture3D_coordinate;
Variable SampledTextureSampleLodProj_Texture3D_lod;
Variable SampledTextureSampleLodProj_Texture3D_proj;
Function SampledTextureSampleLodProj_Texture3D;
inline constexpr std::array SampledTextureSampleLodProj_Texture3D_args = { &SampledTextureSampleLodProj_Texture3D_texture, &SampledTextureSampleLodProj_Texture3D_coordinate, &SampledTextureSampleLodProj_Texture3D_lod, &SampledTextureSampleLodProj_Texture3D_proj };

/// textureSampleLodProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleLodProjOffset_Texture1D_texture;
Variable TextureSampleLodProjOffset_Texture1D_sampler;
Variable TextureSampleLodProjOffset_Texture1D_coordinate;
Variable TextureSampleLodProjOffset_Texture1D_lod;
Variable TextureSampleLodProjOffset_Texture1D_proj;
Variable TextureSampleLodProjOffset_Texture1D_offset;
Function TextureSampleLodProjOffset_Texture1D;
inline constexpr std::array TextureSampleLodProjOffset_Texture1D_args = { &TextureSampleLodProjOffset_Texture1D_texture, &TextureSampleLodProjOffset_Texture1D_sampler, &TextureSampleLodProjOffset_Texture1D_coordinate, &TextureSampleLodProjOffset_Texture1D_lod, &TextureSampleLodProjOffset_Texture1D_proj, &TextureSampleLodProjOffset_Texture1D_offset };

/// textureSampleLodProjOffset with Texture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleLodProjOffset_Texture1D_texture;
Variable SampledTextureSampleLodProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleLodProjOffset_Texture1D_lod;
Variable SampledTextureSampleLodProjOffset_Texture1D_proj;
Variable SampledTextureSampleLodProjOffset_Texture1D_offset;
Function SampledTextureSampleLodProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture1D_args = { &SampledTextureSampleLodProjOffset_Texture1D_texture, &SampledTextureSampleLodProjOffset_Texture1D_coordinate, &SampledTextureSampleLodProjOffset_Texture1D_lod, &SampledTextureSampleLodProjOffset_Texture1D_proj, &SampledTextureSampleLodProjOffset_Texture1D_offset };

/// textureSampleLodProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleLodProjOffset_Texture2D_texture;
Variable TextureSampleLodProjOffset_Texture2D_sampler;
Variable TextureSampleLodProjOffset_Texture2D_coordinate;
Variable TextureSampleLodProjOffset_Texture2D_lod;
Variable TextureSampleLodProjOffset_Texture2D_proj;
Variable TextureSampleLodProjOffset_Texture2D_offset;
Function TextureSampleLodProjOffset_Texture2D;
inline constexpr std::array TextureSampleLodProjOffset_Texture2D_args = { &TextureSampleLodProjOffset_Texture2D_texture, &TextureSampleLodProjOffset_Texture2D_sampler, &TextureSampleLodProjOffset_Texture2D_coordinate, &TextureSampleLodProjOffset_Texture2D_lod, &TextureSampleLodProjOffset_Texture2D_proj, &TextureSampleLodProjOffset_Texture2D_offset };

/// textureSampleLodProjOffset with Texture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleLodProjOffset_Texture2D_texture;
Variable SampledTextureSampleLodProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleLodProjOffset_Texture2D_lod;
Variable SampledTextureSampleLodProjOffset_Texture2D_proj;
Variable SampledTextureSampleLodProjOffset_Texture2D_offset;
Function SampledTextureSampleLodProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture2D_args = { &SampledTextureSampleLodProjOffset_Texture2D_texture, &SampledTextureSampleLodProjOffset_Texture2D_coordinate, &SampledTextureSampleLodProjOffset_Texture2D_lod, &SampledTextureSampleLodProjOffset_Texture2D_proj, &SampledTextureSampleLodProjOffset_Texture2D_offset };

/// textureSampleLodProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleLodProjOffset_Texture3D_texture;
Variable TextureSampleLodProjOffset_Texture3D_sampler;
Variable TextureSampleLodProjOffset_Texture3D_coordinate;
Variable TextureSampleLodProjOffset_Texture3D_lod;
Variable TextureSampleLodProjOffset_Texture3D_proj;
Variable TextureSampleLodProjOffset_Texture3D_offset;
Function TextureSampleLodProjOffset_Texture3D;
inline constexpr std::array TextureSampleLodProjOffset_Texture3D_args = { &TextureSampleLodProjOffset_Texture3D_texture, &TextureSampleLodProjOffset_Texture3D_sampler, &TextureSampleLodProjOffset_Texture3D_coordinate, &TextureSampleLodProjOffset_Texture3D_lod, &TextureSampleLodProjOffset_Texture3D_proj, &TextureSampleLodProjOffset_Texture3D_offset };

/// textureSampleLodProjOffset with Texture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleLodProjOffset_Texture3D_texture;
Variable SampledTextureSampleLodProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleLodProjOffset_Texture3D_lod;
Variable SampledTextureSampleLodProjOffset_Texture3D_proj;
Variable SampledTextureSampleLodProjOffset_Texture3D_offset;
Function SampledTextureSampleLodProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleLodProjOffset_Texture3D_args = { &SampledTextureSampleLodProjOffset_Texture3D_texture, &SampledTextureSampleLodProjOffset_Texture3D_coordinate, &SampledTextureSampleLodProjOffset_Texture3D_lod, &SampledTextureSampleLodProjOffset_Texture3D_proj, &SampledTextureSampleLodProjOffset_Texture3D_offset };

/// textureSampleLodCompare with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleLodCompare_Texture1D_texture;
Variable TextureSampleLodCompare_Texture1D_sampler;
Variable TextureSampleLodCompare_Texture1D_coordinate;
Variable TextureSampleLodCompare_Texture1D_lod;
Variable TextureSampleLodCompare_Texture1D_compare;
Function TextureSampleLodCompare_Texture1D;
inline constexpr std::array TextureSampleLodCompare_Texture1D_args = { &TextureSampleLodCompare_Texture1D_texture, &TextureSampleLodCompare_Texture1D_sampler, &TextureSampleLodCompare_Texture1D_coordinate, &TextureSampleLodCompare_Texture1D_lod, &TextureSampleLodCompare_Texture1D_compare };

/// textureSampleLodCompare with Texture1D, Float32, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture1D_texture;
Variable SampledTextureSampleLodCompare_Texture1D_coordinate;
Variable SampledTextureSampleLodCompare_Texture1D_lod;
Variable SampledTextureSampleLodCompare_Texture1D_compare;
Function SampledTextureSampleLodCompare_Texture1D;
inline constexpr std::array SampledTextureSampleLodCompare_Texture1D_args = { &SampledTextureSampleLodCompare_Texture1D_texture, &SampledTextureSampleLodCompare_Texture1D_coordinate, &SampledTextureSampleLodCompare_Texture1D_lod, &SampledTextureSampleLodCompare_Texture1D_compare };

/// textureSampleLodCompare with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleLodCompare_Texture2D_texture;
Variable TextureSampleLodCompare_Texture2D_sampler;
Variable TextureSampleLodCompare_Texture2D_coordinate;
Variable TextureSampleLodCompare_Texture2D_lod;
Variable TextureSampleLodCompare_Texture2D_compare;
Function TextureSampleLodCompare_Texture2D;
inline constexpr std::array TextureSampleLodCompare_Texture2D_args = { &TextureSampleLodCompare_Texture2D_texture, &TextureSampleLodCompare_Texture2D_sampler, &TextureSampleLodCompare_Texture2D_coordinate, &TextureSampleLodCompare_Texture2D_lod, &TextureSampleLodCompare_Texture2D_compare };

/// textureSampleLodCompare with Texture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture2D_texture;
Variable SampledTextureSampleLodCompare_Texture2D_coordinate;
Variable SampledTextureSampleLodCompare_Texture2D_lod;
Variable SampledTextureSampleLodCompare_Texture2D_compare;
Function SampledTextureSampleLodCompare_Texture2D;
inline constexpr std::array SampledTextureSampleLodCompare_Texture2D_args = { &SampledTextureSampleLodCompare_Texture2D_texture, &SampledTextureSampleLodCompare_Texture2D_coordinate, &SampledTextureSampleLodCompare_Texture2D_lod, &SampledTextureSampleLodCompare_Texture2D_compare };

/// textureSampleLodCompare with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleLodCompare_Texture3D_texture;
Variable TextureSampleLodCompare_Texture3D_sampler;
Variable TextureSampleLodCompare_Texture3D_coordinate;
Variable TextureSampleLodCompare_Texture3D_lod;
Variable TextureSampleLodCompare_Texture3D_compare;
Function TextureSampleLodCompare_Texture3D;
inline constexpr std::array TextureSampleLodCompare_Texture3D_args = { &TextureSampleLodCompare_Texture3D_texture, &TextureSampleLodCompare_Texture3D_sampler, &TextureSampleLodCompare_Texture3D_coordinate, &TextureSampleLodCompare_Texture3D_lod, &TextureSampleLodCompare_Texture3D_compare };

/// textureSampleLodCompare with Texture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture3D_texture;
Variable SampledTextureSampleLodCompare_Texture3D_coordinate;
Variable SampledTextureSampleLodCompare_Texture3D_lod;
Variable SampledTextureSampleLodCompare_Texture3D_compare;
Function SampledTextureSampleLodCompare_Texture3D;
inline constexpr std::array SampledTextureSampleLodCompare_Texture3D_args = { &SampledTextureSampleLodCompare_Texture3D_texture, &SampledTextureSampleLodCompare_Texture3D_coordinate, &SampledTextureSampleLodCompare_Texture3D_lod, &SampledTextureSampleLodCompare_Texture3D_compare };

/// textureSampleLodCompare with Texture1DArray, Sampler, Float32x2, Float32, Float32
Variable TextureSampleLodCompare_Texture1DArray_texture;
Variable TextureSampleLodCompare_Texture1DArray_sampler;
Variable TextureSampleLodCompare_Texture1DArray_coordinate;
Variable TextureSampleLodCompare_Texture1DArray_lod;
Variable TextureSampleLodCompare_Texture1DArray_compare;
Function TextureSampleLodCompare_Texture1DArray;
inline constexpr std::array TextureSampleLodCompare_Texture1DArray_args = { &TextureSampleLodCompare_Texture1DArray_texture, &TextureSampleLodCompare_Texture1DArray_sampler, &TextureSampleLodCompare_Texture1DArray_coordinate, &TextureSampleLodCompare_Texture1DArray_lod, &TextureSampleLodCompare_Texture1DArray_compare };

/// textureSampleLodCompare with Texture1DArray, Float32x2, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture1DArray_texture;
Variable SampledTextureSampleLodCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleLodCompare_Texture1DArray_lod;
Variable SampledTextureSampleLodCompare_Texture1DArray_compare;
Function SampledTextureSampleLodCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleLodCompare_Texture1DArray_args = { &SampledTextureSampleLodCompare_Texture1DArray_texture, &SampledTextureSampleLodCompare_Texture1DArray_coordinate, &SampledTextureSampleLodCompare_Texture1DArray_lod, &SampledTextureSampleLodCompare_Texture1DArray_compare };

/// textureSampleLodCompare with Texture2DArray, Sampler, Float32x3, Float32, Float32
Variable TextureSampleLodCompare_Texture2DArray_texture;
Variable TextureSampleLodCompare_Texture2DArray_sampler;
Variable TextureSampleLodCompare_Texture2DArray_coordinate;
Variable TextureSampleLodCompare_Texture2DArray_lod;
Variable TextureSampleLodCompare_Texture2DArray_compare;
Function TextureSampleLodCompare_Texture2DArray;
inline constexpr std::array TextureSampleLodCompare_Texture2DArray_args = { &TextureSampleLodCompare_Texture2DArray_texture, &TextureSampleLodCompare_Texture2DArray_sampler, &TextureSampleLodCompare_Texture2DArray_coordinate, &TextureSampleLodCompare_Texture2DArray_lod, &TextureSampleLodCompare_Texture2DArray_compare };

/// textureSampleLodCompare with Texture2DArray, Float32x3, Float32, Float32
Variable SampledTextureSampleLodCompare_Texture2DArray_texture;
Variable SampledTextureSampleLodCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleLodCompare_Texture2DArray_lod;
Variable SampledTextureSampleLodCompare_Texture2DArray_compare;
Function SampledTextureSampleLodCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleLodCompare_Texture2DArray_args = { &SampledTextureSampleLodCompare_Texture2DArray_texture, &SampledTextureSampleLodCompare_Texture2DArray_coordinate, &SampledTextureSampleLodCompare_Texture2DArray_lod, &SampledTextureSampleLodCompare_Texture2DArray_compare };

/// textureSampleLodCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleLodCompareOffset_Texture1D_texture;
Variable TextureSampleLodCompareOffset_Texture1D_sampler;
Variable TextureSampleLodCompareOffset_Texture1D_coordinate;
Variable TextureSampleLodCompareOffset_Texture1D_lod;
Variable TextureSampleLodCompareOffset_Texture1D_compare;
Variable TextureSampleLodCompareOffset_Texture1D_offset;
Function TextureSampleLodCompareOffset_Texture1D;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1D_args = { &TextureSampleLodCompareOffset_Texture1D_texture, &TextureSampleLodCompareOffset_Texture1D_sampler, &TextureSampleLodCompareOffset_Texture1D_coordinate, &TextureSampleLodCompareOffset_Texture1D_lod, &TextureSampleLodCompareOffset_Texture1D_compare, &TextureSampleLodCompareOffset_Texture1D_offset };

/// textureSampleLodCompareOffset with Texture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleLodCompareOffset_Texture1D_texture;
Variable SampledTextureSampleLodCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture1D_lod;
Variable SampledTextureSampleLodCompareOffset_Texture1D_compare;
Variable SampledTextureSampleLodCompareOffset_Texture1D_offset;
Function SampledTextureSampleLodCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1D_args = { &SampledTextureSampleLodCompareOffset_Texture1D_texture, &SampledTextureSampleLodCompareOffset_Texture1D_coordinate, &SampledTextureSampleLodCompareOffset_Texture1D_lod, &SampledTextureSampleLodCompareOffset_Texture1D_compare, &SampledTextureSampleLodCompareOffset_Texture1D_offset };

/// textureSampleLodCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleLodCompareOffset_Texture2D_texture;
Variable TextureSampleLodCompareOffset_Texture2D_sampler;
Variable TextureSampleLodCompareOffset_Texture2D_coordinate;
Variable TextureSampleLodCompareOffset_Texture2D_lod;
Variable TextureSampleLodCompareOffset_Texture2D_compare;
Variable TextureSampleLodCompareOffset_Texture2D_offset;
Function TextureSampleLodCompareOffset_Texture2D;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2D_args = { &TextureSampleLodCompareOffset_Texture2D_texture, &TextureSampleLodCompareOffset_Texture2D_sampler, &TextureSampleLodCompareOffset_Texture2D_coordinate, &TextureSampleLodCompareOffset_Texture2D_lod, &TextureSampleLodCompareOffset_Texture2D_compare, &TextureSampleLodCompareOffset_Texture2D_offset };

/// textureSampleLodCompareOffset with Texture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleLodCompareOffset_Texture2D_texture;
Variable SampledTextureSampleLodCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture2D_lod;
Variable SampledTextureSampleLodCompareOffset_Texture2D_compare;
Variable SampledTextureSampleLodCompareOffset_Texture2D_offset;
Function SampledTextureSampleLodCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2D_args = { &SampledTextureSampleLodCompareOffset_Texture2D_texture, &SampledTextureSampleLodCompareOffset_Texture2D_coordinate, &SampledTextureSampleLodCompareOffset_Texture2D_lod, &SampledTextureSampleLodCompareOffset_Texture2D_compare, &SampledTextureSampleLodCompareOffset_Texture2D_offset };

/// textureSampleLodCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleLodCompareOffset_Texture3D_texture;
Variable TextureSampleLodCompareOffset_Texture3D_sampler;
Variable TextureSampleLodCompareOffset_Texture3D_coordinate;
Variable TextureSampleLodCompareOffset_Texture3D_lod;
Variable TextureSampleLodCompareOffset_Texture3D_compare;
Variable TextureSampleLodCompareOffset_Texture3D_offset;
Function TextureSampleLodCompareOffset_Texture3D;
inline constexpr std::array TextureSampleLodCompareOffset_Texture3D_args = { &TextureSampleLodCompareOffset_Texture3D_texture, &TextureSampleLodCompareOffset_Texture3D_sampler, &TextureSampleLodCompareOffset_Texture3D_coordinate, &TextureSampleLodCompareOffset_Texture3D_lod, &TextureSampleLodCompareOffset_Texture3D_compare, &TextureSampleLodCompareOffset_Texture3D_offset };

/// textureSampleLodCompareOffset with Texture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleLodCompareOffset_Texture3D_texture;
Variable SampledTextureSampleLodCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture3D_lod;
Variable SampledTextureSampleLodCompareOffset_Texture3D_compare;
Variable SampledTextureSampleLodCompareOffset_Texture3D_offset;
Function SampledTextureSampleLodCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture3D_args = { &SampledTextureSampleLodCompareOffset_Texture3D_texture, &SampledTextureSampleLodCompareOffset_Texture3D_coordinate, &SampledTextureSampleLodCompareOffset_Texture3D_lod, &SampledTextureSampleLodCompareOffset_Texture3D_compare, &SampledTextureSampleLodCompareOffset_Texture3D_offset };

/// textureSampleLodCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleLodCompareOffset_Texture1DArray_texture;
Variable TextureSampleLodCompareOffset_Texture1DArray_sampler;
Variable TextureSampleLodCompareOffset_Texture1DArray_coordinate;
Variable TextureSampleLodCompareOffset_Texture1DArray_lod;
Variable TextureSampleLodCompareOffset_Texture1DArray_compare;
Variable TextureSampleLodCompareOffset_Texture1DArray_offset;
Function TextureSampleLodCompareOffset_Texture1DArray;
inline constexpr std::array TextureSampleLodCompareOffset_Texture1DArray_args = { &TextureSampleLodCompareOffset_Texture1DArray_texture, &TextureSampleLodCompareOffset_Texture1DArray_sampler, &TextureSampleLodCompareOffset_Texture1DArray_coordinate, &TextureSampleLodCompareOffset_Texture1DArray_lod, &TextureSampleLodCompareOffset_Texture1DArray_compare, &TextureSampleLodCompareOffset_Texture1DArray_offset };

/// textureSampleLodCompareOffset with Texture1DArray, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_texture;
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_lod;
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_compare;
Variable SampledTextureSampleLodCompareOffset_Texture1DArray_offset;
Function SampledTextureSampleLodCompareOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture1DArray_args = { &SampledTextureSampleLodCompareOffset_Texture1DArray_texture, &SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate, &SampledTextureSampleLodCompareOffset_Texture1DArray_lod, &SampledTextureSampleLodCompareOffset_Texture1DArray_compare, &SampledTextureSampleLodCompareOffset_Texture1DArray_offset };

/// textureSampleLodCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleLodCompareOffset_Texture2DArray_texture;
Variable TextureSampleLodCompareOffset_Texture2DArray_sampler;
Variable TextureSampleLodCompareOffset_Texture2DArray_coordinate;
Variable TextureSampleLodCompareOffset_Texture2DArray_lod;
Variable TextureSampleLodCompareOffset_Texture2DArray_compare;
Variable TextureSampleLodCompareOffset_Texture2DArray_offset;
Function TextureSampleLodCompareOffset_Texture2DArray;
inline constexpr std::array TextureSampleLodCompareOffset_Texture2DArray_args = { &TextureSampleLodCompareOffset_Texture2DArray_texture, &TextureSampleLodCompareOffset_Texture2DArray_sampler, &TextureSampleLodCompareOffset_Texture2DArray_coordinate, &TextureSampleLodCompareOffset_Texture2DArray_lod, &TextureSampleLodCompareOffset_Texture2DArray_compare, &TextureSampleLodCompareOffset_Texture2DArray_offset };

/// textureSampleLodCompareOffset with Texture2DArray, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_texture;
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_lod;
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_compare;
Variable SampledTextureSampleLodCompareOffset_Texture2DArray_offset;
Function SampledTextureSampleLodCompareOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleLodCompareOffset_Texture2DArray_args = { &SampledTextureSampleLodCompareOffset_Texture2DArray_texture, &SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate, &SampledTextureSampleLodCompareOffset_Texture2DArray_lod, &SampledTextureSampleLodCompareOffset_Texture2DArray_compare, &SampledTextureSampleLodCompareOffset_Texture2DArray_offset };

/// textureSampleLodProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleLodProjCompare_Texture1D_texture;
Variable TextureSampleLodProjCompare_Texture1D_sampler;
Variable TextureSampleLodProjCompare_Texture1D_coordinate;
Variable TextureSampleLodProjCompare_Texture1D_lod;
Variable TextureSampleLodProjCompare_Texture1D_proj;
Variable TextureSampleLodProjCompare_Texture1D_compare;
Function TextureSampleLodProjCompare_Texture1D;
inline constexpr std::array TextureSampleLodProjCompare_Texture1D_args = { &TextureSampleLodProjCompare_Texture1D_texture, &TextureSampleLodProjCompare_Texture1D_sampler, &TextureSampleLodProjCompare_Texture1D_coordinate, &TextureSampleLodProjCompare_Texture1D_lod, &TextureSampleLodProjCompare_Texture1D_proj, &TextureSampleLodProjCompare_Texture1D_compare };

/// textureSampleLodProjCompare with Texture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompare_Texture1D_texture;
Variable SampledTextureSampleLodProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture1D_lod;
Variable SampledTextureSampleLodProjCompare_Texture1D_proj;
Variable SampledTextureSampleLodProjCompare_Texture1D_compare;
Function SampledTextureSampleLodProjCompare_Texture1D;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture1D_args = { &SampledTextureSampleLodProjCompare_Texture1D_texture, &SampledTextureSampleLodProjCompare_Texture1D_coordinate, &SampledTextureSampleLodProjCompare_Texture1D_lod, &SampledTextureSampleLodProjCompare_Texture1D_proj, &SampledTextureSampleLodProjCompare_Texture1D_compare };

/// textureSampleLodProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32, Float32
Variable TextureSampleLodProjCompare_Texture2D_texture;
Variable TextureSampleLodProjCompare_Texture2D_sampler;
Variable TextureSampleLodProjCompare_Texture2D_coordinate;
Variable TextureSampleLodProjCompare_Texture2D_lod;
Variable TextureSampleLodProjCompare_Texture2D_proj;
Variable TextureSampleLodProjCompare_Texture2D_compare;
Function TextureSampleLodProjCompare_Texture2D;
inline constexpr std::array TextureSampleLodProjCompare_Texture2D_args = { &TextureSampleLodProjCompare_Texture2D_texture, &TextureSampleLodProjCompare_Texture2D_sampler, &TextureSampleLodProjCompare_Texture2D_coordinate, &TextureSampleLodProjCompare_Texture2D_lod, &TextureSampleLodProjCompare_Texture2D_proj, &TextureSampleLodProjCompare_Texture2D_compare };

/// textureSampleLodProjCompare with Texture2D, Float32x2, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompare_Texture2D_texture;
Variable SampledTextureSampleLodProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture2D_lod;
Variable SampledTextureSampleLodProjCompare_Texture2D_proj;
Variable SampledTextureSampleLodProjCompare_Texture2D_compare;
Function SampledTextureSampleLodProjCompare_Texture2D;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture2D_args = { &SampledTextureSampleLodProjCompare_Texture2D_texture, &SampledTextureSampleLodProjCompare_Texture2D_coordinate, &SampledTextureSampleLodProjCompare_Texture2D_lod, &SampledTextureSampleLodProjCompare_Texture2D_proj, &SampledTextureSampleLodProjCompare_Texture2D_compare };

/// textureSampleLodProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32, Float32
Variable TextureSampleLodProjCompare_Texture3D_texture;
Variable TextureSampleLodProjCompare_Texture3D_sampler;
Variable TextureSampleLodProjCompare_Texture3D_coordinate;
Variable TextureSampleLodProjCompare_Texture3D_lod;
Variable TextureSampleLodProjCompare_Texture3D_proj;
Variable TextureSampleLodProjCompare_Texture3D_compare;
Function TextureSampleLodProjCompare_Texture3D;
inline constexpr std::array TextureSampleLodProjCompare_Texture3D_args = { &TextureSampleLodProjCompare_Texture3D_texture, &TextureSampleLodProjCompare_Texture3D_sampler, &TextureSampleLodProjCompare_Texture3D_coordinate, &TextureSampleLodProjCompare_Texture3D_lod, &TextureSampleLodProjCompare_Texture3D_proj, &TextureSampleLodProjCompare_Texture3D_compare };

/// textureSampleLodProjCompare with Texture3D, Float32x3, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompare_Texture3D_texture;
Variable SampledTextureSampleLodProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleLodProjCompare_Texture3D_lod;
Variable SampledTextureSampleLodProjCompare_Texture3D_proj;
Variable SampledTextureSampleLodProjCompare_Texture3D_compare;
Function SampledTextureSampleLodProjCompare_Texture3D;
inline constexpr std::array SampledTextureSampleLodProjCompare_Texture3D_args = { &SampledTextureSampleLodProjCompare_Texture3D_texture, &SampledTextureSampleLodProjCompare_Texture3D_coordinate, &SampledTextureSampleLodProjCompare_Texture3D_lod, &SampledTextureSampleLodProjCompare_Texture3D_proj, &SampledTextureSampleLodProjCompare_Texture3D_compare };

/// textureSampleLodProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleLodProjCompareOffset_Texture1D_texture;
Variable TextureSampleLodProjCompareOffset_Texture1D_sampler;
Variable TextureSampleLodProjCompareOffset_Texture1D_coordinate;
Variable TextureSampleLodProjCompareOffset_Texture1D_lod;
Variable TextureSampleLodProjCompareOffset_Texture1D_proj;
Variable TextureSampleLodProjCompareOffset_Texture1D_compare;
Variable TextureSampleLodProjCompareOffset_Texture1D_offset;
Function TextureSampleLodProjCompareOffset_Texture1D;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture1D_args = { &TextureSampleLodProjCompareOffset_Texture1D_texture, &TextureSampleLodProjCompareOffset_Texture1D_sampler, &TextureSampleLodProjCompareOffset_Texture1D_coordinate, &TextureSampleLodProjCompareOffset_Texture1D_lod, &TextureSampleLodProjCompareOffset_Texture1D_proj, &TextureSampleLodProjCompareOffset_Texture1D_compare, &TextureSampleLodProjCompareOffset_Texture1D_offset };

/// textureSampleLodProjCompareOffset with Texture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_texture;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_lod;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_proj;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_compare;
Variable SampledTextureSampleLodProjCompareOffset_Texture1D_offset;
Function SampledTextureSampleLodProjCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture1D_args = { &SampledTextureSampleLodProjCompareOffset_Texture1D_texture, &SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate, &SampledTextureSampleLodProjCompareOffset_Texture1D_lod, &SampledTextureSampleLodProjCompareOffset_Texture1D_proj, &SampledTextureSampleLodProjCompareOffset_Texture1D_compare, &SampledTextureSampleLodProjCompareOffset_Texture1D_offset };

/// textureSampleLodProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32, Float32x2
Variable TextureSampleLodProjCompareOffset_Texture2D_texture;
Variable TextureSampleLodProjCompareOffset_Texture2D_sampler;
Variable TextureSampleLodProjCompareOffset_Texture2D_coordinate;
Variable TextureSampleLodProjCompareOffset_Texture2D_lod;
Variable TextureSampleLodProjCompareOffset_Texture2D_proj;
Variable TextureSampleLodProjCompareOffset_Texture2D_compare;
Variable TextureSampleLodProjCompareOffset_Texture2D_offset;
Function TextureSampleLodProjCompareOffset_Texture2D;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture2D_args = { &TextureSampleLodProjCompareOffset_Texture2D_texture, &TextureSampleLodProjCompareOffset_Texture2D_sampler, &TextureSampleLodProjCompareOffset_Texture2D_coordinate, &TextureSampleLodProjCompareOffset_Texture2D_lod, &TextureSampleLodProjCompareOffset_Texture2D_proj, &TextureSampleLodProjCompareOffset_Texture2D_compare, &TextureSampleLodProjCompareOffset_Texture2D_offset };

/// textureSampleLodProjCompareOffset with Texture2D, Float32x2, Float32, Float32, Float32, Float32x2
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_texture;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_lod;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_proj;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_compare;
Variable SampledTextureSampleLodProjCompareOffset_Texture2D_offset;
Function SampledTextureSampleLodProjCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture2D_args = { &SampledTextureSampleLodProjCompareOffset_Texture2D_texture, &SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate, &SampledTextureSampleLodProjCompareOffset_Texture2D_lod, &SampledTextureSampleLodProjCompareOffset_Texture2D_proj, &SampledTextureSampleLodProjCompareOffset_Texture2D_compare, &SampledTextureSampleLodProjCompareOffset_Texture2D_offset };

/// textureSampleLodProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32, Float32x3
Variable TextureSampleLodProjCompareOffset_Texture3D_texture;
Variable TextureSampleLodProjCompareOffset_Texture3D_sampler;
Variable TextureSampleLodProjCompareOffset_Texture3D_coordinate;
Variable TextureSampleLodProjCompareOffset_Texture3D_lod;
Variable TextureSampleLodProjCompareOffset_Texture3D_proj;
Variable TextureSampleLodProjCompareOffset_Texture3D_compare;
Variable TextureSampleLodProjCompareOffset_Texture3D_offset;
Function TextureSampleLodProjCompareOffset_Texture3D;
inline constexpr std::array TextureSampleLodProjCompareOffset_Texture3D_args = { &TextureSampleLodProjCompareOffset_Texture3D_texture, &TextureSampleLodProjCompareOffset_Texture3D_sampler, &TextureSampleLodProjCompareOffset_Texture3D_coordinate, &TextureSampleLodProjCompareOffset_Texture3D_lod, &TextureSampleLodProjCompareOffset_Texture3D_proj, &TextureSampleLodProjCompareOffset_Texture3D_compare, &TextureSampleLodProjCompareOffset_Texture3D_offset };

/// textureSampleLodProjCompareOffset with Texture3D, Float32x3, Float32, Float32, Float32, Float32x3
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_texture;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_lod;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_proj;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_compare;
Variable SampledTextureSampleLodProjCompareOffset_Texture3D_offset;
Function SampledTextureSampleLodProjCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleLodProjCompareOffset_Texture3D_args = { &SampledTextureSampleLodProjCompareOffset_Texture3D_texture, &SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate, &SampledTextureSampleLodProjCompareOffset_Texture3D_lod, &SampledTextureSampleLodProjCompareOffset_Texture3D_proj, &SampledTextureSampleLodProjCompareOffset_Texture3D_compare, &SampledTextureSampleLodProjCompareOffset_Texture3D_offset };

/// textureSampleGrad with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleGrad_Texture1D_texture;
Variable TextureSampleGrad_Texture1D_sampler;
Variable TextureSampleGrad_Texture1D_coordinate;
Variable TextureSampleGrad_Texture1D_grad_x;
Variable TextureSampleGrad_Texture1D_grad_y;
Function TextureSampleGrad_Texture1D;
inline constexpr std::array TextureSampleGrad_Texture1D_args = { &TextureSampleGrad_Texture1D_texture, &TextureSampleGrad_Texture1D_sampler, &TextureSampleGrad_Texture1D_coordinate, &TextureSampleGrad_Texture1D_grad_x, &TextureSampleGrad_Texture1D_grad_y };

/// textureSampleGrad with Texture1D, Float32, Float32, Float32
Variable SampledTextureSampleGrad_Texture1D_texture;
Variable SampledTextureSampleGrad_Texture1D_coordinate;
Variable SampledTextureSampleGrad_Texture1D_grad_x;
Variable SampledTextureSampleGrad_Texture1D_grad_y;
Function SampledTextureSampleGrad_Texture1D;
inline constexpr std::array SampledTextureSampleGrad_Texture1D_args = { &SampledTextureSampleGrad_Texture1D_texture, &SampledTextureSampleGrad_Texture1D_coordinate, &SampledTextureSampleGrad_Texture1D_grad_x, &SampledTextureSampleGrad_Texture1D_grad_y };

/// textureSampleGrad with Texture2D, Sampler, Float32x2, Float32x2, Float32x2
Variable TextureSampleGrad_Texture2D_texture;
Variable TextureSampleGrad_Texture2D_sampler;
Variable TextureSampleGrad_Texture2D_coordinate;
Variable TextureSampleGrad_Texture2D_grad_x;
Variable TextureSampleGrad_Texture2D_grad_y;
Function TextureSampleGrad_Texture2D;
inline constexpr std::array TextureSampleGrad_Texture2D_args = { &TextureSampleGrad_Texture2D_texture, &TextureSampleGrad_Texture2D_sampler, &TextureSampleGrad_Texture2D_coordinate, &TextureSampleGrad_Texture2D_grad_x, &TextureSampleGrad_Texture2D_grad_y };

/// textureSampleGrad with Texture2D, Float32x2, Float32x2, Float32x2
Variable SampledTextureSampleGrad_Texture2D_texture;
Variable SampledTextureSampleGrad_Texture2D_coordinate;
Variable SampledTextureSampleGrad_Texture2D_grad_x;
Variable SampledTextureSampleGrad_Texture2D_grad_y;
Function SampledTextureSampleGrad_Texture2D;
inline constexpr std::array SampledTextureSampleGrad_Texture2D_args = { &SampledTextureSampleGrad_Texture2D_texture, &SampledTextureSampleGrad_Texture2D_coordinate, &SampledTextureSampleGrad_Texture2D_grad_x, &SampledTextureSampleGrad_Texture2D_grad_y };

/// textureSampleGrad with Texture3D, Sampler, Float32x3, Float32x3, Float32x3
Variable TextureSampleGrad_Texture3D_texture;
Variable TextureSampleGrad_Texture3D_sampler;
Variable TextureSampleGrad_Texture3D_coordinate;
Variable TextureSampleGrad_Texture3D_grad_x;
Variable TextureSampleGrad_Texture3D_grad_y;
Function TextureSampleGrad_Texture3D;
inline constexpr std::array TextureSampleGrad_Texture3D_args = { &TextureSampleGrad_Texture3D_texture, &TextureSampleGrad_Texture3D_sampler, &TextureSampleGrad_Texture3D_coordinate, &TextureSampleGrad_Texture3D_grad_x, &TextureSampleGrad_Texture3D_grad_y };

/// textureSampleGrad with Texture3D, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGrad_Texture3D_texture;
Variable SampledTextureSampleGrad_Texture3D_coordinate;
Variable SampledTextureSampleGrad_Texture3D_grad_x;
Variable SampledTextureSampleGrad_Texture3D_grad_y;
Function SampledTextureSampleGrad_Texture3D;
inline constexpr std::array SampledTextureSampleGrad_Texture3D_args = { &SampledTextureSampleGrad_Texture3D_texture, &SampledTextureSampleGrad_Texture3D_coordinate, &SampledTextureSampleGrad_Texture3D_grad_x, &SampledTextureSampleGrad_Texture3D_grad_y };

/// textureSampleGrad with TextureCube, Sampler, Float32x3, Float32x3, Float32x3
Variable TextureSampleGrad_TextureCube_texture;
Variable TextureSampleGrad_TextureCube_sampler;
Variable TextureSampleGrad_TextureCube_coordinate;
Variable TextureSampleGrad_TextureCube_grad_x;
Variable TextureSampleGrad_TextureCube_grad_y;
Function TextureSampleGrad_TextureCube;
inline constexpr std::array TextureSampleGrad_TextureCube_args = { &TextureSampleGrad_TextureCube_texture, &TextureSampleGrad_TextureCube_sampler, &TextureSampleGrad_TextureCube_coordinate, &TextureSampleGrad_TextureCube_grad_x, &TextureSampleGrad_TextureCube_grad_y };

/// textureSampleGrad with TextureCube, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGrad_TextureCube_texture;
Variable SampledTextureSampleGrad_TextureCube_coordinate;
Variable SampledTextureSampleGrad_TextureCube_grad_x;
Variable SampledTextureSampleGrad_TextureCube_grad_y;
Function SampledTextureSampleGrad_TextureCube;
inline constexpr std::array SampledTextureSampleGrad_TextureCube_args = { &SampledTextureSampleGrad_TextureCube_texture, &SampledTextureSampleGrad_TextureCube_coordinate, &SampledTextureSampleGrad_TextureCube_grad_x, &SampledTextureSampleGrad_TextureCube_grad_y };

/// textureSampleGrad with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2
Variable TextureSampleGrad_Texture1DArray_texture;
Variable TextureSampleGrad_Texture1DArray_sampler;
Variable TextureSampleGrad_Texture1DArray_coordinate;
Variable TextureSampleGrad_Texture1DArray_grad_x;
Variable TextureSampleGrad_Texture1DArray_grad_y;
Function TextureSampleGrad_Texture1DArray;
inline constexpr std::array TextureSampleGrad_Texture1DArray_args = { &TextureSampleGrad_Texture1DArray_texture, &TextureSampleGrad_Texture1DArray_sampler, &TextureSampleGrad_Texture1DArray_coordinate, &TextureSampleGrad_Texture1DArray_grad_x, &TextureSampleGrad_Texture1DArray_grad_y };

/// textureSampleGrad with Texture1DArray, Float32x2, Float32x2, Float32x2
Variable SampledTextureSampleGrad_Texture1DArray_texture;
Variable SampledTextureSampleGrad_Texture1DArray_coordinate;
Variable SampledTextureSampleGrad_Texture1DArray_grad_x;
Variable SampledTextureSampleGrad_Texture1DArray_grad_y;
Function SampledTextureSampleGrad_Texture1DArray;
inline constexpr std::array SampledTextureSampleGrad_Texture1DArray_args = { &SampledTextureSampleGrad_Texture1DArray_texture, &SampledTextureSampleGrad_Texture1DArray_coordinate, &SampledTextureSampleGrad_Texture1DArray_grad_x, &SampledTextureSampleGrad_Texture1DArray_grad_y };

/// textureSampleGrad with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3
Variable TextureSampleGrad_Texture2DArray_texture;
Variable TextureSampleGrad_Texture2DArray_sampler;
Variable TextureSampleGrad_Texture2DArray_coordinate;
Variable TextureSampleGrad_Texture2DArray_grad_x;
Variable TextureSampleGrad_Texture2DArray_grad_y;
Function TextureSampleGrad_Texture2DArray;
inline constexpr std::array TextureSampleGrad_Texture2DArray_args = { &TextureSampleGrad_Texture2DArray_texture, &TextureSampleGrad_Texture2DArray_sampler, &TextureSampleGrad_Texture2DArray_coordinate, &TextureSampleGrad_Texture2DArray_grad_x, &TextureSampleGrad_Texture2DArray_grad_y };

/// textureSampleGrad with Texture2DArray, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGrad_Texture2DArray_texture;
Variable SampledTextureSampleGrad_Texture2DArray_coordinate;
Variable SampledTextureSampleGrad_Texture2DArray_grad_x;
Variable SampledTextureSampleGrad_Texture2DArray_grad_y;
Function SampledTextureSampleGrad_Texture2DArray;
inline constexpr std::array SampledTextureSampleGrad_Texture2DArray_args = { &SampledTextureSampleGrad_Texture2DArray_texture, &SampledTextureSampleGrad_Texture2DArray_coordinate, &SampledTextureSampleGrad_Texture2DArray_grad_x, &SampledTextureSampleGrad_Texture2DArray_grad_y };

/// textureSampleGrad with TextureCubeArray, Sampler, Float32x4, Float32x4, Float32x4
Variable TextureSampleGrad_TextureCubeArray_texture;
Variable TextureSampleGrad_TextureCubeArray_sampler;
Variable TextureSampleGrad_TextureCubeArray_coordinate;
Variable TextureSampleGrad_TextureCubeArray_grad_x;
Variable TextureSampleGrad_TextureCubeArray_grad_y;
Function TextureSampleGrad_TextureCubeArray;
inline constexpr std::array TextureSampleGrad_TextureCubeArray_args = { &TextureSampleGrad_TextureCubeArray_texture, &TextureSampleGrad_TextureCubeArray_sampler, &TextureSampleGrad_TextureCubeArray_coordinate, &TextureSampleGrad_TextureCubeArray_grad_x, &TextureSampleGrad_TextureCubeArray_grad_y };

/// textureSampleGrad with TextureCubeArray, Float32x4, Float32x4, Float32x4
Variable SampledTextureSampleGrad_TextureCubeArray_texture;
Variable SampledTextureSampleGrad_TextureCubeArray_coordinate;
Variable SampledTextureSampleGrad_TextureCubeArray_grad_x;
Variable SampledTextureSampleGrad_TextureCubeArray_grad_y;
Function SampledTextureSampleGrad_TextureCubeArray;
inline constexpr std::array SampledTextureSampleGrad_TextureCubeArray_args = { &SampledTextureSampleGrad_TextureCubeArray_texture, &SampledTextureSampleGrad_TextureCubeArray_coordinate, &SampledTextureSampleGrad_TextureCubeArray_grad_x, &SampledTextureSampleGrad_TextureCubeArray_grad_y };

/// textureSampleGradOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleGradOffset_Texture1D_texture;
Variable TextureSampleGradOffset_Texture1D_sampler;
Variable TextureSampleGradOffset_Texture1D_coordinate;
Variable TextureSampleGradOffset_Texture1D_grad_x;
Variable TextureSampleGradOffset_Texture1D_grad_y;
Variable TextureSampleGradOffset_Texture1D_offset;
Function TextureSampleGradOffset_Texture1D;
inline constexpr std::array TextureSampleGradOffset_Texture1D_args = { &TextureSampleGradOffset_Texture1D_texture, &TextureSampleGradOffset_Texture1D_sampler, &TextureSampleGradOffset_Texture1D_coordinate, &TextureSampleGradOffset_Texture1D_grad_x, &TextureSampleGradOffset_Texture1D_grad_y, &TextureSampleGradOffset_Texture1D_offset };

/// textureSampleGradOffset with Texture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradOffset_Texture1D_texture;
Variable SampledTextureSampleGradOffset_Texture1D_coordinate;
Variable SampledTextureSampleGradOffset_Texture1D_grad_x;
Variable SampledTextureSampleGradOffset_Texture1D_grad_y;
Variable SampledTextureSampleGradOffset_Texture1D_offset;
Function SampledTextureSampleGradOffset_Texture1D;
inline constexpr std::array SampledTextureSampleGradOffset_Texture1D_args = { &SampledTextureSampleGradOffset_Texture1D_texture, &SampledTextureSampleGradOffset_Texture1D_coordinate, &SampledTextureSampleGradOffset_Texture1D_grad_x, &SampledTextureSampleGradOffset_Texture1D_grad_y, &SampledTextureSampleGradOffset_Texture1D_offset };

/// textureSampleGradOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32x2
Variable TextureSampleGradOffset_Texture2D_texture;
Variable TextureSampleGradOffset_Texture2D_sampler;
Variable TextureSampleGradOffset_Texture2D_coordinate;
Variable TextureSampleGradOffset_Texture2D_grad_x;
Variable TextureSampleGradOffset_Texture2D_grad_y;
Variable TextureSampleGradOffset_Texture2D_offset;
Function TextureSampleGradOffset_Texture2D;
inline constexpr std::array TextureSampleGradOffset_Texture2D_args = { &TextureSampleGradOffset_Texture2D_texture, &TextureSampleGradOffset_Texture2D_sampler, &TextureSampleGradOffset_Texture2D_coordinate, &TextureSampleGradOffset_Texture2D_grad_x, &TextureSampleGradOffset_Texture2D_grad_y, &TextureSampleGradOffset_Texture2D_offset };

/// textureSampleGradOffset with Texture2D, Float32x2, Float32x2, Float32x2, Float32x2
Variable SampledTextureSampleGradOffset_Texture2D_texture;
Variable SampledTextureSampleGradOffset_Texture2D_coordinate;
Variable SampledTextureSampleGradOffset_Texture2D_grad_x;
Variable SampledTextureSampleGradOffset_Texture2D_grad_y;
Variable SampledTextureSampleGradOffset_Texture2D_offset;
Function SampledTextureSampleGradOffset_Texture2D;
inline constexpr std::array SampledTextureSampleGradOffset_Texture2D_args = { &SampledTextureSampleGradOffset_Texture2D_texture, &SampledTextureSampleGradOffset_Texture2D_coordinate, &SampledTextureSampleGradOffset_Texture2D_grad_x, &SampledTextureSampleGradOffset_Texture2D_grad_y, &SampledTextureSampleGradOffset_Texture2D_offset };

/// textureSampleGradOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32x3
Variable TextureSampleGradOffset_Texture3D_texture;
Variable TextureSampleGradOffset_Texture3D_sampler;
Variable TextureSampleGradOffset_Texture3D_coordinate;
Variable TextureSampleGradOffset_Texture3D_grad_x;
Variable TextureSampleGradOffset_Texture3D_grad_y;
Variable TextureSampleGradOffset_Texture3D_offset;
Function TextureSampleGradOffset_Texture3D;
inline constexpr std::array TextureSampleGradOffset_Texture3D_args = { &TextureSampleGradOffset_Texture3D_texture, &TextureSampleGradOffset_Texture3D_sampler, &TextureSampleGradOffset_Texture3D_coordinate, &TextureSampleGradOffset_Texture3D_grad_x, &TextureSampleGradOffset_Texture3D_grad_y, &TextureSampleGradOffset_Texture3D_offset };

/// textureSampleGradOffset with Texture3D, Float32x3, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGradOffset_Texture3D_texture;
Variable SampledTextureSampleGradOffset_Texture3D_coordinate;
Variable SampledTextureSampleGradOffset_Texture3D_grad_x;
Variable SampledTextureSampleGradOffset_Texture3D_grad_y;
Variable SampledTextureSampleGradOffset_Texture3D_offset;
Function SampledTextureSampleGradOffset_Texture3D;
inline constexpr std::array SampledTextureSampleGradOffset_Texture3D_args = { &SampledTextureSampleGradOffset_Texture3D_texture, &SampledTextureSampleGradOffset_Texture3D_coordinate, &SampledTextureSampleGradOffset_Texture3D_grad_x, &SampledTextureSampleGradOffset_Texture3D_grad_y, &SampledTextureSampleGradOffset_Texture3D_offset };

/// textureSampleGradOffset with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32x2
Variable TextureSampleGradOffset_Texture1DArray_texture;
Variable TextureSampleGradOffset_Texture1DArray_sampler;
Variable TextureSampleGradOffset_Texture1DArray_coordinate;
Variable TextureSampleGradOffset_Texture1DArray_grad_x;
Variable TextureSampleGradOffset_Texture1DArray_grad_y;
Variable TextureSampleGradOffset_Texture1DArray_offset;
Function TextureSampleGradOffset_Texture1DArray;
inline constexpr std::array TextureSampleGradOffset_Texture1DArray_args = { &TextureSampleGradOffset_Texture1DArray_texture, &TextureSampleGradOffset_Texture1DArray_sampler, &TextureSampleGradOffset_Texture1DArray_coordinate, &TextureSampleGradOffset_Texture1DArray_grad_x, &TextureSampleGradOffset_Texture1DArray_grad_y, &TextureSampleGradOffset_Texture1DArray_offset };

/// textureSampleGradOffset with Texture1DArray, Float32x2, Float32x2, Float32x2, Float32x2
Variable SampledTextureSampleGradOffset_Texture1DArray_texture;
Variable SampledTextureSampleGradOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleGradOffset_Texture1DArray_grad_x;
Variable SampledTextureSampleGradOffset_Texture1DArray_grad_y;
Variable SampledTextureSampleGradOffset_Texture1DArray_offset;
Function SampledTextureSampleGradOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleGradOffset_Texture1DArray_args = { &SampledTextureSampleGradOffset_Texture1DArray_texture, &SampledTextureSampleGradOffset_Texture1DArray_coordinate, &SampledTextureSampleGradOffset_Texture1DArray_grad_x, &SampledTextureSampleGradOffset_Texture1DArray_grad_y, &SampledTextureSampleGradOffset_Texture1DArray_offset };

/// textureSampleGradOffset with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32x3
Variable TextureSampleGradOffset_Texture2DArray_texture;
Variable TextureSampleGradOffset_Texture2DArray_sampler;
Variable TextureSampleGradOffset_Texture2DArray_coordinate;
Variable TextureSampleGradOffset_Texture2DArray_grad_x;
Variable TextureSampleGradOffset_Texture2DArray_grad_y;
Variable TextureSampleGradOffset_Texture2DArray_offset;
Function TextureSampleGradOffset_Texture2DArray;
inline constexpr std::array TextureSampleGradOffset_Texture2DArray_args = { &TextureSampleGradOffset_Texture2DArray_texture, &TextureSampleGradOffset_Texture2DArray_sampler, &TextureSampleGradOffset_Texture2DArray_coordinate, &TextureSampleGradOffset_Texture2DArray_grad_x, &TextureSampleGradOffset_Texture2DArray_grad_y, &TextureSampleGradOffset_Texture2DArray_offset };

/// textureSampleGradOffset with Texture2DArray, Float32x3, Float32x3, Float32x3, Float32x3
Variable SampledTextureSampleGradOffset_Texture2DArray_texture;
Variable SampledTextureSampleGradOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleGradOffset_Texture2DArray_grad_x;
Variable SampledTextureSampleGradOffset_Texture2DArray_grad_y;
Variable SampledTextureSampleGradOffset_Texture2DArray_offset;
Function SampledTextureSampleGradOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleGradOffset_Texture2DArray_args = { &SampledTextureSampleGradOffset_Texture2DArray_texture, &SampledTextureSampleGradOffset_Texture2DArray_coordinate, &SampledTextureSampleGradOffset_Texture2DArray_grad_x, &SampledTextureSampleGradOffset_Texture2DArray_grad_y, &SampledTextureSampleGradOffset_Texture2DArray_offset };

/// textureSampleGradProj with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleGradProj_Texture1D_texture;
Variable TextureSampleGradProj_Texture1D_sampler;
Variable TextureSampleGradProj_Texture1D_coordinate;
Variable TextureSampleGradProj_Texture1D_grad_x;
Variable TextureSampleGradProj_Texture1D_grad_y;
Variable TextureSampleGradProj_Texture1D_proj;
Function TextureSampleGradProj_Texture1D;
inline constexpr std::array TextureSampleGradProj_Texture1D_args = { &TextureSampleGradProj_Texture1D_texture, &TextureSampleGradProj_Texture1D_sampler, &TextureSampleGradProj_Texture1D_coordinate, &TextureSampleGradProj_Texture1D_grad_x, &TextureSampleGradProj_Texture1D_grad_y, &TextureSampleGradProj_Texture1D_proj };

/// textureSampleGradProj with Texture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradProj_Texture1D_texture;
Variable SampledTextureSampleGradProj_Texture1D_coordinate;
Variable SampledTextureSampleGradProj_Texture1D_grad_x;
Variable SampledTextureSampleGradProj_Texture1D_grad_y;
Variable SampledTextureSampleGradProj_Texture1D_proj;
Function SampledTextureSampleGradProj_Texture1D;
inline constexpr std::array SampledTextureSampleGradProj_Texture1D_args = { &SampledTextureSampleGradProj_Texture1D_texture, &SampledTextureSampleGradProj_Texture1D_coordinate, &SampledTextureSampleGradProj_Texture1D_grad_x, &SampledTextureSampleGradProj_Texture1D_grad_y, &SampledTextureSampleGradProj_Texture1D_proj };

/// textureSampleGradProj with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32
Variable TextureSampleGradProj_Texture2D_texture;
Variable TextureSampleGradProj_Texture2D_sampler;
Variable TextureSampleGradProj_Texture2D_coordinate;
Variable TextureSampleGradProj_Texture2D_grad_x;
Variable TextureSampleGradProj_Texture2D_grad_y;
Variable TextureSampleGradProj_Texture2D_proj;
Function TextureSampleGradProj_Texture2D;
inline constexpr std::array TextureSampleGradProj_Texture2D_args = { &TextureSampleGradProj_Texture2D_texture, &TextureSampleGradProj_Texture2D_sampler, &TextureSampleGradProj_Texture2D_coordinate, &TextureSampleGradProj_Texture2D_grad_x, &TextureSampleGradProj_Texture2D_grad_y, &TextureSampleGradProj_Texture2D_proj };

/// textureSampleGradProj with Texture2D, Float32x2, Float32x2, Float32x2, Float32
Variable SampledTextureSampleGradProj_Texture2D_texture;
Variable SampledTextureSampleGradProj_Texture2D_coordinate;
Variable SampledTextureSampleGradProj_Texture2D_grad_x;
Variable SampledTextureSampleGradProj_Texture2D_grad_y;
Variable SampledTextureSampleGradProj_Texture2D_proj;
Function SampledTextureSampleGradProj_Texture2D;
inline constexpr std::array SampledTextureSampleGradProj_Texture2D_args = { &SampledTextureSampleGradProj_Texture2D_texture, &SampledTextureSampleGradProj_Texture2D_coordinate, &SampledTextureSampleGradProj_Texture2D_grad_x, &SampledTextureSampleGradProj_Texture2D_grad_y, &SampledTextureSampleGradProj_Texture2D_proj };

/// textureSampleGradProj with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32
Variable TextureSampleGradProj_Texture3D_texture;
Variable TextureSampleGradProj_Texture3D_sampler;
Variable TextureSampleGradProj_Texture3D_coordinate;
Variable TextureSampleGradProj_Texture3D_grad_x;
Variable TextureSampleGradProj_Texture3D_grad_y;
Variable TextureSampleGradProj_Texture3D_proj;
Function TextureSampleGradProj_Texture3D;
inline constexpr std::array TextureSampleGradProj_Texture3D_args = { &TextureSampleGradProj_Texture3D_texture, &TextureSampleGradProj_Texture3D_sampler, &TextureSampleGradProj_Texture3D_coordinate, &TextureSampleGradProj_Texture3D_grad_x, &TextureSampleGradProj_Texture3D_grad_y, &TextureSampleGradProj_Texture3D_proj };

/// textureSampleGradProj with Texture3D, Float32x3, Float32x3, Float32x3, Float32
Variable SampledTextureSampleGradProj_Texture3D_texture;
Variable SampledTextureSampleGradProj_Texture3D_coordinate;
Variable SampledTextureSampleGradProj_Texture3D_grad_x;
Variable SampledTextureSampleGradProj_Texture3D_grad_y;
Variable SampledTextureSampleGradProj_Texture3D_proj;
Function SampledTextureSampleGradProj_Texture3D;
inline constexpr std::array SampledTextureSampleGradProj_Texture3D_args = { &SampledTextureSampleGradProj_Texture3D_texture, &SampledTextureSampleGradProj_Texture3D_coordinate, &SampledTextureSampleGradProj_Texture3D_grad_x, &SampledTextureSampleGradProj_Texture3D_grad_y, &SampledTextureSampleGradProj_Texture3D_proj };

/// textureSampleGradProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleGradProjOffset_Texture1D_texture;
Variable TextureSampleGradProjOffset_Texture1D_sampler;
Variable TextureSampleGradProjOffset_Texture1D_coordinate;
Variable TextureSampleGradProjOffset_Texture1D_grad_x;
Variable TextureSampleGradProjOffset_Texture1D_grad_y;
Variable TextureSampleGradProjOffset_Texture1D_proj;
Variable TextureSampleGradProjOffset_Texture1D_offset;
Function TextureSampleGradProjOffset_Texture1D;
inline constexpr std::array TextureSampleGradProjOffset_Texture1D_args = { &TextureSampleGradProjOffset_Texture1D_texture, &TextureSampleGradProjOffset_Texture1D_sampler, &TextureSampleGradProjOffset_Texture1D_coordinate, &TextureSampleGradProjOffset_Texture1D_grad_x, &TextureSampleGradProjOffset_Texture1D_grad_y, &TextureSampleGradProjOffset_Texture1D_proj, &TextureSampleGradProjOffset_Texture1D_offset };

/// textureSampleGradProjOffset with Texture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradProjOffset_Texture1D_texture;
Variable SampledTextureSampleGradProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleGradProjOffset_Texture1D_grad_x;
Variable SampledTextureSampleGradProjOffset_Texture1D_grad_y;
Variable SampledTextureSampleGradProjOffset_Texture1D_proj;
Variable SampledTextureSampleGradProjOffset_Texture1D_offset;
Function SampledTextureSampleGradProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture1D_args = { &SampledTextureSampleGradProjOffset_Texture1D_texture, &SampledTextureSampleGradProjOffset_Texture1D_coordinate, &SampledTextureSampleGradProjOffset_Texture1D_grad_x, &SampledTextureSampleGradProjOffset_Texture1D_grad_y, &SampledTextureSampleGradProjOffset_Texture1D_proj, &SampledTextureSampleGradProjOffset_Texture1D_offset };

/// textureSampleGradProjOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable TextureSampleGradProjOffset_Texture2D_texture;
Variable TextureSampleGradProjOffset_Texture2D_sampler;
Variable TextureSampleGradProjOffset_Texture2D_coordinate;
Variable TextureSampleGradProjOffset_Texture2D_grad_x;
Variable TextureSampleGradProjOffset_Texture2D_grad_y;
Variable TextureSampleGradProjOffset_Texture2D_proj;
Variable TextureSampleGradProjOffset_Texture2D_offset;
Function TextureSampleGradProjOffset_Texture2D;
inline constexpr std::array TextureSampleGradProjOffset_Texture2D_args = { &TextureSampleGradProjOffset_Texture2D_texture, &TextureSampleGradProjOffset_Texture2D_sampler, &TextureSampleGradProjOffset_Texture2D_coordinate, &TextureSampleGradProjOffset_Texture2D_grad_x, &TextureSampleGradProjOffset_Texture2D_grad_y, &TextureSampleGradProjOffset_Texture2D_proj, &TextureSampleGradProjOffset_Texture2D_offset };

/// textureSampleGradProjOffset with Texture2D, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable SampledTextureSampleGradProjOffset_Texture2D_texture;
Variable SampledTextureSampleGradProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleGradProjOffset_Texture2D_grad_x;
Variable SampledTextureSampleGradProjOffset_Texture2D_grad_y;
Variable SampledTextureSampleGradProjOffset_Texture2D_proj;
Variable SampledTextureSampleGradProjOffset_Texture2D_offset;
Function SampledTextureSampleGradProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture2D_args = { &SampledTextureSampleGradProjOffset_Texture2D_texture, &SampledTextureSampleGradProjOffset_Texture2D_coordinate, &SampledTextureSampleGradProjOffset_Texture2D_grad_x, &SampledTextureSampleGradProjOffset_Texture2D_grad_y, &SampledTextureSampleGradProjOffset_Texture2D_proj, &SampledTextureSampleGradProjOffset_Texture2D_offset };

/// textureSampleGradProjOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable TextureSampleGradProjOffset_Texture3D_texture;
Variable TextureSampleGradProjOffset_Texture3D_sampler;
Variable TextureSampleGradProjOffset_Texture3D_coordinate;
Variable TextureSampleGradProjOffset_Texture3D_grad_x;
Variable TextureSampleGradProjOffset_Texture3D_grad_y;
Variable TextureSampleGradProjOffset_Texture3D_proj;
Variable TextureSampleGradProjOffset_Texture3D_offset;
Function TextureSampleGradProjOffset_Texture3D;
inline constexpr std::array TextureSampleGradProjOffset_Texture3D_args = { &TextureSampleGradProjOffset_Texture3D_texture, &TextureSampleGradProjOffset_Texture3D_sampler, &TextureSampleGradProjOffset_Texture3D_coordinate, &TextureSampleGradProjOffset_Texture3D_grad_x, &TextureSampleGradProjOffset_Texture3D_grad_y, &TextureSampleGradProjOffset_Texture3D_proj, &TextureSampleGradProjOffset_Texture3D_offset };

/// textureSampleGradProjOffset with Texture3D, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable SampledTextureSampleGradProjOffset_Texture3D_texture;
Variable SampledTextureSampleGradProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleGradProjOffset_Texture3D_grad_x;
Variable SampledTextureSampleGradProjOffset_Texture3D_grad_y;
Variable SampledTextureSampleGradProjOffset_Texture3D_proj;
Variable SampledTextureSampleGradProjOffset_Texture3D_offset;
Function SampledTextureSampleGradProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleGradProjOffset_Texture3D_args = { &SampledTextureSampleGradProjOffset_Texture3D_texture, &SampledTextureSampleGradProjOffset_Texture3D_coordinate, &SampledTextureSampleGradProjOffset_Texture3D_grad_x, &SampledTextureSampleGradProjOffset_Texture3D_grad_y, &SampledTextureSampleGradProjOffset_Texture3D_proj, &SampledTextureSampleGradProjOffset_Texture3D_offset };

/// textureSampleGradCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleGradCompare_Texture1D_texture;
Variable TextureSampleGradCompare_Texture1D_sampler;
Variable TextureSampleGradCompare_Texture1D_coordinate;
Variable TextureSampleGradCompare_Texture1D_grad_x;
Variable TextureSampleGradCompare_Texture1D_grad_y;
Variable TextureSampleGradCompare_Texture1D_compare;
Function TextureSampleGradCompare_Texture1D;
inline constexpr std::array TextureSampleGradCompare_Texture1D_args = { &TextureSampleGradCompare_Texture1D_texture, &TextureSampleGradCompare_Texture1D_sampler, &TextureSampleGradCompare_Texture1D_coordinate, &TextureSampleGradCompare_Texture1D_grad_x, &TextureSampleGradCompare_Texture1D_grad_y, &TextureSampleGradCompare_Texture1D_compare };

/// textureSampleGradCompare with Texture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradCompare_Texture1D_texture;
Variable SampledTextureSampleGradCompare_Texture1D_coordinate;
Variable SampledTextureSampleGradCompare_Texture1D_grad_x;
Variable SampledTextureSampleGradCompare_Texture1D_grad_y;
Variable SampledTextureSampleGradCompare_Texture1D_compare;
Function SampledTextureSampleGradCompare_Texture1D;
inline constexpr std::array SampledTextureSampleGradCompare_Texture1D_args = { &SampledTextureSampleGradCompare_Texture1D_texture, &SampledTextureSampleGradCompare_Texture1D_coordinate, &SampledTextureSampleGradCompare_Texture1D_grad_x, &SampledTextureSampleGradCompare_Texture1D_grad_y, &SampledTextureSampleGradCompare_Texture1D_compare };

/// textureSampleGradCompare with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32
Variable TextureSampleGradCompare_Texture2D_texture;
Variable TextureSampleGradCompare_Texture2D_sampler;
Variable TextureSampleGradCompare_Texture2D_coordinate;
Variable TextureSampleGradCompare_Texture2D_grad_x;
Variable TextureSampleGradCompare_Texture2D_grad_y;
Variable TextureSampleGradCompare_Texture2D_compare;
Function TextureSampleGradCompare_Texture2D;
inline constexpr std::array TextureSampleGradCompare_Texture2D_args = { &TextureSampleGradCompare_Texture2D_texture, &TextureSampleGradCompare_Texture2D_sampler, &TextureSampleGradCompare_Texture2D_coordinate, &TextureSampleGradCompare_Texture2D_grad_x, &TextureSampleGradCompare_Texture2D_grad_y, &TextureSampleGradCompare_Texture2D_compare };

/// textureSampleGradCompare with Texture2D, Float32x2, Float32x2, Float32x2, Float32
Variable SampledTextureSampleGradCompare_Texture2D_texture;
Variable SampledTextureSampleGradCompare_Texture2D_coordinate;
Variable SampledTextureSampleGradCompare_Texture2D_grad_x;
Variable SampledTextureSampleGradCompare_Texture2D_grad_y;
Variable SampledTextureSampleGradCompare_Texture2D_compare;
Function SampledTextureSampleGradCompare_Texture2D;
inline constexpr std::array SampledTextureSampleGradCompare_Texture2D_args = { &SampledTextureSampleGradCompare_Texture2D_texture, &SampledTextureSampleGradCompare_Texture2D_coordinate, &SampledTextureSampleGradCompare_Texture2D_grad_x, &SampledTextureSampleGradCompare_Texture2D_grad_y, &SampledTextureSampleGradCompare_Texture2D_compare };

/// textureSampleGradCompare with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32
Variable TextureSampleGradCompare_Texture3D_texture;
Variable TextureSampleGradCompare_Texture3D_sampler;
Variable TextureSampleGradCompare_Texture3D_coordinate;
Variable TextureSampleGradCompare_Texture3D_grad_x;
Variable TextureSampleGradCompare_Texture3D_grad_y;
Variable TextureSampleGradCompare_Texture3D_compare;
Function TextureSampleGradCompare_Texture3D;
inline constexpr std::array TextureSampleGradCompare_Texture3D_args = { &TextureSampleGradCompare_Texture3D_texture, &TextureSampleGradCompare_Texture3D_sampler, &TextureSampleGradCompare_Texture3D_coordinate, &TextureSampleGradCompare_Texture3D_grad_x, &TextureSampleGradCompare_Texture3D_grad_y, &TextureSampleGradCompare_Texture3D_compare };

/// textureSampleGradCompare with Texture3D, Float32x3, Float32x3, Float32x3, Float32
Variable SampledTextureSampleGradCompare_Texture3D_texture;
Variable SampledTextureSampleGradCompare_Texture3D_coordinate;
Variable SampledTextureSampleGradCompare_Texture3D_grad_x;
Variable SampledTextureSampleGradCompare_Texture3D_grad_y;
Variable SampledTextureSampleGradCompare_Texture3D_compare;
Function SampledTextureSampleGradCompare_Texture3D;
inline constexpr std::array SampledTextureSampleGradCompare_Texture3D_args = { &SampledTextureSampleGradCompare_Texture3D_texture, &SampledTextureSampleGradCompare_Texture3D_coordinate, &SampledTextureSampleGradCompare_Texture3D_grad_x, &SampledTextureSampleGradCompare_Texture3D_grad_y, &SampledTextureSampleGradCompare_Texture3D_compare };

/// textureSampleGradCompare with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32
Variable TextureSampleGradCompare_Texture1DArray_texture;
Variable TextureSampleGradCompare_Texture1DArray_sampler;
Variable TextureSampleGradCompare_Texture1DArray_coordinate;
Variable TextureSampleGradCompare_Texture1DArray_grad_x;
Variable TextureSampleGradCompare_Texture1DArray_grad_y;
Variable TextureSampleGradCompare_Texture1DArray_compare;
Function TextureSampleGradCompare_Texture1DArray;
inline constexpr std::array TextureSampleGradCompare_Texture1DArray_args = { &TextureSampleGradCompare_Texture1DArray_texture, &TextureSampleGradCompare_Texture1DArray_sampler, &TextureSampleGradCompare_Texture1DArray_coordinate, &TextureSampleGradCompare_Texture1DArray_grad_x, &TextureSampleGradCompare_Texture1DArray_grad_y, &TextureSampleGradCompare_Texture1DArray_compare };

/// textureSampleGradCompare with Texture1DArray, Float32x2, Float32x2, Float32x2, Float32
Variable SampledTextureSampleGradCompare_Texture1DArray_texture;
Variable SampledTextureSampleGradCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleGradCompare_Texture1DArray_grad_x;
Variable SampledTextureSampleGradCompare_Texture1DArray_grad_y;
Variable SampledTextureSampleGradCompare_Texture1DArray_compare;
Function SampledTextureSampleGradCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleGradCompare_Texture1DArray_args = { &SampledTextureSampleGradCompare_Texture1DArray_texture, &SampledTextureSampleGradCompare_Texture1DArray_coordinate, &SampledTextureSampleGradCompare_Texture1DArray_grad_x, &SampledTextureSampleGradCompare_Texture1DArray_grad_y, &SampledTextureSampleGradCompare_Texture1DArray_compare };

/// textureSampleGradCompare with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32
Variable TextureSampleGradCompare_Texture2DArray_texture;
Variable TextureSampleGradCompare_Texture2DArray_sampler;
Variable TextureSampleGradCompare_Texture2DArray_coordinate;
Variable TextureSampleGradCompare_Texture2DArray_grad_x;
Variable TextureSampleGradCompare_Texture2DArray_grad_y;
Variable TextureSampleGradCompare_Texture2DArray_compare;
Function TextureSampleGradCompare_Texture2DArray;
inline constexpr std::array TextureSampleGradCompare_Texture2DArray_args = { &TextureSampleGradCompare_Texture2DArray_texture, &TextureSampleGradCompare_Texture2DArray_sampler, &TextureSampleGradCompare_Texture2DArray_coordinate, &TextureSampleGradCompare_Texture2DArray_grad_x, &TextureSampleGradCompare_Texture2DArray_grad_y, &TextureSampleGradCompare_Texture2DArray_compare };

/// textureSampleGradCompare with Texture2DArray, Float32x3, Float32x3, Float32x3, Float32
Variable SampledTextureSampleGradCompare_Texture2DArray_texture;
Variable SampledTextureSampleGradCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleGradCompare_Texture2DArray_grad_x;
Variable SampledTextureSampleGradCompare_Texture2DArray_grad_y;
Variable SampledTextureSampleGradCompare_Texture2DArray_compare;
Function SampledTextureSampleGradCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleGradCompare_Texture2DArray_args = { &SampledTextureSampleGradCompare_Texture2DArray_texture, &SampledTextureSampleGradCompare_Texture2DArray_coordinate, &SampledTextureSampleGradCompare_Texture2DArray_grad_x, &SampledTextureSampleGradCompare_Texture2DArray_grad_y, &SampledTextureSampleGradCompare_Texture2DArray_compare };

/// textureSampleGradCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleGradCompareOffset_Texture1D_texture;
Variable TextureSampleGradCompareOffset_Texture1D_sampler;
Variable TextureSampleGradCompareOffset_Texture1D_coordinate;
Variable TextureSampleGradCompareOffset_Texture1D_grad_x;
Variable TextureSampleGradCompareOffset_Texture1D_grad_y;
Variable TextureSampleGradCompareOffset_Texture1D_compare;
Variable TextureSampleGradCompareOffset_Texture1D_offset;
Function TextureSampleGradCompareOffset_Texture1D;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1D_args = { &TextureSampleGradCompareOffset_Texture1D_texture, &TextureSampleGradCompareOffset_Texture1D_sampler, &TextureSampleGradCompareOffset_Texture1D_coordinate, &TextureSampleGradCompareOffset_Texture1D_grad_x, &TextureSampleGradCompareOffset_Texture1D_grad_y, &TextureSampleGradCompareOffset_Texture1D_compare, &TextureSampleGradCompareOffset_Texture1D_offset };

/// textureSampleGradCompareOffset with Texture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradCompareOffset_Texture1D_texture;
Variable SampledTextureSampleGradCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture1D_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture1D_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture1D_compare;
Variable SampledTextureSampleGradCompareOffset_Texture1D_offset;
Function SampledTextureSampleGradCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1D_args = { &SampledTextureSampleGradCompareOffset_Texture1D_texture, &SampledTextureSampleGradCompareOffset_Texture1D_coordinate, &SampledTextureSampleGradCompareOffset_Texture1D_grad_x, &SampledTextureSampleGradCompareOffset_Texture1D_grad_y, &SampledTextureSampleGradCompareOffset_Texture1D_compare, &SampledTextureSampleGradCompareOffset_Texture1D_offset };

/// textureSampleGradCompareOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable TextureSampleGradCompareOffset_Texture2D_texture;
Variable TextureSampleGradCompareOffset_Texture2D_sampler;
Variable TextureSampleGradCompareOffset_Texture2D_coordinate;
Variable TextureSampleGradCompareOffset_Texture2D_grad_x;
Variable TextureSampleGradCompareOffset_Texture2D_grad_y;
Variable TextureSampleGradCompareOffset_Texture2D_compare;
Variable TextureSampleGradCompareOffset_Texture2D_offset;
Function TextureSampleGradCompareOffset_Texture2D;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2D_args = { &TextureSampleGradCompareOffset_Texture2D_texture, &TextureSampleGradCompareOffset_Texture2D_sampler, &TextureSampleGradCompareOffset_Texture2D_coordinate, &TextureSampleGradCompareOffset_Texture2D_grad_x, &TextureSampleGradCompareOffset_Texture2D_grad_y, &TextureSampleGradCompareOffset_Texture2D_compare, &TextureSampleGradCompareOffset_Texture2D_offset };

/// textureSampleGradCompareOffset with Texture2D, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable SampledTextureSampleGradCompareOffset_Texture2D_texture;
Variable SampledTextureSampleGradCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture2D_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture2D_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture2D_compare;
Variable SampledTextureSampleGradCompareOffset_Texture2D_offset;
Function SampledTextureSampleGradCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2D_args = { &SampledTextureSampleGradCompareOffset_Texture2D_texture, &SampledTextureSampleGradCompareOffset_Texture2D_coordinate, &SampledTextureSampleGradCompareOffset_Texture2D_grad_x, &SampledTextureSampleGradCompareOffset_Texture2D_grad_y, &SampledTextureSampleGradCompareOffset_Texture2D_compare, &SampledTextureSampleGradCompareOffset_Texture2D_offset };

/// textureSampleGradCompareOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable TextureSampleGradCompareOffset_Texture3D_texture;
Variable TextureSampleGradCompareOffset_Texture3D_sampler;
Variable TextureSampleGradCompareOffset_Texture3D_coordinate;
Variable TextureSampleGradCompareOffset_Texture3D_grad_x;
Variable TextureSampleGradCompareOffset_Texture3D_grad_y;
Variable TextureSampleGradCompareOffset_Texture3D_compare;
Variable TextureSampleGradCompareOffset_Texture3D_offset;
Function TextureSampleGradCompareOffset_Texture3D;
inline constexpr std::array TextureSampleGradCompareOffset_Texture3D_args = { &TextureSampleGradCompareOffset_Texture3D_texture, &TextureSampleGradCompareOffset_Texture3D_sampler, &TextureSampleGradCompareOffset_Texture3D_coordinate, &TextureSampleGradCompareOffset_Texture3D_grad_x, &TextureSampleGradCompareOffset_Texture3D_grad_y, &TextureSampleGradCompareOffset_Texture3D_compare, &TextureSampleGradCompareOffset_Texture3D_offset };

/// textureSampleGradCompareOffset with Texture3D, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable SampledTextureSampleGradCompareOffset_Texture3D_texture;
Variable SampledTextureSampleGradCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture3D_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture3D_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture3D_compare;
Variable SampledTextureSampleGradCompareOffset_Texture3D_offset;
Function SampledTextureSampleGradCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture3D_args = { &SampledTextureSampleGradCompareOffset_Texture3D_texture, &SampledTextureSampleGradCompareOffset_Texture3D_coordinate, &SampledTextureSampleGradCompareOffset_Texture3D_grad_x, &SampledTextureSampleGradCompareOffset_Texture3D_grad_y, &SampledTextureSampleGradCompareOffset_Texture3D_compare, &SampledTextureSampleGradCompareOffset_Texture3D_offset };

/// textureSampleGradCompareOffset with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable TextureSampleGradCompareOffset_Texture1DArray_texture;
Variable TextureSampleGradCompareOffset_Texture1DArray_sampler;
Variable TextureSampleGradCompareOffset_Texture1DArray_coordinate;
Variable TextureSampleGradCompareOffset_Texture1DArray_grad_x;
Variable TextureSampleGradCompareOffset_Texture1DArray_grad_y;
Variable TextureSampleGradCompareOffset_Texture1DArray_compare;
Variable TextureSampleGradCompareOffset_Texture1DArray_offset;
Function TextureSampleGradCompareOffset_Texture1DArray;
inline constexpr std::array TextureSampleGradCompareOffset_Texture1DArray_args = { &TextureSampleGradCompareOffset_Texture1DArray_texture, &TextureSampleGradCompareOffset_Texture1DArray_sampler, &TextureSampleGradCompareOffset_Texture1DArray_coordinate, &TextureSampleGradCompareOffset_Texture1DArray_grad_x, &TextureSampleGradCompareOffset_Texture1DArray_grad_y, &TextureSampleGradCompareOffset_Texture1DArray_compare, &TextureSampleGradCompareOffset_Texture1DArray_offset };

/// textureSampleGradCompareOffset with Texture1DArray, Float32x2, Float32x2, Float32x2, Float32, Float32x2
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_texture;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_compare;
Variable SampledTextureSampleGradCompareOffset_Texture1DArray_offset;
Function SampledTextureSampleGradCompareOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture1DArray_args = { &SampledTextureSampleGradCompareOffset_Texture1DArray_texture, &SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate, &SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x, &SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y, &SampledTextureSampleGradCompareOffset_Texture1DArray_compare, &SampledTextureSampleGradCompareOffset_Texture1DArray_offset };

/// textureSampleGradCompareOffset with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable TextureSampleGradCompareOffset_Texture2DArray_texture;
Variable TextureSampleGradCompareOffset_Texture2DArray_sampler;
Variable TextureSampleGradCompareOffset_Texture2DArray_coordinate;
Variable TextureSampleGradCompareOffset_Texture2DArray_grad_x;
Variable TextureSampleGradCompareOffset_Texture2DArray_grad_y;
Variable TextureSampleGradCompareOffset_Texture2DArray_compare;
Variable TextureSampleGradCompareOffset_Texture2DArray_offset;
Function TextureSampleGradCompareOffset_Texture2DArray;
inline constexpr std::array TextureSampleGradCompareOffset_Texture2DArray_args = { &TextureSampleGradCompareOffset_Texture2DArray_texture, &TextureSampleGradCompareOffset_Texture2DArray_sampler, &TextureSampleGradCompareOffset_Texture2DArray_coordinate, &TextureSampleGradCompareOffset_Texture2DArray_grad_x, &TextureSampleGradCompareOffset_Texture2DArray_grad_y, &TextureSampleGradCompareOffset_Texture2DArray_compare, &TextureSampleGradCompareOffset_Texture2DArray_offset };

/// textureSampleGradCompareOffset with Texture2DArray, Float32x3, Float32x3, Float32x3, Float32, Float32x3
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_texture;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_compare;
Variable SampledTextureSampleGradCompareOffset_Texture2DArray_offset;
Function SampledTextureSampleGradCompareOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleGradCompareOffset_Texture2DArray_args = { &SampledTextureSampleGradCompareOffset_Texture2DArray_texture, &SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate, &SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x, &SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y, &SampledTextureSampleGradCompareOffset_Texture2DArray_compare, &SampledTextureSampleGradCompareOffset_Texture2DArray_offset };

/// textureSampleGradProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleGradProjCompare_Texture1D_texture;
Variable TextureSampleGradProjCompare_Texture1D_sampler;
Variable TextureSampleGradProjCompare_Texture1D_coordinate;
Variable TextureSampleGradProjCompare_Texture1D_grad_x;
Variable TextureSampleGradProjCompare_Texture1D_grad_y;
Variable TextureSampleGradProjCompare_Texture1D_proj;
Variable TextureSampleGradProjCompare_Texture1D_compare;
Function TextureSampleGradProjCompare_Texture1D;
inline constexpr std::array TextureSampleGradProjCompare_Texture1D_args = { &TextureSampleGradProjCompare_Texture1D_texture, &TextureSampleGradProjCompare_Texture1D_sampler, &TextureSampleGradProjCompare_Texture1D_coordinate, &TextureSampleGradProjCompare_Texture1D_grad_x, &TextureSampleGradProjCompare_Texture1D_grad_y, &TextureSampleGradProjCompare_Texture1D_proj, &TextureSampleGradProjCompare_Texture1D_compare };

/// textureSampleGradProjCompare with Texture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradProjCompare_Texture1D_texture;
Variable SampledTextureSampleGradProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleGradProjCompare_Texture1D_grad_x;
Variable SampledTextureSampleGradProjCompare_Texture1D_grad_y;
Variable SampledTextureSampleGradProjCompare_Texture1D_proj;
Variable SampledTextureSampleGradProjCompare_Texture1D_compare;
Function SampledTextureSampleGradProjCompare_Texture1D;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture1D_args = { &SampledTextureSampleGradProjCompare_Texture1D_texture, &SampledTextureSampleGradProjCompare_Texture1D_coordinate, &SampledTextureSampleGradProjCompare_Texture1D_grad_x, &SampledTextureSampleGradProjCompare_Texture1D_grad_y, &SampledTextureSampleGradProjCompare_Texture1D_proj, &SampledTextureSampleGradProjCompare_Texture1D_compare };

/// textureSampleGradProjCompare with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32
Variable TextureSampleGradProjCompare_Texture2D_texture;
Variable TextureSampleGradProjCompare_Texture2D_sampler;
Variable TextureSampleGradProjCompare_Texture2D_coordinate;
Variable TextureSampleGradProjCompare_Texture2D_grad_x;
Variable TextureSampleGradProjCompare_Texture2D_grad_y;
Variable TextureSampleGradProjCompare_Texture2D_proj;
Variable TextureSampleGradProjCompare_Texture2D_compare;
Function TextureSampleGradProjCompare_Texture2D;
inline constexpr std::array TextureSampleGradProjCompare_Texture2D_args = { &TextureSampleGradProjCompare_Texture2D_texture, &TextureSampleGradProjCompare_Texture2D_sampler, &TextureSampleGradProjCompare_Texture2D_coordinate, &TextureSampleGradProjCompare_Texture2D_grad_x, &TextureSampleGradProjCompare_Texture2D_grad_y, &TextureSampleGradProjCompare_Texture2D_proj, &TextureSampleGradProjCompare_Texture2D_compare };

/// textureSampleGradProjCompare with Texture2D, Float32x2, Float32x2, Float32x2, Float32, Float32
Variable SampledTextureSampleGradProjCompare_Texture2D_texture;
Variable SampledTextureSampleGradProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleGradProjCompare_Texture2D_grad_x;
Variable SampledTextureSampleGradProjCompare_Texture2D_grad_y;
Variable SampledTextureSampleGradProjCompare_Texture2D_proj;
Variable SampledTextureSampleGradProjCompare_Texture2D_compare;
Function SampledTextureSampleGradProjCompare_Texture2D;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture2D_args = { &SampledTextureSampleGradProjCompare_Texture2D_texture, &SampledTextureSampleGradProjCompare_Texture2D_coordinate, &SampledTextureSampleGradProjCompare_Texture2D_grad_x, &SampledTextureSampleGradProjCompare_Texture2D_grad_y, &SampledTextureSampleGradProjCompare_Texture2D_proj, &SampledTextureSampleGradProjCompare_Texture2D_compare };

/// textureSampleGradProjCompare with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32
Variable TextureSampleGradProjCompare_Texture3D_texture;
Variable TextureSampleGradProjCompare_Texture3D_sampler;
Variable TextureSampleGradProjCompare_Texture3D_coordinate;
Variable TextureSampleGradProjCompare_Texture3D_grad_x;
Variable TextureSampleGradProjCompare_Texture3D_grad_y;
Variable TextureSampleGradProjCompare_Texture3D_proj;
Variable TextureSampleGradProjCompare_Texture3D_compare;
Function TextureSampleGradProjCompare_Texture3D;
inline constexpr std::array TextureSampleGradProjCompare_Texture3D_args = { &TextureSampleGradProjCompare_Texture3D_texture, &TextureSampleGradProjCompare_Texture3D_sampler, &TextureSampleGradProjCompare_Texture3D_coordinate, &TextureSampleGradProjCompare_Texture3D_grad_x, &TextureSampleGradProjCompare_Texture3D_grad_y, &TextureSampleGradProjCompare_Texture3D_proj, &TextureSampleGradProjCompare_Texture3D_compare };

/// textureSampleGradProjCompare with Texture3D, Float32x3, Float32x3, Float32x3, Float32, Float32
Variable SampledTextureSampleGradProjCompare_Texture3D_texture;
Variable SampledTextureSampleGradProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleGradProjCompare_Texture3D_grad_x;
Variable SampledTextureSampleGradProjCompare_Texture3D_grad_y;
Variable SampledTextureSampleGradProjCompare_Texture3D_proj;
Variable SampledTextureSampleGradProjCompare_Texture3D_compare;
Function SampledTextureSampleGradProjCompare_Texture3D;
inline constexpr std::array SampledTextureSampleGradProjCompare_Texture3D_args = { &SampledTextureSampleGradProjCompare_Texture3D_texture, &SampledTextureSampleGradProjCompare_Texture3D_coordinate, &SampledTextureSampleGradProjCompare_Texture3D_grad_x, &SampledTextureSampleGradProjCompare_Texture3D_grad_y, &SampledTextureSampleGradProjCompare_Texture3D_proj, &SampledTextureSampleGradProjCompare_Texture3D_compare };

/// textureSampleGradProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleGradProjCompareOffset_Texture1D_texture;
Variable TextureSampleGradProjCompareOffset_Texture1D_sampler;
Variable TextureSampleGradProjCompareOffset_Texture1D_coordinate;
Variable TextureSampleGradProjCompareOffset_Texture1D_grad_x;
Variable TextureSampleGradProjCompareOffset_Texture1D_grad_y;
Variable TextureSampleGradProjCompareOffset_Texture1D_proj;
Variable TextureSampleGradProjCompareOffset_Texture1D_compare;
Variable TextureSampleGradProjCompareOffset_Texture1D_offset;
Function TextureSampleGradProjCompareOffset_Texture1D;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture1D_args = { &TextureSampleGradProjCompareOffset_Texture1D_texture, &TextureSampleGradProjCompareOffset_Texture1D_sampler, &TextureSampleGradProjCompareOffset_Texture1D_coordinate, &TextureSampleGradProjCompareOffset_Texture1D_grad_x, &TextureSampleGradProjCompareOffset_Texture1D_grad_y, &TextureSampleGradProjCompareOffset_Texture1D_proj, &TextureSampleGradProjCompareOffset_Texture1D_compare, &TextureSampleGradProjCompareOffset_Texture1D_offset };

/// textureSampleGradProjCompareOffset with Texture1D, Float32, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_texture;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_proj;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_compare;
Variable SampledTextureSampleGradProjCompareOffset_Texture1D_offset;
Function SampledTextureSampleGradProjCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture1D_args = { &SampledTextureSampleGradProjCompareOffset_Texture1D_texture, &SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate, &SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x, &SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y, &SampledTextureSampleGradProjCompareOffset_Texture1D_proj, &SampledTextureSampleGradProjCompareOffset_Texture1D_compare, &SampledTextureSampleGradProjCompareOffset_Texture1D_offset };

/// textureSampleGradProjCompareOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleGradProjCompareOffset_Texture2D_texture;
Variable TextureSampleGradProjCompareOffset_Texture2D_sampler;
Variable TextureSampleGradProjCompareOffset_Texture2D_coordinate;
Variable TextureSampleGradProjCompareOffset_Texture2D_grad_x;
Variable TextureSampleGradProjCompareOffset_Texture2D_grad_y;
Variable TextureSampleGradProjCompareOffset_Texture2D_proj;
Variable TextureSampleGradProjCompareOffset_Texture2D_compare;
Variable TextureSampleGradProjCompareOffset_Texture2D_offset;
Function TextureSampleGradProjCompareOffset_Texture2D;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture2D_args = { &TextureSampleGradProjCompareOffset_Texture2D_texture, &TextureSampleGradProjCompareOffset_Texture2D_sampler, &TextureSampleGradProjCompareOffset_Texture2D_coordinate, &TextureSampleGradProjCompareOffset_Texture2D_grad_x, &TextureSampleGradProjCompareOffset_Texture2D_grad_y, &TextureSampleGradProjCompareOffset_Texture2D_proj, &TextureSampleGradProjCompareOffset_Texture2D_compare, &TextureSampleGradProjCompareOffset_Texture2D_offset };

/// textureSampleGradProjCompareOffset with Texture2D, Float32x2, Float32x2, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_texture;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_proj;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_compare;
Variable SampledTextureSampleGradProjCompareOffset_Texture2D_offset;
Function SampledTextureSampleGradProjCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture2D_args = { &SampledTextureSampleGradProjCompareOffset_Texture2D_texture, &SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate, &SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x, &SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y, &SampledTextureSampleGradProjCompareOffset_Texture2D_proj, &SampledTextureSampleGradProjCompareOffset_Texture2D_compare, &SampledTextureSampleGradProjCompareOffset_Texture2D_offset };

/// textureSampleGradProjCompareOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleGradProjCompareOffset_Texture3D_texture;
Variable TextureSampleGradProjCompareOffset_Texture3D_sampler;
Variable TextureSampleGradProjCompareOffset_Texture3D_coordinate;
Variable TextureSampleGradProjCompareOffset_Texture3D_grad_x;
Variable TextureSampleGradProjCompareOffset_Texture3D_grad_y;
Variable TextureSampleGradProjCompareOffset_Texture3D_proj;
Variable TextureSampleGradProjCompareOffset_Texture3D_compare;
Variable TextureSampleGradProjCompareOffset_Texture3D_offset;
Function TextureSampleGradProjCompareOffset_Texture3D;
inline constexpr std::array TextureSampleGradProjCompareOffset_Texture3D_args = { &TextureSampleGradProjCompareOffset_Texture3D_texture, &TextureSampleGradProjCompareOffset_Texture3D_sampler, &TextureSampleGradProjCompareOffset_Texture3D_coordinate, &TextureSampleGradProjCompareOffset_Texture3D_grad_x, &TextureSampleGradProjCompareOffset_Texture3D_grad_y, &TextureSampleGradProjCompareOffset_Texture3D_proj, &TextureSampleGradProjCompareOffset_Texture3D_compare, &TextureSampleGradProjCompareOffset_Texture3D_offset };

/// textureSampleGradProjCompareOffset with Texture3D, Float32x3, Float32x3, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_texture;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_proj;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_compare;
Variable SampledTextureSampleGradProjCompareOffset_Texture3D_offset;
Function SampledTextureSampleGradProjCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleGradProjCompareOffset_Texture3D_args = { &SampledTextureSampleGradProjCompareOffset_Texture3D_texture, &SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate, &SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x, &SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y, &SampledTextureSampleGradProjCompareOffset_Texture3D_proj, &SampledTextureSampleGradProjCompareOffset_Texture3D_compare, &SampledTextureSampleGradProjCompareOffset_Texture3D_offset };

/// textureSampleBias with Texture1D, Sampler, Float32, Float32
Variable TextureSampleBias_Texture1D_texture;
Variable TextureSampleBias_Texture1D_sampler;
Variable TextureSampleBias_Texture1D_coordinate;
Variable TextureSampleBias_Texture1D_bias;
Function TextureSampleBias_Texture1D;
inline constexpr std::array TextureSampleBias_Texture1D_args = { &TextureSampleBias_Texture1D_texture, &TextureSampleBias_Texture1D_sampler, &TextureSampleBias_Texture1D_coordinate, &TextureSampleBias_Texture1D_bias };

/// textureSampleBias with Texture1D, Float32, Float32
Variable SampledTextureSampleBias_Texture1D_texture;
Variable SampledTextureSampleBias_Texture1D_coordinate;
Variable SampledTextureSampleBias_Texture1D_bias;
Function SampledTextureSampleBias_Texture1D;
inline constexpr std::array SampledTextureSampleBias_Texture1D_args = { &SampledTextureSampleBias_Texture1D_texture, &SampledTextureSampleBias_Texture1D_coordinate, &SampledTextureSampleBias_Texture1D_bias };

/// textureSampleBias with Texture2D, Sampler, Float32x2, Float32
Variable TextureSampleBias_Texture2D_texture;
Variable TextureSampleBias_Texture2D_sampler;
Variable TextureSampleBias_Texture2D_coordinate;
Variable TextureSampleBias_Texture2D_bias;
Function TextureSampleBias_Texture2D;
inline constexpr std::array TextureSampleBias_Texture2D_args = { &TextureSampleBias_Texture2D_texture, &TextureSampleBias_Texture2D_sampler, &TextureSampleBias_Texture2D_coordinate, &TextureSampleBias_Texture2D_bias };

/// textureSampleBias with Texture2D, Float32x2, Float32
Variable SampledTextureSampleBias_Texture2D_texture;
Variable SampledTextureSampleBias_Texture2D_coordinate;
Variable SampledTextureSampleBias_Texture2D_bias;
Function SampledTextureSampleBias_Texture2D;
inline constexpr std::array SampledTextureSampleBias_Texture2D_args = { &SampledTextureSampleBias_Texture2D_texture, &SampledTextureSampleBias_Texture2D_coordinate, &SampledTextureSampleBias_Texture2D_bias };

/// textureSampleBias with Texture3D, Sampler, Float32x3, Float32
Variable TextureSampleBias_Texture3D_texture;
Variable TextureSampleBias_Texture3D_sampler;
Variable TextureSampleBias_Texture3D_coordinate;
Variable TextureSampleBias_Texture3D_bias;
Function TextureSampleBias_Texture3D;
inline constexpr std::array TextureSampleBias_Texture3D_args = { &TextureSampleBias_Texture3D_texture, &TextureSampleBias_Texture3D_sampler, &TextureSampleBias_Texture3D_coordinate, &TextureSampleBias_Texture3D_bias };

/// textureSampleBias with Texture3D, Float32x3, Float32
Variable SampledTextureSampleBias_Texture3D_texture;
Variable SampledTextureSampleBias_Texture3D_coordinate;
Variable SampledTextureSampleBias_Texture3D_bias;
Function SampledTextureSampleBias_Texture3D;
inline constexpr std::array SampledTextureSampleBias_Texture3D_args = { &SampledTextureSampleBias_Texture3D_texture, &SampledTextureSampleBias_Texture3D_coordinate, &SampledTextureSampleBias_Texture3D_bias };

/// textureSampleBias with TextureCube, Sampler, Float32x3, Float32
Variable TextureSampleBias_TextureCube_texture;
Variable TextureSampleBias_TextureCube_sampler;
Variable TextureSampleBias_TextureCube_coordinate;
Variable TextureSampleBias_TextureCube_bias;
Function TextureSampleBias_TextureCube;
inline constexpr std::array TextureSampleBias_TextureCube_args = { &TextureSampleBias_TextureCube_texture, &TextureSampleBias_TextureCube_sampler, &TextureSampleBias_TextureCube_coordinate, &TextureSampleBias_TextureCube_bias };

/// textureSampleBias with TextureCube, Float32x3, Float32
Variable SampledTextureSampleBias_TextureCube_texture;
Variable SampledTextureSampleBias_TextureCube_coordinate;
Variable SampledTextureSampleBias_TextureCube_bias;
Function SampledTextureSampleBias_TextureCube;
inline constexpr std::array SampledTextureSampleBias_TextureCube_args = { &SampledTextureSampleBias_TextureCube_texture, &SampledTextureSampleBias_TextureCube_coordinate, &SampledTextureSampleBias_TextureCube_bias };

/// textureSampleBias with Texture1DArray, Sampler, Float32x2, Float32
Variable TextureSampleBias_Texture1DArray_texture;
Variable TextureSampleBias_Texture1DArray_sampler;
Variable TextureSampleBias_Texture1DArray_coordinate;
Variable TextureSampleBias_Texture1DArray_bias;
Function TextureSampleBias_Texture1DArray;
inline constexpr std::array TextureSampleBias_Texture1DArray_args = { &TextureSampleBias_Texture1DArray_texture, &TextureSampleBias_Texture1DArray_sampler, &TextureSampleBias_Texture1DArray_coordinate, &TextureSampleBias_Texture1DArray_bias };

/// textureSampleBias with Texture1DArray, Float32x2, Float32
Variable SampledTextureSampleBias_Texture1DArray_texture;
Variable SampledTextureSampleBias_Texture1DArray_coordinate;
Variable SampledTextureSampleBias_Texture1DArray_bias;
Function SampledTextureSampleBias_Texture1DArray;
inline constexpr std::array SampledTextureSampleBias_Texture1DArray_args = { &SampledTextureSampleBias_Texture1DArray_texture, &SampledTextureSampleBias_Texture1DArray_coordinate, &SampledTextureSampleBias_Texture1DArray_bias };

/// textureSampleBias with Texture2DArray, Sampler, Float32x3, Float32
Variable TextureSampleBias_Texture2DArray_texture;
Variable TextureSampleBias_Texture2DArray_sampler;
Variable TextureSampleBias_Texture2DArray_coordinate;
Variable TextureSampleBias_Texture2DArray_bias;
Function TextureSampleBias_Texture2DArray;
inline constexpr std::array TextureSampleBias_Texture2DArray_args = { &TextureSampleBias_Texture2DArray_texture, &TextureSampleBias_Texture2DArray_sampler, &TextureSampleBias_Texture2DArray_coordinate, &TextureSampleBias_Texture2DArray_bias };

/// textureSampleBias with Texture2DArray, Float32x3, Float32
Variable SampledTextureSampleBias_Texture2DArray_texture;
Variable SampledTextureSampleBias_Texture2DArray_coordinate;
Variable SampledTextureSampleBias_Texture2DArray_bias;
Function SampledTextureSampleBias_Texture2DArray;
inline constexpr std::array SampledTextureSampleBias_Texture2DArray_args = { &SampledTextureSampleBias_Texture2DArray_texture, &SampledTextureSampleBias_Texture2DArray_coordinate, &SampledTextureSampleBias_Texture2DArray_bias };

/// textureSampleBias with TextureCubeArray, Sampler, Float32x4, Float32
Variable TextureSampleBias_TextureCubeArray_texture;
Variable TextureSampleBias_TextureCubeArray_sampler;
Variable TextureSampleBias_TextureCubeArray_coordinate;
Variable TextureSampleBias_TextureCubeArray_bias;
Function TextureSampleBias_TextureCubeArray;
inline constexpr std::array TextureSampleBias_TextureCubeArray_args = { &TextureSampleBias_TextureCubeArray_texture, &TextureSampleBias_TextureCubeArray_sampler, &TextureSampleBias_TextureCubeArray_coordinate, &TextureSampleBias_TextureCubeArray_bias };

/// textureSampleBias with TextureCubeArray, Float32x4, Float32
Variable SampledTextureSampleBias_TextureCubeArray_texture;
Variable SampledTextureSampleBias_TextureCubeArray_coordinate;
Variable SampledTextureSampleBias_TextureCubeArray_bias;
Function SampledTextureSampleBias_TextureCubeArray;
inline constexpr std::array SampledTextureSampleBias_TextureCubeArray_args = { &SampledTextureSampleBias_TextureCubeArray_texture, &SampledTextureSampleBias_TextureCubeArray_coordinate, &SampledTextureSampleBias_TextureCubeArray_bias };

/// textureSampleBiasOffset with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleBiasOffset_Texture1D_texture;
Variable TextureSampleBiasOffset_Texture1D_sampler;
Variable TextureSampleBiasOffset_Texture1D_coordinate;
Variable TextureSampleBiasOffset_Texture1D_bias;
Variable TextureSampleBiasOffset_Texture1D_offset;
Function TextureSampleBiasOffset_Texture1D;
inline constexpr std::array TextureSampleBiasOffset_Texture1D_args = { &TextureSampleBiasOffset_Texture1D_texture, &TextureSampleBiasOffset_Texture1D_sampler, &TextureSampleBiasOffset_Texture1D_coordinate, &TextureSampleBiasOffset_Texture1D_bias, &TextureSampleBiasOffset_Texture1D_offset };

/// textureSampleBiasOffset with Texture1D, Float32, Float32, Float32
Variable SampledTextureSampleBiasOffset_Texture1D_texture;
Variable SampledTextureSampleBiasOffset_Texture1D_coordinate;
Variable SampledTextureSampleBiasOffset_Texture1D_bias;
Variable SampledTextureSampleBiasOffset_Texture1D_offset;
Function SampledTextureSampleBiasOffset_Texture1D;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1D_args = { &SampledTextureSampleBiasOffset_Texture1D_texture, &SampledTextureSampleBiasOffset_Texture1D_coordinate, &SampledTextureSampleBiasOffset_Texture1D_bias, &SampledTextureSampleBiasOffset_Texture1D_offset };

/// textureSampleBiasOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleBiasOffset_Texture2D_texture;
Variable TextureSampleBiasOffset_Texture2D_sampler;
Variable TextureSampleBiasOffset_Texture2D_coordinate;
Variable TextureSampleBiasOffset_Texture2D_bias;
Variable TextureSampleBiasOffset_Texture2D_offset;
Function TextureSampleBiasOffset_Texture2D;
inline constexpr std::array TextureSampleBiasOffset_Texture2D_args = { &TextureSampleBiasOffset_Texture2D_texture, &TextureSampleBiasOffset_Texture2D_sampler, &TextureSampleBiasOffset_Texture2D_coordinate, &TextureSampleBiasOffset_Texture2D_bias, &TextureSampleBiasOffset_Texture2D_offset };

/// textureSampleBiasOffset with Texture2D, Float32x2, Float32, Float32x2
Variable SampledTextureSampleBiasOffset_Texture2D_texture;
Variable SampledTextureSampleBiasOffset_Texture2D_coordinate;
Variable SampledTextureSampleBiasOffset_Texture2D_bias;
Variable SampledTextureSampleBiasOffset_Texture2D_offset;
Function SampledTextureSampleBiasOffset_Texture2D;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2D_args = { &SampledTextureSampleBiasOffset_Texture2D_texture, &SampledTextureSampleBiasOffset_Texture2D_coordinate, &SampledTextureSampleBiasOffset_Texture2D_bias, &SampledTextureSampleBiasOffset_Texture2D_offset };

/// textureSampleBiasOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleBiasOffset_Texture3D_texture;
Variable TextureSampleBiasOffset_Texture3D_sampler;
Variable TextureSampleBiasOffset_Texture3D_coordinate;
Variable TextureSampleBiasOffset_Texture3D_bias;
Variable TextureSampleBiasOffset_Texture3D_offset;
Function TextureSampleBiasOffset_Texture3D;
inline constexpr std::array TextureSampleBiasOffset_Texture3D_args = { &TextureSampleBiasOffset_Texture3D_texture, &TextureSampleBiasOffset_Texture3D_sampler, &TextureSampleBiasOffset_Texture3D_coordinate, &TextureSampleBiasOffset_Texture3D_bias, &TextureSampleBiasOffset_Texture3D_offset };

/// textureSampleBiasOffset with Texture3D, Float32x3, Float32, Float32x3
Variable SampledTextureSampleBiasOffset_Texture3D_texture;
Variable SampledTextureSampleBiasOffset_Texture3D_coordinate;
Variable SampledTextureSampleBiasOffset_Texture3D_bias;
Variable SampledTextureSampleBiasOffset_Texture3D_offset;
Function SampledTextureSampleBiasOffset_Texture3D;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture3D_args = { &SampledTextureSampleBiasOffset_Texture3D_texture, &SampledTextureSampleBiasOffset_Texture3D_coordinate, &SampledTextureSampleBiasOffset_Texture3D_bias, &SampledTextureSampleBiasOffset_Texture3D_offset };

/// textureSampleBiasOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
Variable TextureSampleBiasOffset_Texture1DArray_texture;
Variable TextureSampleBiasOffset_Texture1DArray_sampler;
Variable TextureSampleBiasOffset_Texture1DArray_coordinate;
Variable TextureSampleBiasOffset_Texture1DArray_bias;
Variable TextureSampleBiasOffset_Texture1DArray_offset;
Function TextureSampleBiasOffset_Texture1DArray;
inline constexpr std::array TextureSampleBiasOffset_Texture1DArray_args = { &TextureSampleBiasOffset_Texture1DArray_texture, &TextureSampleBiasOffset_Texture1DArray_sampler, &TextureSampleBiasOffset_Texture1DArray_coordinate, &TextureSampleBiasOffset_Texture1DArray_bias, &TextureSampleBiasOffset_Texture1DArray_offset };

/// textureSampleBiasOffset with Texture1DArray, Float32x2, Float32, Float32x2
Variable SampledTextureSampleBiasOffset_Texture1DArray_texture;
Variable SampledTextureSampleBiasOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleBiasOffset_Texture1DArray_bias;
Variable SampledTextureSampleBiasOffset_Texture1DArray_offset;
Function SampledTextureSampleBiasOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture1DArray_args = { &SampledTextureSampleBiasOffset_Texture1DArray_texture, &SampledTextureSampleBiasOffset_Texture1DArray_coordinate, &SampledTextureSampleBiasOffset_Texture1DArray_bias, &SampledTextureSampleBiasOffset_Texture1DArray_offset };

/// textureSampleBiasOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
Variable TextureSampleBiasOffset_Texture2DArray_texture;
Variable TextureSampleBiasOffset_Texture2DArray_sampler;
Variable TextureSampleBiasOffset_Texture2DArray_coordinate;
Variable TextureSampleBiasOffset_Texture2DArray_bias;
Variable TextureSampleBiasOffset_Texture2DArray_offset;
Function TextureSampleBiasOffset_Texture2DArray;
inline constexpr std::array TextureSampleBiasOffset_Texture2DArray_args = { &TextureSampleBiasOffset_Texture2DArray_texture, &TextureSampleBiasOffset_Texture2DArray_sampler, &TextureSampleBiasOffset_Texture2DArray_coordinate, &TextureSampleBiasOffset_Texture2DArray_bias, &TextureSampleBiasOffset_Texture2DArray_offset };

/// textureSampleBiasOffset with Texture2DArray, Float32x3, Float32, Float32x3
Variable SampledTextureSampleBiasOffset_Texture2DArray_texture;
Variable SampledTextureSampleBiasOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleBiasOffset_Texture2DArray_bias;
Variable SampledTextureSampleBiasOffset_Texture2DArray_offset;
Function SampledTextureSampleBiasOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleBiasOffset_Texture2DArray_args = { &SampledTextureSampleBiasOffset_Texture2DArray_texture, &SampledTextureSampleBiasOffset_Texture2DArray_coordinate, &SampledTextureSampleBiasOffset_Texture2DArray_bias, &SampledTextureSampleBiasOffset_Texture2DArray_offset };

/// textureSampleBiasProj with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleBiasProj_Texture1D_texture;
Variable TextureSampleBiasProj_Texture1D_sampler;
Variable TextureSampleBiasProj_Texture1D_coordinate;
Variable TextureSampleBiasProj_Texture1D_bias;
Variable TextureSampleBiasProj_Texture1D_proj;
Function TextureSampleBiasProj_Texture1D;
inline constexpr std::array TextureSampleBiasProj_Texture1D_args = { &TextureSampleBiasProj_Texture1D_texture, &TextureSampleBiasProj_Texture1D_sampler, &TextureSampleBiasProj_Texture1D_coordinate, &TextureSampleBiasProj_Texture1D_bias, &TextureSampleBiasProj_Texture1D_proj };

/// textureSampleBiasProj with Texture1D, Float32, Float32, Float32
Variable SampledTextureSampleBiasProj_Texture1D_texture;
Variable SampledTextureSampleBiasProj_Texture1D_coordinate;
Variable SampledTextureSampleBiasProj_Texture1D_bias;
Variable SampledTextureSampleBiasProj_Texture1D_proj;
Function SampledTextureSampleBiasProj_Texture1D;
inline constexpr std::array SampledTextureSampleBiasProj_Texture1D_args = { &SampledTextureSampleBiasProj_Texture1D_texture, &SampledTextureSampleBiasProj_Texture1D_coordinate, &SampledTextureSampleBiasProj_Texture1D_bias, &SampledTextureSampleBiasProj_Texture1D_proj };

/// textureSampleBiasProj with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleBiasProj_Texture2D_texture;
Variable TextureSampleBiasProj_Texture2D_sampler;
Variable TextureSampleBiasProj_Texture2D_coordinate;
Variable TextureSampleBiasProj_Texture2D_bias;
Variable TextureSampleBiasProj_Texture2D_proj;
Function TextureSampleBiasProj_Texture2D;
inline constexpr std::array TextureSampleBiasProj_Texture2D_args = { &TextureSampleBiasProj_Texture2D_texture, &TextureSampleBiasProj_Texture2D_sampler, &TextureSampleBiasProj_Texture2D_coordinate, &TextureSampleBiasProj_Texture2D_bias, &TextureSampleBiasProj_Texture2D_proj };

/// textureSampleBiasProj with Texture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleBiasProj_Texture2D_texture;
Variable SampledTextureSampleBiasProj_Texture2D_coordinate;
Variable SampledTextureSampleBiasProj_Texture2D_bias;
Variable SampledTextureSampleBiasProj_Texture2D_proj;
Function SampledTextureSampleBiasProj_Texture2D;
inline constexpr std::array SampledTextureSampleBiasProj_Texture2D_args = { &SampledTextureSampleBiasProj_Texture2D_texture, &SampledTextureSampleBiasProj_Texture2D_coordinate, &SampledTextureSampleBiasProj_Texture2D_bias, &SampledTextureSampleBiasProj_Texture2D_proj };

/// textureSampleBiasProj with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleBiasProj_Texture3D_texture;
Variable TextureSampleBiasProj_Texture3D_sampler;
Variable TextureSampleBiasProj_Texture3D_coordinate;
Variable TextureSampleBiasProj_Texture3D_bias;
Variable TextureSampleBiasProj_Texture3D_proj;
Function TextureSampleBiasProj_Texture3D;
inline constexpr std::array TextureSampleBiasProj_Texture3D_args = { &TextureSampleBiasProj_Texture3D_texture, &TextureSampleBiasProj_Texture3D_sampler, &TextureSampleBiasProj_Texture3D_coordinate, &TextureSampleBiasProj_Texture3D_bias, &TextureSampleBiasProj_Texture3D_proj };

/// textureSampleBiasProj with Texture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleBiasProj_Texture3D_texture;
Variable SampledTextureSampleBiasProj_Texture3D_coordinate;
Variable SampledTextureSampleBiasProj_Texture3D_bias;
Variable SampledTextureSampleBiasProj_Texture3D_proj;
Function SampledTextureSampleBiasProj_Texture3D;
inline constexpr std::array SampledTextureSampleBiasProj_Texture3D_args = { &SampledTextureSampleBiasProj_Texture3D_texture, &SampledTextureSampleBiasProj_Texture3D_coordinate, &SampledTextureSampleBiasProj_Texture3D_bias, &SampledTextureSampleBiasProj_Texture3D_proj };

/// textureSampleBiasProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleBiasProjOffset_Texture1D_texture;
Variable TextureSampleBiasProjOffset_Texture1D_sampler;
Variable TextureSampleBiasProjOffset_Texture1D_coordinate;
Variable TextureSampleBiasProjOffset_Texture1D_bias;
Variable TextureSampleBiasProjOffset_Texture1D_proj;
Variable TextureSampleBiasProjOffset_Texture1D_offset;
Function TextureSampleBiasProjOffset_Texture1D;
inline constexpr std::array TextureSampleBiasProjOffset_Texture1D_args = { &TextureSampleBiasProjOffset_Texture1D_texture, &TextureSampleBiasProjOffset_Texture1D_sampler, &TextureSampleBiasProjOffset_Texture1D_coordinate, &TextureSampleBiasProjOffset_Texture1D_bias, &TextureSampleBiasProjOffset_Texture1D_proj, &TextureSampleBiasProjOffset_Texture1D_offset };

/// textureSampleBiasProjOffset with Texture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleBiasProjOffset_Texture1D_texture;
Variable SampledTextureSampleBiasProjOffset_Texture1D_coordinate;
Variable SampledTextureSampleBiasProjOffset_Texture1D_bias;
Variable SampledTextureSampleBiasProjOffset_Texture1D_proj;
Variable SampledTextureSampleBiasProjOffset_Texture1D_offset;
Function SampledTextureSampleBiasProjOffset_Texture1D;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture1D_args = { &SampledTextureSampleBiasProjOffset_Texture1D_texture, &SampledTextureSampleBiasProjOffset_Texture1D_coordinate, &SampledTextureSampleBiasProjOffset_Texture1D_bias, &SampledTextureSampleBiasProjOffset_Texture1D_proj, &SampledTextureSampleBiasProjOffset_Texture1D_offset };

/// textureSampleBiasProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleBiasProjOffset_Texture2D_texture;
Variable TextureSampleBiasProjOffset_Texture2D_sampler;
Variable TextureSampleBiasProjOffset_Texture2D_coordinate;
Variable TextureSampleBiasProjOffset_Texture2D_bias;
Variable TextureSampleBiasProjOffset_Texture2D_proj;
Variable TextureSampleBiasProjOffset_Texture2D_offset;
Function TextureSampleBiasProjOffset_Texture2D;
inline constexpr std::array TextureSampleBiasProjOffset_Texture2D_args = { &TextureSampleBiasProjOffset_Texture2D_texture, &TextureSampleBiasProjOffset_Texture2D_sampler, &TextureSampleBiasProjOffset_Texture2D_coordinate, &TextureSampleBiasProjOffset_Texture2D_bias, &TextureSampleBiasProjOffset_Texture2D_proj, &TextureSampleBiasProjOffset_Texture2D_offset };

/// textureSampleBiasProjOffset with Texture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleBiasProjOffset_Texture2D_texture;
Variable SampledTextureSampleBiasProjOffset_Texture2D_coordinate;
Variable SampledTextureSampleBiasProjOffset_Texture2D_bias;
Variable SampledTextureSampleBiasProjOffset_Texture2D_proj;
Variable SampledTextureSampleBiasProjOffset_Texture2D_offset;
Function SampledTextureSampleBiasProjOffset_Texture2D;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture2D_args = { &SampledTextureSampleBiasProjOffset_Texture2D_texture, &SampledTextureSampleBiasProjOffset_Texture2D_coordinate, &SampledTextureSampleBiasProjOffset_Texture2D_bias, &SampledTextureSampleBiasProjOffset_Texture2D_proj, &SampledTextureSampleBiasProjOffset_Texture2D_offset };

/// textureSampleBiasProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleBiasProjOffset_Texture3D_texture;
Variable TextureSampleBiasProjOffset_Texture3D_sampler;
Variable TextureSampleBiasProjOffset_Texture3D_coordinate;
Variable TextureSampleBiasProjOffset_Texture3D_bias;
Variable TextureSampleBiasProjOffset_Texture3D_proj;
Variable TextureSampleBiasProjOffset_Texture3D_offset;
Function TextureSampleBiasProjOffset_Texture3D;
inline constexpr std::array TextureSampleBiasProjOffset_Texture3D_args = { &TextureSampleBiasProjOffset_Texture3D_texture, &TextureSampleBiasProjOffset_Texture3D_sampler, &TextureSampleBiasProjOffset_Texture3D_coordinate, &TextureSampleBiasProjOffset_Texture3D_bias, &TextureSampleBiasProjOffset_Texture3D_proj, &TextureSampleBiasProjOffset_Texture3D_offset };

/// textureSampleBiasProjOffset with Texture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleBiasProjOffset_Texture3D_texture;
Variable SampledTextureSampleBiasProjOffset_Texture3D_coordinate;
Variable SampledTextureSampleBiasProjOffset_Texture3D_bias;
Variable SampledTextureSampleBiasProjOffset_Texture3D_proj;
Variable SampledTextureSampleBiasProjOffset_Texture3D_offset;
Function SampledTextureSampleBiasProjOffset_Texture3D;
inline constexpr std::array SampledTextureSampleBiasProjOffset_Texture3D_args = { &SampledTextureSampleBiasProjOffset_Texture3D_texture, &SampledTextureSampleBiasProjOffset_Texture3D_coordinate, &SampledTextureSampleBiasProjOffset_Texture3D_bias, &SampledTextureSampleBiasProjOffset_Texture3D_proj, &SampledTextureSampleBiasProjOffset_Texture3D_offset };

/// textureSampleBiasCompare with Texture1D, Sampler, Float32, Float32, Float32
Variable TextureSampleBiasCompare_Texture1D_texture;
Variable TextureSampleBiasCompare_Texture1D_sampler;
Variable TextureSampleBiasCompare_Texture1D_coordinate;
Variable TextureSampleBiasCompare_Texture1D_bias;
Variable TextureSampleBiasCompare_Texture1D_compare;
Function TextureSampleBiasCompare_Texture1D;
inline constexpr std::array TextureSampleBiasCompare_Texture1D_args = { &TextureSampleBiasCompare_Texture1D_texture, &TextureSampleBiasCompare_Texture1D_sampler, &TextureSampleBiasCompare_Texture1D_coordinate, &TextureSampleBiasCompare_Texture1D_bias, &TextureSampleBiasCompare_Texture1D_compare };

/// textureSampleBiasCompare with Texture1D, Float32, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture1D_texture;
Variable SampledTextureSampleBiasCompare_Texture1D_coordinate;
Variable SampledTextureSampleBiasCompare_Texture1D_bias;
Variable SampledTextureSampleBiasCompare_Texture1D_compare;
Function SampledTextureSampleBiasCompare_Texture1D;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1D_args = { &SampledTextureSampleBiasCompare_Texture1D_texture, &SampledTextureSampleBiasCompare_Texture1D_coordinate, &SampledTextureSampleBiasCompare_Texture1D_bias, &SampledTextureSampleBiasCompare_Texture1D_compare };

/// textureSampleBiasCompare with Texture2D, Sampler, Float32x2, Float32, Float32
Variable TextureSampleBiasCompare_Texture2D_texture;
Variable TextureSampleBiasCompare_Texture2D_sampler;
Variable TextureSampleBiasCompare_Texture2D_coordinate;
Variable TextureSampleBiasCompare_Texture2D_bias;
Variable TextureSampleBiasCompare_Texture2D_compare;
Function TextureSampleBiasCompare_Texture2D;
inline constexpr std::array TextureSampleBiasCompare_Texture2D_args = { &TextureSampleBiasCompare_Texture2D_texture, &TextureSampleBiasCompare_Texture2D_sampler, &TextureSampleBiasCompare_Texture2D_coordinate, &TextureSampleBiasCompare_Texture2D_bias, &TextureSampleBiasCompare_Texture2D_compare };

/// textureSampleBiasCompare with Texture2D, Float32x2, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture2D_texture;
Variable SampledTextureSampleBiasCompare_Texture2D_coordinate;
Variable SampledTextureSampleBiasCompare_Texture2D_bias;
Variable SampledTextureSampleBiasCompare_Texture2D_compare;
Function SampledTextureSampleBiasCompare_Texture2D;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2D_args = { &SampledTextureSampleBiasCompare_Texture2D_texture, &SampledTextureSampleBiasCompare_Texture2D_coordinate, &SampledTextureSampleBiasCompare_Texture2D_bias, &SampledTextureSampleBiasCompare_Texture2D_compare };

/// textureSampleBiasCompare with Texture3D, Sampler, Float32x3, Float32, Float32
Variable TextureSampleBiasCompare_Texture3D_texture;
Variable TextureSampleBiasCompare_Texture3D_sampler;
Variable TextureSampleBiasCompare_Texture3D_coordinate;
Variable TextureSampleBiasCompare_Texture3D_bias;
Variable TextureSampleBiasCompare_Texture3D_compare;
Function TextureSampleBiasCompare_Texture3D;
inline constexpr std::array TextureSampleBiasCompare_Texture3D_args = { &TextureSampleBiasCompare_Texture3D_texture, &TextureSampleBiasCompare_Texture3D_sampler, &TextureSampleBiasCompare_Texture3D_coordinate, &TextureSampleBiasCompare_Texture3D_bias, &TextureSampleBiasCompare_Texture3D_compare };

/// textureSampleBiasCompare with Texture3D, Float32x3, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture3D_texture;
Variable SampledTextureSampleBiasCompare_Texture3D_coordinate;
Variable SampledTextureSampleBiasCompare_Texture3D_bias;
Variable SampledTextureSampleBiasCompare_Texture3D_compare;
Function SampledTextureSampleBiasCompare_Texture3D;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture3D_args = { &SampledTextureSampleBiasCompare_Texture3D_texture, &SampledTextureSampleBiasCompare_Texture3D_coordinate, &SampledTextureSampleBiasCompare_Texture3D_bias, &SampledTextureSampleBiasCompare_Texture3D_compare };

/// textureSampleBiasCompare with Texture1DArray, Sampler, Float32x2, Float32, Float32
Variable TextureSampleBiasCompare_Texture1DArray_texture;
Variable TextureSampleBiasCompare_Texture1DArray_sampler;
Variable TextureSampleBiasCompare_Texture1DArray_coordinate;
Variable TextureSampleBiasCompare_Texture1DArray_bias;
Variable TextureSampleBiasCompare_Texture1DArray_compare;
Function TextureSampleBiasCompare_Texture1DArray;
inline constexpr std::array TextureSampleBiasCompare_Texture1DArray_args = { &TextureSampleBiasCompare_Texture1DArray_texture, &TextureSampleBiasCompare_Texture1DArray_sampler, &TextureSampleBiasCompare_Texture1DArray_coordinate, &TextureSampleBiasCompare_Texture1DArray_bias, &TextureSampleBiasCompare_Texture1DArray_compare };

/// textureSampleBiasCompare with Texture1DArray, Float32x2, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture1DArray_texture;
Variable SampledTextureSampleBiasCompare_Texture1DArray_coordinate;
Variable SampledTextureSampleBiasCompare_Texture1DArray_bias;
Variable SampledTextureSampleBiasCompare_Texture1DArray_compare;
Function SampledTextureSampleBiasCompare_Texture1DArray;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture1DArray_args = { &SampledTextureSampleBiasCompare_Texture1DArray_texture, &SampledTextureSampleBiasCompare_Texture1DArray_coordinate, &SampledTextureSampleBiasCompare_Texture1DArray_bias, &SampledTextureSampleBiasCompare_Texture1DArray_compare };

/// textureSampleBiasCompare with Texture2DArray, Sampler, Float32x3, Float32, Float32
Variable TextureSampleBiasCompare_Texture2DArray_texture;
Variable TextureSampleBiasCompare_Texture2DArray_sampler;
Variable TextureSampleBiasCompare_Texture2DArray_coordinate;
Variable TextureSampleBiasCompare_Texture2DArray_bias;
Variable TextureSampleBiasCompare_Texture2DArray_compare;
Function TextureSampleBiasCompare_Texture2DArray;
inline constexpr std::array TextureSampleBiasCompare_Texture2DArray_args = { &TextureSampleBiasCompare_Texture2DArray_texture, &TextureSampleBiasCompare_Texture2DArray_sampler, &TextureSampleBiasCompare_Texture2DArray_coordinate, &TextureSampleBiasCompare_Texture2DArray_bias, &TextureSampleBiasCompare_Texture2DArray_compare };

/// textureSampleBiasCompare with Texture2DArray, Float32x3, Float32, Float32
Variable SampledTextureSampleBiasCompare_Texture2DArray_texture;
Variable SampledTextureSampleBiasCompare_Texture2DArray_coordinate;
Variable SampledTextureSampleBiasCompare_Texture2DArray_bias;
Variable SampledTextureSampleBiasCompare_Texture2DArray_compare;
Function SampledTextureSampleBiasCompare_Texture2DArray;
inline constexpr std::array SampledTextureSampleBiasCompare_Texture2DArray_args = { &SampledTextureSampleBiasCompare_Texture2DArray_texture, &SampledTextureSampleBiasCompare_Texture2DArray_coordinate, &SampledTextureSampleBiasCompare_Texture2DArray_bias, &SampledTextureSampleBiasCompare_Texture2DArray_compare };

/// textureSampleBiasCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleBiasCompareOffset_Texture1D_texture;
Variable TextureSampleBiasCompareOffset_Texture1D_sampler;
Variable TextureSampleBiasCompareOffset_Texture1D_coordinate;
Variable TextureSampleBiasCompareOffset_Texture1D_bias;
Variable TextureSampleBiasCompareOffset_Texture1D_compare;
Variable TextureSampleBiasCompareOffset_Texture1D_offset;
Function TextureSampleBiasCompareOffset_Texture1D;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1D_args = { &TextureSampleBiasCompareOffset_Texture1D_texture, &TextureSampleBiasCompareOffset_Texture1D_sampler, &TextureSampleBiasCompareOffset_Texture1D_coordinate, &TextureSampleBiasCompareOffset_Texture1D_bias, &TextureSampleBiasCompareOffset_Texture1D_compare, &TextureSampleBiasCompareOffset_Texture1D_offset };

/// textureSampleBiasCompareOffset with Texture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleBiasCompareOffset_Texture1D_texture;
Variable SampledTextureSampleBiasCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture1D_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture1D_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture1D_offset;
Function SampledTextureSampleBiasCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture1D_args = { &SampledTextureSampleBiasCompareOffset_Texture1D_texture, &SampledTextureSampleBiasCompareOffset_Texture1D_coordinate, &SampledTextureSampleBiasCompareOffset_Texture1D_bias, &SampledTextureSampleBiasCompareOffset_Texture1D_compare, &SampledTextureSampleBiasCompareOffset_Texture1D_offset };

/// textureSampleBiasCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleBiasCompareOffset_Texture2D_texture;
Variable TextureSampleBiasCompareOffset_Texture2D_sampler;
Variable TextureSampleBiasCompareOffset_Texture2D_coordinate;
Variable TextureSampleBiasCompareOffset_Texture2D_bias;
Variable TextureSampleBiasCompareOffset_Texture2D_compare;
Variable TextureSampleBiasCompareOffset_Texture2D_offset;
Function TextureSampleBiasCompareOffset_Texture2D;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2D_args = { &TextureSampleBiasCompareOffset_Texture2D_texture, &TextureSampleBiasCompareOffset_Texture2D_sampler, &TextureSampleBiasCompareOffset_Texture2D_coordinate, &TextureSampleBiasCompareOffset_Texture2D_bias, &TextureSampleBiasCompareOffset_Texture2D_compare, &TextureSampleBiasCompareOffset_Texture2D_offset };

/// textureSampleBiasCompareOffset with Texture2D, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleBiasCompareOffset_Texture2D_texture;
Variable SampledTextureSampleBiasCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture2D_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture2D_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture2D_offset;
Function SampledTextureSampleBiasCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture2D_args = { &SampledTextureSampleBiasCompareOffset_Texture2D_texture, &SampledTextureSampleBiasCompareOffset_Texture2D_coordinate, &SampledTextureSampleBiasCompareOffset_Texture2D_bias, &SampledTextureSampleBiasCompareOffset_Texture2D_compare, &SampledTextureSampleBiasCompareOffset_Texture2D_offset };

/// textureSampleBiasCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleBiasCompareOffset_Texture3D_texture;
Variable TextureSampleBiasCompareOffset_Texture3D_sampler;
Variable TextureSampleBiasCompareOffset_Texture3D_coordinate;
Variable TextureSampleBiasCompareOffset_Texture3D_bias;
Variable TextureSampleBiasCompareOffset_Texture3D_compare;
Variable TextureSampleBiasCompareOffset_Texture3D_offset;
Function TextureSampleBiasCompareOffset_Texture3D;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture3D_args = { &TextureSampleBiasCompareOffset_Texture3D_texture, &TextureSampleBiasCompareOffset_Texture3D_sampler, &TextureSampleBiasCompareOffset_Texture3D_coordinate, &TextureSampleBiasCompareOffset_Texture3D_bias, &TextureSampleBiasCompareOffset_Texture3D_compare, &TextureSampleBiasCompareOffset_Texture3D_offset };

/// textureSampleBiasCompareOffset with Texture3D, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleBiasCompareOffset_Texture3D_texture;
Variable SampledTextureSampleBiasCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture3D_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture3D_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture3D_offset;
Function SampledTextureSampleBiasCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture3D_args = { &SampledTextureSampleBiasCompareOffset_Texture3D_texture, &SampledTextureSampleBiasCompareOffset_Texture3D_coordinate, &SampledTextureSampleBiasCompareOffset_Texture3D_bias, &SampledTextureSampleBiasCompareOffset_Texture3D_compare, &SampledTextureSampleBiasCompareOffset_Texture3D_offset };

/// textureSampleBiasCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32, Float32x2
Variable TextureSampleBiasCompareOffset_Texture1DArray_texture;
Variable TextureSampleBiasCompareOffset_Texture1DArray_sampler;
Variable TextureSampleBiasCompareOffset_Texture1DArray_coordinate;
Variable TextureSampleBiasCompareOffset_Texture1DArray_bias;
Variable TextureSampleBiasCompareOffset_Texture1DArray_compare;
Variable TextureSampleBiasCompareOffset_Texture1DArray_offset;
Function TextureSampleBiasCompareOffset_Texture1DArray;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture1DArray_args = { &TextureSampleBiasCompareOffset_Texture1DArray_texture, &TextureSampleBiasCompareOffset_Texture1DArray_sampler, &TextureSampleBiasCompareOffset_Texture1DArray_coordinate, &TextureSampleBiasCompareOffset_Texture1DArray_bias, &TextureSampleBiasCompareOffset_Texture1DArray_compare, &TextureSampleBiasCompareOffset_Texture1DArray_offset };

/// textureSampleBiasCompareOffset with Texture1DArray, Float32x2, Float32, Float32, Float32x2
Variable SampledTextureSampleBiasCompareOffset_Texture1DArray_texture;
Variable SampledTextureSampleBiasCompareOffset_Texture1DArray_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture1DArray_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture1DArray_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture1DArray_offset;
Function SampledTextureSampleBiasCompareOffset_Texture1DArray;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture1DArray_args = { &SampledTextureSampleBiasCompareOffset_Texture1DArray_texture, &SampledTextureSampleBiasCompareOffset_Texture1DArray_coordinate, &SampledTextureSampleBiasCompareOffset_Texture1DArray_bias, &SampledTextureSampleBiasCompareOffset_Texture1DArray_compare, &SampledTextureSampleBiasCompareOffset_Texture1DArray_offset };

/// textureSampleBiasCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32, Float32x3
Variable TextureSampleBiasCompareOffset_Texture2DArray_texture;
Variable TextureSampleBiasCompareOffset_Texture2DArray_sampler;
Variable TextureSampleBiasCompareOffset_Texture2DArray_coordinate;
Variable TextureSampleBiasCompareOffset_Texture2DArray_bias;
Variable TextureSampleBiasCompareOffset_Texture2DArray_compare;
Variable TextureSampleBiasCompareOffset_Texture2DArray_offset;
Function TextureSampleBiasCompareOffset_Texture2DArray;
inline constexpr std::array TextureSampleBiasCompareOffset_Texture2DArray_args = { &TextureSampleBiasCompareOffset_Texture2DArray_texture, &TextureSampleBiasCompareOffset_Texture2DArray_sampler, &TextureSampleBiasCompareOffset_Texture2DArray_coordinate, &TextureSampleBiasCompareOffset_Texture2DArray_bias, &TextureSampleBiasCompareOffset_Texture2DArray_compare, &TextureSampleBiasCompareOffset_Texture2DArray_offset };

/// textureSampleBiasCompareOffset with Texture2DArray, Float32x3, Float32, Float32, Float32x3
Variable SampledTextureSampleBiasCompareOffset_Texture2DArray_texture;
Variable SampledTextureSampleBiasCompareOffset_Texture2DArray_coordinate;
Variable SampledTextureSampleBiasCompareOffset_Texture2DArray_bias;
Variable SampledTextureSampleBiasCompareOffset_Texture2DArray_compare;
Variable SampledTextureSampleBiasCompareOffset_Texture2DArray_offset;
Function SampledTextureSampleBiasCompareOffset_Texture2DArray;
inline constexpr std::array SampledTextureSampleBiasCompareOffset_Texture2DArray_args = { &SampledTextureSampleBiasCompareOffset_Texture2DArray_texture, &SampledTextureSampleBiasCompareOffset_Texture2DArray_coordinate, &SampledTextureSampleBiasCompareOffset_Texture2DArray_bias, &SampledTextureSampleBiasCompareOffset_Texture2DArray_compare, &SampledTextureSampleBiasCompareOffset_Texture2DArray_offset };

/// textureSampleBiasProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
Variable TextureSampleBiasProjCompare_Texture1D_texture;
Variable TextureSampleBiasProjCompare_Texture1D_sampler;
Variable TextureSampleBiasProjCompare_Texture1D_coordinate;
Variable TextureSampleBiasProjCompare_Texture1D_bias;
Variable TextureSampleBiasProjCompare_Texture1D_proj;
Variable TextureSampleBiasProjCompare_Texture1D_compare;
Function TextureSampleBiasProjCompare_Texture1D;
inline constexpr std::array TextureSampleBiasProjCompare_Texture1D_args = { &TextureSampleBiasProjCompare_Texture1D_texture, &TextureSampleBiasProjCompare_Texture1D_sampler, &TextureSampleBiasProjCompare_Texture1D_coordinate, &TextureSampleBiasProjCompare_Texture1D_bias, &TextureSampleBiasProjCompare_Texture1D_proj, &TextureSampleBiasProjCompare_Texture1D_compare };

/// textureSampleBiasProjCompare with Texture1D, Float32, Float32, Float32, Float32
Variable SampledTextureSampleBiasProjCompare_Texture1D_texture;
Variable SampledTextureSampleBiasProjCompare_Texture1D_coordinate;
Variable SampledTextureSampleBiasProjCompare_Texture1D_bias;
Variable SampledTextureSampleBiasProjCompare_Texture1D_proj;
Variable SampledTextureSampleBiasProjCompare_Texture1D_compare;
Function SampledTextureSampleBiasProjCompare_Texture1D;
inline constexpr std::array SampledTextureSampleBiasProjCompare_Texture1D_args = { &SampledTextureSampleBiasProjCompare_Texture1D_texture, &SampledTextureSampleBiasProjCompare_Texture1D_coordinate, &SampledTextureSampleBiasProjCompare_Texture1D_bias, &SampledTextureSampleBiasProjCompare_Texture1D_proj, &SampledTextureSampleBiasProjCompare_Texture1D_compare };

/// textureSampleBiasProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32, Float32
Variable TextureSampleBiasProjCompare_Texture2D_texture;
Variable TextureSampleBiasProjCompare_Texture2D_sampler;
Variable TextureSampleBiasProjCompare_Texture2D_coordinate;
Variable TextureSampleBiasProjCompare_Texture2D_bias;
Variable TextureSampleBiasProjCompare_Texture2D_proj;
Variable TextureSampleBiasProjCompare_Texture2D_compare;
Function TextureSampleBiasProjCompare_Texture2D;
inline constexpr std::array TextureSampleBiasProjCompare_Texture2D_args = { &TextureSampleBiasProjCompare_Texture2D_texture, &TextureSampleBiasProjCompare_Texture2D_sampler, &TextureSampleBiasProjCompare_Texture2D_coordinate, &TextureSampleBiasProjCompare_Texture2D_bias, &TextureSampleBiasProjCompare_Texture2D_proj, &TextureSampleBiasProjCompare_Texture2D_compare };

/// textureSampleBiasProjCompare with Texture2D, Float32x2, Float32, Float32, Float32
Variable SampledTextureSampleBiasProjCompare_Texture2D_texture;
Variable SampledTextureSampleBiasProjCompare_Texture2D_coordinate;
Variable SampledTextureSampleBiasProjCompare_Texture2D_bias;
Variable SampledTextureSampleBiasProjCompare_Texture2D_proj;
Variable SampledTextureSampleBiasProjCompare_Texture2D_compare;
Function SampledTextureSampleBiasProjCompare_Texture2D;
inline constexpr std::array SampledTextureSampleBiasProjCompare_Texture2D_args = { &SampledTextureSampleBiasProjCompare_Texture2D_texture, &SampledTextureSampleBiasProjCompare_Texture2D_coordinate, &SampledTextureSampleBiasProjCompare_Texture2D_bias, &SampledTextureSampleBiasProjCompare_Texture2D_proj, &SampledTextureSampleBiasProjCompare_Texture2D_compare };

/// textureSampleBiasProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32, Float32
Variable TextureSampleBiasProjCompare_Texture3D_texture;
Variable TextureSampleBiasProjCompare_Texture3D_sampler;
Variable TextureSampleBiasProjCompare_Texture3D_coordinate;
Variable TextureSampleBiasProjCompare_Texture3D_bias;
Variable TextureSampleBiasProjCompare_Texture3D_proj;
Variable TextureSampleBiasProjCompare_Texture3D_compare;
Function TextureSampleBiasProjCompare_Texture3D;
inline constexpr std::array TextureSampleBiasProjCompare_Texture3D_args = { &TextureSampleBiasProjCompare_Texture3D_texture, &TextureSampleBiasProjCompare_Texture3D_sampler, &TextureSampleBiasProjCompare_Texture3D_coordinate, &TextureSampleBiasProjCompare_Texture3D_bias, &TextureSampleBiasProjCompare_Texture3D_proj, &TextureSampleBiasProjCompare_Texture3D_compare };

/// textureSampleBiasProjCompare with Texture3D, Float32x3, Float32, Float32, Float32
Variable SampledTextureSampleBiasProjCompare_Texture3D_texture;
Variable SampledTextureSampleBiasProjCompare_Texture3D_coordinate;
Variable SampledTextureSampleBiasProjCompare_Texture3D_bias;
Variable SampledTextureSampleBiasProjCompare_Texture3D_proj;
Variable SampledTextureSampleBiasProjCompare_Texture3D_compare;
Function SampledTextureSampleBiasProjCompare_Texture3D;
inline constexpr std::array SampledTextureSampleBiasProjCompare_Texture3D_args = { &SampledTextureSampleBiasProjCompare_Texture3D_texture, &SampledTextureSampleBiasProjCompare_Texture3D_coordinate, &SampledTextureSampleBiasProjCompare_Texture3D_bias, &SampledTextureSampleBiasProjCompare_Texture3D_proj, &SampledTextureSampleBiasProjCompare_Texture3D_compare };

/// textureSampleBiasProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
Variable TextureSampleBiasProjCompareOffset_Texture1D_texture;
Variable TextureSampleBiasProjCompareOffset_Texture1D_sampler;
Variable TextureSampleBiasProjCompareOffset_Texture1D_coordinate;
Variable TextureSampleBiasProjCompareOffset_Texture1D_bias;
Variable TextureSampleBiasProjCompareOffset_Texture1D_proj;
Variable TextureSampleBiasProjCompareOffset_Texture1D_compare;
Variable TextureSampleBiasProjCompareOffset_Texture1D_offset;
Function TextureSampleBiasProjCompareOffset_Texture1D;
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture1D_args = { &TextureSampleBiasProjCompareOffset_Texture1D_texture, &TextureSampleBiasProjCompareOffset_Texture1D_sampler, &TextureSampleBiasProjCompareOffset_Texture1D_coordinate, &TextureSampleBiasProjCompareOffset_Texture1D_bias, &TextureSampleBiasProjCompareOffset_Texture1D_proj, &TextureSampleBiasProjCompareOffset_Texture1D_compare, &TextureSampleBiasProjCompareOffset_Texture1D_offset };

/// textureSampleBiasProjCompareOffset with Texture1D, Float32, Float32, Float32, Float32, Float32
Variable SampledTextureSampleBiasProjCompareOffset_Texture1D_texture;
Variable SampledTextureSampleBiasProjCompareOffset_Texture1D_coordinate;
Variable SampledTextureSampleBiasProjCompareOffset_Texture1D_bias;
Variable SampledTextureSampleBiasProjCompareOffset_Texture1D_proj;
Variable SampledTextureSampleBiasProjCompareOffset_Texture1D_compare;
Variable SampledTextureSampleBiasProjCompareOffset_Texture1D_offset;
Function SampledTextureSampleBiasProjCompareOffset_Texture1D;
inline constexpr std::array SampledTextureSampleBiasProjCompareOffset_Texture1D_args = { &SampledTextureSampleBiasProjCompareOffset_Texture1D_texture, &SampledTextureSampleBiasProjCompareOffset_Texture1D_coordinate, &SampledTextureSampleBiasProjCompareOffset_Texture1D_bias, &SampledTextureSampleBiasProjCompareOffset_Texture1D_proj, &SampledTextureSampleBiasProjCompareOffset_Texture1D_compare, &SampledTextureSampleBiasProjCompareOffset_Texture1D_offset };

/// textureSampleBiasProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32, Float32x2
Variable TextureSampleBiasProjCompareOffset_Texture2D_texture;
Variable TextureSampleBiasProjCompareOffset_Texture2D_sampler;
Variable TextureSampleBiasProjCompareOffset_Texture2D_coordinate;
Variable TextureSampleBiasProjCompareOffset_Texture2D_bias;
Variable TextureSampleBiasProjCompareOffset_Texture2D_proj;
Variable TextureSampleBiasProjCompareOffset_Texture2D_compare;
Variable TextureSampleBiasProjCompareOffset_Texture2D_offset;
Function TextureSampleBiasProjCompareOffset_Texture2D;
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture2D_args = { &TextureSampleBiasProjCompareOffset_Texture2D_texture, &TextureSampleBiasProjCompareOffset_Texture2D_sampler, &TextureSampleBiasProjCompareOffset_Texture2D_coordinate, &TextureSampleBiasProjCompareOffset_Texture2D_bias, &TextureSampleBiasProjCompareOffset_Texture2D_proj, &TextureSampleBiasProjCompareOffset_Texture2D_compare, &TextureSampleBiasProjCompareOffset_Texture2D_offset };

/// textureSampleBiasProjCompareOffset with Texture2D, Float32x2, Float32, Float32, Float32, Float32x2
Variable SampledTextureSampleBiasProjCompareOffset_Texture2D_texture;
Variable SampledTextureSampleBiasProjCompareOffset_Texture2D_coordinate;
Variable SampledTextureSampleBiasProjCompareOffset_Texture2D_bias;
Variable SampledTextureSampleBiasProjCompareOffset_Texture2D_proj;
Variable SampledTextureSampleBiasProjCompareOffset_Texture2D_compare;
Variable SampledTextureSampleBiasProjCompareOffset_Texture2D_offset;
Function SampledTextureSampleBiasProjCompareOffset_Texture2D;
inline constexpr std::array SampledTextureSampleBiasProjCompareOffset_Texture2D_args = { &SampledTextureSampleBiasProjCompareOffset_Texture2D_texture, &SampledTextureSampleBiasProjCompareOffset_Texture2D_coordinate, &SampledTextureSampleBiasProjCompareOffset_Texture2D_bias, &SampledTextureSampleBiasProjCompareOffset_Texture2D_proj, &SampledTextureSampleBiasProjCompareOffset_Texture2D_compare, &SampledTextureSampleBiasProjCompareOffset_Texture2D_offset };

/// textureSampleBiasProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32, Float32x3
Variable TextureSampleBiasProjCompareOffset_Texture3D_texture;
Variable TextureSampleBiasProjCompareOffset_Texture3D_sampler;
Variable TextureSampleBiasProjCompareOffset_Texture3D_coordinate;
Variable TextureSampleBiasProjCompareOffset_Texture3D_bias;
Variable TextureSampleBiasProjCompareOffset_Texture3D_proj;
Variable TextureSampleBiasProjCompareOffset_Texture3D_compare;
Variable TextureSampleBiasProjCompareOffset_Texture3D_offset;
Function TextureSampleBiasProjCompareOffset_Texture3D;
inline constexpr std::array TextureSampleBiasProjCompareOffset_Texture3D_args = { &TextureSampleBiasProjCompareOffset_Texture3D_texture, &TextureSampleBiasProjCompareOffset_Texture3D_sampler, &TextureSampleBiasProjCompareOffset_Texture3D_coordinate, &TextureSampleBiasProjCompareOffset_Texture3D_bias, &TextureSampleBiasProjCompareOffset_Texture3D_proj, &TextureSampleBiasProjCompareOffset_Texture3D_compare, &TextureSampleBiasProjCompareOffset_Texture3D_offset };

/// textureSampleBiasProjCompareOffset with Texture3D, Float32x3, Float32, Float32, Float32, Float32x3
Variable SampledTextureSampleBiasProjCompareOffset_Texture3D_texture;
Variable SampledTextureSampleBiasProjCompareOffset_Texture3D_coordinate;
Variable SampledTextureSampleBiasProjCompareOffset_Texture3D_bias;
Variable SampledTextureSampleBiasProjCompareOffset_Texture3D_proj;
Variable SampledTextureSampleBiasProjCompareOffset_Texture3D_compare;
Variable SampledTextureSampleBiasProjCompareOffset_Texture3D_offset;
Function SampledTextureSampleBiasProjCompareOffset_Texture3D;
inline constexpr std::array SampledTextureSampleBiasProjCompareOffset_Texture3D_args = { &SampledTextureSampleBiasProjCompareOffset_Texture3D_texture, &SampledTextureSampleBiasProjCompareOffset_Texture3D_coordinate, &SampledTextureSampleBiasProjCompareOffset_Texture3D_bias, &SampledTextureSampleBiasProjCompareOffset_Texture3D_proj, &SampledTextureSampleBiasProjCompareOffset_Texture3D_compare, &SampledTextureSampleBiasProjCompareOffset_Texture3D_offset };

void SetupIntrinsics()
{
    /// acos with Float32
    acos_Float32_arg.name = "val"_c;
    acos_Float32_arg.type = Type::FullType{ Float32Type.name };
    acos_Float32.name = "acos"_c;
    acos_Float32.returnType = Type::FullType { Float32Type.name };
    acos_Float32.parameters = acos_Float32_args;
    Symbol::Resolved(&acos_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&acos_Float32)->returnTypeSymbol = &Float32Type;

    /// acos with Float32x2
    acos_Float32x2_arg.name = "val"_c;
    acos_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    acos_Float32x2.name = "acos"_c;
    acos_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    acos_Float32x2.parameters = acos_Float32x2_args;
    Symbol::Resolved(&acos_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&acos_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// acos with Float32x3
    acos_Float32x3_arg.name = "val"_c;
    acos_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    acos_Float32x3.name = "acos"_c;
    acos_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    acos_Float32x3.parameters = acos_Float32x3_args;
    Symbol::Resolved(&acos_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&acos_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// acos with Float32x4
    acos_Float32x4_arg.name = "val"_c;
    acos_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    acos_Float32x4.name = "acos"_c;
    acos_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    acos_Float32x4.parameters = acos_Float32x4_args;
    Symbol::Resolved(&acos_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&acos_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// acos with Float16
    acos_Float16_arg.name = "val"_c;
    acos_Float16_arg.type = Type::FullType{ Float16Type.name };
    acos_Float16.name = "acos"_c;
    acos_Float16.returnType = Type::FullType { Float16Type.name };
    acos_Float16.parameters = acos_Float16_args;
    Symbol::Resolved(&acos_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&acos_Float16)->returnTypeSymbol = &Float16Type;

    /// acos with Float16x2
    acos_Float16x2_arg.name = "val"_c;
    acos_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    acos_Float16x2.name = "acos"_c;
    acos_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    acos_Float16x2.parameters = acos_Float16x2_args;
    Symbol::Resolved(&acos_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&acos_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// acos with Float16x3
    acos_Float16x3_arg.name = "val"_c;
    acos_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    acos_Float16x3.name = "acos"_c;
    acos_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    acos_Float16x3.parameters = acos_Float16x3_args;
    Symbol::Resolved(&acos_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&acos_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// acos with Float16x4
    acos_Float16x4_arg.name = "val"_c;
    acos_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    acos_Float16x4.name = "acos"_c;
    acos_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    acos_Float16x4.parameters = acos_Float16x4_args;
    Symbol::Resolved(&acos_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&acos_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// acosh with Float32
    acosh_Float32_arg.name = "val"_c;
    acosh_Float32_arg.type = Type::FullType{ Float32Type.name };
    acosh_Float32.name = "acosh"_c;
    acosh_Float32.returnType = Type::FullType { Float32Type.name };
    acosh_Float32.parameters = acosh_Float32_args;
    Symbol::Resolved(&acosh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&acosh_Float32)->returnTypeSymbol = &Float32Type;

    /// acosh with Float32x2
    acosh_Float32x2_arg.name = "val"_c;
    acosh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    acosh_Float32x2.name = "acosh"_c;
    acosh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    acosh_Float32x2.parameters = acosh_Float32x2_args;
    Symbol::Resolved(&acosh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&acosh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// acosh with Float32x3
    acosh_Float32x3_arg.name = "val"_c;
    acosh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    acosh_Float32x3.name = "acosh"_c;
    acosh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    acosh_Float32x3.parameters = acosh_Float32x3_args;
    Symbol::Resolved(&acosh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&acosh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// acosh with Float32x4
    acosh_Float32x4_arg.name = "val"_c;
    acosh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    acosh_Float32x4.name = "acosh"_c;
    acosh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    acosh_Float32x4.parameters = acosh_Float32x4_args;
    Symbol::Resolved(&acosh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&acosh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// acosh with Float16
    acosh_Float16_arg.name = "val"_c;
    acosh_Float16_arg.type = Type::FullType{ Float16Type.name };
    acosh_Float16.name = "acosh"_c;
    acosh_Float16.returnType = Type::FullType { Float16Type.name };
    acosh_Float16.parameters = acosh_Float16_args;
    Symbol::Resolved(&acosh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&acosh_Float16)->returnTypeSymbol = &Float16Type;

    /// acosh with Float16x2
    acosh_Float16x2_arg.name = "val"_c;
    acosh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    acosh_Float16x2.name = "acosh"_c;
    acosh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    acosh_Float16x2.parameters = acosh_Float16x2_args;
    Symbol::Resolved(&acosh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&acosh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// acosh with Float16x3
    acosh_Float16x3_arg.name = "val"_c;
    acosh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    acosh_Float16x3.name = "acosh"_c;
    acosh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    acosh_Float16x3.parameters = acosh_Float16x3_args;
    Symbol::Resolved(&acosh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&acosh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// acosh with Float16x4
    acosh_Float16x4_arg.name = "val"_c;
    acosh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    acosh_Float16x4.name = "acosh"_c;
    acosh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    acosh_Float16x4.parameters = acosh_Float16x4_args;
    Symbol::Resolved(&acosh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&acosh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// asin with Float32
    asin_Float32_arg.name = "val"_c;
    asin_Float32_arg.type = Type::FullType{ Float32Type.name };
    asin_Float32.name = "asin"_c;
    asin_Float32.returnType = Type::FullType { Float32Type.name };
    asin_Float32.parameters = asin_Float32_args;
    Symbol::Resolved(&asin_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&asin_Float32)->returnTypeSymbol = &Float32Type;

    /// asin with Float32x2
    asin_Float32x2_arg.name = "val"_c;
    asin_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    asin_Float32x2.name = "asin"_c;
    asin_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    asin_Float32x2.parameters = asin_Float32x2_args;
    Symbol::Resolved(&asin_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&asin_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// asin with Float32x3
    asin_Float32x3_arg.name = "val"_c;
    asin_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    asin_Float32x3.name = "asin"_c;
    asin_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    asin_Float32x3.parameters = asin_Float32x3_args;
    Symbol::Resolved(&asin_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&asin_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// asin with Float32x4
    asin_Float32x4_arg.name = "val"_c;
    asin_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    asin_Float32x4.name = "asin"_c;
    asin_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    asin_Float32x4.parameters = asin_Float32x4_args;
    Symbol::Resolved(&asin_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&asin_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// asin with Float16
    asin_Float16_arg.name = "val"_c;
    asin_Float16_arg.type = Type::FullType{ Float16Type.name };
    asin_Float16.name = "asin"_c;
    asin_Float16.returnType = Type::FullType { Float16Type.name };
    asin_Float16.parameters = asin_Float16_args;
    Symbol::Resolved(&asin_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&asin_Float16)->returnTypeSymbol = &Float16Type;

    /// asin with Float16x2
    asin_Float16x2_arg.name = "val"_c;
    asin_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    asin_Float16x2.name = "asin"_c;
    asin_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    asin_Float16x2.parameters = asin_Float16x2_args;
    Symbol::Resolved(&asin_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&asin_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// asin with Float16x3
    asin_Float16x3_arg.name = "val"_c;
    asin_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    asin_Float16x3.name = "asin"_c;
    asin_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    asin_Float16x3.parameters = asin_Float16x3_args;
    Symbol::Resolved(&asin_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&asin_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// asin with Float16x4
    asin_Float16x4_arg.name = "val"_c;
    asin_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    asin_Float16x4.name = "asin"_c;
    asin_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    asin_Float16x4.parameters = asin_Float16x4_args;
    Symbol::Resolved(&asin_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&asin_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// asinh with Float32
    asinh_Float32_arg.name = "val"_c;
    asinh_Float32_arg.type = Type::FullType{ Float32Type.name };
    asinh_Float32.name = "asinh"_c;
    asinh_Float32.returnType = Type::FullType { Float32Type.name };
    asinh_Float32.parameters = asinh_Float32_args;
    Symbol::Resolved(&asinh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&asinh_Float32)->returnTypeSymbol = &Float32Type;

    /// asinh with Float32x2
    asinh_Float32x2_arg.name = "val"_c;
    asinh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    asinh_Float32x2.name = "asinh"_c;
    asinh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    asinh_Float32x2.parameters = asinh_Float32x2_args;
    Symbol::Resolved(&asinh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&asinh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// asinh with Float32x3
    asinh_Float32x3_arg.name = "val"_c;
    asinh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    asinh_Float32x3.name = "asinh"_c;
    asinh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    asinh_Float32x3.parameters = asinh_Float32x3_args;
    Symbol::Resolved(&asinh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&asinh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// asinh with Float32x4
    asinh_Float32x4_arg.name = "val"_c;
    asinh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    asinh_Float32x4.name = "asinh"_c;
    asinh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    asinh_Float32x4.parameters = asinh_Float32x4_args;
    Symbol::Resolved(&asinh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&asinh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// asinh with Float16
    asinh_Float16_arg.name = "val"_c;
    asinh_Float16_arg.type = Type::FullType{ Float16Type.name };
    asinh_Float16.name = "asinh"_c;
    asinh_Float16.returnType = Type::FullType { Float16Type.name };
    asinh_Float16.parameters = asinh_Float16_args;
    Symbol::Resolved(&asinh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&asinh_Float16)->returnTypeSymbol = &Float16Type;

    /// asinh with Float16x2
    asinh_Float16x2_arg.name = "val"_c;
    asinh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    asinh_Float16x2.name = "asinh"_c;
    asinh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    asinh_Float16x2.parameters = asinh_Float16x2_args;
    Symbol::Resolved(&asinh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&asinh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// asinh with Float16x3
    asinh_Float16x3_arg.name = "val"_c;
    asinh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    asinh_Float16x3.name = "asinh"_c;
    asinh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    asinh_Float16x3.parameters = asinh_Float16x3_args;
    Symbol::Resolved(&asinh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&asinh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// asinh with Float16x4
    asinh_Float16x4_arg.name = "val"_c;
    asinh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    asinh_Float16x4.name = "asinh"_c;
    asinh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    asinh_Float16x4.parameters = asinh_Float16x4_args;
    Symbol::Resolved(&asinh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&asinh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// atan with Float32
    atan_Float32_arg.name = "val"_c;
    atan_Float32_arg.type = Type::FullType{ Float32Type.name };
    atan_Float32.name = "atan"_c;
    atan_Float32.returnType = Type::FullType { Float32Type.name };
    atan_Float32.parameters = atan_Float32_args;
    Symbol::Resolved(&atan_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan_Float32)->returnTypeSymbol = &Float32Type;

    /// atan with Float32x2
    atan_Float32x2_arg.name = "val"_c;
    atan_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    atan_Float32x2.name = "atan"_c;
    atan_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    atan_Float32x2.parameters = atan_Float32x2_args;
    Symbol::Resolved(&atan_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// atan with Float32x3
    atan_Float32x3_arg.name = "val"_c;
    atan_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    atan_Float32x3.name = "atan"_c;
    atan_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    atan_Float32x3.parameters = atan_Float32x3_args;
    Symbol::Resolved(&atan_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// atan with Float32x4
    atan_Float32x4_arg.name = "val"_c;
    atan_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    atan_Float32x4.name = "atan"_c;
    atan_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    atan_Float32x4.parameters = atan_Float32x4_args;
    Symbol::Resolved(&atan_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// atan with Float16
    atan_Float16_arg.name = "val"_c;
    atan_Float16_arg.type = Type::FullType{ Float16Type.name };
    atan_Float16.name = "atan"_c;
    atan_Float16.returnType = Type::FullType { Float16Type.name };
    atan_Float16.parameters = atan_Float16_args;
    Symbol::Resolved(&atan_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan_Float16)->returnTypeSymbol = &Float16Type;

    /// atan with Float16x2
    atan_Float16x2_arg.name = "val"_c;
    atan_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    atan_Float16x2.name = "atan"_c;
    atan_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    atan_Float16x2.parameters = atan_Float16x2_args;
    Symbol::Resolved(&atan_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// atan with Float16x3
    atan_Float16x3_arg.name = "val"_c;
    atan_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    atan_Float16x3.name = "atan"_c;
    atan_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    atan_Float16x3.parameters = atan_Float16x3_args;
    Symbol::Resolved(&atan_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// atan with Float16x4
    atan_Float16x4_arg.name = "val"_c;
    atan_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    atan_Float16x4.name = "atan"_c;
    atan_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    atan_Float16x4.parameters = atan_Float16x4_args;
    Symbol::Resolved(&atan_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// atanh with Float32
    atanh_Float32_arg.name = "val"_c;
    atanh_Float32_arg.type = Type::FullType{ Float32Type.name };
    atanh_Float32.name = "atanh"_c;
    atanh_Float32.returnType = Type::FullType { Float32Type.name };
    atanh_Float32.parameters = atanh_Float32_args;
    Symbol::Resolved(&atanh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atanh_Float32)->returnTypeSymbol = &Float32Type;

    /// atanh with Float32x2
    atanh_Float32x2_arg.name = "val"_c;
    atanh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    atanh_Float32x2.name = "atanh"_c;
    atanh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    atanh_Float32x2.parameters = atanh_Float32x2_args;
    Symbol::Resolved(&atanh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atanh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// atanh with Float32x3
    atanh_Float32x3_arg.name = "val"_c;
    atanh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    atanh_Float32x3.name = "atanh"_c;
    atanh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    atanh_Float32x3.parameters = atanh_Float32x3_args;
    Symbol::Resolved(&atanh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atanh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// atanh with Float32x4
    atanh_Float32x4_arg.name = "val"_c;
    atanh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    atanh_Float32x4.name = "atanh"_c;
    atanh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    atanh_Float32x4.parameters = atanh_Float32x4_args;
    Symbol::Resolved(&atanh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atanh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// atanh with Float16
    atanh_Float16_arg.name = "val"_c;
    atanh_Float16_arg.type = Type::FullType{ Float16Type.name };
    atanh_Float16.name = "atanh"_c;
    atanh_Float16.returnType = Type::FullType { Float16Type.name };
    atanh_Float16.parameters = atanh_Float16_args;
    Symbol::Resolved(&atanh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atanh_Float16)->returnTypeSymbol = &Float16Type;

    /// atanh with Float16x2
    atanh_Float16x2_arg.name = "val"_c;
    atanh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    atanh_Float16x2.name = "atanh"_c;
    atanh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    atanh_Float16x2.parameters = atanh_Float16x2_args;
    Symbol::Resolved(&atanh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atanh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// atanh with Float16x3
    atanh_Float16x3_arg.name = "val"_c;
    atanh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    atanh_Float16x3.name = "atanh"_c;
    atanh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    atanh_Float16x3.parameters = atanh_Float16x3_args;
    Symbol::Resolved(&atanh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atanh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// atanh with Float16x4
    atanh_Float16x4_arg.name = "val"_c;
    atanh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    atanh_Float16x4.name = "atanh"_c;
    atanh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    atanh_Float16x4.parameters = atanh_Float16x4_args;
    Symbol::Resolved(&atanh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atanh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// cos with Float32
    cos_Float32_arg.name = "val"_c;
    cos_Float32_arg.type = Type::FullType{ Float32Type.name };
    cos_Float32.name = "cos"_c;
    cos_Float32.returnType = Type::FullType { Float32Type.name };
    cos_Float32.parameters = cos_Float32_args;
    Symbol::Resolved(&cos_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&cos_Float32)->returnTypeSymbol = &Float32Type;

    /// cos with Float32x2
    cos_Float32x2_arg.name = "val"_c;
    cos_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    cos_Float32x2.name = "cos"_c;
    cos_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    cos_Float32x2.parameters = cos_Float32x2_args;
    Symbol::Resolved(&cos_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&cos_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// cos with Float32x3
    cos_Float32x3_arg.name = "val"_c;
    cos_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    cos_Float32x3.name = "cos"_c;
    cos_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    cos_Float32x3.parameters = cos_Float32x3_args;
    Symbol::Resolved(&cos_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cos_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// cos with Float32x4
    cos_Float32x4_arg.name = "val"_c;
    cos_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    cos_Float32x4.name = "cos"_c;
    cos_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    cos_Float32x4.parameters = cos_Float32x4_args;
    Symbol::Resolved(&cos_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&cos_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// cos with Float16
    cos_Float16_arg.name = "val"_c;
    cos_Float16_arg.type = Type::FullType{ Float16Type.name };
    cos_Float16.name = "cos"_c;
    cos_Float16.returnType = Type::FullType { Float16Type.name };
    cos_Float16.parameters = cos_Float16_args;
    Symbol::Resolved(&cos_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&cos_Float16)->returnTypeSymbol = &Float16Type;

    /// cos with Float16x2
    cos_Float16x2_arg.name = "val"_c;
    cos_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    cos_Float16x2.name = "cos"_c;
    cos_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    cos_Float16x2.parameters = cos_Float16x2_args;
    Symbol::Resolved(&cos_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&cos_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// cos with Float16x3
    cos_Float16x3_arg.name = "val"_c;
    cos_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    cos_Float16x3.name = "cos"_c;
    cos_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    cos_Float16x3.parameters = cos_Float16x3_args;
    Symbol::Resolved(&cos_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cos_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// cos with Float16x4
    cos_Float16x4_arg.name = "val"_c;
    cos_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    cos_Float16x4.name = "cos"_c;
    cos_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    cos_Float16x4.parameters = cos_Float16x4_args;
    Symbol::Resolved(&cos_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&cos_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// cosh with Float32
    cosh_Float32_arg.name = "val"_c;
    cosh_Float32_arg.type = Type::FullType{ Float32Type.name };
    cosh_Float32.name = "cosh"_c;
    cosh_Float32.returnType = Type::FullType { Float32Type.name };
    cosh_Float32.parameters = cosh_Float32_args;
    Symbol::Resolved(&cosh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&cosh_Float32)->returnTypeSymbol = &Float32Type;

    /// cosh with Float32x2
    cosh_Float32x2_arg.name = "val"_c;
    cosh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    cosh_Float32x2.name = "cosh"_c;
    cosh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    cosh_Float32x2.parameters = cosh_Float32x2_args;
    Symbol::Resolved(&cosh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&cosh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// cosh with Float32x3
    cosh_Float32x3_arg.name = "val"_c;
    cosh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    cosh_Float32x3.name = "cosh"_c;
    cosh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    cosh_Float32x3.parameters = cosh_Float32x3_args;
    Symbol::Resolved(&cosh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cosh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// cosh with Float32x4
    cosh_Float32x4_arg.name = "val"_c;
    cosh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    cosh_Float32x4.name = "cosh"_c;
    cosh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    cosh_Float32x4.parameters = cosh_Float32x4_args;
    Symbol::Resolved(&cosh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&cosh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// cosh with Float16
    cosh_Float16_arg.name = "val"_c;
    cosh_Float16_arg.type = Type::FullType{ Float16Type.name };
    cosh_Float16.name = "cosh"_c;
    cosh_Float16.returnType = Type::FullType { Float16Type.name };
    cosh_Float16.parameters = cosh_Float16_args;
    Symbol::Resolved(&cosh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&cosh_Float16)->returnTypeSymbol = &Float16Type;

    /// cosh with Float16x2
    cosh_Float16x2_arg.name = "val"_c;
    cosh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    cosh_Float16x2.name = "cosh"_c;
    cosh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    cosh_Float16x2.parameters = cosh_Float16x2_args;
    Symbol::Resolved(&cosh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&cosh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// cosh with Float16x3
    cosh_Float16x3_arg.name = "val"_c;
    cosh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    cosh_Float16x3.name = "cosh"_c;
    cosh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    cosh_Float16x3.parameters = cosh_Float16x3_args;
    Symbol::Resolved(&cosh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cosh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// cosh with Float16x4
    cosh_Float16x4_arg.name = "val"_c;
    cosh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    cosh_Float16x4.name = "cosh"_c;
    cosh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    cosh_Float16x4.parameters = cosh_Float16x4_args;
    Symbol::Resolved(&cosh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&cosh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// exp with Float32
    exp_Float32_arg.name = "val"_c;
    exp_Float32_arg.type = Type::FullType{ Float32Type.name };
    exp_Float32.name = "exp"_c;
    exp_Float32.returnType = Type::FullType { Float32Type.name };
    exp_Float32.parameters = exp_Float32_args;
    Symbol::Resolved(&exp_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&exp_Float32)->returnTypeSymbol = &Float32Type;

    /// exp with Float32x2
    exp_Float32x2_arg.name = "val"_c;
    exp_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    exp_Float32x2.name = "exp"_c;
    exp_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    exp_Float32x2.parameters = exp_Float32x2_args;
    Symbol::Resolved(&exp_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&exp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// exp with Float32x3
    exp_Float32x3_arg.name = "val"_c;
    exp_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    exp_Float32x3.name = "exp"_c;
    exp_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    exp_Float32x3.parameters = exp_Float32x3_args;
    Symbol::Resolved(&exp_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&exp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// exp with Float32x4
    exp_Float32x4_arg.name = "val"_c;
    exp_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    exp_Float32x4.name = "exp"_c;
    exp_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    exp_Float32x4.parameters = exp_Float32x4_args;
    Symbol::Resolved(&exp_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&exp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// exp with Float16
    exp_Float16_arg.name = "val"_c;
    exp_Float16_arg.type = Type::FullType{ Float16Type.name };
    exp_Float16.name = "exp"_c;
    exp_Float16.returnType = Type::FullType { Float16Type.name };
    exp_Float16.parameters = exp_Float16_args;
    Symbol::Resolved(&exp_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&exp_Float16)->returnTypeSymbol = &Float16Type;

    /// exp with Float16x2
    exp_Float16x2_arg.name = "val"_c;
    exp_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    exp_Float16x2.name = "exp"_c;
    exp_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    exp_Float16x2.parameters = exp_Float16x2_args;
    Symbol::Resolved(&exp_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&exp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// exp with Float16x3
    exp_Float16x3_arg.name = "val"_c;
    exp_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    exp_Float16x3.name = "exp"_c;
    exp_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    exp_Float16x3.parameters = exp_Float16x3_args;
    Symbol::Resolved(&exp_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&exp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// exp with Float16x4
    exp_Float16x4_arg.name = "val"_c;
    exp_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    exp_Float16x4.name = "exp"_c;
    exp_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    exp_Float16x4.parameters = exp_Float16x4_args;
    Symbol::Resolved(&exp_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&exp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// exp2 with Float32
    exp2_Float32_arg.name = "val"_c;
    exp2_Float32_arg.type = Type::FullType{ Float32Type.name };
    exp2_Float32.name = "exp2"_c;
    exp2_Float32.returnType = Type::FullType { Float32Type.name };
    exp2_Float32.parameters = exp2_Float32_args;
    Symbol::Resolved(&exp2_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&exp2_Float32)->returnTypeSymbol = &Float32Type;

    /// exp2 with Float32x2
    exp2_Float32x2_arg.name = "val"_c;
    exp2_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    exp2_Float32x2.name = "exp2"_c;
    exp2_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    exp2_Float32x2.parameters = exp2_Float32x2_args;
    Symbol::Resolved(&exp2_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&exp2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// exp2 with Float32x3
    exp2_Float32x3_arg.name = "val"_c;
    exp2_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    exp2_Float32x3.name = "exp2"_c;
    exp2_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    exp2_Float32x3.parameters = exp2_Float32x3_args;
    Symbol::Resolved(&exp2_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&exp2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// exp2 with Float32x4
    exp2_Float32x4_arg.name = "val"_c;
    exp2_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    exp2_Float32x4.name = "exp2"_c;
    exp2_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    exp2_Float32x4.parameters = exp2_Float32x4_args;
    Symbol::Resolved(&exp2_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&exp2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// exp2 with Float16
    exp2_Float16_arg.name = "val"_c;
    exp2_Float16_arg.type = Type::FullType{ Float16Type.name };
    exp2_Float16.name = "exp2"_c;
    exp2_Float16.returnType = Type::FullType { Float16Type.name };
    exp2_Float16.parameters = exp2_Float16_args;
    Symbol::Resolved(&exp2_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&exp2_Float16)->returnTypeSymbol = &Float16Type;

    /// exp2 with Float16x2
    exp2_Float16x2_arg.name = "val"_c;
    exp2_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    exp2_Float16x2.name = "exp2"_c;
    exp2_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    exp2_Float16x2.parameters = exp2_Float16x2_args;
    Symbol::Resolved(&exp2_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&exp2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// exp2 with Float16x3
    exp2_Float16x3_arg.name = "val"_c;
    exp2_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    exp2_Float16x3.name = "exp2"_c;
    exp2_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    exp2_Float16x3.parameters = exp2_Float16x3_args;
    Symbol::Resolved(&exp2_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&exp2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// exp2 with Float16x4
    exp2_Float16x4_arg.name = "val"_c;
    exp2_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    exp2_Float16x4.name = "exp2"_c;
    exp2_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    exp2_Float16x4.parameters = exp2_Float16x4_args;
    Symbol::Resolved(&exp2_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&exp2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// invSqrt with Float32
    invSqrt_Float32_arg.name = "val"_c;
    invSqrt_Float32_arg.type = Type::FullType{ Float32Type.name };
    invSqrt_Float32.name = "invSqrt"_c;
    invSqrt_Float32.returnType = Type::FullType { Float32Type.name };
    invSqrt_Float32.parameters = invSqrt_Float32_args;
    Symbol::Resolved(&invSqrt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&invSqrt_Float32)->returnTypeSymbol = &Float32Type;

    /// invSqrt with Float32x2
    invSqrt_Float32x2_arg.name = "val"_c;
    invSqrt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    invSqrt_Float32x2.name = "invSqrt"_c;
    invSqrt_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    invSqrt_Float32x2.parameters = invSqrt_Float32x2_args;
    Symbol::Resolved(&invSqrt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&invSqrt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// invSqrt with Float32x3
    invSqrt_Float32x3_arg.name = "val"_c;
    invSqrt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    invSqrt_Float32x3.name = "invSqrt"_c;
    invSqrt_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    invSqrt_Float32x3.parameters = invSqrt_Float32x3_args;
    Symbol::Resolved(&invSqrt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&invSqrt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// invSqrt with Float32x4
    invSqrt_Float32x4_arg.name = "val"_c;
    invSqrt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    invSqrt_Float32x4.name = "invSqrt"_c;
    invSqrt_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    invSqrt_Float32x4.parameters = invSqrt_Float32x4_args;
    Symbol::Resolved(&invSqrt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&invSqrt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// invSqrt with Float16
    invSqrt_Float16_arg.name = "val"_c;
    invSqrt_Float16_arg.type = Type::FullType{ Float16Type.name };
    invSqrt_Float16.name = "invSqrt"_c;
    invSqrt_Float16.returnType = Type::FullType { Float16Type.name };
    invSqrt_Float16.parameters = invSqrt_Float16_args;
    Symbol::Resolved(&invSqrt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&invSqrt_Float16)->returnTypeSymbol = &Float16Type;

    /// invSqrt with Float16x2
    invSqrt_Float16x2_arg.name = "val"_c;
    invSqrt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    invSqrt_Float16x2.name = "invSqrt"_c;
    invSqrt_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    invSqrt_Float16x2.parameters = invSqrt_Float16x2_args;
    Symbol::Resolved(&invSqrt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&invSqrt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// invSqrt with Float16x3
    invSqrt_Float16x3_arg.name = "val"_c;
    invSqrt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    invSqrt_Float16x3.name = "invSqrt"_c;
    invSqrt_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    invSqrt_Float16x3.parameters = invSqrt_Float16x3_args;
    Symbol::Resolved(&invSqrt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&invSqrt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// invSqrt with Float16x4
    invSqrt_Float16x4_arg.name = "val"_c;
    invSqrt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    invSqrt_Float16x4.name = "invSqrt"_c;
    invSqrt_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    invSqrt_Float16x4.parameters = invSqrt_Float16x4_args;
    Symbol::Resolved(&invSqrt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&invSqrt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// log with Float32
    log_Float32_arg.name = "val"_c;
    log_Float32_arg.type = Type::FullType{ Float32Type.name };
    log_Float32.name = "log"_c;
    log_Float32.returnType = Type::FullType { Float32Type.name };
    log_Float32.parameters = log_Float32_args;
    Symbol::Resolved(&log_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&log_Float32)->returnTypeSymbol = &Float32Type;

    /// log with Float32x2
    log_Float32x2_arg.name = "val"_c;
    log_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    log_Float32x2.name = "log"_c;
    log_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    log_Float32x2.parameters = log_Float32x2_args;
    Symbol::Resolved(&log_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&log_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// log with Float32x3
    log_Float32x3_arg.name = "val"_c;
    log_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    log_Float32x3.name = "log"_c;
    log_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    log_Float32x3.parameters = log_Float32x3_args;
    Symbol::Resolved(&log_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&log_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// log with Float32x4
    log_Float32x4_arg.name = "val"_c;
    log_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    log_Float32x4.name = "log"_c;
    log_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    log_Float32x4.parameters = log_Float32x4_args;
    Symbol::Resolved(&log_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&log_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// log with Float16
    log_Float16_arg.name = "val"_c;
    log_Float16_arg.type = Type::FullType{ Float16Type.name };
    log_Float16.name = "log"_c;
    log_Float16.returnType = Type::FullType { Float16Type.name };
    log_Float16.parameters = log_Float16_args;
    Symbol::Resolved(&log_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&log_Float16)->returnTypeSymbol = &Float16Type;

    /// log with Float16x2
    log_Float16x2_arg.name = "val"_c;
    log_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    log_Float16x2.name = "log"_c;
    log_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    log_Float16x2.parameters = log_Float16x2_args;
    Symbol::Resolved(&log_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&log_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// log with Float16x3
    log_Float16x3_arg.name = "val"_c;
    log_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    log_Float16x3.name = "log"_c;
    log_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    log_Float16x3.parameters = log_Float16x3_args;
    Symbol::Resolved(&log_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&log_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// log with Float16x4
    log_Float16x4_arg.name = "val"_c;
    log_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    log_Float16x4.name = "log"_c;
    log_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    log_Float16x4.parameters = log_Float16x4_args;
    Symbol::Resolved(&log_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&log_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// log2 with Float32
    log2_Float32_arg.name = "val"_c;
    log2_Float32_arg.type = Type::FullType{ Float32Type.name };
    log2_Float32.name = "log2"_c;
    log2_Float32.returnType = Type::FullType { Float32Type.name };
    log2_Float32.parameters = log2_Float32_args;
    Symbol::Resolved(&log2_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&log2_Float32)->returnTypeSymbol = &Float32Type;

    /// log2 with Float32x2
    log2_Float32x2_arg.name = "val"_c;
    log2_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    log2_Float32x2.name = "log2"_c;
    log2_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    log2_Float32x2.parameters = log2_Float32x2_args;
    Symbol::Resolved(&log2_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&log2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// log2 with Float32x3
    log2_Float32x3_arg.name = "val"_c;
    log2_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    log2_Float32x3.name = "log2"_c;
    log2_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    log2_Float32x3.parameters = log2_Float32x3_args;
    Symbol::Resolved(&log2_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&log2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// log2 with Float32x4
    log2_Float32x4_arg.name = "val"_c;
    log2_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    log2_Float32x4.name = "log2"_c;
    log2_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    log2_Float32x4.parameters = log2_Float32x4_args;
    Symbol::Resolved(&log2_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&log2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// log2 with Float16
    log2_Float16_arg.name = "val"_c;
    log2_Float16_arg.type = Type::FullType{ Float16Type.name };
    log2_Float16.name = "log2"_c;
    log2_Float16.returnType = Type::FullType { Float16Type.name };
    log2_Float16.parameters = log2_Float16_args;
    Symbol::Resolved(&log2_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&log2_Float16)->returnTypeSymbol = &Float16Type;

    /// log2 with Float16x2
    log2_Float16x2_arg.name = "val"_c;
    log2_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    log2_Float16x2.name = "log2"_c;
    log2_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    log2_Float16x2.parameters = log2_Float16x2_args;
    Symbol::Resolved(&log2_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&log2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// log2 with Float16x3
    log2_Float16x3_arg.name = "val"_c;
    log2_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    log2_Float16x3.name = "log2"_c;
    log2_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    log2_Float16x3.parameters = log2_Float16x3_args;
    Symbol::Resolved(&log2_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&log2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// log2 with Float16x4
    log2_Float16x4_arg.name = "val"_c;
    log2_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    log2_Float16x4.name = "log2"_c;
    log2_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    log2_Float16x4.parameters = log2_Float16x4_args;
    Symbol::Resolved(&log2_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&log2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// sin with Float32
    sin_Float32_arg.name = "val"_c;
    sin_Float32_arg.type = Type::FullType{ Float32Type.name };
    sin_Float32.name = "sin"_c;
    sin_Float32.returnType = Type::FullType { Float32Type.name };
    sin_Float32.parameters = sin_Float32_args;
    Symbol::Resolved(&sin_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sin_Float32)->returnTypeSymbol = &Float32Type;

    /// sin with Float32x2
    sin_Float32x2_arg.name = "val"_c;
    sin_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sin_Float32x2.name = "sin"_c;
    sin_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    sin_Float32x2.parameters = sin_Float32x2_args;
    Symbol::Resolved(&sin_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sin_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// sin with Float32x3
    sin_Float32x3_arg.name = "val"_c;
    sin_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sin_Float32x3.name = "sin"_c;
    sin_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    sin_Float32x3.parameters = sin_Float32x3_args;
    Symbol::Resolved(&sin_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sin_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// sin with Float32x4
    sin_Float32x4_arg.name = "val"_c;
    sin_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sin_Float32x4.name = "sin"_c;
    sin_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    sin_Float32x4.parameters = sin_Float32x4_args;
    Symbol::Resolved(&sin_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sin_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// sin with Float16
    sin_Float16_arg.name = "val"_c;
    sin_Float16_arg.type = Type::FullType{ Float16Type.name };
    sin_Float16.name = "sin"_c;
    sin_Float16.returnType = Type::FullType { Float16Type.name };
    sin_Float16.parameters = sin_Float16_args;
    Symbol::Resolved(&sin_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sin_Float16)->returnTypeSymbol = &Float16Type;

    /// sin with Float16x2
    sin_Float16x2_arg.name = "val"_c;
    sin_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sin_Float16x2.name = "sin"_c;
    sin_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    sin_Float16x2.parameters = sin_Float16x2_args;
    Symbol::Resolved(&sin_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sin_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// sin with Float16x3
    sin_Float16x3_arg.name = "val"_c;
    sin_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sin_Float16x3.name = "sin"_c;
    sin_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    sin_Float16x3.parameters = sin_Float16x3_args;
    Symbol::Resolved(&sin_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sin_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// sin with Float16x4
    sin_Float16x4_arg.name = "val"_c;
    sin_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sin_Float16x4.name = "sin"_c;
    sin_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    sin_Float16x4.parameters = sin_Float16x4_args;
    Symbol::Resolved(&sin_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sin_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// sinh with Float32
    sinh_Float32_arg.name = "val"_c;
    sinh_Float32_arg.type = Type::FullType{ Float32Type.name };
    sinh_Float32.name = "sinh"_c;
    sinh_Float32.returnType = Type::FullType { Float32Type.name };
    sinh_Float32.parameters = sinh_Float32_args;
    Symbol::Resolved(&sinh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sinh_Float32)->returnTypeSymbol = &Float32Type;

    /// sinh with Float32x2
    sinh_Float32x2_arg.name = "val"_c;
    sinh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sinh_Float32x2.name = "sinh"_c;
    sinh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    sinh_Float32x2.parameters = sinh_Float32x2_args;
    Symbol::Resolved(&sinh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sinh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// sinh with Float32x3
    sinh_Float32x3_arg.name = "val"_c;
    sinh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sinh_Float32x3.name = "sinh"_c;
    sinh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    sinh_Float32x3.parameters = sinh_Float32x3_args;
    Symbol::Resolved(&sinh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sinh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// sinh with Float32x4
    sinh_Float32x4_arg.name = "val"_c;
    sinh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sinh_Float32x4.name = "sinh"_c;
    sinh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    sinh_Float32x4.parameters = sinh_Float32x4_args;
    Symbol::Resolved(&sinh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sinh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// sinh with Float16
    sinh_Float16_arg.name = "val"_c;
    sinh_Float16_arg.type = Type::FullType{ Float16Type.name };
    sinh_Float16.name = "sinh"_c;
    sinh_Float16.returnType = Type::FullType { Float16Type.name };
    sinh_Float16.parameters = sinh_Float16_args;
    Symbol::Resolved(&sinh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sinh_Float16)->returnTypeSymbol = &Float16Type;

    /// sinh with Float16x2
    sinh_Float16x2_arg.name = "val"_c;
    sinh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sinh_Float16x2.name = "sinh"_c;
    sinh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    sinh_Float16x2.parameters = sinh_Float16x2_args;
    Symbol::Resolved(&sinh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sinh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// sinh with Float16x3
    sinh_Float16x3_arg.name = "val"_c;
    sinh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sinh_Float16x3.name = "sinh"_c;
    sinh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    sinh_Float16x3.parameters = sinh_Float16x3_args;
    Symbol::Resolved(&sinh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sinh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// sinh with Float16x4
    sinh_Float16x4_arg.name = "val"_c;
    sinh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sinh_Float16x4.name = "sinh"_c;
    sinh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    sinh_Float16x4.parameters = sinh_Float16x4_args;
    Symbol::Resolved(&sinh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sinh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// sqrt with Float32
    sqrt_Float32_arg.name = "val"_c;
    sqrt_Float32_arg.type = Type::FullType{ Float32Type.name };
    sqrt_Float32.name = "sqrt"_c;
    sqrt_Float32.returnType = Type::FullType { Float32Type.name };
    sqrt_Float32.parameters = sqrt_Float32_args;
    Symbol::Resolved(&sqrt_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sqrt_Float32)->returnTypeSymbol = &Float32Type;

    /// sqrt with Float32x2
    sqrt_Float32x2_arg.name = "val"_c;
    sqrt_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sqrt_Float32x2.name = "sqrt"_c;
    sqrt_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    sqrt_Float32x2.parameters = sqrt_Float32x2_args;
    Symbol::Resolved(&sqrt_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sqrt_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// sqrt with Float32x3
    sqrt_Float32x3_arg.name = "val"_c;
    sqrt_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sqrt_Float32x3.name = "sqrt"_c;
    sqrt_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    sqrt_Float32x3.parameters = sqrt_Float32x3_args;
    Symbol::Resolved(&sqrt_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sqrt_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// sqrt with Float32x4
    sqrt_Float32x4_arg.name = "val"_c;
    sqrt_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sqrt_Float32x4.name = "sqrt"_c;
    sqrt_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    sqrt_Float32x4.parameters = sqrt_Float32x4_args;
    Symbol::Resolved(&sqrt_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sqrt_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// sqrt with Float16
    sqrt_Float16_arg.name = "val"_c;
    sqrt_Float16_arg.type = Type::FullType{ Float16Type.name };
    sqrt_Float16.name = "sqrt"_c;
    sqrt_Float16.returnType = Type::FullType { Float16Type.name };
    sqrt_Float16.parameters = sqrt_Float16_args;
    Symbol::Resolved(&sqrt_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sqrt_Float16)->returnTypeSymbol = &Float16Type;

    /// sqrt with Float16x2
    sqrt_Float16x2_arg.name = "val"_c;
    sqrt_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sqrt_Float16x2.name = "sqrt"_c;
    sqrt_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    sqrt_Float16x2.parameters = sqrt_Float16x2_args;
    Symbol::Resolved(&sqrt_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sqrt_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// sqrt with Float16x3
    sqrt_Float16x3_arg.name = "val"_c;
    sqrt_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sqrt_Float16x3.name = "sqrt"_c;
    sqrt_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    sqrt_Float16x3.parameters = sqrt_Float16x3_args;
    Symbol::Resolved(&sqrt_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sqrt_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// sqrt with Float16x4
    sqrt_Float16x4_arg.name = "val"_c;
    sqrt_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sqrt_Float16x4.name = "sqrt"_c;
    sqrt_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    sqrt_Float16x4.parameters = sqrt_Float16x4_args;
    Symbol::Resolved(&sqrt_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sqrt_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// tan with Float32
    tan_Float32_arg.name = "val"_c;
    tan_Float32_arg.type = Type::FullType{ Float32Type.name };
    tan_Float32.name = "tan"_c;
    tan_Float32.returnType = Type::FullType { Float32Type.name };
    tan_Float32.parameters = tan_Float32_args;
    Symbol::Resolved(&tan_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&tan_Float32)->returnTypeSymbol = &Float32Type;

    /// tan with Float32x2
    tan_Float32x2_arg.name = "val"_c;
    tan_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    tan_Float32x2.name = "tan"_c;
    tan_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    tan_Float32x2.parameters = tan_Float32x2_args;
    Symbol::Resolved(&tan_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&tan_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// tan with Float32x3
    tan_Float32x3_arg.name = "val"_c;
    tan_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    tan_Float32x3.name = "tan"_c;
    tan_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    tan_Float32x3.parameters = tan_Float32x3_args;
    Symbol::Resolved(&tan_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&tan_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// tan with Float32x4
    tan_Float32x4_arg.name = "val"_c;
    tan_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    tan_Float32x4.name = "tan"_c;
    tan_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    tan_Float32x4.parameters = tan_Float32x4_args;
    Symbol::Resolved(&tan_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&tan_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// tan with Float16
    tan_Float16_arg.name = "val"_c;
    tan_Float16_arg.type = Type::FullType{ Float16Type.name };
    tan_Float16.name = "tan"_c;
    tan_Float16.returnType = Type::FullType { Float16Type.name };
    tan_Float16.parameters = tan_Float16_args;
    Symbol::Resolved(&tan_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&tan_Float16)->returnTypeSymbol = &Float16Type;

    /// tan with Float16x2
    tan_Float16x2_arg.name = "val"_c;
    tan_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    tan_Float16x2.name = "tan"_c;
    tan_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    tan_Float16x2.parameters = tan_Float16x2_args;
    Symbol::Resolved(&tan_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&tan_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// tan with Float16x3
    tan_Float16x3_arg.name = "val"_c;
    tan_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    tan_Float16x3.name = "tan"_c;
    tan_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    tan_Float16x3.parameters = tan_Float16x3_args;
    Symbol::Resolved(&tan_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&tan_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// tan with Float16x4
    tan_Float16x4_arg.name = "val"_c;
    tan_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    tan_Float16x4.name = "tan"_c;
    tan_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    tan_Float16x4.parameters = tan_Float16x4_args;
    Symbol::Resolved(&tan_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&tan_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// tanh with Float32
    tanh_Float32_arg.name = "val"_c;
    tanh_Float32_arg.type = Type::FullType{ Float32Type.name };
    tanh_Float32.name = "tanh"_c;
    tanh_Float32.returnType = Type::FullType { Float32Type.name };
    tanh_Float32.parameters = tanh_Float32_args;
    Symbol::Resolved(&tanh_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&tanh_Float32)->returnTypeSymbol = &Float32Type;

    /// tanh with Float32x2
    tanh_Float32x2_arg.name = "val"_c;
    tanh_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    tanh_Float32x2.name = "tanh"_c;
    tanh_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    tanh_Float32x2.parameters = tanh_Float32x2_args;
    Symbol::Resolved(&tanh_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&tanh_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// tanh with Float32x3
    tanh_Float32x3_arg.name = "val"_c;
    tanh_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    tanh_Float32x3.name = "tanh"_c;
    tanh_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    tanh_Float32x3.parameters = tanh_Float32x3_args;
    Symbol::Resolved(&tanh_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&tanh_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// tanh with Float32x4
    tanh_Float32x4_arg.name = "val"_c;
    tanh_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    tanh_Float32x4.name = "tanh"_c;
    tanh_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    tanh_Float32x4.parameters = tanh_Float32x4_args;
    Symbol::Resolved(&tanh_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&tanh_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// tanh with Float16
    tanh_Float16_arg.name = "val"_c;
    tanh_Float16_arg.type = Type::FullType{ Float16Type.name };
    tanh_Float16.name = "tanh"_c;
    tanh_Float16.returnType = Type::FullType { Float16Type.name };
    tanh_Float16.parameters = tanh_Float16_args;
    Symbol::Resolved(&tanh_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&tanh_Float16)->returnTypeSymbol = &Float16Type;

    /// tanh with Float16x2
    tanh_Float16x2_arg.name = "val"_c;
    tanh_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    tanh_Float16x2.name = "tanh"_c;
    tanh_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    tanh_Float16x2.parameters = tanh_Float16x2_args;
    Symbol::Resolved(&tanh_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&tanh_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// tanh with Float16x3
    tanh_Float16x3_arg.name = "val"_c;
    tanh_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    tanh_Float16x3.name = "tanh"_c;
    tanh_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    tanh_Float16x3.parameters = tanh_Float16x3_args;
    Symbol::Resolved(&tanh_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&tanh_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// tanh with Float16x4
    tanh_Float16x4_arg.name = "val"_c;
    tanh_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    tanh_Float16x4.name = "tanh"_c;
    tanh_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    tanh_Float16x4.parameters = tanh_Float16x4_args;
    Symbol::Resolved(&tanh_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&tanh_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// tanh with Float32, Float32
    atan2_Float32_y.name = "y"_c;
    atan2_Float32_y.type = Type::FullType{ Float32Type.name };
    atan2_Float32_x.name = "x"_c;
    atan2_Float32_x.type = Type::FullType{ Float32Type.name };
    atan2_Float32.name = "tanh"_c;
    atan2_Float32.returnType = Type::FullType { Float32Type.name };
    atan2_Float32.parameters = atan2_Float32_args;
    Symbol::Resolved(&atan2_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan2_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&atan2_Float32)->returnTypeSymbol = &Float32Type;

    /// tanh with Float32x2, Float32x2
    atan2_Float32x2_y.name = "y"_c;
    atan2_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    atan2_Float32x2_x.name = "x"_c;
    atan2_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    atan2_Float32x2.name = "tanh"_c;
    atan2_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    atan2_Float32x2.parameters = atan2_Float32x2_args;
    Symbol::Resolved(&atan2_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan2_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&atan2_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// tanh with Float32x3, Float32x3
    atan2_Float32x3_y.name = "y"_c;
    atan2_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    atan2_Float32x3_x.name = "x"_c;
    atan2_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    atan2_Float32x3.name = "tanh"_c;
    atan2_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    atan2_Float32x3.parameters = atan2_Float32x3_args;
    Symbol::Resolved(&atan2_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan2_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&atan2_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// tanh with Float32x4, Float32x4
    atan2_Float32x4_y.name = "y"_c;
    atan2_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    atan2_Float32x4_x.name = "x"_c;
    atan2_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    atan2_Float32x4.name = "tanh"_c;
    atan2_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    atan2_Float32x4.parameters = atan2_Float32x4_args;
    Symbol::Resolved(&atan2_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan2_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&atan2_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// tanh with Float16, Float16
    atan2_Float16_y.name = "y"_c;
    atan2_Float16_y.type = Type::FullType{ Float16Type.name };
    atan2_Float16_x.name = "x"_c;
    atan2_Float16_x.type = Type::FullType{ Float16Type.name };
    atan2_Float16.name = "tanh"_c;
    atan2_Float16.returnType = Type::FullType { Float16Type.name };
    atan2_Float16.parameters = atan2_Float16_args;
    Symbol::Resolved(&atan2_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan2_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&atan2_Float16)->returnTypeSymbol = &Float16Type;

    /// tanh with Float16x2, Float16x2
    atan2_Float16x2_y.name = "y"_c;
    atan2_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    atan2_Float16x2_x.name = "x"_c;
    atan2_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    atan2_Float16x2.name = "tanh"_c;
    atan2_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    atan2_Float16x2.parameters = atan2_Float16x2_args;
    Symbol::Resolved(&atan2_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan2_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&atan2_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// tanh with Float16x3, Float16x3
    atan2_Float16x3_y.name = "y"_c;
    atan2_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    atan2_Float16x3_x.name = "x"_c;
    atan2_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    atan2_Float16x3.name = "tanh"_c;
    atan2_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    atan2_Float16x3.parameters = atan2_Float16x3_args;
    Symbol::Resolved(&atan2_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan2_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&atan2_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// tanh with Float16x4, Float16x4
    atan2_Float16x4_y.name = "y"_c;
    atan2_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    atan2_Float16x4_x.name = "x"_c;
    atan2_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    atan2_Float16x4.name = "tanh"_c;
    atan2_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    atan2_Float16x4.parameters = atan2_Float16x4_args;
    Symbol::Resolved(&atan2_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan2_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&atan2_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// pow with Float32, Float32
    pow_Float32_arg.name = "val"_c;
    pow_Float32_arg.type = Type::FullType{ Float32Type.name };
    pow_Float32_exp.name = "exponent"_c;
    pow_Float32_exp.type = Type::FullType{ Float32Type.name };
    pow_Float32.name = "pow"_c;
    pow_Float32.returnType = Type::FullType { Float32Type.name };
    pow_Float32.parameters = pow_Float32_args;
    Symbol::Resolved(&pow_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&pow_Float32_exp)->typeSymbol = &Float32Type;
    Symbol::Resolved(&pow_Float32)->returnTypeSymbol = &Float32Type;

    /// pow with Float32x2, Float32x2
    pow_Float32x2_arg.name = "val"_c;
    pow_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    pow_Float32x2_exp.name = "exponent"_c;
    pow_Float32x2_exp.type = Type::FullType{ Float32x2Type.name };
    pow_Float32x2.name = "pow"_c;
    pow_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    pow_Float32x2.parameters = pow_Float32x2_args;
    Symbol::Resolved(&pow_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&pow_Float32x2_exp)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&pow_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// pow with Float32x3, Float32x3
    pow_Float32x3_arg.name = "val"_c;
    pow_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    pow_Float32x3_exp.name = "exponent"_c;
    pow_Float32x3_exp.type = Type::FullType{ Float32x3Type.name };
    pow_Float32x3.name = "pow"_c;
    pow_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    pow_Float32x3.parameters = pow_Float32x3_args;
    Symbol::Resolved(&pow_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&pow_Float32x3_exp)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&pow_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// pow with Float32x4, Float32x4
    pow_Float32x4_arg.name = "val"_c;
    pow_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    pow_Float32x4_exp.name = "exponent"_c;
    pow_Float32x4_exp.type = Type::FullType{ Float32x4Type.name };
    pow_Float32x4.name = "pow"_c;
    pow_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    pow_Float32x4.parameters = pow_Float32x4_args;
    Symbol::Resolved(&pow_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&pow_Float32x4_exp)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&pow_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// pow with Float16, Float16
    pow_Float16_arg.name = "val"_c;
    pow_Float16_arg.type = Type::FullType{ Float16Type.name };
    pow_Float16_exp.name = "exponent"_c;
    pow_Float16_exp.type = Type::FullType{ Float16Type.name };
    pow_Float16.name = "pow"_c;
    pow_Float16.returnType = Type::FullType { Float16Type.name };
    pow_Float16.parameters = pow_Float16_args;
    Symbol::Resolved(&pow_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&pow_Float16_exp)->typeSymbol = &Float16Type;
    Symbol::Resolved(&pow_Float16)->returnTypeSymbol = &Float16Type;

    /// pow with Float16x2, Float16x2
    pow_Float16x2_arg.name = "val"_c;
    pow_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    pow_Float16x2_exp.name = "exponent"_c;
    pow_Float16x2_exp.type = Type::FullType{ Float16x2Type.name };
    pow_Float16x2.name = "pow"_c;
    pow_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    pow_Float16x2.parameters = pow_Float16x2_args;
    Symbol::Resolved(&pow_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&pow_Float16x2_exp)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&pow_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// pow with Float16x3, Float16x3
    pow_Float16x3_arg.name = "val"_c;
    pow_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    pow_Float16x3_exp.name = "exponent"_c;
    pow_Float16x3_exp.type = Type::FullType{ Float16x3Type.name };
    pow_Float16x3.name = "pow"_c;
    pow_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    pow_Float16x3.parameters = pow_Float16x3_args;
    Symbol::Resolved(&pow_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&pow_Float16x3_exp)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&pow_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// pow with Float16x4, Float16x4
    pow_Float16x4_arg.name = "val"_c;
    pow_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    pow_Float16x4_exp.name = "exponent"_c;
    pow_Float16x4_exp.type = Type::FullType{ Float16x4Type.name };
    pow_Float16x4.name = "pow"_c;
    pow_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    pow_Float16x4.parameters = pow_Float16x4_args;
    Symbol::Resolved(&pow_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&pow_Float16x4_exp)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&pow_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// mad with Float32, Float32, Float32
    mad_Float32_arg.name = "val"_c;
    mad_Float32_arg.type = Type::FullType{ Float32Type.name };
    mad_Float32_mul.name = "multiplier"_c;
    mad_Float32_mul.type = Type::FullType{ Float32Type.name };
    mad_Float32_add.name = "addend"_c;
    mad_Float32_add.type = Type::FullType{ Float32Type.name };
    mad_Float32.name = "mad"_c;
    mad_Float32.returnType = Type::FullType { Float32Type.name };
    mad_Float32.parameters = mad_Float32_args;
    Symbol::Resolved(&mad_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32_mul)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32_add)->typeSymbol = &Float32Type;
    Symbol::Resolved(&mad_Float32)->returnTypeSymbol = &Float32Type;

    /// mad with Float32x2, Float32x2, Float32x2
    mad_Float32x2_arg.name = "val"_c;
    mad_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2_mul.name = "multiplier"_c;
    mad_Float32x2_mul.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2_add.name = "addend"_c;
    mad_Float32x2_add.type = Type::FullType{ Float32x2Type.name };
    mad_Float32x2.name = "mad"_c;
    mad_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    mad_Float32x2.parameters = mad_Float32x2_args;
    Symbol::Resolved(&mad_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2_mul)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2_add)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&mad_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// mad with Float32x3, Float32x3, Float32x3
    mad_Float32x3_arg.name = "val"_c;
    mad_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3_mul.name = "multiplier"_c;
    mad_Float32x3_mul.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3_add.name = "addend"_c;
    mad_Float32x3_add.type = Type::FullType{ Float32x3Type.name };
    mad_Float32x3.name = "mad"_c;
    mad_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    mad_Float32x3.parameters = mad_Float32x3_args;
    Symbol::Resolved(&mad_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3_mul)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3_add)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&mad_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// mad with Float32x4, Float32x4, Float32x4
    mad_Float32x4_arg.name = "val"_c;
    mad_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4_mul.name = "multiplier"_c;
    mad_Float32x4_mul.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4_add.name = "addend"_c;
    mad_Float32x4_add.type = Type::FullType{ Float32x4Type.name };
    mad_Float32x4.name = "mad"_c;
    mad_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    mad_Float32x4.parameters = mad_Float32x4_args;
    Symbol::Resolved(&mad_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4_mul)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4_add)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&mad_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// mad with Float16, Float16, Float16
    mad_Float16_arg.name = "val"_c;
    mad_Float16_arg.type = Type::FullType{ Float16Type.name };
    mad_Float16_mul.name = "multiplier"_c;
    mad_Float16_mul.type = Type::FullType{ Float16Type.name };
    mad_Float16_add.name = "addend"_c;
    mad_Float16_add.type = Type::FullType{ Float16Type.name };
    mad_Float16.name = "mad"_c;
    mad_Float16.returnType = Type::FullType { Float16Type.name };
    mad_Float16.parameters = mad_Float16_args;
    Symbol::Resolved(&mad_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16_mul)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16_add)->typeSymbol = &Float16Type;
    Symbol::Resolved(&mad_Float16)->returnTypeSymbol = &Float16Type;

    /// mad with Float16x2, Float16x2, Float16x2
    mad_Float16x2_arg.name = "val"_c;
    mad_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2_mul.name = "multiplier"_c;
    mad_Float16x2_mul.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2_add.name = "addend"_c;
    mad_Float16x2_add.type = Type::FullType{ Float16x2Type.name };
    mad_Float16x2.name = "mad"_c;
    mad_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    mad_Float16x2.parameters = mad_Float16x2_args;
    Symbol::Resolved(&mad_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2_mul)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2_add)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&mad_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// mad with Float16x3, Float16x3, Float16x3
    mad_Float16x3_arg.name = "val"_c;
    mad_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3_mul.name = "multiplier"_c;
    mad_Float16x3_mul.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3_add.name = "addend"_c;
    mad_Float16x3_add.type = Type::FullType{ Float16x3Type.name };
    mad_Float16x3.name = "mad"_c;
    mad_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    mad_Float16x3.parameters = mad_Float16x3_args;
    Symbol::Resolved(&mad_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3_mul)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3_add)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&mad_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// mad with Float16x4, Float16x4, Float16x4
    mad_Float16x4_arg.name = "val"_c;
    mad_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4_mul.name = "multiplier"_c;
    mad_Float16x4_mul.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4_add.name = "addend"_c;
    mad_Float16x4_add.type = Type::FullType{ Float16x4Type.name };
    mad_Float16x4.name = "mad"_c;
    mad_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    mad_Float16x4.parameters = mad_Float16x4_args;
    Symbol::Resolved(&mad_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4_mul)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4_add)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&mad_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// mad with Int32, Int32, Int32
    mad_Int32_arg.name = "val"_c;
    mad_Int32_arg.type = Type::FullType{ Int32Type.name };
    mad_Int32_mul.name = "multiplier"_c;
    mad_Int32_mul.type = Type::FullType{ Int32Type.name };
    mad_Int32_add.name = "addend"_c;
    mad_Int32_add.type = Type::FullType{ Int32Type.name };
    mad_Int32.name = "mad"_c;
    mad_Int32.returnType = Type::FullType { Int32Type.name };
    mad_Int32.parameters = mad_Int32_args;
    Symbol::Resolved(&mad_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32_mul)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32_add)->typeSymbol = &Int32Type;
    Symbol::Resolved(&mad_Int32)->returnTypeSymbol = &Int32Type;

    /// mad with Int32x2, Int32x2, Int32x2
    mad_Int32x2_arg.name = "val"_c;
    mad_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2_mul.name = "multiplier"_c;
    mad_Int32x2_mul.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2_add.name = "addend"_c;
    mad_Int32x2_add.type = Type::FullType{ Int32x2Type.name };
    mad_Int32x2.name = "mad"_c;
    mad_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    mad_Int32x2.parameters = mad_Int32x2_args;
    Symbol::Resolved(&mad_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2_mul)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2_add)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&mad_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// mad with Int32x3, Int32x3, Int32x3
    mad_Int32x3_arg.name = "val"_c;
    mad_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3_mul.name = "multiplier"_c;
    mad_Int32x3_mul.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3_add.name = "addend"_c;
    mad_Int32x3_add.type = Type::FullType{ Int32x3Type.name };
    mad_Int32x3.name = "mad"_c;
    mad_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    mad_Int32x3.parameters = mad_Int32x3_args;
    Symbol::Resolved(&mad_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3_mul)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3_add)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&mad_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// mad with Int32x4, Int32x4, Int32x4
    mad_Int32x4_arg.name = "val"_c;
    mad_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4_mul.name = "multiplier"_c;
    mad_Int32x4_mul.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4_add.name = "addend"_c;
    mad_Int32x4_add.type = Type::FullType{ Int32x4Type.name };
    mad_Int32x4.name = "mad"_c;
    mad_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    mad_Int32x4.parameters = mad_Int32x4_args;
    Symbol::Resolved(&mad_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4_mul)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4_add)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&mad_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// mad with Int16, Int16, Int16
    mad_Int16_arg.name = "val"_c;
    mad_Int16_arg.type = Type::FullType{ Int16Type.name };
    mad_Int16_mul.name = "multiplier"_c;
    mad_Int16_mul.type = Type::FullType{ Int16Type.name };
    mad_Int16_add.name = "addend"_c;
    mad_Int16_add.type = Type::FullType{ Int16Type.name };
    mad_Int16.name = "mad"_c;
    mad_Int16.returnType = Type::FullType { Int16Type.name };
    mad_Int16.parameters = mad_Int16_args;
    Symbol::Resolved(&mad_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16_mul)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16_add)->typeSymbol = &Int16Type;
    Symbol::Resolved(&mad_Int16)->returnTypeSymbol = &Int16Type;

    /// mad with Int16x2, Int16x2, Int16x2
    mad_Int16x2_arg.name = "val"_c;
    mad_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2_mul.name = "multiplier"_c;
    mad_Int16x2_mul.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2_add.name = "addend"_c;
    mad_Int16x2_add.type = Type::FullType{ Int16x2Type.name };
    mad_Int16x2.name = "mad"_c;
    mad_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    mad_Int16x2.parameters = mad_Int16x2_args;
    Symbol::Resolved(&mad_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2_mul)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2_add)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&mad_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// mad with Int16x3, Int16x3, Int16x3
    mad_Int16x3_arg.name = "val"_c;
    mad_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3_mul.name = "multiplier"_c;
    mad_Int16x3_mul.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3_add.name = "addend"_c;
    mad_Int16x3_add.type = Type::FullType{ Int16x3Type.name };
    mad_Int16x3.name = "mad"_c;
    mad_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    mad_Int16x3.parameters = mad_Int16x3_args;
    Symbol::Resolved(&mad_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3_mul)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3_add)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&mad_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// mad with Int16x4, Int16x4, Int16x4
    mad_Int16x4_arg.name = "val"_c;
    mad_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4_mul.name = "multiplier"_c;
    mad_Int16x4_mul.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4_add.name = "addend"_c;
    mad_Int16x4_add.type = Type::FullType{ Int16x4Type.name };
    mad_Int16x4.name = "mad"_c;
    mad_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    mad_Int16x4.parameters = mad_Int16x4_args;
    Symbol::Resolved(&mad_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4_mul)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4_add)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&mad_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// mad with UInt32, UInt32, UInt32
    mad_UInt32_arg.name = "val"_c;
    mad_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    mad_UInt32_mul.name = "multiplier"_c;
    mad_UInt32_mul.type = Type::FullType{ UInt32Type.name };
    mad_UInt32_add.name = "addend"_c;
    mad_UInt32_add.type = Type::FullType{ UInt32Type.name };
    mad_UInt32.name = "mad"_c;
    mad_UInt32.returnType = Type::FullType { UInt32Type.name };
    mad_UInt32.parameters = mad_UInt32_args;
    Symbol::Resolved(&mad_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32_mul)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32_add)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&mad_UInt32)->returnTypeSymbol = &UInt32Type;

    /// mad with UInt32x2, UInt32x2, UInt32x2
    mad_UInt32x2_arg.name = "val"_c;
    mad_UInt32x2_arg.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2_mul.name = "multiplier"_c;
    mad_UInt32x2_mul.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2_add.name = "addend"_c;
    mad_UInt32x2_add.type = Type::FullType{ UInt32x2Type.name };
    mad_UInt32x2.name = "mad"_c;
    mad_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    mad_UInt32x2.parameters = mad_UInt32x2_args;
    Symbol::Resolved(&mad_UInt32x2_arg)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2_mul)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2_add)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&mad_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// mad with UInt32x3, UInt32x3, UInt32x3
    mad_UInt32x3_arg.name = "val"_c;
    mad_UInt32x3_arg.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3_mul.name = "multiplier"_c;
    mad_UInt32x3_mul.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3_add.name = "addend"_c;
    mad_UInt32x3_add.type = Type::FullType{ UInt32x3Type.name };
    mad_UInt32x3.name = "mad"_c;
    mad_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    mad_UInt32x3.parameters = mad_UInt32x3_args;
    Symbol::Resolved(&mad_UInt32x3_arg)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3_mul)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3_add)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&mad_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// mad with UInt32x4, UInt32x4, UInt32x4
    mad_UInt32x4_arg.name = "val"_c;
    mad_UInt32x4_arg.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4_mul.name = "multiplier"_c;
    mad_UInt32x4_mul.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4_add.name = "addend"_c;
    mad_UInt32x4_add.type = Type::FullType{ UInt32x4Type.name };
    mad_UInt32x4.name = "mad"_c;
    mad_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    mad_UInt32x4.parameters = mad_UInt32x4_args;
    Symbol::Resolved(&mad_UInt32x4_arg)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4_mul)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4_add)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&mad_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// mad with UInt16, UInt16, UInt16
    mad_UInt16_arg.name = "val"_c;
    mad_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    mad_UInt16_mul.name = "multiplier"_c;
    mad_UInt16_mul.type = Type::FullType{ UInt16Type.name };
    mad_UInt16_add.name = "addend"_c;
    mad_UInt16_add.type = Type::FullType{ UInt16Type.name };
    mad_UInt16.name = "mad"_c;
    mad_UInt16.returnType = Type::FullType { UInt16Type.name };
    mad_UInt16.parameters = mad_UInt16_args;
    Symbol::Resolved(&mad_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16_mul)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16_add)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&mad_UInt16)->returnTypeSymbol = &UInt16Type;

    /// mad with UInt16x2, UInt16x2, UInt16x2
    mad_UInt16x2_arg.name = "val"_c;
    mad_UInt16x2_arg.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2_mul.name = "multiplier"_c;
    mad_UInt16x2_mul.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2_add.name = "addend"_c;
    mad_UInt16x2_add.type = Type::FullType{ UInt16x2Type.name };
    mad_UInt16x2.name = "mad"_c;
    mad_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    mad_UInt16x2.parameters = mad_UInt16x2_args;
    Symbol::Resolved(&mad_UInt16x2_arg)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2_mul)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2_add)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&mad_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// mad with UInt16x3, UInt16x3, UInt16x3
    mad_UInt16x3_arg.name = "val"_c;
    mad_UInt16x3_arg.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3_mul.name = "multiplier"_c;
    mad_UInt16x3_mul.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3_add.name = "addend"_c;
    mad_UInt16x3_add.type = Type::FullType{ UInt16x3Type.name };
    mad_UInt16x3.name = "mad"_c;
    mad_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    mad_UInt16x3.parameters = mad_UInt16x3_args;
    Symbol::Resolved(&mad_UInt16x3_arg)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3_mul)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3_add)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&mad_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// mad with UInt16x4, UInt16x4, UInt16x4
    mad_UInt16x4_arg.name = "val"_c;
    mad_UInt16x4_arg.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4_mul.name = "multiplier"_c;
    mad_UInt16x4_mul.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4_add.name = "addend"_c;
    mad_UInt16x4_add.type = Type::FullType{ UInt16x4Type.name };
    mad_UInt16x4.name = "mad"_c;
    mad_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    mad_UInt16x4.parameters = mad_UInt16x4_args;
    Symbol::Resolved(&mad_UInt16x4_arg)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4_mul)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4_add)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&mad_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// dot with Float32x2, Float32x2
    dot_Float32x2_x.name = "x"_c;
    dot_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    dot_Float32x2_y.name = "y"_c;
    dot_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    dot_Float32x2.name = "dot"_c;
    dot_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    dot_Float32x2.parameters = dot_Float32x2_args;
    Symbol::Resolved(&dot_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&dot_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&dot_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// dot with Float32x3, Float32x3
    dot_Float32x3_x.name = "x"_c;
    dot_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    dot_Float32x3_y.name = "y"_c;
    dot_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    dot_Float32x3.name = "dot"_c;
    dot_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    dot_Float32x3.parameters = dot_Float32x3_args;
    Symbol::Resolved(&dot_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&dot_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&dot_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// dot with Float32x4, Float32x4
    dot_Float32x4_x.name = "x"_c;
    dot_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    dot_Float32x4_y.name = "y"_c;
    dot_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    dot_Float32x4.name = "dot"_c;
    dot_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    dot_Float32x4.parameters = dot_Float32x4_args;
    Symbol::Resolved(&dot_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&dot_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&dot_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// dot with Float16x2, Float16x2
    dot_Float16x2_x.name = "x"_c;
    dot_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    dot_Float16x2_y.name = "y"_c;
    dot_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    dot_Float16x2.name = "dot"_c;
    dot_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    dot_Float16x2.parameters = dot_Float16x2_args;
    Symbol::Resolved(&dot_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&dot_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&dot_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// dot with Float16x3, Float16x3
    dot_Float16x3_x.name = "x"_c;
    dot_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    dot_Float16x3_y.name = "y"_c;
    dot_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    dot_Float16x3.name = "dot"_c;
    dot_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    dot_Float16x3.parameters = dot_Float16x3_args;
    Symbol::Resolved(&dot_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&dot_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&dot_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// dot with Float16x4, Float16x4
    dot_Float16x4_x.name = "x"_c;
    dot_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    dot_Float16x4_y.name = "y"_c;
    dot_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    dot_Float16x4.name = "dot"_c;
    dot_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    dot_Float16x4.parameters = dot_Float16x4_args;
    Symbol::Resolved(&dot_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&dot_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&dot_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// reflect with Float32x2, Float32x2
    reflect_Float32x2_incident.name = "incident"_c;
    reflect_Float32x2_incident.type = Type::FullType{ Float32x2Type.name };
    reflect_Float32x2_normal.name = "normal"_c;
    reflect_Float32x2_normal.type = Type::FullType{ Float32x2Type.name };
    reflect_Float32x2.name = "reflect"_c;
    reflect_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    reflect_Float32x2.parameters = reflect_Float32x2_args;
    Symbol::Resolved(&reflect_Float32x2_incident)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&reflect_Float32x2_normal)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&reflect_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// reflect with Float32x3, Float32x3
    reflect_Float32x3_incident.name = "incident"_c;
    reflect_Float32x3_incident.type = Type::FullType{ Float32x3Type.name };
    reflect_Float32x3_normal.name = "normal"_c;
    reflect_Float32x3_normal.type = Type::FullType{ Float32x3Type.name };
    reflect_Float32x3.name = "reflect"_c;
    reflect_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    reflect_Float32x3.parameters = reflect_Float32x3_args;
    Symbol::Resolved(&reflect_Float32x3_incident)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&reflect_Float32x3_normal)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&reflect_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// reflect with Float32x4, Float32x4
    reflect_Float32x4_incident.name = "incident"_c;
    reflect_Float32x4_incident.type = Type::FullType{ Float32x4Type.name };
    reflect_Float32x4_normal.name = "normal"_c;
    reflect_Float32x4_normal.type = Type::FullType{ Float32x4Type.name };
    reflect_Float32x4.name = "reflect"_c;
    reflect_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    reflect_Float32x4.parameters = reflect_Float32x4_args;
    Symbol::Resolved(&reflect_Float32x4_incident)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&reflect_Float32x4_normal)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&reflect_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// reflect with Float16x2, Float16x2
    reflect_Float16x2_incident.name = "incident"_c;
    reflect_Float16x2_incident.type = Type::FullType{ Float16x2Type.name };
    reflect_Float16x2_normal.name = "normal"_c;
    reflect_Float16x2_normal.type = Type::FullType{ Float16x2Type.name };
    reflect_Float16x2.name = "reflect"_c;
    reflect_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    reflect_Float16x2.parameters = reflect_Float16x2_args;
    Symbol::Resolved(&reflect_Float16x2_incident)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&reflect_Float16x2_normal)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&reflect_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// reflect with Float16x3, Float16x3
    reflect_Float16x3_incident.name = "incident"_c;
    reflect_Float16x3_incident.type = Type::FullType{ Float16x3Type.name };
    reflect_Float16x3_normal.name = "normal"_c;
    reflect_Float16x3_normal.type = Type::FullType{ Float16x3Type.name };
    reflect_Float16x3.name = "reflect"_c;
    reflect_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    reflect_Float16x3.parameters = reflect_Float16x3_args;
    Symbol::Resolved(&reflect_Float16x3_incident)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&reflect_Float16x3_normal)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&reflect_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// reflect with Float16x4, Float16x4
    reflect_Float16x4_incident.name = "incident"_c;
    reflect_Float16x4_incident.type = Type::FullType{ Float16x4Type.name };
    reflect_Float16x4_normal.name = "normal"_c;
    reflect_Float16x4_normal.type = Type::FullType{ Float16x4Type.name };
    reflect_Float16x4.name = "reflect"_c;
    reflect_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    reflect_Float16x4.parameters = reflect_Float16x4_args;
    Symbol::Resolved(&reflect_Float16x4_incident)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&reflect_Float16x4_normal)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&reflect_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// refract with Float32x2, Float32x2, Float32x2
    refract_Float32x2_incident.name = "incident"_c;
    refract_Float32x2_incident.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2_normal.name = "normal"_c;
    refract_Float32x2_normal.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2_ior.name = "ior"_c;
    refract_Float32x2_ior.type = Type::FullType{ Float32x2Type.name };
    refract_Float32x2.name = "refract"_c;
    refract_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    refract_Float32x2.parameters = refract_Float32x2_args;
    Symbol::Resolved(&refract_Float32x2_incident)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2_normal)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2_ior)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&refract_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// refract with Float32x3, Float32x3, Float32x3
    refract_Float32x3_incident.name = "incident"_c;
    refract_Float32x3_incident.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3_normal.name = "normal"_c;
    refract_Float32x3_normal.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3_ior.name = "ior"_c;
    refract_Float32x3_ior.type = Type::FullType{ Float32x3Type.name };
    refract_Float32x3.name = "refract"_c;
    refract_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    refract_Float32x3.parameters = refract_Float32x3_args;
    Symbol::Resolved(&refract_Float32x3_incident)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3_normal)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3_ior)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&refract_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// refract with Float32x4, Float32x4, Float32x4
    refract_Float32x4_incident.name = "incident"_c;
    refract_Float32x4_incident.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4_normal.name = "normal"_c;
    refract_Float32x4_normal.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4_ior.name = "ior"_c;
    refract_Float32x4_ior.type = Type::FullType{ Float32x4Type.name };
    refract_Float32x4.name = "refract"_c;
    refract_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    refract_Float32x4.parameters = refract_Float32x4_args;
    Symbol::Resolved(&refract_Float32x4_incident)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4_normal)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4_ior)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&refract_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// refract with Float16x2, Float16x2, Float16x2
    refract_Float16x2_incident.name = "incident"_c;
    refract_Float16x2_incident.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2_normal.name = "normal"_c;
    refract_Float16x2_normal.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2_ior.name = "ior"_c;
    refract_Float16x2_ior.type = Type::FullType{ Float16x2Type.name };
    refract_Float16x2.name = "refract"_c;
    refract_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    refract_Float16x2.parameters = refract_Float16x2_args;
    Symbol::Resolved(&refract_Float16x2_incident)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2_normal)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2_ior)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&refract_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// refract with Float16x3, Float16x3, Float16x3
    refract_Float16x3_incident.name = "incident"_c;
    refract_Float16x3_incident.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3_normal.name = "normal"_c;
    refract_Float16x3_normal.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3_ior.name = "ior"_c;
    refract_Float16x3_ior.type = Type::FullType{ Float16x3Type.name };
    refract_Float16x3.name = "refract"_c;
    refract_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    refract_Float16x3.parameters = refract_Float16x3_args;
    Symbol::Resolved(&refract_Float16x3_incident)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3_normal)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3_ior)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&refract_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// refract with Float16x4, Float16x4, Float16x4
    refract_Float16x4_incident.name = "incident"_c;
    refract_Float16x4_incident.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4_normal.name = "normal"_c;
    refract_Float16x4_normal.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4_ior.name = "ior"_c;
    refract_Float16x4_ior.type = Type::FullType{ Float16x4Type.name };
    refract_Float16x4.name = "refract"_c;
    refract_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    refract_Float16x4.parameters = refract_Float16x4_args;
    Symbol::Resolved(&refract_Float16x4_incident)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4_normal)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4_ior)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&refract_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// cross with Float32x3, Float32x3
    cross_Float32x3_v0.name = "v0"_c;
    cross_Float32x3_v0.type = Type::FullType{ Float32x3Type.name };
    cross_Float32x3_v1.name = "v1"_c;
    cross_Float32x3_v1.type = Type::FullType{ Float32x3Type.name };
    cross_Float32x3.name = "cross"_c;
    cross_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    cross_Float32x3.parameters = cross_Float32x3_args;
    Symbol::Resolved(&cross_Float32x3_v0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cross_Float32x3_v1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&cross_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// cross with Float16x3, Float16x3
    cross_Float16x3_v0.name = "v0"_c;
    cross_Float16x3_v0.type = Type::FullType{ Float16x3Type.name };
    cross_Float16x3_v1.name = "v1"_c;
    cross_Float16x3_v1.type = Type::FullType{ Float16x3Type.name };
    cross_Float16x3.name = "cross"_c;
    cross_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    cross_Float16x3.parameters = cross_Float16x3_args;
    Symbol::Resolved(&cross_Float16x3_v0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cross_Float16x3_v1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&cross_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// cross with Float32x2
    length_Float32x2_arg.name = "val"_c;
    length_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    length_Float32x2.name = "cross"_c;
    length_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    length_Float32x2.parameters = length_Float32x2_args;
    Symbol::Resolved(&length_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&length_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// cross with Float32x3
    length_Float32x3_arg.name = "val"_c;
    length_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    length_Float32x3.name = "cross"_c;
    length_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    length_Float32x3.parameters = length_Float32x3_args;
    Symbol::Resolved(&length_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&length_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// cross with Float32x4
    length_Float32x4_arg.name = "val"_c;
    length_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    length_Float32x4.name = "cross"_c;
    length_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    length_Float32x4.parameters = length_Float32x4_args;
    Symbol::Resolved(&length_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&length_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// cross with Float16x2
    length_Float16x2_arg.name = "val"_c;
    length_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    length_Float16x2.name = "cross"_c;
    length_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    length_Float16x2.parameters = length_Float16x2_args;
    Symbol::Resolved(&length_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&length_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// cross with Float16x3
    length_Float16x3_arg.name = "val"_c;
    length_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    length_Float16x3.name = "cross"_c;
    length_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    length_Float16x3.parameters = length_Float16x3_args;
    Symbol::Resolved(&length_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&length_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// cross with Float16x4
    length_Float16x4_arg.name = "val"_c;
    length_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    length_Float16x4.name = "cross"_c;
    length_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    length_Float16x4.parameters = length_Float16x4_args;
    Symbol::Resolved(&length_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&length_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// cross with Float32x2
    normalize_Float32x2_arg.name = "val"_c;
    normalize_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    normalize_Float32x2.name = "cross"_c;
    normalize_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    normalize_Float32x2.parameters = normalize_Float32x2_args;
    Symbol::Resolved(&normalize_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&normalize_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// cross with Float32x3
    normalize_Float32x3_arg.name = "val"_c;
    normalize_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    normalize_Float32x3.name = "cross"_c;
    normalize_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    normalize_Float32x3.parameters = normalize_Float32x3_args;
    Symbol::Resolved(&normalize_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&normalize_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// cross with Float32x4
    normalize_Float32x4_arg.name = "val"_c;
    normalize_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    normalize_Float32x4.name = "cross"_c;
    normalize_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    normalize_Float32x4.parameters = normalize_Float32x4_args;
    Symbol::Resolved(&normalize_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&normalize_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// cross with Float16x2
    normalize_Float16x2_arg.name = "val"_c;
    normalize_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    normalize_Float16x2.name = "cross"_c;
    normalize_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    normalize_Float16x2.parameters = normalize_Float16x2_args;
    Symbol::Resolved(&normalize_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&normalize_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// cross with Float16x3
    normalize_Float16x3_arg.name = "val"_c;
    normalize_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    normalize_Float16x3.name = "cross"_c;
    normalize_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    normalize_Float16x3.parameters = normalize_Float16x3_args;
    Symbol::Resolved(&normalize_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&normalize_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// cross with Float16x4
    normalize_Float16x4_arg.name = "val"_c;
    normalize_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    normalize_Float16x4.name = "cross"_c;
    normalize_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    normalize_Float16x4.parameters = normalize_Float16x4_args;
    Symbol::Resolved(&normalize_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&normalize_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// distance with Float32x2, Float32x2
    distance_Float32x2_p0.name = "p0"_c;
    distance_Float32x2_p0.type = Type::FullType{ Float32x2Type.name };
    distance_Float32x2_p1.name = "p1"_c;
    distance_Float32x2_p1.type = Type::FullType{ Float32x2Type.name };
    distance_Float32x2.name = "distance"_c;
    distance_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    distance_Float32x2.parameters = distance_Float32x2_args;
    Symbol::Resolved(&distance_Float32x2_p0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&distance_Float32x2_p1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&distance_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// distance with Float32x3, Float32x3
    distance_Float32x3_p0.name = "p0"_c;
    distance_Float32x3_p0.type = Type::FullType{ Float32x3Type.name };
    distance_Float32x3_p1.name = "p1"_c;
    distance_Float32x3_p1.type = Type::FullType{ Float32x3Type.name };
    distance_Float32x3.name = "distance"_c;
    distance_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    distance_Float32x3.parameters = distance_Float32x3_args;
    Symbol::Resolved(&distance_Float32x3_p0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&distance_Float32x3_p1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&distance_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// distance with Float32x4, Float32x4
    distance_Float32x4_p0.name = "p0"_c;
    distance_Float32x4_p0.type = Type::FullType{ Float32x4Type.name };
    distance_Float32x4_p1.name = "p1"_c;
    distance_Float32x4_p1.type = Type::FullType{ Float32x4Type.name };
    distance_Float32x4.name = "distance"_c;
    distance_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    distance_Float32x4.parameters = distance_Float32x4_args;
    Symbol::Resolved(&distance_Float32x4_p0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&distance_Float32x4_p1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&distance_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// distance with Float16x2, Float16x2
    distance_Float16x2_p0.name = "p0"_c;
    distance_Float16x2_p0.type = Type::FullType{ Float16x2Type.name };
    distance_Float16x2_p1.name = "p1"_c;
    distance_Float16x2_p1.type = Type::FullType{ Float16x2Type.name };
    distance_Float16x2.name = "distance"_c;
    distance_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    distance_Float16x2.parameters = distance_Float16x2_args;
    Symbol::Resolved(&distance_Float16x2_p0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&distance_Float16x2_p1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&distance_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// distance with Float16x3, Float16x3
    distance_Float16x3_p0.name = "p0"_c;
    distance_Float16x3_p0.type = Type::FullType{ Float16x3Type.name };
    distance_Float16x3_p1.name = "p1"_c;
    distance_Float16x3_p1.type = Type::FullType{ Float16x3Type.name };
    distance_Float16x3.name = "distance"_c;
    distance_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    distance_Float16x3.parameters = distance_Float16x3_args;
    Symbol::Resolved(&distance_Float16x3_p0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&distance_Float16x3_p1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&distance_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// distance with Float16x4, Float16x4
    distance_Float16x4_p0.name = "p0"_c;
    distance_Float16x4_p0.type = Type::FullType{ Float16x4Type.name };
    distance_Float16x4_p1.name = "p1"_c;
    distance_Float16x4_p1.type = Type::FullType{ Float16x4Type.name };
    distance_Float16x4.name = "distance"_c;
    distance_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    distance_Float16x4.parameters = distance_Float16x4_args;
    Symbol::Resolved(&distance_Float16x4_p0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&distance_Float16x4_p1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&distance_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// min with Float32, Float32
    min_Float32_x.name = "x"_c;
    min_Float32_x.type = Type::FullType{ Float32Type.name };
    min_Float32_y.name = "y"_c;
    min_Float32_y.type = Type::FullType{ Float32Type.name };
    min_Float32.name = "min"_c;
    min_Float32.returnType = Type::FullType { Float32Type.name };
    min_Float32.parameters = min_Float32_args;
    Symbol::Resolved(&min_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&min_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&min_Float32)->returnTypeSymbol = &Float32Type;

    /// min with Float32x2, Float32x2
    min_Float32x2_x.name = "x"_c;
    min_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    min_Float32x2_y.name = "y"_c;
    min_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    min_Float32x2.name = "min"_c;
    min_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    min_Float32x2.parameters = min_Float32x2_args;
    Symbol::Resolved(&min_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&min_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&min_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// min with Float32x3, Float32x3
    min_Float32x3_x.name = "x"_c;
    min_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    min_Float32x3_y.name = "y"_c;
    min_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    min_Float32x3.name = "min"_c;
    min_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    min_Float32x3.parameters = min_Float32x3_args;
    Symbol::Resolved(&min_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&min_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&min_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// min with Float32x4, Float32x4
    min_Float32x4_x.name = "x"_c;
    min_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    min_Float32x4_y.name = "y"_c;
    min_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    min_Float32x4.name = "min"_c;
    min_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    min_Float32x4.parameters = min_Float32x4_args;
    Symbol::Resolved(&min_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&min_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&min_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// min with Float16, Float16
    min_Float16_x.name = "x"_c;
    min_Float16_x.type = Type::FullType{ Float16Type.name };
    min_Float16_y.name = "y"_c;
    min_Float16_y.type = Type::FullType{ Float16Type.name };
    min_Float16.name = "min"_c;
    min_Float16.returnType = Type::FullType { Float16Type.name };
    min_Float16.parameters = min_Float16_args;
    Symbol::Resolved(&min_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&min_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&min_Float16)->returnTypeSymbol = &Float16Type;

    /// min with Float16x2, Float16x2
    min_Float16x2_x.name = "x"_c;
    min_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    min_Float16x2_y.name = "y"_c;
    min_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    min_Float16x2.name = "min"_c;
    min_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    min_Float16x2.parameters = min_Float16x2_args;
    Symbol::Resolved(&min_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&min_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&min_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// min with Float16x3, Float16x3
    min_Float16x3_x.name = "x"_c;
    min_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    min_Float16x3_y.name = "y"_c;
    min_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    min_Float16x3.name = "min"_c;
    min_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    min_Float16x3.parameters = min_Float16x3_args;
    Symbol::Resolved(&min_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&min_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&min_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// min with Float16x4, Float16x4
    min_Float16x4_x.name = "x"_c;
    min_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    min_Float16x4_y.name = "y"_c;
    min_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    min_Float16x4.name = "min"_c;
    min_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    min_Float16x4.parameters = min_Float16x4_args;
    Symbol::Resolved(&min_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&min_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&min_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// min with Int32, Int32
    min_Int32_x.name = "x"_c;
    min_Int32_x.type = Type::FullType{ Int32Type.name };
    min_Int32_y.name = "y"_c;
    min_Int32_y.type = Type::FullType{ Int32Type.name };
    min_Int32.name = "min"_c;
    min_Int32.returnType = Type::FullType { Int32Type.name };
    min_Int32.parameters = min_Int32_args;
    Symbol::Resolved(&min_Int32_x)->typeSymbol = &Int32Type;
    Symbol::Resolved(&min_Int32_y)->typeSymbol = &Int32Type;
    Symbol::Resolved(&min_Int32)->returnTypeSymbol = &Int32Type;

    /// min with Int32x2, Int32x2
    min_Int32x2_x.name = "x"_c;
    min_Int32x2_x.type = Type::FullType{ Int32x2Type.name };
    min_Int32x2_y.name = "y"_c;
    min_Int32x2_y.type = Type::FullType{ Int32x2Type.name };
    min_Int32x2.name = "min"_c;
    min_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    min_Int32x2.parameters = min_Int32x2_args;
    Symbol::Resolved(&min_Int32x2_x)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&min_Int32x2_y)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&min_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// min with Int32x3, Int32x3
    min_Int32x3_x.name = "x"_c;
    min_Int32x3_x.type = Type::FullType{ Int32x3Type.name };
    min_Int32x3_y.name = "y"_c;
    min_Int32x3_y.type = Type::FullType{ Int32x3Type.name };
    min_Int32x3.name = "min"_c;
    min_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    min_Int32x3.parameters = min_Int32x3_args;
    Symbol::Resolved(&min_Int32x3_x)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&min_Int32x3_y)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&min_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// min with Int32x4, Int32x4
    min_Int32x4_x.name = "x"_c;
    min_Int32x4_x.type = Type::FullType{ Int32x4Type.name };
    min_Int32x4_y.name = "y"_c;
    min_Int32x4_y.type = Type::FullType{ Int32x4Type.name };
    min_Int32x4.name = "min"_c;
    min_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    min_Int32x4.parameters = min_Int32x4_args;
    Symbol::Resolved(&min_Int32x4_x)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&min_Int32x4_y)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&min_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// min with Int16, Int16
    min_Int16_x.name = "x"_c;
    min_Int16_x.type = Type::FullType{ Int16Type.name };
    min_Int16_y.name = "y"_c;
    min_Int16_y.type = Type::FullType{ Int16Type.name };
    min_Int16.name = "min"_c;
    min_Int16.returnType = Type::FullType { Int16Type.name };
    min_Int16.parameters = min_Int16_args;
    Symbol::Resolved(&min_Int16_x)->typeSymbol = &Int16Type;
    Symbol::Resolved(&min_Int16_y)->typeSymbol = &Int16Type;
    Symbol::Resolved(&min_Int16)->returnTypeSymbol = &Int16Type;

    /// min with Int16x2, Int16x2
    min_Int16x2_x.name = "x"_c;
    min_Int16x2_x.type = Type::FullType{ Int16x2Type.name };
    min_Int16x2_y.name = "y"_c;
    min_Int16x2_y.type = Type::FullType{ Int16x2Type.name };
    min_Int16x2.name = "min"_c;
    min_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    min_Int16x2.parameters = min_Int16x2_args;
    Symbol::Resolved(&min_Int16x2_x)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&min_Int16x2_y)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&min_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// min with Int16x3, Int16x3
    min_Int16x3_x.name = "x"_c;
    min_Int16x3_x.type = Type::FullType{ Int16x3Type.name };
    min_Int16x3_y.name = "y"_c;
    min_Int16x3_y.type = Type::FullType{ Int16x3Type.name };
    min_Int16x3.name = "min"_c;
    min_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    min_Int16x3.parameters = min_Int16x3_args;
    Symbol::Resolved(&min_Int16x3_x)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&min_Int16x3_y)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&min_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// min with Int16x4, Int16x4
    min_Int16x4_x.name = "x"_c;
    min_Int16x4_x.type = Type::FullType{ Int16x4Type.name };
    min_Int16x4_y.name = "y"_c;
    min_Int16x4_y.type = Type::FullType{ Int16x4Type.name };
    min_Int16x4.name = "min"_c;
    min_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    min_Int16x4.parameters = min_Int16x4_args;
    Symbol::Resolved(&min_Int16x4_x)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&min_Int16x4_y)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&min_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// min with UInt32, UInt32
    min_UInt32_x.name = "x"_c;
    min_UInt32_x.type = Type::FullType{ UInt32Type.name };
    min_UInt32_y.name = "y"_c;
    min_UInt32_y.type = Type::FullType{ UInt32Type.name };
    min_UInt32.name = "min"_c;
    min_UInt32.returnType = Type::FullType { UInt32Type.name };
    min_UInt32.parameters = min_UInt32_args;
    Symbol::Resolved(&min_UInt32_x)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&min_UInt32_y)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&min_UInt32)->returnTypeSymbol = &UInt32Type;

    /// min with UInt32x2, UInt32x2
    min_UInt32x2_x.name = "x"_c;
    min_UInt32x2_x.type = Type::FullType{ UInt32x2Type.name };
    min_UInt32x2_y.name = "y"_c;
    min_UInt32x2_y.type = Type::FullType{ UInt32x2Type.name };
    min_UInt32x2.name = "min"_c;
    min_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    min_UInt32x2.parameters = min_UInt32x2_args;
    Symbol::Resolved(&min_UInt32x2_x)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&min_UInt32x2_y)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&min_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// min with UInt32x3, UInt32x3
    min_UInt32x3_x.name = "x"_c;
    min_UInt32x3_x.type = Type::FullType{ UInt32x3Type.name };
    min_UInt32x3_y.name = "y"_c;
    min_UInt32x3_y.type = Type::FullType{ UInt32x3Type.name };
    min_UInt32x3.name = "min"_c;
    min_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    min_UInt32x3.parameters = min_UInt32x3_args;
    Symbol::Resolved(&min_UInt32x3_x)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&min_UInt32x3_y)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&min_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// min with UInt32x4, UInt32x4
    min_UInt32x4_x.name = "x"_c;
    min_UInt32x4_x.type = Type::FullType{ UInt32x4Type.name };
    min_UInt32x4_y.name = "y"_c;
    min_UInt32x4_y.type = Type::FullType{ UInt32x4Type.name };
    min_UInt32x4.name = "min"_c;
    min_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    min_UInt32x4.parameters = min_UInt32x4_args;
    Symbol::Resolved(&min_UInt32x4_x)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&min_UInt32x4_y)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&min_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// min with UInt16, UInt16
    min_UInt16_x.name = "x"_c;
    min_UInt16_x.type = Type::FullType{ UInt16Type.name };
    min_UInt16_y.name = "y"_c;
    min_UInt16_y.type = Type::FullType{ UInt16Type.name };
    min_UInt16.name = "min"_c;
    min_UInt16.returnType = Type::FullType { UInt16Type.name };
    min_UInt16.parameters = min_UInt16_args;
    Symbol::Resolved(&min_UInt16_x)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&min_UInt16_y)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&min_UInt16)->returnTypeSymbol = &UInt16Type;

    /// min with UInt16x2, UInt16x2
    min_UInt16x2_x.name = "x"_c;
    min_UInt16x2_x.type = Type::FullType{ UInt16x2Type.name };
    min_UInt16x2_y.name = "y"_c;
    min_UInt16x2_y.type = Type::FullType{ UInt16x2Type.name };
    min_UInt16x2.name = "min"_c;
    min_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    min_UInt16x2.parameters = min_UInt16x2_args;
    Symbol::Resolved(&min_UInt16x2_x)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&min_UInt16x2_y)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&min_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// min with UInt16x3, UInt16x3
    min_UInt16x3_x.name = "x"_c;
    min_UInt16x3_x.type = Type::FullType{ UInt16x3Type.name };
    min_UInt16x3_y.name = "y"_c;
    min_UInt16x3_y.type = Type::FullType{ UInt16x3Type.name };
    min_UInt16x3.name = "min"_c;
    min_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    min_UInt16x3.parameters = min_UInt16x3_args;
    Symbol::Resolved(&min_UInt16x3_x)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&min_UInt16x3_y)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&min_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// min with UInt16x4, UInt16x4
    min_UInt16x4_x.name = "x"_c;
    min_UInt16x4_x.type = Type::FullType{ UInt16x4Type.name };
    min_UInt16x4_y.name = "y"_c;
    min_UInt16x4_y.type = Type::FullType{ UInt16x4Type.name };
    min_UInt16x4.name = "min"_c;
    min_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    min_UInt16x4.parameters = min_UInt16x4_args;
    Symbol::Resolved(&min_UInt16x4_x)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&min_UInt16x4_y)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&min_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// max with Float32, Float32
    max_Float32_x.name = "x"_c;
    max_Float32_x.type = Type::FullType{ Float32Type.name };
    max_Float32_y.name = "y"_c;
    max_Float32_y.type = Type::FullType{ Float32Type.name };
    max_Float32.name = "max"_c;
    max_Float32.returnType = Type::FullType { Float32Type.name };
    max_Float32.parameters = max_Float32_args;
    Symbol::Resolved(&max_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&max_Float32_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&max_Float32)->returnTypeSymbol = &Float32Type;

    /// max with Float32x2, Float32x2
    max_Float32x2_x.name = "x"_c;
    max_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    max_Float32x2_y.name = "y"_c;
    max_Float32x2_y.type = Type::FullType{ Float32x2Type.name };
    max_Float32x2.name = "max"_c;
    max_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    max_Float32x2.parameters = max_Float32x2_args;
    Symbol::Resolved(&max_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&max_Float32x2_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&max_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// max with Float32x3, Float32x3
    max_Float32x3_x.name = "x"_c;
    max_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    max_Float32x3_y.name = "y"_c;
    max_Float32x3_y.type = Type::FullType{ Float32x3Type.name };
    max_Float32x3.name = "max"_c;
    max_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    max_Float32x3.parameters = max_Float32x3_args;
    Symbol::Resolved(&max_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&max_Float32x3_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&max_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// max with Float32x4, Float32x4
    max_Float32x4_x.name = "x"_c;
    max_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    max_Float32x4_y.name = "y"_c;
    max_Float32x4_y.type = Type::FullType{ Float32x4Type.name };
    max_Float32x4.name = "max"_c;
    max_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    max_Float32x4.parameters = max_Float32x4_args;
    Symbol::Resolved(&max_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&max_Float32x4_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&max_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// max with Float16, Float16
    max_Float16_x.name = "x"_c;
    max_Float16_x.type = Type::FullType{ Float16Type.name };
    max_Float16_y.name = "y"_c;
    max_Float16_y.type = Type::FullType{ Float16Type.name };
    max_Float16.name = "max"_c;
    max_Float16.returnType = Type::FullType { Float16Type.name };
    max_Float16.parameters = max_Float16_args;
    Symbol::Resolved(&max_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&max_Float16_y)->typeSymbol = &Float16Type;
    Symbol::Resolved(&max_Float16)->returnTypeSymbol = &Float16Type;

    /// max with Float16x2, Float16x2
    max_Float16x2_x.name = "x"_c;
    max_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    max_Float16x2_y.name = "y"_c;
    max_Float16x2_y.type = Type::FullType{ Float16x2Type.name };
    max_Float16x2.name = "max"_c;
    max_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    max_Float16x2.parameters = max_Float16x2_args;
    Symbol::Resolved(&max_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&max_Float16x2_y)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&max_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// max with Float16x3, Float16x3
    max_Float16x3_x.name = "x"_c;
    max_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    max_Float16x3_y.name = "y"_c;
    max_Float16x3_y.type = Type::FullType{ Float16x3Type.name };
    max_Float16x3.name = "max"_c;
    max_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    max_Float16x3.parameters = max_Float16x3_args;
    Symbol::Resolved(&max_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&max_Float16x3_y)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&max_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// max with Float16x4, Float16x4
    max_Float16x4_x.name = "x"_c;
    max_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    max_Float16x4_y.name = "y"_c;
    max_Float16x4_y.type = Type::FullType{ Float16x4Type.name };
    max_Float16x4.name = "max"_c;
    max_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    max_Float16x4.parameters = max_Float16x4_args;
    Symbol::Resolved(&max_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&max_Float16x4_y)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&max_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// max with Int32, Int32
    max_Int32_x.name = "x"_c;
    max_Int32_x.type = Type::FullType{ Int32Type.name };
    max_Int32_y.name = "y"_c;
    max_Int32_y.type = Type::FullType{ Int32Type.name };
    max_Int32.name = "max"_c;
    max_Int32.returnType = Type::FullType { Int32Type.name };
    max_Int32.parameters = max_Int32_args;
    Symbol::Resolved(&max_Int32_x)->typeSymbol = &Int32Type;
    Symbol::Resolved(&max_Int32_y)->typeSymbol = &Int32Type;
    Symbol::Resolved(&max_Int32)->returnTypeSymbol = &Int32Type;

    /// max with Int32x2, Int32x2
    max_Int32x2_x.name = "x"_c;
    max_Int32x2_x.type = Type::FullType{ Int32x2Type.name };
    max_Int32x2_y.name = "y"_c;
    max_Int32x2_y.type = Type::FullType{ Int32x2Type.name };
    max_Int32x2.name = "max"_c;
    max_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    max_Int32x2.parameters = max_Int32x2_args;
    Symbol::Resolved(&max_Int32x2_x)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&max_Int32x2_y)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&max_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// max with Int32x3, Int32x3
    max_Int32x3_x.name = "x"_c;
    max_Int32x3_x.type = Type::FullType{ Int32x3Type.name };
    max_Int32x3_y.name = "y"_c;
    max_Int32x3_y.type = Type::FullType{ Int32x3Type.name };
    max_Int32x3.name = "max"_c;
    max_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    max_Int32x3.parameters = max_Int32x3_args;
    Symbol::Resolved(&max_Int32x3_x)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&max_Int32x3_y)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&max_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// max with Int32x4, Int32x4
    max_Int32x4_x.name = "x"_c;
    max_Int32x4_x.type = Type::FullType{ Int32x4Type.name };
    max_Int32x4_y.name = "y"_c;
    max_Int32x4_y.type = Type::FullType{ Int32x4Type.name };
    max_Int32x4.name = "max"_c;
    max_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    max_Int32x4.parameters = max_Int32x4_args;
    Symbol::Resolved(&max_Int32x4_x)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&max_Int32x4_y)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&max_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// max with Int16, Int16
    max_Int16_x.name = "x"_c;
    max_Int16_x.type = Type::FullType{ Int16Type.name };
    max_Int16_y.name = "y"_c;
    max_Int16_y.type = Type::FullType{ Int16Type.name };
    max_Int16.name = "max"_c;
    max_Int16.returnType = Type::FullType { Int16Type.name };
    max_Int16.parameters = max_Int16_args;
    Symbol::Resolved(&max_Int16_x)->typeSymbol = &Int16Type;
    Symbol::Resolved(&max_Int16_y)->typeSymbol = &Int16Type;
    Symbol::Resolved(&max_Int16)->returnTypeSymbol = &Int16Type;

    /// max with Int16x2, Int16x2
    max_Int16x2_x.name = "x"_c;
    max_Int16x2_x.type = Type::FullType{ Int16x2Type.name };
    max_Int16x2_y.name = "y"_c;
    max_Int16x2_y.type = Type::FullType{ Int16x2Type.name };
    max_Int16x2.name = "max"_c;
    max_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    max_Int16x2.parameters = max_Int16x2_args;
    Symbol::Resolved(&max_Int16x2_x)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&max_Int16x2_y)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&max_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// max with Int16x3, Int16x3
    max_Int16x3_x.name = "x"_c;
    max_Int16x3_x.type = Type::FullType{ Int16x3Type.name };
    max_Int16x3_y.name = "y"_c;
    max_Int16x3_y.type = Type::FullType{ Int16x3Type.name };
    max_Int16x3.name = "max"_c;
    max_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    max_Int16x3.parameters = max_Int16x3_args;
    Symbol::Resolved(&max_Int16x3_x)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&max_Int16x3_y)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&max_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// max with Int16x4, Int16x4
    max_Int16x4_x.name = "x"_c;
    max_Int16x4_x.type = Type::FullType{ Int16x4Type.name };
    max_Int16x4_y.name = "y"_c;
    max_Int16x4_y.type = Type::FullType{ Int16x4Type.name };
    max_Int16x4.name = "max"_c;
    max_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    max_Int16x4.parameters = max_Int16x4_args;
    Symbol::Resolved(&max_Int16x4_x)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&max_Int16x4_y)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&max_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// max with UInt32, UInt32
    max_UInt32_x.name = "x"_c;
    max_UInt32_x.type = Type::FullType{ UInt32Type.name };
    max_UInt32_y.name = "y"_c;
    max_UInt32_y.type = Type::FullType{ UInt32Type.name };
    max_UInt32.name = "max"_c;
    max_UInt32.returnType = Type::FullType { UInt32Type.name };
    max_UInt32.parameters = max_UInt32_args;
    Symbol::Resolved(&max_UInt32_x)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&max_UInt32_y)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&max_UInt32)->returnTypeSymbol = &UInt32Type;

    /// max with UInt32x2, UInt32x2
    max_UInt32x2_x.name = "x"_c;
    max_UInt32x2_x.type = Type::FullType{ UInt32x2Type.name };
    max_UInt32x2_y.name = "y"_c;
    max_UInt32x2_y.type = Type::FullType{ UInt32x2Type.name };
    max_UInt32x2.name = "max"_c;
    max_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    max_UInt32x2.parameters = max_UInt32x2_args;
    Symbol::Resolved(&max_UInt32x2_x)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&max_UInt32x2_y)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&max_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// max with UInt32x3, UInt32x3
    max_UInt32x3_x.name = "x"_c;
    max_UInt32x3_x.type = Type::FullType{ UInt32x3Type.name };
    max_UInt32x3_y.name = "y"_c;
    max_UInt32x3_y.type = Type::FullType{ UInt32x3Type.name };
    max_UInt32x3.name = "max"_c;
    max_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    max_UInt32x3.parameters = max_UInt32x3_args;
    Symbol::Resolved(&max_UInt32x3_x)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&max_UInt32x3_y)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&max_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// max with UInt32x4, UInt32x4
    max_UInt32x4_x.name = "x"_c;
    max_UInt32x4_x.type = Type::FullType{ UInt32x4Type.name };
    max_UInt32x4_y.name = "y"_c;
    max_UInt32x4_y.type = Type::FullType{ UInt32x4Type.name };
    max_UInt32x4.name = "max"_c;
    max_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    max_UInt32x4.parameters = max_UInt32x4_args;
    Symbol::Resolved(&max_UInt32x4_x)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&max_UInt32x4_y)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&max_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// max with UInt16, UInt16
    max_UInt16_x.name = "x"_c;
    max_UInt16_x.type = Type::FullType{ UInt16Type.name };
    max_UInt16_y.name = "y"_c;
    max_UInt16_y.type = Type::FullType{ UInt16Type.name };
    max_UInt16.name = "max"_c;
    max_UInt16.returnType = Type::FullType { UInt16Type.name };
    max_UInt16.parameters = max_UInt16_args;
    Symbol::Resolved(&max_UInt16_x)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&max_UInt16_y)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&max_UInt16)->returnTypeSymbol = &UInt16Type;

    /// max with UInt16x2, UInt16x2
    max_UInt16x2_x.name = "x"_c;
    max_UInt16x2_x.type = Type::FullType{ UInt16x2Type.name };
    max_UInt16x2_y.name = "y"_c;
    max_UInt16x2_y.type = Type::FullType{ UInt16x2Type.name };
    max_UInt16x2.name = "max"_c;
    max_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    max_UInt16x2.parameters = max_UInt16x2_args;
    Symbol::Resolved(&max_UInt16x2_x)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&max_UInt16x2_y)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&max_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// max with UInt16x3, UInt16x3
    max_UInt16x3_x.name = "x"_c;
    max_UInt16x3_x.type = Type::FullType{ UInt16x3Type.name };
    max_UInt16x3_y.name = "y"_c;
    max_UInt16x3_y.type = Type::FullType{ UInt16x3Type.name };
    max_UInt16x3.name = "max"_c;
    max_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    max_UInt16x3.parameters = max_UInt16x3_args;
    Symbol::Resolved(&max_UInt16x3_x)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&max_UInt16x3_y)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&max_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// max with UInt16x4, UInt16x4
    max_UInt16x4_x.name = "x"_c;
    max_UInt16x4_x.type = Type::FullType{ UInt16x4Type.name };
    max_UInt16x4_y.name = "y"_c;
    max_UInt16x4_y.type = Type::FullType{ UInt16x4Type.name };
    max_UInt16x4.name = "max"_c;
    max_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    max_UInt16x4.parameters = max_UInt16x4_args;
    Symbol::Resolved(&max_UInt16x4_x)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&max_UInt16x4_y)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&max_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// clamp with Float32, Float32, Float32
    clamp_Float32_val.name = "val"_c;
    clamp_Float32_val.type = Type::FullType{ Float32Type.name };
    clamp_Float32_min.name = "min"_c;
    clamp_Float32_min.type = Type::FullType{ Float32Type.name };
    clamp_Float32_max.name = "max"_c;
    clamp_Float32_max.type = Type::FullType{ Float32Type.name };
    clamp_Float32.name = "clamp"_c;
    clamp_Float32.returnType = Type::FullType { Float32Type.name };
    clamp_Float32.parameters = clamp_Float32_args;
    Symbol::Resolved(&clamp_Float32_val)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32_min)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32_max)->typeSymbol = &Float32Type;
    Symbol::Resolved(&clamp_Float32)->returnTypeSymbol = &Float32Type;

    /// clamp with Float32x2, Float32x2, Float32x2
    clamp_Float32x2_val.name = "val"_c;
    clamp_Float32x2_val.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2_min.name = "min"_c;
    clamp_Float32x2_min.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2_max.name = "max"_c;
    clamp_Float32x2_max.type = Type::FullType{ Float32x2Type.name };
    clamp_Float32x2.name = "clamp"_c;
    clamp_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    clamp_Float32x2.parameters = clamp_Float32x2_args;
    Symbol::Resolved(&clamp_Float32x2_val)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2_min)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2_max)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&clamp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// clamp with Float32x3, Float32x3, Float32x3
    clamp_Float32x3_val.name = "val"_c;
    clamp_Float32x3_val.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3_min.name = "min"_c;
    clamp_Float32x3_min.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3_max.name = "max"_c;
    clamp_Float32x3_max.type = Type::FullType{ Float32x3Type.name };
    clamp_Float32x3.name = "clamp"_c;
    clamp_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    clamp_Float32x3.parameters = clamp_Float32x3_args;
    Symbol::Resolved(&clamp_Float32x3_val)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3_min)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3_max)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&clamp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// clamp with Float32x4, Float32x4, Float32x4
    clamp_Float32x4_val.name = "val"_c;
    clamp_Float32x4_val.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4_min.name = "min"_c;
    clamp_Float32x4_min.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4_max.name = "max"_c;
    clamp_Float32x4_max.type = Type::FullType{ Float32x4Type.name };
    clamp_Float32x4.name = "clamp"_c;
    clamp_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    clamp_Float32x4.parameters = clamp_Float32x4_args;
    Symbol::Resolved(&clamp_Float32x4_val)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4_min)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4_max)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&clamp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// clamp with Float16, Float16, Float16
    clamp_Float16_val.name = "val"_c;
    clamp_Float16_val.type = Type::FullType{ Float16Type.name };
    clamp_Float16_min.name = "min"_c;
    clamp_Float16_min.type = Type::FullType{ Float16Type.name };
    clamp_Float16_max.name = "max"_c;
    clamp_Float16_max.type = Type::FullType{ Float16Type.name };
    clamp_Float16.name = "clamp"_c;
    clamp_Float16.returnType = Type::FullType { Float16Type.name };
    clamp_Float16.parameters = clamp_Float16_args;
    Symbol::Resolved(&clamp_Float16_val)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16_min)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16_max)->typeSymbol = &Float16Type;
    Symbol::Resolved(&clamp_Float16)->returnTypeSymbol = &Float16Type;

    /// clamp with Float16x2, Float16x2, Float16x2
    clamp_Float16x2_val.name = "val"_c;
    clamp_Float16x2_val.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2_min.name = "min"_c;
    clamp_Float16x2_min.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2_max.name = "max"_c;
    clamp_Float16x2_max.type = Type::FullType{ Float16x2Type.name };
    clamp_Float16x2.name = "clamp"_c;
    clamp_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    clamp_Float16x2.parameters = clamp_Float16x2_args;
    Symbol::Resolved(&clamp_Float16x2_val)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2_min)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2_max)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&clamp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// clamp with Float16x3, Float16x3, Float16x3
    clamp_Float16x3_val.name = "val"_c;
    clamp_Float16x3_val.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3_min.name = "min"_c;
    clamp_Float16x3_min.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3_max.name = "max"_c;
    clamp_Float16x3_max.type = Type::FullType{ Float16x3Type.name };
    clamp_Float16x3.name = "clamp"_c;
    clamp_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    clamp_Float16x3.parameters = clamp_Float16x3_args;
    Symbol::Resolved(&clamp_Float16x3_val)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3_min)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3_max)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&clamp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// clamp with Float16x4, Float16x4, Float16x4
    clamp_Float16x4_val.name = "val"_c;
    clamp_Float16x4_val.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4_min.name = "min"_c;
    clamp_Float16x4_min.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4_max.name = "max"_c;
    clamp_Float16x4_max.type = Type::FullType{ Float16x4Type.name };
    clamp_Float16x4.name = "clamp"_c;
    clamp_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    clamp_Float16x4.parameters = clamp_Float16x4_args;
    Symbol::Resolved(&clamp_Float16x4_val)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4_min)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4_max)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&clamp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// clamp with Int32, Int32, Int32
    clamp_Int32_val.name = "val"_c;
    clamp_Int32_val.type = Type::FullType{ Int32Type.name };
    clamp_Int32_min.name = "min"_c;
    clamp_Int32_min.type = Type::FullType{ Int32Type.name };
    clamp_Int32_max.name = "max"_c;
    clamp_Int32_max.type = Type::FullType{ Int32Type.name };
    clamp_Int32.name = "clamp"_c;
    clamp_Int32.returnType = Type::FullType { Int32Type.name };
    clamp_Int32.parameters = clamp_Int32_args;
    Symbol::Resolved(&clamp_Int32_val)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32_min)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32_max)->typeSymbol = &Int32Type;
    Symbol::Resolved(&clamp_Int32)->returnTypeSymbol = &Int32Type;

    /// clamp with Int32x2, Int32x2, Int32x2
    clamp_Int32x2_val.name = "val"_c;
    clamp_Int32x2_val.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2_min.name = "min"_c;
    clamp_Int32x2_min.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2_max.name = "max"_c;
    clamp_Int32x2_max.type = Type::FullType{ Int32x2Type.name };
    clamp_Int32x2.name = "clamp"_c;
    clamp_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    clamp_Int32x2.parameters = clamp_Int32x2_args;
    Symbol::Resolved(&clamp_Int32x2_val)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2_min)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2_max)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&clamp_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// clamp with Int32x3, Int32x3, Int32x3
    clamp_Int32x3_val.name = "val"_c;
    clamp_Int32x3_val.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3_min.name = "min"_c;
    clamp_Int32x3_min.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3_max.name = "max"_c;
    clamp_Int32x3_max.type = Type::FullType{ Int32x3Type.name };
    clamp_Int32x3.name = "clamp"_c;
    clamp_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    clamp_Int32x3.parameters = clamp_Int32x3_args;
    Symbol::Resolved(&clamp_Int32x3_val)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3_min)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3_max)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&clamp_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// clamp with Int32x4, Int32x4, Int32x4
    clamp_Int32x4_val.name = "val"_c;
    clamp_Int32x4_val.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4_min.name = "min"_c;
    clamp_Int32x4_min.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4_max.name = "max"_c;
    clamp_Int32x4_max.type = Type::FullType{ Int32x4Type.name };
    clamp_Int32x4.name = "clamp"_c;
    clamp_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    clamp_Int32x4.parameters = clamp_Int32x4_args;
    Symbol::Resolved(&clamp_Int32x4_val)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4_min)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4_max)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&clamp_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// clamp with Int16, Int16, Int16
    clamp_Int16_val.name = "val"_c;
    clamp_Int16_val.type = Type::FullType{ Int16Type.name };
    clamp_Int16_min.name = "min"_c;
    clamp_Int16_min.type = Type::FullType{ Int16Type.name };
    clamp_Int16_max.name = "max"_c;
    clamp_Int16_max.type = Type::FullType{ Int16Type.name };
    clamp_Int16.name = "clamp"_c;
    clamp_Int16.returnType = Type::FullType { Int16Type.name };
    clamp_Int16.parameters = clamp_Int16_args;
    Symbol::Resolved(&clamp_Int16_val)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16_min)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16_max)->typeSymbol = &Int16Type;
    Symbol::Resolved(&clamp_Int16)->returnTypeSymbol = &Int16Type;

    /// clamp with Int16x2, Int16x2, Int16x2
    clamp_Int16x2_val.name = "val"_c;
    clamp_Int16x2_val.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2_min.name = "min"_c;
    clamp_Int16x2_min.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2_max.name = "max"_c;
    clamp_Int16x2_max.type = Type::FullType{ Int16x2Type.name };
    clamp_Int16x2.name = "clamp"_c;
    clamp_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    clamp_Int16x2.parameters = clamp_Int16x2_args;
    Symbol::Resolved(&clamp_Int16x2_val)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2_min)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2_max)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&clamp_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// clamp with Int16x3, Int16x3, Int16x3
    clamp_Int16x3_val.name = "val"_c;
    clamp_Int16x3_val.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3_min.name = "min"_c;
    clamp_Int16x3_min.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3_max.name = "max"_c;
    clamp_Int16x3_max.type = Type::FullType{ Int16x3Type.name };
    clamp_Int16x3.name = "clamp"_c;
    clamp_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    clamp_Int16x3.parameters = clamp_Int16x3_args;
    Symbol::Resolved(&clamp_Int16x3_val)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3_min)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3_max)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&clamp_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// clamp with Int16x4, Int16x4, Int16x4
    clamp_Int16x4_val.name = "val"_c;
    clamp_Int16x4_val.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4_min.name = "min"_c;
    clamp_Int16x4_min.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4_max.name = "max"_c;
    clamp_Int16x4_max.type = Type::FullType{ Int16x4Type.name };
    clamp_Int16x4.name = "clamp"_c;
    clamp_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    clamp_Int16x4.parameters = clamp_Int16x4_args;
    Symbol::Resolved(&clamp_Int16x4_val)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4_min)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4_max)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&clamp_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// clamp with UInt32, UInt32, UInt32
    clamp_UInt32_val.name = "val"_c;
    clamp_UInt32_val.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32_min.name = "min"_c;
    clamp_UInt32_min.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32_max.name = "max"_c;
    clamp_UInt32_max.type = Type::FullType{ UInt32Type.name };
    clamp_UInt32.name = "clamp"_c;
    clamp_UInt32.returnType = Type::FullType { UInt32Type.name };
    clamp_UInt32.parameters = clamp_UInt32_args;
    Symbol::Resolved(&clamp_UInt32_val)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32_min)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32_max)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&clamp_UInt32)->returnTypeSymbol = &UInt32Type;

    /// clamp with UInt32x2, UInt32x2, UInt32x2
    clamp_UInt32x2_val.name = "val"_c;
    clamp_UInt32x2_val.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2_min.name = "min"_c;
    clamp_UInt32x2_min.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2_max.name = "max"_c;
    clamp_UInt32x2_max.type = Type::FullType{ UInt32x2Type.name };
    clamp_UInt32x2.name = "clamp"_c;
    clamp_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    clamp_UInt32x2.parameters = clamp_UInt32x2_args;
    Symbol::Resolved(&clamp_UInt32x2_val)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2_min)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2_max)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&clamp_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// clamp with UInt32x3, UInt32x3, UInt32x3
    clamp_UInt32x3_val.name = "val"_c;
    clamp_UInt32x3_val.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3_min.name = "min"_c;
    clamp_UInt32x3_min.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3_max.name = "max"_c;
    clamp_UInt32x3_max.type = Type::FullType{ UInt32x3Type.name };
    clamp_UInt32x3.name = "clamp"_c;
    clamp_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    clamp_UInt32x3.parameters = clamp_UInt32x3_args;
    Symbol::Resolved(&clamp_UInt32x3_val)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3_min)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3_max)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&clamp_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// clamp with UInt32x4, UInt32x4, UInt32x4
    clamp_UInt32x4_val.name = "val"_c;
    clamp_UInt32x4_val.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4_min.name = "min"_c;
    clamp_UInt32x4_min.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4_max.name = "max"_c;
    clamp_UInt32x4_max.type = Type::FullType{ UInt32x4Type.name };
    clamp_UInt32x4.name = "clamp"_c;
    clamp_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    clamp_UInt32x4.parameters = clamp_UInt32x4_args;
    Symbol::Resolved(&clamp_UInt32x4_val)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4_min)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4_max)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&clamp_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// clamp with UInt16, UInt16, UInt16
    clamp_UInt16_val.name = "val"_c;
    clamp_UInt16_val.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16_min.name = "min"_c;
    clamp_UInt16_min.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16_max.name = "max"_c;
    clamp_UInt16_max.type = Type::FullType{ UInt16Type.name };
    clamp_UInt16.name = "clamp"_c;
    clamp_UInt16.returnType = Type::FullType { UInt16Type.name };
    clamp_UInt16.parameters = clamp_UInt16_args;
    Symbol::Resolved(&clamp_UInt16_val)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16_min)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16_max)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&clamp_UInt16)->returnTypeSymbol = &UInt16Type;

    /// clamp with UInt16x2, UInt16x2, UInt16x2
    clamp_UInt16x2_val.name = "val"_c;
    clamp_UInt16x2_val.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2_min.name = "min"_c;
    clamp_UInt16x2_min.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2_max.name = "max"_c;
    clamp_UInt16x2_max.type = Type::FullType{ UInt16x2Type.name };
    clamp_UInt16x2.name = "clamp"_c;
    clamp_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    clamp_UInt16x2.parameters = clamp_UInt16x2_args;
    Symbol::Resolved(&clamp_UInt16x2_val)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2_min)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2_max)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&clamp_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// clamp with UInt16x3, UInt16x3, UInt16x3
    clamp_UInt16x3_val.name = "val"_c;
    clamp_UInt16x3_val.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3_min.name = "min"_c;
    clamp_UInt16x3_min.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3_max.name = "max"_c;
    clamp_UInt16x3_max.type = Type::FullType{ UInt16x3Type.name };
    clamp_UInt16x3.name = "clamp"_c;
    clamp_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    clamp_UInt16x3.parameters = clamp_UInt16x3_args;
    Symbol::Resolved(&clamp_UInt16x3_val)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3_min)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3_max)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&clamp_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// clamp with UInt16x4, UInt16x4, UInt16x4
    clamp_UInt16x4_val.name = "val"_c;
    clamp_UInt16x4_val.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4_min.name = "min"_c;
    clamp_UInt16x4_min.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4_max.name = "max"_c;
    clamp_UInt16x4_max.type = Type::FullType{ UInt16x4Type.name };
    clamp_UInt16x4.name = "clamp"_c;
    clamp_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    clamp_UInt16x4.parameters = clamp_UInt16x4_args;
    Symbol::Resolved(&clamp_UInt16x4_val)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4_min)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4_max)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&clamp_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// lerp with Float32x2, Float32x2, Float32x2
    lerp_Float32x2_a.name = "a"_c;
    lerp_Float32x2_a.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2_b.name = "b"_c;
    lerp_Float32x2_b.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2_t.name = "t"_c;
    lerp_Float32x2_t.type = Type::FullType{ Float32x2Type.name };
    lerp_Float32x2.name = "lerp"_c;
    lerp_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    lerp_Float32x2.parameters = lerp_Float32x2_args;
    Symbol::Resolved(&lerp_Float32x2_a)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2_b)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2_t)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&lerp_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// lerp with Float32x3, Float32x3, Float32x3
    lerp_Float32x3_a.name = "a"_c;
    lerp_Float32x3_a.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3_b.name = "b"_c;
    lerp_Float32x3_b.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3_t.name = "t"_c;
    lerp_Float32x3_t.type = Type::FullType{ Float32x3Type.name };
    lerp_Float32x3.name = "lerp"_c;
    lerp_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    lerp_Float32x3.parameters = lerp_Float32x3_args;
    Symbol::Resolved(&lerp_Float32x3_a)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3_b)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3_t)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&lerp_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// lerp with Float32x4, Float32x4, Float32x4
    lerp_Float32x4_a.name = "a"_c;
    lerp_Float32x4_a.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4_b.name = "b"_c;
    lerp_Float32x4_b.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4_t.name = "t"_c;
    lerp_Float32x4_t.type = Type::FullType{ Float32x4Type.name };
    lerp_Float32x4.name = "lerp"_c;
    lerp_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    lerp_Float32x4.parameters = lerp_Float32x4_args;
    Symbol::Resolved(&lerp_Float32x4_a)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4_b)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4_t)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&lerp_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// lerp with Float16x2, Float16x2, Float16x2
    lerp_Float16x2_a.name = "a"_c;
    lerp_Float16x2_a.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2_b.name = "b"_c;
    lerp_Float16x2_b.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2_t.name = "t"_c;
    lerp_Float16x2_t.type = Type::FullType{ Float16x2Type.name };
    lerp_Float16x2.name = "lerp"_c;
    lerp_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    lerp_Float16x2.parameters = lerp_Float16x2_args;
    Symbol::Resolved(&lerp_Float16x2_a)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2_b)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2_t)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&lerp_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// lerp with Float16x3, Float16x3, Float16x3
    lerp_Float16x3_a.name = "a"_c;
    lerp_Float16x3_a.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3_b.name = "b"_c;
    lerp_Float16x3_b.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3_t.name = "t"_c;
    lerp_Float16x3_t.type = Type::FullType{ Float16x3Type.name };
    lerp_Float16x3.name = "lerp"_c;
    lerp_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    lerp_Float16x3.parameters = lerp_Float16x3_args;
    Symbol::Resolved(&lerp_Float16x3_a)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3_b)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3_t)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&lerp_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// lerp with Float16x4, Float16x4, Float16x4
    lerp_Float16x4_a.name = "a"_c;
    lerp_Float16x4_a.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4_b.name = "b"_c;
    lerp_Float16x4_b.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4_t.name = "t"_c;
    lerp_Float16x4_t.type = Type::FullType{ Float16x4Type.name };
    lerp_Float16x4.name = "lerp"_c;
    lerp_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    lerp_Float16x4.parameters = lerp_Float16x4_args;
    Symbol::Resolved(&lerp_Float16x4_a)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4_b)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4_t)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&lerp_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// step with Float32, Float32
    step_Float32_edge.name = "edge"_c;
    step_Float32_edge.type = Type::FullType{ Float32Type.name };
    step_Float32_x.name = "x"_c;
    step_Float32_x.type = Type::FullType{ Float32Type.name };
    step_Float32.name = "step"_c;
    step_Float32.returnType = Type::FullType { Float32Type.name };
    step_Float32.parameters = step_Float32_args;
    Symbol::Resolved(&step_Float32_edge)->typeSymbol = &Float32Type;
    Symbol::Resolved(&step_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&step_Float32)->returnTypeSymbol = &Float32Type;

    /// step with Float32x2, Float32x2
    step_Float32x2_edge.name = "edge"_c;
    step_Float32x2_edge.type = Type::FullType{ Float32x2Type.name };
    step_Float32x2_x.name = "x"_c;
    step_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    step_Float32x2.name = "step"_c;
    step_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    step_Float32x2.parameters = step_Float32x2_args;
    Symbol::Resolved(&step_Float32x2_edge)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&step_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&step_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// step with Float32x3, Float32x3
    step_Float32x3_edge.name = "edge"_c;
    step_Float32x3_edge.type = Type::FullType{ Float32x3Type.name };
    step_Float32x3_x.name = "x"_c;
    step_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    step_Float32x3.name = "step"_c;
    step_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    step_Float32x3.parameters = step_Float32x3_args;
    Symbol::Resolved(&step_Float32x3_edge)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&step_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&step_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// step with Float32x4, Float32x4
    step_Float32x4_edge.name = "edge"_c;
    step_Float32x4_edge.type = Type::FullType{ Float32x4Type.name };
    step_Float32x4_x.name = "x"_c;
    step_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    step_Float32x4.name = "step"_c;
    step_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    step_Float32x4.parameters = step_Float32x4_args;
    Symbol::Resolved(&step_Float32x4_edge)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&step_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&step_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// step with Float16, Float16
    step_Float16_edge.name = "edge"_c;
    step_Float16_edge.type = Type::FullType{ Float16Type.name };
    step_Float16_x.name = "x"_c;
    step_Float16_x.type = Type::FullType{ Float16Type.name };
    step_Float16.name = "step"_c;
    step_Float16.returnType = Type::FullType { Float16Type.name };
    step_Float16.parameters = step_Float16_args;
    Symbol::Resolved(&step_Float16_edge)->typeSymbol = &Float16Type;
    Symbol::Resolved(&step_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&step_Float16)->returnTypeSymbol = &Float16Type;

    /// step with Float16x2, Float16x2
    step_Float16x2_edge.name = "edge"_c;
    step_Float16x2_edge.type = Type::FullType{ Float16x2Type.name };
    step_Float16x2_x.name = "x"_c;
    step_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    step_Float16x2.name = "step"_c;
    step_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    step_Float16x2.parameters = step_Float16x2_args;
    Symbol::Resolved(&step_Float16x2_edge)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&step_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&step_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// step with Float16x3, Float16x3
    step_Float16x3_edge.name = "edge"_c;
    step_Float16x3_edge.type = Type::FullType{ Float16x3Type.name };
    step_Float16x3_x.name = "x"_c;
    step_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    step_Float16x3.name = "step"_c;
    step_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    step_Float16x3.parameters = step_Float16x3_args;
    Symbol::Resolved(&step_Float16x3_edge)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&step_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&step_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// step with Float16x4, Float16x4
    step_Float16x4_edge.name = "edge"_c;
    step_Float16x4_edge.type = Type::FullType{ Float16x4Type.name };
    step_Float16x4_x.name = "x"_c;
    step_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    step_Float16x4.name = "step"_c;
    step_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    step_Float16x4.parameters = step_Float16x4_args;
    Symbol::Resolved(&step_Float16x4_edge)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&step_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&step_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// smoothstep with Float32, Float32, Float32
    smoothstep_Float32_edge0.name = "edge0"_c;
    smoothstep_Float32_edge0.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32_edge1.name = "edge1"_c;
    smoothstep_Float32_edge1.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32_x.name = "x"_c;
    smoothstep_Float32_x.type = Type::FullType{ Float32Type.name };
    smoothstep_Float32.name = "smoothstep"_c;
    smoothstep_Float32.returnType = Type::FullType { Float32Type.name };
    smoothstep_Float32.parameters = smoothstep_Float32_args;
    Symbol::Resolved(&smoothstep_Float32_edge0)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32_edge1)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&smoothstep_Float32)->returnTypeSymbol = &Float32Type;

    /// smoothstep with Float32x2, Float32x2, Float32x2
    smoothstep_Float32x2_edge0.name = "edge0"_c;
    smoothstep_Float32x2_edge0.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2_edge1.name = "edge1"_c;
    smoothstep_Float32x2_edge1.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2_x.name = "x"_c;
    smoothstep_Float32x2_x.type = Type::FullType{ Float32x2Type.name };
    smoothstep_Float32x2.name = "smoothstep"_c;
    smoothstep_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    smoothstep_Float32x2.parameters = smoothstep_Float32x2_args;
    Symbol::Resolved(&smoothstep_Float32x2_edge0)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2_edge1)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&smoothstep_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// smoothstep with Float32x3, Float32x3, Float32x3
    smoothstep_Float32x3_edge0.name = "edge0"_c;
    smoothstep_Float32x3_edge0.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3_edge1.name = "edge1"_c;
    smoothstep_Float32x3_edge1.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3_x.name = "x"_c;
    smoothstep_Float32x3_x.type = Type::FullType{ Float32x3Type.name };
    smoothstep_Float32x3.name = "smoothstep"_c;
    smoothstep_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    smoothstep_Float32x3.parameters = smoothstep_Float32x3_args;
    Symbol::Resolved(&smoothstep_Float32x3_edge0)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3_edge1)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&smoothstep_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// smoothstep with Float32x4, Float32x4, Float32x4
    smoothstep_Float32x4_edge0.name = "edge0"_c;
    smoothstep_Float32x4_edge0.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4_edge1.name = "edge1"_c;
    smoothstep_Float32x4_edge1.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4_x.name = "x"_c;
    smoothstep_Float32x4_x.type = Type::FullType{ Float32x4Type.name };
    smoothstep_Float32x4.name = "smoothstep"_c;
    smoothstep_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    smoothstep_Float32x4.parameters = smoothstep_Float32x4_args;
    Symbol::Resolved(&smoothstep_Float32x4_edge0)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4_edge1)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&smoothstep_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// smoothstep with Float16, Float16, Float16
    smoothstep_Float16_edge0.name = "edge0"_c;
    smoothstep_Float16_edge0.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16_edge1.name = "edge1"_c;
    smoothstep_Float16_edge1.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16_x.name = "x"_c;
    smoothstep_Float16_x.type = Type::FullType{ Float16Type.name };
    smoothstep_Float16.name = "smoothstep"_c;
    smoothstep_Float16.returnType = Type::FullType { Float16Type.name };
    smoothstep_Float16.parameters = smoothstep_Float16_args;
    Symbol::Resolved(&smoothstep_Float16_edge0)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16_edge1)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16_x)->typeSymbol = &Float16Type;
    Symbol::Resolved(&smoothstep_Float16)->returnTypeSymbol = &Float16Type;

    /// smoothstep with Float16x2, Float16x2, Float16x2
    smoothstep_Float16x2_edge0.name = "edge0"_c;
    smoothstep_Float16x2_edge0.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2_edge1.name = "edge1"_c;
    smoothstep_Float16x2_edge1.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2_x.name = "x"_c;
    smoothstep_Float16x2_x.type = Type::FullType{ Float16x2Type.name };
    smoothstep_Float16x2.name = "smoothstep"_c;
    smoothstep_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    smoothstep_Float16x2.parameters = smoothstep_Float16x2_args;
    Symbol::Resolved(&smoothstep_Float16x2_edge0)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2_edge1)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2_x)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&smoothstep_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// smoothstep with Float16x3, Float16x3, Float16x3
    smoothstep_Float16x3_edge0.name = "edge0"_c;
    smoothstep_Float16x3_edge0.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3_edge1.name = "edge1"_c;
    smoothstep_Float16x3_edge1.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3_x.name = "x"_c;
    smoothstep_Float16x3_x.type = Type::FullType{ Float16x3Type.name };
    smoothstep_Float16x3.name = "smoothstep"_c;
    smoothstep_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    smoothstep_Float16x3.parameters = smoothstep_Float16x3_args;
    Symbol::Resolved(&smoothstep_Float16x3_edge0)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3_edge1)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3_x)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&smoothstep_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// smoothstep with Float16x4, Float16x4, Float16x4
    smoothstep_Float16x4_edge0.name = "edge0"_c;
    smoothstep_Float16x4_edge0.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4_edge1.name = "edge1"_c;
    smoothstep_Float16x4_edge1.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4_x.name = "x"_c;
    smoothstep_Float16x4_x.type = Type::FullType{ Float16x4Type.name };
    smoothstep_Float16x4.name = "smoothstep"_c;
    smoothstep_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    smoothstep_Float16x4.parameters = smoothstep_Float16x4_args;
    Symbol::Resolved(&smoothstep_Float16x4_edge0)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4_edge1)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4_x)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&smoothstep_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// ceil with Float32
    ceil_Float32_arg.name = "val"_c;
    ceil_Float32_arg.type = Type::FullType{ Float32Type.name };
    ceil_Float32.name = "ceil"_c;
    ceil_Float32.returnType = Type::FullType { Float32Type.name };
    ceil_Float32.parameters = ceil_Float32_args;
    Symbol::Resolved(&ceil_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ceil_Float32)->returnTypeSymbol = &Float32Type;

    /// ceil with Float32x2
    ceil_Float32x2_arg.name = "val"_c;
    ceil_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ceil_Float32x2.name = "ceil"_c;
    ceil_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    ceil_Float32x2.parameters = ceil_Float32x2_args;
    Symbol::Resolved(&ceil_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ceil_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// ceil with Float32x3
    ceil_Float32x3_arg.name = "val"_c;
    ceil_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ceil_Float32x3.name = "ceil"_c;
    ceil_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    ceil_Float32x3.parameters = ceil_Float32x3_args;
    Symbol::Resolved(&ceil_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ceil_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// ceil with Float32x4
    ceil_Float32x4_arg.name = "val"_c;
    ceil_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ceil_Float32x4.name = "ceil"_c;
    ceil_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    ceil_Float32x4.parameters = ceil_Float32x4_args;
    Symbol::Resolved(&ceil_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ceil_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// ceil with Float16
    ceil_Float16_arg.name = "val"_c;
    ceil_Float16_arg.type = Type::FullType{ Float16Type.name };
    ceil_Float16.name = "ceil"_c;
    ceil_Float16.returnType = Type::FullType { Float16Type.name };
    ceil_Float16.parameters = ceil_Float16_args;
    Symbol::Resolved(&ceil_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ceil_Float16)->returnTypeSymbol = &Float16Type;

    /// ceil with Float16x2
    ceil_Float16x2_arg.name = "val"_c;
    ceil_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ceil_Float16x2.name = "ceil"_c;
    ceil_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    ceil_Float16x2.parameters = ceil_Float16x2_args;
    Symbol::Resolved(&ceil_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ceil_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// ceil with Float16x3
    ceil_Float16x3_arg.name = "val"_c;
    ceil_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ceil_Float16x3.name = "ceil"_c;
    ceil_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    ceil_Float16x3.parameters = ceil_Float16x3_args;
    Symbol::Resolved(&ceil_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ceil_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// ceil with Float16x4
    ceil_Float16x4_arg.name = "val"_c;
    ceil_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ceil_Float16x4.name = "ceil"_c;
    ceil_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    ceil_Float16x4.parameters = ceil_Float16x4_args;
    Symbol::Resolved(&ceil_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ceil_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// floor with Float32
    floor_Float32_arg.name = "val"_c;
    floor_Float32_arg.type = Type::FullType{ Float32Type.name };
    floor_Float32.name = "floor"_c;
    floor_Float32.returnType = Type::FullType { Float32Type.name };
    floor_Float32.parameters = floor_Float32_args;
    Symbol::Resolved(&floor_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&floor_Float32)->returnTypeSymbol = &Float32Type;

    /// floor with Float32x2
    floor_Float32x2_arg.name = "val"_c;
    floor_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    floor_Float32x2.name = "floor"_c;
    floor_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    floor_Float32x2.parameters = floor_Float32x2_args;
    Symbol::Resolved(&floor_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&floor_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// floor with Float32x3
    floor_Float32x3_arg.name = "val"_c;
    floor_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    floor_Float32x3.name = "floor"_c;
    floor_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    floor_Float32x3.parameters = floor_Float32x3_args;
    Symbol::Resolved(&floor_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&floor_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// floor with Float32x4
    floor_Float32x4_arg.name = "val"_c;
    floor_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    floor_Float32x4.name = "floor"_c;
    floor_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    floor_Float32x4.parameters = floor_Float32x4_args;
    Symbol::Resolved(&floor_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&floor_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// floor with Float16
    floor_Float16_arg.name = "val"_c;
    floor_Float16_arg.type = Type::FullType{ Float16Type.name };
    floor_Float16.name = "floor"_c;
    floor_Float16.returnType = Type::FullType { Float16Type.name };
    floor_Float16.parameters = floor_Float16_args;
    Symbol::Resolved(&floor_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&floor_Float16)->returnTypeSymbol = &Float16Type;

    /// floor with Float16x2
    floor_Float16x2_arg.name = "val"_c;
    floor_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    floor_Float16x2.name = "floor"_c;
    floor_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    floor_Float16x2.parameters = floor_Float16x2_args;
    Symbol::Resolved(&floor_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&floor_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// floor with Float16x3
    floor_Float16x3_arg.name = "val"_c;
    floor_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    floor_Float16x3.name = "floor"_c;
    floor_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    floor_Float16x3.parameters = floor_Float16x3_args;
    Symbol::Resolved(&floor_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&floor_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// floor with Float16x4
    floor_Float16x4_arg.name = "val"_c;
    floor_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    floor_Float16x4.name = "floor"_c;
    floor_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    floor_Float16x4.parameters = floor_Float16x4_args;
    Symbol::Resolved(&floor_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&floor_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// fract with Float32
    fract_Float32_arg.name = "val"_c;
    fract_Float32_arg.type = Type::FullType{ Float32Type.name };
    fract_Float32.name = "fract"_c;
    fract_Float32.returnType = Type::FullType { Float32Type.name };
    fract_Float32.parameters = fract_Float32_args;
    Symbol::Resolved(&fract_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&fract_Float32)->returnTypeSymbol = &Float32Type;

    /// fract with Float32x2
    fract_Float32x2_arg.name = "val"_c;
    fract_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    fract_Float32x2.name = "fract"_c;
    fract_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    fract_Float32x2.parameters = fract_Float32x2_args;
    Symbol::Resolved(&fract_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&fract_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// fract with Float32x3
    fract_Float32x3_arg.name = "val"_c;
    fract_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    fract_Float32x3.name = "fract"_c;
    fract_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    fract_Float32x3.parameters = fract_Float32x3_args;
    Symbol::Resolved(&fract_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&fract_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// fract with Float32x4
    fract_Float32x4_arg.name = "val"_c;
    fract_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    fract_Float32x4.name = "fract"_c;
    fract_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    fract_Float32x4.parameters = fract_Float32x4_args;
    Symbol::Resolved(&fract_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&fract_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// fract with Float16
    fract_Float16_arg.name = "val"_c;
    fract_Float16_arg.type = Type::FullType{ Float16Type.name };
    fract_Float16.name = "fract"_c;
    fract_Float16.returnType = Type::FullType { Float16Type.name };
    fract_Float16.parameters = fract_Float16_args;
    Symbol::Resolved(&fract_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&fract_Float16)->returnTypeSymbol = &Float16Type;

    /// fract with Float16x2
    fract_Float16x2_arg.name = "val"_c;
    fract_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    fract_Float16x2.name = "fract"_c;
    fract_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    fract_Float16x2.parameters = fract_Float16x2_args;
    Symbol::Resolved(&fract_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&fract_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// fract with Float16x3
    fract_Float16x3_arg.name = "val"_c;
    fract_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    fract_Float16x3.name = "fract"_c;
    fract_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    fract_Float16x3.parameters = fract_Float16x3_args;
    Symbol::Resolved(&fract_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&fract_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// fract with Float16x4
    fract_Float16x4_arg.name = "val"_c;
    fract_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    fract_Float16x4.name = "fract"_c;
    fract_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    fract_Float16x4.parameters = fract_Float16x4_args;
    Symbol::Resolved(&fract_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&fract_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// saturate with Float32
    saturate_Float32_arg.name = "val"_c;
    saturate_Float32_arg.type = Type::FullType{ Float32Type.name };
    saturate_Float32.name = "saturate"_c;
    saturate_Float32.returnType = Type::FullType { Float32Type.name };
    saturate_Float32.parameters = saturate_Float32_args;
    Symbol::Resolved(&saturate_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&saturate_Float32)->returnTypeSymbol = &Float32Type;

    /// saturate with Float32x2
    saturate_Float32x2_arg.name = "val"_c;
    saturate_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    saturate_Float32x2.name = "saturate"_c;
    saturate_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    saturate_Float32x2.parameters = saturate_Float32x2_args;
    Symbol::Resolved(&saturate_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&saturate_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// saturate with Float32x3
    saturate_Float32x3_arg.name = "val"_c;
    saturate_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    saturate_Float32x3.name = "saturate"_c;
    saturate_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    saturate_Float32x3.parameters = saturate_Float32x3_args;
    Symbol::Resolved(&saturate_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&saturate_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// saturate with Float32x4
    saturate_Float32x4_arg.name = "val"_c;
    saturate_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    saturate_Float32x4.name = "saturate"_c;
    saturate_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    saturate_Float32x4.parameters = saturate_Float32x4_args;
    Symbol::Resolved(&saturate_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&saturate_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// saturate with Float16
    saturate_Float16_arg.name = "val"_c;
    saturate_Float16_arg.type = Type::FullType{ Float16Type.name };
    saturate_Float16.name = "saturate"_c;
    saturate_Float16.returnType = Type::FullType { Float16Type.name };
    saturate_Float16.parameters = saturate_Float16_args;
    Symbol::Resolved(&saturate_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&saturate_Float16)->returnTypeSymbol = &Float16Type;

    /// saturate with Float16x2
    saturate_Float16x2_arg.name = "val"_c;
    saturate_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    saturate_Float16x2.name = "saturate"_c;
    saturate_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    saturate_Float16x2.parameters = saturate_Float16x2_args;
    Symbol::Resolved(&saturate_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&saturate_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// saturate with Float16x3
    saturate_Float16x3_arg.name = "val"_c;
    saturate_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    saturate_Float16x3.name = "saturate"_c;
    saturate_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    saturate_Float16x3.parameters = saturate_Float16x3_args;
    Symbol::Resolved(&saturate_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&saturate_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// saturate with Float16x4
    saturate_Float16x4_arg.name = "val"_c;
    saturate_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    saturate_Float16x4.name = "saturate"_c;
    saturate_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    saturate_Float16x4.parameters = saturate_Float16x4_args;
    Symbol::Resolved(&saturate_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&saturate_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// trunc with Float32
    trunc_Float32_arg.name = "val"_c;
    trunc_Float32_arg.type = Type::FullType{ Float32Type.name };
    trunc_Float32.name = "trunc"_c;
    trunc_Float32.returnType = Type::FullType { Float32Type.name };
    trunc_Float32.parameters = trunc_Float32_args;
    Symbol::Resolved(&trunc_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&trunc_Float32)->returnTypeSymbol = &Float32Type;

    /// trunc with Float32x2
    trunc_Float32x2_arg.name = "val"_c;
    trunc_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    trunc_Float32x2.name = "trunc"_c;
    trunc_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    trunc_Float32x2.parameters = trunc_Float32x2_args;
    Symbol::Resolved(&trunc_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&trunc_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// trunc with Float32x3
    trunc_Float32x3_arg.name = "val"_c;
    trunc_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    trunc_Float32x3.name = "trunc"_c;
    trunc_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    trunc_Float32x3.parameters = trunc_Float32x3_args;
    Symbol::Resolved(&trunc_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&trunc_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// trunc with Float32x4
    trunc_Float32x4_arg.name = "val"_c;
    trunc_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    trunc_Float32x4.name = "trunc"_c;
    trunc_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    trunc_Float32x4.parameters = trunc_Float32x4_args;
    Symbol::Resolved(&trunc_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&trunc_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// trunc with Float16
    trunc_Float16_arg.name = "val"_c;
    trunc_Float16_arg.type = Type::FullType{ Float16Type.name };
    trunc_Float16.name = "trunc"_c;
    trunc_Float16.returnType = Type::FullType { Float16Type.name };
    trunc_Float16.parameters = trunc_Float16_args;
    Symbol::Resolved(&trunc_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&trunc_Float16)->returnTypeSymbol = &Float16Type;

    /// trunc with Float16x2
    trunc_Float16x2_arg.name = "val"_c;
    trunc_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    trunc_Float16x2.name = "trunc"_c;
    trunc_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    trunc_Float16x2.parameters = trunc_Float16x2_args;
    Symbol::Resolved(&trunc_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&trunc_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// trunc with Float16x3
    trunc_Float16x3_arg.name = "val"_c;
    trunc_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    trunc_Float16x3.name = "trunc"_c;
    trunc_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    trunc_Float16x3.parameters = trunc_Float16x3_args;
    Symbol::Resolved(&trunc_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&trunc_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// trunc with Float16x4
    trunc_Float16x4_arg.name = "val"_c;
    trunc_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    trunc_Float16x4.name = "trunc"_c;
    trunc_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    trunc_Float16x4.parameters = trunc_Float16x4_args;
    Symbol::Resolved(&trunc_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&trunc_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// ddx with Float32
    ddx_Float32_arg.name = "val"_c;
    ddx_Float32_arg.type = Type::FullType{ Float32Type.name };
    ddx_Float32.name = "ddx"_c;
    ddx_Float32.returnType = Type::FullType { Float32Type.name };
    ddx_Float32.parameters = ddx_Float32_args;
    Symbol::Resolved(&ddx_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ddx_Float32)->returnTypeSymbol = &Float32Type;

    /// ddx with Float32x2
    ddx_Float32x2_arg.name = "val"_c;
    ddx_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ddx_Float32x2.name = "ddx"_c;
    ddx_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    ddx_Float32x2.parameters = ddx_Float32x2_args;
    Symbol::Resolved(&ddx_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ddx_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// ddx with Float32x3
    ddx_Float32x3_arg.name = "val"_c;
    ddx_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ddx_Float32x3.name = "ddx"_c;
    ddx_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    ddx_Float32x3.parameters = ddx_Float32x3_args;
    Symbol::Resolved(&ddx_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ddx_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// ddx with Float32x4
    ddx_Float32x4_arg.name = "val"_c;
    ddx_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ddx_Float32x4.name = "ddx"_c;
    ddx_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    ddx_Float32x4.parameters = ddx_Float32x4_args;
    Symbol::Resolved(&ddx_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ddx_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// ddx with Float16
    ddx_Float16_arg.name = "val"_c;
    ddx_Float16_arg.type = Type::FullType{ Float16Type.name };
    ddx_Float16.name = "ddx"_c;
    ddx_Float16.returnType = Type::FullType { Float16Type.name };
    ddx_Float16.parameters = ddx_Float16_args;
    Symbol::Resolved(&ddx_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ddx_Float16)->returnTypeSymbol = &Float16Type;

    /// ddx with Float16x2
    ddx_Float16x2_arg.name = "val"_c;
    ddx_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ddx_Float16x2.name = "ddx"_c;
    ddx_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    ddx_Float16x2.parameters = ddx_Float16x2_args;
    Symbol::Resolved(&ddx_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ddx_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// ddx with Float16x3
    ddx_Float16x3_arg.name = "val"_c;
    ddx_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ddx_Float16x3.name = "ddx"_c;
    ddx_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    ddx_Float16x3.parameters = ddx_Float16x3_args;
    Symbol::Resolved(&ddx_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ddx_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// ddx with Float16x4
    ddx_Float16x4_arg.name = "val"_c;
    ddx_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ddx_Float16x4.name = "ddx"_c;
    ddx_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    ddx_Float16x4.parameters = ddx_Float16x4_args;
    Symbol::Resolved(&ddx_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ddx_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// ddy with Float32
    ddy_Float32_arg.name = "val"_c;
    ddy_Float32_arg.type = Type::FullType{ Float32Type.name };
    ddy_Float32.name = "ddy"_c;
    ddy_Float32.returnType = Type::FullType { Float32Type.name };
    ddy_Float32.parameters = ddy_Float32_args;
    Symbol::Resolved(&ddy_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&ddy_Float32)->returnTypeSymbol = &Float32Type;

    /// ddy with Float32x2
    ddy_Float32x2_arg.name = "val"_c;
    ddy_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    ddy_Float32x2.name = "ddy"_c;
    ddy_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    ddy_Float32x2.parameters = ddy_Float32x2_args;
    Symbol::Resolved(&ddy_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&ddy_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// ddy with Float32x3
    ddy_Float32x3_arg.name = "val"_c;
    ddy_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    ddy_Float32x3.name = "ddy"_c;
    ddy_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    ddy_Float32x3.parameters = ddy_Float32x3_args;
    Symbol::Resolved(&ddy_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&ddy_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// ddy with Float32x4
    ddy_Float32x4_arg.name = "val"_c;
    ddy_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    ddy_Float32x4.name = "ddy"_c;
    ddy_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    ddy_Float32x4.parameters = ddy_Float32x4_args;
    Symbol::Resolved(&ddy_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&ddy_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// ddy with Float16
    ddy_Float16_arg.name = "val"_c;
    ddy_Float16_arg.type = Type::FullType{ Float16Type.name };
    ddy_Float16.name = "ddy"_c;
    ddy_Float16.returnType = Type::FullType { Float16Type.name };
    ddy_Float16.parameters = ddy_Float16_args;
    Symbol::Resolved(&ddy_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&ddy_Float16)->returnTypeSymbol = &Float16Type;

    /// ddy with Float16x2
    ddy_Float16x2_arg.name = "val"_c;
    ddy_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    ddy_Float16x2.name = "ddy"_c;
    ddy_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    ddy_Float16x2.parameters = ddy_Float16x2_args;
    Symbol::Resolved(&ddy_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&ddy_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// ddy with Float16x3
    ddy_Float16x3_arg.name = "val"_c;
    ddy_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    ddy_Float16x3.name = "ddy"_c;
    ddy_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    ddy_Float16x3.parameters = ddy_Float16x3_args;
    Symbol::Resolved(&ddy_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&ddy_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// ddy with Float16x4
    ddy_Float16x4_arg.name = "val"_c;
    ddy_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    ddy_Float16x4.name = "ddy"_c;
    ddy_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    ddy_Float16x4.parameters = ddy_Float16x4_args;
    Symbol::Resolved(&ddy_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&ddy_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// fwidth with Float32
    fwidth_Float32_arg.name = "val"_c;
    fwidth_Float32_arg.type = Type::FullType{ Float32Type.name };
    fwidth_Float32.name = "fwidth"_c;
    fwidth_Float32.returnType = Type::FullType { Float32Type.name };
    fwidth_Float32.parameters = fwidth_Float32_args;
    Symbol::Resolved(&fwidth_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&fwidth_Float32)->returnTypeSymbol = &Float32Type;

    /// fwidth with Float32x2
    fwidth_Float32x2_arg.name = "val"_c;
    fwidth_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    fwidth_Float32x2.name = "fwidth"_c;
    fwidth_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    fwidth_Float32x2.parameters = fwidth_Float32x2_args;
    Symbol::Resolved(&fwidth_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&fwidth_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// fwidth with Float32x3
    fwidth_Float32x3_arg.name = "val"_c;
    fwidth_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    fwidth_Float32x3.name = "fwidth"_c;
    fwidth_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    fwidth_Float32x3.parameters = fwidth_Float32x3_args;
    Symbol::Resolved(&fwidth_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&fwidth_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// fwidth with Float32x4
    fwidth_Float32x4_arg.name = "val"_c;
    fwidth_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    fwidth_Float32x4.name = "fwidth"_c;
    fwidth_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    fwidth_Float32x4.parameters = fwidth_Float32x4_args;
    Symbol::Resolved(&fwidth_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&fwidth_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// fwidth with Float16
    fwidth_Float16_arg.name = "val"_c;
    fwidth_Float16_arg.type = Type::FullType{ Float16Type.name };
    fwidth_Float16.name = "fwidth"_c;
    fwidth_Float16.returnType = Type::FullType { Float16Type.name };
    fwidth_Float16.parameters = fwidth_Float16_args;
    Symbol::Resolved(&fwidth_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&fwidth_Float16)->returnTypeSymbol = &Float16Type;

    /// fwidth with Float16x2
    fwidth_Float16x2_arg.name = "val"_c;
    fwidth_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    fwidth_Float16x2.name = "fwidth"_c;
    fwidth_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    fwidth_Float16x2.parameters = fwidth_Float16x2_args;
    Symbol::Resolved(&fwidth_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&fwidth_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// fwidth with Float16x3
    fwidth_Float16x3_arg.name = "val"_c;
    fwidth_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    fwidth_Float16x3.name = "fwidth"_c;
    fwidth_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    fwidth_Float16x3.parameters = fwidth_Float16x3_args;
    Symbol::Resolved(&fwidth_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&fwidth_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// fwidth with Float16x4
    fwidth_Float16x4_arg.name = "val"_c;
    fwidth_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    fwidth_Float16x4.name = "fwidth"_c;
    fwidth_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    fwidth_Float16x4.parameters = fwidth_Float16x4_args;
    Symbol::Resolved(&fwidth_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&fwidth_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// sign with Int32
    sign_Int32_arg.name = "val"_c;
    sign_Int32_arg.type = Type::FullType{ Int32Type.name };
    sign_Int32.name = "sign"_c;
    sign_Int32.returnType = Type::FullType { Int32Type.name };
    sign_Int32.parameters = sign_Int32_args;
    Symbol::Resolved(&sign_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&sign_Int32)->returnTypeSymbol = &Int32Type;

    /// sign with Int32x2
    sign_Int32x2_arg.name = "val"_c;
    sign_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    sign_Int32x2.name = "sign"_c;
    sign_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    sign_Int32x2.parameters = sign_Int32x2_args;
    Symbol::Resolved(&sign_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&sign_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// sign with Int32x3
    sign_Int32x3_arg.name = "val"_c;
    sign_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    sign_Int32x3.name = "sign"_c;
    sign_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    sign_Int32x3.parameters = sign_Int32x3_args;
    Symbol::Resolved(&sign_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&sign_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// sign with Int32x4
    sign_Int32x4_arg.name = "val"_c;
    sign_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    sign_Int32x4.name = "sign"_c;
    sign_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    sign_Int32x4.parameters = sign_Int32x4_args;
    Symbol::Resolved(&sign_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&sign_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// sign with Int16
    sign_Int16_arg.name = "val"_c;
    sign_Int16_arg.type = Type::FullType{ Int16Type.name };
    sign_Int16.name = "sign"_c;
    sign_Int16.returnType = Type::FullType { Int16Type.name };
    sign_Int16.parameters = sign_Int16_args;
    Symbol::Resolved(&sign_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&sign_Int16)->returnTypeSymbol = &Int16Type;

    /// sign with Int16x2
    sign_Int16x2_arg.name = "val"_c;
    sign_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    sign_Int16x2.name = "sign"_c;
    sign_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    sign_Int16x2.parameters = sign_Int16x2_args;
    Symbol::Resolved(&sign_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&sign_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// sign with Int16x3
    sign_Int16x3_arg.name = "val"_c;
    sign_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    sign_Int16x3.name = "sign"_c;
    sign_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    sign_Int16x3.parameters = sign_Int16x3_args;
    Symbol::Resolved(&sign_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&sign_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// sign with Int16x4
    sign_Int16x4_arg.name = "val"_c;
    sign_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    sign_Int16x4.name = "sign"_c;
    sign_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    sign_Int16x4.parameters = sign_Int16x4_args;
    Symbol::Resolved(&sign_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&sign_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// sign with Float32
    sign_Float32_arg.name = "val"_c;
    sign_Float32_arg.type = Type::FullType{ Float32Type.name };
    sign_Float32.name = "sign"_c;
    sign_Float32.returnType = Type::FullType { Float32Type.name };
    sign_Float32.parameters = sign_Float32_args;
    Symbol::Resolved(&sign_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&sign_Float32)->returnTypeSymbol = &Float32Type;

    /// sign with Float32x2
    sign_Float32x2_arg.name = "val"_c;
    sign_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    sign_Float32x2.name = "sign"_c;
    sign_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    sign_Float32x2.parameters = sign_Float32x2_args;
    Symbol::Resolved(&sign_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&sign_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// sign with Float32x3
    sign_Float32x3_arg.name = "val"_c;
    sign_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    sign_Float32x3.name = "sign"_c;
    sign_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    sign_Float32x3.parameters = sign_Float32x3_args;
    Symbol::Resolved(&sign_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&sign_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// sign with Float32x4
    sign_Float32x4_arg.name = "val"_c;
    sign_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    sign_Float32x4.name = "sign"_c;
    sign_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    sign_Float32x4.parameters = sign_Float32x4_args;
    Symbol::Resolved(&sign_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&sign_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// sign with Float16
    sign_Float16_arg.name = "val"_c;
    sign_Float16_arg.type = Type::FullType{ Float16Type.name };
    sign_Float16.name = "sign"_c;
    sign_Float16.returnType = Type::FullType { Float16Type.name };
    sign_Float16.parameters = sign_Float16_args;
    Symbol::Resolved(&sign_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&sign_Float16)->returnTypeSymbol = &Float16Type;

    /// sign with Float16x2
    sign_Float16x2_arg.name = "val"_c;
    sign_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    sign_Float16x2.name = "sign"_c;
    sign_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    sign_Float16x2.parameters = sign_Float16x2_args;
    Symbol::Resolved(&sign_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&sign_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// sign with Float16x3
    sign_Float16x3_arg.name = "val"_c;
    sign_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    sign_Float16x3.name = "sign"_c;
    sign_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    sign_Float16x3.parameters = sign_Float16x3_args;
    Symbol::Resolved(&sign_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&sign_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// sign with Float16x4
    sign_Float16x4_arg.name = "val"_c;
    sign_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    sign_Float16x4.name = "sign"_c;
    sign_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    sign_Float16x4.parameters = sign_Float16x4_args;
    Symbol::Resolved(&sign_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&sign_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// abs with Int32
    abs_Int32_arg.name = "val"_c;
    abs_Int32_arg.type = Type::FullType{ Int32Type.name };
    abs_Int32.name = "abs"_c;
    abs_Int32.returnType = Type::FullType { Int32Type.name };
    abs_Int32.parameters = abs_Int32_args;
    Symbol::Resolved(&abs_Int32_arg)->typeSymbol = &Int32Type;
    Symbol::Resolved(&abs_Int32)->returnTypeSymbol = &Int32Type;

    /// abs with Int32x2
    abs_Int32x2_arg.name = "val"_c;
    abs_Int32x2_arg.type = Type::FullType{ Int32x2Type.name };
    abs_Int32x2.name = "abs"_c;
    abs_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    abs_Int32x2.parameters = abs_Int32x2_args;
    Symbol::Resolved(&abs_Int32x2_arg)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&abs_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// abs with Int32x3
    abs_Int32x3_arg.name = "val"_c;
    abs_Int32x3_arg.type = Type::FullType{ Int32x3Type.name };
    abs_Int32x3.name = "abs"_c;
    abs_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    abs_Int32x3.parameters = abs_Int32x3_args;
    Symbol::Resolved(&abs_Int32x3_arg)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&abs_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// abs with Int32x4
    abs_Int32x4_arg.name = "val"_c;
    abs_Int32x4_arg.type = Type::FullType{ Int32x4Type.name };
    abs_Int32x4.name = "abs"_c;
    abs_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    abs_Int32x4.parameters = abs_Int32x4_args;
    Symbol::Resolved(&abs_Int32x4_arg)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&abs_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// abs with Int16
    abs_Int16_arg.name = "val"_c;
    abs_Int16_arg.type = Type::FullType{ Int16Type.name };
    abs_Int16.name = "abs"_c;
    abs_Int16.returnType = Type::FullType { Int16Type.name };
    abs_Int16.parameters = abs_Int16_args;
    Symbol::Resolved(&abs_Int16_arg)->typeSymbol = &Int16Type;
    Symbol::Resolved(&abs_Int16)->returnTypeSymbol = &Int16Type;

    /// abs with Int16x2
    abs_Int16x2_arg.name = "val"_c;
    abs_Int16x2_arg.type = Type::FullType{ Int16x2Type.name };
    abs_Int16x2.name = "abs"_c;
    abs_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    abs_Int16x2.parameters = abs_Int16x2_args;
    Symbol::Resolved(&abs_Int16x2_arg)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&abs_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// abs with Int16x3
    abs_Int16x3_arg.name = "val"_c;
    abs_Int16x3_arg.type = Type::FullType{ Int16x3Type.name };
    abs_Int16x3.name = "abs"_c;
    abs_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    abs_Int16x3.parameters = abs_Int16x3_args;
    Symbol::Resolved(&abs_Int16x3_arg)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&abs_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// abs with Int16x4
    abs_Int16x4_arg.name = "val"_c;
    abs_Int16x4_arg.type = Type::FullType{ Int16x4Type.name };
    abs_Int16x4.name = "abs"_c;
    abs_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    abs_Int16x4.parameters = abs_Int16x4_args;
    Symbol::Resolved(&abs_Int16x4_arg)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&abs_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// abs with Float32
    abs_Float32_arg.name = "val"_c;
    abs_Float32_arg.type = Type::FullType{ Float32Type.name };
    abs_Float32.name = "abs"_c;
    abs_Float32.returnType = Type::FullType { Float32Type.name };
    abs_Float32.parameters = abs_Float32_args;
    Symbol::Resolved(&abs_Float32_arg)->typeSymbol = &Float32Type;
    Symbol::Resolved(&abs_Float32)->returnTypeSymbol = &Float32Type;

    /// abs with Float32x2
    abs_Float32x2_arg.name = "val"_c;
    abs_Float32x2_arg.type = Type::FullType{ Float32x2Type.name };
    abs_Float32x2.name = "abs"_c;
    abs_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    abs_Float32x2.parameters = abs_Float32x2_args;
    Symbol::Resolved(&abs_Float32x2_arg)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&abs_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// abs with Float32x3
    abs_Float32x3_arg.name = "val"_c;
    abs_Float32x3_arg.type = Type::FullType{ Float32x3Type.name };
    abs_Float32x3.name = "abs"_c;
    abs_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    abs_Float32x3.parameters = abs_Float32x3_args;
    Symbol::Resolved(&abs_Float32x3_arg)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&abs_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// abs with Float32x4
    abs_Float32x4_arg.name = "val"_c;
    abs_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    abs_Float32x4.name = "abs"_c;
    abs_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    abs_Float32x4.parameters = abs_Float32x4_args;
    Symbol::Resolved(&abs_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&abs_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// abs with Float16
    abs_Float16_arg.name = "val"_c;
    abs_Float16_arg.type = Type::FullType{ Float16Type.name };
    abs_Float16.name = "abs"_c;
    abs_Float16.returnType = Type::FullType { Float16Type.name };
    abs_Float16.parameters = abs_Float16_args;
    Symbol::Resolved(&abs_Float16_arg)->typeSymbol = &Float16Type;
    Symbol::Resolved(&abs_Float16)->returnTypeSymbol = &Float16Type;

    /// abs with Float16x2
    abs_Float16x2_arg.name = "val"_c;
    abs_Float16x2_arg.type = Type::FullType{ Float16x2Type.name };
    abs_Float16x2.name = "abs"_c;
    abs_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    abs_Float16x2.parameters = abs_Float16x2_args;
    Symbol::Resolved(&abs_Float16x2_arg)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&abs_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// abs with Float16x3
    abs_Float16x3_arg.name = "val"_c;
    abs_Float16x3_arg.type = Type::FullType{ Float16x3Type.name };
    abs_Float16x3.name = "abs"_c;
    abs_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    abs_Float16x3.parameters = abs_Float16x3_args;
    Symbol::Resolved(&abs_Float16x3_arg)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&abs_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// abs with Float16x4
    abs_Float16x4_arg.name = "val"_c;
    abs_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    abs_Float16x4.name = "abs"_c;
    abs_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    abs_Float16x4.parameters = abs_Float16x4_args;
    Symbol::Resolved(&abs_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&abs_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// castToF16 with Float16x4
    castToF16_UInt16_arg.name = "val"_c;
    castToF16_UInt16_arg.type = Type::FullType{ Float16x4Type.name };
    castToF16_UInt16.name = "castToF16"_c;
    castToF16_UInt16.returnType = Type::FullType { Float16Type.name };
    castToF16_UInt16.parameters = castToF16_UInt16_args;
    Symbol::Resolved(&castToF16_UInt16_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&castToF16_UInt16)->returnTypeSymbol = &Float16Type;

    /// castToF16 with Float16x4
    castToF16_Int16_arg.name = "val"_c;
    castToF16_Int16_arg.type = Type::FullType{ Float16x4Type.name };
    castToF16_Int16.name = "castToF16"_c;
    castToF16_Int16.returnType = Type::FullType { Float16Type.name };
    castToF16_Int16.parameters = castToF16_Int16_args;
    Symbol::Resolved(&castToF16_Int16_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&castToF16_Int16)->returnTypeSymbol = &Float16Type;

    /// castToU16 with Float16x4
    castToU16_Float16_arg.name = "val"_c;
    castToU16_Float16_arg.type = Type::FullType{ Float16x4Type.name };
    castToU16_Float16.name = "castToU16"_c;
    castToU16_Float16.returnType = Type::FullType { UInt16Type.name };
    castToU16_Float16.parameters = castToU16_Float16_args;
    Symbol::Resolved(&castToU16_Float16_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&castToU16_Float16)->returnTypeSymbol = &UInt16Type;

    /// castToU16 with Float16x4
    castToU16_Int16_arg.name = "val"_c;
    castToU16_Int16_arg.type = Type::FullType{ Float16x4Type.name };
    castToU16_Int16.name = "castToU16"_c;
    castToU16_Int16.returnType = Type::FullType { UInt16Type.name };
    castToU16_Int16.parameters = castToU16_Int16_args;
    Symbol::Resolved(&castToU16_Int16_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&castToU16_Int16)->returnTypeSymbol = &UInt16Type;

    /// castToI16 with Float16x4
    castToI16_Float16_arg.name = "val"_c;
    castToI16_Float16_arg.type = Type::FullType{ Float16x4Type.name };
    castToI16_Float16.name = "castToI16"_c;
    castToI16_Float16.returnType = Type::FullType { Int16Type.name };
    castToI16_Float16.parameters = castToI16_Float16_args;
    Symbol::Resolved(&castToI16_Float16_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&castToI16_Float16)->returnTypeSymbol = &Int16Type;

    /// castToI16 with Float16x4
    castToI16_UInt16_arg.name = "val"_c;
    castToI16_UInt16_arg.type = Type::FullType{ Float16x4Type.name };
    castToI16_UInt16.name = "castToI16"_c;
    castToI16_UInt16.returnType = Type::FullType { Int16Type.name };
    castToI16_UInt16.parameters = castToI16_UInt16_args;
    Symbol::Resolved(&castToI16_UInt16_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&castToI16_UInt16)->returnTypeSymbol = &Int16Type;

    /// castToF32 with Float16x4
    castToF32_UInt32_arg.name = "val"_c;
    castToF32_UInt32_arg.type = Type::FullType{ Float16x4Type.name };
    castToF32_UInt32.name = "castToF32"_c;
    castToF32_UInt32.returnType = Type::FullType { Float32Type.name };
    castToF32_UInt32.parameters = castToF32_UInt32_args;
    Symbol::Resolved(&castToF32_UInt32_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&castToF32_UInt32)->returnTypeSymbol = &Float32Type;

    /// castToF32 with Float16x4
    castToF32_Int32_arg.name = "val"_c;
    castToF32_Int32_arg.type = Type::FullType{ Float16x4Type.name };
    castToF32_Int32.name = "castToF32"_c;
    castToF32_Int32.returnType = Type::FullType { Float32Type.name };
    castToF32_Int32.parameters = castToF32_Int32_args;
    Symbol::Resolved(&castToF32_Int32_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&castToF32_Int32)->returnTypeSymbol = &Float32Type;

    /// castToU32 with Float16x4
    castToU32_Float32_arg.name = "val"_c;
    castToU32_Float32_arg.type = Type::FullType{ Float16x4Type.name };
    castToU32_Float32.name = "castToU32"_c;
    castToU32_Float32.returnType = Type::FullType { UInt32Type.name };
    castToU32_Float32.parameters = castToU32_Float32_args;
    Symbol::Resolved(&castToU32_Float32_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&castToU32_Float32)->returnTypeSymbol = &UInt32Type;

    /// castToU32 with Float16x4
    castToU32_Int32_arg.name = "val"_c;
    castToU32_Int32_arg.type = Type::FullType{ Float16x4Type.name };
    castToU32_Int32.name = "castToU32"_c;
    castToU32_Int32.returnType = Type::FullType { UInt32Type.name };
    castToU32_Int32.parameters = castToU32_Int32_args;
    Symbol::Resolved(&castToU32_Int32_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&castToU32_Int32)->returnTypeSymbol = &UInt32Type;

    /// castToI32 with Float16x4
    castToI32_Float32_arg.name = "val"_c;
    castToI32_Float32_arg.type = Type::FullType{ Float16x4Type.name };
    castToI32_Float32.name = "castToI32"_c;
    castToI32_Float32.returnType = Type::FullType { Int32Type.name };
    castToI32_Float32.parameters = castToI32_Float32_args;
    Symbol::Resolved(&castToI32_Float32_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&castToI32_Float32)->returnTypeSymbol = &Int32Type;

    /// castToI32 with Float16x4
    castToI32_UInt32_arg.name = "val"_c;
    castToI32_UInt32_arg.type = Type::FullType{ Float16x4Type.name };
    castToI32_UInt32.name = "castToI32"_c;
    castToI32_UInt32.returnType = Type::FullType { Int32Type.name };
    castToI32_UInt32.parameters = castToI32_UInt32_args;
    Symbol::Resolved(&castToI32_UInt32_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&castToI32_UInt32)->returnTypeSymbol = &Int32Type;

    /// any with Bool8
    any_Bool8_arg.name = "val"_c;
    any_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    any_Bool8.name = "any"_c;
    any_Bool8.returnType = Type::FullType { Bool8Type.name };
    any_Bool8.parameters = any_Bool8_args;
    Symbol::Resolved(&any_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&any_Bool8)->returnTypeSymbol = &Bool8Type;

    /// any with Bool8x2
    any_Bool8x2_arg.name = "val"_c;
    any_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    any_Bool8x2.name = "any"_c;
    any_Bool8x2.returnType = Type::FullType { Bool8x2Type.name };
    any_Bool8x2.parameters = any_Bool8x2_args;
    Symbol::Resolved(&any_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&any_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    /// any with Bool8x3
    any_Bool8x3_arg.name = "val"_c;
    any_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    any_Bool8x3.name = "any"_c;
    any_Bool8x3.returnType = Type::FullType { Bool8x3Type.name };
    any_Bool8x3.parameters = any_Bool8x3_args;
    Symbol::Resolved(&any_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&any_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    /// any with Bool8x4
    any_Bool8x4_arg.name = "val"_c;
    any_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    any_Bool8x4.name = "any"_c;
    any_Bool8x4.returnType = Type::FullType { Bool8x4Type.name };
    any_Bool8x4.parameters = any_Bool8x4_args;
    Symbol::Resolved(&any_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&any_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    /// all with Bool8
    all_Bool8_arg.name = "val"_c;
    all_Bool8_arg.type = Type::FullType{ Bool8Type.name };
    all_Bool8.name = "all"_c;
    all_Bool8.returnType = Type::FullType { Bool8Type.name };
    all_Bool8.parameters = all_Bool8_args;
    Symbol::Resolved(&all_Bool8_arg)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&all_Bool8)->returnTypeSymbol = &Bool8Type;

    /// all with Bool8x2
    all_Bool8x2_arg.name = "val"_c;
    all_Bool8x2_arg.type = Type::FullType{ Bool8x2Type.name };
    all_Bool8x2.name = "all"_c;
    all_Bool8x2.returnType = Type::FullType { Bool8x2Type.name };
    all_Bool8x2.parameters = all_Bool8x2_args;
    Symbol::Resolved(&all_Bool8x2_arg)->typeSymbol = &Bool8x2Type;
    Symbol::Resolved(&all_Bool8x2)->returnTypeSymbol = &Bool8x2Type;

    /// all with Bool8x3
    all_Bool8x3_arg.name = "val"_c;
    all_Bool8x3_arg.type = Type::FullType{ Bool8x3Type.name };
    all_Bool8x3.name = "all"_c;
    all_Bool8x3.returnType = Type::FullType { Bool8x3Type.name };
    all_Bool8x3.parameters = all_Bool8x3_args;
    Symbol::Resolved(&all_Bool8x3_arg)->typeSymbol = &Bool8x3Type;
    Symbol::Resolved(&all_Bool8x3)->returnTypeSymbol = &Bool8x3Type;

    /// all with Bool8x4
    all_Bool8x4_arg.name = "val"_c;
    all_Bool8x4_arg.type = Type::FullType{ Bool8x4Type.name };
    all_Bool8x4.name = "all"_c;
    all_Bool8x4.returnType = Type::FullType { Bool8x4Type.name };
    all_Bool8x4.parameters = all_Bool8x4_args;
    Symbol::Resolved(&all_Bool8x4_arg)->typeSymbol = &Bool8x4Type;
    Symbol::Resolved(&all_Bool8x4)->returnTypeSymbol = &Bool8x4Type;

    /// transpose with Float32x2x2
    transpose_Float32x2x2_arg.name = "val"_c;
    transpose_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    transpose_Float32x2x2.name = "transpose"_c;
    transpose_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    transpose_Float32x2x2.parameters = transpose_Float32x2x2_args;
    Symbol::Resolved(&transpose_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&transpose_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// transpose with Float16x2x2
    transpose_Float16x2x2_arg.name = "val"_c;
    transpose_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    transpose_Float16x2x2.name = "transpose"_c;
    transpose_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    transpose_Float16x2x2.parameters = transpose_Float16x2x2_args;
    Symbol::Resolved(&transpose_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&transpose_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// transpose with Float32x2x3
    transpose_Float32x2x3_arg.name = "val"_c;
    transpose_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    transpose_Float32x2x3.name = "transpose"_c;
    transpose_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    transpose_Float32x2x3.parameters = transpose_Float32x2x3_args;
    Symbol::Resolved(&transpose_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&transpose_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// transpose with Float16x2x3
    transpose_Float16x2x3_arg.name = "val"_c;
    transpose_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    transpose_Float16x2x3.name = "transpose"_c;
    transpose_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    transpose_Float16x2x3.parameters = transpose_Float16x2x3_args;
    Symbol::Resolved(&transpose_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&transpose_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// transpose with Float32x2x4
    transpose_Float32x2x4_arg.name = "val"_c;
    transpose_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    transpose_Float32x2x4.name = "transpose"_c;
    transpose_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    transpose_Float32x2x4.parameters = transpose_Float32x2x4_args;
    Symbol::Resolved(&transpose_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&transpose_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// transpose with Float16x2x4
    transpose_Float16x2x4_arg.name = "val"_c;
    transpose_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    transpose_Float16x2x4.name = "transpose"_c;
    transpose_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    transpose_Float16x2x4.parameters = transpose_Float16x2x4_args;
    Symbol::Resolved(&transpose_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&transpose_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// transpose with Float32x3x2
    transpose_Float32x3x2_arg.name = "val"_c;
    transpose_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    transpose_Float32x3x2.name = "transpose"_c;
    transpose_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    transpose_Float32x3x2.parameters = transpose_Float32x3x2_args;
    Symbol::Resolved(&transpose_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&transpose_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// transpose with Float16x3x2
    transpose_Float16x3x2_arg.name = "val"_c;
    transpose_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    transpose_Float16x3x2.name = "transpose"_c;
    transpose_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    transpose_Float16x3x2.parameters = transpose_Float16x3x2_args;
    Symbol::Resolved(&transpose_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&transpose_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// transpose with Float32x3x3
    transpose_Float32x3x3_arg.name = "val"_c;
    transpose_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    transpose_Float32x3x3.name = "transpose"_c;
    transpose_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    transpose_Float32x3x3.parameters = transpose_Float32x3x3_args;
    Symbol::Resolved(&transpose_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&transpose_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// transpose with Float16x3x3
    transpose_Float16x3x3_arg.name = "val"_c;
    transpose_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    transpose_Float16x3x3.name = "transpose"_c;
    transpose_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    transpose_Float16x3x3.parameters = transpose_Float16x3x3_args;
    Symbol::Resolved(&transpose_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&transpose_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// transpose with Float32x3x4
    transpose_Float32x3x4_arg.name = "val"_c;
    transpose_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    transpose_Float32x3x4.name = "transpose"_c;
    transpose_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    transpose_Float32x3x4.parameters = transpose_Float32x3x4_args;
    Symbol::Resolved(&transpose_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&transpose_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// transpose with Float16x3x4
    transpose_Float16x3x4_arg.name = "val"_c;
    transpose_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    transpose_Float16x3x4.name = "transpose"_c;
    transpose_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    transpose_Float16x3x4.parameters = transpose_Float16x3x4_args;
    Symbol::Resolved(&transpose_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&transpose_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// transpose with Float32x4x2
    transpose_Float32x4x2_arg.name = "val"_c;
    transpose_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    transpose_Float32x4x2.name = "transpose"_c;
    transpose_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    transpose_Float32x4x2.parameters = transpose_Float32x4x2_args;
    Symbol::Resolved(&transpose_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&transpose_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// transpose with Float16x4x2
    transpose_Float16x4x2_arg.name = "val"_c;
    transpose_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    transpose_Float16x4x2.name = "transpose"_c;
    transpose_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    transpose_Float16x4x2.parameters = transpose_Float16x4x2_args;
    Symbol::Resolved(&transpose_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&transpose_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// transpose with Float32x4x3
    transpose_Float32x4x3_arg.name = "val"_c;
    transpose_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    transpose_Float32x4x3.name = "transpose"_c;
    transpose_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    transpose_Float32x4x3.parameters = transpose_Float32x4x3_args;
    Symbol::Resolved(&transpose_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&transpose_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// transpose with Float16x4x3
    transpose_Float16x4x3_arg.name = "val"_c;
    transpose_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    transpose_Float16x4x3.name = "transpose"_c;
    transpose_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    transpose_Float16x4x3.parameters = transpose_Float16x4x3_args;
    Symbol::Resolved(&transpose_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&transpose_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// transpose with Float32x4x4
    transpose_Float32x4x4_arg.name = "val"_c;
    transpose_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    transpose_Float32x4x4.name = "transpose"_c;
    transpose_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    transpose_Float32x4x4.parameters = transpose_Float32x4x4_args;
    Symbol::Resolved(&transpose_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&transpose_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// transpose with Float16x4x4
    transpose_Float16x4x4_arg.name = "val"_c;
    transpose_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    transpose_Float16x4x4.name = "transpose"_c;
    transpose_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    transpose_Float16x4x4.parameters = transpose_Float16x4x4_args;
    Symbol::Resolved(&transpose_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&transpose_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// inverse with Float32x2x2
    inverse_Float32x2x2_arg.name = "val"_c;
    inverse_Float32x2x2_arg.type = Type::FullType{ Float32x2x2Type.name };
    inverse_Float32x2x2.name = "inverse"_c;
    inverse_Float32x2x2.returnType = Type::FullType { Float32x2x2Type.name };
    inverse_Float32x2x2.parameters = inverse_Float32x2x2_args;
    Symbol::Resolved(&inverse_Float32x2x2_arg)->typeSymbol = &Float32x2x2Type;
    Symbol::Resolved(&inverse_Float32x2x2)->returnTypeSymbol = &Float32x2x2Type;

    /// inverse with Float16x2x2
    inverse_Float16x2x2_arg.name = "val"_c;
    inverse_Float16x2x2_arg.type = Type::FullType{ Float16x2x2Type.name };
    inverse_Float16x2x2.name = "inverse"_c;
    inverse_Float16x2x2.returnType = Type::FullType { Float16x2x2Type.name };
    inverse_Float16x2x2.parameters = inverse_Float16x2x2_args;
    Symbol::Resolved(&inverse_Float16x2x2_arg)->typeSymbol = &Float16x2x2Type;
    Symbol::Resolved(&inverse_Float16x2x2)->returnTypeSymbol = &Float16x2x2Type;

    /// inverse with Float32x2x3
    inverse_Float32x2x3_arg.name = "val"_c;
    inverse_Float32x2x3_arg.type = Type::FullType{ Float32x2x3Type.name };
    inverse_Float32x2x3.name = "inverse"_c;
    inverse_Float32x2x3.returnType = Type::FullType { Float32x2x3Type.name };
    inverse_Float32x2x3.parameters = inverse_Float32x2x3_args;
    Symbol::Resolved(&inverse_Float32x2x3_arg)->typeSymbol = &Float32x2x3Type;
    Symbol::Resolved(&inverse_Float32x2x3)->returnTypeSymbol = &Float32x2x3Type;

    /// inverse with Float16x2x3
    inverse_Float16x2x3_arg.name = "val"_c;
    inverse_Float16x2x3_arg.type = Type::FullType{ Float16x2x3Type.name };
    inverse_Float16x2x3.name = "inverse"_c;
    inverse_Float16x2x3.returnType = Type::FullType { Float16x2x3Type.name };
    inverse_Float16x2x3.parameters = inverse_Float16x2x3_args;
    Symbol::Resolved(&inverse_Float16x2x3_arg)->typeSymbol = &Float16x2x3Type;
    Symbol::Resolved(&inverse_Float16x2x3)->returnTypeSymbol = &Float16x2x3Type;

    /// inverse with Float32x2x4
    inverse_Float32x2x4_arg.name = "val"_c;
    inverse_Float32x2x4_arg.type = Type::FullType{ Float32x2x4Type.name };
    inverse_Float32x2x4.name = "inverse"_c;
    inverse_Float32x2x4.returnType = Type::FullType { Float32x2x4Type.name };
    inverse_Float32x2x4.parameters = inverse_Float32x2x4_args;
    Symbol::Resolved(&inverse_Float32x2x4_arg)->typeSymbol = &Float32x2x4Type;
    Symbol::Resolved(&inverse_Float32x2x4)->returnTypeSymbol = &Float32x2x4Type;

    /// inverse with Float16x2x4
    inverse_Float16x2x4_arg.name = "val"_c;
    inverse_Float16x2x4_arg.type = Type::FullType{ Float16x2x4Type.name };
    inverse_Float16x2x4.name = "inverse"_c;
    inverse_Float16x2x4.returnType = Type::FullType { Float16x2x4Type.name };
    inverse_Float16x2x4.parameters = inverse_Float16x2x4_args;
    Symbol::Resolved(&inverse_Float16x2x4_arg)->typeSymbol = &Float16x2x4Type;
    Symbol::Resolved(&inverse_Float16x2x4)->returnTypeSymbol = &Float16x2x4Type;

    /// inverse with Float32x3x2
    inverse_Float32x3x2_arg.name = "val"_c;
    inverse_Float32x3x2_arg.type = Type::FullType{ Float32x3x2Type.name };
    inverse_Float32x3x2.name = "inverse"_c;
    inverse_Float32x3x2.returnType = Type::FullType { Float32x3x2Type.name };
    inverse_Float32x3x2.parameters = inverse_Float32x3x2_args;
    Symbol::Resolved(&inverse_Float32x3x2_arg)->typeSymbol = &Float32x3x2Type;
    Symbol::Resolved(&inverse_Float32x3x2)->returnTypeSymbol = &Float32x3x2Type;

    /// inverse with Float16x3x2
    inverse_Float16x3x2_arg.name = "val"_c;
    inverse_Float16x3x2_arg.type = Type::FullType{ Float16x3x2Type.name };
    inverse_Float16x3x2.name = "inverse"_c;
    inverse_Float16x3x2.returnType = Type::FullType { Float16x3x2Type.name };
    inverse_Float16x3x2.parameters = inverse_Float16x3x2_args;
    Symbol::Resolved(&inverse_Float16x3x2_arg)->typeSymbol = &Float16x3x2Type;
    Symbol::Resolved(&inverse_Float16x3x2)->returnTypeSymbol = &Float16x3x2Type;

    /// inverse with Float32x3x3
    inverse_Float32x3x3_arg.name = "val"_c;
    inverse_Float32x3x3_arg.type = Type::FullType{ Float32x3x3Type.name };
    inverse_Float32x3x3.name = "inverse"_c;
    inverse_Float32x3x3.returnType = Type::FullType { Float32x3x3Type.name };
    inverse_Float32x3x3.parameters = inverse_Float32x3x3_args;
    Symbol::Resolved(&inverse_Float32x3x3_arg)->typeSymbol = &Float32x3x3Type;
    Symbol::Resolved(&inverse_Float32x3x3)->returnTypeSymbol = &Float32x3x3Type;

    /// inverse with Float16x3x3
    inverse_Float16x3x3_arg.name = "val"_c;
    inverse_Float16x3x3_arg.type = Type::FullType{ Float16x3x3Type.name };
    inverse_Float16x3x3.name = "inverse"_c;
    inverse_Float16x3x3.returnType = Type::FullType { Float16x3x3Type.name };
    inverse_Float16x3x3.parameters = inverse_Float16x3x3_args;
    Symbol::Resolved(&inverse_Float16x3x3_arg)->typeSymbol = &Float16x3x3Type;
    Symbol::Resolved(&inverse_Float16x3x3)->returnTypeSymbol = &Float16x3x3Type;

    /// inverse with Float32x3x4
    inverse_Float32x3x4_arg.name = "val"_c;
    inverse_Float32x3x4_arg.type = Type::FullType{ Float32x3x4Type.name };
    inverse_Float32x3x4.name = "inverse"_c;
    inverse_Float32x3x4.returnType = Type::FullType { Float32x3x4Type.name };
    inverse_Float32x3x4.parameters = inverse_Float32x3x4_args;
    Symbol::Resolved(&inverse_Float32x3x4_arg)->typeSymbol = &Float32x3x4Type;
    Symbol::Resolved(&inverse_Float32x3x4)->returnTypeSymbol = &Float32x3x4Type;

    /// inverse with Float16x3x4
    inverse_Float16x3x4_arg.name = "val"_c;
    inverse_Float16x3x4_arg.type = Type::FullType{ Float16x3x4Type.name };
    inverse_Float16x3x4.name = "inverse"_c;
    inverse_Float16x3x4.returnType = Type::FullType { Float16x3x4Type.name };
    inverse_Float16x3x4.parameters = inverse_Float16x3x4_args;
    Symbol::Resolved(&inverse_Float16x3x4_arg)->typeSymbol = &Float16x3x4Type;
    Symbol::Resolved(&inverse_Float16x3x4)->returnTypeSymbol = &Float16x3x4Type;

    /// inverse with Float32x4x2
    inverse_Float32x4x2_arg.name = "val"_c;
    inverse_Float32x4x2_arg.type = Type::FullType{ Float32x4x2Type.name };
    inverse_Float32x4x2.name = "inverse"_c;
    inverse_Float32x4x2.returnType = Type::FullType { Float32x4x2Type.name };
    inverse_Float32x4x2.parameters = inverse_Float32x4x2_args;
    Symbol::Resolved(&inverse_Float32x4x2_arg)->typeSymbol = &Float32x4x2Type;
    Symbol::Resolved(&inverse_Float32x4x2)->returnTypeSymbol = &Float32x4x2Type;

    /// inverse with Float16x4x2
    inverse_Float16x4x2_arg.name = "val"_c;
    inverse_Float16x4x2_arg.type = Type::FullType{ Float16x4x2Type.name };
    inverse_Float16x4x2.name = "inverse"_c;
    inverse_Float16x4x2.returnType = Type::FullType { Float16x4x2Type.name };
    inverse_Float16x4x2.parameters = inverse_Float16x4x2_args;
    Symbol::Resolved(&inverse_Float16x4x2_arg)->typeSymbol = &Float16x4x2Type;
    Symbol::Resolved(&inverse_Float16x4x2)->returnTypeSymbol = &Float16x4x2Type;

    /// inverse with Float32x4x3
    inverse_Float32x4x3_arg.name = "val"_c;
    inverse_Float32x4x3_arg.type = Type::FullType{ Float32x4x3Type.name };
    inverse_Float32x4x3.name = "inverse"_c;
    inverse_Float32x4x3.returnType = Type::FullType { Float32x4x3Type.name };
    inverse_Float32x4x3.parameters = inverse_Float32x4x3_args;
    Symbol::Resolved(&inverse_Float32x4x3_arg)->typeSymbol = &Float32x4x3Type;
    Symbol::Resolved(&inverse_Float32x4x3)->returnTypeSymbol = &Float32x4x3Type;

    /// inverse with Float16x4x3
    inverse_Float16x4x3_arg.name = "val"_c;
    inverse_Float16x4x3_arg.type = Type::FullType{ Float16x4x3Type.name };
    inverse_Float16x4x3.name = "inverse"_c;
    inverse_Float16x4x3.returnType = Type::FullType { Float16x4x3Type.name };
    inverse_Float16x4x3.parameters = inverse_Float16x4x3_args;
    Symbol::Resolved(&inverse_Float16x4x3_arg)->typeSymbol = &Float16x4x3Type;
    Symbol::Resolved(&inverse_Float16x4x3)->returnTypeSymbol = &Float16x4x3Type;

    /// inverse with Float32x4x4
    inverse_Float32x4x4_arg.name = "val"_c;
    inverse_Float32x4x4_arg.type = Type::FullType{ Float32x4x4Type.name };
    inverse_Float32x4x4.name = "inverse"_c;
    inverse_Float32x4x4.returnType = Type::FullType { Float32x4x4Type.name };
    inverse_Float32x4x4.parameters = inverse_Float32x4x4_args;
    Symbol::Resolved(&inverse_Float32x4x4_arg)->typeSymbol = &Float32x4x4Type;
    Symbol::Resolved(&inverse_Float32x4x4)->returnTypeSymbol = &Float32x4x4Type;

    /// inverse with Float16x4x4
    inverse_Float16x4x4_arg.name = "val"_c;
    inverse_Float16x4x4_arg.type = Type::FullType{ Float16x4x4Type.name };
    inverse_Float16x4x4.name = "inverse"_c;
    inverse_Float16x4x4.returnType = Type::FullType { Float16x4x4Type.name };
    inverse_Float16x4x4.parameters = inverse_Float16x4x4_args;
    Symbol::Resolved(&inverse_Float16x4x4_arg)->typeSymbol = &Float16x4x4Type;
    Symbol::Resolved(&inverse_Float16x4x4)->returnTypeSymbol = &Float16x4x4Type;

    /// OutputLayer
    VertexGetOutputLayer.name = "OutputLayer"_c;
    VertexGetOutputLayer.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetOutputLayer)->returnTypeSymbol = &UInt32Type;

    /// OutputViewport
    VertexGetOutputViewport.name = "OutputViewport"_c;
    VertexGetOutputViewport.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetOutputViewport)->returnTypeSymbol = &UInt32Type;

    /// Index
    VertexGetIndex.name = "Index"_c;
    VertexGetIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetIndex)->returnTypeSymbol = &UInt32Type;

    /// InstanceIndex
    VertexGetInstanceIndex.name = "InstanceIndex"_c;
    VertexGetInstanceIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetInstanceIndex)->returnTypeSymbol = &UInt32Type;

    /// BaseIndex
    VertexGetBaseIndex.name = "BaseIndex"_c;
    VertexGetBaseIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetBaseIndex)->returnTypeSymbol = &UInt32Type;

    /// BaseInstanceIndex
    VertexGetBaseInstanceIndex.name = "BaseInstanceIndex"_c;
    VertexGetBaseInstanceIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetBaseInstanceIndex)->returnTypeSymbol = &UInt32Type;

    /// DrawIndex
    VertexGetDrawIndex.name = "DrawIndex"_c;
    VertexGetDrawIndex.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&VertexGetDrawIndex)->returnTypeSymbol = &UInt32Type;

    /// OutputLayer with UInt16
    VertexSetOutputLayer_UInt16_arg.name = "val"_c;
    VertexSetOutputLayer_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    VertexSetOutputLayer_UInt16.name = "OutputLayer"_c;
    VertexSetOutputLayer_UInt16.returnType = Type::FullType { VoidType.name };
    VertexSetOutputLayer_UInt16.parameters = VertexSetOutputLayer_UInt16_args;
    Symbol::Resolved(&VertexSetOutputLayer_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&VertexSetOutputLayer_UInt16)->returnTypeSymbol = &VoidType;

    /// OutputLayer with UInt32
    VertexSetOutputLayer_UInt32_arg.name = "val"_c;
    VertexSetOutputLayer_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    VertexSetOutputLayer_UInt32.name = "OutputLayer"_c;
    VertexSetOutputLayer_UInt32.returnType = Type::FullType { VoidType.name };
    VertexSetOutputLayer_UInt32.parameters = VertexSetOutputLayer_UInt32_args;
    Symbol::Resolved(&VertexSetOutputLayer_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&VertexSetOutputLayer_UInt32)->returnTypeSymbol = &VoidType;

    /// OutputViewport with UInt16
    VertexSetOutputViewport_UInt16_arg.name = "val"_c;
    VertexSetOutputViewport_UInt16_arg.type = Type::FullType{ UInt16Type.name };
    VertexSetOutputViewport_UInt16.name = "OutputViewport"_c;
    VertexSetOutputViewport_UInt16.returnType = Type::FullType { VoidType.name };
    VertexSetOutputViewport_UInt16.parameters = VertexSetOutputViewport_UInt16_args;
    Symbol::Resolved(&VertexSetOutputViewport_UInt16_arg)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&VertexSetOutputViewport_UInt16)->returnTypeSymbol = &VoidType;

    /// OutputViewport with UInt32
    VertexSetOutputViewport_UInt32_arg.name = "val"_c;
    VertexSetOutputViewport_UInt32_arg.type = Type::FullType{ UInt32Type.name };
    VertexSetOutputViewport_UInt32.name = "OutputViewport"_c;
    VertexSetOutputViewport_UInt32.returnType = Type::FullType { VoidType.name };
    VertexSetOutputViewport_UInt32.parameters = VertexSetOutputViewport_UInt32_args;
    Symbol::Resolved(&VertexSetOutputViewport_UInt32_arg)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&VertexSetOutputViewport_UInt32)->returnTypeSymbol = &VoidType;

    /// vertexExportExportCoordinates with Float32x4
    VertexExportCoordinates_Float32x4_arg.name = "val"_c;
    VertexExportCoordinates_Float32x4_arg.type = Type::FullType{ Float32x4Type.name };
    VertexExportCoordinates_Float32x4.name = "vertexExportExportCoordinates"_c;
    VertexExportCoordinates_Float32x4.returnType = Type::FullType { VoidType.name };
    VertexExportCoordinates_Float32x4.parameters = VertexExportCoordinates_Float32x4_args;
    Symbol::Resolved(&VertexExportCoordinates_Float32x4_arg)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&VertexExportCoordinates_Float32x4)->returnTypeSymbol = &VoidType;

    /// vertexExportExportCoordinates with Float16x4
    VertexExportCoordinates_Float16x4_arg.name = "val"_c;
    VertexExportCoordinates_Float16x4_arg.type = Type::FullType{ Float16x4Type.name };
    VertexExportCoordinates_Float16x4.name = "vertexExportExportCoordinates"_c;
    VertexExportCoordinates_Float16x4.returnType = Type::FullType { VoidType.name };
    VertexExportCoordinates_Float16x4.parameters = VertexExportCoordinates_Float16x4_args;
    Symbol::Resolved(&VertexExportCoordinates_Float16x4_arg)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&VertexExportCoordinates_Float16x4)->returnTypeSymbol = &VoidType;

    /// geometryExportVertex
    GeometryExportVertex.name = "geometryExportVertex"_c;
    GeometryExportVertex.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&GeometryExportVertex)->returnTypeSymbol = &VoidType;

    /// geometryExportPrimitive
    GeometryExportPrimitive.name = "geometryExportPrimitive"_c;
    GeometryExportPrimitive.returnType = Type::FullType { VoidType.name };
    Symbol::Resolved(&GeometryExportPrimitive)->returnTypeSymbol = &VoidType;

    /// pixelGetCoordinates
    PixelGetCoordinates_Float32x4.name = "pixelGetCoordinates"_c;
    PixelGetCoordinates_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    Symbol::Resolved(&PixelGetCoordinates_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// pixelGetCoordinates
    PixelGetCoordinates_Float16x4.name = "pixelGetCoordinates"_c;
    PixelGetCoordinates_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    Symbol::Resolved(&PixelGetCoordinates_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// pixelGetDepth
    PixelGetDepth.name = "pixelGetDepth"_c;
    PixelGetDepth.returnType = Type::FullType { Float32Type.name };
    Symbol::Resolved(&PixelGetDepth)->returnTypeSymbol = &Float32Type;

    /// pixelSetDepth with Float32
    PixelSetDepth_val.name = "val"_c;
    PixelSetDepth_val.type = Type::FullType{ Float32Type.name };
    PixelSetDepth.name = "pixelSetDepth"_c;
    PixelSetDepth.returnType = Type::FullType { VoidType.name };
    PixelSetDepth.parameters = PixelSetDepth_args;
    Symbol::Resolved(&PixelSetDepth_val)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelSetDepth)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32, Int32
    PixelExportColor_Float32_Int32_color.name = "color"_c;
    PixelExportColor_Float32_Int32_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_Int32_index.name = "index"_c;
    PixelExportColor_Float32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32_Int32_index.type.literal = true;
    PixelExportColor_Float32_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32_Int32.parameters = PixelExportColor_Float32_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float32_Int32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32, UInt32
    PixelExportColor_Float32_UInt32_color.name = "color"_c;
    PixelExportColor_Float32_UInt32_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_UInt32_index.name = "index"_c;
    PixelExportColor_Float32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32_UInt32_index.type.literal = true;
    PixelExportColor_Float32_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32_UInt32.parameters = PixelExportColor_Float32_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32, Int16
    PixelExportColor_Float32_Int16_color.name = "color"_c;
    PixelExportColor_Float32_Int16_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_Int16_index.name = "index"_c;
    PixelExportColor_Float32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32_Int16_index.type.literal = true;
    PixelExportColor_Float32_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32_Int16.parameters = PixelExportColor_Float32_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float32_Int16_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32, UInt16
    PixelExportColor_Float32_UInt16_color.name = "color"_c;
    PixelExportColor_Float32_UInt16_color.type = Type::FullType{ Float32Type.name };
    PixelExportColor_Float32_UInt16_index.name = "index"_c;
    PixelExportColor_Float32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32_UInt16_index.type.literal = true;
    PixelExportColor_Float32_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32_UInt16.parameters = PixelExportColor_Float32_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16_color)->typeSymbol = &Float32Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x2, Int32
    PixelExportColor_Float32x2_Int32_color.name = "color"_c;
    PixelExportColor_Float32x2_Int32_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_Int32_index.name = "index"_c;
    PixelExportColor_Float32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x2_Int32_index.type.literal = true;
    PixelExportColor_Float32x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x2_Int32.parameters = PixelExportColor_Float32x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x2, UInt32
    PixelExportColor_Float32x2_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x2_UInt32_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x2_UInt32_index.type.literal = true;
    PixelExportColor_Float32x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x2_UInt32.parameters = PixelExportColor_Float32x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x2, Int16
    PixelExportColor_Float32x2_Int16_color.name = "color"_c;
    PixelExportColor_Float32x2_Int16_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_Int16_index.name = "index"_c;
    PixelExportColor_Float32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x2_Int16_index.type.literal = true;
    PixelExportColor_Float32x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x2_Int16.parameters = PixelExportColor_Float32x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x2, UInt16
    PixelExportColor_Float32x2_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x2_UInt16_color.type = Type::FullType{ Float32x2Type.name };
    PixelExportColor_Float32x2_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x2_UInt16_index.type.literal = true;
    PixelExportColor_Float32x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x2_UInt16.parameters = PixelExportColor_Float32x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16_color)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x3, Int32
    PixelExportColor_Float32x3_Int32_color.name = "color"_c;
    PixelExportColor_Float32x3_Int32_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_Int32_index.name = "index"_c;
    PixelExportColor_Float32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x3_Int32_index.type.literal = true;
    PixelExportColor_Float32x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x3_Int32.parameters = PixelExportColor_Float32x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x3, UInt32
    PixelExportColor_Float32x3_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x3_UInt32_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x3_UInt32_index.type.literal = true;
    PixelExportColor_Float32x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x3_UInt32.parameters = PixelExportColor_Float32x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x3, Int16
    PixelExportColor_Float32x3_Int16_color.name = "color"_c;
    PixelExportColor_Float32x3_Int16_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_Int16_index.name = "index"_c;
    PixelExportColor_Float32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x3_Int16_index.type.literal = true;
    PixelExportColor_Float32x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x3_Int16.parameters = PixelExportColor_Float32x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x3, UInt16
    PixelExportColor_Float32x3_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x3_UInt16_color.type = Type::FullType{ Float32x3Type.name };
    PixelExportColor_Float32x3_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x3_UInt16_index.type.literal = true;
    PixelExportColor_Float32x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x3_UInt16.parameters = PixelExportColor_Float32x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16_color)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x4, Int32
    PixelExportColor_Float32x4_Int32_color.name = "color"_c;
    PixelExportColor_Float32x4_Int32_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_Int32_index.name = "index"_c;
    PixelExportColor_Float32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float32x4_Int32_index.type.literal = true;
    PixelExportColor_Float32x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x4_Int32.parameters = PixelExportColor_Float32x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x4, UInt32
    PixelExportColor_Float32x4_UInt32_color.name = "color"_c;
    PixelExportColor_Float32x4_UInt32_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_UInt32_index.name = "index"_c;
    PixelExportColor_Float32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float32x4_UInt32_index.type.literal = true;
    PixelExportColor_Float32x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x4_UInt32.parameters = PixelExportColor_Float32x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x4, Int16
    PixelExportColor_Float32x4_Int16_color.name = "color"_c;
    PixelExportColor_Float32x4_Int16_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_Int16_index.name = "index"_c;
    PixelExportColor_Float32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float32x4_Int16_index.type.literal = true;
    PixelExportColor_Float32x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x4_Int16.parameters = PixelExportColor_Float32x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float32x4, UInt16
    PixelExportColor_Float32x4_UInt16_color.name = "color"_c;
    PixelExportColor_Float32x4_UInt16_color.type = Type::FullType{ Float32x4Type.name };
    PixelExportColor_Float32x4_UInt16_index.name = "index"_c;
    PixelExportColor_Float32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float32x4_UInt16_index.type.literal = true;
    PixelExportColor_Float32x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float32x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float32x4_UInt16.parameters = PixelExportColor_Float32x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16_color)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float32x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16, Int32
    PixelExportColor_Float16_Int32_color.name = "color"_c;
    PixelExportColor_Float16_Int32_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_Int32_index.name = "index"_c;
    PixelExportColor_Float16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16_Int32_index.type.literal = true;
    PixelExportColor_Float16_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16_Int32.parameters = PixelExportColor_Float16_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float16_Int32_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16, UInt32
    PixelExportColor_Float16_UInt32_color.name = "color"_c;
    PixelExportColor_Float16_UInt32_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_UInt32_index.name = "index"_c;
    PixelExportColor_Float16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16_UInt32_index.type.literal = true;
    PixelExportColor_Float16_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16_UInt32.parameters = PixelExportColor_Float16_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16, Int16
    PixelExportColor_Float16_Int16_color.name = "color"_c;
    PixelExportColor_Float16_Int16_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_Int16_index.name = "index"_c;
    PixelExportColor_Float16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16_Int16_index.type.literal = true;
    PixelExportColor_Float16_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16_Int16.parameters = PixelExportColor_Float16_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float16_Int16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16, UInt16
    PixelExportColor_Float16_UInt16_color.name = "color"_c;
    PixelExportColor_Float16_UInt16_color.type = Type::FullType{ Float16Type.name };
    PixelExportColor_Float16_UInt16_index.name = "index"_c;
    PixelExportColor_Float16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16_UInt16_index.type.literal = true;
    PixelExportColor_Float16_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16_UInt16.parameters = PixelExportColor_Float16_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16_color)->typeSymbol = &Float16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x2, Int32
    PixelExportColor_Float16x2_Int32_color.name = "color"_c;
    PixelExportColor_Float16x2_Int32_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_Int32_index.name = "index"_c;
    PixelExportColor_Float16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x2_Int32_index.type.literal = true;
    PixelExportColor_Float16x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x2_Int32.parameters = PixelExportColor_Float16x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x2, UInt32
    PixelExportColor_Float16x2_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x2_UInt32_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x2_UInt32_index.type.literal = true;
    PixelExportColor_Float16x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x2_UInt32.parameters = PixelExportColor_Float16x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x2, Int16
    PixelExportColor_Float16x2_Int16_color.name = "color"_c;
    PixelExportColor_Float16x2_Int16_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_Int16_index.name = "index"_c;
    PixelExportColor_Float16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x2_Int16_index.type.literal = true;
    PixelExportColor_Float16x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x2_Int16.parameters = PixelExportColor_Float16x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x2, UInt16
    PixelExportColor_Float16x2_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x2_UInt16_color.type = Type::FullType{ Float16x2Type.name };
    PixelExportColor_Float16x2_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x2_UInt16_index.type.literal = true;
    PixelExportColor_Float16x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x2_UInt16.parameters = PixelExportColor_Float16x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16_color)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x3, Int32
    PixelExportColor_Float16x3_Int32_color.name = "color"_c;
    PixelExportColor_Float16x3_Int32_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_Int32_index.name = "index"_c;
    PixelExportColor_Float16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x3_Int32_index.type.literal = true;
    PixelExportColor_Float16x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x3_Int32.parameters = PixelExportColor_Float16x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x3, UInt32
    PixelExportColor_Float16x3_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x3_UInt32_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x3_UInt32_index.type.literal = true;
    PixelExportColor_Float16x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x3_UInt32.parameters = PixelExportColor_Float16x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x3, Int16
    PixelExportColor_Float16x3_Int16_color.name = "color"_c;
    PixelExportColor_Float16x3_Int16_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_Int16_index.name = "index"_c;
    PixelExportColor_Float16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x3_Int16_index.type.literal = true;
    PixelExportColor_Float16x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x3_Int16.parameters = PixelExportColor_Float16x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x3, UInt16
    PixelExportColor_Float16x3_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x3_UInt16_color.type = Type::FullType{ Float16x3Type.name };
    PixelExportColor_Float16x3_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x3_UInt16_index.type.literal = true;
    PixelExportColor_Float16x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x3_UInt16.parameters = PixelExportColor_Float16x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16_color)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x4, Int32
    PixelExportColor_Float16x4_Int32_color.name = "color"_c;
    PixelExportColor_Float16x4_Int32_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_Int32_index.name = "index"_c;
    PixelExportColor_Float16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Float16x4_Int32_index.type.literal = true;
    PixelExportColor_Float16x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x4_Int32.parameters = PixelExportColor_Float16x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x4, UInt32
    PixelExportColor_Float16x4_UInt32_color.name = "color"_c;
    PixelExportColor_Float16x4_UInt32_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_UInt32_index.name = "index"_c;
    PixelExportColor_Float16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Float16x4_UInt32_index.type.literal = true;
    PixelExportColor_Float16x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x4_UInt32.parameters = PixelExportColor_Float16x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x4, Int16
    PixelExportColor_Float16x4_Int16_color.name = "color"_c;
    PixelExportColor_Float16x4_Int16_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_Int16_index.name = "index"_c;
    PixelExportColor_Float16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Float16x4_Int16_index.type.literal = true;
    PixelExportColor_Float16x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x4_Int16.parameters = PixelExportColor_Float16x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Float16x4, UInt16
    PixelExportColor_Float16x4_UInt16_color.name = "color"_c;
    PixelExportColor_Float16x4_UInt16_color.type = Type::FullType{ Float16x4Type.name };
    PixelExportColor_Float16x4_UInt16_index.name = "index"_c;
    PixelExportColor_Float16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Float16x4_UInt16_index.type.literal = true;
    PixelExportColor_Float16x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Float16x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Float16x4_UInt16.parameters = PixelExportColor_Float16x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16_color)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Float16x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32, Int32
    PixelExportColor_Int32_Int32_color.name = "color"_c;
    PixelExportColor_Int32_Int32_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int32_index.name = "index"_c;
    PixelExportColor_Int32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int32_index.type.literal = true;
    PixelExportColor_Int32_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32_Int32.parameters = PixelExportColor_Int32_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int32_Int32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32, UInt32
    PixelExportColor_Int32_UInt32_color.name = "color"_c;
    PixelExportColor_Int32_UInt32_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_UInt32_index.name = "index"_c;
    PixelExportColor_Int32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32_UInt32_index.type.literal = true;
    PixelExportColor_Int32_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32_UInt32.parameters = PixelExportColor_Int32_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32, Int16
    PixelExportColor_Int32_Int16_color.name = "color"_c;
    PixelExportColor_Int32_Int16_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_Int16_index.name = "index"_c;
    PixelExportColor_Int32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32_Int16_index.type.literal = true;
    PixelExportColor_Int32_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32_Int16.parameters = PixelExportColor_Int32_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int32_Int16_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32, UInt16
    PixelExportColor_Int32_UInt16_color.name = "color"_c;
    PixelExportColor_Int32_UInt16_color.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32_UInt16_index.name = "index"_c;
    PixelExportColor_Int32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32_UInt16_index.type.literal = true;
    PixelExportColor_Int32_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32_UInt16.parameters = PixelExportColor_Int32_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16_color)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x2, Int32
    PixelExportColor_Int32x2_Int32_color.name = "color"_c;
    PixelExportColor_Int32x2_Int32_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_Int32_index.name = "index"_c;
    PixelExportColor_Int32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x2_Int32_index.type.literal = true;
    PixelExportColor_Int32x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x2_Int32.parameters = PixelExportColor_Int32x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x2, UInt32
    PixelExportColor_Int32x2_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x2_UInt32_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x2_UInt32_index.type.literal = true;
    PixelExportColor_Int32x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x2_UInt32.parameters = PixelExportColor_Int32x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x2, Int16
    PixelExportColor_Int32x2_Int16_color.name = "color"_c;
    PixelExportColor_Int32x2_Int16_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_Int16_index.name = "index"_c;
    PixelExportColor_Int32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x2_Int16_index.type.literal = true;
    PixelExportColor_Int32x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x2_Int16.parameters = PixelExportColor_Int32x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x2, UInt16
    PixelExportColor_Int32x2_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x2_UInt16_color.type = Type::FullType{ Int32x2Type.name };
    PixelExportColor_Int32x2_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x2_UInt16_index.type.literal = true;
    PixelExportColor_Int32x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x2_UInt16.parameters = PixelExportColor_Int32x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16_color)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x3, Int32
    PixelExportColor_Int32x3_Int32_color.name = "color"_c;
    PixelExportColor_Int32x3_Int32_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_Int32_index.name = "index"_c;
    PixelExportColor_Int32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x3_Int32_index.type.literal = true;
    PixelExportColor_Int32x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x3_Int32.parameters = PixelExportColor_Int32x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x3, UInt32
    PixelExportColor_Int32x3_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x3_UInt32_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x3_UInt32_index.type.literal = true;
    PixelExportColor_Int32x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x3_UInt32.parameters = PixelExportColor_Int32x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x3, Int16
    PixelExportColor_Int32x3_Int16_color.name = "color"_c;
    PixelExportColor_Int32x3_Int16_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_Int16_index.name = "index"_c;
    PixelExportColor_Int32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x3_Int16_index.type.literal = true;
    PixelExportColor_Int32x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x3_Int16.parameters = PixelExportColor_Int32x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x3, UInt16
    PixelExportColor_Int32x3_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x3_UInt16_color.type = Type::FullType{ Int32x3Type.name };
    PixelExportColor_Int32x3_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x3_UInt16_index.type.literal = true;
    PixelExportColor_Int32x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x3_UInt16.parameters = PixelExportColor_Int32x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16_color)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x4, Int32
    PixelExportColor_Int32x4_Int32_color.name = "color"_c;
    PixelExportColor_Int32x4_Int32_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_Int32_index.name = "index"_c;
    PixelExportColor_Int32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int32x4_Int32_index.type.literal = true;
    PixelExportColor_Int32x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x4_Int32.parameters = PixelExportColor_Int32x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x4, UInt32
    PixelExportColor_Int32x4_UInt32_color.name = "color"_c;
    PixelExportColor_Int32x4_UInt32_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_UInt32_index.name = "index"_c;
    PixelExportColor_Int32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int32x4_UInt32_index.type.literal = true;
    PixelExportColor_Int32x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x4_UInt32.parameters = PixelExportColor_Int32x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x4, Int16
    PixelExportColor_Int32x4_Int16_color.name = "color"_c;
    PixelExportColor_Int32x4_Int16_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_Int16_index.name = "index"_c;
    PixelExportColor_Int32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int32x4_Int16_index.type.literal = true;
    PixelExportColor_Int32x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x4_Int16.parameters = PixelExportColor_Int32x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int32x4, UInt16
    PixelExportColor_Int32x4_UInt16_color.name = "color"_c;
    PixelExportColor_Int32x4_UInt16_color.type = Type::FullType{ Int32x4Type.name };
    PixelExportColor_Int32x4_UInt16_index.name = "index"_c;
    PixelExportColor_Int32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int32x4_UInt16_index.type.literal = true;
    PixelExportColor_Int32x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int32x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int32x4_UInt16.parameters = PixelExportColor_Int32x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16_color)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int32x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16, Int32
    PixelExportColor_Int16_Int32_color.name = "color"_c;
    PixelExportColor_Int16_Int32_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int32_index.name = "index"_c;
    PixelExportColor_Int16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16_Int32_index.type.literal = true;
    PixelExportColor_Int16_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16_Int32.parameters = PixelExportColor_Int16_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int16_Int32_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16, UInt32
    PixelExportColor_Int16_UInt32_color.name = "color"_c;
    PixelExportColor_Int16_UInt32_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_UInt32_index.name = "index"_c;
    PixelExportColor_Int16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16_UInt32_index.type.literal = true;
    PixelExportColor_Int16_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16_UInt32.parameters = PixelExportColor_Int16_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16, Int16
    PixelExportColor_Int16_Int16_color.name = "color"_c;
    PixelExportColor_Int16_Int16_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int16_index.name = "index"_c;
    PixelExportColor_Int16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_Int16_index.type.literal = true;
    PixelExportColor_Int16_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16_Int16.parameters = PixelExportColor_Int16_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int16_Int16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16, UInt16
    PixelExportColor_Int16_UInt16_color.name = "color"_c;
    PixelExportColor_Int16_UInt16_color.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16_UInt16_index.name = "index"_c;
    PixelExportColor_Int16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16_UInt16_index.type.literal = true;
    PixelExportColor_Int16_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16_UInt16.parameters = PixelExportColor_Int16_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16_color)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x2, Int32
    PixelExportColor_Int16x2_Int32_color.name = "color"_c;
    PixelExportColor_Int16x2_Int32_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_Int32_index.name = "index"_c;
    PixelExportColor_Int16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x2_Int32_index.type.literal = true;
    PixelExportColor_Int16x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x2_Int32.parameters = PixelExportColor_Int16x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x2, UInt32
    PixelExportColor_Int16x2_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x2_UInt32_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x2_UInt32_index.type.literal = true;
    PixelExportColor_Int16x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x2_UInt32.parameters = PixelExportColor_Int16x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x2, Int16
    PixelExportColor_Int16x2_Int16_color.name = "color"_c;
    PixelExportColor_Int16x2_Int16_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_Int16_index.name = "index"_c;
    PixelExportColor_Int16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x2_Int16_index.type.literal = true;
    PixelExportColor_Int16x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x2_Int16.parameters = PixelExportColor_Int16x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x2, UInt16
    PixelExportColor_Int16x2_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x2_UInt16_color.type = Type::FullType{ Int16x2Type.name };
    PixelExportColor_Int16x2_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x2_UInt16_index.type.literal = true;
    PixelExportColor_Int16x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x2_UInt16.parameters = PixelExportColor_Int16x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16_color)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x3, Int32
    PixelExportColor_Int16x3_Int32_color.name = "color"_c;
    PixelExportColor_Int16x3_Int32_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_Int32_index.name = "index"_c;
    PixelExportColor_Int16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x3_Int32_index.type.literal = true;
    PixelExportColor_Int16x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x3_Int32.parameters = PixelExportColor_Int16x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x3, UInt32
    PixelExportColor_Int16x3_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x3_UInt32_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x3_UInt32_index.type.literal = true;
    PixelExportColor_Int16x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x3_UInt32.parameters = PixelExportColor_Int16x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x3, Int16
    PixelExportColor_Int16x3_Int16_color.name = "color"_c;
    PixelExportColor_Int16x3_Int16_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_Int16_index.name = "index"_c;
    PixelExportColor_Int16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x3_Int16_index.type.literal = true;
    PixelExportColor_Int16x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x3_Int16.parameters = PixelExportColor_Int16x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x3, UInt16
    PixelExportColor_Int16x3_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x3_UInt16_color.type = Type::FullType{ Int16x3Type.name };
    PixelExportColor_Int16x3_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x3_UInt16_index.type.literal = true;
    PixelExportColor_Int16x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x3_UInt16.parameters = PixelExportColor_Int16x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16_color)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x4, Int32
    PixelExportColor_Int16x4_Int32_color.name = "color"_c;
    PixelExportColor_Int16x4_Int32_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_Int32_index.name = "index"_c;
    PixelExportColor_Int16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_Int16x4_Int32_index.type.literal = true;
    PixelExportColor_Int16x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x4_Int32.parameters = PixelExportColor_Int16x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x4, UInt32
    PixelExportColor_Int16x4_UInt32_color.name = "color"_c;
    PixelExportColor_Int16x4_UInt32_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_UInt32_index.name = "index"_c;
    PixelExportColor_Int16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_Int16x4_UInt32_index.type.literal = true;
    PixelExportColor_Int16x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x4_UInt32.parameters = PixelExportColor_Int16x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x4, Int16
    PixelExportColor_Int16x4_Int16_color.name = "color"_c;
    PixelExportColor_Int16x4_Int16_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_Int16_index.name = "index"_c;
    PixelExportColor_Int16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_Int16x4_Int16_index.type.literal = true;
    PixelExportColor_Int16x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x4_Int16.parameters = PixelExportColor_Int16x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with Int16x4, UInt16
    PixelExportColor_Int16x4_UInt16_color.name = "color"_c;
    PixelExportColor_Int16x4_UInt16_color.type = Type::FullType{ Int16x4Type.name };
    PixelExportColor_Int16x4_UInt16_index.name = "index"_c;
    PixelExportColor_Int16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_Int16x4_UInt16_index.type.literal = true;
    PixelExportColor_Int16x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_Int16x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_Int16x4_UInt16.parameters = PixelExportColor_Int16x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16_color)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_Int16x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32, Int32
    PixelExportColor_UInt32_Int32_color.name = "color"_c;
    PixelExportColor_UInt32_Int32_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_Int32_index.name = "index"_c;
    PixelExportColor_UInt32_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32_Int32_index.type.literal = true;
    PixelExportColor_UInt32_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32_Int32.parameters = PixelExportColor_UInt32_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32, UInt32
    PixelExportColor_UInt32_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32_UInt32_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt32_index.type.literal = true;
    PixelExportColor_UInt32_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32_UInt32.parameters = PixelExportColor_UInt32_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32, Int16
    PixelExportColor_UInt32_Int16_color.name = "color"_c;
    PixelExportColor_UInt32_Int16_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_Int16_index.name = "index"_c;
    PixelExportColor_UInt32_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32_Int16_index.type.literal = true;
    PixelExportColor_UInt32_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32_Int16.parameters = PixelExportColor_UInt32_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32, UInt16
    PixelExportColor_UInt32_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32_UInt16_color.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32_UInt16_index.type.literal = true;
    PixelExportColor_UInt32_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32_UInt16.parameters = PixelExportColor_UInt32_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16_color)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x2, Int32
    PixelExportColor_UInt32x2_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x2_Int32_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x2_Int32_index.type.literal = true;
    PixelExportColor_UInt32x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x2_Int32.parameters = PixelExportColor_UInt32x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x2, UInt32
    PixelExportColor_UInt32x2_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x2_UInt32_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x2_UInt32_index.type.literal = true;
    PixelExportColor_UInt32x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x2_UInt32.parameters = PixelExportColor_UInt32x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x2, Int16
    PixelExportColor_UInt32x2_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x2_Int16_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x2_Int16_index.type.literal = true;
    PixelExportColor_UInt32x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x2_Int16.parameters = PixelExportColor_UInt32x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x2, UInt16
    PixelExportColor_UInt32x2_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x2_UInt16_color.type = Type::FullType{ UInt32x2Type.name };
    PixelExportColor_UInt32x2_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x2_UInt16_index.type.literal = true;
    PixelExportColor_UInt32x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x2_UInt16.parameters = PixelExportColor_UInt32x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16_color)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, Int32
    PixelExportColor_UInt32x3_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x3_Int32_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x3_Int32_index.type.literal = true;
    PixelExportColor_UInt32x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_Int32.parameters = PixelExportColor_UInt32x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, UInt32
    PixelExportColor_UInt32x3_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x3_UInt32_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x3_UInt32_index.type.literal = true;
    PixelExportColor_UInt32x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_UInt32.parameters = PixelExportColor_UInt32x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, Int16
    PixelExportColor_UInt32x3_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x3_Int16_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x3_Int16_index.type.literal = true;
    PixelExportColor_UInt32x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_Int16.parameters = PixelExportColor_UInt32x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x3, UInt16
    PixelExportColor_UInt32x3_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x3_UInt16_color.type = Type::FullType{ UInt32x3Type.name };
    PixelExportColor_UInt32x3_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x3_UInt16_index.type.literal = true;
    PixelExportColor_UInt32x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x3_UInt16.parameters = PixelExportColor_UInt32x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16_color)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, Int32
    PixelExportColor_UInt32x4_Int32_color.name = "color"_c;
    PixelExportColor_UInt32x4_Int32_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_Int32_index.name = "index"_c;
    PixelExportColor_UInt32x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt32x4_Int32_index.type.literal = true;
    PixelExportColor_UInt32x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_Int32.parameters = PixelExportColor_UInt32x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, UInt32
    PixelExportColor_UInt32x4_UInt32_color.name = "color"_c;
    PixelExportColor_UInt32x4_UInt32_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_UInt32_index.name = "index"_c;
    PixelExportColor_UInt32x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt32x4_UInt32_index.type.literal = true;
    PixelExportColor_UInt32x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_UInt32.parameters = PixelExportColor_UInt32x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, Int16
    PixelExportColor_UInt32x4_Int16_color.name = "color"_c;
    PixelExportColor_UInt32x4_Int16_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_Int16_index.name = "index"_c;
    PixelExportColor_UInt32x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt32x4_Int16_index.type.literal = true;
    PixelExportColor_UInt32x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_Int16.parameters = PixelExportColor_UInt32x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt32x4, UInt16
    PixelExportColor_UInt32x4_UInt16_color.name = "color"_c;
    PixelExportColor_UInt32x4_UInt16_color.type = Type::FullType{ UInt32x4Type.name };
    PixelExportColor_UInt32x4_UInt16_index.name = "index"_c;
    PixelExportColor_UInt32x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt32x4_UInt16_index.type.literal = true;
    PixelExportColor_UInt32x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt32x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt32x4_UInt16.parameters = PixelExportColor_UInt32x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16_color)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt32x4_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, Int32
    PixelExportColor_UInt16_Int32_color.name = "color"_c;
    PixelExportColor_UInt16_Int32_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_Int32_index.name = "index"_c;
    PixelExportColor_UInt16_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16_Int32_index.type.literal = true;
    PixelExportColor_UInt16_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_Int32.parameters = PixelExportColor_UInt16_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, UInt32
    PixelExportColor_UInt16_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16_UInt32_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16_UInt32_index.type.literal = true;
    PixelExportColor_UInt16_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_UInt32.parameters = PixelExportColor_UInt16_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, Int16
    PixelExportColor_UInt16_Int16_color.name = "color"_c;
    PixelExportColor_UInt16_Int16_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_Int16_index.name = "index"_c;
    PixelExportColor_UInt16_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16_Int16_index.type.literal = true;
    PixelExportColor_UInt16_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_Int16.parameters = PixelExportColor_UInt16_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16, UInt16
    PixelExportColor_UInt16_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16_UInt16_color.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16_UInt16_index.type.literal = true;
    PixelExportColor_UInt16_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16_UInt16.parameters = PixelExportColor_UInt16_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16_color)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x2, Int32
    PixelExportColor_UInt16x2_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x2_Int32_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x2_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x2_Int32_index.type.literal = true;
    PixelExportColor_UInt16x2_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x2_Int32.parameters = PixelExportColor_UInt16x2_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x2, UInt32
    PixelExportColor_UInt16x2_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x2_UInt32_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x2_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x2_UInt32_index.type.literal = true;
    PixelExportColor_UInt16x2_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x2_UInt32.parameters = PixelExportColor_UInt16x2_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x2, Int16
    PixelExportColor_UInt16x2_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x2_Int16_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x2_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x2_Int16_index.type.literal = true;
    PixelExportColor_UInt16x2_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x2_Int16.parameters = PixelExportColor_UInt16x2_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x2, UInt16
    PixelExportColor_UInt16x2_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x2_UInt16_color.type = Type::FullType{ UInt16x2Type.name };
    PixelExportColor_UInt16x2_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x2_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x2_UInt16_index.type.literal = true;
    PixelExportColor_UInt16x2_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x2_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x2_UInt16.parameters = PixelExportColor_UInt16x2_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16_color)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x2_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x3, Int32
    PixelExportColor_UInt16x3_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x3_Int32_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x3_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x3_Int32_index.type.literal = true;
    PixelExportColor_UInt16x3_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x3_Int32.parameters = PixelExportColor_UInt16x3_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x3, UInt32
    PixelExportColor_UInt16x3_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x3_UInt32_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x3_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x3_UInt32_index.type.literal = true;
    PixelExportColor_UInt16x3_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x3_UInt32.parameters = PixelExportColor_UInt16x3_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x3, Int16
    PixelExportColor_UInt16x3_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x3_Int16_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x3_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x3_Int16_index.type.literal = true;
    PixelExportColor_UInt16x3_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x3_Int16.parameters = PixelExportColor_UInt16x3_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x3, UInt16
    PixelExportColor_UInt16x3_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x3_UInt16_color.type = Type::FullType{ UInt16x3Type.name };
    PixelExportColor_UInt16x3_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x3_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x3_UInt16_index.type.literal = true;
    PixelExportColor_UInt16x3_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x3_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x3_UInt16.parameters = PixelExportColor_UInt16x3_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16_color)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x3_UInt16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x4, Int32
    PixelExportColor_UInt16x4_Int32_color.name = "color"_c;
    PixelExportColor_UInt16x4_Int32_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_Int32_index.name = "index"_c;
    PixelExportColor_UInt16x4_Int32_index.type = Type::FullType{ Int32Type.name };
    PixelExportColor_UInt16x4_Int32_index.type.literal = true;
    PixelExportColor_UInt16x4_Int32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_Int32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x4_Int32.parameters = PixelExportColor_UInt16x4_Int32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32_index)->typeSymbol = &Int32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x4, UInt32
    PixelExportColor_UInt16x4_UInt32_color.name = "color"_c;
    PixelExportColor_UInt16x4_UInt32_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_UInt32_index.name = "index"_c;
    PixelExportColor_UInt16x4_UInt32_index.type = Type::FullType{ UInt32Type.name };
    PixelExportColor_UInt16x4_UInt32_index.type.literal = true;
    PixelExportColor_UInt16x4_UInt32.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_UInt32.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x4_UInt32.parameters = PixelExportColor_UInt16x4_UInt32_args;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt32)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x4, Int16
    PixelExportColor_UInt16x4_Int16_color.name = "color"_c;
    PixelExportColor_UInt16x4_Int16_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_Int16_index.name = "index"_c;
    PixelExportColor_UInt16x4_Int16_index.type = Type::FullType{ Int16Type.name };
    PixelExportColor_UInt16x4_Int16_index.type.literal = true;
    PixelExportColor_UInt16x4_Int16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_Int16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x4_Int16.parameters = PixelExportColor_UInt16x4_Int16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16_index)->typeSymbol = &Int16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_Int16)->returnTypeSymbol = &VoidType;

    /// pixelExportColor with UInt16x4, UInt16
    PixelExportColor_UInt16x4_UInt16_color.name = "color"_c;
    PixelExportColor_UInt16x4_UInt16_color.type = Type::FullType{ UInt16x4Type.name };
    PixelExportColor_UInt16x4_UInt16_index.name = "index"_c;
    PixelExportColor_UInt16x4_UInt16_index.type = Type::FullType{ UInt16Type.name };
    PixelExportColor_UInt16x4_UInt16_index.type.literal = true;
    PixelExportColor_UInt16x4_UInt16.name = "pixelExportColor"_c;
    PixelExportColor_UInt16x4_UInt16.returnType = Type::FullType { VoidType.name };
    PixelExportColor_UInt16x4_UInt16.parameters = PixelExportColor_UInt16x4_UInt16_args;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16_color)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16_index)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&PixelExportColor_UInt16x4_UInt16)->returnTypeSymbol = &VoidType;

    /// computeGetLocalThreadIndices
    ComputeGetLocalThreadIndices.name = "computeGetLocalThreadIndices"_c;
    ComputeGetLocalThreadIndices.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetLocalThreadIndices)->returnTypeSymbol = &UInt32x3Type;

    /// computeGetGlobalThreadIndices
    ComputeGetGlobalThreadIndices.name = "computeGetGlobalThreadIndices"_c;
    ComputeGetGlobalThreadIndices.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetGlobalThreadIndices)->returnTypeSymbol = &UInt32x3Type;

    /// computeGetWorkgroupIndices
    ComputeGetWorkgroupIndices.name = "computeGetWorkgroupIndices"_c;
    ComputeGetWorkgroupIndices.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetWorkgroupIndices)->returnTypeSymbol = &UInt32x3Type;

    /// computeGetWorkGroupDimensions
    ComputeGetWorkGroupDimensions.name = "computeGetWorkGroupDimensions"_c;
    ComputeGetWorkGroupDimensions.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&ComputeGetWorkGroupDimensions)->returnTypeSymbol = &UInt32x3Type;

    /// computeGetIndexInWorkgroup
    ComputeGetIndexInWorkgroup.name = "computeGetIndexInWorkgroup"_c;
    ComputeGetIndexInWorkgroup.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&ComputeGetIndexInWorkgroup)->returnTypeSymbol = &UInt32Type;

    /// subgroupGetId
    SubgroupGetId.documentation = "Returns the subgroup ID of the current thread"_c;
    SubgroupGetId.name = "subgroupGetId"_c;
    SubgroupGetId.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&SubgroupGetId)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupGetSize
    SubgroupGetSize.documentation = "Returns the size of the subgroup"_c;
    SubgroupGetSize.name = "subgroupGetSize"_c;
    SubgroupGetSize.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&SubgroupGetSize)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupGetNum
    SubgroupGetNum.documentation = "Returns the number of subgroups in the workgroup"_c;
    SubgroupGetNum.name = "subgroupGetNum"_c;
    SubgroupGetNum.returnType = Type::FullType { UInt32x3Type.name };
    Symbol::Resolved(&SubgroupGetNum)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupGetThreadMask
    SubgroupGetThreadMask.documentation = "Returns a subgroup mask where the current thread is active"_c;
    SubgroupGetThreadMask.name = "subgroupGetThreadMask"_c;
    SubgroupGetThreadMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetThreadMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetThreadAndLowerMask
    SubgroupGetThreadAndLowerMask.documentation = "Returns a subgroup mask where the current thread and all lower threads are active"_c;
    SubgroupGetThreadAndLowerMask.name = "subgroupGetThreadAndLowerMask"_c;
    SubgroupGetThreadAndLowerMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetThreadAndLowerMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetLowerMask
    SubgroupGetLowerMask.documentation = "Returns a subgroup mask where all lower threads are active"_c;
    SubgroupGetLowerMask.name = "subgroupGetLowerMask"_c;
    SubgroupGetLowerMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetLowerMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetThreadAndGreaterMask
    SubgroupGetThreadAndGreaterMask.documentation = "Returns a subgroup mask where the current thread and all greater threads are active"_c;
    SubgroupGetThreadAndGreaterMask.name = "subgroupGetThreadAndGreaterMask"_c;
    SubgroupGetThreadAndGreaterMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetThreadAndGreaterMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetGreaterMask
    SubgroupGetGreaterMask.documentation = "Returns a subgroup mask where all greater threads are active"_c;
    SubgroupGetGreaterMask.name = "subgroupGetGreaterMask"_c;
    SubgroupGetGreaterMask.returnType = Type::FullType { UInt32x4Type.name };
    Symbol::Resolved(&SubgroupGetGreaterMask)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupGetFirstActiveThread
    SubgroupGetFirstActiveThread.name = "subgroupGetFirstActiveThread"_c;
    SubgroupGetFirstActiveThread.returnType = Type::FullType { UInt32Type.name };
    Symbol::Resolved(&SubgroupGetFirstActiveThread)->returnTypeSymbol = &UInt32Type;

    /// subgroupBroadcastFirstActiveThread with Float32
    SubgroupBroadcastFirstActiveThread_Float32_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float32_value.type = Type::FullType{ Float32Type.name };
    SubgroupBroadcastFirstActiveThread_Float32.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float32.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float32.returnType = Type::FullType { Float32Type.name };
    SubgroupBroadcastFirstActiveThread_Float32.parameters = SubgroupBroadcastFirstActiveThread_Float32_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32)->returnTypeSymbol = &Float32Type;

    /// subgroupBroadcastFirstActiveThread with Float32x2
    SubgroupBroadcastFirstActiveThread_Float32x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float32x2_value.type = Type::FullType{ Float32x2Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float32x2.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x2.parameters = SubgroupBroadcastFirstActiveThread_Float32x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x2_value)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// subgroupBroadcastFirstActiveThread with Float32x3
    SubgroupBroadcastFirstActiveThread_Float32x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float32x3_value.type = Type::FullType{ Float32x3Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float32x3.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x3.parameters = SubgroupBroadcastFirstActiveThread_Float32x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x3_value)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// subgroupBroadcastFirstActiveThread with Float32x4
    SubgroupBroadcastFirstActiveThread_Float32x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float32x4_value.type = Type::FullType{ Float32x4Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float32x4.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    SubgroupBroadcastFirstActiveThread_Float32x4.parameters = SubgroupBroadcastFirstActiveThread_Float32x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x4_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// subgroupBroadcastFirstActiveThread with Float16
    SubgroupBroadcastFirstActiveThread_Float16_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float16_value.type = Type::FullType{ Float16Type.name };
    SubgroupBroadcastFirstActiveThread_Float16.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float16.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float16.returnType = Type::FullType { Float16Type.name };
    SubgroupBroadcastFirstActiveThread_Float16.parameters = SubgroupBroadcastFirstActiveThread_Float16_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16)->returnTypeSymbol = &Float16Type;

    /// subgroupBroadcastFirstActiveThread with Float16x2
    SubgroupBroadcastFirstActiveThread_Float16x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float16x2_value.type = Type::FullType{ Float16x2Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float16x2.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x2.parameters = SubgroupBroadcastFirstActiveThread_Float16x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x2_value)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// subgroupBroadcastFirstActiveThread with Float16x3
    SubgroupBroadcastFirstActiveThread_Float16x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float16x3_value.type = Type::FullType{ Float16x3Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float16x3.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x3.parameters = SubgroupBroadcastFirstActiveThread_Float16x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x3_value)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// subgroupBroadcastFirstActiveThread with Float16x4
    SubgroupBroadcastFirstActiveThread_Float16x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Float16x4_value.type = Type::FullType{ Float16x4Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Float16x4.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    SubgroupBroadcastFirstActiveThread_Float16x4.parameters = SubgroupBroadcastFirstActiveThread_Float16x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x4_value)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// subgroupBroadcastFirstActiveThread with Int32
    SubgroupBroadcastFirstActiveThread_Int32_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int32_value.type = Type::FullType{ Int32Type.name };
    SubgroupBroadcastFirstActiveThread_Int32.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int32.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int32.returnType = Type::FullType { Int32Type.name };
    SubgroupBroadcastFirstActiveThread_Int32.parameters = SubgroupBroadcastFirstActiveThread_Int32_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32)->returnTypeSymbol = &Int32Type;

    /// subgroupBroadcastFirstActiveThread with Int32x2
    SubgroupBroadcastFirstActiveThread_Int32x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int32x2_value.type = Type::FullType{ Int32x2Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int32x2.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x2.parameters = SubgroupBroadcastFirstActiveThread_Int32x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x2_value)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// subgroupBroadcastFirstActiveThread with Int32x3
    SubgroupBroadcastFirstActiveThread_Int32x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int32x3_value.type = Type::FullType{ Int32x3Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int32x3.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x3.parameters = SubgroupBroadcastFirstActiveThread_Int32x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x3_value)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// subgroupBroadcastFirstActiveThread with Int32x4
    SubgroupBroadcastFirstActiveThread_Int32x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int32x4_value.type = Type::FullType{ Int32x4Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int32x4.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    SubgroupBroadcastFirstActiveThread_Int32x4.parameters = SubgroupBroadcastFirstActiveThread_Int32x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x4_value)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// subgroupBroadcastFirstActiveThread with Int16
    SubgroupBroadcastFirstActiveThread_Int16_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int16_value.type = Type::FullType{ Int16Type.name };
    SubgroupBroadcastFirstActiveThread_Int16.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int16.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int16.returnType = Type::FullType { Int16Type.name };
    SubgroupBroadcastFirstActiveThread_Int16.parameters = SubgroupBroadcastFirstActiveThread_Int16_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16)->returnTypeSymbol = &Int16Type;

    /// subgroupBroadcastFirstActiveThread with Int16x2
    SubgroupBroadcastFirstActiveThread_Int16x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int16x2_value.type = Type::FullType{ Int16x2Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int16x2.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x2.parameters = SubgroupBroadcastFirstActiveThread_Int16x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x2_value)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// subgroupBroadcastFirstActiveThread with Int16x3
    SubgroupBroadcastFirstActiveThread_Int16x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int16x3_value.type = Type::FullType{ Int16x3Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int16x3.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x3.parameters = SubgroupBroadcastFirstActiveThread_Int16x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x3_value)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// subgroupBroadcastFirstActiveThread with Int16x4
    SubgroupBroadcastFirstActiveThread_Int16x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_Int16x4_value.type = Type::FullType{ Int16x4Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_Int16x4.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    SubgroupBroadcastFirstActiveThread_Int16x4.parameters = SubgroupBroadcastFirstActiveThread_Int16x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x4_value)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// subgroupBroadcastFirstActiveThread with UInt32
    SubgroupBroadcastFirstActiveThread_UInt32_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt32.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt32.returnType = Type::FullType { UInt32Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32.parameters = SubgroupBroadcastFirstActiveThread_UInt32_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32)->returnTypeSymbol = &UInt32Type;

    /// subgroupBroadcastFirstActiveThread with UInt32x2
    SubgroupBroadcastFirstActiveThread_UInt32x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x2_value.type = Type::FullType{ UInt32x2Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x2.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x2.parameters = SubgroupBroadcastFirstActiveThread_UInt32x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x2_value)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// subgroupBroadcastFirstActiveThread with UInt32x3
    SubgroupBroadcastFirstActiveThread_UInt32x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x3_value.type = Type::FullType{ UInt32x3Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x3.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x3.parameters = SubgroupBroadcastFirstActiveThread_UInt32x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x3_value)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupBroadcastFirstActiveThread with UInt32x4
    SubgroupBroadcastFirstActiveThread_UInt32x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x4_value.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x4.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupBroadcastFirstActiveThread_UInt32x4.parameters = SubgroupBroadcastFirstActiveThread_UInt32x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x4_value)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupBroadcastFirstActiveThread with UInt16
    SubgroupBroadcastFirstActiveThread_UInt16_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt16_value.type = Type::FullType{ UInt16Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt16.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt16.returnType = Type::FullType { UInt16Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16.parameters = SubgroupBroadcastFirstActiveThread_UInt16_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16)->returnTypeSymbol = &UInt16Type;

    /// subgroupBroadcastFirstActiveThread with UInt16x2
    SubgroupBroadcastFirstActiveThread_UInt16x2_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x2_value.type = Type::FullType{ UInt16x2Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x2.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x2.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x2.parameters = SubgroupBroadcastFirstActiveThread_UInt16x2_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x2_value)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// subgroupBroadcastFirstActiveThread with UInt16x3
    SubgroupBroadcastFirstActiveThread_UInt16x3_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x3_value.type = Type::FullType{ UInt16x3Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x3.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x3.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x3.parameters = SubgroupBroadcastFirstActiveThread_UInt16x3_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x3_value)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// subgroupBroadcastFirstActiveThread with UInt16x4
    SubgroupBroadcastFirstActiveThread_UInt16x4_value.name = "value"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x4_value.type = Type::FullType{ UInt16x4Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x4.documentation = "Returns the value of the provided argument for the first active thread in the subgroup"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x4.name = "subgroupBroadcastFirstActiveThread"_c;
    SubgroupBroadcastFirstActiveThread_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    SubgroupBroadcastFirstActiveThread_UInt16x4.parameters = SubgroupBroadcastFirstActiveThread_UInt16x4_args;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x4_value)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupBroadcastFirstActiveThread_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// subgroupBallot with Bool8
    SubgroupBallot_predicate.name = "predicate"_c;
    SubgroupBallot_predicate.type = Type::FullType{ Bool8Type.name };
    SubgroupBallot.documentation = "Sets the subgroup mask to the value of the predicate argument for each active thread"_c;
    SubgroupBallot.name = "subgroupBallot"_c;
    SubgroupBallot.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupBallot.parameters = SubgroupBallot_args;
    Symbol::Resolved(&SubgroupBallot_predicate)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&SubgroupBallot)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupInverseBallot with Bool8
    SubgroupInverseBallot_predicate.name = "predicate"_c;
    SubgroupInverseBallot_predicate.type = Type::FullType{ Bool8Type.name };
    SubgroupInverseBallot.documentation = "Sets the subgroup mask to the value of the predicate argument for each active thread"_c;
    SubgroupInverseBallot.name = "subgroupInverseBallot"_c;
    SubgroupInverseBallot.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupInverseBallot.parameters = SubgroupInverseBallot_args;
    Symbol::Resolved(&SubgroupInverseBallot_predicate)->typeSymbol = &Bool8Type;
    Symbol::Resolved(&SubgroupInverseBallot)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupBallotBitCount with UInt32x4
    SubgroupBallotBitCount_mask.name = "value"_c;
    SubgroupBallotBitCount_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotBitCount.documentation = "Returns the number of bits set to 1 in a ballot mask"_c;
    SubgroupBallotBitCount.name = "subgroupBallotBitCount"_c;
    SubgroupBallotBitCount.returnType = Type::FullType { UInt32Type.name };
    SubgroupBallotBitCount.parameters = SubgroupBallotBitCount_args;
    Symbol::Resolved(&SubgroupBallotBitCount_mask)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBallotBitCount)->returnTypeSymbol = &UInt32Type;

    /// subgroupBallotFirstOne with UInt32x4
    SubgroupBallotFirstOne_mask.name = "value"_c;
    SubgroupBallotFirstOne_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotFirstOne.documentation = "Returns the first one (ctz) in a subgroup thread mask"_c;
    SubgroupBallotFirstOne.name = "subgroupBallotFirstOne"_c;
    SubgroupBallotFirstOne.returnType = Type::FullType { UInt32Type.name };
    SubgroupBallotFirstOne.parameters = SubgroupBallotFirstOne_args;
    Symbol::Resolved(&SubgroupBallotFirstOne_mask)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBallotFirstOne)->returnTypeSymbol = &UInt32Type;

    /// subgroupBallotLastOne with UInt32x4
    SubgroupBallotLastOne_mask.name = "value"_c;
    SubgroupBallotLastOne_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotLastOne.documentation = "Returns the last one (clz) in a subgroup thread mask"_c;
    SubgroupBallotLastOne.name = "subgroupBallotLastOne"_c;
    SubgroupBallotLastOne.returnType = Type::FullType { UInt32Type.name };
    SubgroupBallotLastOne.parameters = SubgroupBallotLastOne_args;
    Symbol::Resolved(&SubgroupBallotLastOne_mask)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBallotLastOne)->returnTypeSymbol = &UInt32Type;

    /// subgroupBallotBit with UInt32x4, UInt32
    SubgroupBallotBit_mask.name = "mask"_c;
    SubgroupBallotBit_mask.type = Type::FullType{ UInt32x4Type.name };
    SubgroupBallotBit_index.name = "index"_c;
    SubgroupBallotBit_index.type = Type::FullType{ UInt32Type.name };
    SubgroupBallotBit_index.type.literal = true;
    SubgroupBallotBit.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupBallotBit.name = "subgroupBallotBit"_c;
    SubgroupBallotBit.returnType = Type::FullType { UInt32Type.name };
    SubgroupBallotBit.parameters = SubgroupBallotBit_args;
    Symbol::Resolved(&SubgroupBallotBit_mask)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupBallotBit_index)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupBallotBit)->returnTypeSymbol = &UInt32Type;

    /// subgroupSwapDiagonal with Float32
    SubgroupSwapDiagonal_Float32_value.name = "value"_c;
    SubgroupSwapDiagonal_Float32_value.type = Type::FullType{ Float32Type.name };
    SubgroupSwapDiagonal_Float32.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Float32.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32.returnType = Type::FullType { Float32Type.name };
    SubgroupSwapDiagonal_Float32.parameters = SubgroupSwapDiagonal_Float32_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32)->returnTypeSymbol = &Float32Type;

    /// subgroupSwapDiagonal with Float32x2
    SubgroupSwapDiagonal_Float32x2_value.name = "value"_c;
    SubgroupSwapDiagonal_Float32x2_value.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapDiagonal_Float32x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Float32x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    SubgroupSwapDiagonal_Float32x2.parameters = SubgroupSwapDiagonal_Float32x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2_value)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// subgroupSwapDiagonal with Float32x3
    SubgroupSwapDiagonal_Float32x3_value.name = "value"_c;
    SubgroupSwapDiagonal_Float32x3_value.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapDiagonal_Float32x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Float32x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    SubgroupSwapDiagonal_Float32x3.parameters = SubgroupSwapDiagonal_Float32x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3_value)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// subgroupSwapDiagonal with Float32x4
    SubgroupSwapDiagonal_Float32x4_value.name = "value"_c;
    SubgroupSwapDiagonal_Float32x4_value.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapDiagonal_Float32x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Float32x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    SubgroupSwapDiagonal_Float32x4.parameters = SubgroupSwapDiagonal_Float32x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// subgroupSwapDiagonal with Float16
    SubgroupSwapDiagonal_Float16_value.name = "value"_c;
    SubgroupSwapDiagonal_Float16_value.type = Type::FullType{ Float16Type.name };
    SubgroupSwapDiagonal_Float16.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Float16.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16.returnType = Type::FullType { Float16Type.name };
    SubgroupSwapDiagonal_Float16.parameters = SubgroupSwapDiagonal_Float16_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16)->returnTypeSymbol = &Float16Type;

    /// subgroupSwapDiagonal with Float16x2
    SubgroupSwapDiagonal_Float16x2_value.name = "value"_c;
    SubgroupSwapDiagonal_Float16x2_value.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapDiagonal_Float16x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Float16x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    SubgroupSwapDiagonal_Float16x2.parameters = SubgroupSwapDiagonal_Float16x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2_value)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// subgroupSwapDiagonal with Float16x3
    SubgroupSwapDiagonal_Float16x3_value.name = "value"_c;
    SubgroupSwapDiagonal_Float16x3_value.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapDiagonal_Float16x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Float16x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    SubgroupSwapDiagonal_Float16x3.parameters = SubgroupSwapDiagonal_Float16x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3_value)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// subgroupSwapDiagonal with Float16x4
    SubgroupSwapDiagonal_Float16x4_value.name = "value"_c;
    SubgroupSwapDiagonal_Float16x4_value.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapDiagonal_Float16x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Float16x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    SubgroupSwapDiagonal_Float16x4.parameters = SubgroupSwapDiagonal_Float16x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4_value)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// subgroupSwapDiagonal with Int32
    SubgroupSwapDiagonal_Int32_value.name = "value"_c;
    SubgroupSwapDiagonal_Int32_value.type = Type::FullType{ Int32Type.name };
    SubgroupSwapDiagonal_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Int32.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32.returnType = Type::FullType { Int32Type.name };
    SubgroupSwapDiagonal_Int32.parameters = SubgroupSwapDiagonal_Int32_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32)->returnTypeSymbol = &Int32Type;

    /// subgroupSwapDiagonal with Int32x2
    SubgroupSwapDiagonal_Int32x2_value.name = "value"_c;
    SubgroupSwapDiagonal_Int32x2_value.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapDiagonal_Int32x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Int32x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    SubgroupSwapDiagonal_Int32x2.parameters = SubgroupSwapDiagonal_Int32x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2_value)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// subgroupSwapDiagonal with Int32x3
    SubgroupSwapDiagonal_Int32x3_value.name = "value"_c;
    SubgroupSwapDiagonal_Int32x3_value.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapDiagonal_Int32x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Int32x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    SubgroupSwapDiagonal_Int32x3.parameters = SubgroupSwapDiagonal_Int32x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3_value)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// subgroupSwapDiagonal with Int32x4
    SubgroupSwapDiagonal_Int32x4_value.name = "value"_c;
    SubgroupSwapDiagonal_Int32x4_value.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapDiagonal_Int32x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Int32x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    SubgroupSwapDiagonal_Int32x4.parameters = SubgroupSwapDiagonal_Int32x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4_value)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// subgroupSwapDiagonal with Int16
    SubgroupSwapDiagonal_Int16_value.name = "value"_c;
    SubgroupSwapDiagonal_Int16_value.type = Type::FullType{ Int16Type.name };
    SubgroupSwapDiagonal_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Int16.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16.returnType = Type::FullType { Int16Type.name };
    SubgroupSwapDiagonal_Int16.parameters = SubgroupSwapDiagonal_Int16_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16)->returnTypeSymbol = &Int16Type;

    /// subgroupSwapDiagonal with Int16x2
    SubgroupSwapDiagonal_Int16x2_value.name = "value"_c;
    SubgroupSwapDiagonal_Int16x2_value.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapDiagonal_Int16x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Int16x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    SubgroupSwapDiagonal_Int16x2.parameters = SubgroupSwapDiagonal_Int16x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2_value)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// subgroupSwapDiagonal with Int16x3
    SubgroupSwapDiagonal_Int16x3_value.name = "value"_c;
    SubgroupSwapDiagonal_Int16x3_value.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapDiagonal_Int16x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Int16x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    SubgroupSwapDiagonal_Int16x3.parameters = SubgroupSwapDiagonal_Int16x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3_value)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// subgroupSwapDiagonal with Int16x4
    SubgroupSwapDiagonal_Int16x4_value.name = "value"_c;
    SubgroupSwapDiagonal_Int16x4_value.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapDiagonal_Int16x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_Int16x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    SubgroupSwapDiagonal_Int16x4.parameters = SubgroupSwapDiagonal_Int16x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4_value)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// subgroupSwapDiagonal with UInt32
    SubgroupSwapDiagonal_UInt32_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapDiagonal_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_UInt32.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32.returnType = Type::FullType { UInt32Type.name };
    SubgroupSwapDiagonal_UInt32.parameters = SubgroupSwapDiagonal_UInt32_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32)->returnTypeSymbol = &UInt32Type;

    /// subgroupSwapDiagonal with UInt32x2
    SubgroupSwapDiagonal_UInt32x2_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt32x2_value.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapDiagonal_UInt32x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_UInt32x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    SubgroupSwapDiagonal_UInt32x2.parameters = SubgroupSwapDiagonal_UInt32x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2_value)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// subgroupSwapDiagonal with UInt32x3
    SubgroupSwapDiagonal_UInt32x3_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt32x3_value.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapDiagonal_UInt32x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_UInt32x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    SubgroupSwapDiagonal_UInt32x3.parameters = SubgroupSwapDiagonal_UInt32x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3_value)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupSwapDiagonal with UInt32x4
    SubgroupSwapDiagonal_UInt32x4_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt32x4_value.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapDiagonal_UInt32x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_UInt32x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupSwapDiagonal_UInt32x4.parameters = SubgroupSwapDiagonal_UInt32x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4_value)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupSwapDiagonal with UInt16
    SubgroupSwapDiagonal_UInt16_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt16_value.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapDiagonal_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_UInt16.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16.returnType = Type::FullType { UInt16Type.name };
    SubgroupSwapDiagonal_UInt16.parameters = SubgroupSwapDiagonal_UInt16_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16)->returnTypeSymbol = &UInt16Type;

    /// subgroupSwapDiagonal with UInt16x2
    SubgroupSwapDiagonal_UInt16x2_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt16x2_value.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapDiagonal_UInt16x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_UInt16x2.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    SubgroupSwapDiagonal_UInt16x2.parameters = SubgroupSwapDiagonal_UInt16x2_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2_value)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// subgroupSwapDiagonal with UInt16x3
    SubgroupSwapDiagonal_UInt16x3_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt16x3_value.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapDiagonal_UInt16x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_UInt16x3.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    SubgroupSwapDiagonal_UInt16x3.parameters = SubgroupSwapDiagonal_UInt16x3_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3_value)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// subgroupSwapDiagonal with UInt16x4
    SubgroupSwapDiagonal_UInt16x4_value.name = "value"_c;
    SubgroupSwapDiagonal_UInt16x4_value.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapDiagonal_UInt16x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapDiagonal_UInt16x4.name = "subgroupSwapDiagonal"_c;
    SubgroupSwapDiagonal_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    SubgroupSwapDiagonal_UInt16x4.parameters = SubgroupSwapDiagonal_UInt16x4_args;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4_value)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapDiagonal_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// subgroupSwapVertical with Float32
    SubgroupSwapVertical_Float32_value.name = "value"_c;
    SubgroupSwapVertical_Float32_value.type = Type::FullType{ Float32Type.name };
    SubgroupSwapVertical_Float32.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Float32.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32.returnType = Type::FullType { Float32Type.name };
    SubgroupSwapVertical_Float32.parameters = SubgroupSwapVertical_Float32_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32)->returnTypeSymbol = &Float32Type;

    /// subgroupSwapVertical with Float32x2
    SubgroupSwapVertical_Float32x2_value.name = "value"_c;
    SubgroupSwapVertical_Float32x2_value.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapVertical_Float32x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Float32x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    SubgroupSwapVertical_Float32x2.parameters = SubgroupSwapVertical_Float32x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2_value)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// subgroupSwapVertical with Float32x3
    SubgroupSwapVertical_Float32x3_value.name = "value"_c;
    SubgroupSwapVertical_Float32x3_value.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapVertical_Float32x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Float32x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    SubgroupSwapVertical_Float32x3.parameters = SubgroupSwapVertical_Float32x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3_value)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// subgroupSwapVertical with Float32x4
    SubgroupSwapVertical_Float32x4_value.name = "value"_c;
    SubgroupSwapVertical_Float32x4_value.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapVertical_Float32x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Float32x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    SubgroupSwapVertical_Float32x4.parameters = SubgroupSwapVertical_Float32x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// subgroupSwapVertical with Float16
    SubgroupSwapVertical_Float16_value.name = "value"_c;
    SubgroupSwapVertical_Float16_value.type = Type::FullType{ Float16Type.name };
    SubgroupSwapVertical_Float16.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Float16.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16.returnType = Type::FullType { Float16Type.name };
    SubgroupSwapVertical_Float16.parameters = SubgroupSwapVertical_Float16_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16)->returnTypeSymbol = &Float16Type;

    /// subgroupSwapVertical with Float16x2
    SubgroupSwapVertical_Float16x2_value.name = "value"_c;
    SubgroupSwapVertical_Float16x2_value.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapVertical_Float16x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Float16x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    SubgroupSwapVertical_Float16x2.parameters = SubgroupSwapVertical_Float16x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2_value)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// subgroupSwapVertical with Float16x3
    SubgroupSwapVertical_Float16x3_value.name = "value"_c;
    SubgroupSwapVertical_Float16x3_value.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapVertical_Float16x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Float16x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    SubgroupSwapVertical_Float16x3.parameters = SubgroupSwapVertical_Float16x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3_value)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// subgroupSwapVertical with Float16x4
    SubgroupSwapVertical_Float16x4_value.name = "value"_c;
    SubgroupSwapVertical_Float16x4_value.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapVertical_Float16x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Float16x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    SubgroupSwapVertical_Float16x4.parameters = SubgroupSwapVertical_Float16x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4_value)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// subgroupSwapVertical with Int32
    SubgroupSwapVertical_Int32_value.name = "value"_c;
    SubgroupSwapVertical_Int32_value.type = Type::FullType{ Int32Type.name };
    SubgroupSwapVertical_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Int32.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32.returnType = Type::FullType { Int32Type.name };
    SubgroupSwapVertical_Int32.parameters = SubgroupSwapVertical_Int32_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32)->returnTypeSymbol = &Int32Type;

    /// subgroupSwapVertical with Int32x2
    SubgroupSwapVertical_Int32x2_value.name = "value"_c;
    SubgroupSwapVertical_Int32x2_value.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapVertical_Int32x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Int32x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    SubgroupSwapVertical_Int32x2.parameters = SubgroupSwapVertical_Int32x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2_value)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// subgroupSwapVertical with Int32x3
    SubgroupSwapVertical_Int32x3_value.name = "value"_c;
    SubgroupSwapVertical_Int32x3_value.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapVertical_Int32x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Int32x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    SubgroupSwapVertical_Int32x3.parameters = SubgroupSwapVertical_Int32x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3_value)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// subgroupSwapVertical with Int32x4
    SubgroupSwapVertical_Int32x4_value.name = "value"_c;
    SubgroupSwapVertical_Int32x4_value.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapVertical_Int32x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Int32x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    SubgroupSwapVertical_Int32x4.parameters = SubgroupSwapVertical_Int32x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4_value)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// subgroupSwapVertical with Int16
    SubgroupSwapVertical_Int16_value.name = "value"_c;
    SubgroupSwapVertical_Int16_value.type = Type::FullType{ Int16Type.name };
    SubgroupSwapVertical_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Int16.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16.returnType = Type::FullType { Int16Type.name };
    SubgroupSwapVertical_Int16.parameters = SubgroupSwapVertical_Int16_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16)->returnTypeSymbol = &Int16Type;

    /// subgroupSwapVertical with Int16x2
    SubgroupSwapVertical_Int16x2_value.name = "value"_c;
    SubgroupSwapVertical_Int16x2_value.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapVertical_Int16x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Int16x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    SubgroupSwapVertical_Int16x2.parameters = SubgroupSwapVertical_Int16x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2_value)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// subgroupSwapVertical with Int16x3
    SubgroupSwapVertical_Int16x3_value.name = "value"_c;
    SubgroupSwapVertical_Int16x3_value.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapVertical_Int16x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Int16x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    SubgroupSwapVertical_Int16x3.parameters = SubgroupSwapVertical_Int16x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3_value)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// subgroupSwapVertical with Int16x4
    SubgroupSwapVertical_Int16x4_value.name = "value"_c;
    SubgroupSwapVertical_Int16x4_value.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapVertical_Int16x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_Int16x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    SubgroupSwapVertical_Int16x4.parameters = SubgroupSwapVertical_Int16x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4_value)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// subgroupSwapVertical with UInt32
    SubgroupSwapVertical_UInt32_value.name = "value"_c;
    SubgroupSwapVertical_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapVertical_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_UInt32.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32.returnType = Type::FullType { UInt32Type.name };
    SubgroupSwapVertical_UInt32.parameters = SubgroupSwapVertical_UInt32_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32)->returnTypeSymbol = &UInt32Type;

    /// subgroupSwapVertical with UInt32x2
    SubgroupSwapVertical_UInt32x2_value.name = "value"_c;
    SubgroupSwapVertical_UInt32x2_value.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapVertical_UInt32x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_UInt32x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    SubgroupSwapVertical_UInt32x2.parameters = SubgroupSwapVertical_UInt32x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2_value)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// subgroupSwapVertical with UInt32x3
    SubgroupSwapVertical_UInt32x3_value.name = "value"_c;
    SubgroupSwapVertical_UInt32x3_value.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapVertical_UInt32x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_UInt32x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    SubgroupSwapVertical_UInt32x3.parameters = SubgroupSwapVertical_UInt32x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3_value)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupSwapVertical with UInt32x4
    SubgroupSwapVertical_UInt32x4_value.name = "value"_c;
    SubgroupSwapVertical_UInt32x4_value.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapVertical_UInt32x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_UInt32x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupSwapVertical_UInt32x4.parameters = SubgroupSwapVertical_UInt32x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4_value)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupSwapVertical with UInt16
    SubgroupSwapVertical_UInt16_value.name = "value"_c;
    SubgroupSwapVertical_UInt16_value.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapVertical_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_UInt16.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16.returnType = Type::FullType { UInt16Type.name };
    SubgroupSwapVertical_UInt16.parameters = SubgroupSwapVertical_UInt16_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16)->returnTypeSymbol = &UInt16Type;

    /// subgroupSwapVertical with UInt16x2
    SubgroupSwapVertical_UInt16x2_value.name = "value"_c;
    SubgroupSwapVertical_UInt16x2_value.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapVertical_UInt16x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_UInt16x2.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    SubgroupSwapVertical_UInt16x2.parameters = SubgroupSwapVertical_UInt16x2_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2_value)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// subgroupSwapVertical with UInt16x3
    SubgroupSwapVertical_UInt16x3_value.name = "value"_c;
    SubgroupSwapVertical_UInt16x3_value.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapVertical_UInt16x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_UInt16x3.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    SubgroupSwapVertical_UInt16x3.parameters = SubgroupSwapVertical_UInt16x3_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3_value)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// subgroupSwapVertical with UInt16x4
    SubgroupSwapVertical_UInt16x4_value.name = "value"_c;
    SubgroupSwapVertical_UInt16x4_value.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapVertical_UInt16x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapVertical_UInt16x4.name = "subgroupSwapVertical"_c;
    SubgroupSwapVertical_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    SubgroupSwapVertical_UInt16x4.parameters = SubgroupSwapVertical_UInt16x4_args;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4_value)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapVertical_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// subgroupSwapHorizontal with Float32
    SubgroupSwapHorizontal_Float32_value.name = "value"_c;
    SubgroupSwapHorizontal_Float32_value.type = Type::FullType{ Float32Type.name };
    SubgroupSwapHorizontal_Float32.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Float32.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32.returnType = Type::FullType { Float32Type.name };
    SubgroupSwapHorizontal_Float32.parameters = SubgroupSwapHorizontal_Float32_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32)->returnTypeSymbol = &Float32Type;

    /// subgroupSwapHorizontal with Float32x2
    SubgroupSwapHorizontal_Float32x2_value.name = "value"_c;
    SubgroupSwapHorizontal_Float32x2_value.type = Type::FullType{ Float32x2Type.name };
    SubgroupSwapHorizontal_Float32x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Float32x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32x2.returnType = Type::FullType { Float32x2Type.name };
    SubgroupSwapHorizontal_Float32x2.parameters = SubgroupSwapHorizontal_Float32x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2_value)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x2)->returnTypeSymbol = &Float32x2Type;

    /// subgroupSwapHorizontal with Float32x3
    SubgroupSwapHorizontal_Float32x3_value.name = "value"_c;
    SubgroupSwapHorizontal_Float32x3_value.type = Type::FullType{ Float32x3Type.name };
    SubgroupSwapHorizontal_Float32x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Float32x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32x3.returnType = Type::FullType { Float32x3Type.name };
    SubgroupSwapHorizontal_Float32x3.parameters = SubgroupSwapHorizontal_Float32x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3_value)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x3)->returnTypeSymbol = &Float32x3Type;

    /// subgroupSwapHorizontal with Float32x4
    SubgroupSwapHorizontal_Float32x4_value.name = "value"_c;
    SubgroupSwapHorizontal_Float32x4_value.type = Type::FullType{ Float32x4Type.name };
    SubgroupSwapHorizontal_Float32x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Float32x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float32x4.returnType = Type::FullType { Float32x4Type.name };
    SubgroupSwapHorizontal_Float32x4.parameters = SubgroupSwapHorizontal_Float32x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float32x4)->returnTypeSymbol = &Float32x4Type;

    /// subgroupSwapHorizontal with Float16
    SubgroupSwapHorizontal_Float16_value.name = "value"_c;
    SubgroupSwapHorizontal_Float16_value.type = Type::FullType{ Float16Type.name };
    SubgroupSwapHorizontal_Float16.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Float16.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16.returnType = Type::FullType { Float16Type.name };
    SubgroupSwapHorizontal_Float16.parameters = SubgroupSwapHorizontal_Float16_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16)->returnTypeSymbol = &Float16Type;

    /// subgroupSwapHorizontal with Float16x2
    SubgroupSwapHorizontal_Float16x2_value.name = "value"_c;
    SubgroupSwapHorizontal_Float16x2_value.type = Type::FullType{ Float16x2Type.name };
    SubgroupSwapHorizontal_Float16x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Float16x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16x2.returnType = Type::FullType { Float16x2Type.name };
    SubgroupSwapHorizontal_Float16x2.parameters = SubgroupSwapHorizontal_Float16x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2_value)->typeSymbol = &Float16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x2)->returnTypeSymbol = &Float16x2Type;

    /// subgroupSwapHorizontal with Float16x3
    SubgroupSwapHorizontal_Float16x3_value.name = "value"_c;
    SubgroupSwapHorizontal_Float16x3_value.type = Type::FullType{ Float16x3Type.name };
    SubgroupSwapHorizontal_Float16x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Float16x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16x3.returnType = Type::FullType { Float16x3Type.name };
    SubgroupSwapHorizontal_Float16x3.parameters = SubgroupSwapHorizontal_Float16x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3_value)->typeSymbol = &Float16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x3)->returnTypeSymbol = &Float16x3Type;

    /// subgroupSwapHorizontal with Float16x4
    SubgroupSwapHorizontal_Float16x4_value.name = "value"_c;
    SubgroupSwapHorizontal_Float16x4_value.type = Type::FullType{ Float16x4Type.name };
    SubgroupSwapHorizontal_Float16x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Float16x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Float16x4.returnType = Type::FullType { Float16x4Type.name };
    SubgroupSwapHorizontal_Float16x4.parameters = SubgroupSwapHorizontal_Float16x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4_value)->typeSymbol = &Float16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Float16x4)->returnTypeSymbol = &Float16x4Type;

    /// subgroupSwapHorizontal with Int32
    SubgroupSwapHorizontal_Int32_value.name = "value"_c;
    SubgroupSwapHorizontal_Int32_value.type = Type::FullType{ Int32Type.name };
    SubgroupSwapHorizontal_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Int32.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32.returnType = Type::FullType { Int32Type.name };
    SubgroupSwapHorizontal_Int32.parameters = SubgroupSwapHorizontal_Int32_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32)->returnTypeSymbol = &Int32Type;

    /// subgroupSwapHorizontal with Int32x2
    SubgroupSwapHorizontal_Int32x2_value.name = "value"_c;
    SubgroupSwapHorizontal_Int32x2_value.type = Type::FullType{ Int32x2Type.name };
    SubgroupSwapHorizontal_Int32x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Int32x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32x2.returnType = Type::FullType { Int32x2Type.name };
    SubgroupSwapHorizontal_Int32x2.parameters = SubgroupSwapHorizontal_Int32x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2_value)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x2)->returnTypeSymbol = &Int32x2Type;

    /// subgroupSwapHorizontal with Int32x3
    SubgroupSwapHorizontal_Int32x3_value.name = "value"_c;
    SubgroupSwapHorizontal_Int32x3_value.type = Type::FullType{ Int32x3Type.name };
    SubgroupSwapHorizontal_Int32x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Int32x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32x3.returnType = Type::FullType { Int32x3Type.name };
    SubgroupSwapHorizontal_Int32x3.parameters = SubgroupSwapHorizontal_Int32x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3_value)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x3)->returnTypeSymbol = &Int32x3Type;

    /// subgroupSwapHorizontal with Int32x4
    SubgroupSwapHorizontal_Int32x4_value.name = "value"_c;
    SubgroupSwapHorizontal_Int32x4_value.type = Type::FullType{ Int32x4Type.name };
    SubgroupSwapHorizontal_Int32x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Int32x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int32x4.returnType = Type::FullType { Int32x4Type.name };
    SubgroupSwapHorizontal_Int32x4.parameters = SubgroupSwapHorizontal_Int32x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4_value)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int32x4)->returnTypeSymbol = &Int32x4Type;

    /// subgroupSwapHorizontal with Int16
    SubgroupSwapHorizontal_Int16_value.name = "value"_c;
    SubgroupSwapHorizontal_Int16_value.type = Type::FullType{ Int16Type.name };
    SubgroupSwapHorizontal_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Int16.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16.returnType = Type::FullType { Int16Type.name };
    SubgroupSwapHorizontal_Int16.parameters = SubgroupSwapHorizontal_Int16_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16)->returnTypeSymbol = &Int16Type;

    /// subgroupSwapHorizontal with Int16x2
    SubgroupSwapHorizontal_Int16x2_value.name = "value"_c;
    SubgroupSwapHorizontal_Int16x2_value.type = Type::FullType{ Int16x2Type.name };
    SubgroupSwapHorizontal_Int16x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Int16x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16x2.returnType = Type::FullType { Int16x2Type.name };
    SubgroupSwapHorizontal_Int16x2.parameters = SubgroupSwapHorizontal_Int16x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2_value)->typeSymbol = &Int16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x2)->returnTypeSymbol = &Int16x2Type;

    /// subgroupSwapHorizontal with Int16x3
    SubgroupSwapHorizontal_Int16x3_value.name = "value"_c;
    SubgroupSwapHorizontal_Int16x3_value.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapHorizontal_Int16x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Int16x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    SubgroupSwapHorizontal_Int16x3.parameters = SubgroupSwapHorizontal_Int16x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3_value)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// subgroupSwapHorizontal with Int16x4
    SubgroupSwapHorizontal_Int16x4_value.name = "value"_c;
    SubgroupSwapHorizontal_Int16x4_value.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapHorizontal_Int16x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_Int16x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    SubgroupSwapHorizontal_Int16x4.parameters = SubgroupSwapHorizontal_Int16x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4_value)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// subgroupSwapHorizontal with UInt32
    SubgroupSwapHorizontal_UInt32_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapHorizontal_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_UInt32.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32.returnType = Type::FullType { UInt32Type.name };
    SubgroupSwapHorizontal_UInt32.parameters = SubgroupSwapHorizontal_UInt32_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32)->returnTypeSymbol = &UInt32Type;

    /// subgroupSwapHorizontal with UInt32x2
    SubgroupSwapHorizontal_UInt32x2_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt32x2_value.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapHorizontal_UInt32x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_UInt32x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    SubgroupSwapHorizontal_UInt32x2.parameters = SubgroupSwapHorizontal_UInt32x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2_value)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// subgroupSwapHorizontal with UInt32x3
    SubgroupSwapHorizontal_UInt32x3_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt32x3_value.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapHorizontal_UInt32x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_UInt32x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    SubgroupSwapHorizontal_UInt32x3.parameters = SubgroupSwapHorizontal_UInt32x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3_value)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupSwapHorizontal with UInt32x4
    SubgroupSwapHorizontal_UInt32x4_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt32x4_value.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapHorizontal_UInt32x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_UInt32x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupSwapHorizontal_UInt32x4.parameters = SubgroupSwapHorizontal_UInt32x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4_value)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupSwapHorizontal with UInt16
    SubgroupSwapHorizontal_UInt16_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt16_value.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapHorizontal_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_UInt16.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16.returnType = Type::FullType { UInt16Type.name };
    SubgroupSwapHorizontal_UInt16.parameters = SubgroupSwapHorizontal_UInt16_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16)->returnTypeSymbol = &UInt16Type;

    /// subgroupSwapHorizontal with UInt16x2
    SubgroupSwapHorizontal_UInt16x2_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt16x2_value.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapHorizontal_UInt16x2.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_UInt16x2.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    SubgroupSwapHorizontal_UInt16x2.parameters = SubgroupSwapHorizontal_UInt16x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2_value)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// subgroupSwapHorizontal with UInt16x3
    SubgroupSwapHorizontal_UInt16x3_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt16x3_value.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapHorizontal_UInt16x3.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_UInt16x3.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    SubgroupSwapHorizontal_UInt16x3.parameters = SubgroupSwapHorizontal_UInt16x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3_value)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// subgroupSwapHorizontal with UInt16x4
    SubgroupSwapHorizontal_UInt16x4_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt16x4_value.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapHorizontal_UInt16x4.documentation = "Returns true if bit at index in mask is 1"_c;
    SubgroupSwapHorizontal_UInt16x4.name = "subgroupSwapHorizontal"_c;
    SubgroupSwapHorizontal_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    SubgroupSwapHorizontal_UInt16x4.parameters = SubgroupSwapHorizontal_UInt16x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4_value)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// atomicLoad with UInt32, MemorySemantics
    AtomicLoad_UInt32_ptr.name = "ptr"_c;
    AtomicLoad_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicLoad_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicLoad_UInt32_semantics.name = "semantics"_c;
    AtomicLoad_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_UInt32_semantics.type.literal = true;
    AtomicLoad_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicLoad_UInt32.name = "atomicLoad"_c;
    AtomicLoad_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicLoad_UInt32.parameters = AtomicLoad_UInt32_args;
    Symbol::Resolved(&AtomicLoad_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicLoad_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicIncrement with UInt32, MemorySemantics
    AtomicIncrement_UInt32_ptr.name = "ptr"_c;
    AtomicIncrement_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicIncrement_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicIncrement_UInt32_semantics.name = "semantics"_c;
    AtomicIncrement_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_UInt32_semantics.type.literal = true;
    AtomicIncrement_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicIncrement_UInt32.name = "atomicIncrement"_c;
    AtomicIncrement_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicIncrement_UInt32.parameters = AtomicIncrement_UInt32_args;
    Symbol::Resolved(&AtomicIncrement_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicIncrement_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicDecrement with UInt32, MemorySemantics
    AtomicDecrement_UInt32_ptr.name = "ptr"_c;
    AtomicDecrement_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicDecrement_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicDecrement_UInt32_semantics.name = "semantics"_c;
    AtomicDecrement_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_UInt32_semantics.type.literal = true;
    AtomicDecrement_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicDecrement_UInt32.name = "atomicDecrement"_c;
    AtomicDecrement_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicDecrement_UInt32.parameters = AtomicDecrement_UInt32_args;
    Symbol::Resolved(&AtomicDecrement_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicDecrement_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicLoad with Int32, MemorySemantics
    AtomicLoad_Int32_ptr.name = "ptr"_c;
    AtomicLoad_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicLoad_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicLoad_Int32_semantics.name = "semantics"_c;
    AtomicLoad_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Int32_semantics.type.literal = true;
    AtomicLoad_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicLoad_Int32.name = "atomicLoad"_c;
    AtomicLoad_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicLoad_Int32.parameters = AtomicLoad_Int32_args;
    Symbol::Resolved(&AtomicLoad_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicLoad_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicIncrement with Int32, MemorySemantics
    AtomicIncrement_Int32_ptr.name = "ptr"_c;
    AtomicIncrement_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicIncrement_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicIncrement_Int32_semantics.name = "semantics"_c;
    AtomicIncrement_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Int32_semantics.type.literal = true;
    AtomicIncrement_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicIncrement_Int32.name = "atomicIncrement"_c;
    AtomicIncrement_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicIncrement_Int32.parameters = AtomicIncrement_Int32_args;
    Symbol::Resolved(&AtomicIncrement_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicIncrement_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicDecrement with Int32, MemorySemantics
    AtomicDecrement_Int32_ptr.name = "ptr"_c;
    AtomicDecrement_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicDecrement_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicDecrement_Int32_semantics.name = "semantics"_c;
    AtomicDecrement_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Int32_semantics.type.literal = true;
    AtomicDecrement_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicDecrement_Int32.name = "atomicDecrement"_c;
    AtomicDecrement_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicDecrement_Int32.parameters = AtomicDecrement_Int32_args;
    Symbol::Resolved(&AtomicDecrement_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicDecrement_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicLoad with UInt16, MemorySemantics
    AtomicLoad_UInt16_ptr.name = "ptr"_c;
    AtomicLoad_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicLoad_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicLoad_UInt16_semantics.name = "semantics"_c;
    AtomicLoad_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_UInt16_semantics.type.literal = true;
    AtomicLoad_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicLoad_UInt16.name = "atomicLoad"_c;
    AtomicLoad_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicLoad_UInt16.parameters = AtomicLoad_UInt16_args;
    Symbol::Resolved(&AtomicLoad_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicLoad_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicIncrement with UInt16, MemorySemantics
    AtomicIncrement_UInt16_ptr.name = "ptr"_c;
    AtomicIncrement_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicIncrement_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicIncrement_UInt16_semantics.name = "semantics"_c;
    AtomicIncrement_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_UInt16_semantics.type.literal = true;
    AtomicIncrement_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicIncrement_UInt16.name = "atomicIncrement"_c;
    AtomicIncrement_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicIncrement_UInt16.parameters = AtomicIncrement_UInt16_args;
    Symbol::Resolved(&AtomicIncrement_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicIncrement_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicDecrement with UInt16, MemorySemantics
    AtomicDecrement_UInt16_ptr.name = "ptr"_c;
    AtomicDecrement_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicDecrement_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicDecrement_UInt16_semantics.name = "semantics"_c;
    AtomicDecrement_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_UInt16_semantics.type.literal = true;
    AtomicDecrement_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicDecrement_UInt16.name = "atomicDecrement"_c;
    AtomicDecrement_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicDecrement_UInt16.parameters = AtomicDecrement_UInt16_args;
    Symbol::Resolved(&AtomicDecrement_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicDecrement_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicLoad with Int16, MemorySemantics
    AtomicLoad_Int16_ptr.name = "ptr"_c;
    AtomicLoad_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicLoad_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicLoad_Int16_semantics.name = "semantics"_c;
    AtomicLoad_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Int16_semantics.type.literal = true;
    AtomicLoad_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicLoad_Int16.name = "atomicLoad"_c;
    AtomicLoad_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicLoad_Int16.parameters = AtomicLoad_Int16_args;
    Symbol::Resolved(&AtomicLoad_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicLoad_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicIncrement with Int16, MemorySemantics
    AtomicIncrement_Int16_ptr.name = "ptr"_c;
    AtomicIncrement_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicIncrement_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicIncrement_Int16_semantics.name = "semantics"_c;
    AtomicIncrement_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Int16_semantics.type.literal = true;
    AtomicIncrement_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicIncrement_Int16.name = "atomicIncrement"_c;
    AtomicIncrement_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicIncrement_Int16.parameters = AtomicIncrement_Int16_args;
    Symbol::Resolved(&AtomicIncrement_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicIncrement_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicDecrement with Int16, MemorySemantics
    AtomicDecrement_Int16_ptr.name = "ptr"_c;
    AtomicDecrement_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicDecrement_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicDecrement_Int16_semantics.name = "semantics"_c;
    AtomicDecrement_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Int16_semantics.type.literal = true;
    AtomicDecrement_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicDecrement_Int16.name = "atomicDecrement"_c;
    AtomicDecrement_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicDecrement_Int16.parameters = AtomicDecrement_Int16_args;
    Symbol::Resolved(&AtomicDecrement_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicDecrement_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicStore with UInt32, UInt32, MemorySemantics
    AtomicStore_UInt32_ptr.name = "ptr"_c;
    AtomicStore_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicStore_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicStore_UInt32_value.name = "value"_c;
    AtomicStore_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicStore_UInt32_semantics.name = "semantics"_c;
    AtomicStore_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_UInt32_semantics.type.literal = true;
    AtomicStore_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicStore_UInt32.name = "atomicStore"_c;
    AtomicStore_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicStore_UInt32.parameters = AtomicStore_UInt32_args;
    Symbol::Resolved(&AtomicStore_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicStore_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicStore_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicExchange with UInt32, UInt32, MemorySemantics
    AtomicExchange_UInt32_ptr.name = "ptr"_c;
    AtomicExchange_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicExchange_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicExchange_UInt32_value.name = "value"_c;
    AtomicExchange_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicExchange_UInt32_semantics.name = "semantics"_c;
    AtomicExchange_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_UInt32_semantics.type.literal = true;
    AtomicExchange_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicExchange_UInt32.name = "atomicExchange"_c;
    AtomicExchange_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicExchange_UInt32.parameters = AtomicExchange_UInt32_args;
    Symbol::Resolved(&AtomicExchange_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicExchange_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicExchange_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicAdd with UInt32, UInt32, MemorySemantics
    AtomicAdd_UInt32_ptr.name = "ptr"_c;
    AtomicAdd_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicAdd_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAdd_UInt32_value.name = "value"_c;
    AtomicAdd_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicAdd_UInt32_semantics.name = "semantics"_c;
    AtomicAdd_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_UInt32_semantics.type.literal = true;
    AtomicAdd_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicAdd_UInt32.name = "atomicAdd"_c;
    AtomicAdd_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicAdd_UInt32.parameters = AtomicAdd_UInt32_args;
    Symbol::Resolved(&AtomicAdd_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAdd_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAdd_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicSubtract with UInt32, UInt32, MemorySemantics
    AtomicSubtract_UInt32_ptr.name = "ptr"_c;
    AtomicSubtract_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicSubtract_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicSubtract_UInt32_value.name = "value"_c;
    AtomicSubtract_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicSubtract_UInt32_semantics.name = "semantics"_c;
    AtomicSubtract_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_UInt32_semantics.type.literal = true;
    AtomicSubtract_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicSubtract_UInt32.name = "atomicSubtract"_c;
    AtomicSubtract_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicSubtract_UInt32.parameters = AtomicSubtract_UInt32_args;
    Symbol::Resolved(&AtomicSubtract_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicSubtract_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicSubtract_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicAnd with UInt32, UInt32, MemorySemantics
    AtomicAnd_UInt32_ptr.name = "ptr"_c;
    AtomicAnd_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicAnd_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAnd_UInt32_value.name = "value"_c;
    AtomicAnd_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicAnd_UInt32_semantics.name = "semantics"_c;
    AtomicAnd_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_UInt32_semantics.type.literal = true;
    AtomicAnd_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicAnd_UInt32.name = "atomicAnd"_c;
    AtomicAnd_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicAnd_UInt32.parameters = AtomicAnd_UInt32_args;
    Symbol::Resolved(&AtomicAnd_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAnd_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAnd_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicOr with UInt32, UInt32, MemorySemantics
    AtomicOr_UInt32_ptr.name = "ptr"_c;
    AtomicOr_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicOr_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicOr_UInt32_value.name = "value"_c;
    AtomicOr_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicOr_UInt32_semantics.name = "semantics"_c;
    AtomicOr_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_UInt32_semantics.type.literal = true;
    AtomicOr_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicOr_UInt32.name = "atomicOr"_c;
    AtomicOr_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicOr_UInt32.parameters = AtomicOr_UInt32_args;
    Symbol::Resolved(&AtomicOr_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicOr_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicOr_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicXor with UInt32, UInt32, MemorySemantics
    AtomicXor_UInt32_ptr.name = "ptr"_c;
    AtomicXor_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicXor_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicXor_UInt32_value.name = "value"_c;
    AtomicXor_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicXor_UInt32_semantics.name = "semantics"_c;
    AtomicXor_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_UInt32_semantics.type.literal = true;
    AtomicXor_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicXor_UInt32.name = "atomicXor"_c;
    AtomicXor_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicXor_UInt32.parameters = AtomicXor_UInt32_args;
    Symbol::Resolved(&AtomicXor_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicXor_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicXor_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicStore with Int32, Int32, MemorySemantics
    AtomicStore_Int32_ptr.name = "ptr"_c;
    AtomicStore_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicStore_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicStore_Int32_value.name = "value"_c;
    AtomicStore_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicStore_Int32_semantics.name = "semantics"_c;
    AtomicStore_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Int32_semantics.type.literal = true;
    AtomicStore_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicStore_Int32.name = "atomicStore"_c;
    AtomicStore_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicStore_Int32.parameters = AtomicStore_Int32_args;
    Symbol::Resolved(&AtomicStore_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicStore_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicStore_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicExchange with Int32, Int32, MemorySemantics
    AtomicExchange_Int32_ptr.name = "ptr"_c;
    AtomicExchange_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicExchange_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicExchange_Int32_value.name = "value"_c;
    AtomicExchange_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicExchange_Int32_semantics.name = "semantics"_c;
    AtomicExchange_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Int32_semantics.type.literal = true;
    AtomicExchange_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicExchange_Int32.name = "atomicExchange"_c;
    AtomicExchange_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicExchange_Int32.parameters = AtomicExchange_Int32_args;
    Symbol::Resolved(&AtomicExchange_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicExchange_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicExchange_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicAdd with Int32, Int32, MemorySemantics
    AtomicAdd_Int32_ptr.name = "ptr"_c;
    AtomicAdd_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicAdd_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAdd_Int32_value.name = "value"_c;
    AtomicAdd_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicAdd_Int32_semantics.name = "semantics"_c;
    AtomicAdd_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Int32_semantics.type.literal = true;
    AtomicAdd_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicAdd_Int32.name = "atomicAdd"_c;
    AtomicAdd_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicAdd_Int32.parameters = AtomicAdd_Int32_args;
    Symbol::Resolved(&AtomicAdd_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAdd_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAdd_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicSubtract with Int32, Int32, MemorySemantics
    AtomicSubtract_Int32_ptr.name = "ptr"_c;
    AtomicSubtract_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicSubtract_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicSubtract_Int32_value.name = "value"_c;
    AtomicSubtract_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicSubtract_Int32_semantics.name = "semantics"_c;
    AtomicSubtract_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Int32_semantics.type.literal = true;
    AtomicSubtract_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicSubtract_Int32.name = "atomicSubtract"_c;
    AtomicSubtract_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicSubtract_Int32.parameters = AtomicSubtract_Int32_args;
    Symbol::Resolved(&AtomicSubtract_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicSubtract_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicSubtract_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicAnd with Int32, Int32, MemorySemantics
    AtomicAnd_Int32_ptr.name = "ptr"_c;
    AtomicAnd_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicAnd_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAnd_Int32_value.name = "value"_c;
    AtomicAnd_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicAnd_Int32_semantics.name = "semantics"_c;
    AtomicAnd_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Int32_semantics.type.literal = true;
    AtomicAnd_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicAnd_Int32.name = "atomicAnd"_c;
    AtomicAnd_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicAnd_Int32.parameters = AtomicAnd_Int32_args;
    Symbol::Resolved(&AtomicAnd_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAnd_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAnd_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicOr with Int32, Int32, MemorySemantics
    AtomicOr_Int32_ptr.name = "ptr"_c;
    AtomicOr_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicOr_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicOr_Int32_value.name = "value"_c;
    AtomicOr_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicOr_Int32_semantics.name = "semantics"_c;
    AtomicOr_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Int32_semantics.type.literal = true;
    AtomicOr_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicOr_Int32.name = "atomicOr"_c;
    AtomicOr_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicOr_Int32.parameters = AtomicOr_Int32_args;
    Symbol::Resolved(&AtomicOr_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicOr_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicOr_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicXor with Int32, Int32, MemorySemantics
    AtomicXor_Int32_ptr.name = "ptr"_c;
    AtomicXor_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicXor_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicXor_Int32_value.name = "value"_c;
    AtomicXor_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicXor_Int32_semantics.name = "semantics"_c;
    AtomicXor_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Int32_semantics.type.literal = true;
    AtomicXor_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicXor_Int32.name = "atomicXor"_c;
    AtomicXor_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicXor_Int32.parameters = AtomicXor_Int32_args;
    Symbol::Resolved(&AtomicXor_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicXor_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicXor_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicStore with UInt16, UInt16, MemorySemantics
    AtomicStore_UInt16_ptr.name = "ptr"_c;
    AtomicStore_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicStore_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicStore_UInt16_value.name = "value"_c;
    AtomicStore_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicStore_UInt16_semantics.name = "semantics"_c;
    AtomicStore_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_UInt16_semantics.type.literal = true;
    AtomicStore_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicStore_UInt16.name = "atomicStore"_c;
    AtomicStore_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicStore_UInt16.parameters = AtomicStore_UInt16_args;
    Symbol::Resolved(&AtomicStore_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicStore_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicStore_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicExchange with UInt16, UInt16, MemorySemantics
    AtomicExchange_UInt16_ptr.name = "ptr"_c;
    AtomicExchange_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicExchange_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicExchange_UInt16_value.name = "value"_c;
    AtomicExchange_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicExchange_UInt16_semantics.name = "semantics"_c;
    AtomicExchange_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_UInt16_semantics.type.literal = true;
    AtomicExchange_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicExchange_UInt16.name = "atomicExchange"_c;
    AtomicExchange_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicExchange_UInt16.parameters = AtomicExchange_UInt16_args;
    Symbol::Resolved(&AtomicExchange_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicExchange_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicExchange_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicAdd with UInt16, UInt16, MemorySemantics
    AtomicAdd_UInt16_ptr.name = "ptr"_c;
    AtomicAdd_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicAdd_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAdd_UInt16_value.name = "value"_c;
    AtomicAdd_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicAdd_UInt16_semantics.name = "semantics"_c;
    AtomicAdd_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_UInt16_semantics.type.literal = true;
    AtomicAdd_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicAdd_UInt16.name = "atomicAdd"_c;
    AtomicAdd_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicAdd_UInt16.parameters = AtomicAdd_UInt16_args;
    Symbol::Resolved(&AtomicAdd_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAdd_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAdd_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicSubtract with UInt16, UInt16, MemorySemantics
    AtomicSubtract_UInt16_ptr.name = "ptr"_c;
    AtomicSubtract_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicSubtract_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicSubtract_UInt16_value.name = "value"_c;
    AtomicSubtract_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicSubtract_UInt16_semantics.name = "semantics"_c;
    AtomicSubtract_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_UInt16_semantics.type.literal = true;
    AtomicSubtract_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicSubtract_UInt16.name = "atomicSubtract"_c;
    AtomicSubtract_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicSubtract_UInt16.parameters = AtomicSubtract_UInt16_args;
    Symbol::Resolved(&AtomicSubtract_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicSubtract_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicSubtract_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicAnd with UInt16, UInt16, MemorySemantics
    AtomicAnd_UInt16_ptr.name = "ptr"_c;
    AtomicAnd_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicAnd_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAnd_UInt16_value.name = "value"_c;
    AtomicAnd_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicAnd_UInt16_semantics.name = "semantics"_c;
    AtomicAnd_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_UInt16_semantics.type.literal = true;
    AtomicAnd_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicAnd_UInt16.name = "atomicAnd"_c;
    AtomicAnd_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicAnd_UInt16.parameters = AtomicAnd_UInt16_args;
    Symbol::Resolved(&AtomicAnd_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAnd_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAnd_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicOr with UInt16, UInt16, MemorySemantics
    AtomicOr_UInt16_ptr.name = "ptr"_c;
    AtomicOr_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicOr_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicOr_UInt16_value.name = "value"_c;
    AtomicOr_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicOr_UInt16_semantics.name = "semantics"_c;
    AtomicOr_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_UInt16_semantics.type.literal = true;
    AtomicOr_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicOr_UInt16.name = "atomicOr"_c;
    AtomicOr_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicOr_UInt16.parameters = AtomicOr_UInt16_args;
    Symbol::Resolved(&AtomicOr_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicOr_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicOr_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicXor with UInt16, UInt16, MemorySemantics
    AtomicXor_UInt16_ptr.name = "ptr"_c;
    AtomicXor_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicXor_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicXor_UInt16_value.name = "value"_c;
    AtomicXor_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicXor_UInt16_semantics.name = "semantics"_c;
    AtomicXor_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_UInt16_semantics.type.literal = true;
    AtomicXor_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicXor_UInt16.name = "atomicXor"_c;
    AtomicXor_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicXor_UInt16.parameters = AtomicXor_UInt16_args;
    Symbol::Resolved(&AtomicXor_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicXor_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicXor_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicStore with Int16, Int16, MemorySemantics
    AtomicStore_Int16_ptr.name = "ptr"_c;
    AtomicStore_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicStore_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicStore_Int16_value.name = "value"_c;
    AtomicStore_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicStore_Int16_semantics.name = "semantics"_c;
    AtomicStore_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Int16_semantics.type.literal = true;
    AtomicStore_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicStore_Int16.name = "atomicStore"_c;
    AtomicStore_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicStore_Int16.parameters = AtomicStore_Int16_args;
    Symbol::Resolved(&AtomicStore_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicStore_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicStore_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicExchange with Int16, Int16, MemorySemantics
    AtomicExchange_Int16_ptr.name = "ptr"_c;
    AtomicExchange_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicExchange_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicExchange_Int16_value.name = "value"_c;
    AtomicExchange_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicExchange_Int16_semantics.name = "semantics"_c;
    AtomicExchange_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Int16_semantics.type.literal = true;
    AtomicExchange_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicExchange_Int16.name = "atomicExchange"_c;
    AtomicExchange_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicExchange_Int16.parameters = AtomicExchange_Int16_args;
    Symbol::Resolved(&AtomicExchange_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicExchange_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicExchange_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicAdd with Int16, Int16, MemorySemantics
    AtomicAdd_Int16_ptr.name = "ptr"_c;
    AtomicAdd_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicAdd_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAdd_Int16_value.name = "value"_c;
    AtomicAdd_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicAdd_Int16_semantics.name = "semantics"_c;
    AtomicAdd_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Int16_semantics.type.literal = true;
    AtomicAdd_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicAdd_Int16.name = "atomicAdd"_c;
    AtomicAdd_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicAdd_Int16.parameters = AtomicAdd_Int16_args;
    Symbol::Resolved(&AtomicAdd_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAdd_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAdd_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicSubtract with Int16, Int16, MemorySemantics
    AtomicSubtract_Int16_ptr.name = "ptr"_c;
    AtomicSubtract_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicSubtract_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicSubtract_Int16_value.name = "value"_c;
    AtomicSubtract_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicSubtract_Int16_semantics.name = "semantics"_c;
    AtomicSubtract_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Int16_semantics.type.literal = true;
    AtomicSubtract_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicSubtract_Int16.name = "atomicSubtract"_c;
    AtomicSubtract_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicSubtract_Int16.parameters = AtomicSubtract_Int16_args;
    Symbol::Resolved(&AtomicSubtract_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicSubtract_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicSubtract_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicAnd with Int16, Int16, MemorySemantics
    AtomicAnd_Int16_ptr.name = "ptr"_c;
    AtomicAnd_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicAnd_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicAnd_Int16_value.name = "value"_c;
    AtomicAnd_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicAnd_Int16_semantics.name = "semantics"_c;
    AtomicAnd_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Int16_semantics.type.literal = true;
    AtomicAnd_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicAnd_Int16.name = "atomicAnd"_c;
    AtomicAnd_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicAnd_Int16.parameters = AtomicAnd_Int16_args;
    Symbol::Resolved(&AtomicAnd_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAnd_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAnd_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicOr with Int16, Int16, MemorySemantics
    AtomicOr_Int16_ptr.name = "ptr"_c;
    AtomicOr_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicOr_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicOr_Int16_value.name = "value"_c;
    AtomicOr_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicOr_Int16_semantics.name = "semantics"_c;
    AtomicOr_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Int16_semantics.type.literal = true;
    AtomicOr_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicOr_Int16.name = "atomicOr"_c;
    AtomicOr_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicOr_Int16.parameters = AtomicOr_Int16_args;
    Symbol::Resolved(&AtomicOr_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicOr_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicOr_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicXor with Int16, Int16, MemorySemantics
    AtomicXor_Int16_ptr.name = "ptr"_c;
    AtomicXor_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicXor_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicXor_Int16_value.name = "value"_c;
    AtomicXor_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicXor_Int16_semantics.name = "semantics"_c;
    AtomicXor_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Int16_semantics.type.literal = true;
    AtomicXor_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicXor_Int16.name = "atomicXor"_c;
    AtomicXor_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicXor_Int16.parameters = AtomicXor_Int16_args;
    Symbol::Resolved(&AtomicXor_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicXor_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicXor_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
    AtomicCompareExchange_UInt32_ptr.name = "ptr"_c;
    AtomicCompareExchange_UInt32_ptr.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_UInt32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicCompareExchange_UInt32_value.name = "value"_c;
    AtomicCompareExchange_UInt32_value.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_UInt32_compare.name = "compare"_c;
    AtomicCompareExchange_UInt32_compare.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_UInt32_semantics.name = "semantics"_c;
    AtomicCompareExchange_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_UInt32_semantics.type.literal = true;
    AtomicCompareExchange_UInt32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicCompareExchange_UInt32.name = "atomicCompareExchange"_c;
    AtomicCompareExchange_UInt32.returnType = Type::FullType { Int16Type.name };
    AtomicCompareExchange_UInt32.parameters = AtomicCompareExchange_UInt32_args;
    Symbol::Resolved(&AtomicCompareExchange_UInt32_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt32_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt32_compare)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_UInt32)->returnTypeSymbol = &Int16Type;

    /// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
    AtomicCompareExchange_Int32_ptr.name = "ptr"_c;
    AtomicCompareExchange_Int32_ptr.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int32_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicCompareExchange_Int32_value.name = "value"_c;
    AtomicCompareExchange_Int32_value.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int32_compare.name = "compare"_c;
    AtomicCompareExchange_Int32_compare.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int32_semantics.name = "semantics"_c;
    AtomicCompareExchange_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Int32_semantics.type.literal = true;
    AtomicCompareExchange_Int32.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicCompareExchange_Int32.name = "atomicCompareExchange"_c;
    AtomicCompareExchange_Int32.returnType = Type::FullType { Int16Type.name };
    AtomicCompareExchange_Int32.parameters = AtomicCompareExchange_Int32_args;
    Symbol::Resolved(&AtomicCompareExchange_Int32_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int32_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int32_compare)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Int32)->returnTypeSymbol = &Int16Type;

    /// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
    AtomicCompareExchange_UInt16_ptr.name = "ptr"_c;
    AtomicCompareExchange_UInt16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_UInt16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicCompareExchange_UInt16_value.name = "value"_c;
    AtomicCompareExchange_UInt16_value.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_UInt16_compare.name = "compare"_c;
    AtomicCompareExchange_UInt16_compare.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_UInt16_semantics.name = "semantics"_c;
    AtomicCompareExchange_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_UInt16_semantics.type.literal = true;
    AtomicCompareExchange_UInt16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicCompareExchange_UInt16.name = "atomicCompareExchange"_c;
    AtomicCompareExchange_UInt16.returnType = Type::FullType { Int16Type.name };
    AtomicCompareExchange_UInt16.parameters = AtomicCompareExchange_UInt16_args;
    Symbol::Resolved(&AtomicCompareExchange_UInt16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt16_compare)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_UInt16)->returnTypeSymbol = &Int16Type;

    /// atomicCompareExchange with Int16, Int16, Int16, MemorySemantics
    AtomicCompareExchange_Int16_ptr.name = "ptr"_c;
    AtomicCompareExchange_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int16_ptr.type.AddModifier(Type::FullType::Modifier::Pointer);
    AtomicCompareExchange_Int16_value.name = "value"_c;
    AtomicCompareExchange_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int16_compare.name = "compare"_c;
    AtomicCompareExchange_Int16_compare.type = Type::FullType{ Int16Type.name };
    AtomicCompareExchange_Int16_semantics.name = "semantics"_c;
    AtomicCompareExchange_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Int16_semantics.type.literal = true;
    AtomicCompareExchange_Int16.documentation = "Returns true if bit at index in mask is 1"_c;
    AtomicCompareExchange_Int16.name = "atomicCompareExchange"_c;
    AtomicCompareExchange_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicCompareExchange_Int16.parameters = AtomicCompareExchange_Int16_args;
    Symbol::Resolved(&AtomicCompareExchange_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int16_compare)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicCompareExchange_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Int16)->returnTypeSymbol = &Int16Type;

    /// bitInsert with UInt16, UInt16, UInt16, UInt16
    BitInsert_UInt16_base.name = "base"_c;
    BitInsert_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16_value.name = "value"_c;
    BitInsert_UInt16_value.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16_offset.name = "offset"_c;
    BitInsert_UInt16_offset.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16_count.name = "count"_c;
    BitInsert_UInt16_count.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16.documentation = "Insert bit into bitmask"_c;
    BitInsert_UInt16.name = "bitInsert"_c;
    BitInsert_UInt16.returnType = Type::FullType { UInt16Type.name };
    BitInsert_UInt16.parameters = BitInsert_UInt16_args;
    Symbol::Resolved(&BitInsert_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16_offset)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16_count)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16)->returnTypeSymbol = &UInt16Type;

    /// bitInsert with UInt32, UInt32, UInt32, UInt32
    BitInsert_UInt32_base.name = "base"_c;
    BitInsert_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32_value.name = "value"_c;
    BitInsert_UInt32_value.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32_offset.name = "offset"_c;
    BitInsert_UInt32_offset.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32_count.name = "count"_c;
    BitInsert_UInt32_count.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32.documentation = "Insert bit into bitmask"_c;
    BitInsert_UInt32.name = "bitInsert"_c;
    BitInsert_UInt32.returnType = Type::FullType { UInt32Type.name };
    BitInsert_UInt32.parameters = BitInsert_UInt32_args;
    Symbol::Resolved(&BitInsert_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32_count)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32)->returnTypeSymbol = &UInt32Type;

    /// bitExtract with UInt32, UInt32, UInt32
    BitExtract_UInt32_base.name = "base"_c;
    BitExtract_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitExtract_UInt32_offset.name = "offset"_c;
    BitExtract_UInt32_offset.type = Type::FullType{ UInt32Type.name };
    BitExtract_UInt32_count.name = "count"_c;
    BitExtract_UInt32_count.type = Type::FullType{ UInt32Type.name };
    BitExtract_UInt32.documentation = "Extract a specific bit from a bitmask"_c;
    BitExtract_UInt32.name = "bitExtract"_c;
    BitExtract_UInt32.returnType = Type::FullType { UInt32Type.name };
    BitExtract_UInt32.parameters = BitExtract_UInt32_args;
    Symbol::Resolved(&BitExtract_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitExtract_UInt32_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitExtract_UInt32_count)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitExtract_UInt32)->returnTypeSymbol = &UInt32Type;

    /// bitExtract with Int32, Int32, Int32
    BitExtract_Int32_base.name = "base"_c;
    BitExtract_Int32_base.type = Type::FullType{ Int32Type.name };
    BitExtract_Int32_offset.name = "offset"_c;
    BitExtract_Int32_offset.type = Type::FullType{ Int32Type.name };
    BitExtract_Int32_count.name = "count"_c;
    BitExtract_Int32_count.type = Type::FullType{ Int32Type.name };
    BitExtract_Int32.documentation = "Extract a specific bit from a bitmask"_c;
    BitExtract_Int32.name = "bitExtract"_c;
    BitExtract_Int32.returnType = Type::FullType { Int32Type.name };
    BitExtract_Int32.parameters = BitExtract_Int32_args;
    Symbol::Resolved(&BitExtract_Int32_base)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitExtract_Int32_offset)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitExtract_Int32_count)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitExtract_Int32)->returnTypeSymbol = &Int32Type;

    /// bitExtract with UInt16, UInt16, UInt16
    BitExtract_UInt16_base.name = "base"_c;
    BitExtract_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitExtract_UInt16_offset.name = "offset"_c;
    BitExtract_UInt16_offset.type = Type::FullType{ UInt16Type.name };
    BitExtract_UInt16_count.name = "count"_c;
    BitExtract_UInt16_count.type = Type::FullType{ UInt16Type.name };
    BitExtract_UInt16.documentation = "Extract a specific bit from a bitmask"_c;
    BitExtract_UInt16.name = "bitExtract"_c;
    BitExtract_UInt16.returnType = Type::FullType { UInt16Type.name };
    BitExtract_UInt16.parameters = BitExtract_UInt16_args;
    Symbol::Resolved(&BitExtract_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitExtract_UInt16_offset)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitExtract_UInt16_count)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitExtract_UInt16)->returnTypeSymbol = &UInt16Type;

    /// bitExtract with Int16, Int16, Int16
    BitExtract_Int16_base.name = "base"_c;
    BitExtract_Int16_base.type = Type::FullType{ Int16Type.name };
    BitExtract_Int16_offset.name = "offset"_c;
    BitExtract_Int16_offset.type = Type::FullType{ Int16Type.name };
    BitExtract_Int16_count.name = "count"_c;
    BitExtract_Int16_count.type = Type::FullType{ Int16Type.name };
    BitExtract_Int16.documentation = "Extract a specific bit from a bitmask"_c;
    BitExtract_Int16.name = "bitExtract"_c;
    BitExtract_Int16.returnType = Type::FullType { Int16Type.name };
    BitExtract_Int16.parameters = BitExtract_Int16_args;
    Symbol::Resolved(&BitExtract_Int16_base)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitExtract_Int16_offset)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitExtract_Int16_count)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitExtract_Int16)->returnTypeSymbol = &Int16Type;

    /// bitReverse with UInt32
    BitReverse_UInt32_base.name = "base"_c;
    BitReverse_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitReverse_UInt32.name = "bitReverse"_c;
    BitReverse_UInt32.returnType = Type::FullType { UInt32Type.name };
    BitReverse_UInt32.parameters = BitReverse_UInt32_args;
    Symbol::Resolved(&BitReverse_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitReverse_UInt32)->returnTypeSymbol = &UInt32Type;

    /// bitReverse with Int32
    BitReverse_Int32_base.name = "base"_c;
    BitReverse_Int32_base.type = Type::FullType{ Int32Type.name };
    BitReverse_Int32.name = "bitReverse"_c;
    BitReverse_Int32.returnType = Type::FullType { Int32Type.name };
    BitReverse_Int32.parameters = BitReverse_Int32_args;
    Symbol::Resolved(&BitReverse_Int32_base)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitReverse_Int32)->returnTypeSymbol = &Int32Type;

    /// bitReverse with UInt16
    BitReverse_UInt16_base.name = "base"_c;
    BitReverse_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitReverse_UInt16.name = "bitReverse"_c;
    BitReverse_UInt16.returnType = Type::FullType { UInt16Type.name };
    BitReverse_UInt16.parameters = BitReverse_UInt16_args;
    Symbol::Resolved(&BitReverse_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitReverse_UInt16)->returnTypeSymbol = &UInt16Type;

    /// bitReverse with Int16
    BitReverse_Int16_base.name = "base"_c;
    BitReverse_Int16_base.type = Type::FullType{ Int16Type.name };
    BitReverse_Int16.name = "bitReverse"_c;
    BitReverse_Int16.returnType = Type::FullType { Int16Type.name };
    BitReverse_Int16.parameters = BitReverse_Int16_args;
    Symbol::Resolved(&BitReverse_Int16_base)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitReverse_Int16)->returnTypeSymbol = &Int16Type;

    /// bitCount with UInt32
    BitCount_UInt32_base.name = "base"_c;
    BitCount_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitCount_UInt32.name = "bitCount"_c;
    BitCount_UInt32.returnType = Type::FullType { UInt32Type.name };
    BitCount_UInt32.parameters = BitCount_UInt32_args;
    Symbol::Resolved(&BitCount_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitCount_UInt32)->returnTypeSymbol = &UInt32Type;

    /// bitCount with Int32
    BitCount_Int32_base.name = "base"_c;
    BitCount_Int32_base.type = Type::FullType{ Int32Type.name };
    BitCount_Int32.name = "bitCount"_c;
    BitCount_Int32.returnType = Type::FullType { Int32Type.name };
    BitCount_Int32.parameters = BitCount_Int32_args;
    Symbol::Resolved(&BitCount_Int32_base)->typeSymbol = &Int32Type;
    Symbol::Resolved(&BitCount_Int32)->returnTypeSymbol = &Int32Type;

    /// bitCount with UInt16
    BitCount_UInt16_base.name = "base"_c;
    BitCount_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitCount_UInt16.name = "bitCount"_c;
    BitCount_UInt16.returnType = Type::FullType { UInt16Type.name };
    BitCount_UInt16.parameters = BitCount_UInt16_args;
    Symbol::Resolved(&BitCount_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitCount_UInt16)->returnTypeSymbol = &UInt16Type;

    /// bitCount with Int16
    BitCount_Int16_base.name = "base"_c;
    BitCount_Int16_base.type = Type::FullType{ Int16Type.name };
    BitCount_Int16.name = "bitCount"_c;
    BitCount_Int16.returnType = Type::FullType { Int16Type.name };
    BitCount_Int16.parameters = BitCount_Int16_args;
    Symbol::Resolved(&BitCount_Int16_base)->typeSymbol = &Int16Type;
    Symbol::Resolved(&BitCount_Int16)->returnTypeSymbol = &Int16Type;

    /// executionBarrier
    ExecutionBarrier.name = "executionBarrier"_c;
    ExecutionBarrier.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&ExecutionBarrier)->returnTypeSymbol = &Int16Type;

    /// executionBarrierSubgroup
    ExecutionBarrierSubgroup.name = "executionBarrierSubgroup"_c;
    ExecutionBarrierSubgroup.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&ExecutionBarrierSubgroup)->returnTypeSymbol = &Int16Type;

    /// executionBarrierWorkgroup
    ExecutionBarrierWorkgroup.name = "executionBarrierWorkgroup"_c;
    ExecutionBarrierWorkgroup.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&ExecutionBarrierWorkgroup)->returnTypeSymbol = &Int16Type;

    /// memoryBarrier
    MemoryBarrier.name = "memoryBarrier"_c;
    MemoryBarrier.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&MemoryBarrier)->returnTypeSymbol = &Int16Type;

    /// memoryBarrierBuffer
    MemoryBarrierBuffer.name = "memoryBarrierBuffer"_c;
    MemoryBarrierBuffer.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&MemoryBarrierBuffer)->returnTypeSymbol = &Int16Type;

    /// memoryBarrierTexture
    MemoryBarrierTexture.name = "memoryBarrierTexture"_c;
    MemoryBarrierTexture.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&MemoryBarrierTexture)->returnTypeSymbol = &Int16Type;

    /// memoryBarrierAtomic
    MemoryBarrierAtomic.name = "memoryBarrierAtomic"_c;
    MemoryBarrierAtomic.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&MemoryBarrierAtomic)->returnTypeSymbol = &Int16Type;

    /// memoryBarrierSubgroup
    MemoryBarrierSubgroup.name = "memoryBarrierSubgroup"_c;
    MemoryBarrierSubgroup.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&MemoryBarrierSubgroup)->returnTypeSymbol = &Int16Type;

    /// memoryBarrierWorkgroup
    MemoryBarrierWorkgroup.name = "memoryBarrierWorkgroup"_c;
    MemoryBarrierWorkgroup.returnType = Type::FullType { Int16Type.name };
    Symbol::Resolved(&MemoryBarrierWorkgroup)->returnTypeSymbol = &Int16Type;

    /// textureGetSize with Texture1D
    TextureGetSize_Texture1D_texture.name = "texture"_c;
    TextureGetSize_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetSize_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_Texture1D.name = "textureGetSize"_c;
    TextureGetSize_Texture1D.returnType = Type::FullType { Texture1DType.name };
    TextureGetSize_Texture1D.parameters = TextureGetSize_Texture1D_args;
    Symbol::Resolved(&TextureGetSize_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetSize_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture1D)->returnTypeSymbol = &Texture1DType;

    /// textureGetSize with Texture2D
    TextureGetSize_Texture2D_texture.name = "texture"_c;
    TextureGetSize_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetSize_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_Texture2D.name = "textureGetSize"_c;
    TextureGetSize_Texture2D.returnType = Type::FullType { Texture2DType.name };
    TextureGetSize_Texture2D.parameters = TextureGetSize_Texture2D_args;
    Symbol::Resolved(&TextureGetSize_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetSize_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureGetSize with Texture3D
    TextureGetSize_Texture3D_texture.name = "texture"_c;
    TextureGetSize_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetSize_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_Texture3D.name = "textureGetSize"_c;
    TextureGetSize_Texture3D.returnType = Type::FullType { Texture3DType.name };
    TextureGetSize_Texture3D.parameters = TextureGetSize_Texture3D_args;
    Symbol::Resolved(&TextureGetSize_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetSize_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture3D)->returnTypeSymbol = &Texture3DType;

    /// textureGetSize with TextureCube
    TextureGetSize_TextureCube_texture.name = "texture"_c;
    TextureGetSize_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetSize_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_TextureCube.name = "textureGetSize"_c;
    TextureGetSize_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    TextureGetSize_TextureCube.parameters = TextureGetSize_TextureCube_args;
    Symbol::Resolved(&TextureGetSize_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetSize_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureGetSize with Texture1DArray
    TextureGetSize_Texture1DArray_texture.name = "texture"_c;
    TextureGetSize_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSize_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_Texture1DArray.name = "textureGetSize"_c;
    TextureGetSize_Texture1DArray.returnType = Type::FullType { Texture1DArrayType.name };
    TextureGetSize_Texture1DArray.parameters = TextureGetSize_Texture1DArray_args;
    Symbol::Resolved(&TextureGetSize_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetSize_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture1DArray)->returnTypeSymbol = &Texture1DArrayType;

    /// textureGetSize with Texture2DArray
    TextureGetSize_Texture2DArray_texture.name = "texture"_c;
    TextureGetSize_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSize_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_Texture2DArray.name = "textureGetSize"_c;
    TextureGetSize_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    TextureGetSize_Texture2DArray.parameters = TextureGetSize_Texture2DArray_args;
    Symbol::Resolved(&TextureGetSize_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetSize_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureGetSize with TextureCubeArray
    TextureGetSize_TextureCubeArray_texture.name = "texture"_c;
    TextureGetSize_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSize_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSize_TextureCubeArray.name = "textureGetSize"_c;
    TextureGetSize_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    TextureGetSize_TextureCubeArray.parameters = TextureGetSize_TextureCubeArray_args;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSize_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// textureGetSizeMip with Texture1D, UInt32
    TextureGetSizeMip_Texture1D_texture.name = "texture"_c;
    TextureGetSizeMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetSizeMip_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_Texture1D_mip.name = "mip"_c;
    TextureGetSizeMip_Texture1D_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture1D.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture1D.returnType = Type::FullType { Texture1DType.name };
    TextureGetSizeMip_Texture1D.parameters = TextureGetSizeMip_Texture1D_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture1D)->returnTypeSymbol = &Texture1DType;

    /// textureGetSizeMip with Texture2D, UInt32
    TextureGetSizeMip_Texture2D_texture.name = "texture"_c;
    TextureGetSizeMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetSizeMip_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_Texture2D_mip.name = "mip"_c;
    TextureGetSizeMip_Texture2D_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture2D.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture2D.returnType = Type::FullType { Texture2DType.name };
    TextureGetSizeMip_Texture2D.parameters = TextureGetSizeMip_Texture2D_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureGetSizeMip with Texture3D, UInt32
    TextureGetSizeMip_Texture3D_texture.name = "texture"_c;
    TextureGetSizeMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetSizeMip_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_Texture3D_mip.name = "mip"_c;
    TextureGetSizeMip_Texture3D_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture3D.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture3D.returnType = Type::FullType { Texture3DType.name };
    TextureGetSizeMip_Texture3D.parameters = TextureGetSizeMip_Texture3D_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture3D)->returnTypeSymbol = &Texture3DType;

    /// textureGetSizeMip with TextureCube, UInt32
    TextureGetSizeMip_TextureCube_texture.name = "texture"_c;
    TextureGetSizeMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetSizeMip_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_TextureCube_mip.name = "mip"_c;
    TextureGetSizeMip_TextureCube_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_TextureCube.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    TextureGetSizeMip_TextureCube.parameters = TextureGetSizeMip_TextureCube_args;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureGetSizeMip with Texture1DArray, UInt32
    TextureGetSizeMip_Texture1DArray_texture.name = "texture"_c;
    TextureGetSizeMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSizeMip_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_Texture1DArray_mip.name = "mip"_c;
    TextureGetSizeMip_Texture1DArray_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture1DArray.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture1DArray.returnType = Type::FullType { Texture1DArrayType.name };
    TextureGetSizeMip_Texture1DArray.parameters = TextureGetSizeMip_Texture1DArray_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture1DArray)->returnTypeSymbol = &Texture1DArrayType;

    /// textureGetSizeMip with Texture2DArray, UInt32
    TextureGetSizeMip_Texture2DArray_texture.name = "texture"_c;
    TextureGetSizeMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSizeMip_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_Texture2DArray_mip.name = "mip"_c;
    TextureGetSizeMip_Texture2DArray_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_Texture2DArray.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    TextureGetSizeMip_Texture2DArray.parameters = TextureGetSizeMip_Texture2DArray_args;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureGetSizeMip with TextureCubeArray, UInt32
    TextureGetSizeMip_TextureCubeArray_texture.name = "texture"_c;
    TextureGetSizeMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSizeMip_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSizeMip_TextureCubeArray_mip.name = "mip"_c;
    TextureGetSizeMip_TextureCubeArray_mip.type = Type::FullType{ UInt32Type.name };
    TextureGetSizeMip_TextureCubeArray.name = "textureGetSizeMip"_c;
    TextureGetSizeMip_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    TextureGetSizeMip_TextureCubeArray.parameters = TextureGetSizeMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray_mip)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGetSizeMip_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// textureGetMips with Texture1D
    TextureGetMips_Texture1D_texture.name = "texture"_c;
    TextureGetMips_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetMips_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_Texture1D.name = "textureGetMips"_c;
    TextureGetMips_Texture1D.returnType = Type::FullType { Texture1DType.name };
    TextureGetMips_Texture1D.parameters = TextureGetMips_Texture1D_args;
    Symbol::Resolved(&TextureGetMips_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetMips_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture1D)->returnTypeSymbol = &Texture1DType;

    /// textureGetMips with Texture2D
    TextureGetMips_Texture2D_texture.name = "texture"_c;
    TextureGetMips_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetMips_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_Texture2D.name = "textureGetMips"_c;
    TextureGetMips_Texture2D.returnType = Type::FullType { Texture2DType.name };
    TextureGetMips_Texture2D.parameters = TextureGetMips_Texture2D_args;
    Symbol::Resolved(&TextureGetMips_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetMips_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureGetMips with Texture3D
    TextureGetMips_Texture3D_texture.name = "texture"_c;
    TextureGetMips_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetMips_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_Texture3D.name = "textureGetMips"_c;
    TextureGetMips_Texture3D.returnType = Type::FullType { Texture3DType.name };
    TextureGetMips_Texture3D.parameters = TextureGetMips_Texture3D_args;
    Symbol::Resolved(&TextureGetMips_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetMips_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture3D)->returnTypeSymbol = &Texture3DType;

    /// textureGetMips with TextureCube
    TextureGetMips_TextureCube_texture.name = "texture"_c;
    TextureGetMips_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetMips_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_TextureCube.name = "textureGetMips"_c;
    TextureGetMips_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    TextureGetMips_TextureCube.parameters = TextureGetMips_TextureCube_args;
    Symbol::Resolved(&TextureGetMips_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetMips_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureGetMips with Texture1DArray
    TextureGetMips_Texture1DArray_texture.name = "texture"_c;
    TextureGetMips_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetMips_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_Texture1DArray.name = "textureGetMips"_c;
    TextureGetMips_Texture1DArray.returnType = Type::FullType { Texture1DArrayType.name };
    TextureGetMips_Texture1DArray.parameters = TextureGetMips_Texture1DArray_args;
    Symbol::Resolved(&TextureGetMips_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetMips_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture1DArray)->returnTypeSymbol = &Texture1DArrayType;

    /// textureGetMips with Texture2DArray
    TextureGetMips_Texture2DArray_texture.name = "texture"_c;
    TextureGetMips_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetMips_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_Texture2DArray.name = "textureGetMips"_c;
    TextureGetMips_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    TextureGetMips_Texture2DArray.parameters = TextureGetMips_Texture2DArray_args;
    Symbol::Resolved(&TextureGetMips_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetMips_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureGetMips with TextureCubeArray
    TextureGetMips_TextureCubeArray_texture.name = "texture"_c;
    TextureGetMips_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetMips_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetMips_TextureCubeArray.name = "textureGetMips"_c;
    TextureGetMips_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    TextureGetMips_TextureCubeArray.parameters = TextureGetMips_TextureCubeArray_args;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetMips_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// textureGetSamples with Texture2DMS
    TextureGetSamples_Texture2DMS_texture.name = "texture"_c;
    TextureGetSamples_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureGetSamples_Texture2DMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSamples_Texture2DMS.name = "textureGetSamples"_c;
    TextureGetSamples_Texture2DMS.returnType = Type::FullType { Texture2DMSType.name };
    TextureGetSamples_Texture2DMS.parameters = TextureGetSamples_Texture2DMS_args;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSamples_Texture2DMS)->returnTypeSymbol = &Texture2DMSType;

    /// textureGetSamples with Texture2DMSArray
    TextureGetSamples_Texture2DMSArray_texture.name = "texture"_c;
    TextureGetSamples_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureGetSamples_Texture2DMSArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSamples_Texture2DMSArray.name = "textureGetSamples"_c;
    TextureGetSamples_Texture2DMSArray.returnType = Type::FullType { Texture2DMSArrayType.name };
    TextureGetSamples_Texture2DMSArray.parameters = TextureGetSamples_Texture2DMSArray_args;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSamples_Texture2DMSArray)->returnTypeSymbol = &Texture2DMSArrayType;

    /// textureGetSampledMip with Texture1D, Sampler, Float32
    TextureGetSampledMip_Texture1D_texture.name = "texture"_c;
    TextureGetSampledMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureGetSampledMip_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture1D_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureGetSampledMip_Texture1D.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture1D.returnType = Type::FullType { Texture1DType.name };
    TextureGetSampledMip_Texture1D.parameters = TextureGetSampledMip_Texture1D_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture1D)->returnTypeSymbol = &Texture1DType;

    /// textureGetSampledMip with Texture1D, Float32
    SampledTextureGetSampledMip_Texture1D_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureGetSampledMip_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGetSampledMip_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureGetSampledMip_Texture1D.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture1D.returnType = Type::FullType { Texture1DType.name };
    SampledTextureGetSampledMip_Texture1D.parameters = SampledTextureGetSampledMip_Texture1D_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1D)->returnTypeSymbol = &Texture1DType;

    /// textureGetSampledMip with Texture2D, Sampler, Float32x2
    TextureGetSampledMip_Texture2D_texture.name = "texture"_c;
    TextureGetSampledMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGetSampledMip_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture2D_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture2D.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture2D.returnType = Type::FullType { Texture2DType.name };
    TextureGetSampledMip_Texture2D.parameters = TextureGetSampledMip_Texture2D_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureGetSampledMip with Texture2D, Float32x2
    SampledTextureGetSampledMip_Texture2D_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureGetSampledMip_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGetSampledMip_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture2D.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture2D.returnType = Type::FullType { Texture2DType.name };
    SampledTextureGetSampledMip_Texture2D.parameters = SampledTextureGetSampledMip_Texture2D_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureGetSampledMip with Texture3D, Sampler, Float32x3
    TextureGetSampledMip_Texture3D_texture.name = "texture"_c;
    TextureGetSampledMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureGetSampledMip_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture3D_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureGetSampledMip_Texture3D.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture3D.returnType = Type::FullType { Texture3DType.name };
    TextureGetSampledMip_Texture3D.parameters = TextureGetSampledMip_Texture3D_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture3D)->returnTypeSymbol = &Texture3DType;

    /// textureGetSampledMip with Texture3D, Float32x3
    SampledTextureGetSampledMip_Texture3D_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureGetSampledMip_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGetSampledMip_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureGetSampledMip_Texture3D.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture3D.returnType = Type::FullType { Texture3DType.name };
    SampledTextureGetSampledMip_Texture3D.parameters = SampledTextureGetSampledMip_Texture3D_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture3D)->returnTypeSymbol = &Texture3DType;

    /// textureGetSampledMip with TextureCube, Sampler, Float32x3
    TextureGetSampledMip_TextureCube_texture.name = "texture"_c;
    TextureGetSampledMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGetSampledMip_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_TextureCube_sampler.name = "sampler"_c;
    TextureGetSampledMip_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_TextureCube_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureGetSampledMip_TextureCube.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    TextureGetSampledMip_TextureCube.parameters = TextureGetSampledMip_TextureCube_args;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureGetSampledMip_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureGetSampledMip with TextureCube, Float32x3
    SampledTextureGetSampledMip_TextureCube_texture.name = "texture"_c;
    SampledTextureGetSampledMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    SampledTextureGetSampledMip_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGetSampledMip_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureGetSampledMip_TextureCube.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    SampledTextureGetSampledMip_TextureCube.parameters = SampledTextureGetSampledMip_TextureCube_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureGetSampledMip with Texture1DArray, Sampler, Float32x2
    TextureGetSampledMip_Texture1DArray_texture.name = "texture"_c;
    TextureGetSampledMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureGetSampledMip_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture1DArray_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureGetSampledMip_Texture1DArray.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture1DArray.returnType = Type::FullType { Texture1DArrayType.name };
    TextureGetSampledMip_Texture1DArray.parameters = TextureGetSampledMip_Texture1DArray_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture1DArray)->returnTypeSymbol = &Texture1DArrayType;

    /// textureGetSampledMip with Texture1DArray, Float32x2
    SampledTextureGetSampledMip_Texture1DArray_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureGetSampledMip_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGetSampledMip_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureGetSampledMip_Texture1DArray.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture1DArray.returnType = Type::FullType { Texture1DArrayType.name };
    SampledTextureGetSampledMip_Texture1DArray.parameters = SampledTextureGetSampledMip_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture1DArray)->returnTypeSymbol = &Texture1DArrayType;

    /// textureGetSampledMip with Texture2DArray, Sampler, Float32x3
    TextureGetSampledMip_Texture2DArray_texture.name = "texture"_c;
    TextureGetSampledMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGetSampledMip_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture2DArray_sampler.name = "sampler"_c;
    TextureGetSampledMip_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureGetSampledMip_Texture2DArray.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    TextureGetSampledMip_Texture2DArray.parameters = TextureGetSampledMip_Texture2DArray_args;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureGetSampledMip_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureGetSampledMip with Texture2DArray, Float32x3
    SampledTextureGetSampledMip_Texture2DArray_texture.name = "texture"_c;
    SampledTextureGetSampledMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureGetSampledMip_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGetSampledMip_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureGetSampledMip_Texture2DArray.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    SampledTextureGetSampledMip_Texture2DArray.parameters = SampledTextureGetSampledMip_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureGetSampledMip with TextureCubeArray, Sampler, Float32x4
    TextureGetSampledMip_TextureCubeArray_texture.name = "texture"_c;
    TextureGetSampledMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGetSampledMip_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_TextureCubeArray_sampler.name = "sampler"_c;
    TextureGetSampledMip_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGetSampledMip_TextureCubeArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGetSampledMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureGetSampledMip_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureGetSampledMip_TextureCubeArray.name = "textureGetSampledMip"_c;
    TextureGetSampledMip_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    TextureGetSampledMip_TextureCubeArray.parameters = TextureGetSampledMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureGetSampledMip_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// textureGetSampledMip with TextureCubeArray, Float32x4
    SampledTextureGetSampledMip_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureGetSampledMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    SampledTextureGetSampledMip_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGetSampledMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureGetSampledMip_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureGetSampledMip_TextureCubeArray.name = "textureGetSampledMip"_c;
    SampledTextureGetSampledMip_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    SampledTextureGetSampledMip_TextureCubeArray.parameters = SampledTextureGetSampledMip_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureGetSampledMip_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// textureLoad with Texture1D, Int32
    TextureLoad_Texture1D_texture.name = "texture"_c;
    TextureLoad_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureLoad_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture1D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureLoad_Texture1D.name = "textureLoad"_c;
    TextureLoad_Texture1D.returnType = Type::FullType { Texture1DType.name };
    TextureLoad_Texture1D.parameters = TextureLoad_Texture1D_args;
    Symbol::Resolved(&TextureLoad_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureLoad_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoad_Texture1D)->returnTypeSymbol = &Texture1DType;

    /// textureLoadMip with Texture1D, Int32, Int32
    TextureLoadMip_Texture1D_texture.name = "texture"_c;
    TextureLoadMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureLoadMip_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1D_mip.name = "mip"_c;
    TextureLoadMip_Texture1D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1D.name = "textureLoadMip"_c;
    TextureLoadMip_Texture1D.returnType = Type::FullType { Texture1DType.name };
    TextureLoadMip_Texture1D.parameters = TextureLoadMip_Texture1D_args;
    Symbol::Resolved(&TextureLoadMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureLoadMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1D)->returnTypeSymbol = &Texture1DType;

    /// textureStore with Texture1D, Int32, Float32x4
    TextureStore_Texture1D_texture.name = "texture"_c;
    TextureStore_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureStore_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture1D_coordinate.name = "coordinate"_c;
    TextureStore_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureStore_Texture1D_value.name = "value"_c;
    TextureStore_Texture1D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture1D.name = "textureStore"_c;
    TextureStore_Texture1D.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture1D.parameters = TextureStore_Texture1D_args;
    Symbol::Resolved(&TextureStore_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureStore_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStore_Texture1D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture1D)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture1D, Int32, Int32, Float32x4
    TextureStoreMip_Texture1D_texture.name = "texture"_c;
    TextureStoreMip_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureStoreMip_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture1D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1D_mip.name = "mip"_c;
    TextureStoreMip_Texture1D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1D_value.name = "value"_c;
    TextureStoreMip_Texture1D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture1D.name = "textureStoreMip"_c;
    TextureStoreMip_Texture1D.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture1D.parameters = TextureStoreMip_Texture1D_args;
    Symbol::Resolved(&TextureStoreMip_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureStoreMip_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture1D)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2D, Int32x2
    TextureLoad_Texture2D_texture.name = "texture"_c;
    TextureLoad_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureLoad_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture2D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture2D.name = "textureLoad"_c;
    TextureLoad_Texture2D.returnType = Type::FullType { Texture2DType.name };
    TextureLoad_Texture2D.parameters = TextureLoad_Texture2D_args;
    Symbol::Resolved(&TextureLoad_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureLoad_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoad_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureLoadMip with Texture2D, Int32x2, Int32
    TextureLoadMip_Texture2D_texture.name = "texture"_c;
    TextureLoadMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureLoadMip_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture2D_mip.name = "mip"_c;
    TextureLoadMip_Texture2D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2D.name = "textureLoadMip"_c;
    TextureLoadMip_Texture2D.returnType = Type::FullType { Texture2DType.name };
    TextureLoadMip_Texture2D.parameters = TextureLoadMip_Texture2D_args;
    Symbol::Resolved(&TextureLoadMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureLoadMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoadMip_Texture2D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureStore with Texture2D, Int32x2, Float32x4
    TextureStore_Texture2D_texture.name = "texture"_c;
    TextureStore_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureStore_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture2D_coordinate.name = "coordinate"_c;
    TextureStore_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture2D_value.name = "value"_c;
    TextureStore_Texture2D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2D.name = "textureStore"_c;
    TextureStore_Texture2D.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2D.parameters = TextureStore_Texture2D_args;
    Symbol::Resolved(&TextureStore_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureStore_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStore_Texture2D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2D)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2D, Int32x2, Int32, Float32x4
    TextureStoreMip_Texture2D_texture.name = "texture"_c;
    TextureStoreMip_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureStoreMip_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture2D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture2D_mip.name = "mip"_c;
    TextureStoreMip_Texture2D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2D_value.name = "value"_c;
    TextureStoreMip_Texture2D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2D.name = "textureStoreMip"_c;
    TextureStoreMip_Texture2D.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2D.parameters = TextureStoreMip_Texture2D_args;
    Symbol::Resolved(&TextureStoreMip_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureStoreMip_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2D)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture3D, Int32x3
    TextureLoad_Texture3D_texture.name = "texture"_c;
    TextureLoad_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureLoad_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture3D_coordinate.name = "coordinate"_c;
    TextureLoad_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture3D.name = "textureLoad"_c;
    TextureLoad_Texture3D.returnType = Type::FullType { Texture3DType.name };
    TextureLoad_Texture3D.parameters = TextureLoad_Texture3D_args;
    Symbol::Resolved(&TextureLoad_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureLoad_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_Texture3D)->returnTypeSymbol = &Texture3DType;

    /// textureLoadMip with Texture3D, Int32x3, Int32
    TextureLoadMip_Texture3D_texture.name = "texture"_c;
    TextureLoadMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureLoadMip_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture3D_mip.name = "mip"_c;
    TextureLoadMip_Texture3D_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture3D.name = "textureLoadMip"_c;
    TextureLoadMip_Texture3D.returnType = Type::FullType { Texture3DType.name };
    TextureLoadMip_Texture3D.parameters = TextureLoadMip_Texture3D_args;
    Symbol::Resolved(&TextureLoadMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureLoadMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_Texture3D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture3D)->returnTypeSymbol = &Texture3DType;

    /// textureStore with Texture3D, Int32x3, Float32x4
    TextureStore_Texture3D_texture.name = "texture"_c;
    TextureStore_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureStore_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture3D_coordinate.name = "coordinate"_c;
    TextureStore_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture3D_value.name = "value"_c;
    TextureStore_Texture3D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture3D.name = "textureStore"_c;
    TextureStore_Texture3D.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture3D.parameters = TextureStore_Texture3D_args;
    Symbol::Resolved(&TextureStore_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureStore_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_Texture3D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture3D)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture3D, Int32x3, Int32, Float32x4
    TextureStoreMip_Texture3D_texture.name = "texture"_c;
    TextureStoreMip_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureStoreMip_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture3D_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture3D_mip.name = "mip"_c;
    TextureStoreMip_Texture3D_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture3D_value.name = "value"_c;
    TextureStoreMip_Texture3D_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture3D.name = "textureStoreMip"_c;
    TextureStoreMip_Texture3D.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture3D.parameters = TextureStoreMip_Texture3D_args;
    Symbol::Resolved(&TextureStoreMip_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureStoreMip_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture3D)->returnTypeSymbol = &VoidType;

    /// textureLoad with TextureCube, Int32x3
    TextureLoad_TextureCube_texture.name = "texture"_c;
    TextureLoad_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureLoad_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_TextureCube_coordinate.name = "coordinate"_c;
    TextureLoad_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_TextureCube.name = "textureLoad"_c;
    TextureLoad_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    TextureLoad_TextureCube.parameters = TextureLoad_TextureCube_args;
    Symbol::Resolved(&TextureLoad_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureLoad_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureLoadMip with TextureCube, Int32x3, Int32
    TextureLoadMip_TextureCube_texture.name = "texture"_c;
    TextureLoadMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureLoadMip_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureLoadMip_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_TextureCube_mip.name = "mip"_c;
    TextureLoadMip_TextureCube_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_TextureCube.name = "textureLoadMip"_c;
    TextureLoadMip_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    TextureLoadMip_TextureCube.parameters = TextureLoadMip_TextureCube_args;
    Symbol::Resolved(&TextureLoadMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureLoadMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_TextureCube_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureStore with TextureCube, Int32x3, Float32x4
    TextureStore_TextureCube_texture.name = "texture"_c;
    TextureStore_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureStore_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_TextureCube_coordinate.name = "coordinate"_c;
    TextureStore_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_TextureCube_value.name = "value"_c;
    TextureStore_TextureCube_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_TextureCube.name = "textureStore"_c;
    TextureStore_TextureCube.returnType = Type::FullType { VoidType.name };
    TextureStore_TextureCube.parameters = TextureStore_TextureCube_args;
    Symbol::Resolved(&TextureStore_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureStore_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_TextureCube_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_TextureCube)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with TextureCube, Int32x3, Int32, Float32x4
    TextureStoreMip_TextureCube_texture.name = "texture"_c;
    TextureStoreMip_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureStoreMip_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_TextureCube_coordinate.name = "coordinate"_c;
    TextureStoreMip_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_TextureCube_mip.name = "mip"_c;
    TextureStoreMip_TextureCube_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_TextureCube_value.name = "value"_c;
    TextureStoreMip_TextureCube_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_TextureCube.name = "textureStoreMip"_c;
    TextureStoreMip_TextureCube.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_TextureCube.parameters = TextureStoreMip_TextureCube_args;
    Symbol::Resolved(&TextureStoreMip_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureStoreMip_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCube)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture1DArray, Int32x2
    TextureLoad_Texture1DArray_texture.name = "texture"_c;
    TextureLoad_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureLoad_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture1DArray.name = "textureLoad"_c;
    TextureLoad_Texture1DArray.returnType = Type::FullType { Texture1DArrayType.name };
    TextureLoad_Texture1DArray.parameters = TextureLoad_Texture1DArray_args;
    Symbol::Resolved(&TextureLoad_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureLoad_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoad_Texture1DArray)->returnTypeSymbol = &Texture1DArrayType;

    /// textureLoadMip with Texture1DArray, Int32x2, Int32
    TextureLoadMip_Texture1DArray_texture.name = "texture"_c;
    TextureLoadMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureLoadMip_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture1DArray_mip.name = "mip"_c;
    TextureLoadMip_Texture1DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture1DArray.name = "textureLoadMip"_c;
    TextureLoadMip_Texture1DArray.returnType = Type::FullType { Texture1DArrayType.name };
    TextureLoadMip_Texture1DArray.parameters = TextureLoadMip_Texture1DArray_args;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture1DArray)->returnTypeSymbol = &Texture1DArrayType;

    /// textureStore with Texture1DArray, Int32x2, Float32x4
    TextureStore_Texture1DArray_texture.name = "texture"_c;
    TextureStore_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureStore_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture1DArray_value.name = "value"_c;
    TextureStore_Texture1DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture1DArray.name = "textureStore"_c;
    TextureStore_Texture1DArray.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture1DArray.parameters = TextureStore_Texture1DArray_args;
    Symbol::Resolved(&TextureStore_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureStore_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStore_Texture1DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture1DArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture1DArray, Int32x2, Int32, Float32x4
    TextureStoreMip_Texture1DArray_texture.name = "texture"_c;
    TextureStoreMip_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureStoreMip_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture1DArray_mip.name = "mip"_c;
    TextureStoreMip_Texture1DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture1DArray_value.name = "value"_c;
    TextureStoreMip_Texture1DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture1DArray.name = "textureStoreMip"_c;
    TextureStoreMip_Texture1DArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture1DArray.parameters = TextureStoreMip_Texture1DArray_args;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture1DArray)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2DArray, Int32x3
    TextureLoad_Texture2DArray_texture.name = "texture"_c;
    TextureLoad_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureLoad_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture2DArray.name = "textureLoad"_c;
    TextureLoad_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    TextureLoad_Texture2DArray.parameters = TextureLoad_Texture2DArray_args;
    Symbol::Resolved(&TextureLoad_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureLoad_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureLoadMip with Texture2DArray, Int32x3, Int32
    TextureLoadMip_Texture2DArray_texture.name = "texture"_c;
    TextureLoadMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureLoadMip_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture2DArray_mip.name = "mip"_c;
    TextureLoadMip_Texture2DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DArray.name = "textureLoadMip"_c;
    TextureLoadMip_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    TextureLoadMip_Texture2DArray.parameters = TextureLoadMip_Texture2DArray_args;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureStore with Texture2DArray, Int32x3, Float32x4
    TextureStore_Texture2DArray_texture.name = "texture"_c;
    TextureStore_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureStore_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture2DArray_value.name = "value"_c;
    TextureStore_Texture2DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DArray.name = "textureStore"_c;
    TextureStore_Texture2DArray.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2DArray.parameters = TextureStore_Texture2DArray_args;
    Symbol::Resolved(&TextureStore_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureStore_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_Texture2DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2DArray, Int32x3, Int32, Float32x4
    TextureStoreMip_Texture2DArray_texture.name = "texture"_c;
    TextureStoreMip_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureStoreMip_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture2DArray_mip.name = "mip"_c;
    TextureStoreMip_Texture2DArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DArray_value.name = "value"_c;
    TextureStoreMip_Texture2DArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DArray.name = "textureStoreMip"_c;
    TextureStoreMip_Texture2DArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2DArray.parameters = TextureStoreMip_Texture2DArray_args;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DArray)->returnTypeSymbol = &VoidType;

    /// textureLoad with TextureCubeArray, Int32x4
    TextureLoad_TextureCubeArray_texture.name = "texture"_c;
    TextureLoad_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureLoad_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureLoad_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureLoad_TextureCubeArray.name = "textureLoad"_c;
    TextureLoad_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    TextureLoad_TextureCubeArray.parameters = TextureLoad_TextureCubeArray_args;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureLoad_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// textureLoadMip with TextureCubeArray, Int32x4, Int32
    TextureLoadMip_TextureCubeArray_texture.name = "texture"_c;
    TextureLoadMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureLoadMip_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureLoadMip_TextureCubeArray_mip.name = "mip"_c;
    TextureLoadMip_TextureCubeArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_TextureCubeArray.name = "textureLoadMip"_c;
    TextureLoadMip_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    TextureLoadMip_TextureCubeArray.parameters = TextureLoadMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// textureStore with TextureCubeArray, Int32x4, Float32x4
    TextureStore_TextureCubeArray_texture.name = "texture"_c;
    TextureStore_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureStore_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureStore_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureStore_TextureCubeArray_value.name = "value"_c;
    TextureStore_TextureCubeArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_TextureCubeArray.name = "textureStore"_c;
    TextureStore_TextureCubeArray.returnType = Type::FullType { VoidType.name };
    TextureStore_TextureCubeArray.parameters = TextureStore_TextureCubeArray_args;
    Symbol::Resolved(&TextureStore_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureStore_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureStore_TextureCubeArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_TextureCubeArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with TextureCubeArray, Int32x4, Int32, Float32x4
    TextureStoreMip_TextureCubeArray_texture.name = "texture"_c;
    TextureStoreMip_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureStoreMip_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureStoreMip_TextureCubeArray_mip.name = "mip"_c;
    TextureStoreMip_TextureCubeArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_TextureCubeArray_value.name = "value"_c;
    TextureStoreMip_TextureCubeArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_TextureCubeArray.name = "textureStoreMip"_c;
    TextureStoreMip_TextureCubeArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_TextureCubeArray.parameters = TextureStoreMip_TextureCubeArray_args;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_TextureCubeArray)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2DMS, Int32x2
    TextureLoad_Texture2DMS_texture.name = "texture"_c;
    TextureLoad_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureLoad_Texture2DMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoad_Texture2DMS.name = "textureLoad"_c;
    TextureLoad_Texture2DMS.returnType = Type::FullType { Texture2DMSType.name };
    TextureLoad_Texture2DMS.parameters = TextureLoad_Texture2DMS_args;
    Symbol::Resolved(&TextureLoad_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureLoad_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoad_Texture2DMS)->returnTypeSymbol = &Texture2DMSType;

    /// textureLoadMip with Texture2DMS, Int32x2, Int32
    TextureLoadMip_Texture2DMS_texture.name = "texture"_c;
    TextureLoadMip_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureLoadMip_Texture2DMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureLoadMip_Texture2DMS_mip.name = "mip"_c;
    TextureLoadMip_Texture2DMS_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DMS.name = "textureLoadMip"_c;
    TextureLoadMip_Texture2DMS.returnType = Type::FullType { Texture2DMSType.name };
    TextureLoadMip_Texture2DMS.parameters = TextureLoadMip_Texture2DMS_args;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMS)->returnTypeSymbol = &Texture2DMSType;

    /// textureStore with Texture2DMS, Int32x2, Float32x4
    TextureStore_Texture2DMS_texture.name = "texture"_c;
    TextureStore_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureStore_Texture2DMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStore_Texture2DMS_value.name = "value"_c;
    TextureStore_Texture2DMS_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DMS.name = "textureStore"_c;
    TextureStore_Texture2DMS.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2DMS.parameters = TextureStore_Texture2DMS_args;
    Symbol::Resolved(&TextureStore_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureStore_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStore_Texture2DMS_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DMS)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2DMS, Int32x2, Int32, Float32x4
    TextureStoreMip_Texture2DMS_texture.name = "texture"_c;
    TextureStoreMip_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureStoreMip_Texture2DMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureStoreMip_Texture2DMS_mip.name = "mip"_c;
    TextureStoreMip_Texture2DMS_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DMS_value.name = "value"_c;
    TextureStoreMip_Texture2DMS_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DMS.name = "textureStoreMip"_c;
    TextureStoreMip_Texture2DMS.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2DMS.parameters = TextureStoreMip_Texture2DMS_args;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMS)->returnTypeSymbol = &VoidType;

    /// textureLoad with Texture2DMSArray, Int32x3
    TextureLoad_Texture2DMSArray_texture.name = "texture"_c;
    TextureLoad_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureLoad_Texture2DMSArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoad_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureLoad_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoad_Texture2DMSArray.name = "textureLoad"_c;
    TextureLoad_Texture2DMSArray.returnType = Type::FullType { Texture2DMSArrayType.name };
    TextureLoad_Texture2DMSArray.parameters = TextureLoad_Texture2DMSArray_args;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoad_Texture2DMSArray)->returnTypeSymbol = &Texture2DMSArrayType;

    /// textureLoadMip with Texture2DMSArray, Int32x3, Int32
    TextureLoadMip_Texture2DMSArray_texture.name = "texture"_c;
    TextureLoadMip_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureLoadMip_Texture2DMSArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureLoadMip_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureLoadMip_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureLoadMip_Texture2DMSArray_mip.name = "mip"_c;
    TextureLoadMip_Texture2DMSArray_mip.type = Type::FullType{ Int32Type.name };
    TextureLoadMip_Texture2DMSArray.name = "textureLoadMip"_c;
    TextureLoadMip_Texture2DMSArray.returnType = Type::FullType { Texture2DMSArrayType.name };
    TextureLoadMip_Texture2DMSArray.parameters = TextureLoadMip_Texture2DMSArray_args;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureLoadMip_Texture2DMSArray)->returnTypeSymbol = &Texture2DMSArrayType;

    /// textureStore with Texture2DMSArray, Int32x3, Float32x4
    TextureStore_Texture2DMSArray_texture.name = "texture"_c;
    TextureStore_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureStore_Texture2DMSArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStore_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureStore_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStore_Texture2DMSArray_value.name = "value"_c;
    TextureStore_Texture2DMSArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStore_Texture2DMSArray.name = "textureStore"_c;
    TextureStore_Texture2DMSArray.returnType = Type::FullType { VoidType.name };
    TextureStore_Texture2DMSArray.parameters = TextureStore_Texture2DMSArray_args;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStore_Texture2DMSArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStore_Texture2DMSArray)->returnTypeSymbol = &VoidType;

    /// textureStoreMip with Texture2DMSArray, Int32x3, Int32, Float32x4
    TextureStoreMip_Texture2DMSArray_texture.name = "texture"_c;
    TextureStoreMip_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureStoreMip_Texture2DMSArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureStoreMip_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureStoreMip_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureStoreMip_Texture2DMSArray_mip.name = "mip"_c;
    TextureStoreMip_Texture2DMSArray_mip.type = Type::FullType{ Int32Type.name };
    TextureStoreMip_Texture2DMSArray_value.name = "value"_c;
    TextureStoreMip_Texture2DMSArray_value.type = Type::FullType{ Float32x4Type.name };
    TextureStoreMip_Texture2DMSArray.name = "textureStoreMip"_c;
    TextureStoreMip_Texture2DMSArray.returnType = Type::FullType { VoidType.name };
    TextureStoreMip_Texture2DMSArray.parameters = TextureStoreMip_Texture2DMSArray_args;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_mip)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray_value)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureStoreMip_Texture2DMSArray)->returnTypeSymbol = &VoidType;

    /// textureFetch with Texture1D, Int32, UInt32
    TextureFetch_Texture1D_texture.name = "texture"_c;
    TextureFetch_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureFetch_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetch_Texture1D_coordinate.name = "coordinate"_c;
    TextureFetch_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureFetch_Texture1D_lod.name = "lod"_c;
    TextureFetch_Texture1D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture1D.name = "textureFetch"_c;
    TextureFetch_Texture1D.returnType = Type::FullType { Texture1DType.name };
    TextureFetch_Texture1D.parameters = TextureFetch_Texture1D_args;
    Symbol::Resolved(&TextureFetch_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureFetch_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureFetch_Texture1D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture1D)->returnTypeSymbol = &Texture1DType;

    /// textureFetchSample with Texture1D, Int32, UInt32, UInt32
    TextureFetchSample_Texture1D_texture.name = "texture"_c;
    TextureFetchSample_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureFetchSample_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetchSample_Texture1D_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture1D_coordinate.type = Type::FullType{ Int32Type.name };
    TextureFetchSample_Texture1D_lod.name = "lod"_c;
    TextureFetchSample_Texture1D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1D_sample.name = "sample"_c;
    TextureFetchSample_Texture1D_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1D.name = "textureFetchSample"_c;
    TextureFetchSample_Texture1D.returnType = Type::FullType { Texture1DType.name };
    TextureFetchSample_Texture1D.parameters = TextureFetchSample_Texture1D_args;
    Symbol::Resolved(&TextureFetchSample_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureFetchSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture1D_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1D_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1D)->returnTypeSymbol = &Texture1DType;

    /// textureFetch with Texture2D, Int32x2, UInt32
    TextureFetch_Texture2D_texture.name = "texture"_c;
    TextureFetch_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureFetch_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetch_Texture2D_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetch_Texture2D_lod.name = "lod"_c;
    TextureFetch_Texture2D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2D.name = "textureFetch"_c;
    TextureFetch_Texture2D.returnType = Type::FullType { Texture2DType.name };
    TextureFetch_Texture2D.parameters = TextureFetch_Texture2D_args;
    Symbol::Resolved(&TextureFetch_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureFetch_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetch_Texture2D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureFetchSample with Texture2D, Int32x2, UInt32, UInt32
    TextureFetchSample_Texture2D_texture.name = "texture"_c;
    TextureFetchSample_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureFetchSample_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetchSample_Texture2D_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetchSample_Texture2D_lod.name = "lod"_c;
    TextureFetchSample_Texture2D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2D_sample.name = "sample"_c;
    TextureFetchSample_Texture2D_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2D.name = "textureFetchSample"_c;
    TextureFetchSample_Texture2D.returnType = Type::FullType { Texture2DType.name };
    TextureFetchSample_Texture2D.parameters = TextureFetchSample_Texture2D_args;
    Symbol::Resolved(&TextureFetchSample_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureFetchSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetchSample_Texture2D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2D_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureFetch with Texture3D, Int32x3, UInt32
    TextureFetch_Texture3D_texture.name = "texture"_c;
    TextureFetch_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureFetch_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetch_Texture3D_coordinate.name = "coordinate"_c;
    TextureFetch_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetch_Texture3D_lod.name = "lod"_c;
    TextureFetch_Texture3D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture3D.name = "textureFetch"_c;
    TextureFetch_Texture3D.returnType = Type::FullType { Texture3DType.name };
    TextureFetch_Texture3D.parameters = TextureFetch_Texture3D_args;
    Symbol::Resolved(&TextureFetch_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureFetch_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetch_Texture3D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture3D)->returnTypeSymbol = &Texture3DType;

    /// textureFetchSample with Texture3D, Int32x3, UInt32, UInt32
    TextureFetchSample_Texture3D_texture.name = "texture"_c;
    TextureFetchSample_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureFetchSample_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetchSample_Texture3D_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture3D_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetchSample_Texture3D_lod.name = "lod"_c;
    TextureFetchSample_Texture3D_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture3D_sample.name = "sample"_c;
    TextureFetchSample_Texture3D_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture3D.name = "textureFetchSample"_c;
    TextureFetchSample_Texture3D.returnType = Type::FullType { Texture3DType.name };
    TextureFetchSample_Texture3D.parameters = TextureFetchSample_Texture3D_args;
    Symbol::Resolved(&TextureFetchSample_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureFetchSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture3D_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetchSample_Texture3D_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture3D_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture3D)->returnTypeSymbol = &Texture3DType;

    /// textureFetch with Texture1DArray, Int32x2, UInt32
    TextureFetch_Texture1DArray_texture.name = "texture"_c;
    TextureFetch_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureFetch_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetch_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureFetch_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetch_Texture1DArray_lod.name = "lod"_c;
    TextureFetch_Texture1DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture1DArray.name = "textureFetch"_c;
    TextureFetch_Texture1DArray.returnType = Type::FullType { Texture1DArrayType.name };
    TextureFetch_Texture1DArray.parameters = TextureFetch_Texture1DArray_args;
    Symbol::Resolved(&TextureFetch_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureFetch_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetch_Texture1DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture1DArray)->returnTypeSymbol = &Texture1DArrayType;

    /// textureFetchSample with Texture1DArray, Int32x2, UInt32, UInt32
    TextureFetchSample_Texture1DArray_texture.name = "texture"_c;
    TextureFetchSample_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureFetchSample_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetchSample_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture1DArray_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetchSample_Texture1DArray_lod.name = "lod"_c;
    TextureFetchSample_Texture1DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1DArray_sample.name = "sample"_c;
    TextureFetchSample_Texture1DArray_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture1DArray.name = "textureFetchSample"_c;
    TextureFetchSample_Texture1DArray.returnType = Type::FullType { Texture1DArrayType.name };
    TextureFetchSample_Texture1DArray.parameters = TextureFetchSample_Texture1DArray_args;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture1DArray)->returnTypeSymbol = &Texture1DArrayType;

    /// textureFetch with Texture2DArray, Int32x3, UInt32
    TextureFetch_Texture2DArray_texture.name = "texture"_c;
    TextureFetch_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureFetch_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetch_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetch_Texture2DArray_lod.name = "lod"_c;
    TextureFetch_Texture2DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2DArray.name = "textureFetch"_c;
    TextureFetch_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    TextureFetch_Texture2DArray.parameters = TextureFetch_Texture2DArray_args;
    Symbol::Resolved(&TextureFetch_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureFetch_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetch_Texture2DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureFetchSample with Texture2DArray, Int32x3, UInt32, UInt32
    TextureFetchSample_Texture2DArray_texture.name = "texture"_c;
    TextureFetchSample_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureFetchSample_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetchSample_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetchSample_Texture2DArray_lod.name = "lod"_c;
    TextureFetchSample_Texture2DArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DArray_sample.name = "sample"_c;
    TextureFetchSample_Texture2DArray_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DArray.name = "textureFetchSample"_c;
    TextureFetchSample_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    TextureFetchSample_Texture2DArray.parameters = TextureFetchSample_Texture2DArray_args;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureFetch with Texture2DMS, Int32x2, UInt32
    TextureFetch_Texture2DMS_texture.name = "texture"_c;
    TextureFetch_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureFetch_Texture2DMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetch_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetch_Texture2DMS_lod.name = "lod"_c;
    TextureFetch_Texture2DMS_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2DMS.name = "textureFetch"_c;
    TextureFetch_Texture2DMS.returnType = Type::FullType { Texture2DMSType.name };
    TextureFetch_Texture2DMS.parameters = TextureFetch_Texture2DMS_args;
    Symbol::Resolved(&TextureFetch_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureFetch_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetch_Texture2DMS_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2DMS)->returnTypeSymbol = &Texture2DMSType;

    /// textureFetchSample with Texture2DMS, Int32x2, UInt32, UInt32
    TextureFetchSample_Texture2DMS_texture.name = "texture"_c;
    TextureFetchSample_Texture2DMS_texture.type = Type::FullType{ Texture2DMSType.name };
    TextureFetchSample_Texture2DMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetchSample_Texture2DMS_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2DMS_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureFetchSample_Texture2DMS_lod.name = "lod"_c;
    TextureFetchSample_Texture2DMS_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMS_sample.name = "sample"_c;
    TextureFetchSample_Texture2DMS_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMS.name = "textureFetchSample"_c;
    TextureFetchSample_Texture2DMS.returnType = Type::FullType { Texture2DMSType.name };
    TextureFetchSample_Texture2DMS.parameters = TextureFetchSample_Texture2DMS_args;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_texture)->typeSymbol = &Texture2DMSType;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMS)->returnTypeSymbol = &Texture2DMSType;

    /// textureFetch with Texture2DMSArray, Int32x3, UInt32
    TextureFetch_Texture2DMSArray_texture.name = "texture"_c;
    TextureFetch_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureFetch_Texture2DMSArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetch_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureFetch_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetch_Texture2DMSArray_lod.name = "lod"_c;
    TextureFetch_Texture2DMSArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetch_Texture2DMSArray.name = "textureFetch"_c;
    TextureFetch_Texture2DMSArray.returnType = Type::FullType { Texture2DMSArrayType.name };
    TextureFetch_Texture2DMSArray.parameters = TextureFetch_Texture2DMSArray_args;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetch_Texture2DMSArray)->returnTypeSymbol = &Texture2DMSArrayType;

    /// textureFetchSample with Texture2DMSArray, Int32x3, UInt32, UInt32
    TextureFetchSample_Texture2DMSArray_texture.name = "texture"_c;
    TextureFetchSample_Texture2DMSArray_texture.type = Type::FullType{ Texture2DMSArrayType.name };
    TextureFetchSample_Texture2DMSArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureFetchSample_Texture2DMSArray_coordinate.name = "coordinate"_c;
    TextureFetchSample_Texture2DMSArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureFetchSample_Texture2DMSArray_lod.name = "lod"_c;
    TextureFetchSample_Texture2DMSArray_lod.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMSArray_sample.name = "sample"_c;
    TextureFetchSample_Texture2DMSArray_sample.type = Type::FullType{ UInt32Type.name };
    TextureFetchSample_Texture2DMSArray.name = "textureFetchSample"_c;
    TextureFetchSample_Texture2DMSArray.returnType = Type::FullType { Texture2DMSArrayType.name };
    TextureFetchSample_Texture2DMSArray.parameters = TextureFetchSample_Texture2DMSArray_args;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_texture)->typeSymbol = &Texture2DMSArrayType;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_lod)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureFetchSample_Texture2DMSArray)->returnTypeSymbol = &Texture2DMSArrayType;

    /// textureGather with Texture2D, Sampler, Int32x2, Int32
    TextureGather_Texture2D_texture.name = "texture"_c;
    TextureGather_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGather_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGather_Texture2D_sampler.name = "sampler"_c;
    TextureGather_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGather_Texture2D_coordinate.name = "coordinate"_c;
    TextureGather_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureGather_Texture2D_component.name = "component"_c;
    TextureGather_Texture2D_component.type = Type::FullType{ Int32Type.name };
    TextureGather_Texture2D.name = "textureGather"_c;
    TextureGather_Texture2D.returnType = Type::FullType { Texture2DType.name };
    TextureGather_Texture2D.parameters = TextureGather_Texture2D_args;
    Symbol::Resolved(&TextureGather_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGather_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureGather_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureGather with Texture2D, Int32x2, Int32
    SampledTextureGather_Texture2D_texture.name = "texture"_c;
    SampledTextureGather_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureGather_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGather_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureGather_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    SampledTextureGather_Texture2D_component.name = "component"_c;
    SampledTextureGather_Texture2D_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_Texture2D.name = "textureGather"_c;
    SampledTextureGather_Texture2D.returnType = Type::FullType { Texture2DType.name };
    SampledTextureGather_Texture2D.parameters = SampledTextureGather_Texture2D_args;
    Symbol::Resolved(&SampledTextureGather_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureGather_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SampledTextureGather_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureGatherOffset with Texture2D, Sampler, Int32x2, Int32, UInt32
    TextureGatherOffset_Texture2D_texture.name = "texture"_c;
    TextureGatherOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureGatherOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGatherOffset_Texture2D_sampler.name = "sampler"_c;
    TextureGatherOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGatherOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureGatherOffset_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureGatherOffset_Texture2D_component.name = "component"_c;
    TextureGatherOffset_Texture2D_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_Texture2D_offset.name = "offset"_c;
    TextureGatherOffset_Texture2D_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_Texture2D.name = "textureGatherOffset"_c;
    TextureGatherOffset_Texture2D.returnType = Type::FullType { Texture2DType.name };
    TextureGatherOffset_Texture2D.parameters = TextureGatherOffset_Texture2D_args;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2D_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureGatherOffset with Texture2D, Int32x2, Int32, UInt32
    SampledTextureGatherOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureGatherOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureGatherOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGatherOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_Texture2D_coordinate.type = Type::FullType{ Int32x2Type.name };
    SampledTextureGatherOffset_Texture2D_component.name = "component"_c;
    SampledTextureGatherOffset_Texture2D_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureGatherOffset_Texture2D_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_Texture2D.name = "textureGatherOffset"_c;
    SampledTextureGatherOffset_Texture2D.returnType = Type::FullType { Texture2DType.name };
    SampledTextureGatherOffset_Texture2D.parameters = SampledTextureGatherOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2D)->returnTypeSymbol = &Texture2DType;

    /// textureGather with TextureCube, Sampler, Int32x3, Int32
    TextureGather_TextureCube_texture.name = "texture"_c;
    TextureGather_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGather_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGather_TextureCube_sampler.name = "sampler"_c;
    TextureGather_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_TextureCube_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGather_TextureCube_coordinate.name = "coordinate"_c;
    TextureGather_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGather_TextureCube_component.name = "component"_c;
    TextureGather_TextureCube_component.type = Type::FullType{ Int32Type.name };
    TextureGather_TextureCube.name = "textureGather"_c;
    TextureGather_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    TextureGather_TextureCube.parameters = TextureGather_TextureCube_args;
    Symbol::Resolved(&TextureGather_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGather_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGather_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureGather with TextureCube, Int32x3, Int32
    SampledTextureGather_TextureCube_texture.name = "texture"_c;
    SampledTextureGather_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    SampledTextureGather_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGather_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureGather_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGather_TextureCube_component.name = "component"_c;
    SampledTextureGather_TextureCube_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_TextureCube.name = "textureGather"_c;
    SampledTextureGather_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    SampledTextureGather_TextureCube.parameters = SampledTextureGather_TextureCube_args;
    Symbol::Resolved(&SampledTextureGather_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&SampledTextureGather_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGather_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureGatherOffset with TextureCube, Sampler, Int32x3, Int32, UInt32
    TextureGatherOffset_TextureCube_texture.name = "texture"_c;
    TextureGatherOffset_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureGatherOffset_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGatherOffset_TextureCube_sampler.name = "sampler"_c;
    TextureGatherOffset_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_TextureCube_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGatherOffset_TextureCube_coordinate.name = "coordinate"_c;
    TextureGatherOffset_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGatherOffset_TextureCube_component.name = "component"_c;
    TextureGatherOffset_TextureCube_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_TextureCube_offset.name = "offset"_c;
    TextureGatherOffset_TextureCube_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_TextureCube.name = "textureGatherOffset"_c;
    TextureGatherOffset_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    TextureGatherOffset_TextureCube.parameters = TextureGatherOffset_TextureCube_args;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCube_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureGatherOffset with TextureCube, Int32x3, Int32, UInt32
    SampledTextureGatherOffset_TextureCube_texture.name = "texture"_c;
    SampledTextureGatherOffset_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    SampledTextureGatherOffset_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGatherOffset_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_TextureCube_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGatherOffset_TextureCube_component.name = "component"_c;
    SampledTextureGatherOffset_TextureCube_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_TextureCube_offset.name = "offset"_c;
    SampledTextureGatherOffset_TextureCube_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_TextureCube.name = "textureGatherOffset"_c;
    SampledTextureGatherOffset_TextureCube.returnType = Type::FullType { TextureCubeType.name };
    SampledTextureGatherOffset_TextureCube.parameters = SampledTextureGatherOffset_TextureCube_args;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCube)->returnTypeSymbol = &TextureCubeType;

    /// textureGather with Texture2DArray, Sampler, Int32x3, Int32
    TextureGather_Texture2DArray_texture.name = "texture"_c;
    TextureGather_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGather_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGather_Texture2DArray_sampler.name = "sampler"_c;
    TextureGather_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGather_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureGather_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGather_Texture2DArray_component.name = "component"_c;
    TextureGather_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    TextureGather_Texture2DArray.name = "textureGather"_c;
    TextureGather_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    TextureGather_Texture2DArray.parameters = TextureGather_Texture2DArray_args;
    Symbol::Resolved(&TextureGather_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGather_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGather_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureGather with Texture2DArray, Int32x3, Int32
    SampledTextureGather_Texture2DArray_texture.name = "texture"_c;
    SampledTextureGather_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureGather_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGather_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureGather_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGather_Texture2DArray_component.name = "component"_c;
    SampledTextureGather_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_Texture2DArray.name = "textureGather"_c;
    SampledTextureGather_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    SampledTextureGather_Texture2DArray.parameters = SampledTextureGather_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureGatherOffset with Texture2DArray, Sampler, Int32x3, Int32, UInt32
    TextureGatherOffset_Texture2DArray_texture.name = "texture"_c;
    TextureGatherOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureGatherOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGatherOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureGatherOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGatherOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureGatherOffset_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureGatherOffset_Texture2DArray_component.name = "component"_c;
    TextureGatherOffset_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_Texture2DArray_offset.name = "offset"_c;
    TextureGatherOffset_Texture2DArray_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_Texture2DArray.name = "textureGatherOffset"_c;
    TextureGatherOffset_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    TextureGatherOffset_Texture2DArray.parameters = TextureGatherOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureGatherOffset with Texture2DArray, Int32x3, Int32, UInt32
    SampledTextureGatherOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureGatherOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureGatherOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGatherOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_Texture2DArray_coordinate.type = Type::FullType{ Int32x3Type.name };
    SampledTextureGatherOffset_Texture2DArray_component.name = "component"_c;
    SampledTextureGatherOffset_Texture2DArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureGatherOffset_Texture2DArray_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_Texture2DArray.name = "textureGatherOffset"_c;
    SampledTextureGatherOffset_Texture2DArray.returnType = Type::FullType { Texture2DArrayType.name };
    SampledTextureGatherOffset_Texture2DArray.parameters = SampledTextureGatherOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_Texture2DArray)->returnTypeSymbol = &Texture2DArrayType;

    /// textureGather with TextureCubeArray, Sampler, Int32x4, Int32
    TextureGather_TextureCubeArray_texture.name = "texture"_c;
    TextureGather_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGather_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGather_TextureCubeArray_sampler.name = "sampler"_c;
    TextureGather_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGather_TextureCubeArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGather_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureGather_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureGather_TextureCubeArray_component.name = "component"_c;
    TextureGather_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    TextureGather_TextureCubeArray.name = "textureGather"_c;
    TextureGather_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    TextureGather_TextureCubeArray.parameters = TextureGather_TextureCubeArray_args;
    Symbol::Resolved(&TextureGather_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGather_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGather_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGather_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureGather_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGather_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// textureGather with TextureCubeArray, Int32x4, Int32
    SampledTextureGather_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureGather_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    SampledTextureGather_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGather_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureGather_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    SampledTextureGather_TextureCubeArray_component.name = "component"_c;
    SampledTextureGather_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGather_TextureCubeArray.name = "textureGather"_c;
    SampledTextureGather_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    SampledTextureGather_TextureCubeArray.parameters = SampledTextureGather_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGather_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// textureGatherOffset with TextureCubeArray, Sampler, Int32x4, Int32, UInt32
    TextureGatherOffset_TextureCubeArray_texture.name = "texture"_c;
    TextureGatherOffset_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureGatherOffset_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGatherOffset_TextureCubeArray_sampler.name = "sampler"_c;
    TextureGatherOffset_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureGatherOffset_TextureCubeArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureGatherOffset_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureGatherOffset_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureGatherOffset_TextureCubeArray_component.name = "component"_c;
    TextureGatherOffset_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    TextureGatherOffset_TextureCubeArray_offset.name = "offset"_c;
    TextureGatherOffset_TextureCubeArray_offset.type = Type::FullType{ UInt32Type.name };
    TextureGatherOffset_TextureCubeArray.name = "textureGatherOffset"_c;
    TextureGatherOffset_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    TextureGatherOffset_TextureCubeArray.parameters = TextureGatherOffset_TextureCubeArray_args;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureGatherOffset_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// textureGatherOffset with TextureCubeArray, Int32x4, Int32, UInt32
    SampledTextureGatherOffset_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureGatherOffset_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    SampledTextureGatherOffset_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureGatherOffset_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureGatherOffset_TextureCubeArray_coordinate.type = Type::FullType{ Int32x4Type.name };
    SampledTextureGatherOffset_TextureCubeArray_component.name = "component"_c;
    SampledTextureGatherOffset_TextureCubeArray_component.type = Type::FullType{ Int32Type.name };
    SampledTextureGatherOffset_TextureCubeArray_offset.name = "offset"_c;
    SampledTextureGatherOffset_TextureCubeArray_offset.type = Type::FullType{ UInt32Type.name };
    SampledTextureGatherOffset_TextureCubeArray.name = "textureGatherOffset"_c;
    SampledTextureGatherOffset_TextureCubeArray.returnType = Type::FullType { TextureCubeArrayType.name };
    SampledTextureGatherOffset_TextureCubeArray.parameters = SampledTextureGatherOffset_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_component)->typeSymbol = &Int32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SampledTextureGatherOffset_TextureCubeArray)->returnTypeSymbol = &TextureCubeArrayType;

    /// texturePixelCacheLoad with PixelCache
    TexturePixelCacheLoad_PixelCache_texture.name = "texture"_c;
    TexturePixelCacheLoad_PixelCache_texture.type = Type::FullType{ PixelCacheType.name };
    TexturePixelCacheLoad_PixelCache_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TexturePixelCacheLoad_PixelCache.name = "texturePixelCacheLoad"_c;
    TexturePixelCacheLoad_PixelCache.returnType = Type::FullType { PixelCacheType.name };
    TexturePixelCacheLoad_PixelCache.parameters = TexturePixelCacheLoad_PixelCache_args;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache_texture)->typeSymbol = &PixelCacheType;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCache)->returnTypeSymbol = &PixelCacheType;

    /// texturePixelCacheLoad with PixelCacheMS, UInt32
    TexturePixelCacheLoad_PixelCacheMS_texture.name = "texture"_c;
    TexturePixelCacheLoad_PixelCacheMS_texture.type = Type::FullType{ PixelCacheMSType.name };
    TexturePixelCacheLoad_PixelCacheMS_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TexturePixelCacheLoad_PixelCacheMS_sample.name = "sample"_c;
    TexturePixelCacheLoad_PixelCacheMS_sample.type = Type::FullType{ UInt32Type.name };
    TexturePixelCacheLoad_PixelCacheMS.name = "texturePixelCacheLoad"_c;
    TexturePixelCacheLoad_PixelCacheMS.returnType = Type::FullType { PixelCacheMSType.name };
    TexturePixelCacheLoad_PixelCacheMS.parameters = TexturePixelCacheLoad_PixelCacheMS_args;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_texture)->typeSymbol = &PixelCacheMSType;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS_sample)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TexturePixelCacheLoad_PixelCacheMS)->returnTypeSymbol = &PixelCacheMSType;

    /// textureSample with Texture1D, Sampler, Float32
    TextureSample_Texture1D_texture.name = "texture"_c;
    TextureSample_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSample_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture1D_sampler.name = "sampler"_c;
    TextureSample_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture1D_coordinate.name = "coordinate"_c;
    TextureSample_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSample_Texture1D.name = "textureSample"_c;
    TextureSample_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture1D.parameters = TextureSample_Texture1D_args;
    Symbol::Resolved(&TextureSample_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture1D, Float32
    SampledTextureSample_Texture1D_texture.name = "texture"_c;
    SampledTextureSample_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSample_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSample_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSample_Texture1D.name = "textureSample"_c;
    SampledTextureSample_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture1D.parameters = SampledTextureSample_Texture1D_args;
    Symbol::Resolved(&SampledTextureSample_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSample_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSample_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture2D, Sampler, Float32x2
    TextureSample_Texture2D_texture.name = "texture"_c;
    TextureSample_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSample_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture2D_sampler.name = "sampler"_c;
    TextureSample_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture2D_coordinate.name = "coordinate"_c;
    TextureSample_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSample_Texture2D.name = "textureSample"_c;
    TextureSample_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture2D.parameters = TextureSample_Texture2D_args;
    Symbol::Resolved(&TextureSample_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture2D, Float32x2
    SampledTextureSample_Texture2D_texture.name = "texture"_c;
    SampledTextureSample_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSample_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSample_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSample_Texture2D.name = "textureSample"_c;
    SampledTextureSample_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture2D.parameters = SampledTextureSample_Texture2D_args;
    Symbol::Resolved(&SampledTextureSample_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSample_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSample_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture3D, Sampler, Float32x3
    TextureSample_Texture3D_texture.name = "texture"_c;
    TextureSample_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSample_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture3D_sampler.name = "sampler"_c;
    TextureSample_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture3D_coordinate.name = "coordinate"_c;
    TextureSample_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_Texture3D.name = "textureSample"_c;
    TextureSample_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture3D.parameters = TextureSample_Texture3D_args;
    Symbol::Resolved(&TextureSample_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture3D, Float32x3
    SampledTextureSample_Texture3D_texture.name = "texture"_c;
    SampledTextureSample_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSample_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSample_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_Texture3D.name = "textureSample"_c;
    SampledTextureSample_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture3D.parameters = SampledTextureSample_Texture3D_args;
    Symbol::Resolved(&SampledTextureSample_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSample_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with TextureCube, Sampler, Float32x3
    TextureSample_TextureCube_texture.name = "texture"_c;
    TextureSample_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSample_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_TextureCube_sampler.name = "sampler"_c;
    TextureSample_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_TextureCube_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_TextureCube_coordinate.name = "coordinate"_c;
    TextureSample_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_TextureCube.name = "textureSample"_c;
    TextureSample_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_TextureCube.parameters = TextureSample_TextureCube_args;
    Symbol::Resolved(&TextureSample_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSample_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with TextureCube, Float32x3
    SampledTextureSample_TextureCube_texture.name = "texture"_c;
    SampledTextureSample_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    SampledTextureSample_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSample_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSample_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_TextureCube.name = "textureSample"_c;
    SampledTextureSample_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_TextureCube.parameters = SampledTextureSample_TextureCube_args;
    Symbol::Resolved(&SampledTextureSample_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&SampledTextureSample_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture1DArray, Sampler, Float32x2
    TextureSample_Texture1DArray_texture.name = "texture"_c;
    TextureSample_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSample_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture1DArray_sampler.name = "sampler"_c;
    TextureSample_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSample_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSample_Texture1DArray.name = "textureSample"_c;
    TextureSample_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture1DArray.parameters = TextureSample_Texture1DArray_args;
    Symbol::Resolved(&TextureSample_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture1DArray, Float32x2
    SampledTextureSample_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSample_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSample_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSample_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSample_Texture1DArray.name = "textureSample"_c;
    SampledTextureSample_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture1DArray.parameters = SampledTextureSample_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSample_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture2DArray, Sampler, Float32x3
    TextureSample_Texture2DArray_texture.name = "texture"_c;
    TextureSample_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSample_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture2DArray_sampler.name = "sampler"_c;
    TextureSample_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSample_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSample_Texture2DArray.name = "textureSample"_c;
    TextureSample_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_Texture2DArray.parameters = TextureSample_Texture2DArray_args;
    Symbol::Resolved(&TextureSample_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with Texture2DArray, Float32x3
    SampledTextureSample_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSample_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSample_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSample_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSample_Texture2DArray.name = "textureSample"_c;
    SampledTextureSample_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_Texture2DArray.parameters = SampledTextureSample_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSample_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with TextureCubeArray, Sampler, Float32x4
    TextureSample_TextureCubeArray_texture.name = "texture"_c;
    TextureSample_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSample_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSample_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSample_TextureCubeArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSample_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSample_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSample_TextureCubeArray.name = "textureSample"_c;
    TextureSample_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSample_TextureCubeArray.parameters = TextureSample_TextureCubeArray_args;
    Symbol::Resolved(&TextureSample_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSample_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSample_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSample_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSample_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSample with TextureCubeArray, Float32x4
    SampledTextureSample_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSample_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    SampledTextureSample_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSample_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSample_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSample_TextureCubeArray.name = "textureSample"_c;
    SampledTextureSample_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSample_TextureCubeArray.parameters = SampledTextureSample_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSample_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture1D, Sampler, Float32, Float32
    TextureSampleOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleOffset_Texture1D.name = "textureSampleOffset"_c;
    TextureSampleOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture1D.parameters = TextureSampleOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture1D, Float32, Float32
    SampledTextureSampleOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleOffset_Texture1D.name = "textureSampleOffset"_c;
    SampledTextureSampleOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture1D.parameters = SampledTextureSampleOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture2D, Sampler, Float32x2, Float32x2
    TextureSampleOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture2D.name = "textureSampleOffset"_c;
    TextureSampleOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture2D.parameters = TextureSampleOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture2D, Float32x2, Float32x2
    SampledTextureSampleOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture2D.name = "textureSampleOffset"_c;
    SampledTextureSampleOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture2D.parameters = SampledTextureSampleOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture3D, Sampler, Float32x3, Float32x3
    TextureSampleOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture3D.name = "textureSampleOffset"_c;
    TextureSampleOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture3D.parameters = TextureSampleOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture3D, Float32x3, Float32x3
    SampledTextureSampleOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture3D.name = "textureSampleOffset"_c;
    SampledTextureSampleOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture3D.parameters = SampledTextureSampleOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture1DArray, Sampler, Float32x2, Float32x2
    TextureSampleOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleOffset_Texture1DArray.name = "textureSampleOffset"_c;
    TextureSampleOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture1DArray.parameters = TextureSampleOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture1DArray, Float32x2, Float32x2
    SampledTextureSampleOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleOffset_Texture1DArray.name = "textureSampleOffset"_c;
    SampledTextureSampleOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture1DArray.parameters = SampledTextureSampleOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture2DArray, Sampler, Float32x3, Float32x3
    TextureSampleOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleOffset_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleOffset_Texture2DArray.name = "textureSampleOffset"_c;
    TextureSampleOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleOffset_Texture2DArray.parameters = TextureSampleOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleOffset with Texture2DArray, Float32x3, Float32x3
    SampledTextureSampleOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleOffset_Texture2DArray.name = "textureSampleOffset"_c;
    SampledTextureSampleOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleOffset_Texture2DArray.parameters = SampledTextureSampleOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture1D, Sampler, Float32, Float32
    TextureSampleProj_Texture1D_texture.name = "texture"_c;
    TextureSampleProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture1D_proj.name = "proj"_c;
    TextureSampleProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture1D.name = "textureSampleProj"_c;
    TextureSampleProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProj_Texture1D.parameters = TextureSampleProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture1D, Float32, Float32
    SampledTextureSampleProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture1D.name = "textureSampleProj"_c;
    SampledTextureSampleProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProj_Texture1D.parameters = SampledTextureSampleProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture2D, Sampler, Float32x2, Float32
    TextureSampleProj_Texture2D_texture.name = "texture"_c;
    TextureSampleProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProj_Texture2D_proj.name = "proj"_c;
    TextureSampleProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture2D.name = "textureSampleProj"_c;
    TextureSampleProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProj_Texture2D.parameters = TextureSampleProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture2D, Float32x2, Float32
    SampledTextureSampleProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture2D.name = "textureSampleProj"_c;
    SampledTextureSampleProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProj_Texture2D.parameters = SampledTextureSampleProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture3D, Sampler, Float32x3, Float32
    TextureSampleProj_Texture3D_texture.name = "texture"_c;
    TextureSampleProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProj_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProj_Texture3D_proj.name = "proj"_c;
    TextureSampleProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProj_Texture3D.name = "textureSampleProj"_c;
    TextureSampleProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProj_Texture3D.parameters = TextureSampleProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProj with Texture3D, Float32x3, Float32
    SampledTextureSampleProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProj_Texture3D.name = "textureSampleProj"_c;
    SampledTextureSampleProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProj_Texture3D.parameters = SampledTextureSampleProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProjOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture1D.name = "textureSampleProjOffset"_c;
    TextureSampleProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjOffset_Texture1D.parameters = TextureSampleProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture1D, Float32, Float32, Float32
    SampledTextureSampleProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleProjOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture1D.name = "textureSampleProjOffset"_c;
    SampledTextureSampleProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjOffset_Texture1D.parameters = SampledTextureSampleProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProjOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjOffset_Texture2D.name = "textureSampleProjOffset"_c;
    TextureSampleProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjOffset_Texture2D.parameters = TextureSampleProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleProjOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjOffset_Texture2D.name = "textureSampleProjOffset"_c;
    SampledTextureSampleProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjOffset_Texture2D.parameters = SampledTextureSampleProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProjOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjOffset_Texture3D.name = "textureSampleProjOffset"_c;
    TextureSampleProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjOffset_Texture3D.parameters = TextureSampleProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjOffset with Texture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleProjOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjOffset_Texture3D.name = "textureSampleProjOffset"_c;
    SampledTextureSampleProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjOffset_Texture3D.parameters = SampledTextureSampleProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture1D, Sampler, Float32, Float32
    TextureSampleCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1D.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleCompare_Texture1D.parameters = TextureSampleCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture1D, Float32, Float32
    SampledTextureSampleCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1D.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleCompare_Texture1D.parameters = SampledTextureSampleCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture2D, Sampler, Float32x2, Float32
    TextureSampleCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture2D.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleCompare_Texture2D.parameters = TextureSampleCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture2D, Float32x2, Float32
    SampledTextureSampleCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture2D.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleCompare_Texture2D.parameters = SampledTextureSampleCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture3D, Sampler, Float32x3, Float32
    TextureSampleCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture3D.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleCompare_Texture3D.parameters = TextureSampleCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture3D, Float32x3, Float32
    SampledTextureSampleCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture3D.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleCompare_Texture3D.parameters = SampledTextureSampleCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture1DArray, Sampler, Float32x2, Float32
    TextureSampleCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture1DArray.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleCompare_Texture1DArray.parameters = TextureSampleCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture1DArray, Float32x2, Float32
    SampledTextureSampleCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture1DArray.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleCompare_Texture1DArray.parameters = SampledTextureSampleCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture2DArray, Sampler, Float32x3, Float32
    TextureSampleCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompare_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompare_Texture2DArray.name = "textureSampleCompare"_c;
    TextureSampleCompare_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleCompare_Texture2DArray.parameters = TextureSampleCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompare with Texture2DArray, Float32x3, Float32
    SampledTextureSampleCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompare_Texture2DArray.name = "textureSampleCompare"_c;
    SampledTextureSampleCompare_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleCompare_Texture2DArray.parameters = SampledTextureSampleCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompareOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1D.name = "textureSampleCompareOffset"_c;
    TextureSampleCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleCompareOffset_Texture1D.parameters = TextureSampleCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompareOffset with Texture1D, Float32, Float32, Float32
    SampledTextureSampleCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1D.name = "textureSampleCompareOffset"_c;
    SampledTextureSampleCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleCompareOffset_Texture1D.parameters = SampledTextureSampleCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture2D.name = "textureSampleCompareOffset"_c;
    TextureSampleCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleCompareOffset_Texture2D.parameters = TextureSampleCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompareOffset with Texture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture2D.name = "textureSampleCompareOffset"_c;
    SampledTextureSampleCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleCompareOffset_Texture2D.parameters = SampledTextureSampleCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture3D.name = "textureSampleCompareOffset"_c;
    TextureSampleCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleCompareOffset_Texture3D.parameters = TextureSampleCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompareOffset with Texture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture3D.name = "textureSampleCompareOffset"_c;
    SampledTextureSampleCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleCompareOffset_Texture3D.parameters = SampledTextureSampleCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
    TextureSampleCompareOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleCompareOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompareOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture1DArray_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleCompareOffset_Texture1DArray.name = "textureSampleCompareOffset"_c;
    TextureSampleCompareOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleCompareOffset_Texture1DArray.parameters = TextureSampleCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompareOffset with Texture1DArray, Float32x2, Float32, Float32x2
    SampledTextureSampleCompareOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleCompareOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray.name = "textureSampleCompareOffset"_c;
    SampledTextureSampleCompareOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleCompareOffset_Texture1DArray.parameters = SampledTextureSampleCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
    TextureSampleCompareOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleCompareOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompareOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleCompareOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleCompareOffset_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture2DArray_compare.name = "compare"_c;
    TextureSampleCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleCompareOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleCompareOffset_Texture2DArray.name = "textureSampleCompareOffset"_c;
    TextureSampleCompareOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleCompareOffset_Texture2DArray.parameters = TextureSampleCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleCompareOffset with Texture2DArray, Float32x3, Float32, Float32x3
    SampledTextureSampleCompareOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleCompareOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray.name = "textureSampleCompareOffset"_c;
    SampledTextureSampleCompareOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleCompareOffset_Texture2DArray.parameters = SampledTextureSampleCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjCompare with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture1D.name = "textureSampleProjCompare"_c;
    TextureSampleProjCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjCompare_Texture1D.parameters = TextureSampleProjCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjCompare with Texture1D, Float32, Float32, Float32
    SampledTextureSampleProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture1D.name = "textureSampleProjCompare"_c;
    SampledTextureSampleProjCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjCompare_Texture1D.parameters = SampledTextureSampleProjCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture2D.name = "textureSampleProjCompare"_c;
    TextureSampleProjCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjCompare_Texture2D.parameters = TextureSampleProjCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjCompare with Texture2D, Float32x2, Float32, Float32
    SampledTextureSampleProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture2D.name = "textureSampleProjCompare"_c;
    SampledTextureSampleProjCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjCompare_Texture2D.parameters = SampledTextureSampleProjCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompare_Texture3D.name = "textureSampleProjCompare"_c;
    TextureSampleProjCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjCompare_Texture3D.parameters = TextureSampleProjCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjCompare with Texture3D, Float32x3, Float32, Float32
    SampledTextureSampleProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompare_Texture3D.name = "textureSampleProjCompare"_c;
    SampledTextureSampleProjCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjCompare_Texture3D.parameters = SampledTextureSampleProjCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleProjCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleProjCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleProjCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompareOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture1D.name = "textureSampleProjCompareOffset"_c;
    TextureSampleProjCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjCompareOffset_Texture1D.parameters = TextureSampleProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjCompareOffset with Texture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleProjCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleProjCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D.name = "textureSampleProjCompareOffset"_c;
    SampledTextureSampleProjCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjCompareOffset_Texture1D.parameters = SampledTextureSampleProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleProjCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleProjCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleProjCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompareOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjCompareOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleProjCompareOffset_Texture2D.name = "textureSampleProjCompareOffset"_c;
    TextureSampleProjCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjCompareOffset_Texture2D.parameters = TextureSampleProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjCompareOffset with Texture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleProjCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleProjCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D.name = "textureSampleProjCompareOffset"_c;
    SampledTextureSampleProjCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjCompareOffset_Texture2D.parameters = SampledTextureSampleProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleProjCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleProjCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleProjCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleProjCompareOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjCompareOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleProjCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleProjCompareOffset_Texture3D.name = "textureSampleProjCompareOffset"_c;
    TextureSampleProjCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleProjCompareOffset_Texture3D.parameters = TextureSampleProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleProjCompareOffset with Texture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleProjCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleProjCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D.name = "textureSampleProjCompareOffset"_c;
    SampledTextureSampleProjCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleProjCompareOffset_Texture3D.parameters = SampledTextureSampleProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture1D, Sampler, Float32, Float32
    TextureSampleLod_Texture1D_texture.name = "texture"_c;
    TextureSampleLod_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLod_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLod_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture1D_lod.name = "lod"_c;
    TextureSampleLod_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture1D.name = "textureSampleLod"_c;
    TextureSampleLod_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture1D.parameters = TextureSampleLod_Texture1D_args;
    Symbol::Resolved(&TextureSampleLod_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLod_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture1D, Float32, Float32
    SampledTextureSampleLod_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleLod_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLod_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture1D.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture1D.parameters = SampledTextureSampleLod_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture2D, Sampler, Float32x2, Float32
    TextureSampleLod_Texture2D_texture.name = "texture"_c;
    TextureSampleLod_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLod_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLod_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLod_Texture2D_lod.name = "lod"_c;
    TextureSampleLod_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture2D.name = "textureSampleLod"_c;
    TextureSampleLod_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture2D.parameters = TextureSampleLod_Texture2D_args;
    Symbol::Resolved(&TextureSampleLod_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLod_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLod_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture2D, Float32x2, Float32
    SampledTextureSampleLod_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleLod_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLod_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLod_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture2D.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture2D.parameters = SampledTextureSampleLod_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture3D, Sampler, Float32x3, Float32
    TextureSampleLod_Texture3D_texture.name = "texture"_c;
    TextureSampleLod_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLod_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLod_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLod_Texture3D_lod.name = "lod"_c;
    TextureSampleLod_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture3D.name = "textureSampleLod"_c;
    TextureSampleLod_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture3D.parameters = TextureSampleLod_Texture3D_args;
    Symbol::Resolved(&TextureSampleLod_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLod_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLod_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture3D, Float32x3, Float32
    SampledTextureSampleLod_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleLod_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLod_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLod_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture3D.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture3D.parameters = SampledTextureSampleLod_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with TextureCube, Sampler, Float32x3, Float32
    TextureSampleLod_TextureCube_texture.name = "texture"_c;
    TextureSampleLod_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSampleLod_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_TextureCube_sampler.name = "sampler"_c;
    TextureSampleLod_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_TextureCube_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_TextureCube_coordinate.name = "coordinate"_c;
    TextureSampleLod_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLod_TextureCube_lod.name = "lod"_c;
    TextureSampleLod_TextureCube_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_TextureCube.name = "textureSampleLod"_c;
    TextureSampleLod_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_TextureCube.parameters = TextureSampleLod_TextureCube_args;
    Symbol::Resolved(&TextureSampleLod_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSampleLod_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLod_TextureCube_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with TextureCube, Float32x3, Float32
    SampledTextureSampleLod_TextureCube_texture.name = "texture"_c;
    SampledTextureSampleLod_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    SampledTextureSampleLod_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLod_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLod_TextureCube_lod.name = "lod"_c;
    SampledTextureSampleLod_TextureCube_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_TextureCube.name = "textureSampleLod"_c;
    SampledTextureSampleLod_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_TextureCube.parameters = SampledTextureSampleLod_TextureCube_args;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture1DArray, Sampler, Float32x2, Float32
    TextureSampleLod_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLod_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLod_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLod_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLod_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLod_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture1DArray.name = "textureSampleLod"_c;
    TextureSampleLod_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture1DArray.parameters = TextureSampleLod_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture1DArray, Float32x2, Float32
    SampledTextureSampleLod_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleLod_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLod_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLod_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture1DArray.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture1DArray.parameters = SampledTextureSampleLod_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture2DArray, Sampler, Float32x3, Float32
    TextureSampleLod_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLod_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLod_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLod_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLod_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLod_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLod_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_Texture2DArray.name = "textureSampleLod"_c;
    TextureSampleLod_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_Texture2DArray.parameters = TextureSampleLod_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with Texture2DArray, Float32x3, Float32
    SampledTextureSampleLod_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLod_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleLod_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLod_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLod_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLod_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_Texture2DArray.name = "textureSampleLod"_c;
    SampledTextureSampleLod_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_Texture2DArray.parameters = SampledTextureSampleLod_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with TextureCubeArray, Sampler, Float32x4, Float32
    TextureSampleLod_TextureCubeArray_texture.name = "texture"_c;
    TextureSampleLod_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSampleLod_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSampleLod_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLod_TextureCubeArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLod_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSampleLod_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSampleLod_TextureCubeArray_lod.name = "lod"_c;
    TextureSampleLod_TextureCubeArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLod_TextureCubeArray.name = "textureSampleLod"_c;
    TextureSampleLod_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLod_TextureCubeArray.parameters = TextureSampleLod_TextureCubeArray_args;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLod_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLod with TextureCubeArray, Float32x4, Float32
    SampledTextureSampleLod_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSampleLod_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    SampledTextureSampleLod_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLod_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLod_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleLod_TextureCubeArray_lod.name = "lod"_c;
    SampledTextureSampleLod_TextureCubeArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLod_TextureCubeArray.name = "textureSampleLod"_c;
    SampledTextureSampleLod_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLod_TextureCubeArray.parameters = SampledTextureSampleLod_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLod_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleLodOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture1D_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture1D.name = "textureSampleLodOffset"_c;
    TextureSampleLodOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture1D.parameters = TextureSampleLodOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture1D, Float32, Float32, Float32
    SampledTextureSampleLodOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleLodOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture1D.name = "textureSampleLodOffset"_c;
    SampledTextureSampleLodOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture1D.parameters = SampledTextureSampleLodOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleLodOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodOffset_Texture2D_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodOffset_Texture2D.name = "textureSampleLodOffset"_c;
    TextureSampleLodOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture2D.parameters = TextureSampleLodOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleLodOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleLodOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodOffset_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodOffset_Texture2D.name = "textureSampleLodOffset"_c;
    SampledTextureSampleLodOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture2D.parameters = SampledTextureSampleLodOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleLodOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodOffset_Texture3D_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodOffset_Texture3D.name = "textureSampleLodOffset"_c;
    TextureSampleLodOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture3D.parameters = TextureSampleLodOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleLodOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleLodOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodOffset_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodOffset_Texture3D.name = "textureSampleLodOffset"_c;
    SampledTextureSampleLodOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture3D.parameters = SampledTextureSampleLodOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
    TextureSampleLodOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLodOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodOffset_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodOffset_Texture1DArray.name = "textureSampleLodOffset"_c;
    TextureSampleLodOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture1DArray.parameters = TextureSampleLodOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture1DArray, Float32x2, Float32, Float32x2
    SampledTextureSampleLodOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleLodOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodOffset_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodOffset_Texture1DArray.name = "textureSampleLodOffset"_c;
    SampledTextureSampleLodOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture1DArray.parameters = SampledTextureSampleLodOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
    TextureSampleLodOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLodOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLodOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLodOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodOffset_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodOffset_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLodOffset_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleLodOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodOffset_Texture2DArray.name = "textureSampleLodOffset"_c;
    TextureSampleLodOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodOffset_Texture2DArray.parameters = TextureSampleLodOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodOffset with Texture2DArray, Float32x3, Float32, Float32x3
    SampledTextureSampleLodOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLodOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleLodOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodOffset_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLodOffset_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleLodOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodOffset_Texture2DArray.name = "textureSampleLodOffset"_c;
    SampledTextureSampleLodOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodOffset_Texture2DArray.parameters = SampledTextureSampleLodOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleLodProj_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProj_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProj_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture1D.name = "textureSampleLodProj"_c;
    TextureSampleLodProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProj_Texture1D.parameters = TextureSampleLodProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with Texture1D, Float32, Float32, Float32
    SampledTextureSampleLodProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleLodProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProj_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture1D.name = "textureSampleLodProj"_c;
    SampledTextureSampleLodProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProj_Texture1D.parameters = SampledTextureSampleLodProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleLodProj_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProj_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProj_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProj_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture2D.name = "textureSampleLodProj"_c;
    TextureSampleLodProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProj_Texture2D.parameters = TextureSampleLodProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with Texture2D, Float32x2, Float32, Float32
    SampledTextureSampleLodProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleLodProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProj_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProj_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture2D.name = "textureSampleLodProj"_c;
    SampledTextureSampleLodProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProj_Texture2D.parameters = SampledTextureSampleLodProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleLodProj_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProj_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProj_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProj_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProj_Texture3D.name = "textureSampleLodProj"_c;
    TextureSampleLodProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProj_Texture3D.parameters = TextureSampleLodProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProj with Texture3D, Float32x3, Float32, Float32
    SampledTextureSampleLodProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleLodProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProj_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProj_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProj_Texture3D.name = "textureSampleLodProj"_c;
    SampledTextureSampleLodProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProj_Texture3D.parameters = SampledTextureSampleLodProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleLodProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProjOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProjOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleLodProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture1D.name = "textureSampleLodProjOffset"_c;
    TextureSampleLodProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjOffset_Texture1D.parameters = TextureSampleLodProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with Texture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleLodProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleLodProjOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProjOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleLodProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture1D.name = "textureSampleLodProjOffset"_c;
    SampledTextureSampleLodProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjOffset_Texture1D.parameters = SampledTextureSampleLodProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleLodProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProjOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjOffset_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProjOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleLodProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjOffset_Texture2D.name = "textureSampleLodProjOffset"_c;
    TextureSampleLodProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjOffset_Texture2D.parameters = TextureSampleLodProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with Texture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleLodProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleLodProjOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjOffset_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProjOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleLodProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjOffset_Texture2D.name = "textureSampleLodProjOffset"_c;
    SampledTextureSampleLodProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjOffset_Texture2D.parameters = SampledTextureSampleLodProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleLodProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProjOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjOffset_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProjOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleLodProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjOffset_Texture3D.name = "textureSampleLodProjOffset"_c;
    TextureSampleLodProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjOffset_Texture3D.parameters = TextureSampleLodProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjOffset with Texture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleLodProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleLodProjOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjOffset_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProjOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleLodProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjOffset_Texture3D.name = "textureSampleLodProjOffset"_c;
    SampledTextureSampleLodProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjOffset_Texture3D.parameters = SampledTextureSampleLodProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompare with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleLodCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1D_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1D.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodCompare_Texture1D.parameters = TextureSampleLodCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompare with Texture1D, Float32, Float32, Float32
    SampledTextureSampleLodCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleLodCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1D.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodCompare_Texture1D.parameters = SampledTextureSampleLodCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompare with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleLodCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompare_Texture2D_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2D.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodCompare_Texture2D.parameters = TextureSampleLodCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompare with Texture2D, Float32x2, Float32, Float32
    SampledTextureSampleLodCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleLodCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompare_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2D.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodCompare_Texture2D.parameters = SampledTextureSampleLodCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompare with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleLodCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompare_Texture3D_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture3D.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodCompare_Texture3D.parameters = TextureSampleLodCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompare with Texture3D, Float32x3, Float32, Float32
    SampledTextureSampleLodCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleLodCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompare_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture3D.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodCompare_Texture3D.parameters = SampledTextureSampleLodCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompare with Texture1DArray, Sampler, Float32x2, Float32, Float32
    TextureSampleLodCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLodCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompare_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture1DArray.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodCompare_Texture1DArray.parameters = TextureSampleLodCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompare with Texture1DArray, Float32x2, Float32, Float32
    SampledTextureSampleLodCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleLodCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompare_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture1DArray.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodCompare_Texture1DArray.parameters = SampledTextureSampleLodCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompare with Texture2DArray, Sampler, Float32x3, Float32, Float32
    TextureSampleLodCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLodCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLodCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompare_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompare_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLodCompare_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleLodCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompare_Texture2DArray.name = "textureSampleLodCompare"_c;
    TextureSampleLodCompare_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodCompare_Texture2DArray.parameters = TextureSampleLodCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompare with Texture2DArray, Float32x3, Float32, Float32
    SampledTextureSampleLodCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleLodCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompare_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompare_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompare_Texture2DArray.name = "textureSampleLodCompare"_c;
    SampledTextureSampleLodCompare_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodCompare_Texture2DArray.parameters = SampledTextureSampleLodCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleLodCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1D.name = "textureSampleLodCompareOffset"_c;
    TextureSampleLodCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodCompareOffset_Texture1D.parameters = TextureSampleLodCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompareOffset with Texture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleLodCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleLodCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D.name = "textureSampleLodCompareOffset"_c;
    SampledTextureSampleLodCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodCompareOffset_Texture1D.parameters = SampledTextureSampleLodCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleLodCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompareOffset_Texture2D_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompareOffset_Texture2D.name = "textureSampleLodCompareOffset"_c;
    TextureSampleLodCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodCompareOffset_Texture2D.parameters = TextureSampleLodCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompareOffset with Texture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleLodCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleLodCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D.name = "textureSampleLodCompareOffset"_c;
    SampledTextureSampleLodCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodCompareOffset_Texture2D.parameters = SampledTextureSampleLodCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleLodCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompareOffset_Texture3D_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompareOffset_Texture3D.name = "textureSampleLodCompareOffset"_c;
    TextureSampleLodCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodCompareOffset_Texture3D.parameters = TextureSampleLodCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompareOffset with Texture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleLodCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleLodCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D.name = "textureSampleLodCompareOffset"_c;
    SampledTextureSampleLodCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodCompareOffset_Texture3D.parameters = SampledTextureSampleLodCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleLodCompareOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleLodCompareOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompareOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompareOffset_Texture1DArray_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1DArray_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodCompareOffset_Texture1DArray.name = "textureSampleLodCompareOffset"_c;
    TextureSampleLodCompareOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodCompareOffset_Texture1DArray.parameters = TextureSampleLodCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompareOffset with Texture1DArray, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleLodCompareOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray.name = "textureSampleLodCompareOffset"_c;
    SampledTextureSampleLodCompareOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodCompareOffset_Texture1DArray.parameters = SampledTextureSampleLodCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleLodCompareOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleLodCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleLodCompareOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompareOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleLodCompareOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodCompareOffset_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleLodCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompareOffset_Texture2DArray_lod.name = "lod"_c;
    TextureSampleLodCompareOffset_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture2DArray_compare.name = "compare"_c;
    TextureSampleLodCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodCompareOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleLodCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodCompareOffset_Texture2DArray.name = "textureSampleLodCompareOffset"_c;
    TextureSampleLodCompareOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodCompareOffset_Texture2DArray.parameters = TextureSampleLodCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodCompareOffset with Texture2DArray, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleLodCompareOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray_lod.name = "lod"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray.name = "textureSampleLodCompareOffset"_c;
    SampledTextureSampleLodCompareOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodCompareOffset_Texture2DArray.parameters = SampledTextureSampleLodCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleLodProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture1D.name = "textureSampleLodProjCompare"_c;
    TextureSampleLodProjCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjCompare_Texture1D.parameters = TextureSampleLodProjCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjCompare with Texture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleLodProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleLodProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture1D.name = "textureSampleLodProjCompare"_c;
    SampledTextureSampleLodProjCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjCompare_Texture1D.parameters = SampledTextureSampleLodProjCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32, Float32
    TextureSampleLodProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjCompare_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture2D.name = "textureSampleLodProjCompare"_c;
    TextureSampleLodProjCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjCompare_Texture2D.parameters = TextureSampleLodProjCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjCompare with Texture2D, Float32x2, Float32, Float32, Float32
    SampledTextureSampleLodProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleLodProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjCompare_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture2D.name = "textureSampleLodProjCompare"_c;
    SampledTextureSampleLodProjCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjCompare_Texture2D.parameters = SampledTextureSampleLodProjCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32, Float32
    TextureSampleLodProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjCompare_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProjCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleLodProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompare_Texture3D.name = "textureSampleLodProjCompare"_c;
    TextureSampleLodProjCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjCompare_Texture3D.parameters = TextureSampleLodProjCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjCompare with Texture3D, Float32x3, Float32, Float32, Float32
    SampledTextureSampleLodProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleLodProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompare_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompare_Texture3D.name = "textureSampleLodProjCompare"_c;
    SampledTextureSampleLodProjCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjCompare_Texture3D.parameters = SampledTextureSampleLodProjCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleLodProjCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleLodProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleLodProjCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompareOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D_lod.name = "lod"_c;
    TextureSampleLodProjCompareOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleLodProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleLodProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleLodProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture1D.name = "textureSampleLodProjCompareOffset"_c;
    TextureSampleLodProjCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjCompareOffset_Texture1D.parameters = TextureSampleLodProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjCompareOffset with Texture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleLodProjCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D.name = "textureSampleLodProjCompareOffset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture1D.parameters = SampledTextureSampleLodProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32, Float32x2
    TextureSampleLodProjCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleLodProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleLodProjCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompareOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjCompareOffset_Texture2D_lod.name = "lod"_c;
    TextureSampleLodProjCompareOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleLodProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleLodProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleLodProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleLodProjCompareOffset_Texture2D.name = "textureSampleLodProjCompareOffset"_c;
    TextureSampleLodProjCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjCompareOffset_Texture2D.parameters = TextureSampleLodProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjCompareOffset with Texture2D, Float32x2, Float32, Float32, Float32, Float32x2
    SampledTextureSampleLodProjCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D.name = "textureSampleLodProjCompareOffset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture2D.parameters = SampledTextureSampleLodProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32, Float32x3
    TextureSampleLodProjCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleLodProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleLodProjCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleLodProjCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleLodProjCompareOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleLodProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleLodProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjCompareOffset_Texture3D_lod.name = "lod"_c;
    TextureSampleLodProjCompareOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleLodProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleLodProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleLodProjCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleLodProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleLodProjCompareOffset_Texture3D.name = "textureSampleLodProjCompareOffset"_c;
    TextureSampleLodProjCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleLodProjCompareOffset_Texture3D.parameters = TextureSampleLodProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleLodProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleLodProjCompareOffset with Texture3D, Float32x3, Float32, Float32, Float32, Float32x3
    SampledTextureSampleLodProjCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_lod.name = "lod"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_lod.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D.name = "textureSampleLodProjCompareOffset"_c;
    SampledTextureSampleLodProjCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleLodProjCompareOffset_Texture3D.parameters = SampledTextureSampleLodProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_lod)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleLodProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleGrad_Texture1D_texture.name = "texture"_c;
    TextureSampleGrad_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGrad_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGrad_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGrad_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGrad_Texture1D.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture1D.parameters = TextureSampleGrad_Texture1D_args;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture1D, Float32, Float32, Float32
    SampledTextureSampleGrad_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleGrad_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGrad_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGrad_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGrad_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGrad_Texture1D.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture1D.parameters = SampledTextureSampleGrad_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture2D, Sampler, Float32x2, Float32x2, Float32x2
    TextureSampleGrad_Texture2D_texture.name = "texture"_c;
    TextureSampleGrad_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGrad_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture2D.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture2D.parameters = TextureSampleGrad_Texture2D_args;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture2D, Float32x2, Float32x2, Float32x2
    SampledTextureSampleGrad_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleGrad_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGrad_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture2D.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture2D.parameters = SampledTextureSampleGrad_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture3D, Sampler, Float32x3, Float32x3, Float32x3
    TextureSampleGrad_Texture3D_texture.name = "texture"_c;
    TextureSampleGrad_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGrad_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture3D.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture3D.parameters = TextureSampleGrad_Texture3D_args;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture3D, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGrad_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleGrad_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGrad_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture3D.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture3D.parameters = SampledTextureSampleGrad_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with TextureCube, Sampler, Float32x3, Float32x3, Float32x3
    TextureSampleGrad_TextureCube_texture.name = "texture"_c;
    TextureSampleGrad_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSampleGrad_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_TextureCube_sampler.name = "sampler"_c;
    TextureSampleGrad_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_TextureCube_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_TextureCube_coordinate.name = "coordinate"_c;
    TextureSampleGrad_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_TextureCube_grad_x.name = "grad_x"_c;
    TextureSampleGrad_TextureCube_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_TextureCube_grad_y.name = "grad_y"_c;
    TextureSampleGrad_TextureCube_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_TextureCube.name = "textureSampleGrad"_c;
    TextureSampleGrad_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_TextureCube.parameters = TextureSampleGrad_TextureCube_args;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCube_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with TextureCube, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGrad_TextureCube_texture.name = "texture"_c;
    SampledTextureSampleGrad_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    SampledTextureSampleGrad_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGrad_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_TextureCube_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_TextureCube_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_TextureCube_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_TextureCube_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_TextureCube.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_TextureCube.parameters = SampledTextureSampleGrad_TextureCube_args;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2
    TextureSampleGrad_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGrad_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGrad_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture1DArray_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture1DArray_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGrad_Texture1DArray.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture1DArray.parameters = TextureSampleGrad_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGrad_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture1DArray, Float32x2, Float32x2, Float32x2
    SampledTextureSampleGrad_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleGrad_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGrad_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture1DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture1DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGrad_Texture1DArray.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture1DArray.parameters = SampledTextureSampleGrad_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3
    TextureSampleGrad_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGrad_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGrad_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGrad_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGrad_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture2DArray_grad_x.name = "grad_x"_c;
    TextureSampleGrad_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture2DArray_grad_y.name = "grad_y"_c;
    TextureSampleGrad_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGrad_Texture2DArray.name = "textureSampleGrad"_c;
    TextureSampleGrad_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_Texture2DArray.parameters = TextureSampleGrad_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGrad_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with Texture2DArray, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGrad_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGrad_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleGrad_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGrad_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture2DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture2DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGrad_Texture2DArray.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_Texture2DArray.parameters = SampledTextureSampleGrad_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGrad_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with TextureCubeArray, Sampler, Float32x4, Float32x4, Float32x4
    TextureSampleGrad_TextureCubeArray_texture.name = "texture"_c;
    TextureSampleGrad_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSampleGrad_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSampleGrad_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGrad_TextureCubeArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGrad_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSampleGrad_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray_grad_x.name = "grad_x"_c;
    TextureSampleGrad_TextureCubeArray_grad_x.type = Type::FullType{ Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray_grad_y.name = "grad_y"_c;
    TextureSampleGrad_TextureCubeArray_grad_y.type = Type::FullType{ Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray.name = "textureSampleGrad"_c;
    TextureSampleGrad_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGrad_TextureCubeArray.parameters = TextureSampleGrad_TextureCubeArray_args;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_grad_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray_grad_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleGrad_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGrad with TextureCubeArray, Float32x4, Float32x4, Float32x4
    SampledTextureSampleGrad_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSampleGrad_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    SampledTextureSampleGrad_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGrad_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGrad_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGrad_TextureCubeArray_grad_x.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGrad_TextureCubeArray_grad_y.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray.name = "textureSampleGrad"_c;
    SampledTextureSampleGrad_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGrad_TextureCubeArray.parameters = SampledTextureSampleGrad_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_grad_x)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray_grad_y)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleGrad_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleGradOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradOffset_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradOffset_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleGradOffset_Texture1D.name = "textureSampleGradOffset"_c;
    TextureSampleGradOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture1D.parameters = TextureSampleGradOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleGradOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleGradOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradOffset_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradOffset_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradOffset_Texture1D.name = "textureSampleGradOffset"_c;
    SampledTextureSampleGradOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture1D.parameters = SampledTextureSampleGradOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32x2
    TextureSampleGradOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture2D.name = "textureSampleGradOffset"_c;
    TextureSampleGradOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture2D.parameters = TextureSampleGradOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture2D, Float32x2, Float32x2, Float32x2, Float32x2
    SampledTextureSampleGradOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleGradOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture2D.name = "textureSampleGradOffset"_c;
    SampledTextureSampleGradOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture2D.parameters = SampledTextureSampleGradOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32x3
    TextureSampleGradOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture3D.name = "textureSampleGradOffset"_c;
    TextureSampleGradOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture3D.parameters = TextureSampleGradOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture3D, Float32x3, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGradOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleGradOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture3D.name = "textureSampleGradOffset"_c;
    SampledTextureSampleGradOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture3D.parameters = SampledTextureSampleGradOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32x2
    TextureSampleGradOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGradOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture1DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture1DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradOffset_Texture1DArray.name = "textureSampleGradOffset"_c;
    TextureSampleGradOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture1DArray.parameters = TextureSampleGradOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture1DArray, Float32x2, Float32x2, Float32x2, Float32x2
    SampledTextureSampleGradOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleGradOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture1DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture1DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradOffset_Texture1DArray.name = "textureSampleGradOffset"_c;
    SampledTextureSampleGradOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture1DArray.parameters = SampledTextureSampleGradOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32x3
    TextureSampleGradOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGradOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGradOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGradOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradOffset_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture2DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradOffset_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture2DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradOffset_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleGradOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradOffset_Texture2DArray.name = "textureSampleGradOffset"_c;
    TextureSampleGradOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradOffset_Texture2DArray.parameters = TextureSampleGradOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradOffset with Texture2DArray, Float32x3, Float32x3, Float32x3, Float32x3
    SampledTextureSampleGradOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGradOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleGradOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture2DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradOffset_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture2DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradOffset_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleGradOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradOffset_Texture2DArray.name = "textureSampleGradOffset"_c;
    SampledTextureSampleGradOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradOffset_Texture2DArray.parameters = SampledTextureSampleGradOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleGradProj_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProj_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradProj_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradProj_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture1D.name = "textureSampleGradProj"_c;
    TextureSampleGradProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProj_Texture1D.parameters = TextureSampleGradProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with Texture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleGradProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleGradProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProj_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProj_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture1D.name = "textureSampleGradProj"_c;
    SampledTextureSampleGradProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProj_Texture1D.parameters = SampledTextureSampleGradProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32
    TextureSampleGradProj_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProj_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProj_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradProj_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProj_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradProj_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProj_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture2D.name = "textureSampleGradProj"_c;
    TextureSampleGradProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProj_Texture2D.parameters = TextureSampleGradProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with Texture2D, Float32x2, Float32x2, Float32x2, Float32
    SampledTextureSampleGradProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleGradProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProj_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProj_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProj_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProj_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture2D.name = "textureSampleGradProj"_c;
    SampledTextureSampleGradProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProj_Texture2D.parameters = SampledTextureSampleGradProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32
    TextureSampleGradProj_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProj_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProj_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradProj_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProj_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradProj_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProj_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProj_Texture3D.name = "textureSampleGradProj"_c;
    TextureSampleGradProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProj_Texture3D.parameters = TextureSampleGradProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProj with Texture3D, Float32x3, Float32x3, Float32x3, Float32
    SampledTextureSampleGradProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleGradProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProj_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProj_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProj_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProj_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProj_Texture3D.name = "textureSampleGradProj"_c;
    SampledTextureSampleGradProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProj_Texture3D.parameters = SampledTextureSampleGradProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleGradProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProjOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleGradProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture1D.name = "textureSampleGradProjOffset"_c;
    TextureSampleGradProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjOffset_Texture1D.parameters = TextureSampleGradProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with Texture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleGradProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleGradProjOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleGradProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture1D.name = "textureSampleGradProjOffset"_c;
    SampledTextureSampleGradProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjOffset_Texture1D.parameters = SampledTextureSampleGradProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    TextureSampleGradProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProjOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjOffset_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjOffset_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleGradProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjOffset_Texture2D.name = "textureSampleGradProjOffset"_c;
    TextureSampleGradProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjOffset_Texture2D.parameters = TextureSampleGradProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with Texture2D, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    SampledTextureSampleGradProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleGradProjOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjOffset_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjOffset_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleGradProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjOffset_Texture2D.name = "textureSampleGradProjOffset"_c;
    SampledTextureSampleGradProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjOffset_Texture2D.parameters = SampledTextureSampleGradProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    TextureSampleGradProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProjOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjOffset_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjOffset_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleGradProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjOffset_Texture3D.name = "textureSampleGradProjOffset"_c;
    TextureSampleGradProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjOffset_Texture3D.parameters = TextureSampleGradProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjOffset with Texture3D, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    SampledTextureSampleGradProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleGradProjOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjOffset_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjOffset_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleGradProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjOffset_Texture3D.name = "textureSampleGradProjOffset"_c;
    SampledTextureSampleGradProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjOffset_Texture3D.parameters = SampledTextureSampleGradProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleGradCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1D.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradCompare_Texture1D.parameters = TextureSampleGradCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompare with Texture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleGradCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleGradCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1D.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradCompare_Texture1D.parameters = SampledTextureSampleGradCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompare with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32
    TextureSampleGradCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture2D.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradCompare_Texture2D.parameters = TextureSampleGradCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompare with Texture2D, Float32x2, Float32x2, Float32x2, Float32
    SampledTextureSampleGradCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleGradCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture2D.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradCompare_Texture2D.parameters = SampledTextureSampleGradCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompare with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32
    TextureSampleGradCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture3D.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradCompare_Texture3D.parameters = TextureSampleGradCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompare with Texture3D, Float32x3, Float32x3, Float32x3, Float32
    SampledTextureSampleGradCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleGradCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture3D.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradCompare_Texture3D.parameters = SampledTextureSampleGradCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompare with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32
    TextureSampleGradCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGradCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture1DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture1DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture1DArray.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradCompare_Texture1DArray.parameters = TextureSampleGradCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompare with Texture1DArray, Float32x2, Float32x2, Float32x2, Float32
    SampledTextureSampleGradCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleGradCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture1DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture1DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture1DArray.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradCompare_Texture1DArray.parameters = SampledTextureSampleGradCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompare with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32
    TextureSampleGradCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGradCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGradCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompare_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture2DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradCompare_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture2DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradCompare_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleGradCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompare_Texture2DArray.name = "textureSampleGradCompare"_c;
    TextureSampleGradCompare_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradCompare_Texture2DArray.parameters = TextureSampleGradCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompare with Texture2DArray, Float32x3, Float32x3, Float32x3, Float32
    SampledTextureSampleGradCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleGradCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture2DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompare_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture2DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompare_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompare_Texture2DArray.name = "textureSampleGradCompare"_c;
    SampledTextureSampleGradCompare_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradCompare_Texture2DArray.parameters = SampledTextureSampleGradCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleGradCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1D.name = "textureSampleGradCompareOffset"_c;
    TextureSampleGradCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradCompareOffset_Texture1D.parameters = TextureSampleGradCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompareOffset with Texture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleGradCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleGradCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D.name = "textureSampleGradCompareOffset"_c;
    SampledTextureSampleGradCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradCompareOffset_Texture1D.parameters = SampledTextureSampleGradCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompareOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    TextureSampleGradCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture2D.name = "textureSampleGradCompareOffset"_c;
    TextureSampleGradCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradCompareOffset_Texture2D.parameters = TextureSampleGradCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompareOffset with Texture2D, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    SampledTextureSampleGradCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleGradCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D.name = "textureSampleGradCompareOffset"_c;
    SampledTextureSampleGradCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradCompareOffset_Texture2D.parameters = SampledTextureSampleGradCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompareOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    TextureSampleGradCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture3D.name = "textureSampleGradCompareOffset"_c;
    TextureSampleGradCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradCompareOffset_Texture3D.parameters = TextureSampleGradCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompareOffset with Texture3D, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    SampledTextureSampleGradCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleGradCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D.name = "textureSampleGradCompareOffset"_c;
    SampledTextureSampleGradCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradCompareOffset_Texture3D.parameters = SampledTextureSampleGradCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompareOffset with Texture1DArray, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    TextureSampleGradCompareOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleGradCompareOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompareOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture1DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture1DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture1DArray_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradCompareOffset_Texture1DArray.name = "textureSampleGradCompareOffset"_c;
    TextureSampleGradCompareOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradCompareOffset_Texture1DArray.parameters = TextureSampleGradCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompareOffset with Texture1DArray, Float32x2, Float32x2, Float32x2, Float32, Float32x2
    SampledTextureSampleGradCompareOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray.name = "textureSampleGradCompareOffset"_c;
    SampledTextureSampleGradCompareOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradCompareOffset_Texture1DArray.parameters = SampledTextureSampleGradCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompareOffset with Texture2DArray, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    TextureSampleGradCompareOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleGradCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleGradCompareOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompareOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleGradCompareOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradCompareOffset_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleGradCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture2DArray_grad_x.name = "grad_x"_c;
    TextureSampleGradCompareOffset_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture2DArray_grad_y.name = "grad_y"_c;
    TextureSampleGradCompareOffset_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture2DArray_compare.name = "compare"_c;
    TextureSampleGradCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradCompareOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleGradCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradCompareOffset_Texture2DArray.name = "textureSampleGradCompareOffset"_c;
    TextureSampleGradCompareOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradCompareOffset_Texture2DArray.parameters = TextureSampleGradCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradCompareOffset with Texture2DArray, Float32x3, Float32x3, Float32x3, Float32, Float32x3
    SampledTextureSampleGradCompareOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray.name = "textureSampleGradCompareOffset"_c;
    SampledTextureSampleGradCompareOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradCompareOffset_Texture2DArray.parameters = SampledTextureSampleGradCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleGradProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompare_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompare_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleGradProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture1D.name = "textureSampleGradProjCompare"_c;
    TextureSampleGradProjCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjCompare_Texture1D.parameters = TextureSampleGradProjCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjCompare with Texture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleGradProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleGradProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompare_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompare_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture1D.name = "textureSampleGradProjCompare"_c;
    SampledTextureSampleGradProjCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjCompare_Texture1D.parameters = SampledTextureSampleGradProjCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjCompare with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32
    TextureSampleGradProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompare_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompare_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompare_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompare_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleGradProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture2D.name = "textureSampleGradProjCompare"_c;
    TextureSampleGradProjCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjCompare_Texture2D.parameters = TextureSampleGradProjCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjCompare with Texture2D, Float32x2, Float32x2, Float32x2, Float32, Float32
    SampledTextureSampleGradProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleGradProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompare_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompare_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture2D.name = "textureSampleGradProjCompare"_c;
    SampledTextureSampleGradProjCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjCompare_Texture2D.parameters = SampledTextureSampleGradProjCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjCompare with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32
    TextureSampleGradProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompare_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompare_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompare_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompare_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleGradProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompare_Texture3D.name = "textureSampleGradProjCompare"_c;
    TextureSampleGradProjCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjCompare_Texture3D.parameters = TextureSampleGradProjCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjCompare with Texture3D, Float32x3, Float32x3, Float32x3, Float32, Float32
    SampledTextureSampleGradProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleGradProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompare_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompare_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompare_Texture3D.name = "textureSampleGradProjCompare"_c;
    SampledTextureSampleGradProjCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjCompare_Texture3D.parameters = SampledTextureSampleGradProjCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32, Float32
    TextureSampleGradProjCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleGradProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleGradProjCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompareOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompareOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompareOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleGradProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleGradProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleGradProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture1D.name = "textureSampleGradProjCompareOffset"_c;
    TextureSampleGradProjCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjCompareOffset_Texture1D.parameters = TextureSampleGradProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjCompareOffset with Texture1D, Float32, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleGradProjCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D.name = "textureSampleGradProjCompareOffset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture1D.parameters = SampledTextureSampleGradProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_grad_x)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_grad_y)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjCompareOffset with Texture2D, Sampler, Float32x2, Float32x2, Float32x2, Float32, Float32, Float32x2
    TextureSampleGradProjCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleGradProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleGradProjCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompareOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompareOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompareOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleGradProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleGradProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleGradProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleGradProjCompareOffset_Texture2D.name = "textureSampleGradProjCompareOffset"_c;
    TextureSampleGradProjCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjCompareOffset_Texture2D.parameters = TextureSampleGradProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjCompareOffset with Texture2D, Float32x2, Float32x2, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleGradProjCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D.name = "textureSampleGradProjCompareOffset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture2D.parameters = SampledTextureSampleGradProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_grad_x)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_grad_y)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjCompareOffset with Texture3D, Sampler, Float32x3, Float32x3, Float32x3, Float32, Float32, Float32x3
    TextureSampleGradProjCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleGradProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleGradProjCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleGradProjCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleGradProjCompareOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleGradProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleGradProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_grad_x.name = "grad_x"_c;
    TextureSampleGradProjCompareOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_grad_y.name = "grad_y"_c;
    TextureSampleGradProjCompareOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleGradProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleGradProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleGradProjCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleGradProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleGradProjCompareOffset_Texture3D.name = "textureSampleGradProjCompareOffset"_c;
    TextureSampleGradProjCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleGradProjCompareOffset_Texture3D.parameters = TextureSampleGradProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleGradProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleGradProjCompareOffset with Texture3D, Float32x3, Float32x3, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleGradProjCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x.name = "grad_x"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y.name = "grad_y"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D.name = "textureSampleGradProjCompareOffset"_c;
    SampledTextureSampleGradProjCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleGradProjCompareOffset_Texture3D.parameters = SampledTextureSampleGradProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_grad_x)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_grad_y)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleGradProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture1D, Sampler, Float32, Float32
    TextureSampleBias_Texture1D_texture.name = "texture"_c;
    TextureSampleBias_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBias_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBias_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture1D_bias.name = "bias"_c;
    TextureSampleBias_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture1D.name = "textureSampleBias"_c;
    TextureSampleBias_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture1D.parameters = TextureSampleBias_Texture1D_args;
    Symbol::Resolved(&TextureSampleBias_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBias_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture1D, Float32, Float32
    SampledTextureSampleBias_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleBias_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBias_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture1D.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture1D.parameters = SampledTextureSampleBias_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture2D, Sampler, Float32x2, Float32
    TextureSampleBias_Texture2D_texture.name = "texture"_c;
    TextureSampleBias_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBias_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBias_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBias_Texture2D_bias.name = "bias"_c;
    TextureSampleBias_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture2D.name = "textureSampleBias"_c;
    TextureSampleBias_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture2D.parameters = TextureSampleBias_Texture2D_args;
    Symbol::Resolved(&TextureSampleBias_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBias_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBias_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture2D, Float32x2, Float32
    SampledTextureSampleBias_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleBias_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBias_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBias_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture2D.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture2D.parameters = SampledTextureSampleBias_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture3D, Sampler, Float32x3, Float32
    TextureSampleBias_Texture3D_texture.name = "texture"_c;
    TextureSampleBias_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBias_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBias_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBias_Texture3D_bias.name = "bias"_c;
    TextureSampleBias_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture3D.name = "textureSampleBias"_c;
    TextureSampleBias_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture3D.parameters = TextureSampleBias_Texture3D_args;
    Symbol::Resolved(&TextureSampleBias_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBias_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBias_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture3D, Float32x3, Float32
    SampledTextureSampleBias_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleBias_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBias_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBias_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture3D.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture3D.parameters = SampledTextureSampleBias_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with TextureCube, Sampler, Float32x3, Float32
    TextureSampleBias_TextureCube_texture.name = "texture"_c;
    TextureSampleBias_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    TextureSampleBias_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_TextureCube_sampler.name = "sampler"_c;
    TextureSampleBias_TextureCube_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_TextureCube_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_TextureCube_coordinate.name = "coordinate"_c;
    TextureSampleBias_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBias_TextureCube_bias.name = "bias"_c;
    TextureSampleBias_TextureCube_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_TextureCube.name = "textureSampleBias"_c;
    TextureSampleBias_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_TextureCube.parameters = TextureSampleBias_TextureCube_args;
    Symbol::Resolved(&TextureSampleBias_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureSampleBias_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCube_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_TextureCube_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBias_TextureCube_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with TextureCube, Float32x3, Float32
    SampledTextureSampleBias_TextureCube_texture.name = "texture"_c;
    SampledTextureSampleBias_TextureCube_texture.type = Type::FullType{ TextureCubeType.name };
    SampledTextureSampleBias_TextureCube_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBias_TextureCube_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_TextureCube_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBias_TextureCube_bias.name = "bias"_c;
    SampledTextureSampleBias_TextureCube_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_TextureCube.name = "textureSampleBias"_c;
    SampledTextureSampleBias_TextureCube.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_TextureCube.parameters = SampledTextureSampleBias_TextureCube_args;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCube)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture1DArray, Sampler, Float32x2, Float32
    TextureSampleBias_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBias_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBias_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBias_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBias_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBias_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture1DArray.name = "textureSampleBias"_c;
    TextureSampleBias_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture1DArray.parameters = TextureSampleBias_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture1DArray, Float32x2, Float32
    SampledTextureSampleBias_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleBias_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBias_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBias_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture1DArray.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture1DArray.parameters = SampledTextureSampleBias_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture2DArray, Sampler, Float32x3, Float32
    TextureSampleBias_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBias_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBias_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBias_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBias_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBias_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBias_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_Texture2DArray.name = "textureSampleBias"_c;
    TextureSampleBias_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_Texture2DArray.parameters = TextureSampleBias_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with Texture2DArray, Float32x3, Float32
    SampledTextureSampleBias_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBias_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleBias_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBias_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBias_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBias_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_Texture2DArray.name = "textureSampleBias"_c;
    SampledTextureSampleBias_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_Texture2DArray.parameters = SampledTextureSampleBias_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with TextureCubeArray, Sampler, Float32x4, Float32
    TextureSampleBias_TextureCubeArray_texture.name = "texture"_c;
    TextureSampleBias_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureSampleBias_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_TextureCubeArray_sampler.name = "sampler"_c;
    TextureSampleBias_TextureCubeArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBias_TextureCubeArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBias_TextureCubeArray_coordinate.name = "coordinate"_c;
    TextureSampleBias_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    TextureSampleBias_TextureCubeArray_bias.name = "bias"_c;
    TextureSampleBias_TextureCubeArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBias_TextureCubeArray.name = "textureSampleBias"_c;
    TextureSampleBias_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBias_TextureCubeArray.parameters = TextureSampleBias_TextureCubeArray_args;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBias_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBias with TextureCubeArray, Float32x4, Float32
    SampledTextureSampleBias_TextureCubeArray_texture.name = "texture"_c;
    SampledTextureSampleBias_TextureCubeArray_texture.type = Type::FullType{ TextureCubeArrayType.name };
    SampledTextureSampleBias_TextureCubeArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBias_TextureCubeArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBias_TextureCubeArray_coordinate.type = Type::FullType{ Float32x4Type.name };
    SampledTextureSampleBias_TextureCubeArray_bias.name = "bias"_c;
    SampledTextureSampleBias_TextureCubeArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBias_TextureCubeArray.name = "textureSampleBias"_c;
    SampledTextureSampleBias_TextureCubeArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBias_TextureCubeArray.parameters = SampledTextureSampleBias_TextureCubeArray_args;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_coordinate)->typeSymbol = &Float32x4Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBias_TextureCubeArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleBiasOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture1D.name = "textureSampleBiasOffset"_c;
    TextureSampleBiasOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture1D.parameters = TextureSampleBiasOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture1D, Float32, Float32, Float32
    SampledTextureSampleBiasOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleBiasOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture1D.name = "textureSampleBiasOffset"_c;
    SampledTextureSampleBiasOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture1D.parameters = SampledTextureSampleBiasOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture2D, Sampler, Float32x2, Float32, Float32x2
    TextureSampleBiasOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasOffset_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasOffset_Texture2D.name = "textureSampleBiasOffset"_c;
    TextureSampleBiasOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture2D.parameters = TextureSampleBiasOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture2D, Float32x2, Float32, Float32x2
    SampledTextureSampleBiasOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleBiasOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasOffset_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasOffset_Texture2D.name = "textureSampleBiasOffset"_c;
    SampledTextureSampleBiasOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture2D.parameters = SampledTextureSampleBiasOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture3D, Sampler, Float32x3, Float32, Float32x3
    TextureSampleBiasOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasOffset_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasOffset_Texture3D.name = "textureSampleBiasOffset"_c;
    TextureSampleBiasOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture3D.parameters = TextureSampleBiasOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture3D, Float32x3, Float32, Float32x3
    SampledTextureSampleBiasOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleBiasOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasOffset_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasOffset_Texture3D.name = "textureSampleBiasOffset"_c;
    SampledTextureSampleBiasOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture3D.parameters = SampledTextureSampleBiasOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32x2
    TextureSampleBiasOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBiasOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasOffset_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasOffset_Texture1DArray.name = "textureSampleBiasOffset"_c;
    TextureSampleBiasOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture1DArray.parameters = TextureSampleBiasOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture1DArray, Float32x2, Float32, Float32x2
    SampledTextureSampleBiasOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleBiasOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasOffset_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasOffset_Texture1DArray.name = "textureSampleBiasOffset"_c;
    SampledTextureSampleBiasOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture1DArray.parameters = SampledTextureSampleBiasOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32x3
    TextureSampleBiasOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBiasOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBiasOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBiasOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasOffset_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasOffset_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBiasOffset_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleBiasOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasOffset_Texture2DArray.name = "textureSampleBiasOffset"_c;
    TextureSampleBiasOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasOffset_Texture2DArray.parameters = TextureSampleBiasOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasOffset with Texture2DArray, Float32x3, Float32, Float32x3
    SampledTextureSampleBiasOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleBiasOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasOffset_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasOffset_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleBiasOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasOffset_Texture2DArray.name = "textureSampleBiasOffset"_c;
    SampledTextureSampleBiasOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasOffset_Texture2DArray.parameters = SampledTextureSampleBiasOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleBiasProj_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProj_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasProj_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProj_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProj_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasProj_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture1D_proj.name = "proj"_c;
    TextureSampleBiasProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture1D.name = "textureSampleBiasProj"_c;
    TextureSampleBiasProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProj_Texture1D.parameters = TextureSampleBiasProj_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with Texture1D, Float32, Float32, Float32
    SampledTextureSampleBiasProj_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasProj_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleBiasProj_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasProj_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProj_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasProj_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleBiasProj_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture1D.name = "textureSampleBiasProj"_c;
    SampledTextureSampleBiasProj_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProj_Texture1D.parameters = SampledTextureSampleBiasProj_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleBiasProj_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProj_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasProj_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProj_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProj_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProj_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasProj_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture2D_proj.name = "proj"_c;
    TextureSampleBiasProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture2D.name = "textureSampleBiasProj"_c;
    TextureSampleBiasProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProj_Texture2D.parameters = TextureSampleBiasProj_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with Texture2D, Float32x2, Float32, Float32
    SampledTextureSampleBiasProj_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasProj_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleBiasProj_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasProj_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProj_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProj_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasProj_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleBiasProj_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture2D.name = "textureSampleBiasProj"_c;
    SampledTextureSampleBiasProj_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProj_Texture2D.parameters = SampledTextureSampleBiasProj_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleBiasProj_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProj_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasProj_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProj_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProj_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProj_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasProj_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture3D_proj.name = "proj"_c;
    TextureSampleBiasProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProj_Texture3D.name = "textureSampleBiasProj"_c;
    TextureSampleBiasProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProj_Texture3D.parameters = TextureSampleBiasProj_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProj with Texture3D, Float32x3, Float32, Float32
    SampledTextureSampleBiasProj_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasProj_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleBiasProj_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasProj_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProj_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProj_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasProj_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleBiasProj_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProj_Texture3D.name = "textureSampleBiasProj"_c;
    SampledTextureSampleBiasProj_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProj_Texture3D.parameters = SampledTextureSampleBiasProj_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProj_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleBiasProjOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasProjOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasProjOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasProjOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleBiasProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleBiasProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture1D.name = "textureSampleBiasProjOffset"_c;
    TextureSampleBiasProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjOffset_Texture1D.parameters = TextureSampleBiasProjOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with Texture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleBiasProjOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleBiasProjOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasProjOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D.name = "textureSampleBiasProjOffset"_c;
    SampledTextureSampleBiasProjOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjOffset_Texture1D.parameters = SampledTextureSampleBiasProjOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleBiasProjOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasProjOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasProjOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjOffset_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasProjOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleBiasProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleBiasProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjOffset_Texture2D.name = "textureSampleBiasProjOffset"_c;
    TextureSampleBiasProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjOffset_Texture2D.parameters = TextureSampleBiasProjOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with Texture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleBiasProjOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleBiasProjOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasProjOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D.name = "textureSampleBiasProjOffset"_c;
    SampledTextureSampleBiasProjOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjOffset_Texture2D.parameters = SampledTextureSampleBiasProjOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleBiasProjOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasProjOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasProjOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjOffset_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasProjOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleBiasProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleBiasProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjOffset_Texture3D.name = "textureSampleBiasProjOffset"_c;
    TextureSampleBiasProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjOffset_Texture3D.parameters = TextureSampleBiasProjOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjOffset with Texture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleBiasProjOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleBiasProjOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasProjOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D.name = "textureSampleBiasProjOffset"_c;
    SampledTextureSampleBiasProjOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjOffset_Texture3D.parameters = SampledTextureSampleBiasProjOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompare with Texture1D, Sampler, Float32, Float32, Float32
    TextureSampleBiasCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1D.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasCompare_Texture1D.parameters = TextureSampleBiasCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompare with Texture1D, Float32, Float32, Float32
    SampledTextureSampleBiasCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleBiasCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1D.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasCompare_Texture1D.parameters = SampledTextureSampleBiasCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompare with Texture2D, Sampler, Float32x2, Float32, Float32
    TextureSampleBiasCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompare_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2D.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasCompare_Texture2D.parameters = TextureSampleBiasCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompare with Texture2D, Float32x2, Float32, Float32
    SampledTextureSampleBiasCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleBiasCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompare_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2D.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasCompare_Texture2D.parameters = SampledTextureSampleBiasCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompare with Texture3D, Sampler, Float32x3, Float32, Float32
    TextureSampleBiasCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompare_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture3D.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasCompare_Texture3D.parameters = TextureSampleBiasCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompare with Texture3D, Float32x3, Float32, Float32
    SampledTextureSampleBiasCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleBiasCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompare_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture3D.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasCompare_Texture3D.parameters = SampledTextureSampleBiasCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompare with Texture1DArray, Sampler, Float32x2, Float32, Float32
    TextureSampleBiasCompare_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBiasCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompare_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1DArray_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture1DArray.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasCompare_Texture1DArray.parameters = TextureSampleBiasCompare_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompare with Texture1DArray, Float32x2, Float32, Float32
    SampledTextureSampleBiasCompare_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleBiasCompare_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasCompare_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasCompare_Texture1DArray.parameters = SampledTextureSampleBiasCompare_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompare with Texture2DArray, Sampler, Float32x3, Float32, Float32
    TextureSampleBiasCompare_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBiasCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBiasCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBiasCompare_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompare_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompare_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBiasCompare_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2DArray_compare.name = "compare"_c;
    TextureSampleBiasCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompare_Texture2DArray.name = "textureSampleBiasCompare"_c;
    TextureSampleBiasCompare_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasCompare_Texture2DArray.parameters = TextureSampleBiasCompare_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompare with Texture2DArray, Float32x3, Float32, Float32
    SampledTextureSampleBiasCompare_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleBiasCompare_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasCompare_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleBiasCompare_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray.name = "textureSampleBiasCompare"_c;
    SampledTextureSampleBiasCompare_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasCompare_Texture2DArray.parameters = SampledTextureSampleBiasCompare_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompare_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleBiasCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1D.name = "textureSampleBiasCompareOffset"_c;
    TextureSampleBiasCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasCompareOffset_Texture1D.parameters = TextureSampleBiasCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompareOffset with Texture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleBiasCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleBiasCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D.name = "textureSampleBiasCompareOffset"_c;
    SampledTextureSampleBiasCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1D.parameters = SampledTextureSampleBiasCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleBiasCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompareOffset_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompareOffset_Texture2D.name = "textureSampleBiasCompareOffset"_c;
    TextureSampleBiasCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasCompareOffset_Texture2D.parameters = TextureSampleBiasCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompareOffset with Texture2D, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleBiasCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleBiasCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D.name = "textureSampleBiasCompareOffset"_c;
    SampledTextureSampleBiasCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2D.parameters = SampledTextureSampleBiasCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleBiasCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompareOffset_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompareOffset_Texture3D.name = "textureSampleBiasCompareOffset"_c;
    TextureSampleBiasCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasCompareOffset_Texture3D.parameters = TextureSampleBiasCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompareOffset with Texture3D, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleBiasCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleBiasCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D.name = "textureSampleBiasCompareOffset"_c;
    SampledTextureSampleBiasCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasCompareOffset_Texture3D.parameters = SampledTextureSampleBiasCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompareOffset with Texture1DArray, Sampler, Float32x2, Float32, Float32, Float32x2
    TextureSampleBiasCompareOffset_Texture1DArray_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureSampleBiasCompareOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompareOffset_Texture1DArray_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture1DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture1DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompareOffset_Texture1DArray_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1DArray_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture1DArray_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasCompareOffset_Texture1DArray.name = "textureSampleBiasCompareOffset"_c;
    TextureSampleBiasCompareOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasCompareOffset_Texture1DArray.parameters = TextureSampleBiasCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompareOffset with Texture1DArray, Float32x2, Float32, Float32, Float32x2
    SampledTextureSampleBiasCompareOffset_Texture1DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray_texture.type = Type::FullType{ Texture1DArrayType.name };
    SampledTextureSampleBiasCompareOffset_Texture1DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasCompareOffset_Texture1DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1DArray_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1DArray_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1DArray.name = "textureSampleBiasCompareOffset"_c;
    SampledTextureSampleBiasCompareOffset_Texture1DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasCompareOffset_Texture1DArray.parameters = SampledTextureSampleBiasCompareOffset_Texture1DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture1DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompareOffset with Texture2DArray, Sampler, Float32x3, Float32, Float32, Float32x3
    TextureSampleBiasCompareOffset_Texture2DArray_texture.name = "texture"_c;
    TextureSampleBiasCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureSampleBiasCompareOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompareOffset_Texture2DArray_sampler.name = "sampler"_c;
    TextureSampleBiasCompareOffset_Texture2DArray_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasCompareOffset_Texture2DArray_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    TextureSampleBiasCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompareOffset_Texture2DArray_bias.name = "bias"_c;
    TextureSampleBiasCompareOffset_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2DArray_compare.name = "compare"_c;
    TextureSampleBiasCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasCompareOffset_Texture2DArray_offset.name = "offset"_c;
    TextureSampleBiasCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasCompareOffset_Texture2DArray.name = "textureSampleBiasCompareOffset"_c;
    TextureSampleBiasCompareOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasCompareOffset_Texture2DArray.parameters = TextureSampleBiasCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasCompareOffset with Texture2DArray, Float32x3, Float32, Float32, Float32x3
    SampledTextureSampleBiasCompareOffset_Texture2DArray_texture.name = "texture"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray_texture.type = Type::FullType{ Texture2DArrayType.name };
    SampledTextureSampleBiasCompareOffset_Texture2DArray_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasCompareOffset_Texture2DArray_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2DArray_bias.name = "bias"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2DArray_compare.name = "compare"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2DArray_offset.name = "offset"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2DArray.name = "textureSampleBiasCompareOffset"_c;
    SampledTextureSampleBiasCompareOffset_Texture2DArray.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasCompareOffset_Texture2DArray.parameters = SampledTextureSampleBiasCompareOffset_Texture2DArray_args;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasCompareOffset_Texture2DArray)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjCompare with Texture1D, Sampler, Float32, Float32, Float32, Float32
    TextureSampleBiasProjCompare_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompare_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompare_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompare_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasProjCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D_proj.name = "proj"_c;
    TextureSampleBiasProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D_compare.name = "compare"_c;
    TextureSampleBiasProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture1D.name = "textureSampleBiasProjCompare"_c;
    TextureSampleBiasProjCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjCompare_Texture1D.parameters = TextureSampleBiasProjCompare_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjCompare with Texture1D, Float32, Float32, Float32, Float32
    SampledTextureSampleBiasProjCompare_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleBiasProjCompare_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasProjCompare_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompare_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D.name = "textureSampleBiasProjCompare"_c;
    SampledTextureSampleBiasProjCompare_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjCompare_Texture1D.parameters = SampledTextureSampleBiasProjCompare_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjCompare with Texture2D, Sampler, Float32x2, Float32, Float32, Float32
    TextureSampleBiasProjCompare_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompare_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompare_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompare_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjCompare_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasProjCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture2D_proj.name = "proj"_c;
    TextureSampleBiasProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture2D_compare.name = "compare"_c;
    TextureSampleBiasProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture2D.name = "textureSampleBiasProjCompare"_c;
    TextureSampleBiasProjCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjCompare_Texture2D.parameters = TextureSampleBiasProjCompare_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjCompare with Texture2D, Float32x2, Float32, Float32, Float32
    SampledTextureSampleBiasProjCompare_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleBiasProjCompare_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasProjCompare_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompare_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D.name = "textureSampleBiasProjCompare"_c;
    SampledTextureSampleBiasProjCompare_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjCompare_Texture2D.parameters = SampledTextureSampleBiasProjCompare_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjCompare with Texture3D, Sampler, Float32x3, Float32, Float32, Float32
    TextureSampleBiasProjCompare_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompare_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompare_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompare_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjCompare_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasProjCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture3D_proj.name = "proj"_c;
    TextureSampleBiasProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture3D_compare.name = "compare"_c;
    TextureSampleBiasProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompare_Texture3D.name = "textureSampleBiasProjCompare"_c;
    TextureSampleBiasProjCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjCompare_Texture3D.parameters = TextureSampleBiasProjCompare_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjCompare with Texture3D, Float32x3, Float32, Float32, Float32
    SampledTextureSampleBiasProjCompare_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleBiasProjCompare_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasProjCompare_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompare_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D.name = "textureSampleBiasProjCompare"_c;
    SampledTextureSampleBiasProjCompare_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjCompare_Texture3D.parameters = SampledTextureSampleBiasProjCompare_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompare_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjCompareOffset with Texture1D, Sampler, Float32, Float32, Float32, Float32, Float32
    TextureSampleBiasProjCompareOffset_Texture1D_texture.name = "texture"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    TextureSampleBiasProjCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompareOffset_Texture1D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompareOffset_Texture1D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture1D_bias.name = "bias"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture1D_proj.name = "proj"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture1D_compare.name = "compare"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture1D_offset.name = "offset"_c;
    TextureSampleBiasProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture1D.name = "textureSampleBiasProjCompareOffset"_c;
    TextureSampleBiasProjCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjCompareOffset_Texture1D.parameters = TextureSampleBiasProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjCompareOffset with Texture1D, Float32, Float32, Float32, Float32, Float32
    SampledTextureSampleBiasProjCompareOffset_Texture1D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_texture.type = Type::FullType{ Texture1DType.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasProjCompareOffset_Texture1D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_coordinate.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D_offset.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D.name = "textureSampleBiasProjCompareOffset"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture1D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture1D.parameters = SampledTextureSampleBiasProjCompareOffset_Texture1D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_coordinate)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D_offset)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture1D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjCompareOffset with Texture2D, Sampler, Float32x2, Float32, Float32, Float32, Float32x2
    TextureSampleBiasProjCompareOffset_Texture2D_texture.name = "texture"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    TextureSampleBiasProjCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompareOffset_Texture2D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompareOffset_Texture2D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjCompareOffset_Texture2D_bias.name = "bias"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture2D_proj.name = "proj"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture2D_compare.name = "compare"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture2D_offset.name = "offset"_c;
    TextureSampleBiasProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    TextureSampleBiasProjCompareOffset_Texture2D.name = "textureSampleBiasProjCompareOffset"_c;
    TextureSampleBiasProjCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjCompareOffset_Texture2D.parameters = TextureSampleBiasProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjCompareOffset with Texture2D, Float32x2, Float32, Float32, Float32, Float32x2
    SampledTextureSampleBiasProjCompareOffset_Texture2D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_texture.type = Type::FullType{ Texture2DType.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasProjCompareOffset_Texture2D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_coordinate.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D_offset.type = Type::FullType{ Float32x2Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D.name = "textureSampleBiasProjCompareOffset"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture2D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture2D.parameters = SampledTextureSampleBiasProjCompareOffset_Texture2D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_coordinate)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D_offset)->typeSymbol = &Float32x2Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture2D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjCompareOffset with Texture3D, Sampler, Float32x3, Float32, Float32, Float32, Float32x3
    TextureSampleBiasProjCompareOffset_Texture3D_texture.name = "texture"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    TextureSampleBiasProjCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompareOffset_Texture3D_sampler.name = "sampler"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_sampler.type = Type::FullType{ SamplerType.name };
    TextureSampleBiasProjCompareOffset_Texture3D_sampler.type.AddModifier(Type::FullType::Modifier::Pointer);
    TextureSampleBiasProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjCompareOffset_Texture3D_bias.name = "bias"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture3D_proj.name = "proj"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture3D_compare.name = "compare"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    TextureSampleBiasProjCompareOffset_Texture3D_offset.name = "offset"_c;
    TextureSampleBiasProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    TextureSampleBiasProjCompareOffset_Texture3D.name = "textureSampleBiasProjCompareOffset"_c;
    TextureSampleBiasProjCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    TextureSampleBiasProjCompareOffset_Texture3D.parameters = TextureSampleBiasProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_sampler)->typeSymbol = &SamplerType;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_sampler)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&TextureSampleBiasProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

    /// textureSampleBiasProjCompareOffset with Texture3D, Float32x3, Float32, Float32, Float32, Float32x3
    SampledTextureSampleBiasProjCompareOffset_Texture3D_texture.name = "texture"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_texture.type = Type::FullType{ Texture3DType.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D_texture.type.AddModifier(Type::FullType::Modifier::Pointer);
    SampledTextureSampleBiasProjCompareOffset_Texture3D_coordinate.name = "coordinate"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_coordinate.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D_bias.name = "bias"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_bias.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D_proj.name = "proj"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_proj.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D_compare.name = "compare"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_compare.type = Type::FullType{ Float32Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D_offset.name = "offset"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D_offset.type = Type::FullType{ Float32x3Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D.name = "textureSampleBiasProjCompareOffset"_c;
    SampledTextureSampleBiasProjCompareOffset_Texture3D.returnType = Type::FullType { Float32x4Type.name };
    SampledTextureSampleBiasProjCompareOffset_Texture3D.parameters = SampledTextureSampleBiasProjCompareOffset_Texture3D_args;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_coordinate)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_bias)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_proj)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_compare)->typeSymbol = &Float32Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D_offset)->typeSymbol = &Float32x3Type;
    Symbol::Resolved(&SampledTextureSampleBiasProjCompareOffset_Texture3D)->returnTypeSymbol = &Float32x4Type;

}
struct StaticIntrinsicTimerStop
{
    StaticIntrinsicTimerStop()
    {
        StaticIntrinsicTimer.Stop();
        StaticIntrinsicTimer.Print("Static Intrinsic Alloc");
    }
};
StaticIntrinsicTimerStop StaticIntrinsicTimerStopInstance;

} // namespace GPULang
