//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// textureAtomicMax with Texture1D, Int32, UInt16
Variable TextureAtomicMax_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_UInt16_coordinate;
Variable TextureAtomicMax_Texture1D_UInt16_value;
Function TextureAtomicMax_Texture1D_UInt16;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt16_args = { &TextureAtomicMax_Texture1D_UInt16_texture, &TextureAtomicMax_Texture1D_UInt16_coordinate, &TextureAtomicMax_Texture1D_UInt16_value };

/// textureAtomicMax with Texture1D, Int32, Int16
Variable TextureAtomicMax_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_Int16_coordinate;
Variable TextureAtomicMax_Texture1D_Int16_value;
Function TextureAtomicMax_Texture1D_Int16;
inline constexpr std::array TextureAtomicMax_Texture1D_Int16_args = { &TextureAtomicMax_Texture1D_Int16_texture, &TextureAtomicMax_Texture1D_Int16_coordinate, &TextureAtomicMax_Texture1D_Int16_value };

/// textureAtomicMax with Texture2D, Int32x2, UInt32
Variable TextureAtomicMax_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_UInt32_coordinate;
Variable TextureAtomicMax_Texture2D_UInt32_value;
Function TextureAtomicMax_Texture2D_UInt32;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt32_args = { &TextureAtomicMax_Texture2D_UInt32_texture, &TextureAtomicMax_Texture2D_UInt32_coordinate, &TextureAtomicMax_Texture2D_UInt32_value };

/// textureAtomicMax with Texture2D, Int32x2, Int32
Variable TextureAtomicMax_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_Int32_coordinate;
Variable TextureAtomicMax_Texture2D_Int32_value;
Function TextureAtomicMax_Texture2D_Int32;
inline constexpr std::array TextureAtomicMax_Texture2D_Int32_args = { &TextureAtomicMax_Texture2D_Int32_texture, &TextureAtomicMax_Texture2D_Int32_coordinate, &TextureAtomicMax_Texture2D_Int32_value };

/// textureAtomicMax with Texture2D, Int32x2, UInt16
Variable TextureAtomicMax_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_UInt16_coordinate;
Variable TextureAtomicMax_Texture2D_UInt16_value;
Function TextureAtomicMax_Texture2D_UInt16;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt16_args = { &TextureAtomicMax_Texture2D_UInt16_texture, &TextureAtomicMax_Texture2D_UInt16_coordinate, &TextureAtomicMax_Texture2D_UInt16_value };

/// textureAtomicMax with Texture2D, Int32x2, Int16
Variable TextureAtomicMax_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_Int16_coordinate;
Variable TextureAtomicMax_Texture2D_Int16_value;
Function TextureAtomicMax_Texture2D_Int16;
inline constexpr std::array TextureAtomicMax_Texture2D_Int16_args = { &TextureAtomicMax_Texture2D_Int16_texture, &TextureAtomicMax_Texture2D_Int16_coordinate, &TextureAtomicMax_Texture2D_Int16_value };

/// textureAtomicMax with Texture3D, Int32x3, UInt32
Variable TextureAtomicMax_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_UInt32_coordinate;
Variable TextureAtomicMax_Texture3D_UInt32_value;
Function TextureAtomicMax_Texture3D_UInt32;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt32_args = { &TextureAtomicMax_Texture3D_UInt32_texture, &TextureAtomicMax_Texture3D_UInt32_coordinate, &TextureAtomicMax_Texture3D_UInt32_value };

/// textureAtomicMax with Texture3D, Int32x3, Int32
Variable TextureAtomicMax_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_Int32_coordinate;
Variable TextureAtomicMax_Texture3D_Int32_value;
Function TextureAtomicMax_Texture3D_Int32;
inline constexpr std::array TextureAtomicMax_Texture3D_Int32_args = { &TextureAtomicMax_Texture3D_Int32_texture, &TextureAtomicMax_Texture3D_Int32_coordinate, &TextureAtomicMax_Texture3D_Int32_value };

/// textureAtomicMax with Texture3D, Int32x3, UInt16
Variable TextureAtomicMax_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_UInt16_coordinate;
Variable TextureAtomicMax_Texture3D_UInt16_value;
Function TextureAtomicMax_Texture3D_UInt16;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt16_args = { &TextureAtomicMax_Texture3D_UInt16_texture, &TextureAtomicMax_Texture3D_UInt16_coordinate, &TextureAtomicMax_Texture3D_UInt16_value };

/// textureAtomicMax with Texture3D, Int32x3, Int16
Variable TextureAtomicMax_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_Int16_coordinate;
Variable TextureAtomicMax_Texture3D_Int16_value;
Function TextureAtomicMax_Texture3D_Int16;
inline constexpr std::array TextureAtomicMax_Texture3D_Int16_args = { &TextureAtomicMax_Texture3D_Int16_texture, &TextureAtomicMax_Texture3D_Int16_coordinate, &TextureAtomicMax_Texture3D_Int16_value };

/// textureAtomicMax with TextureCube, Int32x3, UInt32
Variable TextureAtomicMax_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_UInt32_coordinate;
Variable TextureAtomicMax_TextureCube_UInt32_value;
Function TextureAtomicMax_TextureCube_UInt32;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt32_args = { &TextureAtomicMax_TextureCube_UInt32_texture, &TextureAtomicMax_TextureCube_UInt32_coordinate, &TextureAtomicMax_TextureCube_UInt32_value };

/// textureAtomicMax with TextureCube, Int32x3, Int32
Variable TextureAtomicMax_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_Int32_coordinate;
Variable TextureAtomicMax_TextureCube_Int32_value;
Function TextureAtomicMax_TextureCube_Int32;
inline constexpr std::array TextureAtomicMax_TextureCube_Int32_args = { &TextureAtomicMax_TextureCube_Int32_texture, &TextureAtomicMax_TextureCube_Int32_coordinate, &TextureAtomicMax_TextureCube_Int32_value };

/// textureAtomicMax with TextureCube, Int32x3, UInt16
Variable TextureAtomicMax_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_UInt16_coordinate;
Variable TextureAtomicMax_TextureCube_UInt16_value;
Function TextureAtomicMax_TextureCube_UInt16;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt16_args = { &TextureAtomicMax_TextureCube_UInt16_texture, &TextureAtomicMax_TextureCube_UInt16_coordinate, &TextureAtomicMax_TextureCube_UInt16_value };

/// textureAtomicMax with TextureCube, Int32x3, Int16
Variable TextureAtomicMax_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_Int16_coordinate;
Variable TextureAtomicMax_TextureCube_Int16_value;
Function TextureAtomicMax_TextureCube_Int16;
inline constexpr std::array TextureAtomicMax_TextureCube_Int16_args = { &TextureAtomicMax_TextureCube_Int16_texture, &TextureAtomicMax_TextureCube_Int16_coordinate, &TextureAtomicMax_TextureCube_Int16_value };

/// textureAtomicMax with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicMax_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicMax_Texture1DArray_UInt32_value;
Function TextureAtomicMax_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt32_args = { &TextureAtomicMax_Texture1DArray_UInt32_texture, &TextureAtomicMax_Texture1DArray_UInt32_coordinate, &TextureAtomicMax_Texture1DArray_UInt32_value };

/// textureAtomicMax with Texture1DArray, Int32x2, Int32
Variable TextureAtomicMax_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_Int32_coordinate;
Variable TextureAtomicMax_Texture1DArray_Int32_value;
Function TextureAtomicMax_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int32_args = { &TextureAtomicMax_Texture1DArray_Int32_texture, &TextureAtomicMax_Texture1DArray_Int32_coordinate, &TextureAtomicMax_Texture1DArray_Int32_value };

/// textureAtomicMax with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicMax_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicMax_Texture1DArray_UInt16_value;
Function TextureAtomicMax_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt16_args = { &TextureAtomicMax_Texture1DArray_UInt16_texture, &TextureAtomicMax_Texture1DArray_UInt16_coordinate, &TextureAtomicMax_Texture1DArray_UInt16_value };

/// textureAtomicMax with Texture1DArray, Int32x2, Int16
Variable TextureAtomicMax_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_Int16_coordinate;
Variable TextureAtomicMax_Texture1DArray_Int16_value;
Function TextureAtomicMax_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int16_args = { &TextureAtomicMax_Texture1DArray_Int16_texture, &TextureAtomicMax_Texture1DArray_Int16_coordinate, &TextureAtomicMax_Texture1DArray_Int16_value };

/// textureAtomicMax with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicMax_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicMax_Texture2DArray_UInt32_value;
Function TextureAtomicMax_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt32_args = { &TextureAtomicMax_Texture2DArray_UInt32_texture, &TextureAtomicMax_Texture2DArray_UInt32_coordinate, &TextureAtomicMax_Texture2DArray_UInt32_value };

/// textureAtomicMax with Texture2DArray, Int32x3, Int32
Variable TextureAtomicMax_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_Int32_coordinate;
Variable TextureAtomicMax_Texture2DArray_Int32_value;
Function TextureAtomicMax_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int32_args = { &TextureAtomicMax_Texture2DArray_Int32_texture, &TextureAtomicMax_Texture2DArray_Int32_coordinate, &TextureAtomicMax_Texture2DArray_Int32_value };

/// textureAtomicMax with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicMax_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicMax_Texture2DArray_UInt16_value;
Function TextureAtomicMax_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt16_args = { &TextureAtomicMax_Texture2DArray_UInt16_texture, &TextureAtomicMax_Texture2DArray_UInt16_coordinate, &TextureAtomicMax_Texture2DArray_UInt16_value };

/// textureAtomicMax with Texture2DArray, Int32x3, Int16
Variable TextureAtomicMax_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_Int16_coordinate;
Variable TextureAtomicMax_Texture2DArray_Int16_value;
Function TextureAtomicMax_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int16_args = { &TextureAtomicMax_Texture2DArray_Int16_texture, &TextureAtomicMax_Texture2DArray_Int16_coordinate, &TextureAtomicMax_Texture2DArray_Int16_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicMax_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicMax_TextureCubeArray_UInt32_value;
Function TextureAtomicMax_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt32_args = { &TextureAtomicMax_TextureCubeArray_UInt32_texture, &TextureAtomicMax_TextureCubeArray_UInt32_coordinate, &TextureAtomicMax_TextureCubeArray_UInt32_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicMax_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicMax_TextureCubeArray_Int32_value;
Function TextureAtomicMax_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int32_args = { &TextureAtomicMax_TextureCubeArray_Int32_texture, &TextureAtomicMax_TextureCubeArray_Int32_coordinate, &TextureAtomicMax_TextureCubeArray_Int32_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicMax_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicMax_TextureCubeArray_UInt16_value;
Function TextureAtomicMax_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt16_args = { &TextureAtomicMax_TextureCubeArray_UInt16_texture, &TextureAtomicMax_TextureCubeArray_UInt16_coordinate, &TextureAtomicMax_TextureCubeArray_UInt16_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicMax_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicMax_TextureCubeArray_Int16_value;
Function TextureAtomicMax_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int16_args = { &TextureAtomicMax_TextureCubeArray_Int16_texture, &TextureAtomicMax_TextureCubeArray_Int16_coordinate, &TextureAtomicMax_TextureCubeArray_Int16_value };

/// textureAtomicAnd with Texture1D, Int32, UInt32
Variable TextureAtomicAnd_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_UInt32_coordinate;
Variable TextureAtomicAnd_Texture1D_UInt32_value;
Function TextureAtomicAnd_Texture1D_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt32_args = { &TextureAtomicAnd_Texture1D_UInt32_texture, &TextureAtomicAnd_Texture1D_UInt32_coordinate, &TextureAtomicAnd_Texture1D_UInt32_value };

/// textureAtomicAnd with Texture1D, Int32, Int32
Variable TextureAtomicAnd_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_Int32_coordinate;
Variable TextureAtomicAnd_Texture1D_Int32_value;
Function TextureAtomicAnd_Texture1D_Int32;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int32_args = { &TextureAtomicAnd_Texture1D_Int32_texture, &TextureAtomicAnd_Texture1D_Int32_coordinate, &TextureAtomicAnd_Texture1D_Int32_value };

/// textureAtomicAnd with Texture1D, Int32, UInt16
Variable TextureAtomicAnd_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_UInt16_coordinate;
Variable TextureAtomicAnd_Texture1D_UInt16_value;
Function TextureAtomicAnd_Texture1D_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt16_args = { &TextureAtomicAnd_Texture1D_UInt16_texture, &TextureAtomicAnd_Texture1D_UInt16_coordinate, &TextureAtomicAnd_Texture1D_UInt16_value };

/// textureAtomicAnd with Texture1D, Int32, Int16
Variable TextureAtomicAnd_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_Int16_coordinate;
Variable TextureAtomicAnd_Texture1D_Int16_value;
Function TextureAtomicAnd_Texture1D_Int16;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int16_args = { &TextureAtomicAnd_Texture1D_Int16_texture, &TextureAtomicAnd_Texture1D_Int16_coordinate, &TextureAtomicAnd_Texture1D_Int16_value };

/// textureAtomicAnd with Texture2D, Int32x2, UInt32
Variable TextureAtomicAnd_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_UInt32_coordinate;
Variable TextureAtomicAnd_Texture2D_UInt32_value;
Function TextureAtomicAnd_Texture2D_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt32_args = { &TextureAtomicAnd_Texture2D_UInt32_texture, &TextureAtomicAnd_Texture2D_UInt32_coordinate, &TextureAtomicAnd_Texture2D_UInt32_value };

/// textureAtomicAnd with Texture2D, Int32x2, Int32
Variable TextureAtomicAnd_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_Int32_coordinate;
Variable TextureAtomicAnd_Texture2D_Int32_value;
Function TextureAtomicAnd_Texture2D_Int32;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int32_args = { &TextureAtomicAnd_Texture2D_Int32_texture, &TextureAtomicAnd_Texture2D_Int32_coordinate, &TextureAtomicAnd_Texture2D_Int32_value };

/// textureAtomicAnd with Texture2D, Int32x2, UInt16
Variable TextureAtomicAnd_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_UInt16_coordinate;
Variable TextureAtomicAnd_Texture2D_UInt16_value;
Function TextureAtomicAnd_Texture2D_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt16_args = { &TextureAtomicAnd_Texture2D_UInt16_texture, &TextureAtomicAnd_Texture2D_UInt16_coordinate, &TextureAtomicAnd_Texture2D_UInt16_value };

/// textureAtomicAnd with Texture2D, Int32x2, Int16
Variable TextureAtomicAnd_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_Int16_coordinate;
Variable TextureAtomicAnd_Texture2D_Int16_value;
Function TextureAtomicAnd_Texture2D_Int16;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int16_args = { &TextureAtomicAnd_Texture2D_Int16_texture, &TextureAtomicAnd_Texture2D_Int16_coordinate, &TextureAtomicAnd_Texture2D_Int16_value };

/// textureAtomicAnd with Texture3D, Int32x3, UInt32
Variable TextureAtomicAnd_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_UInt32_coordinate;
Variable TextureAtomicAnd_Texture3D_UInt32_value;
Function TextureAtomicAnd_Texture3D_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt32_args = { &TextureAtomicAnd_Texture3D_UInt32_texture, &TextureAtomicAnd_Texture3D_UInt32_coordinate, &TextureAtomicAnd_Texture3D_UInt32_value };

/// textureAtomicAnd with Texture3D, Int32x3, Int32
Variable TextureAtomicAnd_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_Int32_coordinate;
Variable TextureAtomicAnd_Texture3D_Int32_value;
Function TextureAtomicAnd_Texture3D_Int32;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int32_args = { &TextureAtomicAnd_Texture3D_Int32_texture, &TextureAtomicAnd_Texture3D_Int32_coordinate, &TextureAtomicAnd_Texture3D_Int32_value };

/// textureAtomicAnd with Texture3D, Int32x3, UInt16
Variable TextureAtomicAnd_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_UInt16_coordinate;
Variable TextureAtomicAnd_Texture3D_UInt16_value;
Function TextureAtomicAnd_Texture3D_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt16_args = { &TextureAtomicAnd_Texture3D_UInt16_texture, &TextureAtomicAnd_Texture3D_UInt16_coordinate, &TextureAtomicAnd_Texture3D_UInt16_value };

/// textureAtomicAnd with Texture3D, Int32x3, Int16
Variable TextureAtomicAnd_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_Int16_coordinate;
Variable TextureAtomicAnd_Texture3D_Int16_value;
Function TextureAtomicAnd_Texture3D_Int16;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int16_args = { &TextureAtomicAnd_Texture3D_Int16_texture, &TextureAtomicAnd_Texture3D_Int16_coordinate, &TextureAtomicAnd_Texture3D_Int16_value };

/// textureAtomicAnd with TextureCube, Int32x3, UInt32
Variable TextureAtomicAnd_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_UInt32_coordinate;
Variable TextureAtomicAnd_TextureCube_UInt32_value;
Function TextureAtomicAnd_TextureCube_UInt32;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt32_args = { &TextureAtomicAnd_TextureCube_UInt32_texture, &TextureAtomicAnd_TextureCube_UInt32_coordinate, &TextureAtomicAnd_TextureCube_UInt32_value };

/// textureAtomicAnd with TextureCube, Int32x3, Int32
Variable TextureAtomicAnd_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_Int32_coordinate;
Variable TextureAtomicAnd_TextureCube_Int32_value;
Function TextureAtomicAnd_TextureCube_Int32;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int32_args = { &TextureAtomicAnd_TextureCube_Int32_texture, &TextureAtomicAnd_TextureCube_Int32_coordinate, &TextureAtomicAnd_TextureCube_Int32_value };

/// textureAtomicAnd with TextureCube, Int32x3, UInt16
Variable TextureAtomicAnd_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_UInt16_coordinate;
Variable TextureAtomicAnd_TextureCube_UInt16_value;
Function TextureAtomicAnd_TextureCube_UInt16;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt16_args = { &TextureAtomicAnd_TextureCube_UInt16_texture, &TextureAtomicAnd_TextureCube_UInt16_coordinate, &TextureAtomicAnd_TextureCube_UInt16_value };

/// textureAtomicAnd with TextureCube, Int32x3, Int16
Variable TextureAtomicAnd_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_Int16_coordinate;
Variable TextureAtomicAnd_TextureCube_Int16_value;
Function TextureAtomicAnd_TextureCube_Int16;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int16_args = { &TextureAtomicAnd_TextureCube_Int16_texture, &TextureAtomicAnd_TextureCube_Int16_coordinate, &TextureAtomicAnd_TextureCube_Int16_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicAnd_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicAnd_Texture1DArray_UInt32_value;
Function TextureAtomicAnd_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt32_args = { &TextureAtomicAnd_Texture1DArray_UInt32_texture, &TextureAtomicAnd_Texture1DArray_UInt32_coordinate, &TextureAtomicAnd_Texture1DArray_UInt32_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, Int32
Variable TextureAtomicAnd_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_Int32_coordinate;
Variable TextureAtomicAnd_Texture1DArray_Int32_value;
Function TextureAtomicAnd_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int32_args = { &TextureAtomicAnd_Texture1DArray_Int32_texture, &TextureAtomicAnd_Texture1DArray_Int32_coordinate, &TextureAtomicAnd_Texture1DArray_Int32_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicAnd_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicAnd_Texture1DArray_UInt16_value;
Function TextureAtomicAnd_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt16_args = { &TextureAtomicAnd_Texture1DArray_UInt16_texture, &TextureAtomicAnd_Texture1DArray_UInt16_coordinate, &TextureAtomicAnd_Texture1DArray_UInt16_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, Int16
Variable TextureAtomicAnd_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_Int16_coordinate;
Variable TextureAtomicAnd_Texture1DArray_Int16_value;
Function TextureAtomicAnd_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int16_args = { &TextureAtomicAnd_Texture1DArray_Int16_texture, &TextureAtomicAnd_Texture1DArray_Int16_coordinate, &TextureAtomicAnd_Texture1DArray_Int16_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicAnd_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicAnd_Texture2DArray_UInt32_value;
Function TextureAtomicAnd_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt32_args = { &TextureAtomicAnd_Texture2DArray_UInt32_texture, &TextureAtomicAnd_Texture2DArray_UInt32_coordinate, &TextureAtomicAnd_Texture2DArray_UInt32_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, Int32
Variable TextureAtomicAnd_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_Int32_coordinate;
Variable TextureAtomicAnd_Texture2DArray_Int32_value;
Function TextureAtomicAnd_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int32_args = { &TextureAtomicAnd_Texture2DArray_Int32_texture, &TextureAtomicAnd_Texture2DArray_Int32_coordinate, &TextureAtomicAnd_Texture2DArray_Int32_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicAnd_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicAnd_Texture2DArray_UInt16_value;
Function TextureAtomicAnd_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt16_args = { &TextureAtomicAnd_Texture2DArray_UInt16_texture, &TextureAtomicAnd_Texture2DArray_UInt16_coordinate, &TextureAtomicAnd_Texture2DArray_UInt16_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, Int16
Variable TextureAtomicAnd_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_Int16_coordinate;
Variable TextureAtomicAnd_Texture2DArray_Int16_value;
Function TextureAtomicAnd_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int16_args = { &TextureAtomicAnd_Texture2DArray_Int16_texture, &TextureAtomicAnd_Texture2DArray_Int16_coordinate, &TextureAtomicAnd_Texture2DArray_Int16_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicAnd_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_UInt32_value;
Function TextureAtomicAnd_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt32_args = { &TextureAtomicAnd_TextureCubeArray_UInt32_texture, &TextureAtomicAnd_TextureCubeArray_UInt32_coordinate, &TextureAtomicAnd_TextureCubeArray_UInt32_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicAnd_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_Int32_value;
Function TextureAtomicAnd_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int32_args = { &TextureAtomicAnd_TextureCubeArray_Int32_texture, &TextureAtomicAnd_TextureCubeArray_Int32_coordinate, &TextureAtomicAnd_TextureCubeArray_Int32_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicAnd_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_UInt16_value;
Function TextureAtomicAnd_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt16_args = { &TextureAtomicAnd_TextureCubeArray_UInt16_texture, &TextureAtomicAnd_TextureCubeArray_UInt16_coordinate, &TextureAtomicAnd_TextureCubeArray_UInt16_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicAnd_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_Int16_value;
Function TextureAtomicAnd_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int16_args = { &TextureAtomicAnd_TextureCubeArray_Int16_texture, &TextureAtomicAnd_TextureCubeArray_Int16_coordinate, &TextureAtomicAnd_TextureCubeArray_Int16_value };

/// textureAtomicOr with Texture1D, Int32, UInt32
Variable TextureAtomicOr_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_UInt32_coordinate;
Variable TextureAtomicOr_Texture1D_UInt32_value;
Function TextureAtomicOr_Texture1D_UInt32;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt32_args = { &TextureAtomicOr_Texture1D_UInt32_texture, &TextureAtomicOr_Texture1D_UInt32_coordinate, &TextureAtomicOr_Texture1D_UInt32_value };

/// textureAtomicOr with Texture1D, Int32, Int32
Variable TextureAtomicOr_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_Int32_coordinate;
Variable TextureAtomicOr_Texture1D_Int32_value;
Function TextureAtomicOr_Texture1D_Int32;
inline constexpr std::array TextureAtomicOr_Texture1D_Int32_args = { &TextureAtomicOr_Texture1D_Int32_texture, &TextureAtomicOr_Texture1D_Int32_coordinate, &TextureAtomicOr_Texture1D_Int32_value };

/// textureAtomicOr with Texture1D, Int32, UInt16
Variable TextureAtomicOr_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_UInt16_coordinate;
Variable TextureAtomicOr_Texture1D_UInt16_value;
Function TextureAtomicOr_Texture1D_UInt16;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt16_args = { &TextureAtomicOr_Texture1D_UInt16_texture, &TextureAtomicOr_Texture1D_UInt16_coordinate, &TextureAtomicOr_Texture1D_UInt16_value };

/// textureAtomicOr with Texture1D, Int32, Int16
Variable TextureAtomicOr_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_Int16_coordinate;
Variable TextureAtomicOr_Texture1D_Int16_value;
Function TextureAtomicOr_Texture1D_Int16;
inline constexpr std::array TextureAtomicOr_Texture1D_Int16_args = { &TextureAtomicOr_Texture1D_Int16_texture, &TextureAtomicOr_Texture1D_Int16_coordinate, &TextureAtomicOr_Texture1D_Int16_value };

/// textureAtomicOr with Texture2D, Int32x2, UInt32
Variable TextureAtomicOr_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_UInt32_coordinate;
Variable TextureAtomicOr_Texture2D_UInt32_value;
Function TextureAtomicOr_Texture2D_UInt32;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt32_args = { &TextureAtomicOr_Texture2D_UInt32_texture, &TextureAtomicOr_Texture2D_UInt32_coordinate, &TextureAtomicOr_Texture2D_UInt32_value };

/// textureAtomicOr with Texture2D, Int32x2, Int32
Variable TextureAtomicOr_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_Int32_coordinate;
Variable TextureAtomicOr_Texture2D_Int32_value;
Function TextureAtomicOr_Texture2D_Int32;
inline constexpr std::array TextureAtomicOr_Texture2D_Int32_args = { &TextureAtomicOr_Texture2D_Int32_texture, &TextureAtomicOr_Texture2D_Int32_coordinate, &TextureAtomicOr_Texture2D_Int32_value };

/// textureAtomicOr with Texture2D, Int32x2, UInt16
Variable TextureAtomicOr_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_UInt16_coordinate;
Variable TextureAtomicOr_Texture2D_UInt16_value;
Function TextureAtomicOr_Texture2D_UInt16;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt16_args = { &TextureAtomicOr_Texture2D_UInt16_texture, &TextureAtomicOr_Texture2D_UInt16_coordinate, &TextureAtomicOr_Texture2D_UInt16_value };

/// textureAtomicOr with Texture2D, Int32x2, Int16
Variable TextureAtomicOr_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_Int16_coordinate;
Variable TextureAtomicOr_Texture2D_Int16_value;
Function TextureAtomicOr_Texture2D_Int16;
inline constexpr std::array TextureAtomicOr_Texture2D_Int16_args = { &TextureAtomicOr_Texture2D_Int16_texture, &TextureAtomicOr_Texture2D_Int16_coordinate, &TextureAtomicOr_Texture2D_Int16_value };

/// textureAtomicOr with Texture3D, Int32x3, UInt32
Variable TextureAtomicOr_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_UInt32_coordinate;
Variable TextureAtomicOr_Texture3D_UInt32_value;
Function TextureAtomicOr_Texture3D_UInt32;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt32_args = { &TextureAtomicOr_Texture3D_UInt32_texture, &TextureAtomicOr_Texture3D_UInt32_coordinate, &TextureAtomicOr_Texture3D_UInt32_value };

/// textureAtomicOr with Texture3D, Int32x3, Int32
Variable TextureAtomicOr_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_Int32_coordinate;
Variable TextureAtomicOr_Texture3D_Int32_value;
Function TextureAtomicOr_Texture3D_Int32;
inline constexpr std::array TextureAtomicOr_Texture3D_Int32_args = { &TextureAtomicOr_Texture3D_Int32_texture, &TextureAtomicOr_Texture3D_Int32_coordinate, &TextureAtomicOr_Texture3D_Int32_value };

/// textureAtomicOr with Texture3D, Int32x3, UInt16
Variable TextureAtomicOr_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_UInt16_coordinate;
Variable TextureAtomicOr_Texture3D_UInt16_value;
Function TextureAtomicOr_Texture3D_UInt16;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt16_args = { &TextureAtomicOr_Texture3D_UInt16_texture, &TextureAtomicOr_Texture3D_UInt16_coordinate, &TextureAtomicOr_Texture3D_UInt16_value };

/// textureAtomicOr with Texture3D, Int32x3, Int16
Variable TextureAtomicOr_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_Int16_coordinate;
Variable TextureAtomicOr_Texture3D_Int16_value;
Function TextureAtomicOr_Texture3D_Int16;
inline constexpr std::array TextureAtomicOr_Texture3D_Int16_args = { &TextureAtomicOr_Texture3D_Int16_texture, &TextureAtomicOr_Texture3D_Int16_coordinate, &TextureAtomicOr_Texture3D_Int16_value };

/// textureAtomicOr with TextureCube, Int32x3, UInt32
Variable TextureAtomicOr_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_UInt32_coordinate;
Variable TextureAtomicOr_TextureCube_UInt32_value;
Function TextureAtomicOr_TextureCube_UInt32;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt32_args = { &TextureAtomicOr_TextureCube_UInt32_texture, &TextureAtomicOr_TextureCube_UInt32_coordinate, &TextureAtomicOr_TextureCube_UInt32_value };

/// textureAtomicOr with TextureCube, Int32x3, Int32
Variable TextureAtomicOr_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_Int32_coordinate;
Variable TextureAtomicOr_TextureCube_Int32_value;
Function TextureAtomicOr_TextureCube_Int32;
inline constexpr std::array TextureAtomicOr_TextureCube_Int32_args = { &TextureAtomicOr_TextureCube_Int32_texture, &TextureAtomicOr_TextureCube_Int32_coordinate, &TextureAtomicOr_TextureCube_Int32_value };

/// textureAtomicOr with TextureCube, Int32x3, UInt16
Variable TextureAtomicOr_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_UInt16_coordinate;
Variable TextureAtomicOr_TextureCube_UInt16_value;
Function TextureAtomicOr_TextureCube_UInt16;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt16_args = { &TextureAtomicOr_TextureCube_UInt16_texture, &TextureAtomicOr_TextureCube_UInt16_coordinate, &TextureAtomicOr_TextureCube_UInt16_value };

/// textureAtomicOr with TextureCube, Int32x3, Int16
Variable TextureAtomicOr_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_Int16_coordinate;
Variable TextureAtomicOr_TextureCube_Int16_value;
Function TextureAtomicOr_TextureCube_Int16;
inline constexpr std::array TextureAtomicOr_TextureCube_Int16_args = { &TextureAtomicOr_TextureCube_Int16_texture, &TextureAtomicOr_TextureCube_Int16_coordinate, &TextureAtomicOr_TextureCube_Int16_value };

/// textureAtomicOr with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicOr_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicOr_Texture1DArray_UInt32_value;
Function TextureAtomicOr_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt32_args = { &TextureAtomicOr_Texture1DArray_UInt32_texture, &TextureAtomicOr_Texture1DArray_UInt32_coordinate, &TextureAtomicOr_Texture1DArray_UInt32_value };

/// textureAtomicOr with Texture1DArray, Int32x2, Int32
Variable TextureAtomicOr_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1DArray_Int32_coordinate;
Variable TextureAtomicOr_Texture1DArray_Int32_value;
Function TextureAtomicOr_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int32_args = { &TextureAtomicOr_Texture1DArray_Int32_texture, &TextureAtomicOr_Texture1DArray_Int32_coordinate, &TextureAtomicOr_Texture1DArray_Int32_value };

/// textureAtomicOr with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicOr_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicOr_Texture1DArray_UInt16_value;
Function TextureAtomicOr_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt16_args = { &TextureAtomicOr_Texture1DArray_UInt16_texture, &TextureAtomicOr_Texture1DArray_UInt16_coordinate, &TextureAtomicOr_Texture1DArray_UInt16_value };

/// textureAtomicOr with Texture1DArray, Int32x2, Int16
Variable TextureAtomicOr_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1DArray_Int16_coordinate;
Variable TextureAtomicOr_Texture1DArray_Int16_value;
Function TextureAtomicOr_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int16_args = { &TextureAtomicOr_Texture1DArray_Int16_texture, &TextureAtomicOr_Texture1DArray_Int16_coordinate, &TextureAtomicOr_Texture1DArray_Int16_value };

/// textureAtomicOr with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicOr_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicOr_Texture2DArray_UInt32_value;
Function TextureAtomicOr_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicOr_Texture2DArray_UInt32_args = { &TextureAtomicOr_Texture2DArray_UInt32_texture, &TextureAtomicOr_Texture2DArray_UInt32_coordinate, &TextureAtomicOr_Texture2DArray_UInt32_value };

/// textureAtomicOr with Texture2DArray, Int32x3, Int32
Variable TextureAtomicOr_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2DArray_Int32_coordinate;
Variable TextureAtomicOr_Texture2DArray_Int32_value;
Function TextureAtomicOr_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicOr_Texture2DArray_Int32_args = { &TextureAtomicOr_Texture2DArray_Int32_texture, &TextureAtomicOr_Texture2DArray_Int32_coordinate, &TextureAtomicOr_Texture2DArray_Int32_value };

/// textureAtomicOr with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicOr_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicOr_Texture2DArray_UInt16_value;
Function TextureAtomicOr_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicOr_Texture2DArray_UInt16_args = { &TextureAtomicOr_Texture2DArray_UInt16_texture, &TextureAtomicOr_Texture2DArray_UInt16_coordinate, &TextureAtomicOr_Texture2DArray_UInt16_value };

/// textureAtomicOr with Texture2DArray, Int32x3, Int16
Variable TextureAtomicOr_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2DArray_Int16_coordinate;
Variable TextureAtomicOr_Texture2DArray_Int16_value;
Function TextureAtomicOr_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicOr_Texture2DArray_Int16_args = { &TextureAtomicOr_Texture2DArray_Int16_texture, &TextureAtomicOr_Texture2DArray_Int16_coordinate, &TextureAtomicOr_Texture2DArray_Int16_value };

/// textureAtomicOr with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicOr_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicOr_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicOr_TextureCubeArray_UInt32_value;
Function TextureAtomicOr_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicOr_TextureCubeArray_UInt32_args = { &TextureAtomicOr_TextureCubeArray_UInt32_texture, &TextureAtomicOr_TextureCubeArray_UInt32_coordinate, &TextureAtomicOr_TextureCubeArray_UInt32_value };

/// textureAtomicOr with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicOr_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicOr_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicOr_TextureCubeArray_Int32_value;
Function TextureAtomicOr_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicOr_TextureCubeArray_Int32_args = { &TextureAtomicOr_TextureCubeArray_Int32_texture, &TextureAtomicOr_TextureCubeArray_Int32_coordinate, &TextureAtomicOr_TextureCubeArray_Int32_value };

/// textureAtomicOr with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicOr_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicOr_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicOr_TextureCubeArray_UInt16_value;
Function TextureAtomicOr_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicOr_TextureCubeArray_UInt16_args = { &TextureAtomicOr_TextureCubeArray_UInt16_texture, &TextureAtomicOr_TextureCubeArray_UInt16_coordinate, &TextureAtomicOr_TextureCubeArray_UInt16_value };

/// textureAtomicOr with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicOr_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicOr_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicOr_TextureCubeArray_Int16_value;
Function TextureAtomicOr_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicOr_TextureCubeArray_Int16_args = { &TextureAtomicOr_TextureCubeArray_Int16_texture, &TextureAtomicOr_TextureCubeArray_Int16_coordinate, &TextureAtomicOr_TextureCubeArray_Int16_value };

/// textureAtomicXor with Texture1D, Int32, UInt32
Variable TextureAtomicXor_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicXor_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture1D_UInt32_coordinate;
Variable TextureAtomicXor_Texture1D_UInt32_value;
Function TextureAtomicXor_Texture1D_UInt32;
inline constexpr std::array TextureAtomicXor_Texture1D_UInt32_args = { &TextureAtomicXor_Texture1D_UInt32_texture, &TextureAtomicXor_Texture1D_UInt32_coordinate, &TextureAtomicXor_Texture1D_UInt32_value };

/// textureAtomicXor with Texture1D, Int32, Int32
Variable TextureAtomicXor_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicXor_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture1D_Int32_coordinate;
Variable TextureAtomicXor_Texture1D_Int32_value;
Function TextureAtomicXor_Texture1D_Int32;
inline constexpr std::array TextureAtomicXor_Texture1D_Int32_args = { &TextureAtomicXor_Texture1D_Int32_texture, &TextureAtomicXor_Texture1D_Int32_coordinate, &TextureAtomicXor_Texture1D_Int32_value };

/// textureAtomicXor with Texture1D, Int32, UInt16
Variable TextureAtomicXor_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicXor_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture1D_UInt16_coordinate;
Variable TextureAtomicXor_Texture1D_UInt16_value;
Function TextureAtomicXor_Texture1D_UInt16;
inline constexpr std::array TextureAtomicXor_Texture1D_UInt16_args = { &TextureAtomicXor_Texture1D_UInt16_texture, &TextureAtomicXor_Texture1D_UInt16_coordinate, &TextureAtomicXor_Texture1D_UInt16_value };

/// textureAtomicXor with Texture1D, Int32, Int16
Variable TextureAtomicXor_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicXor_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture1D_Int16_coordinate;
Variable TextureAtomicXor_Texture1D_Int16_value;
Function TextureAtomicXor_Texture1D_Int16;
inline constexpr std::array TextureAtomicXor_Texture1D_Int16_args = { &TextureAtomicXor_Texture1D_Int16_texture, &TextureAtomicXor_Texture1D_Int16_coordinate, &TextureAtomicXor_Texture1D_Int16_value };

/// textureAtomicXor with Texture2D, Int32x2, UInt32
Variable TextureAtomicXor_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicXor_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture2D_UInt32_coordinate;
Variable TextureAtomicXor_Texture2D_UInt32_value;
Function TextureAtomicXor_Texture2D_UInt32;
inline constexpr std::array TextureAtomicXor_Texture2D_UInt32_args = { &TextureAtomicXor_Texture2D_UInt32_texture, &TextureAtomicXor_Texture2D_UInt32_coordinate, &TextureAtomicXor_Texture2D_UInt32_value };

/// textureAtomicXor with Texture2D, Int32x2, Int32
Variable TextureAtomicXor_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicXor_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture2D_Int32_coordinate;
Variable TextureAtomicXor_Texture2D_Int32_value;
Function TextureAtomicXor_Texture2D_Int32;
inline constexpr std::array TextureAtomicXor_Texture2D_Int32_args = { &TextureAtomicXor_Texture2D_Int32_texture, &TextureAtomicXor_Texture2D_Int32_coordinate, &TextureAtomicXor_Texture2D_Int32_value };

/// textureAtomicXor with Texture2D, Int32x2, UInt16
Variable TextureAtomicXor_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicXor_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture2D_UInt16_coordinate;
Variable TextureAtomicXor_Texture2D_UInt16_value;
Function TextureAtomicXor_Texture2D_UInt16;
inline constexpr std::array TextureAtomicXor_Texture2D_UInt16_args = { &TextureAtomicXor_Texture2D_UInt16_texture, &TextureAtomicXor_Texture2D_UInt16_coordinate, &TextureAtomicXor_Texture2D_UInt16_value };

/// textureAtomicXor with Texture2D, Int32x2, Int16
Variable TextureAtomicXor_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicXor_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture2D_Int16_coordinate;
Variable TextureAtomicXor_Texture2D_Int16_value;
Function TextureAtomicXor_Texture2D_Int16;
inline constexpr std::array TextureAtomicXor_Texture2D_Int16_args = { &TextureAtomicXor_Texture2D_Int16_texture, &TextureAtomicXor_Texture2D_Int16_coordinate, &TextureAtomicXor_Texture2D_Int16_value };

/// textureAtomicXor with Texture3D, Int32x3, UInt32
Variable TextureAtomicXor_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicXor_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture3D_UInt32_coordinate;
Variable TextureAtomicXor_Texture3D_UInt32_value;
Function TextureAtomicXor_Texture3D_UInt32;
inline constexpr std::array TextureAtomicXor_Texture3D_UInt32_args = { &TextureAtomicXor_Texture3D_UInt32_texture, &TextureAtomicXor_Texture3D_UInt32_coordinate, &TextureAtomicXor_Texture3D_UInt32_value };

/// textureAtomicXor with Texture3D, Int32x3, Int32
Variable TextureAtomicXor_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicXor_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture3D_Int32_coordinate;
Variable TextureAtomicXor_Texture3D_Int32_value;
Function TextureAtomicXor_Texture3D_Int32;
inline constexpr std::array TextureAtomicXor_Texture3D_Int32_args = { &TextureAtomicXor_Texture3D_Int32_texture, &TextureAtomicXor_Texture3D_Int32_coordinate, &TextureAtomicXor_Texture3D_Int32_value };

/// textureAtomicXor with Texture3D, Int32x3, UInt16
Variable TextureAtomicXor_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicXor_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture3D_UInt16_coordinate;
Variable TextureAtomicXor_Texture3D_UInt16_value;
Function TextureAtomicXor_Texture3D_UInt16;
inline constexpr std::array TextureAtomicXor_Texture3D_UInt16_args = { &TextureAtomicXor_Texture3D_UInt16_texture, &TextureAtomicXor_Texture3D_UInt16_coordinate, &TextureAtomicXor_Texture3D_UInt16_value };

/// textureAtomicXor with Texture3D, Int32x3, Int16
Variable TextureAtomicXor_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicXor_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture3D_Int16_coordinate;
Variable TextureAtomicXor_Texture3D_Int16_value;
Function TextureAtomicXor_Texture3D_Int16;
inline constexpr std::array TextureAtomicXor_Texture3D_Int16_args = { &TextureAtomicXor_Texture3D_Int16_texture, &TextureAtomicXor_Texture3D_Int16_coordinate, &TextureAtomicXor_Texture3D_Int16_value };

/// textureAtomicXor with TextureCube, Int32x3, UInt32
Variable TextureAtomicXor_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicXor_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_TextureCube_UInt32_coordinate;
Variable TextureAtomicXor_TextureCube_UInt32_value;
Function TextureAtomicXor_TextureCube_UInt32;
inline constexpr std::array TextureAtomicXor_TextureCube_UInt32_args = { &TextureAtomicXor_TextureCube_UInt32_texture, &TextureAtomicXor_TextureCube_UInt32_coordinate, &TextureAtomicXor_TextureCube_UInt32_value };

/// textureAtomicXor with TextureCube, Int32x3, Int32
Variable TextureAtomicXor_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicXor_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_TextureCube_Int32_coordinate;
Variable TextureAtomicXor_TextureCube_Int32_value;
Function TextureAtomicXor_TextureCube_Int32;
inline constexpr std::array TextureAtomicXor_TextureCube_Int32_args = { &TextureAtomicXor_TextureCube_Int32_texture, &TextureAtomicXor_TextureCube_Int32_coordinate, &TextureAtomicXor_TextureCube_Int32_value };

/// textureAtomicXor with TextureCube, Int32x3, UInt16
Variable TextureAtomicXor_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicXor_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_TextureCube_UInt16_coordinate;
Variable TextureAtomicXor_TextureCube_UInt16_value;
Function TextureAtomicXor_TextureCube_UInt16;
inline constexpr std::array TextureAtomicXor_TextureCube_UInt16_args = { &TextureAtomicXor_TextureCube_UInt16_texture, &TextureAtomicXor_TextureCube_UInt16_coordinate, &TextureAtomicXor_TextureCube_UInt16_value };

/// textureAtomicXor with TextureCube, Int32x3, Int16
Variable TextureAtomicXor_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicXor_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_TextureCube_Int16_coordinate;
Variable TextureAtomicXor_TextureCube_Int16_value;
Function TextureAtomicXor_TextureCube_Int16;
inline constexpr std::array TextureAtomicXor_TextureCube_Int16_args = { &TextureAtomicXor_TextureCube_Int16_texture, &TextureAtomicXor_TextureCube_Int16_coordinate, &TextureAtomicXor_TextureCube_Int16_value };

/// textureAtomicXor with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicXor_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicXor_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicXor_Texture1DArray_UInt32_value;
Function TextureAtomicXor_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicXor_Texture1DArray_UInt32_args = { &TextureAtomicXor_Texture1DArray_UInt32_texture, &TextureAtomicXor_Texture1DArray_UInt32_coordinate, &TextureAtomicXor_Texture1DArray_UInt32_value };

/// textureAtomicXor with Texture1DArray, Int32x2, Int32
Variable TextureAtomicXor_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicXor_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture1DArray_Int32_coordinate;
Variable TextureAtomicXor_Texture1DArray_Int32_value;
Function TextureAtomicXor_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicXor_Texture1DArray_Int32_args = { &TextureAtomicXor_Texture1DArray_Int32_texture, &TextureAtomicXor_Texture1DArray_Int32_coordinate, &TextureAtomicXor_Texture1DArray_Int32_value };

/// textureAtomicXor with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicXor_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicXor_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicXor_Texture1DArray_UInt16_value;
Function TextureAtomicXor_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicXor_Texture1DArray_UInt16_args = { &TextureAtomicXor_Texture1DArray_UInt16_texture, &TextureAtomicXor_Texture1DArray_UInt16_coordinate, &TextureAtomicXor_Texture1DArray_UInt16_value };

/// textureAtomicXor with Texture1DArray, Int32x2, Int16
Variable TextureAtomicXor_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicXor_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture1DArray_Int16_coordinate;
Variable TextureAtomicXor_Texture1DArray_Int16_value;
Function TextureAtomicXor_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicXor_Texture1DArray_Int16_args = { &TextureAtomicXor_Texture1DArray_Int16_texture, &TextureAtomicXor_Texture1DArray_Int16_coordinate, &TextureAtomicXor_Texture1DArray_Int16_value };

/// textureAtomicXor with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicXor_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicXor_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicXor_Texture2DArray_UInt32_value;
Function TextureAtomicXor_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicXor_Texture2DArray_UInt32_args = { &TextureAtomicXor_Texture2DArray_UInt32_texture, &TextureAtomicXor_Texture2DArray_UInt32_coordinate, &TextureAtomicXor_Texture2DArray_UInt32_value };

/// textureAtomicXor with Texture2DArray, Int32x3, Int32
Variable TextureAtomicXor_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicXor_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture2DArray_Int32_coordinate;
Variable TextureAtomicXor_Texture2DArray_Int32_value;
Function TextureAtomicXor_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicXor_Texture2DArray_Int32_args = { &TextureAtomicXor_Texture2DArray_Int32_texture, &TextureAtomicXor_Texture2DArray_Int32_coordinate, &TextureAtomicXor_Texture2DArray_Int32_value };

/// textureAtomicXor with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicXor_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicXor_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicXor_Texture2DArray_UInt16_value;
Function TextureAtomicXor_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicXor_Texture2DArray_UInt16_args = { &TextureAtomicXor_Texture2DArray_UInt16_texture, &TextureAtomicXor_Texture2DArray_UInt16_coordinate, &TextureAtomicXor_Texture2DArray_UInt16_value };

/// textureAtomicXor with Texture2DArray, Int32x3, Int16
Variable TextureAtomicXor_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicXor_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_Texture2DArray_Int16_coordinate;
Variable TextureAtomicXor_Texture2DArray_Int16_value;
Function TextureAtomicXor_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicXor_Texture2DArray_Int16_args = { &TextureAtomicXor_Texture2DArray_Int16_texture, &TextureAtomicXor_Texture2DArray_Int16_coordinate, &TextureAtomicXor_Texture2DArray_Int16_value };

/// textureAtomicXor with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicXor_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicXor_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicXor_TextureCubeArray_UInt32_value;
Function TextureAtomicXor_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicXor_TextureCubeArray_UInt32_args = { &TextureAtomicXor_TextureCubeArray_UInt32_texture, &TextureAtomicXor_TextureCubeArray_UInt32_coordinate, &TextureAtomicXor_TextureCubeArray_UInt32_value };

/// textureAtomicXor with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicXor_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicXor_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicXor_TextureCubeArray_Int32_value;
Function TextureAtomicXor_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicXor_TextureCubeArray_Int32_args = { &TextureAtomicXor_TextureCubeArray_Int32_texture, &TextureAtomicXor_TextureCubeArray_Int32_coordinate, &TextureAtomicXor_TextureCubeArray_Int32_value };

/// textureAtomicXor with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicXor_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicXor_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicXor_TextureCubeArray_UInt16_value;
Function TextureAtomicXor_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicXor_TextureCubeArray_UInt16_args = { &TextureAtomicXor_TextureCubeArray_UInt16_texture, &TextureAtomicXor_TextureCubeArray_UInt16_coordinate, &TextureAtomicXor_TextureCubeArray_UInt16_value };

/// textureAtomicXor with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicXor_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicXor_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicXor_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicXor_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicXor_TextureCubeArray_Int16_value;
Function TextureAtomicXor_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicXor_TextureCubeArray_Int16_args = { &TextureAtomicXor_TextureCubeArray_Int16_texture, &TextureAtomicXor_TextureCubeArray_Int16_coordinate, &TextureAtomicXor_TextureCubeArray_Int16_value };

void SetupIntrinsics15()
{
    /// textureAtomicMax with Texture1D, Int32, UInt16
    TextureAtomicMax_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_UInt16_texture.type.modifiers = TextureAtomicMax_Texture1D_UInt16_texture_modifiers;
    TextureAtomicMax_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_UInt16.name = TextureAtomicMax_Texture1D_UInt16_name;
    TextureAtomicMax_Texture1D_UInt16.backendIndex = 2857;
    TextureAtomicMax_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture1D_UInt16.parameters = TextureAtomicMax_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->signature = "textureAtomicMax(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->name = "textureAtomicMax(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture1D, Int32, Int16
    TextureAtomicMax_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_Int16_texture.type.modifiers = TextureAtomicMax_Texture1D_Int16_texture_modifiers;
    TextureAtomicMax_Texture1D_Int16_texture.type.modifierValues = TextureAtomicMax_Texture1D_Int16_texture_modifierValues;
    TextureAtomicMax_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_Int16.name = TextureAtomicMax_Texture1D_Int16_name;
    TextureAtomicMax_Texture1D_Int16.backendIndex = 2858;
    TextureAtomicMax_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture1D_Int16.parameters = TextureAtomicMax_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->signature = "textureAtomicMax(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->name = "textureAtomicMax(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture2D, Int32x2, UInt32
    TextureAtomicMax_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_UInt32_texture.type.modifiers = TextureAtomicMax_Texture2D_UInt32_texture_modifiers;
    TextureAtomicMax_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_UInt32.name = TextureAtomicMax_Texture2D_UInt32_name;
    TextureAtomicMax_Texture2D_UInt32.backendIndex = 2859;
    TextureAtomicMax_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture2D_UInt32.parameters = TextureAtomicMax_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->signature = "textureAtomicMax(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->name = "textureAtomicMax(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture2D, Int32x2, Int32
    TextureAtomicMax_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_Int32_texture.type.modifiers = TextureAtomicMax_Texture2D_Int32_texture_modifiers;
    TextureAtomicMax_Texture2D_Int32_texture.type.modifierValues = TextureAtomicMax_Texture2D_Int32_texture_modifierValues;
    TextureAtomicMax_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_Int32.name = TextureAtomicMax_Texture2D_Int32_name;
    TextureAtomicMax_Texture2D_Int32.backendIndex = 2860;
    TextureAtomicMax_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture2D_Int32.parameters = TextureAtomicMax_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->signature = "textureAtomicMax(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->name = "textureAtomicMax(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture2D, Int32x2, UInt16
    TextureAtomicMax_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_UInt16_texture.type.modifiers = TextureAtomicMax_Texture2D_UInt16_texture_modifiers;
    TextureAtomicMax_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_UInt16.name = TextureAtomicMax_Texture2D_UInt16_name;
    TextureAtomicMax_Texture2D_UInt16.backendIndex = 2861;
    TextureAtomicMax_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture2D_UInt16.parameters = TextureAtomicMax_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->signature = "textureAtomicMax(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->name = "textureAtomicMax(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture2D, Int32x2, Int16
    TextureAtomicMax_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_Int16_texture.type.modifiers = TextureAtomicMax_Texture2D_Int16_texture_modifiers;
    TextureAtomicMax_Texture2D_Int16_texture.type.modifierValues = TextureAtomicMax_Texture2D_Int16_texture_modifierValues;
    TextureAtomicMax_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_Int16.name = TextureAtomicMax_Texture2D_Int16_name;
    TextureAtomicMax_Texture2D_Int16.backendIndex = 2862;
    TextureAtomicMax_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture2D_Int16.parameters = TextureAtomicMax_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->signature = "textureAtomicMax(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->name = "textureAtomicMax(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture3D, Int32x3, UInt32
    TextureAtomicMax_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_UInt32_texture.type.modifiers = TextureAtomicMax_Texture3D_UInt32_texture_modifiers;
    TextureAtomicMax_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_UInt32.name = TextureAtomicMax_Texture3D_UInt32_name;
    TextureAtomicMax_Texture3D_UInt32.backendIndex = 2863;
    TextureAtomicMax_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture3D_UInt32.parameters = TextureAtomicMax_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->signature = "textureAtomicMax(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->name = "textureAtomicMax(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture3D, Int32x3, Int32
    TextureAtomicMax_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_Int32_texture.type.modifiers = TextureAtomicMax_Texture3D_Int32_texture_modifiers;
    TextureAtomicMax_Texture3D_Int32_texture.type.modifierValues = TextureAtomicMax_Texture3D_Int32_texture_modifierValues;
    TextureAtomicMax_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_Int32.name = TextureAtomicMax_Texture3D_Int32_name;
    TextureAtomicMax_Texture3D_Int32.backendIndex = 2864;
    TextureAtomicMax_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture3D_Int32.parameters = TextureAtomicMax_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->signature = "textureAtomicMax(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->name = "textureAtomicMax(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture3D, Int32x3, UInt16
    TextureAtomicMax_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_UInt16_texture.type.modifiers = TextureAtomicMax_Texture3D_UInt16_texture_modifiers;
    TextureAtomicMax_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_UInt16.name = TextureAtomicMax_Texture3D_UInt16_name;
    TextureAtomicMax_Texture3D_UInt16.backendIndex = 2865;
    TextureAtomicMax_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture3D_UInt16.parameters = TextureAtomicMax_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->signature = "textureAtomicMax(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->name = "textureAtomicMax(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture3D, Int32x3, Int16
    TextureAtomicMax_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_Int16_texture.type.modifiers = TextureAtomicMax_Texture3D_Int16_texture_modifiers;
    TextureAtomicMax_Texture3D_Int16_texture.type.modifierValues = TextureAtomicMax_Texture3D_Int16_texture_modifierValues;
    TextureAtomicMax_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_Int16.name = TextureAtomicMax_Texture3D_Int16_name;
    TextureAtomicMax_Texture3D_Int16.backendIndex = 2866;
    TextureAtomicMax_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture3D_Int16.parameters = TextureAtomicMax_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->signature = "textureAtomicMax(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->name = "textureAtomicMax(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with TextureCube, Int32x3, UInt32
    TextureAtomicMax_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_UInt32_texture.type.modifiers = TextureAtomicMax_TextureCube_UInt32_texture_modifiers;
    TextureAtomicMax_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicMax_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicMax_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicMax_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_UInt32.name = TextureAtomicMax_TextureCube_UInt32_name;
    TextureAtomicMax_TextureCube_UInt32.backendIndex = 2867;
    TextureAtomicMax_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_TextureCube_UInt32.parameters = TextureAtomicMax_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->signature = "textureAtomicMax(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->name = "textureAtomicMax(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with TextureCube, Int32x3, Int32
    TextureAtomicMax_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_Int32_texture.type.modifiers = TextureAtomicMax_TextureCube_Int32_texture_modifiers;
    TextureAtomicMax_TextureCube_Int32_texture.type.modifierValues = TextureAtomicMax_TextureCube_Int32_texture_modifierValues;
    TextureAtomicMax_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicMax_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_Int32.name = TextureAtomicMax_TextureCube_Int32_name;
    TextureAtomicMax_TextureCube_Int32.backendIndex = 2868;
    TextureAtomicMax_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_TextureCube_Int32.parameters = TextureAtomicMax_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->signature = "textureAtomicMax(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->name = "textureAtomicMax(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with TextureCube, Int32x3, UInt16
    TextureAtomicMax_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_UInt16_texture.type.modifiers = TextureAtomicMax_TextureCube_UInt16_texture_modifiers;
    TextureAtomicMax_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicMax_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicMax_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicMax_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_UInt16.name = TextureAtomicMax_TextureCube_UInt16_name;
    TextureAtomicMax_TextureCube_UInt16.backendIndex = 2869;
    TextureAtomicMax_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_TextureCube_UInt16.parameters = TextureAtomicMax_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->signature = "textureAtomicMax(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->name = "textureAtomicMax(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with TextureCube, Int32x3, Int16
    TextureAtomicMax_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_Int16_texture.type.modifiers = TextureAtomicMax_TextureCube_Int16_texture_modifiers;
    TextureAtomicMax_TextureCube_Int16_texture.type.modifierValues = TextureAtomicMax_TextureCube_Int16_texture_modifierValues;
    TextureAtomicMax_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicMax_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_Int16.name = TextureAtomicMax_TextureCube_Int16_name;
    TextureAtomicMax_TextureCube_Int16.backendIndex = 2870;
    TextureAtomicMax_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_TextureCube_Int16.parameters = TextureAtomicMax_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->signature = "textureAtomicMax(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->name = "textureAtomicMax(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, UInt32
    TextureAtomicMax_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicMax_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicMax_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_UInt32.name = TextureAtomicMax_Texture1DArray_UInt32_name;
    TextureAtomicMax_Texture1DArray_UInt32.backendIndex = 2871;
    TextureAtomicMax_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture1DArray_UInt32.parameters = TextureAtomicMax_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, Int32
    TextureAtomicMax_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicMax_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicMax_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_Int32.name = TextureAtomicMax_Texture1DArray_Int32_name;
    TextureAtomicMax_Texture1DArray_Int32.backendIndex = 2872;
    TextureAtomicMax_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture1DArray_Int32.parameters = TextureAtomicMax_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, UInt16
    TextureAtomicMax_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicMax_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicMax_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_UInt16.name = TextureAtomicMax_Texture1DArray_UInt16_name;
    TextureAtomicMax_Texture1DArray_UInt16.backendIndex = 2873;
    TextureAtomicMax_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture1DArray_UInt16.parameters = TextureAtomicMax_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, Int16
    TextureAtomicMax_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicMax_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicMax_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_Int16.name = TextureAtomicMax_Texture1DArray_Int16_name;
    TextureAtomicMax_Texture1DArray_Int16.backendIndex = 2874;
    TextureAtomicMax_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture1DArray_Int16.parameters = TextureAtomicMax_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, UInt32
    TextureAtomicMax_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicMax_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicMax_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_UInt32.name = TextureAtomicMax_Texture2DArray_UInt32_name;
    TextureAtomicMax_Texture2DArray_UInt32.backendIndex = 2875;
    TextureAtomicMax_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture2DArray_UInt32.parameters = TextureAtomicMax_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, Int32
    TextureAtomicMax_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicMax_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicMax_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_Int32.name = TextureAtomicMax_Texture2DArray_Int32_name;
    TextureAtomicMax_Texture2DArray_Int32.backendIndex = 2876;
    TextureAtomicMax_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture2DArray_Int32.parameters = TextureAtomicMax_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, UInt16
    TextureAtomicMax_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicMax_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicMax_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_UInt16.name = TextureAtomicMax_Texture2DArray_UInt16_name;
    TextureAtomicMax_Texture2DArray_UInt16.backendIndex = 2877;
    TextureAtomicMax_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture2DArray_UInt16.parameters = TextureAtomicMax_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, Int16
    TextureAtomicMax_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicMax_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicMax_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_Int16.name = TextureAtomicMax_Texture2DArray_Int16_name;
    TextureAtomicMax_Texture2DArray_Int16.backendIndex = 2878;
    TextureAtomicMax_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture2DArray_Int16.parameters = TextureAtomicMax_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, UInt32
    TextureAtomicMax_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_UInt32.name = TextureAtomicMax_TextureCubeArray_UInt32_name;
    TextureAtomicMax_TextureCubeArray_UInt32.backendIndex = 2879;
    TextureAtomicMax_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_TextureCubeArray_UInt32.parameters = TextureAtomicMax_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, Int32
    TextureAtomicMax_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_Int32.name = TextureAtomicMax_TextureCubeArray_Int32_name;
    TextureAtomicMax_TextureCubeArray_Int32.backendIndex = 2880;
    TextureAtomicMax_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_TextureCubeArray_Int32.parameters = TextureAtomicMax_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, UInt16
    TextureAtomicMax_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_UInt16.name = TextureAtomicMax_TextureCubeArray_UInt16_name;
    TextureAtomicMax_TextureCubeArray_UInt16.backendIndex = 2881;
    TextureAtomicMax_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_TextureCubeArray_UInt16.parameters = TextureAtomicMax_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, Int16
    TextureAtomicMax_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_Int16.name = TextureAtomicMax_TextureCubeArray_Int16_name;
    TextureAtomicMax_TextureCubeArray_Int16.backendIndex = 2882;
    TextureAtomicMax_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_TextureCubeArray_Int16.parameters = TextureAtomicMax_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture1D, Int32, UInt32
    TextureAtomicAnd_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture1D_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_UInt32.name = TextureAtomicAnd_Texture1D_UInt32_name;
    TextureAtomicAnd_Texture1D_UInt32.backendIndex = 2883;
    TextureAtomicAnd_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture1D_UInt32.parameters = TextureAtomicAnd_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->signature = "textureAtomicAnd(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->name = "textureAtomicAnd(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture1D, Int32, Int32
    TextureAtomicAnd_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_Int32_texture.type.modifiers = TextureAtomicAnd_Texture1D_Int32_texture_modifiers;
    TextureAtomicAnd_Texture1D_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture1D_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_Int32.name = TextureAtomicAnd_Texture1D_Int32_name;
    TextureAtomicAnd_Texture1D_Int32.backendIndex = 2884;
    TextureAtomicAnd_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture1D_Int32.parameters = TextureAtomicAnd_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->signature = "textureAtomicAnd(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->name = "textureAtomicAnd(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture1D, Int32, UInt16
    TextureAtomicAnd_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture1D_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_UInt16.name = TextureAtomicAnd_Texture1D_UInt16_name;
    TextureAtomicAnd_Texture1D_UInt16.backendIndex = 2885;
    TextureAtomicAnd_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture1D_UInt16.parameters = TextureAtomicAnd_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->signature = "textureAtomicAnd(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->name = "textureAtomicAnd(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture1D, Int32, Int16
    TextureAtomicAnd_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_Int16_texture.type.modifiers = TextureAtomicAnd_Texture1D_Int16_texture_modifiers;
    TextureAtomicAnd_Texture1D_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture1D_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_Int16.name = TextureAtomicAnd_Texture1D_Int16_name;
    TextureAtomicAnd_Texture1D_Int16.backendIndex = 2886;
    TextureAtomicAnd_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture1D_Int16.parameters = TextureAtomicAnd_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->signature = "textureAtomicAnd(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->name = "textureAtomicAnd(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture2D, Int32x2, UInt32
    TextureAtomicAnd_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture2D_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_UInt32.name = TextureAtomicAnd_Texture2D_UInt32_name;
    TextureAtomicAnd_Texture2D_UInt32.backendIndex = 2887;
    TextureAtomicAnd_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture2D_UInt32.parameters = TextureAtomicAnd_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->name = "textureAtomicAnd(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture2D, Int32x2, Int32
    TextureAtomicAnd_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_Int32_texture.type.modifiers = TextureAtomicAnd_Texture2D_Int32_texture_modifiers;
    TextureAtomicAnd_Texture2D_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture2D_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_Int32.name = TextureAtomicAnd_Texture2D_Int32_name;
    TextureAtomicAnd_Texture2D_Int32.backendIndex = 2888;
    TextureAtomicAnd_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture2D_Int32.parameters = TextureAtomicAnd_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->name = "textureAtomicAnd(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture2D, Int32x2, UInt16
    TextureAtomicAnd_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture2D_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_UInt16.name = TextureAtomicAnd_Texture2D_UInt16_name;
    TextureAtomicAnd_Texture2D_UInt16.backendIndex = 2889;
    TextureAtomicAnd_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture2D_UInt16.parameters = TextureAtomicAnd_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->name = "textureAtomicAnd(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture2D, Int32x2, Int16
    TextureAtomicAnd_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_Int16_texture.type.modifiers = TextureAtomicAnd_Texture2D_Int16_texture_modifiers;
    TextureAtomicAnd_Texture2D_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture2D_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_Int16.name = TextureAtomicAnd_Texture2D_Int16_name;
    TextureAtomicAnd_Texture2D_Int16.backendIndex = 2890;
    TextureAtomicAnd_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture2D_Int16.parameters = TextureAtomicAnd_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->name = "textureAtomicAnd(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture3D, Int32x3, UInt32
    TextureAtomicAnd_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture3D_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_UInt32.name = TextureAtomicAnd_Texture3D_UInt32_name;
    TextureAtomicAnd_Texture3D_UInt32.backendIndex = 2891;
    TextureAtomicAnd_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture3D_UInt32.parameters = TextureAtomicAnd_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->name = "textureAtomicAnd(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture3D, Int32x3, Int32
    TextureAtomicAnd_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_Int32_texture.type.modifiers = TextureAtomicAnd_Texture3D_Int32_texture_modifiers;
    TextureAtomicAnd_Texture3D_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture3D_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_Int32.name = TextureAtomicAnd_Texture3D_Int32_name;
    TextureAtomicAnd_Texture3D_Int32.backendIndex = 2892;
    TextureAtomicAnd_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture3D_Int32.parameters = TextureAtomicAnd_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->name = "textureAtomicAnd(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture3D, Int32x3, UInt16
    TextureAtomicAnd_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture3D_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_UInt16.name = TextureAtomicAnd_Texture3D_UInt16_name;
    TextureAtomicAnd_Texture3D_UInt16.backendIndex = 2893;
    TextureAtomicAnd_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture3D_UInt16.parameters = TextureAtomicAnd_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->name = "textureAtomicAnd(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture3D, Int32x3, Int16
    TextureAtomicAnd_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_Int16_texture.type.modifiers = TextureAtomicAnd_Texture3D_Int16_texture_modifiers;
    TextureAtomicAnd_Texture3D_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture3D_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_Int16.name = TextureAtomicAnd_Texture3D_Int16_name;
    TextureAtomicAnd_Texture3D_Int16.backendIndex = 2894;
    TextureAtomicAnd_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture3D_Int16.parameters = TextureAtomicAnd_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->name = "textureAtomicAnd(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with TextureCube, Int32x3, UInt32
    TextureAtomicAnd_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_UInt32_texture.type.modifiers = TextureAtomicAnd_TextureCube_UInt32_texture_modifiers;
    TextureAtomicAnd_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicAnd_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicAnd_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_UInt32.name = TextureAtomicAnd_TextureCube_UInt32_name;
    TextureAtomicAnd_TextureCube_UInt32.backendIndex = 2895;
    TextureAtomicAnd_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_TextureCube_UInt32.parameters = TextureAtomicAnd_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->name = "textureAtomicAnd(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with TextureCube, Int32x3, Int32
    TextureAtomicAnd_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_Int32_texture.type.modifiers = TextureAtomicAnd_TextureCube_Int32_texture_modifiers;
    TextureAtomicAnd_TextureCube_Int32_texture.type.modifierValues = TextureAtomicAnd_TextureCube_Int32_texture_modifierValues;
    TextureAtomicAnd_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_Int32.name = TextureAtomicAnd_TextureCube_Int32_name;
    TextureAtomicAnd_TextureCube_Int32.backendIndex = 2896;
    TextureAtomicAnd_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_TextureCube_Int32.parameters = TextureAtomicAnd_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->name = "textureAtomicAnd(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with TextureCube, Int32x3, UInt16
    TextureAtomicAnd_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_UInt16_texture.type.modifiers = TextureAtomicAnd_TextureCube_UInt16_texture_modifiers;
    TextureAtomicAnd_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicAnd_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicAnd_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_UInt16.name = TextureAtomicAnd_TextureCube_UInt16_name;
    TextureAtomicAnd_TextureCube_UInt16.backendIndex = 2897;
    TextureAtomicAnd_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_TextureCube_UInt16.parameters = TextureAtomicAnd_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->name = "textureAtomicAnd(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with TextureCube, Int32x3, Int16
    TextureAtomicAnd_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_Int16_texture.type.modifiers = TextureAtomicAnd_TextureCube_Int16_texture_modifiers;
    TextureAtomicAnd_TextureCube_Int16_texture.type.modifierValues = TextureAtomicAnd_TextureCube_Int16_texture_modifierValues;
    TextureAtomicAnd_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_Int16.name = TextureAtomicAnd_TextureCube_Int16_name;
    TextureAtomicAnd_TextureCube_Int16.backendIndex = 2898;
    TextureAtomicAnd_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_TextureCube_Int16.parameters = TextureAtomicAnd_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->name = "textureAtomicAnd(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, UInt32
    TextureAtomicAnd_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_UInt32.name = TextureAtomicAnd_Texture1DArray_UInt32_name;
    TextureAtomicAnd_Texture1DArray_UInt32.backendIndex = 2899;
    TextureAtomicAnd_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture1DArray_UInt32.parameters = TextureAtomicAnd_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, Int32
    TextureAtomicAnd_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_Int32.name = TextureAtomicAnd_Texture1DArray_Int32_name;
    TextureAtomicAnd_Texture1DArray_Int32.backendIndex = 2900;
    TextureAtomicAnd_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture1DArray_Int32.parameters = TextureAtomicAnd_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, UInt16
    TextureAtomicAnd_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_UInt16.name = TextureAtomicAnd_Texture1DArray_UInt16_name;
    TextureAtomicAnd_Texture1DArray_UInt16.backendIndex = 2901;
    TextureAtomicAnd_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture1DArray_UInt16.parameters = TextureAtomicAnd_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, Int16
    TextureAtomicAnd_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_Int16.name = TextureAtomicAnd_Texture1DArray_Int16_name;
    TextureAtomicAnd_Texture1DArray_Int16.backendIndex = 2902;
    TextureAtomicAnd_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture1DArray_Int16.parameters = TextureAtomicAnd_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, UInt32
    TextureAtomicAnd_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_UInt32.name = TextureAtomicAnd_Texture2DArray_UInt32_name;
    TextureAtomicAnd_Texture2DArray_UInt32.backendIndex = 2903;
    TextureAtomicAnd_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture2DArray_UInt32.parameters = TextureAtomicAnd_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, Int32
    TextureAtomicAnd_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_Int32.name = TextureAtomicAnd_Texture2DArray_Int32_name;
    TextureAtomicAnd_Texture2DArray_Int32.backendIndex = 2904;
    TextureAtomicAnd_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture2DArray_Int32.parameters = TextureAtomicAnd_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, UInt16
    TextureAtomicAnd_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_UInt16.name = TextureAtomicAnd_Texture2DArray_UInt16_name;
    TextureAtomicAnd_Texture2DArray_UInt16.backendIndex = 2905;
    TextureAtomicAnd_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture2DArray_UInt16.parameters = TextureAtomicAnd_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, Int16
    TextureAtomicAnd_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_Int16.name = TextureAtomicAnd_Texture2DArray_Int16_name;
    TextureAtomicAnd_Texture2DArray_Int16.backendIndex = 2906;
    TextureAtomicAnd_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture2DArray_Int16.parameters = TextureAtomicAnd_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, UInt32
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_UInt32.name = TextureAtomicAnd_TextureCubeArray_UInt32_name;
    TextureAtomicAnd_TextureCubeArray_UInt32.backendIndex = 2907;
    TextureAtomicAnd_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt32.parameters = TextureAtomicAnd_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, Int32
    TextureAtomicAnd_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_Int32.name = TextureAtomicAnd_TextureCubeArray_Int32_name;
    TextureAtomicAnd_TextureCubeArray_Int32.backendIndex = 2908;
    TextureAtomicAnd_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_TextureCubeArray_Int32.parameters = TextureAtomicAnd_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, UInt16
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_UInt16.name = TextureAtomicAnd_TextureCubeArray_UInt16_name;
    TextureAtomicAnd_TextureCubeArray_UInt16.backendIndex = 2909;
    TextureAtomicAnd_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt16.parameters = TextureAtomicAnd_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, Int16
    TextureAtomicAnd_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_Int16.name = TextureAtomicAnd_TextureCubeArray_Int16_name;
    TextureAtomicAnd_TextureCubeArray_Int16.backendIndex = 2910;
    TextureAtomicAnd_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_TextureCubeArray_Int16.parameters = TextureAtomicAnd_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture1D, Int32, UInt32
    TextureAtomicOr_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_UInt32_texture.type.modifiers = TextureAtomicOr_Texture1D_UInt32_texture_modifiers;
    TextureAtomicOr_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_UInt32.name = TextureAtomicOr_Texture1D_UInt32_name;
    TextureAtomicOr_Texture1D_UInt32.backendIndex = 2911;
    TextureAtomicOr_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture1D_UInt32.parameters = TextureAtomicOr_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->signature = "textureAtomicOr(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->name = "textureAtomicOr(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture1D, Int32, Int32
    TextureAtomicOr_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_Int32_texture.type.modifiers = TextureAtomicOr_Texture1D_Int32_texture_modifiers;
    TextureAtomicOr_Texture1D_Int32_texture.type.modifierValues = TextureAtomicOr_Texture1D_Int32_texture_modifierValues;
    TextureAtomicOr_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_Int32.name = TextureAtomicOr_Texture1D_Int32_name;
    TextureAtomicOr_Texture1D_Int32.backendIndex = 2912;
    TextureAtomicOr_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture1D_Int32.parameters = TextureAtomicOr_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->signature = "textureAtomicOr(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->name = "textureAtomicOr(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture1D, Int32, UInt16
    TextureAtomicOr_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_UInt16_texture.type.modifiers = TextureAtomicOr_Texture1D_UInt16_texture_modifiers;
    TextureAtomicOr_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_UInt16.name = TextureAtomicOr_Texture1D_UInt16_name;
    TextureAtomicOr_Texture1D_UInt16.backendIndex = 2913;
    TextureAtomicOr_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture1D_UInt16.parameters = TextureAtomicOr_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->signature = "textureAtomicOr(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->name = "textureAtomicOr(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture1D, Int32, Int16
    TextureAtomicOr_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_Int16_texture.type.modifiers = TextureAtomicOr_Texture1D_Int16_texture_modifiers;
    TextureAtomicOr_Texture1D_Int16_texture.type.modifierValues = TextureAtomicOr_Texture1D_Int16_texture_modifierValues;
    TextureAtomicOr_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_Int16.name = TextureAtomicOr_Texture1D_Int16_name;
    TextureAtomicOr_Texture1D_Int16.backendIndex = 2914;
    TextureAtomicOr_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture1D_Int16.parameters = TextureAtomicOr_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->signature = "textureAtomicOr(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->name = "textureAtomicOr(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture2D, Int32x2, UInt32
    TextureAtomicOr_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_UInt32_texture.type.modifiers = TextureAtomicOr_Texture2D_UInt32_texture_modifiers;
    TextureAtomicOr_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_UInt32.name = TextureAtomicOr_Texture2D_UInt32_name;
    TextureAtomicOr_Texture2D_UInt32.backendIndex = 2915;
    TextureAtomicOr_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture2D_UInt32.parameters = TextureAtomicOr_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->signature = "textureAtomicOr(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->name = "textureAtomicOr(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture2D, Int32x2, Int32
    TextureAtomicOr_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_Int32_texture.type.modifiers = TextureAtomicOr_Texture2D_Int32_texture_modifiers;
    TextureAtomicOr_Texture2D_Int32_texture.type.modifierValues = TextureAtomicOr_Texture2D_Int32_texture_modifierValues;
    TextureAtomicOr_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_Int32.name = TextureAtomicOr_Texture2D_Int32_name;
    TextureAtomicOr_Texture2D_Int32.backendIndex = 2916;
    TextureAtomicOr_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture2D_Int32.parameters = TextureAtomicOr_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->signature = "textureAtomicOr(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->name = "textureAtomicOr(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture2D, Int32x2, UInt16
    TextureAtomicOr_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_UInt16_texture.type.modifiers = TextureAtomicOr_Texture2D_UInt16_texture_modifiers;
    TextureAtomicOr_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_UInt16.name = TextureAtomicOr_Texture2D_UInt16_name;
    TextureAtomicOr_Texture2D_UInt16.backendIndex = 2917;
    TextureAtomicOr_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture2D_UInt16.parameters = TextureAtomicOr_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->signature = "textureAtomicOr(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->name = "textureAtomicOr(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture2D, Int32x2, Int16
    TextureAtomicOr_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_Int16_texture.type.modifiers = TextureAtomicOr_Texture2D_Int16_texture_modifiers;
    TextureAtomicOr_Texture2D_Int16_texture.type.modifierValues = TextureAtomicOr_Texture2D_Int16_texture_modifierValues;
    TextureAtomicOr_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_Int16.name = TextureAtomicOr_Texture2D_Int16_name;
    TextureAtomicOr_Texture2D_Int16.backendIndex = 2918;
    TextureAtomicOr_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture2D_Int16.parameters = TextureAtomicOr_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->signature = "textureAtomicOr(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->name = "textureAtomicOr(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture3D, Int32x3, UInt32
    TextureAtomicOr_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_UInt32_texture.type.modifiers = TextureAtomicOr_Texture3D_UInt32_texture_modifiers;
    TextureAtomicOr_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_UInt32.name = TextureAtomicOr_Texture3D_UInt32_name;
    TextureAtomicOr_Texture3D_UInt32.backendIndex = 2919;
    TextureAtomicOr_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture3D_UInt32.parameters = TextureAtomicOr_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->signature = "textureAtomicOr(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->name = "textureAtomicOr(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture3D, Int32x3, Int32
    TextureAtomicOr_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_Int32_texture.type.modifiers = TextureAtomicOr_Texture3D_Int32_texture_modifiers;
    TextureAtomicOr_Texture3D_Int32_texture.type.modifierValues = TextureAtomicOr_Texture3D_Int32_texture_modifierValues;
    TextureAtomicOr_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_Int32.name = TextureAtomicOr_Texture3D_Int32_name;
    TextureAtomicOr_Texture3D_Int32.backendIndex = 2920;
    TextureAtomicOr_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture3D_Int32.parameters = TextureAtomicOr_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->signature = "textureAtomicOr(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->name = "textureAtomicOr(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture3D, Int32x3, UInt16
    TextureAtomicOr_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_UInt16_texture.type.modifiers = TextureAtomicOr_Texture3D_UInt16_texture_modifiers;
    TextureAtomicOr_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_UInt16.name = TextureAtomicOr_Texture3D_UInt16_name;
    TextureAtomicOr_Texture3D_UInt16.backendIndex = 2921;
    TextureAtomicOr_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture3D_UInt16.parameters = TextureAtomicOr_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->signature = "textureAtomicOr(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->name = "textureAtomicOr(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture3D, Int32x3, Int16
    TextureAtomicOr_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_Int16_texture.type.modifiers = TextureAtomicOr_Texture3D_Int16_texture_modifiers;
    TextureAtomicOr_Texture3D_Int16_texture.type.modifierValues = TextureAtomicOr_Texture3D_Int16_texture_modifierValues;
    TextureAtomicOr_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_Int16.name = TextureAtomicOr_Texture3D_Int16_name;
    TextureAtomicOr_Texture3D_Int16.backendIndex = 2922;
    TextureAtomicOr_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture3D_Int16.parameters = TextureAtomicOr_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->signature = "textureAtomicOr(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->name = "textureAtomicOr(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with TextureCube, Int32x3, UInt32
    TextureAtomicOr_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_UInt32_texture.type.modifiers = TextureAtomicOr_TextureCube_UInt32_texture_modifiers;
    TextureAtomicOr_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicOr_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicOr_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicOr_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_UInt32.name = TextureAtomicOr_TextureCube_UInt32_name;
    TextureAtomicOr_TextureCube_UInt32.backendIndex = 2923;
    TextureAtomicOr_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_TextureCube_UInt32.parameters = TextureAtomicOr_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->signature = "textureAtomicOr(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->name = "textureAtomicOr(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with TextureCube, Int32x3, Int32
    TextureAtomicOr_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_Int32_texture.type.modifiers = TextureAtomicOr_TextureCube_Int32_texture_modifiers;
    TextureAtomicOr_TextureCube_Int32_texture.type.modifierValues = TextureAtomicOr_TextureCube_Int32_texture_modifierValues;
    TextureAtomicOr_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicOr_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_Int32.name = TextureAtomicOr_TextureCube_Int32_name;
    TextureAtomicOr_TextureCube_Int32.backendIndex = 2924;
    TextureAtomicOr_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_TextureCube_Int32.parameters = TextureAtomicOr_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->signature = "textureAtomicOr(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->name = "textureAtomicOr(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with TextureCube, Int32x3, UInt16
    TextureAtomicOr_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_UInt16_texture.type.modifiers = TextureAtomicOr_TextureCube_UInt16_texture_modifiers;
    TextureAtomicOr_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicOr_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicOr_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicOr_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_UInt16.name = TextureAtomicOr_TextureCube_UInt16_name;
    TextureAtomicOr_TextureCube_UInt16.backendIndex = 2925;
    TextureAtomicOr_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_TextureCube_UInt16.parameters = TextureAtomicOr_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->signature = "textureAtomicOr(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->name = "textureAtomicOr(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with TextureCube, Int32x3, Int16
    TextureAtomicOr_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_Int16_texture.type.modifiers = TextureAtomicOr_TextureCube_Int16_texture_modifiers;
    TextureAtomicOr_TextureCube_Int16_texture.type.modifierValues = TextureAtomicOr_TextureCube_Int16_texture_modifierValues;
    TextureAtomicOr_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicOr_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_Int16.name = TextureAtomicOr_TextureCube_Int16_name;
    TextureAtomicOr_TextureCube_Int16.backendIndex = 2926;
    TextureAtomicOr_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_TextureCube_Int16.parameters = TextureAtomicOr_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->signature = "textureAtomicOr(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->name = "textureAtomicOr(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture1DArray, Int32x2, UInt32
    TextureAtomicOr_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicOr_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicOr_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicOr_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1DArray_UInt32.name = TextureAtomicOr_Texture1DArray_UInt32_name;
    TextureAtomicOr_Texture1DArray_UInt32.backendIndex = 2927;
    TextureAtomicOr_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture1DArray_UInt32.parameters = TextureAtomicOr_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->signature = "textureAtomicOr(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->name = "textureAtomicOr(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture1DArray, Int32x2, Int32
    TextureAtomicOr_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicOr_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicOr_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicOr_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicOr_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicOr_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1DArray_Int32.name = TextureAtomicOr_Texture1DArray_Int32_name;
    TextureAtomicOr_Texture1DArray_Int32.backendIndex = 2928;
    TextureAtomicOr_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture1DArray_Int32.parameters = TextureAtomicOr_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->signature = "textureAtomicOr(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->name = "textureAtomicOr(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture1DArray, Int32x2, UInt16
    TextureAtomicOr_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicOr_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicOr_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicOr_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1DArray_UInt16.name = TextureAtomicOr_Texture1DArray_UInt16_name;
    TextureAtomicOr_Texture1DArray_UInt16.backendIndex = 2929;
    TextureAtomicOr_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture1DArray_UInt16.parameters = TextureAtomicOr_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16)->signature = "textureAtomicOr(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16)->name = "textureAtomicOr(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture1DArray, Int32x2, Int16
    TextureAtomicOr_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicOr_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicOr_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicOr_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicOr_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicOr_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1DArray_Int16.name = TextureAtomicOr_Texture1DArray_Int16_name;
    TextureAtomicOr_Texture1DArray_Int16.backendIndex = 2930;
    TextureAtomicOr_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture1DArray_Int16.parameters = TextureAtomicOr_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int16)->signature = "textureAtomicOr(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int16)->name = "textureAtomicOr(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture2DArray, Int32x3, UInt32
    TextureAtomicOr_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicOr_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicOr_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicOr_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2DArray_UInt32.name = TextureAtomicOr_Texture2DArray_UInt32_name;
    TextureAtomicOr_Texture2DArray_UInt32.backendIndex = 2931;
    TextureAtomicOr_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture2DArray_UInt32.parameters = TextureAtomicOr_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt32)->signature = "textureAtomicOr(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt32)->name = "textureAtomicOr(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture2DArray, Int32x3, Int32
    TextureAtomicOr_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicOr_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicOr_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicOr_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicOr_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicOr_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2DArray_Int32.name = TextureAtomicOr_Texture2DArray_Int32_name;
    TextureAtomicOr_Texture2DArray_Int32.backendIndex = 2932;
    TextureAtomicOr_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture2DArray_Int32.parameters = TextureAtomicOr_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int32)->signature = "textureAtomicOr(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int32)->name = "textureAtomicOr(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture2DArray, Int32x3, UInt16
    TextureAtomicOr_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicOr_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicOr_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicOr_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2DArray_UInt16.name = TextureAtomicOr_Texture2DArray_UInt16_name;
    TextureAtomicOr_Texture2DArray_UInt16.backendIndex = 2933;
    TextureAtomicOr_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture2DArray_UInt16.parameters = TextureAtomicOr_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt16)->signature = "textureAtomicOr(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt16)->name = "textureAtomicOr(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture2DArray, Int32x3, Int16
    TextureAtomicOr_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicOr_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicOr_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicOr_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicOr_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicOr_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2DArray_Int16.name = TextureAtomicOr_Texture2DArray_Int16_name;
    TextureAtomicOr_Texture2DArray_Int16.backendIndex = 2934;
    TextureAtomicOr_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture2DArray_Int16.parameters = TextureAtomicOr_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int16)->signature = "textureAtomicOr(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int16)->name = "textureAtomicOr(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with TextureCubeArray, Int32x4, UInt32
    TextureAtomicOr_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicOr_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicOr_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicOr_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicOr_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicOr_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicOr_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicOr_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCubeArray_UInt32.name = TextureAtomicOr_TextureCubeArray_UInt32_name;
    TextureAtomicOr_TextureCubeArray_UInt32.backendIndex = 2935;
    TextureAtomicOr_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_TextureCubeArray_UInt32.parameters = TextureAtomicOr_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt32)->signature = "textureAtomicOr(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt32)->name = "textureAtomicOr(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with TextureCubeArray, Int32x4, Int32
    TextureAtomicOr_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicOr_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicOr_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicOr_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicOr_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicOr_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicOr_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicOr_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicOr_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCubeArray_Int32.name = TextureAtomicOr_TextureCubeArray_Int32_name;
    TextureAtomicOr_TextureCubeArray_Int32.backendIndex = 2936;
    TextureAtomicOr_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_TextureCubeArray_Int32.parameters = TextureAtomicOr_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int32)->signature = "textureAtomicOr(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int32)->name = "textureAtomicOr(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with TextureCubeArray, Int32x4, UInt16
    TextureAtomicOr_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicOr_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicOr_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicOr_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicOr_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicOr_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicOr_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicOr_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCubeArray_UInt16.name = TextureAtomicOr_TextureCubeArray_UInt16_name;
    TextureAtomicOr_TextureCubeArray_UInt16.backendIndex = 2937;
    TextureAtomicOr_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_TextureCubeArray_UInt16.parameters = TextureAtomicOr_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt16)->signature = "textureAtomicOr(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt16)->name = "textureAtomicOr(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with TextureCubeArray, Int32x4, Int16
    TextureAtomicOr_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicOr_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicOr_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicOr_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicOr_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicOr_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicOr_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicOr_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicOr_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCubeArray_Int16.name = TextureAtomicOr_TextureCubeArray_Int16_name;
    TextureAtomicOr_TextureCubeArray_Int16.backendIndex = 2938;
    TextureAtomicOr_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_TextureCubeArray_Int16.parameters = TextureAtomicOr_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int16)->signature = "textureAtomicOr(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int16)->name = "textureAtomicOr(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicXor with Texture1D, Int32, UInt32
    TextureAtomicXor_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicXor_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicXor_Texture1D_UInt32_texture.type.modifiers = TextureAtomicXor_Texture1D_UInt32_texture_modifiers;
    TextureAtomicXor_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicXor_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicXor_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicXor_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicXor_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicXor_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture1D_UInt32.name = TextureAtomicXor_Texture1D_UInt32_name;
    TextureAtomicXor_Texture1D_UInt32.backendIndex = 2939;
    TextureAtomicXor_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicXor_Texture1D_UInt32.parameters = TextureAtomicXor_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt32)->signature = "textureAtomicXor(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt32)->name = "textureAtomicXor(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt32)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicXor with Texture1D, Int32, Int32
    TextureAtomicXor_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicXor_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicXor_Texture1D_Int32_texture.type.modifiers = TextureAtomicXor_Texture1D_Int32_texture_modifiers;
    TextureAtomicXor_Texture1D_Int32_texture.type.modifierValues = TextureAtomicXor_Texture1D_Int32_texture_modifierValues;
    TextureAtomicXor_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicXor_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicXor_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicXor_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture1D_Int32.name = TextureAtomicXor_Texture1D_Int32_name;
    TextureAtomicXor_Texture1D_Int32.backendIndex = 2940;
    TextureAtomicXor_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicXor_Texture1D_Int32.parameters = TextureAtomicXor_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int32)->signature = "textureAtomicXor(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int32)->name = "textureAtomicXor(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int32)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicXor with Texture1D, Int32, UInt16
    TextureAtomicXor_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicXor_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicXor_Texture1D_UInt16_texture.type.modifiers = TextureAtomicXor_Texture1D_UInt16_texture_modifiers;
    TextureAtomicXor_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicXor_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicXor_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicXor_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicXor_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicXor_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture1D_UInt16.name = TextureAtomicXor_Texture1D_UInt16_name;
    TextureAtomicXor_Texture1D_UInt16.backendIndex = 2941;
    TextureAtomicXor_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicXor_Texture1D_UInt16.parameters = TextureAtomicXor_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt16)->signature = "textureAtomicXor(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt16)->name = "textureAtomicXor(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt16)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicXor with Texture1D, Int32, Int16
    TextureAtomicXor_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicXor_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicXor_Texture1D_Int16_texture.type.modifiers = TextureAtomicXor_Texture1D_Int16_texture_modifiers;
    TextureAtomicXor_Texture1D_Int16_texture.type.modifierValues = TextureAtomicXor_Texture1D_Int16_texture_modifierValues;
    TextureAtomicXor_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicXor_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicXor_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicXor_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture1D_Int16.name = TextureAtomicXor_Texture1D_Int16_name;
    TextureAtomicXor_Texture1D_Int16.backendIndex = 2942;
    TextureAtomicXor_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicXor_Texture1D_Int16.parameters = TextureAtomicXor_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int16)->signature = "textureAtomicXor(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int16)->name = "textureAtomicXor(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int16)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicXor with Texture2D, Int32x2, UInt32
    TextureAtomicXor_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicXor_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicXor_Texture2D_UInt32_texture.type.modifiers = TextureAtomicXor_Texture2D_UInt32_texture_modifiers;
    TextureAtomicXor_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicXor_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicXor_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicXor_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicXor_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicXor_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture2D_UInt32.name = TextureAtomicXor_Texture2D_UInt32_name;
    TextureAtomicXor_Texture2D_UInt32.backendIndex = 2943;
    TextureAtomicXor_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicXor_Texture2D_UInt32.parameters = TextureAtomicXor_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt32)->signature = "textureAtomicXor(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt32)->name = "textureAtomicXor(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt32)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicXor with Texture2D, Int32x2, Int32
    TextureAtomicXor_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicXor_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicXor_Texture2D_Int32_texture.type.modifiers = TextureAtomicXor_Texture2D_Int32_texture_modifiers;
    TextureAtomicXor_Texture2D_Int32_texture.type.modifierValues = TextureAtomicXor_Texture2D_Int32_texture_modifierValues;
    TextureAtomicXor_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicXor_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicXor_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicXor_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture2D_Int32.name = TextureAtomicXor_Texture2D_Int32_name;
    TextureAtomicXor_Texture2D_Int32.backendIndex = 2944;
    TextureAtomicXor_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicXor_Texture2D_Int32.parameters = TextureAtomicXor_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int32)->signature = "textureAtomicXor(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int32)->name = "textureAtomicXor(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int32)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicXor with Texture2D, Int32x2, UInt16
    TextureAtomicXor_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicXor_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicXor_Texture2D_UInt16_texture.type.modifiers = TextureAtomicXor_Texture2D_UInt16_texture_modifiers;
    TextureAtomicXor_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicXor_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicXor_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicXor_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicXor_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicXor_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture2D_UInt16.name = TextureAtomicXor_Texture2D_UInt16_name;
    TextureAtomicXor_Texture2D_UInt16.backendIndex = 2945;
    TextureAtomicXor_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicXor_Texture2D_UInt16.parameters = TextureAtomicXor_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt16)->signature = "textureAtomicXor(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt16)->name = "textureAtomicXor(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt16)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicXor with Texture2D, Int32x2, Int16
    TextureAtomicXor_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicXor_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicXor_Texture2D_Int16_texture.type.modifiers = TextureAtomicXor_Texture2D_Int16_texture_modifiers;
    TextureAtomicXor_Texture2D_Int16_texture.type.modifierValues = TextureAtomicXor_Texture2D_Int16_texture_modifierValues;
    TextureAtomicXor_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicXor_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicXor_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicXor_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture2D_Int16.name = TextureAtomicXor_Texture2D_Int16_name;
    TextureAtomicXor_Texture2D_Int16.backendIndex = 2946;
    TextureAtomicXor_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicXor_Texture2D_Int16.parameters = TextureAtomicXor_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int16)->signature = "textureAtomicXor(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int16)->name = "textureAtomicXor(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int16)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicXor with Texture3D, Int32x3, UInt32
    TextureAtomicXor_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicXor_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicXor_Texture3D_UInt32_texture.type.modifiers = TextureAtomicXor_Texture3D_UInt32_texture_modifiers;
    TextureAtomicXor_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicXor_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicXor_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicXor_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicXor_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicXor_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture3D_UInt32.name = TextureAtomicXor_Texture3D_UInt32_name;
    TextureAtomicXor_Texture3D_UInt32.backendIndex = 2947;
    TextureAtomicXor_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicXor_Texture3D_UInt32.parameters = TextureAtomicXor_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt32)->signature = "textureAtomicXor(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt32)->name = "textureAtomicXor(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt32)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicXor with Texture3D, Int32x3, Int32
    TextureAtomicXor_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicXor_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicXor_Texture3D_Int32_texture.type.modifiers = TextureAtomicXor_Texture3D_Int32_texture_modifiers;
    TextureAtomicXor_Texture3D_Int32_texture.type.modifierValues = TextureAtomicXor_Texture3D_Int32_texture_modifierValues;
    TextureAtomicXor_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicXor_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicXor_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicXor_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture3D_Int32.name = TextureAtomicXor_Texture3D_Int32_name;
    TextureAtomicXor_Texture3D_Int32.backendIndex = 2948;
    TextureAtomicXor_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicXor_Texture3D_Int32.parameters = TextureAtomicXor_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int32)->signature = "textureAtomicXor(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int32)->name = "textureAtomicXor(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int32)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicXor with Texture3D, Int32x3, UInt16
    TextureAtomicXor_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicXor_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicXor_Texture3D_UInt16_texture.type.modifiers = TextureAtomicXor_Texture3D_UInt16_texture_modifiers;
    TextureAtomicXor_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicXor_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicXor_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicXor_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicXor_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicXor_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture3D_UInt16.name = TextureAtomicXor_Texture3D_UInt16_name;
    TextureAtomicXor_Texture3D_UInt16.backendIndex = 2949;
    TextureAtomicXor_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicXor_Texture3D_UInt16.parameters = TextureAtomicXor_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt16)->signature = "textureAtomicXor(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt16)->name = "textureAtomicXor(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt16)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicXor with Texture3D, Int32x3, Int16
    TextureAtomicXor_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicXor_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicXor_Texture3D_Int16_texture.type.modifiers = TextureAtomicXor_Texture3D_Int16_texture_modifiers;
    TextureAtomicXor_Texture3D_Int16_texture.type.modifierValues = TextureAtomicXor_Texture3D_Int16_texture_modifierValues;
    TextureAtomicXor_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicXor_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicXor_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicXor_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture3D_Int16.name = TextureAtomicXor_Texture3D_Int16_name;
    TextureAtomicXor_Texture3D_Int16.backendIndex = 2950;
    TextureAtomicXor_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicXor_Texture3D_Int16.parameters = TextureAtomicXor_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int16)->signature = "textureAtomicXor(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int16)->name = "textureAtomicXor(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int16)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicXor with TextureCube, Int32x3, UInt32
    TextureAtomicXor_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicXor_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicXor_TextureCube_UInt32_texture.type.modifiers = TextureAtomicXor_TextureCube_UInt32_texture_modifiers;
    TextureAtomicXor_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicXor_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicXor_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicXor_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicXor_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicXor_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_TextureCube_UInt32.name = TextureAtomicXor_TextureCube_UInt32_name;
    TextureAtomicXor_TextureCube_UInt32.backendIndex = 2951;
    TextureAtomicXor_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicXor_TextureCube_UInt32.parameters = TextureAtomicXor_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt32)->signature = "textureAtomicXor(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt32)->name = "textureAtomicXor(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt32)->nameWithVarNames = "textureAtomicXor(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicXor with TextureCube, Int32x3, Int32
    TextureAtomicXor_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicXor_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicXor_TextureCube_Int32_texture.type.modifiers = TextureAtomicXor_TextureCube_Int32_texture_modifiers;
    TextureAtomicXor_TextureCube_Int32_texture.type.modifierValues = TextureAtomicXor_TextureCube_Int32_texture_modifierValues;
    TextureAtomicXor_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicXor_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicXor_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicXor_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_TextureCube_Int32.name = TextureAtomicXor_TextureCube_Int32_name;
    TextureAtomicXor_TextureCube_Int32.backendIndex = 2952;
    TextureAtomicXor_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicXor_TextureCube_Int32.parameters = TextureAtomicXor_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int32)->signature = "textureAtomicXor(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int32)->name = "textureAtomicXor(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int32)->nameWithVarNames = "textureAtomicXor(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicXor with TextureCube, Int32x3, UInt16
    TextureAtomicXor_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicXor_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicXor_TextureCube_UInt16_texture.type.modifiers = TextureAtomicXor_TextureCube_UInt16_texture_modifiers;
    TextureAtomicXor_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicXor_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicXor_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicXor_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicXor_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicXor_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_TextureCube_UInt16.name = TextureAtomicXor_TextureCube_UInt16_name;
    TextureAtomicXor_TextureCube_UInt16.backendIndex = 2953;
    TextureAtomicXor_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicXor_TextureCube_UInt16.parameters = TextureAtomicXor_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt16)->signature = "textureAtomicXor(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt16)->name = "textureAtomicXor(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt16)->nameWithVarNames = "textureAtomicXor(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicXor with TextureCube, Int32x3, Int16
    TextureAtomicXor_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicXor_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicXor_TextureCube_Int16_texture.type.modifiers = TextureAtomicXor_TextureCube_Int16_texture_modifiers;
    TextureAtomicXor_TextureCube_Int16_texture.type.modifierValues = TextureAtomicXor_TextureCube_Int16_texture_modifierValues;
    TextureAtomicXor_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicXor_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicXor_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicXor_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_TextureCube_Int16.name = TextureAtomicXor_TextureCube_Int16_name;
    TextureAtomicXor_TextureCube_Int16.backendIndex = 2954;
    TextureAtomicXor_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicXor_TextureCube_Int16.parameters = TextureAtomicXor_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int16)->signature = "textureAtomicXor(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int16)->name = "textureAtomicXor(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int16)->nameWithVarNames = "textureAtomicXor(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicXor with Texture1DArray, Int32x2, UInt32
    TextureAtomicXor_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicXor_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicXor_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicXor_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicXor_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicXor_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicXor_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicXor_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicXor_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicXor_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture1DArray_UInt32.name = TextureAtomicXor_Texture1DArray_UInt32_name;
    TextureAtomicXor_Texture1DArray_UInt32.backendIndex = 2955;
    TextureAtomicXor_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicXor_Texture1DArray_UInt32.parameters = TextureAtomicXor_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt32)->signature = "textureAtomicXor(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt32)->name = "textureAtomicXor(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicXor with Texture1DArray, Int32x2, Int32
    TextureAtomicXor_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicXor_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicXor_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicXor_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicXor_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicXor_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicXor_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicXor_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicXor_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicXor_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture1DArray_Int32.name = TextureAtomicXor_Texture1DArray_Int32_name;
    TextureAtomicXor_Texture1DArray_Int32.backendIndex = 2956;
    TextureAtomicXor_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicXor_Texture1DArray_Int32.parameters = TextureAtomicXor_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int32)->signature = "textureAtomicXor(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int32)->name = "textureAtomicXor(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicXor with Texture1DArray, Int32x2, UInt16
    TextureAtomicXor_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicXor_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicXor_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicXor_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicXor_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicXor_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicXor_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicXor_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicXor_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicXor_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture1DArray_UInt16.name = TextureAtomicXor_Texture1DArray_UInt16_name;
    TextureAtomicXor_Texture1DArray_UInt16.backendIndex = 2957;
    TextureAtomicXor_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicXor_Texture1DArray_UInt16.parameters = TextureAtomicXor_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt16)->signature = "textureAtomicXor(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt16)->name = "textureAtomicXor(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicXor with Texture1DArray, Int32x2, Int16
    TextureAtomicXor_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicXor_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicXor_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicXor_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicXor_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicXor_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicXor_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicXor_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicXor_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicXor_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture1DArray_Int16.name = TextureAtomicXor_Texture1DArray_Int16_name;
    TextureAtomicXor_Texture1DArray_Int16.backendIndex = 2958;
    TextureAtomicXor_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicXor_Texture1DArray_Int16.parameters = TextureAtomicXor_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int16)->signature = "textureAtomicXor(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int16)->name = "textureAtomicXor(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicXor with Texture2DArray, Int32x3, UInt32
    TextureAtomicXor_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicXor_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicXor_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicXor_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicXor_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicXor_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicXor_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicXor_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicXor_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicXor_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture2DArray_UInt32.name = TextureAtomicXor_Texture2DArray_UInt32_name;
    TextureAtomicXor_Texture2DArray_UInt32.backendIndex = 2959;
    TextureAtomicXor_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicXor_Texture2DArray_UInt32.parameters = TextureAtomicXor_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt32)->signature = "textureAtomicXor(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt32)->name = "textureAtomicXor(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicXor with Texture2DArray, Int32x3, Int32
    TextureAtomicXor_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicXor_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicXor_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicXor_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicXor_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicXor_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicXor_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicXor_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicXor_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicXor_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture2DArray_Int32.name = TextureAtomicXor_Texture2DArray_Int32_name;
    TextureAtomicXor_Texture2DArray_Int32.backendIndex = 2960;
    TextureAtomicXor_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicXor_Texture2DArray_Int32.parameters = TextureAtomicXor_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int32)->signature = "textureAtomicXor(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int32)->name = "textureAtomicXor(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicXor with Texture2DArray, Int32x3, UInt16
    TextureAtomicXor_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicXor_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicXor_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicXor_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicXor_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicXor_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicXor_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicXor_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicXor_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicXor_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture2DArray_UInt16.name = TextureAtomicXor_Texture2DArray_UInt16_name;
    TextureAtomicXor_Texture2DArray_UInt16.backendIndex = 2961;
    TextureAtomicXor_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicXor_Texture2DArray_UInt16.parameters = TextureAtomicXor_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt16)->signature = "textureAtomicXor(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt16)->name = "textureAtomicXor(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicXor with Texture2DArray, Int32x3, Int16
    TextureAtomicXor_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicXor_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicXor_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicXor_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicXor_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicXor_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicXor_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicXor_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicXor_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicXor_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_Texture2DArray_Int16.name = TextureAtomicXor_Texture2DArray_Int16_name;
    TextureAtomicXor_Texture2DArray_Int16.backendIndex = 2962;
    TextureAtomicXor_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicXor_Texture2DArray_Int16.parameters = TextureAtomicXor_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int16)->signature = "textureAtomicXor(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int16)->name = "textureAtomicXor(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicXor(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicXor with TextureCubeArray, Int32x4, UInt32
    TextureAtomicXor_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicXor_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicXor_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicXor_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicXor_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicXor_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicXor_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicXor_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicXor_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicXor_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_TextureCubeArray_UInt32.name = TextureAtomicXor_TextureCubeArray_UInt32_name;
    TextureAtomicXor_TextureCubeArray_UInt32.backendIndex = 2963;
    TextureAtomicXor_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicXor_TextureCubeArray_UInt32.parameters = TextureAtomicXor_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt32)->signature = "textureAtomicXor(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt32)->name = "textureAtomicXor(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicXor(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicXor with TextureCubeArray, Int32x4, Int32
    TextureAtomicXor_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicXor_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicXor_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicXor_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicXor_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicXor_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicXor_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicXor_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicXor_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicXor_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicXor_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_TextureCubeArray_Int32.name = TextureAtomicXor_TextureCubeArray_Int32_name;
    TextureAtomicXor_TextureCubeArray_Int32.backendIndex = 2964;
    TextureAtomicXor_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicXor_TextureCubeArray_Int32.parameters = TextureAtomicXor_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int32)->signature = "textureAtomicXor(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int32)->name = "textureAtomicXor(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicXor(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicXor with TextureCubeArray, Int32x4, UInt16
    TextureAtomicXor_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicXor_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicXor_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicXor_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicXor_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicXor_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicXor_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicXor_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicXor_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicXor_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_TextureCubeArray_UInt16.name = TextureAtomicXor_TextureCubeArray_UInt16_name;
    TextureAtomicXor_TextureCubeArray_UInt16.backendIndex = 2965;
    TextureAtomicXor_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicXor_TextureCubeArray_UInt16.parameters = TextureAtomicXor_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt16)->signature = "textureAtomicXor(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt16)->name = "textureAtomicXor(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicXor(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicXor with TextureCubeArray, Int32x4, Int16
    TextureAtomicXor_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicXor_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicXor_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicXor_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicXor_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicXor_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicXor_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicXor_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicXor_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicXor_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicXor_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicXor_TextureCubeArray_Int16.name = TextureAtomicXor_TextureCubeArray_Int16_name;
    TextureAtomicXor_TextureCubeArray_Int16.backendIndex = 2966;
    TextureAtomicXor_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicXor_TextureCubeArray_Int16.parameters = TextureAtomicXor_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int16)->signature = "textureAtomicXor(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int16)->name = "textureAtomicXor(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicXor(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicXor_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

}
} // namespace GPULang
