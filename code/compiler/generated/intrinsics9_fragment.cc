//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// subgroupSwapHorizontal with Int16x3
Variable SubgroupSwapHorizontal_Int16x3_value;
Function SubgroupSwapHorizontal_Int16x3;
inline constexpr std::array SubgroupSwapHorizontal_Int16x3_args = { &SubgroupSwapHorizontal_Int16x3_value };

/// subgroupSwapHorizontal with Int16x4
Variable SubgroupSwapHorizontal_Int16x4_value;
Function SubgroupSwapHorizontal_Int16x4;
inline constexpr std::array SubgroupSwapHorizontal_Int16x4_args = { &SubgroupSwapHorizontal_Int16x4_value };

/// subgroupSwapHorizontal with UInt32
Variable SubgroupSwapHorizontal_UInt32_value;
Function SubgroupSwapHorizontal_UInt32;
inline constexpr std::array SubgroupSwapHorizontal_UInt32_args = { &SubgroupSwapHorizontal_UInt32_value };

/// subgroupSwapHorizontal with UInt32x2
Variable SubgroupSwapHorizontal_UInt32x2_value;
Function SubgroupSwapHorizontal_UInt32x2;
inline constexpr std::array SubgroupSwapHorizontal_UInt32x2_args = { &SubgroupSwapHorizontal_UInt32x2_value };

/// subgroupSwapHorizontal with UInt32x3
Variable SubgroupSwapHorizontal_UInt32x3_value;
Function SubgroupSwapHorizontal_UInt32x3;
inline constexpr std::array SubgroupSwapHorizontal_UInt32x3_args = { &SubgroupSwapHorizontal_UInt32x3_value };

/// subgroupSwapHorizontal with UInt32x4
Variable SubgroupSwapHorizontal_UInt32x4_value;
Function SubgroupSwapHorizontal_UInt32x4;
inline constexpr std::array SubgroupSwapHorizontal_UInt32x4_args = { &SubgroupSwapHorizontal_UInt32x4_value };

/// subgroupSwapHorizontal with UInt16
Variable SubgroupSwapHorizontal_UInt16_value;
Function SubgroupSwapHorizontal_UInt16;
inline constexpr std::array SubgroupSwapHorizontal_UInt16_args = { &SubgroupSwapHorizontal_UInt16_value };

/// subgroupSwapHorizontal with UInt16x2
Variable SubgroupSwapHorizontal_UInt16x2_value;
Function SubgroupSwapHorizontal_UInt16x2;
inline constexpr std::array SubgroupSwapHorizontal_UInt16x2_args = { &SubgroupSwapHorizontal_UInt16x2_value };

/// subgroupSwapHorizontal with UInt16x3
Variable SubgroupSwapHorizontal_UInt16x3_value;
Function SubgroupSwapHorizontal_UInt16x3;
inline constexpr std::array SubgroupSwapHorizontal_UInt16x3_args = { &SubgroupSwapHorizontal_UInt16x3_value };

/// subgroupSwapHorizontal with UInt16x4
Variable SubgroupSwapHorizontal_UInt16x4_value;
Function SubgroupSwapHorizontal_UInt16x4;
inline constexpr std::array SubgroupSwapHorizontal_UInt16x4_args = { &SubgroupSwapHorizontal_UInt16x4_value };

/// atomicLoad with UInt32, MemorySemantics
Variable AtomicLoad_Uniform_UInt32_ptr;
inline constexpr std::array AtomicLoad_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Uniform_UInt32_semantics;
Function AtomicLoad_Uniform_UInt32;
inline constexpr std::array AtomicLoad_Uniform_UInt32_args = { &AtomicLoad_Uniform_UInt32_ptr, &AtomicLoad_Uniform_UInt32_semantics };

/// atomicLoad with UInt32, MemorySemantics
Variable AtomicLoad_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicLoad_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Workgroup_UInt32_semantics;
Function AtomicLoad_Workgroup_UInt32;
inline constexpr std::array AtomicLoad_Workgroup_UInt32_args = { &AtomicLoad_Workgroup_UInt32_ptr, &AtomicLoad_Workgroup_UInt32_semantics };

/// atomicIncrement with UInt32, MemorySemantics
Variable AtomicIncrement_Uniform_UInt32_ptr;
inline constexpr std::array AtomicIncrement_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicIncrement_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicIncrement_Uniform_UInt32_semantics;
Function AtomicIncrement_Uniform_UInt32;
inline constexpr std::array AtomicIncrement_Uniform_UInt32_args = { &AtomicIncrement_Uniform_UInt32_ptr, &AtomicIncrement_Uniform_UInt32_semantics };

/// atomicIncrement with UInt32, MemorySemantics
Variable AtomicIncrement_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicIncrement_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicIncrement_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicIncrement_Workgroup_UInt32_semantics;
Function AtomicIncrement_Workgroup_UInt32;
inline constexpr std::array AtomicIncrement_Workgroup_UInt32_args = { &AtomicIncrement_Workgroup_UInt32_ptr, &AtomicIncrement_Workgroup_UInt32_semantics };

/// atomicDecrement with UInt32, MemorySemantics
Variable AtomicDecrement_Uniform_UInt32_ptr;
inline constexpr std::array AtomicDecrement_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicDecrement_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicDecrement_Uniform_UInt32_semantics;
Function AtomicDecrement_Uniform_UInt32;
inline constexpr std::array AtomicDecrement_Uniform_UInt32_args = { &AtomicDecrement_Uniform_UInt32_ptr, &AtomicDecrement_Uniform_UInt32_semantics };

/// atomicDecrement with UInt32, MemorySemantics
Variable AtomicDecrement_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicDecrement_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicDecrement_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicDecrement_Workgroup_UInt32_semantics;
Function AtomicDecrement_Workgroup_UInt32;
inline constexpr std::array AtomicDecrement_Workgroup_UInt32_args = { &AtomicDecrement_Workgroup_UInt32_ptr, &AtomicDecrement_Workgroup_UInt32_semantics };

/// atomicLoad with Int32, MemorySemantics
Variable AtomicLoad_Uniform_Int32_ptr;
inline constexpr std::array AtomicLoad_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Uniform_Int32_semantics;
Function AtomicLoad_Uniform_Int32;
inline constexpr std::array AtomicLoad_Uniform_Int32_args = { &AtomicLoad_Uniform_Int32_ptr, &AtomicLoad_Uniform_Int32_semantics };

/// atomicLoad with Int32, MemorySemantics
Variable AtomicLoad_Workgroup_Int32_ptr;
inline constexpr std::array AtomicLoad_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Workgroup_Int32_semantics;
Function AtomicLoad_Workgroup_Int32;
inline constexpr std::array AtomicLoad_Workgroup_Int32_args = { &AtomicLoad_Workgroup_Int32_ptr, &AtomicLoad_Workgroup_Int32_semantics };

/// atomicIncrement with Int32, MemorySemantics
Variable AtomicIncrement_Uniform_Int32_ptr;
inline constexpr std::array AtomicIncrement_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicIncrement_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicIncrement_Uniform_Int32_semantics;
Function AtomicIncrement_Uniform_Int32;
inline constexpr std::array AtomicIncrement_Uniform_Int32_args = { &AtomicIncrement_Uniform_Int32_ptr, &AtomicIncrement_Uniform_Int32_semantics };

/// atomicIncrement with Int32, MemorySemantics
Variable AtomicIncrement_Workgroup_Int32_ptr;
inline constexpr std::array AtomicIncrement_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicIncrement_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicIncrement_Workgroup_Int32_semantics;
Function AtomicIncrement_Workgroup_Int32;
inline constexpr std::array AtomicIncrement_Workgroup_Int32_args = { &AtomicIncrement_Workgroup_Int32_ptr, &AtomicIncrement_Workgroup_Int32_semantics };

/// atomicDecrement with Int32, MemorySemantics
Variable AtomicDecrement_Uniform_Int32_ptr;
inline constexpr std::array AtomicDecrement_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicDecrement_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicDecrement_Uniform_Int32_semantics;
Function AtomicDecrement_Uniform_Int32;
inline constexpr std::array AtomicDecrement_Uniform_Int32_args = { &AtomicDecrement_Uniform_Int32_ptr, &AtomicDecrement_Uniform_Int32_semantics };

/// atomicDecrement with Int32, MemorySemantics
Variable AtomicDecrement_Workgroup_Int32_ptr;
inline constexpr std::array AtomicDecrement_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicDecrement_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicDecrement_Workgroup_Int32_semantics;
Function AtomicDecrement_Workgroup_Int32;
inline constexpr std::array AtomicDecrement_Workgroup_Int32_args = { &AtomicDecrement_Workgroup_Int32_ptr, &AtomicDecrement_Workgroup_Int32_semantics };

/// atomicLoad with UInt16, MemorySemantics
Variable AtomicLoad_Uniform_UInt16_ptr;
inline constexpr std::array AtomicLoad_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Uniform_UInt16_semantics;
Function AtomicLoad_Uniform_UInt16;
inline constexpr std::array AtomicLoad_Uniform_UInt16_args = { &AtomicLoad_Uniform_UInt16_ptr, &AtomicLoad_Uniform_UInt16_semantics };

/// atomicLoad with UInt16, MemorySemantics
Variable AtomicLoad_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicLoad_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Workgroup_UInt16_semantics;
Function AtomicLoad_Workgroup_UInt16;
inline constexpr std::array AtomicLoad_Workgroup_UInt16_args = { &AtomicLoad_Workgroup_UInt16_ptr, &AtomicLoad_Workgroup_UInt16_semantics };

/// atomicIncrement with UInt16, MemorySemantics
Variable AtomicIncrement_Uniform_UInt16_ptr;
inline constexpr std::array AtomicIncrement_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicIncrement_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicIncrement_Uniform_UInt16_semantics;
Function AtomicIncrement_Uniform_UInt16;
inline constexpr std::array AtomicIncrement_Uniform_UInt16_args = { &AtomicIncrement_Uniform_UInt16_ptr, &AtomicIncrement_Uniform_UInt16_semantics };

/// atomicIncrement with UInt16, MemorySemantics
Variable AtomicIncrement_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicIncrement_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicIncrement_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicIncrement_Workgroup_UInt16_semantics;
Function AtomicIncrement_Workgroup_UInt16;
inline constexpr std::array AtomicIncrement_Workgroup_UInt16_args = { &AtomicIncrement_Workgroup_UInt16_ptr, &AtomicIncrement_Workgroup_UInt16_semantics };

/// atomicDecrement with UInt16, MemorySemantics
Variable AtomicDecrement_Uniform_UInt16_ptr;
inline constexpr std::array AtomicDecrement_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicDecrement_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicDecrement_Uniform_UInt16_semantics;
Function AtomicDecrement_Uniform_UInt16;
inline constexpr std::array AtomicDecrement_Uniform_UInt16_args = { &AtomicDecrement_Uniform_UInt16_ptr, &AtomicDecrement_Uniform_UInt16_semantics };

/// atomicDecrement with UInt16, MemorySemantics
Variable AtomicDecrement_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicDecrement_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicDecrement_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicDecrement_Workgroup_UInt16_semantics;
Function AtomicDecrement_Workgroup_UInt16;
inline constexpr std::array AtomicDecrement_Workgroup_UInt16_args = { &AtomicDecrement_Workgroup_UInt16_ptr, &AtomicDecrement_Workgroup_UInt16_semantics };

/// atomicLoad with Int16, MemorySemantics
Variable AtomicLoad_Uniform_Int16_ptr;
inline constexpr std::array AtomicLoad_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Uniform_Int16_semantics;
Function AtomicLoad_Uniform_Int16;
inline constexpr std::array AtomicLoad_Uniform_Int16_args = { &AtomicLoad_Uniform_Int16_ptr, &AtomicLoad_Uniform_Int16_semantics };

/// atomicLoad with Int16, MemorySemantics
Variable AtomicLoad_Workgroup_Int16_ptr;
inline constexpr std::array AtomicLoad_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Workgroup_Int16_semantics;
Function AtomicLoad_Workgroup_Int16;
inline constexpr std::array AtomicLoad_Workgroup_Int16_args = { &AtomicLoad_Workgroup_Int16_ptr, &AtomicLoad_Workgroup_Int16_semantics };

/// atomicIncrement with Int16, MemorySemantics
Variable AtomicIncrement_Uniform_Int16_ptr;
inline constexpr std::array AtomicIncrement_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicIncrement_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicIncrement_Uniform_Int16_semantics;
Function AtomicIncrement_Uniform_Int16;
inline constexpr std::array AtomicIncrement_Uniform_Int16_args = { &AtomicIncrement_Uniform_Int16_ptr, &AtomicIncrement_Uniform_Int16_semantics };

/// atomicIncrement with Int16, MemorySemantics
Variable AtomicIncrement_Workgroup_Int16_ptr;
inline constexpr std::array AtomicIncrement_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicIncrement_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicIncrement_Workgroup_Int16_semantics;
Function AtomicIncrement_Workgroup_Int16;
inline constexpr std::array AtomicIncrement_Workgroup_Int16_args = { &AtomicIncrement_Workgroup_Int16_ptr, &AtomicIncrement_Workgroup_Int16_semantics };

/// atomicDecrement with Int16, MemorySemantics
Variable AtomicDecrement_Uniform_Int16_ptr;
inline constexpr std::array AtomicDecrement_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicDecrement_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicDecrement_Uniform_Int16_semantics;
Function AtomicDecrement_Uniform_Int16;
inline constexpr std::array AtomicDecrement_Uniform_Int16_args = { &AtomicDecrement_Uniform_Int16_ptr, &AtomicDecrement_Uniform_Int16_semantics };

/// atomicDecrement with Int16, MemorySemantics
Variable AtomicDecrement_Workgroup_Int16_ptr;
inline constexpr std::array AtomicDecrement_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicDecrement_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicDecrement_Workgroup_Int16_semantics;
Function AtomicDecrement_Workgroup_Int16;
inline constexpr std::array AtomicDecrement_Workgroup_Int16_args = { &AtomicDecrement_Workgroup_Int16_ptr, &AtomicDecrement_Workgroup_Int16_semantics };

/// atomicLoad with Float32, MemorySemantics
Variable AtomicLoad_Uniform_Float32_ptr;
inline constexpr std::array AtomicLoad_Uniform_Float32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Uniform_Float32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Uniform_Float32_semantics;
Function AtomicLoad_Uniform_Float32;
inline constexpr std::array AtomicLoad_Uniform_Float32_args = { &AtomicLoad_Uniform_Float32_ptr, &AtomicLoad_Uniform_Float32_semantics };

/// atomicLoad with Float32, MemorySemantics
Variable AtomicLoad_Workgroup_Float32_ptr;
inline constexpr std::array AtomicLoad_Workgroup_Float32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Workgroup_Float32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Workgroup_Float32_semantics;
Function AtomicLoad_Workgroup_Float32;
inline constexpr std::array AtomicLoad_Workgroup_Float32_args = { &AtomicLoad_Workgroup_Float32_ptr, &AtomicLoad_Workgroup_Float32_semantics };

/// atomicLoad with Float16, MemorySemantics
Variable AtomicLoad_Uniform_Float16_ptr;
inline constexpr std::array AtomicLoad_Uniform_Float16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Uniform_Float16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Uniform_Float16_semantics;
Function AtomicLoad_Uniform_Float16;
inline constexpr std::array AtomicLoad_Uniform_Float16_args = { &AtomicLoad_Uniform_Float16_ptr, &AtomicLoad_Uniform_Float16_semantics };

/// atomicLoad with Float16, MemorySemantics
Variable AtomicLoad_Workgroup_Float16_ptr;
inline constexpr std::array AtomicLoad_Workgroup_Float16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicLoad_Workgroup_Float16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicLoad_Workgroup_Float16_semantics;
Function AtomicLoad_Workgroup_Float16;
inline constexpr std::array AtomicLoad_Workgroup_Float16_args = { &AtomicLoad_Workgroup_Float16_ptr, &AtomicLoad_Workgroup_Float16_semantics };

/// atomicStore with UInt32, UInt32, MemorySemantics
Variable AtomicStore_Uniform_UInt32_ptr;
inline constexpr std::array AtomicStore_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Uniform_UInt32_value;
Variable AtomicStore_Uniform_UInt32_semantics;
Function AtomicStore_Uniform_UInt32;
inline constexpr std::array AtomicStore_Uniform_UInt32_args = { &AtomicStore_Uniform_UInt32_ptr, &AtomicStore_Uniform_UInt32_value, &AtomicStore_Uniform_UInt32_semantics };

/// atomicStore with UInt32, UInt32, MemorySemantics
Variable AtomicStore_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicStore_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Workgroup_UInt32_value;
Variable AtomicStore_Workgroup_UInt32_semantics;
Function AtomicStore_Workgroup_UInt32;
inline constexpr std::array AtomicStore_Workgroup_UInt32_args = { &AtomicStore_Workgroup_UInt32_ptr, &AtomicStore_Workgroup_UInt32_value, &AtomicStore_Workgroup_UInt32_semantics };

/// atomicExchange with UInt32, UInt32, MemorySemantics
Variable AtomicExchange_Uniform_UInt32_ptr;
inline constexpr std::array AtomicExchange_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Uniform_UInt32_value;
Variable AtomicExchange_Uniform_UInt32_semantics;
Function AtomicExchange_Uniform_UInt32;
inline constexpr std::array AtomicExchange_Uniform_UInt32_args = { &AtomicExchange_Uniform_UInt32_ptr, &AtomicExchange_Uniform_UInt32_value, &AtomicExchange_Uniform_UInt32_semantics };

/// atomicExchange with UInt32, UInt32, MemorySemantics
Variable AtomicExchange_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicExchange_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Workgroup_UInt32_value;
Variable AtomicExchange_Workgroup_UInt32_semantics;
Function AtomicExchange_Workgroup_UInt32;
inline constexpr std::array AtomicExchange_Workgroup_UInt32_args = { &AtomicExchange_Workgroup_UInt32_ptr, &AtomicExchange_Workgroup_UInt32_value, &AtomicExchange_Workgroup_UInt32_semantics };

/// atomicAdd with UInt32, UInt32, MemorySemantics
Variable AtomicAdd_Uniform_UInt32_ptr;
inline constexpr std::array AtomicAdd_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAdd_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAdd_Uniform_UInt32_value;
Variable AtomicAdd_Uniform_UInt32_semantics;
Function AtomicAdd_Uniform_UInt32;
inline constexpr std::array AtomicAdd_Uniform_UInt32_args = { &AtomicAdd_Uniform_UInt32_ptr, &AtomicAdd_Uniform_UInt32_value, &AtomicAdd_Uniform_UInt32_semantics };

/// atomicAdd with UInt32, UInt32, MemorySemantics
Variable AtomicAdd_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicAdd_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAdd_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAdd_Workgroup_UInt32_value;
Variable AtomicAdd_Workgroup_UInt32_semantics;
Function AtomicAdd_Workgroup_UInt32;
inline constexpr std::array AtomicAdd_Workgroup_UInt32_args = { &AtomicAdd_Workgroup_UInt32_ptr, &AtomicAdd_Workgroup_UInt32_value, &AtomicAdd_Workgroup_UInt32_semantics };

/// atomicSubtract with UInt32, UInt32, MemorySemantics
Variable AtomicSubtract_Uniform_UInt32_ptr;
inline constexpr std::array AtomicSubtract_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicSubtract_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicSubtract_Uniform_UInt32_value;
Variable AtomicSubtract_Uniform_UInt32_semantics;
Function AtomicSubtract_Uniform_UInt32;
inline constexpr std::array AtomicSubtract_Uniform_UInt32_args = { &AtomicSubtract_Uniform_UInt32_ptr, &AtomicSubtract_Uniform_UInt32_value, &AtomicSubtract_Uniform_UInt32_semantics };

/// atomicSubtract with UInt32, UInt32, MemorySemantics
Variable AtomicSubtract_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicSubtract_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicSubtract_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicSubtract_Workgroup_UInt32_value;
Variable AtomicSubtract_Workgroup_UInt32_semantics;
Function AtomicSubtract_Workgroup_UInt32;
inline constexpr std::array AtomicSubtract_Workgroup_UInt32_args = { &AtomicSubtract_Workgroup_UInt32_ptr, &AtomicSubtract_Workgroup_UInt32_value, &AtomicSubtract_Workgroup_UInt32_semantics };

/// atomicAnd with UInt32, UInt32, MemorySemantics
Variable AtomicAnd_Uniform_UInt32_ptr;
inline constexpr std::array AtomicAnd_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAnd_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAnd_Uniform_UInt32_value;
Variable AtomicAnd_Uniform_UInt32_semantics;
Function AtomicAnd_Uniform_UInt32;
inline constexpr std::array AtomicAnd_Uniform_UInt32_args = { &AtomicAnd_Uniform_UInt32_ptr, &AtomicAnd_Uniform_UInt32_value, &AtomicAnd_Uniform_UInt32_semantics };

/// atomicAnd with UInt32, UInt32, MemorySemantics
Variable AtomicAnd_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicAnd_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAnd_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAnd_Workgroup_UInt32_value;
Variable AtomicAnd_Workgroup_UInt32_semantics;
Function AtomicAnd_Workgroup_UInt32;
inline constexpr std::array AtomicAnd_Workgroup_UInt32_args = { &AtomicAnd_Workgroup_UInt32_ptr, &AtomicAnd_Workgroup_UInt32_value, &AtomicAnd_Workgroup_UInt32_semantics };

/// atomicOr with UInt32, UInt32, MemorySemantics
Variable AtomicOr_Uniform_UInt32_ptr;
inline constexpr std::array AtomicOr_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicOr_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicOr_Uniform_UInt32_value;
Variable AtomicOr_Uniform_UInt32_semantics;
Function AtomicOr_Uniform_UInt32;
inline constexpr std::array AtomicOr_Uniform_UInt32_args = { &AtomicOr_Uniform_UInt32_ptr, &AtomicOr_Uniform_UInt32_value, &AtomicOr_Uniform_UInt32_semantics };

/// atomicOr with UInt32, UInt32, MemorySemantics
Variable AtomicOr_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicOr_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicOr_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicOr_Workgroup_UInt32_value;
Variable AtomicOr_Workgroup_UInt32_semantics;
Function AtomicOr_Workgroup_UInt32;
inline constexpr std::array AtomicOr_Workgroup_UInt32_args = { &AtomicOr_Workgroup_UInt32_ptr, &AtomicOr_Workgroup_UInt32_value, &AtomicOr_Workgroup_UInt32_semantics };

/// atomicXor with UInt32, UInt32, MemorySemantics
Variable AtomicXor_Uniform_UInt32_ptr;
inline constexpr std::array AtomicXor_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicXor_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicXor_Uniform_UInt32_value;
Variable AtomicXor_Uniform_UInt32_semantics;
Function AtomicXor_Uniform_UInt32;
inline constexpr std::array AtomicXor_Uniform_UInt32_args = { &AtomicXor_Uniform_UInt32_ptr, &AtomicXor_Uniform_UInt32_value, &AtomicXor_Uniform_UInt32_semantics };

/// atomicXor with UInt32, UInt32, MemorySemantics
Variable AtomicXor_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicXor_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicXor_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicXor_Workgroup_UInt32_value;
Variable AtomicXor_Workgroup_UInt32_semantics;
Function AtomicXor_Workgroup_UInt32;
inline constexpr std::array AtomicXor_Workgroup_UInt32_args = { &AtomicXor_Workgroup_UInt32_ptr, &AtomicXor_Workgroup_UInt32_value, &AtomicXor_Workgroup_UInt32_semantics };

/// atomicStore with Int32, Int32, MemorySemantics
Variable AtomicStore_Uniform_Int32_ptr;
inline constexpr std::array AtomicStore_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Uniform_Int32_value;
Variable AtomicStore_Uniform_Int32_semantics;
Function AtomicStore_Uniform_Int32;
inline constexpr std::array AtomicStore_Uniform_Int32_args = { &AtomicStore_Uniform_Int32_ptr, &AtomicStore_Uniform_Int32_value, &AtomicStore_Uniform_Int32_semantics };

/// atomicStore with Int32, Int32, MemorySemantics
Variable AtomicStore_Workgroup_Int32_ptr;
inline constexpr std::array AtomicStore_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Workgroup_Int32_value;
Variable AtomicStore_Workgroup_Int32_semantics;
Function AtomicStore_Workgroup_Int32;
inline constexpr std::array AtomicStore_Workgroup_Int32_args = { &AtomicStore_Workgroup_Int32_ptr, &AtomicStore_Workgroup_Int32_value, &AtomicStore_Workgroup_Int32_semantics };

/// atomicExchange with Int32, Int32, MemorySemantics
Variable AtomicExchange_Uniform_Int32_ptr;
inline constexpr std::array AtomicExchange_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Uniform_Int32_value;
Variable AtomicExchange_Uniform_Int32_semantics;
Function AtomicExchange_Uniform_Int32;
inline constexpr std::array AtomicExchange_Uniform_Int32_args = { &AtomicExchange_Uniform_Int32_ptr, &AtomicExchange_Uniform_Int32_value, &AtomicExchange_Uniform_Int32_semantics };

/// atomicExchange with Int32, Int32, MemorySemantics
Variable AtomicExchange_Workgroup_Int32_ptr;
inline constexpr std::array AtomicExchange_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Workgroup_Int32_value;
Variable AtomicExchange_Workgroup_Int32_semantics;
Function AtomicExchange_Workgroup_Int32;
inline constexpr std::array AtomicExchange_Workgroup_Int32_args = { &AtomicExchange_Workgroup_Int32_ptr, &AtomicExchange_Workgroup_Int32_value, &AtomicExchange_Workgroup_Int32_semantics };

/// atomicAdd with Int32, Int32, MemorySemantics
Variable AtomicAdd_Uniform_Int32_ptr;
inline constexpr std::array AtomicAdd_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAdd_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAdd_Uniform_Int32_value;
Variable AtomicAdd_Uniform_Int32_semantics;
Function AtomicAdd_Uniform_Int32;
inline constexpr std::array AtomicAdd_Uniform_Int32_args = { &AtomicAdd_Uniform_Int32_ptr, &AtomicAdd_Uniform_Int32_value, &AtomicAdd_Uniform_Int32_semantics };

/// atomicAdd with Int32, Int32, MemorySemantics
Variable AtomicAdd_Workgroup_Int32_ptr;
inline constexpr std::array AtomicAdd_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAdd_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAdd_Workgroup_Int32_value;
Variable AtomicAdd_Workgroup_Int32_semantics;
Function AtomicAdd_Workgroup_Int32;
inline constexpr std::array AtomicAdd_Workgroup_Int32_args = { &AtomicAdd_Workgroup_Int32_ptr, &AtomicAdd_Workgroup_Int32_value, &AtomicAdd_Workgroup_Int32_semantics };

/// atomicSubtract with Int32, Int32, MemorySemantics
Variable AtomicSubtract_Uniform_Int32_ptr;
inline constexpr std::array AtomicSubtract_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicSubtract_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicSubtract_Uniform_Int32_value;
Variable AtomicSubtract_Uniform_Int32_semantics;
Function AtomicSubtract_Uniform_Int32;
inline constexpr std::array AtomicSubtract_Uniform_Int32_args = { &AtomicSubtract_Uniform_Int32_ptr, &AtomicSubtract_Uniform_Int32_value, &AtomicSubtract_Uniform_Int32_semantics };

/// atomicSubtract with Int32, Int32, MemorySemantics
Variable AtomicSubtract_Workgroup_Int32_ptr;
inline constexpr std::array AtomicSubtract_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicSubtract_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicSubtract_Workgroup_Int32_value;
Variable AtomicSubtract_Workgroup_Int32_semantics;
Function AtomicSubtract_Workgroup_Int32;
inline constexpr std::array AtomicSubtract_Workgroup_Int32_args = { &AtomicSubtract_Workgroup_Int32_ptr, &AtomicSubtract_Workgroup_Int32_value, &AtomicSubtract_Workgroup_Int32_semantics };

/// atomicAnd with Int32, Int32, MemorySemantics
Variable AtomicAnd_Uniform_Int32_ptr;
inline constexpr std::array AtomicAnd_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAnd_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAnd_Uniform_Int32_value;
Variable AtomicAnd_Uniform_Int32_semantics;
Function AtomicAnd_Uniform_Int32;
inline constexpr std::array AtomicAnd_Uniform_Int32_args = { &AtomicAnd_Uniform_Int32_ptr, &AtomicAnd_Uniform_Int32_value, &AtomicAnd_Uniform_Int32_semantics };

/// atomicAnd with Int32, Int32, MemorySemantics
Variable AtomicAnd_Workgroup_Int32_ptr;
inline constexpr std::array AtomicAnd_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAnd_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAnd_Workgroup_Int32_value;
Variable AtomicAnd_Workgroup_Int32_semantics;
Function AtomicAnd_Workgroup_Int32;
inline constexpr std::array AtomicAnd_Workgroup_Int32_args = { &AtomicAnd_Workgroup_Int32_ptr, &AtomicAnd_Workgroup_Int32_value, &AtomicAnd_Workgroup_Int32_semantics };

/// atomicOr with Int32, Int32, MemorySemantics
Variable AtomicOr_Uniform_Int32_ptr;
inline constexpr std::array AtomicOr_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicOr_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicOr_Uniform_Int32_value;
Variable AtomicOr_Uniform_Int32_semantics;
Function AtomicOr_Uniform_Int32;
inline constexpr std::array AtomicOr_Uniform_Int32_args = { &AtomicOr_Uniform_Int32_ptr, &AtomicOr_Uniform_Int32_value, &AtomicOr_Uniform_Int32_semantics };

/// atomicOr with Int32, Int32, MemorySemantics
Variable AtomicOr_Workgroup_Int32_ptr;
inline constexpr std::array AtomicOr_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicOr_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicOr_Workgroup_Int32_value;
Variable AtomicOr_Workgroup_Int32_semantics;
Function AtomicOr_Workgroup_Int32;
inline constexpr std::array AtomicOr_Workgroup_Int32_args = { &AtomicOr_Workgroup_Int32_ptr, &AtomicOr_Workgroup_Int32_value, &AtomicOr_Workgroup_Int32_semantics };

/// atomicXor with Int32, Int32, MemorySemantics
Variable AtomicXor_Uniform_Int32_ptr;
inline constexpr std::array AtomicXor_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicXor_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicXor_Uniform_Int32_value;
Variable AtomicXor_Uniform_Int32_semantics;
Function AtomicXor_Uniform_Int32;
inline constexpr std::array AtomicXor_Uniform_Int32_args = { &AtomicXor_Uniform_Int32_ptr, &AtomicXor_Uniform_Int32_value, &AtomicXor_Uniform_Int32_semantics };

/// atomicXor with Int32, Int32, MemorySemantics
Variable AtomicXor_Workgroup_Int32_ptr;
inline constexpr std::array AtomicXor_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicXor_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicXor_Workgroup_Int32_value;
Variable AtomicXor_Workgroup_Int32_semantics;
Function AtomicXor_Workgroup_Int32;
inline constexpr std::array AtomicXor_Workgroup_Int32_args = { &AtomicXor_Workgroup_Int32_ptr, &AtomicXor_Workgroup_Int32_value, &AtomicXor_Workgroup_Int32_semantics };

/// atomicStore with UInt16, UInt16, MemorySemantics
Variable AtomicStore_Uniform_UInt16_ptr;
inline constexpr std::array AtomicStore_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Uniform_UInt16_value;
Variable AtomicStore_Uniform_UInt16_semantics;
Function AtomicStore_Uniform_UInt16;
inline constexpr std::array AtomicStore_Uniform_UInt16_args = { &AtomicStore_Uniform_UInt16_ptr, &AtomicStore_Uniform_UInt16_value, &AtomicStore_Uniform_UInt16_semantics };

/// atomicStore with UInt16, UInt16, MemorySemantics
Variable AtomicStore_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicStore_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Workgroup_UInt16_value;
Variable AtomicStore_Workgroup_UInt16_semantics;
Function AtomicStore_Workgroup_UInt16;
inline constexpr std::array AtomicStore_Workgroup_UInt16_args = { &AtomicStore_Workgroup_UInt16_ptr, &AtomicStore_Workgroup_UInt16_value, &AtomicStore_Workgroup_UInt16_semantics };

/// atomicExchange with UInt16, UInt16, MemorySemantics
Variable AtomicExchange_Uniform_UInt16_ptr;
inline constexpr std::array AtomicExchange_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Uniform_UInt16_value;
Variable AtomicExchange_Uniform_UInt16_semantics;
Function AtomicExchange_Uniform_UInt16;
inline constexpr std::array AtomicExchange_Uniform_UInt16_args = { &AtomicExchange_Uniform_UInt16_ptr, &AtomicExchange_Uniform_UInt16_value, &AtomicExchange_Uniform_UInt16_semantics };

/// atomicExchange with UInt16, UInt16, MemorySemantics
Variable AtomicExchange_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicExchange_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Workgroup_UInt16_value;
Variable AtomicExchange_Workgroup_UInt16_semantics;
Function AtomicExchange_Workgroup_UInt16;
inline constexpr std::array AtomicExchange_Workgroup_UInt16_args = { &AtomicExchange_Workgroup_UInt16_ptr, &AtomicExchange_Workgroup_UInt16_value, &AtomicExchange_Workgroup_UInt16_semantics };

/// atomicAdd with UInt16, UInt16, MemorySemantics
Variable AtomicAdd_Uniform_UInt16_ptr;
inline constexpr std::array AtomicAdd_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAdd_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAdd_Uniform_UInt16_value;
Variable AtomicAdd_Uniform_UInt16_semantics;
Function AtomicAdd_Uniform_UInt16;
inline constexpr std::array AtomicAdd_Uniform_UInt16_args = { &AtomicAdd_Uniform_UInt16_ptr, &AtomicAdd_Uniform_UInt16_value, &AtomicAdd_Uniform_UInt16_semantics };

/// atomicAdd with UInt16, UInt16, MemorySemantics
Variable AtomicAdd_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicAdd_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAdd_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAdd_Workgroup_UInt16_value;
Variable AtomicAdd_Workgroup_UInt16_semantics;
Function AtomicAdd_Workgroup_UInt16;
inline constexpr std::array AtomicAdd_Workgroup_UInt16_args = { &AtomicAdd_Workgroup_UInt16_ptr, &AtomicAdd_Workgroup_UInt16_value, &AtomicAdd_Workgroup_UInt16_semantics };

/// atomicSubtract with UInt16, UInt16, MemorySemantics
Variable AtomicSubtract_Uniform_UInt16_ptr;
inline constexpr std::array AtomicSubtract_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicSubtract_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicSubtract_Uniform_UInt16_value;
Variable AtomicSubtract_Uniform_UInt16_semantics;
Function AtomicSubtract_Uniform_UInt16;
inline constexpr std::array AtomicSubtract_Uniform_UInt16_args = { &AtomicSubtract_Uniform_UInt16_ptr, &AtomicSubtract_Uniform_UInt16_value, &AtomicSubtract_Uniform_UInt16_semantics };

/// atomicSubtract with UInt16, UInt16, MemorySemantics
Variable AtomicSubtract_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicSubtract_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicSubtract_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicSubtract_Workgroup_UInt16_value;
Variable AtomicSubtract_Workgroup_UInt16_semantics;
Function AtomicSubtract_Workgroup_UInt16;
inline constexpr std::array AtomicSubtract_Workgroup_UInt16_args = { &AtomicSubtract_Workgroup_UInt16_ptr, &AtomicSubtract_Workgroup_UInt16_value, &AtomicSubtract_Workgroup_UInt16_semantics };

/// atomicAnd with UInt16, UInt16, MemorySemantics
Variable AtomicAnd_Uniform_UInt16_ptr;
inline constexpr std::array AtomicAnd_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAnd_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAnd_Uniform_UInt16_value;
Variable AtomicAnd_Uniform_UInt16_semantics;
Function AtomicAnd_Uniform_UInt16;
inline constexpr std::array AtomicAnd_Uniform_UInt16_args = { &AtomicAnd_Uniform_UInt16_ptr, &AtomicAnd_Uniform_UInt16_value, &AtomicAnd_Uniform_UInt16_semantics };

/// atomicAnd with UInt16, UInt16, MemorySemantics
Variable AtomicAnd_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicAnd_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAnd_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAnd_Workgroup_UInt16_value;
Variable AtomicAnd_Workgroup_UInt16_semantics;
Function AtomicAnd_Workgroup_UInt16;
inline constexpr std::array AtomicAnd_Workgroup_UInt16_args = { &AtomicAnd_Workgroup_UInt16_ptr, &AtomicAnd_Workgroup_UInt16_value, &AtomicAnd_Workgroup_UInt16_semantics };

/// atomicOr with UInt16, UInt16, MemorySemantics
Variable AtomicOr_Uniform_UInt16_ptr;
inline constexpr std::array AtomicOr_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicOr_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicOr_Uniform_UInt16_value;
Variable AtomicOr_Uniform_UInt16_semantics;
Function AtomicOr_Uniform_UInt16;
inline constexpr std::array AtomicOr_Uniform_UInt16_args = { &AtomicOr_Uniform_UInt16_ptr, &AtomicOr_Uniform_UInt16_value, &AtomicOr_Uniform_UInt16_semantics };

/// atomicOr with UInt16, UInt16, MemorySemantics
Variable AtomicOr_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicOr_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicOr_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicOr_Workgroup_UInt16_value;
Variable AtomicOr_Workgroup_UInt16_semantics;
Function AtomicOr_Workgroup_UInt16;
inline constexpr std::array AtomicOr_Workgroup_UInt16_args = { &AtomicOr_Workgroup_UInt16_ptr, &AtomicOr_Workgroup_UInt16_value, &AtomicOr_Workgroup_UInt16_semantics };

/// atomicXor with UInt16, UInt16, MemorySemantics
Variable AtomicXor_Uniform_UInt16_ptr;
inline constexpr std::array AtomicXor_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicXor_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicXor_Uniform_UInt16_value;
Variable AtomicXor_Uniform_UInt16_semantics;
Function AtomicXor_Uniform_UInt16;
inline constexpr std::array AtomicXor_Uniform_UInt16_args = { &AtomicXor_Uniform_UInt16_ptr, &AtomicXor_Uniform_UInt16_value, &AtomicXor_Uniform_UInt16_semantics };

/// atomicXor with UInt16, UInt16, MemorySemantics
Variable AtomicXor_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicXor_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicXor_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicXor_Workgroup_UInt16_value;
Variable AtomicXor_Workgroup_UInt16_semantics;
Function AtomicXor_Workgroup_UInt16;
inline constexpr std::array AtomicXor_Workgroup_UInt16_args = { &AtomicXor_Workgroup_UInt16_ptr, &AtomicXor_Workgroup_UInt16_value, &AtomicXor_Workgroup_UInt16_semantics };

/// atomicStore with Int16, Int16, MemorySemantics
Variable AtomicStore_Uniform_Int16_ptr;
inline constexpr std::array AtomicStore_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Uniform_Int16_value;
Variable AtomicStore_Uniform_Int16_semantics;
Function AtomicStore_Uniform_Int16;
inline constexpr std::array AtomicStore_Uniform_Int16_args = { &AtomicStore_Uniform_Int16_ptr, &AtomicStore_Uniform_Int16_value, &AtomicStore_Uniform_Int16_semantics };

/// atomicStore with Int16, Int16, MemorySemantics
Variable AtomicStore_Workgroup_Int16_ptr;
inline constexpr std::array AtomicStore_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Workgroup_Int16_value;
Variable AtomicStore_Workgroup_Int16_semantics;
Function AtomicStore_Workgroup_Int16;
inline constexpr std::array AtomicStore_Workgroup_Int16_args = { &AtomicStore_Workgroup_Int16_ptr, &AtomicStore_Workgroup_Int16_value, &AtomicStore_Workgroup_Int16_semantics };

/// atomicExchange with Int16, Int16, MemorySemantics
Variable AtomicExchange_Uniform_Int16_ptr;
inline constexpr std::array AtomicExchange_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Uniform_Int16_value;
Variable AtomicExchange_Uniform_Int16_semantics;
Function AtomicExchange_Uniform_Int16;
inline constexpr std::array AtomicExchange_Uniform_Int16_args = { &AtomicExchange_Uniform_Int16_ptr, &AtomicExchange_Uniform_Int16_value, &AtomicExchange_Uniform_Int16_semantics };

/// atomicExchange with Int16, Int16, MemorySemantics
Variable AtomicExchange_Workgroup_Int16_ptr;
inline constexpr std::array AtomicExchange_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Workgroup_Int16_value;
Variable AtomicExchange_Workgroup_Int16_semantics;
Function AtomicExchange_Workgroup_Int16;
inline constexpr std::array AtomicExchange_Workgroup_Int16_args = { &AtomicExchange_Workgroup_Int16_ptr, &AtomicExchange_Workgroup_Int16_value, &AtomicExchange_Workgroup_Int16_semantics };

/// atomicAdd with Int16, Int16, MemorySemantics
Variable AtomicAdd_Uniform_Int16_ptr;
inline constexpr std::array AtomicAdd_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAdd_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAdd_Uniform_Int16_value;
Variable AtomicAdd_Uniform_Int16_semantics;
Function AtomicAdd_Uniform_Int16;
inline constexpr std::array AtomicAdd_Uniform_Int16_args = { &AtomicAdd_Uniform_Int16_ptr, &AtomicAdd_Uniform_Int16_value, &AtomicAdd_Uniform_Int16_semantics };

/// atomicAdd with Int16, Int16, MemorySemantics
Variable AtomicAdd_Workgroup_Int16_ptr;
inline constexpr std::array AtomicAdd_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAdd_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAdd_Workgroup_Int16_value;
Variable AtomicAdd_Workgroup_Int16_semantics;
Function AtomicAdd_Workgroup_Int16;
inline constexpr std::array AtomicAdd_Workgroup_Int16_args = { &AtomicAdd_Workgroup_Int16_ptr, &AtomicAdd_Workgroup_Int16_value, &AtomicAdd_Workgroup_Int16_semantics };

/// atomicSubtract with Int16, Int16, MemorySemantics
Variable AtomicSubtract_Uniform_Int16_ptr;
inline constexpr std::array AtomicSubtract_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicSubtract_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicSubtract_Uniform_Int16_value;
Variable AtomicSubtract_Uniform_Int16_semantics;
Function AtomicSubtract_Uniform_Int16;
inline constexpr std::array AtomicSubtract_Uniform_Int16_args = { &AtomicSubtract_Uniform_Int16_ptr, &AtomicSubtract_Uniform_Int16_value, &AtomicSubtract_Uniform_Int16_semantics };

/// atomicSubtract with Int16, Int16, MemorySemantics
Variable AtomicSubtract_Workgroup_Int16_ptr;
inline constexpr std::array AtomicSubtract_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicSubtract_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicSubtract_Workgroup_Int16_value;
Variable AtomicSubtract_Workgroup_Int16_semantics;
Function AtomicSubtract_Workgroup_Int16;
inline constexpr std::array AtomicSubtract_Workgroup_Int16_args = { &AtomicSubtract_Workgroup_Int16_ptr, &AtomicSubtract_Workgroup_Int16_value, &AtomicSubtract_Workgroup_Int16_semantics };

/// atomicAnd with Int16, Int16, MemorySemantics
Variable AtomicAnd_Uniform_Int16_ptr;
inline constexpr std::array AtomicAnd_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAnd_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAnd_Uniform_Int16_value;
Variable AtomicAnd_Uniform_Int16_semantics;
Function AtomicAnd_Uniform_Int16;
inline constexpr std::array AtomicAnd_Uniform_Int16_args = { &AtomicAnd_Uniform_Int16_ptr, &AtomicAnd_Uniform_Int16_value, &AtomicAnd_Uniform_Int16_semantics };

/// atomicAnd with Int16, Int16, MemorySemantics
Variable AtomicAnd_Workgroup_Int16_ptr;
inline constexpr std::array AtomicAnd_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicAnd_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicAnd_Workgroup_Int16_value;
Variable AtomicAnd_Workgroup_Int16_semantics;
Function AtomicAnd_Workgroup_Int16;
inline constexpr std::array AtomicAnd_Workgroup_Int16_args = { &AtomicAnd_Workgroup_Int16_ptr, &AtomicAnd_Workgroup_Int16_value, &AtomicAnd_Workgroup_Int16_semantics };

/// atomicOr with Int16, Int16, MemorySemantics
Variable AtomicOr_Uniform_Int16_ptr;
inline constexpr std::array AtomicOr_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicOr_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicOr_Uniform_Int16_value;
Variable AtomicOr_Uniform_Int16_semantics;
Function AtomicOr_Uniform_Int16;
inline constexpr std::array AtomicOr_Uniform_Int16_args = { &AtomicOr_Uniform_Int16_ptr, &AtomicOr_Uniform_Int16_value, &AtomicOr_Uniform_Int16_semantics };

/// atomicOr with Int16, Int16, MemorySemantics
Variable AtomicOr_Workgroup_Int16_ptr;
inline constexpr std::array AtomicOr_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicOr_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicOr_Workgroup_Int16_value;
Variable AtomicOr_Workgroup_Int16_semantics;
Function AtomicOr_Workgroup_Int16;
inline constexpr std::array AtomicOr_Workgroup_Int16_args = { &AtomicOr_Workgroup_Int16_ptr, &AtomicOr_Workgroup_Int16_value, &AtomicOr_Workgroup_Int16_semantics };

/// atomicXor with Int16, Int16, MemorySemantics
Variable AtomicXor_Uniform_Int16_ptr;
inline constexpr std::array AtomicXor_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicXor_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicXor_Uniform_Int16_value;
Variable AtomicXor_Uniform_Int16_semantics;
Function AtomicXor_Uniform_Int16;
inline constexpr std::array AtomicXor_Uniform_Int16_args = { &AtomicXor_Uniform_Int16_ptr, &AtomicXor_Uniform_Int16_value, &AtomicXor_Uniform_Int16_semantics };

/// atomicXor with Int16, Int16, MemorySemantics
Variable AtomicXor_Workgroup_Int16_ptr;
inline constexpr std::array AtomicXor_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicXor_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicXor_Workgroup_Int16_value;
Variable AtomicXor_Workgroup_Int16_semantics;
Function AtomicXor_Workgroup_Int16;
inline constexpr std::array AtomicXor_Workgroup_Int16_args = { &AtomicXor_Workgroup_Int16_ptr, &AtomicXor_Workgroup_Int16_value, &AtomicXor_Workgroup_Int16_semantics };

/// atomicStore with Float32, Float32, MemorySemantics
Variable AtomicStore_Uniform_Float32_ptr;
inline constexpr std::array AtomicStore_Uniform_Float32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Uniform_Float32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Uniform_Float32_value;
Variable AtomicStore_Uniform_Float32_semantics;
Function AtomicStore_Uniform_Float32;
inline constexpr std::array AtomicStore_Uniform_Float32_args = { &AtomicStore_Uniform_Float32_ptr, &AtomicStore_Uniform_Float32_value, &AtomicStore_Uniform_Float32_semantics };

/// atomicStore with Float32, Float32, MemorySemantics
Variable AtomicStore_Workgroup_Float32_ptr;
inline constexpr std::array AtomicStore_Workgroup_Float32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Workgroup_Float32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Workgroup_Float32_value;
Variable AtomicStore_Workgroup_Float32_semantics;
Function AtomicStore_Workgroup_Float32;
inline constexpr std::array AtomicStore_Workgroup_Float32_args = { &AtomicStore_Workgroup_Float32_ptr, &AtomicStore_Workgroup_Float32_value, &AtomicStore_Workgroup_Float32_semantics };

/// atomicExchange with Float32, Float32, MemorySemantics
Variable AtomicExchange_Uniform_Float32_ptr;
inline constexpr std::array AtomicExchange_Uniform_Float32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Uniform_Float32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Uniform_Float32_value;
Variable AtomicExchange_Uniform_Float32_semantics;
Function AtomicExchange_Uniform_Float32;
inline constexpr std::array AtomicExchange_Uniform_Float32_args = { &AtomicExchange_Uniform_Float32_ptr, &AtomicExchange_Uniform_Float32_value, &AtomicExchange_Uniform_Float32_semantics };

/// atomicExchange with Float32, Float32, MemorySemantics
Variable AtomicExchange_Workgroup_Float32_ptr;
inline constexpr std::array AtomicExchange_Workgroup_Float32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Workgroup_Float32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Workgroup_Float32_value;
Variable AtomicExchange_Workgroup_Float32_semantics;
Function AtomicExchange_Workgroup_Float32;
inline constexpr std::array AtomicExchange_Workgroup_Float32_args = { &AtomicExchange_Workgroup_Float32_ptr, &AtomicExchange_Workgroup_Float32_value, &AtomicExchange_Workgroup_Float32_semantics };

/// atomicStore with Float16, Float16, MemorySemantics
Variable AtomicStore_Uniform_Float16_ptr;
inline constexpr std::array AtomicStore_Uniform_Float16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Uniform_Float16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Uniform_Float16_value;
Variable AtomicStore_Uniform_Float16_semantics;
Function AtomicStore_Uniform_Float16;
inline constexpr std::array AtomicStore_Uniform_Float16_args = { &AtomicStore_Uniform_Float16_ptr, &AtomicStore_Uniform_Float16_value, &AtomicStore_Uniform_Float16_semantics };

/// atomicStore with Float16, Float16, MemorySemantics
Variable AtomicStore_Workgroup_Float16_ptr;
inline constexpr std::array AtomicStore_Workgroup_Float16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicStore_Workgroup_Float16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicStore_Workgroup_Float16_value;
Variable AtomicStore_Workgroup_Float16_semantics;
Function AtomicStore_Workgroup_Float16;
inline constexpr std::array AtomicStore_Workgroup_Float16_args = { &AtomicStore_Workgroup_Float16_ptr, &AtomicStore_Workgroup_Float16_value, &AtomicStore_Workgroup_Float16_semantics };

/// atomicExchange with Float16, Float16, MemorySemantics
Variable AtomicExchange_Uniform_Float16_ptr;
inline constexpr std::array AtomicExchange_Uniform_Float16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Uniform_Float16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Uniform_Float16_value;
Variable AtomicExchange_Uniform_Float16_semantics;
Function AtomicExchange_Uniform_Float16;
inline constexpr std::array AtomicExchange_Uniform_Float16_args = { &AtomicExchange_Uniform_Float16_ptr, &AtomicExchange_Uniform_Float16_value, &AtomicExchange_Uniform_Float16_semantics };

/// atomicExchange with Float16, Float16, MemorySemantics
Variable AtomicExchange_Workgroup_Float16_ptr;
inline constexpr std::array AtomicExchange_Workgroup_Float16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicExchange_Workgroup_Float16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicExchange_Workgroup_Float16_value;
Variable AtomicExchange_Workgroup_Float16_semantics;
Function AtomicExchange_Workgroup_Float16;
inline constexpr std::array AtomicExchange_Workgroup_Float16_args = { &AtomicExchange_Workgroup_Float16_ptr, &AtomicExchange_Workgroup_Float16_value, &AtomicExchange_Workgroup_Float16_semantics };

/// atomicMin with Float16, Float16, MemorySemantics
Variable AtomicMin_Uniform_UInt32_ptr;
inline constexpr std::array AtomicMin_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMin_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMin_Uniform_UInt32_compare;
Variable AtomicMin_Uniform_UInt32_semantics;
Function AtomicMin_Uniform_UInt32;
inline constexpr std::array AtomicMin_Uniform_UInt32_args = { &AtomicMin_Uniform_UInt32_ptr, &AtomicMin_Uniform_UInt32_compare, &AtomicMin_Uniform_UInt32_semantics };

/// atomicMin with Float16, Float16, MemorySemantics
Variable AtomicMin_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicMin_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMin_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMin_Workgroup_UInt32_compare;
Variable AtomicMin_Workgroup_UInt32_semantics;
Function AtomicMin_Workgroup_UInt32;
inline constexpr std::array AtomicMin_Workgroup_UInt32_args = { &AtomicMin_Workgroup_UInt32_ptr, &AtomicMin_Workgroup_UInt32_compare, &AtomicMin_Workgroup_UInt32_semantics };

/// atomicMax with Float16, Float16, MemorySemantics
Variable AtomicMax_Uniform_UInt32_ptr;
inline constexpr std::array AtomicMax_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMax_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMax_Uniform_UInt32_compare;
Variable AtomicMax_Uniform_UInt32_semantics;
Function AtomicMax_Uniform_UInt32;
inline constexpr std::array AtomicMax_Uniform_UInt32_args = { &AtomicMax_Uniform_UInt32_ptr, &AtomicMax_Uniform_UInt32_compare, &AtomicMax_Uniform_UInt32_semantics };

/// atomicMax with Float16, Float16, MemorySemantics
Variable AtomicMax_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicMax_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMax_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMax_Workgroup_UInt32_compare;
Variable AtomicMax_Workgroup_UInt32_semantics;
Function AtomicMax_Workgroup_UInt32;
inline constexpr std::array AtomicMax_Workgroup_UInt32_args = { &AtomicMax_Workgroup_UInt32_ptr, &AtomicMax_Workgroup_UInt32_compare, &AtomicMax_Workgroup_UInt32_semantics };

/// atomicMin with Float16, Float16, MemorySemantics
Variable AtomicMin_Uniform_Int32_ptr;
inline constexpr std::array AtomicMin_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMin_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMin_Uniform_Int32_compare;
Variable AtomicMin_Uniform_Int32_semantics;
Function AtomicMin_Uniform_Int32;
inline constexpr std::array AtomicMin_Uniform_Int32_args = { &AtomicMin_Uniform_Int32_ptr, &AtomicMin_Uniform_Int32_compare, &AtomicMin_Uniform_Int32_semantics };

/// atomicMin with Float16, Float16, MemorySemantics
Variable AtomicMin_Workgroup_Int32_ptr;
inline constexpr std::array AtomicMin_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMin_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMin_Workgroup_Int32_compare;
Variable AtomicMin_Workgroup_Int32_semantics;
Function AtomicMin_Workgroup_Int32;
inline constexpr std::array AtomicMin_Workgroup_Int32_args = { &AtomicMin_Workgroup_Int32_ptr, &AtomicMin_Workgroup_Int32_compare, &AtomicMin_Workgroup_Int32_semantics };

/// atomicMax with Float16, Float16, MemorySemantics
Variable AtomicMax_Uniform_Int32_ptr;
inline constexpr std::array AtomicMax_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMax_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMax_Uniform_Int32_compare;
Variable AtomicMax_Uniform_Int32_semantics;
Function AtomicMax_Uniform_Int32;
inline constexpr std::array AtomicMax_Uniform_Int32_args = { &AtomicMax_Uniform_Int32_ptr, &AtomicMax_Uniform_Int32_compare, &AtomicMax_Uniform_Int32_semantics };

/// atomicMax with Float16, Float16, MemorySemantics
Variable AtomicMax_Workgroup_Int32_ptr;
inline constexpr std::array AtomicMax_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMax_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMax_Workgroup_Int32_compare;
Variable AtomicMax_Workgroup_Int32_semantics;
Function AtomicMax_Workgroup_Int32;
inline constexpr std::array AtomicMax_Workgroup_Int32_args = { &AtomicMax_Workgroup_Int32_ptr, &AtomicMax_Workgroup_Int32_compare, &AtomicMax_Workgroup_Int32_semantics };

/// atomicMin with Float16, Float16, MemorySemantics
Variable AtomicMin_Uniform_UInt16_ptr;
inline constexpr std::array AtomicMin_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMin_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMin_Uniform_UInt16_compare;
Variable AtomicMin_Uniform_UInt16_semantics;
Function AtomicMin_Uniform_UInt16;
inline constexpr std::array AtomicMin_Uniform_UInt16_args = { &AtomicMin_Uniform_UInt16_ptr, &AtomicMin_Uniform_UInt16_compare, &AtomicMin_Uniform_UInt16_semantics };

/// atomicMin with Float16, Float16, MemorySemantics
Variable AtomicMin_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicMin_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMin_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMin_Workgroup_UInt16_compare;
Variable AtomicMin_Workgroup_UInt16_semantics;
Function AtomicMin_Workgroup_UInt16;
inline constexpr std::array AtomicMin_Workgroup_UInt16_args = { &AtomicMin_Workgroup_UInt16_ptr, &AtomicMin_Workgroup_UInt16_compare, &AtomicMin_Workgroup_UInt16_semantics };

/// atomicMax with Float16, Float16, MemorySemantics
Variable AtomicMax_Uniform_UInt16_ptr;
inline constexpr std::array AtomicMax_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMax_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMax_Uniform_UInt16_compare;
Variable AtomicMax_Uniform_UInt16_semantics;
Function AtomicMax_Uniform_UInt16;
inline constexpr std::array AtomicMax_Uniform_UInt16_args = { &AtomicMax_Uniform_UInt16_ptr, &AtomicMax_Uniform_UInt16_compare, &AtomicMax_Uniform_UInt16_semantics };

/// atomicMax with Float16, Float16, MemorySemantics
Variable AtomicMax_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicMax_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMax_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMax_Workgroup_UInt16_compare;
Variable AtomicMax_Workgroup_UInt16_semantics;
Function AtomicMax_Workgroup_UInt16;
inline constexpr std::array AtomicMax_Workgroup_UInt16_args = { &AtomicMax_Workgroup_UInt16_ptr, &AtomicMax_Workgroup_UInt16_compare, &AtomicMax_Workgroup_UInt16_semantics };

/// atomicMin with Float16, Float16, MemorySemantics
Variable AtomicMin_Uniform_Int16_ptr;
inline constexpr std::array AtomicMin_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMin_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMin_Uniform_Int16_compare;
Variable AtomicMin_Uniform_Int16_semantics;
Function AtomicMin_Uniform_Int16;
inline constexpr std::array AtomicMin_Uniform_Int16_args = { &AtomicMin_Uniform_Int16_ptr, &AtomicMin_Uniform_Int16_compare, &AtomicMin_Uniform_Int16_semantics };

/// atomicMin with Float16, Float16, MemorySemantics
Variable AtomicMin_Workgroup_Int16_ptr;
inline constexpr std::array AtomicMin_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMin_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMin_Workgroup_Int16_compare;
Variable AtomicMin_Workgroup_Int16_semantics;
Function AtomicMin_Workgroup_Int16;
inline constexpr std::array AtomicMin_Workgroup_Int16_args = { &AtomicMin_Workgroup_Int16_ptr, &AtomicMin_Workgroup_Int16_compare, &AtomicMin_Workgroup_Int16_semantics };

/// atomicMax with Float16, Float16, MemorySemantics
Variable AtomicMax_Uniform_Int16_ptr;
inline constexpr std::array AtomicMax_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMax_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMax_Uniform_Int16_compare;
Variable AtomicMax_Uniform_Int16_semantics;
Function AtomicMax_Uniform_Int16;
inline constexpr std::array AtomicMax_Uniform_Int16_args = { &AtomicMax_Uniform_Int16_ptr, &AtomicMax_Uniform_Int16_compare, &AtomicMax_Uniform_Int16_semantics };

/// atomicMax with Float16, Float16, MemorySemantics
Variable AtomicMax_Workgroup_Int16_ptr;
inline constexpr std::array AtomicMax_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicMax_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicMax_Workgroup_Int16_compare;
Variable AtomicMax_Workgroup_Int16_semantics;
Function AtomicMax_Workgroup_Int16;
inline constexpr std::array AtomicMax_Workgroup_Int16_args = { &AtomicMax_Workgroup_Int16_ptr, &AtomicMax_Workgroup_Int16_compare, &AtomicMax_Workgroup_Int16_semantics };

/// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
Variable AtomicCompareExchange_Uniform_UInt32_ptr;
inline constexpr std::array AtomicCompareExchange_Uniform_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicCompareExchange_Uniform_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicCompareExchange_Uniform_UInt32_value;
Variable AtomicCompareExchange_Uniform_UInt32_compare;
Variable AtomicCompareExchange_Uniform_UInt32_semantics;
Function AtomicCompareExchange_Uniform_UInt32;
inline constexpr std::array AtomicCompareExchange_Uniform_UInt32_args = { &AtomicCompareExchange_Uniform_UInt32_ptr, &AtomicCompareExchange_Uniform_UInt32_value, &AtomicCompareExchange_Uniform_UInt32_compare, &AtomicCompareExchange_Uniform_UInt32_semantics };

/// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
Variable AtomicCompareExchange_Workgroup_UInt32_ptr;
inline constexpr std::array AtomicCompareExchange_Workgroup_UInt32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicCompareExchange_Workgroup_UInt32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicCompareExchange_Workgroup_UInt32_value;
Variable AtomicCompareExchange_Workgroup_UInt32_compare;
Variable AtomicCompareExchange_Workgroup_UInt32_semantics;
Function AtomicCompareExchange_Workgroup_UInt32;
inline constexpr std::array AtomicCompareExchange_Workgroup_UInt32_args = { &AtomicCompareExchange_Workgroup_UInt32_ptr, &AtomicCompareExchange_Workgroup_UInt32_value, &AtomicCompareExchange_Workgroup_UInt32_compare, &AtomicCompareExchange_Workgroup_UInt32_semantics };

/// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
Variable AtomicCompareExchange_Uniform_Int32_ptr;
inline constexpr std::array AtomicCompareExchange_Uniform_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicCompareExchange_Uniform_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicCompareExchange_Uniform_Int32_value;
Variable AtomicCompareExchange_Uniform_Int32_compare;
Variable AtomicCompareExchange_Uniform_Int32_semantics;
Function AtomicCompareExchange_Uniform_Int32;
inline constexpr std::array AtomicCompareExchange_Uniform_Int32_args = { &AtomicCompareExchange_Uniform_Int32_ptr, &AtomicCompareExchange_Uniform_Int32_value, &AtomicCompareExchange_Uniform_Int32_compare, &AtomicCompareExchange_Uniform_Int32_semantics };

/// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
Variable AtomicCompareExchange_Workgroup_Int32_ptr;
inline constexpr std::array AtomicCompareExchange_Workgroup_Int32_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicCompareExchange_Workgroup_Int32_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicCompareExchange_Workgroup_Int32_value;
Variable AtomicCompareExchange_Workgroup_Int32_compare;
Variable AtomicCompareExchange_Workgroup_Int32_semantics;
Function AtomicCompareExchange_Workgroup_Int32;
inline constexpr std::array AtomicCompareExchange_Workgroup_Int32_args = { &AtomicCompareExchange_Workgroup_Int32_ptr, &AtomicCompareExchange_Workgroup_Int32_value, &AtomicCompareExchange_Workgroup_Int32_compare, &AtomicCompareExchange_Workgroup_Int32_semantics };

/// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
Variable AtomicCompareExchange_Uniform_UInt16_ptr;
inline constexpr std::array AtomicCompareExchange_Uniform_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicCompareExchange_Uniform_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicCompareExchange_Uniform_UInt16_value;
Variable AtomicCompareExchange_Uniform_UInt16_compare;
Variable AtomicCompareExchange_Uniform_UInt16_semantics;
Function AtomicCompareExchange_Uniform_UInt16;
inline constexpr std::array AtomicCompareExchange_Uniform_UInt16_args = { &AtomicCompareExchange_Uniform_UInt16_ptr, &AtomicCompareExchange_Uniform_UInt16_value, &AtomicCompareExchange_Uniform_UInt16_compare, &AtomicCompareExchange_Uniform_UInt16_semantics };

/// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
Variable AtomicCompareExchange_Workgroup_UInt16_ptr;
inline constexpr std::array AtomicCompareExchange_Workgroup_UInt16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicCompareExchange_Workgroup_UInt16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicCompareExchange_Workgroup_UInt16_value;
Variable AtomicCompareExchange_Workgroup_UInt16_compare;
Variable AtomicCompareExchange_Workgroup_UInt16_semantics;
Function AtomicCompareExchange_Workgroup_UInt16;
inline constexpr std::array AtomicCompareExchange_Workgroup_UInt16_args = { &AtomicCompareExchange_Workgroup_UInt16_ptr, &AtomicCompareExchange_Workgroup_UInt16_value, &AtomicCompareExchange_Workgroup_UInt16_compare, &AtomicCompareExchange_Workgroup_UInt16_semantics };

/// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
Variable AtomicCompareExchange_Uniform_Int16_ptr;
inline constexpr std::array AtomicCompareExchange_Uniform_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicCompareExchange_Uniform_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicCompareExchange_Uniform_Int16_value;
Variable AtomicCompareExchange_Uniform_Int16_compare;
Variable AtomicCompareExchange_Uniform_Int16_semantics;
Function AtomicCompareExchange_Uniform_Int16;
inline constexpr std::array AtomicCompareExchange_Uniform_Int16_args = { &AtomicCompareExchange_Uniform_Int16_ptr, &AtomicCompareExchange_Uniform_Int16_value, &AtomicCompareExchange_Uniform_Int16_compare, &AtomicCompareExchange_Uniform_Int16_semantics };

/// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
Variable AtomicCompareExchange_Workgroup_Int16_ptr;
inline constexpr std::array AtomicCompareExchange_Workgroup_Int16_ptr_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array AtomicCompareExchange_Workgroup_Int16_ptr_modifierValues = {(Expression*)nullptr};
Variable AtomicCompareExchange_Workgroup_Int16_value;
Variable AtomicCompareExchange_Workgroup_Int16_compare;
Variable AtomicCompareExchange_Workgroup_Int16_semantics;
Function AtomicCompareExchange_Workgroup_Int16;
inline constexpr std::array AtomicCompareExchange_Workgroup_Int16_args = { &AtomicCompareExchange_Workgroup_Int16_ptr, &AtomicCompareExchange_Workgroup_Int16_value, &AtomicCompareExchange_Workgroup_Int16_compare, &AtomicCompareExchange_Workgroup_Int16_semantics };

/// bitInsert with UInt16, UInt16, UInt16, UInt16
Variable BitInsert_UInt16_base;
Variable BitInsert_UInt16_value;
Variable BitInsert_UInt16_offset;
Variable BitInsert_UInt16_count;
Function BitInsert_UInt16;
inline constexpr std::array BitInsert_UInt16_args = { &BitInsert_UInt16_base, &BitInsert_UInt16_value, &BitInsert_UInt16_offset, &BitInsert_UInt16_count };

/// bitInsert with UInt32, UInt32, UInt32, UInt32
Variable BitInsert_UInt32_base;
Variable BitInsert_UInt32_value;
Variable BitInsert_UInt32_offset;
Variable BitInsert_UInt32_count;
Function BitInsert_UInt32;
inline constexpr std::array BitInsert_UInt32_args = { &BitInsert_UInt32_base, &BitInsert_UInt32_value, &BitInsert_UInt32_offset, &BitInsert_UInt32_count };

void SetupIntrinsics9()
{
    /// subgroupSwapHorizontal with Int16x3
    SubgroupSwapHorizontal_Int16x3_value.name = "value"_c;
    SubgroupSwapHorizontal_Int16x3_value.type = Type::FullType{ Int16x3Type.name };
    SubgroupSwapHorizontal_Int16x3.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int16x3.name = SubgroupSwapHorizontal_Int16x3_name;
    SubgroupSwapHorizontal_Int16x3.backendIndex = 2089;
    SubgroupSwapHorizontal_Int16x3.returnType = Type::FullType { Int16x3Type.name };
    SubgroupSwapHorizontal_Int16x3.parameters = SubgroupSwapHorizontal_Int16x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3_value)->typeSymbol = &Int16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3)->signature = "subgroupSwapHorizontal(i16x3) i16x3"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3)->name = "subgroupSwapHorizontal(i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3)->nameWithVarNames = "subgroupSwapHorizontal(value : i16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x3)->returnTypeSymbol = &Int16x3Type;

    /// subgroupSwapHorizontal with Int16x4
    SubgroupSwapHorizontal_Int16x4_value.name = "value"_c;
    SubgroupSwapHorizontal_Int16x4_value.type = Type::FullType{ Int16x4Type.name };
    SubgroupSwapHorizontal_Int16x4.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_Int16x4.name = SubgroupSwapHorizontal_Int16x4_name;
    SubgroupSwapHorizontal_Int16x4.backendIndex = 2090;
    SubgroupSwapHorizontal_Int16x4.returnType = Type::FullType { Int16x4Type.name };
    SubgroupSwapHorizontal_Int16x4.parameters = SubgroupSwapHorizontal_Int16x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4_value)->typeSymbol = &Int16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4)->signature = "subgroupSwapHorizontal(i16x4) i16x4"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4)->name = "subgroupSwapHorizontal(i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4)->nameWithVarNames = "subgroupSwapHorizontal(value : i16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_Int16x4)->returnTypeSymbol = &Int16x4Type;

    /// subgroupSwapHorizontal with UInt32
    SubgroupSwapHorizontal_UInt32_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt32_value.type = Type::FullType{ UInt32Type.name };
    SubgroupSwapHorizontal_UInt32.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt32.name = SubgroupSwapHorizontal_UInt32_name;
    SubgroupSwapHorizontal_UInt32.backendIndex = 2091;
    SubgroupSwapHorizontal_UInt32.returnType = Type::FullType { UInt32Type.name };
    SubgroupSwapHorizontal_UInt32.parameters = SubgroupSwapHorizontal_UInt32_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32)->signature = "subgroupSwapHorizontal(u32) u32"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32)->name = "subgroupSwapHorizontal(u32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32)->nameWithVarNames = "subgroupSwapHorizontal(value : u32)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32)->returnTypeSymbol = &UInt32Type;

    /// subgroupSwapHorizontal with UInt32x2
    SubgroupSwapHorizontal_UInt32x2_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt32x2_value.type = Type::FullType{ UInt32x2Type.name };
    SubgroupSwapHorizontal_UInt32x2.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt32x2.name = SubgroupSwapHorizontal_UInt32x2_name;
    SubgroupSwapHorizontal_UInt32x2.backendIndex = 2092;
    SubgroupSwapHorizontal_UInt32x2.returnType = Type::FullType { UInt32x2Type.name };
    SubgroupSwapHorizontal_UInt32x2.parameters = SubgroupSwapHorizontal_UInt32x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2_value)->typeSymbol = &UInt32x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2)->signature = "subgroupSwapHorizontal(u32x2) u32x2"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2)->name = "subgroupSwapHorizontal(u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2)->nameWithVarNames = "subgroupSwapHorizontal(value : u32x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x2)->returnTypeSymbol = &UInt32x2Type;

    /// subgroupSwapHorizontal with UInt32x3
    SubgroupSwapHorizontal_UInt32x3_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt32x3_value.type = Type::FullType{ UInt32x3Type.name };
    SubgroupSwapHorizontal_UInt32x3.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt32x3.name = SubgroupSwapHorizontal_UInt32x3_name;
    SubgroupSwapHorizontal_UInt32x3.backendIndex = 2093;
    SubgroupSwapHorizontal_UInt32x3.returnType = Type::FullType { UInt32x3Type.name };
    SubgroupSwapHorizontal_UInt32x3.parameters = SubgroupSwapHorizontal_UInt32x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3_value)->typeSymbol = &UInt32x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3)->signature = "subgroupSwapHorizontal(u32x3) u32x3"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3)->name = "subgroupSwapHorizontal(u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3)->nameWithVarNames = "subgroupSwapHorizontal(value : u32x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x3)->returnTypeSymbol = &UInt32x3Type;

    /// subgroupSwapHorizontal with UInt32x4
    SubgroupSwapHorizontal_UInt32x4_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt32x4_value.type = Type::FullType{ UInt32x4Type.name };
    SubgroupSwapHorizontal_UInt32x4.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt32x4.name = SubgroupSwapHorizontal_UInt32x4_name;
    SubgroupSwapHorizontal_UInt32x4.backendIndex = 2094;
    SubgroupSwapHorizontal_UInt32x4.returnType = Type::FullType { UInt32x4Type.name };
    SubgroupSwapHorizontal_UInt32x4.parameters = SubgroupSwapHorizontal_UInt32x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4_value)->typeSymbol = &UInt32x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4)->signature = "subgroupSwapHorizontal(u32x4) u32x4"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4)->name = "subgroupSwapHorizontal(u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4)->nameWithVarNames = "subgroupSwapHorizontal(value : u32x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt32x4)->returnTypeSymbol = &UInt32x4Type;

    /// subgroupSwapHorizontal with UInt16
    SubgroupSwapHorizontal_UInt16_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt16_value.type = Type::FullType{ UInt16Type.name };
    SubgroupSwapHorizontal_UInt16.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt16.name = SubgroupSwapHorizontal_UInt16_name;
    SubgroupSwapHorizontal_UInt16.backendIndex = 2095;
    SubgroupSwapHorizontal_UInt16.returnType = Type::FullType { UInt16Type.name };
    SubgroupSwapHorizontal_UInt16.parameters = SubgroupSwapHorizontal_UInt16_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16)->signature = "subgroupSwapHorizontal(u16) u16"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16)->name = "subgroupSwapHorizontal(u16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16)->nameWithVarNames = "subgroupSwapHorizontal(value : u16)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16)->returnTypeSymbol = &UInt16Type;

    /// subgroupSwapHorizontal with UInt16x2
    SubgroupSwapHorizontal_UInt16x2_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt16x2_value.type = Type::FullType{ UInt16x2Type.name };
    SubgroupSwapHorizontal_UInt16x2.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt16x2.name = SubgroupSwapHorizontal_UInt16x2_name;
    SubgroupSwapHorizontal_UInt16x2.backendIndex = 2096;
    SubgroupSwapHorizontal_UInt16x2.returnType = Type::FullType { UInt16x2Type.name };
    SubgroupSwapHorizontal_UInt16x2.parameters = SubgroupSwapHorizontal_UInt16x2_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2_value)->typeSymbol = &UInt16x2Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2)->signature = "subgroupSwapHorizontal(u16x2) u16x2"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2)->name = "subgroupSwapHorizontal(u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2)->nameWithVarNames = "subgroupSwapHorizontal(value : u16x2)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x2)->returnTypeSymbol = &UInt16x2Type;

    /// subgroupSwapHorizontal with UInt16x3
    SubgroupSwapHorizontal_UInt16x3_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt16x3_value.type = Type::FullType{ UInt16x3Type.name };
    SubgroupSwapHorizontal_UInt16x3.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt16x3.name = SubgroupSwapHorizontal_UInt16x3_name;
    SubgroupSwapHorizontal_UInt16x3.backendIndex = 2097;
    SubgroupSwapHorizontal_UInt16x3.returnType = Type::FullType { UInt16x3Type.name };
    SubgroupSwapHorizontal_UInt16x3.parameters = SubgroupSwapHorizontal_UInt16x3_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3_value)->typeSymbol = &UInt16x3Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3)->signature = "subgroupSwapHorizontal(u16x3) u16x3"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3)->name = "subgroupSwapHorizontal(u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3)->nameWithVarNames = "subgroupSwapHorizontal(value : u16x3)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x3)->returnTypeSymbol = &UInt16x3Type;

    /// subgroupSwapHorizontal with UInt16x4
    SubgroupSwapHorizontal_UInt16x4_value.name = "value"_c;
    SubgroupSwapHorizontal_UInt16x4_value.type = Type::FullType{ UInt16x4Type.name };
    SubgroupSwapHorizontal_UInt16x4.documentation = "Swaps the value at the current thread with the value at the horizontal thread in the subgroup"_c;
    SubgroupSwapHorizontal_UInt16x4.name = SubgroupSwapHorizontal_UInt16x4_name;
    SubgroupSwapHorizontal_UInt16x4.backendIndex = 2098;
    SubgroupSwapHorizontal_UInt16x4.returnType = Type::FullType { UInt16x4Type.name };
    SubgroupSwapHorizontal_UInt16x4.parameters = SubgroupSwapHorizontal_UInt16x4_args;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4_value)->typeSymbol = &UInt16x4Type;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4)->signature = "subgroupSwapHorizontal(u16x4) u16x4"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4)->name = "subgroupSwapHorizontal(u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4)->nameWithVarNames = "subgroupSwapHorizontal(value : u16x4)"_c;
    Symbol::Resolved(&SubgroupSwapHorizontal_UInt16x4)->returnTypeSymbol = &UInt16x4Type;

    /// atomicLoad with UInt32, MemorySemantics
    AtomicLoad_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicLoad_Uniform_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicLoad_Uniform_UInt32_ptr.type.strict = true;
    AtomicLoad_Uniform_UInt32_ptr.type.modifiers = AtomicLoad_Uniform_UInt32_ptr_modifiers;
    AtomicLoad_Uniform_UInt32_ptr.type.modifierValues = AtomicLoad_Uniform_UInt32_ptr_modifierValues;
    AtomicLoad_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicLoad_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Uniform_UInt32_semantics.type.literal = true;
    AtomicLoad_Uniform_UInt32.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Uniform_UInt32.name = AtomicLoad_Uniform_UInt32_name;
    AtomicLoad_Uniform_UInt32.backendIndex = 2099;
    AtomicLoad_Uniform_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicLoad_Uniform_UInt32.parameters = AtomicLoad_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt32)->signature = "atomicLoad(uniform *u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt32)->name = "atomicLoad(uniform *u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt32)->nameWithVarNames = "atomicLoad(ptr : uniform *u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicLoad with UInt32, MemorySemantics
    AtomicLoad_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicLoad_Workgroup_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicLoad_Workgroup_UInt32_ptr.type.strict = true;
    AtomicLoad_Workgroup_UInt32_ptr.type.modifiers = AtomicLoad_Workgroup_UInt32_ptr_modifiers;
    AtomicLoad_Workgroup_UInt32_ptr.type.modifierValues = AtomicLoad_Workgroup_UInt32_ptr_modifierValues;
    AtomicLoad_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicLoad_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Workgroup_UInt32_semantics.type.literal = true;
    AtomicLoad_Workgroup_UInt32.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Workgroup_UInt32.name = AtomicLoad_Workgroup_UInt32_name;
    AtomicLoad_Workgroup_UInt32.backendIndex = 2100;
    AtomicLoad_Workgroup_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicLoad_Workgroup_UInt32.parameters = AtomicLoad_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt32)->signature = "atomicLoad(workgroup *u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt32)->name = "atomicLoad(workgroup *u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt32)->nameWithVarNames = "atomicLoad(ptr : workgroup *u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicIncrement with UInt32, MemorySemantics
    AtomicIncrement_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicIncrement_Uniform_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicIncrement_Uniform_UInt32_ptr.type.strict = true;
    AtomicIncrement_Uniform_UInt32_ptr.type.modifiers = AtomicIncrement_Uniform_UInt32_ptr_modifiers;
    AtomicIncrement_Uniform_UInt32_ptr.type.modifierValues = AtomicIncrement_Uniform_UInt32_ptr_modifierValues;
    AtomicIncrement_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicIncrement_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Uniform_UInt32_semantics.type.literal = true;
    AtomicIncrement_Uniform_UInt32.documentation = "Increments the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicIncrement_Uniform_UInt32.name = AtomicIncrement_Uniform_UInt32_name;
    AtomicIncrement_Uniform_UInt32.backendIndex = 2101;
    AtomicIncrement_Uniform_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicIncrement_Uniform_UInt32.parameters = AtomicIncrement_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt32)->signature = "atomicIncrement(uniform *u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt32)->name = "atomicIncrement(uniform *u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt32)->nameWithVarNames = "atomicIncrement(ptr : uniform *u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicIncrement with UInt32, MemorySemantics
    AtomicIncrement_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicIncrement_Workgroup_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicIncrement_Workgroup_UInt32_ptr.type.strict = true;
    AtomicIncrement_Workgroup_UInt32_ptr.type.modifiers = AtomicIncrement_Workgroup_UInt32_ptr_modifiers;
    AtomicIncrement_Workgroup_UInt32_ptr.type.modifierValues = AtomicIncrement_Workgroup_UInt32_ptr_modifierValues;
    AtomicIncrement_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicIncrement_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Workgroup_UInt32_semantics.type.literal = true;
    AtomicIncrement_Workgroup_UInt32.documentation = "Increments the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicIncrement_Workgroup_UInt32.name = AtomicIncrement_Workgroup_UInt32_name;
    AtomicIncrement_Workgroup_UInt32.backendIndex = 2102;
    AtomicIncrement_Workgroup_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicIncrement_Workgroup_UInt32.parameters = AtomicIncrement_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt32)->signature = "atomicIncrement(workgroup *u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt32)->name = "atomicIncrement(workgroup *u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt32)->nameWithVarNames = "atomicIncrement(ptr : workgroup *u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicDecrement with UInt32, MemorySemantics
    AtomicDecrement_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicDecrement_Uniform_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicDecrement_Uniform_UInt32_ptr.type.strict = true;
    AtomicDecrement_Uniform_UInt32_ptr.type.modifiers = AtomicDecrement_Uniform_UInt32_ptr_modifiers;
    AtomicDecrement_Uniform_UInt32_ptr.type.modifierValues = AtomicDecrement_Uniform_UInt32_ptr_modifierValues;
    AtomicDecrement_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicDecrement_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Uniform_UInt32_semantics.type.literal = true;
    AtomicDecrement_Uniform_UInt32.documentation = "Decrements the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicDecrement_Uniform_UInt32.name = AtomicDecrement_Uniform_UInt32_name;
    AtomicDecrement_Uniform_UInt32.backendIndex = 2103;
    AtomicDecrement_Uniform_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicDecrement_Uniform_UInt32.parameters = AtomicDecrement_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt32)->signature = "atomicDecrement(uniform *u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt32)->name = "atomicDecrement(uniform *u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt32)->nameWithVarNames = "atomicDecrement(ptr : uniform *u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicDecrement with UInt32, MemorySemantics
    AtomicDecrement_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicDecrement_Workgroup_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicDecrement_Workgroup_UInt32_ptr.type.strict = true;
    AtomicDecrement_Workgroup_UInt32_ptr.type.modifiers = AtomicDecrement_Workgroup_UInt32_ptr_modifiers;
    AtomicDecrement_Workgroup_UInt32_ptr.type.modifierValues = AtomicDecrement_Workgroup_UInt32_ptr_modifierValues;
    AtomicDecrement_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicDecrement_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Workgroup_UInt32_semantics.type.literal = true;
    AtomicDecrement_Workgroup_UInt32.documentation = "Decrements the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicDecrement_Workgroup_UInt32.name = AtomicDecrement_Workgroup_UInt32_name;
    AtomicDecrement_Workgroup_UInt32.backendIndex = 2104;
    AtomicDecrement_Workgroup_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicDecrement_Workgroup_UInt32.parameters = AtomicDecrement_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt32)->signature = "atomicDecrement(workgroup *u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt32)->name = "atomicDecrement(workgroup *u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt32)->nameWithVarNames = "atomicDecrement(ptr : workgroup *u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicLoad with Int32, MemorySemantics
    AtomicLoad_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicLoad_Uniform_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicLoad_Uniform_Int32_ptr.type.strict = true;
    AtomicLoad_Uniform_Int32_ptr.type.modifiers = AtomicLoad_Uniform_Int32_ptr_modifiers;
    AtomicLoad_Uniform_Int32_ptr.type.modifierValues = AtomicLoad_Uniform_Int32_ptr_modifierValues;
    AtomicLoad_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicLoad_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Uniform_Int32_semantics.type.literal = true;
    AtomicLoad_Uniform_Int32.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Uniform_Int32.name = AtomicLoad_Uniform_Int32_name;
    AtomicLoad_Uniform_Int32.backendIndex = 2105;
    AtomicLoad_Uniform_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicLoad_Uniform_Int32.parameters = AtomicLoad_Uniform_Int32_args;
    Symbol::Resolved(&AtomicLoad_Uniform_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicLoad_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicLoad_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Uniform_Int32)->signature = "atomicLoad(uniform *i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_Int32)->name = "atomicLoad(uniform *i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_Int32)->nameWithVarNames = "atomicLoad(ptr : uniform *i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicLoad with Int32, MemorySemantics
    AtomicLoad_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicLoad_Workgroup_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicLoad_Workgroup_Int32_ptr.type.strict = true;
    AtomicLoad_Workgroup_Int32_ptr.type.modifiers = AtomicLoad_Workgroup_Int32_ptr_modifiers;
    AtomicLoad_Workgroup_Int32_ptr.type.modifierValues = AtomicLoad_Workgroup_Int32_ptr_modifierValues;
    AtomicLoad_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicLoad_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Workgroup_Int32_semantics.type.literal = true;
    AtomicLoad_Workgroup_Int32.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Workgroup_Int32.name = AtomicLoad_Workgroup_Int32_name;
    AtomicLoad_Workgroup_Int32.backendIndex = 2106;
    AtomicLoad_Workgroup_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicLoad_Workgroup_Int32.parameters = AtomicLoad_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int32)->signature = "atomicLoad(workgroup *i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int32)->name = "atomicLoad(workgroup *i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int32)->nameWithVarNames = "atomicLoad(ptr : workgroup *i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicIncrement with Int32, MemorySemantics
    AtomicIncrement_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicIncrement_Uniform_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicIncrement_Uniform_Int32_ptr.type.strict = true;
    AtomicIncrement_Uniform_Int32_ptr.type.modifiers = AtomicIncrement_Uniform_Int32_ptr_modifiers;
    AtomicIncrement_Uniform_Int32_ptr.type.modifierValues = AtomicIncrement_Uniform_Int32_ptr_modifierValues;
    AtomicIncrement_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicIncrement_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Uniform_Int32_semantics.type.literal = true;
    AtomicIncrement_Uniform_Int32.documentation = "Increments the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicIncrement_Uniform_Int32.name = AtomicIncrement_Uniform_Int32_name;
    AtomicIncrement_Uniform_Int32.backendIndex = 2107;
    AtomicIncrement_Uniform_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicIncrement_Uniform_Int32.parameters = AtomicIncrement_Uniform_Int32_args;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int32)->signature = "atomicIncrement(uniform *i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int32)->name = "atomicIncrement(uniform *i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int32)->nameWithVarNames = "atomicIncrement(ptr : uniform *i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicIncrement with Int32, MemorySemantics
    AtomicIncrement_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicIncrement_Workgroup_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicIncrement_Workgroup_Int32_ptr.type.strict = true;
    AtomicIncrement_Workgroup_Int32_ptr.type.modifiers = AtomicIncrement_Workgroup_Int32_ptr_modifiers;
    AtomicIncrement_Workgroup_Int32_ptr.type.modifierValues = AtomicIncrement_Workgroup_Int32_ptr_modifierValues;
    AtomicIncrement_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicIncrement_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Workgroup_Int32_semantics.type.literal = true;
    AtomicIncrement_Workgroup_Int32.documentation = "Increments the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicIncrement_Workgroup_Int32.name = AtomicIncrement_Workgroup_Int32_name;
    AtomicIncrement_Workgroup_Int32.backendIndex = 2108;
    AtomicIncrement_Workgroup_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicIncrement_Workgroup_Int32.parameters = AtomicIncrement_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int32)->signature = "atomicIncrement(workgroup *i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int32)->name = "atomicIncrement(workgroup *i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int32)->nameWithVarNames = "atomicIncrement(ptr : workgroup *i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicDecrement with Int32, MemorySemantics
    AtomicDecrement_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicDecrement_Uniform_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicDecrement_Uniform_Int32_ptr.type.strict = true;
    AtomicDecrement_Uniform_Int32_ptr.type.modifiers = AtomicDecrement_Uniform_Int32_ptr_modifiers;
    AtomicDecrement_Uniform_Int32_ptr.type.modifierValues = AtomicDecrement_Uniform_Int32_ptr_modifierValues;
    AtomicDecrement_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicDecrement_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Uniform_Int32_semantics.type.literal = true;
    AtomicDecrement_Uniform_Int32.documentation = "Decrements the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicDecrement_Uniform_Int32.name = AtomicDecrement_Uniform_Int32_name;
    AtomicDecrement_Uniform_Int32.backendIndex = 2109;
    AtomicDecrement_Uniform_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicDecrement_Uniform_Int32.parameters = AtomicDecrement_Uniform_Int32_args;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int32)->signature = "atomicDecrement(uniform *i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int32)->name = "atomicDecrement(uniform *i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int32)->nameWithVarNames = "atomicDecrement(ptr : uniform *i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicDecrement with Int32, MemorySemantics
    AtomicDecrement_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicDecrement_Workgroup_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicDecrement_Workgroup_Int32_ptr.type.strict = true;
    AtomicDecrement_Workgroup_Int32_ptr.type.modifiers = AtomicDecrement_Workgroup_Int32_ptr_modifiers;
    AtomicDecrement_Workgroup_Int32_ptr.type.modifierValues = AtomicDecrement_Workgroup_Int32_ptr_modifierValues;
    AtomicDecrement_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicDecrement_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Workgroup_Int32_semantics.type.literal = true;
    AtomicDecrement_Workgroup_Int32.documentation = "Decrements the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicDecrement_Workgroup_Int32.name = AtomicDecrement_Workgroup_Int32_name;
    AtomicDecrement_Workgroup_Int32.backendIndex = 2110;
    AtomicDecrement_Workgroup_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicDecrement_Workgroup_Int32.parameters = AtomicDecrement_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int32)->signature = "atomicDecrement(workgroup *i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int32)->name = "atomicDecrement(workgroup *i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int32)->nameWithVarNames = "atomicDecrement(ptr : workgroup *i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicLoad with UInt16, MemorySemantics
    AtomicLoad_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicLoad_Uniform_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicLoad_Uniform_UInt16_ptr.type.strict = true;
    AtomicLoad_Uniform_UInt16_ptr.type.modifiers = AtomicLoad_Uniform_UInt16_ptr_modifiers;
    AtomicLoad_Uniform_UInt16_ptr.type.modifierValues = AtomicLoad_Uniform_UInt16_ptr_modifierValues;
    AtomicLoad_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicLoad_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Uniform_UInt16_semantics.type.literal = true;
    AtomicLoad_Uniform_UInt16.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Uniform_UInt16.name = AtomicLoad_Uniform_UInt16_name;
    AtomicLoad_Uniform_UInt16.backendIndex = 2111;
    AtomicLoad_Uniform_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicLoad_Uniform_UInt16.parameters = AtomicLoad_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt16)->signature = "atomicLoad(uniform *u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt16)->name = "atomicLoad(uniform *u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt16)->nameWithVarNames = "atomicLoad(ptr : uniform *u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicLoad with UInt16, MemorySemantics
    AtomicLoad_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicLoad_Workgroup_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicLoad_Workgroup_UInt16_ptr.type.strict = true;
    AtomicLoad_Workgroup_UInt16_ptr.type.modifiers = AtomicLoad_Workgroup_UInt16_ptr_modifiers;
    AtomicLoad_Workgroup_UInt16_ptr.type.modifierValues = AtomicLoad_Workgroup_UInt16_ptr_modifierValues;
    AtomicLoad_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicLoad_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Workgroup_UInt16_semantics.type.literal = true;
    AtomicLoad_Workgroup_UInt16.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Workgroup_UInt16.name = AtomicLoad_Workgroup_UInt16_name;
    AtomicLoad_Workgroup_UInt16.backendIndex = 2112;
    AtomicLoad_Workgroup_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicLoad_Workgroup_UInt16.parameters = AtomicLoad_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt16)->signature = "atomicLoad(workgroup *u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt16)->name = "atomicLoad(workgroup *u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt16)->nameWithVarNames = "atomicLoad(ptr : workgroup *u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicIncrement with UInt16, MemorySemantics
    AtomicIncrement_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicIncrement_Uniform_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicIncrement_Uniform_UInt16_ptr.type.strict = true;
    AtomicIncrement_Uniform_UInt16_ptr.type.modifiers = AtomicIncrement_Uniform_UInt16_ptr_modifiers;
    AtomicIncrement_Uniform_UInt16_ptr.type.modifierValues = AtomicIncrement_Uniform_UInt16_ptr_modifierValues;
    AtomicIncrement_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicIncrement_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Uniform_UInt16_semantics.type.literal = true;
    AtomicIncrement_Uniform_UInt16.documentation = "Increments the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicIncrement_Uniform_UInt16.name = AtomicIncrement_Uniform_UInt16_name;
    AtomicIncrement_Uniform_UInt16.backendIndex = 2113;
    AtomicIncrement_Uniform_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicIncrement_Uniform_UInt16.parameters = AtomicIncrement_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt16)->signature = "atomicIncrement(uniform *u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt16)->name = "atomicIncrement(uniform *u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt16)->nameWithVarNames = "atomicIncrement(ptr : uniform *u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Uniform_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicIncrement with UInt16, MemorySemantics
    AtomicIncrement_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicIncrement_Workgroup_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicIncrement_Workgroup_UInt16_ptr.type.strict = true;
    AtomicIncrement_Workgroup_UInt16_ptr.type.modifiers = AtomicIncrement_Workgroup_UInt16_ptr_modifiers;
    AtomicIncrement_Workgroup_UInt16_ptr.type.modifierValues = AtomicIncrement_Workgroup_UInt16_ptr_modifierValues;
    AtomicIncrement_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicIncrement_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Workgroup_UInt16_semantics.type.literal = true;
    AtomicIncrement_Workgroup_UInt16.documentation = "Increments the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicIncrement_Workgroup_UInt16.name = AtomicIncrement_Workgroup_UInt16_name;
    AtomicIncrement_Workgroup_UInt16.backendIndex = 2114;
    AtomicIncrement_Workgroup_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicIncrement_Workgroup_UInt16.parameters = AtomicIncrement_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt16)->signature = "atomicIncrement(workgroup *u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt16)->name = "atomicIncrement(workgroup *u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt16)->nameWithVarNames = "atomicIncrement(ptr : workgroup *u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Workgroup_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicDecrement with UInt16, MemorySemantics
    AtomicDecrement_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicDecrement_Uniform_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicDecrement_Uniform_UInt16_ptr.type.strict = true;
    AtomicDecrement_Uniform_UInt16_ptr.type.modifiers = AtomicDecrement_Uniform_UInt16_ptr_modifiers;
    AtomicDecrement_Uniform_UInt16_ptr.type.modifierValues = AtomicDecrement_Uniform_UInt16_ptr_modifierValues;
    AtomicDecrement_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicDecrement_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Uniform_UInt16_semantics.type.literal = true;
    AtomicDecrement_Uniform_UInt16.documentation = "Decrements the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicDecrement_Uniform_UInt16.name = AtomicDecrement_Uniform_UInt16_name;
    AtomicDecrement_Uniform_UInt16.backendIndex = 2115;
    AtomicDecrement_Uniform_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicDecrement_Uniform_UInt16.parameters = AtomicDecrement_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt16)->signature = "atomicDecrement(uniform *u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt16)->name = "atomicDecrement(uniform *u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt16)->nameWithVarNames = "atomicDecrement(ptr : uniform *u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Uniform_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicDecrement with UInt16, MemorySemantics
    AtomicDecrement_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicDecrement_Workgroup_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicDecrement_Workgroup_UInt16_ptr.type.strict = true;
    AtomicDecrement_Workgroup_UInt16_ptr.type.modifiers = AtomicDecrement_Workgroup_UInt16_ptr_modifiers;
    AtomicDecrement_Workgroup_UInt16_ptr.type.modifierValues = AtomicDecrement_Workgroup_UInt16_ptr_modifierValues;
    AtomicDecrement_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicDecrement_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Workgroup_UInt16_semantics.type.literal = true;
    AtomicDecrement_Workgroup_UInt16.documentation = "Decrements the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicDecrement_Workgroup_UInt16.name = AtomicDecrement_Workgroup_UInt16_name;
    AtomicDecrement_Workgroup_UInt16.backendIndex = 2116;
    AtomicDecrement_Workgroup_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicDecrement_Workgroup_UInt16.parameters = AtomicDecrement_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt16)->signature = "atomicDecrement(workgroup *u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt16)->name = "atomicDecrement(workgroup *u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt16)->nameWithVarNames = "atomicDecrement(ptr : workgroup *u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Workgroup_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicLoad with Int16, MemorySemantics
    AtomicLoad_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicLoad_Uniform_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicLoad_Uniform_Int16_ptr.type.strict = true;
    AtomicLoad_Uniform_Int16_ptr.type.modifiers = AtomicLoad_Uniform_Int16_ptr_modifiers;
    AtomicLoad_Uniform_Int16_ptr.type.modifierValues = AtomicLoad_Uniform_Int16_ptr_modifierValues;
    AtomicLoad_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicLoad_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Uniform_Int16_semantics.type.literal = true;
    AtomicLoad_Uniform_Int16.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Uniform_Int16.name = AtomicLoad_Uniform_Int16_name;
    AtomicLoad_Uniform_Int16.backendIndex = 2117;
    AtomicLoad_Uniform_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicLoad_Uniform_Int16.parameters = AtomicLoad_Uniform_Int16_args;
    Symbol::Resolved(&AtomicLoad_Uniform_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicLoad_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicLoad_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Uniform_Int16)->signature = "atomicLoad(uniform *i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_Int16)->name = "atomicLoad(uniform *i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_Int16)->nameWithVarNames = "atomicLoad(ptr : uniform *i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicLoad with Int16, MemorySemantics
    AtomicLoad_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicLoad_Workgroup_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicLoad_Workgroup_Int16_ptr.type.strict = true;
    AtomicLoad_Workgroup_Int16_ptr.type.modifiers = AtomicLoad_Workgroup_Int16_ptr_modifiers;
    AtomicLoad_Workgroup_Int16_ptr.type.modifierValues = AtomicLoad_Workgroup_Int16_ptr_modifierValues;
    AtomicLoad_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicLoad_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Workgroup_Int16_semantics.type.literal = true;
    AtomicLoad_Workgroup_Int16.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Workgroup_Int16.name = AtomicLoad_Workgroup_Int16_name;
    AtomicLoad_Workgroup_Int16.backendIndex = 2118;
    AtomicLoad_Workgroup_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicLoad_Workgroup_Int16.parameters = AtomicLoad_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int16)->signature = "atomicLoad(workgroup *i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int16)->name = "atomicLoad(workgroup *i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int16)->nameWithVarNames = "atomicLoad(ptr : workgroup *i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicIncrement with Int16, MemorySemantics
    AtomicIncrement_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicIncrement_Uniform_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicIncrement_Uniform_Int16_ptr.type.strict = true;
    AtomicIncrement_Uniform_Int16_ptr.type.modifiers = AtomicIncrement_Uniform_Int16_ptr_modifiers;
    AtomicIncrement_Uniform_Int16_ptr.type.modifierValues = AtomicIncrement_Uniform_Int16_ptr_modifierValues;
    AtomicIncrement_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicIncrement_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Uniform_Int16_semantics.type.literal = true;
    AtomicIncrement_Uniform_Int16.documentation = "Increments the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicIncrement_Uniform_Int16.name = AtomicIncrement_Uniform_Int16_name;
    AtomicIncrement_Uniform_Int16.backendIndex = 2119;
    AtomicIncrement_Uniform_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicIncrement_Uniform_Int16.parameters = AtomicIncrement_Uniform_Int16_args;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int16)->signature = "atomicIncrement(uniform *i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int16)->name = "atomicIncrement(uniform *i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int16)->nameWithVarNames = "atomicIncrement(ptr : uniform *i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Uniform_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicIncrement with Int16, MemorySemantics
    AtomicIncrement_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicIncrement_Workgroup_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicIncrement_Workgroup_Int16_ptr.type.strict = true;
    AtomicIncrement_Workgroup_Int16_ptr.type.modifiers = AtomicIncrement_Workgroup_Int16_ptr_modifiers;
    AtomicIncrement_Workgroup_Int16_ptr.type.modifierValues = AtomicIncrement_Workgroup_Int16_ptr_modifierValues;
    AtomicIncrement_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicIncrement_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicIncrement_Workgroup_Int16_semantics.type.literal = true;
    AtomicIncrement_Workgroup_Int16.documentation = "Increments the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicIncrement_Workgroup_Int16.name = AtomicIncrement_Workgroup_Int16_name;
    AtomicIncrement_Workgroup_Int16.backendIndex = 2120;
    AtomicIncrement_Workgroup_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicIncrement_Workgroup_Int16.parameters = AtomicIncrement_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int16)->signature = "atomicIncrement(workgroup *i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int16)->name = "atomicIncrement(workgroup *i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int16)->nameWithVarNames = "atomicIncrement(ptr : workgroup *i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicIncrement_Workgroup_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicDecrement with Int16, MemorySemantics
    AtomicDecrement_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicDecrement_Uniform_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicDecrement_Uniform_Int16_ptr.type.strict = true;
    AtomicDecrement_Uniform_Int16_ptr.type.modifiers = AtomicDecrement_Uniform_Int16_ptr_modifiers;
    AtomicDecrement_Uniform_Int16_ptr.type.modifierValues = AtomicDecrement_Uniform_Int16_ptr_modifierValues;
    AtomicDecrement_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicDecrement_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Uniform_Int16_semantics.type.literal = true;
    AtomicDecrement_Uniform_Int16.documentation = "Decrements the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicDecrement_Uniform_Int16.name = AtomicDecrement_Uniform_Int16_name;
    AtomicDecrement_Uniform_Int16.backendIndex = 2121;
    AtomicDecrement_Uniform_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicDecrement_Uniform_Int16.parameters = AtomicDecrement_Uniform_Int16_args;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int16)->signature = "atomicDecrement(uniform *i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int16)->name = "atomicDecrement(uniform *i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int16)->nameWithVarNames = "atomicDecrement(ptr : uniform *i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Uniform_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicDecrement with Int16, MemorySemantics
    AtomicDecrement_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicDecrement_Workgroup_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicDecrement_Workgroup_Int16_ptr.type.strict = true;
    AtomicDecrement_Workgroup_Int16_ptr.type.modifiers = AtomicDecrement_Workgroup_Int16_ptr_modifiers;
    AtomicDecrement_Workgroup_Int16_ptr.type.modifierValues = AtomicDecrement_Workgroup_Int16_ptr_modifierValues;
    AtomicDecrement_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicDecrement_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicDecrement_Workgroup_Int16_semantics.type.literal = true;
    AtomicDecrement_Workgroup_Int16.documentation = "Decrements the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicDecrement_Workgroup_Int16.name = AtomicDecrement_Workgroup_Int16_name;
    AtomicDecrement_Workgroup_Int16.backendIndex = 2122;
    AtomicDecrement_Workgroup_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicDecrement_Workgroup_Int16.parameters = AtomicDecrement_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int16)->signature = "atomicDecrement(workgroup *i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int16)->name = "atomicDecrement(workgroup *i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int16)->nameWithVarNames = "atomicDecrement(ptr : workgroup *i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicDecrement_Workgroup_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicLoad with Float32, MemorySemantics
    AtomicLoad_Uniform_Float32_ptr.name = "ptr"_c;
    AtomicLoad_Uniform_Float32_ptr.type = Type::FullType{ Float32Type.name };
    AtomicLoad_Uniform_Float32_ptr.type.strict = true;
    AtomicLoad_Uniform_Float32_ptr.type.modifiers = AtomicLoad_Uniform_Float32_ptr_modifiers;
    AtomicLoad_Uniform_Float32_ptr.type.modifierValues = AtomicLoad_Uniform_Float32_ptr_modifierValues;
    AtomicLoad_Uniform_Float32_semantics.name = "semantics"_c;
    AtomicLoad_Uniform_Float32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Uniform_Float32_semantics.type.literal = true;
    AtomicLoad_Uniform_Float32.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Uniform_Float32.name = AtomicLoad_Uniform_Float32_name;
    AtomicLoad_Uniform_Float32.backendIndex = 2123;
    AtomicLoad_Uniform_Float32.returnType = Type::FullType { Float32Type.name };
    AtomicLoad_Uniform_Float32.parameters = AtomicLoad_Uniform_Float32_args;
    Symbol::Resolved(&AtomicLoad_Uniform_Float32_ptr)->typeSymbol = &Float32Type;
    Symbol::Resolved(&AtomicLoad_Uniform_Float32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicLoad_Uniform_Float32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Uniform_Float32)->signature = "atomicLoad(uniform *f32,literal MemorySemantics) f32"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_Float32)->name = "atomicLoad(uniform *f32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_Float32)->nameWithVarNames = "atomicLoad(ptr : uniform *f32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_Float32)->returnTypeSymbol = &Float32Type;

    /// atomicLoad with Float32, MemorySemantics
    AtomicLoad_Workgroup_Float32_ptr.name = "ptr"_c;
    AtomicLoad_Workgroup_Float32_ptr.type = Type::FullType{ Float32Type.name };
    AtomicLoad_Workgroup_Float32_ptr.type.strict = true;
    AtomicLoad_Workgroup_Float32_ptr.type.modifiers = AtomicLoad_Workgroup_Float32_ptr_modifiers;
    AtomicLoad_Workgroup_Float32_ptr.type.modifierValues = AtomicLoad_Workgroup_Float32_ptr_modifierValues;
    AtomicLoad_Workgroup_Float32_semantics.name = "semantics"_c;
    AtomicLoad_Workgroup_Float32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Workgroup_Float32_semantics.type.literal = true;
    AtomicLoad_Workgroup_Float32.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Workgroup_Float32.name = AtomicLoad_Workgroup_Float32_name;
    AtomicLoad_Workgroup_Float32.backendIndex = 2124;
    AtomicLoad_Workgroup_Float32.returnType = Type::FullType { Float32Type.name };
    AtomicLoad_Workgroup_Float32.parameters = AtomicLoad_Workgroup_Float32_args;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float32_ptr)->typeSymbol = &Float32Type;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float32)->signature = "atomicLoad(workgroup *f32,literal MemorySemantics) f32"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float32)->name = "atomicLoad(workgroup *f32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float32)->nameWithVarNames = "atomicLoad(ptr : workgroup *f32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float32)->returnTypeSymbol = &Float32Type;

    /// atomicLoad with Float16, MemorySemantics
    AtomicLoad_Uniform_Float16_ptr.name = "ptr"_c;
    AtomicLoad_Uniform_Float16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicLoad_Uniform_Float16_ptr.type.strict = true;
    AtomicLoad_Uniform_Float16_ptr.type.modifiers = AtomicLoad_Uniform_Float16_ptr_modifiers;
    AtomicLoad_Uniform_Float16_ptr.type.modifierValues = AtomicLoad_Uniform_Float16_ptr_modifierValues;
    AtomicLoad_Uniform_Float16_semantics.name = "semantics"_c;
    AtomicLoad_Uniform_Float16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Uniform_Float16_semantics.type.literal = true;
    AtomicLoad_Uniform_Float16.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Uniform_Float16.name = AtomicLoad_Uniform_Float16_name;
    AtomicLoad_Uniform_Float16.backendIndex = 2125;
    AtomicLoad_Uniform_Float16.returnType = Type::FullType { Float16Type.name };
    AtomicLoad_Uniform_Float16.parameters = AtomicLoad_Uniform_Float16_args;
    Symbol::Resolved(&AtomicLoad_Uniform_Float16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicLoad_Uniform_Float16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicLoad_Uniform_Float16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Uniform_Float16)->signature = "atomicLoad(uniform *f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_Float16)->name = "atomicLoad(uniform *f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_Float16)->nameWithVarNames = "atomicLoad(ptr : uniform *f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Uniform_Float16)->returnTypeSymbol = &Float16Type;

    /// atomicLoad with Float16, MemorySemantics
    AtomicLoad_Workgroup_Float16_ptr.name = "ptr"_c;
    AtomicLoad_Workgroup_Float16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicLoad_Workgroup_Float16_ptr.type.strict = true;
    AtomicLoad_Workgroup_Float16_ptr.type.modifiers = AtomicLoad_Workgroup_Float16_ptr_modifiers;
    AtomicLoad_Workgroup_Float16_ptr.type.modifierValues = AtomicLoad_Workgroup_Float16_ptr_modifierValues;
    AtomicLoad_Workgroup_Float16_semantics.name = "semantics"_c;
    AtomicLoad_Workgroup_Float16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicLoad_Workgroup_Float16_semantics.type.literal = true;
    AtomicLoad_Workgroup_Float16.documentation = "Loads the value at the pointer location with the specified memory semantics"_c;
    AtomicLoad_Workgroup_Float16.name = AtomicLoad_Workgroup_Float16_name;
    AtomicLoad_Workgroup_Float16.backendIndex = 2126;
    AtomicLoad_Workgroup_Float16.returnType = Type::FullType { Float16Type.name };
    AtomicLoad_Workgroup_Float16.parameters = AtomicLoad_Workgroup_Float16_args;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float16)->signature = "atomicLoad(workgroup *f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float16)->name = "atomicLoad(workgroup *f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float16)->nameWithVarNames = "atomicLoad(ptr : workgroup *f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicLoad_Workgroup_Float16)->returnTypeSymbol = &Float16Type;

    /// atomicStore with UInt32, UInt32, MemorySemantics
    AtomicStore_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicStore_Uniform_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicStore_Uniform_UInt32_ptr.type.strict = true;
    AtomicStore_Uniform_UInt32_ptr.type.mut = true;
    AtomicStore_Uniform_UInt32_ptr.type.modifiers = AtomicStore_Uniform_UInt32_ptr_modifiers;
    AtomicStore_Uniform_UInt32_ptr.type.modifierValues = AtomicStore_Uniform_UInt32_ptr_modifierValues;
    AtomicStore_Uniform_UInt32_value.name = "value"_c;
    AtomicStore_Uniform_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicStore_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicStore_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Uniform_UInt32_semantics.type.literal = true;
    AtomicStore_Uniform_UInt32.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Uniform_UInt32.name = AtomicStore_Uniform_UInt32_name;
    AtomicStore_Uniform_UInt32.backendIndex = 2127;
    AtomicStore_Uniform_UInt32.returnType = Type::FullType { VoidType.name };
    AtomicStore_Uniform_UInt32.parameters = AtomicStore_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicStore_Uniform_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicStore_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicStore_Uniform_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicStore_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Uniform_UInt32)->signature = "atomicStore(uniform *mutable u32,u32,literal MemorySemantics) void"_c;
    Symbol::Resolved(&AtomicStore_Uniform_UInt32)->name = "atomicStore(uniform *mutable u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Uniform_UInt32)->nameWithVarNames = "atomicStore(ptr : uniform *mutable u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Uniform_UInt32)->returnTypeSymbol = &VoidType;

    /// atomicStore with UInt32, UInt32, MemorySemantics
    AtomicStore_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicStore_Workgroup_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicStore_Workgroup_UInt32_ptr.type.strict = true;
    AtomicStore_Workgroup_UInt32_ptr.type.modifiers = AtomicStore_Workgroup_UInt32_ptr_modifiers;
    AtomicStore_Workgroup_UInt32_ptr.type.modifierValues = AtomicStore_Workgroup_UInt32_ptr_modifierValues;
    AtomicStore_Workgroup_UInt32_value.name = "value"_c;
    AtomicStore_Workgroup_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicStore_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicStore_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Workgroup_UInt32_semantics.type.literal = true;
    AtomicStore_Workgroup_UInt32.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Workgroup_UInt32.name = AtomicStore_Workgroup_UInt32_name;
    AtomicStore_Workgroup_UInt32.backendIndex = 2128;
    AtomicStore_Workgroup_UInt32.returnType = Type::FullType { VoidType.name };
    AtomicStore_Workgroup_UInt32.parameters = AtomicStore_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt32)->signature = "atomicStore(workgroup *u32,u32,literal MemorySemantics) void"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt32)->name = "atomicStore(workgroup *u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt32)->nameWithVarNames = "atomicStore(ptr : workgroup *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt32)->returnTypeSymbol = &VoidType;

    /// atomicExchange with UInt32, UInt32, MemorySemantics
    AtomicExchange_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicExchange_Uniform_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicExchange_Uniform_UInt32_ptr.type.strict = true;
    AtomicExchange_Uniform_UInt32_ptr.type.mut = true;
    AtomicExchange_Uniform_UInt32_ptr.type.modifiers = AtomicExchange_Uniform_UInt32_ptr_modifiers;
    AtomicExchange_Uniform_UInt32_ptr.type.modifierValues = AtomicExchange_Uniform_UInt32_ptr_modifierValues;
    AtomicExchange_Uniform_UInt32_value.name = "value"_c;
    AtomicExchange_Uniform_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicExchange_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicExchange_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Uniform_UInt32_semantics.type.literal = true;
    AtomicExchange_Uniform_UInt32.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Uniform_UInt32.name = AtomicExchange_Uniform_UInt32_name;
    AtomicExchange_Uniform_UInt32.backendIndex = 2129;
    AtomicExchange_Uniform_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicExchange_Uniform_UInt32.parameters = AtomicExchange_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt32)->signature = "atomicExchange(uniform *mutable u32,u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt32)->name = "atomicExchange(uniform *mutable u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt32)->nameWithVarNames = "atomicExchange(ptr : uniform *mutable u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicExchange with UInt32, UInt32, MemorySemantics
    AtomicExchange_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicExchange_Workgroup_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicExchange_Workgroup_UInt32_ptr.type.strict = true;
    AtomicExchange_Workgroup_UInt32_ptr.type.modifiers = AtomicExchange_Workgroup_UInt32_ptr_modifiers;
    AtomicExchange_Workgroup_UInt32_ptr.type.modifierValues = AtomicExchange_Workgroup_UInt32_ptr_modifierValues;
    AtomicExchange_Workgroup_UInt32_value.name = "value"_c;
    AtomicExchange_Workgroup_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicExchange_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicExchange_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Workgroup_UInt32_semantics.type.literal = true;
    AtomicExchange_Workgroup_UInt32.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Workgroup_UInt32.name = AtomicExchange_Workgroup_UInt32_name;
    AtomicExchange_Workgroup_UInt32.backendIndex = 2130;
    AtomicExchange_Workgroup_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicExchange_Workgroup_UInt32.parameters = AtomicExchange_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt32)->signature = "atomicExchange(workgroup *u32,u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt32)->name = "atomicExchange(workgroup *u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt32)->nameWithVarNames = "atomicExchange(ptr : workgroup *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicAdd with UInt32, UInt32, MemorySemantics
    AtomicAdd_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicAdd_Uniform_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicAdd_Uniform_UInt32_ptr.type.strict = true;
    AtomicAdd_Uniform_UInt32_ptr.type.mut = true;
    AtomicAdd_Uniform_UInt32_ptr.type.modifiers = AtomicAdd_Uniform_UInt32_ptr_modifiers;
    AtomicAdd_Uniform_UInt32_ptr.type.modifierValues = AtomicAdd_Uniform_UInt32_ptr_modifierValues;
    AtomicAdd_Uniform_UInt32_value.name = "value"_c;
    AtomicAdd_Uniform_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicAdd_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicAdd_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Uniform_UInt32_semantics.type.literal = true;
    AtomicAdd_Uniform_UInt32.documentation = "Adds the value to the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAdd_Uniform_UInt32.name = AtomicAdd_Uniform_UInt32_name;
    AtomicAdd_Uniform_UInt32.backendIndex = 2131;
    AtomicAdd_Uniform_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicAdd_Uniform_UInt32.parameters = AtomicAdd_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt32)->signature = "atomicAdd(uniform *mutable u32,u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt32)->name = "atomicAdd(uniform *mutable u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt32)->nameWithVarNames = "atomicAdd(ptr : uniform *mutable u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicAdd with UInt32, UInt32, MemorySemantics
    AtomicAdd_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicAdd_Workgroup_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicAdd_Workgroup_UInt32_ptr.type.strict = true;
    AtomicAdd_Workgroup_UInt32_ptr.type.modifiers = AtomicAdd_Workgroup_UInt32_ptr_modifiers;
    AtomicAdd_Workgroup_UInt32_ptr.type.modifierValues = AtomicAdd_Workgroup_UInt32_ptr_modifierValues;
    AtomicAdd_Workgroup_UInt32_value.name = "value"_c;
    AtomicAdd_Workgroup_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicAdd_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicAdd_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Workgroup_UInt32_semantics.type.literal = true;
    AtomicAdd_Workgroup_UInt32.documentation = "Adds the value to the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAdd_Workgroup_UInt32.name = AtomicAdd_Workgroup_UInt32_name;
    AtomicAdd_Workgroup_UInt32.backendIndex = 2132;
    AtomicAdd_Workgroup_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicAdd_Workgroup_UInt32.parameters = AtomicAdd_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt32)->signature = "atomicAdd(workgroup *u32,u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt32)->name = "atomicAdd(workgroup *u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt32)->nameWithVarNames = "atomicAdd(ptr : workgroup *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicSubtract with UInt32, UInt32, MemorySemantics
    AtomicSubtract_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicSubtract_Uniform_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicSubtract_Uniform_UInt32_ptr.type.strict = true;
    AtomicSubtract_Uniform_UInt32_ptr.type.mut = true;
    AtomicSubtract_Uniform_UInt32_ptr.type.modifiers = AtomicSubtract_Uniform_UInt32_ptr_modifiers;
    AtomicSubtract_Uniform_UInt32_ptr.type.modifierValues = AtomicSubtract_Uniform_UInt32_ptr_modifierValues;
    AtomicSubtract_Uniform_UInt32_value.name = "value"_c;
    AtomicSubtract_Uniform_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicSubtract_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicSubtract_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Uniform_UInt32_semantics.type.literal = true;
    AtomicSubtract_Uniform_UInt32.documentation = "Subtracts the value from the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicSubtract_Uniform_UInt32.name = AtomicSubtract_Uniform_UInt32_name;
    AtomicSubtract_Uniform_UInt32.backendIndex = 2133;
    AtomicSubtract_Uniform_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicSubtract_Uniform_UInt32.parameters = AtomicSubtract_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt32)->signature = "atomicSubtract(uniform *mutable u32,u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt32)->name = "atomicSubtract(uniform *mutable u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt32)->nameWithVarNames = "atomicSubtract(ptr : uniform *mutable u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicSubtract with UInt32, UInt32, MemorySemantics
    AtomicSubtract_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicSubtract_Workgroup_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicSubtract_Workgroup_UInt32_ptr.type.strict = true;
    AtomicSubtract_Workgroup_UInt32_ptr.type.modifiers = AtomicSubtract_Workgroup_UInt32_ptr_modifiers;
    AtomicSubtract_Workgroup_UInt32_ptr.type.modifierValues = AtomicSubtract_Workgroup_UInt32_ptr_modifierValues;
    AtomicSubtract_Workgroup_UInt32_value.name = "value"_c;
    AtomicSubtract_Workgroup_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicSubtract_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicSubtract_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Workgroup_UInt32_semantics.type.literal = true;
    AtomicSubtract_Workgroup_UInt32.documentation = "Subtracts the value from the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicSubtract_Workgroup_UInt32.name = AtomicSubtract_Workgroup_UInt32_name;
    AtomicSubtract_Workgroup_UInt32.backendIndex = 2134;
    AtomicSubtract_Workgroup_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicSubtract_Workgroup_UInt32.parameters = AtomicSubtract_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt32)->signature = "atomicSubtract(workgroup *u32,u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt32)->name = "atomicSubtract(workgroup *u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt32)->nameWithVarNames = "atomicSubtract(ptr : workgroup *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicAnd with UInt32, UInt32, MemorySemantics
    AtomicAnd_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicAnd_Uniform_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicAnd_Uniform_UInt32_ptr.type.strict = true;
    AtomicAnd_Uniform_UInt32_ptr.type.mut = true;
    AtomicAnd_Uniform_UInt32_ptr.type.modifiers = AtomicAnd_Uniform_UInt32_ptr_modifiers;
    AtomicAnd_Uniform_UInt32_ptr.type.modifierValues = AtomicAnd_Uniform_UInt32_ptr_modifierValues;
    AtomicAnd_Uniform_UInt32_value.name = "value"_c;
    AtomicAnd_Uniform_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicAnd_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicAnd_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Uniform_UInt32_semantics.type.literal = true;
    AtomicAnd_Uniform_UInt32.documentation = "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAnd_Uniform_UInt32.name = AtomicAnd_Uniform_UInt32_name;
    AtomicAnd_Uniform_UInt32.backendIndex = 2135;
    AtomicAnd_Uniform_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicAnd_Uniform_UInt32.parameters = AtomicAnd_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt32)->signature = "atomicAnd(uniform *mutable u32,u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt32)->name = "atomicAnd(uniform *mutable u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt32)->nameWithVarNames = "atomicAnd(ptr : uniform *mutable u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicAnd with UInt32, UInt32, MemorySemantics
    AtomicAnd_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicAnd_Workgroup_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicAnd_Workgroup_UInt32_ptr.type.strict = true;
    AtomicAnd_Workgroup_UInt32_ptr.type.modifiers = AtomicAnd_Workgroup_UInt32_ptr_modifiers;
    AtomicAnd_Workgroup_UInt32_ptr.type.modifierValues = AtomicAnd_Workgroup_UInt32_ptr_modifierValues;
    AtomicAnd_Workgroup_UInt32_value.name = "value"_c;
    AtomicAnd_Workgroup_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicAnd_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicAnd_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Workgroup_UInt32_semantics.type.literal = true;
    AtomicAnd_Workgroup_UInt32.documentation = "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAnd_Workgroup_UInt32.name = AtomicAnd_Workgroup_UInt32_name;
    AtomicAnd_Workgroup_UInt32.backendIndex = 2136;
    AtomicAnd_Workgroup_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicAnd_Workgroup_UInt32.parameters = AtomicAnd_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt32)->signature = "atomicAnd(workgroup *u32,u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt32)->name = "atomicAnd(workgroup *u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt32)->nameWithVarNames = "atomicAnd(ptr : workgroup *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicOr with UInt32, UInt32, MemorySemantics
    AtomicOr_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicOr_Uniform_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicOr_Uniform_UInt32_ptr.type.strict = true;
    AtomicOr_Uniform_UInt32_ptr.type.mut = true;
    AtomicOr_Uniform_UInt32_ptr.type.modifiers = AtomicOr_Uniform_UInt32_ptr_modifiers;
    AtomicOr_Uniform_UInt32_ptr.type.modifierValues = AtomicOr_Uniform_UInt32_ptr_modifierValues;
    AtomicOr_Uniform_UInt32_value.name = "value"_c;
    AtomicOr_Uniform_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicOr_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicOr_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Uniform_UInt32_semantics.type.literal = true;
    AtomicOr_Uniform_UInt32.documentation = "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicOr_Uniform_UInt32.name = AtomicOr_Uniform_UInt32_name;
    AtomicOr_Uniform_UInt32.backendIndex = 2137;
    AtomicOr_Uniform_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicOr_Uniform_UInt32.parameters = AtomicOr_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicOr_Uniform_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicOr_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicOr_Uniform_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicOr_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Uniform_UInt32)->signature = "atomicOr(uniform *mutable u32,u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicOr_Uniform_UInt32)->name = "atomicOr(uniform *mutable u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Uniform_UInt32)->nameWithVarNames = "atomicOr(ptr : uniform *mutable u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Uniform_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicOr with UInt32, UInt32, MemorySemantics
    AtomicOr_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicOr_Workgroup_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicOr_Workgroup_UInt32_ptr.type.strict = true;
    AtomicOr_Workgroup_UInt32_ptr.type.modifiers = AtomicOr_Workgroup_UInt32_ptr_modifiers;
    AtomicOr_Workgroup_UInt32_ptr.type.modifierValues = AtomicOr_Workgroup_UInt32_ptr_modifierValues;
    AtomicOr_Workgroup_UInt32_value.name = "value"_c;
    AtomicOr_Workgroup_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicOr_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicOr_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Workgroup_UInt32_semantics.type.literal = true;
    AtomicOr_Workgroup_UInt32.documentation = "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicOr_Workgroup_UInt32.name = AtomicOr_Workgroup_UInt32_name;
    AtomicOr_Workgroup_UInt32.backendIndex = 2138;
    AtomicOr_Workgroup_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicOr_Workgroup_UInt32.parameters = AtomicOr_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt32)->signature = "atomicOr(workgroup *u32,u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt32)->name = "atomicOr(workgroup *u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt32)->nameWithVarNames = "atomicOr(ptr : workgroup *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicXor with UInt32, UInt32, MemorySemantics
    AtomicXor_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicXor_Uniform_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicXor_Uniform_UInt32_ptr.type.strict = true;
    AtomicXor_Uniform_UInt32_ptr.type.mut = true;
    AtomicXor_Uniform_UInt32_ptr.type.modifiers = AtomicXor_Uniform_UInt32_ptr_modifiers;
    AtomicXor_Uniform_UInt32_ptr.type.modifierValues = AtomicXor_Uniform_UInt32_ptr_modifierValues;
    AtomicXor_Uniform_UInt32_value.name = "value"_c;
    AtomicXor_Uniform_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicXor_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicXor_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Uniform_UInt32_semantics.type.literal = true;
    AtomicXor_Uniform_UInt32.documentation = "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicXor_Uniform_UInt32.name = AtomicXor_Uniform_UInt32_name;
    AtomicXor_Uniform_UInt32.backendIndex = 2139;
    AtomicXor_Uniform_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicXor_Uniform_UInt32.parameters = AtomicXor_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicXor_Uniform_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicXor_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicXor_Uniform_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicXor_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Uniform_UInt32)->signature = "atomicXor(uniform *mutable u32,u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicXor_Uniform_UInt32)->name = "atomicXor(uniform *mutable u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Uniform_UInt32)->nameWithVarNames = "atomicXor(ptr : uniform *mutable u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Uniform_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicXor with UInt32, UInt32, MemorySemantics
    AtomicXor_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicXor_Workgroup_UInt32_ptr.type = Type::FullType{ UInt32Type.name };
    AtomicXor_Workgroup_UInt32_ptr.type.strict = true;
    AtomicXor_Workgroup_UInt32_ptr.type.modifiers = AtomicXor_Workgroup_UInt32_ptr_modifiers;
    AtomicXor_Workgroup_UInt32_ptr.type.modifierValues = AtomicXor_Workgroup_UInt32_ptr_modifierValues;
    AtomicXor_Workgroup_UInt32_value.name = "value"_c;
    AtomicXor_Workgroup_UInt32_value.type = Type::FullType{ UInt32Type.name };
    AtomicXor_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicXor_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Workgroup_UInt32_semantics.type.literal = true;
    AtomicXor_Workgroup_UInt32.documentation = "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicXor_Workgroup_UInt32.name = AtomicXor_Workgroup_UInt32_name;
    AtomicXor_Workgroup_UInt32.backendIndex = 2140;
    AtomicXor_Workgroup_UInt32.returnType = Type::FullType { UInt32Type.name };
    AtomicXor_Workgroup_UInt32.parameters = AtomicXor_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt32_ptr)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt32)->signature = "atomicXor(workgroup *u32,u32,literal MemorySemantics) u32"_c;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt32)->name = "atomicXor(workgroup *u32,u32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt32)->nameWithVarNames = "atomicXor(ptr : workgroup *u32, value : u32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt32)->returnTypeSymbol = &UInt32Type;

    /// atomicStore with Int32, Int32, MemorySemantics
    AtomicStore_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicStore_Uniform_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicStore_Uniform_Int32_ptr.type.strict = true;
    AtomicStore_Uniform_Int32_ptr.type.mut = true;
    AtomicStore_Uniform_Int32_ptr.type.modifiers = AtomicStore_Uniform_Int32_ptr_modifiers;
    AtomicStore_Uniform_Int32_ptr.type.modifierValues = AtomicStore_Uniform_Int32_ptr_modifierValues;
    AtomicStore_Uniform_Int32_value.name = "value"_c;
    AtomicStore_Uniform_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicStore_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicStore_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Uniform_Int32_semantics.type.literal = true;
    AtomicStore_Uniform_Int32.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Uniform_Int32.name = AtomicStore_Uniform_Int32_name;
    AtomicStore_Uniform_Int32.backendIndex = 2141;
    AtomicStore_Uniform_Int32.returnType = Type::FullType { VoidType.name };
    AtomicStore_Uniform_Int32.parameters = AtomicStore_Uniform_Int32_args;
    Symbol::Resolved(&AtomicStore_Uniform_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicStore_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicStore_Uniform_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicStore_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Uniform_Int32)->signature = "atomicStore(uniform *mutable i32,i32,literal MemorySemantics) void"_c;
    Symbol::Resolved(&AtomicStore_Uniform_Int32)->name = "atomicStore(uniform *mutable i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Uniform_Int32)->nameWithVarNames = "atomicStore(ptr : uniform *mutable i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Uniform_Int32)->returnTypeSymbol = &VoidType;

    /// atomicStore with Int32, Int32, MemorySemantics
    AtomicStore_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicStore_Workgroup_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicStore_Workgroup_Int32_ptr.type.strict = true;
    AtomicStore_Workgroup_Int32_ptr.type.modifiers = AtomicStore_Workgroup_Int32_ptr_modifiers;
    AtomicStore_Workgroup_Int32_ptr.type.modifierValues = AtomicStore_Workgroup_Int32_ptr_modifierValues;
    AtomicStore_Workgroup_Int32_value.name = "value"_c;
    AtomicStore_Workgroup_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicStore_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicStore_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Workgroup_Int32_semantics.type.literal = true;
    AtomicStore_Workgroup_Int32.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Workgroup_Int32.name = AtomicStore_Workgroup_Int32_name;
    AtomicStore_Workgroup_Int32.backendIndex = 2142;
    AtomicStore_Workgroup_Int32.returnType = Type::FullType { VoidType.name };
    AtomicStore_Workgroup_Int32.parameters = AtomicStore_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicStore_Workgroup_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicStore_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicStore_Workgroup_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicStore_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Workgroup_Int32)->signature = "atomicStore(workgroup *i32,i32,literal MemorySemantics) void"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_Int32)->name = "atomicStore(workgroup *i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_Int32)->nameWithVarNames = "atomicStore(ptr : workgroup *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_Int32)->returnTypeSymbol = &VoidType;

    /// atomicExchange with Int32, Int32, MemorySemantics
    AtomicExchange_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicExchange_Uniform_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicExchange_Uniform_Int32_ptr.type.strict = true;
    AtomicExchange_Uniform_Int32_ptr.type.mut = true;
    AtomicExchange_Uniform_Int32_ptr.type.modifiers = AtomicExchange_Uniform_Int32_ptr_modifiers;
    AtomicExchange_Uniform_Int32_ptr.type.modifierValues = AtomicExchange_Uniform_Int32_ptr_modifierValues;
    AtomicExchange_Uniform_Int32_value.name = "value"_c;
    AtomicExchange_Uniform_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicExchange_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicExchange_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Uniform_Int32_semantics.type.literal = true;
    AtomicExchange_Uniform_Int32.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Uniform_Int32.name = AtomicExchange_Uniform_Int32_name;
    AtomicExchange_Uniform_Int32.backendIndex = 2143;
    AtomicExchange_Uniform_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicExchange_Uniform_Int32.parameters = AtomicExchange_Uniform_Int32_args;
    Symbol::Resolved(&AtomicExchange_Uniform_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicExchange_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicExchange_Uniform_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicExchange_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Uniform_Int32)->signature = "atomicExchange(uniform *mutable i32,i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_Int32)->name = "atomicExchange(uniform *mutable i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_Int32)->nameWithVarNames = "atomicExchange(ptr : uniform *mutable i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicExchange with Int32, Int32, MemorySemantics
    AtomicExchange_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicExchange_Workgroup_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicExchange_Workgroup_Int32_ptr.type.strict = true;
    AtomicExchange_Workgroup_Int32_ptr.type.modifiers = AtomicExchange_Workgroup_Int32_ptr_modifiers;
    AtomicExchange_Workgroup_Int32_ptr.type.modifierValues = AtomicExchange_Workgroup_Int32_ptr_modifierValues;
    AtomicExchange_Workgroup_Int32_value.name = "value"_c;
    AtomicExchange_Workgroup_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicExchange_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicExchange_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Workgroup_Int32_semantics.type.literal = true;
    AtomicExchange_Workgroup_Int32.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Workgroup_Int32.name = AtomicExchange_Workgroup_Int32_name;
    AtomicExchange_Workgroup_Int32.backendIndex = 2144;
    AtomicExchange_Workgroup_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicExchange_Workgroup_Int32.parameters = AtomicExchange_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int32)->signature = "atomicExchange(workgroup *i32,i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int32)->name = "atomicExchange(workgroup *i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int32)->nameWithVarNames = "atomicExchange(ptr : workgroup *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicAdd with Int32, Int32, MemorySemantics
    AtomicAdd_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicAdd_Uniform_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicAdd_Uniform_Int32_ptr.type.strict = true;
    AtomicAdd_Uniform_Int32_ptr.type.mut = true;
    AtomicAdd_Uniform_Int32_ptr.type.modifiers = AtomicAdd_Uniform_Int32_ptr_modifiers;
    AtomicAdd_Uniform_Int32_ptr.type.modifierValues = AtomicAdd_Uniform_Int32_ptr_modifierValues;
    AtomicAdd_Uniform_Int32_value.name = "value"_c;
    AtomicAdd_Uniform_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicAdd_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicAdd_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Uniform_Int32_semantics.type.literal = true;
    AtomicAdd_Uniform_Int32.documentation = "Adds the value to the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAdd_Uniform_Int32.name = AtomicAdd_Uniform_Int32_name;
    AtomicAdd_Uniform_Int32.backendIndex = 2145;
    AtomicAdd_Uniform_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicAdd_Uniform_Int32.parameters = AtomicAdd_Uniform_Int32_args;
    Symbol::Resolved(&AtomicAdd_Uniform_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAdd_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicAdd_Uniform_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAdd_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Uniform_Int32)->signature = "atomicAdd(uniform *mutable i32,i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicAdd_Uniform_Int32)->name = "atomicAdd(uniform *mutable i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Uniform_Int32)->nameWithVarNames = "atomicAdd(ptr : uniform *mutable i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Uniform_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicAdd with Int32, Int32, MemorySemantics
    AtomicAdd_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicAdd_Workgroup_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicAdd_Workgroup_Int32_ptr.type.strict = true;
    AtomicAdd_Workgroup_Int32_ptr.type.modifiers = AtomicAdd_Workgroup_Int32_ptr_modifiers;
    AtomicAdd_Workgroup_Int32_ptr.type.modifierValues = AtomicAdd_Workgroup_Int32_ptr_modifierValues;
    AtomicAdd_Workgroup_Int32_value.name = "value"_c;
    AtomicAdd_Workgroup_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicAdd_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicAdd_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Workgroup_Int32_semantics.type.literal = true;
    AtomicAdd_Workgroup_Int32.documentation = "Adds the value to the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAdd_Workgroup_Int32.name = AtomicAdd_Workgroup_Int32_name;
    AtomicAdd_Workgroup_Int32.backendIndex = 2146;
    AtomicAdd_Workgroup_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicAdd_Workgroup_Int32.parameters = AtomicAdd_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int32)->signature = "atomicAdd(workgroup *i32,i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int32)->name = "atomicAdd(workgroup *i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int32)->nameWithVarNames = "atomicAdd(ptr : workgroup *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicSubtract with Int32, Int32, MemorySemantics
    AtomicSubtract_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicSubtract_Uniform_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicSubtract_Uniform_Int32_ptr.type.strict = true;
    AtomicSubtract_Uniform_Int32_ptr.type.mut = true;
    AtomicSubtract_Uniform_Int32_ptr.type.modifiers = AtomicSubtract_Uniform_Int32_ptr_modifiers;
    AtomicSubtract_Uniform_Int32_ptr.type.modifierValues = AtomicSubtract_Uniform_Int32_ptr_modifierValues;
    AtomicSubtract_Uniform_Int32_value.name = "value"_c;
    AtomicSubtract_Uniform_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicSubtract_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicSubtract_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Uniform_Int32_semantics.type.literal = true;
    AtomicSubtract_Uniform_Int32.documentation = "Subtracts the value from the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicSubtract_Uniform_Int32.name = AtomicSubtract_Uniform_Int32_name;
    AtomicSubtract_Uniform_Int32.backendIndex = 2147;
    AtomicSubtract_Uniform_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicSubtract_Uniform_Int32.parameters = AtomicSubtract_Uniform_Int32_args;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int32)->signature = "atomicSubtract(uniform *mutable i32,i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int32)->name = "atomicSubtract(uniform *mutable i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int32)->nameWithVarNames = "atomicSubtract(ptr : uniform *mutable i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicSubtract with Int32, Int32, MemorySemantics
    AtomicSubtract_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicSubtract_Workgroup_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicSubtract_Workgroup_Int32_ptr.type.strict = true;
    AtomicSubtract_Workgroup_Int32_ptr.type.modifiers = AtomicSubtract_Workgroup_Int32_ptr_modifiers;
    AtomicSubtract_Workgroup_Int32_ptr.type.modifierValues = AtomicSubtract_Workgroup_Int32_ptr_modifierValues;
    AtomicSubtract_Workgroup_Int32_value.name = "value"_c;
    AtomicSubtract_Workgroup_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicSubtract_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicSubtract_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Workgroup_Int32_semantics.type.literal = true;
    AtomicSubtract_Workgroup_Int32.documentation = "Subtracts the value from the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicSubtract_Workgroup_Int32.name = AtomicSubtract_Workgroup_Int32_name;
    AtomicSubtract_Workgroup_Int32.backendIndex = 2148;
    AtomicSubtract_Workgroup_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicSubtract_Workgroup_Int32.parameters = AtomicSubtract_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int32)->signature = "atomicSubtract(workgroup *i32,i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int32)->name = "atomicSubtract(workgroup *i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int32)->nameWithVarNames = "atomicSubtract(ptr : workgroup *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicAnd with Int32, Int32, MemorySemantics
    AtomicAnd_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicAnd_Uniform_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicAnd_Uniform_Int32_ptr.type.strict = true;
    AtomicAnd_Uniform_Int32_ptr.type.mut = true;
    AtomicAnd_Uniform_Int32_ptr.type.modifiers = AtomicAnd_Uniform_Int32_ptr_modifiers;
    AtomicAnd_Uniform_Int32_ptr.type.modifierValues = AtomicAnd_Uniform_Int32_ptr_modifierValues;
    AtomicAnd_Uniform_Int32_value.name = "value"_c;
    AtomicAnd_Uniform_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicAnd_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicAnd_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Uniform_Int32_semantics.type.literal = true;
    AtomicAnd_Uniform_Int32.documentation = "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAnd_Uniform_Int32.name = AtomicAnd_Uniform_Int32_name;
    AtomicAnd_Uniform_Int32.backendIndex = 2149;
    AtomicAnd_Uniform_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicAnd_Uniform_Int32.parameters = AtomicAnd_Uniform_Int32_args;
    Symbol::Resolved(&AtomicAnd_Uniform_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAnd_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicAnd_Uniform_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAnd_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Uniform_Int32)->signature = "atomicAnd(uniform *mutable i32,i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicAnd_Uniform_Int32)->name = "atomicAnd(uniform *mutable i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Uniform_Int32)->nameWithVarNames = "atomicAnd(ptr : uniform *mutable i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Uniform_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicAnd with Int32, Int32, MemorySemantics
    AtomicAnd_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicAnd_Workgroup_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicAnd_Workgroup_Int32_ptr.type.strict = true;
    AtomicAnd_Workgroup_Int32_ptr.type.modifiers = AtomicAnd_Workgroup_Int32_ptr_modifiers;
    AtomicAnd_Workgroup_Int32_ptr.type.modifierValues = AtomicAnd_Workgroup_Int32_ptr_modifierValues;
    AtomicAnd_Workgroup_Int32_value.name = "value"_c;
    AtomicAnd_Workgroup_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicAnd_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicAnd_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Workgroup_Int32_semantics.type.literal = true;
    AtomicAnd_Workgroup_Int32.documentation = "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAnd_Workgroup_Int32.name = AtomicAnd_Workgroup_Int32_name;
    AtomicAnd_Workgroup_Int32.backendIndex = 2150;
    AtomicAnd_Workgroup_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicAnd_Workgroup_Int32.parameters = AtomicAnd_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int32)->signature = "atomicAnd(workgroup *i32,i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int32)->name = "atomicAnd(workgroup *i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int32)->nameWithVarNames = "atomicAnd(ptr : workgroup *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicOr with Int32, Int32, MemorySemantics
    AtomicOr_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicOr_Uniform_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicOr_Uniform_Int32_ptr.type.strict = true;
    AtomicOr_Uniform_Int32_ptr.type.mut = true;
    AtomicOr_Uniform_Int32_ptr.type.modifiers = AtomicOr_Uniform_Int32_ptr_modifiers;
    AtomicOr_Uniform_Int32_ptr.type.modifierValues = AtomicOr_Uniform_Int32_ptr_modifierValues;
    AtomicOr_Uniform_Int32_value.name = "value"_c;
    AtomicOr_Uniform_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicOr_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicOr_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Uniform_Int32_semantics.type.literal = true;
    AtomicOr_Uniform_Int32.documentation = "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicOr_Uniform_Int32.name = AtomicOr_Uniform_Int32_name;
    AtomicOr_Uniform_Int32.backendIndex = 2151;
    AtomicOr_Uniform_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicOr_Uniform_Int32.parameters = AtomicOr_Uniform_Int32_args;
    Symbol::Resolved(&AtomicOr_Uniform_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicOr_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicOr_Uniform_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicOr_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Uniform_Int32)->signature = "atomicOr(uniform *mutable i32,i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicOr_Uniform_Int32)->name = "atomicOr(uniform *mutable i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Uniform_Int32)->nameWithVarNames = "atomicOr(ptr : uniform *mutable i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Uniform_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicOr with Int32, Int32, MemorySemantics
    AtomicOr_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicOr_Workgroup_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicOr_Workgroup_Int32_ptr.type.strict = true;
    AtomicOr_Workgroup_Int32_ptr.type.modifiers = AtomicOr_Workgroup_Int32_ptr_modifiers;
    AtomicOr_Workgroup_Int32_ptr.type.modifierValues = AtomicOr_Workgroup_Int32_ptr_modifierValues;
    AtomicOr_Workgroup_Int32_value.name = "value"_c;
    AtomicOr_Workgroup_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicOr_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicOr_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Workgroup_Int32_semantics.type.literal = true;
    AtomicOr_Workgroup_Int32.documentation = "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicOr_Workgroup_Int32.name = AtomicOr_Workgroup_Int32_name;
    AtomicOr_Workgroup_Int32.backendIndex = 2152;
    AtomicOr_Workgroup_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicOr_Workgroup_Int32.parameters = AtomicOr_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicOr_Workgroup_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicOr_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicOr_Workgroup_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicOr_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Workgroup_Int32)->signature = "atomicOr(workgroup *i32,i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicOr_Workgroup_Int32)->name = "atomicOr(workgroup *i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Workgroup_Int32)->nameWithVarNames = "atomicOr(ptr : workgroup *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Workgroup_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicXor with Int32, Int32, MemorySemantics
    AtomicXor_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicXor_Uniform_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicXor_Uniform_Int32_ptr.type.strict = true;
    AtomicXor_Uniform_Int32_ptr.type.mut = true;
    AtomicXor_Uniform_Int32_ptr.type.modifiers = AtomicXor_Uniform_Int32_ptr_modifiers;
    AtomicXor_Uniform_Int32_ptr.type.modifierValues = AtomicXor_Uniform_Int32_ptr_modifierValues;
    AtomicXor_Uniform_Int32_value.name = "value"_c;
    AtomicXor_Uniform_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicXor_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicXor_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Uniform_Int32_semantics.type.literal = true;
    AtomicXor_Uniform_Int32.documentation = "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicXor_Uniform_Int32.name = AtomicXor_Uniform_Int32_name;
    AtomicXor_Uniform_Int32.backendIndex = 2153;
    AtomicXor_Uniform_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicXor_Uniform_Int32.parameters = AtomicXor_Uniform_Int32_args;
    Symbol::Resolved(&AtomicXor_Uniform_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicXor_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicXor_Uniform_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicXor_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Uniform_Int32)->signature = "atomicXor(uniform *mutable i32,i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicXor_Uniform_Int32)->name = "atomicXor(uniform *mutable i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Uniform_Int32)->nameWithVarNames = "atomicXor(ptr : uniform *mutable i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Uniform_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicXor with Int32, Int32, MemorySemantics
    AtomicXor_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicXor_Workgroup_Int32_ptr.type = Type::FullType{ Int32Type.name };
    AtomicXor_Workgroup_Int32_ptr.type.strict = true;
    AtomicXor_Workgroup_Int32_ptr.type.modifiers = AtomicXor_Workgroup_Int32_ptr_modifiers;
    AtomicXor_Workgroup_Int32_ptr.type.modifierValues = AtomicXor_Workgroup_Int32_ptr_modifierValues;
    AtomicXor_Workgroup_Int32_value.name = "value"_c;
    AtomicXor_Workgroup_Int32_value.type = Type::FullType{ Int32Type.name };
    AtomicXor_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicXor_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Workgroup_Int32_semantics.type.literal = true;
    AtomicXor_Workgroup_Int32.documentation = "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicXor_Workgroup_Int32.name = AtomicXor_Workgroup_Int32_name;
    AtomicXor_Workgroup_Int32.backendIndex = 2154;
    AtomicXor_Workgroup_Int32.returnType = Type::FullType { Int32Type.name };
    AtomicXor_Workgroup_Int32.parameters = AtomicXor_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicXor_Workgroup_Int32_ptr)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicXor_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicXor_Workgroup_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&AtomicXor_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Workgroup_Int32)->signature = "atomicXor(workgroup *i32,i32,literal MemorySemantics) i32"_c;
    Symbol::Resolved(&AtomicXor_Workgroup_Int32)->name = "atomicXor(workgroup *i32,i32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Workgroup_Int32)->nameWithVarNames = "atomicXor(ptr : workgroup *i32, value : i32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Workgroup_Int32)->returnTypeSymbol = &Int32Type;

    /// atomicStore with UInt16, UInt16, MemorySemantics
    AtomicStore_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicStore_Uniform_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicStore_Uniform_UInt16_ptr.type.strict = true;
    AtomicStore_Uniform_UInt16_ptr.type.mut = true;
    AtomicStore_Uniform_UInt16_ptr.type.modifiers = AtomicStore_Uniform_UInt16_ptr_modifiers;
    AtomicStore_Uniform_UInt16_ptr.type.modifierValues = AtomicStore_Uniform_UInt16_ptr_modifierValues;
    AtomicStore_Uniform_UInt16_value.name = "value"_c;
    AtomicStore_Uniform_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicStore_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicStore_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Uniform_UInt16_semantics.type.literal = true;
    AtomicStore_Uniform_UInt16.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Uniform_UInt16.name = AtomicStore_Uniform_UInt16_name;
    AtomicStore_Uniform_UInt16.backendIndex = 2155;
    AtomicStore_Uniform_UInt16.returnType = Type::FullType { VoidType.name };
    AtomicStore_Uniform_UInt16.parameters = AtomicStore_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicStore_Uniform_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicStore_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicStore_Uniform_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicStore_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Uniform_UInt16)->signature = "atomicStore(uniform *mutable u16,u16,literal MemorySemantics) void"_c;
    Symbol::Resolved(&AtomicStore_Uniform_UInt16)->name = "atomicStore(uniform *mutable u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Uniform_UInt16)->nameWithVarNames = "atomicStore(ptr : uniform *mutable u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Uniform_UInt16)->returnTypeSymbol = &VoidType;

    /// atomicStore with UInt16, UInt16, MemorySemantics
    AtomicStore_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicStore_Workgroup_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicStore_Workgroup_UInt16_ptr.type.strict = true;
    AtomicStore_Workgroup_UInt16_ptr.type.modifiers = AtomicStore_Workgroup_UInt16_ptr_modifiers;
    AtomicStore_Workgroup_UInt16_ptr.type.modifierValues = AtomicStore_Workgroup_UInt16_ptr_modifierValues;
    AtomicStore_Workgroup_UInt16_value.name = "value"_c;
    AtomicStore_Workgroup_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicStore_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicStore_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Workgroup_UInt16_semantics.type.literal = true;
    AtomicStore_Workgroup_UInt16.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Workgroup_UInt16.name = AtomicStore_Workgroup_UInt16_name;
    AtomicStore_Workgroup_UInt16.backendIndex = 2156;
    AtomicStore_Workgroup_UInt16.returnType = Type::FullType { VoidType.name };
    AtomicStore_Workgroup_UInt16.parameters = AtomicStore_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt16)->signature = "atomicStore(workgroup *u16,u16,literal MemorySemantics) void"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt16)->name = "atomicStore(workgroup *u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt16)->nameWithVarNames = "atomicStore(ptr : workgroup *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_UInt16)->returnTypeSymbol = &VoidType;

    /// atomicExchange with UInt16, UInt16, MemorySemantics
    AtomicExchange_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicExchange_Uniform_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicExchange_Uniform_UInt16_ptr.type.strict = true;
    AtomicExchange_Uniform_UInt16_ptr.type.mut = true;
    AtomicExchange_Uniform_UInt16_ptr.type.modifiers = AtomicExchange_Uniform_UInt16_ptr_modifiers;
    AtomicExchange_Uniform_UInt16_ptr.type.modifierValues = AtomicExchange_Uniform_UInt16_ptr_modifierValues;
    AtomicExchange_Uniform_UInt16_value.name = "value"_c;
    AtomicExchange_Uniform_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicExchange_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicExchange_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Uniform_UInt16_semantics.type.literal = true;
    AtomicExchange_Uniform_UInt16.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Uniform_UInt16.name = AtomicExchange_Uniform_UInt16_name;
    AtomicExchange_Uniform_UInt16.backendIndex = 2157;
    AtomicExchange_Uniform_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicExchange_Uniform_UInt16.parameters = AtomicExchange_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt16)->signature = "atomicExchange(uniform *mutable u16,u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt16)->name = "atomicExchange(uniform *mutable u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt16)->nameWithVarNames = "atomicExchange(ptr : uniform *mutable u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicExchange with UInt16, UInt16, MemorySemantics
    AtomicExchange_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicExchange_Workgroup_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicExchange_Workgroup_UInt16_ptr.type.strict = true;
    AtomicExchange_Workgroup_UInt16_ptr.type.modifiers = AtomicExchange_Workgroup_UInt16_ptr_modifiers;
    AtomicExchange_Workgroup_UInt16_ptr.type.modifierValues = AtomicExchange_Workgroup_UInt16_ptr_modifierValues;
    AtomicExchange_Workgroup_UInt16_value.name = "value"_c;
    AtomicExchange_Workgroup_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicExchange_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicExchange_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Workgroup_UInt16_semantics.type.literal = true;
    AtomicExchange_Workgroup_UInt16.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Workgroup_UInt16.name = AtomicExchange_Workgroup_UInt16_name;
    AtomicExchange_Workgroup_UInt16.backendIndex = 2158;
    AtomicExchange_Workgroup_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicExchange_Workgroup_UInt16.parameters = AtomicExchange_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt16)->signature = "atomicExchange(workgroup *u16,u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt16)->name = "atomicExchange(workgroup *u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt16)->nameWithVarNames = "atomicExchange(ptr : workgroup *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicAdd with UInt16, UInt16, MemorySemantics
    AtomicAdd_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicAdd_Uniform_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicAdd_Uniform_UInt16_ptr.type.strict = true;
    AtomicAdd_Uniform_UInt16_ptr.type.mut = true;
    AtomicAdd_Uniform_UInt16_ptr.type.modifiers = AtomicAdd_Uniform_UInt16_ptr_modifiers;
    AtomicAdd_Uniform_UInt16_ptr.type.modifierValues = AtomicAdd_Uniform_UInt16_ptr_modifierValues;
    AtomicAdd_Uniform_UInt16_value.name = "value"_c;
    AtomicAdd_Uniform_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicAdd_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicAdd_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Uniform_UInt16_semantics.type.literal = true;
    AtomicAdd_Uniform_UInt16.documentation = "Adds the value to the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAdd_Uniform_UInt16.name = AtomicAdd_Uniform_UInt16_name;
    AtomicAdd_Uniform_UInt16.backendIndex = 2159;
    AtomicAdd_Uniform_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicAdd_Uniform_UInt16.parameters = AtomicAdd_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt16)->signature = "atomicAdd(uniform *mutable u16,u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt16)->name = "atomicAdd(uniform *mutable u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt16)->nameWithVarNames = "atomicAdd(ptr : uniform *mutable u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Uniform_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicAdd with UInt16, UInt16, MemorySemantics
    AtomicAdd_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicAdd_Workgroup_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicAdd_Workgroup_UInt16_ptr.type.strict = true;
    AtomicAdd_Workgroup_UInt16_ptr.type.modifiers = AtomicAdd_Workgroup_UInt16_ptr_modifiers;
    AtomicAdd_Workgroup_UInt16_ptr.type.modifierValues = AtomicAdd_Workgroup_UInt16_ptr_modifierValues;
    AtomicAdd_Workgroup_UInt16_value.name = "value"_c;
    AtomicAdd_Workgroup_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicAdd_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicAdd_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Workgroup_UInt16_semantics.type.literal = true;
    AtomicAdd_Workgroup_UInt16.documentation = "Adds the value to the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAdd_Workgroup_UInt16.name = AtomicAdd_Workgroup_UInt16_name;
    AtomicAdd_Workgroup_UInt16.backendIndex = 2160;
    AtomicAdd_Workgroup_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicAdd_Workgroup_UInt16.parameters = AtomicAdd_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt16)->signature = "atomicAdd(workgroup *u16,u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt16)->name = "atomicAdd(workgroup *u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt16)->nameWithVarNames = "atomicAdd(ptr : workgroup *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Workgroup_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicSubtract with UInt16, UInt16, MemorySemantics
    AtomicSubtract_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicSubtract_Uniform_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicSubtract_Uniform_UInt16_ptr.type.strict = true;
    AtomicSubtract_Uniform_UInt16_ptr.type.mut = true;
    AtomicSubtract_Uniform_UInt16_ptr.type.modifiers = AtomicSubtract_Uniform_UInt16_ptr_modifiers;
    AtomicSubtract_Uniform_UInt16_ptr.type.modifierValues = AtomicSubtract_Uniform_UInt16_ptr_modifierValues;
    AtomicSubtract_Uniform_UInt16_value.name = "value"_c;
    AtomicSubtract_Uniform_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicSubtract_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicSubtract_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Uniform_UInt16_semantics.type.literal = true;
    AtomicSubtract_Uniform_UInt16.documentation = "Subtracts the value from the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicSubtract_Uniform_UInt16.name = AtomicSubtract_Uniform_UInt16_name;
    AtomicSubtract_Uniform_UInt16.backendIndex = 2161;
    AtomicSubtract_Uniform_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicSubtract_Uniform_UInt16.parameters = AtomicSubtract_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt16)->signature = "atomicSubtract(uniform *mutable u16,u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt16)->name = "atomicSubtract(uniform *mutable u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt16)->nameWithVarNames = "atomicSubtract(ptr : uniform *mutable u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Uniform_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicSubtract with UInt16, UInt16, MemorySemantics
    AtomicSubtract_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicSubtract_Workgroup_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicSubtract_Workgroup_UInt16_ptr.type.strict = true;
    AtomicSubtract_Workgroup_UInt16_ptr.type.modifiers = AtomicSubtract_Workgroup_UInt16_ptr_modifiers;
    AtomicSubtract_Workgroup_UInt16_ptr.type.modifierValues = AtomicSubtract_Workgroup_UInt16_ptr_modifierValues;
    AtomicSubtract_Workgroup_UInt16_value.name = "value"_c;
    AtomicSubtract_Workgroup_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicSubtract_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicSubtract_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Workgroup_UInt16_semantics.type.literal = true;
    AtomicSubtract_Workgroup_UInt16.documentation = "Subtracts the value from the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicSubtract_Workgroup_UInt16.name = AtomicSubtract_Workgroup_UInt16_name;
    AtomicSubtract_Workgroup_UInt16.backendIndex = 2162;
    AtomicSubtract_Workgroup_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicSubtract_Workgroup_UInt16.parameters = AtomicSubtract_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt16)->signature = "atomicSubtract(workgroup *u16,u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt16)->name = "atomicSubtract(workgroup *u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt16)->nameWithVarNames = "atomicSubtract(ptr : workgroup *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Workgroup_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicAnd with UInt16, UInt16, MemorySemantics
    AtomicAnd_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicAnd_Uniform_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicAnd_Uniform_UInt16_ptr.type.strict = true;
    AtomicAnd_Uniform_UInt16_ptr.type.mut = true;
    AtomicAnd_Uniform_UInt16_ptr.type.modifiers = AtomicAnd_Uniform_UInt16_ptr_modifiers;
    AtomicAnd_Uniform_UInt16_ptr.type.modifierValues = AtomicAnd_Uniform_UInt16_ptr_modifierValues;
    AtomicAnd_Uniform_UInt16_value.name = "value"_c;
    AtomicAnd_Uniform_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicAnd_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicAnd_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Uniform_UInt16_semantics.type.literal = true;
    AtomicAnd_Uniform_UInt16.documentation = "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAnd_Uniform_UInt16.name = AtomicAnd_Uniform_UInt16_name;
    AtomicAnd_Uniform_UInt16.backendIndex = 2163;
    AtomicAnd_Uniform_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicAnd_Uniform_UInt16.parameters = AtomicAnd_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt16)->signature = "atomicAnd(uniform *mutable u16,u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt16)->name = "atomicAnd(uniform *mutable u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt16)->nameWithVarNames = "atomicAnd(ptr : uniform *mutable u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Uniform_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicAnd with UInt16, UInt16, MemorySemantics
    AtomicAnd_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicAnd_Workgroup_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicAnd_Workgroup_UInt16_ptr.type.strict = true;
    AtomicAnd_Workgroup_UInt16_ptr.type.modifiers = AtomicAnd_Workgroup_UInt16_ptr_modifiers;
    AtomicAnd_Workgroup_UInt16_ptr.type.modifierValues = AtomicAnd_Workgroup_UInt16_ptr_modifierValues;
    AtomicAnd_Workgroup_UInt16_value.name = "value"_c;
    AtomicAnd_Workgroup_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicAnd_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicAnd_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Workgroup_UInt16_semantics.type.literal = true;
    AtomicAnd_Workgroup_UInt16.documentation = "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAnd_Workgroup_UInt16.name = AtomicAnd_Workgroup_UInt16_name;
    AtomicAnd_Workgroup_UInt16.backendIndex = 2164;
    AtomicAnd_Workgroup_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicAnd_Workgroup_UInt16.parameters = AtomicAnd_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt16)->signature = "atomicAnd(workgroup *u16,u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt16)->name = "atomicAnd(workgroup *u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt16)->nameWithVarNames = "atomicAnd(ptr : workgroup *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Workgroup_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicOr with UInt16, UInt16, MemorySemantics
    AtomicOr_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicOr_Uniform_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicOr_Uniform_UInt16_ptr.type.strict = true;
    AtomicOr_Uniform_UInt16_ptr.type.mut = true;
    AtomicOr_Uniform_UInt16_ptr.type.modifiers = AtomicOr_Uniform_UInt16_ptr_modifiers;
    AtomicOr_Uniform_UInt16_ptr.type.modifierValues = AtomicOr_Uniform_UInt16_ptr_modifierValues;
    AtomicOr_Uniform_UInt16_value.name = "value"_c;
    AtomicOr_Uniform_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicOr_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicOr_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Uniform_UInt16_semantics.type.literal = true;
    AtomicOr_Uniform_UInt16.documentation = "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicOr_Uniform_UInt16.name = AtomicOr_Uniform_UInt16_name;
    AtomicOr_Uniform_UInt16.backendIndex = 2165;
    AtomicOr_Uniform_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicOr_Uniform_UInt16.parameters = AtomicOr_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicOr_Uniform_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicOr_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicOr_Uniform_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicOr_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Uniform_UInt16)->signature = "atomicOr(uniform *mutable u16,u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicOr_Uniform_UInt16)->name = "atomicOr(uniform *mutable u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Uniform_UInt16)->nameWithVarNames = "atomicOr(ptr : uniform *mutable u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Uniform_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicOr with UInt16, UInt16, MemorySemantics
    AtomicOr_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicOr_Workgroup_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicOr_Workgroup_UInt16_ptr.type.strict = true;
    AtomicOr_Workgroup_UInt16_ptr.type.modifiers = AtomicOr_Workgroup_UInt16_ptr_modifiers;
    AtomicOr_Workgroup_UInt16_ptr.type.modifierValues = AtomicOr_Workgroup_UInt16_ptr_modifierValues;
    AtomicOr_Workgroup_UInt16_value.name = "value"_c;
    AtomicOr_Workgroup_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicOr_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicOr_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Workgroup_UInt16_semantics.type.literal = true;
    AtomicOr_Workgroup_UInt16.documentation = "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicOr_Workgroup_UInt16.name = AtomicOr_Workgroup_UInt16_name;
    AtomicOr_Workgroup_UInt16.backendIndex = 2166;
    AtomicOr_Workgroup_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicOr_Workgroup_UInt16.parameters = AtomicOr_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt16)->signature = "atomicOr(workgroup *u16,u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt16)->name = "atomicOr(workgroup *u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt16)->nameWithVarNames = "atomicOr(ptr : workgroup *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Workgroup_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicXor with UInt16, UInt16, MemorySemantics
    AtomicXor_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicXor_Uniform_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicXor_Uniform_UInt16_ptr.type.strict = true;
    AtomicXor_Uniform_UInt16_ptr.type.mut = true;
    AtomicXor_Uniform_UInt16_ptr.type.modifiers = AtomicXor_Uniform_UInt16_ptr_modifiers;
    AtomicXor_Uniform_UInt16_ptr.type.modifierValues = AtomicXor_Uniform_UInt16_ptr_modifierValues;
    AtomicXor_Uniform_UInt16_value.name = "value"_c;
    AtomicXor_Uniform_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicXor_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicXor_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Uniform_UInt16_semantics.type.literal = true;
    AtomicXor_Uniform_UInt16.documentation = "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicXor_Uniform_UInt16.name = AtomicXor_Uniform_UInt16_name;
    AtomicXor_Uniform_UInt16.backendIndex = 2167;
    AtomicXor_Uniform_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicXor_Uniform_UInt16.parameters = AtomicXor_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicXor_Uniform_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicXor_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicXor_Uniform_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicXor_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Uniform_UInt16)->signature = "atomicXor(uniform *mutable u16,u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicXor_Uniform_UInt16)->name = "atomicXor(uniform *mutable u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Uniform_UInt16)->nameWithVarNames = "atomicXor(ptr : uniform *mutable u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Uniform_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicXor with UInt16, UInt16, MemorySemantics
    AtomicXor_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicXor_Workgroup_UInt16_ptr.type = Type::FullType{ UInt16Type.name };
    AtomicXor_Workgroup_UInt16_ptr.type.strict = true;
    AtomicXor_Workgroup_UInt16_ptr.type.modifiers = AtomicXor_Workgroup_UInt16_ptr_modifiers;
    AtomicXor_Workgroup_UInt16_ptr.type.modifierValues = AtomicXor_Workgroup_UInt16_ptr_modifierValues;
    AtomicXor_Workgroup_UInt16_value.name = "value"_c;
    AtomicXor_Workgroup_UInt16_value.type = Type::FullType{ UInt16Type.name };
    AtomicXor_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicXor_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Workgroup_UInt16_semantics.type.literal = true;
    AtomicXor_Workgroup_UInt16.documentation = "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicXor_Workgroup_UInt16.name = AtomicXor_Workgroup_UInt16_name;
    AtomicXor_Workgroup_UInt16.backendIndex = 2168;
    AtomicXor_Workgroup_UInt16.returnType = Type::FullType { UInt16Type.name };
    AtomicXor_Workgroup_UInt16.parameters = AtomicXor_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt16_ptr)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt16)->signature = "atomicXor(workgroup *u16,u16,literal MemorySemantics) u16"_c;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt16)->name = "atomicXor(workgroup *u16,u16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt16)->nameWithVarNames = "atomicXor(ptr : workgroup *u16, value : u16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Workgroup_UInt16)->returnTypeSymbol = &UInt16Type;

    /// atomicStore with Int16, Int16, MemorySemantics
    AtomicStore_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicStore_Uniform_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicStore_Uniform_Int16_ptr.type.strict = true;
    AtomicStore_Uniform_Int16_ptr.type.mut = true;
    AtomicStore_Uniform_Int16_ptr.type.modifiers = AtomicStore_Uniform_Int16_ptr_modifiers;
    AtomicStore_Uniform_Int16_ptr.type.modifierValues = AtomicStore_Uniform_Int16_ptr_modifierValues;
    AtomicStore_Uniform_Int16_value.name = "value"_c;
    AtomicStore_Uniform_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicStore_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicStore_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Uniform_Int16_semantics.type.literal = true;
    AtomicStore_Uniform_Int16.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Uniform_Int16.name = AtomicStore_Uniform_Int16_name;
    AtomicStore_Uniform_Int16.backendIndex = 2169;
    AtomicStore_Uniform_Int16.returnType = Type::FullType { VoidType.name };
    AtomicStore_Uniform_Int16.parameters = AtomicStore_Uniform_Int16_args;
    Symbol::Resolved(&AtomicStore_Uniform_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicStore_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicStore_Uniform_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicStore_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Uniform_Int16)->signature = "atomicStore(uniform *mutable i16,i16,literal MemorySemantics) void"_c;
    Symbol::Resolved(&AtomicStore_Uniform_Int16)->name = "atomicStore(uniform *mutable i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Uniform_Int16)->nameWithVarNames = "atomicStore(ptr : uniform *mutable i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Uniform_Int16)->returnTypeSymbol = &VoidType;

    /// atomicStore with Int16, Int16, MemorySemantics
    AtomicStore_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicStore_Workgroup_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicStore_Workgroup_Int16_ptr.type.strict = true;
    AtomicStore_Workgroup_Int16_ptr.type.modifiers = AtomicStore_Workgroup_Int16_ptr_modifiers;
    AtomicStore_Workgroup_Int16_ptr.type.modifierValues = AtomicStore_Workgroup_Int16_ptr_modifierValues;
    AtomicStore_Workgroup_Int16_value.name = "value"_c;
    AtomicStore_Workgroup_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicStore_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicStore_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Workgroup_Int16_semantics.type.literal = true;
    AtomicStore_Workgroup_Int16.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Workgroup_Int16.name = AtomicStore_Workgroup_Int16_name;
    AtomicStore_Workgroup_Int16.backendIndex = 2170;
    AtomicStore_Workgroup_Int16.returnType = Type::FullType { VoidType.name };
    AtomicStore_Workgroup_Int16.parameters = AtomicStore_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicStore_Workgroup_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicStore_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicStore_Workgroup_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicStore_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Workgroup_Int16)->signature = "atomicStore(workgroup *i16,i16,literal MemorySemantics) void"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_Int16)->name = "atomicStore(workgroup *i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_Int16)->nameWithVarNames = "atomicStore(ptr : workgroup *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_Int16)->returnTypeSymbol = &VoidType;

    /// atomicExchange with Int16, Int16, MemorySemantics
    AtomicExchange_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicExchange_Uniform_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicExchange_Uniform_Int16_ptr.type.strict = true;
    AtomicExchange_Uniform_Int16_ptr.type.mut = true;
    AtomicExchange_Uniform_Int16_ptr.type.modifiers = AtomicExchange_Uniform_Int16_ptr_modifiers;
    AtomicExchange_Uniform_Int16_ptr.type.modifierValues = AtomicExchange_Uniform_Int16_ptr_modifierValues;
    AtomicExchange_Uniform_Int16_value.name = "value"_c;
    AtomicExchange_Uniform_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicExchange_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicExchange_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Uniform_Int16_semantics.type.literal = true;
    AtomicExchange_Uniform_Int16.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Uniform_Int16.name = AtomicExchange_Uniform_Int16_name;
    AtomicExchange_Uniform_Int16.backendIndex = 2171;
    AtomicExchange_Uniform_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicExchange_Uniform_Int16.parameters = AtomicExchange_Uniform_Int16_args;
    Symbol::Resolved(&AtomicExchange_Uniform_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicExchange_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicExchange_Uniform_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicExchange_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Uniform_Int16)->signature = "atomicExchange(uniform *mutable i16,i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_Int16)->name = "atomicExchange(uniform *mutable i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_Int16)->nameWithVarNames = "atomicExchange(ptr : uniform *mutable i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicExchange with Int16, Int16, MemorySemantics
    AtomicExchange_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicExchange_Workgroup_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicExchange_Workgroup_Int16_ptr.type.strict = true;
    AtomicExchange_Workgroup_Int16_ptr.type.modifiers = AtomicExchange_Workgroup_Int16_ptr_modifiers;
    AtomicExchange_Workgroup_Int16_ptr.type.modifierValues = AtomicExchange_Workgroup_Int16_ptr_modifierValues;
    AtomicExchange_Workgroup_Int16_value.name = "value"_c;
    AtomicExchange_Workgroup_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicExchange_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicExchange_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Workgroup_Int16_semantics.type.literal = true;
    AtomicExchange_Workgroup_Int16.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Workgroup_Int16.name = AtomicExchange_Workgroup_Int16_name;
    AtomicExchange_Workgroup_Int16.backendIndex = 2172;
    AtomicExchange_Workgroup_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicExchange_Workgroup_Int16.parameters = AtomicExchange_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int16)->signature = "atomicExchange(workgroup *i16,i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int16)->name = "atomicExchange(workgroup *i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int16)->nameWithVarNames = "atomicExchange(ptr : workgroup *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicAdd with Int16, Int16, MemorySemantics
    AtomicAdd_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicAdd_Uniform_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicAdd_Uniform_Int16_ptr.type.strict = true;
    AtomicAdd_Uniform_Int16_ptr.type.mut = true;
    AtomicAdd_Uniform_Int16_ptr.type.modifiers = AtomicAdd_Uniform_Int16_ptr_modifiers;
    AtomicAdd_Uniform_Int16_ptr.type.modifierValues = AtomicAdd_Uniform_Int16_ptr_modifierValues;
    AtomicAdd_Uniform_Int16_value.name = "value"_c;
    AtomicAdd_Uniform_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicAdd_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicAdd_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Uniform_Int16_semantics.type.literal = true;
    AtomicAdd_Uniform_Int16.documentation = "Adds the value to the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAdd_Uniform_Int16.name = AtomicAdd_Uniform_Int16_name;
    AtomicAdd_Uniform_Int16.backendIndex = 2173;
    AtomicAdd_Uniform_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicAdd_Uniform_Int16.parameters = AtomicAdd_Uniform_Int16_args;
    Symbol::Resolved(&AtomicAdd_Uniform_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAdd_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicAdd_Uniform_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAdd_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Uniform_Int16)->signature = "atomicAdd(uniform *mutable i16,i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicAdd_Uniform_Int16)->name = "atomicAdd(uniform *mutable i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Uniform_Int16)->nameWithVarNames = "atomicAdd(ptr : uniform *mutable i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Uniform_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicAdd with Int16, Int16, MemorySemantics
    AtomicAdd_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicAdd_Workgroup_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicAdd_Workgroup_Int16_ptr.type.strict = true;
    AtomicAdd_Workgroup_Int16_ptr.type.modifiers = AtomicAdd_Workgroup_Int16_ptr_modifiers;
    AtomicAdd_Workgroup_Int16_ptr.type.modifierValues = AtomicAdd_Workgroup_Int16_ptr_modifierValues;
    AtomicAdd_Workgroup_Int16_value.name = "value"_c;
    AtomicAdd_Workgroup_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicAdd_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicAdd_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAdd_Workgroup_Int16_semantics.type.literal = true;
    AtomicAdd_Workgroup_Int16.documentation = "Adds the value to the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAdd_Workgroup_Int16.name = AtomicAdd_Workgroup_Int16_name;
    AtomicAdd_Workgroup_Int16.backendIndex = 2174;
    AtomicAdd_Workgroup_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicAdd_Workgroup_Int16.parameters = AtomicAdd_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int16)->signature = "atomicAdd(workgroup *i16,i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int16)->name = "atomicAdd(workgroup *i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int16)->nameWithVarNames = "atomicAdd(ptr : workgroup *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAdd_Workgroup_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicSubtract with Int16, Int16, MemorySemantics
    AtomicSubtract_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicSubtract_Uniform_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicSubtract_Uniform_Int16_ptr.type.strict = true;
    AtomicSubtract_Uniform_Int16_ptr.type.mut = true;
    AtomicSubtract_Uniform_Int16_ptr.type.modifiers = AtomicSubtract_Uniform_Int16_ptr_modifiers;
    AtomicSubtract_Uniform_Int16_ptr.type.modifierValues = AtomicSubtract_Uniform_Int16_ptr_modifierValues;
    AtomicSubtract_Uniform_Int16_value.name = "value"_c;
    AtomicSubtract_Uniform_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicSubtract_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicSubtract_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Uniform_Int16_semantics.type.literal = true;
    AtomicSubtract_Uniform_Int16.documentation = "Subtracts the value from the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicSubtract_Uniform_Int16.name = AtomicSubtract_Uniform_Int16_name;
    AtomicSubtract_Uniform_Int16.backendIndex = 2175;
    AtomicSubtract_Uniform_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicSubtract_Uniform_Int16.parameters = AtomicSubtract_Uniform_Int16_args;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int16)->signature = "atomicSubtract(uniform *mutable i16,i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int16)->name = "atomicSubtract(uniform *mutable i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int16)->nameWithVarNames = "atomicSubtract(ptr : uniform *mutable i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Uniform_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicSubtract with Int16, Int16, MemorySemantics
    AtomicSubtract_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicSubtract_Workgroup_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicSubtract_Workgroup_Int16_ptr.type.strict = true;
    AtomicSubtract_Workgroup_Int16_ptr.type.modifiers = AtomicSubtract_Workgroup_Int16_ptr_modifiers;
    AtomicSubtract_Workgroup_Int16_ptr.type.modifierValues = AtomicSubtract_Workgroup_Int16_ptr_modifierValues;
    AtomicSubtract_Workgroup_Int16_value.name = "value"_c;
    AtomicSubtract_Workgroup_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicSubtract_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicSubtract_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicSubtract_Workgroup_Int16_semantics.type.literal = true;
    AtomicSubtract_Workgroup_Int16.documentation = "Subtracts the value from the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicSubtract_Workgroup_Int16.name = AtomicSubtract_Workgroup_Int16_name;
    AtomicSubtract_Workgroup_Int16.backendIndex = 2176;
    AtomicSubtract_Workgroup_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicSubtract_Workgroup_Int16.parameters = AtomicSubtract_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int16)->signature = "atomicSubtract(workgroup *i16,i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int16)->name = "atomicSubtract(workgroup *i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int16)->nameWithVarNames = "atomicSubtract(ptr : workgroup *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicSubtract_Workgroup_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicAnd with Int16, Int16, MemorySemantics
    AtomicAnd_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicAnd_Uniform_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicAnd_Uniform_Int16_ptr.type.strict = true;
    AtomicAnd_Uniform_Int16_ptr.type.mut = true;
    AtomicAnd_Uniform_Int16_ptr.type.modifiers = AtomicAnd_Uniform_Int16_ptr_modifiers;
    AtomicAnd_Uniform_Int16_ptr.type.modifierValues = AtomicAnd_Uniform_Int16_ptr_modifierValues;
    AtomicAnd_Uniform_Int16_value.name = "value"_c;
    AtomicAnd_Uniform_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicAnd_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicAnd_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Uniform_Int16_semantics.type.literal = true;
    AtomicAnd_Uniform_Int16.documentation = "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAnd_Uniform_Int16.name = AtomicAnd_Uniform_Int16_name;
    AtomicAnd_Uniform_Int16.backendIndex = 2177;
    AtomicAnd_Uniform_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicAnd_Uniform_Int16.parameters = AtomicAnd_Uniform_Int16_args;
    Symbol::Resolved(&AtomicAnd_Uniform_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAnd_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicAnd_Uniform_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAnd_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Uniform_Int16)->signature = "atomicAnd(uniform *mutable i16,i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicAnd_Uniform_Int16)->name = "atomicAnd(uniform *mutable i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Uniform_Int16)->nameWithVarNames = "atomicAnd(ptr : uniform *mutable i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Uniform_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicAnd with Int16, Int16, MemorySemantics
    AtomicAnd_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicAnd_Workgroup_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicAnd_Workgroup_Int16_ptr.type.strict = true;
    AtomicAnd_Workgroup_Int16_ptr.type.modifiers = AtomicAnd_Workgroup_Int16_ptr_modifiers;
    AtomicAnd_Workgroup_Int16_ptr.type.modifierValues = AtomicAnd_Workgroup_Int16_ptr_modifierValues;
    AtomicAnd_Workgroup_Int16_value.name = "value"_c;
    AtomicAnd_Workgroup_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicAnd_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicAnd_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicAnd_Workgroup_Int16_semantics.type.literal = true;
    AtomicAnd_Workgroup_Int16.documentation = "Performs a bitwise AND operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicAnd_Workgroup_Int16.name = AtomicAnd_Workgroup_Int16_name;
    AtomicAnd_Workgroup_Int16.backendIndex = 2178;
    AtomicAnd_Workgroup_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicAnd_Workgroup_Int16.parameters = AtomicAnd_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int16)->signature = "atomicAnd(workgroup *i16,i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int16)->name = "atomicAnd(workgroup *i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int16)->nameWithVarNames = "atomicAnd(ptr : workgroup *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicAnd_Workgroup_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicOr with Int16, Int16, MemorySemantics
    AtomicOr_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicOr_Uniform_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicOr_Uniform_Int16_ptr.type.strict = true;
    AtomicOr_Uniform_Int16_ptr.type.mut = true;
    AtomicOr_Uniform_Int16_ptr.type.modifiers = AtomicOr_Uniform_Int16_ptr_modifiers;
    AtomicOr_Uniform_Int16_ptr.type.modifierValues = AtomicOr_Uniform_Int16_ptr_modifierValues;
    AtomicOr_Uniform_Int16_value.name = "value"_c;
    AtomicOr_Uniform_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicOr_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicOr_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Uniform_Int16_semantics.type.literal = true;
    AtomicOr_Uniform_Int16.documentation = "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicOr_Uniform_Int16.name = AtomicOr_Uniform_Int16_name;
    AtomicOr_Uniform_Int16.backendIndex = 2179;
    AtomicOr_Uniform_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicOr_Uniform_Int16.parameters = AtomicOr_Uniform_Int16_args;
    Symbol::Resolved(&AtomicOr_Uniform_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicOr_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicOr_Uniform_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicOr_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Uniform_Int16)->signature = "atomicOr(uniform *mutable i16,i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicOr_Uniform_Int16)->name = "atomicOr(uniform *mutable i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Uniform_Int16)->nameWithVarNames = "atomicOr(ptr : uniform *mutable i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Uniform_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicOr with Int16, Int16, MemorySemantics
    AtomicOr_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicOr_Workgroup_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicOr_Workgroup_Int16_ptr.type.strict = true;
    AtomicOr_Workgroup_Int16_ptr.type.modifiers = AtomicOr_Workgroup_Int16_ptr_modifiers;
    AtomicOr_Workgroup_Int16_ptr.type.modifierValues = AtomicOr_Workgroup_Int16_ptr_modifierValues;
    AtomicOr_Workgroup_Int16_value.name = "value"_c;
    AtomicOr_Workgroup_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicOr_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicOr_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicOr_Workgroup_Int16_semantics.type.literal = true;
    AtomicOr_Workgroup_Int16.documentation = "Performs a bitwise OR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicOr_Workgroup_Int16.name = AtomicOr_Workgroup_Int16_name;
    AtomicOr_Workgroup_Int16.backendIndex = 2180;
    AtomicOr_Workgroup_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicOr_Workgroup_Int16.parameters = AtomicOr_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicOr_Workgroup_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicOr_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicOr_Workgroup_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicOr_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicOr_Workgroup_Int16)->signature = "atomicOr(workgroup *i16,i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicOr_Workgroup_Int16)->name = "atomicOr(workgroup *i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Workgroup_Int16)->nameWithVarNames = "atomicOr(ptr : workgroup *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicOr_Workgroup_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicXor with Int16, Int16, MemorySemantics
    AtomicXor_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicXor_Uniform_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicXor_Uniform_Int16_ptr.type.strict = true;
    AtomicXor_Uniform_Int16_ptr.type.mut = true;
    AtomicXor_Uniform_Int16_ptr.type.modifiers = AtomicXor_Uniform_Int16_ptr_modifiers;
    AtomicXor_Uniform_Int16_ptr.type.modifierValues = AtomicXor_Uniform_Int16_ptr_modifierValues;
    AtomicXor_Uniform_Int16_value.name = "value"_c;
    AtomicXor_Uniform_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicXor_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicXor_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Uniform_Int16_semantics.type.literal = true;
    AtomicXor_Uniform_Int16.documentation = "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicXor_Uniform_Int16.name = AtomicXor_Uniform_Int16_name;
    AtomicXor_Uniform_Int16.backendIndex = 2181;
    AtomicXor_Uniform_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicXor_Uniform_Int16.parameters = AtomicXor_Uniform_Int16_args;
    Symbol::Resolved(&AtomicXor_Uniform_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicXor_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicXor_Uniform_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicXor_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Uniform_Int16)->signature = "atomicXor(uniform *mutable i16,i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicXor_Uniform_Int16)->name = "atomicXor(uniform *mutable i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Uniform_Int16)->nameWithVarNames = "atomicXor(ptr : uniform *mutable i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Uniform_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicXor with Int16, Int16, MemorySemantics
    AtomicXor_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicXor_Workgroup_Int16_ptr.type = Type::FullType{ Int16Type.name };
    AtomicXor_Workgroup_Int16_ptr.type.strict = true;
    AtomicXor_Workgroup_Int16_ptr.type.modifiers = AtomicXor_Workgroup_Int16_ptr_modifiers;
    AtomicXor_Workgroup_Int16_ptr.type.modifierValues = AtomicXor_Workgroup_Int16_ptr_modifierValues;
    AtomicXor_Workgroup_Int16_value.name = "value"_c;
    AtomicXor_Workgroup_Int16_value.type = Type::FullType{ Int16Type.name };
    AtomicXor_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicXor_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicXor_Workgroup_Int16_semantics.type.literal = true;
    AtomicXor_Workgroup_Int16.documentation = "Performs a bitwise XOR operation with the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicXor_Workgroup_Int16.name = AtomicXor_Workgroup_Int16_name;
    AtomicXor_Workgroup_Int16.backendIndex = 2182;
    AtomicXor_Workgroup_Int16.returnType = Type::FullType { Int16Type.name };
    AtomicXor_Workgroup_Int16.parameters = AtomicXor_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicXor_Workgroup_Int16_ptr)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicXor_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicXor_Workgroup_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&AtomicXor_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicXor_Workgroup_Int16)->signature = "atomicXor(workgroup *i16,i16,literal MemorySemantics) i16"_c;
    Symbol::Resolved(&AtomicXor_Workgroup_Int16)->name = "atomicXor(workgroup *i16,i16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Workgroup_Int16)->nameWithVarNames = "atomicXor(ptr : workgroup *i16, value : i16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicXor_Workgroup_Int16)->returnTypeSymbol = &Int16Type;

    /// atomicStore with Float32, Float32, MemorySemantics
    AtomicStore_Uniform_Float32_ptr.name = "ptr"_c;
    AtomicStore_Uniform_Float32_ptr.type = Type::FullType{ Float32Type.name };
    AtomicStore_Uniform_Float32_ptr.type.strict = true;
    AtomicStore_Uniform_Float32_ptr.type.mut = true;
    AtomicStore_Uniform_Float32_ptr.type.modifiers = AtomicStore_Uniform_Float32_ptr_modifiers;
    AtomicStore_Uniform_Float32_ptr.type.modifierValues = AtomicStore_Uniform_Float32_ptr_modifierValues;
    AtomicStore_Uniform_Float32_value.name = "value"_c;
    AtomicStore_Uniform_Float32_value.type = Type::FullType{ Float32Type.name };
    AtomicStore_Uniform_Float32_semantics.name = "semantics"_c;
    AtomicStore_Uniform_Float32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Uniform_Float32_semantics.type.literal = true;
    AtomicStore_Uniform_Float32.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Uniform_Float32.name = AtomicStore_Uniform_Float32_name;
    AtomicStore_Uniform_Float32.backendIndex = 2183;
    AtomicStore_Uniform_Float32.returnType = Type::FullType { VoidType.name };
    AtomicStore_Uniform_Float32.parameters = AtomicStore_Uniform_Float32_args;
    Symbol::Resolved(&AtomicStore_Uniform_Float32_ptr)->typeSymbol = &Float32Type;
    Symbol::Resolved(&AtomicStore_Uniform_Float32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicStore_Uniform_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&AtomicStore_Uniform_Float32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Uniform_Float32)->signature = "atomicStore(uniform *mutable f32,f32,literal MemorySemantics) void"_c;
    Symbol::Resolved(&AtomicStore_Uniform_Float32)->name = "atomicStore(uniform *mutable f32,f32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Uniform_Float32)->nameWithVarNames = "atomicStore(ptr : uniform *mutable f32, value : f32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Uniform_Float32)->returnTypeSymbol = &VoidType;

    /// atomicStore with Float32, Float32, MemorySemantics
    AtomicStore_Workgroup_Float32_ptr.name = "ptr"_c;
    AtomicStore_Workgroup_Float32_ptr.type = Type::FullType{ Float32Type.name };
    AtomicStore_Workgroup_Float32_ptr.type.strict = true;
    AtomicStore_Workgroup_Float32_ptr.type.modifiers = AtomicStore_Workgroup_Float32_ptr_modifiers;
    AtomicStore_Workgroup_Float32_ptr.type.modifierValues = AtomicStore_Workgroup_Float32_ptr_modifierValues;
    AtomicStore_Workgroup_Float32_value.name = "value"_c;
    AtomicStore_Workgroup_Float32_value.type = Type::FullType{ Float32Type.name };
    AtomicStore_Workgroup_Float32_semantics.name = "semantics"_c;
    AtomicStore_Workgroup_Float32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Workgroup_Float32_semantics.type.literal = true;
    AtomicStore_Workgroup_Float32.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Workgroup_Float32.name = AtomicStore_Workgroup_Float32_name;
    AtomicStore_Workgroup_Float32.backendIndex = 2184;
    AtomicStore_Workgroup_Float32.returnType = Type::FullType { VoidType.name };
    AtomicStore_Workgroup_Float32.parameters = AtomicStore_Workgroup_Float32_args;
    Symbol::Resolved(&AtomicStore_Workgroup_Float32_ptr)->typeSymbol = &Float32Type;
    Symbol::Resolved(&AtomicStore_Workgroup_Float32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicStore_Workgroup_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&AtomicStore_Workgroup_Float32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Workgroup_Float32)->signature = "atomicStore(workgroup *f32,f32,literal MemorySemantics) void"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_Float32)->name = "atomicStore(workgroup *f32,f32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_Float32)->nameWithVarNames = "atomicStore(ptr : workgroup *f32, value : f32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_Float32)->returnTypeSymbol = &VoidType;

    /// atomicExchange with Float32, Float32, MemorySemantics
    AtomicExchange_Uniform_Float32_ptr.name = "ptr"_c;
    AtomicExchange_Uniform_Float32_ptr.type = Type::FullType{ Float32Type.name };
    AtomicExchange_Uniform_Float32_ptr.type.strict = true;
    AtomicExchange_Uniform_Float32_ptr.type.mut = true;
    AtomicExchange_Uniform_Float32_ptr.type.modifiers = AtomicExchange_Uniform_Float32_ptr_modifiers;
    AtomicExchange_Uniform_Float32_ptr.type.modifierValues = AtomicExchange_Uniform_Float32_ptr_modifierValues;
    AtomicExchange_Uniform_Float32_value.name = "value"_c;
    AtomicExchange_Uniform_Float32_value.type = Type::FullType{ Float32Type.name };
    AtomicExchange_Uniform_Float32_semantics.name = "semantics"_c;
    AtomicExchange_Uniform_Float32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Uniform_Float32_semantics.type.literal = true;
    AtomicExchange_Uniform_Float32.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Uniform_Float32.name = AtomicExchange_Uniform_Float32_name;
    AtomicExchange_Uniform_Float32.backendIndex = 2185;
    AtomicExchange_Uniform_Float32.returnType = Type::FullType { Float32Type.name };
    AtomicExchange_Uniform_Float32.parameters = AtomicExchange_Uniform_Float32_args;
    Symbol::Resolved(&AtomicExchange_Uniform_Float32_ptr)->typeSymbol = &Float32Type;
    Symbol::Resolved(&AtomicExchange_Uniform_Float32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicExchange_Uniform_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&AtomicExchange_Uniform_Float32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Uniform_Float32)->signature = "atomicExchange(uniform *mutable f32,f32,literal MemorySemantics) f32"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_Float32)->name = "atomicExchange(uniform *mutable f32,f32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_Float32)->nameWithVarNames = "atomicExchange(ptr : uniform *mutable f32, value : f32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_Float32)->returnTypeSymbol = &Float32Type;

    /// atomicExchange with Float32, Float32, MemorySemantics
    AtomicExchange_Workgroup_Float32_ptr.name = "ptr"_c;
    AtomicExchange_Workgroup_Float32_ptr.type = Type::FullType{ Float32Type.name };
    AtomicExchange_Workgroup_Float32_ptr.type.strict = true;
    AtomicExchange_Workgroup_Float32_ptr.type.modifiers = AtomicExchange_Workgroup_Float32_ptr_modifiers;
    AtomicExchange_Workgroup_Float32_ptr.type.modifierValues = AtomicExchange_Workgroup_Float32_ptr_modifierValues;
    AtomicExchange_Workgroup_Float32_value.name = "value"_c;
    AtomicExchange_Workgroup_Float32_value.type = Type::FullType{ Float32Type.name };
    AtomicExchange_Workgroup_Float32_semantics.name = "semantics"_c;
    AtomicExchange_Workgroup_Float32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Workgroup_Float32_semantics.type.literal = true;
    AtomicExchange_Workgroup_Float32.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Workgroup_Float32.name = AtomicExchange_Workgroup_Float32_name;
    AtomicExchange_Workgroup_Float32.backendIndex = 2186;
    AtomicExchange_Workgroup_Float32.returnType = Type::FullType { Float32Type.name };
    AtomicExchange_Workgroup_Float32.parameters = AtomicExchange_Workgroup_Float32_args;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float32_ptr)->typeSymbol = &Float32Type;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float32_value)->typeSymbol = &Float32Type;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float32)->signature = "atomicExchange(workgroup *f32,f32,literal MemorySemantics) f32"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float32)->name = "atomicExchange(workgroup *f32,f32,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float32)->nameWithVarNames = "atomicExchange(ptr : workgroup *f32, value : f32, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float32)->returnTypeSymbol = &Float32Type;

    /// atomicStore with Float16, Float16, MemorySemantics
    AtomicStore_Uniform_Float16_ptr.name = "ptr"_c;
    AtomicStore_Uniform_Float16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicStore_Uniform_Float16_ptr.type.strict = true;
    AtomicStore_Uniform_Float16_ptr.type.mut = true;
    AtomicStore_Uniform_Float16_ptr.type.modifiers = AtomicStore_Uniform_Float16_ptr_modifiers;
    AtomicStore_Uniform_Float16_ptr.type.modifierValues = AtomicStore_Uniform_Float16_ptr_modifierValues;
    AtomicStore_Uniform_Float16_value.name = "value"_c;
    AtomicStore_Uniform_Float16_value.type = Type::FullType{ Float16Type.name };
    AtomicStore_Uniform_Float16_semantics.name = "semantics"_c;
    AtomicStore_Uniform_Float16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Uniform_Float16_semantics.type.literal = true;
    AtomicStore_Uniform_Float16.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Uniform_Float16.name = AtomicStore_Uniform_Float16_name;
    AtomicStore_Uniform_Float16.backendIndex = 2187;
    AtomicStore_Uniform_Float16.returnType = Type::FullType { VoidType.name };
    AtomicStore_Uniform_Float16.parameters = AtomicStore_Uniform_Float16_args;
    Symbol::Resolved(&AtomicStore_Uniform_Float16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicStore_Uniform_Float16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicStore_Uniform_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicStore_Uniform_Float16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Uniform_Float16)->signature = "atomicStore(uniform *mutable f16,f16,literal MemorySemantics) void"_c;
    Symbol::Resolved(&AtomicStore_Uniform_Float16)->name = "atomicStore(uniform *mutable f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Uniform_Float16)->nameWithVarNames = "atomicStore(ptr : uniform *mutable f16, value : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Uniform_Float16)->returnTypeSymbol = &VoidType;

    /// atomicStore with Float16, Float16, MemorySemantics
    AtomicStore_Workgroup_Float16_ptr.name = "ptr"_c;
    AtomicStore_Workgroup_Float16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicStore_Workgroup_Float16_ptr.type.strict = true;
    AtomicStore_Workgroup_Float16_ptr.type.modifiers = AtomicStore_Workgroup_Float16_ptr_modifiers;
    AtomicStore_Workgroup_Float16_ptr.type.modifierValues = AtomicStore_Workgroup_Float16_ptr_modifierValues;
    AtomicStore_Workgroup_Float16_value.name = "value"_c;
    AtomicStore_Workgroup_Float16_value.type = Type::FullType{ Float16Type.name };
    AtomicStore_Workgroup_Float16_semantics.name = "semantics"_c;
    AtomicStore_Workgroup_Float16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicStore_Workgroup_Float16_semantics.type.literal = true;
    AtomicStore_Workgroup_Float16.documentation = "Stores the value at the pointer location with the specified memory semantics, returns the old value"_c;
    AtomicStore_Workgroup_Float16.name = AtomicStore_Workgroup_Float16_name;
    AtomicStore_Workgroup_Float16.backendIndex = 2188;
    AtomicStore_Workgroup_Float16.returnType = Type::FullType { VoidType.name };
    AtomicStore_Workgroup_Float16.parameters = AtomicStore_Workgroup_Float16_args;
    Symbol::Resolved(&AtomicStore_Workgroup_Float16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicStore_Workgroup_Float16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicStore_Workgroup_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicStore_Workgroup_Float16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicStore_Workgroup_Float16)->signature = "atomicStore(workgroup *f16,f16,literal MemorySemantics) void"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_Float16)->name = "atomicStore(workgroup *f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_Float16)->nameWithVarNames = "atomicStore(ptr : workgroup *f16, value : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicStore_Workgroup_Float16)->returnTypeSymbol = &VoidType;

    /// atomicExchange with Float16, Float16, MemorySemantics
    AtomicExchange_Uniform_Float16_ptr.name = "ptr"_c;
    AtomicExchange_Uniform_Float16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicExchange_Uniform_Float16_ptr.type.strict = true;
    AtomicExchange_Uniform_Float16_ptr.type.mut = true;
    AtomicExchange_Uniform_Float16_ptr.type.modifiers = AtomicExchange_Uniform_Float16_ptr_modifiers;
    AtomicExchange_Uniform_Float16_ptr.type.modifierValues = AtomicExchange_Uniform_Float16_ptr_modifierValues;
    AtomicExchange_Uniform_Float16_value.name = "value"_c;
    AtomicExchange_Uniform_Float16_value.type = Type::FullType{ Float16Type.name };
    AtomicExchange_Uniform_Float16_semantics.name = "semantics"_c;
    AtomicExchange_Uniform_Float16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Uniform_Float16_semantics.type.literal = true;
    AtomicExchange_Uniform_Float16.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Uniform_Float16.name = AtomicExchange_Uniform_Float16_name;
    AtomicExchange_Uniform_Float16.backendIndex = 2189;
    AtomicExchange_Uniform_Float16.returnType = Type::FullType { Float16Type.name };
    AtomicExchange_Uniform_Float16.parameters = AtomicExchange_Uniform_Float16_args;
    Symbol::Resolved(&AtomicExchange_Uniform_Float16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicExchange_Uniform_Float16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicExchange_Uniform_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicExchange_Uniform_Float16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Uniform_Float16)->signature = "atomicExchange(uniform *mutable f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_Float16)->name = "atomicExchange(uniform *mutable f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_Float16)->nameWithVarNames = "atomicExchange(ptr : uniform *mutable f16, value : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Uniform_Float16)->returnTypeSymbol = &Float16Type;

    /// atomicExchange with Float16, Float16, MemorySemantics
    AtomicExchange_Workgroup_Float16_ptr.name = "ptr"_c;
    AtomicExchange_Workgroup_Float16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicExchange_Workgroup_Float16_ptr.type.strict = true;
    AtomicExchange_Workgroup_Float16_ptr.type.modifiers = AtomicExchange_Workgroup_Float16_ptr_modifiers;
    AtomicExchange_Workgroup_Float16_ptr.type.modifierValues = AtomicExchange_Workgroup_Float16_ptr_modifierValues;
    AtomicExchange_Workgroup_Float16_value.name = "value"_c;
    AtomicExchange_Workgroup_Float16_value.type = Type::FullType{ Float16Type.name };
    AtomicExchange_Workgroup_Float16_semantics.name = "semantics"_c;
    AtomicExchange_Workgroup_Float16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicExchange_Workgroup_Float16_semantics.type.literal = true;
    AtomicExchange_Workgroup_Float16.documentation = "Exchanges the value at the pointer location with the specified value and memory semantics, returns the old value"_c;
    AtomicExchange_Workgroup_Float16.name = AtomicExchange_Workgroup_Float16_name;
    AtomicExchange_Workgroup_Float16.backendIndex = 2190;
    AtomicExchange_Workgroup_Float16.returnType = Type::FullType { Float16Type.name };
    AtomicExchange_Workgroup_Float16.parameters = AtomicExchange_Workgroup_Float16_args;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float16)->signature = "atomicExchange(workgroup *f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float16)->name = "atomicExchange(workgroup *f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float16)->nameWithVarNames = "atomicExchange(ptr : workgroup *f16, value : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicExchange_Workgroup_Float16)->returnTypeSymbol = &Float16Type;

    /// atomicMin with Float16, Float16, MemorySemantics
    AtomicMin_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicMin_Uniform_UInt32_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMin_Uniform_UInt32_ptr.type.strict = true;
    AtomicMin_Uniform_UInt32_ptr.type.mut = true;
    AtomicMin_Uniform_UInt32_ptr.type.modifiers = AtomicMin_Uniform_UInt32_ptr_modifiers;
    AtomicMin_Uniform_UInt32_ptr.type.modifierValues = AtomicMin_Uniform_UInt32_ptr_modifierValues;
    AtomicMin_Uniform_UInt32_compare.name = "compare"_c;
    AtomicMin_Uniform_UInt32_compare.type = Type::FullType{ Float16Type.name };
    AtomicMin_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicMin_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMin_Uniform_UInt32_semantics.type.literal = true;
    AtomicMin_Uniform_UInt32.documentation = "Compares the value at the pointer with the comparand, and stores the smallest value in the pointer, returns old value"_c;
    AtomicMin_Uniform_UInt32.name = AtomicMin_Uniform_UInt32_name;
    AtomicMin_Uniform_UInt32.backendIndex = 2191;
    AtomicMin_Uniform_UInt32.returnType = Type::FullType { Float16Type.name };
    AtomicMin_Uniform_UInt32.parameters = AtomicMin_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicMin_Uniform_UInt32_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicMin_Uniform_UInt32_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMin_Uniform_UInt32)->signature = "atomicMin(uniform *mutable f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMin_Uniform_UInt32)->name = "atomicMin(uniform *mutable f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Uniform_UInt32)->nameWithVarNames = "atomicMin(ptr : uniform *mutable f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Uniform_UInt32)->returnTypeSymbol = &Float16Type;

    /// atomicMin with Float16, Float16, MemorySemantics
    AtomicMin_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicMin_Workgroup_UInt32_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMin_Workgroup_UInt32_ptr.type.strict = true;
    AtomicMin_Workgroup_UInt32_ptr.type.modifiers = AtomicMin_Workgroup_UInt32_ptr_modifiers;
    AtomicMin_Workgroup_UInt32_ptr.type.modifierValues = AtomicMin_Workgroup_UInt32_ptr_modifierValues;
    AtomicMin_Workgroup_UInt32_compare.name = "compare"_c;
    AtomicMin_Workgroup_UInt32_compare.type = Type::FullType{ Float16Type.name };
    AtomicMin_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicMin_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMin_Workgroup_UInt32_semantics.type.literal = true;
    AtomicMin_Workgroup_UInt32.documentation = "Compares the value at the pointer with the comparand, and stores the smallest value in the pointer, returns old value"_c;
    AtomicMin_Workgroup_UInt32.name = AtomicMin_Workgroup_UInt32_name;
    AtomicMin_Workgroup_UInt32.backendIndex = 2192;
    AtomicMin_Workgroup_UInt32.returnType = Type::FullType { Float16Type.name };
    AtomicMin_Workgroup_UInt32.parameters = AtomicMin_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt32_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt32_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt32)->signature = "atomicMin(workgroup *f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt32)->name = "atomicMin(workgroup *f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt32)->nameWithVarNames = "atomicMin(ptr : workgroup *f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt32)->returnTypeSymbol = &Float16Type;

    /// atomicMax with Float16, Float16, MemorySemantics
    AtomicMax_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicMax_Uniform_UInt32_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMax_Uniform_UInt32_ptr.type.strict = true;
    AtomicMax_Uniform_UInt32_ptr.type.mut = true;
    AtomicMax_Uniform_UInt32_ptr.type.modifiers = AtomicMax_Uniform_UInt32_ptr_modifiers;
    AtomicMax_Uniform_UInt32_ptr.type.modifierValues = AtomicMax_Uniform_UInt32_ptr_modifierValues;
    AtomicMax_Uniform_UInt32_compare.name = "compare"_c;
    AtomicMax_Uniform_UInt32_compare.type = Type::FullType{ Float16Type.name };
    AtomicMax_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicMax_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMax_Uniform_UInt32_semantics.type.literal = true;
    AtomicMax_Uniform_UInt32.documentation = "Compares the value at the pointer with the comparand, and stores the largest value in the pointer, returns old value"_c;
    AtomicMax_Uniform_UInt32.name = AtomicMax_Uniform_UInt32_name;
    AtomicMax_Uniform_UInt32.backendIndex = 2193;
    AtomicMax_Uniform_UInt32.returnType = Type::FullType { Float16Type.name };
    AtomicMax_Uniform_UInt32.parameters = AtomicMax_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicMax_Uniform_UInt32_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicMax_Uniform_UInt32_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMax_Uniform_UInt32)->signature = "atomicMax(uniform *mutable f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMax_Uniform_UInt32)->name = "atomicMax(uniform *mutable f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Uniform_UInt32)->nameWithVarNames = "atomicMax(ptr : uniform *mutable f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Uniform_UInt32)->returnTypeSymbol = &Float16Type;

    /// atomicMax with Float16, Float16, MemorySemantics
    AtomicMax_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicMax_Workgroup_UInt32_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMax_Workgroup_UInt32_ptr.type.strict = true;
    AtomicMax_Workgroup_UInt32_ptr.type.modifiers = AtomicMax_Workgroup_UInt32_ptr_modifiers;
    AtomicMax_Workgroup_UInt32_ptr.type.modifierValues = AtomicMax_Workgroup_UInt32_ptr_modifierValues;
    AtomicMax_Workgroup_UInt32_compare.name = "compare"_c;
    AtomicMax_Workgroup_UInt32_compare.type = Type::FullType{ Float16Type.name };
    AtomicMax_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicMax_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMax_Workgroup_UInt32_semantics.type.literal = true;
    AtomicMax_Workgroup_UInt32.documentation = "Compares the value at the pointer with the comparand, and stores the largest value in the pointer, returns old value"_c;
    AtomicMax_Workgroup_UInt32.name = AtomicMax_Workgroup_UInt32_name;
    AtomicMax_Workgroup_UInt32.backendIndex = 2194;
    AtomicMax_Workgroup_UInt32.returnType = Type::FullType { Float16Type.name };
    AtomicMax_Workgroup_UInt32.parameters = AtomicMax_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt32_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt32_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt32)->signature = "atomicMax(workgroup *f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt32)->name = "atomicMax(workgroup *f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt32)->nameWithVarNames = "atomicMax(ptr : workgroup *f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt32)->returnTypeSymbol = &Float16Type;

    /// atomicMin with Float16, Float16, MemorySemantics
    AtomicMin_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicMin_Uniform_Int32_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMin_Uniform_Int32_ptr.type.strict = true;
    AtomicMin_Uniform_Int32_ptr.type.mut = true;
    AtomicMin_Uniform_Int32_ptr.type.modifiers = AtomicMin_Uniform_Int32_ptr_modifiers;
    AtomicMin_Uniform_Int32_ptr.type.modifierValues = AtomicMin_Uniform_Int32_ptr_modifierValues;
    AtomicMin_Uniform_Int32_compare.name = "compare"_c;
    AtomicMin_Uniform_Int32_compare.type = Type::FullType{ Float16Type.name };
    AtomicMin_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicMin_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMin_Uniform_Int32_semantics.type.literal = true;
    AtomicMin_Uniform_Int32.documentation = "Compares the value at the pointer with the comparand, and stores the smallest value in the pointer, returns old value"_c;
    AtomicMin_Uniform_Int32.name = AtomicMin_Uniform_Int32_name;
    AtomicMin_Uniform_Int32.backendIndex = 2195;
    AtomicMin_Uniform_Int32.returnType = Type::FullType { Float16Type.name };
    AtomicMin_Uniform_Int32.parameters = AtomicMin_Uniform_Int32_args;
    Symbol::Resolved(&AtomicMin_Uniform_Int32_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicMin_Uniform_Int32_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMin_Uniform_Int32)->signature = "atomicMin(uniform *mutable f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMin_Uniform_Int32)->name = "atomicMin(uniform *mutable f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Uniform_Int32)->nameWithVarNames = "atomicMin(ptr : uniform *mutable f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Uniform_Int32)->returnTypeSymbol = &Float16Type;

    /// atomicMin with Float16, Float16, MemorySemantics
    AtomicMin_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicMin_Workgroup_Int32_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMin_Workgroup_Int32_ptr.type.strict = true;
    AtomicMin_Workgroup_Int32_ptr.type.modifiers = AtomicMin_Workgroup_Int32_ptr_modifiers;
    AtomicMin_Workgroup_Int32_ptr.type.modifierValues = AtomicMin_Workgroup_Int32_ptr_modifierValues;
    AtomicMin_Workgroup_Int32_compare.name = "compare"_c;
    AtomicMin_Workgroup_Int32_compare.type = Type::FullType{ Float16Type.name };
    AtomicMin_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicMin_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMin_Workgroup_Int32_semantics.type.literal = true;
    AtomicMin_Workgroup_Int32.documentation = "Compares the value at the pointer with the comparand, and stores the smallest value in the pointer, returns old value"_c;
    AtomicMin_Workgroup_Int32.name = AtomicMin_Workgroup_Int32_name;
    AtomicMin_Workgroup_Int32.backendIndex = 2196;
    AtomicMin_Workgroup_Int32.returnType = Type::FullType { Float16Type.name };
    AtomicMin_Workgroup_Int32.parameters = AtomicMin_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicMin_Workgroup_Int32_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicMin_Workgroup_Int32_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMin_Workgroup_Int32)->signature = "atomicMin(workgroup *f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMin_Workgroup_Int32)->name = "atomicMin(workgroup *f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Workgroup_Int32)->nameWithVarNames = "atomicMin(ptr : workgroup *f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Workgroup_Int32)->returnTypeSymbol = &Float16Type;

    /// atomicMax with Float16, Float16, MemorySemantics
    AtomicMax_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicMax_Uniform_Int32_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMax_Uniform_Int32_ptr.type.strict = true;
    AtomicMax_Uniform_Int32_ptr.type.mut = true;
    AtomicMax_Uniform_Int32_ptr.type.modifiers = AtomicMax_Uniform_Int32_ptr_modifiers;
    AtomicMax_Uniform_Int32_ptr.type.modifierValues = AtomicMax_Uniform_Int32_ptr_modifierValues;
    AtomicMax_Uniform_Int32_compare.name = "compare"_c;
    AtomicMax_Uniform_Int32_compare.type = Type::FullType{ Float16Type.name };
    AtomicMax_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicMax_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMax_Uniform_Int32_semantics.type.literal = true;
    AtomicMax_Uniform_Int32.documentation = "Compares the value at the pointer with the comparand, and stores the largest value in the pointer, returns old value"_c;
    AtomicMax_Uniform_Int32.name = AtomicMax_Uniform_Int32_name;
    AtomicMax_Uniform_Int32.backendIndex = 2197;
    AtomicMax_Uniform_Int32.returnType = Type::FullType { Float16Type.name };
    AtomicMax_Uniform_Int32.parameters = AtomicMax_Uniform_Int32_args;
    Symbol::Resolved(&AtomicMax_Uniform_Int32_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicMax_Uniform_Int32_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMax_Uniform_Int32)->signature = "atomicMax(uniform *mutable f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMax_Uniform_Int32)->name = "atomicMax(uniform *mutable f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Uniform_Int32)->nameWithVarNames = "atomicMax(ptr : uniform *mutable f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Uniform_Int32)->returnTypeSymbol = &Float16Type;

    /// atomicMax with Float16, Float16, MemorySemantics
    AtomicMax_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicMax_Workgroup_Int32_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMax_Workgroup_Int32_ptr.type.strict = true;
    AtomicMax_Workgroup_Int32_ptr.type.modifiers = AtomicMax_Workgroup_Int32_ptr_modifiers;
    AtomicMax_Workgroup_Int32_ptr.type.modifierValues = AtomicMax_Workgroup_Int32_ptr_modifierValues;
    AtomicMax_Workgroup_Int32_compare.name = "compare"_c;
    AtomicMax_Workgroup_Int32_compare.type = Type::FullType{ Float16Type.name };
    AtomicMax_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicMax_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMax_Workgroup_Int32_semantics.type.literal = true;
    AtomicMax_Workgroup_Int32.documentation = "Compares the value at the pointer with the comparand, and stores the largest value in the pointer, returns old value"_c;
    AtomicMax_Workgroup_Int32.name = AtomicMax_Workgroup_Int32_name;
    AtomicMax_Workgroup_Int32.backendIndex = 2198;
    AtomicMax_Workgroup_Int32.returnType = Type::FullType { Float16Type.name };
    AtomicMax_Workgroup_Int32.parameters = AtomicMax_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicMax_Workgroup_Int32_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicMax_Workgroup_Int32_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMax_Workgroup_Int32)->signature = "atomicMax(workgroup *f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMax_Workgroup_Int32)->name = "atomicMax(workgroup *f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Workgroup_Int32)->nameWithVarNames = "atomicMax(ptr : workgroup *f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Workgroup_Int32)->returnTypeSymbol = &Float16Type;

    /// atomicMin with Float16, Float16, MemorySemantics
    AtomicMin_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicMin_Uniform_UInt16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMin_Uniform_UInt16_ptr.type.strict = true;
    AtomicMin_Uniform_UInt16_ptr.type.mut = true;
    AtomicMin_Uniform_UInt16_ptr.type.modifiers = AtomicMin_Uniform_UInt16_ptr_modifiers;
    AtomicMin_Uniform_UInt16_ptr.type.modifierValues = AtomicMin_Uniform_UInt16_ptr_modifierValues;
    AtomicMin_Uniform_UInt16_compare.name = "compare"_c;
    AtomicMin_Uniform_UInt16_compare.type = Type::FullType{ Float16Type.name };
    AtomicMin_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicMin_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMin_Uniform_UInt16_semantics.type.literal = true;
    AtomicMin_Uniform_UInt16.documentation = "Compares the value at the pointer with the comparand, and stores the smallest value in the pointer, returns old value"_c;
    AtomicMin_Uniform_UInt16.name = AtomicMin_Uniform_UInt16_name;
    AtomicMin_Uniform_UInt16.backendIndex = 2199;
    AtomicMin_Uniform_UInt16.returnType = Type::FullType { Float16Type.name };
    AtomicMin_Uniform_UInt16.parameters = AtomicMin_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicMin_Uniform_UInt16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicMin_Uniform_UInt16_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMin_Uniform_UInt16)->signature = "atomicMin(uniform *mutable f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMin_Uniform_UInt16)->name = "atomicMin(uniform *mutable f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Uniform_UInt16)->nameWithVarNames = "atomicMin(ptr : uniform *mutable f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Uniform_UInt16)->returnTypeSymbol = &Float16Type;

    /// atomicMin with Float16, Float16, MemorySemantics
    AtomicMin_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicMin_Workgroup_UInt16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMin_Workgroup_UInt16_ptr.type.strict = true;
    AtomicMin_Workgroup_UInt16_ptr.type.modifiers = AtomicMin_Workgroup_UInt16_ptr_modifiers;
    AtomicMin_Workgroup_UInt16_ptr.type.modifierValues = AtomicMin_Workgroup_UInt16_ptr_modifierValues;
    AtomicMin_Workgroup_UInt16_compare.name = "compare"_c;
    AtomicMin_Workgroup_UInt16_compare.type = Type::FullType{ Float16Type.name };
    AtomicMin_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicMin_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMin_Workgroup_UInt16_semantics.type.literal = true;
    AtomicMin_Workgroup_UInt16.documentation = "Compares the value at the pointer with the comparand, and stores the smallest value in the pointer, returns old value"_c;
    AtomicMin_Workgroup_UInt16.name = AtomicMin_Workgroup_UInt16_name;
    AtomicMin_Workgroup_UInt16.backendIndex = 2200;
    AtomicMin_Workgroup_UInt16.returnType = Type::FullType { Float16Type.name };
    AtomicMin_Workgroup_UInt16.parameters = AtomicMin_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt16_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt16)->signature = "atomicMin(workgroup *f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt16)->name = "atomicMin(workgroup *f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt16)->nameWithVarNames = "atomicMin(ptr : workgroup *f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Workgroup_UInt16)->returnTypeSymbol = &Float16Type;

    /// atomicMax with Float16, Float16, MemorySemantics
    AtomicMax_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicMax_Uniform_UInt16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMax_Uniform_UInt16_ptr.type.strict = true;
    AtomicMax_Uniform_UInt16_ptr.type.mut = true;
    AtomicMax_Uniform_UInt16_ptr.type.modifiers = AtomicMax_Uniform_UInt16_ptr_modifiers;
    AtomicMax_Uniform_UInt16_ptr.type.modifierValues = AtomicMax_Uniform_UInt16_ptr_modifierValues;
    AtomicMax_Uniform_UInt16_compare.name = "compare"_c;
    AtomicMax_Uniform_UInt16_compare.type = Type::FullType{ Float16Type.name };
    AtomicMax_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicMax_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMax_Uniform_UInt16_semantics.type.literal = true;
    AtomicMax_Uniform_UInt16.documentation = "Compares the value at the pointer with the comparand, and stores the largest value in the pointer, returns old value"_c;
    AtomicMax_Uniform_UInt16.name = AtomicMax_Uniform_UInt16_name;
    AtomicMax_Uniform_UInt16.backendIndex = 2201;
    AtomicMax_Uniform_UInt16.returnType = Type::FullType { Float16Type.name };
    AtomicMax_Uniform_UInt16.parameters = AtomicMax_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicMax_Uniform_UInt16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicMax_Uniform_UInt16_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMax_Uniform_UInt16)->signature = "atomicMax(uniform *mutable f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMax_Uniform_UInt16)->name = "atomicMax(uniform *mutable f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Uniform_UInt16)->nameWithVarNames = "atomicMax(ptr : uniform *mutable f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Uniform_UInt16)->returnTypeSymbol = &Float16Type;

    /// atomicMax with Float16, Float16, MemorySemantics
    AtomicMax_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicMax_Workgroup_UInt16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMax_Workgroup_UInt16_ptr.type.strict = true;
    AtomicMax_Workgroup_UInt16_ptr.type.modifiers = AtomicMax_Workgroup_UInt16_ptr_modifiers;
    AtomicMax_Workgroup_UInt16_ptr.type.modifierValues = AtomicMax_Workgroup_UInt16_ptr_modifierValues;
    AtomicMax_Workgroup_UInt16_compare.name = "compare"_c;
    AtomicMax_Workgroup_UInt16_compare.type = Type::FullType{ Float16Type.name };
    AtomicMax_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicMax_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMax_Workgroup_UInt16_semantics.type.literal = true;
    AtomicMax_Workgroup_UInt16.documentation = "Compares the value at the pointer with the comparand, and stores the largest value in the pointer, returns old value"_c;
    AtomicMax_Workgroup_UInt16.name = AtomicMax_Workgroup_UInt16_name;
    AtomicMax_Workgroup_UInt16.backendIndex = 2202;
    AtomicMax_Workgroup_UInt16.returnType = Type::FullType { Float16Type.name };
    AtomicMax_Workgroup_UInt16.parameters = AtomicMax_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt16_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt16)->signature = "atomicMax(workgroup *f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt16)->name = "atomicMax(workgroup *f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt16)->nameWithVarNames = "atomicMax(ptr : workgroup *f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Workgroup_UInt16)->returnTypeSymbol = &Float16Type;

    /// atomicMin with Float16, Float16, MemorySemantics
    AtomicMin_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicMin_Uniform_Int16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMin_Uniform_Int16_ptr.type.strict = true;
    AtomicMin_Uniform_Int16_ptr.type.mut = true;
    AtomicMin_Uniform_Int16_ptr.type.modifiers = AtomicMin_Uniform_Int16_ptr_modifiers;
    AtomicMin_Uniform_Int16_ptr.type.modifierValues = AtomicMin_Uniform_Int16_ptr_modifierValues;
    AtomicMin_Uniform_Int16_compare.name = "compare"_c;
    AtomicMin_Uniform_Int16_compare.type = Type::FullType{ Float16Type.name };
    AtomicMin_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicMin_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMin_Uniform_Int16_semantics.type.literal = true;
    AtomicMin_Uniform_Int16.documentation = "Compares the value at the pointer with the comparand, and stores the smallest value in the pointer, returns old value"_c;
    AtomicMin_Uniform_Int16.name = AtomicMin_Uniform_Int16_name;
    AtomicMin_Uniform_Int16.backendIndex = 2203;
    AtomicMin_Uniform_Int16.returnType = Type::FullType { Float16Type.name };
    AtomicMin_Uniform_Int16.parameters = AtomicMin_Uniform_Int16_args;
    Symbol::Resolved(&AtomicMin_Uniform_Int16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicMin_Uniform_Int16_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMin_Uniform_Int16)->signature = "atomicMin(uniform *mutable f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMin_Uniform_Int16)->name = "atomicMin(uniform *mutable f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Uniform_Int16)->nameWithVarNames = "atomicMin(ptr : uniform *mutable f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Uniform_Int16)->returnTypeSymbol = &Float16Type;

    /// atomicMin with Float16, Float16, MemorySemantics
    AtomicMin_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicMin_Workgroup_Int16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMin_Workgroup_Int16_ptr.type.strict = true;
    AtomicMin_Workgroup_Int16_ptr.type.modifiers = AtomicMin_Workgroup_Int16_ptr_modifiers;
    AtomicMin_Workgroup_Int16_ptr.type.modifierValues = AtomicMin_Workgroup_Int16_ptr_modifierValues;
    AtomicMin_Workgroup_Int16_compare.name = "compare"_c;
    AtomicMin_Workgroup_Int16_compare.type = Type::FullType{ Float16Type.name };
    AtomicMin_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicMin_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMin_Workgroup_Int16_semantics.type.literal = true;
    AtomicMin_Workgroup_Int16.documentation = "Compares the value at the pointer with the comparand, and stores the smallest value in the pointer, returns old value"_c;
    AtomicMin_Workgroup_Int16.name = AtomicMin_Workgroup_Int16_name;
    AtomicMin_Workgroup_Int16.backendIndex = 2204;
    AtomicMin_Workgroup_Int16.returnType = Type::FullType { Float16Type.name };
    AtomicMin_Workgroup_Int16.parameters = AtomicMin_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicMin_Workgroup_Int16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicMin_Workgroup_Int16_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMin_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMin_Workgroup_Int16)->signature = "atomicMin(workgroup *f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMin_Workgroup_Int16)->name = "atomicMin(workgroup *f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Workgroup_Int16)->nameWithVarNames = "atomicMin(ptr : workgroup *f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMin_Workgroup_Int16)->returnTypeSymbol = &Float16Type;

    /// atomicMax with Float16, Float16, MemorySemantics
    AtomicMax_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicMax_Uniform_Int16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMax_Uniform_Int16_ptr.type.strict = true;
    AtomicMax_Uniform_Int16_ptr.type.mut = true;
    AtomicMax_Uniform_Int16_ptr.type.modifiers = AtomicMax_Uniform_Int16_ptr_modifiers;
    AtomicMax_Uniform_Int16_ptr.type.modifierValues = AtomicMax_Uniform_Int16_ptr_modifierValues;
    AtomicMax_Uniform_Int16_compare.name = "compare"_c;
    AtomicMax_Uniform_Int16_compare.type = Type::FullType{ Float16Type.name };
    AtomicMax_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicMax_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMax_Uniform_Int16_semantics.type.literal = true;
    AtomicMax_Uniform_Int16.documentation = "Compares the value at the pointer with the comparand, and stores the largest value in the pointer, returns old value"_c;
    AtomicMax_Uniform_Int16.name = AtomicMax_Uniform_Int16_name;
    AtomicMax_Uniform_Int16.backendIndex = 2205;
    AtomicMax_Uniform_Int16.returnType = Type::FullType { Float16Type.name };
    AtomicMax_Uniform_Int16.parameters = AtomicMax_Uniform_Int16_args;
    Symbol::Resolved(&AtomicMax_Uniform_Int16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicMax_Uniform_Int16_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMax_Uniform_Int16)->signature = "atomicMax(uniform *mutable f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMax_Uniform_Int16)->name = "atomicMax(uniform *mutable f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Uniform_Int16)->nameWithVarNames = "atomicMax(ptr : uniform *mutable f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Uniform_Int16)->returnTypeSymbol = &Float16Type;

    /// atomicMax with Float16, Float16, MemorySemantics
    AtomicMax_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicMax_Workgroup_Int16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicMax_Workgroup_Int16_ptr.type.strict = true;
    AtomicMax_Workgroup_Int16_ptr.type.modifiers = AtomicMax_Workgroup_Int16_ptr_modifiers;
    AtomicMax_Workgroup_Int16_ptr.type.modifierValues = AtomicMax_Workgroup_Int16_ptr_modifierValues;
    AtomicMax_Workgroup_Int16_compare.name = "compare"_c;
    AtomicMax_Workgroup_Int16_compare.type = Type::FullType{ Float16Type.name };
    AtomicMax_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicMax_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicMax_Workgroup_Int16_semantics.type.literal = true;
    AtomicMax_Workgroup_Int16.documentation = "Compares the value at the pointer with the comparand, and stores the largest value in the pointer, returns old value"_c;
    AtomicMax_Workgroup_Int16.name = AtomicMax_Workgroup_Int16_name;
    AtomicMax_Workgroup_Int16.backendIndex = 2206;
    AtomicMax_Workgroup_Int16.returnType = Type::FullType { Float16Type.name };
    AtomicMax_Workgroup_Int16.parameters = AtomicMax_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicMax_Workgroup_Int16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicMax_Workgroup_Int16_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicMax_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicMax_Workgroup_Int16)->signature = "atomicMax(workgroup *f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicMax_Workgroup_Int16)->name = "atomicMax(workgroup *f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Workgroup_Int16)->nameWithVarNames = "atomicMax(ptr : workgroup *f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicMax_Workgroup_Int16)->returnTypeSymbol = &Float16Type;

    /// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
    AtomicCompareExchange_Uniform_UInt32_ptr.name = "ptr"_c;
    AtomicCompareExchange_Uniform_UInt32_ptr.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Uniform_UInt32_ptr.type.strict = true;
    AtomicCompareExchange_Uniform_UInt32_ptr.type.mut = true;
    AtomicCompareExchange_Uniform_UInt32_ptr.type.modifiers = AtomicCompareExchange_Uniform_UInt32_ptr_modifiers;
    AtomicCompareExchange_Uniform_UInt32_ptr.type.modifierValues = AtomicCompareExchange_Uniform_UInt32_ptr_modifierValues;
    AtomicCompareExchange_Uniform_UInt32_value.name = "value"_c;
    AtomicCompareExchange_Uniform_UInt32_value.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Uniform_UInt32_compare.name = "compare"_c;
    AtomicCompareExchange_Uniform_UInt32_compare.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Uniform_UInt32_semantics.name = "semantics"_c;
    AtomicCompareExchange_Uniform_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Uniform_UInt32_semantics.type.literal = true;
    AtomicCompareExchange_Uniform_UInt32.documentation = "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value"_c;
    AtomicCompareExchange_Uniform_UInt32.name = AtomicCompareExchange_Uniform_UInt32_name;
    AtomicCompareExchange_Uniform_UInt32.backendIndex = 2207;
    AtomicCompareExchange_Uniform_UInt32.returnType = Type::FullType { Float16Type.name };
    AtomicCompareExchange_Uniform_UInt32.parameters = AtomicCompareExchange_Uniform_UInt32_args;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt32_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt32_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt32_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt32)->signature = "atomicCompareExchange(uniform *mutable f16,f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt32)->name = "atomicCompareExchange(uniform *mutable f16,f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt32)->nameWithVarNames = "atomicCompareExchange(ptr : uniform *mutable f16, value : f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt32)->returnTypeSymbol = &Float16Type;

    /// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
    AtomicCompareExchange_Workgroup_UInt32_ptr.name = "ptr"_c;
    AtomicCompareExchange_Workgroup_UInt32_ptr.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Workgroup_UInt32_ptr.type.strict = true;
    AtomicCompareExchange_Workgroup_UInt32_ptr.type.modifiers = AtomicCompareExchange_Workgroup_UInt32_ptr_modifiers;
    AtomicCompareExchange_Workgroup_UInt32_ptr.type.modifierValues = AtomicCompareExchange_Workgroup_UInt32_ptr_modifierValues;
    AtomicCompareExchange_Workgroup_UInt32_value.name = "value"_c;
    AtomicCompareExchange_Workgroup_UInt32_value.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Workgroup_UInt32_compare.name = "compare"_c;
    AtomicCompareExchange_Workgroup_UInt32_compare.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Workgroup_UInt32_semantics.name = "semantics"_c;
    AtomicCompareExchange_Workgroup_UInt32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Workgroup_UInt32_semantics.type.literal = true;
    AtomicCompareExchange_Workgroup_UInt32.documentation = "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value"_c;
    AtomicCompareExchange_Workgroup_UInt32.name = AtomicCompareExchange_Workgroup_UInt32_name;
    AtomicCompareExchange_Workgroup_UInt32.backendIndex = 2208;
    AtomicCompareExchange_Workgroup_UInt32.returnType = Type::FullType { Float16Type.name };
    AtomicCompareExchange_Workgroup_UInt32.parameters = AtomicCompareExchange_Workgroup_UInt32_args;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt32_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt32_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt32_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt32)->signature = "atomicCompareExchange(workgroup *f16,f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt32)->name = "atomicCompareExchange(workgroup *f16,f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt32)->nameWithVarNames = "atomicCompareExchange(ptr : workgroup *f16, value : f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt32)->returnTypeSymbol = &Float16Type;

    /// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
    AtomicCompareExchange_Uniform_Int32_ptr.name = "ptr"_c;
    AtomicCompareExchange_Uniform_Int32_ptr.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Uniform_Int32_ptr.type.strict = true;
    AtomicCompareExchange_Uniform_Int32_ptr.type.mut = true;
    AtomicCompareExchange_Uniform_Int32_ptr.type.modifiers = AtomicCompareExchange_Uniform_Int32_ptr_modifiers;
    AtomicCompareExchange_Uniform_Int32_ptr.type.modifierValues = AtomicCompareExchange_Uniform_Int32_ptr_modifierValues;
    AtomicCompareExchange_Uniform_Int32_value.name = "value"_c;
    AtomicCompareExchange_Uniform_Int32_value.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Uniform_Int32_compare.name = "compare"_c;
    AtomicCompareExchange_Uniform_Int32_compare.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Uniform_Int32_semantics.name = "semantics"_c;
    AtomicCompareExchange_Uniform_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Uniform_Int32_semantics.type.literal = true;
    AtomicCompareExchange_Uniform_Int32.documentation = "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value"_c;
    AtomicCompareExchange_Uniform_Int32.name = AtomicCompareExchange_Uniform_Int32_name;
    AtomicCompareExchange_Uniform_Int32.backendIndex = 2209;
    AtomicCompareExchange_Uniform_Int32.returnType = Type::FullType { Float16Type.name };
    AtomicCompareExchange_Uniform_Int32.parameters = AtomicCompareExchange_Uniform_Int32_args;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int32_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int32_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int32_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int32_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int32)->signature = "atomicCompareExchange(uniform *mutable f16,f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int32)->name = "atomicCompareExchange(uniform *mutable f16,f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int32)->nameWithVarNames = "atomicCompareExchange(ptr : uniform *mutable f16, value : f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int32)->returnTypeSymbol = &Float16Type;

    /// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
    AtomicCompareExchange_Workgroup_Int32_ptr.name = "ptr"_c;
    AtomicCompareExchange_Workgroup_Int32_ptr.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Workgroup_Int32_ptr.type.strict = true;
    AtomicCompareExchange_Workgroup_Int32_ptr.type.modifiers = AtomicCompareExchange_Workgroup_Int32_ptr_modifiers;
    AtomicCompareExchange_Workgroup_Int32_ptr.type.modifierValues = AtomicCompareExchange_Workgroup_Int32_ptr_modifierValues;
    AtomicCompareExchange_Workgroup_Int32_value.name = "value"_c;
    AtomicCompareExchange_Workgroup_Int32_value.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Workgroup_Int32_compare.name = "compare"_c;
    AtomicCompareExchange_Workgroup_Int32_compare.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Workgroup_Int32_semantics.name = "semantics"_c;
    AtomicCompareExchange_Workgroup_Int32_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Workgroup_Int32_semantics.type.literal = true;
    AtomicCompareExchange_Workgroup_Int32.documentation = "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value"_c;
    AtomicCompareExchange_Workgroup_Int32.name = AtomicCompareExchange_Workgroup_Int32_name;
    AtomicCompareExchange_Workgroup_Int32.backendIndex = 2210;
    AtomicCompareExchange_Workgroup_Int32.returnType = Type::FullType { Float16Type.name };
    AtomicCompareExchange_Workgroup_Int32.parameters = AtomicCompareExchange_Workgroup_Int32_args;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int32_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int32_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int32_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int32_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int32_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int32)->signature = "atomicCompareExchange(workgroup *f16,f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int32)->name = "atomicCompareExchange(workgroup *f16,f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int32)->nameWithVarNames = "atomicCompareExchange(ptr : workgroup *f16, value : f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int32)->returnTypeSymbol = &Float16Type;

    /// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
    AtomicCompareExchange_Uniform_UInt16_ptr.name = "ptr"_c;
    AtomicCompareExchange_Uniform_UInt16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Uniform_UInt16_ptr.type.strict = true;
    AtomicCompareExchange_Uniform_UInt16_ptr.type.mut = true;
    AtomicCompareExchange_Uniform_UInt16_ptr.type.modifiers = AtomicCompareExchange_Uniform_UInt16_ptr_modifiers;
    AtomicCompareExchange_Uniform_UInt16_ptr.type.modifierValues = AtomicCompareExchange_Uniform_UInt16_ptr_modifierValues;
    AtomicCompareExchange_Uniform_UInt16_value.name = "value"_c;
    AtomicCompareExchange_Uniform_UInt16_value.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Uniform_UInt16_compare.name = "compare"_c;
    AtomicCompareExchange_Uniform_UInt16_compare.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Uniform_UInt16_semantics.name = "semantics"_c;
    AtomicCompareExchange_Uniform_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Uniform_UInt16_semantics.type.literal = true;
    AtomicCompareExchange_Uniform_UInt16.documentation = "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value"_c;
    AtomicCompareExchange_Uniform_UInt16.name = AtomicCompareExchange_Uniform_UInt16_name;
    AtomicCompareExchange_Uniform_UInt16.backendIndex = 2211;
    AtomicCompareExchange_Uniform_UInt16.returnType = Type::FullType { Float16Type.name };
    AtomicCompareExchange_Uniform_UInt16.parameters = AtomicCompareExchange_Uniform_UInt16_args;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt16_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt16)->signature = "atomicCompareExchange(uniform *mutable f16,f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt16)->name = "atomicCompareExchange(uniform *mutable f16,f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt16)->nameWithVarNames = "atomicCompareExchange(ptr : uniform *mutable f16, value : f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_UInt16)->returnTypeSymbol = &Float16Type;

    /// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
    AtomicCompareExchange_Workgroup_UInt16_ptr.name = "ptr"_c;
    AtomicCompareExchange_Workgroup_UInt16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Workgroup_UInt16_ptr.type.strict = true;
    AtomicCompareExchange_Workgroup_UInt16_ptr.type.modifiers = AtomicCompareExchange_Workgroup_UInt16_ptr_modifiers;
    AtomicCompareExchange_Workgroup_UInt16_ptr.type.modifierValues = AtomicCompareExchange_Workgroup_UInt16_ptr_modifierValues;
    AtomicCompareExchange_Workgroup_UInt16_value.name = "value"_c;
    AtomicCompareExchange_Workgroup_UInt16_value.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Workgroup_UInt16_compare.name = "compare"_c;
    AtomicCompareExchange_Workgroup_UInt16_compare.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Workgroup_UInt16_semantics.name = "semantics"_c;
    AtomicCompareExchange_Workgroup_UInt16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Workgroup_UInt16_semantics.type.literal = true;
    AtomicCompareExchange_Workgroup_UInt16.documentation = "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value"_c;
    AtomicCompareExchange_Workgroup_UInt16.name = AtomicCompareExchange_Workgroup_UInt16_name;
    AtomicCompareExchange_Workgroup_UInt16.backendIndex = 2212;
    AtomicCompareExchange_Workgroup_UInt16.returnType = Type::FullType { Float16Type.name };
    AtomicCompareExchange_Workgroup_UInt16.parameters = AtomicCompareExchange_Workgroup_UInt16_args;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt16_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt16)->signature = "atomicCompareExchange(workgroup *f16,f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt16)->name = "atomicCompareExchange(workgroup *f16,f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt16)->nameWithVarNames = "atomicCompareExchange(ptr : workgroup *f16, value : f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_UInt16)->returnTypeSymbol = &Float16Type;

    /// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
    AtomicCompareExchange_Uniform_Int16_ptr.name = "ptr"_c;
    AtomicCompareExchange_Uniform_Int16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Uniform_Int16_ptr.type.strict = true;
    AtomicCompareExchange_Uniform_Int16_ptr.type.mut = true;
    AtomicCompareExchange_Uniform_Int16_ptr.type.modifiers = AtomicCompareExchange_Uniform_Int16_ptr_modifiers;
    AtomicCompareExchange_Uniform_Int16_ptr.type.modifierValues = AtomicCompareExchange_Uniform_Int16_ptr_modifierValues;
    AtomicCompareExchange_Uniform_Int16_value.name = "value"_c;
    AtomicCompareExchange_Uniform_Int16_value.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Uniform_Int16_compare.name = "compare"_c;
    AtomicCompareExchange_Uniform_Int16_compare.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Uniform_Int16_semantics.name = "semantics"_c;
    AtomicCompareExchange_Uniform_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Uniform_Int16_semantics.type.literal = true;
    AtomicCompareExchange_Uniform_Int16.documentation = "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value"_c;
    AtomicCompareExchange_Uniform_Int16.name = AtomicCompareExchange_Uniform_Int16_name;
    AtomicCompareExchange_Uniform_Int16.backendIndex = 2213;
    AtomicCompareExchange_Uniform_Int16.returnType = Type::FullType { Float16Type.name };
    AtomicCompareExchange_Uniform_Int16.parameters = AtomicCompareExchange_Uniform_Int16_args;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int16_ptr)->storage = Storage::Uniform;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int16_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int16)->signature = "atomicCompareExchange(uniform *mutable f16,f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int16)->name = "atomicCompareExchange(uniform *mutable f16,f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int16)->nameWithVarNames = "atomicCompareExchange(ptr : uniform *mutable f16, value : f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Uniform_Int16)->returnTypeSymbol = &Float16Type;

    /// atomicCompareExchange with Float16, Float16, Float16, MemorySemantics
    AtomicCompareExchange_Workgroup_Int16_ptr.name = "ptr"_c;
    AtomicCompareExchange_Workgroup_Int16_ptr.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Workgroup_Int16_ptr.type.strict = true;
    AtomicCompareExchange_Workgroup_Int16_ptr.type.modifiers = AtomicCompareExchange_Workgroup_Int16_ptr_modifiers;
    AtomicCompareExchange_Workgroup_Int16_ptr.type.modifierValues = AtomicCompareExchange_Workgroup_Int16_ptr_modifierValues;
    AtomicCompareExchange_Workgroup_Int16_value.name = "value"_c;
    AtomicCompareExchange_Workgroup_Int16_value.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Workgroup_Int16_compare.name = "compare"_c;
    AtomicCompareExchange_Workgroup_Int16_compare.type = Type::FullType{ Float16Type.name };
    AtomicCompareExchange_Workgroup_Int16_semantics.name = "semantics"_c;
    AtomicCompareExchange_Workgroup_Int16_semantics.type = Type::FullType{ MemorySemanticsType.name };
    AtomicCompareExchange_Workgroup_Int16_semantics.type.literal = true;
    AtomicCompareExchange_Workgroup_Int16.documentation = "Compares the value at the pointer location with the comparison, and exchanges it with value if they are identical using the specified memory semantics, always returns the old value"_c;
    AtomicCompareExchange_Workgroup_Int16.name = AtomicCompareExchange_Workgroup_Int16_name;
    AtomicCompareExchange_Workgroup_Int16.backendIndex = 2214;
    AtomicCompareExchange_Workgroup_Int16.returnType = Type::FullType { Float16Type.name };
    AtomicCompareExchange_Workgroup_Int16.parameters = AtomicCompareExchange_Workgroup_Int16_args;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int16_ptr)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int16_ptr)->storage = Storage::Workgroup;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int16_value)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int16_compare)->typeSymbol = &Float16Type;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int16_semantics)->typeSymbol = &MemorySemanticsType;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int16)->signature = "atomicCompareExchange(workgroup *f16,f16,f16,literal MemorySemantics) f16"_c;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int16)->name = "atomicCompareExchange(workgroup *f16,f16,f16,literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int16)->nameWithVarNames = "atomicCompareExchange(ptr : workgroup *f16, value : f16, compare : f16, semantics : literal MemorySemantics)"_c;
    Symbol::Resolved(&AtomicCompareExchange_Workgroup_Int16)->returnTypeSymbol = &Float16Type;

    /// bitInsert with UInt16, UInt16, UInt16, UInt16
    BitInsert_UInt16_base.name = "base"_c;
    BitInsert_UInt16_base.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16_value.name = "value"_c;
    BitInsert_UInt16_value.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16_offset.name = "offset"_c;
    BitInsert_UInt16_offset.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16_count.name = "count"_c;
    BitInsert_UInt16_count.type = Type::FullType{ UInt16Type.name };
    BitInsert_UInt16.documentation = "Insert bit into bitmask"_c;
    BitInsert_UInt16.name = BitInsert_UInt16_name;
    BitInsert_UInt16.backendIndex = 2215;
    BitInsert_UInt16.returnType = Type::FullType { UInt16Type.name };
    BitInsert_UInt16.parameters = BitInsert_UInt16_args;
    Symbol::Resolved(&BitInsert_UInt16_base)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16_offset)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16_count)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&BitInsert_UInt16)->signature = "bitInsert(u16,u16,u16,u16) u16"_c;
    Symbol::Resolved(&BitInsert_UInt16)->name = "bitInsert(u16,u16,u16,u16)"_c;
    Symbol::Resolved(&BitInsert_UInt16)->nameWithVarNames = "bitInsert(base : u16, value : u16, offset : u16, count : u16)"_c;
    Symbol::Resolved(&BitInsert_UInt16)->returnTypeSymbol = &UInt16Type;

    /// bitInsert with UInt32, UInt32, UInt32, UInt32
    BitInsert_UInt32_base.name = "base"_c;
    BitInsert_UInt32_base.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32_value.name = "value"_c;
    BitInsert_UInt32_value.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32_offset.name = "offset"_c;
    BitInsert_UInt32_offset.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32_count.name = "count"_c;
    BitInsert_UInt32_count.type = Type::FullType{ UInt32Type.name };
    BitInsert_UInt32.documentation = "Insert bit into bitmask"_c;
    BitInsert_UInt32.name = BitInsert_UInt32_name;
    BitInsert_UInt32.backendIndex = 2216;
    BitInsert_UInt32.returnType = Type::FullType { UInt32Type.name };
    BitInsert_UInt32.parameters = BitInsert_UInt32_args;
    Symbol::Resolved(&BitInsert_UInt32_base)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32_offset)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32_count)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&BitInsert_UInt32)->signature = "bitInsert(u32,u32,u32,u32) u32"_c;
    Symbol::Resolved(&BitInsert_UInt32)->name = "bitInsert(u32,u32,u32,u32)"_c;
    Symbol::Resolved(&BitInsert_UInt32)->nameWithVarNames = "bitInsert(base : u32, value : u32, offset : u32, count : u32)"_c;
    Symbol::Resolved(&BitInsert_UInt32)->returnTypeSymbol = &UInt32Type;

}
} // namespace GPULang
