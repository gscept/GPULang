//-------------------------------------------------
// *** Generated by type_gen.py. ***
//       DO NOT MODIFY!!!
//-------------------------------------------------
#include "ast/function.h"
#include "ast/variable.h"
#include "types.h"
#include "intrinsics.h"
#include "compiler.h"
namespace GPULang
{
/// textureAtomicSubtract with Texture1D, Int32, UInt16
Variable TextureAtomicSubtract_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1D_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture1D_UInt16_value;
Function TextureAtomicSubtract_Texture1D_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture1D_UInt16_args = { &TextureAtomicSubtract_Texture1D_UInt16_texture, &TextureAtomicSubtract_Texture1D_UInt16_coordinate, &TextureAtomicSubtract_Texture1D_UInt16_value };

/// textureAtomicSubtract with Texture1D, Int32, Int16
Variable TextureAtomicSubtract_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1D_Int16_coordinate;
Variable TextureAtomicSubtract_Texture1D_Int16_value;
Function TextureAtomicSubtract_Texture1D_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture1D_Int16_args = { &TextureAtomicSubtract_Texture1D_Int16_texture, &TextureAtomicSubtract_Texture1D_Int16_coordinate, &TextureAtomicSubtract_Texture1D_Int16_value };

/// textureAtomicSubtract with Texture2D, Int32x2, UInt32
Variable TextureAtomicSubtract_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2D_UInt32_coordinate;
Variable TextureAtomicSubtract_Texture2D_UInt32_value;
Function TextureAtomicSubtract_Texture2D_UInt32;
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt32_args = { &TextureAtomicSubtract_Texture2D_UInt32_texture, &TextureAtomicSubtract_Texture2D_UInt32_coordinate, &TextureAtomicSubtract_Texture2D_UInt32_value };

/// textureAtomicSubtract with Texture2D, Int32x2, Int32
Variable TextureAtomicSubtract_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2D_Int32_coordinate;
Variable TextureAtomicSubtract_Texture2D_Int32_value;
Function TextureAtomicSubtract_Texture2D_Int32;
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int32_args = { &TextureAtomicSubtract_Texture2D_Int32_texture, &TextureAtomicSubtract_Texture2D_Int32_coordinate, &TextureAtomicSubtract_Texture2D_Int32_value };

/// textureAtomicSubtract with Texture2D, Int32x2, UInt16
Variable TextureAtomicSubtract_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2D_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture2D_UInt16_value;
Function TextureAtomicSubtract_Texture2D_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture2D_UInt16_args = { &TextureAtomicSubtract_Texture2D_UInt16_texture, &TextureAtomicSubtract_Texture2D_UInt16_coordinate, &TextureAtomicSubtract_Texture2D_UInt16_value };

/// textureAtomicSubtract with Texture2D, Int32x2, Int16
Variable TextureAtomicSubtract_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2D_Int16_coordinate;
Variable TextureAtomicSubtract_Texture2D_Int16_value;
Function TextureAtomicSubtract_Texture2D_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture2D_Int16_args = { &TextureAtomicSubtract_Texture2D_Int16_texture, &TextureAtomicSubtract_Texture2D_Int16_coordinate, &TextureAtomicSubtract_Texture2D_Int16_value };

/// textureAtomicSubtract with Texture3D, Int32x3, UInt32
Variable TextureAtomicSubtract_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture3D_UInt32_coordinate;
Variable TextureAtomicSubtract_Texture3D_UInt32_value;
Function TextureAtomicSubtract_Texture3D_UInt32;
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt32_args = { &TextureAtomicSubtract_Texture3D_UInt32_texture, &TextureAtomicSubtract_Texture3D_UInt32_coordinate, &TextureAtomicSubtract_Texture3D_UInt32_value };

/// textureAtomicSubtract with Texture3D, Int32x3, Int32
Variable TextureAtomicSubtract_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture3D_Int32_coordinate;
Variable TextureAtomicSubtract_Texture3D_Int32_value;
Function TextureAtomicSubtract_Texture3D_Int32;
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int32_args = { &TextureAtomicSubtract_Texture3D_Int32_texture, &TextureAtomicSubtract_Texture3D_Int32_coordinate, &TextureAtomicSubtract_Texture3D_Int32_value };

/// textureAtomicSubtract with Texture3D, Int32x3, UInt16
Variable TextureAtomicSubtract_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture3D_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture3D_UInt16_value;
Function TextureAtomicSubtract_Texture3D_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture3D_UInt16_args = { &TextureAtomicSubtract_Texture3D_UInt16_texture, &TextureAtomicSubtract_Texture3D_UInt16_coordinate, &TextureAtomicSubtract_Texture3D_UInt16_value };

/// textureAtomicSubtract with Texture3D, Int32x3, Int16
Variable TextureAtomicSubtract_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture3D_Int16_coordinate;
Variable TextureAtomicSubtract_Texture3D_Int16_value;
Function TextureAtomicSubtract_Texture3D_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture3D_Int16_args = { &TextureAtomicSubtract_Texture3D_Int16_texture, &TextureAtomicSubtract_Texture3D_Int16_coordinate, &TextureAtomicSubtract_Texture3D_Int16_value };

/// textureAtomicSubtract with TextureCube, Int32x3, UInt32
Variable TextureAtomicSubtract_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCube_UInt32_coordinate;
Variable TextureAtomicSubtract_TextureCube_UInt32_value;
Function TextureAtomicSubtract_TextureCube_UInt32;
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt32_args = { &TextureAtomicSubtract_TextureCube_UInt32_texture, &TextureAtomicSubtract_TextureCube_UInt32_coordinate, &TextureAtomicSubtract_TextureCube_UInt32_value };

/// textureAtomicSubtract with TextureCube, Int32x3, Int32
Variable TextureAtomicSubtract_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCube_Int32_coordinate;
Variable TextureAtomicSubtract_TextureCube_Int32_value;
Function TextureAtomicSubtract_TextureCube_Int32;
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int32_args = { &TextureAtomicSubtract_TextureCube_Int32_texture, &TextureAtomicSubtract_TextureCube_Int32_coordinate, &TextureAtomicSubtract_TextureCube_Int32_value };

/// textureAtomicSubtract with TextureCube, Int32x3, UInt16
Variable TextureAtomicSubtract_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCube_UInt16_coordinate;
Variable TextureAtomicSubtract_TextureCube_UInt16_value;
Function TextureAtomicSubtract_TextureCube_UInt16;
inline constexpr std::array TextureAtomicSubtract_TextureCube_UInt16_args = { &TextureAtomicSubtract_TextureCube_UInt16_texture, &TextureAtomicSubtract_TextureCube_UInt16_coordinate, &TextureAtomicSubtract_TextureCube_UInt16_value };

/// textureAtomicSubtract with TextureCube, Int32x3, Int16
Variable TextureAtomicSubtract_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCube_Int16_coordinate;
Variable TextureAtomicSubtract_TextureCube_Int16_value;
Function TextureAtomicSubtract_TextureCube_Int16;
inline constexpr std::array TextureAtomicSubtract_TextureCube_Int16_args = { &TextureAtomicSubtract_TextureCube_Int16_texture, &TextureAtomicSubtract_TextureCube_Int16_coordinate, &TextureAtomicSubtract_TextureCube_Int16_value };

/// textureAtomicSubtract with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicSubtract_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicSubtract_Texture1DArray_UInt32_value;
Function TextureAtomicSubtract_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt32_args = { &TextureAtomicSubtract_Texture1DArray_UInt32_texture, &TextureAtomicSubtract_Texture1DArray_UInt32_coordinate, &TextureAtomicSubtract_Texture1DArray_UInt32_value };

/// textureAtomicSubtract with Texture1DArray, Int32x2, Int32
Variable TextureAtomicSubtract_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1DArray_Int32_coordinate;
Variable TextureAtomicSubtract_Texture1DArray_Int32_value;
Function TextureAtomicSubtract_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int32_args = { &TextureAtomicSubtract_Texture1DArray_Int32_texture, &TextureAtomicSubtract_Texture1DArray_Int32_coordinate, &TextureAtomicSubtract_Texture1DArray_Int32_value };

/// textureAtomicSubtract with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicSubtract_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture1DArray_UInt16_value;
Function TextureAtomicSubtract_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_UInt16_args = { &TextureAtomicSubtract_Texture1DArray_UInt16_texture, &TextureAtomicSubtract_Texture1DArray_UInt16_coordinate, &TextureAtomicSubtract_Texture1DArray_UInt16_value };

/// textureAtomicSubtract with Texture1DArray, Int32x2, Int16
Variable TextureAtomicSubtract_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture1DArray_Int16_coordinate;
Variable TextureAtomicSubtract_Texture1DArray_Int16_value;
Function TextureAtomicSubtract_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture1DArray_Int16_args = { &TextureAtomicSubtract_Texture1DArray_Int16_texture, &TextureAtomicSubtract_Texture1DArray_Int16_coordinate, &TextureAtomicSubtract_Texture1DArray_Int16_value };

/// textureAtomicSubtract with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicSubtract_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicSubtract_Texture2DArray_UInt32_value;
Function TextureAtomicSubtract_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt32_args = { &TextureAtomicSubtract_Texture2DArray_UInt32_texture, &TextureAtomicSubtract_Texture2DArray_UInt32_coordinate, &TextureAtomicSubtract_Texture2DArray_UInt32_value };

/// textureAtomicSubtract with Texture2DArray, Int32x3, Int32
Variable TextureAtomicSubtract_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2DArray_Int32_coordinate;
Variable TextureAtomicSubtract_Texture2DArray_Int32_value;
Function TextureAtomicSubtract_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int32_args = { &TextureAtomicSubtract_Texture2DArray_Int32_texture, &TextureAtomicSubtract_Texture2DArray_Int32_coordinate, &TextureAtomicSubtract_Texture2DArray_Int32_value };

/// textureAtomicSubtract with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicSubtract_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicSubtract_Texture2DArray_UInt16_value;
Function TextureAtomicSubtract_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_UInt16_args = { &TextureAtomicSubtract_Texture2DArray_UInt16_texture, &TextureAtomicSubtract_Texture2DArray_UInt16_coordinate, &TextureAtomicSubtract_Texture2DArray_UInt16_value };

/// textureAtomicSubtract with Texture2DArray, Int32x3, Int16
Variable TextureAtomicSubtract_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_Texture2DArray_Int16_coordinate;
Variable TextureAtomicSubtract_Texture2DArray_Int16_value;
Function TextureAtomicSubtract_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicSubtract_Texture2DArray_Int16_args = { &TextureAtomicSubtract_Texture2DArray_Int16_texture, &TextureAtomicSubtract_Texture2DArray_Int16_coordinate, &TextureAtomicSubtract_Texture2DArray_Int16_value };

/// textureAtomicSubtract with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicSubtract_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicSubtract_TextureCubeArray_UInt32_value;
Function TextureAtomicSubtract_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt32_args = { &TextureAtomicSubtract_TextureCubeArray_UInt32_texture, &TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate, &TextureAtomicSubtract_TextureCubeArray_UInt32_value };

/// textureAtomicSubtract with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicSubtract_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicSubtract_TextureCubeArray_Int32_value;
Function TextureAtomicSubtract_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int32_args = { &TextureAtomicSubtract_TextureCubeArray_Int32_texture, &TextureAtomicSubtract_TextureCubeArray_Int32_coordinate, &TextureAtomicSubtract_TextureCubeArray_Int32_value };

/// textureAtomicSubtract with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicSubtract_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicSubtract_TextureCubeArray_UInt16_value;
Function TextureAtomicSubtract_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_UInt16_args = { &TextureAtomicSubtract_TextureCubeArray_UInt16_texture, &TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate, &TextureAtomicSubtract_TextureCubeArray_UInt16_value };

/// textureAtomicSubtract with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicSubtract_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicSubtract_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicSubtract_TextureCubeArray_Int16_value;
Function TextureAtomicSubtract_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicSubtract_TextureCubeArray_Int16_args = { &TextureAtomicSubtract_TextureCubeArray_Int16_texture, &TextureAtomicSubtract_TextureCubeArray_Int16_coordinate, &TextureAtomicSubtract_TextureCubeArray_Int16_value };

/// textureAtomicMin with Texture1D, Int32, UInt32
Variable TextureAtomicMin_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1D_UInt32_coordinate;
Variable TextureAtomicMin_Texture1D_UInt32_value;
Function TextureAtomicMin_Texture1D_UInt32;
inline constexpr std::array TextureAtomicMin_Texture1D_UInt32_args = { &TextureAtomicMin_Texture1D_UInt32_texture, &TextureAtomicMin_Texture1D_UInt32_coordinate, &TextureAtomicMin_Texture1D_UInt32_value };

/// textureAtomicMin with Texture1D, Int32, Int32
Variable TextureAtomicMin_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1D_Int32_coordinate;
Variable TextureAtomicMin_Texture1D_Int32_value;
Function TextureAtomicMin_Texture1D_Int32;
inline constexpr std::array TextureAtomicMin_Texture1D_Int32_args = { &TextureAtomicMin_Texture1D_Int32_texture, &TextureAtomicMin_Texture1D_Int32_coordinate, &TextureAtomicMin_Texture1D_Int32_value };

/// textureAtomicMin with Texture1D, Int32, UInt16
Variable TextureAtomicMin_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1D_UInt16_coordinate;
Variable TextureAtomicMin_Texture1D_UInt16_value;
Function TextureAtomicMin_Texture1D_UInt16;
inline constexpr std::array TextureAtomicMin_Texture1D_UInt16_args = { &TextureAtomicMin_Texture1D_UInt16_texture, &TextureAtomicMin_Texture1D_UInt16_coordinate, &TextureAtomicMin_Texture1D_UInt16_value };

/// textureAtomicMin with Texture1D, Int32, Int16
Variable TextureAtomicMin_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1D_Int16_coordinate;
Variable TextureAtomicMin_Texture1D_Int16_value;
Function TextureAtomicMin_Texture1D_Int16;
inline constexpr std::array TextureAtomicMin_Texture1D_Int16_args = { &TextureAtomicMin_Texture1D_Int16_texture, &TextureAtomicMin_Texture1D_Int16_coordinate, &TextureAtomicMin_Texture1D_Int16_value };

/// textureAtomicMin with Texture2D, Int32x2, UInt32
Variable TextureAtomicMin_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2D_UInt32_coordinate;
Variable TextureAtomicMin_Texture2D_UInt32_value;
Function TextureAtomicMin_Texture2D_UInt32;
inline constexpr std::array TextureAtomicMin_Texture2D_UInt32_args = { &TextureAtomicMin_Texture2D_UInt32_texture, &TextureAtomicMin_Texture2D_UInt32_coordinate, &TextureAtomicMin_Texture2D_UInt32_value };

/// textureAtomicMin with Texture2D, Int32x2, Int32
Variable TextureAtomicMin_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2D_Int32_coordinate;
Variable TextureAtomicMin_Texture2D_Int32_value;
Function TextureAtomicMin_Texture2D_Int32;
inline constexpr std::array TextureAtomicMin_Texture2D_Int32_args = { &TextureAtomicMin_Texture2D_Int32_texture, &TextureAtomicMin_Texture2D_Int32_coordinate, &TextureAtomicMin_Texture2D_Int32_value };

/// textureAtomicMin with Texture2D, Int32x2, UInt16
Variable TextureAtomicMin_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2D_UInt16_coordinate;
Variable TextureAtomicMin_Texture2D_UInt16_value;
Function TextureAtomicMin_Texture2D_UInt16;
inline constexpr std::array TextureAtomicMin_Texture2D_UInt16_args = { &TextureAtomicMin_Texture2D_UInt16_texture, &TextureAtomicMin_Texture2D_UInt16_coordinate, &TextureAtomicMin_Texture2D_UInt16_value };

/// textureAtomicMin with Texture2D, Int32x2, Int16
Variable TextureAtomicMin_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2D_Int16_coordinate;
Variable TextureAtomicMin_Texture2D_Int16_value;
Function TextureAtomicMin_Texture2D_Int16;
inline constexpr std::array TextureAtomicMin_Texture2D_Int16_args = { &TextureAtomicMin_Texture2D_Int16_texture, &TextureAtomicMin_Texture2D_Int16_coordinate, &TextureAtomicMin_Texture2D_Int16_value };

/// textureAtomicMin with Texture3D, Int32x3, UInt32
Variable TextureAtomicMin_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture3D_UInt32_coordinate;
Variable TextureAtomicMin_Texture3D_UInt32_value;
Function TextureAtomicMin_Texture3D_UInt32;
inline constexpr std::array TextureAtomicMin_Texture3D_UInt32_args = { &TextureAtomicMin_Texture3D_UInt32_texture, &TextureAtomicMin_Texture3D_UInt32_coordinate, &TextureAtomicMin_Texture3D_UInt32_value };

/// textureAtomicMin with Texture3D, Int32x3, Int32
Variable TextureAtomicMin_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture3D_Int32_coordinate;
Variable TextureAtomicMin_Texture3D_Int32_value;
Function TextureAtomicMin_Texture3D_Int32;
inline constexpr std::array TextureAtomicMin_Texture3D_Int32_args = { &TextureAtomicMin_Texture3D_Int32_texture, &TextureAtomicMin_Texture3D_Int32_coordinate, &TextureAtomicMin_Texture3D_Int32_value };

/// textureAtomicMin with Texture3D, Int32x3, UInt16
Variable TextureAtomicMin_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture3D_UInt16_coordinate;
Variable TextureAtomicMin_Texture3D_UInt16_value;
Function TextureAtomicMin_Texture3D_UInt16;
inline constexpr std::array TextureAtomicMin_Texture3D_UInt16_args = { &TextureAtomicMin_Texture3D_UInt16_texture, &TextureAtomicMin_Texture3D_UInt16_coordinate, &TextureAtomicMin_Texture3D_UInt16_value };

/// textureAtomicMin with Texture3D, Int32x3, Int16
Variable TextureAtomicMin_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture3D_Int16_coordinate;
Variable TextureAtomicMin_Texture3D_Int16_value;
Function TextureAtomicMin_Texture3D_Int16;
inline constexpr std::array TextureAtomicMin_Texture3D_Int16_args = { &TextureAtomicMin_Texture3D_Int16_texture, &TextureAtomicMin_Texture3D_Int16_coordinate, &TextureAtomicMin_Texture3D_Int16_value };

/// textureAtomicMin with TextureCube, Int32x3, UInt32
Variable TextureAtomicMin_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicMin_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCube_UInt32_coordinate;
Variable TextureAtomicMin_TextureCube_UInt32_value;
Function TextureAtomicMin_TextureCube_UInt32;
inline constexpr std::array TextureAtomicMin_TextureCube_UInt32_args = { &TextureAtomicMin_TextureCube_UInt32_texture, &TextureAtomicMin_TextureCube_UInt32_coordinate, &TextureAtomicMin_TextureCube_UInt32_value };

/// textureAtomicMin with TextureCube, Int32x3, Int32
Variable TextureAtomicMin_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicMin_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCube_Int32_coordinate;
Variable TextureAtomicMin_TextureCube_Int32_value;
Function TextureAtomicMin_TextureCube_Int32;
inline constexpr std::array TextureAtomicMin_TextureCube_Int32_args = { &TextureAtomicMin_TextureCube_Int32_texture, &TextureAtomicMin_TextureCube_Int32_coordinate, &TextureAtomicMin_TextureCube_Int32_value };

/// textureAtomicMin with TextureCube, Int32x3, UInt16
Variable TextureAtomicMin_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicMin_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCube_UInt16_coordinate;
Variable TextureAtomicMin_TextureCube_UInt16_value;
Function TextureAtomicMin_TextureCube_UInt16;
inline constexpr std::array TextureAtomicMin_TextureCube_UInt16_args = { &TextureAtomicMin_TextureCube_UInt16_texture, &TextureAtomicMin_TextureCube_UInt16_coordinate, &TextureAtomicMin_TextureCube_UInt16_value };

/// textureAtomicMin with TextureCube, Int32x3, Int16
Variable TextureAtomicMin_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicMin_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCube_Int16_coordinate;
Variable TextureAtomicMin_TextureCube_Int16_value;
Function TextureAtomicMin_TextureCube_Int16;
inline constexpr std::array TextureAtomicMin_TextureCube_Int16_args = { &TextureAtomicMin_TextureCube_Int16_texture, &TextureAtomicMin_TextureCube_Int16_coordinate, &TextureAtomicMin_TextureCube_Int16_value };

/// textureAtomicMin with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicMin_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicMin_Texture1DArray_UInt32_value;
Function TextureAtomicMin_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt32_args = { &TextureAtomicMin_Texture1DArray_UInt32_texture, &TextureAtomicMin_Texture1DArray_UInt32_coordinate, &TextureAtomicMin_Texture1DArray_UInt32_value };

/// textureAtomicMin with Texture1DArray, Int32x2, Int32
Variable TextureAtomicMin_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1DArray_Int32_coordinate;
Variable TextureAtomicMin_Texture1DArray_Int32_value;
Function TextureAtomicMin_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int32_args = { &TextureAtomicMin_Texture1DArray_Int32_texture, &TextureAtomicMin_Texture1DArray_Int32_coordinate, &TextureAtomicMin_Texture1DArray_Int32_value };

/// textureAtomicMin with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicMin_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicMin_Texture1DArray_UInt16_value;
Function TextureAtomicMin_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicMin_Texture1DArray_UInt16_args = { &TextureAtomicMin_Texture1DArray_UInt16_texture, &TextureAtomicMin_Texture1DArray_UInt16_coordinate, &TextureAtomicMin_Texture1DArray_UInt16_value };

/// textureAtomicMin with Texture1DArray, Int32x2, Int16
Variable TextureAtomicMin_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture1DArray_Int16_coordinate;
Variable TextureAtomicMin_Texture1DArray_Int16_value;
Function TextureAtomicMin_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicMin_Texture1DArray_Int16_args = { &TextureAtomicMin_Texture1DArray_Int16_texture, &TextureAtomicMin_Texture1DArray_Int16_coordinate, &TextureAtomicMin_Texture1DArray_Int16_value };

/// textureAtomicMin with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicMin_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicMin_Texture2DArray_UInt32_value;
Function TextureAtomicMin_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt32_args = { &TextureAtomicMin_Texture2DArray_UInt32_texture, &TextureAtomicMin_Texture2DArray_UInt32_coordinate, &TextureAtomicMin_Texture2DArray_UInt32_value };

/// textureAtomicMin with Texture2DArray, Int32x3, Int32
Variable TextureAtomicMin_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2DArray_Int32_coordinate;
Variable TextureAtomicMin_Texture2DArray_Int32_value;
Function TextureAtomicMin_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int32_args = { &TextureAtomicMin_Texture2DArray_Int32_texture, &TextureAtomicMin_Texture2DArray_Int32_coordinate, &TextureAtomicMin_Texture2DArray_Int32_value };

/// textureAtomicMin with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicMin_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicMin_Texture2DArray_UInt16_value;
Function TextureAtomicMin_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicMin_Texture2DArray_UInt16_args = { &TextureAtomicMin_Texture2DArray_UInt16_texture, &TextureAtomicMin_Texture2DArray_UInt16_coordinate, &TextureAtomicMin_Texture2DArray_UInt16_value };

/// textureAtomicMin with Texture2DArray, Int32x3, Int16
Variable TextureAtomicMin_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_Texture2DArray_Int16_coordinate;
Variable TextureAtomicMin_Texture2DArray_Int16_value;
Function TextureAtomicMin_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicMin_Texture2DArray_Int16_args = { &TextureAtomicMin_Texture2DArray_Int16_texture, &TextureAtomicMin_Texture2DArray_Int16_coordinate, &TextureAtomicMin_Texture2DArray_Int16_value };

/// textureAtomicMin with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicMin_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicMin_TextureCubeArray_UInt32_value;
Function TextureAtomicMin_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt32_args = { &TextureAtomicMin_TextureCubeArray_UInt32_texture, &TextureAtomicMin_TextureCubeArray_UInt32_coordinate, &TextureAtomicMin_TextureCubeArray_UInt32_value };

/// textureAtomicMin with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicMin_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicMin_TextureCubeArray_Int32_value;
Function TextureAtomicMin_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int32_args = { &TextureAtomicMin_TextureCubeArray_Int32_texture, &TextureAtomicMin_TextureCubeArray_Int32_coordinate, &TextureAtomicMin_TextureCubeArray_Int32_value };

/// textureAtomicMin with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicMin_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicMin_TextureCubeArray_UInt16_value;
Function TextureAtomicMin_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_UInt16_args = { &TextureAtomicMin_TextureCubeArray_UInt16_texture, &TextureAtomicMin_TextureCubeArray_UInt16_coordinate, &TextureAtomicMin_TextureCubeArray_UInt16_value };

/// textureAtomicMin with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicMin_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMin_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicMin_TextureCubeArray_Int16_value;
Function TextureAtomicMin_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicMin_TextureCubeArray_Int16_args = { &TextureAtomicMin_TextureCubeArray_Int16_texture, &TextureAtomicMin_TextureCubeArray_Int16_coordinate, &TextureAtomicMin_TextureCubeArray_Int16_value };

/// textureAtomicMax with Texture1D, Int32, UInt32
Variable TextureAtomicMax_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_UInt32_coordinate;
Variable TextureAtomicMax_Texture1D_UInt32_value;
Function TextureAtomicMax_Texture1D_UInt32;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt32_args = { &TextureAtomicMax_Texture1D_UInt32_texture, &TextureAtomicMax_Texture1D_UInt32_coordinate, &TextureAtomicMax_Texture1D_UInt32_value };

/// textureAtomicMax with Texture1D, Int32, Int32
Variable TextureAtomicMax_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_Int32_coordinate;
Variable TextureAtomicMax_Texture1D_Int32_value;
Function TextureAtomicMax_Texture1D_Int32;
inline constexpr std::array TextureAtomicMax_Texture1D_Int32_args = { &TextureAtomicMax_Texture1D_Int32_texture, &TextureAtomicMax_Texture1D_Int32_coordinate, &TextureAtomicMax_Texture1D_Int32_value };

/// textureAtomicMax with Texture1D, Int32, UInt16
Variable TextureAtomicMax_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_UInt16_coordinate;
Variable TextureAtomicMax_Texture1D_UInt16_value;
Function TextureAtomicMax_Texture1D_UInt16;
inline constexpr std::array TextureAtomicMax_Texture1D_UInt16_args = { &TextureAtomicMax_Texture1D_UInt16_texture, &TextureAtomicMax_Texture1D_UInt16_coordinate, &TextureAtomicMax_Texture1D_UInt16_value };

/// textureAtomicMax with Texture1D, Int32, Int16
Variable TextureAtomicMax_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1D_Int16_coordinate;
Variable TextureAtomicMax_Texture1D_Int16_value;
Function TextureAtomicMax_Texture1D_Int16;
inline constexpr std::array TextureAtomicMax_Texture1D_Int16_args = { &TextureAtomicMax_Texture1D_Int16_texture, &TextureAtomicMax_Texture1D_Int16_coordinate, &TextureAtomicMax_Texture1D_Int16_value };

/// textureAtomicMax with Texture2D, Int32x2, UInt32
Variable TextureAtomicMax_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_UInt32_coordinate;
Variable TextureAtomicMax_Texture2D_UInt32_value;
Function TextureAtomicMax_Texture2D_UInt32;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt32_args = { &TextureAtomicMax_Texture2D_UInt32_texture, &TextureAtomicMax_Texture2D_UInt32_coordinate, &TextureAtomicMax_Texture2D_UInt32_value };

/// textureAtomicMax with Texture2D, Int32x2, Int32
Variable TextureAtomicMax_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_Int32_coordinate;
Variable TextureAtomicMax_Texture2D_Int32_value;
Function TextureAtomicMax_Texture2D_Int32;
inline constexpr std::array TextureAtomicMax_Texture2D_Int32_args = { &TextureAtomicMax_Texture2D_Int32_texture, &TextureAtomicMax_Texture2D_Int32_coordinate, &TextureAtomicMax_Texture2D_Int32_value };

/// textureAtomicMax with Texture2D, Int32x2, UInt16
Variable TextureAtomicMax_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_UInt16_coordinate;
Variable TextureAtomicMax_Texture2D_UInt16_value;
Function TextureAtomicMax_Texture2D_UInt16;
inline constexpr std::array TextureAtomicMax_Texture2D_UInt16_args = { &TextureAtomicMax_Texture2D_UInt16_texture, &TextureAtomicMax_Texture2D_UInt16_coordinate, &TextureAtomicMax_Texture2D_UInt16_value };

/// textureAtomicMax with Texture2D, Int32x2, Int16
Variable TextureAtomicMax_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2D_Int16_coordinate;
Variable TextureAtomicMax_Texture2D_Int16_value;
Function TextureAtomicMax_Texture2D_Int16;
inline constexpr std::array TextureAtomicMax_Texture2D_Int16_args = { &TextureAtomicMax_Texture2D_Int16_texture, &TextureAtomicMax_Texture2D_Int16_coordinate, &TextureAtomicMax_Texture2D_Int16_value };

/// textureAtomicMax with Texture3D, Int32x3, UInt32
Variable TextureAtomicMax_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_UInt32_coordinate;
Variable TextureAtomicMax_Texture3D_UInt32_value;
Function TextureAtomicMax_Texture3D_UInt32;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt32_args = { &TextureAtomicMax_Texture3D_UInt32_texture, &TextureAtomicMax_Texture3D_UInt32_coordinate, &TextureAtomicMax_Texture3D_UInt32_value };

/// textureAtomicMax with Texture3D, Int32x3, Int32
Variable TextureAtomicMax_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_Int32_coordinate;
Variable TextureAtomicMax_Texture3D_Int32_value;
Function TextureAtomicMax_Texture3D_Int32;
inline constexpr std::array TextureAtomicMax_Texture3D_Int32_args = { &TextureAtomicMax_Texture3D_Int32_texture, &TextureAtomicMax_Texture3D_Int32_coordinate, &TextureAtomicMax_Texture3D_Int32_value };

/// textureAtomicMax with Texture3D, Int32x3, UInt16
Variable TextureAtomicMax_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_UInt16_coordinate;
Variable TextureAtomicMax_Texture3D_UInt16_value;
Function TextureAtomicMax_Texture3D_UInt16;
inline constexpr std::array TextureAtomicMax_Texture3D_UInt16_args = { &TextureAtomicMax_Texture3D_UInt16_texture, &TextureAtomicMax_Texture3D_UInt16_coordinate, &TextureAtomicMax_Texture3D_UInt16_value };

/// textureAtomicMax with Texture3D, Int32x3, Int16
Variable TextureAtomicMax_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture3D_Int16_coordinate;
Variable TextureAtomicMax_Texture3D_Int16_value;
Function TextureAtomicMax_Texture3D_Int16;
inline constexpr std::array TextureAtomicMax_Texture3D_Int16_args = { &TextureAtomicMax_Texture3D_Int16_texture, &TextureAtomicMax_Texture3D_Int16_coordinate, &TextureAtomicMax_Texture3D_Int16_value };

/// textureAtomicMax with TextureCube, Int32x3, UInt32
Variable TextureAtomicMax_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_UInt32_coordinate;
Variable TextureAtomicMax_TextureCube_UInt32_value;
Function TextureAtomicMax_TextureCube_UInt32;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt32_args = { &TextureAtomicMax_TextureCube_UInt32_texture, &TextureAtomicMax_TextureCube_UInt32_coordinate, &TextureAtomicMax_TextureCube_UInt32_value };

/// textureAtomicMax with TextureCube, Int32x3, Int32
Variable TextureAtomicMax_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_Int32_coordinate;
Variable TextureAtomicMax_TextureCube_Int32_value;
Function TextureAtomicMax_TextureCube_Int32;
inline constexpr std::array TextureAtomicMax_TextureCube_Int32_args = { &TextureAtomicMax_TextureCube_Int32_texture, &TextureAtomicMax_TextureCube_Int32_coordinate, &TextureAtomicMax_TextureCube_Int32_value };

/// textureAtomicMax with TextureCube, Int32x3, UInt16
Variable TextureAtomicMax_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_UInt16_coordinate;
Variable TextureAtomicMax_TextureCube_UInt16_value;
Function TextureAtomicMax_TextureCube_UInt16;
inline constexpr std::array TextureAtomicMax_TextureCube_UInt16_args = { &TextureAtomicMax_TextureCube_UInt16_texture, &TextureAtomicMax_TextureCube_UInt16_coordinate, &TextureAtomicMax_TextureCube_UInt16_value };

/// textureAtomicMax with TextureCube, Int32x3, Int16
Variable TextureAtomicMax_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicMax_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCube_Int16_coordinate;
Variable TextureAtomicMax_TextureCube_Int16_value;
Function TextureAtomicMax_TextureCube_Int16;
inline constexpr std::array TextureAtomicMax_TextureCube_Int16_args = { &TextureAtomicMax_TextureCube_Int16_texture, &TextureAtomicMax_TextureCube_Int16_coordinate, &TextureAtomicMax_TextureCube_Int16_value };

/// textureAtomicMax with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicMax_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicMax_Texture1DArray_UInt32_value;
Function TextureAtomicMax_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt32_args = { &TextureAtomicMax_Texture1DArray_UInt32_texture, &TextureAtomicMax_Texture1DArray_UInt32_coordinate, &TextureAtomicMax_Texture1DArray_UInt32_value };

/// textureAtomicMax with Texture1DArray, Int32x2, Int32
Variable TextureAtomicMax_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_Int32_coordinate;
Variable TextureAtomicMax_Texture1DArray_Int32_value;
Function TextureAtomicMax_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int32_args = { &TextureAtomicMax_Texture1DArray_Int32_texture, &TextureAtomicMax_Texture1DArray_Int32_coordinate, &TextureAtomicMax_Texture1DArray_Int32_value };

/// textureAtomicMax with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicMax_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicMax_Texture1DArray_UInt16_value;
Function TextureAtomicMax_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicMax_Texture1DArray_UInt16_args = { &TextureAtomicMax_Texture1DArray_UInt16_texture, &TextureAtomicMax_Texture1DArray_UInt16_coordinate, &TextureAtomicMax_Texture1DArray_UInt16_value };

/// textureAtomicMax with Texture1DArray, Int32x2, Int16
Variable TextureAtomicMax_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture1DArray_Int16_coordinate;
Variable TextureAtomicMax_Texture1DArray_Int16_value;
Function TextureAtomicMax_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicMax_Texture1DArray_Int16_args = { &TextureAtomicMax_Texture1DArray_Int16_texture, &TextureAtomicMax_Texture1DArray_Int16_coordinate, &TextureAtomicMax_Texture1DArray_Int16_value };

/// textureAtomicMax with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicMax_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicMax_Texture2DArray_UInt32_value;
Function TextureAtomicMax_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt32_args = { &TextureAtomicMax_Texture2DArray_UInt32_texture, &TextureAtomicMax_Texture2DArray_UInt32_coordinate, &TextureAtomicMax_Texture2DArray_UInt32_value };

/// textureAtomicMax with Texture2DArray, Int32x3, Int32
Variable TextureAtomicMax_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_Int32_coordinate;
Variable TextureAtomicMax_Texture2DArray_Int32_value;
Function TextureAtomicMax_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int32_args = { &TextureAtomicMax_Texture2DArray_Int32_texture, &TextureAtomicMax_Texture2DArray_Int32_coordinate, &TextureAtomicMax_Texture2DArray_Int32_value };

/// textureAtomicMax with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicMax_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicMax_Texture2DArray_UInt16_value;
Function TextureAtomicMax_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicMax_Texture2DArray_UInt16_args = { &TextureAtomicMax_Texture2DArray_UInt16_texture, &TextureAtomicMax_Texture2DArray_UInt16_coordinate, &TextureAtomicMax_Texture2DArray_UInt16_value };

/// textureAtomicMax with Texture2DArray, Int32x3, Int16
Variable TextureAtomicMax_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_Texture2DArray_Int16_coordinate;
Variable TextureAtomicMax_Texture2DArray_Int16_value;
Function TextureAtomicMax_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicMax_Texture2DArray_Int16_args = { &TextureAtomicMax_Texture2DArray_Int16_texture, &TextureAtomicMax_Texture2DArray_Int16_coordinate, &TextureAtomicMax_Texture2DArray_Int16_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicMax_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicMax_TextureCubeArray_UInt32_value;
Function TextureAtomicMax_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt32_args = { &TextureAtomicMax_TextureCubeArray_UInt32_texture, &TextureAtomicMax_TextureCubeArray_UInt32_coordinate, &TextureAtomicMax_TextureCubeArray_UInt32_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicMax_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicMax_TextureCubeArray_Int32_value;
Function TextureAtomicMax_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int32_args = { &TextureAtomicMax_TextureCubeArray_Int32_texture, &TextureAtomicMax_TextureCubeArray_Int32_coordinate, &TextureAtomicMax_TextureCubeArray_Int32_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicMax_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicMax_TextureCubeArray_UInt16_value;
Function TextureAtomicMax_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_UInt16_args = { &TextureAtomicMax_TextureCubeArray_UInt16_texture, &TextureAtomicMax_TextureCubeArray_UInt16_coordinate, &TextureAtomicMax_TextureCubeArray_UInt16_value };

/// textureAtomicMax with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicMax_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicMax_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicMax_TextureCubeArray_Int16_value;
Function TextureAtomicMax_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicMax_TextureCubeArray_Int16_args = { &TextureAtomicMax_TextureCubeArray_Int16_texture, &TextureAtomicMax_TextureCubeArray_Int16_coordinate, &TextureAtomicMax_TextureCubeArray_Int16_value };

/// textureAtomicAnd with Texture1D, Int32, UInt32
Variable TextureAtomicAnd_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_UInt32_coordinate;
Variable TextureAtomicAnd_Texture1D_UInt32_value;
Function TextureAtomicAnd_Texture1D_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt32_args = { &TextureAtomicAnd_Texture1D_UInt32_texture, &TextureAtomicAnd_Texture1D_UInt32_coordinate, &TextureAtomicAnd_Texture1D_UInt32_value };

/// textureAtomicAnd with Texture1D, Int32, Int32
Variable TextureAtomicAnd_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_Int32_coordinate;
Variable TextureAtomicAnd_Texture1D_Int32_value;
Function TextureAtomicAnd_Texture1D_Int32;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int32_args = { &TextureAtomicAnd_Texture1D_Int32_texture, &TextureAtomicAnd_Texture1D_Int32_coordinate, &TextureAtomicAnd_Texture1D_Int32_value };

/// textureAtomicAnd with Texture1D, Int32, UInt16
Variable TextureAtomicAnd_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_UInt16_coordinate;
Variable TextureAtomicAnd_Texture1D_UInt16_value;
Function TextureAtomicAnd_Texture1D_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture1D_UInt16_args = { &TextureAtomicAnd_Texture1D_UInt16_texture, &TextureAtomicAnd_Texture1D_UInt16_coordinate, &TextureAtomicAnd_Texture1D_UInt16_value };

/// textureAtomicAnd with Texture1D, Int32, Int16
Variable TextureAtomicAnd_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1D_Int16_coordinate;
Variable TextureAtomicAnd_Texture1D_Int16_value;
Function TextureAtomicAnd_Texture1D_Int16;
inline constexpr std::array TextureAtomicAnd_Texture1D_Int16_args = { &TextureAtomicAnd_Texture1D_Int16_texture, &TextureAtomicAnd_Texture1D_Int16_coordinate, &TextureAtomicAnd_Texture1D_Int16_value };

/// textureAtomicAnd with Texture2D, Int32x2, UInt32
Variable TextureAtomicAnd_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_UInt32_coordinate;
Variable TextureAtomicAnd_Texture2D_UInt32_value;
Function TextureAtomicAnd_Texture2D_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt32_args = { &TextureAtomicAnd_Texture2D_UInt32_texture, &TextureAtomicAnd_Texture2D_UInt32_coordinate, &TextureAtomicAnd_Texture2D_UInt32_value };

/// textureAtomicAnd with Texture2D, Int32x2, Int32
Variable TextureAtomicAnd_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_Int32_coordinate;
Variable TextureAtomicAnd_Texture2D_Int32_value;
Function TextureAtomicAnd_Texture2D_Int32;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int32_args = { &TextureAtomicAnd_Texture2D_Int32_texture, &TextureAtomicAnd_Texture2D_Int32_coordinate, &TextureAtomicAnd_Texture2D_Int32_value };

/// textureAtomicAnd with Texture2D, Int32x2, UInt16
Variable TextureAtomicAnd_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_UInt16_coordinate;
Variable TextureAtomicAnd_Texture2D_UInt16_value;
Function TextureAtomicAnd_Texture2D_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture2D_UInt16_args = { &TextureAtomicAnd_Texture2D_UInt16_texture, &TextureAtomicAnd_Texture2D_UInt16_coordinate, &TextureAtomicAnd_Texture2D_UInt16_value };

/// textureAtomicAnd with Texture2D, Int32x2, Int16
Variable TextureAtomicAnd_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2D_Int16_coordinate;
Variable TextureAtomicAnd_Texture2D_Int16_value;
Function TextureAtomicAnd_Texture2D_Int16;
inline constexpr std::array TextureAtomicAnd_Texture2D_Int16_args = { &TextureAtomicAnd_Texture2D_Int16_texture, &TextureAtomicAnd_Texture2D_Int16_coordinate, &TextureAtomicAnd_Texture2D_Int16_value };

/// textureAtomicAnd with Texture3D, Int32x3, UInt32
Variable TextureAtomicAnd_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_UInt32_coordinate;
Variable TextureAtomicAnd_Texture3D_UInt32_value;
Function TextureAtomicAnd_Texture3D_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt32_args = { &TextureAtomicAnd_Texture3D_UInt32_texture, &TextureAtomicAnd_Texture3D_UInt32_coordinate, &TextureAtomicAnd_Texture3D_UInt32_value };

/// textureAtomicAnd with Texture3D, Int32x3, Int32
Variable TextureAtomicAnd_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_Int32_coordinate;
Variable TextureAtomicAnd_Texture3D_Int32_value;
Function TextureAtomicAnd_Texture3D_Int32;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int32_args = { &TextureAtomicAnd_Texture3D_Int32_texture, &TextureAtomicAnd_Texture3D_Int32_coordinate, &TextureAtomicAnd_Texture3D_Int32_value };

/// textureAtomicAnd with Texture3D, Int32x3, UInt16
Variable TextureAtomicAnd_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_UInt16_coordinate;
Variable TextureAtomicAnd_Texture3D_UInt16_value;
Function TextureAtomicAnd_Texture3D_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture3D_UInt16_args = { &TextureAtomicAnd_Texture3D_UInt16_texture, &TextureAtomicAnd_Texture3D_UInt16_coordinate, &TextureAtomicAnd_Texture3D_UInt16_value };

/// textureAtomicAnd with Texture3D, Int32x3, Int16
Variable TextureAtomicAnd_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture3D_Int16_coordinate;
Variable TextureAtomicAnd_Texture3D_Int16_value;
Function TextureAtomicAnd_Texture3D_Int16;
inline constexpr std::array TextureAtomicAnd_Texture3D_Int16_args = { &TextureAtomicAnd_Texture3D_Int16_texture, &TextureAtomicAnd_Texture3D_Int16_coordinate, &TextureAtomicAnd_Texture3D_Int16_value };

/// textureAtomicAnd with TextureCube, Int32x3, UInt32
Variable TextureAtomicAnd_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_UInt32_coordinate;
Variable TextureAtomicAnd_TextureCube_UInt32_value;
Function TextureAtomicAnd_TextureCube_UInt32;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt32_args = { &TextureAtomicAnd_TextureCube_UInt32_texture, &TextureAtomicAnd_TextureCube_UInt32_coordinate, &TextureAtomicAnd_TextureCube_UInt32_value };

/// textureAtomicAnd with TextureCube, Int32x3, Int32
Variable TextureAtomicAnd_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_Int32_coordinate;
Variable TextureAtomicAnd_TextureCube_Int32_value;
Function TextureAtomicAnd_TextureCube_Int32;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int32_args = { &TextureAtomicAnd_TextureCube_Int32_texture, &TextureAtomicAnd_TextureCube_Int32_coordinate, &TextureAtomicAnd_TextureCube_Int32_value };

/// textureAtomicAnd with TextureCube, Int32x3, UInt16
Variable TextureAtomicAnd_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_UInt16_coordinate;
Variable TextureAtomicAnd_TextureCube_UInt16_value;
Function TextureAtomicAnd_TextureCube_UInt16;
inline constexpr std::array TextureAtomicAnd_TextureCube_UInt16_args = { &TextureAtomicAnd_TextureCube_UInt16_texture, &TextureAtomicAnd_TextureCube_UInt16_coordinate, &TextureAtomicAnd_TextureCube_UInt16_value };

/// textureAtomicAnd with TextureCube, Int32x3, Int16
Variable TextureAtomicAnd_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCube_Int16_coordinate;
Variable TextureAtomicAnd_TextureCube_Int16_value;
Function TextureAtomicAnd_TextureCube_Int16;
inline constexpr std::array TextureAtomicAnd_TextureCube_Int16_args = { &TextureAtomicAnd_TextureCube_Int16_texture, &TextureAtomicAnd_TextureCube_Int16_coordinate, &TextureAtomicAnd_TextureCube_Int16_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicAnd_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicAnd_Texture1DArray_UInt32_value;
Function TextureAtomicAnd_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt32_args = { &TextureAtomicAnd_Texture1DArray_UInt32_texture, &TextureAtomicAnd_Texture1DArray_UInt32_coordinate, &TextureAtomicAnd_Texture1DArray_UInt32_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, Int32
Variable TextureAtomicAnd_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_Int32_coordinate;
Variable TextureAtomicAnd_Texture1DArray_Int32_value;
Function TextureAtomicAnd_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int32_args = { &TextureAtomicAnd_Texture1DArray_Int32_texture, &TextureAtomicAnd_Texture1DArray_Int32_coordinate, &TextureAtomicAnd_Texture1DArray_Int32_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, UInt16
Variable TextureAtomicAnd_Texture1DArray_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_UInt16_coordinate;
Variable TextureAtomicAnd_Texture1DArray_UInt16_value;
Function TextureAtomicAnd_Texture1DArray_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_UInt16_args = { &TextureAtomicAnd_Texture1DArray_UInt16_texture, &TextureAtomicAnd_Texture1DArray_UInt16_coordinate, &TextureAtomicAnd_Texture1DArray_UInt16_value };

/// textureAtomicAnd with Texture1DArray, Int32x2, Int16
Variable TextureAtomicAnd_Texture1DArray_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture1DArray_Int16_coordinate;
Variable TextureAtomicAnd_Texture1DArray_Int16_value;
Function TextureAtomicAnd_Texture1DArray_Int16;
inline constexpr std::array TextureAtomicAnd_Texture1DArray_Int16_args = { &TextureAtomicAnd_Texture1DArray_Int16_texture, &TextureAtomicAnd_Texture1DArray_Int16_coordinate, &TextureAtomicAnd_Texture1DArray_Int16_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, UInt32
Variable TextureAtomicAnd_Texture2DArray_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_UInt32_coordinate;
Variable TextureAtomicAnd_Texture2DArray_UInt32_value;
Function TextureAtomicAnd_Texture2DArray_UInt32;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt32_args = { &TextureAtomicAnd_Texture2DArray_UInt32_texture, &TextureAtomicAnd_Texture2DArray_UInt32_coordinate, &TextureAtomicAnd_Texture2DArray_UInt32_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, Int32
Variable TextureAtomicAnd_Texture2DArray_Int32_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_Int32_coordinate;
Variable TextureAtomicAnd_Texture2DArray_Int32_value;
Function TextureAtomicAnd_Texture2DArray_Int32;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int32_args = { &TextureAtomicAnd_Texture2DArray_Int32_texture, &TextureAtomicAnd_Texture2DArray_Int32_coordinate, &TextureAtomicAnd_Texture2DArray_Int32_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, UInt16
Variable TextureAtomicAnd_Texture2DArray_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_UInt16_coordinate;
Variable TextureAtomicAnd_Texture2DArray_UInt16_value;
Function TextureAtomicAnd_Texture2DArray_UInt16;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_UInt16_args = { &TextureAtomicAnd_Texture2DArray_UInt16_texture, &TextureAtomicAnd_Texture2DArray_UInt16_coordinate, &TextureAtomicAnd_Texture2DArray_UInt16_value };

/// textureAtomicAnd with Texture2DArray, Int32x3, Int16
Variable TextureAtomicAnd_Texture2DArray_Int16_texture;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_Texture2DArray_Int16_coordinate;
Variable TextureAtomicAnd_Texture2DArray_Int16_value;
Function TextureAtomicAnd_Texture2DArray_Int16;
inline constexpr std::array TextureAtomicAnd_Texture2DArray_Int16_args = { &TextureAtomicAnd_Texture2DArray_Int16_texture, &TextureAtomicAnd_Texture2DArray_Int16_coordinate, &TextureAtomicAnd_Texture2DArray_Int16_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, UInt32
Variable TextureAtomicAnd_TextureCubeArray_UInt32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_UInt32_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_UInt32_value;
Function TextureAtomicAnd_TextureCubeArray_UInt32;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt32_args = { &TextureAtomicAnd_TextureCubeArray_UInt32_texture, &TextureAtomicAnd_TextureCubeArray_UInt32_coordinate, &TextureAtomicAnd_TextureCubeArray_UInt32_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, Int32
Variable TextureAtomicAnd_TextureCubeArray_Int32_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_Int32_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_Int32_value;
Function TextureAtomicAnd_TextureCubeArray_Int32;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int32_args = { &TextureAtomicAnd_TextureCubeArray_Int32_texture, &TextureAtomicAnd_TextureCubeArray_Int32_coordinate, &TextureAtomicAnd_TextureCubeArray_Int32_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, UInt16
Variable TextureAtomicAnd_TextureCubeArray_UInt16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_UInt16_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_UInt16_value;
Function TextureAtomicAnd_TextureCubeArray_UInt16;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_UInt16_args = { &TextureAtomicAnd_TextureCubeArray_UInt16_texture, &TextureAtomicAnd_TextureCubeArray_UInt16_coordinate, &TextureAtomicAnd_TextureCubeArray_UInt16_value };

/// textureAtomicAnd with TextureCubeArray, Int32x4, Int16
Variable TextureAtomicAnd_TextureCubeArray_Int16_texture;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicAnd_TextureCubeArray_Int16_coordinate;
Variable TextureAtomicAnd_TextureCubeArray_Int16_value;
Function TextureAtomicAnd_TextureCubeArray_Int16;
inline constexpr std::array TextureAtomicAnd_TextureCubeArray_Int16_args = { &TextureAtomicAnd_TextureCubeArray_Int16_texture, &TextureAtomicAnd_TextureCubeArray_Int16_coordinate, &TextureAtomicAnd_TextureCubeArray_Int16_value };

/// textureAtomicOr with Texture1D, Int32, UInt32
Variable TextureAtomicOr_Texture1D_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_UInt32_coordinate;
Variable TextureAtomicOr_Texture1D_UInt32_value;
Function TextureAtomicOr_Texture1D_UInt32;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt32_args = { &TextureAtomicOr_Texture1D_UInt32_texture, &TextureAtomicOr_Texture1D_UInt32_coordinate, &TextureAtomicOr_Texture1D_UInt32_value };

/// textureAtomicOr with Texture1D, Int32, Int32
Variable TextureAtomicOr_Texture1D_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_Int32_coordinate;
Variable TextureAtomicOr_Texture1D_Int32_value;
Function TextureAtomicOr_Texture1D_Int32;
inline constexpr std::array TextureAtomicOr_Texture1D_Int32_args = { &TextureAtomicOr_Texture1D_Int32_texture, &TextureAtomicOr_Texture1D_Int32_coordinate, &TextureAtomicOr_Texture1D_Int32_value };

/// textureAtomicOr with Texture1D, Int32, UInt16
Variable TextureAtomicOr_Texture1D_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_UInt16_coordinate;
Variable TextureAtomicOr_Texture1D_UInt16_value;
Function TextureAtomicOr_Texture1D_UInt16;
inline constexpr std::array TextureAtomicOr_Texture1D_UInt16_args = { &TextureAtomicOr_Texture1D_UInt16_texture, &TextureAtomicOr_Texture1D_UInt16_coordinate, &TextureAtomicOr_Texture1D_UInt16_value };

/// textureAtomicOr with Texture1D, Int32, Int16
Variable TextureAtomicOr_Texture1D_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture1D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1D_Int16_coordinate;
Variable TextureAtomicOr_Texture1D_Int16_value;
Function TextureAtomicOr_Texture1D_Int16;
inline constexpr std::array TextureAtomicOr_Texture1D_Int16_args = { &TextureAtomicOr_Texture1D_Int16_texture, &TextureAtomicOr_Texture1D_Int16_coordinate, &TextureAtomicOr_Texture1D_Int16_value };

/// textureAtomicOr with Texture2D, Int32x2, UInt32
Variable TextureAtomicOr_Texture2D_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_UInt32_coordinate;
Variable TextureAtomicOr_Texture2D_UInt32_value;
Function TextureAtomicOr_Texture2D_UInt32;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt32_args = { &TextureAtomicOr_Texture2D_UInt32_texture, &TextureAtomicOr_Texture2D_UInt32_coordinate, &TextureAtomicOr_Texture2D_UInt32_value };

/// textureAtomicOr with Texture2D, Int32x2, Int32
Variable TextureAtomicOr_Texture2D_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_Int32_coordinate;
Variable TextureAtomicOr_Texture2D_Int32_value;
Function TextureAtomicOr_Texture2D_Int32;
inline constexpr std::array TextureAtomicOr_Texture2D_Int32_args = { &TextureAtomicOr_Texture2D_Int32_texture, &TextureAtomicOr_Texture2D_Int32_coordinate, &TextureAtomicOr_Texture2D_Int32_value };

/// textureAtomicOr with Texture2D, Int32x2, UInt16
Variable TextureAtomicOr_Texture2D_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_UInt16_coordinate;
Variable TextureAtomicOr_Texture2D_UInt16_value;
Function TextureAtomicOr_Texture2D_UInt16;
inline constexpr std::array TextureAtomicOr_Texture2D_UInt16_args = { &TextureAtomicOr_Texture2D_UInt16_texture, &TextureAtomicOr_Texture2D_UInt16_coordinate, &TextureAtomicOr_Texture2D_UInt16_value };

/// textureAtomicOr with Texture2D, Int32x2, Int16
Variable TextureAtomicOr_Texture2D_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture2D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture2D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture2D_Int16_coordinate;
Variable TextureAtomicOr_Texture2D_Int16_value;
Function TextureAtomicOr_Texture2D_Int16;
inline constexpr std::array TextureAtomicOr_Texture2D_Int16_args = { &TextureAtomicOr_Texture2D_Int16_texture, &TextureAtomicOr_Texture2D_Int16_coordinate, &TextureAtomicOr_Texture2D_Int16_value };

/// textureAtomicOr with Texture3D, Int32x3, UInt32
Variable TextureAtomicOr_Texture3D_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_UInt32_coordinate;
Variable TextureAtomicOr_Texture3D_UInt32_value;
Function TextureAtomicOr_Texture3D_UInt32;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt32_args = { &TextureAtomicOr_Texture3D_UInt32_texture, &TextureAtomicOr_Texture3D_UInt32_coordinate, &TextureAtomicOr_Texture3D_UInt32_value };

/// textureAtomicOr with Texture3D, Int32x3, Int32
Variable TextureAtomicOr_Texture3D_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_Int32_coordinate;
Variable TextureAtomicOr_Texture3D_Int32_value;
Function TextureAtomicOr_Texture3D_Int32;
inline constexpr std::array TextureAtomicOr_Texture3D_Int32_args = { &TextureAtomicOr_Texture3D_Int32_texture, &TextureAtomicOr_Texture3D_Int32_coordinate, &TextureAtomicOr_Texture3D_Int32_value };

/// textureAtomicOr with Texture3D, Int32x3, UInt16
Variable TextureAtomicOr_Texture3D_UInt16_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_UInt16_coordinate;
Variable TextureAtomicOr_Texture3D_UInt16_value;
Function TextureAtomicOr_Texture3D_UInt16;
inline constexpr std::array TextureAtomicOr_Texture3D_UInt16_args = { &TextureAtomicOr_Texture3D_UInt16_texture, &TextureAtomicOr_Texture3D_UInt16_coordinate, &TextureAtomicOr_Texture3D_UInt16_value };

/// textureAtomicOr with Texture3D, Int32x3, Int16
Variable TextureAtomicOr_Texture3D_Int16_texture;
inline constexpr std::array TextureAtomicOr_Texture3D_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture3D_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture3D_Int16_coordinate;
Variable TextureAtomicOr_Texture3D_Int16_value;
Function TextureAtomicOr_Texture3D_Int16;
inline constexpr std::array TextureAtomicOr_Texture3D_Int16_args = { &TextureAtomicOr_Texture3D_Int16_texture, &TextureAtomicOr_Texture3D_Int16_coordinate, &TextureAtomicOr_Texture3D_Int16_value };

/// textureAtomicOr with TextureCube, Int32x3, UInt32
Variable TextureAtomicOr_TextureCube_UInt32_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_UInt32_coordinate;
Variable TextureAtomicOr_TextureCube_UInt32_value;
Function TextureAtomicOr_TextureCube_UInt32;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt32_args = { &TextureAtomicOr_TextureCube_UInt32_texture, &TextureAtomicOr_TextureCube_UInt32_coordinate, &TextureAtomicOr_TextureCube_UInt32_value };

/// textureAtomicOr with TextureCube, Int32x3, Int32
Variable TextureAtomicOr_TextureCube_Int32_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_Int32_coordinate;
Variable TextureAtomicOr_TextureCube_Int32_value;
Function TextureAtomicOr_TextureCube_Int32;
inline constexpr std::array TextureAtomicOr_TextureCube_Int32_args = { &TextureAtomicOr_TextureCube_Int32_texture, &TextureAtomicOr_TextureCube_Int32_coordinate, &TextureAtomicOr_TextureCube_Int32_value };

/// textureAtomicOr with TextureCube, Int32x3, UInt16
Variable TextureAtomicOr_TextureCube_UInt16_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_UInt16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_UInt16_coordinate;
Variable TextureAtomicOr_TextureCube_UInt16_value;
Function TextureAtomicOr_TextureCube_UInt16;
inline constexpr std::array TextureAtomicOr_TextureCube_UInt16_args = { &TextureAtomicOr_TextureCube_UInt16_texture, &TextureAtomicOr_TextureCube_UInt16_coordinate, &TextureAtomicOr_TextureCube_UInt16_value };

/// textureAtomicOr with TextureCube, Int32x3, Int16
Variable TextureAtomicOr_TextureCube_Int16_texture;
inline constexpr std::array TextureAtomicOr_TextureCube_Int16_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_TextureCube_Int16_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_TextureCube_Int16_coordinate;
Variable TextureAtomicOr_TextureCube_Int16_value;
Function TextureAtomicOr_TextureCube_Int16;
inline constexpr std::array TextureAtomicOr_TextureCube_Int16_args = { &TextureAtomicOr_TextureCube_Int16_texture, &TextureAtomicOr_TextureCube_Int16_coordinate, &TextureAtomicOr_TextureCube_Int16_value };

/// textureAtomicOr with Texture1DArray, Int32x2, UInt32
Variable TextureAtomicOr_Texture1DArray_UInt32_texture;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1DArray_UInt32_coordinate;
Variable TextureAtomicOr_Texture1DArray_UInt32_value;
Function TextureAtomicOr_Texture1DArray_UInt32;
inline constexpr std::array TextureAtomicOr_Texture1DArray_UInt32_args = { &TextureAtomicOr_Texture1DArray_UInt32_texture, &TextureAtomicOr_Texture1DArray_UInt32_coordinate, &TextureAtomicOr_Texture1DArray_UInt32_value };

/// textureAtomicOr with Texture1DArray, Int32x2, Int32
Variable TextureAtomicOr_Texture1DArray_Int32_texture;
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int32_texture_modifiers = {Type::FullType::Modifier::Pointer};
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int32_texture_modifierValues = {(Expression*)nullptr};
Variable TextureAtomicOr_Texture1DArray_Int32_coordinate;
Variable TextureAtomicOr_Texture1DArray_Int32_value;
Function TextureAtomicOr_Texture1DArray_Int32;
inline constexpr std::array TextureAtomicOr_Texture1DArray_Int32_args = { &TextureAtomicOr_Texture1DArray_Int32_texture, &TextureAtomicOr_Texture1DArray_Int32_coordinate, &TextureAtomicOr_Texture1DArray_Int32_value };

void SetupIntrinsics14()
{
    /// textureAtomicSubtract with Texture1D, Int32, UInt16
    TextureAtomicSubtract_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicSubtract_Texture1D_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture1D_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1D_UInt16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture1D_UInt16.backendIndex = 2729;
    TextureAtomicSubtract_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture1D_UInt16.parameters = TextureAtomicSubtract_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_UInt16)->signature = "textureAtomicSubtract(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_UInt16)->name = "textureAtomicSubtract(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture1D, Int32, Int16
    TextureAtomicSubtract_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicSubtract_Texture1D_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture1D_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture1D_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture1D_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1D_Int16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture1D_Int16.backendIndex = 2730;
    TextureAtomicSubtract_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture1D_Int16.parameters = TextureAtomicSubtract_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16)->signature = "textureAtomicSubtract(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16)->name = "textureAtomicSubtract(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture2D, Int32x2, UInt32
    TextureAtomicSubtract_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicSubtract_Texture2D_UInt32_texture.type.modifiers = TextureAtomicSubtract_Texture2D_UInt32_texture_modifiers;
    TextureAtomicSubtract_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicSubtract_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicSubtract_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2D_UInt32.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture2D_UInt32.backendIndex = 2731;
    TextureAtomicSubtract_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_Texture2D_UInt32.parameters = TextureAtomicSubtract_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32)->signature = "textureAtomicSubtract(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32)->name = "textureAtomicSubtract(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with Texture2D, Int32x2, Int32
    TextureAtomicSubtract_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicSubtract_Texture2D_Int32_texture.type.modifiers = TextureAtomicSubtract_Texture2D_Int32_texture_modifiers;
    TextureAtomicSubtract_Texture2D_Int32_texture.type.modifierValues = TextureAtomicSubtract_Texture2D_Int32_texture_modifierValues;
    TextureAtomicSubtract_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicSubtract_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2D_Int32.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture2D_Int32.backendIndex = 2732;
    TextureAtomicSubtract_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_Texture2D_Int32.parameters = TextureAtomicSubtract_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32)->signature = "textureAtomicSubtract(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32)->name = "textureAtomicSubtract(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with Texture2D, Int32x2, UInt16
    TextureAtomicSubtract_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicSubtract_Texture2D_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture2D_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2D_UInt16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture2D_UInt16.backendIndex = 2733;
    TextureAtomicSubtract_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture2D_UInt16.parameters = TextureAtomicSubtract_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16)->signature = "textureAtomicSubtract(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16)->name = "textureAtomicSubtract(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture2D, Int32x2, Int16
    TextureAtomicSubtract_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicSubtract_Texture2D_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture2D_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture2D_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture2D_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2D_Int16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture2D_Int16.backendIndex = 2734;
    TextureAtomicSubtract_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture2D_Int16.parameters = TextureAtomicSubtract_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16)->signature = "textureAtomicSubtract(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16)->name = "textureAtomicSubtract(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture3D, Int32x3, UInt32
    TextureAtomicSubtract_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicSubtract_Texture3D_UInt32_texture.type.modifiers = TextureAtomicSubtract_Texture3D_UInt32_texture_modifiers;
    TextureAtomicSubtract_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicSubtract_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicSubtract_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture3D_UInt32.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture3D_UInt32.backendIndex = 2735;
    TextureAtomicSubtract_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_Texture3D_UInt32.parameters = TextureAtomicSubtract_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32)->signature = "textureAtomicSubtract(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32)->name = "textureAtomicSubtract(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with Texture3D, Int32x3, Int32
    TextureAtomicSubtract_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicSubtract_Texture3D_Int32_texture.type.modifiers = TextureAtomicSubtract_Texture3D_Int32_texture_modifiers;
    TextureAtomicSubtract_Texture3D_Int32_texture.type.modifierValues = TextureAtomicSubtract_Texture3D_Int32_texture_modifierValues;
    TextureAtomicSubtract_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicSubtract_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture3D_Int32.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture3D_Int32.backendIndex = 2736;
    TextureAtomicSubtract_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_Texture3D_Int32.parameters = TextureAtomicSubtract_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32)->signature = "textureAtomicSubtract(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32)->name = "textureAtomicSubtract(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with Texture3D, Int32x3, UInt16
    TextureAtomicSubtract_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicSubtract_Texture3D_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture3D_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture3D_UInt16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture3D_UInt16.backendIndex = 2737;
    TextureAtomicSubtract_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture3D_UInt16.parameters = TextureAtomicSubtract_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16)->signature = "textureAtomicSubtract(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16)->name = "textureAtomicSubtract(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture3D, Int32x3, Int16
    TextureAtomicSubtract_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicSubtract_Texture3D_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture3D_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture3D_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture3D_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture3D_Int16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture3D_Int16.backendIndex = 2738;
    TextureAtomicSubtract_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture3D_Int16.parameters = TextureAtomicSubtract_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16)->signature = "textureAtomicSubtract(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16)->name = "textureAtomicSubtract(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with TextureCube, Int32x3, UInt32
    TextureAtomicSubtract_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicSubtract_TextureCube_UInt32_texture.type.modifiers = TextureAtomicSubtract_TextureCube_UInt32_texture_modifiers;
    TextureAtomicSubtract_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicSubtract_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicSubtract_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCube_UInt32.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_TextureCube_UInt32.backendIndex = 2739;
    TextureAtomicSubtract_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_TextureCube_UInt32.parameters = TextureAtomicSubtract_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32)->signature = "textureAtomicSubtract(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32)->name = "textureAtomicSubtract(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with TextureCube, Int32x3, Int32
    TextureAtomicSubtract_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicSubtract_TextureCube_Int32_texture.type.modifiers = TextureAtomicSubtract_TextureCube_Int32_texture_modifiers;
    TextureAtomicSubtract_TextureCube_Int32_texture.type.modifierValues = TextureAtomicSubtract_TextureCube_Int32_texture_modifierValues;
    TextureAtomicSubtract_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicSubtract_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCube_Int32.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_TextureCube_Int32.backendIndex = 2740;
    TextureAtomicSubtract_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_TextureCube_Int32.parameters = TextureAtomicSubtract_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32)->signature = "textureAtomicSubtract(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32)->name = "textureAtomicSubtract(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with TextureCube, Int32x3, UInt16
    TextureAtomicSubtract_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicSubtract_TextureCube_UInt16_texture.type.modifiers = TextureAtomicSubtract_TextureCube_UInt16_texture_modifiers;
    TextureAtomicSubtract_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicSubtract_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicSubtract_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCube_UInt16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_TextureCube_UInt16.backendIndex = 2741;
    TextureAtomicSubtract_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_TextureCube_UInt16.parameters = TextureAtomicSubtract_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16)->signature = "textureAtomicSubtract(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16)->name = "textureAtomicSubtract(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with TextureCube, Int32x3, Int16
    TextureAtomicSubtract_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicSubtract_TextureCube_Int16_texture.type.modifiers = TextureAtomicSubtract_TextureCube_Int16_texture_modifiers;
    TextureAtomicSubtract_TextureCube_Int16_texture.type.modifierValues = TextureAtomicSubtract_TextureCube_Int16_texture_modifierValues;
    TextureAtomicSubtract_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicSubtract_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCube_Int16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_TextureCube_Int16.backendIndex = 2742;
    TextureAtomicSubtract_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_TextureCube_Int16.parameters = TextureAtomicSubtract_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16)->signature = "textureAtomicSubtract(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16)->name = "textureAtomicSubtract(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture1DArray, Int32x2, UInt32
    TextureAtomicSubtract_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicSubtract_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicSubtract_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicSubtract_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicSubtract_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicSubtract_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1DArray_UInt32.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture1DArray_UInt32.backendIndex = 2743;
    TextureAtomicSubtract_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt32.parameters = TextureAtomicSubtract_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32)->signature = "textureAtomicSubtract(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32)->name = "textureAtomicSubtract(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with Texture1DArray, Int32x2, Int32
    TextureAtomicSubtract_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicSubtract_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicSubtract_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicSubtract_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicSubtract_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicSubtract_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicSubtract_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1DArray_Int32.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture1DArray_Int32.backendIndex = 2744;
    TextureAtomicSubtract_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_Texture1DArray_Int32.parameters = TextureAtomicSubtract_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32)->signature = "textureAtomicSubtract(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32)->name = "textureAtomicSubtract(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with Texture1DArray, Int32x2, UInt16
    TextureAtomicSubtract_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicSubtract_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1DArray_UInt16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture1DArray_UInt16.backendIndex = 2745;
    TextureAtomicSubtract_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture1DArray_UInt16.parameters = TextureAtomicSubtract_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16)->signature = "textureAtomicSubtract(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16)->name = "textureAtomicSubtract(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture1DArray, Int32x2, Int16
    TextureAtomicSubtract_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicSubtract_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicSubtract_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture1DArray_Int16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture1DArray_Int16.backendIndex = 2746;
    TextureAtomicSubtract_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture1DArray_Int16.parameters = TextureAtomicSubtract_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16)->signature = "textureAtomicSubtract(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16)->name = "textureAtomicSubtract(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with Texture2DArray, Int32x3, UInt32
    TextureAtomicSubtract_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicSubtract_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicSubtract_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicSubtract_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicSubtract_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicSubtract_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2DArray_UInt32.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture2DArray_UInt32.backendIndex = 2747;
    TextureAtomicSubtract_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt32.parameters = TextureAtomicSubtract_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32)->signature = "textureAtomicSubtract(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32)->name = "textureAtomicSubtract(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with Texture2DArray, Int32x3, Int32
    TextureAtomicSubtract_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicSubtract_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicSubtract_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicSubtract_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicSubtract_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicSubtract_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicSubtract_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2DArray_Int32.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture2DArray_Int32.backendIndex = 2748;
    TextureAtomicSubtract_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_Texture2DArray_Int32.parameters = TextureAtomicSubtract_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32)->signature = "textureAtomicSubtract(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32)->name = "textureAtomicSubtract(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with Texture2DArray, Int32x3, UInt16
    TextureAtomicSubtract_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicSubtract_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicSubtract_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicSubtract_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicSubtract_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicSubtract_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2DArray_UInt16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture2DArray_UInt16.backendIndex = 2749;
    TextureAtomicSubtract_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_Texture2DArray_UInt16.parameters = TextureAtomicSubtract_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16)->signature = "textureAtomicSubtract(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16)->name = "textureAtomicSubtract(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with Texture2DArray, Int32x3, Int16
    TextureAtomicSubtract_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicSubtract_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicSubtract_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicSubtract_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicSubtract_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicSubtract_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicSubtract_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicSubtract_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_Texture2DArray_Int16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_Texture2DArray_Int16.backendIndex = 2750;
    TextureAtomicSubtract_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_Texture2DArray_Int16.parameters = TextureAtomicSubtract_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16)->signature = "textureAtomicSubtract(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16)->name = "textureAtomicSubtract(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicSubtract with TextureCubeArray, Int32x4, UInt32
    TextureAtomicSubtract_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicSubtract_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicSubtract_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicSubtract_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicSubtract_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt32.backendIndex = 2751;
    TextureAtomicSubtract_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt32.parameters = TextureAtomicSubtract_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32)->signature = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32)->name = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicSubtract with TextureCubeArray, Int32x4, Int32
    TextureAtomicSubtract_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicSubtract_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicSubtract_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicSubtract_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicSubtract_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicSubtract_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicSubtract_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCubeArray_Int32.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_TextureCubeArray_Int32.backendIndex = 2752;
    TextureAtomicSubtract_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int32.parameters = TextureAtomicSubtract_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32)->signature = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32)->name = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicSubtract with TextureCubeArray, Int32x4, UInt16
    TextureAtomicSubtract_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicSubtract_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicSubtract_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicSubtract_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicSubtract_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_TextureCubeArray_UInt16.backendIndex = 2753;
    TextureAtomicSubtract_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicSubtract_TextureCubeArray_UInt16.parameters = TextureAtomicSubtract_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16)->signature = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16)->name = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicSubtract with TextureCubeArray, Int32x4, Int16
    TextureAtomicSubtract_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicSubtract_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicSubtract_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicSubtract_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicSubtract_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicSubtract_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicSubtract_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicSubtract_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicSubtract_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicSubtract_TextureCubeArray_Int16.name = "textureAtomicSubtract"_c;
    TextureAtomicSubtract_TextureCubeArray_Int16.backendIndex = 2754;
    TextureAtomicSubtract_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicSubtract_TextureCubeArray_Int16.parameters = TextureAtomicSubtract_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16)->signature = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16)->name = "textureAtomicSubtract(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicSubtract(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicSubtract_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture1D, Int32, UInt32
    TextureAtomicMin_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMin_Texture1D_UInt32_texture.type.modifiers = TextureAtomicMin_Texture1D_UInt32_texture_modifiers;
    TextureAtomicMin_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1D_UInt32.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture1D_UInt32.backendIndex = 2755;
    TextureAtomicMin_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture1D_UInt32.parameters = TextureAtomicMin_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32)->signature = "textureAtomicMin(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32)->name = "textureAtomicMin(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture1D, Int32, Int32
    TextureAtomicMin_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMin_Texture1D_Int32_texture.type.modifiers = TextureAtomicMin_Texture1D_Int32_texture_modifiers;
    TextureAtomicMin_Texture1D_Int32_texture.type.modifierValues = TextureAtomicMin_Texture1D_Int32_texture_modifierValues;
    TextureAtomicMin_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1D_Int32.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture1D_Int32.backendIndex = 2756;
    TextureAtomicMin_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture1D_Int32.parameters = TextureAtomicMin_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32)->signature = "textureAtomicMin(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32)->name = "textureAtomicMin(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture1D, Int32, UInt16
    TextureAtomicMin_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMin_Texture1D_UInt16_texture.type.modifiers = TextureAtomicMin_Texture1D_UInt16_texture_modifiers;
    TextureAtomicMin_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1D_UInt16.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture1D_UInt16.backendIndex = 2757;
    TextureAtomicMin_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture1D_UInt16.parameters = TextureAtomicMin_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16)->signature = "textureAtomicMin(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16)->name = "textureAtomicMin(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture1D, Int32, Int16
    TextureAtomicMin_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMin_Texture1D_Int16_texture.type.modifiers = TextureAtomicMin_Texture1D_Int16_texture_modifiers;
    TextureAtomicMin_Texture1D_Int16_texture.type.modifierValues = TextureAtomicMin_Texture1D_Int16_texture_modifierValues;
    TextureAtomicMin_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1D_Int16.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture1D_Int16.backendIndex = 2758;
    TextureAtomicMin_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture1D_Int16.parameters = TextureAtomicMin_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16)->signature = "textureAtomicMin(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16)->name = "textureAtomicMin(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture2D, Int32x2, UInt32
    TextureAtomicMin_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMin_Texture2D_UInt32_texture.type.modifiers = TextureAtomicMin_Texture2D_UInt32_texture_modifiers;
    TextureAtomicMin_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2D_UInt32.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture2D_UInt32.backendIndex = 2759;
    TextureAtomicMin_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture2D_UInt32.parameters = TextureAtomicMin_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32)->signature = "textureAtomicMin(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32)->name = "textureAtomicMin(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture2D, Int32x2, Int32
    TextureAtomicMin_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMin_Texture2D_Int32_texture.type.modifiers = TextureAtomicMin_Texture2D_Int32_texture_modifiers;
    TextureAtomicMin_Texture2D_Int32_texture.type.modifierValues = TextureAtomicMin_Texture2D_Int32_texture_modifierValues;
    TextureAtomicMin_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2D_Int32.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture2D_Int32.backendIndex = 2760;
    TextureAtomicMin_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture2D_Int32.parameters = TextureAtomicMin_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32)->signature = "textureAtomicMin(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32)->name = "textureAtomicMin(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture2D, Int32x2, UInt16
    TextureAtomicMin_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMin_Texture2D_UInt16_texture.type.modifiers = TextureAtomicMin_Texture2D_UInt16_texture_modifiers;
    TextureAtomicMin_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2D_UInt16.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture2D_UInt16.backendIndex = 2761;
    TextureAtomicMin_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture2D_UInt16.parameters = TextureAtomicMin_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16)->signature = "textureAtomicMin(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16)->name = "textureAtomicMin(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture2D, Int32x2, Int16
    TextureAtomicMin_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMin_Texture2D_Int16_texture.type.modifiers = TextureAtomicMin_Texture2D_Int16_texture_modifiers;
    TextureAtomicMin_Texture2D_Int16_texture.type.modifierValues = TextureAtomicMin_Texture2D_Int16_texture_modifierValues;
    TextureAtomicMin_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2D_Int16.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture2D_Int16.backendIndex = 2762;
    TextureAtomicMin_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture2D_Int16.parameters = TextureAtomicMin_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16)->signature = "textureAtomicMin(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16)->name = "textureAtomicMin(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture3D, Int32x3, UInt32
    TextureAtomicMin_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMin_Texture3D_UInt32_texture.type.modifiers = TextureAtomicMin_Texture3D_UInt32_texture_modifiers;
    TextureAtomicMin_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture3D_UInt32.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture3D_UInt32.backendIndex = 2763;
    TextureAtomicMin_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture3D_UInt32.parameters = TextureAtomicMin_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32)->signature = "textureAtomicMin(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32)->name = "textureAtomicMin(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture3D, Int32x3, Int32
    TextureAtomicMin_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMin_Texture3D_Int32_texture.type.modifiers = TextureAtomicMin_Texture3D_Int32_texture_modifiers;
    TextureAtomicMin_Texture3D_Int32_texture.type.modifierValues = TextureAtomicMin_Texture3D_Int32_texture_modifierValues;
    TextureAtomicMin_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture3D_Int32.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture3D_Int32.backendIndex = 2764;
    TextureAtomicMin_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture3D_Int32.parameters = TextureAtomicMin_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32)->signature = "textureAtomicMin(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32)->name = "textureAtomicMin(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture3D, Int32x3, UInt16
    TextureAtomicMin_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMin_Texture3D_UInt16_texture.type.modifiers = TextureAtomicMin_Texture3D_UInt16_texture_modifiers;
    TextureAtomicMin_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture3D_UInt16.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture3D_UInt16.backendIndex = 2765;
    TextureAtomicMin_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture3D_UInt16.parameters = TextureAtomicMin_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16)->signature = "textureAtomicMin(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16)->name = "textureAtomicMin(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture3D, Int32x3, Int16
    TextureAtomicMin_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMin_Texture3D_Int16_texture.type.modifiers = TextureAtomicMin_Texture3D_Int16_texture_modifiers;
    TextureAtomicMin_Texture3D_Int16_texture.type.modifierValues = TextureAtomicMin_Texture3D_Int16_texture_modifierValues;
    TextureAtomicMin_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture3D_Int16.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture3D_Int16.backendIndex = 2766;
    TextureAtomicMin_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture3D_Int16.parameters = TextureAtomicMin_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16)->signature = "textureAtomicMin(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16)->name = "textureAtomicMin(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with TextureCube, Int32x3, UInt32
    TextureAtomicMin_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMin_TextureCube_UInt32_texture.type.modifiers = TextureAtomicMin_TextureCube_UInt32_texture_modifiers;
    TextureAtomicMin_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicMin_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicMin_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicMin_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCube_UInt32.name = "textureAtomicMin"_c;
    TextureAtomicMin_TextureCube_UInt32.backendIndex = 2767;
    TextureAtomicMin_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_TextureCube_UInt32.parameters = TextureAtomicMin_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32)->signature = "textureAtomicMin(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32)->name = "textureAtomicMin(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with TextureCube, Int32x3, Int32
    TextureAtomicMin_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicMin_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMin_TextureCube_Int32_texture.type.modifiers = TextureAtomicMin_TextureCube_Int32_texture_modifiers;
    TextureAtomicMin_TextureCube_Int32_texture.type.modifierValues = TextureAtomicMin_TextureCube_Int32_texture_modifierValues;
    TextureAtomicMin_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicMin_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCube_Int32.name = "textureAtomicMin"_c;
    TextureAtomicMin_TextureCube_Int32.backendIndex = 2768;
    TextureAtomicMin_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_TextureCube_Int32.parameters = TextureAtomicMin_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32)->signature = "textureAtomicMin(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32)->name = "textureAtomicMin(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with TextureCube, Int32x3, UInt16
    TextureAtomicMin_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMin_TextureCube_UInt16_texture.type.modifiers = TextureAtomicMin_TextureCube_UInt16_texture_modifiers;
    TextureAtomicMin_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicMin_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicMin_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicMin_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCube_UInt16.name = "textureAtomicMin"_c;
    TextureAtomicMin_TextureCube_UInt16.backendIndex = 2769;
    TextureAtomicMin_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_TextureCube_UInt16.parameters = TextureAtomicMin_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16)->signature = "textureAtomicMin(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16)->name = "textureAtomicMin(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with TextureCube, Int32x3, Int16
    TextureAtomicMin_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicMin_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMin_TextureCube_Int16_texture.type.modifiers = TextureAtomicMin_TextureCube_Int16_texture_modifiers;
    TextureAtomicMin_TextureCube_Int16_texture.type.modifierValues = TextureAtomicMin_TextureCube_Int16_texture_modifierValues;
    TextureAtomicMin_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicMin_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCube_Int16.name = "textureAtomicMin"_c;
    TextureAtomicMin_TextureCube_Int16.backendIndex = 2770;
    TextureAtomicMin_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_TextureCube_Int16.parameters = TextureAtomicMin_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16)->signature = "textureAtomicMin(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16)->name = "textureAtomicMin(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture1DArray, Int32x2, UInt32
    TextureAtomicMin_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMin_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicMin_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicMin_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1DArray_UInt32.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture1DArray_UInt32.backendIndex = 2771;
    TextureAtomicMin_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture1DArray_UInt32.parameters = TextureAtomicMin_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32)->signature = "textureAtomicMin(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32)->name = "textureAtomicMin(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture1DArray, Int32x2, Int32
    TextureAtomicMin_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMin_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicMin_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicMin_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicMin_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicMin_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1DArray_Int32.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture1DArray_Int32.backendIndex = 2772;
    TextureAtomicMin_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture1DArray_Int32.parameters = TextureAtomicMin_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32)->signature = "textureAtomicMin(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32)->name = "textureAtomicMin(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture1DArray, Int32x2, UInt16
    TextureAtomicMin_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMin_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicMin_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicMin_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1DArray_UInt16.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture1DArray_UInt16.backendIndex = 2773;
    TextureAtomicMin_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture1DArray_UInt16.parameters = TextureAtomicMin_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16)->signature = "textureAtomicMin(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16)->name = "textureAtomicMin(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture1DArray, Int32x2, Int16
    TextureAtomicMin_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMin_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicMin_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicMin_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicMin_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicMin_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMin_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture1DArray_Int16.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture1DArray_Int16.backendIndex = 2774;
    TextureAtomicMin_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture1DArray_Int16.parameters = TextureAtomicMin_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16)->signature = "textureAtomicMin(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16)->name = "textureAtomicMin(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with Texture2DArray, Int32x3, UInt32
    TextureAtomicMin_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMin_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicMin_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicMin_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicMin_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicMin_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicMin_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2DArray_UInt32.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture2DArray_UInt32.backendIndex = 2775;
    TextureAtomicMin_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_Texture2DArray_UInt32.parameters = TextureAtomicMin_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32)->signature = "textureAtomicMin(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32)->name = "textureAtomicMin(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with Texture2DArray, Int32x3, Int32
    TextureAtomicMin_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMin_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMin_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicMin_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicMin_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicMin_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicMin_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicMin_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2DArray_Int32.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture2DArray_Int32.backendIndex = 2776;
    TextureAtomicMin_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_Texture2DArray_Int32.parameters = TextureAtomicMin_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32)->signature = "textureAtomicMin(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32)->name = "textureAtomicMin(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with Texture2DArray, Int32x3, UInt16
    TextureAtomicMin_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMin_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicMin_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicMin_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicMin_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicMin_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicMin_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2DArray_UInt16.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture2DArray_UInt16.backendIndex = 2777;
    TextureAtomicMin_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_Texture2DArray_UInt16.parameters = TextureAtomicMin_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16)->signature = "textureAtomicMin(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16)->name = "textureAtomicMin(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with Texture2DArray, Int32x3, Int16
    TextureAtomicMin_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMin_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMin_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicMin_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicMin_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicMin_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicMin_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMin_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicMin_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_Texture2DArray_Int16.name = "textureAtomicMin"_c;
    TextureAtomicMin_Texture2DArray_Int16.backendIndex = 2778;
    TextureAtomicMin_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_Texture2DArray_Int16.parameters = TextureAtomicMin_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16)->signature = "textureAtomicMin(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16)->name = "textureAtomicMin(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMin with TextureCubeArray, Int32x4, UInt32
    TextureAtomicMin_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMin_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMin_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicMin_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicMin_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicMin_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicMin_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMin_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicMin_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMin_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCubeArray_UInt32.name = "textureAtomicMin"_c;
    TextureAtomicMin_TextureCubeArray_UInt32.backendIndex = 2779;
    TextureAtomicMin_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMin_TextureCubeArray_UInt32.parameters = TextureAtomicMin_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32)->signature = "textureAtomicMin(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32)->name = "textureAtomicMin(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMin with TextureCubeArray, Int32x4, Int32
    TextureAtomicMin_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicMin_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMin_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicMin_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicMin_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicMin_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicMin_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMin_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicMin_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMin_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCubeArray_Int32.name = "textureAtomicMin"_c;
    TextureAtomicMin_TextureCubeArray_Int32.backendIndex = 2780;
    TextureAtomicMin_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMin_TextureCubeArray_Int32.parameters = TextureAtomicMin_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32)->signature = "textureAtomicMin(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32)->name = "textureAtomicMin(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMin with TextureCubeArray, Int32x4, UInt16
    TextureAtomicMin_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMin_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMin_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicMin_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicMin_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicMin_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicMin_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMin_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicMin_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMin_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCubeArray_UInt16.name = "textureAtomicMin"_c;
    TextureAtomicMin_TextureCubeArray_UInt16.backendIndex = 2781;
    TextureAtomicMin_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMin_TextureCubeArray_UInt16.parameters = TextureAtomicMin_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16)->signature = "textureAtomicMin(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16)->name = "textureAtomicMin(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMin with TextureCubeArray, Int32x4, Int16
    TextureAtomicMin_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicMin_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMin_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicMin_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicMin_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicMin_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicMin_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMin_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMin_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicMin_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMin_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMin_TextureCubeArray_Int16.name = "textureAtomicMin"_c;
    TextureAtomicMin_TextureCubeArray_Int16.backendIndex = 2782;
    TextureAtomicMin_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMin_TextureCubeArray_Int16.parameters = TextureAtomicMin_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16)->signature = "textureAtomicMin(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16)->name = "textureAtomicMin(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicMin(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMin_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture1D, Int32, UInt32
    TextureAtomicMax_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_UInt32_texture.type.modifiers = TextureAtomicMax_Texture1D_UInt32_texture_modifiers;
    TextureAtomicMax_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_UInt32.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture1D_UInt32.backendIndex = 2783;
    TextureAtomicMax_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture1D_UInt32.parameters = TextureAtomicMax_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32)->signature = "textureAtomicMax(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32)->name = "textureAtomicMax(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture1D, Int32, Int32
    TextureAtomicMax_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_Int32_texture.type.modifiers = TextureAtomicMax_Texture1D_Int32_texture_modifiers;
    TextureAtomicMax_Texture1D_Int32_texture.type.modifierValues = TextureAtomicMax_Texture1D_Int32_texture_modifierValues;
    TextureAtomicMax_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_Int32.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture1D_Int32.backendIndex = 2784;
    TextureAtomicMax_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture1D_Int32.parameters = TextureAtomicMax_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32)->signature = "textureAtomicMax(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32)->name = "textureAtomicMax(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture1D, Int32, UInt16
    TextureAtomicMax_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_UInt16_texture.type.modifiers = TextureAtomicMax_Texture1D_UInt16_texture_modifiers;
    TextureAtomicMax_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_UInt16.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture1D_UInt16.backendIndex = 2785;
    TextureAtomicMax_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture1D_UInt16.parameters = TextureAtomicMax_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->signature = "textureAtomicMax(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->name = "textureAtomicMax(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture1D, Int32, Int16
    TextureAtomicMax_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicMax_Texture1D_Int16_texture.type.modifiers = TextureAtomicMax_Texture1D_Int16_texture_modifiers;
    TextureAtomicMax_Texture1D_Int16_texture.type.modifierValues = TextureAtomicMax_Texture1D_Int16_texture_modifierValues;
    TextureAtomicMax_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1D_Int16.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture1D_Int16.backendIndex = 2786;
    TextureAtomicMax_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture1D_Int16.parameters = TextureAtomicMax_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->signature = "textureAtomicMax(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->name = "textureAtomicMax(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture2D, Int32x2, UInt32
    TextureAtomicMax_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_UInt32_texture.type.modifiers = TextureAtomicMax_Texture2D_UInt32_texture_modifiers;
    TextureAtomicMax_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_UInt32.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture2D_UInt32.backendIndex = 2787;
    TextureAtomicMax_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture2D_UInt32.parameters = TextureAtomicMax_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->signature = "textureAtomicMax(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->name = "textureAtomicMax(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture2D, Int32x2, Int32
    TextureAtomicMax_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_Int32_texture.type.modifiers = TextureAtomicMax_Texture2D_Int32_texture_modifiers;
    TextureAtomicMax_Texture2D_Int32_texture.type.modifierValues = TextureAtomicMax_Texture2D_Int32_texture_modifierValues;
    TextureAtomicMax_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_Int32.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture2D_Int32.backendIndex = 2788;
    TextureAtomicMax_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture2D_Int32.parameters = TextureAtomicMax_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->signature = "textureAtomicMax(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->name = "textureAtomicMax(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture2D, Int32x2, UInt16
    TextureAtomicMax_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_UInt16_texture.type.modifiers = TextureAtomicMax_Texture2D_UInt16_texture_modifiers;
    TextureAtomicMax_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_UInt16.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture2D_UInt16.backendIndex = 2789;
    TextureAtomicMax_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture2D_UInt16.parameters = TextureAtomicMax_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->signature = "textureAtomicMax(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->name = "textureAtomicMax(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture2D, Int32x2, Int16
    TextureAtomicMax_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicMax_Texture2D_Int16_texture.type.modifiers = TextureAtomicMax_Texture2D_Int16_texture_modifiers;
    TextureAtomicMax_Texture2D_Int16_texture.type.modifierValues = TextureAtomicMax_Texture2D_Int16_texture_modifierValues;
    TextureAtomicMax_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2D_Int16.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture2D_Int16.backendIndex = 2790;
    TextureAtomicMax_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture2D_Int16.parameters = TextureAtomicMax_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->signature = "textureAtomicMax(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->name = "textureAtomicMax(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture3D, Int32x3, UInt32
    TextureAtomicMax_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_UInt32_texture.type.modifiers = TextureAtomicMax_Texture3D_UInt32_texture_modifiers;
    TextureAtomicMax_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_UInt32.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture3D_UInt32.backendIndex = 2791;
    TextureAtomicMax_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture3D_UInt32.parameters = TextureAtomicMax_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->signature = "textureAtomicMax(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->name = "textureAtomicMax(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture3D, Int32x3, Int32
    TextureAtomicMax_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_Int32_texture.type.modifiers = TextureAtomicMax_Texture3D_Int32_texture_modifiers;
    TextureAtomicMax_Texture3D_Int32_texture.type.modifierValues = TextureAtomicMax_Texture3D_Int32_texture_modifierValues;
    TextureAtomicMax_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_Int32.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture3D_Int32.backendIndex = 2792;
    TextureAtomicMax_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture3D_Int32.parameters = TextureAtomicMax_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->signature = "textureAtomicMax(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->name = "textureAtomicMax(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture3D, Int32x3, UInt16
    TextureAtomicMax_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_UInt16_texture.type.modifiers = TextureAtomicMax_Texture3D_UInt16_texture_modifiers;
    TextureAtomicMax_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_UInt16.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture3D_UInt16.backendIndex = 2793;
    TextureAtomicMax_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture3D_UInt16.parameters = TextureAtomicMax_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->signature = "textureAtomicMax(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->name = "textureAtomicMax(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture3D, Int32x3, Int16
    TextureAtomicMax_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicMax_Texture3D_Int16_texture.type.modifiers = TextureAtomicMax_Texture3D_Int16_texture_modifiers;
    TextureAtomicMax_Texture3D_Int16_texture.type.modifierValues = TextureAtomicMax_Texture3D_Int16_texture_modifierValues;
    TextureAtomicMax_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture3D_Int16.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture3D_Int16.backendIndex = 2794;
    TextureAtomicMax_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture3D_Int16.parameters = TextureAtomicMax_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->signature = "textureAtomicMax(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->name = "textureAtomicMax(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with TextureCube, Int32x3, UInt32
    TextureAtomicMax_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_UInt32_texture.type.modifiers = TextureAtomicMax_TextureCube_UInt32_texture_modifiers;
    TextureAtomicMax_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicMax_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicMax_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicMax_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_UInt32.name = "textureAtomicMax"_c;
    TextureAtomicMax_TextureCube_UInt32.backendIndex = 2795;
    TextureAtomicMax_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_TextureCube_UInt32.parameters = TextureAtomicMax_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->signature = "textureAtomicMax(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->name = "textureAtomicMax(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with TextureCube, Int32x3, Int32
    TextureAtomicMax_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_Int32_texture.type.modifiers = TextureAtomicMax_TextureCube_Int32_texture_modifiers;
    TextureAtomicMax_TextureCube_Int32_texture.type.modifierValues = TextureAtomicMax_TextureCube_Int32_texture_modifierValues;
    TextureAtomicMax_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicMax_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_Int32.name = "textureAtomicMax"_c;
    TextureAtomicMax_TextureCube_Int32.backendIndex = 2796;
    TextureAtomicMax_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_TextureCube_Int32.parameters = TextureAtomicMax_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->signature = "textureAtomicMax(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->name = "textureAtomicMax(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with TextureCube, Int32x3, UInt16
    TextureAtomicMax_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_UInt16_texture.type.modifiers = TextureAtomicMax_TextureCube_UInt16_texture_modifiers;
    TextureAtomicMax_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicMax_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicMax_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicMax_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_UInt16.name = "textureAtomicMax"_c;
    TextureAtomicMax_TextureCube_UInt16.backendIndex = 2797;
    TextureAtomicMax_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_TextureCube_UInt16.parameters = TextureAtomicMax_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->signature = "textureAtomicMax(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->name = "textureAtomicMax(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with TextureCube, Int32x3, Int16
    TextureAtomicMax_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicMax_TextureCube_Int16_texture.type.modifiers = TextureAtomicMax_TextureCube_Int16_texture_modifiers;
    TextureAtomicMax_TextureCube_Int16_texture.type.modifierValues = TextureAtomicMax_TextureCube_Int16_texture_modifierValues;
    TextureAtomicMax_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicMax_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCube_Int16.name = "textureAtomicMax"_c;
    TextureAtomicMax_TextureCube_Int16.backendIndex = 2798;
    TextureAtomicMax_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_TextureCube_Int16.parameters = TextureAtomicMax_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->signature = "textureAtomicMax(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->name = "textureAtomicMax(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, UInt32
    TextureAtomicMax_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicMax_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicMax_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_UInt32.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture1DArray_UInt32.backendIndex = 2799;
    TextureAtomicMax_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture1DArray_UInt32.parameters = TextureAtomicMax_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, Int32
    TextureAtomicMax_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicMax_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicMax_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_Int32.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture1DArray_Int32.backendIndex = 2800;
    TextureAtomicMax_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture1DArray_Int32.parameters = TextureAtomicMax_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, UInt16
    TextureAtomicMax_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicMax_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicMax_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_UInt16.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture1DArray_UInt16.backendIndex = 2801;
    TextureAtomicMax_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture1DArray_UInt16.parameters = TextureAtomicMax_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture1DArray, Int32x2, Int16
    TextureAtomicMax_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicMax_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicMax_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicMax_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicMax_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicMax_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicMax_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture1DArray_Int16.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture1DArray_Int16.backendIndex = 2802;
    TextureAtomicMax_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture1DArray_Int16.parameters = TextureAtomicMax_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->signature = "textureAtomicMax(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->name = "textureAtomicMax(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, UInt32
    TextureAtomicMax_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicMax_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicMax_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_UInt32.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture2DArray_UInt32.backendIndex = 2803;
    TextureAtomicMax_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_Texture2DArray_UInt32.parameters = TextureAtomicMax_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, Int32
    TextureAtomicMax_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicMax_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicMax_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_Int32.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture2DArray_Int32.backendIndex = 2804;
    TextureAtomicMax_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_Texture2DArray_Int32.parameters = TextureAtomicMax_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, UInt16
    TextureAtomicMax_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicMax_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicMax_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_UInt16.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture2DArray_UInt16.backendIndex = 2805;
    TextureAtomicMax_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_Texture2DArray_UInt16.parameters = TextureAtomicMax_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with Texture2DArray, Int32x3, Int16
    TextureAtomicMax_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicMax_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicMax_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicMax_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicMax_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicMax_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicMax_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicMax_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicMax_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_Texture2DArray_Int16.name = "textureAtomicMax"_c;
    TextureAtomicMax_Texture2DArray_Int16.backendIndex = 2806;
    TextureAtomicMax_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_Texture2DArray_Int16.parameters = TextureAtomicMax_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->signature = "textureAtomicMax(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->name = "textureAtomicMax(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, UInt32
    TextureAtomicMax_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicMax_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_UInt32.name = "textureAtomicMax"_c;
    TextureAtomicMax_TextureCubeArray_UInt32.backendIndex = 2807;
    TextureAtomicMax_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicMax_TextureCubeArray_UInt32.parameters = TextureAtomicMax_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, Int32
    TextureAtomicMax_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicMax_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_Int32.name = "textureAtomicMax"_c;
    TextureAtomicMax_TextureCubeArray_Int32.backendIndex = 2808;
    TextureAtomicMax_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicMax_TextureCubeArray_Int32.parameters = TextureAtomicMax_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, UInt16
    TextureAtomicMax_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicMax_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_UInt16.name = "textureAtomicMax"_c;
    TextureAtomicMax_TextureCubeArray_UInt16.backendIndex = 2809;
    TextureAtomicMax_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicMax_TextureCubeArray_UInt16.parameters = TextureAtomicMax_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicMax with TextureCubeArray, Int32x4, Int16
    TextureAtomicMax_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicMax_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicMax_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicMax_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicMax_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicMax_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicMax_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicMax_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicMax_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicMax_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicMax_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicMax_TextureCubeArray_Int16.name = "textureAtomicMax"_c;
    TextureAtomicMax_TextureCubeArray_Int16.backendIndex = 2810;
    TextureAtomicMax_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicMax_TextureCubeArray_Int16.parameters = TextureAtomicMax_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->signature = "textureAtomicMax(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->name = "textureAtomicMax(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicMax(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicMax_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture1D, Int32, UInt32
    TextureAtomicAnd_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture1D_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_UInt32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture1D_UInt32.backendIndex = 2811;
    TextureAtomicAnd_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture1D_UInt32.parameters = TextureAtomicAnd_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->signature = "textureAtomicAnd(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->name = "textureAtomicAnd(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture1D, Int32, Int32
    TextureAtomicAnd_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_Int32_texture.type.modifiers = TextureAtomicAnd_Texture1D_Int32_texture_modifiers;
    TextureAtomicAnd_Texture1D_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture1D_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_Int32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture1D_Int32.backendIndex = 2812;
    TextureAtomicAnd_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture1D_Int32.parameters = TextureAtomicAnd_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->signature = "textureAtomicAnd(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->name = "textureAtomicAnd(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture1D, Int32, UInt16
    TextureAtomicAnd_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture1D_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_UInt16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture1D_UInt16.backendIndex = 2813;
    TextureAtomicAnd_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture1D_UInt16.parameters = TextureAtomicAnd_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->signature = "textureAtomicAnd(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->name = "textureAtomicAnd(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture1D, Int32, Int16
    TextureAtomicAnd_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicAnd_Texture1D_Int16_texture.type.modifiers = TextureAtomicAnd_Texture1D_Int16_texture_modifiers;
    TextureAtomicAnd_Texture1D_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture1D_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1D_Int16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture1D_Int16.backendIndex = 2814;
    TextureAtomicAnd_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture1D_Int16.parameters = TextureAtomicAnd_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->signature = "textureAtomicAnd(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->name = "textureAtomicAnd(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture2D, Int32x2, UInt32
    TextureAtomicAnd_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture2D_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_UInt32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture2D_UInt32.backendIndex = 2815;
    TextureAtomicAnd_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture2D_UInt32.parameters = TextureAtomicAnd_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->name = "textureAtomicAnd(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture2D, Int32x2, Int32
    TextureAtomicAnd_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_Int32_texture.type.modifiers = TextureAtomicAnd_Texture2D_Int32_texture_modifiers;
    TextureAtomicAnd_Texture2D_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture2D_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_Int32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture2D_Int32.backendIndex = 2816;
    TextureAtomicAnd_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture2D_Int32.parameters = TextureAtomicAnd_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->name = "textureAtomicAnd(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture2D, Int32x2, UInt16
    TextureAtomicAnd_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture2D_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_UInt16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture2D_UInt16.backendIndex = 2817;
    TextureAtomicAnd_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture2D_UInt16.parameters = TextureAtomicAnd_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->name = "textureAtomicAnd(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture2D, Int32x2, Int16
    TextureAtomicAnd_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicAnd_Texture2D_Int16_texture.type.modifiers = TextureAtomicAnd_Texture2D_Int16_texture_modifiers;
    TextureAtomicAnd_Texture2D_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture2D_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2D_Int16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture2D_Int16.backendIndex = 2818;
    TextureAtomicAnd_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture2D_Int16.parameters = TextureAtomicAnd_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->signature = "textureAtomicAnd(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->name = "textureAtomicAnd(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture3D, Int32x3, UInt32
    TextureAtomicAnd_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture3D_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_UInt32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture3D_UInt32.backendIndex = 2819;
    TextureAtomicAnd_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture3D_UInt32.parameters = TextureAtomicAnd_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->name = "textureAtomicAnd(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture3D, Int32x3, Int32
    TextureAtomicAnd_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_Int32_texture.type.modifiers = TextureAtomicAnd_Texture3D_Int32_texture_modifiers;
    TextureAtomicAnd_Texture3D_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture3D_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_Int32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture3D_Int32.backendIndex = 2820;
    TextureAtomicAnd_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture3D_Int32.parameters = TextureAtomicAnd_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->name = "textureAtomicAnd(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture3D, Int32x3, UInt16
    TextureAtomicAnd_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture3D_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_UInt16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture3D_UInt16.backendIndex = 2821;
    TextureAtomicAnd_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture3D_UInt16.parameters = TextureAtomicAnd_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->name = "textureAtomicAnd(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture3D, Int32x3, Int16
    TextureAtomicAnd_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicAnd_Texture3D_Int16_texture.type.modifiers = TextureAtomicAnd_Texture3D_Int16_texture_modifiers;
    TextureAtomicAnd_Texture3D_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture3D_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture3D_Int16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture3D_Int16.backendIndex = 2822;
    TextureAtomicAnd_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture3D_Int16.parameters = TextureAtomicAnd_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->signature = "textureAtomicAnd(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->name = "textureAtomicAnd(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with TextureCube, Int32x3, UInt32
    TextureAtomicAnd_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_UInt32_texture.type.modifiers = TextureAtomicAnd_TextureCube_UInt32_texture_modifiers;
    TextureAtomicAnd_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicAnd_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicAnd_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_UInt32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_TextureCube_UInt32.backendIndex = 2823;
    TextureAtomicAnd_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_TextureCube_UInt32.parameters = TextureAtomicAnd_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->name = "textureAtomicAnd(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with TextureCube, Int32x3, Int32
    TextureAtomicAnd_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_Int32_texture.type.modifiers = TextureAtomicAnd_TextureCube_Int32_texture_modifiers;
    TextureAtomicAnd_TextureCube_Int32_texture.type.modifierValues = TextureAtomicAnd_TextureCube_Int32_texture_modifierValues;
    TextureAtomicAnd_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_Int32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_TextureCube_Int32.backendIndex = 2824;
    TextureAtomicAnd_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_TextureCube_Int32.parameters = TextureAtomicAnd_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->name = "textureAtomicAnd(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with TextureCube, Int32x3, UInt16
    TextureAtomicAnd_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_UInt16_texture.type.modifiers = TextureAtomicAnd_TextureCube_UInt16_texture_modifiers;
    TextureAtomicAnd_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicAnd_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicAnd_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_UInt16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_TextureCube_UInt16.backendIndex = 2825;
    TextureAtomicAnd_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_TextureCube_UInt16.parameters = TextureAtomicAnd_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->name = "textureAtomicAnd(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with TextureCube, Int32x3, Int16
    TextureAtomicAnd_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicAnd_TextureCube_Int16_texture.type.modifiers = TextureAtomicAnd_TextureCube_Int16_texture_modifiers;
    TextureAtomicAnd_TextureCube_Int16_texture.type.modifierValues = TextureAtomicAnd_TextureCube_Int16_texture_modifierValues;
    TextureAtomicAnd_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicAnd_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCube_Int16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_TextureCube_Int16.backendIndex = 2826;
    TextureAtomicAnd_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_TextureCube_Int16.parameters = TextureAtomicAnd_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->signature = "textureAtomicAnd(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->name = "textureAtomicAnd(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, UInt32
    TextureAtomicAnd_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_UInt32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture1DArray_UInt32.backendIndex = 2827;
    TextureAtomicAnd_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture1DArray_UInt32.parameters = TextureAtomicAnd_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, Int32
    TextureAtomicAnd_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_Int32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture1DArray_Int32.backendIndex = 2828;
    TextureAtomicAnd_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture1DArray_Int32.parameters = TextureAtomicAnd_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, UInt16
    TextureAtomicAnd_Texture1DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_UInt16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture1DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_UInt16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture1DArray_UInt16.backendIndex = 2829;
    TextureAtomicAnd_Texture1DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture1DArray_UInt16.parameters = TextureAtomicAnd_Texture1DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture1DArray, Int32x2, Int16
    TextureAtomicAnd_Texture1DArray_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture1DArray_Int16_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicAnd_Texture1DArray_Int16_texture.type.modifiers = TextureAtomicAnd_Texture1DArray_Int16_texture_modifiers;
    TextureAtomicAnd_Texture1DArray_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture1DArray_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture1DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture1DArray_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicAnd_Texture1DArray_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture1DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture1DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture1DArray_Int16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture1DArray_Int16.backendIndex = 2830;
    TextureAtomicAnd_Texture1DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture1DArray_Int16.parameters = TextureAtomicAnd_Texture1DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->signature = "textureAtomicAnd(uniform *texture1DArray,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->name = "textureAtomicAnd(uniform *texture1DArray,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture1DArray, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture1DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, UInt32
    TextureAtomicAnd_Texture2DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_UInt32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_UInt32_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_UInt32_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_UInt32_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_UInt32_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_UInt32_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_Texture2DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_UInt32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture2DArray_UInt32.backendIndex = 2831;
    TextureAtomicAnd_Texture2DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_Texture2DArray_UInt32.parameters = TextureAtomicAnd_Texture2DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, Int32
    TextureAtomicAnd_Texture2DArray_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_Int32_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_Int32_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_Int32_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_Int32_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_Int32_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_Int32_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_Texture2DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_Int32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture2DArray_Int32.backendIndex = 2832;
    TextureAtomicAnd_Texture2DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_Texture2DArray_Int32.parameters = TextureAtomicAnd_Texture2DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, UInt16
    TextureAtomicAnd_Texture2DArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_UInt16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_UInt16_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_UInt16_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_UInt16_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_UInt16_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_UInt16_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_Texture2DArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_UInt16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture2DArray_UInt16.backendIndex = 2833;
    TextureAtomicAnd_Texture2DArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_Texture2DArray_UInt16.parameters = TextureAtomicAnd_Texture2DArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with Texture2DArray, Int32x3, Int16
    TextureAtomicAnd_Texture2DArray_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_Texture2DArray_Int16_texture.type = Type::FullType{ Texture2DArrayType.name };
    TextureAtomicAnd_Texture2DArray_Int16_texture.type.modifiers = TextureAtomicAnd_Texture2DArray_Int16_texture_modifiers;
    TextureAtomicAnd_Texture2DArray_Int16_texture.type.modifierValues = TextureAtomicAnd_Texture2DArray_Int16_texture_modifierValues;
    TextureAtomicAnd_Texture2DArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_Texture2DArray_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicAnd_Texture2DArray_Int16_value.name = "value"_c;
    TextureAtomicAnd_Texture2DArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_Texture2DArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_Texture2DArray_Int16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_Texture2DArray_Int16.backendIndex = 2834;
    TextureAtomicAnd_Texture2DArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_Texture2DArray_Int16.parameters = TextureAtomicAnd_Texture2DArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_texture)->typeSymbol = &Texture2DArrayType;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->signature = "textureAtomicAnd(uniform *texture2DArray,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->name = "textureAtomicAnd(uniform *texture2DArray,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *texture2DArray, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_Texture2DArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, UInt32
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_UInt32_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_UInt32_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt32_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_UInt32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_TextureCubeArray_UInt32.backendIndex = 2835;
    TextureAtomicAnd_TextureCubeArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt32.parameters = TextureAtomicAnd_TextureCubeArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, Int32
    TextureAtomicAnd_TextureCubeArray_Int32_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_Int32_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_Int32_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_Int32_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_Int32_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_Int32_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_Int32_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_Int32_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicAnd_TextureCubeArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_Int32.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_TextureCubeArray_Int32.backendIndex = 2836;
    TextureAtomicAnd_TextureCubeArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicAnd_TextureCubeArray_Int32.parameters = TextureAtomicAnd_TextureCubeArray_Int32_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, UInt16
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_UInt16_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_UInt16_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt16_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_UInt16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_TextureCubeArray_UInt16.backendIndex = 2837;
    TextureAtomicAnd_TextureCubeArray_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicAnd_TextureCubeArray_UInt16.parameters = TextureAtomicAnd_TextureCubeArray_UInt16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicAnd with TextureCubeArray, Int32x4, Int16
    TextureAtomicAnd_TextureCubeArray_Int16_texture.name = "texture"_c;
    TextureAtomicAnd_TextureCubeArray_Int16_texture.type = Type::FullType{ TextureCubeArrayType.name };
    TextureAtomicAnd_TextureCubeArray_Int16_texture.type.modifiers = TextureAtomicAnd_TextureCubeArray_Int16_texture_modifiers;
    TextureAtomicAnd_TextureCubeArray_Int16_texture.type.modifierValues = TextureAtomicAnd_TextureCubeArray_Int16_texture_modifierValues;
    TextureAtomicAnd_TextureCubeArray_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicAnd_TextureCubeArray_Int16_coordinate.type = Type::FullType{ Int32x4Type.name };
    TextureAtomicAnd_TextureCubeArray_Int16_value.name = "value"_c;
    TextureAtomicAnd_TextureCubeArray_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicAnd_TextureCubeArray_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicAnd_TextureCubeArray_Int16.name = "textureAtomicAnd"_c;
    TextureAtomicAnd_TextureCubeArray_Int16.backendIndex = 2838;
    TextureAtomicAnd_TextureCubeArray_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicAnd_TextureCubeArray_Int16.parameters = TextureAtomicAnd_TextureCubeArray_Int16_args;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_texture)->typeSymbol = &TextureCubeArrayType;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_coordinate)->typeSymbol = &Int32x4Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->signature = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->name = "textureAtomicAnd(uniform *textureCubeArray,i32x4,i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->nameWithVarNames = "textureAtomicAnd(texture : uniform *textureCubeArray, coordinate : i32x4, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicAnd_TextureCubeArray_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture1D, Int32, UInt32
    TextureAtomicOr_Texture1D_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_UInt32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_UInt32_texture.type.modifiers = TextureAtomicOr_Texture1D_UInt32_texture_modifiers;
    TextureAtomicOr_Texture1D_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture1D_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture1D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_UInt32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture1D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture1D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_UInt32.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture1D_UInt32.backendIndex = 2839;
    TextureAtomicOr_Texture1D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture1D_UInt32.parameters = TextureAtomicOr_Texture1D_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->signature = "textureAtomicOr(uniform *texture1D,i32,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->name = "textureAtomicOr(uniform *texture1D,i32,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture1D, Int32, Int32
    TextureAtomicOr_Texture1D_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_Int32_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_Int32_texture.type.modifiers = TextureAtomicOr_Texture1D_Int32_texture_modifiers;
    TextureAtomicOr_Texture1D_Int32_texture.type.modifierValues = TextureAtomicOr_Texture1D_Int32_texture_modifierValues;
    TextureAtomicOr_Texture1D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_Int32_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture1D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_Int32.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture1D_Int32.backendIndex = 2840;
    TextureAtomicOr_Texture1D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture1D_Int32.parameters = TextureAtomicOr_Texture1D_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->signature = "textureAtomicOr(uniform *texture1D,i32,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->name = "textureAtomicOr(uniform *texture1D,i32,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture1D, Int32, UInt16
    TextureAtomicOr_Texture1D_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_UInt16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_UInt16_texture.type.modifiers = TextureAtomicOr_Texture1D_UInt16_texture_modifiers;
    TextureAtomicOr_Texture1D_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture1D_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture1D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_UInt16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture1D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture1D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_UInt16.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture1D_UInt16.backendIndex = 2841;
    TextureAtomicOr_Texture1D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture1D_UInt16.parameters = TextureAtomicOr_Texture1D_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->signature = "textureAtomicOr(uniform *texture1D,i32,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->name = "textureAtomicOr(uniform *texture1D,i32,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture1D, Int32, Int16
    TextureAtomicOr_Texture1D_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture1D_Int16_texture.type = Type::FullType{ Texture1DType.name };
    TextureAtomicOr_Texture1D_Int16_texture.type.modifiers = TextureAtomicOr_Texture1D_Int16_texture_modifiers;
    TextureAtomicOr_Texture1D_Int16_texture.type.modifierValues = TextureAtomicOr_Texture1D_Int16_texture_modifierValues;
    TextureAtomicOr_Texture1D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1D_Int16_coordinate.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1D_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture1D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture1D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1D_Int16.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture1D_Int16.backendIndex = 2842;
    TextureAtomicOr_Texture1D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture1D_Int16.parameters = TextureAtomicOr_Texture1D_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_texture)->typeSymbol = &Texture1DType;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_coordinate)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->signature = "textureAtomicOr(uniform *texture1D,i32,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->name = "textureAtomicOr(uniform *texture1D,i32,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1D, coordinate : i32, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture2D, Int32x2, UInt32
    TextureAtomicOr_Texture2D_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_UInt32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_UInt32_texture.type.modifiers = TextureAtomicOr_Texture2D_UInt32_texture_modifiers;
    TextureAtomicOr_Texture2D_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture2D_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture2D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture2D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture2D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_UInt32.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture2D_UInt32.backendIndex = 2843;
    TextureAtomicOr_Texture2D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture2D_UInt32.parameters = TextureAtomicOr_Texture2D_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->signature = "textureAtomicOr(uniform *texture2D,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->name = "textureAtomicOr(uniform *texture2D,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture2D, Int32x2, Int32
    TextureAtomicOr_Texture2D_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_Int32_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_Int32_texture.type.modifiers = TextureAtomicOr_Texture2D_Int32_texture_modifiers;
    TextureAtomicOr_Texture2D_Int32_texture.type.modifierValues = TextureAtomicOr_Texture2D_Int32_texture_modifierValues;
    TextureAtomicOr_Texture2D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture2D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture2D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_Int32.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture2D_Int32.backendIndex = 2844;
    TextureAtomicOr_Texture2D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture2D_Int32.parameters = TextureAtomicOr_Texture2D_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->signature = "textureAtomicOr(uniform *texture2D,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->name = "textureAtomicOr(uniform *texture2D,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture2D, Int32x2, UInt16
    TextureAtomicOr_Texture2D_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_UInt16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_UInt16_texture.type.modifiers = TextureAtomicOr_Texture2D_UInt16_texture_modifiers;
    TextureAtomicOr_Texture2D_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture2D_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture2D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_UInt16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture2D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture2D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_UInt16.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture2D_UInt16.backendIndex = 2845;
    TextureAtomicOr_Texture2D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture2D_UInt16.parameters = TextureAtomicOr_Texture2D_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->signature = "textureAtomicOr(uniform *texture2D,i32x2,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->name = "textureAtomicOr(uniform *texture2D,i32x2,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture2D, Int32x2, Int16
    TextureAtomicOr_Texture2D_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture2D_Int16_texture.type = Type::FullType{ Texture2DType.name };
    TextureAtomicOr_Texture2D_Int16_texture.type.modifiers = TextureAtomicOr_Texture2D_Int16_texture_modifiers;
    TextureAtomicOr_Texture2D_Int16_texture.type.modifierValues = TextureAtomicOr_Texture2D_Int16_texture_modifierValues;
    TextureAtomicOr_Texture2D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture2D_Int16_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture2D_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture2D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture2D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture2D_Int16.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture2D_Int16.backendIndex = 2846;
    TextureAtomicOr_Texture2D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture2D_Int16.parameters = TextureAtomicOr_Texture2D_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_texture)->typeSymbol = &Texture2DType;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->signature = "textureAtomicOr(uniform *texture2D,i32x2,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->name = "textureAtomicOr(uniform *texture2D,i32x2,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture2D, coordinate : i32x2, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture2D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture3D, Int32x3, UInt32
    TextureAtomicOr_Texture3D_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_UInt32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_UInt32_texture.type.modifiers = TextureAtomicOr_Texture3D_UInt32_texture_modifiers;
    TextureAtomicOr_Texture3D_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture3D_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture3D_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture3D_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture3D_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_UInt32.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture3D_UInt32.backendIndex = 2847;
    TextureAtomicOr_Texture3D_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture3D_UInt32.parameters = TextureAtomicOr_Texture3D_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->signature = "textureAtomicOr(uniform *texture3D,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->name = "textureAtomicOr(uniform *texture3D,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture3D, Int32x3, Int32
    TextureAtomicOr_Texture3D_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_Int32_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_Int32_texture.type.modifiers = TextureAtomicOr_Texture3D_Int32_texture_modifiers;
    TextureAtomicOr_Texture3D_Int32_texture.type.modifierValues = TextureAtomicOr_Texture3D_Int32_texture_modifierValues;
    TextureAtomicOr_Texture3D_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture3D_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture3D_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_Int32.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture3D_Int32.backendIndex = 2848;
    TextureAtomicOr_Texture3D_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture3D_Int32.parameters = TextureAtomicOr_Texture3D_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->signature = "textureAtomicOr(uniform *texture3D,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->name = "textureAtomicOr(uniform *texture3D,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with Texture3D, Int32x3, UInt16
    TextureAtomicOr_Texture3D_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_UInt16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_UInt16_texture.type.modifiers = TextureAtomicOr_Texture3D_UInt16_texture_modifiers;
    TextureAtomicOr_Texture3D_UInt16_texture.type.modifierValues = TextureAtomicOr_Texture3D_UInt16_texture_modifierValues;
    TextureAtomicOr_Texture3D_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_UInt16_value.name = "value"_c;
    TextureAtomicOr_Texture3D_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_Texture3D_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_UInt16.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture3D_UInt16.backendIndex = 2849;
    TextureAtomicOr_Texture3D_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_Texture3D_UInt16.parameters = TextureAtomicOr_Texture3D_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->signature = "textureAtomicOr(uniform *texture3D,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->name = "textureAtomicOr(uniform *texture3D,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with Texture3D, Int32x3, Int16
    TextureAtomicOr_Texture3D_Int16_texture.name = "texture"_c;
    TextureAtomicOr_Texture3D_Int16_texture.type = Type::FullType{ Texture3DType.name };
    TextureAtomicOr_Texture3D_Int16_texture.type.modifiers = TextureAtomicOr_Texture3D_Int16_texture_modifiers;
    TextureAtomicOr_Texture3D_Int16_texture.type.modifierValues = TextureAtomicOr_Texture3D_Int16_texture_modifierValues;
    TextureAtomicOr_Texture3D_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture3D_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_Texture3D_Int16_value.name = "value"_c;
    TextureAtomicOr_Texture3D_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_Texture3D_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture3D_Int16.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture3D_Int16.backendIndex = 2850;
    TextureAtomicOr_Texture3D_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_Texture3D_Int16.parameters = TextureAtomicOr_Texture3D_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_texture)->typeSymbol = &Texture3DType;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->signature = "textureAtomicOr(uniform *texture3D,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->name = "textureAtomicOr(uniform *texture3D,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture3D, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture3D_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with TextureCube, Int32x3, UInt32
    TextureAtomicOr_TextureCube_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_UInt32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_UInt32_texture.type.modifiers = TextureAtomicOr_TextureCube_UInt32_texture_modifiers;
    TextureAtomicOr_TextureCube_UInt32_texture.type.modifierValues = TextureAtomicOr_TextureCube_UInt32_texture_modifierValues;
    TextureAtomicOr_TextureCube_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_UInt32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_UInt32_value.name = "value"_c;
    TextureAtomicOr_TextureCube_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_TextureCube_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_UInt32.name = "textureAtomicOr"_c;
    TextureAtomicOr_TextureCube_UInt32.backendIndex = 2851;
    TextureAtomicOr_TextureCube_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_TextureCube_UInt32.parameters = TextureAtomicOr_TextureCube_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->signature = "textureAtomicOr(uniform *textureCube,i32x3,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->name = "textureAtomicOr(uniform *textureCube,i32x3,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with TextureCube, Int32x3, Int32
    TextureAtomicOr_TextureCube_Int32_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_Int32_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_Int32_texture.type.modifiers = TextureAtomicOr_TextureCube_Int32_texture_modifiers;
    TextureAtomicOr_TextureCube_Int32_texture.type.modifierValues = TextureAtomicOr_TextureCube_Int32_texture_modifierValues;
    TextureAtomicOr_TextureCube_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_Int32_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_Int32_value.name = "value"_c;
    TextureAtomicOr_TextureCube_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_TextureCube_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_Int32.name = "textureAtomicOr"_c;
    TextureAtomicOr_TextureCube_Int32.backendIndex = 2852;
    TextureAtomicOr_TextureCube_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_TextureCube_Int32.parameters = TextureAtomicOr_TextureCube_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->signature = "textureAtomicOr(uniform *textureCube,i32x3,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->name = "textureAtomicOr(uniform *textureCube,i32x3,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int32)->returnTypeSymbol = &Int32Type;

    /// textureAtomicOr with TextureCube, Int32x3, UInt16
    TextureAtomicOr_TextureCube_UInt16_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_UInt16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_UInt16_texture.type.modifiers = TextureAtomicOr_TextureCube_UInt16_texture_modifiers;
    TextureAtomicOr_TextureCube_UInt16_texture.type.modifierValues = TextureAtomicOr_TextureCube_UInt16_texture_modifierValues;
    TextureAtomicOr_TextureCube_UInt16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_UInt16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_UInt16_value.name = "value"_c;
    TextureAtomicOr_TextureCube_UInt16_value.type = Type::FullType{ UInt16Type.name };
    TextureAtomicOr_TextureCube_UInt16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_UInt16.name = "textureAtomicOr"_c;
    TextureAtomicOr_TextureCube_UInt16.backendIndex = 2853;
    TextureAtomicOr_TextureCube_UInt16.returnType = Type::FullType { UInt16Type.name };
    TextureAtomicOr_TextureCube_UInt16.parameters = TextureAtomicOr_TextureCube_UInt16_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16_value)->typeSymbol = &UInt16Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->signature = "textureAtomicOr(uniform *textureCube,i32x3,u16) u16"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->name = "textureAtomicOr(uniform *textureCube,i32x3,u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : u16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_UInt16)->returnTypeSymbol = &UInt16Type;

    /// textureAtomicOr with TextureCube, Int32x3, Int16
    TextureAtomicOr_TextureCube_Int16_texture.name = "texture"_c;
    TextureAtomicOr_TextureCube_Int16_texture.type = Type::FullType{ TextureCubeType.name };
    TextureAtomicOr_TextureCube_Int16_texture.type.modifiers = TextureAtomicOr_TextureCube_Int16_texture_modifiers;
    TextureAtomicOr_TextureCube_Int16_texture.type.modifierValues = TextureAtomicOr_TextureCube_Int16_texture_modifierValues;
    TextureAtomicOr_TextureCube_Int16_coordinate.name = "coordinate"_c;
    TextureAtomicOr_TextureCube_Int16_coordinate.type = Type::FullType{ Int32x3Type.name };
    TextureAtomicOr_TextureCube_Int16_value.name = "value"_c;
    TextureAtomicOr_TextureCube_Int16_value.type = Type::FullType{ Int16Type.name };
    TextureAtomicOr_TextureCube_Int16.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_TextureCube_Int16.name = "textureAtomicOr"_c;
    TextureAtomicOr_TextureCube_Int16.backendIndex = 2854;
    TextureAtomicOr_TextureCube_Int16.returnType = Type::FullType { Int16Type.name };
    TextureAtomicOr_TextureCube_Int16.parameters = TextureAtomicOr_TextureCube_Int16_args;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_texture)->typeSymbol = &TextureCubeType;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_coordinate)->typeSymbol = &Int32x3Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16_value)->typeSymbol = &Int16Type;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->signature = "textureAtomicOr(uniform *textureCube,i32x3,i16) i16"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->name = "textureAtomicOr(uniform *textureCube,i32x3,i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->nameWithVarNames = "textureAtomicOr(texture : uniform *textureCube, coordinate : i32x3, value : i16)"_c;
    Symbol::Resolved(&TextureAtomicOr_TextureCube_Int16)->returnTypeSymbol = &Int16Type;

    /// textureAtomicOr with Texture1DArray, Int32x2, UInt32
    TextureAtomicOr_Texture1DArray_UInt32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1DArray_UInt32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicOr_Texture1DArray_UInt32_texture.type.modifiers = TextureAtomicOr_Texture1DArray_UInt32_texture_modifiers;
    TextureAtomicOr_Texture1DArray_UInt32_texture.type.modifierValues = TextureAtomicOr_Texture1DArray_UInt32_texture_modifierValues;
    TextureAtomicOr_Texture1DArray_UInt32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1DArray_UInt32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture1DArray_UInt32_value.name = "value"_c;
    TextureAtomicOr_Texture1DArray_UInt32_value.type = Type::FullType{ UInt32Type.name };
    TextureAtomicOr_Texture1DArray_UInt32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1DArray_UInt32.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture1DArray_UInt32.backendIndex = 2855;
    TextureAtomicOr_Texture1DArray_UInt32.returnType = Type::FullType { UInt32Type.name };
    TextureAtomicOr_Texture1DArray_UInt32.parameters = TextureAtomicOr_Texture1DArray_UInt32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32_value)->typeSymbol = &UInt32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->signature = "textureAtomicOr(uniform *texture1DArray,i32x2,u32) u32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->name = "textureAtomicOr(uniform *texture1DArray,i32x2,u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1DArray, coordinate : i32x2, value : u32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_UInt32)->returnTypeSymbol = &UInt32Type;

    /// textureAtomicOr with Texture1DArray, Int32x2, Int32
    TextureAtomicOr_Texture1DArray_Int32_texture.name = "texture"_c;
    TextureAtomicOr_Texture1DArray_Int32_texture.type = Type::FullType{ Texture1DArrayType.name };
    TextureAtomicOr_Texture1DArray_Int32_texture.type.modifiers = TextureAtomicOr_Texture1DArray_Int32_texture_modifiers;
    TextureAtomicOr_Texture1DArray_Int32_texture.type.modifierValues = TextureAtomicOr_Texture1DArray_Int32_texture_modifierValues;
    TextureAtomicOr_Texture1DArray_Int32_coordinate.name = "coordinate"_c;
    TextureAtomicOr_Texture1DArray_Int32_coordinate.type = Type::FullType{ Int32x2Type.name };
    TextureAtomicOr_Texture1DArray_Int32_value.name = "value"_c;
    TextureAtomicOr_Texture1DArray_Int32_value.type = Type::FullType{ Int32Type.name };
    TextureAtomicOr_Texture1DArray_Int32.documentation = "Get a pointer to a texel. This enables it to be used for atomic operations."_c;
    TextureAtomicOr_Texture1DArray_Int32.name = "textureAtomicOr"_c;
    TextureAtomicOr_Texture1DArray_Int32.backendIndex = 2856;
    TextureAtomicOr_Texture1DArray_Int32.returnType = Type::FullType { Int32Type.name };
    TextureAtomicOr_Texture1DArray_Int32.parameters = TextureAtomicOr_Texture1DArray_Int32_args;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_texture)->typeSymbol = &Texture1DArrayType;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_texture)->storage = Storage::Uniform;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_coordinate)->typeSymbol = &Int32x2Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32_value)->typeSymbol = &Int32Type;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->signature = "textureAtomicOr(uniform *texture1DArray,i32x2,i32) i32"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->name = "textureAtomicOr(uniform *texture1DArray,i32x2,i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->nameWithVarNames = "textureAtomicOr(texture : uniform *texture1DArray, coordinate : i32x2, value : i32)"_c;
    Symbol::Resolved(&TextureAtomicOr_Texture1DArray_Int32)->returnTypeSymbol = &Int32Type;

}
} // namespace GPULang
